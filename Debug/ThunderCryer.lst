
ThunderCryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c524  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000138  0801c6ac  0801c6ac  000246ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000208  0801c7e4  0801c7e4  000247e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801c9ec  0801c9ec  000249ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c9f4  0801c9f4  000249f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000090c  20000000  0801c9f8  00028000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f7c  20000910  0801d304  00028910  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  2000188c  0801d304  0002988c  2**0
                  ALLOC
  9 .ARM.attributes 00000033  00000000  00000000  0002890c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00021197  00000000  00000000  0002893f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00047e28  00000000  00000000  00049ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000e91b  00000000  00000000  000918fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002ec0  00000000  00000000  000a0220  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000030e0  00000000  00000000  000a30e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000011  00000000  00000000  000a61c0  2**0
                  CONTENTS, READONLY
 16 .debug_loc    0001f49f  00000000  00000000  000a61d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 0108af4d  00000000  00000000  000c5670  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000fa7b  00000000  00000000  011505bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  00009428  00000000  00000000  01160038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000910 	.word	0x20000910
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801c694 	.word	0x0801c694

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0801c694 	.word	0x0801c694
 80001d0:	20000914 	.word	0x20000914
 80001d4:	2000090c 	.word	0x2000090c
 80001d8:	00000000 	.word	0x00000000

080001dc <d_fill_name>:
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d005      	beq.n	80001fa <d_fill_name+0x1e>
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d002      	beq.n	80001fa <d_fill_name+0x1e>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d102      	bne.n	8000200 <d_fill_name+0x24>
 80001fa:	f04f 0300 	mov.w	r3, #0
 80001fe:	e00b      	b.n	8000218 <d_fill_name+0x3c>
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f04f 0200 	mov.w	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	f04f 0301 	mov.w	r3, #1
 8000218:	4618      	mov	r0, r3
 800021a:	f107 0714 	add.w	r7, r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <d_fill_extended_operator>:
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d005      	beq.n	8000242 <d_fill_extended_operator+0x1e>
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db02      	blt.n	8000242 <d_fill_extended_operator+0x1e>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d102      	bne.n	8000248 <d_fill_extended_operator+0x24>
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	e00b      	b.n	8000260 <d_fill_extended_operator+0x3c>
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f04f 022d 	mov.w	r2, #45	; 0x2d
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	f04f 0301 	mov.w	r3, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f107 0714 	add.w	r7, r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <d_fill_ctor>:
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	460b      	mov	r3, r1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	72fb      	strb	r3, [r7, #11]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d008      	beq.n	8000292 <d_fill_ctor+0x26>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <d_fill_ctor+0x26>
 8000286:	7afb      	ldrb	r3, [r7, #11]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <d_fill_ctor+0x26>
 800028c:	7afb      	ldrb	r3, [r7, #11]
 800028e:	2b03      	cmp	r3, #3
 8000290:	d902      	bls.n	8000298 <d_fill_ctor+0x2c>
 8000292:	f04f 0300 	mov.w	r3, #0
 8000296:	e00b      	b.n	80002b0 <d_fill_ctor+0x44>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f04f 0207 	mov.w	r2, #7
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	7afa      	ldrb	r2, [r7, #11]
 80002a4:	711a      	strb	r2, [r3, #4]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	f04f 0301 	mov.w	r3, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f107 0714 	add.w	r7, r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <d_fill_dtor>:
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	460b      	mov	r3, r1
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	72fb      	strb	r3, [r7, #11]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d008      	beq.n	80002e2 <d_fill_dtor+0x26>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d005      	beq.n	80002e2 <d_fill_dtor+0x26>
 80002d6:	7afb      	ldrb	r3, [r7, #11]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <d_fill_dtor+0x26>
 80002dc:	7afb      	ldrb	r3, [r7, #11]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d902      	bls.n	80002e8 <d_fill_dtor+0x2c>
 80002e2:	f04f 0300 	mov.w	r3, #0
 80002e6:	e00b      	b.n	8000300 <d_fill_dtor+0x44>
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	f04f 0208 	mov.w	r2, #8
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	7afa      	ldrb	r2, [r7, #11]
 80002f4:	711a      	strb	r2, [r3, #4]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	f04f 0301 	mov.w	r3, #1
 8000300:	4618      	mov	r0, r3
 8000302:	f107 0714 	add.w	r7, r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <d_make_empty>:
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	429a      	cmp	r2, r3
 800031e:	db02      	blt.n	8000326 <d_make_empty+0x1a>
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	e013      	b.n	800034e <d_make_empty+0x42>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6919      	ldr	r1, [r3, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	461a      	mov	r2, r3
 8000330:	4613      	mov	r3, r2
 8000332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000336:	189b      	adds	r3, r3, r2
 8000338:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800033c:	18cb      	adds	r3, r1, r3
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f103 0201 	add.w	r2, r3, #1
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	615a      	str	r2, [r3, #20]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	4618      	mov	r0, r3
 8000350:	f107 0714 	add.w	r7, r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <d_make_comp>:
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	607a      	str	r2, [r7, #4]
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	460b      	mov	r3, r1
 800036a:	72fb      	strb	r3, [r7, #11]
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	f103 33ff 	add.w	r3, r3, #4294967295
 8000372:	2b41      	cmp	r3, #65	; 0x41
 8000374:	f200 809d 	bhi.w	80004b2 <d_make_comp+0x156>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <d_make_comp+0x24>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	08000489 	.word	0x08000489
 8000384:	08000489 	.word	0x08000489
 8000388:	08000489 	.word	0x08000489
 800038c:	08000489 	.word	0x08000489
 8000390:	080004b3 	.word	0x080004b3
 8000394:	080004b3 	.word	0x080004b3
 8000398:	080004b3 	.word	0x080004b3
 800039c:	080004b3 	.word	0x080004b3
 80003a0:	0800049b 	.word	0x0800049b
 80003a4:	0800049b 	.word	0x0800049b
 80003a8:	08000489 	.word	0x08000489
 80003ac:	0800049b 	.word	0x0800049b
 80003b0:	0800049b 	.word	0x0800049b
 80003b4:	0800049b 	.word	0x0800049b
 80003b8:	0800049b 	.word	0x0800049b
 80003bc:	0800049b 	.word	0x0800049b
 80003c0:	0800049b 	.word	0x0800049b
 80003c4:	0800049b 	.word	0x0800049b
 80003c8:	0800049b 	.word	0x0800049b
 80003cc:	0800049b 	.word	0x0800049b
 80003d0:	0800049b 	.word	0x0800049b
 80003d4:	080004b3 	.word	0x080004b3
 80003d8:	080004b9 	.word	0x080004b9
 80003dc:	080004b9 	.word	0x080004b9
 80003e0:	080004b9 	.word	0x080004b9
 80003e4:	080004b9 	.word	0x080004b9
 80003e8:	080004b9 	.word	0x080004b9
 80003ec:	080004b9 	.word	0x080004b9
 80003f0:	08000489 	.word	0x08000489
 80003f4:	0800049b 	.word	0x0800049b
 80003f8:	0800049b 	.word	0x0800049b
 80003fc:	0800049b 	.word	0x0800049b
 8000400:	0800049b 	.word	0x0800049b
 8000404:	0800049b 	.word	0x0800049b
 8000408:	080004b3 	.word	0x080004b3
 800040c:	0800049b 	.word	0x0800049b
 8000410:	080004b9 	.word	0x080004b9
 8000414:	080004a7 	.word	0x080004a7
 8000418:	08000489 	.word	0x08000489
 800041c:	080004b3 	.word	0x080004b3
 8000420:	08000489 	.word	0x08000489
 8000424:	080004b9 	.word	0x080004b9
 8000428:	080004b9 	.word	0x080004b9
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b3 	.word	0x080004b3
 8000434:	0800049b 	.word	0x0800049b
 8000438:	08000489 	.word	0x08000489
 800043c:	08000489 	.word	0x08000489
 8000440:	08000489 	.word	0x08000489
 8000444:	08000489 	.word	0x08000489
 8000448:	08000489 	.word	0x08000489
 800044c:	08000489 	.word	0x08000489
 8000450:	08000489 	.word	0x08000489
 8000454:	08000489 	.word	0x08000489
 8000458:	0800049b 	.word	0x0800049b
 800045c:	08000489 	.word	0x08000489
 8000460:	080004b3 	.word	0x080004b3
 8000464:	080004b3 	.word	0x080004b3
 8000468:	0800049b 	.word	0x0800049b
 800046c:	0800049b 	.word	0x0800049b
 8000470:	0800049b 	.word	0x0800049b
 8000474:	080004b3 	.word	0x080004b3
 8000478:	080004b3 	.word	0x080004b3
 800047c:	080004b3 	.word	0x080004b3
 8000480:	0800049b 	.word	0x0800049b
 8000484:	08000489 	.word	0x08000489
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <d_make_comp+0x138>
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d113      	bne.n	80004bc <d_make_comp+0x160>
 8000494:	f04f 0300 	mov.w	r3, #0
 8000498:	e027      	b.n	80004ea <d_make_comp+0x18e>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10f      	bne.n	80004c0 <d_make_comp+0x164>
 80004a0:	f04f 0300 	mov.w	r3, #0
 80004a4:	e021      	b.n	80004ea <d_make_comp+0x18e>
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d10b      	bne.n	80004c4 <d_make_comp+0x168>
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	e01b      	b.n	80004ea <d_make_comp+0x18e>
 80004b2:	f04f 0300 	mov.w	r3, #0
 80004b6:	e018      	b.n	80004ea <d_make_comp+0x18e>
 80004b8:	bf00      	nop
 80004ba:	e004      	b.n	80004c6 <d_make_comp+0x16a>
 80004bc:	bf00      	nop
 80004be:	e002      	b.n	80004c6 <d_make_comp+0x16a>
 80004c0:	bf00      	nop
 80004c2:	e000      	b.n	80004c6 <d_make_comp+0x16a>
 80004c4:	bf00      	nop
 80004c6:	68f8      	ldr	r0, [r7, #12]
 80004c8:	f7ff ff20 	bl	800030c <d_make_empty>
 80004cc:	4603      	mov	r3, r0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <d_make_comp+0x18c>
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	7afa      	ldrb	r2, [r7, #11]
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f107 0718 	add.w	r7, r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <d_make_demangle_mangled_name>:
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b5f      	cmp	r3, #95	; 0x5f
 8000506:	d106      	bne.n	8000516 <d_make_demangle_mangled_name+0x22>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	f103 0301 	add.w	r3, r3, #1
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b5a      	cmp	r3, #90	; 0x5a
 8000514:	d00a      	beq.n	800052c <d_make_demangle_mangled_name+0x38>
 8000516:	6838      	ldr	r0, [r7, #0]
 8000518:	f007 fe3c 	bl	8008194 <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	6839      	ldr	r1, [r7, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	f000 f814 	bl	8000550 <d_make_name>
 8000528:	4603      	mov	r3, r0
 800052a:	e00b      	b.n	8000544 <d_make_demangle_mangled_name+0x50>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	f103 0202 	add.w	r2, r3, #2
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f04f 0100 	mov.w	r1, #0
 800053e:	f000 fa4d 	bl	80009dc <d_encoding>
 8000542:	4603      	mov	r3, r0
 8000544:	4618      	mov	r0, r3
 8000546:	f107 0708 	add.w	r7, r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop

08000550 <d_make_name>:
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f7ff fed5 	bl	800030c <d_make_empty>
 8000562:	4603      	mov	r3, r0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	6978      	ldr	r0, [r7, #20]
 8000568:	68b9      	ldr	r1, [r7, #8]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	f7ff fe36 	bl	80001dc <d_fill_name>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d102      	bne.n	800057c <d_make_name+0x2c>
 8000576:	f04f 0300 	mov.w	r3, #0
 800057a:	e000      	b.n	800057e <d_make_name+0x2e>
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	4618      	mov	r0, r3
 8000580:	f107 0718 	add.w	r7, r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <d_make_builtin_type>:
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <d_make_builtin_type+0x16>
 8000598:	f04f 0300 	mov.w	r3, #0
 800059c:	e00f      	b.n	80005be <d_make_builtin_type+0x36>
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff feb4 	bl	800030c <d_make_empty>
 80005a4:	4603      	mov	r3, r0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d006      	beq.n	80005bc <d_make_builtin_type+0x34>
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f04f 0223 	mov.w	r2, #35	; 0x23
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f107 0710 	add.w	r7, r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <d_make_operator>:
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff fe9a 	bl	800030c <d_make_empty>
 80005d8:	4603      	mov	r3, r0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <d_make_operator+0x28>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f04f 022c 	mov.w	r2, #44	; 0x2c
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f107 0710 	add.w	r7, r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <d_make_extended_operator>:
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff fe7f 	bl	800030c <d_make_empty>
 800060e:	4603      	mov	r3, r0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	6978      	ldr	r0, [r7, #20]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	f7ff fe04 	bl	8000224 <d_fill_extended_operator>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <d_make_extended_operator+0x2c>
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	e000      	b.n	800062a <d_make_extended_operator+0x2e>
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	4618      	mov	r0, r3
 800062c:	f107 0718 	add.w	r7, r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <d_make_default_arg>:
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff fe63 	bl	800030c <d_make_empty>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <d_make_default_arg+0x30>
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4618      	mov	r0, r3
 8000668:	f107 0718 	add.w	r7, r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <d_make_ctor>:
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	460b      	mov	r3, r1
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	72fb      	strb	r3, [r7, #11]
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f7ff fe44 	bl	800030c <d_make_empty>
 8000684:	4603      	mov	r3, r0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	6978      	ldr	r0, [r7, #20]
 800068c:	4619      	mov	r1, r3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	f7ff fdec 	bl	800026c <d_fill_ctor>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d102      	bne.n	80006a0 <d_make_ctor+0x30>
 800069a:	f04f 0300 	mov.w	r3, #0
 800069e:	e000      	b.n	80006a2 <d_make_ctor+0x32>
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f107 0718 	add.w	r7, r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <d_make_dtor>:
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	460b      	mov	r3, r1
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	72fb      	strb	r3, [r7, #11]
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff fe26 	bl	800030c <d_make_empty>
 80006c0:	4603      	mov	r3, r0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	6978      	ldr	r0, [r7, #20]
 80006c8:	4619      	mov	r1, r3
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	f7ff fdf6 	bl	80002bc <d_fill_dtor>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d102      	bne.n	80006dc <d_make_dtor+0x30>
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	e000      	b.n	80006de <d_make_dtor+0x32>
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	4618      	mov	r0, r3
 80006e0:	f107 0718 	add.w	r7, r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <d_make_template_param>:
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff fe0a 	bl	800030c <d_make_empty>
 80006f8:	4603      	mov	r3, r0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d006      	beq.n	8000710 <d_make_template_param+0x28>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f04f 0205 	mov.w	r2, #5
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4618      	mov	r0, r3
 8000714:	f107 0710 	add.w	r7, r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <d_make_function_param>:
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff fdf0 	bl	800030c <d_make_empty>
 800072c:	4603      	mov	r3, r0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <d_make_function_param+0x28>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f04f 0206 	mov.w	r2, #6
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4618      	mov	r0, r3
 8000748:	f107 0710 	add.w	r7, r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <d_make_sub>:
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff fdd5 	bl	800030c <d_make_empty>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d009      	beq.n	8000780 <d_make_sub+0x30>
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	f04f 0216 	mov.w	r2, #22
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4618      	mov	r0, r3
 8000784:	f107 0718 	add.w	r7, r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <d_mangled_name>:
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b5f      	cmp	r3, #95	; 0x5f
 800079e:	d108      	bne.n	80007b2 <d_mangled_name+0x26>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f103 0201 	add.w	r2, r3, #1
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	e001      	b.n	80007b6 <d_mangled_name+0x2a>
 80007b2:	f04f 0301 	mov.w	r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <d_mangled_name+0x3a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <d_mangled_name+0x3a>
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e054      	b.n	8000870 <d_mangled_name+0xe4>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b5a      	cmp	r3, #90	; 0x5a
 80007ce:	d108      	bne.n	80007e2 <d_mangled_name+0x56>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f103 0201 	add.w	r2, r3, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e001      	b.n	80007e6 <d_mangled_name+0x5a>
 80007e2:	f04f 0301 	mov.w	r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <d_mangled_name+0x64>
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e03f      	b.n	8000870 <d_mangled_name+0xe4>
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	f000 f8f2 	bl	80009dc <d_encoding>
 80007f8:	4603      	mov	r3, r0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d035      	beq.n	800086e <d_mangled_name+0xe2>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d02e      	beq.n	800086e <d_mangled_name+0xe2>
 8000810:	e005      	b.n	800081e <d_mangled_name+0x92>
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	f002 fcbb 	bl	8003190 <d_clone_suffix>
 800081a:	4603      	mov	r3, r0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b2e      	cmp	r3, #46	; 0x2e
 8000826:	d122      	bne.n	800086e <d_mangled_name+0xe2>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	f103 0301 	add.w	r3, r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b60      	cmp	r3, #96	; 0x60
 8000834:	d906      	bls.n	8000844 <d_mangled_name+0xb8>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f103 0301 	add.w	r3, r3, #1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b7a      	cmp	r3, #122	; 0x7a
 8000842:	d9e6      	bls.n	8000812 <d_mangled_name+0x86>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f103 0301 	add.w	r3, r3, #1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b5f      	cmp	r3, #95	; 0x5f
 8000850:	d0df      	beq.n	8000812 <d_mangled_name+0x86>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f103 0301 	add.w	r3, r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b2f      	cmp	r3, #47	; 0x2f
 800085e:	d906      	bls.n	800086e <d_mangled_name+0xe2>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f103 0301 	add.w	r3, r3, #1
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b39      	cmp	r3, #57	; 0x39
 800086c:	d9d1      	bls.n	8000812 <d_mangled_name+0x86>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4618      	mov	r0, r3
 8000872:	f107 0710 	add.w	r7, r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop

0800087c <has_return_type>:
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <has_return_type+0x14>
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e01d      	b.n	80008cc <has_return_type+0x50>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d008      	beq.n	80008aa <has_return_type+0x2e>
 8000898:	2b04      	cmp	r3, #4
 800089a:	db03      	blt.n	80008a4 <has_return_type+0x28>
 800089c:	f1a3 031a 	sub.w	r3, r3, #26
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d90d      	bls.n	80008c0 <has_return_type+0x44>
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	e010      	b.n	80008cc <has_return_type+0x50>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f812 	bl	80008d8 <is_ctor_dtor_or_conversion>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2300      	movne	r3, #0
 80008bc:	2301      	moveq	r3, #1
 80008be:	e005      	b.n	80008cc <has_return_type+0x50>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffd9 	bl	800087c <has_return_type>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f107 0708 	add.w	r7, r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop

080008d8 <is_ctor_dtor_or_conversion>:
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <is_ctor_dtor_or_conversion+0x14>
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	e071      	b.n	80009d0 <is_ctor_dtor_or_conversion+0xf8>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80008f4:	2b2d      	cmp	r3, #45	; 0x2d
 80008f6:	d85f      	bhi.n	80009b8 <is_ctor_dtor_or_conversion+0xe0>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <is_ctor_dtor_or_conversion+0x28>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	080009bf 	.word	0x080009bf
 8000904:	080009bf 	.word	0x080009bf
 8000908:	080009b9 	.word	0x080009b9
 800090c:	080009b9 	.word	0x080009b9
 8000910:	080009b9 	.word	0x080009b9
 8000914:	080009b9 	.word	0x080009b9
 8000918:	080009cd 	.word	0x080009cd
 800091c:	080009cd 	.word	0x080009cd
 8000920:	080009b9 	.word	0x080009b9
 8000924:	080009b9 	.word	0x080009b9
 8000928:	080009b9 	.word	0x080009b9
 800092c:	080009b9 	.word	0x080009b9
 8000930:	080009b9 	.word	0x080009b9
 8000934:	080009b9 	.word	0x080009b9
 8000938:	080009b9 	.word	0x080009b9
 800093c:	080009b9 	.word	0x080009b9
 8000940:	080009b9 	.word	0x080009b9
 8000944:	080009b9 	.word	0x080009b9
 8000948:	080009b9 	.word	0x080009b9
 800094c:	080009b9 	.word	0x080009b9
 8000950:	080009b9 	.word	0x080009b9
 8000954:	080009b9 	.word	0x080009b9
 8000958:	080009b9 	.word	0x080009b9
 800095c:	080009b9 	.word	0x080009b9
 8000960:	080009b9 	.word	0x080009b9
 8000964:	080009b9 	.word	0x080009b9
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009b9 	.word	0x080009b9
 8000970:	080009b9 	.word	0x080009b9
 8000974:	080009b9 	.word	0x080009b9
 8000978:	080009b9 	.word	0x080009b9
 800097c:	080009b9 	.word	0x080009b9
 8000980:	080009b9 	.word	0x080009b9
 8000984:	080009b9 	.word	0x080009b9
 8000988:	080009b9 	.word	0x080009b9
 800098c:	080009b9 	.word	0x080009b9
 8000990:	080009b9 	.word	0x080009b9
 8000994:	080009b9 	.word	0x080009b9
 8000998:	080009b9 	.word	0x080009b9
 800099c:	080009b9 	.word	0x080009b9
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009b9 	.word	0x080009b9
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	080009b9 	.word	0x080009b9
 80009b0:	080009b9 	.word	0x080009b9
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	e008      	b.n	80009d0 <is_ctor_dtor_or_conversion+0xf8>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff88 	bl	80008d8 <is_ctor_dtor_or_conversion>
 80009c8:	4603      	mov	r3, r0
 80009ca:	e001      	b.n	80009d0 <is_ctor_dtor_or_conversion+0xf8>
 80009cc:	f04f 0301 	mov.w	r3, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f107 0708 	add.w	r7, r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop

080009dc <d_encoding>:
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b47      	cmp	r3, #71	; 0x47
 80009f2:	d002      	beq.n	80009fa <d_encoding+0x1e>
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b54      	cmp	r3, #84	; 0x54
 80009f8:	d104      	bne.n	8000a04 <d_encoding+0x28>
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 fd1c 	bl	8001438 <d_special_name>
 8000a00:	4603      	mov	r3, r0
 8000a02:	e05b      	b.n	8000abc <d_encoding+0xe0>
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 f85f 	bl	8000ac8 <d_name>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d034      	beq.n	8000a7e <d_encoding+0xa2>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d031      	beq.n	8000a7e <d_encoding+0xa2>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d12b      	bne.n	8000a7e <d_encoding+0xa2>
 8000a26:	e002      	b.n	8000a2e <d_encoding+0x52>
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b1a      	cmp	r3, #26
 8000a34:	d0f8      	beq.n	8000a28 <d_encoding+0x4c>
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b1b      	cmp	r3, #27
 8000a3c:	d0f4      	beq.n	8000a28 <d_encoding+0x4c>
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b1c      	cmp	r3, #28
 8000a44:	d0f0      	beq.n	8000a28 <d_encoding+0x4c>
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d115      	bne.n	8000a7a <d_encoding+0x9e>
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	e002      	b.n	8000a5c <d_encoding+0x80>
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b1a      	cmp	r3, #26
 8000a62:	d0f8      	beq.n	8000a56 <d_encoding+0x7a>
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b1b      	cmp	r3, #27
 8000a6a:	d0f4      	beq.n	8000a56 <d_encoding+0x7a>
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b1c      	cmp	r3, #28
 8000a72:	d0f0      	beq.n	8000a56 <d_encoding+0x7a>
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	e01e      	b.n	8000abc <d_encoding+0xe0>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <d_encoding+0xbc>
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <d_encoding+0xbc>
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b45      	cmp	r3, #69	; 0x45
 8000a96:	d101      	bne.n	8000a9c <d_encoding+0xc0>
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	e00f      	b.n	8000abc <d_encoding+0xe0>
 8000a9c:	6978      	ldr	r0, [r7, #20]
 8000a9e:	f7ff feed 	bl	800087c <has_return_type>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f001 fc7e 	bl	80023a8 <d_bare_function_type>
 8000aac:	4603      	mov	r3, r0
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f04f 0103 	mov.w	r1, #3
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	f7ff fc51 	bl	800035c <d_make_comp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f107 0718 	add.w	r7, r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop

08000ac8 <d_name>:
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8000ade:	2b0e      	cmp	r3, #14
 8000ae0:	f200 8088 	bhi.w	8000bf4 <d_name+0x12c>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <d_name+0x24>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000bf5 	.word	0x08000bf5
 8000af4:	08000b29 	.word	0x08000b29
 8000af8:	08000bf5 	.word	0x08000bf5
 8000afc:	08000bf5 	.word	0x08000bf5
 8000b00:	08000bf5 	.word	0x08000bf5
 8000b04:	08000bf5 	.word	0x08000bf5
 8000b08:	08000b47 	.word	0x08000b47
 8000b0c:	08000bf5 	.word	0x08000bf5
 8000b10:	08000b3d 	.word	0x08000b3d
 8000b14:	08000bf5 	.word	0x08000bf5
 8000b18:	08000bf5 	.word	0x08000bf5
 8000b1c:	08000bf5 	.word	0x08000bf5
 8000b20:	08000bf5 	.word	0x08000bf5
 8000b24:	08000b33 	.word	0x08000b33
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f889 	bl	8000c40 <d_nested_name>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e081      	b.n	8000c36 <d_name+0x16e>
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f002 f990 	bl	8002e58 <d_local_name>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	e07c      	b.n	8000c36 <d_name+0x16e>
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f96b 	bl	8000e18 <d_unqualified_name>
 8000b42:	4603      	mov	r3, r0
 8000b44:	e077      	b.n	8000c36 <d_name+0x16e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f103 0301 	add.w	r3, r3, #1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b74      	cmp	r3, #116	; 0x74
 8000b52:	d00a      	beq.n	8000b6a <d_name+0xa2>
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f04f 0100 	mov.w	r1, #0
 8000b5a:	f002 fbbd 	bl	80032d8 <d_substitution>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	f04f 0301 	mov.w	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	e024      	b.n	8000bb4 <d_name+0xec>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	f103 0202 	add.w	r2, r3, #2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f647 3150 	movw	r1, #31568	; 0x7b50
 8000b7c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8000b80:	f04f 0203 	mov.w	r2, #3
 8000b84:	f7ff fce4 	bl	8000550 <d_make_name>
 8000b88:	4604      	mov	r4, r0
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f944 	bl	8000e18 <d_unqualified_name>
 8000b90:	4603      	mov	r3, r0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f04f 0101 	mov.w	r1, #1
 8000b98:	4622      	mov	r2, r4
 8000b9a:	f7ff fbdf 	bl	800035c <d_make_comp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f103 0203 	add.w	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b49      	cmp	r3, #73	; 0x49
 8000bbc:	d118      	bne.n	8000bf0 <d_name+0x128>
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d109      	bne.n	8000bd8 <d_name+0x110>
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	6979      	ldr	r1, [r7, #20]
 8000bc8:	f002 fb5a 	bl	8003280 <d_add_substitution>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <d_name+0x110>
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	e02e      	b.n	8000c36 <d_name+0x16e>
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f001 fdc3 	bl	8002764 <d_template_args>
 8000bde:	4603      	mov	r3, r0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f04f 0104 	mov.w	r1, #4
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	f7ff fbb8 	bl	800035c <d_make_comp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	e020      	b.n	8000c36 <d_name+0x16e>
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f90f 	bl	8000e18 <d_unqualified_name>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b49      	cmp	r3, #73	; 0x49
 8000c06:	d115      	bne.n	8000c34 <d_name+0x16c>
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	6979      	ldr	r1, [r7, #20]
 8000c0c:	f002 fb38 	bl	8003280 <d_add_substitution>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <d_name+0x154>
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e00c      	b.n	8000c36 <d_name+0x16e>
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 fda1 	bl	8002764 <d_template_args>
 8000c22:	4603      	mov	r3, r0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f04f 0104 	mov.w	r1, #4
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	f7ff fb96 	bl	800035c <d_make_comp>
 8000c30:	4603      	mov	r3, r0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f107 071c 	add.w	r7, r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}

08000c40 <d_nested_name>:
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b4e      	cmp	r3, #78	; 0x4e
 8000c50:	d108      	bne.n	8000c64 <d_nested_name+0x24>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f103 0201 	add.w	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	e001      	b.n	8000c68 <d_nested_name+0x28>
 8000c64:	f04f 0301 	mov.w	r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <d_nested_name+0x32>
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e032      	b.n	8000cd8 <d_nested_name+0x98>
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 0201 	mov.w	r2, #1
 8000c7e:	f001 fa77 	bl	8002170 <d_cv_qualifiers>
 8000c82:	4603      	mov	r3, r0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <d_nested_name+0x52>
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e022      	b.n	8000cd8 <d_nested_name+0x98>
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f826 	bl	8000ce4 <d_prefix>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <d_nested_name+0x6c>
 8000ca6:	f04f 0300 	mov.w	r3, #0
 8000caa:	e015      	b.n	8000cd8 <d_nested_name+0x98>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b45      	cmp	r3, #69	; 0x45
 8000cb4:	d108      	bne.n	8000cc8 <d_nested_name+0x88>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f103 0201 	add.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	e001      	b.n	8000ccc <d_nested_name+0x8c>
 8000cc8:	f04f 0301 	mov.w	r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <d_nested_name+0x96>
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <d_nested_name+0x98>
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f107 0710 	add.w	r7, r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop

08000ce4 <d_prefix>:
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e000      	b.n	8000cf6 <d_prefix+0x12>
 8000cf4:	bf00      	nop
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	72fb      	strb	r3, [r7, #11]
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <d_prefix+0x26>
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e081      	b.n	8000e0e <d_prefix+0x12a>
 8000d0a:	f04f 0301 	mov.w	r3, #1
 8000d0e:	74fb      	strb	r3, [r7, #19]
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	2b2f      	cmp	r3, #47	; 0x2f
 8000d14:	d902      	bls.n	8000d1c <d_prefix+0x38>
 8000d16:	7afb      	ldrb	r3, [r7, #11]
 8000d18:	2b39      	cmp	r3, #57	; 0x39
 8000d1a:	d911      	bls.n	8000d40 <d_prefix+0x5c>
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	2b60      	cmp	r3, #96	; 0x60
 8000d20:	d902      	bls.n	8000d28 <d_prefix+0x44>
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	2b7a      	cmp	r3, #122	; 0x7a
 8000d26:	d90b      	bls.n	8000d40 <d_prefix+0x5c>
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	2b43      	cmp	r3, #67	; 0x43
 8000d2c:	d008      	beq.n	8000d40 <d_prefix+0x5c>
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	2b44      	cmp	r3, #68	; 0x44
 8000d32:	d005      	beq.n	8000d40 <d_prefix+0x5c>
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	2b55      	cmp	r3, #85	; 0x55
 8000d38:	d002      	beq.n	8000d40 <d_prefix+0x5c>
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	2b4c      	cmp	r3, #76	; 0x4c
 8000d3e:	d105      	bne.n	8000d4c <d_prefix+0x68>
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f869 	bl	8000e18 <d_unqualified_name>
 8000d46:	4603      	mov	r3, r0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e03e      	b.n	8000dca <d_prefix+0xe6>
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	2b53      	cmp	r3, #83	; 0x53
 8000d50:	d107      	bne.n	8000d62 <d_prefix+0x7e>
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f04f 0101 	mov.w	r1, #1
 8000d58:	f002 fabe 	bl	80032d8 <d_substitution>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e033      	b.n	8000dca <d_prefix+0xe6>
 8000d62:	7afb      	ldrb	r3, [r7, #11]
 8000d64:	2b49      	cmp	r3, #73	; 0x49
 8000d66:	d10e      	bne.n	8000d86 <d_prefix+0xa2>
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <d_prefix+0x90>
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e04c      	b.n	8000e0e <d_prefix+0x12a>
 8000d74:	f04f 0304 	mov.w	r3, #4
 8000d78:	74fb      	strb	r3, [r7, #19]
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f001 fcf2 	bl	8002764 <d_template_args>
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e021      	b.n	8000dca <d_prefix+0xe6>
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	2b54      	cmp	r3, #84	; 0x54
 8000d8a:	d105      	bne.n	8000d98 <d_prefix+0xb4>
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fcb5 	bl	80026fc <d_template_param>
 8000d92:	4603      	mov	r3, r0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e018      	b.n	8000dca <d_prefix+0xe6>
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	2b45      	cmp	r3, #69	; 0x45
 8000d9c:	d101      	bne.n	8000da2 <d_prefix+0xbe>
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	e035      	b.n	8000e0e <d_prefix+0x12a>
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	2b4d      	cmp	r3, #77	; 0x4d
 8000da6:	d10d      	bne.n	8000dc4 <d_prefix+0xe0>
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <d_prefix+0xd0>
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	e02c      	b.n	8000e0e <d_prefix+0x12a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f103 0201 	add.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	bf00      	nop
 8000dc2:	e797      	b.n	8000cf4 <d_prefix+0x10>
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e021      	b.n	8000e0e <d_prefix+0x12a>
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <d_prefix+0xf2>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e008      	b.n	8000de8 <d_prefix+0x104>
 8000dd6:	7cfb      	ldrb	r3, [r7, #19]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f7ff fabc 	bl	800035c <d_make_comp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	2b53      	cmp	r3, #83	; 0x53
 8000dec:	d082      	beq.n	8000cf4 <d_prefix+0x10>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b45      	cmp	r3, #69	; 0x45
 8000df6:	f43f af7d 	beq.w	8000cf4 <d_prefix+0x10>
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	6979      	ldr	r1, [r7, #20]
 8000dfe:	f002 fa3f 	bl	8003280 <d_add_substitution>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f af75 	bne.w	8000cf4 <d_prefix+0x10>
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f107 0718 	add.w	r7, r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <d_unqualified_name>:
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	75fb      	strb	r3, [r7, #23]
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e2c:	d907      	bls.n	8000e3e <d_unqualified_name+0x26>
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b39      	cmp	r3, #57	; 0x39
 8000e32:	d804      	bhi.n	8000e3e <d_unqualified_name+0x26>
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f86d 	bl	8000f14 <d_source_name>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	e065      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b60      	cmp	r3, #96	; 0x60
 8000e42:	d91c      	bls.n	8000e7e <d_unqualified_name+0x66>
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b7a      	cmp	r3, #122	; 0x7a
 8000e48:	d819      	bhi.n	8000e7e <d_unqualified_name+0x66>
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f956 	bl	80010fc <d_operator_name>
 8000e50:	4603      	mov	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00f      	beq.n	8000e7a <d_unqualified_name+0x62>
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e60:	d10b      	bne.n	8000e7a <d_unqualified_name+0x62>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	461a      	mov	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	18d3      	adds	r3, r2, r3
 8000e70:	f103 0307 	add.w	r3, r3, #7
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	e045      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	2b43      	cmp	r3, #67	; 0x43
 8000e82:	d002      	beq.n	8000e8a <d_unqualified_name+0x72>
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	2b44      	cmp	r3, #68	; 0x44
 8000e88:	d104      	bne.n	8000e94 <d_unqualified_name+0x7c>
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fd2e 	bl	80018ec <d_ctor_dtor_name>
 8000e90:	4603      	mov	r3, r0
 8000e92:	e03a      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b4c      	cmp	r3, #76	; 0x4c
 8000e98:	d11b      	bne.n	8000ed2 <d_unqualified_name+0xba>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f103 0201 	add.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f834 	bl	8000f14 <d_source_name>
 8000eac:	4603      	mov	r3, r0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <d_unqualified_name+0xa4>
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	e026      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f002 f86f 	bl	8002fa0 <d_discriminator>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <d_unqualified_name+0xb6>
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e01d      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	e01b      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	2b55      	cmp	r3, #85	; 0x55
 8000ed6:	d116      	bne.n	8000f06 <d_unqualified_name+0xee>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f103 0301 	add.w	r3, r3, #1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b6c      	cmp	r3, #108	; 0x6c
 8000ee4:	d002      	beq.n	8000eec <d_unqualified_name+0xd4>
 8000ee6:	2b74      	cmp	r3, #116	; 0x74
 8000ee8:	d005      	beq.n	8000ef6 <d_unqualified_name+0xde>
 8000eea:	e009      	b.n	8000f00 <d_unqualified_name+0xe8>
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f002 f87b 	bl	8002fe8 <d_lambda>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e009      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f002 f8f2 	bl	80030e0 <d_unnamed_type>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e004      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e001      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f107 0718 	add.w	r7, r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <d_source_name>:
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f817 	bl	8000f50 <d_number>
 8000f22:	4603      	mov	r3, r0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dc02      	bgt.n	8000f32 <d_source_name+0x1e>
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e009      	b.n	8000f46 <d_source_name+0x32>
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	f000 f871 	bl	800101c <d_identifier>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f107 0710 	add.w	r7, r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <d_number>:
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	74fb      	strb	r3, [r7, #19]
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	2b6e      	cmp	r3, #110	; 0x6e
 8000f6a:	d10c      	bne.n	8000f86 <d_number+0x36>
 8000f6c:	f04f 0301 	mov.w	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f103 0201 	add.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	74fb      	strb	r3, [r7, #19]
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	7cfb      	ldrb	r3, [r7, #19]
 8000f8e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f90:	d902      	bls.n	8000f98 <d_number+0x48>
 8000f92:	7cfb      	ldrb	r3, [r7, #19]
 8000f94:	2b39      	cmp	r3, #57	; 0x39
 8000f96:	d90d      	bls.n	8000fb4 <d_number+0x64>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <d_number+0x56>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1c3 0300 	rsb	r3, r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f107 071c 	add.w	r7, r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000fbc:	189b      	adds	r3, r3, r2
 8000fbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	7cfb      	ldrb	r3, [r7, #19]
 8000fc6:	18d3      	adds	r3, r2, r3
 8000fc8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f103 0201 	add.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	74fb      	strb	r3, [r7, #19]
 8000fe2:	e7d3      	b.n	8000f8c <d_number+0x3c>

08000fe4 <d_number_component>:
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f98d 	bl	800030c <d_make_empty>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d009      	beq.n	8001010 <d_number_component+0x2c>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f04f 023a 	mov.w	r2, #58	; 0x3a
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffa3 	bl	8000f50 <d_number>
 800100a:	4602      	mov	r2, r0
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f107 0710 	add.w	r7, r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <d_identifier>:
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	da02      	bge.n	8001042 <d_identifier+0x26>
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e056      	b.n	80010f0 <d_identifier+0xd4>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	18d2      	adds	r2, r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00a      	beq.n	8001070 <d_identifier+0x54>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b24      	cmp	r3, #36	; 0x24
 8001062:	d105      	bne.n	8001070 <d_identifier+0x54>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f103 0201 	add.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b09      	cmp	r3, #9
 8001074:	dd36      	ble.n	80010e4 <d_identifier+0xc8>
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f647 3154 	movw	r1, #31572	; 0x7b54
 800107c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8001080:	f04f 0208 	mov.w	r2, #8
 8001084:	f006 faae 	bl	80075e4 <memcmp>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d12a      	bne.n	80010e4 <d_identifier+0xc8>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f103 0308 	add.w	r3, r3, #8
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2e      	cmp	r3, #46	; 0x2e
 800109c:	d007      	beq.n	80010ae <d_identifier+0x92>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b5f      	cmp	r3, #95	; 0x5f
 80010a4:	d003      	beq.n	80010ae <d_identifier+0x92>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b24      	cmp	r3, #36	; 0x24
 80010ac:	d11a      	bne.n	80010e4 <d_identifier+0xc8>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f103 0301 	add.w	r3, r3, #1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b4e      	cmp	r3, #78	; 0x4e
 80010b8:	d114      	bne.n	80010e4 <d_identifier+0xc8>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f103 0316 	add.w	r3, r3, #22
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f647 3160 	movw	r1, #31584	; 0x7b60
 80010d4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80010d8:	f04f 0215 	mov.w	r2, #21
 80010dc:	f7ff fa38 	bl	8000550 <d_make_name>
 80010e0:	4603      	mov	r3, r0
 80010e2:	e005      	b.n	80010f0 <d_identifier+0xd4>
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	f7ff fa31 	bl	8000550 <d_make_name>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f107 0710 	add.w	r7, r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop

080010fc <d_operator_name>:
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <d_operator_name+0x22>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	7813      	ldrb	r3, [r2, #0]
 8001114:	f102 0101 	add.w	r1, r2, #1
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	60d1      	str	r1, [r2, #12]
 800111c:	e001      	b.n	8001122 <d_operator_name+0x26>
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	75fb      	strb	r3, [r7, #23]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <d_operator_name+0x42>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	7813      	ldrb	r3, [r2, #0]
 8001134:	f102 0101 	add.w	r1, r2, #1
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	60d1      	str	r1, [r2, #12]
 800113c:	e001      	b.n	8001142 <d_operator_name+0x46>
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	75bb      	strb	r3, [r7, #22]
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	2b76      	cmp	r3, #118	; 0x76
 8001148:	d113      	bne.n	8001172 <d_operator_name+0x76>
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	2b2f      	cmp	r3, #47	; 0x2f
 800114e:	d910      	bls.n	8001172 <d_operator_name+0x76>
 8001150:	7dbb      	ldrb	r3, [r7, #22]
 8001152:	2b39      	cmp	r3, #57	; 0x39
 8001154:	d80d      	bhi.n	8001172 <d_operator_name+0x76>
 8001156:	7dbb      	ldrb	r3, [r7, #22]
 8001158:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fed9 	bl	8000f14 <d_source_name>
 8001162:	4603      	mov	r3, r0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4621      	mov	r1, r4
 8001168:	461a      	mov	r2, r3
 800116a:	f7ff fa47 	bl	80005fc <d_make_extended_operator>
 800116e:	4603      	mov	r3, r0
 8001170:	e065      	b.n	800123e <d_operator_name+0x142>
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b63      	cmp	r3, #99	; 0x63
 8001176:	d110      	bne.n	800119a <d_operator_name+0x9e>
 8001178:	7dbb      	ldrb	r3, [r7, #22]
 800117a:	2b76      	cmp	r3, #118	; 0x76
 800117c:	d10d      	bne.n	800119a <d_operator_name+0x9e>
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fc3a 	bl	80019f8 <d_type>
 8001184:	4603      	mov	r3, r0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800118c:	461a      	mov	r2, r3
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	f7ff f8e3 	bl	800035c <d_make_comp>
 8001196:	4603      	mov	r3, r0
 8001198:	e051      	b.n	800123e <d_operator_name+0x142>
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	f04f 0334 	mov.w	r3, #52	; 0x34
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	e000      	b.n	80011aa <d_operator_name+0xae>
 80011a8:	bf00      	nop
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	ea4f 0363 	mov.w	r3, r3, asr #1
 80011ba:	461a      	mov	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	ea4f 1203 	mov.w	r2, r3, lsl #4
 80011c8:	f647 531c 	movw	r3, #32028	; 0x7d1c
 80011cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	7dfa      	ldrb	r2, [r7, #23]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d10d      	bne.n	80011fc <d_operator_name+0x100>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f103 0301 	add.w	r3, r3, #1
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	7dba      	ldrb	r2, [r7, #22]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d105      	bne.n	80011fc <d_operator_name+0x100>
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	f7ff f9e8 	bl	80005c8 <d_make_operator>
 80011f8:	4603      	mov	r3, r0
 80011fa:	e020      	b.n	800123e <d_operator_name+0x142>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7dfa      	ldrb	r2, [r7, #23]
 8001204:	429a      	cmp	r2, r3
 8001206:	d30d      	bcc.n	8001224 <d_operator_name+0x128>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	7dfa      	ldrb	r2, [r7, #23]
 8001210:	429a      	cmp	r2, r3
 8001212:	d10a      	bne.n	800122a <d_operator_name+0x12e>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f103 0301 	add.w	r3, r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	7dba      	ldrb	r2, [r7, #22]
 8001220:	429a      	cmp	r2, r3
 8001222:	d202      	bcs.n	800122a <d_operator_name+0x12e>
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	e003      	b.n	8001232 <d_operator_name+0x136>
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f103 0301 	add.w	r3, r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	429a      	cmp	r2, r3
 8001238:	d1b6      	bne.n	80011a8 <d_operator_name+0xac>
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}

08001248 <d_make_character>:
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff f85a 	bl	800030c <d_make_empty>
 8001258:	4603      	mov	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <d_make_character+0x28>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f04f 0239 	mov.w	r2, #57	; 0x39
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4618      	mov	r0, r3
 8001274:	f107 0710 	add.w	r7, r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <d_java_resource>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fe5d 	bl	8000f50 <d_number>
 8001296:	4603      	mov	r3, r0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dc02      	bgt.n	80012a6 <d_java_resource+0x2a>
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e0c2      	b.n	800142c <d_java_resource+0x1b0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <d_java_resource+0x50>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	2a5f      	cmp	r2, #95	; 0x5f
 80012b8:	bf0c      	ite	eq
 80012ba:	2200      	moveq	r2, #0
 80012bc:	2201      	movne	r2, #1
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f103 0101 	add.w	r1, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60d9      	str	r1, [r3, #12]
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d002      	beq.n	80012d2 <d_java_resource+0x56>
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e0ac      	b.n	800142c <d_java_resource+0x1b0>
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e092      	b.n	800140e <d_java_resource+0x192>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <d_java_resource+0x82>
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e096      	b.n	800142c <d_java_resource+0x1b0>
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b24      	cmp	r3, #36	; 0x24
 8001302:	d142      	bne.n	800138a <d_java_resource+0x10e>
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f103 0301 	add.w	r3, r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	f102 0201 	add.w	r2, r2, #1
 800131a:	613a      	str	r2, [r7, #16]
 800131c:	2b53      	cmp	r3, #83	; 0x53
 800131e:	d004      	beq.n	800132a <d_java_resource+0xae>
 8001320:	2b5f      	cmp	r3, #95	; 0x5f
 8001322:	d006      	beq.n	8001332 <d_java_resource+0xb6>
 8001324:	2b24      	cmp	r3, #36	; 0x24
 8001326:	d008      	beq.n	800133a <d_java_resource+0xbe>
 8001328:	e00b      	b.n	8001342 <d_java_resource+0xc6>
 800132a:	f04f 032f 	mov.w	r3, #47	; 0x2f
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e00a      	b.n	8001348 <d_java_resource+0xcc>
 8001332:	f04f 032e 	mov.w	r3, #46	; 0x2e
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e006      	b.n	8001348 <d_java_resource+0xcc>
 800133a:	f04f 0324 	mov.w	r3, #36	; 0x24
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e002      	b.n	8001348 <d_java_resource+0xcc>
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e071      	b.n	800142c <d_java_resource+0x1b0>
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff ff7b 	bl	8001248 <d_make_character>
 8001352:	4603      	mov	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	18d2      	adds	r2, r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d133      	bne.n	80013e4 <d_java_resource+0x168>
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e054      	b.n	800142c <d_java_resource+0x1b0>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f103 0301 	add.w	r3, r3, #1
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	429a      	cmp	r2, r3
 8001390:	da0b      	bge.n	80013aa <d_java_resource+0x12e>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	18d3      	adds	r3, r2, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <d_java_resource+0x12e>
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	18d3      	adds	r3, r2, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b24      	cmp	r3, #36	; 0x24
 80013a8:	d1eb      	bne.n	8001382 <d_java_resource+0x106>
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	f7ff f8ce 	bl	8000550 <d_make_name>
 80013b4:	4603      	mov	r3, r0
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	18d2      	adds	r2, r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <d_java_resource+0x168>
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	e023      	b.n	800142c <d_java_resource+0x1b0>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <d_java_resource+0x174>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e00e      	b.n	800140e <d_java_resource+0x192>
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f04f 0138 	mov.w	r1, #56	; 0x38
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f7fe ffaf 	bl	800035c <d_make_comp>
 80013fe:	4603      	mov	r3, r0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <d_java_resource+0x192>
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e00e      	b.n	800142c <d_java_resource+0x1b0>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f73f af69 	bgt.w	80012e8 <d_java_resource+0x6c>
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f04f 0137 	mov.w	r1, #55	; 0x37
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f7fe ff9b 	bl	800035c <d_make_comp>
 8001426:	4603      	mov	r3, r0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4618      	mov	r0, r3
 800142e:	f107 0720 	add.w	r7, r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop

08001438 <d_special_name>:
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f103 0214 	add.w	r2, r3, #20
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b54      	cmp	r3, #84	; 0x54
 8001454:	d108      	bne.n	8001468 <d_special_name+0x30>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f103 0201 	add.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	f04f 0301 	mov.w	r3, #1
 8001466:	e001      	b.n	800146c <d_special_name+0x34>
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8177 	beq.w	8001760 <d_special_name+0x328>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <d_special_name+0x54>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	7813      	ldrb	r3, [r2, #0]
 8001482:	f102 0101 	add.w	r1, r2, #1
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	60d1      	str	r1, [r2, #12]
 800148a:	e001      	b.n	8001490 <d_special_name+0x58>
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	f1a3 0343 	sub.w	r3, r3, #67	; 0x43
 8001494:	2b33      	cmp	r3, #51	; 0x33
 8001496:	f200 8160 	bhi.w	800175a <d_special_name+0x322>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <d_special_name+0x68>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080016b1 	.word	0x080016b1
 80014a4:	0800175b 	.word	0x0800175b
 80014a8:	0800175b 	.word	0x0800175b
 80014ac:	08001723 	.word	0x08001723
 80014b0:	0800175b 	.word	0x0800175b
 80014b4:	0800175b 	.word	0x0800175b
 80014b8:	080015c1 	.word	0x080015c1
 80014bc:	0800173f 	.word	0x0800173f
 80014c0:	0800175b 	.word	0x0800175b
 80014c4:	0800175b 	.word	0x0800175b
 80014c8:	0800175b 	.word	0x0800175b
 80014cc:	0800175b 	.word	0x0800175b
 80014d0:	0800175b 	.word	0x0800175b
 80014d4:	0800175b 	.word	0x0800175b
 80014d8:	0800175b 	.word	0x0800175b
 80014dc:	0800175b 	.word	0x0800175b
 80014e0:	080015dd 	.word	0x080015dd
 80014e4:	08001599 	.word	0x08001599
 80014e8:	0800175b 	.word	0x0800175b
 80014ec:	08001571 	.word	0x08001571
 80014f0:	0800175b 	.word	0x0800175b
 80014f4:	0800175b 	.word	0x0800175b
 80014f8:	0800175b 	.word	0x0800175b
 80014fc:	0800175b 	.word	0x0800175b
 8001500:	0800175b 	.word	0x0800175b
 8001504:	0800175b 	.word	0x0800175b
 8001508:	0800175b 	.word	0x0800175b
 800150c:	0800175b 	.word	0x0800175b
 8001510:	0800175b 	.word	0x0800175b
 8001514:	0800175b 	.word	0x0800175b
 8001518:	0800175b 	.word	0x0800175b
 800151c:	0800175b 	.word	0x0800175b
 8001520:	08001665 	.word	0x08001665
 8001524:	0800175b 	.word	0x0800175b
 8001528:	0800175b 	.word	0x0800175b
 800152c:	0800175b 	.word	0x0800175b
 8001530:	0800175b 	.word	0x0800175b
 8001534:	080015f9 	.word	0x080015f9
 8001538:	0800175b 	.word	0x0800175b
 800153c:	0800175b 	.word	0x0800175b
 8001540:	0800175b 	.word	0x0800175b
 8001544:	0800175b 	.word	0x0800175b
 8001548:	0800175b 	.word	0x0800175b
 800154c:	0800175b 	.word	0x0800175b
 8001550:	0800175b 	.word	0x0800175b
 8001554:	0800175b 	.word	0x0800175b
 8001558:	0800175b 	.word	0x0800175b
 800155c:	0800175b 	.word	0x0800175b
 8001560:	0800175b 	.word	0x0800175b
 8001564:	0800175b 	.word	0x0800175b
 8001568:	0800175b 	.word	0x0800175b
 800156c:	0800162f 	.word	0x0800162f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f1a3 0205 	sub.w	r2, r3, #5
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fa3b 	bl	80019f8 <d_type>
 8001582:	4603      	mov	r3, r0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f04f 0109 	mov.w	r1, #9
 800158a:	461a      	mov	r2, r3
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f7fe fee4 	bl	800035c <d_make_comp>
 8001594:	4603      	mov	r3, r0
 8001596:	e146      	b.n	8001826 <d_special_name+0x3ee>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f1a3 020a 	sub.w	r2, r3, #10
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fa27 	bl	80019f8 <d_type>
 80015aa:	4603      	mov	r3, r0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f04f 010a 	mov.w	r1, #10
 80015b2:	461a      	mov	r2, r3
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	f7fe fed0 	bl	800035c <d_make_comp>
 80015bc:	4603      	mov	r3, r0
 80015be:	e132      	b.n	8001826 <d_special_name+0x3ee>
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa19 	bl	80019f8 <d_type>
 80015c6:	4603      	mov	r3, r0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f04f 010c 	mov.w	r1, #12
 80015ce:	461a      	mov	r2, r3
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7fe fec2 	bl	800035c <d_make_comp>
 80015d8:	4603      	mov	r3, r0
 80015da:	e124      	b.n	8001826 <d_special_name+0x3ee>
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fa0b 	bl	80019f8 <d_type>
 80015e2:	4603      	mov	r3, r0
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f04f 010d 	mov.w	r1, #13
 80015ea:	461a      	mov	r2, r3
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f7fe feb4 	bl	800035c <d_make_comp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	e116      	b.n	8001826 <d_special_name+0x3ee>
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f04f 0168 	mov.w	r1, #104	; 0x68
 80015fe:	f000 f917 	bl	8001830 <d_call_offset>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <d_special_name+0x1d6>
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e10b      	b.n	8001826 <d_special_name+0x3ee>
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	f7ff f9e2 	bl	80009dc <d_encoding>
 8001618:	4603      	mov	r3, r0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f04f 010f 	mov.w	r1, #15
 8001620:	461a      	mov	r2, r3
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	f7fe fe99 	bl	800035c <d_make_comp>
 800162a:	4603      	mov	r3, r0
 800162c:	e0fb      	b.n	8001826 <d_special_name+0x3ee>
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f04f 0176 	mov.w	r1, #118	; 0x76
 8001634:	f000 f8fc 	bl	8001830 <d_call_offset>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <d_special_name+0x20c>
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e0f0      	b.n	8001826 <d_special_name+0x3ee>
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f7ff f9c7 	bl	80009dc <d_encoding>
 800164e:	4603      	mov	r3, r0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f04f 0110 	mov.w	r1, #16
 8001656:	461a      	mov	r2, r3
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	f7fe fe7e 	bl	800035c <d_make_comp>
 8001660:	4603      	mov	r3, r0
 8001662:	e0e0      	b.n	8001826 <d_special_name+0x3ee>
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	f000 f8e1 	bl	8001830 <d_call_offset>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <d_special_name+0x242>
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e0d5      	b.n	8001826 <d_special_name+0x3ee>
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	f000 f8d6 	bl	8001830 <d_call_offset>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <d_special_name+0x258>
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e0ca      	b.n	8001826 <d_special_name+0x3ee>
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f7ff f9a1 	bl	80009dc <d_encoding>
 800169a:	4603      	mov	r3, r0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f04f 0111 	mov.w	r1, #17
 80016a2:	461a      	mov	r2, r3
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f7fe fe58 	bl	800035c <d_make_comp>
 80016ac:	4603      	mov	r3, r0
 80016ae:	e0ba      	b.n	8001826 <d_special_name+0x3ee>
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f9a1 	bl	80019f8 <d_type>
 80016b6:	4603      	mov	r3, r0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fc48 	bl	8000f50 <d_number>
 80016c0:	4603      	mov	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da02      	bge.n	80016d0 <d_special_name+0x298>
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e0aa      	b.n	8001826 <d_special_name+0x3ee>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b5f      	cmp	r3, #95	; 0x5f
 80016d8:	d108      	bne.n	80016ec <d_special_name+0x2b4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f103 0201 	add.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e001      	b.n	80016f0 <d_special_name+0x2b8>
 80016ec:	f04f 0301 	mov.w	r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <d_special_name+0x2c2>
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e095      	b.n	8001826 <d_special_name+0x3ee>
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f97c 	bl	80019f8 <d_type>
 8001700:	4603      	mov	r3, r0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f103 0205 	add.w	r2, r3, #5
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f04f 010b 	mov.w	r1, #11
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f7fe fe1f 	bl	800035c <d_make_comp>
 800171e:	4603      	mov	r3, r0
 8001720:	e081      	b.n	8001826 <d_special_name+0x3ee>
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f968 	bl	80019f8 <d_type>
 8001728:	4603      	mov	r3, r0
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f04f 010e 	mov.w	r1, #14
 8001730:	461a      	mov	r2, r3
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	f7fe fe11 	bl	800035c <d_make_comp>
 800173a:	4603      	mov	r3, r0
 800173c:	e073      	b.n	8001826 <d_special_name+0x3ee>
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f95a 	bl	80019f8 <d_type>
 8001744:	4603      	mov	r3, r0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f04f 0112 	mov.w	r1, #18
 800174c:	461a      	mov	r2, r3
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f7fe fe03 	bl	800035c <d_make_comp>
 8001756:	4603      	mov	r3, r0
 8001758:	e065      	b.n	8001826 <d_special_name+0x3ee>
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e062      	b.n	8001826 <d_special_name+0x3ee>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b47      	cmp	r3, #71	; 0x47
 8001768:	d108      	bne.n	800177c <d_special_name+0x344>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f103 0201 	add.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	f04f 0301 	mov.w	r3, #1
 800177a:	e001      	b.n	8001780 <d_special_name+0x348>
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d04e      	beq.n	8001822 <d_special_name+0x3ea>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <d_special_name+0x366>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	7813      	ldrb	r3, [r2, #0]
 8001794:	f102 0101 	add.w	r1, r2, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	60d1      	str	r1, [r2, #12]
 800179c:	e001      	b.n	80017a2 <d_special_name+0x36a>
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	2b52      	cmp	r3, #82	; 0x52
 80017a4:	d017      	beq.n	80017d6 <d_special_name+0x39e>
 80017a6:	2b52      	cmp	r3, #82	; 0x52
 80017a8:	dc02      	bgt.n	80017b0 <d_special_name+0x378>
 80017aa:	2b41      	cmp	r3, #65	; 0x41
 80017ac:	d021      	beq.n	80017f2 <d_special_name+0x3ba>
 80017ae:	e035      	b.n	800181c <d_special_name+0x3e4>
 80017b0:	2b56      	cmp	r3, #86	; 0x56
 80017b2:	d002      	beq.n	80017ba <d_special_name+0x382>
 80017b4:	2b72      	cmp	r3, #114	; 0x72
 80017b6:	d02c      	beq.n	8001812 <d_special_name+0x3da>
 80017b8:	e030      	b.n	800181c <d_special_name+0x3e4>
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff f984 	bl	8000ac8 <d_name>
 80017c0:	4603      	mov	r3, r0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f04f 0113 	mov.w	r1, #19
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f7fe fdc5 	bl	800035c <d_make_comp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	e027      	b.n	8001826 <d_special_name+0x3ee>
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f976 	bl	8000ac8 <d_name>
 80017dc:	4603      	mov	r3, r0
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f04f 0114 	mov.w	r1, #20
 80017e4:	461a      	mov	r2, r3
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f7fe fdb7 	bl	800035c <d_make_comp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	e019      	b.n	8001826 <d_special_name+0x3ee>
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	f7ff f8f0 	bl	80009dc <d_encoding>
 80017fc:	4603      	mov	r3, r0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f04f 0115 	mov.w	r1, #21
 8001804:	461a      	mov	r2, r3
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f7fe fda7 	bl	800035c <d_make_comp>
 800180e:	4603      	mov	r3, r0
 8001810:	e009      	b.n	8001826 <d_special_name+0x3ee>
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fd32 	bl	800127c <d_java_resource>
 8001818:	4603      	mov	r3, r0
 800181a:	e004      	b.n	8001826 <d_special_name+0x3ee>
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e001      	b.n	8001826 <d_special_name+0x3ee>
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f107 0718 	add.w	r7, r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <d_call_offset>:
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10f      	bne.n	8001860 <d_call_offset+0x30>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <d_call_offset+0x2a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	7813      	ldrb	r3, [r2, #0]
 8001850:	f102 0101 	add.w	r1, r2, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60d1      	str	r1, [r2, #12]
 8001858:	e001      	b.n	800185e <d_call_offset+0x2e>
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b68      	cmp	r3, #104	; 0x68
 8001864:	d103      	bne.n	800186e <d_call_offset+0x3e>
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fb72 	bl	8000f50 <d_number>
 800186c:	e021      	b.n	80018b2 <d_call_offset+0x82>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b76      	cmp	r3, #118	; 0x76
 8001872:	d11b      	bne.n	80018ac <d_call_offset+0x7c>
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fb6b 	bl	8000f50 <d_number>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b5f      	cmp	r3, #95	; 0x5f
 8001882:	d108      	bne.n	8001896 <d_call_offset+0x66>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f103 0201 	add.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e001      	b.n	800189a <d_call_offset+0x6a>
 8001896:	f04f 0301 	mov.w	r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <d_call_offset+0x74>
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e01d      	b.n	80018e0 <d_call_offset+0xb0>
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fb53 	bl	8000f50 <d_number>
 80018aa:	e002      	b.n	80018b2 <d_call_offset+0x82>
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e016      	b.n	80018e0 <d_call_offset+0xb0>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b5f      	cmp	r3, #95	; 0x5f
 80018ba:	d108      	bne.n	80018ce <d_call_offset+0x9e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f103 0201 	add.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e001      	b.n	80018d2 <d_call_offset+0xa2>
 80018ce:	f04f 0301 	mov.w	r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <d_call_offset+0xac>
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e001      	b.n	80018e0 <d_call_offset+0xb0>
 80018dc:	f04f 0301 	mov.w	r3, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f107 0708 	add.w	r7, r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop

080018ec <d_ctor_dtor_name>:
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01a      	beq.n	8001932 <d_ctor_dtor_name+0x46>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <d_ctor_dtor_name+0x2c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	18d2      	adds	r2, r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
 8001916:	e00c      	b.n	8001932 <d_ctor_dtor_name+0x46>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b16      	cmp	r3, #22
 8001920:	d107      	bne.n	8001932 <d_ctor_dtor_name+0x46>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	18d2      	adds	r2, r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b43      	cmp	r3, #67	; 0x43
 800193a:	d002      	beq.n	8001942 <d_ctor_dtor_name+0x56>
 800193c:	2b44      	cmp	r3, #68	; 0x44
 800193e:	d02a      	beq.n	8001996 <d_ctor_dtor_name+0xaa>
 8001940:	e053      	b.n	80019ea <d_ctor_dtor_name+0xfe>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f103 0301 	add.w	r3, r3, #1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b32      	cmp	r3, #50	; 0x32
 800194e:	d007      	beq.n	8001960 <d_ctor_dtor_name+0x74>
 8001950:	2b33      	cmp	r3, #51	; 0x33
 8001952:	d009      	beq.n	8001968 <d_ctor_dtor_name+0x7c>
 8001954:	2b31      	cmp	r3, #49	; 0x31
 8001956:	d10b      	bne.n	8001970 <d_ctor_dtor_name+0x84>
 8001958:	f04f 0301 	mov.w	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e00a      	b.n	8001976 <d_ctor_dtor_name+0x8a>
 8001960:	f04f 0302 	mov.w	r3, #2
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e006      	b.n	8001976 <d_ctor_dtor_name+0x8a>
 8001968:	f04f 0303 	mov.w	r3, #3
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e002      	b.n	8001976 <d_ctor_dtor_name+0x8a>
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e03b      	b.n	80019ee <d_ctor_dtor_name+0x102>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f103 0202 	add.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4611      	mov	r1, r2
 800198c:	461a      	mov	r2, r3
 800198e:	f7fe fe6f 	bl	8000670 <d_make_ctor>
 8001992:	4603      	mov	r3, r0
 8001994:	e02b      	b.n	80019ee <d_ctor_dtor_name+0x102>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f103 0301 	add.w	r3, r3, #1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	d007      	beq.n	80019b4 <d_ctor_dtor_name+0xc8>
 80019a4:	2b32      	cmp	r3, #50	; 0x32
 80019a6:	d009      	beq.n	80019bc <d_ctor_dtor_name+0xd0>
 80019a8:	2b30      	cmp	r3, #48	; 0x30
 80019aa:	d10b      	bne.n	80019c4 <d_ctor_dtor_name+0xd8>
 80019ac:	f04f 0301 	mov.w	r3, #1
 80019b0:	73bb      	strb	r3, [r7, #14]
 80019b2:	e00a      	b.n	80019ca <d_ctor_dtor_name+0xde>
 80019b4:	f04f 0302 	mov.w	r3, #2
 80019b8:	73bb      	strb	r3, [r7, #14]
 80019ba:	e006      	b.n	80019ca <d_ctor_dtor_name+0xde>
 80019bc:	f04f 0303 	mov.w	r3, #3
 80019c0:	73bb      	strb	r3, [r7, #14]
 80019c2:	e002      	b.n	80019ca <d_ctor_dtor_name+0xde>
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e011      	b.n	80019ee <d_ctor_dtor_name+0x102>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f103 0202 	add.w	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	7bba      	ldrb	r2, [r7, #14]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	f7fe fe63 	bl	80006ac <d_make_dtor>
 80019e6:	4603      	mov	r3, r0
 80019e8:	e001      	b.n	80019ee <d_ctor_dtor_name+0x102>
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f107 0710 	add.w	r7, r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <d_type>:
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	74fb      	strb	r3, [r7, #19]
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	2b72      	cmp	r3, #114	; 0x72
 8001a0c:	d005      	beq.n	8001a1a <d_type+0x22>
 8001a0e:	7cfb      	ldrb	r3, [r7, #19]
 8001a10:	2b56      	cmp	r3, #86	; 0x56
 8001a12:	d002      	beq.n	8001a1a <d_type+0x22>
 8001a14:	7cfb      	ldrb	r3, [r7, #19]
 8001a16:	2b4b      	cmp	r3, #75	; 0x4b
 8001a18:	d126      	bne.n	8001a68 <d_type+0x70>
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f000 fba3 	bl	8002170 <d_cv_qualifiers>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <d_type+0x42>
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e386      	b.n	8002148 <d_type+0x750>
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffdc 	bl	80019f8 <d_type>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <d_type+0x66>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4619      	mov	r1, r3
 8001a54:	f001 fc14 	bl	8003280 <d_add_substitution>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <d_type+0x6c>
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e371      	b.n	8002148 <d_type+0x750>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	e36f      	b.n	8002148 <d_type+0x750>
 8001a68:	f04f 0301 	mov.w	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8001a74:	2b4a      	cmp	r3, #74	; 0x4a
 8001a76:	f200 8352 	bhi.w	800211e <d_type+0x726>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <d_type+0x88>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001c33 	.word	0x08001c33
 8001a84:	08001c33 	.word	0x08001c33
 8001a88:	08001c33 	.word	0x08001c33
 8001a8c:	08001c33 	.word	0x08001c33
 8001a90:	08001c33 	.word	0x08001c33
 8001a94:	08001c33 	.word	0x08001c33
 8001a98:	08001c33 	.word	0x08001c33
 8001a9c:	08001c33 	.word	0x08001c33
 8001aa0:	08001c33 	.word	0x08001c33
 8001aa4:	08001c33 	.word	0x08001c33
 8001aa8:	0800211f 	.word	0x0800211f
 8001aac:	0800211f 	.word	0x0800211f
 8001ab0:	0800211f 	.word	0x0800211f
 8001ab4:	0800211f 	.word	0x0800211f
 8001ab8:	0800211f 	.word	0x0800211f
 8001abc:	0800211f 	.word	0x0800211f
 8001ac0:	0800211f 	.word	0x0800211f
 8001ac4:	08001c3f 	.word	0x08001c3f
 8001ac8:	0800211f 	.word	0x0800211f
 8001acc:	08001da5 	.word	0x08001da5
 8001ad0:	08001e29 	.word	0x08001e29
 8001ad4:	0800211f 	.word	0x0800211f
 8001ad8:	08001c27 	.word	0x08001c27
 8001adc:	08001dcf 	.word	0x08001dcf
 8001ae0:	0800211f 	.word	0x0800211f
 8001ae4:	0800211f 	.word	0x0800211f
 8001ae8:	0800211f 	.word	0x0800211f
 8001aec:	0800211f 	.word	0x0800211f
 8001af0:	0800211f 	.word	0x0800211f
 8001af4:	08001c4b 	.word	0x08001c4b
 8001af8:	08001c33 	.word	0x08001c33
 8001afc:	08001d27 	.word	0x08001d27
 8001b00:	08001d51 	.word	0x08001d51
 8001b04:	0800211f 	.word	0x0800211f
 8001b08:	08001d7b 	.word	0x08001d7b
 8001b0c:	08001c9f 	.word	0x08001c9f
 8001b10:	08001c57 	.word	0x08001c57
 8001b14:	08001df9 	.word	0x08001df9
 8001b18:	0800211f 	.word	0x0800211f
 8001b1c:	0800211f 	.word	0x0800211f
 8001b20:	0800211f 	.word	0x0800211f
 8001b24:	0800211f 	.word	0x0800211f
 8001b28:	08001c33 	.word	0x08001c33
 8001b2c:	0800211f 	.word	0x0800211f
 8001b30:	0800211f 	.word	0x0800211f
 8001b34:	0800211f 	.word	0x0800211f
 8001b38:	0800211f 	.word	0x0800211f
 8001b3c:	0800211f 	.word	0x0800211f
 8001b40:	0800211f 	.word	0x0800211f
 8001b44:	08001bad 	.word	0x08001bad
 8001b48:	08001bad 	.word	0x08001bad
 8001b4c:	08001bad 	.word	0x08001bad
 8001b50:	08001bad 	.word	0x08001bad
 8001b54:	08001bad 	.word	0x08001bad
 8001b58:	08001bad 	.word	0x08001bad
 8001b5c:	08001bad 	.word	0x08001bad
 8001b60:	08001bad 	.word	0x08001bad
 8001b64:	08001bad 	.word	0x08001bad
 8001b68:	08001bad 	.word	0x08001bad
 8001b6c:	0800211f 	.word	0x0800211f
 8001b70:	08001bad 	.word	0x08001bad
 8001b74:	08001bad 	.word	0x08001bad
 8001b78:	08001bad 	.word	0x08001bad
 8001b7c:	08001bad 	.word	0x08001bad
 8001b80:	0800211f 	.word	0x0800211f
 8001b84:	0800211f 	.word	0x0800211f
 8001b88:	0800211f 	.word	0x0800211f
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001bad 	.word	0x08001bad
 8001b94:	08001bfd 	.word	0x08001bfd
 8001b98:	08001bad 	.word	0x08001bad
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bad 	.word	0x08001bad
 8001ba4:	08001bad 	.word	0x08001bad
 8001ba8:	08001bad 	.word	0x08001bad
 8001bac:	7cfa      	ldrb	r2, [r7, #19]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bb4:	189b      	adds	r3, r3, r2
 8001bb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bba:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 8001bbe:	f1a2 0204 	sub.w	r2, r2, #4
 8001bc2:	f647 03bc 	movw	r3, #30908	; 0x78bc
 8001bc6:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001bca:	18d3      	adds	r3, r2, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe fcda 	bl	8000588 <d_make_builtin_type>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	18d2      	adds	r2, r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f103 0201 	add.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	e296      	b.n	800212a <d_type+0x732>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f103 0201 	add.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff f983 	bl	8000f14 <d_source_name>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f04f 0124 	mov.w	r1, #36	; 0x24
 8001c16:	461a      	mov	r2, r3
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	f7fe fb9e 	bl	800035c <d_make_comp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	e281      	b.n	800212a <d_type+0x732>
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fb16 	bl	8002258 <d_function_type>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	e27b      	b.n	800212a <d_type+0x732>
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fbf6 	bl	8002424 <d_class_enum_type>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	e275      	b.n	800212a <d_type+0x732>
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fbfe 	bl	8002440 <d_array_type>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	e26f      	b.n	800212a <d_type+0x732>
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fcc0 	bl	80025d0 <d_pointer_to_member_type>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	e269      	b.n	800212a <d_type+0x732>
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fd50 	bl	80026fc <d_template_param>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b49      	cmp	r3, #73	; 0x49
 8001c68:	f040 825c 	bne.w	8002124 <d_type+0x72c>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f001 fb05 	bl	8003280 <d_add_substitution>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <d_type+0x28a>
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e262      	b.n	8002148 <d_type+0x750>
 8001c82:	68bc      	ldr	r4, [r7, #8]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fd6d 	bl	8002764 <d_template_args>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f04f 0104 	mov.w	r1, #4
 8001c92:	4622      	mov	r2, r4
 8001c94:	f7fe fb62 	bl	800035c <d_make_comp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e242      	b.n	8002124 <d_type+0x72c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	74bb      	strb	r3, [r7, #18]
 8001ca6:	7cbb      	ldrb	r3, [r7, #18]
 8001ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8001caa:	d902      	bls.n	8001cb2 <d_type+0x2ba>
 8001cac:	7cbb      	ldrb	r3, [r7, #18]
 8001cae:	2b39      	cmp	r3, #57	; 0x39
 8001cb0:	d908      	bls.n	8001cc4 <d_type+0x2cc>
 8001cb2:	7cbb      	ldrb	r3, [r7, #18]
 8001cb4:	2b5f      	cmp	r3, #95	; 0x5f
 8001cb6:	d005      	beq.n	8001cc4 <d_type+0x2cc>
 8001cb8:	7cbb      	ldrb	r3, [r7, #18]
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d920      	bls.n	8001d00 <d_type+0x308>
 8001cbe:	7cbb      	ldrb	r3, [r7, #18]
 8001cc0:	2b5a      	cmp	r3, #90	; 0x5a
 8001cc2:	d81d      	bhi.n	8001d00 <d_type+0x308>
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	f001 fb05 	bl	80032d8 <d_substitution>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b49      	cmp	r3, #73	; 0x49
 8001cda:	d10d      	bne.n	8001cf8 <d_type+0x300>
 8001cdc:	68bc      	ldr	r4, [r7, #8]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fd40 	bl	8002764 <d_template_args>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f04f 0104 	mov.w	r1, #4
 8001cec:	4622      	mov	r2, r4
 8001cee:	f7fe fb35 	bl	800035c <d_make_comp>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	e015      	b.n	8001d24 <d_type+0x32c>
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e011      	b.n	8001d24 <d_type+0x32c>
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb8f 	bl	8002424 <d_class_enum_type>
 8001d06:	4603      	mov	r3, r0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 820b 	beq.w	8002128 <d_type+0x730>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b16      	cmp	r3, #22
 8001d18:	f040 8206 	bne.w	8002128 <d_type+0x730>
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e201      	b.n	8002128 <d_type+0x730>
 8001d24:	e200      	b.n	8002128 <d_type+0x730>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f103 0201 	add.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fe60 	bl	80019f8 <d_type>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f04f 0120 	mov.w	r1, #32
 8001d40:	461a      	mov	r2, r3
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f7fe fb09 	bl	800035c <d_make_comp>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	e1ec      	b.n	800212a <d_type+0x732>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f103 0201 	add.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe4b 	bl	80019f8 <d_type>
 8001d62:	4603      	mov	r3, r0
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f04f 011e 	mov.w	r1, #30
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	f7fe faf4 	bl	800035c <d_make_comp>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	e1d7      	b.n	800212a <d_type+0x732>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f103 0201 	add.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fe36 	bl	80019f8 <d_type>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f04f 011f 	mov.w	r1, #31
 8001d94:	461a      	mov	r2, r3
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	f7fe fadf 	bl	800035c <d_make_comp>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	e1c2      	b.n	800212a <d_type+0x732>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f103 0201 	add.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fe21 	bl	80019f8 <d_type>
 8001db6:	4603      	mov	r3, r0
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f04f 0121 	mov.w	r1, #33	; 0x21
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f7fe faca 	bl	800035c <d_make_comp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	e1ad      	b.n	800212a <d_type+0x732>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f103 0201 	add.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fe0c 	bl	80019f8 <d_type>
 8001de0:	4603      	mov	r3, r0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f04f 0122 	mov.w	r1, #34	; 0x22
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f7fe fab5 	bl	800035c <d_make_comp>
 8001df2:	4603      	mov	r3, r0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	e198      	b.n	800212a <d_type+0x732>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f103 0201 	add.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff f885 	bl	8000f14 <d_source_name>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fdf2 	bl	80019f8 <d_type>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f04f 011d 	mov.w	r1, #29
 8001e1e:	f7fe fa9d 	bl	800035c <d_make_comp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e180      	b.n	800212a <d_type+0x732>
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f103 0201 	add.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <d_type+0x45c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	7813      	ldrb	r3, [r2, #0]
 8001e4a:	f102 0101 	add.w	r1, r2, #1
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60d1      	str	r1, [r2, #12]
 8001e52:	e001      	b.n	8001e58 <d_type+0x460>
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	74fb      	strb	r3, [r7, #19]
 8001e5a:	7cfb      	ldrb	r3, [r7, #19]
 8001e5c:	f1a3 0346 	sub.w	r3, r3, #70	; 0x46
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	f200 8157 	bhi.w	8002114 <d_type+0x71c>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <d_type+0x474>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08002057 	.word	0x08002057
 8001e70:	08002115 	.word	0x08002115
 8001e74:	08002115 	.word	0x08002115
 8001e78:	08002115 	.word	0x08002115
 8001e7c:	08002115 	.word	0x08002115
 8001e80:	08002115 	.word	0x08002115
 8001e84:	08002115 	.word	0x08002115
 8001e88:	08002115 	.word	0x08002115
 8001e8c:	08002115 	.word	0x08002115
 8001e90:	08002115 	.word	0x08002115
 8001e94:	08002115 	.word	0x08002115
 8001e98:	08002115 	.word	0x08002115
 8001e9c:	08002115 	.word	0x08002115
 8001ea0:	08002115 	.word	0x08002115
 8001ea4:	08001f31 	.word	0x08001f31
 8001ea8:	08002115 	.word	0x08002115
 8001eac:	08002115 	.word	0x08002115
 8001eb0:	08002115 	.word	0x08002115
 8001eb4:	08002115 	.word	0x08002115
 8001eb8:	08002115 	.word	0x08002115
 8001ebc:	08002115 	.word	0x08002115
 8001ec0:	08002115 	.word	0x08002115
 8001ec4:	08002115 	.word	0x08002115
 8001ec8:	08002115 	.word	0x08002115
 8001ecc:	08002115 	.word	0x08002115
 8001ed0:	08002115 	.word	0x08002115
 8001ed4:	08002115 	.word	0x08002115
 8001ed8:	08002115 	.word	0x08002115
 8001edc:	08002115 	.word	0x08002115
 8001ee0:	08002115 	.word	0x08002115
 8001ee4:	08001fc1 	.word	0x08001fc1
 8001ee8:	08001fdf 	.word	0x08001fdf
 8001eec:	08001fa3 	.word	0x08001fa3
 8001ef0:	08002115 	.word	0x08002115
 8001ef4:	08001ffd 	.word	0x08001ffd
 8001ef8:	08002039 	.word	0x08002039
 8001efc:	08002115 	.word	0x08002115
 8001f00:	08002115 	.word	0x08002115
 8001f04:	08002115 	.word	0x08002115
 8001f08:	08002115 	.word	0x08002115
 8001f0c:	080020f7 	.word	0x080020f7
 8001f10:	08002115 	.word	0x08002115
 8001f14:	08001f85 	.word	0x08001f85
 8001f18:	08002115 	.word	0x08002115
 8001f1c:	08002115 	.word	0x08002115
 8001f20:	0800201b 	.word	0x0800201b
 8001f24:	08001f31 	.word	0x08001f31
 8001f28:	08002115 	.word	0x08002115
 8001f2c:	080020eb 	.word	0x080020eb
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fd23 	bl	800297c <d_expression>
 8001f36:	4603      	mov	r3, r0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f04f 013b 	mov.w	r1, #59	; 0x3b
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f7fe fa0a 	bl	800035c <d_make_comp>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80e3 	beq.w	800211a <d_type+0x722>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00e      	beq.n	8001f7c <d_type+0x584>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	2a45      	cmp	r2, #69	; 0x45
 8001f66:	bf0c      	ite	eq
 8001f68:	2200      	moveq	r2, #0
 8001f6a:	2201      	movne	r2, #1
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f103 0101 	add.w	r1, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60d9      	str	r1, [r3, #12]
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	f000 80cf 	beq.w	800211a <d_type+0x722>
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	e0ca      	b.n	800211a <d_type+0x722>
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fd37 	bl	80019f8 <d_type>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f04f 0141 	mov.w	r1, #65	; 0x41
 8001f92:	461a      	mov	r2, r3
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	f7fe f9e0 	bl	800035c <d_make_comp>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	e0bc      	b.n	800211c <d_type+0x724>
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	496b      	ldr	r1, [pc, #428]	; (8002154 <d_type+0x75c>)
 8001fa6:	f7fe faef 	bl	8000588 <d_make_builtin_type>
 8001faa:	4603      	mov	r3, r0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	18d2      	adds	r2, r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	e0ad      	b.n	800211c <d_type+0x724>
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4965      	ldr	r1, [pc, #404]	; (8002158 <d_type+0x760>)
 8001fc4:	f7fe fae0 	bl	8000588 <d_make_builtin_type>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e09e      	b.n	800211c <d_type+0x724>
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	495e      	ldr	r1, [pc, #376]	; (800215c <d_type+0x764>)
 8001fe2:	f7fe fad1 	bl	8000588 <d_make_builtin_type>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	18d2      	adds	r2, r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffa:	e08f      	b.n	800211c <d_type+0x724>
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4958      	ldr	r1, [pc, #352]	; (8002160 <d_type+0x768>)
 8002000:	f7fe fac2 	bl	8000588 <d_make_builtin_type>
 8002004:	4603      	mov	r3, r0
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	18d2      	adds	r2, r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
 8002018:	e080      	b.n	800211c <d_type+0x724>
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4951      	ldr	r1, [pc, #324]	; (8002164 <d_type+0x76c>)
 800201e:	f7fe fab3 	bl	8000588 <d_make_builtin_type>
 8002022:	4603      	mov	r3, r0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	18d2      	adds	r2, r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
 8002036:	e071      	b.n	800211c <d_type+0x724>
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	494b      	ldr	r1, [pc, #300]	; (8002168 <d_type+0x770>)
 800203c:	f7fe faa4 	bl	8000588 <d_make_builtin_type>
 8002040:	4603      	mov	r3, r0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	18d2      	adds	r2, r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	e062      	b.n	800211c <d_type+0x724>
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe f958 	bl	800030c <d_make_empty>
 800205c:	4603      	mov	r3, r0
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f04f 0228 	mov.w	r2, #40	; 0x28
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68d2      	ldr	r2, [r2, #12]
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	2a2f      	cmp	r2, #47	; 0x2f
 8002072:	d907      	bls.n	8002084 <d_type+0x68c>
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	2a39      	cmp	r2, #57	; 0x39
 800207c:	d802      	bhi.n	8002084 <d_type+0x68c>
 800207e:	f04f 0201 	mov.w	r2, #1
 8002082:	e001      	b.n	8002088 <d_type+0x690>
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	b292      	uxth	r2, r2
 800208a:	811a      	strh	r2, [r3, #8]
 800208c:	891b      	ldrh	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <d_type+0x6a0>
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe ff5c 	bl	8000f50 <d_number>
 8002098:	68bc      	ldr	r4, [r7, #8]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fcac 	bl	80019f8 <d_type>
 80020a0:	4603      	mov	r3, r0
 80020a2:	6063      	str	r3, [r4, #4]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <d_type+0x6ba>
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e04a      	b.n	8002148 <d_type+0x750>
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe ff4c 	bl	8000f50 <d_number>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <d_type+0x6da>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	7813      	ldrb	r3, [r2, #0]
 80020c8:	f102 0101 	add.w	r1, r2, #1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	60d1      	str	r1, [r2, #12]
 80020d0:	e001      	b.n	80020d6 <d_type+0x6de>
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	74fb      	strb	r3, [r7, #19]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	7cfa      	ldrb	r2, [r7, #19]
 80020dc:	2a73      	cmp	r2, #115	; 0x73
 80020de:	bf14      	ite	ne
 80020e0:	2200      	movne	r2, #0
 80020e2:	2201      	moveq	r2, #1
 80020e4:	b292      	uxth	r2, r2
 80020e6:	815a      	strh	r2, [r3, #10]
 80020e8:	e018      	b.n	800211c <d_type+0x724>
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa28 	bl	8002540 <d_vector_type>
 80020f0:	4603      	mov	r3, r0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	e012      	b.n	800211c <d_type+0x724>
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	491c      	ldr	r1, [pc, #112]	; (800216c <d_type+0x774>)
 80020fa:	f7fe fa45 	bl	8000588 <d_make_builtin_type>
 80020fe:	4603      	mov	r3, r0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	18d2      	adds	r2, r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	e003      	b.n	800211c <d_type+0x724>
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e016      	b.n	8002148 <d_type+0x750>
 800211a:	bf00      	nop
 800211c:	e005      	b.n	800212a <d_type+0x732>
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e011      	b.n	8002148 <d_type+0x750>
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <d_type+0x732>
 8002128:	bf00      	nop
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <d_type+0x74e>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4619      	mov	r1, r3
 8002136:	f001 f8a3 	bl	8003280 <d_add_substitution>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <d_type+0x74e>
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e000      	b.n	8002148 <d_type+0x750>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f107 071c 	add.w	r7, r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	bf00      	nop
 8002154:	08017ac4 	.word	0x08017ac4
 8002158:	08017ad8 	.word	0x08017ad8
 800215c:	08017aec 	.word	0x08017aec
 8002160:	08017b00 	.word	0x08017b00
 8002164:	08017b14 	.word	0x08017b14
 8002168:	08017b28 	.word	0x08017b28
 800216c:	08017b3c 	.word	0x08017b3c

08002170 <d_cv_qualifiers>:
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	75fb      	strb	r3, [r7, #23]
 8002184:	e059      	b.n	800223a <d_cv_qualifiers+0xca>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f103 0201 	add.w	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b72      	cmp	r3, #114	; 0x72
 8002196:	d110      	bne.n	80021ba <d_cv_qualifiers+0x4a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <d_cv_qualifiers+0x34>
 800219e:	f04f 031a 	mov.w	r3, #26
 80021a2:	e001      	b.n	80021a8 <d_cv_qualifiers+0x38>
 80021a4:	f04f 0317 	mov.w	r3, #23
 80021a8:	75bb      	strb	r3, [r7, #22]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f103 0309 	add.w	r3, r3, #9
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
 80021b8:	e023      	b.n	8002202 <d_cv_qualifiers+0x92>
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b56      	cmp	r3, #86	; 0x56
 80021be:	d110      	bne.n	80021e2 <d_cv_qualifiers+0x72>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <d_cv_qualifiers+0x5c>
 80021c6:	f04f 031b 	mov.w	r3, #27
 80021ca:	e001      	b.n	80021d0 <d_cv_qualifiers+0x60>
 80021cc:	f04f 0318 	mov.w	r3, #24
 80021d0:	75bb      	strb	r3, [r7, #22]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f103 0309 	add.w	r3, r3, #9
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e00f      	b.n	8002202 <d_cv_qualifiers+0x92>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <d_cv_qualifiers+0x7e>
 80021e8:	f04f 031c 	mov.w	r3, #28
 80021ec:	e001      	b.n	80021f2 <d_cv_qualifiers+0x82>
 80021ee:	f04f 0319 	mov.w	r3, #25
 80021f2:	75bb      	strb	r3, [r7, #22]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f103 0306 	add.w	r3, r3, #6
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	f7fe f8a4 	bl	800035c <d_make_comp>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <d_cv_qualifiers+0xb8>
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e012      	b.n	800224e <d_cv_qualifiers+0xde>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f103 0304 	add.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	75fb      	strb	r3, [r7, #23]
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b72      	cmp	r3, #114	; 0x72
 800223e:	d0a2      	beq.n	8002186 <d_cv_qualifiers+0x16>
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b56      	cmp	r3, #86	; 0x56
 8002244:	d09f      	beq.n	8002186 <d_cv_qualifiers+0x16>
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b4b      	cmp	r3, #75	; 0x4b
 800224a:	d09c      	beq.n	8002186 <d_cv_qualifiers+0x16>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f107 0718 	add.w	r7, r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <d_function_type>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b46      	cmp	r3, #70	; 0x46
 8002268:	d108      	bne.n	800227c <d_function_type+0x24>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f103 0201 	add.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e001      	b.n	8002280 <d_function_type+0x28>
 800227c:	f04f 0301 	mov.w	r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <d_function_type+0x32>
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e027      	b.n	80022da <d_function_type+0x82>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b59      	cmp	r3, #89	; 0x59
 8002292:	d105      	bne.n	80022a0 <d_function_type+0x48>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f103 0201 	add.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f04f 0101 	mov.w	r1, #1
 80022a6:	f000 f87f 	bl	80023a8 <d_bare_function_type>
 80022aa:	4603      	mov	r3, r0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b45      	cmp	r3, #69	; 0x45
 80022b6:	d108      	bne.n	80022ca <d_function_type+0x72>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f103 0201 	add.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e001      	b.n	80022ce <d_function_type+0x76>
 80022ca:	f04f 0301 	mov.w	r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <d_function_type+0x80>
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e000      	b.n	80022da <d_function_type+0x82>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	f107 0710 	add.w	r7, r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <d_parmlist>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	74fb      	strb	r3, [r7, #19]
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <d_parmlist+0x74>
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b45      	cmp	r3, #69	; 0x45
 800230a:	d025      	beq.n	8002358 <d_parmlist+0x74>
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b2e      	cmp	r3, #46	; 0x2e
 8002310:	d022      	beq.n	8002358 <d_parmlist+0x74>
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fb70 	bl	80019f8 <d_type>
 8002318:	4603      	mov	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <d_parmlist+0x44>
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e03a      	b.n	800239e <d_parmlist+0xba>
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f04f 012a 	mov.w	r1, #42	; 0x2a
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	f7fe f812 	bl	800035c <d_make_comp>
 8002338:	4602      	mov	r2, r0
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <d_parmlist+0x68>
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e028      	b.n	800239e <d_parmlist+0xba>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f103 0308 	add.w	r3, r3, #8
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e7cf      	b.n	80022f8 <d_parmlist+0x14>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <d_parmlist+0x80>
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e01c      	b.n	800239e <d_parmlist+0xba>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d117      	bne.n	800239c <d_parmlist+0xb8>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b23      	cmp	r3, #35	; 0x23
 8002374:	d112      	bne.n	800239c <d_parmlist+0xb8>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	7c1b      	ldrb	r3, [r3, #16]
 800237e:	2b09      	cmp	r3, #9
 8002380:	d10c      	bne.n	800239c <d_parmlist+0xb8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f107 0718 	add.w	r7, r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <d_bare_function_type>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	74fb      	strb	r3, [r7, #19]
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b4a      	cmp	r3, #74	; 0x4a
 80023be:	d108      	bne.n	80023d2 <d_bare_function_type+0x2a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f103 0201 	add.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	f04f 0301 	mov.w	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <d_bare_function_type+0x46>
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fb0d 	bl	80019f8 <d_type>
 80023de:	4603      	mov	r3, r0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <d_bare_function_type+0x4c>
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e015      	b.n	800241a <d_bare_function_type+0x72>
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff75 	bl	80022e4 <d_parmlist>
 80023fa:	4603      	mov	r3, r0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <d_bare_function_type+0x62>
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e007      	b.n	800241a <d_bare_function_type+0x72>
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f04f 0125 	mov.w	r1, #37	; 0x25
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f7fd ffa2 	bl	800035c <d_make_comp>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	f107 0718 	add.w	r7, r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <d_class_enum_type>:
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fe fb4b 	bl	8000ac8 <d_name>
 8002432:	4603      	mov	r3, r0
 8002434:	4618      	mov	r0, r3
 8002436:	f107 0708 	add.w	r7, r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop

08002440 <d_array_type>:
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b41      	cmp	r3, #65	; 0x41
 8002450:	d108      	bne.n	8002464 <d_array_type+0x24>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f103 0201 	add.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e001      	b.n	8002468 <d_array_type+0x28>
 8002464:	f04f 0301 	mov.w	r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <d_array_type+0x32>
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e061      	b.n	8002536 <d_array_type+0xf6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	74fb      	strb	r3, [r7, #19]
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	2b5f      	cmp	r3, #95	; 0x5f
 800247e:	d103      	bne.n	8002488 <d_array_type+0x48>
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e036      	b.n	80024f6 <d_array_type+0xb6>
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b2f      	cmp	r3, #47	; 0x2f
 800248c:	d927      	bls.n	80024de <d_array_type+0x9e>
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b39      	cmp	r3, #57	; 0x39
 8002492:	d824      	bhi.n	80024de <d_array_type+0x9e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f103 0201 	add.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	74fb      	strb	r3, [r7, #19]
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b2f      	cmp	r3, #47	; 0x2f
 80024b2:	d902      	bls.n	80024ba <d_array_type+0x7a>
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	2b39      	cmp	r3, #57	; 0x39
 80024b8:	d9ef      	bls.n	800249a <d_array_type+0x5a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f7fe f841 	bl	8000550 <d_make_name>
 80024ce:	4603      	mov	r3, r0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10d      	bne.n	80024f4 <d_array_type+0xb4>
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e02b      	b.n	8002536 <d_array_type+0xf6>
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa4c 	bl	800297c <d_expression>
 80024e4:	4603      	mov	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <d_array_type+0xb6>
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e020      	b.n	8002536 <d_array_type+0xf6>
 80024f4:	bf00      	nop
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b5f      	cmp	r3, #95	; 0x5f
 80024fe:	d108      	bne.n	8002512 <d_array_type+0xd2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f103 0201 	add.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e001      	b.n	8002516 <d_array_type+0xd6>
 8002512:	f04f 0301 	mov.w	r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <d_array_type+0xe0>
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e00a      	b.n	8002536 <d_array_type+0xf6>
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fa69 	bl	80019f8 <d_type>
 8002526:	4603      	mov	r3, r0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f04f 0126 	mov.w	r1, #38	; 0x26
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	f7fd ff14 	bl	800035c <d_make_comp>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f107 0718 	add.w	r7, r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <d_vector_type>:
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	72fb      	strb	r3, [r7, #11]
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	2b5f      	cmp	r3, #95	; 0x5f
 8002554:	d10b      	bne.n	800256e <d_vector_type+0x2e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f103 0201 	add.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa0a 	bl	800297c <d_expression>
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e004      	b.n	8002578 <d_vector_type+0x38>
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fd38 	bl	8000fe4 <d_number_component>
 8002574:	4603      	mov	r3, r0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <d_vector_type+0x44>
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e01f      	b.n	80025c4 <d_vector_type+0x84>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b5f      	cmp	r3, #95	; 0x5f
 800258c:	d108      	bne.n	80025a0 <d_vector_type+0x60>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f103 0201 	add.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e001      	b.n	80025a4 <d_vector_type+0x64>
 80025a0:	f04f 0301 	mov.w	r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <d_vector_type+0x6e>
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e00a      	b.n	80025c4 <d_vector_type+0x84>
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fa22 	bl	80019f8 <d_type>
 80025b4:	4603      	mov	r3, r0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f04f 0129 	mov.w	r1, #41	; 0x29
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f7fd fecd 	bl	800035c <d_make_comp>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f107 0710 	add.w	r7, r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop

080025d0 <d_pointer_to_member_type>:
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b4d      	cmp	r3, #77	; 0x4d
 80025e0:	d108      	bne.n	80025f4 <d_pointer_to_member_type+0x24>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f103 0201 	add.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e001      	b.n	80025f8 <d_pointer_to_member_type+0x28>
 80025f4:	f04f 0301 	mov.w	r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <d_pointer_to_member_type+0x32>
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e03e      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f9f8 	bl	80019f8 <d_type>
 8002608:	4603      	mov	r3, r0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4619      	mov	r1, r3
 8002614:	f04f 0201 	mov.w	r2, #1
 8002618:	f7ff fdaa 	bl	8002170 <d_cv_qualifiers>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <d_pointer_to_member_type+0x5c>
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e029      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff f9e3 	bl	80019f8 <d_type>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <d_pointer_to_member_type+0x76>
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e01c      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d00f      	beq.n	8002670 <d_pointer_to_member_type+0xa0>
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b25      	cmp	r3, #37	; 0x25
 8002658:	d00a      	beq.n	8002670 <d_pointer_to_member_type+0xa0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4619      	mov	r1, r3
 8002660:	f000 fe0e 	bl	8003280 <d_add_substitution>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <d_pointer_to_member_type+0xa0>
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e007      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f04f 0127 	mov.w	r1, #39	; 0x27
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	f7fd fe6f 	bl	800035c <d_make_comp>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f107 0718 	add.w	r7, r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop

0800268c <d_compact_number>:
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b5f      	cmp	r3, #95	; 0x5f
 800269c:	d103      	bne.n	80026a6 <d_compact_number+0x1a>
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e00e      	b.n	80026c4 <d_compact_number+0x38>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b6e      	cmp	r3, #110	; 0x6e
 80026ae:	d102      	bne.n	80026b6 <d_compact_number+0x2a>
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	e01c      	b.n	80026f0 <d_compact_number+0x64>
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fc4a 	bl	8000f50 <d_number>
 80026bc:	4603      	mov	r3, r0
 80026be:	f103 0301 	add.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b5f      	cmp	r3, #95	; 0x5f
 80026cc:	d108      	bne.n	80026e0 <d_compact_number+0x54>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f103 0201 	add.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e001      	b.n	80026e4 <d_compact_number+0x58>
 80026e0:	f04f 0301 	mov.w	r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <d_compact_number+0x62>
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	e000      	b.n	80026f0 <d_compact_number+0x64>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f107 0710 	add.w	r7, r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop

080026fc <d_template_param>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b54      	cmp	r3, #84	; 0x54
 800270c:	d108      	bne.n	8002720 <d_template_param+0x24>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f103 0201 	add.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e001      	b.n	8002724 <d_template_param+0x28>
 8002720:	f04f 0301 	mov.w	r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <d_template_param+0x32>
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e015      	b.n	800275a <d_template_param+0x5e>
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffac 	bl	800268c <d_compact_number>
 8002734:	4603      	mov	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da02      	bge.n	8002744 <d_template_param+0x48>
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e00a      	b.n	800275a <d_template_param+0x5e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f103 0201 	add.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	f7fd ffc8 	bl	80006e8 <d_make_template_param>
 8002758:	4603      	mov	r3, r0
 800275a:	4618      	mov	r0, r3
 800275c:	f107 0710 	add.w	r7, r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <d_template_args>:
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b49      	cmp	r3, #73	; 0x49
 800277a:	d108      	bne.n	800278e <d_template_args+0x2a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f103 0201 	add.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e001      	b.n	8002792 <d_template_args+0x2e>
 800278e:	f04f 0301 	mov.w	r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <d_template_args+0x38>
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e04f      	b.n	800283c <d_template_args+0xd8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b45      	cmp	r3, #69	; 0x45
 80027a4:	d110      	bne.n	80027c8 <d_template_args+0x64>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f103 0201 	add.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f04f 012b 	mov.w	r1, #43	; 0x2b
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	f7fd fdcc 	bl	800035c <d_make_comp>
 80027c4:	4603      	mov	r3, r0
 80027c6:	e039      	b.n	800283c <d_template_args+0xd8>
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e000      	b.n	80027d8 <d_template_args+0x74>
 80027d6:	bf00      	nop
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f835 	bl	8002848 <d_template_arg>
 80027de:	4603      	mov	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <d_template_args+0x8a>
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e026      	b.n	800283c <d_template_args+0xd8>
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f04f 012b 	mov.w	r1, #43	; 0x2b
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f7fd fdaf 	bl	800035c <d_make_comp>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <d_template_args+0xae>
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e014      	b.n	800283c <d_template_args+0xd8>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f103 0308 	add.w	r3, r3, #8
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b45      	cmp	r3, #69	; 0x45
 8002824:	d1d7      	bne.n	80027d6 <d_template_args+0x72>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f103 0201 	add.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	bf00      	nop
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4618      	mov	r0, r3
 800283e:	f107 0718 	add.w	r7, r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop

08002848 <d_template_arg>:
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b4c      	cmp	r3, #76	; 0x4c
 8002858:	d026      	beq.n	80028a8 <d_template_arg+0x60>
 800285a:	2b58      	cmp	r3, #88	; 0x58
 800285c:	d002      	beq.n	8002864 <d_template_arg+0x1c>
 800285e:	2b49      	cmp	r3, #73	; 0x49
 8002860:	d027      	beq.n	80028b2 <d_template_arg+0x6a>
 8002862:	e02b      	b.n	80028bc <d_template_arg+0x74>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f103 0201 	add.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f883 	bl	800297c <d_expression>
 8002876:	4603      	mov	r3, r0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b45      	cmp	r3, #69	; 0x45
 8002882:	d108      	bne.n	8002896 <d_template_arg+0x4e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f103 0201 	add.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e001      	b.n	800289a <d_template_arg+0x52>
 8002896:	f04f 0301 	mov.w	r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <d_template_arg+0x5c>
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e00f      	b.n	80028c4 <d_template_arg+0x7c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	e00d      	b.n	80028c4 <d_template_arg+0x7c>
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fa37 	bl	8002d1c <d_expr_primary>
 80028ae:	4603      	mov	r3, r0
 80028b0:	e008      	b.n	80028c4 <d_template_arg+0x7c>
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff56 	bl	8002764 <d_template_args>
 80028b8:	4603      	mov	r3, r0
 80028ba:	e003      	b.n	80028c4 <d_template_arg+0x7c>
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff f89b 	bl	80019f8 <d_type>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f107 0710 	add.w	r7, r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop

080028d0 <d_exprlist>:
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b45      	cmp	r3, #69	; 0x45
 80028ec:	d111      	bne.n	8002912 <d_exprlist+0x42>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f103 0201 	add.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f7fd fd28 	bl	800035c <d_make_comp>
 800290c:	4603      	mov	r3, r0
 800290e:	e02f      	b.n	8002970 <d_exprlist+0xa0>
 8002910:	bf00      	nop
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f832 	bl	800297c <d_expression>
 8002918:	4603      	mov	r3, r0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <d_exprlist+0x58>
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e023      	b.n	8002970 <d_exprlist+0xa0>
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f04f 012a 	mov.w	r1, #42	; 0x2a
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f7fd fd12 	bl	800035c <d_make_comp>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <d_exprlist+0x7c>
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e011      	b.n	8002970 <d_exprlist+0xa0>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f103 0308 	add.w	r3, r3, #8
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b45      	cmp	r3, #69	; 0x45
 800295e:	d1d7      	bne.n	8002910 <d_exprlist+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f103 0201 	add.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	bf00      	nop
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	f107 0718 	add.w	r7, r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop

0800297c <d_expression>:
 800297c:	b580      	push	{r7, lr}
 800297e:	b090      	sub	sp, #64	; 0x40
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800298e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002992:	2b4c      	cmp	r3, #76	; 0x4c
 8002994:	d104      	bne.n	80029a0 <d_expression+0x24>
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9c0 	bl	8002d1c <d_expr_primary>
 800299c:	4603      	mov	r3, r0
 800299e:	e1b8      	b.n	8002d12 <d_expression+0x396>
 80029a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029a4:	2b54      	cmp	r3, #84	; 0x54
 80029a6:	d104      	bne.n	80029b2 <d_expression+0x36>
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fea7 	bl	80026fc <d_template_param>
 80029ae:	4603      	mov	r3, r0
 80029b0:	e1af      	b.n	8002d12 <d_expression+0x396>
 80029b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029b6:	2b73      	cmp	r3, #115	; 0x73
 80029b8:	d137      	bne.n	8002a2a <d_expression+0xae>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f103 0301 	add.w	r3, r3, #1
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b72      	cmp	r3, #114	; 0x72
 80029c6:	d130      	bne.n	8002a2a <d_expression+0xae>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f103 0202 	add.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff f80f 	bl	80019f8 <d_type>
 80029da:	4603      	mov	r3, r0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fa1a 	bl	8000e18 <d_unqualified_name>
 80029e4:	4603      	mov	r3, r0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b49      	cmp	r3, #73	; 0x49
 80029f0:	d008      	beq.n	8002a04 <d_expression+0x88>
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f04f 0101 	mov.w	r1, #1
 80029f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	f7fd fcae 	bl	800035c <d_make_comp>
 8002a00:	4603      	mov	r3, r0
 8002a02:	e186      	b.n	8002d12 <d_expression+0x396>
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fead 	bl	8002764 <d_template_args>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f04f 0104 	mov.w	r1, #4
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	f7fd fca2 	bl	800035c <d_make_comp>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f04f 0101 	mov.w	r1, #1
 8002a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a22:	f7fd fc9b 	bl	800035c <d_make_comp>
 8002a26:	4603      	mov	r3, r0
 8002a28:	e173      	b.n	8002d12 <d_expression+0x396>
 8002a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a2e:	2b73      	cmp	r3, #115	; 0x73
 8002a30:	d11a      	bne.n	8002a68 <d_expression+0xec>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f103 0301 	add.w	r3, r3, #1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b70      	cmp	r3, #112	; 0x70
 8002a3e:	d113      	bne.n	8002a68 <d_expression+0xec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f103 0202 	add.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff95 	bl	800297c <d_expression>
 8002a52:	4603      	mov	r3, r0
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f04f 0141 	mov.w	r1, #65	; 0x41
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f7fd fc7c 	bl	800035c <d_make_comp>
 8002a64:	4603      	mov	r3, r0
 8002a66:	e154      	b.n	8002d12 <d_expression+0x396>
 8002a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a6c:	2b66      	cmp	r3, #102	; 0x66
 8002a6e:	d11d      	bne.n	8002aac <d_expression+0x130>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f103 0301 	add.w	r3, r3, #1
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b70      	cmp	r3, #112	; 0x70
 8002a7c:	d116      	bne.n	8002aac <d_expression+0x130>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f103 0202 	add.w	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fdfe 	bl	800268c <d_compact_number>
 8002a90:	4603      	mov	r3, r0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da02      	bge.n	8002aa0 <d_expression+0x124>
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e138      	b.n	8002d12 <d_expression+0x396>
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	f7fd fe3a 	bl	800071c <d_make_function_param>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	e132      	b.n	8002d12 <d_expression+0x396>
 8002aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8002ab2:	d903      	bls.n	8002abc <d_expression+0x140>
 8002ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab8:	2b39      	cmp	r3, #57	; 0x39
 8002aba:	d90a      	bls.n	8002ad2 <d_expression+0x156>
 8002abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ac0:	2b6f      	cmp	r3, #111	; 0x6f
 8002ac2:	d12e      	bne.n	8002b22 <d_expression+0x1a6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f103 0301 	add.w	r3, r3, #1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b6e      	cmp	r3, #110	; 0x6e
 8002ad0:	d127      	bne.n	8002b22 <d_expression+0x1a6>
 8002ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ad6:	2b6f      	cmp	r3, #111	; 0x6f
 8002ad8:	d105      	bne.n	8002ae6 <d_expression+0x16a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f103 0202 	add.w	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe f996 	bl	8000e18 <d_unqualified_name>
 8002aec:	4603      	mov	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <d_expression+0x180>
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e10a      	b.n	8002d12 <d_expression+0x396>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b49      	cmp	r3, #73	; 0x49
 8002b04:	d10b      	bne.n	8002b1e <d_expression+0x1a2>
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fe2c 	bl	8002764 <d_template_args>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f04f 0104 	mov.w	r1, #4
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	f7fd fc21 	bl	800035c <d_make_comp>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	e0f9      	b.n	8002d12 <d_expression+0x396>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	e0f7      	b.n	8002d12 <d_expression+0x396>
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe faea 	bl	80010fc <d_operator_name>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <d_expression+0x1bc>
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e0ec      	b.n	8002d12 <d_expression+0x396>
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b2c      	cmp	r3, #44	; 0x2c
 8002b3e:	d109      	bne.n	8002b54 <d_expression+0x1d8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f1a3 0302 	sub.w	r3, r3, #2
 8002b4e:	18d2      	adds	r2, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b2c      	cmp	r3, #44	; 0x2c
 8002b5a:	d118      	bne.n	8002b8e <d_expression+0x212>
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f647 41f8 	movw	r1, #31992	; 0x7cf8
 8002b68:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002b6c:	f005 f9c6 	bl	8007efc <strcmp>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <d_expression+0x212>
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe ff3e 	bl	80019f8 <d_type>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	f7fd fbe9 	bl	800035c <d_make_comp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	e0c1      	b.n	8002d12 <d_expression+0x396>
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b2d      	cmp	r3, #45	; 0x2d
 8002b94:	d00b      	beq.n	8002bae <d_expression+0x232>
 8002b96:	2b2e      	cmp	r3, #46	; 0x2e
 8002b98:	d00d      	beq.n	8002bb6 <d_expression+0x23a>
 8002b9a:	2b2c      	cmp	r3, #44	; 0x2c
 8002b9c:	d002      	beq.n	8002ba4 <d_expression+0x228>
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e0b6      	b.n	8002d12 <d_expression+0x396>
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	e007      	b.n	8002bbe <d_expression+0x242>
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb4:	e003      	b.n	8002bbe <d_expression+0x242>
 8002bb6:	f04f 0301 	mov.w	r3, #1
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	bf00      	nop
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d027      	beq.n	8002c14 <d_expression+0x298>
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d07e      	beq.n	8002cc6 <d_expression+0x34a>
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 80a0 	bne.w	8002d0e <d_expression+0x392>
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd4:	d110      	bne.n	8002bf8 <d_expression+0x27c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b5f      	cmp	r3, #95	; 0x5f
 8002bde:	d10b      	bne.n	8002bf8 <d_expression+0x27c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f103 0201 	add.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fe6f 	bl	80028d0 <d_exprlist>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf6:	e004      	b.n	8002c02 <d_expression+0x286>
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff febf 	bl	800297c <d_expression>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	f7fd fba6 	bl	800035c <d_make_comp>
 8002c10:	4603      	mov	r3, r0
 8002c12:	e07e      	b.n	8002d12 <d_expression+0x396>
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fead 	bl	800297c <d_expression>
 8002c22:	4603      	mov	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	69f8      	ldr	r0, [r7, #28]
 8002c28:	f647 319c 	movw	r1, #31644	; 0x7b9c
 8002c2c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c30:	f005 f964 	bl	8007efc <strcmp>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <d_expression+0x2ca>
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fe48 	bl	80028d0 <d_exprlist>
 8002c40:	4603      	mov	r3, r0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	e02f      	b.n	8002ca6 <d_expression+0x32a>
 8002c46:	69f8      	ldr	r0, [r7, #28]
 8002c48:	f647 31e0 	movw	r1, #31712	; 0x7be0
 8002c4c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c50:	f005 f954 	bl	8007efc <strcmp>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <d_expression+0x2f2>
 8002c5a:	69f8      	ldr	r0, [r7, #28]
 8002c5c:	f647 41c8 	movw	r1, #31944	; 0x7cc8
 8002c60:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c64:	f005 f94a 	bl	8007efc <strcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <d_expression+0x320>
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f8d2 	bl	8000e18 <d_unqualified_name>
 8002c74:	4603      	mov	r3, r0
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b49      	cmp	r3, #73	; 0x49
 8002c80:	d111      	bne.n	8002ca6 <d_expression+0x32a>
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fd6e 	bl	8002764 <d_template_args>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f04f 0104 	mov.w	r1, #4
 8002c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c92:	f7fd fb63 	bl	800035c <d_make_comp>
 8002c96:	4603      	mov	r3, r0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9a:	e004      	b.n	8002ca6 <d_expression+0x32a>
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe6d 	bl	800297c <d_expression>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f04f 0131 	mov.w	r1, #49	; 0x31
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	f7fd fb54 	bl	800035c <d_make_comp>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f04f 0130 	mov.w	r1, #48	; 0x30
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	f7fd fb4d 	bl	800035c <d_make_comp>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	e025      	b.n	8002d12 <d_expression+0x396>
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe58 	bl	800297c <d_expression>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fe53 	bl	800297c <d_expression>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fe4e 	bl	800297c <d_expression>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f04f 0134 	mov.w	r1, #52	; 0x34
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	f7fd fb37 	bl	800035c <d_make_comp>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f04f 0133 	mov.w	r1, #51	; 0x33
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	f7fd fb30 	bl	800035c <d_make_comp>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f04f 0132 	mov.w	r1, #50	; 0x32
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	f7fd fb29 	bl	800035c <d_make_comp>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	e001      	b.n	8002d12 <d_expression+0x396>
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <d_expr_primary>:
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b4c      	cmp	r3, #76	; 0x4c
 8002d2c:	d108      	bne.n	8002d40 <d_expr_primary+0x24>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f103 0201 	add.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e001      	b.n	8002d44 <d_expr_primary+0x28>
 8002d40:	f04f 0301 	mov.w	r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <d_expr_primary+0x32>
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e07e      	b.n	8002e4c <d_expr_primary+0x130>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b5f      	cmp	r3, #95	; 0x5f
 8002d56:	d004      	beq.n	8002d62 <d_expr_primary+0x46>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b5a      	cmp	r3, #90	; 0x5a
 8002d60:	d107      	bne.n	8002d72 <d_expr_primary+0x56>
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	f7fd fd10 	bl	800078c <d_mangled_name>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e056      	b.n	8002e20 <d_expr_primary+0x104>
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fe40 	bl	80019f8 <d_type>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <d_expr_primary+0x6c>
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e061      	b.n	8002e4c <d_expr_primary+0x130>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b23      	cmp	r3, #35	; 0x23
 8002d8e:	d10c      	bne.n	8002daa <d_expr_primary+0x8e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	7c1b      	ldrb	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <d_expr_primary+0x8e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	1ad2      	subs	r2, r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
 8002daa:	f04f 0335 	mov.w	r3, #53	; 0x35
 8002dae:	74fb      	strb	r3, [r7, #19]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b6e      	cmp	r3, #110	; 0x6e
 8002db8:	d108      	bne.n	8002dcc <d_expr_primary+0xb0>
 8002dba:	f04f 0336 	mov.w	r3, #54	; 0x36
 8002dbe:	74fb      	strb	r3, [r7, #19]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f103 0201 	add.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e00d      	b.n	8002df0 <d_expr_primary+0xd4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <d_expr_primary+0xc8>
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e033      	b.n	8002e4c <d_expr_primary+0x130>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f103 0201 	add.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b45      	cmp	r3, #69	; 0x45
 8002df8:	d1ec      	bne.n	8002dd4 <d_expr_primary+0xb8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7fd fba1 	bl	8000550 <d_make_name>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	7cfa      	ldrb	r2, [r7, #19]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4611      	mov	r1, r2
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	f7fd faa0 	bl	800035c <d_make_comp>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b45      	cmp	r3, #69	; 0x45
 8002e28:	d108      	bne.n	8002e3c <d_expr_primary+0x120>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f103 0201 	add.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e001      	b.n	8002e40 <d_expr_primary+0x124>
 8002e3c:	f04f 0301 	mov.w	r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <d_expr_primary+0x12e>
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e000      	b.n	8002e4c <d_expr_primary+0x130>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f107 0718 	add.w	r7, r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <d_local_name>:
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b5a      	cmp	r3, #90	; 0x5a
 8002e68:	d108      	bne.n	8002e7c <d_local_name+0x24>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f103 0201 	add.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e001      	b.n	8002e80 <d_local_name+0x28>
 8002e7c:	f04f 0301 	mov.w	r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <d_local_name+0x32>
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e084      	b.n	8002f94 <d_local_name+0x13c>
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	f7fd fda4 	bl	80009dc <d_encoding>
 8002e94:	4603      	mov	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b45      	cmp	r3, #69	; 0x45
 8002ea0:	d108      	bne.n	8002eb4 <d_local_name+0x5c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f103 0201 	add.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e001      	b.n	8002eb8 <d_local_name+0x60>
 8002eb4:	f04f 0301 	mov.w	r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <d_local_name+0x6a>
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e068      	b.n	8002f94 <d_local_name+0x13c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b73      	cmp	r3, #115	; 0x73
 8002eca:	d120      	bne.n	8002f0e <d_local_name+0xb6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f103 0201 	add.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f861 	bl	8002fa0 <d_discriminator>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <d_local_name+0x92>
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e054      	b.n	8002f94 <d_local_name+0x13c>
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f248 016c 	movw	r1, #32876	; 0x806c
 8002ef0:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002ef4:	f04f 020e 	mov.w	r2, #14
 8002ef8:	f7fd fb2a 	bl	8000550 <d_make_name>
 8002efc:	4603      	mov	r3, r0
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f04f 0102 	mov.w	r1, #2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	f7fd fa29 	bl	800035c <d_make_comp>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	e042      	b.n	8002f94 <d_local_name+0x13c>
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d110      	bne.n	8002f40 <d_local_name+0xe8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f103 0201 	add.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fbae 	bl	800268c <d_compact_number>
 8002f30:	4603      	mov	r3, r0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	da02      	bge.n	8002f40 <d_local_name+0xe8>
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e029      	b.n	8002f94 <d_local_name+0x13c>
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fd fdc1 	bl	8000ac8 <d_name>
 8002f46:	4603      	mov	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <d_local_name+0x118>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b3e      	cmp	r3, #62	; 0x3e
 8002f56:	d00a      	beq.n	8002f6e <d_local_name+0x116>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d008      	beq.n	8002f6e <d_local_name+0x116>
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f81f 	bl	8002fa0 <d_discriminator>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <d_local_name+0x118>
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e012      	b.n	8002f94 <d_local_name+0x13c>
 8002f6e:	bf00      	nop
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db06      	blt.n	8002f84 <d_local_name+0x12c>
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	6939      	ldr	r1, [r7, #16]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	f7fd fb5a 	bl	8000634 <d_make_default_arg>
 8002f80:	4603      	mov	r3, r0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f04f 0102 	mov.w	r1, #2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f7fd f9e5 	bl	800035c <d_make_comp>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f107 0718 	add.w	r7, r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop

08002fa0 <d_discriminator>:
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b5f      	cmp	r3, #95	; 0x5f
 8002fb0:	d002      	beq.n	8002fb8 <d_discriminator+0x18>
 8002fb2:	f04f 0301 	mov.w	r3, #1
 8002fb6:	e012      	b.n	8002fde <d_discriminator+0x3e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f103 0201 	add.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fd ffc3 	bl	8000f50 <d_number>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da02      	bge.n	8002fda <d_discriminator+0x3a>
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e001      	b.n	8002fde <d_discriminator+0x3e>
 8002fda:	f04f 0301 	mov.w	r3, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f107 0710 	add.w	r7, r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <d_lambda>:
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b55      	cmp	r3, #85	; 0x55
 8002ff8:	d108      	bne.n	800300c <d_lambda+0x24>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f103 0201 	add.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e001      	b.n	8003010 <d_lambda+0x28>
 800300c:	f04f 0301 	mov.w	r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <d_lambda+0x32>
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e05c      	b.n	80030d4 <d_lambda+0xec>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b6c      	cmp	r3, #108	; 0x6c
 8003022:	d108      	bne.n	8003036 <d_lambda+0x4e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f103 0201 	add.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e001      	b.n	800303a <d_lambda+0x52>
 8003036:	f04f 0301 	mov.w	r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <d_lambda+0x5c>
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e047      	b.n	80030d4 <d_lambda+0xec>
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff f94d 	bl	80022e4 <d_parmlist>
 800304a:	4603      	mov	r3, r0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <d_lambda+0x72>
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e03c      	b.n	80030d4 <d_lambda+0xec>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b45      	cmp	r3, #69	; 0x45
 8003062:	d108      	bne.n	8003076 <d_lambda+0x8e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f103 0201 	add.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e001      	b.n	800307a <d_lambda+0x92>
 8003076:	f04f 0301 	mov.w	r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <d_lambda+0x9c>
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e027      	b.n	80030d4 <d_lambda+0xec>
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fb01 	bl	800268c <d_compact_number>
 800308a:	4603      	mov	r3, r0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da02      	bge.n	800309a <d_lambda+0xb2>
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e01c      	b.n	80030d4 <d_lambda+0xec>
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd f936 	bl	800030c <d_make_empty>
 80030a0:	4603      	mov	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <d_lambda+0xd6>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f04f 023e 	mov.w	r2, #62	; 0x3e
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	f000 f8dd 	bl	8003280 <d_add_substitution>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <d_lambda+0xea>
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e000      	b.n	80030d4 <d_lambda+0xec>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f107 0718 	add.w	r7, r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <d_unnamed_type>:
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b55      	cmp	r3, #85	; 0x55
 80030f0:	d108      	bne.n	8003104 <d_unnamed_type+0x24>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f103 0201 	add.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e001      	b.n	8003108 <d_unnamed_type+0x28>
 8003104:	f04f 0301 	mov.w	r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <d_unnamed_type+0x32>
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e039      	b.n	8003186 <d_unnamed_type+0xa6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b74      	cmp	r3, #116	; 0x74
 800311a:	d108      	bne.n	800312e <d_unnamed_type+0x4e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f103 0201 	add.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e001      	b.n	8003132 <d_unnamed_type+0x52>
 800312e:	f04f 0301 	mov.w	r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <d_unnamed_type+0x5c>
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e024      	b.n	8003186 <d_unnamed_type+0xa6>
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff faa5 	bl	800268c <d_compact_number>
 8003142:	4603      	mov	r3, r0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da02      	bge.n	8003152 <d_unnamed_type+0x72>
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e019      	b.n	8003186 <d_unnamed_type+0xa6>
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd f8da 	bl	800030c <d_make_empty>
 8003158:	4603      	mov	r3, r0
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <d_unnamed_type+0x90>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f04f 0240 	mov.w	r2, #64	; 0x40
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	f000 f884 	bl	8003280 <d_add_substitution>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <d_unnamed_type+0xa4>
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e000      	b.n	8003186 <d_unnamed_type+0xa6>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f107 0710 	add.w	r7, r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <d_clone_suffix>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b2e      	cmp	r3, #46	; 0x2e
 80031aa:	d139      	bne.n	8003220 <d_clone_suffix+0x90>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f103 0301 	add.w	r3, r3, #1
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d905      	bls.n	80031c4 <d_clone_suffix+0x34>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f103 0301 	add.w	r3, r3, #1
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b7a      	cmp	r3, #122	; 0x7a
 80031c2:	d905      	bls.n	80031d0 <d_clone_suffix+0x40>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f103 0301 	add.w	r3, r3, #1
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b5f      	cmp	r3, #95	; 0x5f
 80031ce:	d127      	bne.n	8003220 <d_clone_suffix+0x90>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f103 0302 	add.w	r3, r3, #2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e003      	b.n	80031e2 <d_clone_suffix+0x52>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f103 0301 	add.w	r3, r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b60      	cmp	r3, #96	; 0x60
 80031e8:	d903      	bls.n	80031f2 <d_clone_suffix+0x62>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b7a      	cmp	r3, #122	; 0x7a
 80031f0:	d9f3      	bls.n	80031da <d_clone_suffix+0x4a>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b5f      	cmp	r3, #95	; 0x5f
 80031f8:	d0ef      	beq.n	80031da <d_clone_suffix+0x4a>
 80031fa:	e011      	b.n	8003220 <d_clone_suffix+0x90>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f103 0302 	add.w	r3, r3, #2
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e003      	b.n	800320e <d_clone_suffix+0x7e>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f103 0301 	add.w	r3, r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b2f      	cmp	r3, #47	; 0x2f
 8003214:	d905      	bls.n	8003222 <d_clone_suffix+0x92>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b39      	cmp	r3, #57	; 0x39
 800321c:	d9f3      	bls.n	8003206 <d_clone_suffix+0x76>
 800321e:	e000      	b.n	8003222 <d_clone_suffix+0x92>
 8003220:	bf00      	nop
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b2e      	cmp	r3, #46	; 0x2e
 8003228:	d10b      	bne.n	8003242 <d_clone_suffix+0xb2>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f103 0301 	add.w	r3, r3, #1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b2f      	cmp	r3, #47	; 0x2f
 8003234:	d905      	bls.n	8003242 <d_clone_suffix+0xb2>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f103 0301 	add.w	r3, r3, #1
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b39      	cmp	r3, #57	; 0x39
 8003240:	d9dc      	bls.n	80031fc <d_clone_suffix+0x6c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1acb      	subs	r3, r1, r3
 800324c:	18d2      	adds	r2, r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	6939      	ldr	r1, [r7, #16]
 800325c:	461a      	mov	r2, r3
 800325e:	f7fd f977 	bl	8000550 <d_make_name>
 8003262:	4603      	mov	r3, r0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f04f 0142 	mov.w	r1, #66	; 0x42
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f7fd f874 	bl	800035c <d_make_comp>
 8003274:	4603      	mov	r3, r0
 8003276:	4618      	mov	r0, r3
 8003278:	f107 0718 	add.w	r7, r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <d_add_substitution>:
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <d_add_substitution+0x16>
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e019      	b.n	80032ca <d_add_substitution+0x4a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	429a      	cmp	r2, r3
 80032a0:	db02      	blt.n	80032a8 <d_add_substitution+0x28>
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e010      	b.n	80032ca <d_add_substitution+0x4a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032b4:	18d3      	adds	r3, r2, r3
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f103 0201 	add.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]
 80032c6:	f04f 0301 	mov.w	r3, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f107 070c 	add.w	r7, r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <d_substitution>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b53      	cmp	r3, #83	; 0x53
 80032ea:	d108      	bne.n	80032fe <d_substitution+0x26>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f103 0201 	add.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e001      	b.n	8003302 <d_substitution+0x2a>
 80032fe:	f04f 0301 	mov.w	r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <d_substitution+0x34>
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e0f6      	b.n	80034fa <d_substitution+0x222>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <d_substitution+0x4e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	7813      	ldrb	r3, [r2, #0]
 800331c:	f102 0101 	add.w	r1, r2, #1
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	60d1      	str	r1, [r2, #12]
 8003324:	e001      	b.n	800332a <d_substitution+0x52>
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800332e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003332:	2b5f      	cmp	r3, #95	; 0x5f
 8003334:	d00f      	beq.n	8003356 <d_substitution+0x7e>
 8003336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800333a:	2b2f      	cmp	r3, #47	; 0x2f
 800333c:	d903      	bls.n	8003346 <d_substitution+0x6e>
 800333e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003342:	2b39      	cmp	r3, #57	; 0x39
 8003344:	d907      	bls.n	8003356 <d_substitution+0x7e>
 8003346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d974      	bls.n	8003438 <d_substitution+0x160>
 800334e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003352:	2b5a      	cmp	r3, #90	; 0x5a
 8003354:	d870      	bhi.n	8003438 <d_substitution+0x160>
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 800335c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003360:	2b5f      	cmp	r3, #95	; 0x5f
 8003362:	d052      	beq.n	800340a <d_substitution+0x132>
 8003364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003368:	2b2f      	cmp	r3, #47	; 0x2f
 800336a:	d912      	bls.n	8003392 <d_substitution+0xba>
 800336c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003370:	2b39      	cmp	r3, #57	; 0x39
 8003372:	d80e      	bhi.n	8003392 <d_substitution+0xba>
 8003374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003376:	4613      	mov	r3, r2
 8003378:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800337c:	189b      	adds	r3, r3, r2
 800337e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003382:	461a      	mov	r2, r3
 8003384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
 8003390:	e019      	b.n	80033c6 <d_substitution+0xee>
 8003392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d912      	bls.n	80033c0 <d_substitution+0xe8>
 800339a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800339e:	2b5a      	cmp	r3, #90	; 0x5a
 80033a0:	d80e      	bhi.n	80033c0 <d_substitution+0xe8>
 80033a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a4:	4613      	mov	r3, r2
 80033a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033b6:	18d3      	adds	r3, r2, r3
 80033b8:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e002      	b.n	80033c6 <d_substitution+0xee>
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e099      	b.n	80034fa <d_substitution+0x222>
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d202      	bcs.n	80033d4 <d_substitution+0xfc>
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e092      	b.n	80034fa <d_substitution+0x222>
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <d_substitution+0x11a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	7813      	ldrb	r3, [r2, #0]
 80033e8:	f102 0101 	add.w	r1, r2, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	60d1      	str	r1, [r2, #12]
 80033f0:	e001      	b.n	80033f6 <d_substitution+0x11e>
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80033fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033fe:	2b5f      	cmp	r3, #95	; 0x5f
 8003400:	d1b0      	bne.n	8003364 <d_substitution+0x8c>
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	f103 0301 	add.w	r3, r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	461a      	mov	r2, r3
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	429a      	cmp	r2, r3
 8003414:	d802      	bhi.n	800341c <d_substitution+0x144>
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e06e      	b.n	80034fa <d_substitution+0x222>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	f103 0201 	add.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	e060      	b.n	80034fa <d_substitution+0x222>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2300      	moveq	r3, #0
 8003446:	2301      	movne	r3, #1
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <d_substitution+0x198>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <d_substitution+0x198>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	74fb      	strb	r3, [r7, #19]
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	2b43      	cmp	r3, #67	; 0x43
 8003462:	d002      	beq.n	800346a <d_substitution+0x192>
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	2b44      	cmp	r3, #68	; 0x44
 8003468:	d102      	bne.n	8003470 <d_substitution+0x198>
 800346a:	f04f 0301 	mov.w	r3, #1
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <d_substitution+0x22c>)
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	f248 230c 	movw	r3, #33292	; 0x820c
 8003478:	f6c0 0301 	movt	r3, #2049	; 0x801
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e036      	b.n	80034ee <d_substitution+0x216>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003488:	429a      	cmp	r2, r3
 800348a:	d12c      	bne.n	80034e6 <d_substitution+0x20e>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <d_substitution+0x1d4>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7fd f955 	bl	8000750 <d_make_sub>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <d_substitution+0x1e8>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e005      	b.n	80034cc <d_substitution+0x1f4>
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	f7fd f937 	bl	8000750 <d_make_sub>
 80034e2:	4603      	mov	r3, r0
 80034e4:	e009      	b.n	80034fa <d_substitution+0x222>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f103 031c 	add.w	r3, r3, #28
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d3c4      	bcc.n	8003480 <d_substitution+0x1a8>
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	080182d0 	.word	0x080182d0

08003508 <d_growable_string_init>:
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <d_growable_string_init+0x38>
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	f000 f804 	bl	8003548 <d_growable_string_resize>
 8003540:	f107 0708 	add.w	r7, r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <d_growable_string_resize>:
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d13a      	bne.n	80035d0 <d_growable_string_resize+0x88>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <d_growable_string_resize+0x20>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	e001      	b.n	800356c <d_growable_string_resize+0x24>
 8003568:	f04f 0302 	mov.w	r3, #2
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e003      	b.n	8003578 <d_growable_string_resize+0x30>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d3f7      	bcc.n	8003570 <d_growable_string_resize+0x28>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f004 f9b0 	bl	80078ec <realloc>
 800358c:	4603      	mov	r3, r0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <d_growable_string_resize+0x7a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fd24 	bl	8006fe8 <free>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f04f 0201 	mov.w	r2, #1
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	e007      	b.n	80035d2 <d_growable_string_resize+0x8a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	e000      	b.n	80035d2 <d_growable_string_resize+0x8a>
 80035d0:	bf00      	nop
 80035d2:	f107 0710 	add.w	r7, r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <d_growable_string_append_buffer>:
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	f103 0301 	add.w	r3, r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d203      	bcs.n	8003608 <d_growable_string_append_buffer+0x2c>
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	f7ff ffa0 	bl	8003548 <d_growable_string_resize>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11e      	bne.n	800364e <d_growable_string_append_buffer+0x72>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	18d2      	adds	r2, r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4611      	mov	r1, r2
 800361e:	461a      	mov	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4608      	mov	r0, r1
 8003624:	4611      	mov	r1, r2
 8003626:	461a      	mov	r2, r3
 8003628:	f004 f80c 	bl	8007644 <memcpy>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	18cb      	adds	r3, r1, r3
 8003638:	18d3      	adds	r3, r2, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	18d2      	adds	r2, r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e000      	b.n	8003650 <d_growable_string_append_buffer+0x74>
 800364e:	bf00      	nop
 8003650:	f107 0718 	add.w	r7, r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <d_growable_string_callback_adapter>:
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	6978      	ldr	r0, [r7, #20]
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	f7ff ffb5 	bl	80035dc <d_growable_string_append_buffer>
 8003672:	f107 0718 	add.w	r7, r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <d_print_init>:
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80036dc:	f107 0714 	add.w	r7, r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <d_print_error>:
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f04f 0201 	mov.w	r2, #1
 80036f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80036fa:	f107 070c 	add.w	r7, r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <d_print_saw_error>:
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf0c      	ite	eq
 8003716:	2300      	moveq	r3, #0
 8003718:	2301      	movne	r3, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f107 070c 	add.w	r7, r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop

08003728 <d_print_flush>:
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	711a      	strb	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	f102 0004 	add.w	r0, r2, #4
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8003758:	4798      	blx	r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800376a:	f103 0201 	add.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8003774:	f107 0708 	add.w	r7, r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <d_append_char>:
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	d102      	bne.n	8003798 <d_append_char+0x1c>
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffc8 	bl	8003728 <d_print_flush>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	18d2      	adds	r2, r2, r3
 80037a2:	78f9      	ldrb	r1, [r7, #3]
 80037a4:	7111      	strb	r1, [r2, #4]
 80037a6:	f103 0201 	add.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80037b8:	f107 0708 	add.w	r7, r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <d_append_buffer>:
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e00b      	b.n	80037ec <d_append_buffer+0x2c>
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	4619      	mov	r1, r3
 80037e0:	f7ff ffcc 	bl	800377c <d_append_char>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f103 0301 	add.w	r3, r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3ef      	bcc.n	80037d4 <d_append_buffer+0x14>
 80037f4:	f107 0718 	add.w	r7, r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <d_append_string>:
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	6838      	ldr	r0, [r7, #0]
 8003808:	f004 fcc4 	bl	8008194 <strlen>
 800380c:	4603      	mov	r3, r0
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	6839      	ldr	r1, [r7, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	f7ff ffd4 	bl	80037c0 <d_append_buffer>
 8003818:	f107 0708 	add.w	r7, r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <d_append_num>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	4618      	mov	r0, r3
 8003830:	f248 21d0 	movw	r1, #33488	; 0x82d0
 8003834:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	f004 fb37 	bl	8007eac <sprintf>
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4619      	mov	r1, r3
 8003846:	f7ff ffd9 	bl	80037fc <d_append_string>
 800384a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <d_last_char>:
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003862:	4618      	mov	r0, r3
 8003864:	f107 070c 	add.w	r7, r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <d_print_callback>:
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b0cf      	sub	sp, #316	; 0x13c
 8003874:	af00      	add	r7, sp, #0
 8003876:	f107 040c 	add.w	r4, r7, #12
 800387a:	6020      	str	r0, [r4, #0]
 800387c:	f107 0008 	add.w	r0, r7, #8
 8003880:	6001      	str	r1, [r0, #0]
 8003882:	f107 0104 	add.w	r1, r7, #4
 8003886:	600a      	str	r2, [r1, #0]
 8003888:	463a      	mov	r2, r7
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	f107 0010 	add.w	r0, r7, #16
 8003890:	f107 010c 	add.w	r1, r7, #12
 8003894:	f107 0204 	add.w	r2, r7, #4
 8003898:	463b      	mov	r3, r7
 800389a:	6809      	ldr	r1, [r1, #0]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f7ff feec 	bl	800367c <d_print_init>
 80038a4:	f107 0210 	add.w	r2, r7, #16
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	4610      	mov	r0, r2
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	f000 f9cc 	bl	8003c4c <d_print_comp>
 80038b4:	f107 0310 	add.w	r3, r7, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff35 	bl	8003728 <d_print_flush>
 80038be:	f107 0310 	add.w	r3, r7, #16
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff1e 	bl	8003704 <d_print_saw_error>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2300      	movne	r3, #0
 80038d0:	2301      	moveq	r3, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}

080038dc <d_print>:
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f107 0210 	add.w	r2, r7, #16
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7ff fe08 	bl	8003508 <d_growable_string_init>
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	f243 6259 	movw	r2, #13913	; 0x3659
 8003904:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003908:	f7ff ffb2 	bl	8003870 <d_print_callback>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <d_print+0x4c>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fb67 	bl	8006fe8 <free>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e009      	b.n	800393c <d_print+0x60>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <d_print+0x56>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	e001      	b.n	8003936 <d_print+0x5a>
 8003932:	f04f 0301 	mov.w	r3, #1
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4618      	mov	r0, r3
 800393e:	f107 0720 	add.w	r7, r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <d_index_template_argument>:
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e010      	b.n	800397a <d_index_template_argument+0x32>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b2b      	cmp	r3, #43	; 0x2b
 800395e:	d002      	beq.n	8003966 <d_index_template_argument+0x1e>
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e019      	b.n	800399a <d_index_template_argument+0x52>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	dd0a      	ble.n	8003982 <d_index_template_argument+0x3a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1eb      	bne.n	8003958 <d_index_template_argument+0x10>
 8003980:	e000      	b.n	8003984 <d_index_template_argument+0x3c>
 8003982:	bf00      	nop
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <d_index_template_argument+0x48>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <d_index_template_argument+0x4e>
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e001      	b.n	800399a <d_index_template_argument+0x52>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f107 0714 	add.w	r7, r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop

080039a8 <d_lookup_template_argument>:
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <d_lookup_template_argument+0x20>
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fe93 	bl	80036e8 <d_print_error>
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e00b      	b.n	80039e0 <d_lookup_template_argument+0x38>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	f7ff ffb5 	bl	8003948 <d_index_template_argument>
 80039de:	4603      	mov	r3, r0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f107 0708 	add.w	r7, r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <d_find_pack>:
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <d_find_pack+0x16>
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e0d0      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b41      	cmp	r3, #65	; 0x41
 8003a08:	f200 80b8 	bhi.w	8003b7c <d_find_pack+0x190>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <d_find_pack+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003b47 	.word	0x08003b47
 8003a18:	08003b7d 	.word	0x08003b7d
 8003a1c:	08003b7d 	.word	0x08003b7d
 8003a20:	08003b7d 	.word	0x08003b7d
 8003a24:	08003b7d 	.word	0x08003b7d
 8003a28:	08003b1d 	.word	0x08003b1d
 8003a2c:	08003b47 	.word	0x08003b47
 8003a30:	08003b5d 	.word	0x08003b5d
 8003a34:	08003b6d 	.word	0x08003b6d
 8003a38:	08003b7d 	.word	0x08003b7d
 8003a3c:	08003b7d 	.word	0x08003b7d
 8003a40:	08003b7d 	.word	0x08003b7d
 8003a44:	08003b7d 	.word	0x08003b7d
 8003a48:	08003b7d 	.word	0x08003b7d
 8003a4c:	08003b7d 	.word	0x08003b7d
 8003a50:	08003b7d 	.word	0x08003b7d
 8003a54:	08003b7d 	.word	0x08003b7d
 8003a58:	08003b7d 	.word	0x08003b7d
 8003a5c:	08003b7d 	.word	0x08003b7d
 8003a60:	08003b7d 	.word	0x08003b7d
 8003a64:	08003b7d 	.word	0x08003b7d
 8003a68:	08003b7d 	.word	0x08003b7d
 8003a6c:	08003b47 	.word	0x08003b47
 8003a70:	08003b7d 	.word	0x08003b7d
 8003a74:	08003b7d 	.word	0x08003b7d
 8003a78:	08003b7d 	.word	0x08003b7d
 8003a7c:	08003b7d 	.word	0x08003b7d
 8003a80:	08003b7d 	.word	0x08003b7d
 8003a84:	08003b7d 	.word	0x08003b7d
 8003a88:	08003b7d 	.word	0x08003b7d
 8003a8c:	08003b7d 	.word	0x08003b7d
 8003a90:	08003b7d 	.word	0x08003b7d
 8003a94:	08003b7d 	.word	0x08003b7d
 8003a98:	08003b7d 	.word	0x08003b7d
 8003a9c:	08003b7d 	.word	0x08003b7d
 8003aa0:	08003b47 	.word	0x08003b47
 8003aa4:	08003b7d 	.word	0x08003b7d
 8003aa8:	08003b7d 	.word	0x08003b7d
 8003aac:	08003b7d 	.word	0x08003b7d
 8003ab0:	08003b7d 	.word	0x08003b7d
 8003ab4:	08003b7d 	.word	0x08003b7d
 8003ab8:	08003b7d 	.word	0x08003b7d
 8003abc:	08003b7d 	.word	0x08003b7d
 8003ac0:	08003b7d 	.word	0x08003b7d
 8003ac4:	08003b47 	.word	0x08003b47
 8003ac8:	08003b4d 	.word	0x08003b4d
 8003acc:	08003b7d 	.word	0x08003b7d
 8003ad0:	08003b7d 	.word	0x08003b7d
 8003ad4:	08003b7d 	.word	0x08003b7d
 8003ad8:	08003b7d 	.word	0x08003b7d
 8003adc:	08003b7d 	.word	0x08003b7d
 8003ae0:	08003b7d 	.word	0x08003b7d
 8003ae4:	08003b7d 	.word	0x08003b7d
 8003ae8:	08003b7d 	.word	0x08003b7d
 8003aec:	08003b7d 	.word	0x08003b7d
 8003af0:	08003b7d 	.word	0x08003b7d
 8003af4:	08003b7d 	.word	0x08003b7d
 8003af8:	08003b47 	.word	0x08003b47
 8003afc:	08003b7d 	.word	0x08003b7d
 8003b00:	08003b7d 	.word	0x08003b7d
 8003b04:	08003b7d 	.word	0x08003b7d
 8003b08:	08003b7d 	.word	0x08003b7d
 8003b0c:	08003b47 	.word	0x08003b47
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	f7ff ff42 	bl	80039a8 <d_lookup_template_argument>
 8003b24:	4603      	mov	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <d_find_pack+0x14e>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b2b      	cmp	r3, #43	; 0x2b
 8003b34:	d101      	bne.n	8003b3a <d_find_pack+0x14e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e034      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e031      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e02e      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e02b      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4619      	mov	r1, r3
 8003b54:	f7ff ff4a 	bl	80039ec <d_find_pack>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	e023      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4619      	mov	r1, r3
 8003b64:	f7ff ff42 	bl	80039ec <d_find_pack>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	e01b      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7ff ff3a 	bl	80039ec <d_find_pack>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	e013      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4619      	mov	r1, r3
 8003b84:	f7ff ff32 	bl	80039ec <d_find_pack>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <d_find_pack+0x1aa>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	e006      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7ff ff25 	bl	80039ec <d_find_pack>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f107 0710 	add.w	r7, r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <d_pack_length>:
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e006      	b.n	8003bce <d_pack_length+0x1e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f103 0301 	add.w	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <d_pack_length+0x34>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b2b      	cmp	r3, #43	; 0x2b
 8003bda:	d103      	bne.n	8003be4 <d_pack_length+0x34>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ed      	bne.n	8003bc0 <d_pack_length+0x10>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f107 0714 	add.w	r7, r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop

08003bf4 <d_print_subexpr>:
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <d_print_subexpr+0x20>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d102      	bne.n	8003c1a <d_print_subexpr+0x26>
 8003c14:	f04f 0301 	mov.w	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <d_print_subexpr+0x36>
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f04f 0128 	mov.w	r1, #40	; 0x28
 8003c26:	f7ff fda9 	bl	800377c <d_append_char>
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	f000 f80d 	bl	8003c4c <d_print_comp>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <d_print_subexpr+0x4e>
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f04f 0129 	mov.w	r1, #41	; 0x29
 8003c3e:	f7ff fd9d 	bl	800377c <d_append_char>
 8003c42:	f107 0710 	add.w	r7, r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop

08003c4c <d_print_comp>:
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b0b5      	sub	sp, #212	; 0xd4
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <d_print_comp+0x1a>
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fd43 	bl	80036e8 <d_print_error>
 8003c62:	f001 b8f3 	b.w	8004e4c <d_print_comp+0x1200>
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd4c 	bl	8003704 <d_print_saw_error>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f041 80e1 	bne.w	8004e36 <d_print_comp+0x11ea>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b42      	cmp	r3, #66	; 0x42
 8003c7a:	f201 80d7 	bhi.w	8004e2c <d_print_comp+0x11e0>
 8003c7e:	a101      	add	r1, pc, #4	; (adr r1, 8003c84 <d_print_comp+0x38>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003d91 	.word	0x08003d91
 8003c88:	08003dc9 	.word	0x08003dc9
 8003c8c:	08003dc9 	.word	0x08003dc9
 8003c90:	08003e0b 	.word	0x08003e0b
 8003c94:	080040eb 	.word	0x080040eb
 8003c98:	080041c5 	.word	0x080041c5
 8003c9c:	08004d2b 	.word	0x08004d2b
 8003ca0:	0800423b 	.word	0x0800423b
 8003ca4:	0800424b 	.word	0x0800424b
 8003ca8:	08004265 	.word	0x08004265
 8003cac:	08004283 	.word	0x08004283
 8003cb0:	080042a1 	.word	0x080042a1
 8003cb4:	080042d9 	.word	0x080042d9
 8003cb8:	080042f7 	.word	0x080042f7
 8003cbc:	08004315 	.word	0x08004315
 8003cc0:	08004333 	.word	0x08004333
 8003cc4:	08004351 	.word	0x08004351
 8003cc8:	0800436f 	.word	0x0800436f
 8003ccc:	0800438d 	.word	0x0800438d
 8003cd0:	080043ab 	.word	0x080043ab
 8003cd4:	080043c9 	.word	0x080043c9
 8003cd8:	080043e7 	.word	0x080043e7
 8003cdc:	08004405 	.word	0x08004405
 8003ce0:	0800441b 	.word	0x0800441b
 8003ce4:	0800441b 	.word	0x0800441b
 8003ce8:	0800441b 	.word	0x0800441b
 8003cec:	0800448b 	.word	0x0800448b
 8003cf0:	0800448b 	.word	0x0800448b
 8003cf4:	0800448b 	.word	0x0800448b
 8003cf8:	0800448b 	.word	0x0800448b
 8003cfc:	0800448b 	.word	0x0800448b
 8003d00:	0800448b 	.word	0x0800448b
 8003d04:	0800448b 	.word	0x0800448b
 8003d08:	0800448b 	.word	0x0800448b
 8003d0c:	0800448b 	.word	0x0800448b
 8003d10:	080044d5 	.word	0x080044d5
 8003d14:	08004515 	.word	0x08004515
 8003d18:	08004525 	.word	0x08004525
 8003d1c:	080045c1 	.word	0x080045c1
 8003d20:	08004713 	.word	0x08004713
 8003d24:	0800475b 	.word	0x0800475b
 8003d28:	08004713 	.word	0x08004713
 8003d2c:	080047bb 	.word	0x080047bb
 8003d30:	080047bb 	.word	0x080047bb
 8003d34:	08004849 	.word	0x08004849
 8003d38:	08004895 	.word	0x08004895
 8003d3c:	080048b1 	.word	0x080048b1
 8003d40:	080048c9 	.word	0x080048c9
 8003d44:	0800490f 	.word	0x0800490f
 8003d48:	08004a0d 	.word	0x08004a0d
 8003d4c:	08004a15 	.word	0x08004a15
 8003d50:	08004a7d 	.word	0x08004a7d
 8003d54:	08004a7d 	.word	0x08004a7d
 8003d58:	08004a85 	.word	0x08004a85
 8003d5c:	08004a85 	.word	0x08004a85
 8003d60:	08004c21 	.word	0x08004c21
 8003d64:	08004c3d 	.word	0x08004c3d
 8003d68:	08004c57 	.word	0x08004c57
 8003d6c:	08004c13 	.word	0x08004c13
 8003d70:	08004c67 	.word	0x08004c67
 8003d74:	08004d55 	.word	0x08004d55
 8003d78:	08004d71 	.word	0x08004d71
 8003d7c:	08004d8d 	.word	0x08004d8d
 8003d80:	08004e2d 	.word	0x08004e2d
 8003d84:	08004dd1 	.word	0x08004dd1
 8003d88:	08004c8d 	.word	0x08004c8d
 8003d8c:	08004dfb 	.word	0x08004dfb
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <d_print_comp+0x166>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4611      	mov	r1, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	f7ff fd09 	bl	80037c0 <d_append_buffer>
 8003dae:	f001 b84d 	b.w	8004e4c <d_print_comp+0x1200>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f001 f848 	bl	8004e54 <d_print_java_identifier>
 8003dc4:	f001 b842 	b.w	8004e4c <d_print_comp+0x1200>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7ff ff3c 	bl	8003c4c <d_print_comp>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <d_print_comp+0x1a4>
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f248 21d4 	movw	r1, #33492	; 0x82d4
 8003de6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003dea:	f7ff fd07 	bl	80037fc <d_append_string>
 8003dee:	e004      	b.n	8003dfa <d_print_comp+0x1ae>
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8003df6:	f7ff fcc1 	bl	800377c <d_append_char>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7ff ff23 	bl	8003c4c <d_print_comp>
 8003e06:	f001 b821 	b.w	8004e4c <d_print_comp+0x1200>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e2e:	e05e      	b.n	8003eee <d_print_comp+0x2a2>
 8003e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d904      	bls.n	8003e42 <d_print_comp+0x1f6>
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fc55 	bl	80036e8 <d_print_error>
 8003e3e:	f001 b805 	b.w	8004e4c <d_print_comp+0x1200>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8003e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e50:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003e54:	18cb      	adds	r3, r1, r3
 8003e56:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e60:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e64:	f107 020c 	add.w	r2, r7, #12
 8003e68:	18d2      	adds	r2, r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e74:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e78:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8003e82:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e90:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003e94:	18cb      	adds	r3, r1, r3
 8003e96:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eaa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003eae:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003eb2:	18cb      	adds	r3, r1, r3
 8003eb4:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ebe:	f103 0301 	add.w	r3, r3, #1
 8003ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b1a      	cmp	r3, #26
 8003ece:	d009      	beq.n	8003ee4 <d_print_comp+0x298>
 8003ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b1b      	cmp	r3, #27
 8003ed8:	d004      	beq.n	8003ee4 <d_print_comp+0x298>
 8003eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b1c      	cmp	r3, #28
 8003ee2:	d109      	bne.n	8003ef8 <d_print_comp+0x2ac>
 8003ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d19c      	bne.n	8003e30 <d_print_comp+0x1e4>
 8003ef6:	e000      	b.n	8003efa <d_print_comp+0x2ae>
 8003ef8:	bf00      	nop
 8003efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <d_print_comp+0x2c0>
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fbf0 	bl	80036e8 <d_print_error>
 8003f08:	f000 bfa0 	b.w	8004e4c <d_print_comp+0x1200>
 8003f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d10c      	bne.n	8003f30 <d_print_comp+0x2e4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8003f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f040 8097 	bne.w	800406a <d_print_comp+0x41e>
 8003f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b3f      	cmp	r3, #63	; 0x3f
 8003f4e:	d17a      	bne.n	8004046 <d_print_comp+0x3fa>
 8003f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f5a:	e074      	b.n	8004046 <d_print_comp+0x3fa>
 8003f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d904      	bls.n	8003f6e <d_print_comp+0x322>
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fbbf 	bl	80036e8 <d_print_error>
 8003f6a:	f000 bf6f 	b.w	8004e4c <d_print_comp+0x1200>
 8003f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8003f7e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003f82:	188a      	adds	r2, r1, r2
 8003f84:	f1a2 02c4 	sub.w	r2, r2, #196	; 0xc4
 8003f88:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f8c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003f90:	18cb      	adds	r3, r1, r3
 8003f92:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003f96:	4614      	mov	r4, r2
 8003f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fa6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003faa:	f107 020c 	add.w	r2, r7, #12
 8003fae:	18d2      	adds	r2, r2, r3
 8003fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fb4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fb8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003fbc:	18cb      	adds	r3, r1, r3
 8003fbe:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fcc:	f107 020c 	add.w	r2, r7, #12
 8003fd0:	18d2      	adds	r2, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fdc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fe0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fe4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003fe8:	18d3      	adds	r3, r2, r3
 8003fea:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8003fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ff8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ffc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004000:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004004:	18cb      	adds	r3, r1, r3
 8004006:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004014:	f103 33ff 	add.w	r3, r3, #4294967295
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 800401e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004022:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004026:	18cb      	adds	r3, r1, r3
 8004028:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004032:	f103 0301 	add.w	r3, r3, #1
 8004036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800403a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004044:	e000      	b.n	8004048 <d_print_comp+0x3fc>
 8004046:	bf00      	nop
 8004048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b1a      	cmp	r3, #26
 8004050:	d084      	beq.n	8003f5c <d_print_comp+0x310>
 8004052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b1b      	cmp	r3, #27
 800405a:	f43f af7f 	beq.w	8003f5c <d_print_comp+0x310>
 800405e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b1c      	cmp	r3, #28
 8004066:	f43f af79 	beq.w	8003f5c <d_print_comp+0x310>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4619      	mov	r1, r3
 8004072:	f7ff fdeb 	bl	8003c4c <d_print_comp>
 8004076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b04      	cmp	r3, #4
 800407e:	d129      	bne.n	80040d4 <d_print_comp+0x488>
 8004080:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004088:	e024      	b.n	80040d4 <d_print_comp+0x488>
 800408a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800408e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800409a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800409e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80040a2:	18d3      	adds	r3, r2, r3
 80040a4:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d112      	bne.n	80040d4 <d_print_comp+0x488>
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f04f 0120 	mov.w	r1, #32
 80040b4:	f7ff fb62 	bl	800377c <d_append_char>
 80040b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80040c0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80040c4:	18cb      	adds	r3, r1, r3
 80040c6:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4619      	mov	r1, r3
 80040d0:	f001 f82a 	bl	8005128 <d_print_mod>
 80040d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1d6      	bne.n	800408a <d_print_comp+0x43e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80040e6:	f000 beb1 	b.w	8004e4c <d_print_comp+0x1200>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80040f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d026      	beq.n	8004160 <d_print_comp+0x514>
 8004112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d121      	bne.n	8004160 <d_print_comp+0x514>
 800411c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d11c      	bne.n	8004160 <d_print_comp+0x514>
 8004126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	f248 21d8 	movw	r1, #33496	; 0x82d8
 8004132:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004136:	f04f 0206 	mov.w	r2, #6
 800413a:	f004 f85b 	bl	80081f4 <strncmp>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <d_print_comp+0x514>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4619      	mov	r1, r3
 800414c:	f7ff fd7e 	bl	8003c4c <d_print_comp>
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f647 411c 	movw	r1, #31772	; 0x7c1c
 8004156:	f6c0 0101 	movt	r1, #2049	; 0x801
 800415a:	f7ff fb4f 	bl	80037fc <d_append_string>
 800415e:	e02a      	b.n	80041b6 <d_print_comp+0x56a>
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004166:	f7ff fd71 	bl	8003c4c <d_print_comp>
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fb72 	bl	8003854 <d_last_char>
 8004170:	4603      	mov	r3, r0
 8004172:	2b3c      	cmp	r3, #60	; 0x3c
 8004174:	d104      	bne.n	8004180 <d_print_comp+0x534>
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f04f 0120 	mov.w	r1, #32
 800417c:	f7ff fafe 	bl	800377c <d_append_char>
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8004186:	f7ff faf9 	bl	800377c <d_append_char>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	f7ff fd5b 	bl	8003c4c <d_print_comp>
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fb5c 	bl	8003854 <d_last_char>
 800419c:	4603      	mov	r3, r0
 800419e:	2b3e      	cmp	r3, #62	; 0x3e
 80041a0:	d104      	bne.n	80041ac <d_print_comp+0x560>
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f04f 0120 	mov.w	r1, #32
 80041a8:	f7ff fae8 	bl	800377c <d_append_char>
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f04f 013e 	mov.w	r1, #62	; 0x3e
 80041b2:	f7ff fae3 	bl	800377c <d_append_char>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80041bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80041c0:	f000 be44 	b.w	8004e4c <d_print_comp+0x1200>
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	f7ff fbee 	bl	80039a8 <d_lookup_template_argument>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00f      	beq.n	80041fa <d_print_comp+0x5ae>
 80041da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b2b      	cmp	r3, #43	; 0x2b
 80041e2:	d10a      	bne.n	80041fa <d_print_comp+0x5ae>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041ea:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80041ee:	4619      	mov	r1, r3
 80041f0:	f7ff fbaa 	bl	8003948 <d_index_template_argument>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <d_print_comp+0x5c0>
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fa70 	bl	80036e8 <d_print_error>
 8004208:	f000 be20 	b.w	8004e4c <d_print_comp+0x1200>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8004228:	f7ff fd10 	bl	8003c4c <d_print_comp>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004232:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004236:	f000 be09 	b.w	8004e4c <d_print_comp+0x1200>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4619      	mov	r1, r3
 8004242:	f7ff fd03 	bl	8003c4c <d_print_comp>
 8004246:	f000 be01 	b.w	8004e4c <d_print_comp+0x1200>
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f04f 017e 	mov.w	r1, #126	; 0x7e
 8004250:	f7ff fa94 	bl	800377c <d_append_char>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4619      	mov	r1, r3
 800425c:	f7ff fcf6 	bl	8003c4c <d_print_comp>
 8004260:	f000 bdf4 	b.w	8004e4c <d_print_comp+0x1200>
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f248 21e0 	movw	r1, #33504	; 0x82e0
 800426a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800426e:	f7ff fac5 	bl	80037fc <d_append_string>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4619      	mov	r1, r3
 800427a:	f7ff fce7 	bl	8003c4c <d_print_comp>
 800427e:	f000 bde5 	b.w	8004e4c <d_print_comp+0x1200>
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f248 21ec 	movw	r1, #33516	; 0x82ec
 8004288:	f6c0 0101 	movt	r1, #2049	; 0x801
 800428c:	f7ff fab6 	bl	80037fc <d_append_string>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	f7ff fcd8 	bl	8003c4c <d_print_comp>
 800429c:	f000 bdd6 	b.w	8004e4c <d_print_comp+0x1200>
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f248 21f8 	movw	r1, #33528	; 0x82f8
 80042a6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042aa:	f7ff faa7 	bl	80037fc <d_append_string>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7ff fcc9 	bl	8003c4c <d_print_comp>
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f248 3114 	movw	r1, #33556	; 0x8314
 80042c0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042c4:	f7ff fa9a 	bl	80037fc <d_append_string>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7ff fcbc 	bl	8003c4c <d_print_comp>
 80042d4:	f000 bdba 	b.w	8004e4c <d_print_comp+0x1200>
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f248 311c 	movw	r1, #33564	; 0x831c
 80042de:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042e2:	f7ff fa8b 	bl	80037fc <d_append_string>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f7ff fcad 	bl	8003c4c <d_print_comp>
 80042f2:	f000 bdab 	b.w	8004e4c <d_print_comp+0x1200>
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f248 312c 	movw	r1, #33580	; 0x832c
 80042fc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004300:	f7ff fa7c 	bl	80037fc <d_append_string>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4619      	mov	r1, r3
 800430c:	f7ff fc9e 	bl	8003c4c <d_print_comp>
 8004310:	f000 bd9c 	b.w	8004e4c <d_print_comp+0x1200>
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f248 3140 	movw	r1, #33600	; 0x8340
 800431a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800431e:	f7ff fa6d 	bl	80037fc <d_append_string>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	f7ff fc8f 	bl	8003c4c <d_print_comp>
 800432e:	f000 bd8d 	b.w	8004e4c <d_print_comp+0x1200>
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f248 3154 	movw	r1, #33620	; 0x8354
 8004338:	f6c0 0101 	movt	r1, #2049	; 0x801
 800433c:	f7ff fa5e 	bl	80037fc <d_append_string>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4619      	mov	r1, r3
 8004348:	f7ff fc80 	bl	8003c4c <d_print_comp>
 800434c:	f000 bd7e 	b.w	8004e4c <d_print_comp+0x1200>
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f248 316c 	movw	r1, #33644	; 0x836c
 8004356:	f6c0 0101 	movt	r1, #2049	; 0x801
 800435a:	f7ff fa4f 	bl	80037fc <d_append_string>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	f7ff fc71 	bl	8003c4c <d_print_comp>
 800436a:	f000 bd6f 	b.w	8004e4c <d_print_comp+0x1200>
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f248 3180 	movw	r1, #33664	; 0x8380
 8004374:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004378:	f7ff fa40 	bl	80037fc <d_append_string>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4619      	mov	r1, r3
 8004384:	f7ff fc62 	bl	8003c4c <d_print_comp>
 8004388:	f000 bd60 	b.w	8004e4c <d_print_comp+0x1200>
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f248 319c 	movw	r1, #33692	; 0x839c
 8004392:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004396:	f7ff fa31 	bl	80037fc <d_append_string>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7ff fc53 	bl	8003c4c <d_print_comp>
 80043a6:	f000 bd51 	b.w	8004e4c <d_print_comp+0x1200>
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f248 31ac 	movw	r1, #33708	; 0x83ac
 80043b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80043b4:	f7ff fa22 	bl	80037fc <d_append_string>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4619      	mov	r1, r3
 80043c0:	f7ff fc44 	bl	8003c4c <d_print_comp>
 80043c4:	f000 bd42 	b.w	8004e4c <d_print_comp+0x1200>
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f248 31c0 	movw	r1, #33728	; 0x83c0
 80043ce:	f6c0 0101 	movt	r1, #2049	; 0x801
 80043d2:	f7ff fa13 	bl	80037fc <d_append_string>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4619      	mov	r1, r3
 80043de:	f7ff fc35 	bl	8003c4c <d_print_comp>
 80043e2:	f000 bd33 	b.w	8004e4c <d_print_comp+0x1200>
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f248 31dc 	movw	r1, #33756	; 0x83dc
 80043ec:	f6c0 0101 	movt	r1, #2049	; 0x801
 80043f0:	f7ff fa04 	bl	80037fc <d_append_string>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4619      	mov	r1, r3
 80043fc:	f7ff fc26 	bl	8003c4c <d_print_comp>
 8004400:	f000 bd24 	b.w	8004e4c <d_print_comp+0x1200>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	f7ff f9d5 	bl	80037c0 <d_append_buffer>
 8004416:	f000 bd19 	b.w	8004e4c <d_print_comp+0x1200>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004424:	e02b      	b.n	800447e <d_print_comp+0x832>
 8004426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d121      	bne.n	8004474 <d_print_comp+0x828>
 8004430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b17      	cmp	r3, #23
 800443a:	d00b      	beq.n	8004454 <d_print_comp+0x808>
 800443c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b18      	cmp	r3, #24
 8004446:	d005      	beq.n	8004454 <d_print_comp+0x808>
 8004448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b19      	cmp	r3, #25
 8004452:	d119      	bne.n	8004488 <d_print_comp+0x83c>
 8004454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <d_print_comp+0x828>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4619      	mov	r1, r3
 800446c:	f7ff fbee 	bl	8003c4c <d_print_comp>
 8004470:	f000 bcec 	b.w	8004e4c <d_print_comp+0x1200>
 8004474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800447e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1cf      	bne.n	8004426 <d_print_comp+0x7da>
 8004486:	e000      	b.n	800448a <d_print_comp+0x83e>
 8004488:	bf00      	nop
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004498:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	673b      	str	r3, [r7, #112]	; 0x70
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	677b      	str	r3, [r7, #116]	; 0x74
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80044ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7ff fbc9 	bl	8003c4c <d_print_comp>
 80044ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <d_print_comp+0x87c>
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	f000 fe30 	bl	8005128 <d_print_mod>
 80044c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80044d0:	f000 bcbc 	b.w	8004e4c <d_print_comp+0x1200>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10c      	bne.n	80044fa <d_print_comp+0x8ae>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	f7ff f965 	bl	80037c0 <d_append_buffer>
 80044f6:	f000 bca9 	b.w	8004e4c <d_print_comp+0x1200>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4611      	mov	r1, r2
 800450a:	461a      	mov	r2, r3
 800450c:	f7ff f958 	bl	80037c0 <d_append_buffer>
 8004510:	f000 bc9c 	b.w	8004e4c <d_print_comp+0x1200>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4619      	mov	r1, r3
 800451c:	f7ff fb96 	bl	8003c4c <d_print_comp>
 8004520:	f000 bc94 	b.w	8004e4c <d_print_comp+0x1200>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <d_print_comp+0x8f4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fede 	bl	80052fc <d_print_function_type>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02a      	beq.n	800459e <d_print_comp+0x952>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004556:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	663b      	str	r3, [r7, #96]	; 0x60
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	667b      	str	r3, [r7, #100]	; 0x64
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800456a:	66bb      	str	r3, [r7, #104]	; 0x68
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4619      	mov	r1, r3
 8004574:	f7ff fb6a 	bl	8003c4c <d_print_comp>
 8004578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 8459 	bne.w	8004e3a <d_print_comp+0x11ee>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <d_print_comp+0x952>
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f04f 0120 	mov.w	r1, #32
 800459a:	f7ff f8ef 	bl	800377c <d_append_char>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8449 	bne.w	8004e3e <d_print_comp+0x11f2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fea0 	bl	80052fc <d_print_function_type>
 80045bc:	f000 bc3f 	b.w	8004e3e <d_print_comp+0x11f2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80045c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f107 020c 	add.w	r2, r7, #12
 80045d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	f04f 0301 	mov.w	r3, #1
 80045f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045fc:	e043      	b.n	8004686 <d_print_comp+0xa3a>
 80045fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d139      	bne.n	800467c <d_print_comp+0xa30>
 8004608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800460c:	2b03      	cmp	r3, #3
 800460e:	d904      	bls.n	800461a <d_print_comp+0x9ce>
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff f869 	bl	80036e8 <d_print_error>
 8004616:	f000 bc19 	b.w	8004e4c <d_print_comp+0x1200>
 800461a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800461e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004622:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004626:	18d3      	adds	r3, r2, r3
 8004628:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 800462c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004630:	4614      	mov	r4, r2
 8004632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800463e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004642:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004646:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800464a:	18cb      	adds	r3, r1, r3
 800464c:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004656:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800465a:	f107 020c 	add.w	r2, r7, #12
 800465e:	18d2      	adds	r2, r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800466a:	f04f 0201 	mov.w	r2, #1
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004674:	f103 0301 	add.w	r3, r3, #1
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800467c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <d_print_comp+0xa66>
 800468e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b17      	cmp	r3, #23
 8004698:	d0b1      	beq.n	80045fe <d_print_comp+0x9b2>
 800469a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b18      	cmp	r3, #24
 80046a4:	d0ab      	beq.n	80045fe <d_print_comp+0x9b2>
 80046a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b19      	cmp	r3, #25
 80046b0:	d0a5      	beq.n	80045fe <d_print_comp+0x9b2>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	f7ff fac7 	bl	8003c4c <d_print_comp>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80046c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <d_print_comp+0xaac>
 80046ce:	e3bd      	b.n	8004e4c <d_print_comp+0x1200>
 80046d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80046d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046e4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4619      	mov	r1, r3
 80046f4:	f000 fd18 	bl	8005128 <d_print_mod>
 80046f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d8e7      	bhi.n	80046d0 <d_print_comp+0xa84>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fea0 	bl	8005450 <d_print_array_type>
 8004710:	e39c      	b.n	8004e4c <d_print_comp+0x1200>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004720:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	657b      	str	r3, [r7, #84]	; 0x54
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004734:	65bb      	str	r3, [r7, #88]	; 0x58
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	f7ff fa85 	bl	8003c4c <d_print_comp>
 8004742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <d_print_comp+0xb04>
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	f000 fcec 	bl	8005128 <d_print_mod>
 8004750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004758:	e378      	b.n	8004e4c <d_print_comp+0x1200>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	895b      	ldrh	r3, [r3, #10]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <d_print_comp+0xb24>
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f248 31f0 	movw	r1, #33776	; 0x83f0
 8004768:	f6c0 0101 	movt	r1, #2049	; 0x801
 800476c:	f7ff f846 	bl	80037fc <d_append_string>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4ba4      	ldr	r3, [pc, #656]	; (8004a08 <d_print_comp+0xdbc>)
 8004778:	429a      	cmp	r2, r3
 800477a:	d00a      	beq.n	8004792 <d_print_comp+0xb46>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4619      	mov	r1, r3
 8004784:	f7ff fa62 	bl	8003c4c <d_print_comp>
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f04f 0120 	mov.w	r1, #32
 800478e:	f7fe fff5 	bl	800377c <d_append_char>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	891b      	ldrh	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <d_print_comp+0xb5e>
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f248 31f8 	movw	r1, #33784	; 0x83f8
 80047a0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80047a4:	f7ff f82a 	bl	80037fc <d_append_string>
 80047a8:	e350      	b.n	8004e4c <d_print_comp+0x1200>
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f248 4100 	movw	r1, #33792	; 0x8400
 80047b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80047b4:	f7ff f822 	bl	80037fc <d_append_string>
 80047b8:	e348      	b.n	8004e4c <d_print_comp+0x1200>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <d_print_comp+0xb82>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7ff fa3f 	bl	8003c4c <d_print_comp>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8335 	beq.w	8004e42 <d_print_comp+0x11f6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80047de:	2bfd      	cmp	r3, #253	; 0xfd
 80047e0:	d902      	bls.n	80047e8 <d_print_comp+0xb9c>
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe ffa0 	bl	8003728 <d_print_flush>
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f248 4108 	movw	r1, #33800	; 0x8408
 80047ee:	f6c0 0101 	movt	r1, #2049	; 0x801
 80047f2:	f7ff f803 	bl	80037fc <d_append_string>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80047fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	f7ff fa1b 	bl	8003c4c <d_print_comp>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004820:	429a      	cmp	r2, r3
 8004822:	f040 830e 	bne.w	8004e42 <d_print_comp+0x11f6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800482c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 8306 	bne.w	8004e42 <d_print_comp+0x11f6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800483c:	f1a3 0202 	sub.w	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8004846:	e2fc      	b.n	8004e42 <d_print_comp+0x11f6>
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f248 410c 	movw	r1, #33804	; 0x840c
 800484e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004852:	f7fe ffd3 	bl	80037fc <d_append_string>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004862:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004866:	2b60      	cmp	r3, #96	; 0x60
 8004868:	d908      	bls.n	800487c <d_print_comp+0xc30>
 800486a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800486e:	2b7a      	cmp	r3, #122	; 0x7a
 8004870:	d804      	bhi.n	800487c <d_print_comp+0xc30>
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f04f 0120 	mov.w	r1, #32
 8004878:	f7fe ff80 	bl	800377c <d_append_char>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4611      	mov	r1, r2
 800488c:	461a      	mov	r2, r3
 800488e:	f7fe ff97 	bl	80037c0 <d_append_buffer>
 8004892:	e2db      	b.n	8004e4c <d_print_comp+0x1200>
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f248 4118 	movw	r1, #33816	; 0x8418
 800489a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800489e:	f7fe ffad 	bl	80037fc <d_append_string>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7ff f9cf 	bl	8003c4c <d_print_comp>
 80048ae:	e2cd      	b.n	8004e4c <d_print_comp+0x1200>
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f248 4118 	movw	r1, #33816	; 0x8418
 80048b6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80048ba:	f7fe ff9f 	bl	80037fc <d_append_string>
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	f000 fe47 	bl	8005554 <d_print_cast>
 80048c6:	e2c1      	b.n	8004e4c <d_print_comp+0x1200>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b2e      	cmp	r3, #46	; 0x2e
 80048d0:	d006      	beq.n	80048e0 <d_print_comp+0xc94>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4619      	mov	r1, r3
 80048da:	f000 fe1d 	bl	8005518 <d_print_expr_op>
 80048de:	e00f      	b.n	8004900 <d_print_comp+0xcb4>
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f04f 0128 	mov.w	r1, #40	; 0x28
 80048e6:	f7fe ff49 	bl	800377c <d_append_char>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4619      	mov	r1, r3
 80048f2:	f000 fe2f 	bl	8005554 <d_print_cast>
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f04f 0129 	mov.w	r1, #41	; 0x29
 80048fc:	f7fe ff3e 	bl	800377c <d_append_char>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4619      	mov	r1, r3
 8004908:	f7ff f974 	bl	8003bf4 <d_print_subexpr>
 800490c:	e29e      	b.n	8004e4c <d_print_comp+0x1200>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b31      	cmp	r3, #49	; 0x31
 8004916:	d003      	beq.n	8004920 <d_print_comp+0xcd4>
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fe fee5 	bl	80036e8 <d_print_error>
 800491e:	e295      	b.n	8004e4c <d_print_comp+0x1200>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b2c      	cmp	r3, #44	; 0x2c
 8004928:	d111      	bne.n	800494e <d_print_comp+0xd02>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10b      	bne.n	800494e <d_print_comp+0xd02>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b3e      	cmp	r3, #62	; 0x3e
 8004942:	d104      	bne.n	800494e <d_print_comp+0xd02>
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f04f 0128 	mov.w	r1, #40	; 0x28
 800494a:	f7fe ff17 	bl	800377c <d_append_char>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4619      	mov	r1, r3
 8004958:	f7ff f94c 	bl	8003bf4 <d_print_subexpr>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f647 4118 	movw	r1, #31768	; 0x7c18
 800496a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800496e:	f003 fac5 	bl	8007efc <strcmp>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <d_print_comp+0xd50>
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f04f 015b 	mov.w	r1, #91	; 0x5b
 800497e:	f7fe fefd 	bl	800377c <d_append_char>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	f7ff f95e 	bl	8003c4c <d_print_comp>
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004996:	f7fe fef1 	bl	800377c <d_append_char>
 800499a:	e01a      	b.n	80049d2 <d_print_comp+0xd86>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f647 319c 	movw	r1, #31644	; 0x7b9c
 80049aa:	f6c0 0101 	movt	r1, #2049	; 0x801
 80049ae:	f003 faa5 	bl	8007efc <strcmp>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <d_print_comp+0xd78>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4619      	mov	r1, r3
 80049c0:	f000 fdaa 	bl	8005518 <d_print_expr_op>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7ff f911 	bl	8003bf4 <d_print_subexpr>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b2c      	cmp	r3, #44	; 0x2c
 80049da:	f040 8234 	bne.w	8004e46 <d_print_comp+0x11fa>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	f040 822d 	bne.w	8004e46 <d_print_comp+0x11fa>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b3e      	cmp	r3, #62	; 0x3e
 80049f8:	f040 8225 	bne.w	8004e46 <d_print_comp+0x11fa>
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004a02:	f7fe febb 	bl	800377c <d_append_char>
 8004a06:	e21e      	b.n	8004e46 <d_print_comp+0x11fa>
 8004a08:	0801795c 	.word	0x0801795c
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe fe6b 	bl	80036e8 <d_print_error>
 8004a12:	e21b      	b.n	8004e4c <d_print_comp+0x1200>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b33      	cmp	r3, #51	; 0x33
 8004a1c:	d105      	bne.n	8004a2a <d_print_comp+0xdde>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b34      	cmp	r3, #52	; 0x34
 8004a28:	d003      	beq.n	8004a32 <d_print_comp+0xde6>
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe fe5c 	bl	80036e8 <d_print_error>
 8004a30:	e20c      	b.n	8004e4c <d_print_comp+0x1200>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7ff f8da 	bl	8003bf4 <d_print_subexpr>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f000 fd66 	bl	8005518 <d_print_expr_op>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4619      	mov	r1, r3
 8004a58:	f7ff f8cc 	bl	8003bf4 <d_print_subexpr>
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f248 4124 	movw	r1, #33828	; 0x8424
 8004a62:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004a66:	f7fe fec9 	bl	80037fc <d_append_string>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f7ff f8bd 	bl	8003bf4 <d_print_subexpr>
 8004a7a:	e1e7      	b.n	8004e4c <d_print_comp+0x1200>
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fe fe33 	bl	80036e8 <d_print_error>
 8004a82:	e1e3      	b.n	8004e4c <d_print_comp+0x1200>
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b23      	cmp	r3, #35	; 0x23
 8004a94:	f040 808a 	bne.w	8004bac <d_print_comp+0xf60>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	7c1b      	ldrb	r3, [r3, #16]
 8004aa0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8004aa4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	db7a      	blt.n	8004ba2 <d_print_comp+0xf56>
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	dd02      	ble.n	8004ab6 <d_print_comp+0xe6a>
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d04d      	beq.n	8004b50 <d_print_comp+0xf04>
 8004ab4:	e075      	b.n	8004ba2 <d_print_comp+0xf56>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d172      	bne.n	8004ba6 <d_print_comp+0xf5a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b36      	cmp	r3, #54	; 0x36
 8004ac6:	d104      	bne.n	8004ad2 <d_print_comp+0xe86>
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8004ace:	f7fe fe55 	bl	800377c <d_append_char>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f7ff f8b7 	bl	8003c4c <d_print_comp>
 8004ade:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004ae2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d830      	bhi.n	8004b4c <d_print_comp+0xf00>
 8004aea:	a101      	add	r1, pc, #4	; (adr r1, 8004af0 <d_print_comp+0xea4>)
 8004aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af0:	08004b05 	.word	0x08004b05
 8004af4:	08004b11 	.word	0x08004b11
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004b3d 	.word	0x08004b3d
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f04f 0175 	mov.w	r1, #117	; 0x75
 8004b0a:	f7fe fe37 	bl	800377c <d_append_char>
 8004b0e:	e01e      	b.n	8004b4e <d_print_comp+0xf02>
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f04f 016c 	mov.w	r1, #108	; 0x6c
 8004b16:	f7fe fe31 	bl	800377c <d_append_char>
 8004b1a:	e018      	b.n	8004b4e <d_print_comp+0xf02>
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f248 4128 	movw	r1, #33832	; 0x8428
 8004b22:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b26:	f7fe fe69 	bl	80037fc <d_append_string>
 8004b2a:	e010      	b.n	8004b4e <d_print_comp+0xf02>
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f248 412c 	movw	r1, #33836	; 0x842c
 8004b32:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b36:	f7fe fe61 	bl	80037fc <d_append_string>
 8004b3a:	e008      	b.n	8004b4e <d_print_comp+0xf02>
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f248 4130 	movw	r1, #33840	; 0x8430
 8004b42:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b46:	f7fe fe59 	bl	80037fc <d_append_string>
 8004b4a:	e000      	b.n	8004b4e <d_print_comp+0xf02>
 8004b4c:	bf00      	nop
 8004b4e:	e17d      	b.n	8004e4c <d_print_comp+0x1200>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d127      	bne.n	8004baa <d_print_comp+0xf5e>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d122      	bne.n	8004baa <d_print_comp+0xf5e>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b35      	cmp	r3, #53	; 0x35
 8004b6a:	d11e      	bne.n	8004baa <d_print_comp+0xf5e>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d002      	beq.n	8004b7e <d_print_comp+0xf32>
 8004b78:	2b31      	cmp	r3, #49	; 0x31
 8004b7a:	d008      	beq.n	8004b8e <d_print_comp+0xf42>
 8004b7c:	e00f      	b.n	8004b9e <d_print_comp+0xf52>
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f248 4134 	movw	r1, #33844	; 0x8434
 8004b84:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b88:	f7fe fe38 	bl	80037fc <d_append_string>
 8004b8c:	e15e      	b.n	8004e4c <d_print_comp+0x1200>
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f248 413c 	movw	r1, #33852	; 0x843c
 8004b94:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b98:	f7fe fe30 	bl	80037fc <d_append_string>
 8004b9c:	e156      	b.n	8004e4c <d_print_comp+0x1200>
 8004b9e:	bf00      	nop
 8004ba0:	e003      	b.n	8004baa <d_print_comp+0xf5e>
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <d_print_comp+0xf60>
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <d_print_comp+0xf60>
 8004baa:	bf00      	nop
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f04f 0128 	mov.w	r1, #40	; 0x28
 8004bb2:	f7fe fde3 	bl	800377c <d_append_char>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f7ff f845 	bl	8003c4c <d_print_comp>
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004bc8:	f7fe fdd8 	bl	800377c <d_append_char>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b36      	cmp	r3, #54	; 0x36
 8004bd2:	d104      	bne.n	8004bde <d_print_comp+0xf92>
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8004bda:	f7fe fdcf 	bl	800377c <d_append_char>
 8004bde:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d104      	bne.n	8004bf0 <d_print_comp+0xfa4>
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8004bec:	f7fe fdc6 	bl	800377c <d_append_char>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f7ff f828 	bl	8003c4c <d_print_comp>
 8004bfc:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	f040 8122 	bne.w	8004e4a <d_print_comp+0x11fe>
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004c0c:	f7fe fdb6 	bl	800377c <d_append_char>
 8004c10:	e11b      	b.n	8004e4a <d_print_comp+0x11fe>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fe fe01 	bl	8003820 <d_append_num>
 8004c1e:	e115      	b.n	8004e4c <d_print_comp+0x1200>
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f248 4144 	movw	r1, #33860	; 0x8444
 8004c26:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004c2a:	f7fe fde7 	bl	80037fc <d_append_string>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7ff f809 	bl	8003c4c <d_print_comp>
 8004c3a:	e107      	b.n	8004e4c <d_print_comp+0x1200>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4619      	mov	r1, r3
 8004c44:	f7ff f802 	bl	8003c4c <d_print_comp>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7fe fffc 	bl	8003c4c <d_print_comp>
 8004c54:	e0fa      	b.n	8004e4c <d_print_comp+0x1200>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fe fd8c 	bl	800377c <d_append_char>
 8004c64:	e0f2      	b.n	8004e4c <d_print_comp+0x1200>
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f248 4154 	movw	r1, #33876	; 0x8454
 8004c6c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004c70:	f7fe fdc4 	bl	80037fc <d_append_string>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f7fe ffe6 	bl	8003c4c <d_print_comp>
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004c86:	f7fe fd79 	bl	800377c <d_append_char>
 8004c8a:	e0df      	b.n	8004e4c <d_print_comp+0x1200>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7fe feaa 	bl	80039ec <d_find_pack>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <d_print_comp+0x1076>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7fe ffa1 	bl	8003bf4 <d_print_subexpr>
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f647 0160 	movw	r1, #30816	; 0x7860
 8004cb8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004cbc:	f7fe fd9e 	bl	80037fc <d_append_string>
 8004cc0:	e0c4      	b.n	8004e4c <d_print_comp+0x1200>
 8004cc2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004cc6:	f7fe ff73 	bl	8003bb0 <d_pack_length>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cde:	e01d      	b.n	8004d1c <d_print_comp+0x10d0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ce6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	f7fe ffad 	bl	8003c4c <d_print_comp>
 8004cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf6:	f103 32ff 	add.w	r2, r3, #4294967295
 8004cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	dd06      	ble.n	8004d10 <d_print_comp+0x10c4>
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f248 4108 	movw	r1, #33800	; 0x8408
 8004d08:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d0c:	f7fe fd76 	bl	80037fc <d_append_string>
 8004d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d14:	f103 0301 	add.w	r3, r3, #1
 8004d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d24:	429a      	cmp	r2, r3
 8004d26:	dbdb      	blt.n	8004ce0 <d_print_comp+0x1094>
 8004d28:	e090      	b.n	8004e4c <d_print_comp+0x1200>
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f248 4160 	movw	r1, #33888	; 0x8460
 8004d30:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d34:	f7fe fd62 	bl	80037fc <d_append_string>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f103 0301 	add.w	r3, r3, #1
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7fe fd6c 	bl	8003820 <d_append_num>
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004d4e:	f7fe fd15 	bl	800377c <d_append_char>
 8004d52:	e07b      	b.n	8004e4c <d_print_comp+0x1200>
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f248 4168 	movw	r1, #33896	; 0x8468
 8004d5a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d5e:	f7fe fd4d 	bl	80037fc <d_append_string>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fe ff6f 	bl	8003c4c <d_print_comp>
 8004d6e:	e06d      	b.n	8004e4c <d_print_comp+0x1200>
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f248 4188 	movw	r1, #33928	; 0x8488
 8004d76:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d7a:	f7fe fd3f 	bl	80037fc <d_append_string>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f7fe ff61 	bl	8003c4c <d_print_comp>
 8004d8a:	e05f      	b.n	8004e4c <d_print_comp+0x1200>
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f248 41a8 	movw	r1, #33960	; 0x84a8
 8004d92:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d96:	f7fe fd31 	bl	80037fc <d_append_string>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f7fe ff53 	bl	8003c4c <d_print_comp>
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f248 41b4 	movw	r1, #33972	; 0x84b4
 8004dac:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004db0:	f7fe fd24 	bl	80037fc <d_append_string>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f103 0301 	add.w	r3, r3, #1
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fe fd2e 	bl	8003820 <d_append_num>
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004dca:	f7fe fcd7 	bl	800377c <d_append_char>
 8004dce:	e03d      	b.n	8004e4c <d_print_comp+0x1200>
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f248 41b8 	movw	r1, #33976	; 0x84b8
 8004dd6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004dda:	f7fe fd0f 	bl	80037fc <d_append_string>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f103 0301 	add.w	r3, r3, #1
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4619      	mov	r1, r3
 8004dea:	f7fe fd19 	bl	8003820 <d_append_num>
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004df4:	f7fe fcc2 	bl	800377c <d_append_char>
 8004df8:	e028      	b.n	8004e4c <d_print_comp+0x1200>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fe ff23 	bl	8003c4c <d_print_comp>
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f248 41c8 	movw	r1, #33992	; 0x84c8
 8004e0c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004e10:	f7fe fcf4 	bl	80037fc <d_append_string>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7fe ff16 	bl	8003c4c <d_print_comp>
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004e26:	f7fe fca9 	bl	800377c <d_append_char>
 8004e2a:	e00f      	b.n	8004e4c <d_print_comp+0x1200>
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fe fc5b 	bl	80036e8 <d_print_error>
 8004e32:	bf00      	nop
 8004e34:	e00a      	b.n	8004e4c <d_print_comp+0x1200>
 8004e36:	bf00      	nop
 8004e38:	e008      	b.n	8004e4c <d_print_comp+0x1200>
 8004e3a:	bf00      	nop
 8004e3c:	e006      	b.n	8004e4c <d_print_comp+0x1200>
 8004e3e:	bf00      	nop
 8004e40:	e004      	b.n	8004e4c <d_print_comp+0x1200>
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <d_print_comp+0x1200>
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <d_print_comp+0x1200>
 8004e4a:	bf00      	nop
 8004e4c:	f107 07d4 	add.w	r7, r7, #212	; 0xd4
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <d_print_java_identifier>:
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6c:	e071      	b.n	8004f52 <d_print_java_identifier+0xfe>
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	dd62      	ble.n	8004f3e <d_print_java_identifier+0xea>
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b5f      	cmp	r3, #95	; 0x5f
 8004e7e:	d15e      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	f103 0301 	add.w	r3, r3, #1
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b5f      	cmp	r3, #95	; 0x5f
 8004e8a:	d158      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	f103 0302 	add.w	r3, r3, #2
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b55      	cmp	r3, #85	; 0x55
 8004e96:	d152      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	f103 0303 	add.w	r3, r3, #3
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e032      	b.n	8004f0e <d_print_java_identifier+0xba>
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b2f      	cmp	r3, #47	; 0x2f
 8004eae:	d909      	bls.n	8004ec4 <d_print_java_identifier+0x70>
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b39      	cmp	r3, #57	; 0x39
 8004eb6:	d805      	bhi.n	8004ec4 <d_print_java_identifier+0x70>
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e01a      	b.n	8004efa <d_print_java_identifier+0xa6>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d909      	bls.n	8004ee0 <d_print_java_identifier+0x8c>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b46      	cmp	r3, #70	; 0x46
 8004ed2:	d805      	bhi.n	8004ee0 <d_print_java_identifier+0x8c>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e00c      	b.n	8004efa <d_print_java_identifier+0xa6>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d916      	bls.n	8004f16 <d_print_java_identifier+0xc2>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b66      	cmp	r3, #102	; 0x66
 8004eee:	d812      	bhi.n	8004f16 <d_print_java_identifier+0xc2>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f1a3 0357 	sub.w	r3, r3, #87	; 0x57
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	ea4f 1203 	mov.w	r2, r3, lsl #4
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	18d3      	adds	r3, r2, r3
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f103 0301 	add.w	r3, r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d3c8      	bcc.n	8004ea8 <d_print_java_identifier+0x54>
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20f      	bcs.n	8004f3e <d_print_java_identifier+0xea>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b5f      	cmp	r3, #95	; 0x5f
 8004f24:	d10b      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	2bff      	cmp	r3, #255	; 0xff
 8004f2a:	d808      	bhi.n	8004f3e <d_print_java_identifier+0xea>
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fe fc22 	bl	800377c <d_append_char>
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3c:	e005      	b.n	8004f4a <d_print_java_identifier+0xf6>
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7fe fc19 	bl	800377c <d_append_char>
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	f103 0301 	add.w	r3, r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d389      	bcc.n	8004e6e <d_print_java_identifier+0x1a>
 8004f5a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <d_print_mod_list>:
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80d2 	beq.w	800511c <d_print_mod_list+0x1b8>
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7fe fbc3 	bl	8003704 <d_print_saw_error>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 80cb 	bne.w	800511c <d_print_mod_list+0x1b8>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d111      	bne.n	8004fb2 <d_print_mod_list+0x4e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <d_print_mod_list+0x5e>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b1a      	cmp	r3, #26
 8004f9c:	d009      	beq.n	8004fb2 <d_print_mod_list+0x4e>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b1b      	cmp	r3, #27
 8004fa6:	d004      	beq.n	8004fb2 <d_print_mod_list+0x4e>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b1c      	cmp	r3, #28
 8004fb0:	d107      	bne.n	8004fc2 <d_print_mod_list+0x5e>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	f7ff ffd2 	bl	8004f64 <d_print_mod_list>
 8004fc0:	e0ad      	b.n	800511e <d_print_mod_list+0x1ba>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f04f 0201 	mov.w	r2, #1
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b25      	cmp	r3, #37	; 0x25
 8004fe4:	d10d      	bne.n	8005002 <d_print_mod_list+0x9e>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 f982 	bl	80052fc <d_print_function_type>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005000:	e08d      	b.n	800511e <d_print_mod_list+0x1ba>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b26      	cmp	r3, #38	; 0x26
 800500a:	d10d      	bne.n	8005028 <d_print_mod_list+0xc4>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	f000 fa19 	bl	8005450 <d_print_array_type>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005026:	e07a      	b.n	800511e <d_print_mod_list+0x1ba>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d162      	bne.n	80050f8 <d_print_mod_list+0x194>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	4619      	mov	r1, r3
 800504e:	f7fe fdfd 	bl	8003c4c <d_print_comp>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <d_print_mod_list+0x112>
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f248 21d4 	movw	r1, #33492	; 0x82d4
 800506c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005070:	f7fe fbc4 	bl	80037fc <d_append_string>
 8005074:	e004      	b.n	8005080 <d_print_mod_list+0x11c>
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800507c:	f7fe fb7e 	bl	800377c <d_append_char>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b3f      	cmp	r3, #63	; 0x3f
 800508e:	d11d      	bne.n	80050cc <d_print_mod_list+0x168>
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f248 41d4 	movw	r1, #34004	; 0x84d4
 8005096:	f6c0 0101 	movt	r1, #2049	; 0x801
 800509a:	f7fe fbaf 	bl	80037fc <d_append_string>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f103 0301 	add.w	r3, r3, #1
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f7fe fbb9 	bl	8003820 <d_append_num>
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f248 41e4 	movw	r1, #34020	; 0x84e4
 80050b4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80050b8:	f7fe fba0 	bl	80037fc <d_append_string>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e003      	b.n	80050cc <d_print_mod_list+0x168>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e000      	b.n	80050ce <d_print_mod_list+0x16a>
 80050cc:	bf00      	nop
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b1a      	cmp	r3, #26
 80050d4:	d0f6      	beq.n	80050c4 <d_print_mod_list+0x160>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b1b      	cmp	r3, #27
 80050dc:	d0f2      	beq.n	80050c4 <d_print_mod_list+0x160>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b1c      	cmp	r3, #28
 80050e4:	d0ee      	beq.n	80050c4 <d_print_mod_list+0x160>
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	69f9      	ldr	r1, [r7, #28]
 80050ea:	f7fe fdaf 	bl	8003c4c <d_print_comp>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80050f6:	e012      	b.n	800511e <d_print_mod_list+0x1ba>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	4619      	mov	r1, r3
 8005100:	f000 f812 	bl	8005128 <d_print_mod>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	f7ff ff25 	bl	8004f64 <d_print_mod_list>
 800511a:	e000      	b.n	800511e <d_print_mod_list+0x1ba>
 800511c:	bf00      	nop
 800511e:	f107 0720 	add.w	r7, r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop

08005128 <d_print_mod>:
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f1a3 0303 	sub.w	r3, r3, #3
 800513a:	2b26      	cmp	r3, #38	; 0x26
 800513c:	f200 80d3 	bhi.w	80052e6 <d_print_mod+0x1be>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <d_print_mod+0x20>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	080052b3 	.word	0x080052b3
 800514c:	080052e7 	.word	0x080052e7
 8005150:	080052e7 	.word	0x080052e7
 8005154:	080052e7 	.word	0x080052e7
 8005158:	080052e7 	.word	0x080052e7
 800515c:	080052e7 	.word	0x080052e7
 8005160:	080052e7 	.word	0x080052e7
 8005164:	080052e7 	.word	0x080052e7
 8005168:	080052e7 	.word	0x080052e7
 800516c:	080052e7 	.word	0x080052e7
 8005170:	080052e7 	.word	0x080052e7
 8005174:	080052e7 	.word	0x080052e7
 8005178:	080052e7 	.word	0x080052e7
 800517c:	080052e7 	.word	0x080052e7
 8005180:	080052e7 	.word	0x080052e7
 8005184:	080052e7 	.word	0x080052e7
 8005188:	080052e7 	.word	0x080052e7
 800518c:	080052e7 	.word	0x080052e7
 8005190:	080052e7 	.word	0x080052e7
 8005194:	080052e7 	.word	0x080052e7
 8005198:	080051e5 	.word	0x080051e5
 800519c:	080051f5 	.word	0x080051f5
 80051a0:	08005205 	.word	0x08005205
 80051a4:	080051e5 	.word	0x080051e5
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005215 	.word	0x08005215
 80051b4:	0800522d 	.word	0x0800522d
 80051b8:	08005245 	.word	0x08005245
 80051bc:	08005251 	.word	0x08005251
 80051c0:	08005261 	.word	0x08005261
 80051c4:	08005271 	.word	0x08005271
 80051c8:	080052e7 	.word	0x080052e7
 80051cc:	080052e7 	.word	0x080052e7
 80051d0:	080052e7 	.word	0x080052e7
 80051d4:	080052e7 	.word	0x080052e7
 80051d8:	08005281 	.word	0x08005281
 80051dc:	080052e7 	.word	0x080052e7
 80051e0:	080052c1 	.word	0x080052c1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f248 41e8 	movw	r1, #34024	; 0x84e8
 80051ea:	f6c0 0101 	movt	r1, #2049	; 0x801
 80051ee:	f7fe fb05 	bl	80037fc <d_append_string>
 80051f2:	e07f      	b.n	80052f4 <d_print_mod+0x1cc>
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f248 41f4 	movw	r1, #34036	; 0x84f4
 80051fa:	f6c0 0101 	movt	r1, #2049	; 0x801
 80051fe:	f7fe fafd 	bl	80037fc <d_append_string>
 8005202:	e077      	b.n	80052f4 <d_print_mod+0x1cc>
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f248 5100 	movw	r1, #34048	; 0x8500
 800520a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800520e:	f7fe faf5 	bl	80037fc <d_append_string>
 8005212:	e06f      	b.n	80052f4 <d_print_mod+0x1cc>
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f7fe faaf 	bl	800377c <d_append_char>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	f7fe fd11 	bl	8003c4c <d_print_comp>
 800522a:	e063      	b.n	80052f4 <d_print_mod+0x1cc>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d15c      	bne.n	80052f2 <d_print_mod+0x1ca>
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f04f 012a 	mov.w	r1, #42	; 0x2a
 800523e:	f7fe fa9d 	bl	800377c <d_append_char>
 8005242:	e056      	b.n	80052f2 <d_print_mod+0x1ca>
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f04f 0126 	mov.w	r1, #38	; 0x26
 800524a:	f7fe fa97 	bl	800377c <d_append_char>
 800524e:	e051      	b.n	80052f4 <d_print_mod+0x1cc>
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f647 318c 	movw	r1, #31628	; 0x7b8c
 8005256:	f6c0 0101 	movt	r1, #2049	; 0x801
 800525a:	f7fe facf 	bl	80037fc <d_append_string>
 800525e:	e049      	b.n	80052f4 <d_print_mod+0x1cc>
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f248 5108 	movw	r1, #34056	; 0x8508
 8005266:	f6c0 0101 	movt	r1, #2049	; 0x801
 800526a:	f7fe fac7 	bl	80037fc <d_append_string>
 800526e:	e041      	b.n	80052f4 <d_print_mod+0x1cc>
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f248 5114 	movw	r1, #34068	; 0x8514
 8005276:	f6c0 0101 	movt	r1, #2049	; 0x801
 800527a:	f7fe fabf 	bl	80037fc <d_append_string>
 800527e:	e039      	b.n	80052f4 <d_print_mod+0x1cc>
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fe fae7 	bl	8003854 <d_last_char>
 8005286:	4603      	mov	r3, r0
 8005288:	2b28      	cmp	r3, #40	; 0x28
 800528a:	d004      	beq.n	8005296 <d_print_mod+0x16e>
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f04f 0120 	mov.w	r1, #32
 8005292:	f7fe fa73 	bl	800377c <d_append_char>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	f7fe fcd5 	bl	8003c4c <d_print_comp>
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f248 5120 	movw	r1, #34080	; 0x8520
 80052a8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80052ac:	f7fe faa6 	bl	80037fc <d_append_string>
 80052b0:	e020      	b.n	80052f4 <d_print_mod+0x1cc>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fe fcc7 	bl	8003c4c <d_print_comp>
 80052be:	e019      	b.n	80052f4 <d_print_mod+0x1cc>
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f248 5124 	movw	r1, #34084	; 0x8524
 80052c6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80052ca:	f7fe fa97 	bl	80037fc <d_append_string>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f7fe fcb9 	bl	8003c4c <d_print_comp>
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f04f 0129 	mov.w	r1, #41	; 0x29
 80052e0:	f7fe fa4c 	bl	800377c <d_append_char>
 80052e4:	e006      	b.n	80052f4 <d_print_mod+0x1cc>
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	f7fe fcaf 	bl	8003c4c <d_print_comp>
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <d_print_mod+0x1cc>
 80052f2:	bf00      	nop
 80052f4:	f107 0708 	add.w	r7, r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <d_print_function_type>:
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e032      	b.n	8005380 <d_print_function_type+0x84>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d132      	bne.n	8005388 <d_print_function_type+0x8c>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f1a3 0317 	sub.w	r3, r3, #23
 800532c:	2b10      	cmp	r3, #16
 800532e:	d81e      	bhi.n	800536e <d_print_function_type+0x72>
 8005330:	f04f 0201 	mov.w	r2, #1
 8005334:	fa02 f203 	lsl.w	r2, r2, r3
 8005338:	f640 4347 	movw	r3, #3143	; 0xc47
 800533c:	f2c0 0301 	movt	r3, #1
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10c      	bne.n	8005360 <d_print_function_type+0x64>
 8005346:	f402 7360 	and.w	r3, r2, #896	; 0x380
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <d_print_function_type+0x5c>
 800534e:	f002 0338 	and.w	r3, r2, #56	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10d      	bne.n	8005372 <d_print_function_type+0x76>
 8005356:	e00a      	b.n	800536e <d_print_function_type+0x72>
 8005358:	f04f 0301 	mov.w	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e009      	b.n	8005374 <d_print_function_type+0x78>
 8005360:	f04f 0301 	mov.w	r3, #1
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	f04f 0301 	mov.w	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e002      	b.n	8005374 <d_print_function_type+0x78>
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <d_print_function_type+0x78>
 8005372:	bf00      	nop
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <d_print_function_type+0x90>
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1c9      	bne.n	800531a <d_print_function_type+0x1e>
 8005386:	e002      	b.n	800538e <d_print_function_type+0x92>
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <d_print_function_type+0x92>
 800538c:	bf00      	nop
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d024      	beq.n	80053de <d_print_function_type+0xe2>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10e      	bne.n	80053b8 <d_print_function_type+0xbc>
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7fe fa5a 	bl	8003854 <d_last_char>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b28      	cmp	r3, #40	; 0x28
 80053a4:	d008      	beq.n	80053b8 <d_print_function_type+0xbc>
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7fe fa54 	bl	8003854 <d_last_char>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b2a      	cmp	r3, #42	; 0x2a
 80053b0:	d002      	beq.n	80053b8 <d_print_function_type+0xbc>
 80053b2:	f04f 0301 	mov.w	r3, #1
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <d_print_function_type+0xd8>
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7fe fa48 	bl	8003854 <d_last_char>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d004      	beq.n	80053d4 <d_print_function_type+0xd8>
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f04f 0120 	mov.w	r1, #32
 80053d0:	f7fe f9d4 	bl	800377c <d_append_char>
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f04f 0128 	mov.w	r1, #40	; 0x28
 80053da:	f7fe f9cf 	bl	800377c <d_append_char>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f7ff fdb4 	bl	8004f64 <d_print_mod_list>
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <d_print_function_type+0x110>
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f04f 0129 	mov.w	r1, #41	; 0x29
 8005408:	f7fe f9b8 	bl	800377c <d_append_char>
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f04f 0128 	mov.w	r1, #40	; 0x28
 8005412:	f7fe f9b3 	bl	800377c <d_append_char>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <d_print_function_type+0x12e>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	4619      	mov	r1, r3
 8005426:	f7fe fc11 	bl	8003c4c <d_print_comp>
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8005430:	f7fe f9a4 	bl	800377c <d_append_char>
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	f04f 0201 	mov.w	r2, #1
 800543c:	f7ff fd92 	bl	8004f64 <d_print_mod_list>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005448:	f107 0720 	add.w	r7, r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <d_print_array_type>:
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	f04f 0301 	mov.w	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d037      	beq.n	80054d8 <d_print_array_type+0x88>
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e016      	b.n	80054a2 <d_print_array_type+0x52>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <d_print_array_type+0x4c>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b26      	cmp	r3, #38	; 0x26
 8005484:	d103      	bne.n	800548e <d_print_array_type+0x3e>
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e00c      	b.n	80054a8 <d_print_array_type+0x58>
 800548e:	f04f 0301 	mov.w	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	f04f 0301 	mov.w	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e005      	b.n	80054a8 <d_print_array_type+0x58>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e5      	bne.n	8005474 <d_print_array_type+0x24>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <d_print_array_type+0x6c>
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f248 5130 	movw	r1, #34096	; 0x8530
 80054b4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80054b8:	f7fe f9a0 	bl	80037fc <d_append_string>
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f7ff fd4e 	bl	8004f64 <d_print_mod_list>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <d_print_array_type+0x88>
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f04f 0129 	mov.w	r1, #41	; 0x29
 80054d4:	f7fe f952 	bl	800377c <d_append_char>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <d_print_array_type+0x98>
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f04f 0120 	mov.w	r1, #32
 80054e4:	f7fe f94a 	bl	800377c <d_append_char>
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f04f 015b 	mov.w	r1, #91	; 0x5b
 80054ee:	f7fe f945 	bl	800377c <d_append_char>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <d_print_array_type+0xb6>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	4619      	mov	r1, r3
 8005502:	f7fe fba3 	bl	8003c4c <d_print_comp>
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f04f 015d 	mov.w	r1, #93	; 0x5d
 800550c:	f7fe f936 	bl	800377c <d_append_char>
 8005510:	f107 0720 	add.w	r7, r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <d_print_expr_op>:
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b2c      	cmp	r3, #44	; 0x2c
 8005528:	d10b      	bne.n	8005542 <d_print_expr_op+0x2a>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4611      	mov	r1, r2
 800553a:	461a      	mov	r2, r3
 800553c:	f7fe f940 	bl	80037c0 <d_append_buffer>
 8005540:	e003      	b.n	800554a <d_print_expr_op+0x32>
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	f7fe fb81 	bl	8003c4c <d_print_comp>
 800554a:	f107 0708 	add.w	r7, r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop

08005554 <d_print_cast>:
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d006      	beq.n	8005576 <d_print_cast+0x22>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4619      	mov	r1, r3
 8005570:	f7fe fb6c 	bl	8003c4c <d_print_comp>
 8005574:	e04a      	b.n	800560c <d_print_cast+0xb8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7fe fb4f 	bl	8003c4c <d_print_comp>
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fe f94c 	bl	8003854 <d_last_char>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b3c      	cmp	r3, #60	; 0x3c
 80055c0:	d104      	bne.n	80055cc <d_print_cast+0x78>
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f04f 0120 	mov.w	r1, #32
 80055c8:	f7fe f8d8 	bl	800377c <d_append_char>
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80055d2:	f7fe f8d3 	bl	800377c <d_append_char>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4619      	mov	r1, r3
 80055e0:	f7fe fb34 	bl	8003c4c <d_print_comp>
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fe f935 	bl	8003854 <d_last_char>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b3e      	cmp	r3, #62	; 0x3e
 80055ee:	d104      	bne.n	80055fa <d_print_cast+0xa6>
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f04f 0120 	mov.w	r1, #32
 80055f6:	f7fe f8c1 	bl	800377c <d_append_char>
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8005600:	f7fe f8bc 	bl	800377c <d_append_char>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800560c:	f107 0718 	add.w	r7, r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <d_init_info>:
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	18d2      	adds	r2, r2, r3
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005644:	461a      	mov	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	619a      	str	r2, [r3, #24]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	615a      	str	r2, [r3, #20]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	621a      	str	r2, [r3, #32]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
 8005678:	f107 0714 	add.w	r7, r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop

08005684 <d_demangle_callback>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	b099      	sub	sp, #100	; 0x64
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b5f      	cmp	r3, #95	; 0x5f
 800569a:	d10a      	bne.n	80056b2 <d_demangle_callback+0x2e>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f103 0301 	add.w	r3, r3, #1
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b5a      	cmp	r3, #90	; 0x5a
 80056a6:	d104      	bne.n	80056b2 <d_demangle_callback+0x2e>
 80056a8:	f04f 0301 	mov.w	r3, #1
 80056ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056b0:	e049      	b.n	8005746 <d_demangle_callback+0xc2>
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f647 3154 	movw	r1, #31572	; 0x7b54
 80056b8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80056bc:	f04f 0208 	mov.w	r2, #8
 80056c0:	f002 fd98 	bl	80081f4 <strncmp>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d131      	bne.n	800572e <d_demangle_callback+0xaa>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f103 0308 	add.w	r3, r3, #8
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b2e      	cmp	r3, #46	; 0x2e
 80056d4:	d00b      	beq.n	80056ee <d_demangle_callback+0x6a>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f103 0308 	add.w	r3, r3, #8
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b5f      	cmp	r3, #95	; 0x5f
 80056e0:	d005      	beq.n	80056ee <d_demangle_callback+0x6a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f103 0308 	add.w	r3, r3, #8
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b24      	cmp	r3, #36	; 0x24
 80056ec:	d11f      	bne.n	800572e <d_demangle_callback+0xaa>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f103 0309 	add.w	r3, r3, #9
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b44      	cmp	r3, #68	; 0x44
 80056f8:	d005      	beq.n	8005706 <d_demangle_callback+0x82>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f103 0309 	add.w	r3, r3, #9
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b49      	cmp	r3, #73	; 0x49
 8005704:	d113      	bne.n	800572e <d_demangle_callback+0xaa>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f103 030a 	add.w	r3, r3, #10
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b5f      	cmp	r3, #95	; 0x5f
 8005710:	d10d      	bne.n	800572e <d_demangle_callback+0xaa>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f103 0309 	add.w	r3, r3, #9
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b49      	cmp	r3, #73	; 0x49
 800571c:	d102      	bne.n	8005724 <d_demangle_callback+0xa0>
 800571e:	f04f 0302 	mov.w	r3, #2
 8005722:	e001      	b.n	8005728 <d_demangle_callback+0xa4>
 8005724:	f04f 0303 	mov.w	r3, #3
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800572c:	e00b      	b.n	8005746 <d_demangle_callback+0xc2>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <d_demangle_callback+0xba>
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e0f6      	b.n	800592c <d_demangle_callback+0x2a8>
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f002 fd24 	bl	8008194 <strlen>
 800574c:	4602      	mov	r2, r0
 800574e:	f107 0310 	add.w	r3, r7, #16
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	f7ff ff5d 	bl	8005614 <d_init_info>
 800575a:	466b      	mov	r3, sp
 800575c:	461e      	mov	r6, r3
 800575e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8005760:	f105 33ff 	add.w	r3, r5, #4294967295
 8005764:	657b      	str	r3, [r7, #84]	; 0x54
 8005766:	462b      	mov	r3, r5
 8005768:	4618      	mov	r0, r3
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005772:	fb03 f201 	mul.w	r2, r3, r1
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	fb03 f300 	mul.w	r3, r3, r0
 800577e:	18d4      	adds	r4, r2, r3
 8005780:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005784:	fba0 2303 	umull	r2, r3, r0, r3
 8005788:	18e1      	adds	r1, r4, r3
 800578a:	460b      	mov	r3, r1
 800578c:	462a      	mov	r2, r5
 800578e:	4613      	mov	r3, r2
 8005790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005794:	189b      	adds	r3, r3, r2
 8005796:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800579a:	462b      	mov	r3, r5
 800579c:	4618      	mov	r0, r3
 800579e:	f04f 0100 	mov.w	r1, #0
 80057a2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80057a6:	fb03 f201 	mul.w	r2, r3, r1
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	fb03 f300 	mul.w	r3, r3, r0
 80057b2:	18d4      	adds	r4, r2, r3
 80057b4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80057b8:	fba0 2303 	umull	r2, r3, r0, r3
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	460b      	mov	r3, r1
 80057c0:	462a      	mov	r2, r5
 80057c2:	4613      	mov	r3, r2
 80057c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80057ce:	f103 0307 	add.w	r3, r3, #7
 80057d2:	f103 0307 	add.w	r3, r3, #7
 80057d6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80057da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80057de:	ebad 0d03 	sub.w	sp, sp, r3
 80057e2:	466b      	mov	r3, sp
 80057e4:	f103 0307 	add.w	r3, r3, #7
 80057e8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80057ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80057f0:	653b      	str	r3, [r7, #80]	; 0x50
 80057f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fa:	4601      	mov	r1, r0
 80057fc:	460a      	mov	r2, r1
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 8005806:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800580a:	ea41 0b0b 	orr.w	fp, r1, fp
 800580e:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005812:	4601      	mov	r1, r0
 8005814:	460a      	mov	r2, r1
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 800581e:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8005822:	ea41 0909 	orr.w	r9, r1, r9
 8005826:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800582a:	4603      	mov	r3, r0
 800582c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005830:	f103 0307 	add.w	r3, r3, #7
 8005834:	f103 0307 	add.w	r3, r3, #7
 8005838:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800583c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005840:	ebad 0d03 	sub.w	sp, sp, r3
 8005844:	466b      	mov	r3, sp
 8005846:	f103 0307 	add.w	r3, r3, #7
 800584a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800584e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005860:	2b03      	cmp	r3, #3
 8005862:	d846      	bhi.n	80058f2 <d_demangle_callback+0x26e>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <d_demangle_callback+0x1e8>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	0800587d 	.word	0x0800587d
 8005870:	0800588d 	.word	0x0800588d
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058a1 	.word	0x080058a1
 800587c:	f107 0310 	add.w	r3, r7, #16
 8005880:	4618      	mov	r0, r3
 8005882:	f7fc f8b9 	bl	80019f8 <d_type>
 8005886:	4603      	mov	r3, r0
 8005888:	65bb      	str	r3, [r7, #88]	; 0x58
 800588a:	e032      	b.n	80058f2 <d_demangle_callback+0x26e>
 800588c:	f107 0310 	add.w	r3, r7, #16
 8005890:	4618      	mov	r0, r3
 8005892:	f04f 0101 	mov.w	r1, #1
 8005896:	f7fa ff79 	bl	800078c <d_mangled_name>
 800589a:	4603      	mov	r3, r0
 800589c:	65bb      	str	r3, [r7, #88]	; 0x58
 800589e:	e028      	b.n	80058f2 <d_demangle_callback+0x26e>
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f103 030b 	add.w	r3, r3, #11
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d102      	bne.n	80058b6 <d_demangle_callback+0x232>
 80058b0:	f04f 043c 	mov.w	r4, #60	; 0x3c
 80058b4:	e001      	b.n	80058ba <d_demangle_callback+0x236>
 80058b6:	f04f 043d 	mov.w	r4, #61	; 0x3d
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f107 0210 	add.w	r2, r7, #16
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	f7fa fe16 	bl	80004f4 <d_make_demangle_mangled_name>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f107 0210 	add.w	r2, r7, #16
 80058ce:	4610      	mov	r0, r2
 80058d0:	4621      	mov	r1, r4
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f7fa fd40 	bl	800035c <d_make_comp>
 80058dc:	4603      	mov	r3, r0
 80058de:	65bb      	str	r3, [r7, #88]	; 0x58
 80058e0:	69fc      	ldr	r4, [r7, #28]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 fc55 	bl	8008194 <strlen>
 80058ea:	4603      	mov	r3, r0
 80058ec:	18e3      	adds	r3, r4, r3
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	bf00      	nop
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <d_demangle_callback+0x288>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <d_demangle_callback+0x288>
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	65bb      	str	r3, [r7, #88]	; 0x58
 800590c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <d_demangle_callback+0x29e>
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f7fd ffa9 	bl	8003870 <d_print_callback>
 800591e:	4603      	mov	r3, r0
 8005920:	e001      	b.n	8005926 <d_demangle_callback+0x2a2>
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
 8005928:	46b5      	mov	sp, r6
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	4618      	mov	r0, r3
 800592e:	f107 0764 	add.w	r7, r7, #100	; 0x64
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005938 <d_demangle>:
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4618      	mov	r0, r3
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	f7fd fddb 	bl	8003508 <d_growable_string_init>
 8005952:	f107 0314 	add.w	r3, r7, #20
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	f243 6259 	movw	r2, #13913	; 0x3659
 800595e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005962:	f7ff fe8f 	bl	8005684 <d_demangle_callback>
 8005966:	4603      	mov	r3, r0
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <d_demangle+0x4e>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fb38 	bl	8006fe8 <free>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e009      	b.n	800599a <d_demangle+0x62>
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <d_demangle+0x58>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	e001      	b.n	8005994 <d_demangle+0x5c>
 8005990:	f04f 0301 	mov.w	r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4618      	mov	r0, r3
 800599c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <__cxa_demangle>:
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <__cxa_demangle+0x28>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <__cxa_demangle+0x22>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f06f 0202 	mvn.w	r2, #2
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	e058      	b.n	8005a7e <__cxa_demangle+0xda>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <__cxa_demangle+0x48>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <__cxa_demangle+0x48>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <__cxa_demangle+0x42>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	e048      	b.n	8005a7e <__cxa_demangle+0xda>
 80059ec:	f107 0310 	add.w	r3, r7, #16
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f04f 0111 	mov.w	r1, #17
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7ff ff9e 	bl	8005938 <d_demangle>
 80059fc:	4603      	mov	r3, r0
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d111      	bne.n	8005a2a <__cxa_demangle+0x86>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <__cxa_demangle+0x80>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d104      	bne.n	8005a1c <__cxa_demangle+0x78>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e003      	b.n	8005a24 <__cxa_demangle+0x80>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f06f 0201 	mvn.w	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e029      	b.n	8005a7e <__cxa_demangle+0xda>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <__cxa_demangle+0x9a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01b      	beq.n	8005a6e <__cxa_demangle+0xca>
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e017      	b.n	8005a6e <__cxa_demangle+0xca>
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f002 fba8 	bl	8008194 <strlen>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d209      	bcs.n	8005a62 <__cxa_demangle+0xbe>
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	f002 fb41 	bl	80080d8 <strcpy>
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	f001 fac6 	bl	8006fe8 <free>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e005      	b.n	8005a6e <__cxa_demangle+0xca>
 8005a62:	68b8      	ldr	r0, [r7, #8]
 8005a64:	f001 fac0 	bl	8006fe8 <free>
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <__cxa_demangle+0xd8>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f107 0718 	add.w	r7, r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <__gcclibcxx_demangle_callback>:
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <__gcclibcxx_demangle_callback+0x18>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <__gcclibcxx_demangle_callback+0x1e>
 8005aa0:	f06f 0302 	mvn.w	r3, #2
 8005aa4:	e010      	b.n	8005ac8 <__gcclibcxx_demangle_callback+0x40>
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f04f 0111 	mov.w	r1, #17
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f7ff fde8 	bl	8005684 <d_demangle_callback>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <__gcclibcxx_demangle_callback+0x3c>
 8005abe:	f06f 0301 	mvn.w	r3, #1
 8005ac2:	e001      	b.n	8005ac8 <__gcclibcxx_demangle_callback+0x40>
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f107 0718 	add.w	r7, r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <_Unwind_decode_target2>:
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_Unwind_decode_target2+0x6>
 8005ad8:	181b      	adds	r3, r3, r0
 8005ada:	4618      	mov	r0, r3
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <selfrel_offset31>:
 8005ae0:	6803      	ldr	r3, [r0, #0]
 8005ae2:	005a      	lsls	r2, r3, #1
 8005ae4:	bf4c      	ite	mi
 8005ae6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005aea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005aee:	18c0      	adds	r0, r0, r3
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <search_EIT_table>:
 8005af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	4604      	mov	r4, r0
 8005afa:	4691      	mov	r9, r2
 8005afc:	460e      	mov	r6, r1
 8005afe:	b301      	cbz	r1, 8005b42 <search_EIT_table+0x4e>
 8005b00:	f101 3bff 	add.w	fp, r1, #4294967295
 8005b04:	2700      	movs	r7, #0
 8005b06:	46da      	mov	sl, fp
 8005b08:	eb07 050a 	add.w	r5, r7, sl
 8005b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b10:	106d      	asrs	r5, r5, #1
 8005b12:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7ff ffe2 	bl	8005ae0 <selfrel_offset31>
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	1c68      	adds	r0, r5, #1
 8005b20:	45ab      	cmp	fp, r5
 8005b22:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005b26:	bf08      	it	eq
 8005b28:	f04f 30ff 	moveq.w	r0, #4294967295
 8005b2c:	d002      	beq.n	8005b34 <search_EIT_table+0x40>
 8005b2e:	f7ff ffd7 	bl	8005ae0 <selfrel_offset31>
 8005b32:	3801      	subs	r0, #1
 8005b34:	45c8      	cmp	r8, r9
 8005b36:	d907      	bls.n	8005b48 <search_EIT_table+0x54>
 8005b38:	42bd      	cmp	r5, r7
 8005b3a:	f105 3aff 	add.w	sl, r5, #4294967295
 8005b3e:	d1e3      	bne.n	8005b08 <search_EIT_table+0x14>
 8005b40:	2600      	movs	r6, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	4548      	cmp	r0, r9
 8005b4a:	f105 0701 	add.w	r7, r5, #1
 8005b4e:	d3db      	bcc.n	8005b08 <search_EIT_table+0x14>
 8005b50:	4630      	mov	r0, r6
 8005b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	bf00      	nop

08005b58 <get_eit_entry>:
 8005b58:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <get_eit_entry+0xb4>)
 8005b5a:	b530      	push	{r4, r5, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	b083      	sub	sp, #12
 8005b60:	1e8d      	subs	r5, r1, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d04a      	beq.n	8005bfc <get_eit_entry+0xa4>
 8005b66:	4628      	mov	r0, r5
 8005b68:	a901      	add	r1, sp, #4
 8005b6a:	f3af 8000 	nop.w
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d023      	beq.n	8005bbc <get_eit_entry+0x64>
 8005b74:	462a      	mov	r2, r5
 8005b76:	4618      	mov	r0, r3
 8005b78:	9901      	ldr	r1, [sp, #4]
 8005b7a:	f7ff ffbb 	bl	8005af4 <search_EIT_table>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d01e      	beq.n	8005bc2 <get_eit_entry+0x6a>
 8005b84:	f7ff ffac 	bl	8005ae0 <selfrel_offset31>
 8005b88:	686b      	ldr	r3, [r5, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	64a0      	str	r0, [r4, #72]	; 0x48
 8005b8e:	d011      	beq.n	8005bb4 <get_eit_entry+0x5c>
 8005b90:	1d28      	adds	r0, r5, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	db23      	blt.n	8005bde <get_eit_entry+0x86>
 8005b96:	f7ff ffa3 	bl	8005ae0 <selfrel_offset31>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b9e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005ba0:	6803      	ldr	r3, [r0, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	db10      	blt.n	8005bc8 <get_eit_entry+0x70>
 8005ba6:	f7ff ff9b 	bl	8005ae0 <selfrel_offset31>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2000      	movs	r0, #0
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2005      	movs	r0, #5
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	e7f9      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bbc:	6120      	str	r0, [r4, #16]
 8005bbe:	2009      	movs	r0, #9
 8005bc0:	e7f6      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bc2:	6120      	str	r0, [r4, #16]
 8005bc4:	2009      	movs	r0, #9
 8005bc6:	e7f3      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bc8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005bcc:	b158      	cbz	r0, 8005be6 <get_eit_entry+0x8e>
 8005bce:	2801      	cmp	r0, #1
 8005bd0:	d00c      	beq.n	8005bec <get_eit_entry+0x94>
 8005bd2:	2802      	cmp	r0, #2
 8005bd4:	d00e      	beq.n	8005bf4 <get_eit_entry+0x9c>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2009      	movs	r0, #9
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	e7e8      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bde:	2301      	movs	r3, #1
 8005be0:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005be2:	6523      	str	r3, [r4, #80]	; 0x50
 8005be4:	e7dc      	b.n	8005ba0 <get_eit_entry+0x48>
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <get_eit_entry+0xb8>)
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	e7e1      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <get_eit_entry+0xbc>)
 8005bee:	2000      	movs	r0, #0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	e7dd      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <get_eit_entry+0xc0>)
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	e7d9      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bfc:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <get_eit_entry+0xc4>)
 8005bfe:	4908      	ldr	r1, [pc, #32]	; (8005c20 <get_eit_entry+0xc8>)
 8005c00:	4613      	mov	r3, r2
 8005c02:	1a8a      	subs	r2, r1, r2
 8005c04:	10d2      	asrs	r2, r2, #3
 8005c06:	9201      	str	r2, [sp, #4]
 8005c08:	e7b4      	b.n	8005b74 <get_eit_entry+0x1c>
 8005c0a:	bf00      	nop
 8005c0c:	00000000 	.word	0x00000000
 8005c10:	080060f9 	.word	0x080060f9
 8005c14:	080060f5 	.word	0x080060f5
 8005c18:	080060f1 	.word	0x080060f1
 8005c1c:	0801c7e4 	.word	0x0801c7e4
 8005c20:	0801c9ec 	.word	0x0801c9ec

08005c24 <restore_non_core_regs>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	b510      	push	{r4, lr}
 8005c28:	4604      	mov	r4, r0
 8005c2a:	07d8      	lsls	r0, r3, #31
 8005c2c:	d406      	bmi.n	8005c3c <restore_non_core_regs+0x18>
 8005c2e:	0799      	lsls	r1, r3, #30
 8005c30:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8005c34:	d509      	bpl.n	8005c4a <restore_non_core_regs+0x26>
 8005c36:	f000 fc69 	bl	800650c <__gnu_Unwind_Restore_VFP_D>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	075a      	lsls	r2, r3, #29
 8005c3e:	d509      	bpl.n	8005c54 <restore_non_core_regs+0x30>
 8005c40:	0718      	lsls	r0, r3, #28
 8005c42:	d50e      	bpl.n	8005c62 <restore_non_core_regs+0x3e>
 8005c44:	06d9      	lsls	r1, r3, #27
 8005c46:	d513      	bpl.n	8005c70 <restore_non_core_regs+0x4c>
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	f000 fc57 	bl	80064fc <__gnu_Unwind_Restore_VFP>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	075a      	lsls	r2, r3, #29
 8005c52:	d4f5      	bmi.n	8005c40 <restore_non_core_regs+0x1c>
 8005c54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c58:	f000 fc60 	bl	800651c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	0718      	lsls	r0, r3, #28
 8005c60:	d4f0      	bmi.n	8005c44 <restore_non_core_regs+0x20>
 8005c62:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8005c66:	f000 fc61 	bl	800652c <__gnu_Unwind_Restore_WMMXD>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	06d9      	lsls	r1, r3, #27
 8005c6e:	d4eb      	bmi.n	8005c48 <restore_non_core_regs+0x24>
 8005c70:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f000 bc9c 	b.w	80065b4 <__gnu_Unwind_Restore_WMMXC>

08005c7c <unwind_phase2_forced>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	f101 0e04 	add.w	lr, r1, #4
 8005c84:	4605      	mov	r5, r0
 8005c86:	4616      	mov	r6, r2
 8005c88:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005c8c:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8005c90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005c94:	ac02      	add	r4, sp, #8
 8005c96:	1d27      	adds	r7, r4, #4
 8005c98:	f04f 0c00 	mov.w	ip, #0
 8005c9c:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8005ca0:	4566      	cmp	r6, ip
 8005ca2:	bf14      	ite	ne
 8005ca4:	260a      	movne	r6, #10
 8005ca6:	2609      	moveq	r6, #9
 8005ca8:	46e0      	mov	r8, ip
 8005caa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005cb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005cb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005cb6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005cb8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005cbc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005cc4:	f8c4 c000 	str.w	ip, [r4]
 8005cc8:	f7ff ff46 	bl	8005b58 <get_eit_entry>
 8005ccc:	4607      	mov	r7, r0
 8005cce:	b307      	cbz	r7, 8005d12 <unwind_phase2_forced+0x96>
 8005cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd2:	f046 0610 	orr.w	r6, r6, #16
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	4631      	mov	r1, r6
 8005cda:	462a      	mov	r2, r5
 8005cdc:	6463      	str	r3, [r4, #68]	; 0x44
 8005cde:	462b      	mov	r3, r5
 8005ce0:	9400      	str	r4, [sp, #0]
 8005ce2:	f8cd a004 	str.w	sl, [sp, #4]
 8005ce6:	47c8      	blx	r9
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d12c      	bne.n	8005d46 <unwind_phase2_forced+0xca>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	d12b      	bne.n	8005d48 <unwind_phase2_forced+0xcc>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	a992      	add	r1, sp, #584	; 0x248
 8005cf4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005cf8:	f001 fca4 	bl	8007644 <memcpy>
 8005cfc:	f1b8 0f08 	cmp.w	r8, #8
 8005d00:	d128      	bne.n	8005d54 <unwind_phase2_forced+0xd8>
 8005d02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff ff27 	bl	8005b58 <get_eit_entry>
 8005d0a:	2609      	movs	r6, #9
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	2f00      	cmp	r7, #0
 8005d10:	d1de      	bne.n	8005cd0 <unwind_phase2_forced+0x54>
 8005d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d14:	4621      	mov	r1, r4
 8005d16:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d1a:	a892      	add	r0, sp, #584	; 0x248
 8005d1c:	616b      	str	r3, [r5, #20]
 8005d1e:	f001 fc91 	bl	8007644 <memcpy>
 8005d22:	692b      	ldr	r3, [r5, #16]
 8005d24:	4629      	mov	r1, r5
 8005d26:	aa92      	add	r2, sp, #584	; 0x248
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4798      	blx	r3
 8005d2c:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8005d2e:	4631      	mov	r1, r6
 8005d30:	462a      	mov	r2, r5
 8005d32:	6463      	str	r3, [r4, #68]	; 0x44
 8005d34:	462b      	mov	r3, r5
 8005d36:	9400      	str	r4, [sp, #0]
 8005d38:	f8cd a004 	str.w	sl, [sp, #4]
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	2001      	movs	r0, #1
 8005d40:	47c8      	blx	r9
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d0d2      	beq.n	8005cec <unwind_phase2_forced+0x70>
 8005d46:	2709      	movs	r7, #9
 8005d48:	4638      	mov	r0, r7
 8005d4a:	b022      	add	sp, #136	; 0x88
 8005d4c:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	f1b8 0f07 	cmp.w	r8, #7
 8005d58:	d1f5      	bne.n	8005d46 <unwind_phase2_forced+0xca>
 8005d5a:	1d20      	adds	r0, r4, #4
 8005d5c:	f000 fbc2 	bl	80064e4 <__restore_core_regs>

08005d60 <unwind_phase2>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f7ff fef5 	bl	8005b58 <get_eit_entry>
 8005d6e:	b950      	cbnz	r0, 8005d86 <unwind_phase2+0x26>
 8005d70:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8005d72:	2001      	movs	r0, #1
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	4621      	mov	r1, r4
 8005d78:	462a      	mov	r2, r5
 8005d7a:	6166      	str	r6, [r4, #20]
 8005d7c:	4798      	blx	r3
 8005d7e:	2808      	cmp	r0, #8
 8005d80:	d0f1      	beq.n	8005d66 <unwind_phase2+0x6>
 8005d82:	2807      	cmp	r0, #7
 8005d84:	d001      	beq.n	8005d8a <unwind_phase2+0x2a>
 8005d86:	f000 fe6d 	bl	8006a64 <abort>
 8005d8a:	1d28      	adds	r0, r5, #4
 8005d8c:	f000 fbaa 	bl	80064e4 <__restore_core_regs>

08005d90 <_Unwind_VRS_Get>:
 8005d90:	b959      	cbnz	r1, 8005daa <_Unwind_VRS_Get+0x1a>
 8005d92:	2a0f      	cmp	r2, #15
 8005d94:	bf94      	ite	ls
 8005d96:	2100      	movls	r1, #0
 8005d98:	2101      	movhi	r1, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bf0c      	ite	eq
 8005d9e:	460b      	moveq	r3, r1
 8005da0:	f041 0301 	orrne.w	r3, r1, #1
 8005da4:	b133      	cbz	r3, 8005db4 <_Unwind_VRS_Get+0x24>
 8005da6:	2002      	movs	r0, #2
 8005da8:	4770      	bx	lr
 8005daa:	2904      	cmp	r1, #4
 8005dac:	bf8c      	ite	hi
 8005dae:	2002      	movhi	r0, #2
 8005db0:	2001      	movls	r0, #1
 8005db2:	4770      	bx	lr
 8005db4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005db8:	4618      	mov	r0, r3
 8005dba:	9b00      	ldr	r3, [sp, #0]
 8005dbc:	6852      	ldr	r2, [r2, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <_Unwind_GetGR>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	460a      	mov	r2, r1
 8005dc8:	b084      	sub	sp, #16
 8005dca:	2100      	movs	r1, #0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	ac03      	add	r4, sp, #12
 8005dd0:	9400      	str	r4, [sp, #0]
 8005dd2:	f7ff ffdd 	bl	8005d90 <_Unwind_VRS_Get>
 8005dd6:	9803      	ldr	r0, [sp, #12]
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <_Unwind_VRS_Set>:
 8005ddc:	b959      	cbnz	r1, 8005df6 <_Unwind_VRS_Set+0x1a>
 8005dde:	2a0f      	cmp	r2, #15
 8005de0:	bf94      	ite	ls
 8005de2:	2100      	movls	r1, #0
 8005de4:	2101      	movhi	r1, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf0c      	ite	eq
 8005dea:	460b      	moveq	r3, r1
 8005dec:	f041 0301 	orrne.w	r3, r1, #1
 8005df0:	b133      	cbz	r3, 8005e00 <_Unwind_VRS_Set+0x24>
 8005df2:	2002      	movs	r0, #2
 8005df4:	4770      	bx	lr
 8005df6:	2904      	cmp	r1, #4
 8005df8:	bf8c      	ite	hi
 8005dfa:	2002      	movhi	r0, #2
 8005dfc:	2001      	movls	r0, #1
 8005dfe:	4770      	bx	lr
 8005e00:	9900      	ldr	r1, [sp, #0]
 8005e02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	6809      	ldr	r1, [r1, #0]
 8005e0a:	6051      	str	r1, [r2, #4]
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop

08005e10 <_Unwind_SetGR>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	ab04      	add	r3, sp, #16
 8005e16:	460c      	mov	r4, r1
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005e1e:	4622      	mov	r2, r4
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	460b      	mov	r3, r1
 8005e24:	f7ff ffda 	bl	8005ddc <_Unwind_VRS_Set>
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd10      	pop	{r4, pc}

08005e2c <__gnu_unwind_pr_common>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	461e      	mov	r6, r3
 8005e32:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005e34:	4617      	mov	r7, r2
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	460c      	mov	r4, r1
 8005e3a:	f000 0803 	and.w	r8, r0, #3
 8005e3e:	f000 0108 	and.w	r1, r0, #8
 8005e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e46:	9102      	str	r1, [sp, #8]
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	f040 80df 	bne.w	800600e <__gnu_unwind_pr_common+0x1e2>
 8005e50:	0212      	lsls	r2, r2, #8
 8005e52:	f88d 6019 	strb.w	r6, [sp, #25]
 8005e56:	9204      	str	r2, [sp, #16]
 8005e58:	2203      	movs	r2, #3
 8005e5a:	f88d 2018 	strb.w	r2, [sp, #24]
 8005e5e:	f1b8 0f02 	cmp.w	r8, #2
 8005e62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e64:	bf08      	it	eq
 8005e66:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8005e68:	f012 0201 	ands.w	r2, r2, #1
 8005e6c:	bf02      	ittt	eq
 8005e6e:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
 8005e72:	9200      	streq	r2, [sp, #0]
 8005e74:	9101      	streq	r1, [sp, #4]
 8005e76:	f040 80d6 	bne.w	8006026 <__gnu_unwind_pr_common+0x1fa>
 8005e7a:	f8d3 9000 	ldr.w	r9, [r3]
 8005e7e:	f1b9 0f00 	cmp.w	r9, #0
 8005e82:	d031      	beq.n	8005ee8 <__gnu_unwind_pr_common+0xbc>
 8005e84:	2e02      	cmp	r6, #2
 8005e86:	f000 80bd 	beq.w	8006004 <__gnu_unwind_pr_common+0x1d8>
 8005e8a:	f8b3 9000 	ldrh.w	r9, [r3]
 8005e8e:	1d1d      	adds	r5, r3, #4
 8005e90:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8005e94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e96:	210f      	movs	r1, #15
 8005e98:	f02b 0a01 	bic.w	sl, fp, #1
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	449a      	add	sl, r3
 8005ea0:	f7ff ff90 	bl	8005dc4 <_Unwind_GetGR>
 8005ea4:	4582      	cmp	sl, r0
 8005ea6:	d839      	bhi.n	8005f1c <__gnu_unwind_pr_common+0xf0>
 8005ea8:	f029 0301 	bic.w	r3, r9, #1
 8005eac:	f00b 0b01 	and.w	fp, fp, #1
 8005eb0:	449a      	add	sl, r3
 8005eb2:	f009 0901 	and.w	r9, r9, #1
 8005eb6:	4550      	cmp	r0, sl
 8005eb8:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8005ebc:	bf2c      	ite	cs
 8005ebe:	2000      	movcs	r0, #0
 8005ec0:	2001      	movcc	r0, #1
 8005ec2:	f1b9 0f01 	cmp.w	r9, #1
 8005ec6:	d033      	beq.n	8005f30 <__gnu_unwind_pr_common+0x104>
 8005ec8:	d255      	bcs.n	8005f76 <__gnu_unwind_pr_common+0x14a>
 8005eca:	f1b8 0f00 	cmp.w	r8, #0
 8005ece:	bf0c      	ite	eq
 8005ed0:	2000      	moveq	r0, #0
 8005ed2:	f000 0001 	andne.w	r0, r0, #1
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f040 80f0 	bne.w	80060bc <__gnu_unwind_pr_common+0x290>
 8005edc:	1d2b      	adds	r3, r5, #4
 8005ede:	f8d3 9000 	ldr.w	r9, [r3]
 8005ee2:	f1b9 0f00 	cmp.w	r9, #0
 8005ee6:	d1cd      	bne.n	8005e84 <__gnu_unwind_pr_common+0x58>
 8005ee8:	4638      	mov	r0, r7
 8005eea:	a904      	add	r1, sp, #16
 8005eec:	f000 fbfa 	bl	80066e4 <__gnu_unwind_execute>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d143      	bne.n	8005f7c <__gnu_unwind_pr_common+0x150>
 8005ef4:	9a00      	ldr	r2, [sp, #0]
 8005ef6:	2008      	movs	r0, #8
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	d040      	beq.n	8005f7e <__gnu_unwind_pr_common+0x152>
 8005efc:	210f      	movs	r1, #15
 8005efe:	4638      	mov	r0, r7
 8005f00:	f7ff ff60 	bl	8005dc4 <_Unwind_GetGR>
 8005f04:	210e      	movs	r1, #14
 8005f06:	4602      	mov	r2, r0
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ff81 	bl	8005e10 <_Unwind_SetGR>
 8005f0e:	4638      	mov	r0, r7
 8005f10:	210f      	movs	r1, #15
 8005f12:	4a76      	ldr	r2, [pc, #472]	; (80060ec <__gnu_unwind_pr_common+0x2c0>)
 8005f14:	f7ff ff7c 	bl	8005e10 <_Unwind_SetGR>
 8005f18:	2007      	movs	r0, #7
 8005f1a:	e030      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 8005f1c:	f00b 0b01 	and.w	fp, fp, #1
 8005f20:	f009 0901 	and.w	r9, r9, #1
 8005f24:	2000      	movs	r0, #0
 8005f26:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8005f2a:	f1b9 0f01 	cmp.w	r9, #1
 8005f2e:	d1cb      	bne.n	8005ec8 <__gnu_unwind_pr_common+0x9c>
 8005f30:	f1b8 0f00 	cmp.w	r8, #0
 8005f34:	f040 8094 	bne.w	8006060 <__gnu_unwind_pr_common+0x234>
 8005f38:	b1d0      	cbz	r0, 8005f70 <__gnu_unwind_pr_common+0x144>
 8005f3a:	686b      	ldr	r3, [r5, #4]
 8005f3c:	f8d5 9000 	ldr.w	r9, [r5]
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	d01b      	beq.n	8005f7c <__gnu_unwind_pr_common+0x150>
 8005f44:	9901      	ldr	r1, [sp, #4]
 8005f46:	3301      	adds	r3, #1
 8005f48:	460a      	mov	r2, r1
 8005f4a:	9107      	str	r1, [sp, #28]
 8005f4c:	f000 80a4 	beq.w	8006098 <__gnu_unwind_pr_common+0x26c>
 8005f50:	1d28      	adds	r0, r5, #4
 8005f52:	f7ff fdbf 	bl	8005ad4 <_Unwind_decode_target2>
 8005f56:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8005f5a:	ab07      	add	r3, sp, #28
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f010 fb6e 	bl	8016640 <__cxa_type_match>
 8005f64:	9a07      	ldr	r2, [sp, #28]
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 8096 	bne.w	8006098 <__gnu_unwind_pr_common+0x26c>
 8005f6c:	f8cd 801c 	str.w	r8, [sp, #28]
 8005f70:	f105 0308 	add.w	r3, r5, #8
 8005f74:	e781      	b.n	8005e7a <__gnu_unwind_pr_common+0x4e>
 8005f76:	f1b9 0f02 	cmp.w	r9, #2
 8005f7a:	d003      	beq.n	8005f84 <__gnu_unwind_pr_common+0x158>
 8005f7c:	2009      	movs	r0, #9
 8005f7e:	b009      	add	sp, #36	; 0x24
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8005f8a:	f1b8 0f00 	cmp.w	r8, #0
 8005f8e:	d14d      	bne.n	800602c <__gnu_unwind_pr_common+0x200>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d030      	beq.n	8005ff6 <__gnu_unwind_pr_common+0x1ca>
 8005f94:	9902      	ldr	r1, [sp, #8]
 8005f96:	f1d1 0201 	rsbs	r2, r1, #1
 8005f9a:	bf38      	it	cc
 8005f9c:	2200      	movcc	r2, #0
 8005f9e:	f1ba 0f00 	cmp.w	sl, #0
 8005fa2:	bf08      	it	eq
 8005fa4:	f042 0201 	orreq.w	r2, r2, #1
 8005fa8:	b32a      	cbz	r2, 8005ff6 <__gnu_unwind_pr_common+0x1ca>
 8005faa:	f1ba 0f00 	cmp.w	sl, #0
 8005fae:	d07a      	beq.n	80060a6 <__gnu_unwind_pr_common+0x27a>
 8005fb0:	f105 0904 	add.w	r9, r5, #4
 8005fb4:	46c3      	mov	fp, r8
 8005fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fba:	46b0      	mov	r8, r6
 8005fbc:	462e      	mov	r6, r5
 8005fbe:	9d01      	ldr	r5, [sp, #4]
 8005fc0:	e004      	b.n	8005fcc <__gnu_unwind_pr_common+0x1a0>
 8005fc2:	4553      	cmp	r3, sl
 8005fc4:	f109 0904 	add.w	r9, r9, #4
 8005fc8:	469b      	mov	fp, r3
 8005fca:	d06b      	beq.n	80060a4 <__gnu_unwind_pr_common+0x278>
 8005fcc:	4648      	mov	r0, r9
 8005fce:	9507      	str	r5, [sp, #28]
 8005fd0:	f7ff fd80 	bl	8005ad4 <_Unwind_decode_target2>
 8005fd4:	ab07      	add	r3, sp, #28
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4601      	mov	r1, r0
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f010 fb30 	bl	8016640 <__cxa_type_match>
 8005fe0:	f10b 0301 	add.w	r3, fp, #1
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0ec      	beq.n	8005fc2 <__gnu_unwind_pr_common+0x196>
 8005fe8:	45da      	cmp	sl, fp
 8005fea:	4635      	mov	r5, r6
 8005fec:	4646      	mov	r6, r8
 8005fee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ff2:	d058      	beq.n	80060a6 <__gnu_unwind_pr_common+0x27a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	db52      	blt.n	80060a0 <__gnu_unwind_pr_common+0x274>
 8005ffa:	f10a 0a01 	add.w	sl, sl, #1
 8005ffe:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 8006002:	e73a      	b.n	8005e7a <__gnu_unwind_pr_common+0x4e>
 8006004:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006008:	f103 0508 	add.w	r5, r3, #8
 800600c:	e742      	b.n	8005e94 <__gnu_unwind_pr_common+0x68>
 800600e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8006012:	0412      	lsls	r2, r2, #16
 8006014:	f88d 1019 	strb.w	r1, [sp, #25]
 8006018:	9204      	str	r2, [sp, #16]
 800601a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800601e:	2202      	movs	r2, #2
 8006020:	f88d 2018 	strb.w	r2, [sp, #24]
 8006024:	e71b      	b.n	8005e5e <__gnu_unwind_pr_common+0x32>
 8006026:	2200      	movs	r2, #0
 8006028:	9200      	str	r2, [sp, #0]
 800602a:	e75d      	b.n	8005ee8 <__gnu_unwind_pr_common+0xbc>
 800602c:	210d      	movs	r1, #13
 800602e:	4638      	mov	r0, r7
 8006030:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8006034:	f7ff fec6 	bl	8005dc4 <_Unwind_GetGR>
 8006038:	4581      	cmp	r9, r0
 800603a:	d1db      	bne.n	8005ff4 <__gnu_unwind_pr_common+0x1c8>
 800603c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800603e:	429d      	cmp	r5, r3
 8006040:	d1d8      	bne.n	8005ff4 <__gnu_unwind_pr_common+0x1c8>
 8006042:	2200      	movs	r2, #0
 8006044:	1d2b      	adds	r3, r5, #4
 8006046:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006048:	2204      	movs	r2, #4
 800604a:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 800604e:	6322      	str	r2, [r4, #48]	; 0x30
 8006050:	6363      	str	r3, [r4, #52]	; 0x34
 8006052:	682a      	ldr	r2, [r5, #0]
 8006054:	2a00      	cmp	r2, #0
 8006056:	da44      	bge.n	80060e2 <__gnu_unwind_pr_common+0x2b6>
 8006058:	461d      	mov	r5, r3
 800605a:	2301      	movs	r3, #1
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	e7cc      	b.n	8005ffa <__gnu_unwind_pr_common+0x1ce>
 8006060:	210d      	movs	r1, #13
 8006062:	4638      	mov	r0, r7
 8006064:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8006068:	f7ff feac 	bl	8005dc4 <_Unwind_GetGR>
 800606c:	4581      	cmp	r9, r0
 800606e:	f47f af7f 	bne.w	8005f70 <__gnu_unwind_pr_common+0x144>
 8006072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006074:	429d      	cmp	r5, r3
 8006076:	f47f af7b 	bne.w	8005f70 <__gnu_unwind_pr_common+0x144>
 800607a:	4628      	mov	r0, r5
 800607c:	f7ff fd30 	bl	8005ae0 <selfrel_offset31>
 8006080:	210f      	movs	r1, #15
 8006082:	4602      	mov	r2, r0
 8006084:	4638      	mov	r0, r7
 8006086:	f7ff fec3 	bl	8005e10 <_Unwind_SetGR>
 800608a:	4638      	mov	r0, r7
 800608c:	2100      	movs	r1, #0
 800608e:	4622      	mov	r2, r4
 8006090:	f7ff febe 	bl	8005e10 <_Unwind_SetGR>
 8006094:	2007      	movs	r0, #7
 8006096:	e772      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 8006098:	b92a      	cbnz	r2, 80060a6 <__gnu_unwind_pr_common+0x27a>
 800609a:	f105 0308 	add.w	r3, r5, #8
 800609e:	e6ec      	b.n	8005e7a <__gnu_unwind_pr_common+0x4e>
 80060a0:	3504      	adds	r5, #4
 80060a2:	e7aa      	b.n	8005ffa <__gnu_unwind_pr_common+0x1ce>
 80060a4:	4635      	mov	r5, r6
 80060a6:	4638      	mov	r0, r7
 80060a8:	210d      	movs	r1, #13
 80060aa:	f7ff fe8b 	bl	8005dc4 <_Unwind_GetGR>
 80060ae:	62a5      	str	r5, [r4, #40]	; 0x28
 80060b0:	4603      	mov	r3, r0
 80060b2:	6223      	str	r3, [r4, #32]
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	2006      	movs	r0, #6
 80060b8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ba:	e760      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 80060bc:	4628      	mov	r0, r5
 80060be:	3504      	adds	r5, #4
 80060c0:	f7ff fd0e 	bl	8005ae0 <selfrel_offset31>
 80060c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80060c6:	4606      	mov	r6, r0
 80060c8:	4620      	mov	r0, r4
 80060ca:	f010 fb2b 	bl	8016724 <__cxa_begin_cleanup>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f43f af54 	beq.w	8005f7c <__gnu_unwind_pr_common+0x150>
 80060d4:	4638      	mov	r0, r7
 80060d6:	210f      	movs	r1, #15
 80060d8:	4632      	mov	r2, r6
 80060da:	f7ff fe99 	bl	8005e10 <_Unwind_SetGR>
 80060de:	2007      	movs	r0, #7
 80060e0:	e74d      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 80060e2:	f10a 0001 	add.w	r0, sl, #1
 80060e6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80060ea:	e7c7      	b.n	800607c <__gnu_unwind_pr_common+0x250>
 80060ec:	0801686d 	.word	0x0801686d

080060f0 <__aeabi_unwind_cpp_pr2>:
 80060f0:	2302      	movs	r3, #2
 80060f2:	e69b      	b.n	8005e2c <__gnu_unwind_pr_common>

080060f4 <__aeabi_unwind_cpp_pr1>:
 80060f4:	2301      	movs	r3, #1
 80060f6:	e699      	b.n	8005e2c <__gnu_unwind_pr_common>

080060f8 <__aeabi_unwind_cpp_pr0>:
 80060f8:	2300      	movs	r3, #0
 80060fa:	e697      	b.n	8005e2c <__gnu_unwind_pr_common>

080060fc <_Unwind_VRS_Pop>:
 80060fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	4604      	mov	r4, r0
 8006102:	b0e8      	sub	sp, #416	; 0x1a0
 8006104:	2904      	cmp	r1, #4
 8006106:	d807      	bhi.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006108:	e8df f001 	tbb	[pc, r1]
 800610c:	034b4d33 	.word	0x034b4d33
 8006110:	0a          	.byte	0x0a
 8006111:	00          	.byte	0x00
 8006112:	2b03      	cmp	r3, #3
 8006114:	f000 80d8 	beq.w	80062c8 <_Unwind_VRS_Pop+0x1cc>
 8006118:	2002      	movs	r0, #2
 800611a:	b068      	add	sp, #416	; 0x1a0
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	2a10      	cmp	r2, #16
 8006122:	bf94      	ite	ls
 8006124:	2100      	movls	r1, #0
 8006126:	2101      	movhi	r1, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	460b      	moveq	r3, r1
 800612e:	f041 0301 	orrne.w	r3, r1, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	06d9      	lsls	r1, r3, #27
 800613a:	f100 80e7 	bmi.w	800630c <_Unwind_VRS_Pop+0x210>
 800613e:	ad64      	add	r5, sp, #400	; 0x190
 8006140:	9201      	str	r2, [sp, #4]
 8006142:	4628      	mov	r0, r5
 8006144:	2601      	movs	r6, #1
 8006146:	f000 fa3f 	bl	80065c8 <__gnu_Unwind_Save_WMMXC>
 800614a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800614c:	9a01      	ldr	r2, [sp, #4]
 800614e:	2300      	movs	r3, #0
 8006150:	fa16 f103 	lsls.w	r1, r6, r3
 8006154:	4211      	tst	r1, r2
 8006156:	bf1c      	itt	ne
 8006158:	f850 1b04 	ldrne.w	r1, [r0], #4
 800615c:	f845 1023 	strne.w	r1, [r5, r3, lsl #2]
 8006160:	3301      	adds	r3, #1
 8006162:	2b04      	cmp	r3, #4
 8006164:	d1f4      	bne.n	8006150 <_Unwind_VRS_Pop+0x54>
 8006166:	63a0      	str	r0, [r4, #56]	; 0x38
 8006168:	4628      	mov	r0, r5
 800616a:	f000 fa23 	bl	80065b4 <__gnu_Unwind_Restore_WMMXC>
 800616e:	2000      	movs	r0, #0
 8006170:	e7d3      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d0      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006176:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006178:	b292      	uxth	r2, r2
 800617a:	2001      	movs	r0, #1
 800617c:	fa10 f103 	lsls.w	r1, r0, r3
 8006180:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8006184:	3301      	adds	r3, #1
 8006186:	4211      	tst	r1, r2
 8006188:	bf1c      	itt	ne
 800618a:	f856 1b04 	ldrne.w	r1, [r6], #4
 800618e:	6069      	strne	r1, [r5, #4]
 8006190:	2b10      	cmp	r3, #16
 8006192:	d1f3      	bne.n	800617c <_Unwind_VRS_Pop+0x80>
 8006194:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8006198:	bf08      	it	eq
 800619a:	63a6      	streq	r6, [r4, #56]	; 0x38
 800619c:	d0bd      	beq.n	800611a <_Unwind_VRS_Pop+0x1e>
 800619e:	2000      	movs	r0, #0
 80061a0:	e7bb      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 80061a2:	2001      	movs	r0, #1
 80061a4:	e7b9      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 80061a6:	1f59      	subs	r1, r3, #5
 80061a8:	bf18      	it	ne
 80061aa:	2101      	movne	r1, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf0c      	ite	eq
 80061b0:	2000      	moveq	r0, #0
 80061b2:	f001 0001 	andne.w	r0, r1, #1
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d1ae      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 80061ba:	0c15      	lsrs	r5, r2, #16
 80061bc:	b296      	uxth	r6, r2
 80061be:	1972      	adds	r2, r6, r5
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2020      	movne	r0, #32
 80061c6:	2010      	moveq	r0, #16
 80061c8:	4290      	cmp	r0, r2
 80061ca:	d3a5      	bcc.n	8006118 <_Unwind_VRS_Pop+0x1c>
 80061cc:	f1a3 0c01 	sub.w	ip, r3, #1
 80061d0:	f1dc 0700 	rsbs	r7, ip, #0
 80061d4:	eb47 070c 	adc.w	r7, r7, ip
 80061d8:	2d0f      	cmp	r5, #15
 80061da:	bf94      	ite	ls
 80061dc:	2000      	movls	r0, #0
 80061de:	2001      	movhi	r0, #1
 80061e0:	4238      	tst	r0, r7
 80061e2:	d199      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 80061e4:	46b0      	mov	r8, r6
 80061e6:	b928      	cbnz	r0, 80061f4 <_Unwind_VRS_Pop+0xf8>
 80061e8:	2a10      	cmp	r2, #16
 80061ea:	bf98      	it	ls
 80061ec:	4680      	movls	r8, r0
 80061ee:	d909      	bls.n	8006204 <_Unwind_VRS_Pop+0x108>
 80061f0:	f1a2 0810 	sub.w	r8, r2, #16
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	bf0c      	ite	eq
 80061fa:	2100      	moveq	r1, #0
 80061fc:	f001 0101 	andne.w	r1, r1, #1
 8006200:	2900      	cmp	r1, #0
 8006202:	d189      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006204:	2d0f      	cmp	r5, #15
 8006206:	d80f      	bhi.n	8006228 <_Unwind_VRS_Pop+0x12c>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	07d1      	lsls	r1, r2, #31
 800620c:	d50c      	bpl.n	8006228 <_Unwind_VRS_Pop+0x12c>
 800620e:	2b05      	cmp	r3, #5
 8006210:	f022 0101 	bic.w	r1, r2, #1
 8006214:	4620      	mov	r0, r4
 8006216:	6021      	str	r1, [r4, #0]
 8006218:	f000 80b0 	beq.w	800637c <_Unwind_VRS_Pop+0x280>
 800621c:	f022 0203 	bic.w	r2, r2, #3
 8006220:	f840 2b48 	str.w	r2, [r0], #72
 8006224:	f000 f96e 	bl	8006504 <__gnu_Unwind_Save_VFP>
 8006228:	f1b8 0f00 	cmp.w	r8, #0
 800622c:	d003      	beq.n	8006236 <_Unwind_VRS_Pop+0x13a>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	075a      	lsls	r2, r3, #29
 8006232:	f100 8082 	bmi.w	800633a <_Unwind_VRS_Pop+0x23e>
 8006236:	2f00      	cmp	r7, #0
 8006238:	f040 8096 	bne.w	8006368 <_Unwind_VRS_Pop+0x26c>
 800623c:	2d0f      	cmp	r5, #15
 800623e:	d975      	bls.n	800632c <_Unwind_VRS_Pop+0x230>
 8006240:	f1b8 0f00 	cmp.w	r8, #0
 8006244:	d16c      	bne.n	8006320 <_Unwind_VRS_Pop+0x224>
 8006246:	4633      	mov	r3, r6
 8006248:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800624a:	2b00      	cmp	r3, #0
 800624c:	4616      	mov	r6, r2
 800624e:	dd0f      	ble.n	8006270 <_Unwind_VRS_Pop+0x174>
 8006250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006254:	ab02      	add	r3, sp, #8
 8006256:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 800625a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800625e:	f852 0b04 	ldr.w	r0, [r2], #4
 8006262:	3b01      	subs	r3, #1
 8006264:	f841 0b04 	str.w	r0, [r1], #4
 8006268:	1c58      	adds	r0, r3, #1
 800626a:	d1f8      	bne.n	800625e <_Unwind_VRS_Pop+0x162>
 800626c:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8006270:	f1b8 0f00 	cmp.w	r8, #0
 8006274:	d016      	beq.n	80062a4 <_Unwind_VRS_Pop+0x1a8>
 8006276:	2d10      	cmp	r5, #16
 8006278:	bf2c      	ite	cs
 800627a:	462a      	movcs	r2, r5
 800627c:	2210      	movcc	r2, #16
 800627e:	a868      	add	r0, sp, #416	; 0x1a0
 8006280:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8006284:	4631      	mov	r1, r6
 8006286:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800628a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800628e:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8006292:	f851 0b04 	ldr.w	r0, [r1], #4
 8006296:	3b01      	subs	r3, #1
 8006298:	f842 0b04 	str.w	r0, [r2], #4
 800629c:	1c58      	adds	r0, r3, #1
 800629e:	d1f8      	bne.n	8006292 <_Unwind_VRS_Pop+0x196>
 80062a0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	d158      	bne.n	800635a <_Unwind_VRS_Pop+0x25e>
 80062a8:	2d0f      	cmp	r5, #15
 80062aa:	63a6      	str	r6, [r4, #56]	; 0x38
 80062ac:	d802      	bhi.n	80062b4 <_Unwind_VRS_Pop+0x1b8>
 80062ae:	a802      	add	r0, sp, #8
 80062b0:	f000 f92c 	bl	800650c <__gnu_Unwind_Restore_VFP_D>
 80062b4:	4640      	mov	r0, r8
 80062b6:	f1b8 0f00 	cmp.w	r8, #0
 80062ba:	f43f af2e 	beq.w	800611a <_Unwind_VRS_Pop+0x1e>
 80062be:	a824      	add	r0, sp, #144	; 0x90
 80062c0:	f000 f92c 	bl	800651c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e728      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 80062c8:	0c16      	lsrs	r6, r2, #16
 80062ca:	b295      	uxth	r5, r2
 80062cc:	19ab      	adds	r3, r5, r6
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	f63f af22 	bhi.w	8006118 <_Unwind_VRS_Pop+0x1c>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	0718      	lsls	r0, r3, #28
 80062d8:	d437      	bmi.n	800634a <_Unwind_VRS_Pop+0x24e>
 80062da:	a844      	add	r0, sp, #272	; 0x110
 80062dc:	006f      	lsls	r7, r5, #1
 80062de:	f000 f947 	bl	8006570 <__gnu_Unwind_Save_WMMXD>
 80062e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062e4:	4610      	mov	r0, r2
 80062e6:	b15d      	cbz	r5, 8006300 <_Unwind_VRS_Pop+0x204>
 80062e8:	ab44      	add	r3, sp, #272	; 0x110
 80062ea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062ee:	463b      	mov	r3, r7
 80062f0:	f852 1b04 	ldr.w	r1, [r2], #4
 80062f4:	3b01      	subs	r3, #1
 80062f6:	f846 1b04 	str.w	r1, [r6], #4
 80062fa:	d1f9      	bne.n	80062f0 <_Unwind_VRS_Pop+0x1f4>
 80062fc:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006300:	63a0      	str	r0, [r4, #56]	; 0x38
 8006302:	a844      	add	r0, sp, #272	; 0x110
 8006304:	f000 f912 	bl	800652c <__gnu_Unwind_Restore_WMMXD>
 8006308:	2000      	movs	r0, #0
 800630a:	e706      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 800630c:	f023 0310 	bic.w	r3, r3, #16
 8006310:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	f000 f956 	bl	80065c8 <__gnu_Unwind_Save_WMMXC>
 800631c:	9a01      	ldr	r2, [sp, #4]
 800631e:	e70e      	b.n	800613e <_Unwind_VRS_Pop+0x42>
 8006320:	a824      	add	r0, sp, #144	; 0x90
 8006322:	f000 f8ff 	bl	8006524 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006326:	f1c5 0310 	rsb	r3, r5, #16
 800632a:	e78d      	b.n	8006248 <_Unwind_VRS_Pop+0x14c>
 800632c:	a802      	add	r0, sp, #8
 800632e:	f000 f8f1 	bl	8006514 <__gnu_Unwind_Save_VFP_D>
 8006332:	f1b8 0f00 	cmp.w	r8, #0
 8006336:	d086      	beq.n	8006246 <_Unwind_VRS_Pop+0x14a>
 8006338:	e7f2      	b.n	8006320 <_Unwind_VRS_Pop+0x224>
 800633a:	4620      	mov	r0, r4
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	f840 3bd0 	str.w	r3, [r0], #208
 8006344:	f000 f8ee 	bl	8006524 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006348:	e775      	b.n	8006236 <_Unwind_VRS_Pop+0x13a>
 800634a:	f023 0308 	bic.w	r3, r3, #8
 800634e:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	f000 f90c 	bl	8006570 <__gnu_Unwind_Save_WMMXD>
 8006358:	e7bf      	b.n	80062da <_Unwind_VRS_Pop+0x1de>
 800635a:	a802      	add	r0, sp, #8
 800635c:	3604      	adds	r6, #4
 800635e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006360:	f000 f8cc 	bl	80064fc <__gnu_Unwind_Restore_VFP>
 8006364:	2000      	movs	r0, #0
 8006366:	e6d8      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 8006368:	a802      	add	r0, sp, #8
 800636a:	f000 f8cb 	bl	8006504 <__gnu_Unwind_Save_VFP>
 800636e:	f1b8 0f00 	cmp.w	r8, #0
 8006372:	f43f af68 	beq.w	8006246 <_Unwind_VRS_Pop+0x14a>
 8006376:	f1c5 0310 	rsb	r3, r5, #16
 800637a:	e765      	b.n	8006248 <_Unwind_VRS_Pop+0x14c>
 800637c:	f041 0102 	orr.w	r1, r1, #2
 8006380:	f840 1b48 	str.w	r1, [r0], #72
 8006384:	f000 f8c6 	bl	8006514 <__gnu_Unwind_Save_VFP_D>
 8006388:	e74e      	b.n	8006228 <_Unwind_VRS_Pop+0x12c>
 800638a:	bf00      	nop

0800638c <_Unwind_GetCFA>:
 800638c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800638e:	4770      	bx	lr

08006390 <__gnu_Unwind_RaiseException>:
 8006390:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006394:	1d0f      	adds	r7, r1, #4
 8006396:	640b      	str	r3, [r1, #64]	; 0x40
 8006398:	460d      	mov	r5, r1
 800639a:	4604      	mov	r4, r0
 800639c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80063a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063a2:	ae01      	add	r6, sp, #4
 80063a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80063a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80063aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80063ae:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80063b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff fbca 	bl	8005b58 <get_eit_entry>
 80063c4:	b958      	cbnz	r0, 80063de <__gnu_Unwind_RaiseException+0x4e>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	4621      	mov	r1, r4
 80063ca:	466a      	mov	r2, sp
 80063cc:	4798      	blx	r3
 80063ce:	2808      	cmp	r0, #8
 80063d0:	4606      	mov	r6, r0
 80063d2:	d0f3      	beq.n	80063bc <__gnu_Unwind_RaiseException+0x2c>
 80063d4:	4668      	mov	r0, sp
 80063d6:	f7ff fc25 	bl	8005c24 <restore_non_core_regs>
 80063da:	2e06      	cmp	r6, #6
 80063dc:	d003      	beq.n	80063e6 <__gnu_Unwind_RaiseException+0x56>
 80063de:	2009      	movs	r0, #9
 80063e0:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7ff fcb9 	bl	8005d60 <unwind_phase2>
 80063ee:	bf00      	nop

080063f0 <__gnu_Unwind_ForcedUnwind>:
 80063f0:	b410      	push	{r4}
 80063f2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80063f4:	60c1      	str	r1, [r0, #12]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6182      	str	r2, [r0, #24]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641c      	str	r4, [r3, #64]	; 0x40
 80063fe:	bc10      	pop	{r4}
 8006400:	e43c      	b.n	8005c7c <unwind_phase2_forced>
 8006402:	bf00      	nop

08006404 <__gnu_Unwind_Resume>:
 8006404:	6942      	ldr	r2, [r0, #20]
 8006406:	b538      	push	{r3, r4, r5, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	68c3      	ldr	r3, [r0, #12]
 800640c:	460d      	mov	r5, r1
 800640e:	640a      	str	r2, [r1, #64]	; 0x40
 8006410:	b123      	cbz	r3, 800641c <__gnu_Unwind_Resume+0x18>
 8006412:	2201      	movs	r2, #1
 8006414:	f7ff fc32 	bl	8005c7c <unwind_phase2_forced>
 8006418:	f000 fb24 	bl	8006a64 <abort>
 800641c:	6903      	ldr	r3, [r0, #16]
 800641e:	4621      	mov	r1, r4
 8006420:	2002      	movs	r0, #2
 8006422:	462a      	mov	r2, r5
 8006424:	4798      	blx	r3
 8006426:	2807      	cmp	r0, #7
 8006428:	d003      	beq.n	8006432 <__gnu_Unwind_Resume+0x2e>
 800642a:	2808      	cmp	r0, #8
 800642c:	d004      	beq.n	8006438 <__gnu_Unwind_Resume+0x34>
 800642e:	f000 fb19 	bl	8006a64 <abort>
 8006432:	1d28      	adds	r0, r5, #4
 8006434:	f000 f856 	bl	80064e4 <__restore_core_regs>
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7ff fc90 	bl	8005d60 <unwind_phase2>

08006440 <__gnu_Unwind_Resume_or_Rethrow>:
 8006440:	68c3      	ldr	r3, [r0, #12]
 8006442:	b11b      	cbz	r3, 800644c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8006444:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006446:	2200      	movs	r2, #0
 8006448:	640b      	str	r3, [r1, #64]	; 0x40
 800644a:	e417      	b.n	8005c7c <unwind_phase2_forced>
 800644c:	e7a0      	b.n	8006390 <__gnu_Unwind_RaiseException>
 800644e:	bf00      	nop

08006450 <_Unwind_Complete>:
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <_Unwind_DeleteException>:
 8006454:	b508      	push	{r3, lr}
 8006456:	4601      	mov	r1, r0
 8006458:	6883      	ldr	r3, [r0, #8]
 800645a:	b10b      	cbz	r3, 8006460 <_Unwind_DeleteException+0xc>
 800645c:	2001      	movs	r0, #1
 800645e:	4798      	blx	r3
 8006460:	bd08      	pop	{r3, pc}
 8006462:	bf00      	nop

08006464 <__gnu_Unwind_Backtrace>:
 8006464:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006468:	1d17      	adds	r7, r2, #4
 800646a:	6413      	str	r3, [r2, #64]	; 0x40
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8006474:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006476:	ae01      	add	r6, sp, #4
 8006478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800647a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800647c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800647e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006480:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006482:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8006486:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800648a:	f04f 33ff 	mov.w	r3, #4294967295
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006492:	a890      	add	r0, sp, #576	; 0x240
 8006494:	f7ff fb60 	bl	8005b58 <get_eit_entry>
 8006498:	aa90      	add	r2, sp, #576	; 0x240
 800649a:	210c      	movs	r1, #12
 800649c:	4603      	mov	r3, r0
 800649e:	4668      	mov	r0, sp
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11d      	bne.n	80064e0 <__gnu_Unwind_Backtrace+0x7c>
 80064a4:	f7ff fcb4 	bl	8005e10 <_Unwind_SetGR>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4668      	mov	r0, sp
 80064ac:	47a8      	blx	r5
 80064ae:	a990      	add	r1, sp, #576	; 0x240
 80064b0:	466a      	mov	r2, sp
 80064b2:	4603      	mov	r3, r0
 80064b4:	2008      	movs	r0, #8
 80064b6:	b99b      	cbnz	r3, 80064e0 <__gnu_Unwind_Backtrace+0x7c>
 80064b8:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80064ba:	4798      	blx	r3
 80064bc:	1f43      	subs	r3, r0, #5
 80064be:	4606      	mov	r6, r0
 80064c0:	bf18      	it	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2809      	cmp	r0, #9
 80064c6:	bf0c      	ite	eq
 80064c8:	2300      	moveq	r3, #0
 80064ca:	f003 0301 	andne.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1de      	bne.n	8006490 <__gnu_Unwind_Backtrace+0x2c>
 80064d2:	4668      	mov	r0, sp
 80064d4:	f7ff fba6 	bl	8005c24 <restore_non_core_regs>
 80064d8:	4630      	mov	r0, r6
 80064da:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 80064de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e0:	2609      	movs	r6, #9
 80064e2:	e7f6      	b.n	80064d2 <__gnu_Unwind_Backtrace+0x6e>

080064e4 <__restore_core_regs>:
 80064e4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80064e8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80064ec:	469c      	mov	ip, r3
 80064ee:	46a6      	mov	lr, r4
 80064f0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80064f4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80064f8:	46e5      	mov	sp, ip
 80064fa:	bd00      	pop	{pc}

080064fc <__gnu_Unwind_Restore_VFP>:
 80064fc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <__gnu_Unwind_Save_VFP>:
 8006504:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <__gnu_Unwind_Restore_VFP_D>:
 800650c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop

08006514 <__gnu_Unwind_Save_VFP_D>:
 8006514:	ec80 0b20 	vstmia	r0, {d0-d15}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800651c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop

08006524 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8006524:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop

0800652c <__gnu_Unwind_Restore_WMMXD>:
 800652c:	ecf0 0102 	ldfe	f0, [r0], #8
 8006530:	ecf0 1102 	ldfe	f1, [r0], #8
 8006534:	ecf0 2102 	ldfe	f2, [r0], #8
 8006538:	ecf0 3102 	ldfe	f3, [r0], #8
 800653c:	ecf0 4102 	ldfe	f4, [r0], #8
 8006540:	ecf0 5102 	ldfe	f5, [r0], #8
 8006544:	ecf0 6102 	ldfe	f6, [r0], #8
 8006548:	ecf0 7102 	ldfe	f7, [r0], #8
 800654c:	ecf0 8102 	ldfp	f0, [r0], #8
 8006550:	ecf0 9102 	ldfp	f1, [r0], #8
 8006554:	ecf0 a102 	ldfp	f2, [r0], #8
 8006558:	ecf0 b102 	ldfp	f3, [r0], #8
 800655c:	ecf0 c102 	ldfp	f4, [r0], #8
 8006560:	ecf0 d102 	ldfp	f5, [r0], #8
 8006564:	ecf0 e102 	ldfp	f6, [r0], #8
 8006568:	ecf0 f102 	ldfp	f7, [r0], #8
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <__gnu_Unwind_Save_WMMXD>:
 8006570:	ece0 0102 	stfe	f0, [r0], #8
 8006574:	ece0 1102 	stfe	f1, [r0], #8
 8006578:	ece0 2102 	stfe	f2, [r0], #8
 800657c:	ece0 3102 	stfe	f3, [r0], #8
 8006580:	ece0 4102 	stfe	f4, [r0], #8
 8006584:	ece0 5102 	stfe	f5, [r0], #8
 8006588:	ece0 6102 	stfe	f6, [r0], #8
 800658c:	ece0 7102 	stfe	f7, [r0], #8
 8006590:	ece0 8102 	stfp	f0, [r0], #8
 8006594:	ece0 9102 	stfp	f1, [r0], #8
 8006598:	ece0 a102 	stfp	f2, [r0], #8
 800659c:	ece0 b102 	stfp	f3, [r0], #8
 80065a0:	ece0 c102 	stfp	f4, [r0], #8
 80065a4:	ece0 d102 	stfp	f5, [r0], #8
 80065a8:	ece0 e102 	stfp	f6, [r0], #8
 80065ac:	ece0 f102 	stfp	f7, [r0], #8
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop

080065b4 <__gnu_Unwind_Restore_WMMXC>:
 80065b4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80065b8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80065bc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80065c0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop

080065c8 <__gnu_Unwind_Save_WMMXC>:
 80065c8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80065cc:	fca0 9101 	stc2	1, cr9, [r0], #4
 80065d0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80065d4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop

080065dc <_Unwind_RaiseException>:
 80065dc:	46ec      	mov	ip, sp
 80065de:	b500      	push	{lr}
 80065e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80065e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80065f0:	a901      	add	r1, sp, #4
 80065f2:	f7ff fecd 	bl	8006390 <__gnu_Unwind_RaiseException>
 80065f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80065fa:	b012      	add	sp, #72	; 0x48
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <_Unwind_Resume>:
 8006600:	46ec      	mov	ip, sp
 8006602:	b500      	push	{lr}
 8006604:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006608:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006614:	a901      	add	r1, sp, #4
 8006616:	f7ff fef5 	bl	8006404 <__gnu_Unwind_Resume>
 800661a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800661e:	b012      	add	sp, #72	; 0x48
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <_Unwind_Resume_or_Rethrow>:
 8006624:	46ec      	mov	ip, sp
 8006626:	b500      	push	{lr}
 8006628:	e92d 5000 	stmdb	sp!, {ip, lr}
 800662c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006638:	a901      	add	r1, sp, #4
 800663a:	f7ff ff01 	bl	8006440 <__gnu_Unwind_Resume_or_Rethrow>
 800663e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006642:	b012      	add	sp, #72	; 0x48
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop

08006648 <_Unwind_ForcedUnwind>:
 8006648:	46ec      	mov	ip, sp
 800664a:	b500      	push	{lr}
 800664c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006650:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e92d 000c 	stmdb	sp!, {r2, r3}
 800665c:	ab01      	add	r3, sp, #4
 800665e:	f7ff fec7 	bl	80063f0 <__gnu_Unwind_ForcedUnwind>
 8006662:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006666:	b012      	add	sp, #72	; 0x48
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop

0800666c <_Unwind_Backtrace>:
 800666c:	46ec      	mov	ip, sp
 800666e:	b500      	push	{lr}
 8006670:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006674:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006680:	aa01      	add	r2, sp, #4
 8006682:	f7ff feef 	bl	8006464 <__gnu_Unwind_Backtrace>
 8006686:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800668a:	b012      	add	sp, #72	; 0x48
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <next_unwind_byte>:
 8006690:	7a02      	ldrb	r2, [r0, #8]
 8006692:	4603      	mov	r3, r0
 8006694:	b91a      	cbnz	r2, 800669e <next_unwind_byte+0xe>
 8006696:	7a42      	ldrb	r2, [r0, #9]
 8006698:	b942      	cbnz	r2, 80066ac <next_unwind_byte+0x1c>
 800669a:	20b0      	movs	r0, #176	; 0xb0
 800669c:	4770      	bx	lr
 800669e:	6800      	ldr	r0, [r0, #0]
 80066a0:	3a01      	subs	r2, #1
 80066a2:	721a      	strb	r2, [r3, #8]
 80066a4:	0202      	lsls	r2, r0, #8
 80066a6:	0e00      	lsrs	r0, r0, #24
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	4770      	bx	lr
 80066ac:	6841      	ldr	r1, [r0, #4]
 80066ae:	3a01      	subs	r2, #1
 80066b0:	7242      	strb	r2, [r0, #9]
 80066b2:	2203      	movs	r2, #3
 80066b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80066b8:	721a      	strb	r2, [r3, #8]
 80066ba:	6059      	str	r1, [r3, #4]
 80066bc:	0202      	lsls	r2, r0, #8
 80066be:	0e00      	lsrs	r0, r0, #24
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	4770      	bx	lr

080066c4 <_Unwind_GetGR.constprop.0>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	2100      	movs	r1, #0
 80066c8:	b084      	sub	sp, #16
 80066ca:	220c      	movs	r2, #12
 80066cc:	460b      	mov	r3, r1
 80066ce:	eb0d 0402 	add.w	r4, sp, r2
 80066d2:	9400      	str	r4, [sp, #0]
 80066d4:	f7ff fb5c 	bl	8005d90 <_Unwind_VRS_Get>
 80066d8:	9803      	ldr	r0, [sp, #12]
 80066da:	b004      	add	sp, #16
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop

080066e0 <unwind_UCB_from_context>:
 80066e0:	e7f0      	b.n	80066c4 <_Unwind_GetGR.constprop.0>
 80066e2:	bf00      	nop

080066e4 <__gnu_unwind_execute>:
 80066e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e8:	4606      	mov	r6, r0
 80066ea:	b085      	sub	sp, #20
 80066ec:	460d      	mov	r5, r1
 80066ee:	f04f 0900 	mov.w	r9, #0
 80066f2:	f44f 677f 	mov.w	r7, #4080	; 0xff0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7ff ffca 	bl	8006690 <next_unwind_byte>
 80066fc:	28b0      	cmp	r0, #176	; 0xb0
 80066fe:	4604      	mov	r4, r0
 8006700:	f000 80c9 	beq.w	8006896 <__gnu_unwind_execute+0x1b2>
 8006704:	f010 0180 	ands.w	r1, r0, #128	; 0x80
 8006708:	d021      	beq.n	800674e <__gnu_unwind_execute+0x6a>
 800670a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	f000 8085 	beq.w	800681e <__gnu_unwind_execute+0x13a>
 8006714:	2b90      	cmp	r3, #144	; 0x90
 8006716:	d037      	beq.n	8006788 <__gnu_unwind_execute+0xa4>
 8006718:	2ba0      	cmp	r3, #160	; 0xa0
 800671a:	d054      	beq.n	80067c6 <__gnu_unwind_execute+0xe2>
 800671c:	2bb0      	cmp	r3, #176	; 0xb0
 800671e:	d065      	beq.n	80067ec <__gnu_unwind_execute+0x108>
 8006720:	2bc0      	cmp	r3, #192	; 0xc0
 8006722:	f000 8094 	beq.w	800684e <__gnu_unwind_execute+0x16a>
 8006726:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800672a:	2bd0      	cmp	r3, #208	; 0xd0
 800672c:	d10b      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 800672e:	f000 0207 	and.w	r2, r0, #7
 8006732:	2101      	movs	r1, #1
 8006734:	3201      	adds	r2, #1
 8006736:	4630      	mov	r0, r6
 8006738:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800673c:	2305      	movs	r3, #5
 800673e:	f7ff fcdd 	bl	80060fc <_Unwind_VRS_Pop>
 8006742:	2800      	cmp	r0, #0
 8006744:	d0d7      	beq.n	80066f6 <__gnu_unwind_execute+0x12>
 8006746:	2009      	movs	r0, #9
 8006748:	b005      	add	sp, #20
 800674a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800674e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8006752:	ab03      	add	r3, sp, #12
 8006754:	220d      	movs	r2, #13
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4630      	mov	r0, r6
 800675a:	460b      	mov	r3, r1
 800675c:	f7ff fb18 	bl	8005d90 <_Unwind_VRS_Get>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	fa5f f888 	uxtb.w	r8, r8
 8006766:	0664      	lsls	r4, r4, #25
 8006768:	f108 0804 	add.w	r8, r8, #4
 800676c:	ac03      	add	r4, sp, #12
 800676e:	bf4c      	ite	mi
 8006770:	ebc8 0303 	rsbmi	r3, r8, r3
 8006774:	4443      	addpl	r3, r8
 8006776:	9400      	str	r4, [sp, #0]
 8006778:	9303      	str	r3, [sp, #12]
 800677a:	2100      	movs	r1, #0
 800677c:	4630      	mov	r0, r6
 800677e:	220d      	movs	r2, #13
 8006780:	460b      	mov	r3, r1
 8006782:	f7ff fb2b 	bl	8005ddc <_Unwind_VRS_Set>
 8006786:	e7b6      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006788:	f000 020f 	and.w	r2, r0, #15
 800678c:	f1a2 000d 	sub.w	r0, r2, #13
 8006790:	4244      	negs	r4, r0
 8006792:	eb44 0400 	adc.w	r4, r4, r0
 8006796:	2a0f      	cmp	r2, #15
 8006798:	bf14      	ite	ne
 800679a:	46a0      	movne	r8, r4
 800679c:	f044 0801 	orreq.w	r8, r4, #1
 80067a0:	f1b8 0f00 	cmp.w	r8, #0
 80067a4:	d1cf      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 80067a6:	4641      	mov	r1, r8
 80067a8:	4643      	mov	r3, r8
 80067aa:	4630      	mov	r0, r6
 80067ac:	ac03      	add	r4, sp, #12
 80067ae:	9400      	str	r4, [sp, #0]
 80067b0:	f7ff faee 	bl	8005d90 <_Unwind_VRS_Get>
 80067b4:	ab03      	add	r3, sp, #12
 80067b6:	4630      	mov	r0, r6
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4641      	mov	r1, r8
 80067bc:	220d      	movs	r2, #13
 80067be:	4643      	mov	r3, r8
 80067c0:	f7ff fb0c 	bl	8005ddc <_Unwind_VRS_Set>
 80067c4:	e797      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80067c6:	43c2      	mvns	r2, r0
 80067c8:	f002 0207 	and.w	r2, r2, #7
 80067cc:	fa57 f202 	asrs.w	r2, r7, r2
 80067d0:	0701      	lsls	r1, r0, #28
 80067d2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80067d6:	4630      	mov	r0, r6
 80067d8:	bf48      	it	mi
 80067da:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80067de:	2100      	movs	r1, #0
 80067e0:	460b      	mov	r3, r1
 80067e2:	f7ff fc8b 	bl	80060fc <_Unwind_VRS_Pop>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d1ad      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 80067ea:	e784      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80067ec:	28b1      	cmp	r0, #177	; 0xb1
 80067ee:	d076      	beq.n	80068de <__gnu_unwind_execute+0x1fa>
 80067f0:	28b2      	cmp	r0, #178	; 0xb2
 80067f2:	f000 8087 	beq.w	8006904 <__gnu_unwind_execute+0x220>
 80067f6:	28b3      	cmp	r0, #179	; 0xb3
 80067f8:	f000 80aa 	beq.w	8006950 <__gnu_unwind_execute+0x26c>
 80067fc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8006800:	2bb4      	cmp	r3, #180	; 0xb4
 8006802:	d05e      	beq.n	80068c2 <__gnu_unwind_execute+0x1de>
 8006804:	f000 0207 	and.w	r2, r0, #7
 8006808:	2101      	movs	r1, #1
 800680a:	3201      	adds	r2, #1
 800680c:	4630      	mov	r0, r6
 800680e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006812:	460b      	mov	r3, r1
 8006814:	f7ff fc72 	bl	80060fc <_Unwind_VRS_Pop>
 8006818:	2800      	cmp	r0, #0
 800681a:	d194      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 800681c:	e76b      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 800681e:	4628      	mov	r0, r5
 8006820:	0224      	lsls	r4, r4, #8
 8006822:	f7ff ff35 	bl	8006690 <next_unwind_byte>
 8006826:	4304      	orrs	r4, r0
 8006828:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800682c:	d08b      	beq.n	8006746 <__gnu_unwind_execute+0x62>
 800682e:	0522      	lsls	r2, r4, #20
 8006830:	2100      	movs	r1, #0
 8006832:	4630      	mov	r0, r6
 8006834:	460b      	mov	r3, r1
 8006836:	0c12      	lsrs	r2, r2, #16
 8006838:	0124      	lsls	r4, r4, #4
 800683a:	f7ff fc5f 	bl	80060fc <_Unwind_VRS_Pop>
 800683e:	2800      	cmp	r0, #0
 8006840:	d181      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 8006842:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8006846:	bf18      	it	ne
 8006848:	f04f 0901 	movne.w	r9, #1
 800684c:	e753      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 800684e:	28c6      	cmp	r0, #198	; 0xc6
 8006850:	f000 8091 	beq.w	8006976 <__gnu_unwind_execute+0x292>
 8006854:	28c7      	cmp	r0, #199	; 0xc7
 8006856:	f000 80a1 	beq.w	800699c <__gnu_unwind_execute+0x2b8>
 800685a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800685e:	2bc0      	cmp	r3, #192	; 0xc0
 8006860:	f000 80af 	beq.w	80069c2 <__gnu_unwind_execute+0x2de>
 8006864:	28c8      	cmp	r0, #200	; 0xc8
 8006866:	f000 80ba 	beq.w	80069de <__gnu_unwind_execute+0x2fa>
 800686a:	28c9      	cmp	r0, #201	; 0xc9
 800686c:	f47f af6b 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff ff0d 	bl	8006690 <next_unwind_byte>
 8006876:	2101      	movs	r1, #1
 8006878:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800687c:	f000 030f 	and.w	r3, r0, #15
 8006880:	3301      	adds	r3, #1
 8006882:	4630      	mov	r0, r6
 8006884:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006888:	2305      	movs	r3, #5
 800688a:	f7ff fc37 	bl	80060fc <_Unwind_VRS_Pop>
 800688e:	2800      	cmp	r0, #0
 8006890:	f47f af59 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006894:	e72f      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006896:	2000      	movs	r0, #0
 8006898:	f1b9 0f00 	cmp.w	r9, #0
 800689c:	f47f af54 	bne.w	8006748 <__gnu_unwind_execute+0x64>
 80068a0:	4649      	mov	r1, r9
 80068a2:	220e      	movs	r2, #14
 80068a4:	464b      	mov	r3, r9
 80068a6:	4630      	mov	r0, r6
 80068a8:	ac03      	add	r4, sp, #12
 80068aa:	9400      	str	r4, [sp, #0]
 80068ac:	f7ff fa70 	bl	8005d90 <_Unwind_VRS_Get>
 80068b0:	4630      	mov	r0, r6
 80068b2:	4649      	mov	r1, r9
 80068b4:	220f      	movs	r2, #15
 80068b6:	464b      	mov	r3, r9
 80068b8:	9400      	str	r4, [sp, #0]
 80068ba:	f7ff fa8f 	bl	8005ddc <_Unwind_VRS_Set>
 80068be:	4648      	mov	r0, r9
 80068c0:	e742      	b.n	8006748 <__gnu_unwind_execute+0x64>
 80068c2:	f000 0203 	and.w	r2, r0, #3
 80068c6:	2102      	movs	r1, #2
 80068c8:	3201      	adds	r2, #1
 80068ca:	4630      	mov	r0, r6
 80068cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80068d0:	460b      	mov	r3, r1
 80068d2:	f7ff fc13 	bl	80060fc <_Unwind_VRS_Pop>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f47f af35 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80068dc:	e70b      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff fed6 	bl	8006690 <next_unwind_byte>
 80068e4:	4602      	mov	r2, r0
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f43f af2d 	beq.w	8006746 <__gnu_unwind_execute+0x62>
 80068ec:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 80068f0:	f47f af29 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80068f4:	4630      	mov	r0, r6
 80068f6:	460b      	mov	r3, r1
 80068f8:	f7ff fc00 	bl	80060fc <_Unwind_VRS_Pop>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f47f af22 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006902:	e6f8      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006904:	2100      	movs	r1, #0
 8006906:	220d      	movs	r2, #13
 8006908:	460b      	mov	r3, r1
 800690a:	4630      	mov	r0, r6
 800690c:	ac03      	add	r4, sp, #12
 800690e:	9400      	str	r4, [sp, #0]
 8006910:	f7ff fa3e 	bl	8005d90 <_Unwind_VRS_Get>
 8006914:	4628      	mov	r0, r5
 8006916:	f7ff febb 	bl	8006690 <next_unwind_byte>
 800691a:	2402      	movs	r4, #2
 800691c:	0602      	lsls	r2, r0, #24
 800691e:	d50b      	bpl.n	8006938 <__gnu_unwind_execute+0x254>
 8006920:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8006924:	9a03      	ldr	r2, [sp, #12]
 8006926:	4628      	mov	r0, r5
 8006928:	40a3      	lsls	r3, r4
 800692a:	3407      	adds	r4, #7
 800692c:	18d3      	adds	r3, r2, r3
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	f7ff feae 	bl	8006690 <next_unwind_byte>
 8006934:	0603      	lsls	r3, r0, #24
 8006936:	d4f3      	bmi.n	8006920 <__gnu_unwind_execute+0x23c>
 8006938:	ab03      	add	r3, sp, #12
 800693a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	fa10 f404 	lsls.w	r4, r0, r4
 8006946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800694a:	191b      	adds	r3, r3, r4
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	e714      	b.n	800677a <__gnu_unwind_execute+0x96>
 8006950:	4628      	mov	r0, r5
 8006952:	f7ff fe9d 	bl	8006690 <next_unwind_byte>
 8006956:	2101      	movs	r1, #1
 8006958:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800695c:	f000 030f 	and.w	r3, r0, #15
 8006960:	3301      	adds	r3, #1
 8006962:	4630      	mov	r0, r6
 8006964:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006968:	460b      	mov	r3, r1
 800696a:	f7ff fbc7 	bl	80060fc <_Unwind_VRS_Pop>
 800696e:	2800      	cmp	r0, #0
 8006970:	f47f aee9 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006974:	e6bf      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006976:	4628      	mov	r0, r5
 8006978:	f7ff fe8a 	bl	8006690 <next_unwind_byte>
 800697c:	2103      	movs	r1, #3
 800697e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006982:	f000 030f 	and.w	r3, r0, #15
 8006986:	3301      	adds	r3, #1
 8006988:	4630      	mov	r0, r6
 800698a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800698e:	460b      	mov	r3, r1
 8006990:	f7ff fbb4 	bl	80060fc <_Unwind_VRS_Pop>
 8006994:	2800      	cmp	r0, #0
 8006996:	f47f aed6 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 800699a:	e6ac      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 800699c:	4628      	mov	r0, r5
 800699e:	f7ff fe77 	bl	8006690 <next_unwind_byte>
 80069a2:	4602      	mov	r2, r0
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f43f aece 	beq.w	8006746 <__gnu_unwind_execute+0x62>
 80069aa:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80069ae:	f47f aeca 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80069b2:	4630      	mov	r0, r6
 80069b4:	2104      	movs	r1, #4
 80069b6:	f7ff fba1 	bl	80060fc <_Unwind_VRS_Pop>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f47f aec3 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80069c0:	e699      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80069c2:	f000 020f 	and.w	r2, r0, #15
 80069c6:	2103      	movs	r1, #3
 80069c8:	3201      	adds	r2, #1
 80069ca:	4630      	mov	r0, r6
 80069cc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80069d0:	460b      	mov	r3, r1
 80069d2:	f7ff fb93 	bl	80060fc <_Unwind_VRS_Pop>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f47f aeb5 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80069dc:	e68b      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff fe56 	bl	8006690 <next_unwind_byte>
 80069e4:	2101      	movs	r1, #1
 80069e6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80069ea:	f000 030f 	and.w	r3, r0, #15
 80069ee:	3210      	adds	r2, #16
 80069f0:	3301      	adds	r3, #1
 80069f2:	4630      	mov	r0, r6
 80069f4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80069f8:	2305      	movs	r3, #5
 80069fa:	f7ff fb7f 	bl	80060fc <_Unwind_VRS_Pop>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f47f aea1 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006a04:	e677      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006a06:	bf00      	nop

08006a08 <__gnu_unwind_frame>:
 8006a08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	b530      	push	{r4, r5, lr}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	f103 0408 	add.w	r4, r3, #8
 8006a16:	2503      	movs	r5, #3
 8006a18:	f88d 500c 	strb.w	r5, [sp, #12]
 8006a1c:	79db      	ldrb	r3, [r3, #7]
 8006a1e:	a901      	add	r1, sp, #4
 8006a20:	0212      	lsls	r2, r2, #8
 8006a22:	9402      	str	r4, [sp, #8]
 8006a24:	9201      	str	r2, [sp, #4]
 8006a26:	f88d 300d 	strb.w	r3, [sp, #13]
 8006a2a:	f7ff fe5b 	bl	80066e4 <__gnu_unwind_execute>
 8006a2e:	b005      	add	sp, #20
 8006a30:	bd30      	pop	{r4, r5, pc}
 8006a32:	bf00      	nop

08006a34 <_Unwind_GetRegionStart>:
 8006a34:	b508      	push	{r3, lr}
 8006a36:	f7ff fe53 	bl	80066e0 <unwind_UCB_from_context>
 8006a3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006a3c:	bd08      	pop	{r3, pc}
 8006a3e:	bf00      	nop

08006a40 <_Unwind_GetLanguageSpecificData>:
 8006a40:	b508      	push	{r3, lr}
 8006a42:	f7ff fe4d 	bl	80066e0 <unwind_UCB_from_context>
 8006a46:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006a48:	79d8      	ldrb	r0, [r3, #7]
 8006a4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006a4e:	f103 0008 	add.w	r0, r3, #8
 8006a52:	bd08      	pop	{r3, pc}

08006a54 <_Unwind_GetDataRelBase>:
 8006a54:	b508      	push	{r3, lr}
 8006a56:	f000 f805 	bl	8006a64 <abort>
 8006a5a:	bf00      	nop

08006a5c <_Unwind_GetTextRelBase>:
 8006a5c:	b508      	push	{r3, lr}
 8006a5e:	f000 f801 	bl	8006a64 <abort>
 8006a62:	bf00      	nop

08006a64 <abort>:
 8006a64:	b508      	push	{r3, lr}
 8006a66:	2006      	movs	r0, #6
 8006a68:	f001 f9e0 	bl	8007e2c <raise>
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	f00f fa37 	bl	8015ee0 <_exit>
 8006a72:	bf00      	nop

08006a74 <__assert_func>:
 8006a74:	4604      	mov	r4, r0
 8006a76:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <__assert_func+0x2c>)
 8006a78:	b500      	push	{lr}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	4d09      	ldr	r5, [pc, #36]	; (8006aa4 <__assert_func+0x30>)
 8006a80:	68c0      	ldr	r0, [r0, #12]
 8006a82:	b14a      	cbz	r2, 8006a98 <__assert_func+0x24>
 8006a84:	e88d 0022 	stmia.w	sp, {r1, r5}
 8006a88:	9202      	str	r2, [sp, #8]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4906      	ldr	r1, [pc, #24]	; (8006aa8 <__assert_func+0x34>)
 8006a8e:	4623      	mov	r3, r4
 8006a90:	f000 f82e 	bl	8006af0 <fiprintf>
 8006a94:	f7ff ffe6 	bl	8006a64 <abort>
 8006a98:	4d04      	ldr	r5, [pc, #16]	; (8006aac <__assert_func+0x38>)
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	e7f2      	b.n	8006a84 <__assert_func+0x10>
 8006a9e:	bf00      	nop
 8006aa0:	20000008 	.word	0x20000008
 8006aa4:	0801c5f0 	.word	0x0801c5f0
 8006aa8:	0801c600 	.word	0x0801c600
 8006aac:	0801c5fc 	.word	0x0801c5fc

08006ab0 <__assert>:
 8006ab0:	b508      	push	{r3, lr}
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f7ff ffdd 	bl	8006a74 <__assert_func>
 8006aba:	bf00      	nop

08006abc <__cxa_atexit>:
 8006abc:	b410      	push	{r4}
 8006abe:	460c      	mov	r4, r1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	2002      	movs	r0, #2
 8006ac8:	bc10      	pop	{r4}
 8006aca:	f003 bbe9 	b.w	800a2a0 <__register_exitproc>
 8006ace:	bf00      	nop

08006ad0 <_fiprintf_r>:
 8006ad0:	b40c      	push	{r2, r3}
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	ac04      	add	r4, sp, #16
 8006ad8:	f854 2b04 	ldr.w	r2, [r4], #4
 8006adc:	4623      	mov	r3, r4
 8006ade:	9401      	str	r4, [sp, #4]
 8006ae0:	f002 fdb4 	bl	800964c <_vfiprintf_r>
 8006ae4:	b002      	add	sp, #8
 8006ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aea:	b002      	add	sp, #8
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <fiprintf>:
 8006af0:	b40e      	push	{r1, r2, r3}
 8006af2:	f240 0308 	movw	r3, #8
 8006af6:	b510      	push	{r4, lr}
 8006af8:	b083      	sub	sp, #12
 8006afa:	ac05      	add	r4, sp, #20
 8006afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b00:	4601      	mov	r1, r0
 8006b02:	f854 2b04 	ldr.w	r2, [r4], #4
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	4623      	mov	r3, r4
 8006b0a:	9401      	str	r4, [sp, #4]
 8006b0c:	f002 fd9e 	bl	800964c <_vfiprintf_r>
 8006b10:	b003      	add	sp, #12
 8006b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b16:	b003      	add	sp, #12
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop

08006b1c <_fputc_r>:
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	4604      	mov	r4, r0
 8006b20:	b082      	sub	sp, #8
 8006b22:	b138      	cbz	r0, 8006b34 <_fputc_r+0x18>
 8006b24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b26:	b92b      	cbnz	r3, 8006b34 <_fputc_r+0x18>
 8006b28:	9101      	str	r1, [sp, #4]
 8006b2a:	9200      	str	r2, [sp, #0]
 8006b2c:	f004 fd52 	bl	800b5d4 <__sinit>
 8006b30:	9a00      	ldr	r2, [sp, #0]
 8006b32:	9901      	ldr	r1, [sp, #4]
 8006b34:	4620      	mov	r0, r4
 8006b36:	b002      	add	sp, #8
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f000 be72 	b.w	8007824 <_putc_r>

08006b40 <fputc>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4606      	mov	r6, r0
 8006b44:	4c07      	ldr	r4, [pc, #28]	; (8006b64 <fputc+0x24>)
 8006b46:	460d      	mov	r5, r1
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	b120      	cbz	r0, 8006b56 <fputc+0x16>
 8006b4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b4e:	b913      	cbnz	r3, 8006b56 <fputc+0x16>
 8006b50:	f004 fd40 	bl	800b5d4 <__sinit>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	4631      	mov	r1, r6
 8006b58:	462a      	mov	r2, r5
 8006b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b5e:	f000 be61 	b.w	8007824 <_putc_r>
 8006b62:	bf00      	nop
 8006b64:	20000008 	.word	0x20000008

08006b68 <_fputs_r>:
 8006b68:	b530      	push	{r4, r5, lr}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4615      	mov	r5, r2
 8006b72:	9104      	str	r1, [sp, #16]
 8006b74:	f001 fb0e 	bl	8008194 <strlen>
 8006b78:	ab04      	add	r3, sp, #16
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9302      	str	r3, [sp, #8]
 8006b80:	9003      	str	r0, [sp, #12]
 8006b82:	9005      	str	r0, [sp, #20]
 8006b84:	b10c      	cbz	r4, 8006b8a <_fputs_r+0x22>
 8006b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b88:	b18b      	cbz	r3, 8006bae <_fputs_r+0x46>
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	4629      	mov	r1, r5
 8006b90:	049a      	lsls	r2, r3, #18
 8006b92:	bf5f      	itttt	pl
 8006b94:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8006b98:	81ab      	strhpl	r3, [r5, #12]
 8006b9a:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
 8006b9c:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 8006ba0:	aa01      	add	r2, sp, #4
 8006ba2:	bf58      	it	pl
 8006ba4:	666b      	strpl	r3, [r5, #100]	; 0x64
 8006ba6:	f000 f80f 	bl	8006bc8 <__sfvwrite_r>
 8006baa:	b007      	add	sp, #28
 8006bac:	bd30      	pop	{r4, r5, pc}
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f004 fd10 	bl	800b5d4 <__sinit>
 8006bb4:	e7e9      	b.n	8006b8a <_fputs_r+0x22>
 8006bb6:	bf00      	nop

08006bb8 <fputs>:
 8006bb8:	f240 0308 	movw	r3, #8
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	e7cf      	b.n	8006b68 <_fputs_r>

08006bc8 <__sfvwrite_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	4690      	mov	r8, r2
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	9001      	str	r0, [sp, #4]
 8006bd4:	6890      	ldr	r0, [r2, #8]
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d04d      	beq.n	8006c76 <__sfvwrite_r+0xae>
 8006bda:	898b      	ldrh	r3, [r1, #12]
 8006bdc:	0719      	lsls	r1, r3, #28
 8006bde:	d56b      	bpl.n	8006cb8 <__sfvwrite_r+0xf0>
 8006be0:	6922      	ldr	r2, [r4, #16]
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	d068      	beq.n	8006cb8 <__sfvwrite_r+0xf0>
 8006be6:	f013 0b02 	ands.w	fp, r3, #2
 8006bea:	f8d8 5000 	ldr.w	r5, [r8]
 8006bee:	bf1c      	itt	ne
 8006bf0:	f04f 0900 	movne.w	r9, #0
 8006bf4:	464f      	movne	r7, r9
 8006bf6:	d145      	bne.n	8006c84 <__sfvwrite_r+0xbc>
 8006bf8:	f013 0901 	ands.w	r9, r3, #1
 8006bfc:	bf1e      	ittt	ne
 8006bfe:	46dc      	movne	ip, fp
 8006c00:	46da      	movne	sl, fp
 8006c02:	465f      	movne	r7, fp
 8006c04:	f000 80b5 	beq.w	8006d72 <__sfvwrite_r+0x1aa>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	d065      	beq.n	8006cd8 <__sfvwrite_r+0x110>
 8006c0c:	f1bc 0f00 	cmp.w	ip, #0
 8006c10:	f000 8083 	beq.w	8006d1a <__sfvwrite_r+0x152>
 8006c14:	6922      	ldr	r2, [r4, #16]
 8006c16:	45bb      	cmp	fp, r7
 8006c18:	bf34      	ite	cc
 8006c1a:	46d9      	movcc	r9, fp
 8006c1c:	46b9      	movcs	r9, r7
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	6963      	ldr	r3, [r4, #20]
 8006c22:	68a6      	ldr	r6, [r4, #8]
 8006c24:	4290      	cmp	r0, r2
 8006c26:	bf94      	ite	ls
 8006c28:	2200      	movls	r2, #0
 8006c2a:	2201      	movhi	r2, #1
 8006c2c:	199e      	adds	r6, r3, r6
 8006c2e:	45b1      	cmp	r9, r6
 8006c30:	bfd4      	ite	le
 8006c32:	2200      	movle	r2, #0
 8006c34:	f002 0201 	andgt.w	r2, r2, #1
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	f040 8081 	bne.w	8006d40 <__sfvwrite_r+0x178>
 8006c3e:	4599      	cmp	r9, r3
 8006c40:	db51      	blt.n	8006ce6 <__sfvwrite_r+0x11e>
 8006c42:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c44:	4652      	mov	r2, sl
 8006c46:	69e1      	ldr	r1, [r4, #28]
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	f8cd c000 	str.w	ip, [sp]
 8006c4e:	47b0      	blx	r6
 8006c50:	f8dd c000 	ldr.w	ip, [sp]
 8006c54:	2800      	cmp	r0, #0
 8006c56:	4606      	mov	r6, r0
 8006c58:	f340 8084 	ble.w	8006d64 <__sfvwrite_r+0x19c>
 8006c5c:	ebbb 0b06 	subs.w	fp, fp, r6
 8006c60:	d054      	beq.n	8006d0c <__sfvwrite_r+0x144>
 8006c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c66:	44b2      	add	sl, r6
 8006c68:	1bbf      	subs	r7, r7, r6
 8006c6a:	1b9e      	subs	r6, r3, r6
 8006c6c:	f8c8 6008 	str.w	r6, [r8, #8]
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	d1c9      	bne.n	8006c08 <__sfvwrite_r+0x40>
 8006c74:	4630      	mov	r0, r6
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	f8d5 9000 	ldr.w	r9, [r5]
 8006c80:	686f      	ldr	r7, [r5, #4]
 8006c82:	3508      	adds	r5, #8
 8006c84:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006c88:	bf34      	ite	cc
 8006c8a:	463b      	movcc	r3, r7
 8006c8c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8006c90:	464a      	mov	r2, r9
 8006c92:	9801      	ldr	r0, [sp, #4]
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	d0f1      	beq.n	8006c7c <__sfvwrite_r+0xb4>
 8006c98:	69e1      	ldr	r1, [r4, #28]
 8006c9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c9c:	47b0      	blx	r6
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	4481      	add	r9, r0
 8006ca2:	ebc0 0707 	rsb	r7, r0, r7
 8006ca6:	dd5d      	ble.n	8006d64 <__sfvwrite_r+0x19c>
 8006ca8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8006cac:	1a30      	subs	r0, r6, r0
 8006cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d1e6      	bne.n	8006c84 <__sfvwrite_r+0xbc>
 8006cb6:	e7de      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006cb8:	9801      	ldr	r0, [sp, #4]
 8006cba:	4621      	mov	r1, r4
 8006cbc:	f003 fa94 	bl	800a1e8 <__swsetup_r>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d08f      	beq.n	8006be6 <__sfvwrite_r+0x1e>
 8006cc6:	9901      	ldr	r1, [sp, #4]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	2309      	movs	r3, #9
 8006cd4:	600b      	str	r3, [r1, #0]
 8006cd6:	e7ce      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006cd8:	f8d5 a000 	ldr.w	sl, [r5]
 8006cdc:	f04f 0c00 	mov.w	ip, #0
 8006ce0:	686f      	ldr	r7, [r5, #4]
 8006ce2:	3508      	adds	r5, #8
 8006ce4:	e790      	b.n	8006c08 <__sfvwrite_r+0x40>
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	4651      	mov	r1, sl
 8006cea:	464e      	mov	r6, r9
 8006cec:	f8cd c000 	str.w	ip, [sp]
 8006cf0:	f000 fcea 	bl	80076c8 <memmove>
 8006cf4:	68a2      	ldr	r2, [r4, #8]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	ebbb 0b06 	subs.w	fp, fp, r6
 8006cfc:	ebc9 0202 	rsb	r2, r9, r2
 8006d00:	f8dd c000 	ldr.w	ip, [sp]
 8006d04:	444b      	add	r3, r9
 8006d06:	60a2      	str	r2, [r4, #8]
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	d1aa      	bne.n	8006c62 <__sfvwrite_r+0x9a>
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	f004 fb3e 	bl	800b390 <_fflush_r>
 8006d14:	bb30      	cbnz	r0, 8006d64 <__sfvwrite_r+0x19c>
 8006d16:	46dc      	mov	ip, fp
 8006d18:	e7a3      	b.n	8006c62 <__sfvwrite_r+0x9a>
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	210a      	movs	r1, #10
 8006d1e:	463a      	mov	r2, r7
 8006d20:	f107 0b01 	add.w	fp, r7, #1
 8006d24:	f000 fc1a 	bl	800755c <memchr>
 8006d28:	f04f 0c01 	mov.w	ip, #1
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f af71 	beq.w	8006c14 <__sfvwrite_r+0x4c>
 8006d32:	f100 0b01 	add.w	fp, r0, #1
 8006d36:	f04f 0c01 	mov.w	ip, #1
 8006d3a:	ebca 0b0b 	rsb	fp, sl, fp
 8006d3e:	e769      	b.n	8006c14 <__sfvwrite_r+0x4c>
 8006d40:	4651      	mov	r1, sl
 8006d42:	4632      	mov	r2, r6
 8006d44:	f8cd c000 	str.w	ip, [sp]
 8006d48:	f000 fcbe 	bl	80076c8 <memmove>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	9801      	ldr	r0, [sp, #4]
 8006d52:	199b      	adds	r3, r3, r6
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	f004 fb1b 	bl	800b390 <_fflush_r>
 8006d5a:	f8dd c000 	ldr.w	ip, [sp]
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f43f af7c 	beq.w	8006c5c <__sfvwrite_r+0x94>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	e781      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006d72:	464e      	mov	r6, r9
 8006d74:	b326      	cbz	r6, 8006dc0 <__sfvwrite_r+0x1f8>
 8006d76:	059a      	lsls	r2, r3, #22
 8006d78:	68a7      	ldr	r7, [r4, #8]
 8006d7a:	d526      	bpl.n	8006dca <__sfvwrite_r+0x202>
 8006d7c:	42be      	cmp	r6, r7
 8006d7e:	46bb      	mov	fp, r7
 8006d80:	d246      	bcs.n	8006e10 <__sfvwrite_r+0x248>
 8006d82:	6820      	ldr	r0, [r4, #0]
 8006d84:	4633      	mov	r3, r6
 8006d86:	46b3      	mov	fp, r6
 8006d88:	46b2      	mov	sl, r6
 8006d8a:	4637      	mov	r7, r6
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	465a      	mov	r2, fp
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	f000 fc99 	bl	80076c8 <memmove>
 8006d96:	9b00      	ldr	r3, [sp, #0]
 8006d98:	68a1      	ldr	r1, [r4, #8]
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	1acb      	subs	r3, r1, r3
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	eb02 030b 	add.w	r3, r2, fp
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006daa:	1bc7      	subs	r7, r0, r7
 8006dac:	f8c8 7008 	str.w	r7, [r8, #8]
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	d02b      	beq.n	8006e0c <__sfvwrite_r+0x244>
 8006db4:	ebca 0606 	rsb	r6, sl, r6
 8006db8:	44d1      	add	r9, sl
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	2e00      	cmp	r6, #0
 8006dbe:	d1da      	bne.n	8006d76 <__sfvwrite_r+0x1ae>
 8006dc0:	f8d5 9000 	ldr.w	r9, [r5]
 8006dc4:	686e      	ldr	r6, [r5, #4]
 8006dc6:	3508      	adds	r5, #8
 8006dc8:	e7d4      	b.n	8006d74 <__sfvwrite_r+0x1ac>
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	46ba      	mov	sl, r7
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bf94      	ite	ls
 8006dd4:	2300      	movls	r3, #0
 8006dd6:	2301      	movhi	r3, #1
 8006dd8:	42b7      	cmp	r7, r6
 8006dda:	bf2c      	ite	cs
 8006ddc:	2300      	movcs	r3, #0
 8006dde:	f003 0301 	andcc.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d129      	bne.n	8006e3a <__sfvwrite_r+0x272>
 8006de6:	6963      	ldr	r3, [r4, #20]
 8006de8:	429e      	cmp	r6, r3
 8006dea:	d319      	bcc.n	8006e20 <__sfvwrite_r+0x258>
 8006dec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006dee:	464a      	mov	r2, r9
 8006df0:	69e1      	ldr	r1, [r4, #28]
 8006df2:	9801      	ldr	r0, [sp, #4]
 8006df4:	47b8      	blx	r7
 8006df6:	2800      	cmp	r0, #0
 8006df8:	4607      	mov	r7, r0
 8006dfa:	ddb3      	ble.n	8006d64 <__sfvwrite_r+0x19c>
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006e02:	1bc7      	subs	r7, r0, r7
 8006e04:	f8c8 7008 	str.w	r7, [r8, #8]
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	d1d3      	bne.n	8006db4 <__sfvwrite_r+0x1ec>
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	e732      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006e10:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006e14:	d11f      	bne.n	8006e56 <__sfvwrite_r+0x28e>
 8006e16:	463b      	mov	r3, r7
 8006e18:	6820      	ldr	r0, [r4, #0]
 8006e1a:	46b2      	mov	sl, r6
 8006e1c:	4637      	mov	r7, r6
 8006e1e:	e7b5      	b.n	8006d8c <__sfvwrite_r+0x1c4>
 8006e20:	4632      	mov	r2, r6
 8006e22:	4649      	mov	r1, r9
 8006e24:	f000 fc50 	bl	80076c8 <memmove>
 8006e28:	68a2      	ldr	r2, [r4, #8]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	1b92      	subs	r2, r2, r6
 8006e30:	46b2      	mov	sl, r6
 8006e32:	199b      	adds	r3, r3, r6
 8006e34:	60a2      	str	r2, [r4, #8]
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	e7b5      	b.n	8006da6 <__sfvwrite_r+0x1de>
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	463a      	mov	r2, r7
 8006e3e:	f000 fc43 	bl	80076c8 <memmove>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	9801      	ldr	r0, [sp, #4]
 8006e46:	4621      	mov	r1, r4
 8006e48:	19db      	adds	r3, r3, r7
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	f004 faa0 	bl	800b390 <_fflush_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d0a8      	beq.n	8006da6 <__sfvwrite_r+0x1de>
 8006e54:	e786      	b.n	8006d64 <__sfvwrite_r+0x19c>
 8006e56:	6962      	ldr	r2, [r4, #20]
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8006e60:	1a40      	subs	r0, r0, r1
 8006e62:	9003      	str	r0, [sp, #12]
 8006e64:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8006e68:	3001      	adds	r0, #1
 8006e6a:	1980      	adds	r0, r0, r6
 8006e6c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8006e70:	4584      	cmp	ip, r0
 8006e72:	4662      	mov	r2, ip
 8006e74:	bf38      	it	cc
 8006e76:	4684      	movcc	ip, r0
 8006e78:	9801      	ldr	r0, [sp, #4]
 8006e7a:	bf38      	it	cc
 8006e7c:	4662      	movcc	r2, ip
 8006e7e:	055b      	lsls	r3, r3, #21
 8006e80:	d527      	bpl.n	8006ed2 <__sfvwrite_r+0x30a>
 8006e82:	4611      	mov	r1, r2
 8006e84:	f8cd c000 	str.w	ip, [sp]
 8006e88:	f000 f8b6 	bl	8006ff8 <_malloc_r>
 8006e8c:	f8dd c000 	ldr.w	ip, [sp]
 8006e90:	9002      	str	r0, [sp, #8]
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d02e      	beq.n	8006ef4 <__sfvwrite_r+0x32c>
 8006e96:	6921      	ldr	r1, [r4, #16]
 8006e98:	9802      	ldr	r0, [sp, #8]
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	f8cd c000 	str.w	ip, [sp]
 8006ea0:	f000 fbd0 	bl	8007644 <memcpy>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	f8dd c000 	ldr.w	ip, [sp]
 8006eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	9902      	ldr	r1, [sp, #8]
 8006eb6:	4633      	mov	r3, r6
 8006eb8:	9a03      	ldr	r2, [sp, #12]
 8006eba:	46b3      	mov	fp, r6
 8006ebc:	46b2      	mov	sl, r6
 8006ebe:	4637      	mov	r7, r6
 8006ec0:	1888      	adds	r0, r1, r2
 8006ec2:	6121      	str	r1, [r4, #16]
 8006ec4:	ebc2 020c 	rsb	r2, r2, ip
 8006ec8:	6020      	str	r0, [r4, #0]
 8006eca:	f8c4 c014 	str.w	ip, [r4, #20]
 8006ece:	60a2      	str	r2, [r4, #8]
 8006ed0:	e75c      	b.n	8006d8c <__sfvwrite_r+0x1c4>
 8006ed2:	f8cd c000 	str.w	ip, [sp]
 8006ed6:	f000 fd13 	bl	8007900 <_realloc_r>
 8006eda:	f8dd c000 	ldr.w	ip, [sp]
 8006ede:	9002      	str	r0, [sp, #8]
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1e7      	bne.n	8006eb4 <__sfvwrite_r+0x2ec>
 8006ee4:	6921      	ldr	r1, [r4, #16]
 8006ee6:	9801      	ldr	r0, [sp, #4]
 8006ee8:	f004 fcd8 	bl	800b89c <_free_r>
 8006eec:	9901      	ldr	r1, [sp, #4]
 8006eee:	230c      	movs	r3, #12
 8006ef0:	600b      	str	r3, [r1, #0]
 8006ef2:	e737      	b.n	8006d64 <__sfvwrite_r+0x19c>
 8006ef4:	9a01      	ldr	r2, [sp, #4]
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e733      	b.n	8006d64 <__sfvwrite_r+0x19c>

08006efc <_fwrite_r>:
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	fb02 f603 	mul.w	r6, r2, r3
 8006f06:	461d      	mov	r5, r3
 8006f08:	4614      	mov	r4, r2
 8006f0a:	ab04      	add	r3, sp, #16
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006f14:	2301      	movs	r3, #1
 8006f16:	9104      	str	r1, [sp, #16]
 8006f18:	9302      	str	r3, [sp, #8]
 8006f1a:	9605      	str	r6, [sp, #20]
 8006f1c:	9603      	str	r6, [sp, #12]
 8006f1e:	b108      	cbz	r0, 8006f24 <_fwrite_r+0x28>
 8006f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f22:	b1f3      	cbz	r3, 8006f62 <_fwrite_r+0x66>
 8006f24:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006f28:	4638      	mov	r0, r7
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	049a      	lsls	r2, r3, #18
 8006f2e:	bf5f      	itttt	pl
 8006f30:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8006f34:	f8a8 300c 	strhpl.w	r3, [r8, #12]
 8006f38:	f8d8 2064 	ldrpl.w	r2, [r8, #100]	; 0x64
 8006f3c:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 8006f40:	aa01      	add	r2, sp, #4
 8006f42:	bf58      	it	pl
 8006f44:	f8c8 3064 	strpl.w	r3, [r8, #100]	; 0x64
 8006f48:	f7ff fe3e 	bl	8006bc8 <__sfvwrite_r>
 8006f4c:	b128      	cbz	r0, 8006f5a <_fwrite_r+0x5e>
 8006f4e:	9803      	ldr	r0, [sp, #12]
 8006f50:	4621      	mov	r1, r4
 8006f52:	1a30      	subs	r0, r6, r0
 8006f54:	f006 f958 	bl	800d208 <__aeabi_uidiv>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	b006      	add	sp, #24
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f62:	f004 fb37 	bl	800b5d4 <__sinit>
 8006f66:	e7dd      	b.n	8006f24 <_fwrite_r+0x28>

08006f68 <fwrite>:
 8006f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6a:	f240 0408 	movw	r4, #8
 8006f6e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006f72:	4686      	mov	lr, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	4616      	mov	r6, r2
 8006f78:	b083      	sub	sp, #12
 8006f7a:	461d      	mov	r5, r3
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	4671      	mov	r1, lr
 8006f80:	463a      	mov	r2, r7
 8006f82:	4633      	mov	r3, r6
 8006f84:	9500      	str	r5, [sp, #0]
 8006f86:	f7ff ffb9 	bl	8006efc <_fwrite_r>
 8006f8a:	b003      	add	sp, #12
 8006f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8e:	bf00      	nop

08006f90 <__libc_init_array>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4d0d      	ldr	r5, [pc, #52]	; (8006fc8 <__libc_init_array+0x38>)
 8006f94:	4e0d      	ldr	r6, [pc, #52]	; (8006fcc <__libc_init_array+0x3c>)
 8006f96:	1b76      	subs	r6, r6, r5
 8006f98:	10b6      	asrs	r6, r6, #2
 8006f9a:	d006      	beq.n	8006faa <__libc_init_array+0x1a>
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	4798      	blx	r3
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d1f9      	bne.n	8006f9e <__libc_init_array+0xe>
 8006faa:	4d09      	ldr	r5, [pc, #36]	; (8006fd0 <__libc_init_array+0x40>)
 8006fac:	f015 fb72 	bl	801c694 <_init>
 8006fb0:	4e08      	ldr	r6, [pc, #32]	; (8006fd4 <__libc_init_array+0x44>)
 8006fb2:	1b76      	subs	r6, r6, r5
 8006fb4:	10b6      	asrs	r6, r6, #2
 8006fb6:	d006      	beq.n	8006fc6 <__libc_init_array+0x36>
 8006fb8:	2400      	movs	r4, #0
 8006fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	4798      	blx	r3
 8006fc2:	42a6      	cmp	r6, r4
 8006fc4:	d1f9      	bne.n	8006fba <__libc_init_array+0x2a>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	0801c9ec 	.word	0x0801c9ec
 8006fcc:	0801c9ec 	.word	0x0801c9ec
 8006fd0:	0801c9ec 	.word	0x0801c9ec
 8006fd4:	0801c9f4 	.word	0x0801c9f4

08006fd8 <malloc>:
 8006fd8:	f240 0308 	movw	r3, #8
 8006fdc:	4601      	mov	r1, r0
 8006fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	f000 b808 	b.w	8006ff8 <_malloc_r>

08006fe8 <free>:
 8006fe8:	f240 0308 	movw	r3, #8
 8006fec:	4601      	mov	r1, r0
 8006fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	f004 bc52 	b.w	800b89c <_free_r>

08006ff8 <_malloc_r>:
 8006ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	f101 040b 	add.w	r4, r1, #11
 8007000:	2c16      	cmp	r4, #22
 8007002:	4605      	mov	r5, r0
 8007004:	d92c      	bls.n	8007060 <_malloc_r+0x68>
 8007006:	f024 0407 	bic.w	r4, r4, #7
 800700a:	0fe3      	lsrs	r3, r4, #31
 800700c:	428c      	cmp	r4, r1
 800700e:	bf2c      	ite	cs
 8007010:	4619      	movcs	r1, r3
 8007012:	f043 0101 	orrcc.w	r1, r3, #1
 8007016:	2900      	cmp	r1, #0
 8007018:	d12b      	bne.n	8007072 <_malloc_r+0x7a>
 800701a:	4628      	mov	r0, r5
 800701c:	f00f f844 	bl	80160a8 <__malloc_lock>
 8007020:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007024:	d22b      	bcs.n	800707e <_malloc_r+0x86>
 8007026:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800702a:	4e7e      	ldr	r6, [pc, #504]	; (8007224 <_malloc_r+0x22c>)
 800702c:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 8007030:	68d3      	ldr	r3, [r2, #12]
 8007032:	4293      	cmp	r3, r2
 8007034:	f000 822b 	beq.w	800748e <_malloc_r+0x496>
 8007038:	685c      	ldr	r4, [r3, #4]
 800703a:	f103 0708 	add.w	r7, r3, #8
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	4628      	mov	r0, r5
 8007042:	f024 0403 	bic.w	r4, r4, #3
 8007046:	6899      	ldr	r1, [r3, #8]
 8007048:	191b      	adds	r3, r3, r4
 800704a:	685c      	ldr	r4, [r3, #4]
 800704c:	60ca      	str	r2, [r1, #12]
 800704e:	f044 0401 	orr.w	r4, r4, #1
 8007052:	6091      	str	r1, [r2, #8]
 8007054:	605c      	str	r4, [r3, #4]
 8007056:	f00f f831 	bl	80160bc <__malloc_unlock>
 800705a:	4638      	mov	r0, r7
 800705c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	2300      	movs	r3, #0
 8007062:	2410      	movs	r4, #16
 8007064:	428c      	cmp	r4, r1
 8007066:	bf2c      	ite	cs
 8007068:	4619      	movcs	r1, r3
 800706a:	f043 0101 	orrcc.w	r1, r3, #1
 800706e:	2900      	cmp	r1, #0
 8007070:	d0d3      	beq.n	800701a <_malloc_r+0x22>
 8007072:	2700      	movs	r7, #0
 8007074:	230c      	movs	r3, #12
 8007076:	4638      	mov	r0, r7
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 8007082:	bf04      	itt	eq
 8007084:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8007088:	ea4f 01cc 	moveq.w	r1, ip, lsl #3
 800708c:	f040 8083 	bne.w	8007196 <_malloc_r+0x19e>
 8007090:	4e64      	ldr	r6, [pc, #400]	; (8007224 <_malloc_r+0x22c>)
 8007092:	1871      	adds	r1, r6, r1
 8007094:	68cf      	ldr	r7, [r1, #12]
 8007096:	42b9      	cmp	r1, r7
 8007098:	d106      	bne.n	80070a8 <_malloc_r+0xb0>
 800709a:	e00d      	b.n	80070b8 <_malloc_r+0xc0>
 800709c:	2a00      	cmp	r2, #0
 800709e:	f280 816c 	bge.w	800737a <_malloc_r+0x382>
 80070a2:	68ff      	ldr	r7, [r7, #12]
 80070a4:	42b9      	cmp	r1, r7
 80070a6:	d007      	beq.n	80070b8 <_malloc_r+0xc0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	1b1a      	subs	r2, r3, r4
 80070b0:	2a0f      	cmp	r2, #15
 80070b2:	ddf3      	ble.n	800709c <_malloc_r+0xa4>
 80070b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070b8:	f10c 0c01 	add.w	ip, ip, #1
 80070bc:	4859      	ldr	r0, [pc, #356]	; (8007224 <_malloc_r+0x22c>)
 80070be:	6937      	ldr	r7, [r6, #16]
 80070c0:	f100 0308 	add.w	r3, r0, #8
 80070c4:	429f      	cmp	r7, r3
 80070c6:	bf08      	it	eq
 80070c8:	6841      	ldreq	r1, [r0, #4]
 80070ca:	d024      	beq.n	8007116 <_malloc_r+0x11e>
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	f021 0103 	bic.w	r1, r1, #3
 80070d2:	1b0a      	subs	r2, r1, r4
 80070d4:	2a0f      	cmp	r2, #15
 80070d6:	f300 81aa 	bgt.w	800742e <_malloc_r+0x436>
 80070da:	2a00      	cmp	r2, #0
 80070dc:	6143      	str	r3, [r0, #20]
 80070de:	6103      	str	r3, [r0, #16]
 80070e0:	f280 8093 	bge.w	800720a <_malloc_r+0x212>
 80070e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80070e8:	f080 8166 	bcs.w	80073b8 <_malloc_r+0x3c0>
 80070ec:	08c9      	lsrs	r1, r1, #3
 80070ee:	f04f 0e01 	mov.w	lr, #1
 80070f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80070f6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80070fa:	1089      	asrs	r1, r1, #2
 80070fc:	fa0e f101 	lsl.w	r1, lr, r1
 8007100:	60fa      	str	r2, [r7, #12]
 8007102:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8007106:	ea41 0108 	orr.w	r1, r1, r8
 800710a:	6041      	str	r1, [r0, #4]
 800710c:	f8c7 e008 	str.w	lr, [r7, #8]
 8007110:	f8ce 700c 	str.w	r7, [lr, #12]
 8007114:	6097      	str	r7, [r2, #8]
 8007116:	2701      	movs	r7, #1
 8007118:	ea4f 02ac 	mov.w	r2, ip, asr #2
 800711c:	4097      	lsls	r7, r2
 800711e:	428f      	cmp	r7, r1
 8007120:	f200 8082 	bhi.w	8007228 <_malloc_r+0x230>
 8007124:	4239      	tst	r1, r7
 8007126:	d106      	bne.n	8007136 <_malloc_r+0x13e>
 8007128:	f02c 0c03 	bic.w	ip, ip, #3
 800712c:	007f      	lsls	r7, r7, #1
 800712e:	f10c 0c04 	add.w	ip, ip, #4
 8007132:	4239      	tst	r1, r7
 8007134:	d0fa      	beq.n	800712c <_malloc_r+0x134>
 8007136:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 800713a:	46e0      	mov	r8, ip
 800713c:	46ce      	mov	lr, r9
 800713e:	f8de 200c 	ldr.w	r2, [lr, #12]
 8007142:	4596      	cmp	lr, r2
 8007144:	d107      	bne.n	8007156 <_malloc_r+0x15e>
 8007146:	e183      	b.n	8007450 <_malloc_r+0x458>
 8007148:	2900      	cmp	r1, #0
 800714a:	f280 81aa 	bge.w	80074a2 <_malloc_r+0x4aa>
 800714e:	68d2      	ldr	r2, [r2, #12]
 8007150:	4596      	cmp	lr, r2
 8007152:	f000 817d 	beq.w	8007450 <_malloc_r+0x458>
 8007156:	6850      	ldr	r0, [r2, #4]
 8007158:	f020 0003 	bic.w	r0, r0, #3
 800715c:	1b01      	subs	r1, r0, r4
 800715e:	290f      	cmp	r1, #15
 8007160:	ddf2      	ble.n	8007148 <_malloc_r+0x150>
 8007162:	4617      	mov	r7, r2
 8007164:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8007168:	1910      	adds	r0, r2, r4
 800716a:	f041 0801 	orr.w	r8, r1, #1
 800716e:	f857 cf08 	ldr.w	ip, [r7, #8]!
 8007172:	f044 0401 	orr.w	r4, r4, #1
 8007176:	5041      	str	r1, [r0, r1]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	f8cc e00c 	str.w	lr, [ip, #12]
 800717e:	f8ce c008 	str.w	ip, [lr, #8]
 8007182:	6170      	str	r0, [r6, #20]
 8007184:	6130      	str	r0, [r6, #16]
 8007186:	60c3      	str	r3, [r0, #12]
 8007188:	6083      	str	r3, [r0, #8]
 800718a:	f8c0 8004 	str.w	r8, [r0, #4]
 800718e:	4628      	mov	r0, r5
 8007190:	f00e ff94 	bl	80160bc <__malloc_unlock>
 8007194:	e761      	b.n	800705a <_malloc_r+0x62>
 8007196:	f1bc 0f04 	cmp.w	ip, #4
 800719a:	bf9e      	ittt	ls
 800719c:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 80071a0:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 80071a4:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071a8:	f67f af72 	bls.w	8007090 <_malloc_r+0x98>
 80071ac:	f1bc 0f14 	cmp.w	ip, #20
 80071b0:	bf9c      	itt	ls
 80071b2:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 80071b6:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071ba:	f67f af69 	bls.w	8007090 <_malloc_r+0x98>
 80071be:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80071c2:	bf9e      	ittt	ls
 80071c4:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 80071c8:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 80071cc:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071d0:	f67f af5e 	bls.w	8007090 <_malloc_r+0x98>
 80071d4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80071d8:	bf9e      	ittt	ls
 80071da:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 80071de:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 80071e2:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071e6:	f67f af53 	bls.w	8007090 <_malloc_r+0x98>
 80071ea:	f240 5354 	movw	r3, #1364	; 0x554
 80071ee:	459c      	cmp	ip, r3
 80071f0:	bf95      	itete	ls
 80071f2:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 80071f6:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 80071fa:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80071fe:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8007202:	bf98      	it	ls
 8007204:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8007208:	e742      	b.n	8007090 <_malloc_r+0x98>
 800720a:	187b      	adds	r3, r7, r1
 800720c:	4628      	mov	r0, r5
 800720e:	3708      	adds	r7, #8
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	f00e ff50 	bl	80160bc <__malloc_unlock>
 800721c:	4638      	mov	r0, r7
 800721e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	bf00      	nop
 8007224:	20000438 	.word	0x20000438
 8007228:	68b7      	ldr	r7, [r6, #8]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f023 0803 	bic.w	r8, r3, #3
 8007230:	4544      	cmp	r4, r8
 8007232:	ebc4 0208 	rsb	r2, r4, r8
 8007236:	bf94      	ite	ls
 8007238:	2300      	movls	r3, #0
 800723a:	2301      	movhi	r3, #1
 800723c:	2a0f      	cmp	r2, #15
 800723e:	bfd8      	it	le
 8007240:	f043 0301 	orrle.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80a8 	beq.w	800739a <_malloc_r+0x3a2>
 800724a:	4bb4      	ldr	r3, [pc, #720]	; (800751c <_malloc_r+0x524>)
 800724c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8007520 <_malloc_r+0x528>
 8007250:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007254:	f8da 3000 	ldr.w	r3, [sl]
 8007258:	3201      	adds	r2, #1
 800725a:	4423      	add	r3, r4
 800725c:	bf08      	it	eq
 800725e:	f103 0b10 	addeq.w	fp, r3, #16
 8007262:	d006      	beq.n	8007272 <_malloc_r+0x27a>
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	330f      	adds	r3, #15
 800726a:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 800726e:	f023 0b1f 	bic.w	fp, r3, #31
 8007272:	4628      	mov	r0, r5
 8007274:	4659      	mov	r1, fp
 8007276:	f00e fead 	bl	8015fd4 <_sbrk_r>
 800727a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800727e:	4681      	mov	r9, r0
 8007280:	f000 813b 	beq.w	80074fa <_malloc_r+0x502>
 8007284:	eb07 0208 	add.w	r2, r7, r8
 8007288:	4282      	cmp	r2, r0
 800728a:	f200 8119 	bhi.w	80074c0 <_malloc_r+0x4c8>
 800728e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007292:	454a      	cmp	r2, r9
 8007294:	445b      	add	r3, fp
 8007296:	f8ca 3004 	str.w	r3, [sl, #4]
 800729a:	f000 8133 	beq.w	8007504 <_malloc_r+0x50c>
 800729e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80072a2:	4628      	mov	r0, r5
 80072a4:	3101      	adds	r1, #1
 80072a6:	bf17      	itett	ne
 80072a8:	ebc2 0209 	rsbne	r2, r2, r9
 80072ac:	4b9b      	ldreq	r3, [pc, #620]	; (800751c <_malloc_r+0x524>)
 80072ae:	189b      	addne	r3, r3, r2
 80072b0:	f8ca 3004 	strne.w	r3, [sl, #4]
 80072b4:	bf08      	it	eq
 80072b6:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 80072ba:	f019 0307 	ands.w	r3, r9, #7
 80072be:	bf1f      	itttt	ne
 80072c0:	f1c3 0208 	rsbne	r2, r3, #8
 80072c4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80072c8:	4491      	addne	r9, r2
 80072ca:	f103 0208 	addne.w	r2, r3, #8
 80072ce:	eb09 030b 	add.w	r3, r9, fp
 80072d2:	bf08      	it	eq
 80072d4:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80072d8:	051b      	lsls	r3, r3, #20
 80072da:	0d1b      	lsrs	r3, r3, #20
 80072dc:	ebc3 0b02 	rsb	fp, r3, r2
 80072e0:	4659      	mov	r1, fp
 80072e2:	f00e fe77 	bl	8015fd4 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	f000 8124 	beq.w	8007534 <_malloc_r+0x53c>
 80072ec:	ebc9 0200 	rsb	r2, r9, r0
 80072f0:	445a      	add	r2, fp
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80072fa:	42b7      	cmp	r7, r6
 80072fc:	f8c6 9008 	str.w	r9, [r6, #8]
 8007300:	445b      	add	r3, fp
 8007302:	f8c9 2004 	str.w	r2, [r9, #4]
 8007306:	f8ca 3004 	str.w	r3, [sl, #4]
 800730a:	d016      	beq.n	800733a <_malloc_r+0x342>
 800730c:	f1b8 0f0f 	cmp.w	r8, #15
 8007310:	f240 80ed 	bls.w	80074ee <_malloc_r+0x4f6>
 8007314:	f1a8 020c 	sub.w	r2, r8, #12
 8007318:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800731c:	f022 0207 	bic.w	r2, r2, #7
 8007320:	2005      	movs	r0, #5
 8007322:	18b9      	adds	r1, r7, r2
 8007324:	2a0f      	cmp	r2, #15
 8007326:	f00e 0e01 	and.w	lr, lr, #1
 800732a:	ea42 0e0e 	orr.w	lr, r2, lr
 800732e:	f8c7 e004 	str.w	lr, [r7, #4]
 8007332:	6048      	str	r0, [r1, #4]
 8007334:	6088      	str	r0, [r1, #8]
 8007336:	f200 80f5 	bhi.w	8007524 <_malloc_r+0x52c>
 800733a:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800733e:	68b7      	ldr	r7, [r6, #8]
 8007340:	4293      	cmp	r3, r2
 8007342:	bf84      	itt	hi
 8007344:	4a76      	ldrhi	r2, [pc, #472]	; (8007520 <_malloc_r+0x528>)
 8007346:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8007348:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 800734c:	4293      	cmp	r3, r2
 800734e:	bf84      	itt	hi
 8007350:	4a73      	ldrhi	r2, [pc, #460]	; (8007520 <_malloc_r+0x528>)
 8007352:	6313      	strhi	r3, [r2, #48]	; 0x30
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	429c      	cmp	r4, r3
 800735c:	ebc4 0203 	rsb	r2, r4, r3
 8007360:	bf94      	ite	ls
 8007362:	2300      	movls	r3, #0
 8007364:	2301      	movhi	r3, #1
 8007366:	2a0f      	cmp	r2, #15
 8007368:	bfd8      	it	le
 800736a:	f043 0301 	orrle.w	r3, r3, #1
 800736e:	b1a3      	cbz	r3, 800739a <_malloc_r+0x3a2>
 8007370:	4628      	mov	r0, r5
 8007372:	2700      	movs	r7, #0
 8007374:	f00e fea2 	bl	80160bc <__malloc_unlock>
 8007378:	e66f      	b.n	800705a <_malloc_r+0x62>
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4628      	mov	r0, r5
 8007382:	685c      	ldr	r4, [r3, #4]
 8007384:	3708      	adds	r7, #8
 8007386:	60ca      	str	r2, [r1, #12]
 8007388:	f044 0401 	orr.w	r4, r4, #1
 800738c:	6091      	str	r1, [r2, #8]
 800738e:	605c      	str	r4, [r3, #4]
 8007390:	f00e fe94 	bl	80160bc <__malloc_unlock>
 8007394:	4638      	mov	r0, r7
 8007396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	193b      	adds	r3, r7, r4
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	f044 0401 	orr.w	r4, r4, #1
 80073a6:	60b3      	str	r3, [r6, #8]
 80073a8:	607c      	str	r4, [r7, #4]
 80073aa:	3708      	adds	r7, #8
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	f00e fe85 	bl	80160bc <__malloc_unlock>
 80073b2:	4638      	mov	r0, r7
 80073b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	0988      	lsrs	r0, r1, #6
 80073ba:	0a4a      	lsrs	r2, r1, #9
 80073bc:	3038      	adds	r0, #56	; 0x38
 80073be:	2a04      	cmp	r2, #4
 80073c0:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80073c4:	d91c      	bls.n	8007400 <_malloc_r+0x408>
 80073c6:	2a14      	cmp	r2, #20
 80073c8:	bf9c      	itt	ls
 80073ca:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 80073ce:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
 80073d2:	d915      	bls.n	8007400 <_malloc_r+0x408>
 80073d4:	0b08      	lsrs	r0, r1, #12
 80073d6:	306e      	adds	r0, #110	; 0x6e
 80073d8:	2a54      	cmp	r2, #84	; 0x54
 80073da:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80073de:	d90f      	bls.n	8007400 <_malloc_r+0x408>
 80073e0:	0bc8      	lsrs	r0, r1, #15
 80073e2:	3077      	adds	r0, #119	; 0x77
 80073e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80073e8:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80073ec:	d908      	bls.n	8007400 <_malloc_r+0x408>
 80073ee:	f240 5054 	movw	r0, #1364	; 0x554
 80073f2:	4282      	cmp	r2, r0
 80073f4:	f200 80a7 	bhi.w	8007546 <_malloc_r+0x54e>
 80073f8:	0c88      	lsrs	r0, r1, #18
 80073fa:	307c      	adds	r0, #124	; 0x7c
 80073fc:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8007400:	44b6      	add	lr, r6
 8007402:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800751c <_malloc_r+0x524>
 8007406:	f8de 2008 	ldr.w	r2, [lr, #8]
 800740a:	4572      	cmp	r2, lr
 800740c:	d103      	bne.n	8007416 <_malloc_r+0x41e>
 800740e:	e060      	b.n	80074d2 <_malloc_r+0x4da>
 8007410:	6892      	ldr	r2, [r2, #8]
 8007412:	4596      	cmp	lr, r2
 8007414:	d004      	beq.n	8007420 <_malloc_r+0x428>
 8007416:	6850      	ldr	r0, [r2, #4]
 8007418:	f020 0003 	bic.w	r0, r0, #3
 800741c:	4281      	cmp	r1, r0
 800741e:	d3f7      	bcc.n	8007410 <_malloc_r+0x418>
 8007420:	68d0      	ldr	r0, [r2, #12]
 8007422:	6871      	ldr	r1, [r6, #4]
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60ba      	str	r2, [r7, #8]
 8007428:	60d7      	str	r7, [r2, #12]
 800742a:	6087      	str	r7, [r0, #8]
 800742c:	e673      	b.n	8007116 <_malloc_r+0x11e>
 800742e:	1939      	adds	r1, r7, r4
 8007430:	f042 0601 	orr.w	r6, r2, #1
 8007434:	6141      	str	r1, [r0, #20]
 8007436:	f044 0401 	orr.w	r4, r4, #1
 800743a:	6101      	str	r1, [r0, #16]
 800743c:	4628      	mov	r0, r5
 800743e:	607c      	str	r4, [r7, #4]
 8007440:	3708      	adds	r7, #8
 8007442:	60cb      	str	r3, [r1, #12]
 8007444:	608b      	str	r3, [r1, #8]
 8007446:	604e      	str	r6, [r1, #4]
 8007448:	508a      	str	r2, [r1, r2]
 800744a:	f00e fe37 	bl	80160bc <__malloc_unlock>
 800744e:	e604      	b.n	800705a <_malloc_r+0x62>
 8007450:	f108 0801 	add.w	r8, r8, #1
 8007454:	f10e 0e08 	add.w	lr, lr, #8
 8007458:	f018 0f03 	tst.w	r8, #3
 800745c:	f47f ae6f 	bne.w	800713e <_malloc_r+0x146>
 8007460:	464a      	mov	r2, r9
 8007462:	f01c 0f03 	tst.w	ip, #3
 8007466:	f1a2 0108 	sub.w	r1, r2, #8
 800746a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800746e:	d065      	beq.n	800753c <_malloc_r+0x544>
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	428a      	cmp	r2, r1
 8007474:	d0f5      	beq.n	8007462 <_malloc_r+0x46a>
 8007476:	6872      	ldr	r2, [r6, #4]
 8007478:	007f      	lsls	r7, r7, #1
 800747a:	4297      	cmp	r7, r2
 800747c:	f63f aed4 	bhi.w	8007228 <_malloc_r+0x230>
 8007480:	2f00      	cmp	r7, #0
 8007482:	f43f aed1 	beq.w	8007228 <_malloc_r+0x230>
 8007486:	4217      	tst	r7, r2
 8007488:	d061      	beq.n	800754e <_malloc_r+0x556>
 800748a:	46c4      	mov	ip, r8
 800748c:	e653      	b.n	8007136 <_malloc_r+0x13e>
 800748e:	f103 0208 	add.w	r2, r3, #8
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	429a      	cmp	r2, r3
 8007496:	bf08      	it	eq
 8007498:	f10c 0c02 	addeq.w	ip, ip, #2
 800749c:	f43f ae0e 	beq.w	80070bc <_malloc_r+0xc4>
 80074a0:	e5ca      	b.n	8007038 <_malloc_r+0x40>
 80074a2:	4617      	mov	r7, r2
 80074a4:	1810      	adds	r0, r2, r0
 80074a6:	68d3      	ldr	r3, [r2, #12]
 80074a8:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80074ac:	6841      	ldr	r1, [r0, #4]
 80074ae:	60d3      	str	r3, [r2, #12]
 80074b0:	f041 0101 	orr.w	r1, r1, #1
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	6041      	str	r1, [r0, #4]
 80074b8:	4628      	mov	r0, r5
 80074ba:	f00e fdff 	bl	80160bc <__malloc_unlock>
 80074be:	e5cc      	b.n	800705a <_malloc_r+0x62>
 80074c0:	42b7      	cmp	r7, r6
 80074c2:	f43f aee4 	beq.w	800728e <_malloc_r+0x296>
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <_malloc_r+0x524>)
 80074c8:	689f      	ldr	r7, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	e743      	b.n	800735a <_malloc_r+0x362>
 80074d2:	f04f 0901 	mov.w	r9, #1
 80074d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074da:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80074de:	4610      	mov	r0, r2
 80074e0:	fa09 fe0e 	lsl.w	lr, r9, lr
 80074e4:	ea4e 0101 	orr.w	r1, lr, r1
 80074e8:	f8c8 1004 	str.w	r1, [r8, #4]
 80074ec:	e79a      	b.n	8007424 <_malloc_r+0x42c>
 80074ee:	2301      	movs	r3, #1
 80074f0:	464f      	mov	r7, r9
 80074f2:	f8c9 3004 	str.w	r3, [r9, #4]
 80074f6:	2300      	movs	r3, #0
 80074f8:	e72f      	b.n	800735a <_malloc_r+0x362>
 80074fa:	68b7      	ldr	r7, [r6, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	e72a      	b.n	800735a <_malloc_r+0x362>
 8007504:	0511      	lsls	r1, r2, #20
 8007506:	0d09      	lsrs	r1, r1, #20
 8007508:	2900      	cmp	r1, #0
 800750a:	f47f aec8 	bne.w	800729e <_malloc_r+0x2a6>
 800750e:	68b2      	ldr	r2, [r6, #8]
 8007510:	eb0b 0108 	add.w	r1, fp, r8
 8007514:	f041 0101 	orr.w	r1, r1, #1
 8007518:	6051      	str	r1, [r2, #4]
 800751a:	e70e      	b.n	800733a <_malloc_r+0x342>
 800751c:	20000438 	.word	0x20000438
 8007520:	2000092c 	.word	0x2000092c
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	4628      	mov	r0, r5
 800752a:	f004 f9b7 	bl	800b89c <_free_r>
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <_malloc_r+0x560>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	e702      	b.n	800733a <_malloc_r+0x342>
 8007534:	2201      	movs	r2, #1
 8007536:	f04f 0b00 	mov.w	fp, #0
 800753a:	e6dc      	b.n	80072f6 <_malloc_r+0x2fe>
 800753c:	6872      	ldr	r2, [r6, #4]
 800753e:	ea22 0207 	bic.w	r2, r2, r7
 8007542:	6072      	str	r2, [r6, #4]
 8007544:	e798      	b.n	8007478 <_malloc_r+0x480>
 8007546:	f44f 7e7c 	mov.w	lr, #1008	; 0x3f0
 800754a:	207e      	movs	r0, #126	; 0x7e
 800754c:	e758      	b.n	8007400 <_malloc_r+0x408>
 800754e:	007f      	lsls	r7, r7, #1
 8007550:	f108 0804 	add.w	r8, r8, #4
 8007554:	e797      	b.n	8007486 <_malloc_r+0x48e>
 8007556:	bf00      	nop
 8007558:	2000092c 	.word	0x2000092c

0800755c <memchr>:
 800755c:	0783      	lsls	r3, r0, #30
 800755e:	b2c9      	uxtb	r1, r1
 8007560:	b470      	push	{r4, r5, r6}
 8007562:	d012      	beq.n	800758a <memchr+0x2e>
 8007564:	2a00      	cmp	r2, #0
 8007566:	d039      	beq.n	80075dc <memchr+0x80>
 8007568:	7803      	ldrb	r3, [r0, #0]
 800756a:	428b      	cmp	r3, r1
 800756c:	d025      	beq.n	80075ba <memchr+0x5e>
 800756e:	4603      	mov	r3, r0
 8007570:	3a01      	subs	r2, #1
 8007572:	e006      	b.n	8007582 <memchr+0x26>
 8007574:	2a00      	cmp	r2, #0
 8007576:	d031      	beq.n	80075dc <memchr+0x80>
 8007578:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800757c:	3a01      	subs	r2, #1
 800757e:	428c      	cmp	r4, r1
 8007580:	d01b      	beq.n	80075ba <memchr+0x5e>
 8007582:	3001      	adds	r0, #1
 8007584:	f010 0f03 	tst.w	r0, #3
 8007588:	d1f4      	bne.n	8007574 <memchr+0x18>
 800758a:	2a03      	cmp	r2, #3
 800758c:	bf84      	itt	hi
 800758e:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8007592:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8007596:	d812      	bhi.n	80075be <memchr+0x62>
 8007598:	2a00      	cmp	r2, #0
 800759a:	d01f      	beq.n	80075dc <memchr+0x80>
 800759c:	7803      	ldrb	r3, [r0, #0]
 800759e:	428b      	cmp	r3, r1
 80075a0:	d00b      	beq.n	80075ba <memchr+0x5e>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	1882      	adds	r2, r0, r2
 80075a6:	e003      	b.n	80075b0 <memchr+0x54>
 80075a8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80075ac:	428c      	cmp	r4, r1
 80075ae:	d004      	beq.n	80075ba <memchr+0x5e>
 80075b0:	4293      	cmp	r3, r2
 80075b2:	f100 0001 	add.w	r0, r0, #1
 80075b6:	d1f7      	bne.n	80075a8 <memchr+0x4c>
 80075b8:	2000      	movs	r0, #0
 80075ba:	bc70      	pop	{r4, r5, r6}
 80075bc:	4770      	bx	lr
 80075be:	4604      	mov	r4, r0
 80075c0:	3004      	adds	r0, #4
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	4073      	eors	r3, r6
 80075c6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80075ca:	ea25 0303 	bic.w	r3, r5, r3
 80075ce:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80075d2:	d105      	bne.n	80075e0 <memchr+0x84>
 80075d4:	3a04      	subs	r2, #4
 80075d6:	2a03      	cmp	r2, #3
 80075d8:	d8f1      	bhi.n	80075be <memchr+0x62>
 80075da:	e7dd      	b.n	8007598 <memchr+0x3c>
 80075dc:	4610      	mov	r0, r2
 80075de:	e7ec      	b.n	80075ba <memchr+0x5e>
 80075e0:	4620      	mov	r0, r4
 80075e2:	e7d9      	b.n	8007598 <memchr+0x3c>

080075e4 <memcmp>:
 80075e4:	2a03      	cmp	r2, #3
 80075e6:	b470      	push	{r4, r5, r6}
 80075e8:	d926      	bls.n	8007638 <memcmp+0x54>
 80075ea:	ea41 0500 	orr.w	r5, r1, r0
 80075ee:	4603      	mov	r3, r0
 80075f0:	07ad      	lsls	r5, r5, #30
 80075f2:	460c      	mov	r4, r1
 80075f4:	d013      	beq.n	800761e <memcmp+0x3a>
 80075f6:	7805      	ldrb	r5, [r0, #0]
 80075f8:	3a01      	subs	r2, #1
 80075fa:	780c      	ldrb	r4, [r1, #0]
 80075fc:	2300      	movs	r3, #0
 80075fe:	42a5      	cmp	r5, r4
 8007600:	d004      	beq.n	800760c <memcmp+0x28>
 8007602:	e01d      	b.n	8007640 <memcmp+0x5c>
 8007604:	7865      	ldrb	r5, [r4, #1]
 8007606:	5ccc      	ldrb	r4, [r1, r3]
 8007608:	42a5      	cmp	r5, r4
 800760a:	d119      	bne.n	8007640 <memcmp+0x5c>
 800760c:	429a      	cmp	r2, r3
 800760e:	eb00 0403 	add.w	r4, r0, r3
 8007612:	f103 0301 	add.w	r3, r3, #1
 8007616:	d1f5      	bne.n	8007604 <memcmp+0x20>
 8007618:	2000      	movs	r0, #0
 800761a:	bc70      	pop	{r4, r5, r6}
 800761c:	4770      	bx	lr
 800761e:	4621      	mov	r1, r4
 8007620:	4618      	mov	r0, r3
 8007622:	3404      	adds	r4, #4
 8007624:	3304      	adds	r3, #4
 8007626:	6806      	ldr	r6, [r0, #0]
 8007628:	680d      	ldr	r5, [r1, #0]
 800762a:	42ae      	cmp	r6, r5
 800762c:	d104      	bne.n	8007638 <memcmp+0x54>
 800762e:	3a04      	subs	r2, #4
 8007630:	2a03      	cmp	r2, #3
 8007632:	d8f4      	bhi.n	800761e <memcmp+0x3a>
 8007634:	4621      	mov	r1, r4
 8007636:	4618      	mov	r0, r3
 8007638:	2a00      	cmp	r2, #0
 800763a:	d1dc      	bne.n	80075f6 <memcmp+0x12>
 800763c:	4610      	mov	r0, r2
 800763e:	e7ec      	b.n	800761a <memcmp+0x36>
 8007640:	1b28      	subs	r0, r5, r4
 8007642:	e7ea      	b.n	800761a <memcmp+0x36>

08007644 <memcpy>:
 8007644:	2a0f      	cmp	r2, #15
 8007646:	b4f0      	push	{r4, r5, r6, r7}
 8007648:	bf98      	it	ls
 800764a:	4603      	movls	r3, r0
 800764c:	d931      	bls.n	80076b2 <memcpy+0x6e>
 800764e:	ea41 0300 	orr.w	r3, r1, r0
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	d136      	bne.n	80076c4 <memcpy+0x80>
 8007656:	460c      	mov	r4, r1
 8007658:	4603      	mov	r3, r0
 800765a:	4615      	mov	r5, r2
 800765c:	6826      	ldr	r6, [r4, #0]
 800765e:	3d10      	subs	r5, #16
 8007660:	601e      	str	r6, [r3, #0]
 8007662:	6866      	ldr	r6, [r4, #4]
 8007664:	605e      	str	r6, [r3, #4]
 8007666:	68a6      	ldr	r6, [r4, #8]
 8007668:	609e      	str	r6, [r3, #8]
 800766a:	68e6      	ldr	r6, [r4, #12]
 800766c:	3410      	adds	r4, #16
 800766e:	60de      	str	r6, [r3, #12]
 8007670:	3310      	adds	r3, #16
 8007672:	2d0f      	cmp	r5, #15
 8007674:	d8f2      	bhi.n	800765c <memcpy+0x18>
 8007676:	f1a2 0410 	sub.w	r4, r2, #16
 800767a:	f002 020f 	and.w	r2, r2, #15
 800767e:	f024 040f 	bic.w	r4, r4, #15
 8007682:	3410      	adds	r4, #16
 8007684:	2a03      	cmp	r2, #3
 8007686:	eb00 0304 	add.w	r3, r0, r4
 800768a:	4421      	add	r1, r4
 800768c:	d911      	bls.n	80076b2 <memcpy+0x6e>
 800768e:	460e      	mov	r6, r1
 8007690:	461d      	mov	r5, r3
 8007692:	4614      	mov	r4, r2
 8007694:	f856 7b04 	ldr.w	r7, [r6], #4
 8007698:	3c04      	subs	r4, #4
 800769a:	2c03      	cmp	r4, #3
 800769c:	f845 7b04 	str.w	r7, [r5], #4
 80076a0:	d8f8      	bhi.n	8007694 <memcpy+0x50>
 80076a2:	1f14      	subs	r4, r2, #4
 80076a4:	f002 0203 	and.w	r2, r2, #3
 80076a8:	f024 0403 	bic.w	r4, r4, #3
 80076ac:	3404      	adds	r4, #4
 80076ae:	1909      	adds	r1, r1, r4
 80076b0:	191b      	adds	r3, r3, r4
 80076b2:	b12a      	cbz	r2, 80076c0 <memcpy+0x7c>
 80076b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b8:	3a01      	subs	r2, #1
 80076ba:	f803 4b01 	strb.w	r4, [r3], #1
 80076be:	d1f9      	bne.n	80076b4 <memcpy+0x70>
 80076c0:	bcf0      	pop	{r4, r5, r6, r7}
 80076c2:	4770      	bx	lr
 80076c4:	4603      	mov	r3, r0
 80076c6:	e7f5      	b.n	80076b4 <memcpy+0x70>

080076c8 <memmove>:
 80076c8:	4288      	cmp	r0, r1
 80076ca:	b4f0      	push	{r4, r5, r6, r7}
 80076cc:	d912      	bls.n	80076f4 <memmove+0x2c>
 80076ce:	188d      	adds	r5, r1, r2
 80076d0:	42a8      	cmp	r0, r5
 80076d2:	d20f      	bcs.n	80076f4 <memmove+0x2c>
 80076d4:	b162      	cbz	r2, 80076f0 <memmove+0x28>
 80076d6:	4613      	mov	r3, r2
 80076d8:	1882      	adds	r2, r0, r2
 80076da:	4259      	negs	r1, r3
 80076dc:	186d      	adds	r5, r5, r1
 80076de:	1852      	adds	r2, r2, r1
 80076e0:	18ec      	adds	r4, r5, r3
 80076e2:	18d1      	adds	r1, r2, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80076ea:	f801 4c01 	strb.w	r4, [r1, #-1]
 80076ee:	d1f7      	bne.n	80076e0 <memmove+0x18>
 80076f0:	bcf0      	pop	{r4, r5, r6, r7}
 80076f2:	4770      	bx	lr
 80076f4:	2a0f      	cmp	r2, #15
 80076f6:	bf98      	it	ls
 80076f8:	4603      	movls	r3, r0
 80076fa:	d931      	bls.n	8007760 <memmove+0x98>
 80076fc:	ea41 0300 	orr.w	r3, r1, r0
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	d13c      	bne.n	800777e <memmove+0xb6>
 8007704:	460c      	mov	r4, r1
 8007706:	4603      	mov	r3, r0
 8007708:	4615      	mov	r5, r2
 800770a:	6826      	ldr	r6, [r4, #0]
 800770c:	3d10      	subs	r5, #16
 800770e:	601e      	str	r6, [r3, #0]
 8007710:	6866      	ldr	r6, [r4, #4]
 8007712:	605e      	str	r6, [r3, #4]
 8007714:	68a6      	ldr	r6, [r4, #8]
 8007716:	609e      	str	r6, [r3, #8]
 8007718:	68e6      	ldr	r6, [r4, #12]
 800771a:	3410      	adds	r4, #16
 800771c:	60de      	str	r6, [r3, #12]
 800771e:	3310      	adds	r3, #16
 8007720:	2d0f      	cmp	r5, #15
 8007722:	d8f2      	bhi.n	800770a <memmove+0x42>
 8007724:	f1a2 0410 	sub.w	r4, r2, #16
 8007728:	f002 020f 	and.w	r2, r2, #15
 800772c:	f024 040f 	bic.w	r4, r4, #15
 8007730:	3410      	adds	r4, #16
 8007732:	2a03      	cmp	r2, #3
 8007734:	eb00 0304 	add.w	r3, r0, r4
 8007738:	4421      	add	r1, r4
 800773a:	d911      	bls.n	8007760 <memmove+0x98>
 800773c:	460e      	mov	r6, r1
 800773e:	461d      	mov	r5, r3
 8007740:	4614      	mov	r4, r2
 8007742:	f856 7b04 	ldr.w	r7, [r6], #4
 8007746:	3c04      	subs	r4, #4
 8007748:	2c03      	cmp	r4, #3
 800774a:	f845 7b04 	str.w	r7, [r5], #4
 800774e:	d8f8      	bhi.n	8007742 <memmove+0x7a>
 8007750:	1f14      	subs	r4, r2, #4
 8007752:	f002 0203 	and.w	r2, r2, #3
 8007756:	f024 0403 	bic.w	r4, r4, #3
 800775a:	3404      	adds	r4, #4
 800775c:	1909      	adds	r1, r1, r4
 800775e:	191b      	adds	r3, r3, r4
 8007760:	2a00      	cmp	r2, #0
 8007762:	d0c5      	beq.n	80076f0 <memmove+0x28>
 8007764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007768:	3a01      	subs	r2, #1
 800776a:	f803 4b01 	strb.w	r4, [r3], #1
 800776e:	d0bf      	beq.n	80076f0 <memmove+0x28>
 8007770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007774:	3a01      	subs	r2, #1
 8007776:	f803 4b01 	strb.w	r4, [r3], #1
 800777a:	d1f3      	bne.n	8007764 <memmove+0x9c>
 800777c:	e7b8      	b.n	80076f0 <memmove+0x28>
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	4603      	mov	r3, r0
 8007784:	3a01      	subs	r2, #1
 8007786:	f803 4b01 	strb.w	r4, [r3], #1
 800778a:	d1f1      	bne.n	8007770 <memmove+0xa8>
 800778c:	e7b0      	b.n	80076f0 <memmove+0x28>
 800778e:	bf00      	nop

08007790 <memset>:
 8007790:	f010 0f03 	tst.w	r0, #3
 8007794:	4603      	mov	r3, r0
 8007796:	b470      	push	{r4, r5, r6}
 8007798:	d041      	beq.n	800781e <memset+0x8e>
 800779a:	2a00      	cmp	r2, #0
 800779c:	d03d      	beq.n	800781a <memset+0x8a>
 800779e:	b2ce      	uxtb	r6, r1
 80077a0:	e001      	b.n	80077a6 <memset+0x16>
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d039      	beq.n	800781a <memset+0x8a>
 80077a6:	f803 6b01 	strb.w	r6, [r3], #1
 80077aa:	1e54      	subs	r4, r2, #1
 80077ac:	f013 0f03 	tst.w	r3, #3
 80077b0:	4622      	mov	r2, r4
 80077b2:	461d      	mov	r5, r3
 80077b4:	d1f5      	bne.n	80077a2 <memset+0x12>
 80077b6:	2c03      	cmp	r4, #3
 80077b8:	d929      	bls.n	800780e <memset+0x7e>
 80077ba:	b2ca      	uxtb	r2, r1
 80077bc:	2c0f      	cmp	r4, #15
 80077be:	bf84      	itt	hi
 80077c0:	462b      	movhi	r3, r5
 80077c2:	4626      	movhi	r6, r4
 80077c4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80077c8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80077cc:	d911      	bls.n	80077f2 <memset+0x62>
 80077ce:	3e10      	subs	r6, #16
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	3310      	adds	r3, #16
 80077da:	2e0f      	cmp	r6, #15
 80077dc:	d8f7      	bhi.n	80077ce <memset+0x3e>
 80077de:	f1a4 0310 	sub.w	r3, r4, #16
 80077e2:	f004 040f 	and.w	r4, r4, #15
 80077e6:	f023 030f 	bic.w	r3, r3, #15
 80077ea:	3310      	adds	r3, #16
 80077ec:	2c03      	cmp	r4, #3
 80077ee:	441d      	add	r5, r3
 80077f0:	d90d      	bls.n	800780e <memset+0x7e>
 80077f2:	462e      	mov	r6, r5
 80077f4:	4623      	mov	r3, r4
 80077f6:	3b04      	subs	r3, #4
 80077f8:	f846 2b04 	str.w	r2, [r6], #4
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d8fa      	bhi.n	80077f6 <memset+0x66>
 8007800:	1f23      	subs	r3, r4, #4
 8007802:	f004 0403 	and.w	r4, r4, #3
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	3304      	adds	r3, #4
 800780c:	18ed      	adds	r5, r5, r3
 800780e:	b2c9      	uxtb	r1, r1
 8007810:	b11c      	cbz	r4, 800781a <memset+0x8a>
 8007812:	3c01      	subs	r4, #1
 8007814:	f805 1b01 	strb.w	r1, [r5], #1
 8007818:	d1fb      	bne.n	8007812 <memset+0x82>
 800781a:	bc70      	pop	{r4, r5, r6}
 800781c:	4770      	bx	lr
 800781e:	4605      	mov	r5, r0
 8007820:	4614      	mov	r4, r2
 8007822:	e7c8      	b.n	80077b6 <memset+0x26>

08007824 <_putc_r>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	460e      	mov	r6, r1
 800782a:	4615      	mov	r5, r2
 800782c:	b108      	cbz	r0, 8007832 <_putc_r+0xe>
 800782e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007830:	b1c3      	cbz	r3, 8007864 <_putc_r+0x40>
 8007832:	68ab      	ldr	r3, [r5, #8]
 8007834:	3b01      	subs	r3, #1
 8007836:	60ab      	str	r3, [r5, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	db06      	blt.n	800784a <_putc_r+0x26>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	701e      	strb	r6, [r3, #0]
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	69aa      	ldr	r2, [r5, #24]
 800784c:	4293      	cmp	r3, r2
 800784e:	db0c      	blt.n	800786a <_putc_r+0x46>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	701e      	strb	r6, [r3, #0]
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	7819      	ldrb	r1, [r3, #0]
 8007858:	290a      	cmp	r1, #10
 800785a:	d00d      	beq.n	8007878 <_putc_r+0x54>
 800785c:	3301      	adds	r3, #1
 800785e:	4608      	mov	r0, r1
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	f003 feb6 	bl	800b5d4 <__sinit>
 8007868:	e7e3      	b.n	8007832 <_putc_r+0xe>
 800786a:	4620      	mov	r0, r4
 800786c:	4631      	mov	r1, r6
 800786e:	462a      	mov	r2, r5
 8007870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007874:	f002 bc54 	b.w	800a120 <__swbuf_r>
 8007878:	4620      	mov	r0, r4
 800787a:	462a      	mov	r2, r5
 800787c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007880:	f002 bc4e 	b.w	800a120 <__swbuf_r>

08007884 <putc>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4606      	mov	r6, r0
 8007888:	4d17      	ldr	r5, [pc, #92]	; (80078e8 <putc+0x64>)
 800788a:	460c      	mov	r4, r1
 800788c:	6828      	ldr	r0, [r5, #0]
 800788e:	b108      	cbz	r0, 8007894 <putc+0x10>
 8007890:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007892:	b1c3      	cbz	r3, 80078c6 <putc+0x42>
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	3b01      	subs	r3, #1
 8007898:	60a3      	str	r3, [r4, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	db06      	blt.n	80078ac <putc+0x28>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	701e      	strb	r6, [r3, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	69a2      	ldr	r2, [r4, #24]
 80078ae:	4293      	cmp	r3, r2
 80078b0:	db0c      	blt.n	80078cc <putc+0x48>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	701e      	strb	r6, [r3, #0]
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	7819      	ldrb	r1, [r3, #0]
 80078ba:	290a      	cmp	r1, #10
 80078bc:	d00d      	beq.n	80078da <putc+0x56>
 80078be:	3301      	adds	r3, #1
 80078c0:	4608      	mov	r0, r1
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
 80078c6:	f003 fe85 	bl	800b5d4 <__sinit>
 80078ca:	e7e3      	b.n	8007894 <putc+0x10>
 80078cc:	6828      	ldr	r0, [r5, #0]
 80078ce:	4631      	mov	r1, r6
 80078d0:	4622      	mov	r2, r4
 80078d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078d6:	f002 bc23 	b.w	800a120 <__swbuf_r>
 80078da:	6828      	ldr	r0, [r5, #0]
 80078dc:	4622      	mov	r2, r4
 80078de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078e2:	f002 bc1d 	b.w	800a120 <__swbuf_r>
 80078e6:	bf00      	nop
 80078e8:	20000008 	.word	0x20000008

080078ec <realloc>:
 80078ec:	f240 0308 	movw	r3, #8
 80078f0:	460a      	mov	r2, r1
 80078f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 b801 	b.w	8007900 <_realloc_r>
 80078fe:	bf00      	nop

08007900 <_realloc_r>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	b083      	sub	sp, #12
 8007908:	4606      	mov	r6, r0
 800790a:	2900      	cmp	r1, #0
 800790c:	f000 8135 	beq.w	8007b7a <_realloc_r+0x27a>
 8007910:	9201      	str	r2, [sp, #4]
 8007912:	f00e fbc9 	bl	80160a8 <__malloc_lock>
 8007916:	9a01      	ldr	r2, [sp, #4]
 8007918:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800791c:	f102 050b 	add.w	r5, r2, #11
 8007920:	2d16      	cmp	r5, #22
 8007922:	f200 809d 	bhi.w	8007a60 <_realloc_r+0x160>
 8007926:	2110      	movs	r1, #16
 8007928:	2700      	movs	r7, #0
 800792a:	460d      	mov	r5, r1
 800792c:	4295      	cmp	r5, r2
 800792e:	bf38      	it	cc
 8007930:	f047 0701 	orrcc.w	r7, r7, #1
 8007934:	2f00      	cmp	r7, #0
 8007936:	f040 8126 	bne.w	8007b86 <_realloc_r+0x286>
 800793a:	f020 0903 	bic.w	r9, r0, #3
 800793e:	f1a4 0a08 	sub.w	sl, r4, #8
 8007942:	4589      	cmp	r9, r1
 8007944:	bfa8      	it	ge
 8007946:	464f      	movge	r7, r9
 8007948:	da74      	bge.n	8007a34 <_realloc_r+0x134>
 800794a:	4ba1      	ldr	r3, [pc, #644]	; (8007bd0 <_realloc_r+0x2d0>)
 800794c:	eb0a 0e09 	add.w	lr, sl, r9
 8007950:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8007954:	45f3      	cmp	fp, lr
 8007956:	f000 811a 	beq.w	8007b8e <_realloc_r+0x28e>
 800795a:	f8de c004 	ldr.w	ip, [lr, #4]
 800795e:	f02c 0801 	bic.w	r8, ip, #1
 8007962:	44f0      	add	r8, lr
 8007964:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8007968:	f018 0f01 	tst.w	r8, #1
 800796c:	bf1c      	itt	ne
 800796e:	46bc      	movne	ip, r7
 8007970:	46e6      	movne	lr, ip
 8007972:	d07a      	beq.n	8007a6a <_realloc_r+0x16a>
 8007974:	07c0      	lsls	r0, r0, #31
 8007976:	f100 809a 	bmi.w	8007aae <_realloc_r+0x1ae>
 800797a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800797e:	ebc0 080a 	rsb	r8, r0, sl
 8007982:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007986:	f020 0003 	bic.w	r0, r0, #3
 800798a:	f1be 0f00 	cmp.w	lr, #0
 800798e:	f000 80b6 	beq.w	8007afe <_realloc_r+0x1fe>
 8007992:	45de      	cmp	lr, fp
 8007994:	eb00 0b09 	add.w	fp, r0, r9
 8007998:	f000 814d 	beq.w	8007c36 <_realloc_r+0x336>
 800799c:	eb0c 070b 	add.w	r7, ip, fp
 80079a0:	42b9      	cmp	r1, r7
 80079a2:	f300 80ae 	bgt.w	8007b02 <_realloc_r+0x202>
 80079a6:	f8de 100c 	ldr.w	r1, [lr, #12]
 80079aa:	4643      	mov	r3, r8
 80079ac:	f8de 0008 	ldr.w	r0, [lr, #8]
 80079b0:	f1a9 0204 	sub.w	r2, r9, #4
 80079b4:	2a24      	cmp	r2, #36	; 0x24
 80079b6:	60c1      	str	r1, [r0, #12]
 80079b8:	6088      	str	r0, [r1, #8]
 80079ba:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80079be:	f853 0f08 	ldr.w	r0, [r3, #8]!
 80079c2:	60c1      	str	r1, [r0, #12]
 80079c4:	6088      	str	r0, [r1, #8]
 80079c6:	f200 8191 	bhi.w	8007cec <_realloc_r+0x3ec>
 80079ca:	2a13      	cmp	r2, #19
 80079cc:	bf9c      	itt	ls
 80079ce:	461a      	movls	r2, r3
 80079d0:	4621      	movls	r1, r4
 80079d2:	d925      	bls.n	8007a20 <_realloc_r+0x120>
 80079d4:	6821      	ldr	r1, [r4, #0]
 80079d6:	2a1b      	cmp	r2, #27
 80079d8:	bf98      	it	ls
 80079da:	f108 0210 	addls.w	r2, r8, #16
 80079de:	f8c8 1008 	str.w	r1, [r8, #8]
 80079e2:	6861      	ldr	r1, [r4, #4]
 80079e4:	f8c8 100c 	str.w	r1, [r8, #12]
 80079e8:	bf98      	it	ls
 80079ea:	f104 0108 	addls.w	r1, r4, #8
 80079ee:	d917      	bls.n	8007a20 <_realloc_r+0x120>
 80079f0:	68a1      	ldr	r1, [r4, #8]
 80079f2:	2a24      	cmp	r2, #36	; 0x24
 80079f4:	bf14      	ite	ne
 80079f6:	f108 0218 	addne.w	r2, r8, #24
 80079fa:	f108 0220 	addeq.w	r2, r8, #32
 80079fe:	f8c8 1010 	str.w	r1, [r8, #16]
 8007a02:	68e1      	ldr	r1, [r4, #12]
 8007a04:	f8c8 1014 	str.w	r1, [r8, #20]
 8007a08:	bf11      	iteee	ne
 8007a0a:	f104 0110 	addne.w	r1, r4, #16
 8007a0e:	6920      	ldreq	r0, [r4, #16]
 8007a10:	f104 0118 	addeq.w	r1, r4, #24
 8007a14:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007a18:	bf04      	itt	eq
 8007a1a:	6960      	ldreq	r0, [r4, #20]
 8007a1c:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	461c      	mov	r4, r3
 8007a24:	6010      	str	r0, [r2, #0]
 8007a26:	46c2      	mov	sl, r8
 8007a28:	684b      	ldr	r3, [r1, #4]
 8007a2a:	6053      	str	r3, [r2, #4]
 8007a2c:	688b      	ldr	r3, [r1, #8]
 8007a2e:	6093      	str	r3, [r2, #8]
 8007a30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a34:	1b7b      	subs	r3, r7, r5
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	d825      	bhi.n	8007a86 <_realloc_r+0x186>
 8007a3a:	eb0a 0307 	add.w	r3, sl, r7
 8007a3e:	f000 0001 	and.w	r0, r0, #1
 8007a42:	4307      	orrs	r7, r0
 8007a44:	f8ca 7004 	str.w	r7, [sl, #4]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	4630      	mov	r0, r6
 8007a52:	4627      	mov	r7, r4
 8007a54:	f00e fb32 	bl	80160bc <__malloc_unlock>
 8007a58:	4638      	mov	r0, r7
 8007a5a:	b003      	add	sp, #12
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	f025 0507 	bic.w	r5, r5, #7
 8007a64:	4629      	mov	r1, r5
 8007a66:	0fef      	lsrs	r7, r5, #31
 8007a68:	e760      	b.n	800792c <_realloc_r+0x2c>
 8007a6a:	f02c 0c03 	bic.w	ip, ip, #3
 8007a6e:	eb0c 0709 	add.w	r7, ip, r9
 8007a72:	42b9      	cmp	r1, r7
 8007a74:	f73f af7e 	bgt.w	8007974 <_realloc_r+0x74>
 8007a78:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007a7c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8007a80:	60d3      	str	r3, [r2, #12]
 8007a82:	609a      	str	r2, [r3, #8]
 8007a84:	e7d6      	b.n	8007a34 <_realloc_r+0x134>
 8007a86:	eb0a 0105 	add.w	r1, sl, r5
 8007a8a:	f000 0001 	and.w	r0, r0, #1
 8007a8e:	18ca      	adds	r2, r1, r3
 8007a90:	4305      	orrs	r5, r0
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	f8ca 5004 	str.w	r5, [sl, #4]
 8007a9a:	604b      	str	r3, [r1, #4]
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	6853      	ldr	r3, [r2, #4]
 8007aa0:	3108      	adds	r1, #8
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	6053      	str	r3, [r2, #4]
 8007aa8:	f003 fef8 	bl	800b89c <_free_r>
 8007aac:	e7d0      	b.n	8007a50 <_realloc_r+0x150>
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	f7ff faa1 	bl	8006ff8 <_malloc_r>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	b1e8      	cbz	r0, 8007af6 <_realloc_r+0x1f6>
 8007aba:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8007abe:	f1a7 0208 	sub.w	r2, r7, #8
 8007ac2:	f020 0301 	bic.w	r3, r0, #1
 8007ac6:	4453      	add	r3, sl
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	f000 8109 	beq.w	8007ce0 <_realloc_r+0x3e0>
 8007ace:	f1a9 0204 	sub.w	r2, r9, #4
 8007ad2:	2a24      	cmp	r2, #36	; 0x24
 8007ad4:	f200 80aa 	bhi.w	8007c2c <_realloc_r+0x32c>
 8007ad8:	2a13      	cmp	r2, #19
 8007ada:	bf9c      	itt	ls
 8007adc:	463b      	movls	r3, r7
 8007ade:	4622      	movls	r2, r4
 8007ae0:	d878      	bhi.n	8007bd4 <_realloc_r+0x2d4>
 8007ae2:	6811      	ldr	r1, [r2, #0]
 8007ae4:	6019      	str	r1, [r3, #0]
 8007ae6:	6851      	ldr	r1, [r2, #4]
 8007ae8:	6059      	str	r1, [r3, #4]
 8007aea:	6892      	ldr	r2, [r2, #8]
 8007aec:	609a      	str	r2, [r3, #8]
 8007aee:	4630      	mov	r0, r6
 8007af0:	4621      	mov	r1, r4
 8007af2:	f003 fed3 	bl	800b89c <_free_r>
 8007af6:	4630      	mov	r0, r6
 8007af8:	f00e fae0 	bl	80160bc <__malloc_unlock>
 8007afc:	e7ac      	b.n	8007a58 <_realloc_r+0x158>
 8007afe:	eb00 0b09 	add.w	fp, r0, r9
 8007b02:	4559      	cmp	r1, fp
 8007b04:	dcd3      	bgt.n	8007aae <_realloc_r+0x1ae>
 8007b06:	4643      	mov	r3, r8
 8007b08:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007b0c:	f1a9 0204 	sub.w	r2, r9, #4
 8007b10:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8007b14:	2a24      	cmp	r2, #36	; 0x24
 8007b16:	60c1      	str	r1, [r0, #12]
 8007b18:	6088      	str	r0, [r1, #8]
 8007b1a:	d87d      	bhi.n	8007c18 <_realloc_r+0x318>
 8007b1c:	2a13      	cmp	r2, #19
 8007b1e:	bf9c      	itt	ls
 8007b20:	461a      	movls	r2, r3
 8007b22:	4621      	movls	r1, r4
 8007b24:	d925      	bls.n	8007b72 <_realloc_r+0x272>
 8007b26:	6821      	ldr	r1, [r4, #0]
 8007b28:	2a1b      	cmp	r2, #27
 8007b2a:	bf98      	it	ls
 8007b2c:	f108 0210 	addls.w	r2, r8, #16
 8007b30:	f8c8 1008 	str.w	r1, [r8, #8]
 8007b34:	6861      	ldr	r1, [r4, #4]
 8007b36:	f8c8 100c 	str.w	r1, [r8, #12]
 8007b3a:	bf98      	it	ls
 8007b3c:	f104 0108 	addls.w	r1, r4, #8
 8007b40:	d917      	bls.n	8007b72 <_realloc_r+0x272>
 8007b42:	68a1      	ldr	r1, [r4, #8]
 8007b44:	2a24      	cmp	r2, #36	; 0x24
 8007b46:	bf14      	ite	ne
 8007b48:	f108 0218 	addne.w	r2, r8, #24
 8007b4c:	f108 0220 	addeq.w	r2, r8, #32
 8007b50:	f8c8 1010 	str.w	r1, [r8, #16]
 8007b54:	68e1      	ldr	r1, [r4, #12]
 8007b56:	f8c8 1014 	str.w	r1, [r8, #20]
 8007b5a:	bf11      	iteee	ne
 8007b5c:	f104 0110 	addne.w	r1, r4, #16
 8007b60:	6920      	ldreq	r0, [r4, #16]
 8007b62:	f104 0118 	addeq.w	r1, r4, #24
 8007b66:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007b6a:	bf04      	itt	eq
 8007b6c:	6960      	ldreq	r0, [r4, #20]
 8007b6e:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007b72:	6808      	ldr	r0, [r1, #0]
 8007b74:	461c      	mov	r4, r3
 8007b76:	465f      	mov	r7, fp
 8007b78:	e754      	b.n	8007a24 <_realloc_r+0x124>
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b82:	f7ff ba39 	b.w	8006ff8 <_malloc_r>
 8007b86:	230c      	movs	r3, #12
 8007b88:	2700      	movs	r7, #0
 8007b8a:	6033      	str	r3, [r6, #0]
 8007b8c:	e764      	b.n	8007a58 <_realloc_r+0x158>
 8007b8e:	f8db 7004 	ldr.w	r7, [fp, #4]
 8007b92:	f105 0e10 	add.w	lr, r5, #16
 8007b96:	f027 0c03 	bic.w	ip, r7, #3
 8007b9a:	eb0c 0709 	add.w	r7, ip, r9
 8007b9e:	4577      	cmp	r7, lr
 8007ba0:	bfb8      	it	lt
 8007ba2:	46de      	movlt	lr, fp
 8007ba4:	f6ff aee6 	blt.w	8007974 <_realloc_r+0x74>
 8007ba8:	eb0a 0205 	add.w	r2, sl, r5
 8007bac:	1b79      	subs	r1, r7, r5
 8007bae:	f041 0101 	orr.w	r1, r1, #1
 8007bb2:	609a      	str	r2, [r3, #8]
 8007bb4:	6051      	str	r1, [r2, #4]
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007bbc:	4627      	mov	r7, r4
 8007bbe:	f001 0301 	and.w	r3, r1, #1
 8007bc2:	431d      	orrs	r5, r3
 8007bc4:	f844 5c04 	str.w	r5, [r4, #-4]
 8007bc8:	f00e fa78 	bl	80160bc <__malloc_unlock>
 8007bcc:	e744      	b.n	8007a58 <_realloc_r+0x158>
 8007bce:	bf00      	nop
 8007bd0:	20000438 	.word	0x20000438
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	2a1b      	cmp	r2, #27
 8007bd8:	bf98      	it	ls
 8007bda:	f104 0208 	addls.w	r2, r4, #8
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	607b      	str	r3, [r7, #4]
 8007be4:	bf98      	it	ls
 8007be6:	f107 0308 	addls.w	r3, r7, #8
 8007bea:	f67f af7a 	bls.w	8007ae2 <_realloc_r+0x1e2>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	2a24      	cmp	r2, #36	; 0x24
 8007bf2:	bf14      	ite	ne
 8007bf4:	f104 0210 	addne.w	r2, r4, #16
 8007bf8:	f104 0218 	addeq.w	r2, r4, #24
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	bf11      	iteee	ne
 8007c04:	f107 0310 	addne.w	r3, r7, #16
 8007c08:	6921      	ldreq	r1, [r4, #16]
 8007c0a:	f107 0318 	addeq.w	r3, r7, #24
 8007c0e:	6139      	streq	r1, [r7, #16]
 8007c10:	bf04      	itt	eq
 8007c12:	6961      	ldreq	r1, [r4, #20]
 8007c14:	6179      	streq	r1, [r7, #20]
 8007c16:	e764      	b.n	8007ae2 <_realloc_r+0x1e2>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	465f      	mov	r7, fp
 8007c20:	f7ff fd52 	bl	80076c8 <memmove>
 8007c24:	46c2      	mov	sl, r8
 8007c26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c2a:	e703      	b.n	8007a34 <_realloc_r+0x134>
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	4621      	mov	r1, r4
 8007c30:	f7ff fd4a 	bl	80076c8 <memmove>
 8007c34:	e75b      	b.n	8007aee <_realloc_r+0x1ee>
 8007c36:	f105 0010 	add.w	r0, r5, #16
 8007c3a:	44dc      	add	ip, fp
 8007c3c:	4584      	cmp	ip, r0
 8007c3e:	f6ff af60 	blt.w	8007b02 <_realloc_r+0x202>
 8007c42:	4647      	mov	r7, r8
 8007c44:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007c48:	f1a9 0204 	sub.w	r2, r9, #4
 8007c4c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007c50:	2a24      	cmp	r2, #36	; 0x24
 8007c52:	60c1      	str	r1, [r0, #12]
 8007c54:	6088      	str	r0, [r1, #8]
 8007c56:	d852      	bhi.n	8007cfe <_realloc_r+0x3fe>
 8007c58:	2a13      	cmp	r2, #19
 8007c5a:	bf9c      	itt	ls
 8007c5c:	463a      	movls	r2, r7
 8007c5e:	4621      	movls	r1, r4
 8007c60:	d925      	bls.n	8007cae <_realloc_r+0x3ae>
 8007c62:	6821      	ldr	r1, [r4, #0]
 8007c64:	2a1b      	cmp	r2, #27
 8007c66:	bf98      	it	ls
 8007c68:	f108 0210 	addls.w	r2, r8, #16
 8007c6c:	f8c8 1008 	str.w	r1, [r8, #8]
 8007c70:	6861      	ldr	r1, [r4, #4]
 8007c72:	f8c8 100c 	str.w	r1, [r8, #12]
 8007c76:	bf98      	it	ls
 8007c78:	f104 0108 	addls.w	r1, r4, #8
 8007c7c:	d917      	bls.n	8007cae <_realloc_r+0x3ae>
 8007c7e:	68a1      	ldr	r1, [r4, #8]
 8007c80:	2a24      	cmp	r2, #36	; 0x24
 8007c82:	bf14      	ite	ne
 8007c84:	f108 0218 	addne.w	r2, r8, #24
 8007c88:	f108 0220 	addeq.w	r2, r8, #32
 8007c8c:	f8c8 1010 	str.w	r1, [r8, #16]
 8007c90:	68e1      	ldr	r1, [r4, #12]
 8007c92:	f8c8 1014 	str.w	r1, [r8, #20]
 8007c96:	bf11      	iteee	ne
 8007c98:	f104 0110 	addne.w	r1, r4, #16
 8007c9c:	6920      	ldreq	r0, [r4, #16]
 8007c9e:	f104 0118 	addeq.w	r1, r4, #24
 8007ca2:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007ca6:	bf04      	itt	eq
 8007ca8:	6960      	ldreq	r0, [r4, #20]
 8007caa:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007cae:	6808      	ldr	r0, [r1, #0]
 8007cb0:	6010      	str	r0, [r2, #0]
 8007cb2:	6848      	ldr	r0, [r1, #4]
 8007cb4:	6050      	str	r0, [r2, #4]
 8007cb6:	6889      	ldr	r1, [r1, #8]
 8007cb8:	6091      	str	r1, [r2, #8]
 8007cba:	eb08 0205 	add.w	r2, r8, r5
 8007cbe:	ebc5 010c 	rsb	r1, r5, ip
 8007cc2:	f041 0101 	orr.w	r1, r1, #1
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	6051      	str	r1, [r2, #4]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	431d      	orrs	r5, r3
 8007cd6:	f8c8 5004 	str.w	r5, [r8, #4]
 8007cda:	f00e f9ef 	bl	80160bc <__malloc_unlock>
 8007cde:	e6bb      	b.n	8007a58 <_realloc_r+0x158>
 8007ce0:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8007ce4:	f027 0703 	bic.w	r7, r7, #3
 8007ce8:	444f      	add	r7, r9
 8007cea:	e6a3      	b.n	8007a34 <_realloc_r+0x134>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4618      	mov	r0, r3
 8007cf0:	461c      	mov	r4, r3
 8007cf2:	46c2      	mov	sl, r8
 8007cf4:	f7ff fce8 	bl	80076c8 <memmove>
 8007cf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007cfc:	e69a      	b.n	8007a34 <_realloc_r+0x134>
 8007cfe:	4638      	mov	r0, r7
 8007d00:	4621      	mov	r1, r4
 8007d02:	e88d 1008 	stmia.w	sp, {r3, ip}
 8007d06:	f7ff fcdf 	bl	80076c8 <memmove>
 8007d0a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8007d0e:	e7d4      	b.n	8007cba <_realloc_r+0x3ba>

08007d10 <_init_signal_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 8007d18:	b10d      	cbz	r5, 8007d1e <_init_signal_r+0xe>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	2180      	movs	r1, #128	; 0x80
 8007d20:	f7ff f96a 	bl	8006ff8 <_malloc_r>
 8007d24:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8007d28:	b148      	cbz	r0, 8007d3e <_init_signal_r+0x2e>
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	e001      	b.n	8007d32 <_init_signal_r+0x22>
 8007d2e:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
 8007d32:	5143      	str	r3, [r0, r5]
 8007d34:	3504      	adds	r5, #4
 8007d36:	2d80      	cmp	r5, #128	; 0x80
 8007d38:	d1f9      	bne.n	8007d2e <_init_signal_r+0x1e>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	bd38      	pop	{r3, r4, r5, pc}

08007d44 <_signal_r>:
 8007d44:	291f      	cmp	r1, #31
 8007d46:	b510      	push	{r4, lr}
 8007d48:	4604      	mov	r4, r0
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	d808      	bhi.n	8007d60 <_signal_r+0x1c>
 8007d4e:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8007d52:	b153      	cbz	r3, 8007d6a <_signal_r+0x26>
 8007d54:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007d58:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd10      	pop	{r4, pc}
 8007d60:	2316      	movs	r3, #22
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	e7f8      	b.n	8007d5c <_signal_r+0x18>
 8007d6a:	9101      	str	r1, [sp, #4]
 8007d6c:	9200      	str	r2, [sp, #0]
 8007d6e:	f7ff ffcf 	bl	8007d10 <_init_signal_r>
 8007d72:	9901      	ldr	r1, [sp, #4]
 8007d74:	9a00      	ldr	r2, [sp, #0]
 8007d76:	b910      	cbnz	r0, 8007d7e <_signal_r+0x3a>
 8007d78:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 8007d7c:	e7ea      	b.n	8007d54 <_signal_r+0x10>
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d82:	e7eb      	b.n	8007d5c <_signal_r+0x18>

08007d84 <_raise_r>:
 8007d84:	291f      	cmp	r1, #31
 8007d86:	b538      	push	{r3, r4, r5, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	d820      	bhi.n	8007dd0 <_raise_r+0x4c>
 8007d8e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8007d92:	b19a      	cbz	r2, 8007dbc <_raise_r+0x38>
 8007d94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d98:	b183      	cbz	r3, 8007dbc <_raise_r+0x38>
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d00c      	beq.n	8007db8 <_raise_r+0x34>
 8007d9e:	1c59      	adds	r1, r3, #1
 8007da0:	d006      	beq.n	8007db0 <_raise_r+0x2c>
 8007da2:	2500      	movs	r5, #0
 8007da4:	4620      	mov	r0, r4
 8007da6:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8007daa:	4798      	blx	r3
 8007dac:	4628      	mov	r0, r5
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	2316      	movs	r3, #22
 8007db2:	2001      	movs	r0, #1
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	2000      	movs	r0, #0
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f00e f963 	bl	8016088 <_getpid_r>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	4601      	mov	r1, r0
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dcc:	f00e b94a 	b.w	8016064 <_kill_r>
 8007dd0:	2316      	movs	r3, #22
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop

08007ddc <__sigtramp_r>:
 8007ddc:	291f      	cmp	r1, #31
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	b082      	sub	sp, #8
 8007de4:	d81e      	bhi.n	8007e24 <__sigtramp_r+0x48>
 8007de6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8007dea:	b19a      	cbz	r2, 8007e14 <__sigtramp_r+0x38>
 8007dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007df0:	2001      	movs	r0, #1
 8007df2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007df6:	b14b      	cbz	r3, 8007e0c <__sigtramp_r+0x30>
 8007df8:	1c58      	adds	r0, r3, #1
 8007dfa:	d009      	beq.n	8007e10 <__sigtramp_r+0x34>
 8007dfc:	2003      	movs	r0, #3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d004      	beq.n	8007e0c <__sigtramp_r+0x30>
 8007e02:	2400      	movs	r4, #0
 8007e04:	4608      	mov	r0, r1
 8007e06:	6014      	str	r4, [r2, #0]
 8007e08:	4798      	blx	r3
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd10      	pop	{r4, pc}
 8007e10:	2002      	movs	r0, #2
 8007e12:	e7fb      	b.n	8007e0c <__sigtramp_r+0x30>
 8007e14:	9101      	str	r1, [sp, #4]
 8007e16:	f7ff ff7b 	bl	8007d10 <_init_signal_r>
 8007e1a:	9901      	ldr	r1, [sp, #4]
 8007e1c:	b910      	cbnz	r0, 8007e24 <__sigtramp_r+0x48>
 8007e1e:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 8007e22:	e7e3      	b.n	8007dec <__sigtramp_r+0x10>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	e7f0      	b.n	8007e0c <__sigtramp_r+0x30>
 8007e2a:	bf00      	nop

08007e2c <raise>:
 8007e2c:	f240 0308 	movw	r3, #8
 8007e30:	4601      	mov	r1, r0
 8007e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	e7a4      	b.n	8007d84 <_raise_r>
 8007e3a:	bf00      	nop

08007e3c <signal>:
 8007e3c:	f240 0308 	movw	r3, #8
 8007e40:	460a      	mov	r2, r1
 8007e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e46:	4601      	mov	r1, r0
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	e77b      	b.n	8007d44 <_signal_r>

08007e4c <_init_signal>:
 8007e4c:	f240 0308 	movw	r3, #8
 8007e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	e75b      	b.n	8007d10 <_init_signal_r>

08007e58 <__sigtramp>:
 8007e58:	f240 0308 	movw	r3, #8
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	e7ba      	b.n	8007ddc <__sigtramp_r>
 8007e66:	bf00      	nop

08007e68 <_sprintf_r>:
 8007e68:	b40c      	push	{r2, r3}
 8007e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6c:	b09d      	sub	sp, #116	; 0x74
 8007e6e:	ac22      	add	r4, sp, #136	; 0x88
 8007e70:	460e      	mov	r6, r1
 8007e72:	a901      	add	r1, sp, #4
 8007e74:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007e78:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e7c:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007e80:	9601      	str	r6, [sp, #4]
 8007e82:	4623      	mov	r3, r4
 8007e84:	9605      	str	r6, [sp, #20]
 8007e86:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007e8a:	f04f 36ff 	mov.w	r6, #4294967295
 8007e8e:	9503      	str	r5, [sp, #12]
 8007e90:	f8ad 6012 	strh.w	r6, [sp, #18]
 8007e94:	9506      	str	r5, [sp, #24]
 8007e96:	941b      	str	r4, [sp, #108]	; 0x6c
 8007e98:	f000 fa00 	bl	800829c <_svfprintf_r>
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	b01d      	add	sp, #116	; 0x74
 8007ea4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ea8:	b002      	add	sp, #8
 8007eaa:	4770      	bx	lr

08007eac <sprintf>:
 8007eac:	b40e      	push	{r1, r2, r3}
 8007eae:	f240 0308 	movw	r3, #8
 8007eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb4:	b09c      	sub	sp, #112	; 0x70
 8007eb6:	ac21      	add	r4, sp, #132	; 0x84
 8007eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	a901      	add	r1, sp, #4
 8007ec0:	f854 2b04 	ldr.w	r2, [r4], #4
 8007ec4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007ece:	4623      	mov	r3, r4
 8007ed0:	9601      	str	r6, [sp, #4]
 8007ed2:	9605      	str	r6, [sp, #20]
 8007ed4:	f04f 36ff 	mov.w	r6, #4294967295
 8007ed8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007edc:	f8ad 6012 	strh.w	r6, [sp, #18]
 8007ee0:	9503      	str	r5, [sp, #12]
 8007ee2:	9506      	str	r5, [sp, #24]
 8007ee4:	941b      	str	r4, [sp, #108]	; 0x6c
 8007ee6:	f000 f9d9 	bl	800829c <_svfprintf_r>
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	b01c      	add	sp, #112	; 0x70
 8007ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ef6:	b003      	add	sp, #12
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop

08007efc <strcmp>:
 8007efc:	ea80 0201 	eor.w	r2, r0, r1
 8007f00:	f012 0f03 	tst.w	r2, #3
 8007f04:	d13a      	bne.n	8007f7c <strcmp_unaligned>
 8007f06:	f010 0203 	ands.w	r2, r0, #3
 8007f0a:	f020 0003 	bic.w	r0, r0, #3
 8007f0e:	f021 0103 	bic.w	r1, r1, #3
 8007f12:	f850 cb04 	ldr.w	ip, [r0], #4
 8007f16:	bf08      	it	eq
 8007f18:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007f1c:	d00d      	beq.n	8007f3a <strcmp+0x3e>
 8007f1e:	f082 0203 	eor.w	r2, r2, #3
 8007f22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007f26:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007f2a:	fa23 f202 	lsr.w	r2, r3, r2
 8007f2e:	f851 3b04 	ldr.w	r3, [r1], #4
 8007f32:	ea4c 0c02 	orr.w	ip, ip, r2
 8007f36:	ea43 0302 	orr.w	r3, r3, r2
 8007f3a:	bf00      	nop
 8007f3c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8007f40:	459c      	cmp	ip, r3
 8007f42:	bf01      	itttt	eq
 8007f44:	ea22 020c 	biceq.w	r2, r2, ip
 8007f48:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8007f4c:	f850 cb04 	ldreq.w	ip, [r0], #4
 8007f50:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007f54:	d0f2      	beq.n	8007f3c <strcmp+0x40>
 8007f56:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8007f5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8007f5e:	2801      	cmp	r0, #1
 8007f60:	bf28      	it	cs
 8007f62:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8007f66:	bf08      	it	eq
 8007f68:	0a1b      	lsreq	r3, r3, #8
 8007f6a:	d0f4      	beq.n	8007f56 <strcmp+0x5a>
 8007f6c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8007f70:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8007f74:	eba0 0003 	sub.w	r0, r0, r3
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <strcmp_unaligned>:
 8007f7c:	f010 0f03 	tst.w	r0, #3
 8007f80:	d00a      	beq.n	8007f98 <strcmp_unaligned+0x1c>
 8007f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	bf28      	it	cs
 8007f8e:	429a      	cmpcs	r2, r3
 8007f90:	d0f4      	beq.n	8007f7c <strcmp_unaligned>
 8007f92:	eba2 0003 	sub.w	r0, r2, r3
 8007f96:	4770      	bx	lr
 8007f98:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8007f9c:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8007fa0:	f04f 0201 	mov.w	r2, #1
 8007fa4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8007fa8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8007fac:	f001 0c03 	and.w	ip, r1, #3
 8007fb0:	f021 0103 	bic.w	r1, r1, #3
 8007fb4:	f850 4b04 	ldr.w	r4, [r0], #4
 8007fb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fbc:	f1bc 0f02 	cmp.w	ip, #2
 8007fc0:	d026      	beq.n	8008010 <strcmp_unaligned+0x94>
 8007fc2:	d84b      	bhi.n	800805c <strcmp_unaligned+0xe0>
 8007fc4:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8007fc8:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8007fcc:	eba4 0302 	sub.w	r3, r4, r2
 8007fd0:	ea23 0304 	bic.w	r3, r3, r4
 8007fd4:	d10d      	bne.n	8007ff2 <strcmp_unaligned+0x76>
 8007fd6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007fda:	bf08      	it	eq
 8007fdc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8007fe0:	d10a      	bne.n	8007ff8 <strcmp_unaligned+0x7c>
 8007fe2:	ea8c 0c04 	eor.w	ip, ip, r4
 8007fe6:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8007fea:	d10c      	bne.n	8008006 <strcmp_unaligned+0x8a>
 8007fec:	f850 4b04 	ldr.w	r4, [r0], #4
 8007ff0:	e7e8      	b.n	8007fc4 <strcmp_unaligned+0x48>
 8007ff2:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8007ff6:	e05c      	b.n	80080b2 <strcmp_unaligned+0x136>
 8007ff8:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8007ffc:	d152      	bne.n	80080a4 <strcmp_unaligned+0x128>
 8007ffe:	780d      	ldrb	r5, [r1, #0]
 8008000:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8008004:	e055      	b.n	80080b2 <strcmp_unaligned+0x136>
 8008006:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800800a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800800e:	e050      	b.n	80080b2 <strcmp_unaligned+0x136>
 8008010:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8008014:	eba4 0302 	sub.w	r3, r4, r2
 8008018:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800801c:	ea23 0304 	bic.w	r3, r3, r4
 8008020:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8008024:	d117      	bne.n	8008056 <strcmp_unaligned+0xda>
 8008026:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800802a:	bf08      	it	eq
 800802c:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008030:	d107      	bne.n	8008042 <strcmp_unaligned+0xc6>
 8008032:	ea8c 0c04 	eor.w	ip, ip, r4
 8008036:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800803a:	d108      	bne.n	800804e <strcmp_unaligned+0xd2>
 800803c:	f850 4b04 	ldr.w	r4, [r0], #4
 8008040:	e7e6      	b.n	8008010 <strcmp_unaligned+0x94>
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	d12e      	bne.n	80080a4 <strcmp_unaligned+0x128>
 8008046:	880d      	ldrh	r5, [r1, #0]
 8008048:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800804c:	e031      	b.n	80080b2 <strcmp_unaligned+0x136>
 800804e:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8008052:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008056:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800805a:	e02a      	b.n	80080b2 <strcmp_unaligned+0x136>
 800805c:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8008060:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8008064:	eba4 0302 	sub.w	r3, r4, r2
 8008068:	ea23 0304 	bic.w	r3, r3, r4
 800806c:	d10d      	bne.n	800808a <strcmp_unaligned+0x10e>
 800806e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008072:	bf08      	it	eq
 8008074:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008078:	d10a      	bne.n	8008090 <strcmp_unaligned+0x114>
 800807a:	ea8c 0c04 	eor.w	ip, ip, r4
 800807e:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8008082:	d10a      	bne.n	800809a <strcmp_unaligned+0x11e>
 8008084:	f850 4b04 	ldr.w	r4, [r0], #4
 8008088:	e7e8      	b.n	800805c <strcmp_unaligned+0xe0>
 800808a:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800808e:	e010      	b.n	80080b2 <strcmp_unaligned+0x136>
 8008090:	f014 0fff 	tst.w	r4, #255	; 0xff
 8008094:	d006      	beq.n	80080a4 <strcmp_unaligned+0x128>
 8008096:	f851 5b04 	ldr.w	r5, [r1], #4
 800809a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800809e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80080a2:	e006      	b.n	80080b2 <strcmp_unaligned+0x136>
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ac:	f85d 5b04 	ldr.w	r5, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80080b6:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80080ba:	2801      	cmp	r0, #1
 80080bc:	bf28      	it	cs
 80080be:	4290      	cmpcs	r0, r2
 80080c0:	bf04      	itt	eq
 80080c2:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80080c6:	0a2d      	lsreq	r5, r5, #8
 80080c8:	d0f3      	beq.n	80080b2 <strcmp_unaligned+0x136>
 80080ca:	eba2 0000 	sub.w	r0, r2, r0
 80080ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d2:	f85d 5b04 	ldr.w	r5, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <strcpy>:
 80080d8:	ea80 0201 	eor.w	r2, r0, r1
 80080dc:	4684      	mov	ip, r0
 80080de:	f012 0f03 	tst.w	r2, #3
 80080e2:	d14f      	bne.n	8008184 <strcpy+0xac>
 80080e4:	f011 0f03 	tst.w	r1, #3
 80080e8:	d132      	bne.n	8008150 <strcpy+0x78>
 80080ea:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80080ee:	f011 0f04 	tst.w	r1, #4
 80080f2:	f851 3b04 	ldr.w	r3, [r1], #4
 80080f6:	d00b      	beq.n	8008110 <strcpy+0x38>
 80080f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80080fc:	439a      	bics	r2, r3
 80080fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8008102:	bf04      	itt	eq
 8008104:	f84c 3b04 	streq.w	r3, [ip], #4
 8008108:	f851 3b04 	ldreq.w	r3, [r1], #4
 800810c:	d116      	bne.n	800813c <strcpy+0x64>
 800810e:	bf00      	nop
 8008110:	f851 4b04 	ldr.w	r4, [r1], #4
 8008114:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008118:	439a      	bics	r2, r3
 800811a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800811e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8008122:	d10b      	bne.n	800813c <strcpy+0x64>
 8008124:	f84c 3b04 	str.w	r3, [ip], #4
 8008128:	43a2      	bics	r2, r4
 800812a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800812e:	bf04      	itt	eq
 8008130:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008134:	f84c 4b04 	streq.w	r4, [ip], #4
 8008138:	d0ea      	beq.n	8008110 <strcpy+0x38>
 800813a:	4623      	mov	r3, r4
 800813c:	f80c 3b01 	strb.w	r3, [ip], #1
 8008140:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008144:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008148:	d1f8      	bne.n	800813c <strcpy+0x64>
 800814a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	f011 0f01 	tst.w	r1, #1
 8008154:	d006      	beq.n	8008164 <strcpy+0x8c>
 8008156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800815a:	f80c 2b01 	strb.w	r2, [ip], #1
 800815e:	2a00      	cmp	r2, #0
 8008160:	bf08      	it	eq
 8008162:	4770      	bxeq	lr
 8008164:	f011 0f02 	tst.w	r1, #2
 8008168:	d0bf      	beq.n	80080ea <strcpy+0x12>
 800816a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800816e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8008172:	bf16      	itet	ne
 8008174:	f82c 2b02 	strhne.w	r2, [ip], #2
 8008178:	f88c 2000 	strbeq.w	r2, [ip]
 800817c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8008180:	d1b3      	bne.n	80080ea <strcpy+0x12>
 8008182:	4770      	bx	lr
 8008184:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008188:	f80c 2b01 	strb.w	r2, [ip], #1
 800818c:	2a00      	cmp	r2, #0
 800818e:	d1f9      	bne.n	8008184 <strcpy+0xac>
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop

08008194 <strlen>:
 8008194:	f020 0103 	bic.w	r1, r0, #3
 8008198:	f010 0003 	ands.w	r0, r0, #3
 800819c:	f1c0 0000 	rsb	r0, r0, #0
 80081a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80081a4:	f100 0c04 	add.w	ip, r0, #4
 80081a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80081ac:	f06f 0200 	mvn.w	r2, #0
 80081b0:	bf1c      	itt	ne
 80081b2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80081b6:	4313      	orrne	r3, r2
 80081b8:	f04f 0c01 	mov.w	ip, #1
 80081bc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80081c0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80081c4:	eba3 020c 	sub.w	r2, r3, ip
 80081c8:	ea22 0203 	bic.w	r2, r2, r3
 80081cc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80081d0:	bf04      	itt	eq
 80081d2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80081d6:	3004      	addeq	r0, #4
 80081d8:	d0f4      	beq.n	80081c4 <strlen+0x30>
 80081da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081de:	bf1f      	itttt	ne
 80081e0:	3001      	addne	r0, #1
 80081e2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80081e6:	3001      	addne	r0, #1
 80081e8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80081ec:	bf18      	it	ne
 80081ee:	3001      	addne	r0, #1
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <strncmp>:
 80081f4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d044      	beq.n	8008286 <strncmp+0x92>
 80081fc:	ea41 0300 	orr.w	r3, r1, r0
 8008200:	f013 0303 	ands.w	r3, r3, #3
 8008204:	d12c      	bne.n	8008260 <strncmp+0x6c>
 8008206:	2a03      	cmp	r2, #3
 8008208:	d92a      	bls.n	8008260 <strncmp+0x6c>
 800820a:	6804      	ldr	r4, [r0, #0]
 800820c:	680d      	ldr	r5, [r1, #0]
 800820e:	42ac      	cmp	r4, r5
 8008210:	d126      	bne.n	8008260 <strncmp+0x6c>
 8008212:	3a04      	subs	r2, #4
 8008214:	d037      	beq.n	8008286 <strncmp+0x92>
 8008216:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800821a:	ea25 0404 	bic.w	r4, r5, r4
 800821e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8008222:	bf04      	itt	eq
 8008224:	460c      	moveq	r4, r1
 8008226:	4605      	moveq	r5, r0
 8008228:	d011      	beq.n	800824e <strncmp+0x5a>
 800822a:	e034      	b.n	8008296 <strncmp+0xa2>
 800822c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8008230:	4635      	mov	r5, r6
 8008232:	f851 cf04 	ldr.w	ip, [r1, #4]!
 8008236:	463c      	mov	r4, r7
 8008238:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
 800823c:	4563      	cmp	r3, ip
 800823e:	ea28 0803 	bic.w	r8, r8, r3
 8008242:	d109      	bne.n	8008258 <strncmp+0x64>
 8008244:	3a04      	subs	r2, #4
 8008246:	d01e      	beq.n	8008286 <strncmp+0x92>
 8008248:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
 800824c:	d119      	bne.n	8008282 <strncmp+0x8e>
 800824e:	1d2e      	adds	r6, r5, #4
 8008250:	1d27      	adds	r7, r4, #4
 8008252:	2a03      	cmp	r2, #3
 8008254:	d8ea      	bhi.n	800822c <strncmp+0x38>
 8008256:	b1d2      	cbz	r2, 800828e <strncmp+0x9a>
 8008258:	3a01      	subs	r2, #1
 800825a:	4639      	mov	r1, r7
 800825c:	4630      	mov	r0, r6
 800825e:	e000      	b.n	8008262 <strncmp+0x6e>
 8008260:	3a01      	subs	r2, #1
 8008262:	7803      	ldrb	r3, [r0, #0]
 8008264:	780c      	ldrb	r4, [r1, #0]
 8008266:	42a3      	cmp	r3, r4
 8008268:	d113      	bne.n	8008292 <strncmp+0x9e>
 800826a:	b162      	cbz	r2, 8008286 <strncmp+0x92>
 800826c:	b19b      	cbz	r3, 8008296 <strncmp+0xa2>
 800826e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008272:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008276:	42a3      	cmp	r3, r4
 8008278:	d10b      	bne.n	8008292 <strncmp+0x9e>
 800827a:	2a01      	cmp	r2, #1
 800827c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008280:	d1f4      	bne.n	800826c <strncmp+0x78>
 8008282:	2000      	movs	r0, #0
 8008284:	e000      	b.n	8008288 <strncmp+0x94>
 8008286:	4610      	mov	r0, r2
 8008288:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800828c:	4770      	bx	lr
 800828e:	792b      	ldrb	r3, [r5, #4]
 8008290:	7924      	ldrb	r4, [r4, #4]
 8008292:	1b18      	subs	r0, r3, r4
 8008294:	e7f8      	b.n	8008288 <strncmp+0x94>
 8008296:	4618      	mov	r0, r3
 8008298:	e7f6      	b.n	8008288 <strncmp+0x94>
 800829a:	bf00      	nop

0800829c <_svfprintf_r>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	b0c9      	sub	sp, #292	; 0x124
 80082a2:	468b      	mov	fp, r1
 80082a4:	4692      	mov	sl, r2
 80082a6:	9311      	str	r3, [sp, #68]	; 0x44
 80082a8:	9010      	str	r0, [sp, #64]	; 0x40
 80082aa:	f003 fc3d 	bl	800bb28 <_localeconv_r>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2200      	movs	r2, #0
 80082b2:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80082b6:	6800      	ldr	r0, [r0, #0]
 80082b8:	9019      	str	r0, [sp, #100]	; 0x64
 80082ba:	f7ff ff6b 	bl	8008194 <strlen>
 80082be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80082c2:	061d      	lsls	r5, r3, #24
 80082c4:	901a      	str	r0, [sp, #104]	; 0x68
 80082c6:	d504      	bpl.n	80082d2 <_svfprintf_r+0x36>
 80082c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f001 801f 	beq.w	8009310 <_svfprintf_r+0x1074>
 80082d2:	ad3d      	add	r5, sp, #244	; 0xf4
 80082d4:	9509      	str	r5, [sp, #36]	; 0x24
 80082d6:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 80082da:	9508      	str	r5, [sp, #32]
 80082dc:	f246 6567 	movw	r5, #26215	; 0x6667
 80082e0:	9808      	ldr	r0, [sp, #32]
 80082e2:	f2c6 6566 	movt	r5, #26214	; 0x6666
 80082e6:	951e      	str	r5, [sp, #120]	; 0x78
 80082e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082ea:	2300      	movs	r3, #0
 80082ec:	ae23      	add	r6, sp, #140	; 0x8c
 80082ee:	9312      	str	r3, [sp, #72]	; 0x48
 80082f0:	1a2d      	subs	r5, r5, r0
 80082f2:	9521      	str	r5, [sp, #132]	; 0x84
 80082f4:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 80082f8:	9320      	str	r3, [sp, #128]	; 0x80
 80082fa:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
 80082fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8008300:	930d      	str	r3, [sp, #52]	; 0x34
 8008302:	951b      	str	r5, [sp, #108]	; 0x6c
 8008304:	963d      	str	r6, [sp, #244]	; 0xf4
 8008306:	933f      	str	r3, [sp, #252]	; 0xfc
 8008308:	933e      	str	r3, [sp, #248]	; 0xf8
 800830a:	f89a 3000 	ldrb.w	r3, [sl]
 800830e:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8008312:	bf18      	it	ne
 8008314:	2201      	movne	r2, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	bf0c      	ite	eq
 800831a:	2300      	moveq	r3, #0
 800831c:	f002 0301 	andne.w	r3, r2, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80c6 	beq.w	80084b2 <_svfprintf_r+0x216>
 8008326:	4652      	mov	r2, sl
 8008328:	4657      	mov	r7, sl
 800832a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800832e:	3701      	adds	r7, #1
 8008330:	1c19      	adds	r1, r3, #0
 8008332:	bf18      	it	ne
 8008334:	2101      	movne	r1, #1
 8008336:	2b25      	cmp	r3, #37	; 0x25
 8008338:	bf0c      	ite	eq
 800833a:	2300      	moveq	r3, #0
 800833c:	f001 0301 	andne.w	r3, r1, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f2      	bne.n	800832a <_svfprintf_r+0x8e>
 8008344:	ebb7 080a 	subs.w	r8, r7, sl
 8008348:	d010      	beq.n	800836c <_svfprintf_r+0xd0>
 800834a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800834c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800834e:	3401      	adds	r4, #1
 8008350:	f8c6 a000 	str.w	sl, [r6]
 8008354:	2c07      	cmp	r4, #7
 8008356:	f8c6 8004 	str.w	r8, [r6, #4]
 800835a:	4445      	add	r5, r8
 800835c:	943e      	str	r4, [sp, #248]	; 0xf8
 800835e:	953f      	str	r5, [sp, #252]	; 0xfc
 8008360:	f300 808b 	bgt.w	800847a <_svfprintf_r+0x1de>
 8008364:	3608      	adds	r6, #8
 8008366:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008368:	4445      	add	r5, r8
 800836a:	950d      	str	r5, [sp, #52]	; 0x34
 800836c:	783b      	ldrb	r3, [r7, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 808b 	beq.w	800848a <_svfprintf_r+0x1ee>
 8008374:	f107 0a01 	add.w	sl, r7, #1
 8008378:	f04f 34ff 	mov.w	r4, #4294967295
 800837c:	2720      	movs	r7, #32
 800837e:	212b      	movs	r1, #43	; 0x2b
 8008380:	2300      	movs	r3, #0
 8008382:	930c      	str	r3, [sp, #48]	; 0x30
 8008384:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8008388:	930a      	str	r3, [sp, #40]	; 0x28
 800838a:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800838e:	f1a3 0220 	sub.w	r2, r3, #32
 8008392:	2a58      	cmp	r2, #88	; 0x58
 8008394:	f200 8147 	bhi.w	8008626 <_svfprintf_r+0x38a>
 8008398:	e8df f012 	tbh	[pc, r2, lsl #1]
 800839c:	01450157 	.word	0x01450157
 80083a0:	02160145 	.word	0x02160145
 80083a4:	01450145 	.word	0x01450145
 80083a8:	01450145 	.word	0x01450145
 80083ac:	01450145 	.word	0x01450145
 80083b0:	008d005e 	.word	0x008d005e
 80083b4:	006a0145 	.word	0x006a0145
 80083b8:	0145015f 	.word	0x0145015f
 80083bc:	017f017a 	.word	0x017f017a
 80083c0:	017f017f 	.word	0x017f017f
 80083c4:	017f017f 	.word	0x017f017f
 80083c8:	017f017f 	.word	0x017f017f
 80083cc:	017f017f 	.word	0x017f017f
 80083d0:	01450145 	.word	0x01450145
 80083d4:	01450145 	.word	0x01450145
 80083d8:	01450145 	.word	0x01450145
 80083dc:	01450145 	.word	0x01450145
 80083e0:	01450145 	.word	0x01450145
 80083e4:	024d0192 	.word	0x024d0192
 80083e8:	024d0145 	.word	0x024d0145
 80083ec:	01450145 	.word	0x01450145
 80083f0:	01450145 	.word	0x01450145
 80083f4:	01450283 	.word	0x01450283
 80083f8:	01d30145 	.word	0x01d30145
 80083fc:	01450145 	.word	0x01450145
 8008400:	01450145 	.word	0x01450145
 8008404:	023c0145 	.word	0x023c0145
 8008408:	01450145 	.word	0x01450145
 800840c:	0145021b 	.word	0x0145021b
 8008410:	01450145 	.word	0x01450145
 8008414:	01450145 	.word	0x01450145
 8008418:	01450145 	.word	0x01450145
 800841c:	01450145 	.word	0x01450145
 8008420:	022b0145 	.word	0x022b0145
 8008424:	024d01f8 	.word	0x024d01f8
 8008428:	024d024d 	.word	0x024d024d
 800842c:	01f80211 	.word	0x01f80211
 8008430:	01450145 	.word	0x01450145
 8008434:	01450059 	.word	0x01450059
 8008438:	01e501c4 	.word	0x01e501c4
 800843c:	00590288 	.word	0x00590288
 8008440:	00900145 	.word	0x00900145
 8008444:	01040145 	.word	0x01040145
 8008448:	01450145 	.word	0x01450145
 800844c:	01a5      	.short	0x01a5
 800844e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008450:	f045 0510 	orr.w	r5, r5, #16
 8008454:	950a      	str	r5, [sp, #40]	; 0x28
 8008456:	e798      	b.n	800838a <_svfprintf_r+0xee>
 8008458:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800845a:	682d      	ldr	r5, [r5, #0]
 800845c:	950c      	str	r5, [sp, #48]	; 0x30
 800845e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008460:	1d2b      	adds	r3, r5, #4
 8008462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008464:	2d00      	cmp	r5, #0
 8008466:	f280 8241 	bge.w	80088ec <_svfprintf_r+0x650>
 800846a:	426d      	negs	r5, r5
 800846c:	9311      	str	r3, [sp, #68]	; 0x44
 800846e:	950c      	str	r5, [sp, #48]	; 0x30
 8008470:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008472:	f045 0504 	orr.w	r5, r5, #4
 8008476:	950a      	str	r5, [sp, #40]	; 0x28
 8008478:	e787      	b.n	800838a <_svfprintf_r+0xee>
 800847a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800847c:	4659      	mov	r1, fp
 800847e:	aa3d      	add	r2, sp, #244	; 0xf4
 8008480:	f004 f8c6 	bl	800c610 <__ssprint_r>
 8008484:	b940      	cbnz	r0, 8008498 <_svfprintf_r+0x1fc>
 8008486:	ae23      	add	r6, sp, #140	; 0x8c
 8008488:	e76d      	b.n	8008366 <_svfprintf_r+0xca>
 800848a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800848c:	b123      	cbz	r3, 8008498 <_svfprintf_r+0x1fc>
 800848e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008490:	4659      	mov	r1, fp
 8008492:	aa3d      	add	r2, sp, #244	; 0xf4
 8008494:	f004 f8bc 	bl	800c610 <__ssprint_r>
 8008498:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800849c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800849e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80084a2:	bf18      	it	ne
 80084a4:	f04f 35ff 	movne.w	r5, #4294967295
 80084a8:	950d      	str	r5, [sp, #52]	; 0x34
 80084aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80084ac:	b049      	add	sp, #292	; 0x124
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	4657      	mov	r7, sl
 80084b4:	e75a      	b.n	800836c <_svfprintf_r+0xd0>
 80084b6:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 80084ba:	e766      	b.n	800838a <_svfprintf_r+0xee>
 80084bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80084be:	2500      	movs	r5, #0
 80084c0:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 80084c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084c6:	6800      	ldr	r0, [r0, #0]
 80084c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80084ca:	1d0f      	adds	r7, r1, #4
 80084cc:	9013      	str	r0, [sp, #76]	; 0x4c
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f000 87af 	beq.w	8009432 <_svfprintf_r+0x1196>
 80084d4:	2c00      	cmp	r4, #0
 80084d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80084d8:	f2c0 8767 	blt.w	80093aa <_svfprintf_r+0x110e>
 80084dc:	4629      	mov	r1, r5
 80084de:	4622      	mov	r2, r4
 80084e0:	f7ff f83c 	bl	800755c <memchr>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f000 87d3 	beq.w	8009490 <_svfprintf_r+0x11f4>
 80084ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084ec:	9514      	str	r5, [sp, #80]	; 0x50
 80084ee:	1a40      	subs	r0, r0, r1
 80084f0:	900e      	str	r0, [sp, #56]	; 0x38
 80084f2:	42a0      	cmp	r0, r4
 80084f4:	f340 8608 	ble.w	8009108 <_svfprintf_r+0xe6c>
 80084f8:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80084fc:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008500:	950b      	str	r5, [sp, #44]	; 0x2c
 8008502:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008504:	9711      	str	r7, [sp, #68]	; 0x44
 8008506:	940e      	str	r4, [sp, #56]	; 0x38
 8008508:	9518      	str	r5, [sp, #96]	; 0x60
 800850a:	b113      	cbz	r3, 8008512 <_svfprintf_r+0x276>
 800850c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800850e:	3501      	adds	r5, #1
 8008510:	950b      	str	r5, [sp, #44]	; 0x2c
 8008512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008514:	f013 0302 	ands.w	r3, r3, #2
 8008518:	9315      	str	r3, [sp, #84]	; 0x54
 800851a:	d002      	beq.n	8008522 <_svfprintf_r+0x286>
 800851c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800851e:	3502      	adds	r5, #2
 8008520:	950b      	str	r5, [sp, #44]	; 0x2c
 8008522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008524:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8008528:	9316      	str	r3, [sp, #88]	; 0x58
 800852a:	f040 81e1 	bne.w	80088f0 <_svfprintf_r+0x654>
 800852e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008530:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008532:	1a2f      	subs	r7, r5, r0
 8008534:	2f00      	cmp	r7, #0
 8008536:	f340 81db 	ble.w	80088f0 <_svfprintf_r+0x654>
 800853a:	2f10      	cmp	r7, #16
 800853c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800853e:	f340 873b 	ble.w	80093b8 <_svfprintf_r+0x111c>
 8008542:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008544:	f04f 0910 	mov.w	r9, #16
 8008548:	f8df 8428 	ldr.w	r8, [pc, #1064]	; 8008974 <_svfprintf_r+0x6d8>
 800854c:	4623      	mov	r3, r4
 800854e:	4644      	mov	r4, r8
 8008550:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008554:	e002      	b.n	800855c <_svfprintf_r+0x2c0>
 8008556:	3f10      	subs	r7, #16
 8008558:	2f10      	cmp	r7, #16
 800855a:	dd15      	ble.n	8008588 <_svfprintf_r+0x2ec>
 800855c:	3301      	adds	r3, #1
 800855e:	e886 0210 	stmia.w	r6, {r4, r9}
 8008562:	3510      	adds	r5, #16
 8008564:	3608      	adds	r6, #8
 8008566:	2b07      	cmp	r3, #7
 8008568:	933e      	str	r3, [sp, #248]	; 0xf8
 800856a:	953f      	str	r5, [sp, #252]	; 0xfc
 800856c:	ddf3      	ble.n	8008556 <_svfprintf_r+0x2ba>
 800856e:	4640      	mov	r0, r8
 8008570:	4659      	mov	r1, fp
 8008572:	aa3d      	add	r2, sp, #244	; 0xf4
 8008574:	ae23      	add	r6, sp, #140	; 0x8c
 8008576:	f004 f84b 	bl	800c610 <__ssprint_r>
 800857a:	2800      	cmp	r0, #0
 800857c:	d18c      	bne.n	8008498 <_svfprintf_r+0x1fc>
 800857e:	3f10      	subs	r7, #16
 8008580:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008582:	2f10      	cmp	r7, #16
 8008584:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008586:	dce9      	bgt.n	800855c <_svfprintf_r+0x2c0>
 8008588:	46a0      	mov	r8, r4
 800858a:	461c      	mov	r4, r3
 800858c:	3401      	adds	r4, #1
 800858e:	f8c6 8000 	str.w	r8, [r6]
 8008592:	2c07      	cmp	r4, #7
 8008594:	6077      	str	r7, [r6, #4]
 8008596:	443d      	add	r5, r7
 8008598:	943e      	str	r4, [sp, #248]	; 0xf8
 800859a:	953f      	str	r5, [sp, #252]	; 0xfc
 800859c:	f300 8434 	bgt.w	8008e08 <_svfprintf_r+0xb6c>
 80085a0:	3608      	adds	r6, #8
 80085a2:	e1a6      	b.n	80088f2 <_svfprintf_r+0x656>
 80085a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80085a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80085a8:	06ea      	lsls	r2, r5, #27
 80085aa:	f140 813c 	bpl.w	8008826 <_svfprintf_r+0x58a>
 80085ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	3504      	adds	r5, #4
 80085b4:	2201      	movs	r2, #1
 80085b6:	1c19      	adds	r1, r3, #0
 80085b8:	9511      	str	r5, [sp, #68]	; 0x44
 80085ba:	bf18      	it	ne
 80085bc:	2101      	movne	r1, #1
 80085be:	2000      	movs	r0, #0
 80085c0:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	bfa2      	ittt	ge
 80085c8:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 80085ca:	f025 0580 	bicge.w	r5, r5, #128	; 0x80
 80085ce:	950a      	strge	r5, [sp, #40]	; 0x28
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	bf18      	it	ne
 80085d4:	f041 0101 	orrne.w	r1, r1, #1
 80085d8:	2900      	cmp	r1, #0
 80085da:	f000 82c8 	beq.w	8008b6e <_svfprintf_r+0x8d2>
 80085de:	2a01      	cmp	r2, #1
 80085e0:	f000 8406 	beq.w	8008df0 <_svfprintf_r+0xb54>
 80085e4:	2a02      	cmp	r2, #2
 80085e6:	bf18      	it	ne
 80085e8:	aa3d      	addne	r2, sp, #244	; 0xf4
 80085ea:	d101      	bne.n	80085f0 <_svfprintf_r+0x354>
 80085ec:	e3f0      	b.n	8008dd0 <_svfprintf_r+0xb34>
 80085ee:	4602      	mov	r2, r0
 80085f0:	f003 0107 	and.w	r1, r3, #7
 80085f4:	1e50      	subs	r0, r2, #1
 80085f6:	3130      	adds	r1, #48	; 0x30
 80085f8:	08db      	lsrs	r3, r3, #3
 80085fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80085fe:	d1f6      	bne.n	80085ee <_svfprintf_r+0x352>
 8008600:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008602:	9013      	str	r0, [sp, #76]	; 0x4c
 8008604:	07ed      	lsls	r5, r5, #31
 8008606:	f100 84f4 	bmi.w	8008ff2 <_svfprintf_r+0xd56>
 800860a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860c:	1a1b      	subs	r3, r3, r0
 800860e:	930e      	str	r3, [sp, #56]	; 0x38
 8008610:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008612:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008616:	42a5      	cmp	r5, r4
 8008618:	bfb8      	it	lt
 800861a:	4625      	movlt	r5, r4
 800861c:	9414      	str	r4, [sp, #80]	; 0x50
 800861e:	950b      	str	r5, [sp, #44]	; 0x2c
 8008620:	2500      	movs	r5, #0
 8008622:	9518      	str	r5, [sp, #96]	; 0x60
 8008624:	e771      	b.n	800850a <_svfprintf_r+0x26e>
 8008626:	9317      	str	r3, [sp, #92]	; 0x5c
 8008628:	2b00      	cmp	r3, #0
 800862a:	f43f af2e 	beq.w	800848a <_svfprintf_r+0x1ee>
 800862e:	2501      	movs	r5, #1
 8008630:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 8008634:	950b      	str	r5, [sp, #44]	; 0x2c
 8008636:	2300      	movs	r3, #0
 8008638:	950e      	str	r5, [sp, #56]	; 0x38
 800863a:	ad33      	add	r5, sp, #204	; 0xcc
 800863c:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8008640:	9513      	str	r5, [sp, #76]	; 0x4c
 8008642:	2300      	movs	r3, #0
 8008644:	9314      	str	r3, [sp, #80]	; 0x50
 8008646:	9318      	str	r3, [sp, #96]	; 0x60
 8008648:	e763      	b.n	8008512 <_svfprintf_r+0x276>
 800864a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800864e:	2b00      	cmp	r3, #0
 8008650:	f47f ae9b 	bne.w	800838a <_svfprintf_r+0xee>
 8008654:	f88d 711f 	strb.w	r7, [sp, #287]	; 0x11f
 8008658:	e697      	b.n	800838a <_svfprintf_r+0xee>
 800865a:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800865e:	2b2a      	cmp	r3, #42	; 0x2a
 8008660:	f000 813a 	beq.w	80088d8 <_svfprintf_r+0x63c>
 8008664:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008668:	2400      	movs	r4, #0
 800866a:	2a09      	cmp	r2, #9
 800866c:	f63f ae8f 	bhi.w	800838e <_svfprintf_r+0xf2>
 8008670:	4650      	mov	r0, sl
 8008672:	2400      	movs	r4, #0
 8008674:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800867c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008680:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008684:	2a09      	cmp	r2, #9
 8008686:	4682      	mov	sl, r0
 8008688:	d9f4      	bls.n	8008674 <_svfprintf_r+0x3d8>
 800868a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800868e:	e67e      	b.n	800838e <_svfprintf_r+0xf2>
 8008690:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008692:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008696:	950a      	str	r5, [sp, #40]	; 0x28
 8008698:	e677      	b.n	800838a <_svfprintf_r+0xee>
 800869a:	4650      	mov	r0, sl
 800869c:	2200      	movs	r2, #0
 800869e:	46b4      	mov	ip, r6
 80086a0:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80086a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80086ac:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80086b0:	4682      	mov	sl, r0
 80086b2:	2d09      	cmp	r5, #9
 80086b4:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80086b8:	d9f2      	bls.n	80086a0 <_svfprintf_r+0x404>
 80086ba:	4666      	mov	r6, ip
 80086bc:	920c      	str	r2, [sp, #48]	; 0x30
 80086be:	e666      	b.n	800838e <_svfprintf_r+0xf2>
 80086c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80086c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80086c4:	f045 0510 	orr.w	r5, r5, #16
 80086c8:	950a      	str	r5, [sp, #40]	; 0x28
 80086ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80086cc:	06e8      	lsls	r0, r5, #27
 80086ce:	d561      	bpl.n	8008794 <_svfprintf_r+0x4f8>
 80086d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	3504      	adds	r5, #4
 80086d6:	9511      	str	r5, [sp, #68]	; 0x44
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db67      	blt.n	80087ac <_svfprintf_r+0x510>
 80086dc:	bf0c      	ite	eq
 80086de:	2100      	moveq	r1, #0
 80086e0:	2101      	movne	r1, #1
 80086e2:	2201      	movs	r2, #1
 80086e4:	e76e      	b.n	80085c4 <_svfprintf_r+0x328>
 80086e6:	4d9f      	ldr	r5, [pc, #636]	; (8008964 <_svfprintf_r+0x6c8>)
 80086e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80086ea:	9520      	str	r5, [sp, #128]	; 0x80
 80086ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80086ee:	06eb      	lsls	r3, r5, #27
 80086f0:	d575      	bpl.n	80087de <_svfprintf_r+0x542>
 80086f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	3504      	adds	r5, #4
 80086f8:	9511      	str	r5, [sp, #68]	; 0x44
 80086fa:	1c19      	adds	r1, r3, #0
 80086fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80086fe:	bf18      	it	ne
 8008700:	2101      	movne	r1, #1
 8008702:	2202      	movs	r2, #2
 8008704:	420d      	tst	r5, r1
 8008706:	f43f af5a 	beq.w	80085be <_svfprintf_r+0x322>
 800870a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800870c:	2230      	movs	r2, #48	; 0x30
 800870e:	2101      	movs	r1, #1
 8008710:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 8008714:	2202      	movs	r2, #2
 8008716:	f88d 511d 	strb.w	r5, [sp, #285]	; 0x11d
 800871a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800871c:	f045 0502 	orr.w	r5, r5, #2
 8008720:	950a      	str	r5, [sp, #40]	; 0x28
 8008722:	e74c      	b.n	80085be <_svfprintf_r+0x322>
 8008724:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008726:	06e8      	lsls	r0, r5, #27
 8008728:	f100 83a3 	bmi.w	8008e72 <_svfprintf_r+0xbd6>
 800872c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800872e:	0669      	lsls	r1, r5, #25
 8008730:	f140 839f 	bpl.w	8008e72 <_svfprintf_r+0xbd6>
 8008734:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	3504      	adds	r5, #4
 800873a:	9511      	str	r5, [sp, #68]	; 0x44
 800873c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800873e:	801d      	strh	r5, [r3, #0]
 8008740:	e5e3      	b.n	800830a <_svfprintf_r+0x6e>
 8008742:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008744:	9317      	str	r3, [sp, #92]	; 0x5c
 8008746:	f045 0510 	orr.w	r5, r5, #16
 800874a:	950a      	str	r5, [sp, #40]	; 0x28
 800874c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800874e:	f015 0110 	ands.w	r1, r5, #16
 8008752:	d00d      	beq.n	8008770 <_svfprintf_r+0x4d4>
 8008754:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008756:	2200      	movs	r2, #0
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	3504      	adds	r5, #4
 800875c:	9511      	str	r5, [sp, #68]	; 0x44
 800875e:	1a99      	subs	r1, r3, r2
 8008760:	bf18      	it	ne
 8008762:	2101      	movne	r1, #1
 8008764:	e72b      	b.n	80085be <_svfprintf_r+0x322>
 8008766:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008768:	9317      	str	r3, [sp, #92]	; 0x5c
 800876a:	f015 0110 	ands.w	r1, r5, #16
 800876e:	d1f1      	bne.n	8008754 <_svfprintf_r+0x4b8>
 8008770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008772:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 8008776:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008778:	bf1a      	itte	ne
 800877a:	460a      	movne	r2, r1
 800877c:	882b      	ldrhne	r3, [r5, #0]
 800877e:	682b      	ldreq	r3, [r5, #0]
 8008780:	3504      	adds	r5, #4
 8008782:	9511      	str	r5, [sp, #68]	; 0x44
 8008784:	1c19      	adds	r1, r3, #0
 8008786:	bf18      	it	ne
 8008788:	2101      	movne	r1, #1
 800878a:	e718      	b.n	80085be <_svfprintf_r+0x322>
 800878c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800878e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008790:	06e8      	lsls	r0, r5, #27
 8008792:	d49d      	bmi.n	80086d0 <_svfprintf_r+0x434>
 8008794:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008796:	f015 0f40 	tst.w	r5, #64	; 0x40
 800879a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800879c:	bf0c      	ite	eq
 800879e:	682b      	ldreq	r3, [r5, #0]
 80087a0:	f9b5 3000 	ldrshne.w	r3, [r5]
 80087a4:	3504      	adds	r5, #4
 80087a6:	9511      	str	r5, [sp, #68]	; 0x44
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da97      	bge.n	80086dc <_svfprintf_r+0x440>
 80087ac:	425b      	negs	r3, r3
 80087ae:	1c19      	adds	r1, r3, #0
 80087b0:	bf18      	it	ne
 80087b2:	2101      	movne	r1, #1
 80087b4:	222d      	movs	r2, #45	; 0x2d
 80087b6:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 80087ba:	2201      	movs	r2, #1
 80087bc:	e702      	b.n	80085c4 <_svfprintf_r+0x328>
 80087be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087c0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80087c4:	950a      	str	r5, [sp, #40]	; 0x28
 80087c6:	e5e0      	b.n	800838a <_svfprintf_r+0xee>
 80087c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087ca:	f045 0501 	orr.w	r5, r5, #1
 80087ce:	950a      	str	r5, [sp, #40]	; 0x28
 80087d0:	e5db      	b.n	800838a <_svfprintf_r+0xee>
 80087d2:	4d65      	ldr	r5, [pc, #404]	; (8008968 <_svfprintf_r+0x6cc>)
 80087d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80087d6:	9520      	str	r5, [sp, #128]	; 0x80
 80087d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087da:	06eb      	lsls	r3, r5, #27
 80087dc:	d489      	bmi.n	80086f2 <_svfprintf_r+0x456>
 80087de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087e0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087e6:	bf0c      	ite	eq
 80087e8:	682b      	ldreq	r3, [r5, #0]
 80087ea:	882b      	ldrhne	r3, [r5, #0]
 80087ec:	3504      	adds	r5, #4
 80087ee:	9511      	str	r5, [sp, #68]	; 0x44
 80087f0:	e783      	b.n	80086fa <_svfprintf_r+0x45e>
 80087f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80087f4:	2501      	movs	r5, #1
 80087f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80087fa:	1d1d      	adds	r5, r3, #4
 80087fc:	9511      	str	r5, [sp, #68]	; 0x44
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	2501      	movs	r5, #1
 8008802:	2300      	movs	r3, #0
 8008804:	950e      	str	r5, [sp, #56]	; 0x38
 8008806:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800880a:	ad33      	add	r5, sp, #204	; 0xcc
 800880c:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 8008810:	9513      	str	r5, [sp, #76]	; 0x4c
 8008812:	e716      	b.n	8008642 <_svfprintf_r+0x3a6>
 8008814:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008816:	9317      	str	r3, [sp, #92]	; 0x5c
 8008818:	f045 0510 	orr.w	r5, r5, #16
 800881c:	950a      	str	r5, [sp, #40]	; 0x28
 800881e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008820:	06ea      	lsls	r2, r5, #27
 8008822:	f53f aec4 	bmi.w	80085ae <_svfprintf_r+0x312>
 8008826:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008828:	f015 0f40 	tst.w	r5, #64	; 0x40
 800882c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800882e:	bf14      	ite	ne
 8008830:	882b      	ldrhne	r3, [r5, #0]
 8008832:	682b      	ldreq	r3, [r5, #0]
 8008834:	e6bd      	b.n	80085b2 <_svfprintf_r+0x316>
 8008836:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008838:	9317      	str	r3, [sp, #92]	; 0x5c
 800883a:	1deb      	adds	r3, r5, #7
 800883c:	f023 0307 	bic.w	r3, r3, #7
 8008840:	f103 0508 	add.w	r5, r3, #8
 8008844:	9511      	str	r5, [sp, #68]	; 0x44
 8008846:	f8d3 8000 	ldr.w	r8, [r3]
 800884a:	685f      	ldr	r7, [r3, #4]
 800884c:	4640      	mov	r0, r8
 800884e:	4642      	mov	r2, r8
 8008850:	4639      	mov	r1, r7
 8008852:	463b      	mov	r3, r7
 8008854:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8008858:	f003 fe4c 	bl	800c4f4 <__fpclassifyd>
 800885c:	2801      	cmp	r0, #1
 800885e:	4640      	mov	r0, r8
 8008860:	f040 83d4 	bne.w	800900c <_svfprintf_r+0xd70>
 8008864:	2300      	movs	r3, #0
 8008866:	2200      	movs	r2, #0
 8008868:	4639      	mov	r1, r7
 800886a:	f005 fa35 	bl	800dcd8 <__aeabi_dcmplt>
 800886e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008872:	b110      	cbz	r0, 800887a <_svfprintf_r+0x5de>
 8008874:	232d      	movs	r3, #45	; 0x2d
 8008876:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800887a:	2503      	movs	r5, #3
 800887c:	950b      	str	r5, [sp, #44]	; 0x2c
 800887e:	2500      	movs	r5, #0
 8008880:	9514      	str	r5, [sp, #80]	; 0x50
 8008882:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008884:	4a39      	ldr	r2, [pc, #228]	; (800896c <_svfprintf_r+0x6d0>)
 8008886:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800888a:	4939      	ldr	r1, [pc, #228]	; (8008970 <_svfprintf_r+0x6d4>)
 800888c:	950a      	str	r5, [sp, #40]	; 0x28
 800888e:	2503      	movs	r5, #3
 8008890:	950e      	str	r5, [sp, #56]	; 0x38
 8008892:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008894:	2d47      	cmp	r5, #71	; 0x47
 8008896:	bfd8      	it	le
 8008898:	4611      	movle	r1, r2
 800889a:	2500      	movs	r5, #0
 800889c:	9113      	str	r1, [sp, #76]	; 0x4c
 800889e:	9518      	str	r5, [sp, #96]	; 0x60
 80088a0:	e633      	b.n	800850a <_svfprintf_r+0x26e>
 80088a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088a4:	f045 0508 	orr.w	r5, r5, #8
 80088a8:	950a      	str	r5, [sp, #40]	; 0x28
 80088aa:	e56e      	b.n	800838a <_svfprintf_r+0xee>
 80088ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ae:	2078      	movs	r0, #120	; 0x78
 80088b0:	2230      	movs	r2, #48	; 0x30
 80088b2:	9017      	str	r0, [sp, #92]	; 0x5c
 80088b4:	1d1d      	adds	r5, r3, #4
 80088b6:	9511      	str	r5, [sp, #68]	; 0x44
 80088b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f045 0502 	orr.w	r5, r5, #2
 80088c0:	950a      	str	r5, [sp, #40]	; 0x28
 80088c2:	4d28      	ldr	r5, [pc, #160]	; (8008964 <_svfprintf_r+0x6c8>)
 80088c4:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 80088c8:	2202      	movs	r2, #2
 80088ca:	1c19      	adds	r1, r3, #0
 80088cc:	f88d 011d 	strb.w	r0, [sp, #285]	; 0x11d
 80088d0:	bf18      	it	ne
 80088d2:	2101      	movne	r1, #1
 80088d4:	9520      	str	r5, [sp, #128]	; 0x80
 80088d6:	e672      	b.n	80085be <_svfprintf_r+0x322>
 80088d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80088da:	1d2b      	adds	r3, r5, #4
 80088dc:	682c      	ldr	r4, [r5, #0]
 80088de:	2c00      	cmp	r4, #0
 80088e0:	bfbc      	itt	lt
 80088e2:	9311      	strlt	r3, [sp, #68]	; 0x44
 80088e4:	f04f 34ff 	movlt.w	r4, #4294967295
 80088e8:	f6ff ad4f 	blt.w	800838a <_svfprintf_r+0xee>
 80088ec:	9311      	str	r3, [sp, #68]	; 0x44
 80088ee:	e54c      	b.n	800838a <_svfprintf_r+0xee>
 80088f0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80088f2:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80088f6:	b16b      	cbz	r3, 8008914 <_svfprintf_r+0x678>
 80088f8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80088fa:	ab47      	add	r3, sp, #284	; 0x11c
 80088fc:	3303      	adds	r3, #3
 80088fe:	6033      	str	r3, [r6, #0]
 8008900:	3401      	adds	r4, #1
 8008902:	2301      	movs	r3, #1
 8008904:	2c07      	cmp	r4, #7
 8008906:	6073      	str	r3, [r6, #4]
 8008908:	441d      	add	r5, r3
 800890a:	943e      	str	r4, [sp, #248]	; 0xf8
 800890c:	953f      	str	r5, [sp, #252]	; 0xfc
 800890e:	f300 81f8 	bgt.w	8008d02 <_svfprintf_r+0xa66>
 8008912:	3608      	adds	r6, #8
 8008914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008916:	b163      	cbz	r3, 8008932 <_svfprintf_r+0x696>
 8008918:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800891a:	ab47      	add	r3, sp, #284	; 0x11c
 800891c:	6033      	str	r3, [r6, #0]
 800891e:	2302      	movs	r3, #2
 8008920:	3401      	adds	r4, #1
 8008922:	6073      	str	r3, [r6, #4]
 8008924:	2c07      	cmp	r4, #7
 8008926:	441d      	add	r5, r3
 8008928:	943e      	str	r4, [sp, #248]	; 0xf8
 800892a:	953f      	str	r5, [sp, #252]	; 0xfc
 800892c:	f300 81f4 	bgt.w	8008d18 <_svfprintf_r+0xa7c>
 8008930:	3608      	adds	r6, #8
 8008932:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008934:	2b80      	cmp	r3, #128	; 0x80
 8008936:	f000 812e 	beq.w	8008b96 <_svfprintf_r+0x8fa>
 800893a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800893c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800893e:	1a1f      	subs	r7, r3, r0
 8008940:	2f00      	cmp	r7, #0
 8008942:	dd42      	ble.n	80089ca <_svfprintf_r+0x72e>
 8008944:	2f10      	cmp	r7, #16
 8008946:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008948:	bfd8      	it	le
 800894a:	f8df 802c 	ldrle.w	r8, [pc, #44]	; 8008978 <_svfprintf_r+0x6dc>
 800894e:	dd31      	ble.n	80089b4 <_svfprintf_r+0x718>
 8008950:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8008978 <_svfprintf_r+0x6dc>
 8008954:	4623      	mov	r3, r4
 8008956:	f04f 0910 	mov.w	r9, #16
 800895a:	4644      	mov	r4, r8
 800895c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008960:	e00f      	b.n	8008982 <_svfprintf_r+0x6e6>
 8008962:	bf00      	nop
 8008964:	0801c658 	.word	0x0801c658
 8008968:	0801c644 	.word	0x0801c644
 800896c:	0801c634 	.word	0x0801c634
 8008970:	0801c638 	.word	0x0801c638
 8008974:	08018538 	.word	0x08018538
 8008978:	08018548 	.word	0x08018548
 800897c:	3f10      	subs	r7, #16
 800897e:	2f10      	cmp	r7, #16
 8008980:	dd16      	ble.n	80089b0 <_svfprintf_r+0x714>
 8008982:	3301      	adds	r3, #1
 8008984:	e886 0210 	stmia.w	r6, {r4, r9}
 8008988:	3510      	adds	r5, #16
 800898a:	3608      	adds	r6, #8
 800898c:	2b07      	cmp	r3, #7
 800898e:	933e      	str	r3, [sp, #248]	; 0xf8
 8008990:	953f      	str	r5, [sp, #252]	; 0xfc
 8008992:	ddf3      	ble.n	800897c <_svfprintf_r+0x6e0>
 8008994:	4640      	mov	r0, r8
 8008996:	4659      	mov	r1, fp
 8008998:	aa3d      	add	r2, sp, #244	; 0xf4
 800899a:	ae23      	add	r6, sp, #140	; 0x8c
 800899c:	f003 fe38 	bl	800c610 <__ssprint_r>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f47f ad79 	bne.w	8008498 <_svfprintf_r+0x1fc>
 80089a6:	3f10      	subs	r7, #16
 80089a8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80089aa:	2f10      	cmp	r7, #16
 80089ac:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80089ae:	dce8      	bgt.n	8008982 <_svfprintf_r+0x6e6>
 80089b0:	46a0      	mov	r8, r4
 80089b2:	461c      	mov	r4, r3
 80089b4:	3401      	adds	r4, #1
 80089b6:	f8c6 8000 	str.w	r8, [r6]
 80089ba:	2c07      	cmp	r4, #7
 80089bc:	6077      	str	r7, [r6, #4]
 80089be:	443d      	add	r5, r7
 80089c0:	943e      	str	r4, [sp, #248]	; 0xf8
 80089c2:	953f      	str	r5, [sp, #252]	; 0xfc
 80089c4:	f300 8192 	bgt.w	8008cec <_svfprintf_r+0xa50>
 80089c8:	3608      	adds	r6, #8
 80089ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089cc:	05ca      	lsls	r2, r1, #23
 80089ce:	d475      	bmi.n	8008abc <_svfprintf_r+0x820>
 80089d0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80089d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d4:	3401      	adds	r4, #1
 80089d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80089d8:	2c07      	cmp	r4, #7
 80089da:	441d      	add	r5, r3
 80089dc:	6073      	str	r3, [r6, #4]
 80089de:	6030      	str	r0, [r6, #0]
 80089e0:	953f      	str	r5, [sp, #252]	; 0xfc
 80089e2:	943e      	str	r4, [sp, #248]	; 0xf8
 80089e4:	dc5f      	bgt.n	8008aa6 <_svfprintf_r+0x80a>
 80089e6:	3608      	adds	r6, #8
 80089e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089ea:	074b      	lsls	r3, r1, #29
 80089ec:	d541      	bpl.n	8008a72 <_svfprintf_r+0x7d6>
 80089ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f2:	1ad7      	subs	r7, r2, r3
 80089f4:	2f00      	cmp	r7, #0
 80089f6:	dd3c      	ble.n	8008a72 <_svfprintf_r+0x7d6>
 80089f8:	2f10      	cmp	r7, #16
 80089fa:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80089fc:	bfd8      	it	le
 80089fe:	f8df 8334 	ldrle.w	r8, [pc, #820]	; 8008d34 <_svfprintf_r+0xa98>
 8008a02:	dd24      	ble.n	8008a4e <_svfprintf_r+0x7b2>
 8008a04:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8008d34 <_svfprintf_r+0xa98>
 8008a08:	4623      	mov	r3, r4
 8008a0a:	f04f 0910 	mov.w	r9, #16
 8008a0e:	4644      	mov	r4, r8
 8008a10:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008a14:	e002      	b.n	8008a1c <_svfprintf_r+0x780>
 8008a16:	3f10      	subs	r7, #16
 8008a18:	2f10      	cmp	r7, #16
 8008a1a:	dd16      	ble.n	8008a4a <_svfprintf_r+0x7ae>
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	e886 0210 	stmia.w	r6, {r4, r9}
 8008a22:	3510      	adds	r5, #16
 8008a24:	3608      	adds	r6, #8
 8008a26:	2b07      	cmp	r3, #7
 8008a28:	933e      	str	r3, [sp, #248]	; 0xf8
 8008a2a:	953f      	str	r5, [sp, #252]	; 0xfc
 8008a2c:	ddf3      	ble.n	8008a16 <_svfprintf_r+0x77a>
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4659      	mov	r1, fp
 8008a32:	aa3d      	add	r2, sp, #244	; 0xf4
 8008a34:	ae23      	add	r6, sp, #140	; 0x8c
 8008a36:	f003 fdeb 	bl	800c610 <__ssprint_r>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f47f ad2c 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008a40:	3f10      	subs	r7, #16
 8008a42:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008a44:	2f10      	cmp	r7, #16
 8008a46:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008a48:	dce8      	bgt.n	8008a1c <_svfprintf_r+0x780>
 8008a4a:	46a0      	mov	r8, r4
 8008a4c:	461c      	mov	r4, r3
 8008a4e:	3401      	adds	r4, #1
 8008a50:	f8c6 8000 	str.w	r8, [r6]
 8008a54:	2c07      	cmp	r4, #7
 8008a56:	6077      	str	r7, [r6, #4]
 8008a58:	443d      	add	r5, r7
 8008a5a:	943e      	str	r4, [sp, #248]	; 0xf8
 8008a5c:	953f      	str	r5, [sp, #252]	; 0xfc
 8008a5e:	dd08      	ble.n	8008a72 <_svfprintf_r+0x7d6>
 8008a60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008a62:	4659      	mov	r1, fp
 8008a64:	aa3d      	add	r2, sp, #244	; 0xf4
 8008a66:	f003 fdd3 	bl	800c610 <__ssprint_r>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f47f ad14 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008a70:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008a72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a78:	4291      	cmp	r1, r2
 8008a7a:	bfac      	ite	ge
 8008a7c:	1840      	addge	r0, r0, r1
 8008a7e:	1880      	addlt	r0, r0, r2
 8008a80:	900d      	str	r0, [sp, #52]	; 0x34
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	f040 8124 	bne.w	8008cd0 <_svfprintf_r+0xa34>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	ae23      	add	r6, sp, #140	; 0x8c
 8008a8c:	933e      	str	r3, [sp, #248]	; 0xf8
 8008a8e:	e43c      	b.n	800830a <_svfprintf_r+0x6e>
 8008a90:	46a0      	mov	r8, r4
 8008a92:	461c      	mov	r4, r3
 8008a94:	3401      	adds	r4, #1
 8008a96:	f8c6 8000 	str.w	r8, [r6]
 8008a9a:	2c07      	cmp	r4, #7
 8008a9c:	6077      	str	r7, [r6, #4]
 8008a9e:	443d      	add	r5, r7
 8008aa0:	943e      	str	r4, [sp, #248]	; 0xf8
 8008aa2:	953f      	str	r5, [sp, #252]	; 0xfc
 8008aa4:	dd9f      	ble.n	80089e6 <_svfprintf_r+0x74a>
 8008aa6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	aa3d      	add	r2, sp, #244	; 0xf4
 8008aac:	f003 fdb0 	bl	800c610 <__ssprint_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f47f acf1 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008ab6:	ae23      	add	r6, sp, #140	; 0x8c
 8008ab8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008aba:	e795      	b.n	80089e8 <_svfprintf_r+0x74c>
 8008abc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008abe:	2965      	cmp	r1, #101	; 0x65
 8008ac0:	f340 80a6 	ble.w	8008c10 <_svfprintf_r+0x974>
 8008ac4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2300      	movs	r3, #0
 8008acc:	f005 f8fa 	bl	800dcc4 <__aeabi_dcmpeq>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f000 8133 	beq.w	8008d3c <_svfprintf_r+0xaa0>
 8008ad6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ad8:	2301      	movs	r3, #1
 8008ada:	6073      	str	r3, [r6, #4]
 8008adc:	3501      	adds	r5, #1
 8008ade:	3401      	adds	r4, #1
 8008ae0:	4b93      	ldr	r3, [pc, #588]	; (8008d30 <_svfprintf_r+0xa94>)
 8008ae2:	2c07      	cmp	r4, #7
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	953f      	str	r5, [sp, #252]	; 0xfc
 8008ae8:	943e      	str	r4, [sp, #248]	; 0xf8
 8008aea:	f300 82b8 	bgt.w	800905e <_svfprintf_r+0xdc2>
 8008aee:	3608      	adds	r6, #8
 8008af0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8008af2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008af4:	429a      	cmp	r2, r3
 8008af6:	dc03      	bgt.n	8008b00 <_svfprintf_r+0x864>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afa:	07db      	lsls	r3, r3, #31
 8008afc:	f57f af74 	bpl.w	80089e8 <_svfprintf_r+0x74c>
 8008b00:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b02:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008b04:	3401      	adds	r4, #1
 8008b06:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008b08:	2c07      	cmp	r4, #7
 8008b0a:	4405      	add	r5, r0
 8008b0c:	6070      	str	r0, [r6, #4]
 8008b0e:	6031      	str	r1, [r6, #0]
 8008b10:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b12:	943e      	str	r4, [sp, #248]	; 0xf8
 8008b14:	f300 8303 	bgt.w	800911e <_svfprintf_r+0xe82>
 8008b18:	3608      	adds	r6, #8
 8008b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b1c:	1e57      	subs	r7, r2, #1
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	f77f af62 	ble.w	80089e8 <_svfprintf_r+0x74c>
 8008b24:	2f10      	cmp	r7, #16
 8008b26:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b28:	f340 84e0 	ble.w	80094ec <_svfprintf_r+0x1250>
 8008b2c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8008d38 <_svfprintf_r+0xa9c>
 8008b30:	4623      	mov	r3, r4
 8008b32:	f04f 0910 	mov.w	r9, #16
 8008b36:	4644      	mov	r4, r8
 8008b38:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008b3c:	e002      	b.n	8008b44 <_svfprintf_r+0x8a8>
 8008b3e:	3f10      	subs	r7, #16
 8008b40:	2f10      	cmp	r7, #16
 8008b42:	dda5      	ble.n	8008a90 <_svfprintf_r+0x7f4>
 8008b44:	3301      	adds	r3, #1
 8008b46:	e886 0210 	stmia.w	r6, {r4, r9}
 8008b4a:	3510      	adds	r5, #16
 8008b4c:	3608      	adds	r6, #8
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	933e      	str	r3, [sp, #248]	; 0xf8
 8008b52:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b54:	ddf3      	ble.n	8008b3e <_svfprintf_r+0x8a2>
 8008b56:	4640      	mov	r0, r8
 8008b58:	4659      	mov	r1, fp
 8008b5a:	aa3d      	add	r2, sp, #244	; 0xf4
 8008b5c:	ae23      	add	r6, sp, #140	; 0x8c
 8008b5e:	f003 fd57 	bl	800c610 <__ssprint_r>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f47f ac98 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008b68:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008b6a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008b6c:	e7e7      	b.n	8008b3e <_svfprintf_r+0x8a2>
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	f040 80b8 	bne.w	8008ce4 <_svfprintf_r+0xa48>
 8008b74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b76:	07e9      	lsls	r1, r5, #31
 8008b78:	bf5e      	ittt	pl
 8008b7a:	920e      	strpl	r2, [sp, #56]	; 0x38
 8008b7c:	ad3d      	addpl	r5, sp, #244	; 0xf4
 8008b7e:	9513      	strpl	r5, [sp, #76]	; 0x4c
 8008b80:	f57f ad46 	bpl.w	8008610 <_svfprintf_r+0x374>
 8008b84:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008b86:	2330      	movs	r3, #48	; 0x30
 8008b88:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8008b8c:	950e      	str	r5, [sp, #56]	; 0x38
 8008b8e:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008b92:	9513      	str	r5, [sp, #76]	; 0x4c
 8008b94:	e53c      	b.n	8008610 <_svfprintf_r+0x374>
 8008b96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b9a:	1a47      	subs	r7, r0, r1
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	f77f aecc 	ble.w	800893a <_svfprintf_r+0x69e>
 8008ba2:	2f10      	cmp	r7, #16
 8008ba4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ba6:	bfd8      	it	le
 8008ba8:	f8df 818c 	ldrle.w	r8, [pc, #396]	; 8008d38 <_svfprintf_r+0xa9c>
 8008bac:	dd24      	ble.n	8008bf8 <_svfprintf_r+0x95c>
 8008bae:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8008d38 <_svfprintf_r+0xa9c>
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	f04f 0910 	mov.w	r9, #16
 8008bb8:	4644      	mov	r4, r8
 8008bba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008bbe:	e002      	b.n	8008bc6 <_svfprintf_r+0x92a>
 8008bc0:	3f10      	subs	r7, #16
 8008bc2:	2f10      	cmp	r7, #16
 8008bc4:	dd16      	ble.n	8008bf4 <_svfprintf_r+0x958>
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	e886 0210 	stmia.w	r6, {r4, r9}
 8008bcc:	3510      	adds	r5, #16
 8008bce:	3608      	adds	r6, #8
 8008bd0:	2b07      	cmp	r3, #7
 8008bd2:	933e      	str	r3, [sp, #248]	; 0xf8
 8008bd4:	953f      	str	r5, [sp, #252]	; 0xfc
 8008bd6:	ddf3      	ble.n	8008bc0 <_svfprintf_r+0x924>
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4659      	mov	r1, fp
 8008bdc:	aa3d      	add	r2, sp, #244	; 0xf4
 8008bde:	ae23      	add	r6, sp, #140	; 0x8c
 8008be0:	f003 fd16 	bl	800c610 <__ssprint_r>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f47f ac57 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008bea:	3f10      	subs	r7, #16
 8008bec:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008bee:	2f10      	cmp	r7, #16
 8008bf0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008bf2:	dce8      	bgt.n	8008bc6 <_svfprintf_r+0x92a>
 8008bf4:	46a0      	mov	r8, r4
 8008bf6:	461c      	mov	r4, r3
 8008bf8:	3401      	adds	r4, #1
 8008bfa:	f8c6 8000 	str.w	r8, [r6]
 8008bfe:	2c07      	cmp	r4, #7
 8008c00:	6077      	str	r7, [r6, #4]
 8008c02:	443d      	add	r5, r7
 8008c04:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c06:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c08:	f300 81e8 	bgt.w	8008fdc <_svfprintf_r+0xd40>
 8008c0c:	3608      	adds	r6, #8
 8008c0e:	e694      	b.n	800893a <_svfprintf_r+0x69e>
 8008c10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c12:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	f340 8196 	ble.w	8008f46 <_svfprintf_r+0xcaa>
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c1e:	3501      	adds	r5, #1
 8008c20:	2301      	movs	r3, #1
 8008c22:	2c07      	cmp	r4, #7
 8008c24:	6073      	str	r3, [r6, #4]
 8008c26:	6031      	str	r1, [r6, #0]
 8008c28:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c2a:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c2c:	f300 81a6 	bgt.w	8008f7c <_svfprintf_r+0xce0>
 8008c30:	3608      	adds	r6, #8
 8008c32:	3401      	adds	r4, #1
 8008c34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008c36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c38:	2c07      	cmp	r4, #7
 8008c3a:	441d      	add	r5, r3
 8008c3c:	6073      	str	r3, [r6, #4]
 8008c3e:	6032      	str	r2, [r6, #0]
 8008c40:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c42:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c44:	f300 81a6 	bgt.w	8008f94 <_svfprintf_r+0xcf8>
 8008c48:	3608      	adds	r6, #8
 8008c4a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2300      	movs	r3, #0
 8008c52:	f005 f837 	bl	800dcc4 <__aeabi_dcmpeq>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f040 80e1 	bne.w	8008e1e <_svfprintf_r+0xb82>
 8008c5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c5e:	3401      	adds	r4, #1
 8008c60:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c62:	1e42      	subs	r2, r0, #1
 8008c64:	6072      	str	r2, [r6, #4]
 8008c66:	1c4b      	adds	r3, r1, #1
 8008c68:	2c07      	cmp	r4, #7
 8008c6a:	6033      	str	r3, [r6, #0]
 8008c6c:	4415      	add	r5, r2
 8008c6e:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c70:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c72:	dc21      	bgt.n	8008cb8 <_svfprintf_r+0xa1c>
 8008c74:	3608      	adds	r6, #8
 8008c76:	3401      	adds	r4, #1
 8008c78:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008c7a:	2c07      	cmp	r4, #7
 8008c7c:	ab40      	add	r3, sp, #256	; 0x100
 8008c7e:	4405      	add	r5, r0
 8008c80:	6033      	str	r3, [r6, #0]
 8008c82:	6070      	str	r0, [r6, #4]
 8008c84:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c86:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c88:	f77f aead 	ble.w	80089e6 <_svfprintf_r+0x74a>
 8008c8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c8e:	4659      	mov	r1, fp
 8008c90:	aa3d      	add	r2, sp, #244	; 0xf4
 8008c92:	f003 fcbd 	bl	800c610 <__ssprint_r>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f47f abfe 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008c9c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008c9e:	ae23      	add	r6, sp, #140	; 0x8c
 8008ca0:	e6a2      	b.n	80089e8 <_svfprintf_r+0x74c>
 8008ca2:	46a0      	mov	r8, r4
 8008ca4:	461c      	mov	r4, r3
 8008ca6:	3401      	adds	r4, #1
 8008ca8:	f8c6 8000 	str.w	r8, [r6]
 8008cac:	2c07      	cmp	r4, #7
 8008cae:	6077      	str	r7, [r6, #4]
 8008cb0:	443d      	add	r5, r7
 8008cb2:	943e      	str	r4, [sp, #248]	; 0xf8
 8008cb4:	953f      	str	r5, [sp, #252]	; 0xfc
 8008cb6:	dddd      	ble.n	8008c74 <_svfprintf_r+0x9d8>
 8008cb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cba:	4659      	mov	r1, fp
 8008cbc:	aa3d      	add	r2, sp, #244	; 0xf4
 8008cbe:	f003 fca7 	bl	800c610 <__ssprint_r>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f47f abe8 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008cc8:	ae23      	add	r6, sp, #140	; 0x8c
 8008cca:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008ccc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008cce:	e7d2      	b.n	8008c76 <_svfprintf_r+0x9da>
 8008cd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cd2:	4659      	mov	r1, fp
 8008cd4:	aa3d      	add	r2, sp, #244	; 0xf4
 8008cd6:	f003 fc9b 	bl	800c610 <__ssprint_r>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f43f aed4 	beq.w	8008a88 <_svfprintf_r+0x7ec>
 8008ce0:	f7ff bbda 	b.w	8008498 <_svfprintf_r+0x1fc>
 8008ce4:	ad3d      	add	r5, sp, #244	; 0xf4
 8008ce6:	910e      	str	r1, [sp, #56]	; 0x38
 8008ce8:	9513      	str	r5, [sp, #76]	; 0x4c
 8008cea:	e491      	b.n	8008610 <_svfprintf_r+0x374>
 8008cec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cee:	4659      	mov	r1, fp
 8008cf0:	aa3d      	add	r2, sp, #244	; 0xf4
 8008cf2:	f003 fc8d 	bl	800c610 <__ssprint_r>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f47f abce 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008cfc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008cfe:	ae23      	add	r6, sp, #140	; 0x8c
 8008d00:	e663      	b.n	80089ca <_svfprintf_r+0x72e>
 8008d02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d04:	4659      	mov	r1, fp
 8008d06:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d08:	f003 fc82 	bl	800c610 <__ssprint_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f47f abc3 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008d12:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d14:	ae23      	add	r6, sp, #140	; 0x8c
 8008d16:	e5fd      	b.n	8008914 <_svfprintf_r+0x678>
 8008d18:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d1e:	f003 fc77 	bl	800c610 <__ssprint_r>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f47f abb8 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008d28:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d2a:	ae23      	add	r6, sp, #140	; 0x8c
 8008d2c:	e601      	b.n	8008932 <_svfprintf_r+0x696>
 8008d2e:	bf00      	nop
 8008d30:	0801c674 	.word	0x0801c674
 8008d34:	08018538 	.word	0x08018538
 8008d38:	08018548 	.word	0x08018548
 8008d3c:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	f340 8198 	ble.w	8009074 <_svfprintf_r+0xdd8>
 8008d44:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d48:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008d4a:	428f      	cmp	r7, r1
 8008d4c:	bfa8      	it	ge
 8008d4e:	460f      	movge	r7, r1
 8008d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d52:	2f00      	cmp	r7, #0
 8008d54:	4403      	add	r3, r0
 8008d56:	930e      	str	r3, [sp, #56]	; 0x38
 8008d58:	dd0a      	ble.n	8008d70 <_svfprintf_r+0xad4>
 8008d5a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008d5c:	19ed      	adds	r5, r5, r7
 8008d5e:	6030      	str	r0, [r6, #0]
 8008d60:	3401      	adds	r4, #1
 8008d62:	6077      	str	r7, [r6, #4]
 8008d64:	2c07      	cmp	r4, #7
 8008d66:	953f      	str	r5, [sp, #252]	; 0xfc
 8008d68:	943e      	str	r4, [sp, #248]	; 0xf8
 8008d6a:	f300 832a 	bgt.w	80093c2 <_svfprintf_r+0x1126>
 8008d6e:	3608      	adds	r6, #8
 8008d70:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d72:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008d76:	1bcf      	subs	r7, r1, r7
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	f340 808c 	ble.w	8008e96 <_svfprintf_r+0xbfa>
 8008d7e:	2f10      	cmp	r7, #16
 8008d80:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008d82:	bfd8      	it	le
 8008d84:	f8df 8538 	ldrle.w	r8, [pc, #1336]	; 80092c0 <_svfprintf_r+0x1024>
 8008d88:	f340 815d 	ble.w	8009046 <_svfprintf_r+0xdaa>
 8008d8c:	f8df 8530 	ldr.w	r8, [pc, #1328]	; 80092c0 <_svfprintf_r+0x1024>
 8008d90:	4623      	mov	r3, r4
 8008d92:	f04f 0910 	mov.w	r9, #16
 8008d96:	4644      	mov	r4, r8
 8008d98:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008d9c:	e003      	b.n	8008da6 <_svfprintf_r+0xb0a>
 8008d9e:	3f10      	subs	r7, #16
 8008da0:	2f10      	cmp	r7, #16
 8008da2:	f340 814e 	ble.w	8009042 <_svfprintf_r+0xda6>
 8008da6:	3301      	adds	r3, #1
 8008da8:	e886 0210 	stmia.w	r6, {r4, r9}
 8008dac:	3510      	adds	r5, #16
 8008dae:	3608      	adds	r6, #8
 8008db0:	2b07      	cmp	r3, #7
 8008db2:	933e      	str	r3, [sp, #248]	; 0xf8
 8008db4:	953f      	str	r5, [sp, #252]	; 0xfc
 8008db6:	ddf2      	ble.n	8008d9e <_svfprintf_r+0xb02>
 8008db8:	4640      	mov	r0, r8
 8008dba:	4659      	mov	r1, fp
 8008dbc:	aa3d      	add	r2, sp, #244	; 0xf4
 8008dbe:	ae23      	add	r6, sp, #140	; 0x8c
 8008dc0:	f003 fc26 	bl	800c610 <__ssprint_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f47f ab67 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008dca:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008dcc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008dce:	e7e6      	b.n	8008d9e <_svfprintf_r+0xb02>
 8008dd0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008dd2:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 8008dd6:	f003 000f 	and.w	r0, r3, #15
 8008dda:	460a      	mov	r2, r1
 8008ddc:	3901      	subs	r1, #1
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	5c28      	ldrb	r0, [r5, r0]
 8008de2:	7010      	strb	r0, [r2, #0]
 8008de4:	d1f7      	bne.n	8008dd6 <_svfprintf_r+0xb3a>
 8008de6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008de8:	9213      	str	r2, [sp, #76]	; 0x4c
 8008dea:	1aad      	subs	r5, r5, r2
 8008dec:	950e      	str	r5, [sp, #56]	; 0x38
 8008dee:	e40f      	b.n	8008610 <_svfprintf_r+0x374>
 8008df0:	2b09      	cmp	r3, #9
 8008df2:	f200 80db 	bhi.w	8008fac <_svfprintf_r+0xd10>
 8008df6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008df8:	3330      	adds	r3, #48	; 0x30
 8008dfa:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8008dfe:	950e      	str	r5, [sp, #56]	; 0x38
 8008e00:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008e04:	9513      	str	r5, [sp, #76]	; 0x4c
 8008e06:	e403      	b.n	8008610 <_svfprintf_r+0x374>
 8008e08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e0e:	f003 fbff 	bl	800c610 <__ssprint_r>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f47f ab40 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008e18:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e1a:	ae23      	add	r6, sp, #140	; 0x8c
 8008e1c:	e569      	b.n	80088f2 <_svfprintf_r+0x656>
 8008e1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e20:	1e57      	subs	r7, r2, #1
 8008e22:	2f00      	cmp	r7, #0
 8008e24:	f77f af27 	ble.w	8008c76 <_svfprintf_r+0x9da>
 8008e28:	2f10      	cmp	r7, #16
 8008e2a:	f8df 8494 	ldr.w	r8, [pc, #1172]	; 80092c0 <_svfprintf_r+0x1024>
 8008e2e:	f77f af3a 	ble.w	8008ca6 <_svfprintf_r+0xa0a>
 8008e32:	4623      	mov	r3, r4
 8008e34:	f04f 0910 	mov.w	r9, #16
 8008e38:	4644      	mov	r4, r8
 8008e3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008e3e:	e003      	b.n	8008e48 <_svfprintf_r+0xbac>
 8008e40:	3f10      	subs	r7, #16
 8008e42:	2f10      	cmp	r7, #16
 8008e44:	f77f af2d 	ble.w	8008ca2 <_svfprintf_r+0xa06>
 8008e48:	3301      	adds	r3, #1
 8008e4a:	e886 0210 	stmia.w	r6, {r4, r9}
 8008e4e:	3510      	adds	r5, #16
 8008e50:	3608      	adds	r6, #8
 8008e52:	2b07      	cmp	r3, #7
 8008e54:	933e      	str	r3, [sp, #248]	; 0xf8
 8008e56:	953f      	str	r5, [sp, #252]	; 0xfc
 8008e58:	ddf2      	ble.n	8008e40 <_svfprintf_r+0xba4>
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e60:	ae23      	add	r6, sp, #140	; 0x8c
 8008e62:	f003 fbd5 	bl	800c610 <__ssprint_r>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f47f ab16 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008e6c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e6e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008e70:	e7e6      	b.n	8008e40 <_svfprintf_r+0xba4>
 8008e72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	3504      	adds	r5, #4
 8008e78:	9511      	str	r5, [sp, #68]	; 0x44
 8008e7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008e7c:	601d      	str	r5, [r3, #0]
 8008e7e:	f7ff ba44 	b.w	800830a <_svfprintf_r+0x6e>
 8008e82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e84:	4659      	mov	r1, fp
 8008e86:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e88:	f003 fbc2 	bl	800c610 <__ssprint_r>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	f47f ab03 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008e92:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e94:	ae23      	add	r6, sp, #140	; 0x8c
 8008e96:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8008e98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	dc45      	bgt.n	8008f2a <_svfprintf_r+0xc8e>
 8008e9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ea0:	07c1      	lsls	r1, r0, #31
 8008ea2:	d442      	bmi.n	8008f2a <_svfprintf_r+0xc8e>
 8008ea4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ea6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008ea8:	180a      	adds	r2, r1, r0
 8008eaa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008eac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008eae:	1ac3      	subs	r3, r0, r3
 8008eb0:	1a8f      	subs	r7, r1, r2
 8008eb2:	42bb      	cmp	r3, r7
 8008eb4:	bfb8      	it	lt
 8008eb6:	461f      	movlt	r7, r3
 8008eb8:	2f00      	cmp	r7, #0
 8008eba:	dd0a      	ble.n	8008ed2 <_svfprintf_r+0xc36>
 8008ebc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ebe:	19ed      	adds	r5, r5, r7
 8008ec0:	6032      	str	r2, [r6, #0]
 8008ec2:	3401      	adds	r4, #1
 8008ec4:	6077      	str	r7, [r6, #4]
 8008ec6:	2c07      	cmp	r4, #7
 8008ec8:	953f      	str	r5, [sp, #252]	; 0xfc
 8008eca:	943e      	str	r4, [sp, #248]	; 0xf8
 8008ecc:	f300 8284 	bgt.w	80093d8 <_svfprintf_r+0x113c>
 8008ed0:	3608      	adds	r6, #8
 8008ed2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008ed6:	1bdf      	subs	r7, r3, r7
 8008ed8:	2f00      	cmp	r7, #0
 8008eda:	f77f ad85 	ble.w	80089e8 <_svfprintf_r+0x74c>
 8008ede:	2f10      	cmp	r7, #16
 8008ee0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ee2:	f340 8303 	ble.w	80094ec <_svfprintf_r+0x1250>
 8008ee6:	f8df 83d8 	ldr.w	r8, [pc, #984]	; 80092c0 <_svfprintf_r+0x1024>
 8008eea:	4623      	mov	r3, r4
 8008eec:	f04f 0910 	mov.w	r9, #16
 8008ef0:	4644      	mov	r4, r8
 8008ef2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008ef6:	e003      	b.n	8008f00 <_svfprintf_r+0xc64>
 8008ef8:	3f10      	subs	r7, #16
 8008efa:	2f10      	cmp	r7, #16
 8008efc:	f77f adc8 	ble.w	8008a90 <_svfprintf_r+0x7f4>
 8008f00:	3301      	adds	r3, #1
 8008f02:	e886 0210 	stmia.w	r6, {r4, r9}
 8008f06:	3510      	adds	r5, #16
 8008f08:	3608      	adds	r6, #8
 8008f0a:	2b07      	cmp	r3, #7
 8008f0c:	933e      	str	r3, [sp, #248]	; 0xf8
 8008f0e:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f10:	ddf2      	ble.n	8008ef8 <_svfprintf_r+0xc5c>
 8008f12:	4640      	mov	r0, r8
 8008f14:	4659      	mov	r1, fp
 8008f16:	aa3d      	add	r2, sp, #244	; 0xf4
 8008f18:	ae23      	add	r6, sp, #140	; 0x8c
 8008f1a:	f003 fb79 	bl	800c610 <__ssprint_r>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f47f aaba 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008f24:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008f26:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008f28:	e7e6      	b.n	8008ef8 <_svfprintf_r+0xc5c>
 8008f2a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f2e:	3401      	adds	r4, #1
 8008f30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f32:	2c07      	cmp	r4, #7
 8008f34:	440d      	add	r5, r1
 8008f36:	6071      	str	r1, [r6, #4]
 8008f38:	6032      	str	r2, [r6, #0]
 8008f3a:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f3c:	943e      	str	r4, [sp, #248]	; 0xf8
 8008f3e:	f300 826c 	bgt.w	800941a <_svfprintf_r+0x117e>
 8008f42:	3608      	adds	r6, #8
 8008f44:	e7ae      	b.n	8008ea4 <_svfprintf_r+0xc08>
 8008f46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f48:	07c2      	lsls	r2, r0, #31
 8008f4a:	f53f ae66 	bmi.w	8008c1a <_svfprintf_r+0x97e>
 8008f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f50:	3401      	adds	r4, #1
 8008f52:	3501      	adds	r5, #1
 8008f54:	6033      	str	r3, [r6, #0]
 8008f56:	2301      	movs	r3, #1
 8008f58:	2c07      	cmp	r4, #7
 8008f5a:	6073      	str	r3, [r6, #4]
 8008f5c:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f5e:	943e      	str	r4, [sp, #248]	; 0xf8
 8008f60:	f77f ae88 	ble.w	8008c74 <_svfprintf_r+0x9d8>
 8008f64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f66:	4659      	mov	r1, fp
 8008f68:	aa3d      	add	r2, sp, #244	; 0xf4
 8008f6a:	f003 fb51 	bl	800c610 <__ssprint_r>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f47f aa92 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008f74:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008f76:	ae23      	add	r6, sp, #140	; 0x8c
 8008f78:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f7a:	e67c      	b.n	8008c76 <_svfprintf_r+0x9da>
 8008f7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f7e:	4659      	mov	r1, fp
 8008f80:	aa3d      	add	r2, sp, #244	; 0xf4
 8008f82:	f003 fb45 	bl	800c610 <__ssprint_r>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f47f aa86 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008f8c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008f8e:	ae23      	add	r6, sp, #140	; 0x8c
 8008f90:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f92:	e64e      	b.n	8008c32 <_svfprintf_r+0x996>
 8008f94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f96:	4659      	mov	r1, fp
 8008f98:	aa3d      	add	r2, sp, #244	; 0xf4
 8008f9a:	f003 fb39 	bl	800c610 <__ssprint_r>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f47f aa7a 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008fa4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008fa6:	ae23      	add	r6, sp, #140	; 0x8c
 8008fa8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008faa:	e64e      	b.n	8008c4a <_svfprintf_r+0x9ae>
 8008fac:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008fae:	f10d 00f3 	add.w	r0, sp, #243	; 0xf3
 8008fb2:	fba5 1203 	umull	r1, r2, r5, r3
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	3801      	subs	r0, #1
 8008fba:	08d2      	lsrs	r2, r2, #3
 8008fbc:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8008fc0:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008fca:	700a      	strb	r2, [r1, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f0      	bne.n	8008fb2 <_svfprintf_r+0xd16>
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	9113      	str	r1, [sp, #76]	; 0x4c
 8008fd4:	1a5b      	subs	r3, r3, r1
 8008fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8008fd8:	f7ff bb1a 	b.w	8008610 <_svfprintf_r+0x374>
 8008fdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008fde:	4659      	mov	r1, fp
 8008fe0:	aa3d      	add	r2, sp, #244	; 0xf4
 8008fe2:	f003 fb15 	bl	800c610 <__ssprint_r>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f47f aa56 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8008fec:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008fee:	ae23      	add	r6, sp, #140	; 0x8c
 8008ff0:	e4a3      	b.n	800893a <_svfprintf_r+0x69e>
 8008ff2:	2930      	cmp	r1, #48	; 0x30
 8008ff4:	f000 81fe 	beq.w	80093f4 <_svfprintf_r+0x1158>
 8008ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffa:	1e95      	subs	r5, r2, #2
 8008ffc:	9513      	str	r5, [sp, #76]	; 0x4c
 8008ffe:	1b5b      	subs	r3, r3, r5
 8009000:	930e      	str	r3, [sp, #56]	; 0x38
 8009002:	2330      	movs	r3, #48	; 0x30
 8009004:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009008:	f7ff bb02 	b.w	8008610 <_svfprintf_r+0x374>
 800900c:	4639      	mov	r1, r7
 800900e:	f003 fa71 	bl	800c4f4 <__fpclassifyd>
 8009012:	2800      	cmp	r0, #0
 8009014:	f040 808e 	bne.w	8009134 <_svfprintf_r+0xe98>
 8009018:	2503      	movs	r5, #3
 800901a:	950b      	str	r5, [sp, #44]	; 0x2c
 800901c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800901e:	4aa5      	ldr	r2, [pc, #660]	; (80092b4 <_svfprintf_r+0x1018>)
 8009020:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8009024:	49a4      	ldr	r1, [pc, #656]	; (80092b8 <_svfprintf_r+0x101c>)
 8009026:	950a      	str	r5, [sp, #40]	; 0x28
 8009028:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800902a:	9014      	str	r0, [sp, #80]	; 0x50
 800902c:	2d47      	cmp	r5, #71	; 0x47
 800902e:	bfd8      	it	le
 8009030:	4611      	movle	r1, r2
 8009032:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8009036:	2503      	movs	r5, #3
 8009038:	9113      	str	r1, [sp, #76]	; 0x4c
 800903a:	950e      	str	r5, [sp, #56]	; 0x38
 800903c:	9018      	str	r0, [sp, #96]	; 0x60
 800903e:	f7ff ba64 	b.w	800850a <_svfprintf_r+0x26e>
 8009042:	46a0      	mov	r8, r4
 8009044:	461c      	mov	r4, r3
 8009046:	3401      	adds	r4, #1
 8009048:	f8c6 8000 	str.w	r8, [r6]
 800904c:	2c07      	cmp	r4, #7
 800904e:	6077      	str	r7, [r6, #4]
 8009050:	443d      	add	r5, r7
 8009052:	943e      	str	r4, [sp, #248]	; 0xf8
 8009054:	953f      	str	r5, [sp, #252]	; 0xfc
 8009056:	f73f af14 	bgt.w	8008e82 <_svfprintf_r+0xbe6>
 800905a:	3608      	adds	r6, #8
 800905c:	e71b      	b.n	8008e96 <_svfprintf_r+0xbfa>
 800905e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009060:	4659      	mov	r1, fp
 8009062:	aa3d      	add	r2, sp, #244	; 0xf4
 8009064:	f003 fad4 	bl	800c610 <__ssprint_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	f47f aa15 	bne.w	8008498 <_svfprintf_r+0x1fc>
 800906e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009070:	ae23      	add	r6, sp, #140	; 0x8c
 8009072:	e53d      	b.n	8008af0 <_svfprintf_r+0x854>
 8009074:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009076:	2301      	movs	r3, #1
 8009078:	6073      	str	r3, [r6, #4]
 800907a:	3501      	adds	r5, #1
 800907c:	3401      	adds	r4, #1
 800907e:	4b8f      	ldr	r3, [pc, #572]	; (80092bc <_svfprintf_r+0x1020>)
 8009080:	2c07      	cmp	r4, #7
 8009082:	6033      	str	r3, [r6, #0]
 8009084:	953f      	str	r5, [sp, #252]	; 0xfc
 8009086:	943e      	str	r4, [sp, #248]	; 0xf8
 8009088:	f300 8152 	bgt.w	8009330 <_svfprintf_r+0x1094>
 800908c:	3608      	adds	r6, #8
 800908e:	b92f      	cbnz	r7, 800909c <_svfprintf_r+0xe00>
 8009090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009092:	b91b      	cbnz	r3, 800909c <_svfprintf_r+0xe00>
 8009094:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009096:	07c0      	lsls	r0, r0, #31
 8009098:	f57f aca6 	bpl.w	80089e8 <_svfprintf_r+0x74c>
 800909c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800909e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090a0:	3401      	adds	r4, #1
 80090a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090a4:	2c07      	cmp	r4, #7
 80090a6:	440d      	add	r5, r1
 80090a8:	6071      	str	r1, [r6, #4]
 80090aa:	6032      	str	r2, [r6, #0]
 80090ac:	953f      	str	r5, [sp, #252]	; 0xfc
 80090ae:	943e      	str	r4, [sp, #248]	; 0xf8
 80090b0:	f300 81fb 	bgt.w	80094aa <_svfprintf_r+0x120e>
 80090b4:	3608      	adds	r6, #8
 80090b6:	427f      	negs	r7, r7
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	f340 8169 	ble.w	8009390 <_svfprintf_r+0x10f4>
 80090be:	2f10      	cmp	r7, #16
 80090c0:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80092c0 <_svfprintf_r+0x1024>
 80090c4:	f340 819e 	ble.w	8009404 <_svfprintf_r+0x1168>
 80090c8:	4623      	mov	r3, r4
 80090ca:	f04f 0910 	mov.w	r9, #16
 80090ce:	4644      	mov	r4, r8
 80090d0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80090d4:	e003      	b.n	80090de <_svfprintf_r+0xe42>
 80090d6:	3f10      	subs	r7, #16
 80090d8:	2f10      	cmp	r7, #16
 80090da:	f340 8191 	ble.w	8009400 <_svfprintf_r+0x1164>
 80090de:	3301      	adds	r3, #1
 80090e0:	e886 0210 	stmia.w	r6, {r4, r9}
 80090e4:	3510      	adds	r5, #16
 80090e6:	3608      	adds	r6, #8
 80090e8:	2b07      	cmp	r3, #7
 80090ea:	933e      	str	r3, [sp, #248]	; 0xf8
 80090ec:	953f      	str	r5, [sp, #252]	; 0xfc
 80090ee:	ddf2      	ble.n	80090d6 <_svfprintf_r+0xe3a>
 80090f0:	4640      	mov	r0, r8
 80090f2:	4659      	mov	r1, fp
 80090f4:	aa3d      	add	r2, sp, #244	; 0xf4
 80090f6:	f003 fa8b 	bl	800c610 <__ssprint_r>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f47f a9cc 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8009100:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009102:	ae23      	add	r6, sp, #140	; 0x8c
 8009104:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8009106:	e7e6      	b.n	80090d6 <_svfprintf_r+0xe3a>
 8009108:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800910a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800910e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009110:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009112:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8009116:	9711      	str	r7, [sp, #68]	; 0x44
 8009118:	9518      	str	r5, [sp, #96]	; 0x60
 800911a:	f7ff b9f6 	b.w	800850a <_svfprintf_r+0x26e>
 800911e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009120:	4659      	mov	r1, fp
 8009122:	aa3d      	add	r2, sp, #244	; 0xf4
 8009124:	f003 fa74 	bl	800c610 <__ssprint_r>
 8009128:	2800      	cmp	r0, #0
 800912a:	f47f a9b5 	bne.w	8008498 <_svfprintf_r+0x1fc>
 800912e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009130:	ae23      	add	r6, sp, #140	; 0x8c
 8009132:	e4f2      	b.n	8008b1a <_svfprintf_r+0x87e>
 8009134:	1c61      	adds	r1, r4, #1
 8009136:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009138:	f000 8106 	beq.w	8009348 <_svfprintf_r+0x10ac>
 800913c:	f1a5 0967 	sub.w	r9, r5, #103	; 0x67
 8009140:	f1d9 0300 	rsbs	r3, r9, #0
 8009144:	eb43 0309 	adc.w	r3, r3, r9
 8009148:	2d47      	cmp	r5, #71	; 0x47
 800914a:	bf08      	it	eq
 800914c:	f043 0301 	orreq.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 81a8 	beq.w	80094a6 <_svfprintf_r+0x120a>
 8009156:	2c00      	cmp	r4, #0
 8009158:	f000 81c5 	beq.w	80094e6 <_svfprintf_r+0x124a>
 800915c:	2501      	movs	r5, #1
 800915e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009160:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009162:	2f00      	cmp	r7, #0
 8009164:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8009168:	950a      	str	r5, [sp, #40]	; 0x28
 800916a:	f2c0 81ab 	blt.w	80094c4 <_svfprintf_r+0x1228>
 800916e:	2500      	movs	r5, #0
 8009170:	9514      	str	r5, [sp, #80]	; 0x50
 8009172:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009174:	46a1      	mov	r9, r4
 8009176:	f1a5 0c66 	sub.w	ip, r5, #102	; 0x66
 800917a:	f1dc 0500 	rsbs	r5, ip, #0
 800917e:	eb45 050c 	adc.w	r5, r5, ip
 8009182:	9515      	str	r5, [sp, #84]	; 0x54
 8009184:	46ac      	mov	ip, r5
 8009186:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009188:	2303      	movs	r3, #3
 800918a:	2d46      	cmp	r5, #70	; 0x46
 800918c:	bf08      	it	eq
 800918e:	f04c 0c01 	orreq.w	ip, ip, #1
 8009192:	f1bc 0f00 	cmp.w	ip, #0
 8009196:	d10f      	bne.n	80091b8 <_svfprintf_r+0xf1c>
 8009198:	f1a5 0e65 	sub.w	lr, r5, #101	; 0x65
 800919c:	f1de 0300 	rsbs	r3, lr, #0
 80091a0:	eb43 030e 	adc.w	r3, r3, lr
 80091a4:	2d45      	cmp	r5, #69	; 0x45
 80091a6:	bf08      	it	eq
 80091a8:	f043 0301 	orreq.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 818e 	beq.w	80094ce <_svfprintf_r+0x1232>
 80091b2:	f104 0901 	add.w	r9, r4, #1
 80091b6:	2302      	movs	r3, #2
 80091b8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091bc:	a944      	add	r1, sp, #272	; 0x110
 80091be:	970f      	str	r7, [sp, #60]	; 0x3c
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091c8:	9102      	str	r1, [sp, #8]
 80091ca:	a945      	add	r1, sp, #276	; 0x114
 80091cc:	f8cd c01c 	str.w	ip, [sp, #28]
 80091d0:	9103      	str	r1, [sp, #12]
 80091d2:	a946      	add	r1, sp, #280	; 0x118
 80091d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80091d8:	9104      	str	r1, [sp, #16]
 80091da:	f001 f95b 	bl	800a494 <_dtoa_r>
 80091de:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80091e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80091e4:	f1b5 0367 	subs.w	r3, r5, #103	; 0x67
 80091e8:	bf18      	it	ne
 80091ea:	2301      	movne	r3, #1
 80091ec:	2d47      	cmp	r5, #71	; 0x47
 80091ee:	bf0c      	ite	eq
 80091f0:	2300      	moveq	r3, #0
 80091f2:	f003 0301 	andne.w	r3, r3, #1
 80091f6:	9013      	str	r0, [sp, #76]	; 0x4c
 80091f8:	b923      	cbnz	r3, 8009204 <_svfprintf_r+0xf68>
 80091fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80091fc:	07ed      	lsls	r5, r5, #31
 80091fe:	bf58      	it	pl
 8009200:	9d46      	ldrpl	r5, [sp, #280]	; 0x118
 8009202:	d515      	bpl.n	8009230 <_svfprintf_r+0xf94>
 8009204:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009206:	eb00 0509 	add.w	r5, r0, r9
 800920a:	f1bc 0f00 	cmp.w	ip, #0
 800920e:	d005      	beq.n	800921c <_svfprintf_r+0xf80>
 8009210:	7803      	ldrb	r3, [r0, #0]
 8009212:	2b30      	cmp	r3, #48	; 0x30
 8009214:	f000 80a4 	beq.w	8009360 <_svfprintf_r+0x10c4>
 8009218:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800921a:	18ed      	adds	r5, r5, r3
 800921c:	4640      	mov	r0, r8
 800921e:	2200      	movs	r2, #0
 8009220:	2300      	movs	r3, #0
 8009222:	4639      	mov	r1, r7
 8009224:	f004 fd4e 	bl	800dcc4 <__aeabi_dcmpeq>
 8009228:	2800      	cmp	r0, #0
 800922a:	f000 8124 	beq.w	8009476 <_svfprintf_r+0x11da>
 800922e:	9546      	str	r5, [sp, #280]	; 0x118
 8009230:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009232:	1a6d      	subs	r5, r5, r1
 8009234:	9512      	str	r5, [sp, #72]	; 0x48
 8009236:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009238:	2d00      	cmp	r5, #0
 800923a:	f000 8106 	beq.w	800944a <_svfprintf_r+0x11ae>
 800923e:	9944      	ldr	r1, [sp, #272]	; 0x110
 8009240:	1cc8      	adds	r0, r1, #3
 8009242:	db02      	blt.n	800924a <_svfprintf_r+0xfae>
 8009244:	428c      	cmp	r4, r1
 8009246:	f280 8107 	bge.w	8009458 <_svfprintf_r+0x11bc>
 800924a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800924c:	3d02      	subs	r5, #2
 800924e:	9517      	str	r5, [sp, #92]	; 0x5c
 8009250:	3901      	subs	r1, #1
 8009252:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009254:	2900      	cmp	r1, #0
 8009256:	9144      	str	r1, [sp, #272]	; 0x110
 8009258:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
 800925c:	f2c0 8175 	blt.w	800954a <_svfprintf_r+0x12ae>
 8009260:	232b      	movs	r3, #43	; 0x2b
 8009262:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8009266:	2909      	cmp	r1, #9
 8009268:	f340 8134 	ble.w	80094d4 <_svfprintf_r+0x1238>
 800926c:	ad43      	add	r5, sp, #268	; 0x10c
 800926e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009270:	3503      	adds	r5, #3
 8009272:	4628      	mov	r0, r5
 8009274:	fb87 3201 	smull	r3, r2, r7, r1
 8009278:	17cb      	asrs	r3, r1, #31
 800927a:	4604      	mov	r4, r0
 800927c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8009280:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009284:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8009288:	4619      	mov	r1, r3
 800928a:	3230      	adds	r2, #48	; 0x30
 800928c:	2b09      	cmp	r3, #9
 800928e:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8009292:	dcef      	bgt.n	8009274 <_svfprintf_r+0xfd8>
 8009294:	3130      	adds	r1, #48	; 0x30
 8009296:	4622      	mov	r2, r4
 8009298:	b2c9      	uxtb	r1, r1
 800929a:	f802 1d02 	strb.w	r1, [r2, #-2]!
 800929e:	4295      	cmp	r5, r2
 80092a0:	bf98      	it	ls
 80092a2:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 80092a6:	d914      	bls.n	80092d2 <_svfprintf_r+0x1036>
 80092a8:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 80092ac:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 80092b0:	e00a      	b.n	80092c8 <_svfprintf_r+0x102c>
 80092b2:	bf00      	nop
 80092b4:	0801c63c 	.word	0x0801c63c
 80092b8:	0801c640 	.word	0x0801c640
 80092bc:	0801c674 	.word	0x0801c674
 80092c0:	08018548 	.word	0x08018548
 80092c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80092c8:	4282      	cmp	r2, r0
 80092ca:	f803 1b01 	strb.w	r1, [r3], #1
 80092ce:	4619      	mov	r1, r3
 80092d0:	d1f8      	bne.n	80092c4 <_svfprintf_r+0x1028>
 80092d2:	ab40      	add	r3, sp, #256	; 0x100
 80092d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80092d6:	1acb      	subs	r3, r1, r3
 80092d8:	931f      	str	r3, [sp, #124]	; 0x7c
 80092da:	195d      	adds	r5, r3, r5
 80092dc:	950e      	str	r5, [sp, #56]	; 0x38
 80092de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80092e0:	2d01      	cmp	r5, #1
 80092e2:	f340 8127 	ble.w	8009534 <_svfprintf_r+0x1298>
 80092e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e8:	2500      	movs	r5, #0
 80092ea:	9518      	str	r5, [sp, #96]	; 0x60
 80092ec:	3301      	adds	r3, #1
 80092ee:	930e      	str	r3, [sp, #56]	; 0x38
 80092f0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80092f4:	950b      	str	r5, [sp, #44]	; 0x2c
 80092f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80092f8:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	f43f a904 	beq.w	800850a <_svfprintf_r+0x26e>
 8009302:	2300      	movs	r3, #0
 8009304:	9314      	str	r3, [sp, #80]	; 0x50
 8009306:	232d      	movs	r3, #45	; 0x2d
 8009308:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800930c:	f7ff b8fe 	b.w	800850c <_svfprintf_r+0x270>
 8009310:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009312:	2140      	movs	r1, #64	; 0x40
 8009314:	f7fd fe70 	bl	8006ff8 <_malloc_r>
 8009318:	f8cb 0000 	str.w	r0, [fp]
 800931c:	f8cb 0010 	str.w	r0, [fp, #16]
 8009320:	2800      	cmp	r0, #0
 8009322:	f000 8136 	beq.w	8009592 <_svfprintf_r+0x12f6>
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	f8cb 3014 	str.w	r3, [fp, #20]
 800932c:	f7fe bfd1 	b.w	80082d2 <_svfprintf_r+0x36>
 8009330:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009332:	4659      	mov	r1, fp
 8009334:	aa3d      	add	r2, sp, #244	; 0xf4
 8009336:	f003 f96b 	bl	800c610 <__ssprint_r>
 800933a:	2800      	cmp	r0, #0
 800933c:	f47f a8ac 	bne.w	8008498 <_svfprintf_r+0x1fc>
 8009340:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8009342:	ae23      	add	r6, sp, #140	; 0x8c
 8009344:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009346:	e6a2      	b.n	800908e <_svfprintf_r+0xdf2>
 8009348:	f1a5 0247 	sub.w	r2, r5, #71	; 0x47
 800934c:	4253      	negs	r3, r2
 800934e:	eb43 0302 	adc.w	r3, r3, r2
 8009352:	2406      	movs	r4, #6
 8009354:	2d67      	cmp	r5, #103	; 0x67
 8009356:	bf08      	it	eq
 8009358:	f043 0301 	orreq.w	r3, r3, #1
 800935c:	930b      	str	r3, [sp, #44]	; 0x2c
 800935e:	e6ff      	b.n	8009160 <_svfprintf_r+0xec4>
 8009360:	4640      	mov	r0, r8
 8009362:	2200      	movs	r2, #0
 8009364:	2300      	movs	r3, #0
 8009366:	4639      	mov	r1, r7
 8009368:	f004 fcac 	bl	800dcc4 <__aeabi_dcmpeq>
 800936c:	2800      	cmp	r0, #0
 800936e:	f47f af53 	bne.w	8009218 <_svfprintf_r+0xf7c>
 8009372:	f1c9 0301 	rsb	r3, r9, #1
 8009376:	9344      	str	r3, [sp, #272]	; 0x110
 8009378:	e74f      	b.n	800921a <_svfprintf_r+0xf7e>
 800937a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800937c:	4659      	mov	r1, fp
 800937e:	aa3d      	add	r2, sp, #244	; 0xf4
 8009380:	f003 f946 	bl	800c610 <__ssprint_r>
 8009384:	2800      	cmp	r0, #0
 8009386:	f47f a887 	bne.w	8008498 <_svfprintf_r+0x1fc>
 800938a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800938c:	ae23      	add	r6, sp, #140	; 0x8c
 800938e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009390:	3401      	adds	r4, #1
 8009392:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009396:	2c07      	cmp	r4, #7
 8009398:	4405      	add	r5, r0
 800939a:	6070      	str	r0, [r6, #4]
 800939c:	6033      	str	r3, [r6, #0]
 800939e:	943e      	str	r4, [sp, #248]	; 0xf8
 80093a0:	953f      	str	r5, [sp, #252]	; 0xfc
 80093a2:	f77f ab20 	ble.w	80089e6 <_svfprintf_r+0x74a>
 80093a6:	f7ff bb7e 	b.w	8008aa6 <_svfprintf_r+0x80a>
 80093aa:	9514      	str	r5, [sp, #80]	; 0x50
 80093ac:	f7fe fef2 	bl	8008194 <strlen>
 80093b0:	900e      	str	r0, [sp, #56]	; 0x38
 80093b2:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 80093b6:	e6aa      	b.n	800910e <_svfprintf_r+0xe72>
 80093b8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80093ba:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80095a8 <_svfprintf_r+0x130c>
 80093be:	f7ff b8e5 	b.w	800858c <_svfprintf_r+0x2f0>
 80093c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093c4:	4659      	mov	r1, fp
 80093c6:	aa3d      	add	r2, sp, #244	; 0xf4
 80093c8:	f003 f922 	bl	800c610 <__ssprint_r>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f47f a863 	bne.w	8008498 <_svfprintf_r+0x1fc>
 80093d2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80093d4:	ae23      	add	r6, sp, #140	; 0x8c
 80093d6:	e4cb      	b.n	8008d70 <_svfprintf_r+0xad4>
 80093d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093da:	4659      	mov	r1, fp
 80093dc:	aa3d      	add	r2, sp, #244	; 0xf4
 80093de:	f003 f917 	bl	800c610 <__ssprint_r>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f47f a858 	bne.w	8008498 <_svfprintf_r+0x1fc>
 80093e8:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80093ea:	ae23      	add	r6, sp, #140	; 0x8c
 80093ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093ee:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	e56e      	b.n	8008ed2 <_svfprintf_r+0xc36>
 80093f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80093f8:	1a2d      	subs	r5, r5, r0
 80093fa:	950e      	str	r5, [sp, #56]	; 0x38
 80093fc:	f7ff b908 	b.w	8008610 <_svfprintf_r+0x374>
 8009400:	46a0      	mov	r8, r4
 8009402:	461c      	mov	r4, r3
 8009404:	3401      	adds	r4, #1
 8009406:	f8c6 8000 	str.w	r8, [r6]
 800940a:	2c07      	cmp	r4, #7
 800940c:	6077      	str	r7, [r6, #4]
 800940e:	443d      	add	r5, r7
 8009410:	943e      	str	r4, [sp, #248]	; 0xf8
 8009412:	953f      	str	r5, [sp, #252]	; 0xfc
 8009414:	dcb1      	bgt.n	800937a <_svfprintf_r+0x10de>
 8009416:	3608      	adds	r6, #8
 8009418:	e7ba      	b.n	8009390 <_svfprintf_r+0x10f4>
 800941a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800941c:	4659      	mov	r1, fp
 800941e:	aa3d      	add	r2, sp, #244	; 0xf4
 8009420:	f003 f8f6 	bl	800c610 <__ssprint_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	f47f a837 	bne.w	8008498 <_svfprintf_r+0x1fc>
 800942a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800942c:	ae23      	add	r6, sp, #140	; 0x8c
 800942e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009430:	e538      	b.n	8008ea4 <_svfprintf_r+0xc08>
 8009432:	2c06      	cmp	r4, #6
 8009434:	bf28      	it	cs
 8009436:	2406      	movcs	r4, #6
 8009438:	9711      	str	r7, [sp, #68]	; 0x44
 800943a:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800943e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009440:	4d58      	ldr	r5, [pc, #352]	; (80095a4 <_svfprintf_r+0x1308>)
 8009442:	940e      	str	r4, [sp, #56]	; 0x38
 8009444:	9513      	str	r5, [sp, #76]	; 0x4c
 8009446:	f7ff b8fc 	b.w	8008642 <_svfprintf_r+0x3a6>
 800944a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800944c:	2d65      	cmp	r5, #101	; 0x65
 800944e:	dd6f      	ble.n	8009530 <_svfprintf_r+0x1294>
 8009450:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009452:	9944      	ldr	r1, [sp, #272]	; 0x110
 8009454:	2d00      	cmp	r5, #0
 8009456:	d15d      	bne.n	8009514 <_svfprintf_r+0x1278>
 8009458:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800945a:	428d      	cmp	r5, r1
 800945c:	dc4a      	bgt.n	80094f4 <_svfprintf_r+0x1258>
 800945e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009460:	07ed      	lsls	r5, r5, #31
 8009462:	d54f      	bpl.n	8009504 <_svfprintf_r+0x1268>
 8009464:	1c4b      	adds	r3, r1, #1
 8009466:	2567      	movs	r5, #103	; 0x67
 8009468:	930e      	str	r3, [sp, #56]	; 0x38
 800946a:	9517      	str	r5, [sp, #92]	; 0x5c
 800946c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8009470:	9118      	str	r1, [sp, #96]	; 0x60
 8009472:	950b      	str	r5, [sp, #44]	; 0x2c
 8009474:	e73f      	b.n	80092f6 <_svfprintf_r+0x105a>
 8009476:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009478:	429d      	cmp	r5, r3
 800947a:	bf98      	it	ls
 800947c:	461d      	movls	r5, r3
 800947e:	f67f aed7 	bls.w	8009230 <_svfprintf_r+0xf94>
 8009482:	2230      	movs	r2, #48	; 0x30
 8009484:	f803 2b01 	strb.w	r2, [r3], #1
 8009488:	42ab      	cmp	r3, r5
 800948a:	9346      	str	r3, [sp, #280]	; 0x118
 800948c:	d1fa      	bne.n	8009484 <_svfprintf_r+0x11e8>
 800948e:	e6cf      	b.n	8009230 <_svfprintf_r+0xf94>
 8009490:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8009494:	9014      	str	r0, [sp, #80]	; 0x50
 8009496:	950b      	str	r5, [sp, #44]	; 0x2c
 8009498:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800949c:	9711      	str	r7, [sp, #68]	; 0x44
 800949e:	940e      	str	r4, [sp, #56]	; 0x38
 80094a0:	9018      	str	r0, [sp, #96]	; 0x60
 80094a2:	f7ff b832 	b.w	800850a <_svfprintf_r+0x26e>
 80094a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a8:	e65a      	b.n	8009160 <_svfprintf_r+0xec4>
 80094aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094ac:	4659      	mov	r1, fp
 80094ae:	aa3d      	add	r2, sp, #244	; 0xf4
 80094b0:	f003 f8ae 	bl	800c610 <__ssprint_r>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	f47e afef 	bne.w	8008498 <_svfprintf_r+0x1fc>
 80094ba:	9f44      	ldr	r7, [sp, #272]	; 0x110
 80094bc:	ae23      	add	r6, sp, #140	; 0x8c
 80094be:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80094c0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80094c2:	e5f8      	b.n	80090b6 <_svfprintf_r+0xe1a>
 80094c4:	252d      	movs	r5, #45	; 0x2d
 80094c6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80094ca:	9514      	str	r5, [sp, #80]	; 0x50
 80094cc:	e651      	b.n	8009172 <_svfprintf_r+0xed6>
 80094ce:	46a1      	mov	r9, r4
 80094d0:	2302      	movs	r3, #2
 80094d2:	e671      	b.n	80091b8 <_svfprintf_r+0xf1c>
 80094d4:	f101 0230 	add.w	r2, r1, #48	; 0x30
 80094d8:	2330      	movs	r3, #48	; 0x30
 80094da:	a941      	add	r1, sp, #260	; 0x104
 80094dc:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 80094e0:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
 80094e4:	e6f5      	b.n	80092d2 <_svfprintf_r+0x1036>
 80094e6:	2401      	movs	r4, #1
 80094e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80094ea:	e639      	b.n	8009160 <_svfprintf_r+0xec4>
 80094ec:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80095ac <_svfprintf_r+0x1310>
 80094f0:	f7ff bad0 	b.w	8008a94 <_svfprintf_r+0x7f8>
 80094f4:	2900      	cmp	r1, #0
 80094f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80094f8:	bfd4      	ite	le
 80094fa:	f1c1 0302 	rsble	r3, r1, #2
 80094fe:	2301      	movgt	r3, #1
 8009500:	195b      	adds	r3, r3, r5
 8009502:	e7b0      	b.n	8009466 <_svfprintf_r+0x11ca>
 8009504:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8009508:	910e      	str	r1, [sp, #56]	; 0x38
 800950a:	950b      	str	r5, [sp, #44]	; 0x2c
 800950c:	2567      	movs	r5, #103	; 0x67
 800950e:	9118      	str	r1, [sp, #96]	; 0x60
 8009510:	9517      	str	r5, [sp, #92]	; 0x5c
 8009512:	e6f0      	b.n	80092f6 <_svfprintf_r+0x105a>
 8009514:	2900      	cmp	r1, #0
 8009516:	dd27      	ble.n	8009568 <_svfprintf_r+0x12cc>
 8009518:	b9e4      	cbnz	r4, 8009554 <_svfprintf_r+0x12b8>
 800951a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800951c:	07ea      	lsls	r2, r5, #31
 800951e:	d419      	bmi.n	8009554 <_svfprintf_r+0x12b8>
 8009520:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8009524:	910e      	str	r1, [sp, #56]	; 0x38
 8009526:	950b      	str	r5, [sp, #44]	; 0x2c
 8009528:	2566      	movs	r5, #102	; 0x66
 800952a:	9118      	str	r1, [sp, #96]	; 0x60
 800952c:	9517      	str	r5, [sp, #92]	; 0x5c
 800952e:	e6e2      	b.n	80092f6 <_svfprintf_r+0x105a>
 8009530:	9944      	ldr	r1, [sp, #272]	; 0x110
 8009532:	e68d      	b.n	8009250 <_svfprintf_r+0xfb4>
 8009534:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009536:	f015 0301 	ands.w	r3, r5, #1
 800953a:	f47f aed4 	bne.w	80092e6 <_svfprintf_r+0x104a>
 800953e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009540:	9318      	str	r3, [sp, #96]	; 0x60
 8009542:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8009546:	950b      	str	r5, [sp, #44]	; 0x2c
 8009548:	e6d5      	b.n	80092f6 <_svfprintf_r+0x105a>
 800954a:	232d      	movs	r3, #45	; 0x2d
 800954c:	4249      	negs	r1, r1
 800954e:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8009552:	e688      	b.n	8009266 <_svfprintf_r+0xfca>
 8009554:	3401      	adds	r4, #1
 8009556:	2566      	movs	r5, #102	; 0x66
 8009558:	190c      	adds	r4, r1, r4
 800955a:	9517      	str	r5, [sp, #92]	; 0x5c
 800955c:	940e      	str	r4, [sp, #56]	; 0x38
 800955e:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8009562:	9118      	str	r1, [sp, #96]	; 0x60
 8009564:	950b      	str	r5, [sp, #44]	; 0x2c
 8009566:	e6c6      	b.n	80092f6 <_svfprintf_r+0x105a>
 8009568:	b914      	cbnz	r4, 8009570 <_svfprintf_r+0x12d4>
 800956a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800956c:	07eb      	lsls	r3, r5, #31
 800956e:	d508      	bpl.n	8009582 <_svfprintf_r+0x12e6>
 8009570:	3402      	adds	r4, #2
 8009572:	2566      	movs	r5, #102	; 0x66
 8009574:	940e      	str	r4, [sp, #56]	; 0x38
 8009576:	9517      	str	r5, [sp, #92]	; 0x5c
 8009578:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800957c:	9118      	str	r1, [sp, #96]	; 0x60
 800957e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009580:	e6b9      	b.n	80092f6 <_svfprintf_r+0x105a>
 8009582:	2501      	movs	r5, #1
 8009584:	9118      	str	r1, [sp, #96]	; 0x60
 8009586:	950b      	str	r5, [sp, #44]	; 0x2c
 8009588:	2566      	movs	r5, #102	; 0x66
 800958a:	9517      	str	r5, [sp, #92]	; 0x5c
 800958c:	2501      	movs	r5, #1
 800958e:	950e      	str	r5, [sp, #56]	; 0x38
 8009590:	e6b1      	b.n	80092f6 <_svfprintf_r+0x105a>
 8009592:	f04f 35ff 	mov.w	r5, #4294967295
 8009596:	950d      	str	r5, [sp, #52]	; 0x34
 8009598:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800959a:	230c      	movs	r3, #12
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	f7fe bf84 	b.w	80084aa <_svfprintf_r+0x20e>
 80095a2:	bf00      	nop
 80095a4:	0801c66c 	.word	0x0801c66c
 80095a8:	08018538 	.word	0x08018538
 80095ac:	08018548 	.word	0x08018548

080095b0 <write>:
 80095b0:	b430      	push	{r4, r5}
 80095b2:	f240 0408 	movw	r4, #8
 80095b6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80095ba:	460d      	mov	r5, r1
 80095bc:	4613      	mov	r3, r2
 80095be:	4601      	mov	r1, r0
 80095c0:	462a      	mov	r2, r5
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	bc30      	pop	{r4, r5}
 80095c6:	f00c bca1 	b.w	8015f0c <_write_r>
 80095ca:	bf00      	nop

080095cc <__sprint_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	4680      	mov	r8, r0
 80095d2:	6890      	ldr	r0, [r2, #8]
 80095d4:	4691      	mov	r9, r2
 80095d6:	460e      	mov	r6, r1
 80095d8:	b348      	cbz	r0, 800962e <__sprint_r+0x62>
 80095da:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80095dc:	049a      	lsls	r2, r3, #18
 80095de:	d529      	bpl.n	8009634 <__sprint_r+0x68>
 80095e0:	f8d9 3000 	ldr.w	r3, [r9]
 80095e4:	f103 0a08 	add.w	sl, r3, #8
 80095e8:	e91a 00a0 	ldmdb	sl, {r5, r7}
 80095ec:	08bf      	lsrs	r7, r7, #2
 80095ee:	b1af      	cbz	r7, 800961c <__sprint_r+0x50>
 80095f0:	2400      	movs	r4, #0
 80095f2:	e001      	b.n	80095f8 <__sprint_r+0x2c>
 80095f4:	42a7      	cmp	r7, r4
 80095f6:	d00f      	beq.n	8009618 <__sprint_r+0x4c>
 80095f8:	f855 1b04 	ldr.w	r1, [r5], #4
 80095fc:	4640      	mov	r0, r8
 80095fe:	4632      	mov	r2, r6
 8009600:	3401      	adds	r4, #1
 8009602:	f002 f879 	bl	800b6f8 <_fputwc_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d1f4      	bne.n	80095f4 <__sprint_r+0x28>
 800960a:	2300      	movs	r3, #0
 800960c:	f8c9 3008 	str.w	r3, [r9, #8]
 8009610:	f8c9 3004 	str.w	r3, [r9, #4]
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800961c:	eba0 0087 	sub.w	r0, r0, r7, lsl #2
 8009620:	f10a 0a08 	add.w	sl, sl, #8
 8009624:	f8c9 0008 	str.w	r0, [r9, #8]
 8009628:	2800      	cmp	r0, #0
 800962a:	d1dd      	bne.n	80095e8 <__sprint_r+0x1c>
 800962c:	e7ed      	b.n	800960a <__sprint_r+0x3e>
 800962e:	6050      	str	r0, [r2, #4]
 8009630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009634:	4640      	mov	r0, r8
 8009636:	464a      	mov	r2, r9
 8009638:	f7fd fac6 	bl	8006bc8 <__sfvwrite_r>
 800963c:	2300      	movs	r3, #0
 800963e:	f8c9 3008 	str.w	r3, [r9, #8]
 8009642:	f8c9 3004 	str.w	r3, [r9, #4]
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	bf00      	nop

0800964c <_vfiprintf_r>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8009654:	b081      	sub	sp, #4
 8009656:	4683      	mov	fp, r0
 8009658:	460c      	mov	r4, r1
 800965a:	4617      	mov	r7, r2
 800965c:	9307      	str	r3, [sp, #28]
 800965e:	b118      	cbz	r0, 8009668 <_vfiprintf_r+0x1c>
 8009660:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 845b 	beq.w	8009f1e <_vfiprintf_r+0x8d2>
 8009668:	89a5      	ldrh	r5, [r4, #12]
 800966a:	b2ab      	uxth	r3, r5
 800966c:	0498      	lsls	r0, r3, #18
 800966e:	d407      	bmi.n	8009680 <_vfiprintf_r+0x34>
 8009670:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 8009674:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009676:	81a5      	strh	r5, [r4, #12]
 8009678:	b2ab      	uxth	r3, r5
 800967a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800967e:	6662      	str	r2, [r4, #100]	; 0x64
 8009680:	0719      	lsls	r1, r3, #28
 8009682:	f140 83c3 	bpl.w	8009e0c <_vfiprintf_r+0x7c0>
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	2a00      	cmp	r2, #0
 800968a:	f000 83bf 	beq.w	8009e0c <_vfiprintf_r+0x7c0>
 800968e:	f003 031a 	and.w	r3, r3, #26
 8009692:	2b0a      	cmp	r3, #10
 8009694:	f000 83c8 	beq.w	8009e28 <_vfiprintf_r+0x7dc>
 8009698:	f50d 65a2 	add.w	r5, sp, #1296	; 0x510
 800969c:	9502      	str	r5, [sp, #8]
 800969e:	f50d 65a0 	add.w	r5, sp, #1280	; 0x500
 80096a2:	f50d 6a95 	add.w	sl, sp, #1192	; 0x4a8
 80096a6:	350f      	adds	r5, #15
 80096a8:	9501      	str	r5, [sp, #4]
 80096aa:	9802      	ldr	r0, [sp, #8]
 80096ac:	4655      	mov	r5, sl
 80096ae:	9901      	ldr	r1, [sp, #4]
 80096b0:	46a1      	mov	r9, r4
 80096b2:	f64c 42cd 	movw	r2, #52429	; 0xcccd
 80096b6:	2300      	movs	r3, #0
 80096b8:	1a40      	subs	r0, r0, r1
 80096ba:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 80096be:	930d      	str	r3, [sp, #52]	; 0x34
 80096c0:	9305      	str	r3, [sp, #20]
 80096c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80096c4:	920e      	str	r2, [sp, #56]	; 0x38
 80096c6:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
 80096ca:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
 80096ce:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80096d2:	783b      	ldrb	r3, [r7, #0]
 80096d4:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 80096d8:	bf18      	it	ne
 80096da:	2201      	movne	r2, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf0c      	ite	eq
 80096e0:	2300      	moveq	r3, #0
 80096e2:	f002 0301 	andne.w	r3, r2, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8319 	beq.w	8009d1e <_vfiprintf_r+0x6d2>
 80096ec:	463a      	mov	r2, r7
 80096ee:	463c      	mov	r4, r7
 80096f0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80096f4:	3401      	adds	r4, #1
 80096f6:	1c19      	adds	r1, r3, #0
 80096f8:	bf18      	it	ne
 80096fa:	2101      	movne	r1, #1
 80096fc:	2b25      	cmp	r3, #37	; 0x25
 80096fe:	bf0c      	ite	eq
 8009700:	2300      	moveq	r3, #0
 8009702:	f001 0301 	andne.w	r3, r1, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f2      	bne.n	80096f0 <_vfiprintf_r+0xa4>
 800970a:	1be6      	subs	r6, r4, r7
 800970c:	d012      	beq.n	8009734 <_vfiprintf_r+0xe8>
 800970e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009712:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009716:	3301      	adds	r3, #1
 8009718:	602f      	str	r7, [r5, #0]
 800971a:	2b07      	cmp	r3, #7
 800971c:	4432      	add	r2, r6
 800971e:	606e      	str	r6, [r5, #4]
 8009720:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009724:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009728:	f300 83c1 	bgt.w	8009eae <_vfiprintf_r+0x862>
 800972c:	3508      	adds	r5, #8
 800972e:	9b05      	ldr	r3, [sp, #20]
 8009730:	199b      	adds	r3, r3, r6
 8009732:	9305      	str	r3, [sp, #20]
 8009734:	7823      	ldrb	r3, [r4, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 84a8 	beq.w	800a08c <_vfiprintf_r+0xa40>
 800973c:	2300      	movs	r3, #0
 800973e:	1c67      	adds	r7, r4, #1
 8009740:	461a      	mov	r2, r3
 8009742:	f04f 34ff 	mov.w	r4, #4294967295
 8009746:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 800974a:	9308      	str	r3, [sp, #32]
 800974c:	9303      	str	r3, [sp, #12]
 800974e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009752:	f1a3 0120 	sub.w	r1, r3, #32
 8009756:	2958      	cmp	r1, #88	; 0x58
 8009758:	f200 81dd 	bhi.w	8009b16 <_vfiprintf_r+0x4ca>
 800975c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009760:	01db01d7 	.word	0x01db01d7
 8009764:	01d201db 	.word	0x01d201db
 8009768:	01db01db 	.word	0x01db01db
 800976c:	01db01db 	.word	0x01db01db
 8009770:	01db01db 	.word	0x01db01db
 8009774:	020c00d8 	.word	0x020c00d8
 8009778:	00e401db 	.word	0x00e401db
 800977c:	01db01f1 	.word	0x01db01f1
 8009780:	017b01ec 	.word	0x017b01ec
 8009784:	017b017b 	.word	0x017b017b
 8009788:	017b017b 	.word	0x017b017b
 800978c:	017b017b 	.word	0x017b017b
 8009790:	017b017b 	.word	0x017b017b
 8009794:	01db01db 	.word	0x01db01db
 8009798:	01db01db 	.word	0x01db01db
 800979c:	01db01db 	.word	0x01db01db
 80097a0:	01db01db 	.word	0x01db01db
 80097a4:	01db01db 	.word	0x01db01db
 80097a8:	01db005e 	.word	0x01db005e
 80097ac:	01db01db 	.word	0x01db01db
 80097b0:	01db01db 	.word	0x01db01db
 80097b4:	01db01db 	.word	0x01db01db
 80097b8:	01db01db 	.word	0x01db01db
 80097bc:	00b001db 	.word	0x00b001db
 80097c0:	01db01db 	.word	0x01db01db
 80097c4:	01db01db 	.word	0x01db01db
 80097c8:	00c601db 	.word	0x00c601db
 80097cc:	01db01db 	.word	0x01db01db
 80097d0:	01db014a 	.word	0x01db014a
 80097d4:	01db01db 	.word	0x01db01db
 80097d8:	01db01db 	.word	0x01db01db
 80097dc:	01db01db 	.word	0x01db01db
 80097e0:	01db01db 	.word	0x01db01db
 80097e4:	00ee01db 	.word	0x00ee01db
 80097e8:	01db0062 	.word	0x01db0062
 80097ec:	01db01db 	.word	0x01db01db
 80097f0:	006200e9 	.word	0x006200e9
 80097f4:	01db01db 	.word	0x01db01db
 80097f8:	01db0059 	.word	0x01db0059
 80097fc:	00b4018c 	.word	0x00b4018c
 8009800:	00590166 	.word	0x00590166
 8009804:	01b401db 	.word	0x01b401db
 8009808:	00ca01db 	.word	0x00ca01db
 800980c:	01db01db 	.word	0x01db01db
 8009810:	019d      	.short	0x019d
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	f043 0310 	orr.w	r3, r3, #16
 8009818:	9303      	str	r3, [sp, #12]
 800981a:	e798      	b.n	800974e <_vfiprintf_r+0x102>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	f043 0310 	orr.w	r3, r3, #16
 8009822:	9303      	str	r3, [sp, #12]
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800982a:	06d8      	lsls	r0, r3, #27
 800982c:	f140 83bf 	bpl.w	8009fae <_vfiprintf_r+0x962>
 8009830:	9b07      	ldr	r3, [sp, #28]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	3304      	adds	r3, #4
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	2a00      	cmp	r2, #0
 800983a:	f2c0 83c5 	blt.w	8009fc8 <_vfiprintf_r+0x97c>
 800983e:	bf0c      	ite	eq
 8009840:	2100      	moveq	r1, #0
 8009842:	2101      	movne	r1, #1
 8009844:	2301      	movs	r3, #1
 8009846:	2c00      	cmp	r4, #0
 8009848:	bfa2      	ittt	ge
 800984a:	9803      	ldrge	r0, [sp, #12]
 800984c:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8009850:	9003      	strge	r0, [sp, #12]
 8009852:	2c00      	cmp	r4, #0
 8009854:	bf18      	it	ne
 8009856:	f041 0101 	orrne.w	r1, r1, #1
 800985a:	2900      	cmp	r1, #0
 800985c:	f000 8261 	beq.w	8009d22 <_vfiprintf_r+0x6d6>
 8009860:	2b01      	cmp	r3, #1
 8009862:	f000 8365 	beq.w	8009f30 <_vfiprintf_r+0x8e4>
 8009866:	2b02      	cmp	r3, #2
 8009868:	bf18      	it	ne
 800986a:	f50d 63a2 	addne.w	r3, sp, #1296	; 0x510
 800986e:	d101      	bne.n	8009874 <_vfiprintf_r+0x228>
 8009870:	e378      	b.n	8009f64 <_vfiprintf_r+0x918>
 8009872:	4603      	mov	r3, r0
 8009874:	f002 0107 	and.w	r1, r2, #7
 8009878:	1e58      	subs	r0, r3, #1
 800987a:	3130      	adds	r1, #48	; 0x30
 800987c:	08d2      	lsrs	r2, r2, #3
 800987e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009882:	d1f6      	bne.n	8009872 <_vfiprintf_r+0x226>
 8009884:	9a03      	ldr	r2, [sp, #12]
 8009886:	900a      	str	r0, [sp, #40]	; 0x28
 8009888:	07d2      	lsls	r2, r2, #31
 800988a:	f140 83d8 	bpl.w	800a03e <_vfiprintf_r+0x9f2>
 800988e:	2930      	cmp	r1, #48	; 0x30
 8009890:	f000 8425 	beq.w	800a0de <_vfiprintf_r+0xa92>
 8009894:	9a02      	ldr	r2, [sp, #8]
 8009896:	1e99      	subs	r1, r3, #2
 8009898:	910a      	str	r1, [sp, #40]	; 0x28
 800989a:	1a52      	subs	r2, r2, r1
 800989c:	9206      	str	r2, [sp, #24]
 800989e:	2230      	movs	r2, #48	; 0x30
 80098a0:	f803 2c02 	strb.w	r2, [r3, #-2]
 80098a4:	9409      	str	r4, [sp, #36]	; 0x24
 80098a6:	9806      	ldr	r0, [sp, #24]
 80098a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098aa:	f89d 351f 	ldrb.w	r3, [sp, #1311]	; 0x51f
 80098ae:	4288      	cmp	r0, r1
 80098b0:	bfb8      	it	lt
 80098b2:	4608      	movlt	r0, r1
 80098b4:	9004      	str	r0, [sp, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d051      	beq.n	800995e <_vfiprintf_r+0x312>
 80098ba:	3001      	adds	r0, #1
 80098bc:	9004      	str	r0, [sp, #16]
 80098be:	e04e      	b.n	800995e <_vfiprintf_r+0x312>
 80098c0:	9b03      	ldr	r3, [sp, #12]
 80098c2:	f043 0310 	orr.w	r3, r3, #16
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	9803      	ldr	r0, [sp, #12]
 80098ca:	f010 0310 	ands.w	r3, r0, #16
 80098ce:	f000 835a 	beq.w	8009f86 <_vfiprintf_r+0x93a>
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	9807      	ldr	r0, [sp, #28]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	2300      	movs	r3, #0
 80098da:	3004      	adds	r0, #4
 80098dc:	9007      	str	r0, [sp, #28]
 80098de:	1ad1      	subs	r1, r2, r3
 80098e0:	bf18      	it	ne
 80098e2:	2101      	movne	r1, #1
 80098e4:	2000      	movs	r0, #0
 80098e6:	f88d 051f 	strb.w	r0, [sp, #1311]	; 0x51f
 80098ea:	e7ac      	b.n	8009846 <_vfiprintf_r+0x1fa>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	f043 0310 	orr.w	r3, r3, #16
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	06db      	lsls	r3, r3, #27
 80098f8:	f140 8351 	bpl.w	8009f9e <_vfiprintf_r+0x952>
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	2301      	movs	r3, #1
 8009902:	9807      	ldr	r0, [sp, #28]
 8009904:	3004      	adds	r0, #4
 8009906:	1c11      	adds	r1, r2, #0
 8009908:	9007      	str	r0, [sp, #28]
 800990a:	bf18      	it	ne
 800990c:	2101      	movne	r1, #1
 800990e:	e7e9      	b.n	80098e4 <_vfiprintf_r+0x298>
 8009910:	9b07      	ldr	r3, [sp, #28]
 8009912:	9807      	ldr	r0, [sp, #28]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	9308      	str	r3, [sp, #32]
 8009918:	1d03      	adds	r3, r0, #4
 800991a:	9908      	ldr	r1, [sp, #32]
 800991c:	2900      	cmp	r1, #0
 800991e:	f280 8375 	bge.w	800a00c <_vfiprintf_r+0x9c0>
 8009922:	4249      	negs	r1, r1
 8009924:	9307      	str	r3, [sp, #28]
 8009926:	9108      	str	r1, [sp, #32]
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	f043 0304 	orr.w	r3, r3, #4
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	e70d      	b.n	800974e <_vfiprintf_r+0x102>
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009938:	9303      	str	r3, [sp, #12]
 800993a:	e708      	b.n	800974e <_vfiprintf_r+0x102>
 800993c:	9b07      	ldr	r3, [sp, #28]
 800993e:	2001      	movs	r0, #1
 8009940:	2200      	movs	r2, #0
 8009942:	9004      	str	r0, [sp, #16]
 8009944:	1d19      	adds	r1, r3, #4
 8009946:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
 8009950:	9107      	str	r1, [sp, #28]
 8009952:	9006      	str	r0, [sp, #24]
 8009954:	920a      	str	r2, [sp, #40]	; 0x28
 8009956:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 800995a:	2300      	movs	r3, #0
 800995c:	9309      	str	r3, [sp, #36]	; 0x24
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	f013 0302 	ands.w	r3, r3, #2
 8009964:	930b      	str	r3, [sp, #44]	; 0x2c
 8009966:	d002      	beq.n	800996e <_vfiprintf_r+0x322>
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	3302      	adds	r3, #2
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8009974:	930c      	str	r3, [sp, #48]	; 0x30
 8009976:	f040 8101 	bne.w	8009b7c <_vfiprintf_r+0x530>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	9804      	ldr	r0, [sp, #16]
 800997e:	1a1c      	subs	r4, r3, r0
 8009980:	2c00      	cmp	r4, #0
 8009982:	f340 80fb 	ble.w	8009b7c <_vfiprintf_r+0x530>
 8009986:	2c10      	cmp	r4, #16
 8009988:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800998c:	f340 83a3 	ble.w	800a0d6 <_vfiprintf_r+0xa8a>
 8009990:	f04f 0810 	mov.w	r8, #16
 8009994:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009998:	4e95      	ldr	r6, [pc, #596]	; (8009bf0 <_vfiprintf_r+0x5a4>)
 800999a:	e002      	b.n	80099a2 <_vfiprintf_r+0x356>
 800999c:	3c10      	subs	r4, #16
 800999e:	2c10      	cmp	r4, #16
 80099a0:	dd1b      	ble.n	80099da <_vfiprintf_r+0x38e>
 80099a2:	3301      	adds	r3, #1
 80099a4:	3210      	adds	r2, #16
 80099a6:	e885 0140 	stmia.w	r5, {r6, r8}
 80099aa:	3508      	adds	r5, #8
 80099ac:	2b07      	cmp	r3, #7
 80099ae:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80099b2:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80099b6:	ddf1      	ble.n	800999c <_vfiprintf_r+0x350>
 80099b8:	4658      	mov	r0, fp
 80099ba:	4649      	mov	r1, r9
 80099bc:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80099c0:	4655      	mov	r5, sl
 80099c2:	f7ff fe03 	bl	80095cc <__sprint_r>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f040 81c8 	bne.w	8009d5c <_vfiprintf_r+0x710>
 80099cc:	3c10      	subs	r4, #16
 80099ce:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80099d2:	2c10      	cmp	r4, #16
 80099d4:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80099d8:	dce3      	bgt.n	80099a2 <_vfiprintf_r+0x356>
 80099da:	3301      	adds	r3, #1
 80099dc:	1912      	adds	r2, r2, r4
 80099de:	2b07      	cmp	r3, #7
 80099e0:	602e      	str	r6, [r5, #0]
 80099e2:	606c      	str	r4, [r5, #4]
 80099e4:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80099e8:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80099ec:	f300 82f5 	bgt.w	8009fda <_vfiprintf_r+0x98e>
 80099f0:	3508      	adds	r5, #8
 80099f2:	e0c7      	b.n	8009b84 <_vfiprintf_r+0x538>
 80099f4:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 80099f8:	9a03      	ldr	r2, [sp, #12]
 80099fa:	497e      	ldr	r1, [pc, #504]	; (8009bf4 <_vfiprintf_r+0x5a8>)
 80099fc:	06d0      	lsls	r0, r2, #27
 80099fe:	910d      	str	r1, [sp, #52]	; 0x34
 8009a00:	d552      	bpl.n	8009aa8 <_vfiprintf_r+0x45c>
 8009a02:	9807      	ldr	r0, [sp, #28]
 8009a04:	6802      	ldr	r2, [r0, #0]
 8009a06:	3004      	adds	r0, #4
 8009a08:	9007      	str	r0, [sp, #28]
 8009a0a:	1c11      	adds	r1, r2, #0
 8009a0c:	9803      	ldr	r0, [sp, #12]
 8009a0e:	bf18      	it	ne
 8009a10:	2101      	movne	r1, #1
 8009a12:	4208      	tst	r0, r1
 8009a14:	d056      	beq.n	8009ac4 <_vfiprintf_r+0x478>
 8009a16:	f88d 351d 	strb.w	r3, [sp, #1309]	; 0x51d
 8009a1a:	f040 0002 	orr.w	r0, r0, #2
 8009a1e:	2330      	movs	r3, #48	; 0x30
 8009a20:	9003      	str	r0, [sp, #12]
 8009a22:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8009a26:	2101      	movs	r1, #1
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e75b      	b.n	80098e4 <_vfiprintf_r+0x298>
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	4872      	ldr	r0, [pc, #456]	; (8009bf8 <_vfiprintf_r+0x5ac>)
 8009a30:	1d19      	adds	r1, r3, #4
 8009a32:	9107      	str	r1, [sp, #28]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	2178      	movs	r1, #120	; 0x78
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	f88d 151d 	strb.w	r1, [sp, #1309]	; 0x51d
 8009a3e:	f043 0302 	orr.w	r3, r3, #2
 8009a42:	9303      	str	r3, [sp, #12]
 8009a44:	2330      	movs	r3, #48	; 0x30
 8009a46:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	1c11      	adds	r1, r2, #0
 8009a4e:	bf18      	it	ne
 8009a50:	2101      	movne	r1, #1
 8009a52:	900d      	str	r0, [sp, #52]	; 0x34
 8009a54:	e746      	b.n	80098e4 <_vfiprintf_r+0x298>
 8009a56:	4638      	mov	r0, r7
 8009a58:	2100      	movs	r1, #0
 8009a5a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009a5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009a62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009a66:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	2e09      	cmp	r6, #9
 8009a6e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009a72:	d9f2      	bls.n	8009a5a <_vfiprintf_r+0x40e>
 8009a74:	9108      	str	r1, [sp, #32]
 8009a76:	e66c      	b.n	8009752 <_vfiprintf_r+0x106>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009a7e:	06d9      	lsls	r1, r3, #27
 8009a80:	f100 82e1 	bmi.w	800a046 <_vfiprintf_r+0x9fa>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	065a      	lsls	r2, r3, #25
 8009a88:	f140 830d 	bpl.w	800a0a6 <_vfiprintf_r+0xa5a>
 8009a8c:	9807      	ldr	r0, [sp, #28]
 8009a8e:	9905      	ldr	r1, [sp, #20]
 8009a90:	6803      	ldr	r3, [r0, #0]
 8009a92:	3004      	adds	r0, #4
 8009a94:	9007      	str	r0, [sp, #28]
 8009a96:	8019      	strh	r1, [r3, #0]
 8009a98:	e61b      	b.n	80096d2 <_vfiprintf_r+0x86>
 8009a9a:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009a9e:	9a03      	ldr	r2, [sp, #12]
 8009aa0:	4955      	ldr	r1, [pc, #340]	; (8009bf8 <_vfiprintf_r+0x5ac>)
 8009aa2:	06d0      	lsls	r0, r2, #27
 8009aa4:	910d      	str	r1, [sp, #52]	; 0x34
 8009aa6:	d4ac      	bmi.n	8009a02 <_vfiprintf_r+0x3b6>
 8009aa8:	9903      	ldr	r1, [sp, #12]
 8009aaa:	0649      	lsls	r1, r1, #25
 8009aac:	f140 82d6 	bpl.w	800a05c <_vfiprintf_r+0xa10>
 8009ab0:	9807      	ldr	r0, [sp, #28]
 8009ab2:	8802      	ldrh	r2, [r0, #0]
 8009ab4:	3004      	adds	r0, #4
 8009ab6:	9007      	str	r0, [sp, #28]
 8009ab8:	1c11      	adds	r1, r2, #0
 8009aba:	9803      	ldr	r0, [sp, #12]
 8009abc:	bf18      	it	ne
 8009abe:	2101      	movne	r1, #1
 8009ac0:	4208      	tst	r0, r1
 8009ac2:	d1a8      	bne.n	8009a16 <_vfiprintf_r+0x3ca>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e70d      	b.n	80098e4 <_vfiprintf_r+0x298>
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	2600      	movs	r6, #0
 8009acc:	f88d 651f 	strb.w	r6, [sp, #1311]	; 0x51f
 8009ad0:	1d19      	adds	r1, r3, #4
 8009ad2:	9107      	str	r1, [sp, #28]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 82f2 	beq.w	800a0c2 <_vfiprintf_r+0xa76>
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ae2:	f2c0 82e8 	blt.w	800a0b6 <_vfiprintf_r+0xa6a>
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4622      	mov	r2, r4
 8009aea:	f7fd fd37 	bl	800755c <memchr>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f000 82fb 	beq.w	800a0ea <_vfiprintf_r+0xa9e>
 8009af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af6:	9609      	str	r6, [sp, #36]	; 0x24
 8009af8:	1ac0      	subs	r0, r0, r3
 8009afa:	9006      	str	r0, [sp, #24]
 8009afc:	42a0      	cmp	r0, r4
 8009afe:	bfc8      	it	gt
 8009b00:	9406      	strgt	r4, [sp, #24]
 8009b02:	e6d0      	b.n	80098a6 <_vfiprintf_r+0x25a>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	f043 0301 	orr.w	r3, r3, #1
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	e61f      	b.n	800974e <_vfiprintf_r+0x102>
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	bf08      	it	eq
 8009b12:	2220      	moveq	r2, #32
 8009b14:	e61b      	b.n	800974e <_vfiprintf_r+0x102>
 8009b16:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 82b6 	beq.w	800a08c <_vfiprintf_r+0xa40>
 8009b20:	2001      	movs	r0, #1
 8009b22:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 8009b26:	9004      	str	r0, [sp, #16]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9006      	str	r0, [sp, #24]
 8009b2c:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 8009b30:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8009b34:	930a      	str	r3, [sp, #40]	; 0x28
 8009b36:	e710      	b.n	800995a <_vfiprintf_r+0x30e>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	e605      	b.n	800974e <_vfiprintf_r+0x102>
 8009b42:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009b46:	2b2a      	cmp	r3, #42	; 0x2a
 8009b48:	f000 8256 	beq.w	8009ff8 <_vfiprintf_r+0x9ac>
 8009b4c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009b50:	2400      	movs	r4, #0
 8009b52:	2909      	cmp	r1, #9
 8009b54:	f63f adfd 	bhi.w	8009752 <_vfiprintf_r+0x106>
 8009b58:	4638      	mov	r0, r7
 8009b5a:	2400      	movs	r4, #0
 8009b5c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009b64:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8009b68:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009b6c:	2909      	cmp	r1, #9
 8009b6e:	4607      	mov	r7, r0
 8009b70:	d9f4      	bls.n	8009b5c <_vfiprintf_r+0x510>
 8009b72:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009b76:	e5ec      	b.n	8009752 <_vfiprintf_r+0x106>
 8009b78:	222b      	movs	r2, #43	; 0x2b
 8009b7a:	e5e8      	b.n	800974e <_vfiprintf_r+0x102>
 8009b7c:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009b80:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009b84:	f89d 151f 	ldrb.w	r1, [sp, #1311]	; 0x51f
 8009b88:	b179      	cbz	r1, 8009baa <_vfiprintf_r+0x55e>
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8009b90:	310f      	adds	r1, #15
 8009b92:	6029      	str	r1, [r5, #0]
 8009b94:	2101      	movs	r1, #1
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	440a      	add	r2, r1
 8009b9a:	6069      	str	r1, [r5, #4]
 8009b9c:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009ba0:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009ba4:	f300 819d 	bgt.w	8009ee2 <_vfiprintf_r+0x896>
 8009ba8:	3508      	adds	r5, #8
 8009baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bac:	b179      	cbz	r1, 8009bce <_vfiprintf_r+0x582>
 8009bae:	3301      	adds	r3, #1
 8009bb0:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8009bb4:	310c      	adds	r1, #12
 8009bb6:	6029      	str	r1, [r5, #0]
 8009bb8:	2102      	movs	r1, #2
 8009bba:	2b07      	cmp	r3, #7
 8009bbc:	440a      	add	r2, r1
 8009bbe:	6069      	str	r1, [r5, #4]
 8009bc0:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009bc4:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009bc8:	f300 819a 	bgt.w	8009f00 <_vfiprintf_r+0x8b4>
 8009bcc:	3508      	adds	r5, #8
 8009bce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009bd0:	2880      	cmp	r0, #128	; 0x80
 8009bd2:	f000 80d2 	beq.w	8009d7a <_vfiprintf_r+0x72e>
 8009bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bd8:	9806      	ldr	r0, [sp, #24]
 8009bda:	1a0c      	subs	r4, r1, r0
 8009bdc:	2c00      	cmp	r4, #0
 8009bde:	dd3a      	ble.n	8009c56 <_vfiprintf_r+0x60a>
 8009be0:	2c10      	cmp	r4, #16
 8009be2:	4e06      	ldr	r6, [pc, #24]	; (8009bfc <_vfiprintf_r+0x5b0>)
 8009be4:	bfc8      	it	gt
 8009be6:	f04f 0810 	movgt.w	r8, #16
 8009bea:	dc0c      	bgt.n	8009c06 <_vfiprintf_r+0x5ba>
 8009bec:	e027      	b.n	8009c3e <_vfiprintf_r+0x5f2>
 8009bee:	bf00      	nop
 8009bf0:	08018558 	.word	0x08018558
 8009bf4:	0801c644 	.word	0x0801c644
 8009bf8:	0801c658 	.word	0x0801c658
 8009bfc:	08018568 	.word	0x08018568
 8009c00:	3c10      	subs	r4, #16
 8009c02:	2c10      	cmp	r4, #16
 8009c04:	dd1b      	ble.n	8009c3e <_vfiprintf_r+0x5f2>
 8009c06:	3301      	adds	r3, #1
 8009c08:	3210      	adds	r2, #16
 8009c0a:	e885 0140 	stmia.w	r5, {r6, r8}
 8009c0e:	3508      	adds	r5, #8
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009c16:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009c1a:	ddf1      	ble.n	8009c00 <_vfiprintf_r+0x5b4>
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	4649      	mov	r1, r9
 8009c20:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009c24:	4655      	mov	r5, sl
 8009c26:	f7ff fcd1 	bl	80095cc <__sprint_r>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f040 8096 	bne.w	8009d5c <_vfiprintf_r+0x710>
 8009c30:	3c10      	subs	r4, #16
 8009c32:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009c36:	2c10      	cmp	r4, #16
 8009c38:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009c3c:	dce3      	bgt.n	8009c06 <_vfiprintf_r+0x5ba>
 8009c3e:	3301      	adds	r3, #1
 8009c40:	1912      	adds	r2, r2, r4
 8009c42:	2b07      	cmp	r3, #7
 8009c44:	602e      	str	r6, [r5, #0]
 8009c46:	606c      	str	r4, [r5, #4]
 8009c48:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009c4c:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009c50:	f300 8138 	bgt.w	8009ec4 <_vfiprintf_r+0x878>
 8009c54:	3508      	adds	r5, #8
 8009c56:	3301      	adds	r3, #1
 8009c58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c5a:	9806      	ldr	r0, [sp, #24]
 8009c5c:	2b07      	cmp	r3, #7
 8009c5e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009c62:	6029      	str	r1, [r5, #0]
 8009c64:	4402      	add	r2, r0
 8009c66:	6068      	str	r0, [r5, #4]
 8009c68:	bfd8      	it	le
 8009c6a:	f105 0108 	addle.w	r1, r5, #8
 8009c6e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009c72:	f300 80ba 	bgt.w	8009dea <_vfiprintf_r+0x79e>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	0758      	lsls	r0, r3, #29
 8009c7a:	d536      	bpl.n	8009cea <_vfiprintf_r+0x69e>
 8009c7c:	9d08      	ldr	r5, [sp, #32]
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	1aec      	subs	r4, r5, r3
 8009c82:	2c00      	cmp	r4, #0
 8009c84:	dd31      	ble.n	8009cea <_vfiprintf_r+0x69e>
 8009c86:	2c10      	cmp	r4, #16
 8009c88:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009c8c:	bfd8      	it	le
 8009c8e:	4ea6      	ldrle	r6, [pc, #664]	; (8009f28 <_vfiprintf_r+0x8dc>)
 8009c90:	dd20      	ble.n	8009cd4 <_vfiprintf_r+0x688>
 8009c92:	2510      	movs	r5, #16
 8009c94:	4ea4      	ldr	r6, [pc, #656]	; (8009f28 <_vfiprintf_r+0x8dc>)
 8009c96:	e002      	b.n	8009c9e <_vfiprintf_r+0x652>
 8009c98:	3c10      	subs	r4, #16
 8009c9a:	2c10      	cmp	r4, #16
 8009c9c:	dd1a      	ble.n	8009cd4 <_vfiprintf_r+0x688>
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	3210      	adds	r2, #16
 8009ca2:	600e      	str	r6, [r1, #0]
 8009ca4:	604d      	str	r5, [r1, #4]
 8009ca6:	3108      	adds	r1, #8
 8009ca8:	2b07      	cmp	r3, #7
 8009caa:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009cae:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009cb2:	ddf1      	ble.n	8009c98 <_vfiprintf_r+0x64c>
 8009cb4:	4658      	mov	r0, fp
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009cbc:	f7ff fc86 	bl	80095cc <__sprint_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d14b      	bne.n	8009d5c <_vfiprintf_r+0x710>
 8009cc4:	3c10      	subs	r4, #16
 8009cc6:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009cca:	2c10      	cmp	r4, #16
 8009ccc:	4651      	mov	r1, sl
 8009cce:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009cd2:	dce4      	bgt.n	8009c9e <_vfiprintf_r+0x652>
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	18a2      	adds	r2, r4, r2
 8009cd8:	2b07      	cmp	r3, #7
 8009cda:	600e      	str	r6, [r1, #0]
 8009cdc:	604c      	str	r4, [r1, #4]
 8009cde:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009ce2:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009ce6:	f300 8194 	bgt.w	800a012 <_vfiprintf_r+0x9c6>
 8009cea:	9d05      	ldr	r5, [sp, #20]
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	9808      	ldr	r0, [sp, #32]
 8009cf0:	4283      	cmp	r3, r0
 8009cf2:	bfac      	ite	ge
 8009cf4:	18ed      	addge	r5, r5, r3
 8009cf6:	182d      	addlt	r5, r5, r0
 8009cf8:	9505      	str	r5, [sp, #20]
 8009cfa:	bb3a      	cbnz	r2, 8009d4c <_vfiprintf_r+0x700>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009d02:	783b      	ldrb	r3, [r7, #0]
 8009d04:	4655      	mov	r5, sl
 8009d06:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8009d0a:	bf18      	it	ne
 8009d0c:	2201      	movne	r2, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	bf0c      	ite	eq
 8009d12:	2300      	moveq	r3, #0
 8009d14:	f002 0301 	andne.w	r3, r2, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f47f ace7 	bne.w	80096ec <_vfiprintf_r+0xa0>
 8009d1e:	463c      	mov	r4, r7
 8009d20:	e508      	b.n	8009734 <_vfiprintf_r+0xe8>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d16d      	bne.n	8009e02 <_vfiprintf_r+0x7b6>
 8009d26:	9803      	ldr	r0, [sp, #12]
 8009d28:	07c2      	lsls	r2, r0, #31
 8009d2a:	bf5e      	ittt	pl
 8009d2c:	9306      	strpl	r3, [sp, #24]
 8009d2e:	f50d 63a2 	addpl.w	r3, sp, #1296	; 0x510
 8009d32:	930a      	strpl	r3, [sp, #40]	; 0x28
 8009d34:	f57f adb6 	bpl.w	80098a4 <_vfiprintf_r+0x258>
 8009d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d3a:	9306      	str	r3, [sp, #24]
 8009d3c:	2330      	movs	r3, #48	; 0x30
 8009d3e:	f88d 350f 	strb.w	r3, [sp, #1295]	; 0x50f
 8009d42:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8009d46:	330f      	adds	r3, #15
 8009d48:	930a      	str	r3, [sp, #40]	; 0x28
 8009d4a:	e5ab      	b.n	80098a4 <_vfiprintf_r+0x258>
 8009d4c:	4658      	mov	r0, fp
 8009d4e:	4649      	mov	r1, r9
 8009d50:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009d54:	f7ff fc3a 	bl	80095cc <__sprint_r>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0cf      	beq.n	8009cfc <_vfiprintf_r+0x6b0>
 8009d5c:	464c      	mov	r4, r9
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d64:	9b05      	ldr	r3, [sp, #20]
 8009d66:	bf18      	it	ne
 8009d68:	f04f 33ff 	movne.w	r3, #4294967295
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	9805      	ldr	r0, [sp, #20]
 8009d70:	b049      	add	sp, #292	; 0x124
 8009d72:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8009d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7a:	9908      	ldr	r1, [sp, #32]
 8009d7c:	9804      	ldr	r0, [sp, #16]
 8009d7e:	1a0c      	subs	r4, r1, r0
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	f77f af28 	ble.w	8009bd6 <_vfiprintf_r+0x58a>
 8009d86:	2c10      	cmp	r4, #16
 8009d88:	4e68      	ldr	r6, [pc, #416]	; (8009f2c <_vfiprintf_r+0x8e0>)
 8009d8a:	bfc8      	it	gt
 8009d8c:	f04f 0810 	movgt.w	r8, #16
 8009d90:	dc03      	bgt.n	8009d9a <_vfiprintf_r+0x74e>
 8009d92:	e01d      	b.n	8009dd0 <_vfiprintf_r+0x784>
 8009d94:	3c10      	subs	r4, #16
 8009d96:	2c10      	cmp	r4, #16
 8009d98:	dd1a      	ble.n	8009dd0 <_vfiprintf_r+0x784>
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	3210      	adds	r2, #16
 8009d9e:	e885 0140 	stmia.w	r5, {r6, r8}
 8009da2:	3508      	adds	r5, #8
 8009da4:	2b07      	cmp	r3, #7
 8009da6:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009daa:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009dae:	ddf1      	ble.n	8009d94 <_vfiprintf_r+0x748>
 8009db0:	4658      	mov	r0, fp
 8009db2:	4649      	mov	r1, r9
 8009db4:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009db8:	4655      	mov	r5, sl
 8009dba:	f7ff fc07 	bl	80095cc <__sprint_r>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d1cc      	bne.n	8009d5c <_vfiprintf_r+0x710>
 8009dc2:	3c10      	subs	r4, #16
 8009dc4:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009dc8:	2c10      	cmp	r4, #16
 8009dca:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009dce:	dce4      	bgt.n	8009d9a <_vfiprintf_r+0x74e>
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	1912      	adds	r2, r2, r4
 8009dd4:	2b07      	cmp	r3, #7
 8009dd6:	602e      	str	r6, [r5, #0]
 8009dd8:	606c      	str	r4, [r5, #4]
 8009dda:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009dde:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009de2:	f300 8144 	bgt.w	800a06e <_vfiprintf_r+0xa22>
 8009de6:	3508      	adds	r5, #8
 8009de8:	e6f5      	b.n	8009bd6 <_vfiprintf_r+0x58a>
 8009dea:	4658      	mov	r0, fp
 8009dec:	4649      	mov	r1, r9
 8009dee:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009df2:	f7ff fbeb 	bl	80095cc <__sprint_r>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d1b0      	bne.n	8009d5c <_vfiprintf_r+0x710>
 8009dfa:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009dfe:	4651      	mov	r1, sl
 8009e00:	e739      	b.n	8009c76 <_vfiprintf_r+0x62a>
 8009e02:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8009e06:	9106      	str	r1, [sp, #24]
 8009e08:	930a      	str	r3, [sp, #40]	; 0x28
 8009e0a:	e54b      	b.n	80098a4 <_vfiprintf_r+0x258>
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	4621      	mov	r1, r4
 8009e10:	f000 f9ea 	bl	800a1e8 <__swsetup_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f040 816c 	bne.w	800a0f2 <_vfiprintf_r+0xaa6>
 8009e1a:	89a5      	ldrh	r5, [r4, #12]
 8009e1c:	b2ab      	uxth	r3, r5
 8009e1e:	f003 031a 	and.w	r3, r3, #26
 8009e22:	2b0a      	cmp	r3, #10
 8009e24:	f47f ac38 	bne.w	8009698 <_vfiprintf_r+0x4c>
 8009e28:	89e6      	ldrh	r6, [r4, #14]
 8009e2a:	0432      	lsls	r2, r6, #16
 8009e2c:	f53f ac34 	bmi.w	8009698 <_vfiprintf_r+0x4c>
 8009e30:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8009e34:	463a      	mov	r2, r7
 8009e36:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8009e40:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	f025 0502 	bic.w	r5, r5, #2
 8009e4a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8009e4e:	f8ad 544c 	strh.w	r5, [sp, #1100]	; 0x44c
 8009e52:	f8cd e4a4 	str.w	lr, [sp, #1188]	; 0x4a4
 8009e56:	ad10      	add	r5, sp, #64	; 0x40
 8009e58:	f8ad 644e 	strh.w	r6, [sp, #1102]	; 0x44e
 8009e5c:	f8cd 5440 	str.w	r5, [sp, #1088]	; 0x440
 8009e60:	f8cd 5450 	str.w	r5, [sp, #1104]	; 0x450
 8009e64:	2500      	movs	r5, #0
 8009e66:	f8cd c45c 	str.w	ip, [sp, #1116]	; 0x45c
 8009e6a:	f8cd 8464 	str.w	r8, [sp, #1124]	; 0x464
 8009e6e:	f8cd 7448 	str.w	r7, [sp, #1096]	; 0x448
 8009e72:	f8cd 7454 	str.w	r7, [sp, #1108]	; 0x454
 8009e76:	f8cd 5458 	str.w	r5, [sp, #1112]	; 0x458
 8009e7a:	f7ff fbe7 	bl	800964c <_vfiprintf_r>
 8009e7e:	42a8      	cmp	r0, r5
 8009e80:	9005      	str	r0, [sp, #20]
 8009e82:	db0a      	blt.n	8009e9a <_vfiprintf_r+0x84e>
 8009e84:	4658      	mov	r0, fp
 8009e86:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 8009e8a:	f001 fa81 	bl	800b390 <_fflush_r>
 8009e8e:	9b05      	ldr	r3, [sp, #20]
 8009e90:	42a8      	cmp	r0, r5
 8009e92:	bf18      	it	ne
 8009e94:	f04f 33ff 	movne.w	r3, #4294967295
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f8bd 344c 	ldrh.w	r3, [sp, #1100]	; 0x44c
 8009e9e:	065b      	lsls	r3, r3, #25
 8009ea0:	f57f af65 	bpl.w	8009d6e <_vfiprintf_r+0x722>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	e75f      	b.n	8009d6e <_vfiprintf_r+0x722>
 8009eae:	4658      	mov	r0, fp
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009eb6:	f7ff fb89 	bl	80095cc <__sprint_r>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f47f af4e 	bne.w	8009d5c <_vfiprintf_r+0x710>
 8009ec0:	4655      	mov	r5, sl
 8009ec2:	e434      	b.n	800972e <_vfiprintf_r+0xe2>
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009ecc:	f7ff fb7e 	bl	80095cc <__sprint_r>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f47f af43 	bne.w	8009d5c <_vfiprintf_r+0x710>
 8009ed6:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009eda:	4655      	mov	r5, sl
 8009edc:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009ee0:	e6b9      	b.n	8009c56 <_vfiprintf_r+0x60a>
 8009ee2:	4658      	mov	r0, fp
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009eea:	f7ff fb6f 	bl	80095cc <__sprint_r>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f47f af34 	bne.w	8009d5c <_vfiprintf_r+0x710>
 8009ef4:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009ef8:	4655      	mov	r5, sl
 8009efa:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009efe:	e654      	b.n	8009baa <_vfiprintf_r+0x55e>
 8009f00:	4658      	mov	r0, fp
 8009f02:	4649      	mov	r1, r9
 8009f04:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f08:	f7ff fb60 	bl	80095cc <__sprint_r>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f47f af25 	bne.w	8009d5c <_vfiprintf_r+0x710>
 8009f12:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009f16:	4655      	mov	r5, sl
 8009f18:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009f1c:	e657      	b.n	8009bce <_vfiprintf_r+0x582>
 8009f1e:	f001 fb59 	bl	800b5d4 <__sinit>
 8009f22:	f7ff bba1 	b.w	8009668 <_vfiprintf_r+0x1c>
 8009f26:	bf00      	nop
 8009f28:	08018558 	.word	0x08018558
 8009f2c:	08018568 	.word	0x08018568
 8009f30:	2a09      	cmp	r2, #9
 8009f32:	d97a      	bls.n	800a02a <_vfiprintf_r+0x9de>
 8009f34:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
 8009f38:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8009f3c:	300f      	adds	r0, #15
 8009f3e:	fbac 1302 	umull	r1, r3, ip, r2
 8009f42:	4601      	mov	r1, r0
 8009f44:	3801      	subs	r0, #1
 8009f46:	08db      	lsrs	r3, r3, #3
 8009f48:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8009f4c:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 8009f50:	461a      	mov	r2, r3
 8009f52:	3630      	adds	r6, #48	; 0x30
 8009f54:	700e      	strb	r6, [r1, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1f1      	bne.n	8009f3e <_vfiprintf_r+0x8f2>
 8009f5a:	9b02      	ldr	r3, [sp, #8]
 8009f5c:	910a      	str	r1, [sp, #40]	; 0x28
 8009f5e:	1a5b      	subs	r3, r3, r1
 8009f60:	9306      	str	r3, [sp, #24]
 8009f62:	e49f      	b.n	80098a4 <_vfiprintf_r+0x258>
 8009f64:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8009f68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009f6a:	330f      	adds	r3, #15
 8009f6c:	f002 000f 	and.w	r0, r2, #15
 8009f70:	4619      	mov	r1, r3
 8009f72:	3b01      	subs	r3, #1
 8009f74:	0912      	lsrs	r2, r2, #4
 8009f76:	5c30      	ldrb	r0, [r6, r0]
 8009f78:	7008      	strb	r0, [r1, #0]
 8009f7a:	d1f7      	bne.n	8009f6c <_vfiprintf_r+0x920>
 8009f7c:	9b02      	ldr	r3, [sp, #8]
 8009f7e:	910a      	str	r1, [sp, #40]	; 0x28
 8009f80:	1a5b      	subs	r3, r3, r1
 8009f82:	9306      	str	r3, [sp, #24]
 8009f84:	e48e      	b.n	80098a4 <_vfiprintf_r+0x258>
 8009f86:	9a03      	ldr	r2, [sp, #12]
 8009f88:	f012 0140 	ands.w	r1, r2, #64	; 0x40
 8009f8c:	d06b      	beq.n	800a066 <_vfiprintf_r+0xa1a>
 8009f8e:	9807      	ldr	r0, [sp, #28]
 8009f90:	8802      	ldrh	r2, [r0, #0]
 8009f92:	3004      	adds	r0, #4
 8009f94:	9007      	str	r0, [sp, #28]
 8009f96:	1c11      	adds	r1, r2, #0
 8009f98:	bf18      	it	ne
 8009f9a:	2101      	movne	r1, #1
 8009f9c:	e4a2      	b.n	80098e4 <_vfiprintf_r+0x298>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009fa4:	9b07      	ldr	r3, [sp, #28]
 8009fa6:	d056      	beq.n	800a056 <_vfiprintf_r+0xa0a>
 8009fa8:	881a      	ldrh	r2, [r3, #0]
 8009faa:	2301      	movs	r3, #1
 8009fac:	e4a9      	b.n	8009902 <_vfiprintf_r+0x2b6>
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	bf0c      	ite	eq
 8009fb8:	681a      	ldreq	r2, [r3, #0]
 8009fba:	f9b3 2000 	ldrshne.w	r2, [r3]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	9307      	str	r3, [sp, #28]
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	f6bf ac3b 	bge.w	800983e <_vfiprintf_r+0x1f2>
 8009fc8:	4252      	negs	r2, r2
 8009fca:	1c11      	adds	r1, r2, #0
 8009fcc:	bf18      	it	ne
 8009fce:	2101      	movne	r1, #1
 8009fd0:	232d      	movs	r3, #45	; 0x2d
 8009fd2:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e435      	b.n	8009846 <_vfiprintf_r+0x1fa>
 8009fda:	4658      	mov	r0, fp
 8009fdc:	4649      	mov	r1, r9
 8009fde:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009fe2:	f7ff faf3 	bl	80095cc <__sprint_r>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f47f aeb8 	bne.w	8009d5c <_vfiprintf_r+0x710>
 8009fec:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009ff0:	4655      	mov	r5, sl
 8009ff2:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009ff6:	e5c5      	b.n	8009b84 <_vfiprintf_r+0x538>
 8009ff8:	9b07      	ldr	r3, [sp, #28]
 8009ffa:	681c      	ldr	r4, [r3, #0]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	bfbc      	itt	lt
 800a002:	9307      	strlt	r3, [sp, #28]
 800a004:	f04f 34ff 	movlt.w	r4, #4294967295
 800a008:	f6ff aba1 	blt.w	800974e <_vfiprintf_r+0x102>
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	f7ff bb9e 	b.w	800974e <_vfiprintf_r+0x102>
 800a012:	4658      	mov	r0, fp
 800a014:	4649      	mov	r1, r9
 800a016:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a01a:	f7ff fad7 	bl	80095cc <__sprint_r>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f47f ae9c 	bne.w	8009d5c <_vfiprintf_r+0x710>
 800a024:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a028:	e65f      	b.n	8009cea <_vfiprintf_r+0x69e>
 800a02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02c:	3230      	adds	r2, #48	; 0x30
 800a02e:	f88d 250f 	strb.w	r2, [sp, #1295]	; 0x50f
 800a032:	9306      	str	r3, [sp, #24]
 800a034:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800a038:	330f      	adds	r3, #15
 800a03a:	930a      	str	r3, [sp, #40]	; 0x28
 800a03c:	e432      	b.n	80098a4 <_vfiprintf_r+0x258>
 800a03e:	9b02      	ldr	r3, [sp, #8]
 800a040:	1a1b      	subs	r3, r3, r0
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	e42e      	b.n	80098a4 <_vfiprintf_r+0x258>
 800a046:	9807      	ldr	r0, [sp, #28]
 800a048:	9905      	ldr	r1, [sp, #20]
 800a04a:	6803      	ldr	r3, [r0, #0]
 800a04c:	3004      	adds	r0, #4
 800a04e:	9007      	str	r0, [sp, #28]
 800a050:	6019      	str	r1, [r3, #0]
 800a052:	f7ff bb3e 	b.w	80096d2 <_vfiprintf_r+0x86>
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	2301      	movs	r3, #1
 800a05a:	e452      	b.n	8009902 <_vfiprintf_r+0x2b6>
 800a05c:	9907      	ldr	r1, [sp, #28]
 800a05e:	680a      	ldr	r2, [r1, #0]
 800a060:	3104      	adds	r1, #4
 800a062:	9107      	str	r1, [sp, #28]
 800a064:	e4d1      	b.n	8009a0a <_vfiprintf_r+0x3be>
 800a066:	9b07      	ldr	r3, [sp, #28]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	460b      	mov	r3, r1
 800a06c:	e449      	b.n	8009902 <_vfiprintf_r+0x2b6>
 800a06e:	4658      	mov	r0, fp
 800a070:	4649      	mov	r1, r9
 800a072:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a076:	f7ff faa9 	bl	80095cc <__sprint_r>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f47f ae6e 	bne.w	8009d5c <_vfiprintf_r+0x710>
 800a080:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a084:	4655      	mov	r5, sl
 800a086:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a08a:	e5a4      	b.n	8009bd6 <_vfiprintf_r+0x58a>
 800a08c:	f8dd 3518 	ldr.w	r3, [sp, #1304]	; 0x518
 800a090:	464c      	mov	r4, r9
 800a092:	2b00      	cmp	r3, #0
 800a094:	f43f ae63 	beq.w	8009d5e <_vfiprintf_r+0x712>
 800a098:	4658      	mov	r0, fp
 800a09a:	4649      	mov	r1, r9
 800a09c:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a0a0:	f7ff fa94 	bl	80095cc <__sprint_r>
 800a0a4:	e65b      	b.n	8009d5e <_vfiprintf_r+0x712>
 800a0a6:	9a07      	ldr	r2, [sp, #28]
 800a0a8:	9805      	ldr	r0, [sp, #20]
 800a0aa:	6813      	ldr	r3, [r2, #0]
 800a0ac:	3204      	adds	r2, #4
 800a0ae:	9207      	str	r2, [sp, #28]
 800a0b0:	6018      	str	r0, [r3, #0]
 800a0b2:	f7ff bb0e 	b.w	80096d2 <_vfiprintf_r+0x86>
 800a0b6:	9609      	str	r6, [sp, #36]	; 0x24
 800a0b8:	f7fe f86c 	bl	8008194 <strlen>
 800a0bc:	9006      	str	r0, [sp, #24]
 800a0be:	f7ff bbf2 	b.w	80098a6 <_vfiprintf_r+0x25a>
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	; (800a0fc <_vfiprintf_r+0xab0>)
 800a0c4:	2c06      	cmp	r4, #6
 800a0c6:	bf28      	it	cs
 800a0c8:	2406      	movcs	r4, #6
 800a0ca:	9406      	str	r4, [sp, #24]
 800a0cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ce:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	e441      	b.n	800995a <_vfiprintf_r+0x30e>
 800a0d6:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a0da:	4e09      	ldr	r6, [pc, #36]	; (800a100 <_vfiprintf_r+0xab4>)
 800a0dc:	e47d      	b.n	80099da <_vfiprintf_r+0x38e>
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0e2:	1a1b      	subs	r3, r3, r0
 800a0e4:	9306      	str	r3, [sp, #24]
 800a0e6:	f7ff bbdd 	b.w	80098a4 <_vfiprintf_r+0x258>
 800a0ea:	9406      	str	r4, [sp, #24]
 800a0ec:	9009      	str	r0, [sp, #36]	; 0x24
 800a0ee:	f7ff bbda 	b.w	80098a6 <_vfiprintf_r+0x25a>
 800a0f2:	f04f 35ff 	mov.w	r5, #4294967295
 800a0f6:	9505      	str	r5, [sp, #20]
 800a0f8:	e639      	b.n	8009d6e <_vfiprintf_r+0x722>
 800a0fa:	bf00      	nop
 800a0fc:	0801c66c 	.word	0x0801c66c
 800a100:	08018558 	.word	0x08018558

0800a104 <vfiprintf>:
 800a104:	b430      	push	{r4, r5}
 800a106:	f240 0408 	movw	r4, #8
 800a10a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a10e:	460d      	mov	r5, r1
 800a110:	4613      	mov	r3, r2
 800a112:	4601      	mov	r1, r0
 800a114:	462a      	mov	r2, r5
 800a116:	6820      	ldr	r0, [r4, #0]
 800a118:	bc30      	pop	{r4, r5}
 800a11a:	f7ff ba97 	b.w	800964c <_vfiprintf_r>
 800a11e:	bf00      	nop

0800a120 <__swbuf_r>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4604      	mov	r4, r0
 800a124:	460d      	mov	r5, r1
 800a126:	4616      	mov	r6, r2
 800a128:	b110      	cbz	r0, 800a130 <__swbuf_r+0x10>
 800a12a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d044      	beq.n	800a1ba <__swbuf_r+0x9a>
 800a130:	89b2      	ldrh	r2, [r6, #12]
 800a132:	69b1      	ldr	r1, [r6, #24]
 800a134:	b293      	uxth	r3, r2
 800a136:	60b1      	str	r1, [r6, #8]
 800a138:	0719      	lsls	r1, r3, #28
 800a13a:	d52d      	bpl.n	800a198 <__swbuf_r+0x78>
 800a13c:	6931      	ldr	r1, [r6, #16]
 800a13e:	2900      	cmp	r1, #0
 800a140:	d02a      	beq.n	800a198 <__swbuf_r+0x78>
 800a142:	049b      	lsls	r3, r3, #18
 800a144:	bf5e      	ittt	pl
 800a146:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800a14a:	81b2      	strhpl	r2, [r6, #12]
 800a14c:	6e73      	ldrpl	r3, [r6, #100]	; 0x64
 800a14e:	6972      	ldr	r2, [r6, #20]
 800a150:	bf5c      	itt	pl
 800a152:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 800a156:	6673      	strpl	r3, [r6, #100]	; 0x64
 800a158:	6833      	ldr	r3, [r6, #0]
 800a15a:	1a59      	subs	r1, r3, r1
 800a15c:	4291      	cmp	r1, r2
 800a15e:	da24      	bge.n	800a1aa <__swbuf_r+0x8a>
 800a160:	3101      	adds	r1, #1
 800a162:	68b2      	ldr	r2, [r6, #8]
 800a164:	b2ed      	uxtb	r5, r5
 800a166:	3a01      	subs	r2, #1
 800a168:	60b2      	str	r2, [r6, #8]
 800a16a:	f803 5b01 	strb.w	r5, [r3], #1
 800a16e:	6972      	ldr	r2, [r6, #20]
 800a170:	6033      	str	r3, [r6, #0]
 800a172:	428a      	cmp	r2, r1
 800a174:	d006      	beq.n	800a184 <__swbuf_r+0x64>
 800a176:	89b3      	ldrh	r3, [r6, #12]
 800a178:	2d0a      	cmp	r5, #10
 800a17a:	bf14      	ite	ne
 800a17c:	2300      	movne	r3, #0
 800a17e:	f003 0301 	andeq.w	r3, r3, #1
 800a182:	b13b      	cbz	r3, 800a194 <__swbuf_r+0x74>
 800a184:	4620      	mov	r0, r4
 800a186:	4631      	mov	r1, r6
 800a188:	f001 f902 	bl	800b390 <_fflush_r>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	bf18      	it	ne
 800a190:	f04f 35ff 	movne.w	r5, #4294967295
 800a194:	4628      	mov	r0, r5
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	4620      	mov	r0, r4
 800a19a:	4631      	mov	r1, r6
 800a19c:	f000 f824 	bl	800a1e8 <__swsetup_r>
 800a1a0:	b970      	cbnz	r0, 800a1c0 <__swbuf_r+0xa0>
 800a1a2:	89b2      	ldrh	r2, [r6, #12]
 800a1a4:	6931      	ldr	r1, [r6, #16]
 800a1a6:	b293      	uxth	r3, r2
 800a1a8:	e7cb      	b.n	800a142 <__swbuf_r+0x22>
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	f001 f8ef 	bl	800b390 <_fflush_r>
 800a1b2:	b970      	cbnz	r0, 800a1d2 <__swbuf_r+0xb2>
 800a1b4:	6833      	ldr	r3, [r6, #0]
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	e7d3      	b.n	800a162 <__swbuf_r+0x42>
 800a1ba:	f001 fa0b 	bl	800b5d4 <__sinit>
 800a1be:	e7b7      	b.n	800a130 <__swbuf_r+0x10>
 800a1c0:	89b3      	ldrh	r3, [r6, #12]
 800a1c2:	f04f 35ff 	mov.w	r5, #4294967295
 800a1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ca:	81b3      	strh	r3, [r6, #12]
 800a1cc:	2309      	movs	r3, #9
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	e7e0      	b.n	800a194 <__swbuf_r+0x74>
 800a1d2:	f04f 35ff 	mov.w	r5, #4294967295
 800a1d6:	e7dd      	b.n	800a194 <__swbuf_r+0x74>

0800a1d8 <__swbuf>:
 800a1d8:	f240 0308 	movw	r3, #8
 800a1dc:	460a      	mov	r2, r1
 800a1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	e79b      	b.n	800a120 <__swbuf_r>

0800a1e8 <__swsetup_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <__swsetup_r+0xb4>)
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	b110      	cbz	r0, 800a1fa <__swsetup_r+0x12>
 800a1f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d03d      	beq.n	800a276 <__swsetup_r+0x8e>
 800a1fa:	89a2      	ldrh	r2, [r4, #12]
 800a1fc:	b293      	uxth	r3, r2
 800a1fe:	0719      	lsls	r1, r3, #28
 800a200:	bf48      	it	mi
 800a202:	6921      	ldrmi	r1, [r4, #16]
 800a204:	d41d      	bmi.n	800a242 <__swsetup_r+0x5a>
 800a206:	06d8      	lsls	r0, r3, #27
 800a208:	d544      	bpl.n	800a294 <__swsetup_r+0xac>
 800a20a:	0759      	lsls	r1, r3, #29
 800a20c:	bf58      	it	pl
 800a20e:	6921      	ldrpl	r1, [r4, #16]
 800a210:	d513      	bpl.n	800a23a <__swsetup_r+0x52>
 800a212:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a214:	b149      	cbz	r1, 800a22a <__swsetup_r+0x42>
 800a216:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a21a:	4299      	cmp	r1, r3
 800a21c:	d003      	beq.n	800a226 <__swsetup_r+0x3e>
 800a21e:	4628      	mov	r0, r5
 800a220:	f001 fb3c 	bl	800b89c <_free_r>
 800a224:	89a2      	ldrh	r2, [r4, #12]
 800a226:	2300      	movs	r3, #0
 800a228:	6323      	str	r3, [r4, #48]	; 0x30
 800a22a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800a22e:	6921      	ldr	r1, [r4, #16]
 800a230:	2300      	movs	r3, #0
 800a232:	6063      	str	r3, [r4, #4]
 800a234:	0412      	lsls	r2, r2, #16
 800a236:	6021      	str	r1, [r4, #0]
 800a238:	0c12      	lsrs	r2, r2, #16
 800a23a:	f042 0308 	orr.w	r3, r2, #8
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	b29b      	uxth	r3, r3
 800a242:	b1d9      	cbz	r1, 800a27c <__swsetup_r+0x94>
 800a244:	f013 0201 	ands.w	r2, r3, #1
 800a248:	d007      	beq.n	800a25a <__swsetup_r+0x72>
 800a24a:	6963      	ldr	r3, [r4, #20]
 800a24c:	2200      	movs	r2, #0
 800a24e:	60a2      	str	r2, [r4, #8]
 800a250:	425b      	negs	r3, r3
 800a252:	61a3      	str	r3, [r4, #24]
 800a254:	b139      	cbz	r1, 800a266 <__swsetup_r+0x7e>
 800a256:	2000      	movs	r0, #0
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	079b      	lsls	r3, r3, #30
 800a25c:	bf58      	it	pl
 800a25e:	6962      	ldrpl	r2, [r4, #20]
 800a260:	60a2      	str	r2, [r4, #8]
 800a262:	2900      	cmp	r1, #0
 800a264:	d1f7      	bne.n	800a256 <__swsetup_r+0x6e>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a26c:	bf14      	ite	ne
 800a26e:	f04f 30ff 	movne.w	r0, #4294967295
 800a272:	2000      	moveq	r0, #0
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	f001 f9ad 	bl	800b5d4 <__sinit>
 800a27a:	e7be      	b.n	800a1fa <__swsetup_r+0x12>
 800a27c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800a280:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a284:	d0de      	beq.n	800a244 <__swsetup_r+0x5c>
 800a286:	4621      	mov	r1, r4
 800a288:	4628      	mov	r0, r5
 800a28a:	f001 fc5d 	bl	800bb48 <__smakebuf_r>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	6921      	ldr	r1, [r4, #16]
 800a292:	e7d7      	b.n	800a244 <__swsetup_r+0x5c>
 800a294:	f04f 30ff 	mov.w	r0, #4294967295
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	20000008 	.word	0x20000008

0800a2a0 <__register_exitproc>:
 800a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	4828      	ldr	r0, [pc, #160]	; (800a348 <__register_exitproc+0xa8>)
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	6805      	ldr	r5, [r0, #0]
 800a2ac:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	d044      	beq.n	800a33e <__register_exitproc+0x9e>
 800a2b4:	6870      	ldr	r0, [r6, #4]
 800a2b6:	281f      	cmp	r0, #31
 800a2b8:	dd1e      	ble.n	800a2f8 <__register_exitproc+0x58>
 800a2ba:	4824      	ldr	r0, [pc, #144]	; (800a34c <__register_exitproc+0xac>)
 800a2bc:	b910      	cbnz	r0, 800a2c4 <__register_exitproc+0x24>
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c2:	e020      	b.n	800a306 <__register_exitproc+0x66>
 800a2c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a2c8:	9103      	str	r1, [sp, #12]
 800a2ca:	9202      	str	r2, [sp, #8]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	f7fc fe83 	bl	8006fd8 <malloc>
 800a2d2:	9903      	ldr	r1, [sp, #12]
 800a2d4:	9a02      	ldr	r2, [sp, #8]
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	4606      	mov	r6, r0
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d0ef      	beq.n	800a2be <__register_exitproc+0x1e>
 800a2de:	f8d5 c148 	ldr.w	ip, [r5, #328]	; 0x148
 800a2e2:	2700      	movs	r7, #0
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	6077      	str	r7, [r6, #4]
 800a2e8:	f8c6 c000 	str.w	ip, [r6]
 800a2ec:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800a2f0:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 800a2f4:	f8c6 718c 	str.w	r7, [r6, #396]	; 0x18c
 800a2f8:	b944      	cbnz	r4, 800a30c <__register_exitproc+0x6c>
 800a2fa:	1c83      	adds	r3, r0, #2
 800a2fc:	1c42      	adds	r2, r0, #1
 800a2fe:	2000      	movs	r0, #0
 800a300:	6072      	str	r2, [r6, #4]
 800a302:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800a306:	b004      	add	sp, #16
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30c:	2501      	movs	r5, #1
 800a30e:	eb06 0880 	add.w	r8, r6, r0, lsl #2
 800a312:	f8d6 c188 	ldr.w	ip, [r6, #392]	; 0x188
 800a316:	4647      	mov	r7, r8
 800a318:	4085      	lsls	r5, r0
 800a31a:	2c02      	cmp	r4, #2
 800a31c:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800a320:	bf08      	it	eq
 800a322:	f8d6 318c 	ldreq.w	r3, [r6, #396]	; 0x18c
 800a326:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800a32a:	ea4c 0205 	orr.w	r2, ip, r5
 800a32e:	bf08      	it	eq
 800a330:	431d      	orreq	r5, r3
 800a332:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
 800a336:	bf08      	it	eq
 800a338:	f8c6 518c 	streq.w	r5, [r6, #396]	; 0x18c
 800a33c:	e7dd      	b.n	800a2fa <__register_exitproc+0x5a>
 800a33e:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800a342:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800a346:	e7b5      	b.n	800a2b4 <__register_exitproc+0x14>
 800a348:	08018534 	.word	0x08018534
 800a34c:	08006fd9 	.word	0x08006fd9

0800a350 <quorem>:
 800a350:	6903      	ldr	r3, [r0, #16]
 800a352:	690a      	ldr	r2, [r1, #16]
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	4680      	mov	r8, r0
 800a35a:	b083      	sub	sp, #12
 800a35c:	2000      	movs	r0, #0
 800a35e:	429a      	cmp	r2, r3
 800a360:	4689      	mov	r9, r1
 800a362:	9200      	str	r2, [sp, #0]
 800a364:	f300 8093 	bgt.w	800a48e <quorem+0x13e>
 800a368:	3203      	adds	r2, #3
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	f101 0514 	add.w	r5, r1, #20
 800a370:	0092      	lsls	r2, r2, #2
 800a372:	1e5c      	subs	r4, r3, #1
 800a374:	f108 0314 	add.w	r3, r8, #20
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	188b      	adds	r3, r1, r2
 800a37c:	4442      	add	r2, r8
 800a37e:	1d1f      	adds	r7, r3, #4
 800a380:	6859      	ldr	r1, [r3, #4]
 800a382:	6850      	ldr	r0, [r2, #4]
 800a384:	3101      	adds	r1, #1
 800a386:	f002 ff3f 	bl	800d208 <__aeabi_uidiv>
 800a38a:	4606      	mov	r6, r0
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d042      	beq.n	800a416 <quorem+0xc6>
 800a390:	2000      	movs	r0, #0
 800a392:	9a01      	ldr	r2, [sp, #4]
 800a394:	462b      	mov	r3, r5
 800a396:	4686      	mov	lr, r0
 800a398:	f853 cb04 	ldr.w	ip, [r3], #4
 800a39c:	6811      	ldr	r1, [r2, #0]
 800a39e:	fa1f fb8c 	uxth.w	fp, ip
 800a3a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a3a6:	fa1f fa81 	uxth.w	sl, r1
 800a3aa:	fb06 0b0b 	mla	fp, r6, fp, r0
 800a3ae:	44d6      	add	lr, sl
 800a3b0:	fb06 f00c 	mul.w	r0, r6, ip
 800a3b4:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 800a3b8:	fa1f fb8b 	uxth.w	fp, fp
 800a3bc:	ebcb 0a0e 	rsb	sl, fp, lr
 800a3c0:	fa1f fe80 	uxth.w	lr, r0
 800a3c4:	0c00      	lsrs	r0, r0, #16
 800a3c6:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 800a3ca:	429f      	cmp	r7, r3
 800a3cc:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 800a3d0:	fa1f fc8a 	uxth.w	ip, sl
 800a3d4:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 800a3d8:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a3dc:	f842 1b04 	str.w	r1, [r2], #4
 800a3e0:	d2da      	bcs.n	800a398 <quorem+0x48>
 800a3e2:	1d22      	adds	r2, r4, #4
 800a3e4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800a3e8:	6859      	ldr	r1, [r3, #4]
 800a3ea:	b9a1      	cbnz	r1, 800a416 <quorem+0xc6>
 800a3ec:	9801      	ldr	r0, [sp, #4]
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	d20f      	bcs.n	800a412 <quorem+0xc2>
 800a3f2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a3f6:	b962      	cbnz	r2, 800a412 <quorem+0xc2>
 800a3f8:	9a00      	ldr	r2, [sp, #0]
 800a3fa:	1e91      	subs	r1, r2, #2
 800a3fc:	43c2      	mvns	r2, r0
 800a3fe:	18d2      	adds	r2, r2, r3
 800a400:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 800a404:	e002      	b.n	800a40c <quorem+0xbc>
 800a406:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a40a:	b912      	cbnz	r2, 800a412 <quorem+0xc2>
 800a40c:	3c01      	subs	r4, #1
 800a40e:	428c      	cmp	r4, r1
 800a410:	d1f9      	bne.n	800a406 <quorem+0xb6>
 800a412:	f8c8 4010 	str.w	r4, [r8, #16]
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f001 fe61 	bl	800c0e0 <__mcmp>
 800a41e:	2800      	cmp	r0, #0
 800a420:	db34      	blt.n	800a48c <quorem+0x13c>
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	3601      	adds	r6, #1
 800a426:	f04f 0c00 	mov.w	ip, #0
 800a42a:	f855 0b04 	ldr.w	r0, [r5], #4
 800a42e:	6819      	ldr	r1, [r3, #0]
 800a430:	fa1f f980 	uxth.w	r9, r0
 800a434:	0c00      	lsrs	r0, r0, #16
 800a436:	b28a      	uxth	r2, r1
 800a438:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 800a43c:	ebc9 0202 	rsb	r2, r9, r2
 800a440:	42af      	cmp	r7, r5
 800a442:	4494      	add	ip, r2
 800a444:	eb01 422c 	add.w	r2, r1, ip, asr #16
 800a448:	fa1f fc8c 	uxth.w	ip, ip
 800a44c:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 800a450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a454:	f843 1b04 	str.w	r1, [r3], #4
 800a458:	d2e7      	bcs.n	800a42a <quorem+0xda>
 800a45a:	1d22      	adds	r2, r4, #4
 800a45c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800a460:	6859      	ldr	r1, [r3, #4]
 800a462:	b999      	cbnz	r1, 800a48c <quorem+0x13c>
 800a464:	9801      	ldr	r0, [sp, #4]
 800a466:	4298      	cmp	r0, r3
 800a468:	d20e      	bcs.n	800a488 <quorem+0x138>
 800a46a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a46e:	b95a      	cbnz	r2, 800a488 <quorem+0x138>
 800a470:	43c1      	mvns	r1, r0
 800a472:	18c9      	adds	r1, r1, r3
 800a474:	f021 0103 	bic.w	r1, r1, #3
 800a478:	1a59      	subs	r1, r3, r1
 800a47a:	e002      	b.n	800a482 <quorem+0x132>
 800a47c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a480:	b912      	cbnz	r2, 800a488 <quorem+0x138>
 800a482:	3c01      	subs	r4, #1
 800a484:	428b      	cmp	r3, r1
 800a486:	d1f9      	bne.n	800a47c <quorem+0x12c>
 800a488:	f8c8 4010 	str.w	r4, [r8, #16]
 800a48c:	4630      	mov	r0, r6
 800a48e:	b003      	add	sp, #12
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a494 <_dtoa_r>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4681      	mov	r9, r0
 800a49a:	b09d      	sub	sp, #116	; 0x74
 800a49c:	4619      	mov	r1, r3
 800a49e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800a4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4aa:	b163      	cbz	r3, 800a4c6 <_dtoa_r+0x32>
 800a4ac:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800a4b0:	2501      	movs	r5, #1
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4648      	mov	r0, r9
 800a4b6:	4095      	lsls	r5, r2
 800a4b8:	609d      	str	r5, [r3, #8]
 800a4ba:	605a      	str	r2, [r3, #4]
 800a4bc:	f001 fbdc 	bl	800bc78 <_Bfree>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800a4c6:	9d03      	ldr	r5, [sp, #12]
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	f2c0 80e3 	blt.w	800a694 <_dtoa_r+0x200>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800a4da:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800a4de:	402b      	ands	r3, r5
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	f000 80c3 	beq.w	800a66c <_dtoa_r+0x1d8>
 800a4e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	2401      	movs	r4, #1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f003 fbe6 	bl	800dcc4 <__aeabi_dcmpeq>
 800a4f8:	b978      	cbnz	r0, 800a51a <_dtoa_r+0x86>
 800a4fa:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a4fe:	d110      	bne.n	800a522 <_dtoa_r+0x8e>
 800a500:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800a502:	2301      	movs	r3, #1
 800a504:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	4d7b      	ldr	r5, [pc, #492]	; (800a6f8 <_dtoa_r+0x264>)
 800a50a:	b114      	cbz	r4, 800a512 <_dtoa_r+0x7e>
 800a50c:	4b7b      	ldr	r3, [pc, #492]	; (800a6fc <_dtoa_r+0x268>)
 800a50e:	1e5d      	subs	r5, r3, #1
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	4628      	mov	r0, r5
 800a514:	b01d      	add	sp, #116	; 0x74
 800a516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51a:	2400      	movs	r4, #0
 800a51c:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a520:	d0ee      	beq.n	800a500 <_dtoa_r+0x6c>
 800a522:	463b      	mov	r3, r7
 800a524:	4648      	mov	r0, r9
 800a526:	4632      	mov	r2, r6
 800a528:	a91b      	add	r1, sp, #108	; 0x6c
 800a52a:	9100      	str	r1, [sp, #0]
 800a52c:	a91a      	add	r1, sp, #104	; 0x68
 800a52e:	9101      	str	r1, [sp, #4]
 800a530:	f001 fee0 	bl	800c2f4 <__d2b>
 800a534:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a538:	900f      	str	r0, [sp, #60]	; 0x3c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 80b9 	bne.w	800a6b2 <_dtoa_r+0x21e>
 800a540:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a542:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800a546:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a548:	19be      	adds	r6, r7, r6
 800a54a:	429e      	cmp	r6, r3
 800a54c:	f2c0 82a2 	blt.w	800aa94 <_dtoa_r+0x600>
 800a550:	9802      	ldr	r0, [sp, #8]
 800a552:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800a556:	f506 6282 	add.w	r2, r6, #1040	; 0x410
 800a55a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800a55e:	3202      	adds	r2, #2
 800a560:	1b9b      	subs	r3, r3, r6
 800a562:	fa30 f202 	lsrs.w	r2, r0, r2
 800a566:	fa15 f303 	lsls.w	r3, r5, r3
 800a56a:	ea43 0002 	orr.w	r0, r3, r2
 800a56e:	f003 f8cb 	bl	800d708 <__aeabi_ui2d>
 800a572:	3e01      	subs	r6, #1
 800a574:	2401      	movs	r4, #1
 800a576:	9417      	str	r4, [sp, #92]	; 0x5c
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a580:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a582:	f1a5 75f8 	sub.w	r5, r5, #32505856	; 0x1f00000
 800a586:	950d      	str	r5, [sp, #52]	; 0x34
 800a588:	2300      	movs	r3, #0
 800a58a:	2200      	movs	r2, #0
 800a58c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800a590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a594:	f002 ff7a 	bl	800d48c <__aeabi_dsub>
 800a598:	a351      	add	r3, pc, #324	; (adr r3, 800a6e0 <_dtoa_r+0x24c>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f003 f929 	bl	800d7f4 <__aeabi_dmul>
 800a5a2:	a351      	add	r3, pc, #324	; (adr r3, 800a6e8 <_dtoa_r+0x254>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f002 ff72 	bl	800d490 <__adddf3>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	f003 f8b9 	bl	800d728 <__aeabi_i2d>
 800a5b6:	a34e      	add	r3, pc, #312	; (adr r3, 800a6f0 <_dtoa_r+0x25c>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	f003 f91a 	bl	800d7f4 <__aeabi_dmul>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f002 ff62 	bl	800d490 <__adddf3>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	f003 fbaa 	bl	800dd28 <__aeabi_d2iz>
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9006      	str	r0, [sp, #24]
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f003 fb7b 	bl	800dcd8 <__aeabi_dcmplt>
 800a5e2:	b150      	cbz	r0, 800a5fa <_dtoa_r+0x166>
 800a5e4:	9806      	ldr	r0, [sp, #24]
 800a5e6:	f003 f89f 	bl	800d728 <__aeabi_i2d>
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	f003 fb69 	bl	800dcc4 <__aeabi_dcmpeq>
 800a5f2:	b910      	cbnz	r0, 800a5fa <_dtoa_r+0x166>
 800a5f4:	9c06      	ldr	r4, [sp, #24]
 800a5f6:	3c01      	subs	r4, #1
 800a5f8:	9406      	str	r4, [sp, #24]
 800a5fa:	9d06      	ldr	r5, [sp, #24]
 800a5fc:	2d16      	cmp	r5, #22
 800a5fe:	f200 816a 	bhi.w	800a8d6 <_dtoa_r+0x442>
 800a602:	493f      	ldr	r1, [pc, #252]	; (800a700 <_dtoa_r+0x26c>)
 800a604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a608:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a610:	f003 fb80 	bl	800dd14 <__aeabi_dcmpgt>
 800a614:	2800      	cmp	r0, #0
 800a616:	f000 8246 	beq.w	800aaa6 <_dtoa_r+0x612>
 800a61a:	9c06      	ldr	r4, [sp, #24]
 800a61c:	2500      	movs	r5, #0
 800a61e:	9515      	str	r5, [sp, #84]	; 0x54
 800a620:	3c01      	subs	r4, #1
 800a622:	9406      	str	r4, [sp, #24]
 800a624:	1bbe      	subs	r6, r7, r6
 800a626:	3e01      	subs	r6, #1
 800a628:	f100 822f 	bmi.w	800aa8a <_dtoa_r+0x5f6>
 800a62c:	2500      	movs	r5, #0
 800a62e:	960b      	str	r6, [sp, #44]	; 0x2c
 800a630:	9510      	str	r5, [sp, #64]	; 0x40
 800a632:	9c06      	ldr	r4, [sp, #24]
 800a634:	2c00      	cmp	r4, #0
 800a636:	f2c0 821f 	blt.w	800aa78 <_dtoa_r+0x5e4>
 800a63a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a63c:	9414      	str	r4, [sp, #80]	; 0x50
 800a63e:	192d      	adds	r5, r5, r4
 800a640:	2400      	movs	r4, #0
 800a642:	950b      	str	r5, [sp, #44]	; 0x2c
 800a644:	9411      	str	r4, [sp, #68]	; 0x44
 800a646:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a648:	2d09      	cmp	r5, #9
 800a64a:	d85f      	bhi.n	800a70c <_dtoa_r+0x278>
 800a64c:	2401      	movs	r4, #1
 800a64e:	2d05      	cmp	r5, #5
 800a650:	dd02      	ble.n	800a658 <_dtoa_r+0x1c4>
 800a652:	2400      	movs	r4, #0
 800a654:	3d04      	subs	r5, #4
 800a656:	9526      	str	r5, [sp, #152]	; 0x98
 800a658:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a65a:	1eab      	subs	r3, r5, #2
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d857      	bhi.n	800a710 <_dtoa_r+0x27c>
 800a660:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a664:	039a03af 	.word	0x039a03af
 800a668:	03b20264 	.word	0x03b20264
 800a66c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800a66e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a672:	9802      	ldr	r0, [sp, #8]
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	b198      	cbz	r0, 800a6a0 <_dtoa_r+0x20c>
 800a678:	4d22      	ldr	r5, [pc, #136]	; (800a704 <_dtoa_r+0x270>)
 800a67a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a67c:	2c00      	cmp	r4, #0
 800a67e:	f43f af48 	beq.w	800a512 <_dtoa_r+0x7e>
 800a682:	78eb      	ldrb	r3, [r5, #3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 8124 	beq.w	800a8d2 <_dtoa_r+0x43e>
 800a68a:	f105 0308 	add.w	r3, r5, #8
 800a68e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	e73e      	b.n	800a512 <_dtoa_r+0x7e>
 800a694:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800a698:	2301      	movs	r3, #1
 800a69a:	9503      	str	r5, [sp, #12]
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	e718      	b.n	800a4d2 <_dtoa_r+0x3e>
 800a6a0:	4b18      	ldr	r3, [pc, #96]	; (800a704 <_dtoa_r+0x270>)
 800a6a2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a6a6:	4a18      	ldr	r2, [pc, #96]	; (800a708 <_dtoa_r+0x274>)
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	bf0c      	ite	eq
 800a6ac:	4615      	moveq	r5, r2
 800a6ae:	461d      	movne	r5, r3
 800a6b0:	e7e3      	b.n	800a67a <_dtoa_r+0x1e6>
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6ba:	f5a3 767e 	sub.w	r6, r3, #1016	; 0x3f8
 800a6be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6c0:	2400      	movs	r4, #0
 800a6c2:	3e07      	subs	r6, #7
 800a6c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a6c6:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 800a6ca:	9417      	str	r4, [sp, #92]	; 0x5c
 800a6cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6d0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a6d4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a6d8:	930d      	str	r3, [sp, #52]	; 0x34
 800a6da:	e755      	b.n	800a588 <_dtoa_r+0xf4>
 800a6dc:	f3af 8000 	nop.w
 800a6e0:	636f4361 	.word	0x636f4361
 800a6e4:	3fd287a7 	.word	0x3fd287a7
 800a6e8:	8b60c8b3 	.word	0x8b60c8b3
 800a6ec:	3fc68a28 	.word	0x3fc68a28
 800a6f0:	509f79fb 	.word	0x509f79fb
 800a6f4:	3fd34413 	.word	0x3fd34413
 800a6f8:	0801c674 	.word	0x0801c674
 800a6fc:	0801c675 	.word	0x0801c675
 800a700:	08018588 	.word	0x08018588
 800a704:	0801c684 	.word	0x0801c684
 800a708:	0801c678 	.word	0x0801c678
 800a70c:	2400      	movs	r4, #0
 800a70e:	9426      	str	r4, [sp, #152]	; 0x98
 800a710:	2400      	movs	r4, #0
 800a712:	4648      	mov	r0, r9
 800a714:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800a718:	4621      	mov	r1, r4
 800a71a:	f04f 35ff 	mov.w	r5, #4294967295
 800a71e:	950e      	str	r5, [sp, #56]	; 0x38
 800a720:	f001 fa84 	bl	800bc2c <_Balloc>
 800a724:	2501      	movs	r5, #1
 800a726:	9513      	str	r5, [sp, #76]	; 0x4c
 800a728:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a72a:	9427      	str	r4, [sp, #156]	; 0x9c
 800a72c:	9516      	str	r5, [sp, #88]	; 0x58
 800a72e:	900a      	str	r0, [sp, #40]	; 0x28
 800a730:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a736:	9d06      	ldr	r5, [sp, #24]
 800a738:	43dc      	mvns	r4, r3
 800a73a:	0fe4      	lsrs	r4, r4, #31
 800a73c:	2d0e      	cmp	r5, #14
 800a73e:	bfcc      	ite	gt
 800a740:	2400      	movgt	r4, #0
 800a742:	f004 0401 	andle.w	r4, r4, #1
 800a746:	2c00      	cmp	r4, #0
 800a748:	f000 80ca 	beq.w	800a8e0 <_dtoa_r+0x44c>
 800a74c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a74e:	4b63      	ldr	r3, [pc, #396]	; (800a8dc <_dtoa_r+0x448>)
 800a750:	0fec      	lsrs	r4, r5, #31
 800a752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a754:	2d00      	cmp	r5, #0
 800a756:	bfcc      	ite	gt
 800a758:	2400      	movgt	r4, #0
 800a75a:	f004 0401 	andle.w	r4, r4, #1
 800a75e:	9d06      	ldr	r5, [sp, #24]
 800a760:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a764:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a76c:	2c00      	cmp	r4, #0
 800a76e:	f040 81c2 	bne.w	800aaf6 <_dtoa_r+0x662>
 800a772:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a77c:	4630      	mov	r0, r6
 800a77e:	4639      	mov	r1, r7
 800a780:	f003 f962 	bl	800da48 <__aeabi_ddiv>
 800a784:	f003 fad0 	bl	800dd28 <__aeabi_d2iz>
 800a788:	4682      	mov	sl, r0
 800a78a:	f002 ffcd 	bl	800d728 <__aeabi_i2d>
 800a78e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a792:	f003 f82f 	bl	800d7f4 <__aeabi_dmul>
 800a796:	460b      	mov	r3, r1
 800a798:	4602      	mov	r2, r0
 800a79a:	4639      	mov	r1, r7
 800a79c:	4630      	mov	r0, r6
 800a79e:	f002 fe75 	bl	800d48c <__aeabi_dsub>
 800a7a2:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800a7a6:	f805 3b01 	strb.w	r3, [r5], #1
 800a7aa:	46a8      	mov	r8, r5
 800a7ac:	9512      	str	r5, [sp, #72]	; 0x48
 800a7ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a7b0:	2d01      	cmp	r5, #1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	d052      	beq.n	800a85e <_dtoa_r+0x3ca>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a7c0:	f003 f818 	bl	800d7f4 <__aeabi_dmul>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	460f      	mov	r7, r1
 800a7cc:	f003 fa7a 	bl	800dcc4 <__aeabi_dcmpeq>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	b100      	cbz	r0, 800a7d6 <_dtoa_r+0x342>
 800a7d4:	4623      	mov	r3, r4
 800a7d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a7da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a7dc:	f000 85b6 	beq.w	800b34c <_dtoa_r+0xeb8>
 800a7e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a7e2:	1cac      	adds	r4, r5, #2
 800a7e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7e8:	eb05 0b00 	add.w	fp, r5, r0
 800a7ec:	e00e      	b.n	800a80c <_dtoa_r+0x378>
 800a7ee:	f003 f801 	bl	800d7f4 <__aeabi_dmul>
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	f003 fa63 	bl	800dcc4 <__aeabi_dcmpeq>
 800a7fe:	b108      	cbz	r0, 800a804 <_dtoa_r+0x370>
 800a800:	f04f 0800 	mov.w	r8, #0
 800a804:	f018 0fff 	tst.w	r8, #255	; 0xff
 800a808:	f000 845a 	beq.w	800b0c0 <_dtoa_r+0xc2c>
 800a80c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	46a1      	mov	r9, r4
 800a816:	f003 f917 	bl	800da48 <__aeabi_ddiv>
 800a81a:	f04f 0801 	mov.w	r8, #1
 800a81e:	f003 fa83 	bl	800dd28 <__aeabi_d2iz>
 800a822:	4682      	mov	sl, r0
 800a824:	f002 ff80 	bl	800d728 <__aeabi_i2d>
 800a828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a82c:	f10a 0530 	add.w	r5, sl, #48	; 0x30
 800a830:	f002 ffe0 	bl	800d7f4 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f002 fe26 	bl	800d48c <__aeabi_dsub>
 800a840:	2300      	movs	r3, #0
 800a842:	2200      	movs	r2, #0
 800a844:	455c      	cmp	r4, fp
 800a846:	f804 5c01 	strb.w	r5, [r4, #-1]
 800a84a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a84e:	f104 0401 	add.w	r4, r4, #1
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	d1ca      	bne.n	800a7ee <_dtoa_r+0x35a>
 800a858:	46c8      	mov	r8, r9
 800a85a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a85e:	4632      	mov	r2, r6
 800a860:	463b      	mov	r3, r7
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f002 fe13 	bl	800d490 <__adddf3>
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
 800a86e:	4622      	mov	r2, r4
 800a870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a874:	462b      	mov	r3, r5
 800a876:	f003 fa2f 	bl	800dcd8 <__aeabi_dcmplt>
 800a87a:	b960      	cbnz	r0, 800a896 <_dtoa_r+0x402>
 800a87c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a880:	4622      	mov	r2, r4
 800a882:	462b      	mov	r3, r5
 800a884:	f003 fa1e 	bl	800dcc4 <__aeabi_dcmpeq>
 800a888:	2800      	cmp	r0, #0
 800a88a:	f000 841c 	beq.w	800b0c6 <_dtoa_r+0xc32>
 800a88e:	f01a 0f01 	tst.w	sl, #1
 800a892:	f000 8418 	beq.w	800b0c6 <_dtoa_r+0xc32>
 800a896:	9c06      	ldr	r4, [sp, #24]
 800a898:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800a89c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a89e:	9418      	str	r4, [sp, #96]	; 0x60
 800a8a0:	4643      	mov	r3, r8
 800a8a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a8a4:	e002      	b.n	800a8ac <_dtoa_r+0x418>
 800a8a6:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	2e39      	cmp	r6, #57	; 0x39
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f040 84d2 	bne.w	800b258 <_dtoa_r+0xdc4>
 800a8b4:	428b      	cmp	r3, r1
 800a8b6:	d1f6      	bne.n	800a8a6 <_dtoa_r+0x412>
 800a8b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a8ba:	2330      	movs	r3, #48	; 0x30
 800a8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a8be:	2231      	movs	r2, #49	; 0x31
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	9406      	str	r4, [sp, #24]
 800a8c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800a8c6:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a8ca:	4623      	mov	r3, r4
 800a8cc:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a8d0:	e0c0      	b.n	800aa54 <_dtoa_r+0x5c0>
 800a8d2:	1ceb      	adds	r3, r5, #3
 800a8d4:	e6db      	b.n	800a68e <_dtoa_r+0x1fa>
 800a8d6:	2401      	movs	r4, #1
 800a8d8:	9415      	str	r4, [sp, #84]	; 0x54
 800a8da:	e6a3      	b.n	800a624 <_dtoa_r+0x190>
 800a8dc:	08018588 	.word	0x08018588
 800a8e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a8e2:	2d00      	cmp	r5, #0
 800a8e4:	f040 80e2 	bne.w	800aaac <_dtoa_r+0x618>
 800a8e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a8ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a8ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a8f4:	bfd4      	ite	le
 800a8f6:	2300      	movle	r3, #0
 800a8f8:	2301      	movgt	r3, #1
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	bfd4      	ite	le
 800a8fe:	2300      	movle	r3, #0
 800a900:	f003 0301 	andgt.w	r3, r3, #1
 800a904:	b14b      	cbz	r3, 800a91a <_dtoa_r+0x486>
 800a906:	4603      	mov	r3, r0
 800a908:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a90a:	42ab      	cmp	r3, r5
 800a90c:	bfa8      	it	ge
 800a90e:	462b      	movge	r3, r5
 800a910:	1aed      	subs	r5, r5, r3
 800a912:	1ac9      	subs	r1, r1, r3
 800a914:	1ac0      	subs	r0, r0, r3
 800a916:	9110      	str	r1, [sp, #64]	; 0x40
 800a918:	900b      	str	r0, [sp, #44]	; 0x2c
 800a91a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a91c:	2a00      	cmp	r2, #0
 800a91e:	dd1a      	ble.n	800a956 <_dtoa_r+0x4c2>
 800a920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 8457 	beq.w	800b1d6 <_dtoa_r+0xd42>
 800a928:	2c00      	cmp	r4, #0
 800a92a:	dd10      	ble.n	800a94e <_dtoa_r+0x4ba>
 800a92c:	4651      	mov	r1, sl
 800a92e:	4622      	mov	r2, r4
 800a930:	4648      	mov	r0, r9
 800a932:	f001 fb29 	bl	800bf88 <__pow5mult>
 800a936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a938:	4682      	mov	sl, r0
 800a93a:	4648      	mov	r0, r9
 800a93c:	4651      	mov	r1, sl
 800a93e:	f001 fa87 	bl	800be50 <__multiply>
 800a942:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a944:	4606      	mov	r6, r0
 800a946:	4648      	mov	r0, r9
 800a948:	f001 f996 	bl	800bc78 <_Bfree>
 800a94c:	960f      	str	r6, [sp, #60]	; 0x3c
 800a94e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a950:	1b02      	subs	r2, r0, r4
 800a952:	f040 8464 	bne.w	800b21e <_dtoa_r+0xd8a>
 800a956:	2101      	movs	r1, #1
 800a958:	4648      	mov	r0, r9
 800a95a:	f001 fa6f 	bl	800be3c <__i2b>
 800a95e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a960:	2900      	cmp	r1, #0
 800a962:	4604      	mov	r4, r0
 800a964:	dd05      	ble.n	800a972 <_dtoa_r+0x4de>
 800a966:	4621      	mov	r1, r4
 800a968:	4648      	mov	r0, r9
 800a96a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a96c:	f001 fb0c 	bl	800bf88 <__pow5mult>
 800a970:	4604      	mov	r4, r0
 800a972:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a974:	2a01      	cmp	r2, #1
 800a976:	f340 822a 	ble.w	800adce <_dtoa_r+0x93a>
 800a97a:	2600      	movs	r6, #0
 800a97c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a97e:	2301      	movs	r3, #1
 800a980:	2a00      	cmp	r2, #0
 800a982:	f040 83a4 	bne.w	800b0ce <_dtoa_r+0xc3a>
 800a986:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a988:	181b      	adds	r3, r3, r0
 800a98a:	f013 031f 	ands.w	r3, r3, #31
 800a98e:	f000 8275 	beq.w	800ae7c <_dtoa_r+0x9e8>
 800a992:	f1c3 0220 	rsb	r2, r3, #32
 800a996:	2a04      	cmp	r2, #4
 800a998:	f340 84f3 	ble.w	800b382 <_dtoa_r+0xeee>
 800a99c:	f1c3 031c 	rsb	r3, r3, #28
 800a9a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a9a2:	18ed      	adds	r5, r5, r3
 800a9a4:	18c0      	adds	r0, r0, r3
 800a9a6:	18c9      	adds	r1, r1, r3
 800a9a8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9aa:	9110      	str	r1, [sp, #64]	; 0x40
 800a9ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	dd05      	ble.n	800a9be <_dtoa_r+0x52a>
 800a9b2:	4648      	mov	r0, r9
 800a9b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9b8:	f001 fb32 	bl	800c020 <__lshift>
 800a9bc:	900f      	str	r0, [sp, #60]	; 0x3c
 800a9be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	dd04      	ble.n	800a9ce <_dtoa_r+0x53a>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4648      	mov	r0, r9
 800a9c8:	f001 fb2a 	bl	800c020 <__lshift>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 8385 	bne.w	800b0e0 <_dtoa_r+0xc4c>
 800a9d6:	9826      	ldr	r0, [sp, #152]	; 0x98
 800a9d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a9da:	2802      	cmp	r0, #2
 800a9dc:	bfd4      	ite	le
 800a9de:	2300      	movle	r3, #0
 800a9e0:	2301      	movgt	r3, #1
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	bfcc      	ite	gt
 800a9e6:	2300      	movgt	r3, #0
 800a9e8:	f003 0301 	andle.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 824e 	beq.w	800ae8e <_dtoa_r+0x9fa>
 800a9f2:	2900      	cmp	r1, #0
 800a9f4:	f040 8094 	bne.w	800ab20 <_dtoa_r+0x68c>
 800a9f8:	2205      	movs	r2, #5
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4648      	mov	r0, r9
 800a9fe:	4621      	mov	r1, r4
 800aa00:	f001 f944 	bl	800bc8c <__multadd>
 800aa04:	4604      	mov	r4, r0
 800aa06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f001 fb69 	bl	800c0e0 <__mcmp>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f340 8086 	ble.w	800ab20 <_dtoa_r+0x68c>
 800aa14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa16:	2700      	movs	r7, #0
 800aa18:	9806      	ldr	r0, [sp, #24]
 800aa1a:	2231      	movs	r2, #49	; 0x31
 800aa1c:	461d      	mov	r5, r3
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f803 2b01 	strb.w	r2, [r3], #1
 800aa24:	9006      	str	r0, [sp, #24]
 800aa26:	930a      	str	r3, [sp, #40]	; 0x28
 800aa28:	4648      	mov	r0, r9
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	f001 f924 	bl	800bc78 <_Bfree>
 800aa30:	f1ba 0f00 	cmp.w	sl, #0
 800aa34:	d00e      	beq.n	800aa54 <_dtoa_r+0x5c0>
 800aa36:	1c3b      	adds	r3, r7, #0
 800aa38:	bf18      	it	ne
 800aa3a:	2301      	movne	r3, #1
 800aa3c:	4557      	cmp	r7, sl
 800aa3e:	bf0c      	ite	eq
 800aa40:	2300      	moveq	r3, #0
 800aa42:	f003 0301 	andne.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f040 8213 	bne.w	800ae72 <_dtoa_r+0x9de>
 800aa4c:	4648      	mov	r0, r9
 800aa4e:	4651      	mov	r1, sl
 800aa50:	f001 f912 	bl	800bc78 <_Bfree>
 800aa54:	4648      	mov	r0, r9
 800aa56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa58:	f001 f90e 	bl	800bc78 <_Bfree>
 800aa5c:	9c06      	ldr	r4, [sp, #24]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	1c63      	adds	r3, r4, #1
 800aa62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa64:	7022      	strb	r2, [r4, #0]
 800aa66:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	f43f ad50 	beq.w	800a512 <_dtoa_r+0x7e>
 800aa72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa74:	6020      	str	r0, [r4, #0]
 800aa76:	e54c      	b.n	800a512 <_dtoa_r+0x7e>
 800aa78:	9c06      	ldr	r4, [sp, #24]
 800aa7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aa7c:	1b2d      	subs	r5, r5, r4
 800aa7e:	9510      	str	r5, [sp, #64]	; 0x40
 800aa80:	4265      	negs	r5, r4
 800aa82:	2400      	movs	r4, #0
 800aa84:	9511      	str	r5, [sp, #68]	; 0x44
 800aa86:	9414      	str	r4, [sp, #80]	; 0x50
 800aa88:	e5dd      	b.n	800a646 <_dtoa_r+0x1b2>
 800aa8a:	4276      	negs	r6, r6
 800aa8c:	2400      	movs	r4, #0
 800aa8e:	9610      	str	r6, [sp, #64]	; 0x40
 800aa90:	940b      	str	r4, [sp, #44]	; 0x2c
 800aa92:	e5ce      	b.n	800a632 <_dtoa_r+0x19e>
 800aa94:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 800aa98:	9902      	ldr	r1, [sp, #8]
 800aa9a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800aa9e:	1b92      	subs	r2, r2, r6
 800aaa0:	fa11 f002 	lsls.w	r0, r1, r2
 800aaa4:	e563      	b.n	800a56e <_dtoa_r+0xda>
 800aaa6:	2500      	movs	r5, #0
 800aaa8:	9515      	str	r5, [sp, #84]	; 0x54
 800aaaa:	e5bb      	b.n	800a624 <_dtoa_r+0x190>
 800aaac:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800aaae:	2d01      	cmp	r5, #1
 800aab0:	f340 83bf 	ble.w	800b232 <_dtoa_r+0xd9e>
 800aab4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aab6:	1e6b      	subs	r3, r5, #1
 800aab8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aaba:	429d      	cmp	r5, r3
 800aabc:	bfaf      	iteee	ge
 800aabe:	ebc3 0405 	rsbge	r4, r3, r5
 800aac2:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 800aac4:	9311      	strlt	r3, [sp, #68]	; 0x44
 800aac6:	ebc5 0203 	rsblt	r2, r5, r3
 800aaca:	bfbe      	ittt	lt
 800aacc:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 800aace:	18ad      	addlt	r5, r5, r2
 800aad0:	9514      	strlt	r5, [sp, #80]	; 0x50
 800aad2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aad4:	2d00      	cmp	r5, #0
 800aad6:	f2c0 83c8 	blt.w	800b26a <_dtoa_r+0xdd6>
 800aada:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aadc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aade:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aae0:	4648      	mov	r0, r9
 800aae2:	2101      	movs	r1, #1
 800aae4:	18d2      	adds	r2, r2, r3
 800aae6:	9210      	str	r2, [sp, #64]	; 0x40
 800aae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaea:	18d2      	adds	r2, r2, r3
 800aaec:	920b      	str	r2, [sp, #44]	; 0x2c
 800aaee:	f001 f9a5 	bl	800be3c <__i2b>
 800aaf2:	4682      	mov	sl, r0
 800aaf4:	e6fc      	b.n	800a8f0 <_dtoa_r+0x45c>
 800aaf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aaf8:	2c00      	cmp	r4, #0
 800aafa:	f040 8397 	bne.w	800b22c <_dtoa_r+0xd98>
 800aafe:	2300      	movs	r3, #0
 800ab00:	2200      	movs	r2, #0
 800ab02:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800ab06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab0a:	f002 fe73 	bl	800d7f4 <__aeabi_dmul>
 800ab0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab12:	f003 f8f5 	bl	800dd00 <__aeabi_dcmpge>
 800ab16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ab18:	46a2      	mov	sl, r4
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f43f af7a 	beq.w	800aa14 <_dtoa_r+0x580>
 800ab20:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ab22:	2700      	movs	r7, #0
 800ab24:	43ed      	mvns	r5, r5
 800ab26:	9506      	str	r5, [sp, #24]
 800ab28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ab2a:	e77d      	b.n	800aa28 <_dtoa_r+0x594>
 800ab2c:	2501      	movs	r5, #1
 800ab2e:	9513      	str	r5, [sp, #76]	; 0x4c
 800ab30:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	f340 82ec 	ble.w	800b110 <_dtoa_r+0xc7c>
 800ab38:	46ab      	mov	fp, r5
 800ab3a:	2d0e      	cmp	r5, #14
 800ab3c:	bf8c      	ite	hi
 800ab3e:	2400      	movhi	r4, #0
 800ab40:	f004 0401 	andls.w	r4, r4, #1
 800ab44:	9516      	str	r5, [sp, #88]	; 0x58
 800ab46:	950e      	str	r5, [sp, #56]	; 0x38
 800ab48:	2100      	movs	r1, #0
 800ab4a:	f1bb 0f17 	cmp.w	fp, #23
 800ab4e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ab52:	d90a      	bls.n	800ab6a <_dtoa_r+0x6d6>
 800ab54:	2201      	movs	r2, #1
 800ab56:	2304      	movs	r3, #4
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	f103 0014 	add.w	r0, r3, #20
 800ab60:	3201      	adds	r2, #1
 800ab62:	4558      	cmp	r0, fp
 800ab64:	d9f8      	bls.n	800ab58 <_dtoa_r+0x6c4>
 800ab66:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ab6a:	4648      	mov	r0, r9
 800ab6c:	f001 f85e 	bl	800bc2c <_Balloc>
 800ab70:	900a      	str	r0, [sp, #40]	; 0x28
 800ab72:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	f43f addc 	beq.w	800a734 <_dtoa_r+0x2a0>
 800ab7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab80:	461d      	mov	r5, r3
 800ab82:	4614      	mov	r4, r2
 800ab84:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800ab88:	9d06      	ldr	r5, [sp, #24]
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	f340 820d 	ble.w	800afaa <_dtoa_r+0xb16>
 800ab90:	f005 020f 	and.w	r2, r5, #15
 800ab94:	4b9b      	ldr	r3, [pc, #620]	; (800ae04 <_dtoa_r+0x970>)
 800ab96:	112c      	asrs	r4, r5, #4
 800ab98:	2602      	movs	r6, #2
 800ab9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9e:	06e2      	lsls	r2, r4, #27
 800aba0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800aba4:	d50b      	bpl.n	800abbe <_dtoa_r+0x72a>
 800aba6:	4b98      	ldr	r3, [pc, #608]	; (800ae08 <_dtoa_r+0x974>)
 800aba8:	f004 040f 	and.w	r4, r4, #15
 800abac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb0:	2603      	movs	r6, #3
 800abb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abb6:	f002 ff47 	bl	800da48 <__aeabi_ddiv>
 800abba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abbe:	b174      	cbz	r4, 800abde <_dtoa_r+0x74a>
 800abc0:	4d91      	ldr	r5, [pc, #580]	; (800ae08 <_dtoa_r+0x974>)
 800abc2:	07e3      	lsls	r3, r4, #31
 800abc4:	4650      	mov	r0, sl
 800abc6:	4659      	mov	r1, fp
 800abc8:	d506      	bpl.n	800abd8 <_dtoa_r+0x744>
 800abca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abce:	3601      	adds	r6, #1
 800abd0:	f002 fe10 	bl	800d7f4 <__aeabi_dmul>
 800abd4:	4682      	mov	sl, r0
 800abd6:	468b      	mov	fp, r1
 800abd8:	3508      	adds	r5, #8
 800abda:	1064      	asrs	r4, r4, #1
 800abdc:	d1f1      	bne.n	800abc2 <_dtoa_r+0x72e>
 800abde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe2:	4652      	mov	r2, sl
 800abe4:	465b      	mov	r3, fp
 800abe6:	f002 ff2f 	bl	800da48 <__aeabi_ddiv>
 800abea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800abf0:	2c00      	cmp	r4, #0
 800abf2:	f000 810b 	beq.w	800ae0c <_dtoa_r+0x978>
 800abf6:	2300      	movs	r3, #0
 800abf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abfc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ac00:	2200      	movs	r2, #0
 800ac02:	f003 f869 	bl	800dcd8 <__aeabi_dcmplt>
 800ac06:	2301      	movs	r3, #1
 800ac08:	b900      	cbnz	r0, 800ac0c <_dtoa_r+0x778>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	bfd4      	ite	le
 800ac12:	2300      	movle	r3, #0
 800ac14:	f003 0301 	andgt.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 80f7 	beq.w	800ae0c <_dtoa_r+0x978>
 800ac1e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800ac20:	2c00      	cmp	r4, #0
 800ac22:	f340 81ad 	ble.w	800af80 <_dtoa_r+0xaec>
 800ac26:	2300      	movs	r3, #0
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	f002 fddf 	bl	800d7f4 <__aeabi_dmul>
 800ac36:	9d06      	ldr	r5, [sp, #24]
 800ac38:	3d01      	subs	r5, #1
 800ac3a:	9518      	str	r5, [sp, #96]	; 0x60
 800ac3c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ac3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac42:	1c70      	adds	r0, r6, #1
 800ac44:	f002 fd70 	bl	800d728 <__aeabi_i2d>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac50:	f002 fdd0 	bl	800d7f4 <__aeabi_dmul>
 800ac54:	2300      	movs	r3, #0
 800ac56:	2200      	movs	r2, #0
 800ac58:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800ac5c:	f002 fc18 	bl	800d490 <__adddf3>
 800ac60:	4606      	mov	r6, r0
 800ac62:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800ac66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	f000 81cb 	beq.w	800b004 <_dtoa_r+0xb70>
 800ac6e:	4b65      	ldr	r3, [pc, #404]	; (800ae04 <_dtoa_r+0x970>)
 800ac70:	2100      	movs	r1, #0
 800ac72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac74:	2000      	movs	r0, #0
 800ac76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac7a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800ac7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac82:	9412      	str	r4, [sp, #72]	; 0x48
 800ac84:	f002 fee0 	bl	800da48 <__aeabi_ddiv>
 800ac88:	4632      	mov	r2, r6
 800ac8a:	463b      	mov	r3, r7
 800ac8c:	f002 fbfe 	bl	800d48c <__aeabi_dsub>
 800ac90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac98:	f003 f846 	bl	800dd28 <__aeabi_d2iz>
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	f002 fd43 	bl	800d728 <__aeabi_i2d>
 800aca2:	3430      	adds	r4, #48	; 0x30
 800aca4:	b2e6      	uxtb	r6, r4
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acae:	f002 fbed 	bl	800d48c <__aeabi_dsub>
 800acb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800acb4:	f804 6b01 	strb.w	r6, [r4], #1
 800acb8:	9412      	str	r4, [sp, #72]	; 0x48
 800acba:	4682      	mov	sl, r0
 800acbc:	468b      	mov	fp, r1
 800acbe:	4652      	mov	r2, sl
 800acc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acc4:	465b      	mov	r3, fp
 800acc6:	f003 f825 	bl	800dd14 <__aeabi_dcmpgt>
 800acca:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800acce:	2800      	cmp	r0, #0
 800acd0:	f040 8345 	bne.w	800b35e <_dtoa_r+0xeca>
 800acd4:	2100      	movs	r1, #0
 800acd6:	4652      	mov	r2, sl
 800acd8:	465b      	mov	r3, fp
 800acda:	2000      	movs	r0, #0
 800acdc:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ace0:	f002 fbd4 	bl	800d48c <__aeabi_dsub>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acec:	f003 f812 	bl	800dd14 <__aeabi_dcmpgt>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	f040 82ae 	bne.w	800b252 <_dtoa_r+0xdbe>
 800acf6:	2d01      	cmp	r5, #1
 800acf8:	f340 8142 	ble.w	800af80 <_dtoa_r+0xaec>
 800acfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acfe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ad00:	1965      	adds	r5, r4, r5
 800ad02:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800ad06:	9502      	str	r5, [sp, #8]
 800ad08:	e00c      	b.n	800ad24 <_dtoa_r+0x890>
 800ad0a:	f002 fbbf 	bl	800d48c <__aeabi_dsub>
 800ad0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad12:	f002 ffe1 	bl	800dcd8 <__aeabi_dcmplt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f040 8298 	bne.w	800b24c <_dtoa_r+0xdb8>
 800ad1c:	9d02      	ldr	r5, [sp, #8]
 800ad1e:	42af      	cmp	r7, r5
 800ad20:	f000 812c 	beq.w	800af7c <_dtoa_r+0xae8>
 800ad24:	2300      	movs	r3, #0
 800ad26:	2200      	movs	r2, #0
 800ad28:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ad2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad30:	f002 fd60 	bl	800d7f4 <__aeabi_dmul>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2200      	movs	r2, #0
 800ad38:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ad3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad40:	4650      	mov	r0, sl
 800ad42:	4659      	mov	r1, fp
 800ad44:	f002 fd56 	bl	800d7f4 <__aeabi_dmul>
 800ad48:	4689      	mov	r9, r1
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	f002 ffec 	bl	800dd28 <__aeabi_d2iz>
 800ad50:	4604      	mov	r4, r0
 800ad52:	f002 fce9 	bl	800d728 <__aeabi_i2d>
 800ad56:	3430      	adds	r4, #48	; 0x30
 800ad58:	b2e6      	uxtb	r6, r4
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4640      	mov	r0, r8
 800ad60:	4649      	mov	r1, r9
 800ad62:	f002 fb93 	bl	800d48c <__aeabi_dsub>
 800ad66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad6a:	f807 6b01 	strb.w	r6, [r7], #1
 800ad6e:	463d      	mov	r5, r7
 800ad70:	468b      	mov	fp, r1
 800ad72:	4682      	mov	sl, r0
 800ad74:	f002 ffb0 	bl	800dcd8 <__aeabi_dcmplt>
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ad82:	4604      	mov	r4, r0
 800ad84:	2000      	movs	r0, #0
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	d0bf      	beq.n	800ad0a <_dtoa_r+0x876>
 800ad8a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ad8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad8e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800ad92:	9406      	str	r4, [sp, #24]
 800ad94:	970a      	str	r7, [sp, #40]	; 0x28
 800ad96:	e65d      	b.n	800aa54 <_dtoa_r+0x5c0>
 800ad98:	2500      	movs	r5, #0
 800ad9a:	9513      	str	r5, [sp, #76]	; 0x4c
 800ad9c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800ad9e:	9d06      	ldr	r5, [sp, #24]
 800ada0:	1945      	adds	r5, r0, r5
 800ada2:	9516      	str	r5, [sp, #88]	; 0x58
 800ada4:	f105 0b01 	add.w	fp, r5, #1
 800ada8:	f1bb 0f00 	cmp.w	fp, #0
 800adac:	f340 81b9 	ble.w	800b122 <_dtoa_r+0xc8e>
 800adb0:	f1bb 0f0e 	cmp.w	fp, #14
 800adb4:	bf8c      	ite	hi
 800adb6:	2400      	movhi	r4, #0
 800adb8:	f004 0401 	andls.w	r4, r4, #1
 800adbc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800adc0:	e6c2      	b.n	800ab48 <_dtoa_r+0x6b4>
 800adc2:	2500      	movs	r5, #0
 800adc4:	9513      	str	r5, [sp, #76]	; 0x4c
 800adc6:	e6b3      	b.n	800ab30 <_dtoa_r+0x69c>
 800adc8:	2501      	movs	r5, #1
 800adca:	9513      	str	r5, [sp, #76]	; 0x4c
 800adcc:	e7e6      	b.n	800ad9c <_dtoa_r+0x908>
 800adce:	9b02      	ldr	r3, [sp, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f47f add2 	bne.w	800a97a <_dtoa_r+0x4e6>
 800add6:	9a03      	ldr	r2, [sp, #12]
 800add8:	9e02      	ldr	r6, [sp, #8]
 800adda:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f47f adcc 	bne.w	800a97c <_dtoa_r+0x4e8>
 800ade4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800ade8:	4013      	ands	r3, r2
 800adea:	461e      	mov	r6, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	f43f adc5 	beq.w	800a97c <_dtoa_r+0x4e8>
 800adf2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adf4:	2601      	movs	r6, #1
 800adf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adf8:	3001      	adds	r0, #1
 800adfa:	9010      	str	r0, [sp, #64]	; 0x40
 800adfc:	3101      	adds	r1, #1
 800adfe:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae00:	e5bc      	b.n	800a97c <_dtoa_r+0x4e8>
 800ae02:	bf00      	nop
 800ae04:	08018588 	.word	0x08018588
 800ae08:	08018678 	.word	0x08018678
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f002 fc8b 	bl	800d728 <__aeabi_i2d>
 800ae12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae16:	f002 fced 	bl	800d7f4 <__aeabi_dmul>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800ae22:	f002 fb35 	bl	800d490 <__adddf3>
 800ae26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ae28:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	4627      	mov	r7, r4
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	f040 80b6 	bne.w	800afa2 <_dtoa_r+0xb0e>
 800ae36:	2300      	movs	r3, #0
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800ae3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae42:	f002 fb23 	bl	800d48c <__aeabi_dsub>
 800ae46:	4632      	mov	r2, r6
 800ae48:	4623      	mov	r3, r4
 800ae4a:	4682      	mov	sl, r0
 800ae4c:	468b      	mov	fp, r1
 800ae4e:	f002 ff61 	bl	800dd14 <__aeabi_dcmpgt>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f040 80d3 	bne.w	800affe <_dtoa_r+0xb6a>
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800ae62:	f002 ff39 	bl	800dcd8 <__aeabi_dcmplt>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f000 808a 	beq.w	800af80 <_dtoa_r+0xaec>
 800ae6c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ae6e:	46a2      	mov	sl, r4
 800ae70:	e656      	b.n	800ab20 <_dtoa_r+0x68c>
 800ae72:	4648      	mov	r0, r9
 800ae74:	4639      	mov	r1, r7
 800ae76:	f000 feff 	bl	800bc78 <_Bfree>
 800ae7a:	e5e7      	b.n	800aa4c <_dtoa_r+0x5b8>
 800ae7c:	231c      	movs	r3, #28
 800ae7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae80:	18ed      	adds	r5, r5, r3
 800ae82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae84:	18d2      	adds	r2, r2, r3
 800ae86:	9210      	str	r2, [sp, #64]	; 0x40
 800ae88:	18c0      	adds	r0, r0, r3
 800ae8a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae8c:	e58e      	b.n	800a9ac <_dtoa_r+0x518>
 800ae8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae90:	2900      	cmp	r1, #0
 800ae92:	f000 814e 	beq.w	800b132 <_dtoa_r+0xc9e>
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	dd05      	ble.n	800aea6 <_dtoa_r+0xa12>
 800ae9a:	4651      	mov	r1, sl
 800ae9c:	4648      	mov	r0, r9
 800ae9e:	462a      	mov	r2, r5
 800aea0:	f001 f8be 	bl	800c020 <__lshift>
 800aea4:	4682      	mov	sl, r0
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	f040 820a 	bne.w	800b2c0 <_dtoa_r+0xe2c>
 800aeac:	4656      	mov	r6, sl
 800aeae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800aeb0:	4657      	mov	r7, sl
 800aeb2:	f04f 0801 	mov.w	r8, #1
 800aeb6:	9507      	str	r5, [sp, #28]
 800aeb8:	9d02      	ldr	r5, [sp, #8]
 800aeba:	9402      	str	r4, [sp, #8]
 800aebc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800aebe:	ea05 0508 	and.w	r5, r5, r8
 800aec2:	950c      	str	r5, [sp, #48]	; 0x30
 800aec4:	9902      	ldr	r1, [sp, #8]
 800aec6:	4620      	mov	r0, r4
 800aec8:	f7ff fa42 	bl	800a350 <quorem>
 800aecc:	4639      	mov	r1, r7
 800aece:	f04f 0b01 	mov.w	fp, #1
 800aed2:	9008      	str	r0, [sp, #32]
 800aed4:	4620      	mov	r0, r4
 800aed6:	f001 f903 	bl	800c0e0 <__mcmp>
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	9902      	ldr	r1, [sp, #8]
 800aede:	4632      	mov	r2, r6
 800aee0:	3330      	adds	r3, #48	; 0x30
 800aee2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aee4:	4605      	mov	r5, r0
 800aee6:	4648      	mov	r0, r9
 800aee8:	f001 f91a 	bl	800c120 <__mdiff>
 800aeec:	68c3      	ldr	r3, [r0, #12]
 800aeee:	4682      	mov	sl, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d03d      	beq.n	800af70 <_dtoa_r+0xadc>
 800aef4:	4648      	mov	r0, r9
 800aef6:	4651      	mov	r1, sl
 800aef8:	f000 febe 	bl	800bc78 <_Bfree>
 800aefc:	9826      	ldr	r0, [sp, #152]	; 0x98
 800aefe:	ea5b 0000 	orrs.w	r0, fp, r0
 800af02:	d103      	bne.n	800af0c <_dtoa_r+0xa78>
 800af04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af06:	2900      	cmp	r1, #0
 800af08:	f000 8216 	beq.w	800b338 <_dtoa_r+0xea4>
 800af0c:	2d00      	cmp	r5, #0
 800af0e:	f2c0 81b0 	blt.w	800b272 <_dtoa_r+0xdde>
 800af12:	9826      	ldr	r0, [sp, #152]	; 0x98
 800af14:	4328      	orrs	r0, r5
 800af16:	d103      	bne.n	800af20 <_dtoa_r+0xa8c>
 800af18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af1a:	2d00      	cmp	r5, #0
 800af1c:	f000 81a9 	beq.w	800b272 <_dtoa_r+0xdde>
 800af20:	f1bb 0f00 	cmp.w	fp, #0
 800af24:	f300 81f0 	bgt.w	800b308 <_dtoa_r+0xe74>
 800af28:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af2a:	9807      	ldr	r0, [sp, #28]
 800af2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af2e:	4588      	cmp	r8, r1
 800af30:	f800 5b01 	strb.w	r5, [r0], #1
 800af34:	4605      	mov	r5, r0
 800af36:	9007      	str	r0, [sp, #28]
 800af38:	f000 81e0 	beq.w	800b2fc <_dtoa_r+0xe68>
 800af3c:	4621      	mov	r1, r4
 800af3e:	220a      	movs	r2, #10
 800af40:	2300      	movs	r3, #0
 800af42:	4648      	mov	r0, r9
 800af44:	f000 fea2 	bl	800bc8c <__multadd>
 800af48:	42b7      	cmp	r7, r6
 800af4a:	4604      	mov	r4, r0
 800af4c:	d01e      	beq.n	800af8c <_dtoa_r+0xaf8>
 800af4e:	4639      	mov	r1, r7
 800af50:	220a      	movs	r2, #10
 800af52:	2300      	movs	r3, #0
 800af54:	4648      	mov	r0, r9
 800af56:	f000 fe99 	bl	800bc8c <__multadd>
 800af5a:	4631      	mov	r1, r6
 800af5c:	220a      	movs	r2, #10
 800af5e:	2300      	movs	r3, #0
 800af60:	f108 0801 	add.w	r8, r8, #1
 800af64:	4607      	mov	r7, r0
 800af66:	4648      	mov	r0, r9
 800af68:	f000 fe90 	bl	800bc8c <__multadd>
 800af6c:	4606      	mov	r6, r0
 800af6e:	e7a9      	b.n	800aec4 <_dtoa_r+0xa30>
 800af70:	4620      	mov	r0, r4
 800af72:	4651      	mov	r1, sl
 800af74:	f001 f8b4 	bl	800c0e0 <__mcmp>
 800af78:	4683      	mov	fp, r0
 800af7a:	e7bb      	b.n	800aef4 <_dtoa_r+0xa60>
 800af7c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800af80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af88:	f7ff bbd4 	b.w	800a734 <_dtoa_r+0x2a0>
 800af8c:	4639      	mov	r1, r7
 800af8e:	4648      	mov	r0, r9
 800af90:	220a      	movs	r2, #10
 800af92:	2300      	movs	r3, #0
 800af94:	f000 fe7a 	bl	800bc8c <__multadd>
 800af98:	f108 0801 	add.w	r8, r8, #1
 800af9c:	4607      	mov	r7, r0
 800af9e:	4606      	mov	r6, r0
 800afa0:	e790      	b.n	800aec4 <_dtoa_r+0xa30>
 800afa2:	9c06      	ldr	r4, [sp, #24]
 800afa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800afa6:	9418      	str	r4, [sp, #96]	; 0x60
 800afa8:	e65d      	b.n	800ac66 <_dtoa_r+0x7d2>
 800afaa:	9d06      	ldr	r5, [sp, #24]
 800afac:	426c      	negs	r4, r5
 800afae:	2c00      	cmp	r4, #0
 800afb0:	f000 810f 	beq.w	800b1d2 <_dtoa_r+0xd3e>
 800afb4:	f004 020f 	and.w	r2, r4, #15
 800afb8:	4ba2      	ldr	r3, [pc, #648]	; (800b244 <_dtoa_r+0xdb0>)
 800afba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f002 fc15 	bl	800d7f4 <__aeabi_dmul>
 800afca:	1124      	asrs	r4, r4, #4
 800afcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd0:	f000 80ff 	beq.w	800b1d2 <_dtoa_r+0xd3e>
 800afd4:	4d9c      	ldr	r5, [pc, #624]	; (800b248 <_dtoa_r+0xdb4>)
 800afd6:	2602      	movs	r6, #2
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	07e7      	lsls	r7, r4, #31
 800afde:	4610      	mov	r0, r2
 800afe0:	4619      	mov	r1, r3
 800afe2:	d506      	bpl.n	800aff2 <_dtoa_r+0xb5e>
 800afe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afe8:	3601      	adds	r6, #1
 800afea:	f002 fc03 	bl	800d7f4 <__aeabi_dmul>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	3508      	adds	r5, #8
 800aff4:	1064      	asrs	r4, r4, #1
 800aff6:	d1f1      	bne.n	800afdc <_dtoa_r+0xb48>
 800aff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800affc:	e5f7      	b.n	800abee <_dtoa_r+0x75a>
 800affe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b000:	46a2      	mov	sl, r4
 800b002:	e507      	b.n	800aa14 <_dtoa_r+0x580>
 800b004:	f105 3aff 	add.w	sl, r5, #4294967295
 800b008:	498e      	ldr	r1, [pc, #568]	; (800b244 <_dtoa_r+0xdb0>)
 800b00a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b00c:	4632      	mov	r2, r6
 800b00e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b012:	463b      	mov	r3, r7
 800b014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b018:	9412      	str	r4, [sp, #72]	; 0x48
 800b01a:	f002 fbeb 	bl	800d7f4 <__aeabi_dmul>
 800b01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b026:	f002 fe7f 	bl	800dd28 <__aeabi_d2iz>
 800b02a:	4604      	mov	r4, r0
 800b02c:	f002 fb7c 	bl	800d728 <__aeabi_i2d>
 800b030:	460b      	mov	r3, r1
 800b032:	4602      	mov	r2, r0
 800b034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b038:	f002 fa28 	bl	800d48c <__aeabi_dsub>
 800b03c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800b040:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b042:	2d01      	cmp	r5, #1
 800b044:	f804 3b01 	strb.w	r3, [r4], #1
 800b048:	46a0      	mov	r8, r4
 800b04a:	9412      	str	r4, [sp, #72]	; 0x48
 800b04c:	4606      	mov	r6, r0
 800b04e:	460f      	mov	r7, r1
 800b050:	d020      	beq.n	800b094 <_dtoa_r+0xc00>
 800b052:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b054:	f104 38ff 	add.w	r8, r4, #4294967295
 800b058:	44a8      	add	r8, r5
 800b05a:	2300      	movs	r3, #0
 800b05c:	2200      	movs	r2, #0
 800b05e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b062:	f002 fbc7 	bl	800d7f4 <__aeabi_dmul>
 800b066:	460f      	mov	r7, r1
 800b068:	4606      	mov	r6, r0
 800b06a:	f002 fe5d 	bl	800dd28 <__aeabi_d2iz>
 800b06e:	4605      	mov	r5, r0
 800b070:	f002 fb5a 	bl	800d728 <__aeabi_i2d>
 800b074:	3530      	adds	r5, #48	; 0x30
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4630      	mov	r0, r6
 800b07c:	4639      	mov	r1, r7
 800b07e:	f002 fa05 	bl	800d48c <__aeabi_dsub>
 800b082:	f804 5f01 	strb.w	r5, [r4, #1]!
 800b086:	4544      	cmp	r4, r8
 800b088:	d1e7      	bne.n	800b05a <_dtoa_r+0xbc6>
 800b08a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b08c:	4606      	mov	r6, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	eb05 080a 	add.w	r8, r5, sl
 800b094:	2300      	movs	r3, #0
 800b096:	2200      	movs	r2, #0
 800b098:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b09c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0a0:	f002 f9f6 	bl	800d490 <__adddf3>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f002 fe32 	bl	800dd14 <__aeabi_dcmpgt>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f000 8098 	beq.w	800b1e6 <_dtoa_r+0xd52>
 800b0b6:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800b0ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b0bc:	f7ff bbf0 	b.w	800a8a0 <_dtoa_r+0x40c>
 800b0c0:	46c8      	mov	r8, r9
 800b0c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b0c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b0c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b0cc:	e4c2      	b.n	800aa54 <_dtoa_r+0x5c0>
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0d4:	6918      	ldr	r0, [r3, #16]
 800b0d6:	f000 fe65 	bl	800bda4 <__hi0bits>
 800b0da:	f1c0 0320 	rsb	r3, r0, #32
 800b0de:	e452      	b.n	800a986 <_dtoa_r+0x4f2>
 800b0e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	f000 fffc 	bl	800c0e0 <__mcmp>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f6bf ac74 	bge.w	800a9d6 <_dtoa_r+0x542>
 800b0ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0f0:	4648      	mov	r0, r9
 800b0f2:	220a      	movs	r2, #10
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f000 fdc9 	bl	800bc8c <__multadd>
 800b0fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b0fc:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0fe:	9806      	ldr	r0, [sp, #24]
 800b100:	3801      	subs	r0, #1
 800b102:	9006      	str	r0, [sp, #24]
 800b104:	2900      	cmp	r1, #0
 800b106:	f040 8131 	bne.w	800b36c <_dtoa_r+0xed8>
 800b10a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b10c:	930e      	str	r3, [sp, #56]	; 0x38
 800b10e:	e462      	b.n	800a9d6 <_dtoa_r+0x542>
 800b110:	2301      	movs	r3, #1
 800b112:	9316      	str	r3, [sp, #88]	; 0x58
 800b114:	930e      	str	r3, [sp, #56]	; 0x38
 800b116:	9327      	str	r3, [sp, #156]	; 0x9c
 800b118:	2100      	movs	r1, #0
 800b11a:	401c      	ands	r4, r3
 800b11c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b120:	e523      	b.n	800ab6a <_dtoa_r+0x6d6>
 800b122:	f1bb 0f0e 	cmp.w	fp, #14
 800b126:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b12a:	bf8c      	ite	hi
 800b12c:	2300      	movhi	r3, #0
 800b12e:	2301      	movls	r3, #1
 800b130:	e7f2      	b.n	800b118 <_dtoa_r+0xc84>
 800b132:	46d3      	mov	fp, sl
 800b134:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b136:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800b138:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800b13c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b13e:	e002      	b.n	800b146 <_dtoa_r+0xcb2>
 800b140:	f000 fda4 	bl	800bc8c <__multadd>
 800b144:	4606      	mov	r6, r0
 800b146:	4621      	mov	r1, r4
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff f901 	bl	800a350 <quorem>
 800b14e:	220a      	movs	r2, #10
 800b150:	2300      	movs	r3, #0
 800b152:	4631      	mov	r1, r6
 800b154:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b158:	f807 8005 	strb.w	r8, [r7, r5]
 800b15c:	3501      	adds	r5, #1
 800b15e:	4648      	mov	r0, r9
 800b160:	45aa      	cmp	sl, r5
 800b162:	dced      	bgt.n	800b140 <_dtoa_r+0xcac>
 800b164:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b166:	46da      	mov	sl, fp
 800b168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b16a:	461f      	mov	r7, r3
 800b16c:	960f      	str	r6, [sp, #60]	; 0x3c
 800b16e:	2a01      	cmp	r2, #1
 800b170:	bfac      	ite	ge
 800b172:	18ad      	addge	r5, r5, r2
 800b174:	3501      	addlt	r5, #1
 800b176:	2201      	movs	r2, #1
 800b178:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b17a:	4648      	mov	r0, r9
 800b17c:	f000 ff50 	bl	800c020 <__lshift>
 800b180:	4621      	mov	r1, r4
 800b182:	900f      	str	r0, [sp, #60]	; 0x3c
 800b184:	f000 ffac 	bl	800c0e0 <__mcmp>
 800b188:	2800      	cmp	r0, #0
 800b18a:	dd16      	ble.n	800b1ba <_dtoa_r+0xd26>
 800b18c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b190:	462b      	mov	r3, r5
 800b192:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b194:	1c69      	adds	r1, r5, #1
 800b196:	e002      	b.n	800b19e <_dtoa_r+0xd0a>
 800b198:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	2a39      	cmp	r2, #57	; 0x39
 800b1a0:	f040 8087 	bne.w	800b2b2 <_dtoa_r+0xe1e>
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	d1f7      	bne.n	800b198 <_dtoa_r+0xd04>
 800b1a8:	9806      	ldr	r0, [sp, #24]
 800b1aa:	2231      	movs	r2, #49	; 0x31
 800b1ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	9006      	str	r0, [sp, #24]
 800b1b2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b8:	e436      	b.n	800aa28 <_dtoa_r+0x594>
 800b1ba:	d102      	bne.n	800b1c2 <_dtoa_r+0xd2e>
 800b1bc:	f018 0f01 	tst.w	r8, #1
 800b1c0:	d1e4      	bne.n	800b18c <_dtoa_r+0xcf8>
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800b1c8:	2b30      	cmp	r3, #48	; 0x30
 800b1ca:	d0fa      	beq.n	800b1c2 <_dtoa_r+0xd2e>
 800b1cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b1ce:	920a      	str	r2, [sp, #40]	; 0x28
 800b1d0:	e42a      	b.n	800aa28 <_dtoa_r+0x594>
 800b1d2:	2602      	movs	r6, #2
 800b1d4:	e50b      	b.n	800abee <_dtoa_r+0x75a>
 800b1d6:	4648      	mov	r0, r9
 800b1d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b1da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1dc:	f000 fed4 	bl	800bf88 <__pow5mult>
 800b1e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b1e2:	f7ff bbb8 	b.w	800a956 <_dtoa_r+0x4c2>
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800b1f2:	f002 f94b 	bl	800d48c <__aeabi_dsub>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f002 fd6b 	bl	800dcd8 <__aeabi_dcmplt>
 800b202:	2800      	cmp	r0, #0
 800b204:	f43f aebc 	beq.w	800af80 <_dtoa_r+0xaec>
 800b208:	4643      	mov	r3, r8
 800b20a:	4619      	mov	r1, r3
 800b20c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b210:	2a30      	cmp	r2, #48	; 0x30
 800b212:	d0fa      	beq.n	800b20a <_dtoa_r+0xd76>
 800b214:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b216:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b218:	910a      	str	r1, [sp, #40]	; 0x28
 800b21a:	9406      	str	r4, [sp, #24]
 800b21c:	e41a      	b.n	800aa54 <_dtoa_r+0x5c0>
 800b21e:	4648      	mov	r0, r9
 800b220:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b222:	f000 feb1 	bl	800bf88 <__pow5mult>
 800b226:	900f      	str	r0, [sp, #60]	; 0x3c
 800b228:	f7ff bb95 	b.w	800a956 <_dtoa_r+0x4c2>
 800b22c:	2400      	movs	r4, #0
 800b22e:	46a2      	mov	sl, r4
 800b230:	e476      	b.n	800ab20 <_dtoa_r+0x68c>
 800b232:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b234:	2c00      	cmp	r4, #0
 800b236:	d05a      	beq.n	800b2ee <_dtoa_r+0xe5a>
 800b238:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b23c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b23e:	3303      	adds	r3, #3
 800b240:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b242:	e44c      	b.n	800aade <_dtoa_r+0x64a>
 800b244:	08018588 	.word	0x08018588
 800b248:	08018678 	.word	0x08018678
 800b24c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800b250:	46a8      	mov	r8, r5
 800b252:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b254:	f7ff bb24 	b.w	800a8a0 <_dtoa_r+0x40c>
 800b258:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b25a:	1c72      	adds	r2, r6, #1
 800b25c:	930a      	str	r3, [sp, #40]	; 0x28
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b264:	9406      	str	r4, [sp, #24]
 800b266:	f7ff bbf5 	b.w	800aa54 <_dtoa_r+0x5c0>
 800b26a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b26c:	2300      	movs	r3, #0
 800b26e:	1b45      	subs	r5, r0, r5
 800b270:	e435      	b.n	800aade <_dtoa_r+0x64a>
 800b272:	f1bb 0f00 	cmp.w	fp, #0
 800b276:	940f      	str	r4, [sp, #60]	; 0x3c
 800b278:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b27c:	9c02      	ldr	r4, [sp, #8]
 800b27e:	dd10      	ble.n	800b2a2 <_dtoa_r+0xe0e>
 800b280:	2201      	movs	r2, #1
 800b282:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b284:	4648      	mov	r0, r9
 800b286:	f000 fecb 	bl	800c020 <__lshift>
 800b28a:	4621      	mov	r1, r4
 800b28c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b28e:	f000 ff27 	bl	800c0e0 <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	dd5e      	ble.n	800b354 <_dtoa_r+0xec0>
 800b296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b29a:	d046      	beq.n	800b32a <_dtoa_r+0xe96>
 800b29c:	9b08      	ldr	r3, [sp, #32]
 800b29e:	f103 0831 	add.w	r8, r3, #49	; 0x31
 800b2a2:	9b07      	ldr	r3, [sp, #28]
 800b2a4:	46b2      	mov	sl, r6
 800b2a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b2a8:	f803 8b01 	strb.w	r8, [r3], #1
 800b2ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ae:	f7ff bbbb 	b.w	800aa28 <_dtoa_r+0x594>
 800b2b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b2ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b2bc:	f7ff bbb4 	b.w	800aa28 <_dtoa_r+0x594>
 800b2c0:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b2c4:	4648      	mov	r0, r9
 800b2c6:	f000 fcb1 	bl	800bc2c <_Balloc>
 800b2ca:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b2ce:	f10a 010c 	add.w	r1, sl, #12
 800b2d2:	3202      	adds	r2, #2
 800b2d4:	0092      	lsls	r2, r2, #2
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	f100 000c 	add.w	r0, r0, #12
 800b2dc:	f7fc f9b2 	bl	8007644 <memcpy>
 800b2e0:	4648      	mov	r0, r9
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f000 fe9b 	bl	800c020 <__lshift>
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	e5df      	b.n	800aeae <_dtoa_r+0xa1a>
 800b2ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b2f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b2f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b2f4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2f8:	f7ff bbf1 	b.w	800aade <_dtoa_r+0x64a>
 800b2fc:	940f      	str	r4, [sp, #60]	; 0x3c
 800b2fe:	46b2      	mov	sl, r6
 800b300:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b304:	9c02      	ldr	r4, [sp, #8]
 800b306:	e736      	b.n	800b176 <_dtoa_r+0xce2>
 800b308:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b30c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b30e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b312:	9c02      	ldr	r4, [sp, #8]
 800b314:	d009      	beq.n	800b32a <_dtoa_r+0xe96>
 800b316:	9b07      	ldr	r3, [sp, #28]
 800b318:	f108 0801 	add.w	r8, r8, #1
 800b31c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b31e:	46b2      	mov	sl, r6
 800b320:	f803 8b01 	strb.w	r8, [r3], #1
 800b324:	930a      	str	r3, [sp, #40]	; 0x28
 800b326:	f7ff bb7f 	b.w	800aa28 <_dtoa_r+0x594>
 800b32a:	9d07      	ldr	r5, [sp, #28]
 800b32c:	2339      	movs	r3, #57	; 0x39
 800b32e:	46b2      	mov	sl, r6
 800b330:	461a      	mov	r2, r3
 800b332:	f805 3b01 	strb.w	r3, [r5], #1
 800b336:	e72b      	b.n	800b190 <_dtoa_r+0xcfc>
 800b338:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b33c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b33e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b342:	9c02      	ldr	r4, [sp, #8]
 800b344:	d0f1      	beq.n	800b32a <_dtoa_r+0xe96>
 800b346:	2d00      	cmp	r5, #0
 800b348:	dca8      	bgt.n	800b29c <_dtoa_r+0xe08>
 800b34a:	e7aa      	b.n	800b2a2 <_dtoa_r+0xe0e>
 800b34c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b34e:	940a      	str	r4, [sp, #40]	; 0x28
 800b350:	f7ff bb80 	b.w	800aa54 <_dtoa_r+0x5c0>
 800b354:	d1a5      	bne.n	800b2a2 <_dtoa_r+0xe0e>
 800b356:	f018 0f01 	tst.w	r8, #1
 800b35a:	d0a2      	beq.n	800b2a2 <_dtoa_r+0xe0e>
 800b35c:	e79b      	b.n	800b296 <_dtoa_r+0xe02>
 800b35e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b360:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b362:	9406      	str	r4, [sp, #24]
 800b364:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b366:	940a      	str	r4, [sp, #40]	; 0x28
 800b368:	f7ff bb74 	b.w	800aa54 <_dtoa_r+0x5c0>
 800b36c:	4651      	mov	r1, sl
 800b36e:	220a      	movs	r2, #10
 800b370:	4648      	mov	r0, r9
 800b372:	2300      	movs	r3, #0
 800b374:	f000 fc8a 	bl	800bc8c <__multadd>
 800b378:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b37a:	920e      	str	r2, [sp, #56]	; 0x38
 800b37c:	4682      	mov	sl, r0
 800b37e:	f7ff bb2a 	b.w	800a9d6 <_dtoa_r+0x542>
 800b382:	bf18      	it	ne
 800b384:	f1c3 033c 	rsbne	r3, r3, #60	; 0x3c
 800b388:	f43f ab10 	beq.w	800a9ac <_dtoa_r+0x518>
 800b38c:	e577      	b.n	800ae7e <_dtoa_r+0x9ea>
 800b38e:	bf00      	nop

0800b390 <_fflush_r>:
 800b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b394:	4680      	mov	r8, r0
 800b396:	460c      	mov	r4, r1
 800b398:	b110      	cbz	r0, 800b3a0 <_fflush_r+0x10>
 800b39a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d066      	beq.n	800b46e <_fflush_r+0xde>
 800b3a0:	89a6      	ldrh	r6, [r4, #12]
 800b3a2:	2e00      	cmp	r6, #0
 800b3a4:	d060      	beq.n	800b468 <_fflush_r+0xd8>
 800b3a6:	b233      	sxth	r3, r6
 800b3a8:	f013 0008 	ands.w	r0, r3, #8
 800b3ac:	d01e      	beq.n	800b3ec <_fflush_r+0x5c>
 800b3ae:	6926      	ldr	r6, [r4, #16]
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	f000 8088 	beq.w	800b4c6 <_fflush_r+0x136>
 800b3b6:	079b      	lsls	r3, r3, #30
 800b3b8:	6825      	ldr	r5, [r4, #0]
 800b3ba:	6026      	str	r6, [r4, #0]
 800b3bc:	bf08      	it	eq
 800b3be:	6963      	ldreq	r3, [r4, #20]
 800b3c0:	ebc6 0505 	rsb	r5, r6, r5
 800b3c4:	bf18      	it	ne
 800b3c6:	2300      	movne	r3, #0
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	e00a      	b.n	800b3e2 <_fflush_r+0x52>
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	462b      	mov	r3, r5
 800b3d0:	69e1      	ldr	r1, [r4, #28]
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800b3d6:	47b8      	blx	r7
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	ebc0 0505 	rsb	r5, r0, r5
 800b3de:	4406      	add	r6, r0
 800b3e0:	dd65      	ble.n	800b4ae <_fflush_r+0x11e>
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	dcf2      	bgt.n	800b3cc <_fflush_r+0x3c>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ec:	6862      	ldr	r2, [r4, #4]
 800b3ee:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	dd62      	ble.n	800b4be <_fflush_r+0x12e>
 800b3f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	d063      	beq.n	800b4c6 <_fflush_r+0x136>
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	2200      	movs	r2, #0
 800b402:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 800b406:	f8d8 5000 	ldr.w	r5, [r8]
 800b40a:	f8c8 2000 	str.w	r2, [r8]
 800b40e:	bf18      	it	ne
 800b410:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800b412:	d033      	beq.n	800b47c <_fflush_r+0xec>
 800b414:	0759      	lsls	r1, r3, #29
 800b416:	d505      	bpl.n	800b424 <_fflush_r+0x94>
 800b418:	6861      	ldr	r1, [r4, #4]
 800b41a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b41c:	1a52      	subs	r2, r2, r1
 800b41e:	b10b      	cbz	r3, 800b424 <_fflush_r+0x94>
 800b420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b422:	1ad2      	subs	r2, r2, r3
 800b424:	2300      	movs	r3, #0
 800b426:	69e1      	ldr	r1, [r4, #28]
 800b428:	4640      	mov	r0, r8
 800b42a:	47b0      	blx	r6
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d030      	beq.n	800b492 <_fflush_r+0x102>
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	2100      	movs	r1, #0
 800b434:	6922      	ldr	r2, [r4, #16]
 800b436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b43a:	6061      	str	r1, [r4, #4]
 800b43c:	041b      	lsls	r3, r3, #16
 800b43e:	6022      	str	r2, [r4, #0]
 800b440:	0c1b      	lsrs	r3, r3, #16
 800b442:	81a3      	strh	r3, [r4, #12]
 800b444:	04d9      	lsls	r1, r3, #19
 800b446:	d415      	bmi.n	800b474 <_fflush_r+0xe4>
 800b448:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b44a:	f8c8 5000 	str.w	r5, [r8]
 800b44e:	2900      	cmp	r1, #0
 800b450:	d042      	beq.n	800b4d8 <_fflush_r+0x148>
 800b452:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b456:	4299      	cmp	r1, r3
 800b458:	d002      	beq.n	800b460 <_fflush_r+0xd0>
 800b45a:	4640      	mov	r0, r8
 800b45c:	f000 fa1e 	bl	800b89c <_free_r>
 800b460:	2000      	movs	r0, #0
 800b462:	6320      	str	r0, [r4, #48]	; 0x30
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b468:	4630      	mov	r0, r6
 800b46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46e:	f000 f8b1 	bl	800b5d4 <__sinit>
 800b472:	e795      	b.n	800b3a0 <_fflush_r+0x10>
 800b474:	1c42      	adds	r2, r0, #1
 800b476:	d029      	beq.n	800b4cc <_fflush_r+0x13c>
 800b478:	6520      	str	r0, [r4, #80]	; 0x50
 800b47a:	e7e5      	b.n	800b448 <_fflush_r+0xb8>
 800b47c:	463a      	mov	r2, r7
 800b47e:	2301      	movs	r3, #1
 800b480:	69e1      	ldr	r1, [r4, #28]
 800b482:	4640      	mov	r0, r8
 800b484:	47b0      	blx	r6
 800b486:	1c43      	adds	r3, r0, #1
 800b488:	4602      	mov	r2, r0
 800b48a:	d028      	beq.n	800b4de <_fflush_r+0x14e>
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b490:	e7c0      	b.n	800b414 <_fflush_r+0x84>
 800b492:	f8d8 3000 	ldr.w	r3, [r8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0ca      	beq.n	800b430 <_fflush_r+0xa0>
 800b49a:	2b1d      	cmp	r3, #29
 800b49c:	d0c8      	beq.n	800b430 <_fflush_r+0xa0>
 800b49e:	2b16      	cmp	r3, #22
 800b4a0:	d0c6      	beq.n	800b430 <_fflush_r+0xa0>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b4c0:	2a00      	cmp	r2, #0
 800b4c2:	dc99      	bgt.n	800b3f8 <_fflush_r+0x68>
 800b4c4:	e7d1      	b.n	800b46a <_fflush_r+0xda>
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1b9      	bne.n	800b448 <_fflush_r+0xb8>
 800b4d4:	6520      	str	r0, [r4, #80]	; 0x50
 800b4d6:	e7b7      	b.n	800b448 <_fflush_r+0xb8>
 800b4d8:	4608      	mov	r0, r1
 800b4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4de:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0d2      	beq.n	800b48c <_fflush_r+0xfc>
 800b4e6:	f1a3 001d 	sub.w	r0, r3, #29
 800b4ea:	4241      	negs	r1, r0
 800b4ec:	eb41 0100 	adc.w	r1, r1, r0
 800b4f0:	2b16      	cmp	r3, #22
 800b4f2:	bf14      	ite	ne
 800b4f4:	460b      	movne	r3, r1
 800b4f6:	f041 0301 	orreq.w	r3, r1, #1
 800b4fa:	b123      	cbz	r3, 800b506 <_fflush_r+0x176>
 800b4fc:	f8c8 5000 	str.w	r5, [r8]
 800b500:	4638      	mov	r0, r7
 800b502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	4610      	mov	r0, r2
 800b50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b514 <fflush>:
 800b514:	4601      	mov	r1, r0
 800b516:	b110      	cbz	r0, 800b51e <fflush+0xa>
 800b518:	4b03      	ldr	r3, [pc, #12]	; (800b528 <fflush+0x14>)
 800b51a:	6818      	ldr	r0, [r3, #0]
 800b51c:	e738      	b.n	800b390 <_fflush_r>
 800b51e:	4b03      	ldr	r3, [pc, #12]	; (800b52c <fflush+0x18>)
 800b520:	4903      	ldr	r1, [pc, #12]	; (800b530 <fflush+0x1c>)
 800b522:	6818      	ldr	r0, [r3, #0]
 800b524:	f000 baa2 	b.w	800ba6c <_fwalk_reent>
 800b528:	20000008 	.word	0x20000008
 800b52c:	08018534 	.word	0x08018534
 800b530:	0800b391 	.word	0x0800b391

0800b534 <__fp_lock>:
 800b534:	2000      	movs	r0, #0
 800b536:	4770      	bx	lr

0800b538 <__fp_unlock>:
 800b538:	2000      	movs	r0, #0
 800b53a:	4770      	bx	lr

0800b53c <_cleanup_r>:
 800b53c:	f24d 11f5 	movw	r1, #53749	; 0xd1f5
 800b540:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b544:	f000 ba6c 	b.w	800ba20 <_fwalk>

0800b548 <std.isra.0>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	4604      	mov	r4, r0
 800b54c:	2300      	movs	r3, #0
 800b54e:	460e      	mov	r6, r1
 800b550:	4615      	mov	r5, r2
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	4619      	mov	r1, r3
 800b558:	60a3      	str	r3, [r4, #8]
 800b55a:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 800b55e:	6663      	str	r3, [r4, #100]	; 0x64
 800b560:	2208      	movs	r2, #8
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	6163      	str	r3, [r4, #20]
 800b566:	61a3      	str	r3, [r4, #24]
 800b568:	81a6      	strh	r6, [r4, #12]
 800b56a:	81e5      	strh	r5, [r4, #14]
 800b56c:	f7fc f910 	bl	8007790 <memset>
 800b570:	f24c 5385 	movw	r3, #50565	; 0xc585
 800b574:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b578:	6223      	str	r3, [r4, #32]
 800b57a:	f24c 53ad 	movw	r3, #50605	; 0xc5ad
 800b57e:	61e4      	str	r4, [r4, #28]
 800b580:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b584:	6263      	str	r3, [r4, #36]	; 0x24
 800b586:	f24c 53e5 	movw	r3, #50661	; 0xc5e5
 800b58a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b58e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b590:	f24c 6309 	movw	r3, #50697	; 0xc609
 800b594:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b59a:	bd70      	pop	{r4, r5, r6, pc}

0800b59c <__sfmoreglue>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	2568      	movs	r5, #104	; 0x68
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	fb05 f501 	mul.w	r5, r5, r1
 800b5a6:	f105 010c 	add.w	r1, r5, #12
 800b5aa:	f7fb fd25 	bl	8006ff8 <_malloc_r>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	b140      	cbz	r0, 800b5c4 <__sfmoreglue+0x28>
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	f100 000c 	add.w	r0, r0, #12
 800b5b8:	e884 0042 	stmia.w	r4, {r1, r6}
 800b5bc:	462a      	mov	r2, r5
 800b5be:	60a0      	str	r0, [r4, #8]
 800b5c0:	f7fc f8e6 	bl	8007790 <memset>
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}

0800b5c8 <_cleanup>:
 800b5c8:	f248 5334 	movw	r3, #34100	; 0x8534
 800b5cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	e7b3      	b.n	800b53c <_cleanup_r>

0800b5d4 <__sinit>:
 800b5d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5d6:	b570      	push	{r4, r5, r6, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	b103      	cbz	r3, 800b5de <__sinit+0xa>
 800b5dc:	bd70      	pop	{r4, r5, r6, pc}
 800b5de:	4e0e      	ldr	r6, [pc, #56]	; (800b618 <__sinit+0x44>)
 800b5e0:	2501      	movs	r5, #1
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 800b5ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800b5ee:	63e6      	str	r6, [r4, #60]	; 0x3c
 800b5f0:	2603      	movs	r6, #3
 800b5f2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800b5f6:	6840      	ldr	r0, [r0, #4]
 800b5f8:	63a5      	str	r5, [r4, #56]	; 0x38
 800b5fa:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
 800b5fe:	f7ff ffa3 	bl	800b548 <std.isra.0>
 800b602:	68a0      	ldr	r0, [r4, #8]
 800b604:	2109      	movs	r1, #9
 800b606:	462a      	mov	r2, r5
 800b608:	f7ff ff9e 	bl	800b548 <std.isra.0>
 800b60c:	68e0      	ldr	r0, [r4, #12]
 800b60e:	2112      	movs	r1, #18
 800b610:	2202      	movs	r2, #2
 800b612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b616:	e797      	b.n	800b548 <std.isra.0>
 800b618:	0800b53d 	.word	0x0800b53d

0800b61c <__sfp>:
 800b61c:	4b25      	ldr	r3, [pc, #148]	; (800b6b4 <__sfp+0x98>)
 800b61e:	b570      	push	{r4, r5, r6, lr}
 800b620:	4606      	mov	r6, r0
 800b622:	681d      	ldr	r5, [r3, #0]
 800b624:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b626:	2b00      	cmp	r3, #0
 800b628:	d034      	beq.n	800b694 <__sfp+0x78>
 800b62a:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800b62e:	686b      	ldr	r3, [r5, #4]
 800b630:	68a9      	ldr	r1, [r5, #8]
 800b632:	3b01      	subs	r3, #1
 800b634:	d411      	bmi.n	800b65a <__sfp+0x3e>
 800b636:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b63a:	460c      	mov	r4, r1
 800b63c:	b18a      	cbz	r2, 800b662 <__sfp+0x46>
 800b63e:	f101 0068 	add.w	r0, r1, #104	; 0x68
 800b642:	e002      	b.n	800b64a <__sfp+0x2e>
 800b644:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
 800b648:	b15a      	cbz	r2, 800b662 <__sfp+0x46>
 800b64a:	3b01      	subs	r3, #1
 800b64c:	3468      	adds	r4, #104	; 0x68
 800b64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b652:	ebc1 0204 	rsb	r2, r1, r4
 800b656:	4402      	add	r2, r0
 800b658:	d1f4      	bne.n	800b644 <__sfp+0x28>
 800b65a:	6828      	ldr	r0, [r5, #0]
 800b65c:	b1f0      	cbz	r0, 800b69c <__sfp+0x80>
 800b65e:	4605      	mov	r5, r0
 800b660:	e7e5      	b.n	800b62e <__sfp+0x12>
 800b662:	2500      	movs	r5, #0
 800b664:	f04f 33ff 	mov.w	r3, #4294967295
 800b668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b66c:	81e3      	strh	r3, [r4, #14]
 800b66e:	6665      	str	r5, [r4, #100]	; 0x64
 800b670:	2301      	movs	r3, #1
 800b672:	6025      	str	r5, [r4, #0]
 800b674:	4629      	mov	r1, r5
 800b676:	81a3      	strh	r3, [r4, #12]
 800b678:	2208      	movs	r2, #8
 800b67a:	60a5      	str	r5, [r4, #8]
 800b67c:	6065      	str	r5, [r4, #4]
 800b67e:	6125      	str	r5, [r4, #16]
 800b680:	6165      	str	r5, [r4, #20]
 800b682:	61a5      	str	r5, [r4, #24]
 800b684:	f7fc f884 	bl	8007790 <memset>
 800b688:	6325      	str	r5, [r4, #48]	; 0x30
 800b68a:	6365      	str	r5, [r4, #52]	; 0x34
 800b68c:	6465      	str	r5, [r4, #68]	; 0x44
 800b68e:	64a5      	str	r5, [r4, #72]	; 0x48
 800b690:	4620      	mov	r0, r4
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	4628      	mov	r0, r5
 800b696:	f7ff ff9d 	bl	800b5d4 <__sinit>
 800b69a:	e7c6      	b.n	800b62a <__sfp+0xe>
 800b69c:	4630      	mov	r0, r6
 800b69e:	2104      	movs	r1, #4
 800b6a0:	f7ff ff7c 	bl	800b59c <__sfmoreglue>
 800b6a4:	6028      	str	r0, [r5, #0]
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1d9      	bne.n	800b65e <__sfp+0x42>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	6033      	str	r3, [r6, #0]
 800b6b0:	e7ee      	b.n	800b690 <__sfp+0x74>
 800b6b2:	bf00      	nop
 800b6b4:	08018534 	.word	0x08018534

0800b6b8 <__sfp_lock_acquire>:
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop

0800b6bc <__sfp_lock_release>:
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop

0800b6c0 <__sinit_lock_acquire>:
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop

0800b6c4 <__sinit_lock_release>:
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop

0800b6c8 <__fp_lock_all>:
 800b6c8:	f240 0308 	movw	r3, #8
 800b6cc:	f24b 5135 	movw	r1, #46389	; 0xb535
 800b6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6d4:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	f000 b9a1 	b.w	800ba20 <_fwalk>
 800b6de:	bf00      	nop

0800b6e0 <__fp_unlock_all>:
 800b6e0:	f240 0308 	movw	r3, #8
 800b6e4:	f24b 5139 	movw	r1, #46393	; 0xb539
 800b6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b6f0:	6818      	ldr	r0, [r3, #0]
 800b6f2:	f000 b995 	b.w	800ba20 <_fwalk>
 800b6f6:	bf00      	nop

0800b6f8 <_fputwc_r>:
 800b6f8:	8993      	ldrh	r3, [r2, #12]
 800b6fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6fe:	4614      	mov	r4, r2
 800b700:	049a      	lsls	r2, r3, #18
 800b702:	b083      	sub	sp, #12
 800b704:	bf5e      	ittt	pl
 800b706:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800b70a:	81a3      	strhpl	r3, [r4, #12]
 800b70c:	6e62      	ldrpl	r2, [r4, #100]	; 0x64
 800b70e:	4607      	mov	r7, r0
 800b710:	460e      	mov	r6, r1
 800b712:	bf5c      	itt	pl
 800b714:	f442 5300 	orrpl.w	r3, r2, #8192	; 0x2000
 800b718:	6663      	strpl	r3, [r4, #100]	; 0x64
 800b71a:	f000 f9f9 	bl	800bb10 <__locale_mb_cur_max>
 800b71e:	2801      	cmp	r0, #1
 800b720:	d04b      	beq.n	800b7ba <_fputwc_r+0xc2>
 800b722:	ad01      	add	r5, sp, #4
 800b724:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b728:	4638      	mov	r0, r7
 800b72a:	4629      	mov	r1, r5
 800b72c:	4632      	mov	r2, r6
 800b72e:	f001 fc6f 	bl	800d010 <_wcrtomb_r>
 800b732:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b736:	4681      	mov	r9, r0
 800b738:	d028      	beq.n	800b78c <_fputwc_r+0x94>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d03b      	beq.n	800b7b6 <_fputwc_r+0xbe>
 800b73e:	f04f 0800 	mov.w	r8, #0
 800b742:	e00a      	b.n	800b75a <_fputwc_r+0x62>
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	f815 2008 	ldrb.w	r2, [r5, r8]
 800b74a:	701a      	strb	r2, [r3, #0]
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	3301      	adds	r3, #1
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	f108 0801 	add.w	r8, r8, #1
 800b756:	45c8      	cmp	r8, r9
 800b758:	d22d      	bcs.n	800b7b6 <_fputwc_r+0xbe>
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	60a3      	str	r3, [r4, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	daef      	bge.n	800b744 <_fputwc_r+0x4c>
 800b764:	69a2      	ldr	r2, [r4, #24]
 800b766:	2000      	movs	r0, #0
 800b768:	4293      	cmp	r3, r2
 800b76a:	db16      	blt.n	800b79a <_fputwc_r+0xa2>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	f815 2008 	ldrb.w	r2, [r5, r8]
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	7819      	ldrb	r1, [r3, #0]
 800b77a:	290a      	cmp	r1, #10
 800b77c:	bf18      	it	ne
 800b77e:	6022      	strne	r2, [r4, #0]
 800b780:	d00d      	beq.n	800b79e <_fputwc_r+0xa6>
 800b782:	2800      	cmp	r0, #0
 800b784:	d0e5      	beq.n	800b752 <_fputwc_r+0x5a>
 800b786:	f04f 30ff 	mov.w	r0, #4294967295
 800b78a:	e003      	b.n	800b794 <_fputwc_r+0x9c>
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	b003      	add	sp, #12
 800b796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b79a:	f815 1008 	ldrb.w	r1, [r5, r8]
 800b79e:	4638      	mov	r0, r7
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	f7fe fcbd 	bl	800a120 <__swbuf_r>
 800b7a6:	f1a0 33ff 	sub.w	r3, r0, #4294967295
 800b7aa:	4258      	negs	r0, r3
 800b7ac:	eb40 0003 	adc.w	r0, r0, r3
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0ce      	beq.n	800b752 <_fputwc_r+0x5a>
 800b7b4:	e7e7      	b.n	800b786 <_fputwc_r+0x8e>
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	e7ec      	b.n	800b794 <_fputwc_r+0x9c>
 800b7ba:	1c33      	adds	r3, r6, #0
 800b7bc:	bf18      	it	ne
 800b7be:	2301      	movne	r3, #1
 800b7c0:	2eff      	cmp	r6, #255	; 0xff
 800b7c2:	bf8c      	ite	hi
 800b7c4:	2300      	movhi	r3, #0
 800b7c6:	f003 0301 	andls.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0a9      	beq.n	800b722 <_fputwc_r+0x2a>
 800b7ce:	ad02      	add	r5, sp, #8
 800b7d0:	4681      	mov	r9, r0
 800b7d2:	f805 6d04 	strb.w	r6, [r5, #-4]!
 800b7d6:	e7b2      	b.n	800b73e <_fputwc_r+0x46>

0800b7d8 <fputwc>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	4606      	mov	r6, r0
 800b7dc:	4c06      	ldr	r4, [pc, #24]	; (800b7f8 <fputwc+0x20>)
 800b7de:	460d      	mov	r5, r1
 800b7e0:	6820      	ldr	r0, [r4, #0]
 800b7e2:	b120      	cbz	r0, 800b7ee <fputwc+0x16>
 800b7e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b7e6:	b913      	cbnz	r3, 800b7ee <fputwc+0x16>
 800b7e8:	f7ff fef4 	bl	800b5d4 <__sinit>
 800b7ec:	6820      	ldr	r0, [r4, #0]
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7f6:	e77f      	b.n	800b6f8 <_fputwc_r>
 800b7f8:	20000008 	.word	0x20000008

0800b7fc <_malloc_trim_r>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	4604      	mov	r4, r0
 800b800:	4d23      	ldr	r5, [pc, #140]	; (800b890 <_malloc_trim_r+0x94>)
 800b802:	460f      	mov	r7, r1
 800b804:	f00a fc50 	bl	80160a8 <__malloc_lock>
 800b808:	4620      	mov	r0, r4
 800b80a:	68ab      	ldr	r3, [r5, #8]
 800b80c:	685e      	ldr	r6, [r3, #4]
 800b80e:	f026 0603 	bic.w	r6, r6, #3
 800b812:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 800b816:	330f      	adds	r3, #15
 800b818:	1bdf      	subs	r7, r3, r7
 800b81a:	0b3f      	lsrs	r7, r7, #12
 800b81c:	3f01      	subs	r7, #1
 800b81e:	033f      	lsls	r7, r7, #12
 800b820:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800b824:	db1c      	blt.n	800b860 <_malloc_trim_r+0x64>
 800b826:	2100      	movs	r1, #0
 800b828:	f00a fbd4 	bl	8015fd4 <_sbrk_r>
 800b82c:	68ab      	ldr	r3, [r5, #8]
 800b82e:	199b      	adds	r3, r3, r6
 800b830:	4298      	cmp	r0, r3
 800b832:	d019      	beq.n	800b868 <_malloc_trim_r+0x6c>
 800b834:	4620      	mov	r0, r4
 800b836:	f00a fc41 	bl	80160bc <__malloc_unlock>
 800b83a:	2000      	movs	r0, #0
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83e:	2100      	movs	r1, #0
 800b840:	4620      	mov	r0, r4
 800b842:	f00a fbc7 	bl	8015fd4 <_sbrk_r>
 800b846:	68ab      	ldr	r3, [r5, #8]
 800b848:	1ac2      	subs	r2, r0, r3
 800b84a:	2a0f      	cmp	r2, #15
 800b84c:	dd07      	ble.n	800b85e <_malloc_trim_r+0x62>
 800b84e:	f042 0201 	orr.w	r2, r2, #1
 800b852:	605a      	str	r2, [r3, #4]
 800b854:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <_malloc_trim_r+0x98>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	1ac0      	subs	r0, r0, r3
 800b85a:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <_malloc_trim_r+0x9c>)
 800b85c:	6018      	str	r0, [r3, #0]
 800b85e:	4620      	mov	r0, r4
 800b860:	f00a fc2c 	bl	80160bc <__malloc_unlock>
 800b864:	2000      	movs	r0, #0
 800b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b868:	4279      	negs	r1, r7
 800b86a:	4620      	mov	r0, r4
 800b86c:	f00a fbb2 	bl	8015fd4 <_sbrk_r>
 800b870:	3001      	adds	r0, #1
 800b872:	d0e4      	beq.n	800b83e <_malloc_trim_r+0x42>
 800b874:	4b08      	ldr	r3, [pc, #32]	; (800b898 <_malloc_trim_r+0x9c>)
 800b876:	1bf6      	subs	r6, r6, r7
 800b878:	68a9      	ldr	r1, [r5, #8]
 800b87a:	4620      	mov	r0, r4
 800b87c:	f046 0601 	orr.w	r6, r6, #1
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	604e      	str	r6, [r1, #4]
 800b884:	1bd7      	subs	r7, r2, r7
 800b886:	601f      	str	r7, [r3, #0]
 800b888:	f00a fc18 	bl	80160bc <__malloc_unlock>
 800b88c:	2001      	movs	r0, #1
 800b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b890:	20000438 	.word	0x20000438
 800b894:	20000840 	.word	0x20000840
 800b898:	20000930 	.word	0x20000930

0800b89c <_free_r>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	460d      	mov	r5, r1
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	2900      	cmp	r1, #0
 800b8a4:	d06f      	beq.n	800b986 <_free_r+0xea>
 800b8a6:	f00a fbff 	bl	80160a8 <__malloc_lock>
 800b8aa:	4e59      	ldr	r6, [pc, #356]	; (800ba10 <_free_r+0x174>)
 800b8ac:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800b8b0:	f1a5 0108 	sub.w	r1, r5, #8
 800b8b4:	f020 0301 	bic.w	r3, r0, #1
 800b8b8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800b8bc:	18ca      	adds	r2, r1, r3
 800b8be:	4594      	cmp	ip, r2
 800b8c0:	6857      	ldr	r7, [r2, #4]
 800b8c2:	f027 0703 	bic.w	r7, r7, #3
 800b8c6:	d07b      	beq.n	800b9c0 <_free_r+0x124>
 800b8c8:	f010 0001 	ands.w	r0, r0, #1
 800b8cc:	6057      	str	r7, [r2, #4]
 800b8ce:	d04a      	beq.n	800b966 <_free_r+0xca>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	19d5      	adds	r5, r2, r7
 800b8d4:	686d      	ldr	r5, [r5, #4]
 800b8d6:	f015 0f01 	tst.w	r5, #1
 800b8da:	d106      	bne.n	800b8ea <_free_r+0x4e>
 800b8dc:	19db      	adds	r3, r3, r7
 800b8de:	6895      	ldr	r5, [r2, #8]
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d061      	beq.n	800b9a8 <_free_r+0x10c>
 800b8e4:	68d2      	ldr	r2, [r2, #12]
 800b8e6:	60ea      	str	r2, [r5, #12]
 800b8e8:	6095      	str	r5, [r2, #8]
 800b8ea:	f043 0201 	orr.w	r2, r3, #1
 800b8ee:	50cb      	str	r3, [r1, r3]
 800b8f0:	604a      	str	r2, [r1, #4]
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d132      	bne.n	800b95c <_free_r+0xc0>
 800b8f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8fa:	d345      	bcc.n	800b988 <_free_r+0xec>
 800b8fc:	099d      	lsrs	r5, r3, #6
 800b8fe:	0a5a      	lsrs	r2, r3, #9
 800b900:	3538      	adds	r5, #56	; 0x38
 800b902:	00e8      	lsls	r0, r5, #3
 800b904:	2a04      	cmp	r2, #4
 800b906:	d916      	bls.n	800b936 <_free_r+0x9a>
 800b908:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800b90c:	00e8      	lsls	r0, r5, #3
 800b90e:	2a14      	cmp	r2, #20
 800b910:	d911      	bls.n	800b936 <_free_r+0x9a>
 800b912:	0b1d      	lsrs	r5, r3, #12
 800b914:	356e      	adds	r5, #110	; 0x6e
 800b916:	00e8      	lsls	r0, r5, #3
 800b918:	2a54      	cmp	r2, #84	; 0x54
 800b91a:	d90c      	bls.n	800b936 <_free_r+0x9a>
 800b91c:	0bdd      	lsrs	r5, r3, #15
 800b91e:	3577      	adds	r5, #119	; 0x77
 800b920:	00e8      	lsls	r0, r5, #3
 800b922:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b926:	d906      	bls.n	800b936 <_free_r+0x9a>
 800b928:	f240 5054 	movw	r0, #1364	; 0x554
 800b92c:	4282      	cmp	r2, r0
 800b92e:	d86b      	bhi.n	800ba08 <_free_r+0x16c>
 800b930:	0c9d      	lsrs	r5, r3, #18
 800b932:	357c      	adds	r5, #124	; 0x7c
 800b934:	00e8      	lsls	r0, r5, #3
 800b936:	1986      	adds	r6, r0, r6
 800b938:	4835      	ldr	r0, [pc, #212]	; (800ba10 <_free_r+0x174>)
 800b93a:	68b2      	ldr	r2, [r6, #8]
 800b93c:	42b2      	cmp	r2, r6
 800b93e:	d103      	bne.n	800b948 <_free_r+0xac>
 800b940:	e059      	b.n	800b9f6 <_free_r+0x15a>
 800b942:	6892      	ldr	r2, [r2, #8]
 800b944:	4296      	cmp	r6, r2
 800b946:	d004      	beq.n	800b952 <_free_r+0xb6>
 800b948:	6850      	ldr	r0, [r2, #4]
 800b94a:	f020 0003 	bic.w	r0, r0, #3
 800b94e:	4283      	cmp	r3, r0
 800b950:	d3f7      	bcc.n	800b942 <_free_r+0xa6>
 800b952:	68d3      	ldr	r3, [r2, #12]
 800b954:	60cb      	str	r3, [r1, #12]
 800b956:	608a      	str	r2, [r1, #8]
 800b958:	60d1      	str	r1, [r2, #12]
 800b95a:	6099      	str	r1, [r3, #8]
 800b95c:	4620      	mov	r0, r4
 800b95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b962:	f00a bbab 	b.w	80160bc <__malloc_unlock>
 800b966:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800b96a:	f106 0c08 	add.w	ip, r6, #8
 800b96e:	1b49      	subs	r1, r1, r5
 800b970:	195b      	adds	r3, r3, r5
 800b972:	688d      	ldr	r5, [r1, #8]
 800b974:	4565      	cmp	r5, ip
 800b976:	d03c      	beq.n	800b9f2 <_free_r+0x156>
 800b978:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800b97c:	f8c5 c00c 	str.w	ip, [r5, #12]
 800b980:	f8cc 5008 	str.w	r5, [ip, #8]
 800b984:	e7a5      	b.n	800b8d2 <_free_r+0x36>
 800b986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b988:	08db      	lsrs	r3, r3, #3
 800b98a:	2001      	movs	r0, #1
 800b98c:	6875      	ldr	r5, [r6, #4]
 800b98e:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800b992:	109b      	asrs	r3, r3, #2
 800b994:	fa10 f303 	lsls.w	r3, r0, r3
 800b998:	60ca      	str	r2, [r1, #12]
 800b99a:	6890      	ldr	r0, [r2, #8]
 800b99c:	432b      	orrs	r3, r5
 800b99e:	6073      	str	r3, [r6, #4]
 800b9a0:	6088      	str	r0, [r1, #8]
 800b9a2:	60c1      	str	r1, [r0, #12]
 800b9a4:	6091      	str	r1, [r2, #8]
 800b9a6:	e7d9      	b.n	800b95c <_free_r+0xc0>
 800b9a8:	4f1a      	ldr	r7, [pc, #104]	; (800ba14 <_free_r+0x178>)
 800b9aa:	42bd      	cmp	r5, r7
 800b9ac:	d19a      	bne.n	800b8e4 <_free_r+0x48>
 800b9ae:	6171      	str	r1, [r6, #20]
 800b9b0:	f043 0201 	orr.w	r2, r3, #1
 800b9b4:	6131      	str	r1, [r6, #16]
 800b9b6:	60cd      	str	r5, [r1, #12]
 800b9b8:	608d      	str	r5, [r1, #8]
 800b9ba:	604a      	str	r2, [r1, #4]
 800b9bc:	50cb      	str	r3, [r1, r3]
 800b9be:	e7cd      	b.n	800b95c <_free_r+0xc0>
 800b9c0:	07c2      	lsls	r2, r0, #31
 800b9c2:	443b      	add	r3, r7
 800b9c4:	d407      	bmi.n	800b9d6 <_free_r+0x13a>
 800b9c6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800b9ca:	1a89      	subs	r1, r1, r2
 800b9cc:	189b      	adds	r3, r3, r2
 800b9ce:	6888      	ldr	r0, [r1, #8]
 800b9d0:	68ca      	ldr	r2, [r1, #12]
 800b9d2:	60c2      	str	r2, [r0, #12]
 800b9d4:	6090      	str	r0, [r2, #8]
 800b9d6:	f043 0201 	orr.w	r2, r3, #1
 800b9da:	604a      	str	r2, [r1, #4]
 800b9dc:	4a0e      	ldr	r2, [pc, #56]	; (800ba18 <_free_r+0x17c>)
 800b9de:	60b1      	str	r1, [r6, #8]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d3ba      	bcc.n	800b95c <_free_r+0xc0>
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	; (800ba1c <_free_r+0x180>)
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	6819      	ldr	r1, [r3, #0]
 800b9ec:	f7ff ff06 	bl	800b7fc <_malloc_trim_r>
 800b9f0:	e7b4      	b.n	800b95c <_free_r+0xc0>
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	e76d      	b.n	800b8d2 <_free_r+0x36>
 800b9f6:	2701      	movs	r7, #1
 800b9f8:	6846      	ldr	r6, [r0, #4]
 800b9fa:	10ad      	asrs	r5, r5, #2
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	fa17 f505 	lsls.w	r5, r7, r5
 800ba02:	4335      	orrs	r5, r6
 800ba04:	6045      	str	r5, [r0, #4]
 800ba06:	e7a5      	b.n	800b954 <_free_r+0xb8>
 800ba08:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800ba0c:	257e      	movs	r5, #126	; 0x7e
 800ba0e:	e792      	b.n	800b936 <_free_r+0x9a>
 800ba10:	20000438 	.word	0x20000438
 800ba14:	20000440 	.word	0x20000440
 800ba18:	20000844 	.word	0x20000844
 800ba1c:	2000092c 	.word	0x2000092c

0800ba20 <_fwalk>:
 800ba20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba24:	4606      	mov	r6, r0
 800ba26:	4688      	mov	r8, r1
 800ba28:	f7ff fe46 	bl	800b6b8 <__sfp_lock_acquire>
 800ba2c:	f516 7638 	adds.w	r6, r6, #736	; 0x2e0
 800ba30:	bf08      	it	eq
 800ba32:	4637      	moveq	r7, r6
 800ba34:	d015      	beq.n	800ba62 <_fwalk+0x42>
 800ba36:	2700      	movs	r7, #0
 800ba38:	6875      	ldr	r5, [r6, #4]
 800ba3a:	68b4      	ldr	r4, [r6, #8]
 800ba3c:	3d01      	subs	r5, #1
 800ba3e:	d40d      	bmi.n	800ba5c <_fwalk+0x3c>
 800ba40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba44:	3d01      	subs	r5, #1
 800ba46:	b133      	cbz	r3, 800ba56 <_fwalk+0x36>
 800ba48:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	3301      	adds	r3, #1
 800ba50:	d001      	beq.n	800ba56 <_fwalk+0x36>
 800ba52:	47c0      	blx	r8
 800ba54:	4307      	orrs	r7, r0
 800ba56:	3468      	adds	r4, #104	; 0x68
 800ba58:	1c6b      	adds	r3, r5, #1
 800ba5a:	d1f1      	bne.n	800ba40 <_fwalk+0x20>
 800ba5c:	6836      	ldr	r6, [r6, #0]
 800ba5e:	2e00      	cmp	r6, #0
 800ba60:	d1ea      	bne.n	800ba38 <_fwalk+0x18>
 800ba62:	f7ff fe2b 	bl	800b6bc <__sfp_lock_release>
 800ba66:	4638      	mov	r0, r7
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba6c <_fwalk_reent>:
 800ba6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	4607      	mov	r7, r0
 800ba72:	4689      	mov	r9, r1
 800ba74:	f7ff fe20 	bl	800b6b8 <__sfp_lock_acquire>
 800ba78:	f517 7638 	adds.w	r6, r7, #736	; 0x2e0
 800ba7c:	bf08      	it	eq
 800ba7e:	46b0      	moveq	r8, r6
 800ba80:	d018      	beq.n	800bab4 <_fwalk_reent+0x48>
 800ba82:	f04f 0800 	mov.w	r8, #0
 800ba86:	6875      	ldr	r5, [r6, #4]
 800ba88:	68b4      	ldr	r4, [r6, #8]
 800ba8a:	3d01      	subs	r5, #1
 800ba8c:	d40f      	bmi.n	800baae <_fwalk_reent+0x42>
 800ba8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba92:	3d01      	subs	r5, #1
 800ba94:	b143      	cbz	r3, 800baa8 <_fwalk_reent+0x3c>
 800ba96:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	3301      	adds	r3, #1
 800baa0:	d002      	beq.n	800baa8 <_fwalk_reent+0x3c>
 800baa2:	47c8      	blx	r9
 800baa4:	ea48 0800 	orr.w	r8, r8, r0
 800baa8:	3468      	adds	r4, #104	; 0x68
 800baaa:	1c6a      	adds	r2, r5, #1
 800baac:	d1ef      	bne.n	800ba8e <_fwalk_reent+0x22>
 800baae:	6836      	ldr	r6, [r6, #0]
 800bab0:	2e00      	cmp	r6, #0
 800bab2:	d1e8      	bne.n	800ba86 <_fwalk_reent+0x1a>
 800bab4:	f7ff fe02 	bl	800b6bc <__sfp_lock_release>
 800bab8:	4640      	mov	r0, r8
 800baba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800babe:	bf00      	nop

0800bac0 <_setlocale_r>:
 800bac0:	b510      	push	{r4, lr}
 800bac2:	4614      	mov	r4, r2
 800bac4:	b122      	cbz	r2, 800bad0 <_setlocale_r+0x10>
 800bac6:	4610      	mov	r0, r2
 800bac8:	490b      	ldr	r1, [pc, #44]	; (800baf8 <_setlocale_r+0x38>)
 800baca:	f7fc fa17 	bl	8007efc <strcmp>
 800bace:	b908      	cbnz	r0, 800bad4 <_setlocale_r+0x14>
 800bad0:	480a      	ldr	r0, [pc, #40]	; (800bafc <_setlocale_r+0x3c>)
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	4620      	mov	r0, r4
 800bad6:	4909      	ldr	r1, [pc, #36]	; (800bafc <_setlocale_r+0x3c>)
 800bad8:	f7fc fa10 	bl	8007efc <strcmp>
 800badc:	b908      	cbnz	r0, 800bae2 <_setlocale_r+0x22>
 800bade:	4807      	ldr	r0, [pc, #28]	; (800bafc <_setlocale_r+0x3c>)
 800bae0:	bd10      	pop	{r4, pc}
 800bae2:	4620      	mov	r0, r4
 800bae4:	4906      	ldr	r1, [pc, #24]	; (800bb00 <_setlocale_r+0x40>)
 800bae6:	f7fc fa09 	bl	8007efc <strcmp>
 800baea:	4b04      	ldr	r3, [pc, #16]	; (800bafc <_setlocale_r+0x3c>)
 800baec:	2800      	cmp	r0, #0
 800baee:	bf0c      	ite	eq
 800baf0:	4618      	moveq	r0, r3
 800baf2:	2000      	movne	r0, #0
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	bf00      	nop
 800baf8:	0801c688 	.word	0x0801c688
 800bafc:	0801c630 	.word	0x0801c630
 800bb00:	0801c5fc 	.word	0x0801c5fc

0800bb04 <__locale_charset>:
 800bb04:	f640 0048 	movw	r0, #2120	; 0x848
 800bb08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop

0800bb10 <__locale_mb_cur_max>:
 800bb10:	f640 0348 	movw	r3, #2120	; 0x848
 800bb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb18:	6a18      	ldr	r0, [r3, #32]
 800bb1a:	4770      	bx	lr

0800bb1c <__locale_msgcharset>:
 800bb1c:	4800      	ldr	r0, [pc, #0]	; (800bb20 <__locale_msgcharset+0x4>)
 800bb1e:	4770      	bx	lr
 800bb20:	2000086c 	.word	0x2000086c

0800bb24 <__locale_cjk_lang>:
 800bb24:	2000      	movs	r0, #0
 800bb26:	4770      	bx	lr

0800bb28 <_localeconv_r>:
 800bb28:	4800      	ldr	r0, [pc, #0]	; (800bb2c <_localeconv_r+0x4>)
 800bb2a:	4770      	bx	lr
 800bb2c:	2000088c 	.word	0x2000088c

0800bb30 <setlocale>:
 800bb30:	f240 0308 	movw	r3, #8
 800bb34:	460a      	mov	r2, r1
 800bb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	e7bf      	b.n	800bac0 <_setlocale_r>

0800bb40 <localeconv>:
 800bb40:	4800      	ldr	r0, [pc, #0]	; (800bb44 <localeconv+0x4>)
 800bb42:	4770      	bx	lr
 800bb44:	2000088c 	.word	0x2000088c

0800bb48 <__smakebuf_r>:
 800bb48:	898b      	ldrh	r3, [r1, #12]
 800bb4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	b091      	sub	sp, #68	; 0x44
 800bb52:	0790      	lsls	r0, r2, #30
 800bb54:	460c      	mov	r4, r1
 800bb56:	d439      	bmi.n	800bbcc <__smakebuf_r+0x84>
 800bb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	db19      	blt.n	800bb94 <__smakebuf_r+0x4c>
 800bb60:	4628      	mov	r0, r5
 800bb62:	aa01      	add	r2, sp, #4
 800bb64:	f00a fa08 	bl	8015f78 <_fstat_r>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	db11      	blt.n	800bb90 <__smakebuf_r+0x48>
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bb72:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
 800bb76:	424f      	negs	r7, r1
 800bb78:	eb47 0701 	adc.w	r7, r7, r1
 800bb7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb80:	d037      	beq.n	800bbf2 <__smakebuf_r+0xaa>
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800bb88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	e00b      	b.n	800bba8 <__smakebuf_r+0x60>
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bb98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bb9c:	bf14      	ite	ne
 800bb9e:	2640      	movne	r6, #64	; 0x40
 800bba0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800bba4:	2700      	movs	r7, #0
 800bba6:	81a3      	strh	r3, [r4, #12]
 800bba8:	4628      	mov	r0, r5
 800bbaa:	4631      	mov	r1, r6
 800bbac:	f7fb fa24 	bl	8006ff8 <_malloc_r>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d029      	beq.n	800bc0a <__smakebuf_r+0xc2>
 800bbb6:	4a1b      	ldr	r2, [pc, #108]	; (800bc24 <__smakebuf_r+0xdc>)
 800bbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbbc:	63ea      	str	r2, [r5, #60]	; 0x3c
 800bbbe:	6020      	str	r0, [r4, #0]
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	6120      	str	r0, [r4, #16]
 800bbc4:	6166      	str	r6, [r4, #20]
 800bbc6:	b947      	cbnz	r7, 800bbda <__smakebuf_r+0x92>
 800bbc8:	b011      	add	sp, #68	; 0x44
 800bbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbcc:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800bbd0:	600b      	str	r3, [r1, #0]
 800bbd2:	610b      	str	r3, [r1, #16]
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	614b      	str	r3, [r1, #20]
 800bbd8:	e7f6      	b.n	800bbc8 <__smakebuf_r+0x80>
 800bbda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f00a f9ea 	bl	8015fb8 <_isatty_r>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d0ef      	beq.n	800bbc8 <__smakebuf_r+0x80>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f043 0301 	orr.w	r3, r3, #1
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	e7ea      	b.n	800bbc8 <__smakebuf_r+0x80>
 800bbf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <__smakebuf_r+0xe0>)
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d1c3      	bne.n	800bb82 <__smakebuf_r+0x3a>
 800bbfa:	89a2      	ldrh	r2, [r4, #12]
 800bbfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc00:	461e      	mov	r6, r3
 800bc02:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bc04:	4313      	orrs	r3, r2
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	e7ce      	b.n	800bba8 <__smakebuf_r+0x60>
 800bc0a:	059a      	lsls	r2, r3, #22
 800bc0c:	d4dc      	bmi.n	800bbc8 <__smakebuf_r+0x80>
 800bc0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc12:	f043 0302 	orr.w	r3, r3, #2
 800bc16:	6022      	str	r2, [r4, #0]
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	6122      	str	r2, [r4, #16]
 800bc1e:	6163      	str	r3, [r4, #20]
 800bc20:	e7d2      	b.n	800bbc8 <__smakebuf_r+0x80>
 800bc22:	bf00      	nop
 800bc24:	0800b53d 	.word	0x0800b53d
 800bc28:	0800c5e5 	.word	0x0800c5e5

0800bc2c <_Balloc>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4605      	mov	r5, r0
 800bc30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bc32:	460c      	mov	r4, r1
 800bc34:	b14b      	cbz	r3, 800bc4a <_Balloc+0x1e>
 800bc36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bc3a:	b178      	cbz	r0, 800bc5c <_Balloc+0x30>
 800bc3c:	6802      	ldr	r2, [r0, #0]
 800bc3e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bc42:	2300      	movs	r3, #0
 800bc44:	6103      	str	r3, [r0, #16]
 800bc46:	60c3      	str	r3, [r0, #12]
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	2104      	movs	r1, #4
 800bc4c:	2221      	movs	r2, #33	; 0x21
 800bc4e:	f001 fa5b 	bl	800d108 <_calloc_r>
 800bc52:	4603      	mov	r3, r0
 800bc54:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d1ed      	bne.n	800bc36 <_Balloc+0xa>
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	4628      	mov	r0, r5
 800bc60:	4619      	mov	r1, r3
 800bc62:	fa13 f504 	lsls.w	r5, r3, r4
 800bc66:	1d6a      	adds	r2, r5, #5
 800bc68:	0092      	lsls	r2, r2, #2
 800bc6a:	f001 fa4d 	bl	800d108 <_calloc_r>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0f3      	beq.n	800bc5a <_Balloc+0x2e>
 800bc72:	6044      	str	r4, [r0, #4]
 800bc74:	6085      	str	r5, [r0, #8]
 800bc76:	e7e4      	b.n	800bc42 <_Balloc+0x16>

0800bc78 <_Bfree>:
 800bc78:	b131      	cbz	r1, 800bc88 <_Bfree+0x10>
 800bc7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bc7c:	684a      	ldr	r2, [r1, #4]
 800bc7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc82:	6008      	str	r0, [r1, #0]
 800bc84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop

0800bc8c <__multadd>:
 800bc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8e:	460c      	mov	r4, r1
 800bc90:	4605      	mov	r5, r0
 800bc92:	690e      	ldr	r6, [r1, #16]
 800bc94:	f101 0014 	add.w	r0, r1, #20
 800bc98:	b083      	sub	sp, #12
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	6807      	ldr	r7, [r0, #0]
 800bc9e:	3101      	adds	r1, #1
 800bca0:	fa1f fc87 	uxth.w	ip, r7
 800bca4:	0c3f      	lsrs	r7, r7, #16
 800bca6:	fb02 330c 	mla	r3, r2, ip, r3
 800bcaa:	fb02 f707 	mul.w	r7, r2, r7
 800bcae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	eb03 4c07 	add.w	ip, r3, r7, lsl #16
 800bcb8:	0c3b      	lsrs	r3, r7, #16
 800bcba:	428e      	cmp	r6, r1
 800bcbc:	f840 cb04 	str.w	ip, [r0], #4
 800bcc0:	dcec      	bgt.n	800bc9c <__multadd+0x10>
 800bcc2:	b13b      	cbz	r3, 800bcd4 <__multadd+0x48>
 800bcc4:	68a2      	ldr	r2, [r4, #8]
 800bcc6:	4296      	cmp	r6, r2
 800bcc8:	da07      	bge.n	800bcda <__multadd+0x4e>
 800bcca:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800bcce:	3601      	adds	r6, #1
 800bcd0:	6126      	str	r6, [r4, #16]
 800bcd2:	6153      	str	r3, [r2, #20]
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	b003      	add	sp, #12
 800bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcda:	6861      	ldr	r1, [r4, #4]
 800bcdc:	4628      	mov	r0, r5
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	3101      	adds	r1, #1
 800bce2:	f7ff ffa3 	bl	800bc2c <_Balloc>
 800bce6:	6922      	ldr	r2, [r4, #16]
 800bce8:	f104 010c 	add.w	r1, r4, #12
 800bcec:	3202      	adds	r2, #2
 800bcee:	0092      	lsls	r2, r2, #2
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	f100 000c 	add.w	r0, r0, #12
 800bcf6:	f7fb fca5 	bl	8007644 <memcpy>
 800bcfa:	6861      	ldr	r1, [r4, #4]
 800bcfc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800bd04:	6020      	str	r0, [r4, #0]
 800bd06:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 800bd0a:	463c      	mov	r4, r7
 800bd0c:	e7dd      	b.n	800bcca <__multadd+0x3e>
 800bd0e:	bf00      	nop

0800bd10 <__s2b>:
 800bd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd14:	f648 6439 	movw	r4, #36409	; 0x8e39
 800bd18:	461e      	mov	r6, r3
 800bd1a:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 800bd1e:	f103 0308 	add.w	r3, r3, #8
 800bd22:	4688      	mov	r8, r1
 800bd24:	4605      	mov	r5, r0
 800bd26:	4617      	mov	r7, r2
 800bd28:	fb84 1403 	smull	r1, r4, r4, r3
 800bd2c:	17db      	asrs	r3, r3, #31
 800bd2e:	2100      	movs	r1, #0
 800bd30:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	dd05      	ble.n	800bd44 <__s2b+0x34>
 800bd38:	2201      	movs	r2, #1
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	0052      	lsls	r2, r2, #1
 800bd3e:	3101      	adds	r1, #1
 800bd40:	4293      	cmp	r3, r2
 800bd42:	dcfb      	bgt.n	800bd3c <__s2b+0x2c>
 800bd44:	4628      	mov	r0, r5
 800bd46:	f7ff ff71 	bl	800bc2c <_Balloc>
 800bd4a:	9b08      	ldr	r3, [sp, #32]
 800bd4c:	6143      	str	r3, [r0, #20]
 800bd4e:	2301      	movs	r3, #1
 800bd50:	2f09      	cmp	r7, #9
 800bd52:	4601      	mov	r1, r0
 800bd54:	6103      	str	r3, [r0, #16]
 800bd56:	dd21      	ble.n	800bd9c <__s2b+0x8c>
 800bd58:	f108 0909 	add.w	r9, r8, #9
 800bd5c:	2409      	movs	r4, #9
 800bd5e:	f818 3004 	ldrb.w	r3, [r8, r4]
 800bd62:	220a      	movs	r2, #10
 800bd64:	4628      	mov	r0, r5
 800bd66:	3401      	adds	r4, #1
 800bd68:	3b30      	subs	r3, #48	; 0x30
 800bd6a:	f7ff ff8f 	bl	800bc8c <__multadd>
 800bd6e:	42bc      	cmp	r4, r7
 800bd70:	4601      	mov	r1, r0
 800bd72:	d1f4      	bne.n	800bd5e <__s2b+0x4e>
 800bd74:	eb09 0804 	add.w	r8, r9, r4
 800bd78:	f1a8 0808 	sub.w	r8, r8, #8
 800bd7c:	42a6      	cmp	r6, r4
 800bd7e:	dd0a      	ble.n	800bd96 <__s2b+0x86>
 800bd80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd84:	220a      	movs	r2, #10
 800bd86:	4628      	mov	r0, r5
 800bd88:	3401      	adds	r4, #1
 800bd8a:	3b30      	subs	r3, #48	; 0x30
 800bd8c:	f7ff ff7e 	bl	800bc8c <__multadd>
 800bd90:	42b4      	cmp	r4, r6
 800bd92:	4601      	mov	r1, r0
 800bd94:	d1f4      	bne.n	800bd80 <__s2b+0x70>
 800bd96:	4608      	mov	r0, r1
 800bd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9c:	f108 080a 	add.w	r8, r8, #10
 800bda0:	2409      	movs	r4, #9
 800bda2:	e7eb      	b.n	800bd7c <__s2b+0x6c>

0800bda4 <__hi0bits>:
 800bda4:	4603      	mov	r3, r0
 800bda6:	2000      	movs	r0, #0
 800bda8:	0c1a      	lsrs	r2, r3, #16
 800bdaa:	d101      	bne.n	800bdb0 <__hi0bits+0xc>
 800bdac:	041b      	lsls	r3, r3, #16
 800bdae:	2010      	movs	r0, #16
 800bdb0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bdb4:	d101      	bne.n	800bdba <__hi0bits+0x16>
 800bdb6:	3008      	adds	r0, #8
 800bdb8:	021b      	lsls	r3, r3, #8
 800bdba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bdbe:	d101      	bne.n	800bdc4 <__hi0bits+0x20>
 800bdc0:	3004      	adds	r0, #4
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bdc8:	d101      	bne.n	800bdce <__hi0bits+0x2a>
 800bdca:	3002      	adds	r0, #2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	db02      	blt.n	800bdd8 <__hi0bits+0x34>
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	d401      	bmi.n	800bdda <__hi0bits+0x36>
 800bdd6:	2020      	movs	r0, #32
 800bdd8:	4770      	bx	lr
 800bdda:	3001      	adds	r0, #1
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop

0800bde0 <__lo0bits>:
 800bde0:	6803      	ldr	r3, [r0, #0]
 800bde2:	4602      	mov	r2, r0
 800bde4:	f013 0007 	ands.w	r0, r3, #7
 800bde8:	d007      	beq.n	800bdfa <__lo0bits+0x1a>
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d41f      	bmi.n	800be2e <__lo0bits+0x4e>
 800bdee:	0798      	lsls	r0, r3, #30
 800bdf0:	d41f      	bmi.n	800be32 <__lo0bits+0x52>
 800bdf2:	089b      	lsrs	r3, r3, #2
 800bdf4:	2002      	movs	r0, #2
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	4770      	bx	lr
 800bdfa:	b299      	uxth	r1, r3
 800bdfc:	b909      	cbnz	r1, 800be02 <__lo0bits+0x22>
 800bdfe:	0c1b      	lsrs	r3, r3, #16
 800be00:	2010      	movs	r0, #16
 800be02:	f013 0fff 	tst.w	r3, #255	; 0xff
 800be06:	d101      	bne.n	800be0c <__lo0bits+0x2c>
 800be08:	3008      	adds	r0, #8
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	0719      	lsls	r1, r3, #28
 800be0e:	d101      	bne.n	800be14 <__lo0bits+0x34>
 800be10:	3004      	adds	r0, #4
 800be12:	091b      	lsrs	r3, r3, #4
 800be14:	0799      	lsls	r1, r3, #30
 800be16:	d101      	bne.n	800be1c <__lo0bits+0x3c>
 800be18:	3002      	adds	r0, #2
 800be1a:	089b      	lsrs	r3, r3, #2
 800be1c:	07d9      	lsls	r1, r3, #31
 800be1e:	d404      	bmi.n	800be2a <__lo0bits+0x4a>
 800be20:	085b      	lsrs	r3, r3, #1
 800be22:	d101      	bne.n	800be28 <__lo0bits+0x48>
 800be24:	2020      	movs	r0, #32
 800be26:	4770      	bx	lr
 800be28:	3001      	adds	r0, #1
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	4770      	bx	lr
 800be2e:	2000      	movs	r0, #0
 800be30:	4770      	bx	lr
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	2001      	movs	r0, #1
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop

0800be3c <__i2b>:
 800be3c:	b510      	push	{r4, lr}
 800be3e:	460c      	mov	r4, r1
 800be40:	2101      	movs	r1, #1
 800be42:	f7ff fef3 	bl	800bc2c <_Balloc>
 800be46:	2301      	movs	r3, #1
 800be48:	6144      	str	r4, [r0, #20]
 800be4a:	6103      	str	r3, [r0, #16]
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	bf00      	nop

0800be50 <__multiply>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	460c      	mov	r4, r1
 800be56:	690d      	ldr	r5, [r1, #16]
 800be58:	b087      	sub	sp, #28
 800be5a:	6916      	ldr	r6, [r2, #16]
 800be5c:	4692      	mov	sl, r2
 800be5e:	42b5      	cmp	r5, r6
 800be60:	da04      	bge.n	800be6c <__multiply+0x1c>
 800be62:	462a      	mov	r2, r5
 800be64:	4654      	mov	r4, sl
 800be66:	4635      	mov	r5, r6
 800be68:	468a      	mov	sl, r1
 800be6a:	4616      	mov	r6, r2
 800be6c:	68a3      	ldr	r3, [r4, #8]
 800be6e:	eb05 0b06 	add.w	fp, r5, r6
 800be72:	6861      	ldr	r1, [r4, #4]
 800be74:	459b      	cmp	fp, r3
 800be76:	bfc8      	it	gt
 800be78:	3101      	addgt	r1, #1
 800be7a:	f7ff fed7 	bl	800bc2c <_Balloc>
 800be7e:	f10b 0104 	add.w	r1, fp, #4
 800be82:	9105      	str	r1, [sp, #20]
 800be84:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800be88:	f100 0914 	add.w	r9, r0, #20
 800be8c:	3304      	adds	r3, #4
 800be8e:	9003      	str	r0, [sp, #12]
 800be90:	4599      	cmp	r9, r3
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	d206      	bcs.n	800bea4 <__multiply+0x54>
 800be96:	9904      	ldr	r1, [sp, #16]
 800be98:	464b      	mov	r3, r9
 800be9a:	2200      	movs	r2, #0
 800be9c:	f843 2b04 	str.w	r2, [r3], #4
 800bea0:	4299      	cmp	r1, r3
 800bea2:	d8fb      	bhi.n	800be9c <__multiply+0x4c>
 800bea4:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800bea8:	f10a 0a14 	add.w	sl, sl, #20
 800beac:	3614      	adds	r6, #20
 800beae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800beb2:	3414      	adds	r4, #20
 800beb4:	45b2      	cmp	sl, r6
 800beb6:	9601      	str	r6, [sp, #4]
 800beb8:	f105 0814 	add.w	r8, r5, #20
 800bebc:	9402      	str	r4, [sp, #8]
 800bebe:	d24a      	bcs.n	800bf56 <__multiply+0x106>
 800bec0:	f85a 5b04 	ldr.w	r5, [sl], #4
 800bec4:	b2ac      	uxth	r4, r5
 800bec6:	b1ec      	cbz	r4, 800bf04 <__multiply+0xb4>
 800bec8:	9a02      	ldr	r2, [sp, #8]
 800beca:	464b      	mov	r3, r9
 800becc:	2500      	movs	r5, #0
 800bece:	6818      	ldr	r0, [r3, #0]
 800bed0:	461f      	mov	r7, r3
 800bed2:	f852 1b04 	ldr.w	r1, [r2], #4
 800bed6:	b286      	uxth	r6, r0
 800bed8:	0c00      	lsrs	r0, r0, #16
 800beda:	1976      	adds	r6, r6, r5
 800bedc:	fa1f fc81 	uxth.w	ip, r1
 800bee0:	0c09      	lsrs	r1, r1, #16
 800bee2:	fb04 660c 	mla	r6, r4, ip, r6
 800bee6:	fb04 0001 	mla	r0, r4, r1, r0
 800beea:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 800beee:	b2b6      	uxth	r6, r6
 800bef0:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800bef4:	0c2d      	lsrs	r5, r5, #16
 800bef6:	4590      	cmp	r8, r2
 800bef8:	f843 6b04 	str.w	r6, [r3], #4
 800befc:	d8e7      	bhi.n	800bece <__multiply+0x7e>
 800befe:	607d      	str	r5, [r7, #4]
 800bf00:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 800bf04:	0c2d      	lsrs	r5, r5, #16
 800bf06:	d021      	beq.n	800bf4c <__multiply+0xfc>
 800bf08:	f8d9 1000 	ldr.w	r1, [r9]
 800bf0c:	46cc      	mov	ip, r9
 800bf0e:	9b02      	ldr	r3, [sp, #8]
 800bf10:	464e      	mov	r6, r9
 800bf12:	4608      	mov	r0, r1
 800bf14:	2700      	movs	r7, #0
 800bf16:	e000      	b.n	800bf1a <__multiply+0xca>
 800bf18:	4616      	mov	r6, r2
 800bf1a:	881c      	ldrh	r4, [r3, #0]
 800bf1c:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 800bf20:	4632      	mov	r2, r6
 800bf22:	b289      	uxth	r1, r1
 800bf24:	fb05 7704 	mla	r7, r5, r4, r7
 800bf28:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bf2c:	f842 1b04 	str.w	r1, [r2], #4
 800bf30:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf34:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 800bf38:	0c09      	lsrs	r1, r1, #16
 800bf3a:	b284      	uxth	r4, r0
 800bf3c:	fb05 4101 	mla	r1, r5, r1, r4
 800bf40:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800bf44:	0c0f      	lsrs	r7, r1, #16
 800bf46:	4598      	cmp	r8, r3
 800bf48:	d8e6      	bhi.n	800bf18 <__multiply+0xc8>
 800bf4a:	6071      	str	r1, [r6, #4]
 800bf4c:	9a01      	ldr	r2, [sp, #4]
 800bf4e:	f109 0904 	add.w	r9, r9, #4
 800bf52:	4552      	cmp	r2, sl
 800bf54:	d8b4      	bhi.n	800bec0 <__multiply+0x70>
 800bf56:	f1bb 0f00 	cmp.w	fp, #0
 800bf5a:	dd0e      	ble.n	800bf7a <__multiply+0x12a>
 800bf5c:	9905      	ldr	r1, [sp, #20]
 800bf5e:	9a03      	ldr	r2, [sp, #12]
 800bf60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf64:	b94b      	cbnz	r3, 800bf7a <__multiply+0x12a>
 800bf66:	9904      	ldr	r1, [sp, #16]
 800bf68:	465a      	mov	r2, fp
 800bf6a:	1f0b      	subs	r3, r1, #4
 800bf6c:	e002      	b.n	800bf74 <__multiply+0x124>
 800bf6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf72:	b909      	cbnz	r1, 800bf78 <__multiply+0x128>
 800bf74:	3a01      	subs	r2, #1
 800bf76:	d1fa      	bne.n	800bf6e <__multiply+0x11e>
 800bf78:	4693      	mov	fp, r2
 800bf7a:	9a03      	ldr	r2, [sp, #12]
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f8c2 b010 	str.w	fp, [r2, #16]
 800bf82:	b007      	add	sp, #28
 800bf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf88 <__pow5mult>:
 800bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	f012 0603 	ands.w	r6, r2, #3
 800bf90:	4615      	mov	r5, r2
 800bf92:	4604      	mov	r4, r0
 800bf94:	4688      	mov	r8, r1
 800bf96:	d12d      	bne.n	800bff4 <__pow5mult+0x6c>
 800bf98:	10ad      	asrs	r5, r5, #2
 800bf9a:	d01d      	beq.n	800bfd8 <__pow5mult+0x50>
 800bf9c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800bf9e:	b92f      	cbnz	r7, 800bfac <__pow5mult+0x24>
 800bfa0:	e031      	b.n	800c006 <__pow5mult+0x7e>
 800bfa2:	106d      	asrs	r5, r5, #1
 800bfa4:	d018      	beq.n	800bfd8 <__pow5mult+0x50>
 800bfa6:	683e      	ldr	r6, [r7, #0]
 800bfa8:	b1ce      	cbz	r6, 800bfde <__pow5mult+0x56>
 800bfaa:	4637      	mov	r7, r6
 800bfac:	07e8      	lsls	r0, r5, #31
 800bfae:	d5f8      	bpl.n	800bfa2 <__pow5mult+0x1a>
 800bfb0:	4641      	mov	r1, r8
 800bfb2:	463a      	mov	r2, r7
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f7ff ff4b 	bl	800be50 <__multiply>
 800bfba:	f1b8 0f00 	cmp.w	r8, #0
 800bfbe:	d017      	beq.n	800bff0 <__pow5mult+0x68>
 800bfc0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bfc4:	106d      	asrs	r5, r5, #1
 800bfc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfcc:	f8c8 1000 	str.w	r1, [r8]
 800bfd0:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800bfd4:	4680      	mov	r8, r0
 800bfd6:	d1e6      	bne.n	800bfa6 <__pow5mult+0x1e>
 800bfd8:	4640      	mov	r0, r8
 800bfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfde:	4639      	mov	r1, r7
 800bfe0:	463a      	mov	r2, r7
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff ff34 	bl	800be50 <__multiply>
 800bfe8:	6038      	str	r0, [r7, #0]
 800bfea:	4607      	mov	r7, r0
 800bfec:	6006      	str	r6, [r0, #0]
 800bfee:	e7dd      	b.n	800bfac <__pow5mult+0x24>
 800bff0:	4680      	mov	r8, r0
 800bff2:	e7d6      	b.n	800bfa2 <__pow5mult+0x1a>
 800bff4:	4a09      	ldr	r2, [pc, #36]	; (800c01c <__pow5mult+0x94>)
 800bff6:	3e01      	subs	r6, #1
 800bff8:	2300      	movs	r3, #0
 800bffa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800bffe:	f7ff fe45 	bl	800bc8c <__multadd>
 800c002:	4680      	mov	r8, r0
 800c004:	e7c8      	b.n	800bf98 <__pow5mult+0x10>
 800c006:	4620      	mov	r0, r4
 800c008:	f240 2171 	movw	r1, #625	; 0x271
 800c00c:	f7ff ff16 	bl	800be3c <__i2b>
 800c010:	2300      	movs	r3, #0
 800c012:	64a0      	str	r0, [r4, #72]	; 0x48
 800c014:	4607      	mov	r7, r0
 800c016:	6003      	str	r3, [r0, #0]
 800c018:	e7c8      	b.n	800bfac <__pow5mult+0x24>
 800c01a:	bf00      	nop
 800c01c:	08018578 	.word	0x08018578

0800c020 <__lshift>:
 800c020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	4691      	mov	r9, r2
 800c026:	690a      	ldr	r2, [r1, #16]
 800c028:	460c      	mov	r4, r1
 800c02a:	ea4f 1769 	mov.w	r7, r9, asr #5
 800c02e:	688b      	ldr	r3, [r1, #8]
 800c030:	eb07 0b02 	add.w	fp, r7, r2
 800c034:	4606      	mov	r6, r0
 800c036:	f10b 0501 	add.w	r5, fp, #1
 800c03a:	6849      	ldr	r1, [r1, #4]
 800c03c:	429d      	cmp	r5, r3
 800c03e:	dd03      	ble.n	800c048 <__lshift+0x28>
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	3101      	adds	r1, #1
 800c044:	429d      	cmp	r5, r3
 800c046:	dcfb      	bgt.n	800c040 <__lshift+0x20>
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fdef 	bl	800bc2c <_Balloc>
 800c04e:	2f00      	cmp	r7, #0
 800c050:	f100 0314 	add.w	r3, r0, #20
 800c054:	dd09      	ble.n	800c06a <__lshift+0x4a>
 800c056:	2200      	movs	r2, #0
 800c058:	4611      	mov	r1, r2
 800c05a:	3201      	adds	r2, #1
 800c05c:	f843 1b04 	str.w	r1, [r3], #4
 800c060:	42ba      	cmp	r2, r7
 800c062:	d1fa      	bne.n	800c05a <__lshift+0x3a>
 800c064:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800c068:	3314      	adds	r3, #20
 800c06a:	6922      	ldr	r2, [r4, #16]
 800c06c:	f019 091f 	ands.w	r9, r9, #31
 800c070:	f104 0114 	add.w	r1, r4, #20
 800c074:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800c078:	f10c 0c14 	add.w	ip, ip, #20
 800c07c:	d022      	beq.n	800c0c4 <__lshift+0xa4>
 800c07e:	f1c9 0a20 	rsb	sl, r9, #32
 800c082:	2200      	movs	r2, #0
 800c084:	e000      	b.n	800c088 <__lshift+0x68>
 800c086:	463b      	mov	r3, r7
 800c088:	f8d1 8000 	ldr.w	r8, [r1]
 800c08c:	461f      	mov	r7, r3
 800c08e:	fa08 f809 	lsl.w	r8, r8, r9
 800c092:	ea48 0202 	orr.w	r2, r8, r2
 800c096:	f847 2b04 	str.w	r2, [r7], #4
 800c09a:	f851 2b04 	ldr.w	r2, [r1], #4
 800c09e:	458c      	cmp	ip, r1
 800c0a0:	fa22 f20a 	lsr.w	r2, r2, sl
 800c0a4:	d8ef      	bhi.n	800c086 <__lshift+0x66>
 800c0a6:	605a      	str	r2, [r3, #4]
 800c0a8:	b10a      	cbz	r2, 800c0ae <__lshift+0x8e>
 800c0aa:	f10b 0502 	add.w	r5, fp, #2
 800c0ae:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800c0b0:	3d01      	subs	r5, #1
 800c0b2:	6862      	ldr	r2, [r4, #4]
 800c0b4:	6105      	str	r5, [r0, #16]
 800c0b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0ba:	6021      	str	r1, [r4, #0]
 800c0bc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c4:	f851 2b04 	ldr.w	r2, [r1], #4
 800c0c8:	458c      	cmp	ip, r1
 800c0ca:	f843 2b04 	str.w	r2, [r3], #4
 800c0ce:	d9ee      	bls.n	800c0ae <__lshift+0x8e>
 800c0d0:	f851 2b04 	ldr.w	r2, [r1], #4
 800c0d4:	458c      	cmp	ip, r1
 800c0d6:	f843 2b04 	str.w	r2, [r3], #4
 800c0da:	d8f3      	bhi.n	800c0c4 <__lshift+0xa4>
 800c0dc:	e7e7      	b.n	800c0ae <__lshift+0x8e>
 800c0de:	bf00      	nop

0800c0e0 <__mcmp>:
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	690a      	ldr	r2, [r1, #16]
 800c0e4:	6900      	ldr	r0, [r0, #16]
 800c0e6:	b430      	push	{r4, r5}
 800c0e8:	1a80      	subs	r0, r0, r2
 800c0ea:	d110      	bne.n	800c10e <__mcmp+0x2e>
 800c0ec:	3204      	adds	r2, #4
 800c0ee:	f103 0514 	add.w	r5, r3, #20
 800c0f2:	0092      	lsls	r2, r2, #2
 800c0f4:	189b      	adds	r3, r3, r2
 800c0f6:	1889      	adds	r1, r1, r2
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	3104      	adds	r1, #4
 800c0fc:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800c100:	3b04      	subs	r3, #4
 800c102:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c106:	4294      	cmp	r4, r2
 800c108:	d103      	bne.n	800c112 <__mcmp+0x32>
 800c10a:	429d      	cmp	r5, r3
 800c10c:	d3f6      	bcc.n	800c0fc <__mcmp+0x1c>
 800c10e:	bc30      	pop	{r4, r5}
 800c110:	4770      	bx	lr
 800c112:	bf38      	it	cc
 800c114:	f04f 30ff 	movcc.w	r0, #4294967295
 800c118:	d3f9      	bcc.n	800c10e <__mcmp+0x2e>
 800c11a:	2001      	movs	r0, #1
 800c11c:	e7f7      	b.n	800c10e <__mcmp+0x2e>
 800c11e:	bf00      	nop

0800c120 <__mdiff>:
 800c120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	460c      	mov	r4, r1
 800c126:	4607      	mov	r7, r0
 800c128:	4611      	mov	r1, r2
 800c12a:	4620      	mov	r0, r4
 800c12c:	4615      	mov	r5, r2
 800c12e:	f7ff ffd7 	bl	800c0e0 <__mcmp>
 800c132:	2800      	cmp	r0, #0
 800c134:	4606      	mov	r6, r0
 800c136:	d05b      	beq.n	800c1f0 <__mdiff+0xd0>
 800c138:	db55      	blt.n	800c1e6 <__mdiff+0xc6>
 800c13a:	2600      	movs	r6, #0
 800c13c:	6861      	ldr	r1, [r4, #4]
 800c13e:	4638      	mov	r0, r7
 800c140:	f7ff fd74 	bl	800bc2c <_Balloc>
 800c144:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800c148:	692b      	ldr	r3, [r5, #16]
 800c14a:	f104 0c14 	add.w	ip, r4, #20
 800c14e:	f105 0914 	add.w	r9, r5, #20
 800c152:	2700      	movs	r7, #0
 800c154:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800c158:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800c15c:	3414      	adds	r4, #20
 800c15e:	3514      	adds	r5, #20
 800c160:	f100 0a14 	add.w	sl, r0, #20
 800c164:	60c6      	str	r6, [r0, #12]
 800c166:	f85c 6b04 	ldr.w	r6, [ip], #4
 800c16a:	4653      	mov	r3, sl
 800c16c:	f859 ab04 	ldr.w	sl, [r9], #4
 800c170:	4662      	mov	r2, ip
 800c172:	b2b1      	uxth	r1, r6
 800c174:	19c9      	adds	r1, r1, r7
 800c176:	fa1f fb8a 	uxth.w	fp, sl
 800c17a:	ebcb 0101 	rsb	r1, fp, r1
 800c17e:	ea4f 471a 	mov.w	r7, sl, lsr #16
 800c182:	ebc7 4716 	rsb	r7, r7, r6, lsr #16
 800c186:	eb07 4721 	add.w	r7, r7, r1, asr #16
 800c18a:	b289      	uxth	r1, r1
 800c18c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800c190:	143f      	asrs	r7, r7, #16
 800c192:	454d      	cmp	r5, r9
 800c194:	f843 1b04 	str.w	r1, [r3], #4
 800c198:	469a      	mov	sl, r3
 800c19a:	d8e4      	bhi.n	800c166 <__mdiff+0x46>
 800c19c:	4564      	cmp	r4, ip
 800c19e:	461e      	mov	r6, r3
 800c1a0:	d915      	bls.n	800c1ce <__mdiff+0xae>
 800c1a2:	f852 5b04 	ldr.w	r5, [r2], #4
 800c1a6:	b2a9      	uxth	r1, r5
 800c1a8:	0c2d      	lsrs	r5, r5, #16
 800c1aa:	19cf      	adds	r7, r1, r7
 800c1ac:	eb05 4527 	add.w	r5, r5, r7, asr #16
 800c1b0:	b2bf      	uxth	r7, r7
 800c1b2:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800c1b6:	142f      	asrs	r7, r5, #16
 800c1b8:	4294      	cmp	r4, r2
 800c1ba:	f843 1b04 	str.w	r1, [r3], #4
 800c1be:	d8f0      	bhi.n	800c1a2 <__mdiff+0x82>
 800c1c0:	ea6f 030c 	mvn.w	r3, ip
 800c1c4:	191b      	adds	r3, r3, r4
 800c1c6:	f023 0303 	bic.w	r3, r3, #3
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	18f3      	adds	r3, r6, r3
 800c1ce:	b931      	cbnz	r1, 800c1de <__mdiff+0xbe>
 800c1d0:	3b04      	subs	r3, #4
 800c1d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c1d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d0f9      	beq.n	800c1d2 <__mdiff+0xb2>
 800c1de:	f8c0 8010 	str.w	r8, [r0, #16]
 800c1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e6:	4623      	mov	r3, r4
 800c1e8:	2601      	movs	r6, #1
 800c1ea:	462c      	mov	r4, r5
 800c1ec:	461d      	mov	r5, r3
 800c1ee:	e7a5      	b.n	800c13c <__mdiff+0x1c>
 800c1f0:	4638      	mov	r0, r7
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	f7ff fd1a 	bl	800bc2c <_Balloc>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	6146      	str	r6, [r0, #20]
 800c1fc:	6103      	str	r3, [r0, #16]
 800c1fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c202:	bf00      	nop

0800c204 <__ulp>:
 800c204:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c208:	0d1b      	lsrs	r3, r3, #20
 800c20a:	051b      	lsls	r3, r3, #20
 800c20c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c210:	2b00      	cmp	r3, #0
 800c212:	dd02      	ble.n	800c21a <__ulp+0x16>
 800c214:	4619      	mov	r1, r3
 800c216:	2000      	movs	r0, #0
 800c218:	4770      	bx	lr
 800c21a:	425b      	negs	r3, r3
 800c21c:	2100      	movs	r1, #0
 800c21e:	151b      	asrs	r3, r3, #20
 800c220:	2b13      	cmp	r3, #19
 800c222:	dd0b      	ble.n	800c23c <__ulp+0x38>
 800c224:	2b32      	cmp	r3, #50	; 0x32
 800c226:	dd02      	ble.n	800c22e <__ulp+0x2a>
 800c228:	2301      	movs	r3, #1
 800c22a:	4618      	mov	r0, r3
 800c22c:	4770      	bx	lr
 800c22e:	2201      	movs	r2, #1
 800c230:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800c234:	fa12 f303 	lsls.w	r3, r2, r3
 800c238:	4618      	mov	r0, r3
 800c23a:	4770      	bx	lr
 800c23c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c240:	2000      	movs	r0, #0
 800c242:	fa52 f103 	asrs.w	r1, r2, r3
 800c246:	4770      	bx	lr

0800c248 <__b2d>:
 800c248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24c:	f100 0614 	add.w	r6, r0, #20
 800c250:	6904      	ldr	r4, [r0, #16]
 800c252:	460f      	mov	r7, r1
 800c254:	3404      	adds	r4, #4
 800c256:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c25a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800c25e:	46a0      	mov	r8, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f7ff fd9f 	bl	800bda4 <__hi0bits>
 800c266:	280a      	cmp	r0, #10
 800c268:	f1c0 0320 	rsb	r3, r0, #32
 800c26c:	603b      	str	r3, [r7, #0]
 800c26e:	dc15      	bgt.n	800c29c <__b2d+0x54>
 800c270:	f1c0 010b 	rsb	r1, r0, #11
 800c274:	fa35 f701 	lsrs.w	r7, r5, r1
 800c278:	42a6      	cmp	r6, r4
 800c27a:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 800c27e:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 800c282:	d232      	bcs.n	800c2ea <__b2d+0xa2>
 800c284:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800c288:	fa34 f101 	lsrs.w	r1, r4, r1
 800c28c:	3015      	adds	r0, #21
 800c28e:	4085      	lsls	r5, r0
 800c290:	ea41 0205 	orr.w	r2, r1, r5
 800c294:	4610      	mov	r0, r2
 800c296:	4619      	mov	r1, r3
 800c298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29c:	2100      	movs	r1, #0
 800c29e:	42a6      	cmp	r6, r4
 800c2a0:	d202      	bcs.n	800c2a8 <__b2d+0x60>
 800c2a2:	f858 1c04 	ldr.w	r1, [r8, #-4]
 800c2a6:	3c04      	subs	r4, #4
 800c2a8:	f1b0 070b 	subs.w	r7, r0, #11
 800c2ac:	bf02      	ittt	eq
 800c2ae:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 800c2b2:	460a      	moveq	r2, r1
 800c2b4:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 800c2b8:	d0ec      	beq.n	800c294 <__b2d+0x4c>
 800c2ba:	40bd      	lsls	r5, r7
 800c2bc:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800c2c0:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 800c2c4:	42b4      	cmp	r4, r6
 800c2c6:	fa21 fc00 	lsr.w	ip, r1, r0
 800c2ca:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 800c2ce:	ea45 030c 	orr.w	r3, r5, ip
 800c2d2:	d90c      	bls.n	800c2ee <__b2d+0xa6>
 800c2d4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800c2d8:	fa34 f000 	lsrs.w	r0, r4, r0
 800c2dc:	40b9      	lsls	r1, r7
 800c2de:	ea40 0201 	orr.w	r2, r0, r1
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	e7ce      	b.n	800c28c <__b2d+0x44>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e7f4      	b.n	800c2dc <__b2d+0x94>
 800c2f2:	bf00      	nop

0800c2f4 <__d2b>:
 800c2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	2101      	movs	r1, #1
 800c2fc:	461d      	mov	r5, r3
 800c2fe:	4614      	mov	r4, r2
 800c300:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c302:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c304:	f7ff fc92 	bl	800bc2c <_Balloc>
 800c308:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800c30c:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800c310:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	4680      	mov	r8, r0
 800c318:	f1b9 0f00 	cmp.w	r9, #0
 800c31c:	d002      	beq.n	800c324 <__d2b+0x30>
 800c31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	2c00      	cmp	r4, #0
 800c326:	d026      	beq.n	800c376 <__d2b+0x82>
 800c328:	a802      	add	r0, sp, #8
 800c32a:	f840 4d08 	str.w	r4, [r0, #-8]!
 800c32e:	4668      	mov	r0, sp
 800c330:	f7ff fd56 	bl	800bde0 <__lo0bits>
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	2800      	cmp	r0, #0
 800c338:	d135      	bne.n	800c3a6 <__d2b+0xb2>
 800c33a:	9a00      	ldr	r2, [sp, #0]
 800c33c:	f8c8 2014 	str.w	r2, [r8, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	bf0c      	ite	eq
 800c344:	2401      	moveq	r4, #1
 800c346:	2402      	movne	r4, #2
 800c348:	f8c8 3018 	str.w	r3, [r8, #24]
 800c34c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c350:	f1b9 0f00 	cmp.w	r9, #0
 800c354:	d11d      	bne.n	800c392 <__d2b+0x9e>
 800c356:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800c35a:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 800c35e:	3802      	subs	r0, #2
 800c360:	6038      	str	r0, [r7, #0]
 800c362:	6918      	ldr	r0, [r3, #16]
 800c364:	f7ff fd1e 	bl	800bda4 <__hi0bits>
 800c368:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 800c36c:	6034      	str	r4, [r6, #0]
 800c36e:	4640      	mov	r0, r8
 800c370:	b003      	add	sp, #12
 800c372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c376:	a801      	add	r0, sp, #4
 800c378:	f7ff fd32 	bl	800bde0 <__lo0bits>
 800c37c:	2301      	movs	r3, #1
 800c37e:	461c      	mov	r4, r3
 800c380:	f8c8 3010 	str.w	r3, [r8, #16]
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	f8c8 3014 	str.w	r3, [r8, #20]
 800c38a:	3020      	adds	r0, #32
 800c38c:	f1b9 0f00 	cmp.w	r9, #0
 800c390:	d0e1      	beq.n	800c356 <__d2b+0x62>
 800c392:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 800c396:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 800c39a:	f1a9 0903 	sub.w	r9, r9, #3
 800c39e:	4448      	add	r0, r9
 800c3a0:	6038      	str	r0, [r7, #0]
 800c3a2:	6033      	str	r3, [r6, #0]
 800c3a4:	e7e3      	b.n	800c36e <__d2b+0x7a>
 800c3a6:	f1c0 0220 	rsb	r2, r0, #32
 800c3aa:	9900      	ldr	r1, [sp, #0]
 800c3ac:	fa13 f202 	lsls.w	r2, r3, r2
 800c3b0:	40c3      	lsrs	r3, r0
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	f8c8 2014 	str.w	r2, [r8, #20]
 800c3ba:	e7c1      	b.n	800c340 <__d2b+0x4c>

0800c3bc <__ratio>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	4669      	mov	r1, sp
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	f7ff ff3e 	bl	800c248 <__b2d>
 800c3cc:	460f      	mov	r7, r1
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	a901      	add	r1, sp, #4
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f7ff ff38 	bl	800c248 <__b2d>
 800c3d8:	46b9      	mov	r9, r7
 800c3da:	46b0      	mov	r8, r6
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4602      	mov	r2, r0
 800c3e0:	6929      	ldr	r1, [r5, #16]
 800c3e2:	469b      	mov	fp, r3
 800c3e4:	6920      	ldr	r0, [r4, #16]
 800c3e6:	4692      	mov	sl, r2
 800c3e8:	9c00      	ldr	r4, [sp, #0]
 800c3ea:	1a09      	subs	r1, r1, r0
 800c3ec:	9801      	ldr	r0, [sp, #4]
 800c3ee:	1a20      	subs	r0, r4, r0
 800c3f0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	bfc9      	itett	gt
 800c3f8:	eb07 5901 	addgt.w	r9, r7, r1, lsl #20
 800c3fc:	eba3 5b01 	suble.w	fp, r3, r1, lsl #20
 800c400:	4636      	movgt	r6, r6
 800c402:	464f      	movgt	r7, r9
 800c404:	bfdc      	itt	le
 800c406:	4612      	movle	r2, r2
 800c408:	465b      	movle	r3, fp
 800c40a:	4630      	mov	r0, r6
 800c40c:	4639      	mov	r1, r7
 800c40e:	f001 fb1b 	bl	800da48 <__aeabi_ddiv>
 800c412:	b003      	add	sp, #12
 800c414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c418 <_mprec_log10>:
 800c418:	b510      	push	{r4, lr}
 800c41a:	4604      	mov	r4, r0
 800c41c:	2100      	movs	r1, #0
 800c41e:	2000      	movs	r0, #0
 800c420:	2c17      	cmp	r4, #23
 800c422:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c426:	dd08      	ble.n	800c43a <_mprec_log10+0x22>
 800c428:	2300      	movs	r3, #0
 800c42a:	2200      	movs	r2, #0
 800c42c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c430:	f001 f9e0 	bl	800d7f4 <__aeabi_dmul>
 800c434:	3c01      	subs	r4, #1
 800c436:	d1f7      	bne.n	800c428 <_mprec_log10+0x10>
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	4b03      	ldr	r3, [pc, #12]	; (800c448 <_mprec_log10+0x30>)
 800c43c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c440:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800c444:	bd10      	pop	{r4, pc}
 800c446:	bf00      	nop
 800c448:	08018578 	.word	0x08018578

0800c44c <__copybits>:
 800c44c:	b470      	push	{r4, r5, r6}
 800c44e:	3901      	subs	r1, #1
 800c450:	6916      	ldr	r6, [r2, #16]
 800c452:	f102 0314 	add.w	r3, r2, #20
 800c456:	1149      	asrs	r1, r1, #5
 800c458:	3101      	adds	r1, #1
 800c45a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c45e:	3614      	adds	r6, #20
 800c460:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c464:	42b3      	cmp	r3, r6
 800c466:	d20c      	bcs.n	800c482 <__copybits+0x36>
 800c468:	4604      	mov	r4, r0
 800c46a:	f853 5b04 	ldr.w	r5, [r3], #4
 800c46e:	429e      	cmp	r6, r3
 800c470:	f844 5b04 	str.w	r5, [r4], #4
 800c474:	d8f9      	bhi.n	800c46a <__copybits+0x1e>
 800c476:	1ab3      	subs	r3, r6, r2
 800c478:	3b15      	subs	r3, #21
 800c47a:	f023 0303 	bic.w	r3, r3, #3
 800c47e:	3304      	adds	r3, #4
 800c480:	18c0      	adds	r0, r0, r3
 800c482:	4281      	cmp	r1, r0
 800c484:	d904      	bls.n	800c490 <__copybits+0x44>
 800c486:	2300      	movs	r3, #0
 800c488:	f840 3b04 	str.w	r3, [r0], #4
 800c48c:	4281      	cmp	r1, r0
 800c48e:	d8fb      	bhi.n	800c488 <__copybits+0x3c>
 800c490:	bc70      	pop	{r4, r5, r6}
 800c492:	4770      	bx	lr

0800c494 <__any_on>:
 800c494:	6902      	ldr	r2, [r0, #16]
 800c496:	114b      	asrs	r3, r1, #5
 800c498:	b410      	push	{r4}
 800c49a:	429a      	cmp	r2, r3
 800c49c:	db01      	blt.n	800c4a2 <__any_on+0xe>
 800c49e:	461a      	mov	r2, r3
 800c4a0:	dc18      	bgt.n	800c4d4 <__any_on+0x40>
 800c4a2:	3204      	adds	r2, #4
 800c4a4:	f100 0114 	add.w	r1, r0, #20
 800c4a8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800c4ac:	1d1c      	adds	r4, r3, #4
 800c4ae:	42a1      	cmp	r1, r4
 800c4b0:	d21d      	bcs.n	800c4ee <__any_on+0x5a>
 800c4b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c4b6:	b952      	cbnz	r2, 800c4ce <__any_on+0x3a>
 800c4b8:	1a59      	subs	r1, r3, r1
 800c4ba:	3103      	adds	r1, #3
 800c4bc:	f021 0103 	bic.w	r1, r1, #3
 800c4c0:	1a59      	subs	r1, r3, r1
 800c4c2:	428b      	cmp	r3, r1
 800c4c4:	d013      	beq.n	800c4ee <__any_on+0x5a>
 800c4c6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c4ca:	2a00      	cmp	r2, #0
 800c4cc:	d0f9      	beq.n	800c4c2 <__any_on+0x2e>
 800c4ce:	2001      	movs	r0, #1
 800c4d0:	bc10      	pop	{r4}
 800c4d2:	4770      	bx	lr
 800c4d4:	f011 011f 	ands.w	r1, r1, #31
 800c4d8:	d0e3      	beq.n	800c4a2 <__any_on+0xe>
 800c4da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	fa33 f401 	lsrs.w	r4, r3, r1
 800c4e4:	fa14 f101 	lsls.w	r1, r4, r1
 800c4e8:	4299      	cmp	r1, r3
 800c4ea:	d1f0      	bne.n	800c4ce <__any_on+0x3a>
 800c4ec:	e7d9      	b.n	800c4a2 <__any_on+0xe>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	e7ee      	b.n	800c4d0 <__any_on+0x3c>
 800c4f2:	bf00      	nop

0800c4f4 <__fpclassifyd>:
 800c4f4:	ea50 0201 	orrs.w	r2, r0, r1
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	b410      	push	{r4}
 800c4fc:	d102      	bne.n	800c504 <__fpclassifyd+0x10>
 800c4fe:	2002      	movs	r0, #2
 800c500:	bc10      	pop	{r4}
 800c502:	4770      	bx	lr
 800c504:	f1d0 0001 	rsbs	r0, r0, #1
 800c508:	bf38      	it	cc
 800c50a:	2000      	movcc	r0, #0
 800c50c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800c510:	bf14      	ite	ne
 800c512:	2200      	movne	r2, #0
 800c514:	f000 0201 	andeq.w	r2, r0, #1
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d1f0      	bne.n	800c4fe <__fpclassifyd+0xa>
 800c51c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c520:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 800c524:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800c528:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c52c:	4291      	cmp	r1, r2
 800c52e:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 800c532:	bf8c      	ite	hi
 800c534:	2100      	movhi	r1, #0
 800c536:	2101      	movls	r1, #1
 800c538:	4294      	cmp	r4, r2
 800c53a:	bf8c      	ite	hi
 800c53c:	460a      	movhi	r2, r1
 800c53e:	f041 0201 	orrls.w	r2, r1, #1
 800c542:	b10a      	cbz	r2, 800c548 <__fpclassifyd+0x54>
 800c544:	2004      	movs	r0, #4
 800c546:	e7db      	b.n	800c500 <__fpclassifyd+0xc>
 800c548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c54c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c550:	bf2c      	ite	cs
 800c552:	2200      	movcs	r2, #0
 800c554:	2201      	movcc	r2, #1
 800c556:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c55a:	bf38      	it	cc
 800c55c:	f042 0201 	orrcc.w	r2, r2, #1
 800c560:	b10a      	cbz	r2, 800c566 <__fpclassifyd+0x72>
 800c562:	2003      	movs	r0, #3
 800c564:	e7cc      	b.n	800c500 <__fpclassifyd+0xc>
 800c566:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800c56a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800c56e:	bf14      	ite	ne
 800c570:	2100      	movne	r1, #0
 800c572:	2101      	moveq	r1, #1
 800c574:	4293      	cmp	r3, r2
 800c576:	bf14      	ite	ne
 800c578:	460b      	movne	r3, r1
 800c57a:	f041 0301 	orreq.w	r3, r1, #1
 800c57e:	4018      	ands	r0, r3
 800c580:	e7be      	b.n	800c500 <__fpclassifyd+0xc>
 800c582:	bf00      	nop

0800c584 <__sread>:
 800c584:	b510      	push	{r4, lr}
 800c586:	460c      	mov	r4, r1
 800c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58c:	f009 fcae 	bl	8015eec <_read_r>
 800c590:	2800      	cmp	r0, #0
 800c592:	bfab      	itete	ge
 800c594:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800c596:	89a3      	ldrhlt	r3, [r4, #12]
 800c598:	181b      	addge	r3, r3, r0
 800c59a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c59e:	bfac      	ite	ge
 800c5a0:	6523      	strge	r3, [r4, #80]	; 0x50
 800c5a2:	81a3      	strhlt	r3, [r4, #12]
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	bf00      	nop

0800c5a8 <__seofread>:
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	4770      	bx	lr

0800c5ac <__swrite>:
 800c5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b0:	461e      	mov	r6, r3
 800c5b2:	898b      	ldrh	r3, [r1, #12]
 800c5b4:	4617      	mov	r7, r2
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	05da      	lsls	r2, r3, #23
 800c5bc:	d506      	bpl.n	800c5cc <__swrite+0x20>
 800c5be:	2302      	movs	r3, #2
 800c5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f009 fcb1 	bl	8015f2c <_lseek_r>
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	463a      	mov	r2, r7
 800c5da:	4633      	mov	r3, r6
 800c5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e0:	f009 bc94 	b.w	8015f0c <_write_r>

0800c5e4 <__sseek>:
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ec:	f009 fc9e 	bl	8015f2c <_lseek_r>
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	1c41      	adds	r1, r0, #1
 800c5f4:	bf15      	itete	ne
 800c5f6:	6520      	strne	r0, [r4, #80]	; 0x50
 800c5f8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5fc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c600:	81a3      	strheq	r3, [r4, #12]
 800c602:	bf18      	it	ne
 800c604:	81a3      	strhne	r3, [r4, #12]
 800c606:	bd10      	pop	{r4, pc}

0800c608 <__sclose>:
 800c608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60c:	f009 bca2 	b.w	8015f54 <_close_r>

0800c610 <__ssprint_r>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	b085      	sub	sp, #20
 800c616:	6894      	ldr	r4, [r2, #8]
 800c618:	4691      	mov	r9, r2
 800c61a:	9003      	str	r0, [sp, #12]
 800c61c:	460d      	mov	r5, r1
 800c61e:	6817      	ldr	r7, [r2, #0]
 800c620:	2c00      	cmp	r4, #0
 800c622:	d07a      	beq.n	800c71a <__ssprint_r+0x10a>
 800c624:	f04f 0a00 	mov.w	sl, #0
 800c628:	6808      	ldr	r0, [r1, #0]
 800c62a:	688b      	ldr	r3, [r1, #8]
 800c62c:	4654      	mov	r4, sl
 800c62e:	2c00      	cmp	r4, #0
 800c630:	d054      	beq.n	800c6dc <__ssprint_r+0xcc>
 800c632:	429c      	cmp	r4, r3
 800c634:	461e      	mov	r6, r3
 800c636:	4698      	mov	r8, r3
 800c638:	bf3c      	itt	cc
 800c63a:	4626      	movcc	r6, r4
 800c63c:	46a0      	movcc	r8, r4
 800c63e:	d33d      	bcc.n	800c6bc <__ssprint_r+0xac>
 800c640:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 800c644:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 800c648:	d038      	beq.n	800c6bc <__ssprint_r+0xac>
 800c64a:	696b      	ldr	r3, [r5, #20]
 800c64c:	1c62      	adds	r2, r4, #1
 800c64e:	6929      	ldr	r1, [r5, #16]
 800c650:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800c654:	1a43      	subs	r3, r0, r1
 800c656:	18d0      	adds	r0, r2, r3
 800c658:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 800c65c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800c660:	4583      	cmp	fp, r0
 800c662:	465a      	mov	r2, fp
 800c664:	bf38      	it	cc
 800c666:	4683      	movcc	fp, r0
 800c668:	9803      	ldr	r0, [sp, #12]
 800c66a:	bf38      	it	cc
 800c66c:	465a      	movcc	r2, fp
 800c66e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 800c672:	d038      	beq.n	800c6e6 <__ssprint_r+0xd6>
 800c674:	4611      	mov	r1, r2
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	f7fa fcbe 	bl	8006ff8 <_malloc_r>
 800c67c:	9b01      	ldr	r3, [sp, #4]
 800c67e:	4684      	mov	ip, r0
 800c680:	2800      	cmp	r0, #0
 800c682:	d03b      	beq.n	800c6fc <__ssprint_r+0xec>
 800c684:	6929      	ldr	r1, [r5, #16]
 800c686:	461a      	mov	r2, r3
 800c688:	9301      	str	r3, [sp, #4]
 800c68a:	f8cd c008 	str.w	ip, [sp, #8]
 800c68e:	f7fa ffd9 	bl	8007644 <memcpy>
 800c692:	89aa      	ldrh	r2, [r5, #12]
 800c694:	9b01      	ldr	r3, [sp, #4]
 800c696:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c69a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c69e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6a2:	81aa      	strh	r2, [r5, #12]
 800c6a4:	4626      	mov	r6, r4
 800c6a6:	46a0      	mov	r8, r4
 800c6a8:	eb0c 0003 	add.w	r0, ip, r3
 800c6ac:	f8c5 c010 	str.w	ip, [r5, #16]
 800c6b0:	ebc3 030b 	rsb	r3, r3, fp
 800c6b4:	6028      	str	r0, [r5, #0]
 800c6b6:	f8c5 b014 	str.w	fp, [r5, #20]
 800c6ba:	60ab      	str	r3, [r5, #8]
 800c6bc:	4642      	mov	r2, r8
 800c6be:	4651      	mov	r1, sl
 800c6c0:	f7fb f802 	bl	80076c8 <memmove>
 800c6c4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c6c8:	68ab      	ldr	r3, [r5, #8]
 800c6ca:	6828      	ldr	r0, [r5, #0]
 800c6cc:	1b14      	subs	r4, r2, r4
 800c6ce:	1b9b      	subs	r3, r3, r6
 800c6d0:	60ab      	str	r3, [r5, #8]
 800c6d2:	4440      	add	r0, r8
 800c6d4:	6028      	str	r0, [r5, #0]
 800c6d6:	f8c9 4008 	str.w	r4, [r9, #8]
 800c6da:	b1f4      	cbz	r4, 800c71a <__ssprint_r+0x10a>
 800c6dc:	f8d7 a000 	ldr.w	sl, [r7]
 800c6e0:	687c      	ldr	r4, [r7, #4]
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	e7a3      	b.n	800c62e <__ssprint_r+0x1e>
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	f7fb f90a 	bl	8007900 <_realloc_r>
 800c6ec:	9b01      	ldr	r3, [sp, #4]
 800c6ee:	4684      	mov	ip, r0
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d1d7      	bne.n	800c6a4 <__ssprint_r+0x94>
 800c6f4:	6929      	ldr	r1, [r5, #16]
 800c6f6:	9803      	ldr	r0, [sp, #12]
 800c6f8:	f7ff f8d0 	bl	800b89c <_free_r>
 800c6fc:	9a03      	ldr	r2, [sp, #12]
 800c6fe:	230c      	movs	r3, #12
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	6013      	str	r3, [r2, #0]
 800c706:	2300      	movs	r3, #0
 800c708:	89aa      	ldrh	r2, [r5, #12]
 800c70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c70e:	81aa      	strh	r2, [r5, #12]
 800c710:	f8c9 3008 	str.w	r3, [r9, #8]
 800c714:	f8c9 3004 	str.w	r3, [r9, #4]
 800c718:	e002      	b.n	800c720 <__ssprint_r+0x110>
 800c71a:	4620      	mov	r0, r4
 800c71c:	f8c9 4004 	str.w	r4, [r9, #4]
 800c720:	b005      	add	sp, #20
 800c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c726:	bf00      	nop

0800c728 <_svfiprintf_r>:
 800c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72c:	b0af      	sub	sp, #188	; 0xbc
 800c72e:	468a      	mov	sl, r1
 800c730:	9307      	str	r3, [sp, #28]
 800c732:	898b      	ldrh	r3, [r1, #12]
 800c734:	9003      	str	r0, [sp, #12]
 800c736:	061b      	lsls	r3, r3, #24
 800c738:	d503      	bpl.n	800c742 <_svfiprintf_r+0x1a>
 800c73a:	690b      	ldr	r3, [r1, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8435 	beq.w	800cfac <_svfiprintf_r+0x884>
 800c742:	4617      	mov	r7, r2
 800c744:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 800c748:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800c74c:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 800c750:	2300      	movs	r3, #0
 800c752:	9102      	str	r1, [sp, #8]
 800c754:	ac10      	add	r4, sp, #64	; 0x40
 800c756:	ebc1 0108 	rsb	r1, r1, r8
 800c75a:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 800c75e:	930d      	str	r3, [sp, #52]	; 0x34
 800c760:	9306      	str	r3, [sp, #24]
 800c762:	910f      	str	r1, [sp, #60]	; 0x3c
 800c764:	900e      	str	r0, [sp, #56]	; 0x38
 800c766:	942a      	str	r4, [sp, #168]	; 0xa8
 800c768:	932c      	str	r3, [sp, #176]	; 0xb0
 800c76a:	932b      	str	r3, [sp, #172]	; 0xac
 800c76c:	783b      	ldrb	r3, [r7, #0]
 800c76e:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800c772:	bf18      	it	ne
 800c774:	2201      	movne	r2, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	bf0c      	ite	eq
 800c77a:	2300      	moveq	r3, #0
 800c77c:	f002 0301 	andne.w	r3, r2, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 82ef 	beq.w	800cd64 <_svfiprintf_r+0x63c>
 800c786:	463a      	mov	r2, r7
 800c788:	463d      	mov	r5, r7
 800c78a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c78e:	3501      	adds	r5, #1
 800c790:	1c19      	adds	r1, r3, #0
 800c792:	bf18      	it	ne
 800c794:	2101      	movne	r1, #1
 800c796:	2b25      	cmp	r3, #37	; 0x25
 800c798:	bf0c      	ite	eq
 800c79a:	2300      	moveq	r3, #0
 800c79c:	f001 0301 	andne.w	r3, r1, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1f2      	bne.n	800c78a <_svfiprintf_r+0x62>
 800c7a4:	1bee      	subs	r6, r5, r7
 800c7a6:	d00e      	beq.n	800c7c6 <_svfiprintf_r+0x9e>
 800c7a8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c7aa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	6027      	str	r7, [r4, #0]
 800c7b0:	2b07      	cmp	r3, #7
 800c7b2:	4432      	add	r2, r6
 800c7b4:	6066      	str	r6, [r4, #4]
 800c7b6:	932b      	str	r3, [sp, #172]	; 0xac
 800c7b8:	922c      	str	r2, [sp, #176]	; 0xb0
 800c7ba:	f300 8330 	bgt.w	800ce1e <_svfiprintf_r+0x6f6>
 800c7be:	3408      	adds	r4, #8
 800c7c0:	9b06      	ldr	r3, [sp, #24]
 800c7c2:	199b      	adds	r3, r3, r6
 800c7c4:	9306      	str	r3, [sp, #24]
 800c7c6:	782b      	ldrb	r3, [r5, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 82cd 	beq.w	800cd68 <_svfiprintf_r+0x640>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	1c6f      	adds	r7, r5, #1
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	f04f 35ff 	mov.w	r5, #4294967295
 800c7d8:	469b      	mov	fp, r3
 800c7da:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800c7de:	9308      	str	r3, [sp, #32]
 800c7e0:	f817 3b01 	ldrb.w	r3, [r7], #1
 800c7e4:	f1a3 0120 	sub.w	r1, r3, #32
 800c7e8:	2958      	cmp	r1, #88	; 0x58
 800c7ea:	f200 81a1 	bhi.w	800cb30 <_svfiprintf_r+0x408>
 800c7ee:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c7f2:	019b      	.short	0x019b
 800c7f4:	019f019f 	.word	0x019f019f
 800c7f8:	019f01fe 	.word	0x019f01fe
 800c7fc:	019f019f 	.word	0x019f019f
 800c800:	019f019f 	.word	0x019f019f
 800c804:	00f0019f 	.word	0x00f0019f
 800c808:	019f01fc 	.word	0x019f01fc
 800c80c:	01e100fc 	.word	0x01e100fc
 800c810:	01de019f 	.word	0x01de019f
 800c814:	01cd01cd 	.word	0x01cd01cd
 800c818:	01cd01cd 	.word	0x01cd01cd
 800c81c:	01cd01cd 	.word	0x01cd01cd
 800c820:	01cd01cd 	.word	0x01cd01cd
 800c824:	019f01cd 	.word	0x019f01cd
 800c828:	019f019f 	.word	0x019f019f
 800c82c:	019f019f 	.word	0x019f019f
 800c830:	019f019f 	.word	0x019f019f
 800c834:	019f019f 	.word	0x019f019f
 800c838:	005c019f 	.word	0x005c019f
 800c83c:	019f019f 	.word	0x019f019f
 800c840:	019f019f 	.word	0x019f019f
 800c844:	019f019f 	.word	0x019f019f
 800c848:	019f019f 	.word	0x019f019f
 800c84c:	019f019f 	.word	0x019f019f
 800c850:	019f009c 	.word	0x019f009c
 800c854:	019f019f 	.word	0x019f019f
 800c858:	019f019f 	.word	0x019f019f
 800c85c:	019f00dd 	.word	0x019f00dd
 800c860:	0152019f 	.word	0x0152019f
 800c864:	019f019f 	.word	0x019f019f
 800c868:	019f019f 	.word	0x019f019f
 800c86c:	019f019f 	.word	0x019f019f
 800c870:	019f019f 	.word	0x019f019f
 800c874:	019f019f 	.word	0x019f019f
 800c878:	005e0102 	.word	0x005e0102
 800c87c:	019f019f 	.word	0x019f019f
 800c880:	00ff019f 	.word	0x00ff019f
 800c884:	019f005e 	.word	0x019f005e
 800c888:	0059019f 	.word	0x0059019f
 800c88c:	0172019f 	.word	0x0172019f
 800c890:	0188009e 	.word	0x0188009e
 800c894:	019f0059 	.word	0x019f0059
 800c898:	019f01af 	.word	0x019f01af
 800c89c:	019f00df 	.word	0x019f00df
 800c8a0:	0183019f 	.word	0x0183019f
 800c8a4:	f04b 0b10 	orr.w	fp, fp, #16
 800c8a8:	e79a      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800c8aa:	f04b 0b10 	orr.w	fp, fp, #16
 800c8ae:	f01b 0f10 	tst.w	fp, #16
 800c8b2:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800c8b6:	9b07      	ldr	r3, [sp, #28]
 800c8b8:	d103      	bne.n	800c8c2 <_svfiprintf_r+0x19a>
 800c8ba:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800c8be:	f040 8339 	bne.w	800cf34 <_svfiprintf_r+0x80c>
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	9307      	str	r3, [sp, #28]
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	f2c0 833a 	blt.w	800cf42 <_svfiprintf_r+0x81a>
 800c8ce:	bf0c      	ite	eq
 800c8d0:	2100      	moveq	r1, #0
 800c8d2:	2101      	movne	r1, #1
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	2d00      	cmp	r5, #0
 800c8d8:	bfa8      	it	ge
 800c8da:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800c8de:	2d00      	cmp	r5, #0
 800c8e0:	bf18      	it	ne
 800c8e2:	f041 0101 	orrne.w	r1, r1, #1
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d13b      	bne.n	800c962 <_svfiprintf_r+0x23a>
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f040 8293 	bne.w	800ce16 <_svfiprintf_r+0x6ee>
 800c8f0:	f01b 0f01 	tst.w	fp, #1
 800c8f4:	bf04      	itt	eq
 800c8f6:	9305      	streq	r3, [sp, #20]
 800c8f8:	f8cd 8028 	streq.w	r8, [sp, #40]	; 0x28
 800c8fc:	d007      	beq.n	800c90e <_svfiprintf_r+0x1e6>
 800c8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c900:	9305      	str	r3, [sp, #20]
 800c902:	2330      	movs	r3, #48	; 0x30
 800c904:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 800c908:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800c90c:	930a      	str	r3, [sp, #40]	; 0x28
 800c90e:	9509      	str	r5, [sp, #36]	; 0x24
 800c910:	9805      	ldr	r0, [sp, #20]
 800c912:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c914:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 800c918:	4288      	cmp	r0, r1
 800c91a:	bfb8      	it	lt
 800c91c:	4608      	movlt	r0, r1
 800c91e:	9004      	str	r0, [sp, #16]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d078      	beq.n	800ca16 <_svfiprintf_r+0x2ee>
 800c924:	3001      	adds	r0, #1
 800c926:	9004      	str	r0, [sp, #16]
 800c928:	e075      	b.n	800ca16 <_svfiprintf_r+0x2ee>
 800c92a:	f04b 0b10 	orr.w	fp, fp, #16
 800c92e:	f01b 0310 	ands.w	r3, fp, #16
 800c932:	f000 82c9 	beq.w	800cec8 <_svfiprintf_r+0x7a0>
 800c936:	9b07      	ldr	r3, [sp, #28]
 800c938:	9807      	ldr	r0, [sp, #28]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	2300      	movs	r3, #0
 800c93e:	3004      	adds	r0, #4
 800c940:	9007      	str	r0, [sp, #28]
 800c942:	1ad1      	subs	r1, r2, r3
 800c944:	bf18      	it	ne
 800c946:	2101      	movne	r1, #1
 800c948:	2000      	movs	r0, #0
 800c94a:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 800c94e:	2d00      	cmp	r5, #0
 800c950:	bfa8      	it	ge
 800c952:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800c956:	2d00      	cmp	r5, #0
 800c958:	bf18      	it	ne
 800c95a:	f041 0101 	orrne.w	r1, r1, #1
 800c95e:	2900      	cmp	r1, #0
 800c960:	d0c3      	beq.n	800c8ea <_svfiprintf_r+0x1c2>
 800c962:	2b01      	cmp	r3, #1
 800c964:	f000 8285 	beq.w	800ce72 <_svfiprintf_r+0x74a>
 800c968:	2b02      	cmp	r3, #2
 800c96a:	bf18      	it	ne
 800c96c:	4643      	movne	r3, r8
 800c96e:	d101      	bne.n	800c974 <_svfiprintf_r+0x24c>
 800c970:	e298      	b.n	800cea4 <_svfiprintf_r+0x77c>
 800c972:	4603      	mov	r3, r0
 800c974:	f002 0107 	and.w	r1, r2, #7
 800c978:	1e58      	subs	r0, r3, #1
 800c97a:	3130      	adds	r1, #48	; 0x30
 800c97c:	08d2      	lsrs	r2, r2, #3
 800c97e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c982:	d1f6      	bne.n	800c972 <_svfiprintf_r+0x24a>
 800c984:	f01b 0f01 	tst.w	fp, #1
 800c988:	900a      	str	r0, [sp, #40]	; 0x28
 800c98a:	bf04      	itt	eq
 800c98c:	ebc0 0308 	rsbeq	r3, r0, r8
 800c990:	9305      	streq	r3, [sp, #20]
 800c992:	d0bc      	beq.n	800c90e <_svfiprintf_r+0x1e6>
 800c994:	2930      	cmp	r1, #48	; 0x30
 800c996:	f000 831b 	beq.w	800cfd0 <_svfiprintf_r+0x8a8>
 800c99a:	1e98      	subs	r0, r3, #2
 800c99c:	2230      	movs	r2, #48	; 0x30
 800c99e:	ebc0 0108 	rsb	r1, r0, r8
 800c9a2:	900a      	str	r0, [sp, #40]	; 0x28
 800c9a4:	9105      	str	r1, [sp, #20]
 800c9a6:	f803 2c02 	strb.w	r2, [r3, #-2]
 800c9aa:	e7b0      	b.n	800c90e <_svfiprintf_r+0x1e6>
 800c9ac:	f04b 0b10 	orr.w	fp, fp, #16
 800c9b0:	f01b 0f10 	tst.w	fp, #16
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	d103      	bne.n	800c9c0 <_svfiprintf_r+0x298>
 800c9b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800c9bc:	f040 82da 	bne.w	800cf74 <_svfiprintf_r+0x84c>
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	9807      	ldr	r0, [sp, #28]
 800c9c6:	3004      	adds	r0, #4
 800c9c8:	1c11      	adds	r1, r2, #0
 800c9ca:	9007      	str	r0, [sp, #28]
 800c9cc:	bf18      	it	ne
 800c9ce:	2101      	movne	r1, #1
 800c9d0:	e7ba      	b.n	800c948 <_svfiprintf_r+0x220>
 800c9d2:	9b07      	ldr	r3, [sp, #28]
 800c9d4:	9807      	ldr	r0, [sp, #28]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	1d03      	adds	r3, r0, #4
 800c9dc:	9908      	ldr	r1, [sp, #32]
 800c9de:	2900      	cmp	r1, #0
 800c9e0:	f280 8293 	bge.w	800cf0a <_svfiprintf_r+0x7e2>
 800c9e4:	4249      	negs	r1, r1
 800c9e6:	9307      	str	r3, [sp, #28]
 800c9e8:	9108      	str	r1, [sp, #32]
 800c9ea:	f04b 0b04 	orr.w	fp, fp, #4
 800c9ee:	e6f7      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800c9f0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800c9f4:	e6f4      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	2001      	movs	r0, #1
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	9004      	str	r0, [sp, #16]
 800c9fe:	1d19      	adds	r1, r3, #4
 800ca00:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	aa20      	add	r2, sp, #128	; 0x80
 800ca08:	9107      	str	r1, [sp, #28]
 800ca0a:	9005      	str	r0, [sp, #20]
 800ca0c:	920a      	str	r2, [sp, #40]	; 0x28
 800ca0e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800ca12:	2300      	movs	r3, #0
 800ca14:	9309      	str	r3, [sp, #36]	; 0x24
 800ca16:	f01b 0302 	ands.w	r3, fp, #2
 800ca1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca1c:	d002      	beq.n	800ca24 <_svfiprintf_r+0x2fc>
 800ca1e:	9b04      	ldr	r3, [sp, #16]
 800ca20:	3302      	adds	r3, #2
 800ca22:	9304      	str	r3, [sp, #16]
 800ca24:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800ca28:	930c      	str	r3, [sp, #48]	; 0x30
 800ca2a:	f040 80e3 	bne.w	800cbf4 <_svfiprintf_r+0x4cc>
 800ca2e:	9b08      	ldr	r3, [sp, #32]
 800ca30:	9804      	ldr	r0, [sp, #16]
 800ca32:	1a1d      	subs	r5, r3, r0
 800ca34:	2d00      	cmp	r5, #0
 800ca36:	f340 80dd 	ble.w	800cbf4 <_svfiprintf_r+0x4cc>
 800ca3a:	2d10      	cmp	r5, #16
 800ca3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ca3e:	f340 82c4 	ble.w	800cfca <_svfiprintf_r+0x8a2>
 800ca42:	f04f 0910 	mov.w	r9, #16
 800ca46:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ca48:	4ea4      	ldr	r6, [pc, #656]	; (800ccdc <_svfiprintf_r+0x5b4>)
 800ca4a:	e002      	b.n	800ca52 <_svfiprintf_r+0x32a>
 800ca4c:	3d10      	subs	r5, #16
 800ca4e:	2d10      	cmp	r5, #16
 800ca50:	dd16      	ble.n	800ca80 <_svfiprintf_r+0x358>
 800ca52:	3301      	adds	r3, #1
 800ca54:	3210      	adds	r2, #16
 800ca56:	e884 0240 	stmia.w	r4, {r6, r9}
 800ca5a:	3408      	adds	r4, #8
 800ca5c:	2b07      	cmp	r3, #7
 800ca5e:	932b      	str	r3, [sp, #172]	; 0xac
 800ca60:	922c      	str	r2, [sp, #176]	; 0xb0
 800ca62:	ddf3      	ble.n	800ca4c <_svfiprintf_r+0x324>
 800ca64:	9803      	ldr	r0, [sp, #12]
 800ca66:	4651      	mov	r1, sl
 800ca68:	4642      	mov	r2, r8
 800ca6a:	ac10      	add	r4, sp, #64	; 0x40
 800ca6c:	f7ff fdd0 	bl	800c610 <__ssprint_r>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f040 8180 	bne.w	800cd76 <_svfiprintf_r+0x64e>
 800ca76:	3d10      	subs	r5, #16
 800ca78:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ca7a:	2d10      	cmp	r5, #16
 800ca7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ca7e:	dce8      	bgt.n	800ca52 <_svfiprintf_r+0x32a>
 800ca80:	3301      	adds	r3, #1
 800ca82:	1952      	adds	r2, r2, r5
 800ca84:	2b07      	cmp	r3, #7
 800ca86:	6026      	str	r6, [r4, #0]
 800ca88:	6065      	str	r5, [r4, #4]
 800ca8a:	932b      	str	r3, [sp, #172]	; 0xac
 800ca8c:	922c      	str	r2, [sp, #176]	; 0xb0
 800ca8e:	f300 8226 	bgt.w	800cede <_svfiprintf_r+0x7b6>
 800ca92:	3408      	adds	r4, #8
 800ca94:	e0b0      	b.n	800cbf8 <_svfiprintf_r+0x4d0>
 800ca96:	4992      	ldr	r1, [pc, #584]	; (800cce0 <_svfiprintf_r+0x5b8>)
 800ca98:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800ca9c:	910d      	str	r1, [sp, #52]	; 0x34
 800ca9e:	f01b 0f10 	tst.w	fp, #16
 800caa2:	d103      	bne.n	800caac <_svfiprintf_r+0x384>
 800caa4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800caa8:	f040 825f 	bne.w	800cf6a <_svfiprintf_r+0x842>
 800caac:	9807      	ldr	r0, [sp, #28]
 800caae:	6802      	ldr	r2, [r0, #0]
 800cab0:	3004      	adds	r0, #4
 800cab2:	9007      	str	r0, [sp, #28]
 800cab4:	1c11      	adds	r1, r2, #0
 800cab6:	bf18      	it	ne
 800cab8:	2101      	movne	r1, #1
 800caba:	ea1b 0f01 	tst.w	fp, r1
 800cabe:	f000 8201 	beq.w	800cec4 <_svfiprintf_r+0x79c>
 800cac2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 800cac6:	f04b 0b02 	orr.w	fp, fp, #2
 800caca:	2330      	movs	r3, #48	; 0x30
 800cacc:	2101      	movs	r1, #1
 800cace:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800cad2:	2302      	movs	r3, #2
 800cad4:	e738      	b.n	800c948 <_svfiprintf_r+0x220>
 800cad6:	f01b 0f10 	tst.w	fp, #16
 800cada:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cade:	f040 823d 	bne.w	800cf5c <_svfiprintf_r+0x834>
 800cae2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cae6:	f000 8259 	beq.w	800cf9c <_svfiprintf_r+0x874>
 800caea:	9a07      	ldr	r2, [sp, #28]
 800caec:	9806      	ldr	r0, [sp, #24]
 800caee:	6813      	ldr	r3, [r2, #0]
 800caf0:	3204      	adds	r2, #4
 800caf2:	9207      	str	r2, [sp, #28]
 800caf4:	8018      	strh	r0, [r3, #0]
 800caf6:	e639      	b.n	800c76c <_svfiprintf_r+0x44>
 800caf8:	497a      	ldr	r1, [pc, #488]	; (800cce4 <_svfiprintf_r+0x5bc>)
 800cafa:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cafe:	910d      	str	r1, [sp, #52]	; 0x34
 800cb00:	e7cd      	b.n	800ca9e <_svfiprintf_r+0x376>
 800cb02:	9b07      	ldr	r3, [sp, #28]
 800cb04:	f04b 0b02 	orr.w	fp, fp, #2
 800cb08:	4876      	ldr	r0, [pc, #472]	; (800cce4 <_svfiprintf_r+0x5bc>)
 800cb0a:	1d19      	adds	r1, r3, #4
 800cb0c:	9107      	str	r1, [sp, #28]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	2178      	movs	r1, #120	; 0x78
 800cb12:	2330      	movs	r3, #48	; 0x30
 800cb14:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 800cb18:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	1c11      	adds	r1, r2, #0
 800cb20:	900d      	str	r0, [sp, #52]	; 0x34
 800cb22:	bf18      	it	ne
 800cb24:	2101      	movne	r1, #1
 800cb26:	e70f      	b.n	800c948 <_svfiprintf_r+0x220>
 800cb28:	2a00      	cmp	r2, #0
 800cb2a:	bf08      	it	eq
 800cb2c:	2220      	moveq	r2, #32
 800cb2e:	e657      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800cb30:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 8117 	beq.w	800cd68 <_svfiprintf_r+0x640>
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800cb40:	9004      	str	r0, [sp, #16]
 800cb42:	2300      	movs	r3, #0
 800cb44:	9005      	str	r0, [sp, #20]
 800cb46:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800cb4a:	ab20      	add	r3, sp, #128	; 0x80
 800cb4c:	930a      	str	r3, [sp, #40]	; 0x28
 800cb4e:	e760      	b.n	800ca12 <_svfiprintf_r+0x2ea>
 800cb50:	9b07      	ldr	r3, [sp, #28]
 800cb52:	2600      	movs	r6, #0
 800cb54:	f88d 60b7 	strb.w	r6, [sp, #183]	; 0xb7
 800cb58:	1d19      	adds	r1, r3, #4
 800cb5a:	9107      	str	r1, [sp, #28]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 823a 	beq.w	800cfda <_svfiprintf_r+0x8b2>
 800cb66:	2d00      	cmp	r5, #0
 800cb68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb6a:	f2c0 8206 	blt.w	800cf7a <_svfiprintf_r+0x852>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	462a      	mov	r2, r5
 800cb72:	f7fa fcf3 	bl	800755c <memchr>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	f000 8239 	beq.w	800cfee <_svfiprintf_r+0x8c6>
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7e:	9609      	str	r6, [sp, #36]	; 0x24
 800cb80:	1ac0      	subs	r0, r0, r3
 800cb82:	9005      	str	r0, [sp, #20]
 800cb84:	42a8      	cmp	r0, r5
 800cb86:	bfc8      	it	gt
 800cb88:	9505      	strgt	r5, [sp, #20]
 800cb8a:	e6c1      	b.n	800c910 <_svfiprintf_r+0x1e8>
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	2100      	movs	r1, #0
 800cb90:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800cb94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cb98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cb9c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800cba0:	4607      	mov	r7, r0
 800cba2:	2e09      	cmp	r6, #9
 800cba4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cba8:	d9f2      	bls.n	800cb90 <_svfiprintf_r+0x468>
 800cbaa:	9108      	str	r1, [sp, #32]
 800cbac:	e61a      	b.n	800c7e4 <_svfiprintf_r+0xbc>
 800cbae:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800cbb2:	e615      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800cbb4:	f817 3b01 	ldrb.w	r3, [r7], #1
 800cbb8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbba:	f000 819c 	beq.w	800cef6 <_svfiprintf_r+0x7ce>
 800cbbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cbc2:	2500      	movs	r5, #0
 800cbc4:	2909      	cmp	r1, #9
 800cbc6:	f63f ae0d 	bhi.w	800c7e4 <_svfiprintf_r+0xbc>
 800cbca:	4638      	mov	r0, r7
 800cbcc:	2500      	movs	r5, #0
 800cbce:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cbd2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cbd6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800cbda:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cbde:	2909      	cmp	r1, #9
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	d9f4      	bls.n	800cbce <_svfiprintf_r+0x4a6>
 800cbe4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800cbe8:	e5fc      	b.n	800c7e4 <_svfiprintf_r+0xbc>
 800cbea:	222b      	movs	r2, #43	; 0x2b
 800cbec:	e5f8      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800cbee:	f04b 0b01 	orr.w	fp, fp, #1
 800cbf2:	e5f5      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800cbf4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cbf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cbf8:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
 800cbfc:	b161      	cbz	r1, 800cc18 <_svfiprintf_r+0x4f0>
 800cbfe:	3301      	adds	r3, #1
 800cc00:	f10d 01b7 	add.w	r1, sp, #183	; 0xb7
 800cc04:	6021      	str	r1, [r4, #0]
 800cc06:	2101      	movs	r1, #1
 800cc08:	2b07      	cmp	r3, #7
 800cc0a:	440a      	add	r2, r1
 800cc0c:	6061      	str	r1, [r4, #4]
 800cc0e:	932b      	str	r3, [sp, #172]	; 0xac
 800cc10:	922c      	str	r2, [sp, #176]	; 0xb0
 800cc12:	f300 8118 	bgt.w	800ce46 <_svfiprintf_r+0x71e>
 800cc16:	3408      	adds	r4, #8
 800cc18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc1a:	b159      	cbz	r1, 800cc34 <_svfiprintf_r+0x50c>
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	a92d      	add	r1, sp, #180	; 0xb4
 800cc20:	6021      	str	r1, [r4, #0]
 800cc22:	2102      	movs	r1, #2
 800cc24:	2b07      	cmp	r3, #7
 800cc26:	440a      	add	r2, r1
 800cc28:	6061      	str	r1, [r4, #4]
 800cc2a:	932b      	str	r3, [sp, #172]	; 0xac
 800cc2c:	922c      	str	r2, [sp, #176]	; 0xb0
 800cc2e:	f300 8115 	bgt.w	800ce5c <_svfiprintf_r+0x734>
 800cc32:	3408      	adds	r4, #8
 800cc34:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc36:	2880      	cmp	r0, #128	; 0x80
 800cc38:	f000 80aa 	beq.w	800cd90 <_svfiprintf_r+0x668>
 800cc3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc3e:	9805      	ldr	r0, [sp, #20]
 800cc40:	1a0d      	subs	r5, r1, r0
 800cc42:	2d00      	cmp	r5, #0
 800cc44:	dd29      	ble.n	800cc9a <_svfiprintf_r+0x572>
 800cc46:	2d10      	cmp	r5, #16
 800cc48:	4e27      	ldr	r6, [pc, #156]	; (800cce8 <_svfiprintf_r+0x5c0>)
 800cc4a:	bfc8      	it	gt
 800cc4c:	f04f 0910 	movgt.w	r9, #16
 800cc50:	dc03      	bgt.n	800cc5a <_svfiprintf_r+0x532>
 800cc52:	e018      	b.n	800cc86 <_svfiprintf_r+0x55e>
 800cc54:	3d10      	subs	r5, #16
 800cc56:	2d10      	cmp	r5, #16
 800cc58:	dd15      	ble.n	800cc86 <_svfiprintf_r+0x55e>
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	3210      	adds	r2, #16
 800cc5e:	e884 0240 	stmia.w	r4, {r6, r9}
 800cc62:	3408      	adds	r4, #8
 800cc64:	2b07      	cmp	r3, #7
 800cc66:	932b      	str	r3, [sp, #172]	; 0xac
 800cc68:	922c      	str	r2, [sp, #176]	; 0xb0
 800cc6a:	ddf3      	ble.n	800cc54 <_svfiprintf_r+0x52c>
 800cc6c:	9803      	ldr	r0, [sp, #12]
 800cc6e:	4651      	mov	r1, sl
 800cc70:	4642      	mov	r2, r8
 800cc72:	ac10      	add	r4, sp, #64	; 0x40
 800cc74:	f7ff fccc 	bl	800c610 <__ssprint_r>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d17c      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800cc7c:	3d10      	subs	r5, #16
 800cc7e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cc80:	2d10      	cmp	r5, #16
 800cc82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cc84:	dce9      	bgt.n	800cc5a <_svfiprintf_r+0x532>
 800cc86:	3301      	adds	r3, #1
 800cc88:	1952      	adds	r2, r2, r5
 800cc8a:	2b07      	cmp	r3, #7
 800cc8c:	6026      	str	r6, [r4, #0]
 800cc8e:	6065      	str	r5, [r4, #4]
 800cc90:	932b      	str	r3, [sp, #172]	; 0xac
 800cc92:	922c      	str	r2, [sp, #176]	; 0xb0
 800cc94:	f300 80cc 	bgt.w	800ce30 <_svfiprintf_r+0x708>
 800cc98:	3408      	adds	r4, #8
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc9e:	9805      	ldr	r0, [sp, #20]
 800cca0:	2b07      	cmp	r3, #7
 800cca2:	932b      	str	r3, [sp, #172]	; 0xac
 800cca4:	6021      	str	r1, [r4, #0]
 800cca6:	4402      	add	r2, r0
 800cca8:	6060      	str	r0, [r4, #4]
 800ccaa:	bfd8      	it	le
 800ccac:	f104 0108 	addle.w	r1, r4, #8
 800ccb0:	922c      	str	r2, [sp, #176]	; 0xb0
 800ccb2:	f300 809e 	bgt.w	800cdf2 <_svfiprintf_r+0x6ca>
 800ccb6:	f01b 0f04 	tst.w	fp, #4
 800ccba:	d039      	beq.n	800cd30 <_svfiprintf_r+0x608>
 800ccbc:	9b08      	ldr	r3, [sp, #32]
 800ccbe:	9804      	ldr	r0, [sp, #16]
 800ccc0:	1a1d      	subs	r5, r3, r0
 800ccc2:	2d00      	cmp	r5, #0
 800ccc4:	dd34      	ble.n	800cd30 <_svfiprintf_r+0x608>
 800ccc6:	2d10      	cmp	r5, #16
 800ccc8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ccca:	bfd8      	it	le
 800cccc:	4e03      	ldrle	r6, [pc, #12]	; (800ccdc <_svfiprintf_r+0x5b4>)
 800ccce:	dd26      	ble.n	800cd1e <_svfiprintf_r+0x5f6>
 800ccd0:	2410      	movs	r4, #16
 800ccd2:	4e02      	ldr	r6, [pc, #8]	; (800ccdc <_svfiprintf_r+0x5b4>)
 800ccd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ccd8:	e00b      	b.n	800ccf2 <_svfiprintf_r+0x5ca>
 800ccda:	bf00      	nop
 800ccdc:	080186a0 	.word	0x080186a0
 800cce0:	0801c644 	.word	0x0801c644
 800cce4:	0801c658 	.word	0x0801c658
 800cce8:	080186b0 	.word	0x080186b0
 800ccec:	3d10      	subs	r5, #16
 800ccee:	2d10      	cmp	r5, #16
 800ccf0:	dd15      	ble.n	800cd1e <_svfiprintf_r+0x5f6>
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	3210      	adds	r2, #16
 800ccf6:	600e      	str	r6, [r1, #0]
 800ccf8:	604c      	str	r4, [r1, #4]
 800ccfa:	3108      	adds	r1, #8
 800ccfc:	2b07      	cmp	r3, #7
 800ccfe:	932b      	str	r3, [sp, #172]	; 0xac
 800cd00:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd02:	ddf3      	ble.n	800ccec <_svfiprintf_r+0x5c4>
 800cd04:	4648      	mov	r0, r9
 800cd06:	4651      	mov	r1, sl
 800cd08:	4642      	mov	r2, r8
 800cd0a:	f7ff fc81 	bl	800c610 <__ssprint_r>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d131      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800cd12:	3d10      	subs	r5, #16
 800cd14:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cd16:	2d10      	cmp	r5, #16
 800cd18:	a910      	add	r1, sp, #64	; 0x40
 800cd1a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cd1c:	dce9      	bgt.n	800ccf2 <_svfiprintf_r+0x5ca>
 800cd1e:	3301      	adds	r3, #1
 800cd20:	18aa      	adds	r2, r5, r2
 800cd22:	2b07      	cmp	r3, #7
 800cd24:	600e      	str	r6, [r1, #0]
 800cd26:	604d      	str	r5, [r1, #4]
 800cd28:	932b      	str	r3, [sp, #172]	; 0xac
 800cd2a:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd2c:	f300 80ef 	bgt.w	800cf0e <_svfiprintf_r+0x7e6>
 800cd30:	9b06      	ldr	r3, [sp, #24]
 800cd32:	9804      	ldr	r0, [sp, #16]
 800cd34:	9908      	ldr	r1, [sp, #32]
 800cd36:	4288      	cmp	r0, r1
 800cd38:	bfac      	ite	ge
 800cd3a:	181b      	addge	r3, r3, r0
 800cd3c:	185b      	addlt	r3, r3, r1
 800cd3e:	9306      	str	r3, [sp, #24]
 800cd40:	2a00      	cmp	r2, #0
 800cd42:	d160      	bne.n	800ce06 <_svfiprintf_r+0x6de>
 800cd44:	2300      	movs	r3, #0
 800cd46:	932b      	str	r3, [sp, #172]	; 0xac
 800cd48:	783b      	ldrb	r3, [r7, #0]
 800cd4a:	ac10      	add	r4, sp, #64	; 0x40
 800cd4c:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800cd50:	bf18      	it	ne
 800cd52:	2201      	movne	r2, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bf0c      	ite	eq
 800cd58:	2300      	moveq	r3, #0
 800cd5a:	f002 0301 	andne.w	r3, r2, #1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f47f ad11 	bne.w	800c786 <_svfiprintf_r+0x5e>
 800cd64:	463d      	mov	r5, r7
 800cd66:	e52e      	b.n	800c7c6 <_svfiprintf_r+0x9e>
 800cd68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800cd6a:	b123      	cbz	r3, 800cd76 <_svfiprintf_r+0x64e>
 800cd6c:	9803      	ldr	r0, [sp, #12]
 800cd6e:	4651      	mov	r1, sl
 800cd70:	aa2a      	add	r2, sp, #168	; 0xa8
 800cd72:	f7ff fc4d 	bl	800c610 <__ssprint_r>
 800cd76:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cd7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd7e:	9b06      	ldr	r3, [sp, #24]
 800cd80:	bf18      	it	ne
 800cd82:	f04f 33ff 	movne.w	r3, #4294967295
 800cd86:	9306      	str	r3, [sp, #24]
 800cd88:	9806      	ldr	r0, [sp, #24]
 800cd8a:	b02f      	add	sp, #188	; 0xbc
 800cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd90:	9908      	ldr	r1, [sp, #32]
 800cd92:	9804      	ldr	r0, [sp, #16]
 800cd94:	1a0d      	subs	r5, r1, r0
 800cd96:	2d00      	cmp	r5, #0
 800cd98:	f77f af50 	ble.w	800cc3c <_svfiprintf_r+0x514>
 800cd9c:	2d10      	cmp	r5, #16
 800cd9e:	4e99      	ldr	r6, [pc, #612]	; (800d004 <_svfiprintf_r+0x8dc>)
 800cda0:	bfc8      	it	gt
 800cda2:	f04f 0910 	movgt.w	r9, #16
 800cda6:	dc03      	bgt.n	800cdb0 <_svfiprintf_r+0x688>
 800cda8:	e018      	b.n	800cddc <_svfiprintf_r+0x6b4>
 800cdaa:	3d10      	subs	r5, #16
 800cdac:	2d10      	cmp	r5, #16
 800cdae:	dd15      	ble.n	800cddc <_svfiprintf_r+0x6b4>
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	3210      	adds	r2, #16
 800cdb4:	e884 0240 	stmia.w	r4, {r6, r9}
 800cdb8:	3408      	adds	r4, #8
 800cdba:	2b07      	cmp	r3, #7
 800cdbc:	932b      	str	r3, [sp, #172]	; 0xac
 800cdbe:	922c      	str	r2, [sp, #176]	; 0xb0
 800cdc0:	ddf3      	ble.n	800cdaa <_svfiprintf_r+0x682>
 800cdc2:	9803      	ldr	r0, [sp, #12]
 800cdc4:	4651      	mov	r1, sl
 800cdc6:	4642      	mov	r2, r8
 800cdc8:	ac10      	add	r4, sp, #64	; 0x40
 800cdca:	f7ff fc21 	bl	800c610 <__ssprint_r>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d1d1      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800cdd2:	3d10      	subs	r5, #16
 800cdd4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cdd6:	2d10      	cmp	r5, #16
 800cdd8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cdda:	dce9      	bgt.n	800cdb0 <_svfiprintf_r+0x688>
 800cddc:	3301      	adds	r3, #1
 800cdde:	1952      	adds	r2, r2, r5
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	6026      	str	r6, [r4, #0]
 800cde4:	6065      	str	r5, [r4, #4]
 800cde6:	932b      	str	r3, [sp, #172]	; 0xac
 800cde8:	922c      	str	r2, [sp, #176]	; 0xb0
 800cdea:	f300 80cb 	bgt.w	800cf84 <_svfiprintf_r+0x85c>
 800cdee:	3408      	adds	r4, #8
 800cdf0:	e724      	b.n	800cc3c <_svfiprintf_r+0x514>
 800cdf2:	9803      	ldr	r0, [sp, #12]
 800cdf4:	4651      	mov	r1, sl
 800cdf6:	4642      	mov	r2, r8
 800cdf8:	f7ff fc0a 	bl	800c610 <__ssprint_r>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d1ba      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800ce00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce02:	a910      	add	r1, sp, #64	; 0x40
 800ce04:	e757      	b.n	800ccb6 <_svfiprintf_r+0x58e>
 800ce06:	9803      	ldr	r0, [sp, #12]
 800ce08:	4651      	mov	r1, sl
 800ce0a:	4642      	mov	r2, r8
 800ce0c:	f7ff fc00 	bl	800c610 <__ssprint_r>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d097      	beq.n	800cd44 <_svfiprintf_r+0x61c>
 800ce14:	e7af      	b.n	800cd76 <_svfiprintf_r+0x64e>
 800ce16:	9105      	str	r1, [sp, #20]
 800ce18:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ce1c:	e577      	b.n	800c90e <_svfiprintf_r+0x1e6>
 800ce1e:	9803      	ldr	r0, [sp, #12]
 800ce20:	4651      	mov	r1, sl
 800ce22:	4642      	mov	r2, r8
 800ce24:	f7ff fbf4 	bl	800c610 <__ssprint_r>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d1a4      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800ce2c:	ac10      	add	r4, sp, #64	; 0x40
 800ce2e:	e4c7      	b.n	800c7c0 <_svfiprintf_r+0x98>
 800ce30:	9803      	ldr	r0, [sp, #12]
 800ce32:	4651      	mov	r1, sl
 800ce34:	4642      	mov	r2, r8
 800ce36:	f7ff fbeb 	bl	800c610 <__ssprint_r>
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	d19b      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800ce3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce40:	ac10      	add	r4, sp, #64	; 0x40
 800ce42:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ce44:	e729      	b.n	800cc9a <_svfiprintf_r+0x572>
 800ce46:	9803      	ldr	r0, [sp, #12]
 800ce48:	4651      	mov	r1, sl
 800ce4a:	4642      	mov	r2, r8
 800ce4c:	f7ff fbe0 	bl	800c610 <__ssprint_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d190      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800ce54:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce56:	ac10      	add	r4, sp, #64	; 0x40
 800ce58:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ce5a:	e6dd      	b.n	800cc18 <_svfiprintf_r+0x4f0>
 800ce5c:	9803      	ldr	r0, [sp, #12]
 800ce5e:	4651      	mov	r1, sl
 800ce60:	4642      	mov	r2, r8
 800ce62:	f7ff fbd5 	bl	800c610 <__ssprint_r>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d185      	bne.n	800cd76 <_svfiprintf_r+0x64e>
 800ce6a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce6c:	ac10      	add	r4, sp, #64	; 0x40
 800ce6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ce70:	e6e0      	b.n	800cc34 <_svfiprintf_r+0x50c>
 800ce72:	2a09      	cmp	r2, #9
 800ce74:	d955      	bls.n	800cf22 <_svfiprintf_r+0x7fa>
 800ce76:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800ce7a:	f10d 00a7 	add.w	r0, sp, #167	; 0xa7
 800ce7e:	fbac 1302 	umull	r1, r3, ip, r2
 800ce82:	4601      	mov	r1, r0
 800ce84:	3801      	subs	r0, #1
 800ce86:	08db      	lsrs	r3, r3, #3
 800ce88:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800ce8c:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 800ce90:	461a      	mov	r2, r3
 800ce92:	3630      	adds	r6, #48	; 0x30
 800ce94:	700e      	strb	r6, [r1, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1f1      	bne.n	800ce7e <_svfiprintf_r+0x756>
 800ce9a:	ebc1 0308 	rsb	r3, r1, r8
 800ce9e:	910a      	str	r1, [sp, #40]	; 0x28
 800cea0:	9305      	str	r3, [sp, #20]
 800cea2:	e534      	b.n	800c90e <_svfiprintf_r+0x1e6>
 800cea4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cea6:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800ceaa:	f002 000f 	and.w	r0, r2, #15
 800ceae:	4619      	mov	r1, r3
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	0912      	lsrs	r2, r2, #4
 800ceb4:	5c30      	ldrb	r0, [r6, r0]
 800ceb6:	7008      	strb	r0, [r1, #0]
 800ceb8:	d1f7      	bne.n	800ceaa <_svfiprintf_r+0x782>
 800ceba:	ebc1 0308 	rsb	r3, r1, r8
 800cebe:	910a      	str	r1, [sp, #40]	; 0x28
 800cec0:	9305      	str	r3, [sp, #20]
 800cec2:	e524      	b.n	800c90e <_svfiprintf_r+0x1e6>
 800cec4:	2302      	movs	r3, #2
 800cec6:	e53f      	b.n	800c948 <_svfiprintf_r+0x220>
 800cec8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800cecc:	d042      	beq.n	800cf54 <_svfiprintf_r+0x82c>
 800cece:	9907      	ldr	r1, [sp, #28]
 800ced0:	880a      	ldrh	r2, [r1, #0]
 800ced2:	3104      	adds	r1, #4
 800ced4:	9107      	str	r1, [sp, #28]
 800ced6:	1c11      	adds	r1, r2, #0
 800ced8:	bf18      	it	ne
 800ceda:	2101      	movne	r1, #1
 800cedc:	e534      	b.n	800c948 <_svfiprintf_r+0x220>
 800cede:	9803      	ldr	r0, [sp, #12]
 800cee0:	4651      	mov	r1, sl
 800cee2:	4642      	mov	r2, r8
 800cee4:	f7ff fb94 	bl	800c610 <__ssprint_r>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	f47f af44 	bne.w	800cd76 <_svfiprintf_r+0x64e>
 800ceee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cef0:	ac10      	add	r4, sp, #64	; 0x40
 800cef2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cef4:	e680      	b.n	800cbf8 <_svfiprintf_r+0x4d0>
 800cef6:	9b07      	ldr	r3, [sp, #28]
 800cef8:	681d      	ldr	r5, [r3, #0]
 800cefa:	3304      	adds	r3, #4
 800cefc:	2d00      	cmp	r5, #0
 800cefe:	bfbc      	itt	lt
 800cf00:	9307      	strlt	r3, [sp, #28]
 800cf02:	f04f 35ff 	movlt.w	r5, #4294967295
 800cf06:	f6ff ac6b 	blt.w	800c7e0 <_svfiprintf_r+0xb8>
 800cf0a:	9307      	str	r3, [sp, #28]
 800cf0c:	e468      	b.n	800c7e0 <_svfiprintf_r+0xb8>
 800cf0e:	9803      	ldr	r0, [sp, #12]
 800cf10:	4651      	mov	r1, sl
 800cf12:	4642      	mov	r2, r8
 800cf14:	f7ff fb7c 	bl	800c610 <__ssprint_r>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	f47f af2c 	bne.w	800cd76 <_svfiprintf_r+0x64e>
 800cf1e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cf20:	e706      	b.n	800cd30 <_svfiprintf_r+0x608>
 800cf22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf24:	3230      	adds	r2, #48	; 0x30
 800cf26:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800cf30:	930a      	str	r3, [sp, #40]	; 0x28
 800cf32:	e4ec      	b.n	800c90e <_svfiprintf_r+0x1e6>
 800cf34:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	9307      	str	r3, [sp, #28]
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	f6bf acc6 	bge.w	800c8ce <_svfiprintf_r+0x1a6>
 800cf42:	4252      	negs	r2, r2
 800cf44:	1c11      	adds	r1, r2, #0
 800cf46:	bf18      	it	ne
 800cf48:	2101      	movne	r1, #1
 800cf4a:	232d      	movs	r3, #45	; 0x2d
 800cf4c:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800cf50:	2301      	movs	r3, #1
 800cf52:	e4fc      	b.n	800c94e <_svfiprintf_r+0x226>
 800cf54:	9b07      	ldr	r3, [sp, #28]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	e533      	b.n	800c9c4 <_svfiprintf_r+0x29c>
 800cf5c:	9807      	ldr	r0, [sp, #28]
 800cf5e:	9906      	ldr	r1, [sp, #24]
 800cf60:	6803      	ldr	r3, [r0, #0]
 800cf62:	3004      	adds	r0, #4
 800cf64:	9007      	str	r0, [sp, #28]
 800cf66:	6019      	str	r1, [r3, #0]
 800cf68:	e400      	b.n	800c76c <_svfiprintf_r+0x44>
 800cf6a:	9907      	ldr	r1, [sp, #28]
 800cf6c:	880a      	ldrh	r2, [r1, #0]
 800cf6e:	3104      	adds	r1, #4
 800cf70:	9107      	str	r1, [sp, #28]
 800cf72:	e59f      	b.n	800cab4 <_svfiprintf_r+0x38c>
 800cf74:	881a      	ldrh	r2, [r3, #0]
 800cf76:	2301      	movs	r3, #1
 800cf78:	e524      	b.n	800c9c4 <_svfiprintf_r+0x29c>
 800cf7a:	9609      	str	r6, [sp, #36]	; 0x24
 800cf7c:	f7fb f90a 	bl	8008194 <strlen>
 800cf80:	9005      	str	r0, [sp, #20]
 800cf82:	e4c5      	b.n	800c910 <_svfiprintf_r+0x1e8>
 800cf84:	9803      	ldr	r0, [sp, #12]
 800cf86:	4651      	mov	r1, sl
 800cf88:	4642      	mov	r2, r8
 800cf8a:	f7ff fb41 	bl	800c610 <__ssprint_r>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	f47f aef1 	bne.w	800cd76 <_svfiprintf_r+0x64e>
 800cf94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cf96:	ac10      	add	r4, sp, #64	; 0x40
 800cf98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cf9a:	e64f      	b.n	800cc3c <_svfiprintf_r+0x514>
 800cf9c:	9907      	ldr	r1, [sp, #28]
 800cf9e:	9a06      	ldr	r2, [sp, #24]
 800cfa0:	680b      	ldr	r3, [r1, #0]
 800cfa2:	3104      	adds	r1, #4
 800cfa4:	9107      	str	r1, [sp, #28]
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	f7ff bbe0 	b.w	800c76c <_svfiprintf_r+0x44>
 800cfac:	2140      	movs	r1, #64	; 0x40
 800cfae:	9201      	str	r2, [sp, #4]
 800cfb0:	f7fa f822 	bl	8006ff8 <_malloc_r>
 800cfb4:	9a01      	ldr	r2, [sp, #4]
 800cfb6:	f8ca 0000 	str.w	r0, [sl]
 800cfba:	f8ca 0010 	str.w	r0, [sl, #16]
 800cfbe:	b1c8      	cbz	r0, 800cff4 <_svfiprintf_r+0x8cc>
 800cfc0:	2340      	movs	r3, #64	; 0x40
 800cfc2:	f8ca 3014 	str.w	r3, [sl, #20]
 800cfc6:	f7ff bbbc 	b.w	800c742 <_svfiprintf_r+0x1a>
 800cfca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cfcc:	4e0e      	ldr	r6, [pc, #56]	; (800d008 <_svfiprintf_r+0x8e0>)
 800cfce:	e557      	b.n	800ca80 <_svfiprintf_r+0x358>
 800cfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd2:	ebc3 0308 	rsb	r3, r3, r8
 800cfd6:	9305      	str	r3, [sp, #20]
 800cfd8:	e499      	b.n	800c90e <_svfiprintf_r+0x1e6>
 800cfda:	4b0c      	ldr	r3, [pc, #48]	; (800d00c <_svfiprintf_r+0x8e4>)
 800cfdc:	2d06      	cmp	r5, #6
 800cfde:	bf28      	it	cs
 800cfe0:	2506      	movcs	r5, #6
 800cfe2:	9505      	str	r5, [sp, #20]
 800cfe4:	930a      	str	r3, [sp, #40]	; 0x28
 800cfe6:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	e511      	b.n	800ca12 <_svfiprintf_r+0x2ea>
 800cfee:	9505      	str	r5, [sp, #20]
 800cff0:	9009      	str	r0, [sp, #36]	; 0x24
 800cff2:	e48d      	b.n	800c910 <_svfiprintf_r+0x1e8>
 800cff4:	9803      	ldr	r0, [sp, #12]
 800cff6:	f04f 33ff 	mov.w	r3, #4294967295
 800cffa:	9306      	str	r3, [sp, #24]
 800cffc:	230c      	movs	r3, #12
 800cffe:	6003      	str	r3, [r0, #0]
 800d000:	e6c2      	b.n	800cd88 <_svfiprintf_r+0x660>
 800d002:	bf00      	nop
 800d004:	080186b0 	.word	0x080186b0
 800d008:	080186a0 	.word	0x080186a0
 800d00c:	0801c66c 	.word	0x0801c66c

0800d010 <_wcrtomb_r>:
 800d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d014:	461e      	mov	r6, r3
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <_wcrtomb_r+0x48>)
 800d018:	b086      	sub	sp, #24
 800d01a:	460c      	mov	r4, r1
 800d01c:	4605      	mov	r5, r0
 800d01e:	4690      	mov	r8, r2
 800d020:	681f      	ldr	r7, [r3, #0]
 800d022:	b181      	cbz	r1, 800d046 <_wcrtomb_r+0x36>
 800d024:	f7fe fd6e 	bl	800bb04 <__locale_charset>
 800d028:	9600      	str	r6, [sp, #0]
 800d02a:	4621      	mov	r1, r4
 800d02c:	4642      	mov	r2, r8
 800d02e:	4603      	mov	r3, r0
 800d030:	4628      	mov	r0, r5
 800d032:	47b8      	blx	r7
 800d034:	1c43      	adds	r3, r0, #1
 800d036:	d103      	bne.n	800d040 <_wcrtomb_r+0x30>
 800d038:	2300      	movs	r3, #0
 800d03a:	6033      	str	r3, [r6, #0]
 800d03c:	238a      	movs	r3, #138	; 0x8a
 800d03e:	602b      	str	r3, [r5, #0]
 800d040:	b006      	add	sp, #24
 800d042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d046:	f7fe fd5d 	bl	800bb04 <__locale_charset>
 800d04a:	9600      	str	r6, [sp, #0]
 800d04c:	a903      	add	r1, sp, #12
 800d04e:	4622      	mov	r2, r4
 800d050:	4603      	mov	r3, r0
 800d052:	4628      	mov	r0, r5
 800d054:	47b8      	blx	r7
 800d056:	e7ed      	b.n	800d034 <_wcrtomb_r+0x24>
 800d058:	200008c4 	.word	0x200008c4

0800d05c <wcrtomb>:
 800d05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d060:	4607      	mov	r7, r0
 800d062:	b087      	sub	sp, #28
 800d064:	4688      	mov	r8, r1
 800d066:	4614      	mov	r4, r2
 800d068:	4d12      	ldr	r5, [pc, #72]	; (800d0b4 <wcrtomb+0x58>)
 800d06a:	b1a8      	cbz	r0, 800d098 <wcrtomb+0x3c>
 800d06c:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <wcrtomb+0x5c>)
 800d06e:	f8d5 9000 	ldr.w	r9, [r5]
 800d072:	681e      	ldr	r6, [r3, #0]
 800d074:	f7fe fd46 	bl	800bb04 <__locale_charset>
 800d078:	9400      	str	r4, [sp, #0]
 800d07a:	4639      	mov	r1, r7
 800d07c:	4642      	mov	r2, r8
 800d07e:	4603      	mov	r3, r0
 800d080:	4648      	mov	r0, r9
 800d082:	47b0      	blx	r6
 800d084:	1c42      	adds	r2, r0, #1
 800d086:	d104      	bne.n	800d092 <wcrtomb+0x36>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	2200      	movs	r2, #0
 800d08c:	6022      	str	r2, [r4, #0]
 800d08e:	228a      	movs	r2, #138	; 0x8a
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	b007      	add	sp, #28
 800d094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d098:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <wcrtomb+0x5c>)
 800d09a:	f8d5 8000 	ldr.w	r8, [r5]
 800d09e:	681e      	ldr	r6, [r3, #0]
 800d0a0:	f7fe fd30 	bl	800bb04 <__locale_charset>
 800d0a4:	9400      	str	r4, [sp, #0]
 800d0a6:	a903      	add	r1, sp, #12
 800d0a8:	463a      	mov	r2, r7
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	47b0      	blx	r6
 800d0b0:	e7e8      	b.n	800d084 <wcrtomb+0x28>
 800d0b2:	bf00      	nop
 800d0b4:	20000008 	.word	0x20000008
 800d0b8:	200008c4 	.word	0x200008c4

0800d0bc <__ascii_wctomb>:
 800d0bc:	4603      	mov	r3, r0
 800d0be:	b121      	cbz	r1, 800d0ca <__ascii_wctomb+0xe>
 800d0c0:	2aff      	cmp	r2, #255	; 0xff
 800d0c2:	d804      	bhi.n	800d0ce <__ascii_wctomb+0x12>
 800d0c4:	700a      	strb	r2, [r1, #0]
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	4770      	bx	lr
 800d0ca:	4608      	mov	r0, r1
 800d0cc:	4770      	bx	lr
 800d0ce:	228a      	movs	r2, #138	; 0x8a
 800d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	4770      	bx	lr

0800d0d8 <_wctomb_r>:
 800d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0dc:	f640 04c4 	movw	r4, #2244	; 0x8c4
 800d0e0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	461e      	mov	r6, r3
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	4688      	mov	r8, r1
 800d0ec:	4617      	mov	r7, r2
 800d0ee:	6824      	ldr	r4, [r4, #0]
 800d0f0:	f7fe fd08 	bl	800bb04 <__locale_charset>
 800d0f4:	9600      	str	r6, [sp, #0]
 800d0f6:	4641      	mov	r1, r8
 800d0f8:	463a      	mov	r2, r7
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	47a0      	blx	r4
 800d100:	b002      	add	sp, #8
 800d102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d106:	bf00      	nop

0800d108 <_calloc_r>:
 800d108:	b510      	push	{r4, lr}
 800d10a:	fb01 f102 	mul.w	r1, r1, r2
 800d10e:	f7f9 ff73 	bl	8006ff8 <_malloc_r>
 800d112:	4604      	mov	r4, r0
 800d114:	b308      	cbz	r0, 800d15a <_calloc_r+0x52>
 800d116:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d11a:	f022 0203 	bic.w	r2, r2, #3
 800d11e:	3a04      	subs	r2, #4
 800d120:	2a24      	cmp	r2, #36	; 0x24
 800d122:	d81c      	bhi.n	800d15e <_calloc_r+0x56>
 800d124:	2a13      	cmp	r2, #19
 800d126:	bf98      	it	ls
 800d128:	4602      	movls	r2, r0
 800d12a:	d912      	bls.n	800d152 <_calloc_r+0x4a>
 800d12c:	2300      	movs	r3, #0
 800d12e:	2a1b      	cmp	r2, #27
 800d130:	6003      	str	r3, [r0, #0]
 800d132:	bf98      	it	ls
 800d134:	f100 0208 	addls.w	r2, r0, #8
 800d138:	6043      	str	r3, [r0, #4]
 800d13a:	d90a      	bls.n	800d152 <_calloc_r+0x4a>
 800d13c:	2a24      	cmp	r2, #36	; 0x24
 800d13e:	6083      	str	r3, [r0, #8]
 800d140:	bf14      	ite	ne
 800d142:	f100 0210 	addne.w	r2, r0, #16
 800d146:	f100 0218 	addeq.w	r2, r0, #24
 800d14a:	60c3      	str	r3, [r0, #12]
 800d14c:	bf04      	itt	eq
 800d14e:	6103      	streq	r3, [r0, #16]
 800d150:	6143      	streq	r3, [r0, #20]
 800d152:	2300      	movs	r3, #0
 800d154:	6013      	str	r3, [r2, #0]
 800d156:	6053      	str	r3, [r2, #4]
 800d158:	6093      	str	r3, [r2, #8]
 800d15a:	4620      	mov	r0, r4
 800d15c:	bd10      	pop	{r4, pc}
 800d15e:	2100      	movs	r1, #0
 800d160:	f7fa fb16 	bl	8007790 <memset>
 800d164:	4620      	mov	r0, r4
 800d166:	bd10      	pop	{r4, pc}

0800d168 <_fclose_r>:
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	460c      	mov	r4, r1
 800d16c:	4605      	mov	r5, r0
 800d16e:	460e      	mov	r6, r1
 800d170:	2900      	cmp	r1, #0
 800d172:	d030      	beq.n	800d1d6 <_fclose_r+0x6e>
 800d174:	f7fe faa0 	bl	800b6b8 <__sfp_lock_acquire>
 800d178:	b115      	cbz	r5, 800d180 <_fclose_r+0x18>
 800d17a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d02c      	beq.n	800d1da <_fclose_r+0x72>
 800d180:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d184:	b32e      	cbz	r6, 800d1d2 <_fclose_r+0x6a>
 800d186:	4628      	mov	r0, r5
 800d188:	4621      	mov	r1, r4
 800d18a:	f7fe f901 	bl	800b390 <_fflush_r>
 800d18e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d190:	4606      	mov	r6, r0
 800d192:	b13b      	cbz	r3, 800d1a4 <_fclose_r+0x3c>
 800d194:	69e1      	ldr	r1, [r4, #28]
 800d196:	4628      	mov	r0, r5
 800d198:	4798      	blx	r3
 800d19a:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 800d19e:	bf28      	it	cs
 800d1a0:	f04f 36ff 	movcs.w	r6, #4294967295
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	061b      	lsls	r3, r3, #24
 800d1a8:	d41f      	bmi.n	800d1ea <_fclose_r+0x82>
 800d1aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d1ac:	b141      	cbz	r1, 800d1c0 <_fclose_r+0x58>
 800d1ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d1b2:	4299      	cmp	r1, r3
 800d1b4:	d002      	beq.n	800d1bc <_fclose_r+0x54>
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	f7fe fb70 	bl	800b89c <_free_r>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	6323      	str	r3, [r4, #48]	; 0x30
 800d1c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d1c2:	b121      	cbz	r1, 800d1ce <_fclose_r+0x66>
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f7fe fb69 	bl	800b89c <_free_r>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6463      	str	r3, [r4, #68]	; 0x44
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	f7fe fa73 	bl	800b6bc <__sfp_lock_release>
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	bd70      	pop	{r4, r5, r6, pc}
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f7fe f9fa 	bl	800b5d4 <__sinit>
 800d1e0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	d1ce      	bne.n	800d186 <_fclose_r+0x1e>
 800d1e8:	e7f3      	b.n	800d1d2 <_fclose_r+0x6a>
 800d1ea:	6921      	ldr	r1, [r4, #16]
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f7fe fb55 	bl	800b89c <_free_r>
 800d1f2:	e7da      	b.n	800d1aa <_fclose_r+0x42>

0800d1f4 <fclose>:
 800d1f4:	f240 0308 	movw	r3, #8
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d1fe:	6818      	ldr	r0, [r3, #0]
 800d200:	e7b2      	b.n	800d168 <_fclose_r>
 800d202:	bf00      	nop
 800d204:	0000      	movs	r0, r0
	...

0800d208 <__aeabi_uidiv>:
 800d208:	1e4a      	subs	r2, r1, #1
 800d20a:	bf08      	it	eq
 800d20c:	4770      	bxeq	lr
 800d20e:	f0c0 8124 	bcc.w	800d45a <__aeabi_uidiv+0x252>
 800d212:	4288      	cmp	r0, r1
 800d214:	f240 8116 	bls.w	800d444 <__aeabi_uidiv+0x23c>
 800d218:	4211      	tst	r1, r2
 800d21a:	f000 8117 	beq.w	800d44c <__aeabi_uidiv+0x244>
 800d21e:	fab0 f380 	clz	r3, r0
 800d222:	fab1 f281 	clz	r2, r1
 800d226:	eba2 0303 	sub.w	r3, r2, r3
 800d22a:	f1c3 031f 	rsb	r3, r3, #31
 800d22e:	a204      	add	r2, pc, #16	; (adr r2, 800d240 <__aeabi_uidiv+0x38>)
 800d230:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800d234:	f04f 0200 	mov.w	r2, #0
 800d238:	469f      	mov	pc, r3
 800d23a:	bf00      	nop
 800d23c:	f3af 8000 	nop.w
 800d240:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 800d244:	bf00      	nop
 800d246:	eb42 0202 	adc.w	r2, r2, r2
 800d24a:	bf28      	it	cs
 800d24c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 800d250:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 800d254:	bf00      	nop
 800d256:	eb42 0202 	adc.w	r2, r2, r2
 800d25a:	bf28      	it	cs
 800d25c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 800d260:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 800d264:	bf00      	nop
 800d266:	eb42 0202 	adc.w	r2, r2, r2
 800d26a:	bf28      	it	cs
 800d26c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 800d270:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 800d274:	bf00      	nop
 800d276:	eb42 0202 	adc.w	r2, r2, r2
 800d27a:	bf28      	it	cs
 800d27c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 800d280:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 800d284:	bf00      	nop
 800d286:	eb42 0202 	adc.w	r2, r2, r2
 800d28a:	bf28      	it	cs
 800d28c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 800d290:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 800d294:	bf00      	nop
 800d296:	eb42 0202 	adc.w	r2, r2, r2
 800d29a:	bf28      	it	cs
 800d29c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 800d2a0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 800d2a4:	bf00      	nop
 800d2a6:	eb42 0202 	adc.w	r2, r2, r2
 800d2aa:	bf28      	it	cs
 800d2ac:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 800d2b0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 800d2b4:	bf00      	nop
 800d2b6:	eb42 0202 	adc.w	r2, r2, r2
 800d2ba:	bf28      	it	cs
 800d2bc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 800d2c0:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 800d2c4:	bf00      	nop
 800d2c6:	eb42 0202 	adc.w	r2, r2, r2
 800d2ca:	bf28      	it	cs
 800d2cc:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 800d2d0:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 800d2d4:	bf00      	nop
 800d2d6:	eb42 0202 	adc.w	r2, r2, r2
 800d2da:	bf28      	it	cs
 800d2dc:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 800d2e0:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800d2e4:	bf00      	nop
 800d2e6:	eb42 0202 	adc.w	r2, r2, r2
 800d2ea:	bf28      	it	cs
 800d2ec:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 800d2f0:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 800d2f4:	bf00      	nop
 800d2f6:	eb42 0202 	adc.w	r2, r2, r2
 800d2fa:	bf28      	it	cs
 800d2fc:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 800d300:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 800d304:	bf00      	nop
 800d306:	eb42 0202 	adc.w	r2, r2, r2
 800d30a:	bf28      	it	cs
 800d30c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 800d310:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 800d314:	bf00      	nop
 800d316:	eb42 0202 	adc.w	r2, r2, r2
 800d31a:	bf28      	it	cs
 800d31c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 800d320:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 800d324:	bf00      	nop
 800d326:	eb42 0202 	adc.w	r2, r2, r2
 800d32a:	bf28      	it	cs
 800d32c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 800d330:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 800d334:	bf00      	nop
 800d336:	eb42 0202 	adc.w	r2, r2, r2
 800d33a:	bf28      	it	cs
 800d33c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 800d340:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 800d344:	bf00      	nop
 800d346:	eb42 0202 	adc.w	r2, r2, r2
 800d34a:	bf28      	it	cs
 800d34c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 800d350:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 800d354:	bf00      	nop
 800d356:	eb42 0202 	adc.w	r2, r2, r2
 800d35a:	bf28      	it	cs
 800d35c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 800d360:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 800d364:	bf00      	nop
 800d366:	eb42 0202 	adc.w	r2, r2, r2
 800d36a:	bf28      	it	cs
 800d36c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 800d370:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 800d374:	bf00      	nop
 800d376:	eb42 0202 	adc.w	r2, r2, r2
 800d37a:	bf28      	it	cs
 800d37c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 800d380:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 800d384:	bf00      	nop
 800d386:	eb42 0202 	adc.w	r2, r2, r2
 800d38a:	bf28      	it	cs
 800d38c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 800d390:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 800d394:	bf00      	nop
 800d396:	eb42 0202 	adc.w	r2, r2, r2
 800d39a:	bf28      	it	cs
 800d39c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 800d3a0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 800d3a4:	bf00      	nop
 800d3a6:	eb42 0202 	adc.w	r2, r2, r2
 800d3aa:	bf28      	it	cs
 800d3ac:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 800d3b0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800d3b4:	bf00      	nop
 800d3b6:	eb42 0202 	adc.w	r2, r2, r2
 800d3ba:	bf28      	it	cs
 800d3bc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 800d3c0:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 800d3c4:	bf00      	nop
 800d3c6:	eb42 0202 	adc.w	r2, r2, r2
 800d3ca:	bf28      	it	cs
 800d3cc:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 800d3d0:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 800d3d4:	bf00      	nop
 800d3d6:	eb42 0202 	adc.w	r2, r2, r2
 800d3da:	bf28      	it	cs
 800d3dc:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 800d3e0:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800d3e4:	bf00      	nop
 800d3e6:	eb42 0202 	adc.w	r2, r2, r2
 800d3ea:	bf28      	it	cs
 800d3ec:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 800d3f0:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 800d3f4:	bf00      	nop
 800d3f6:	eb42 0202 	adc.w	r2, r2, r2
 800d3fa:	bf28      	it	cs
 800d3fc:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 800d400:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800d404:	bf00      	nop
 800d406:	eb42 0202 	adc.w	r2, r2, r2
 800d40a:	bf28      	it	cs
 800d40c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 800d410:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800d414:	bf00      	nop
 800d416:	eb42 0202 	adc.w	r2, r2, r2
 800d41a:	bf28      	it	cs
 800d41c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 800d420:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800d424:	bf00      	nop
 800d426:	eb42 0202 	adc.w	r2, r2, r2
 800d42a:	bf28      	it	cs
 800d42c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 800d430:	ebb0 0f01 	cmp.w	r0, r1
 800d434:	bf00      	nop
 800d436:	eb42 0202 	adc.w	r2, r2, r2
 800d43a:	bf28      	it	cs
 800d43c:	eba0 0001 	subcs.w	r0, r0, r1
 800d440:	4610      	mov	r0, r2
 800d442:	4770      	bx	lr
 800d444:	bf0c      	ite	eq
 800d446:	2001      	moveq	r0, #1
 800d448:	2000      	movne	r0, #0
 800d44a:	4770      	bx	lr
 800d44c:	fab1 f281 	clz	r2, r1
 800d450:	f1c2 021f 	rsb	r2, r2, #31
 800d454:	fa20 f002 	lsr.w	r0, r0, r2
 800d458:	4770      	bx	lr
 800d45a:	b108      	cbz	r0, 800d460 <__aeabi_uidiv+0x258>
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	f000 b80e 	b.w	800d480 <__aeabi_idiv0>

0800d464 <__aeabi_uidivmod>:
 800d464:	2900      	cmp	r1, #0
 800d466:	d0f8      	beq.n	800d45a <__aeabi_uidiv+0x252>
 800d468:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 800d46c:	f7ff fecc 	bl	800d208 <__aeabi_uidiv>
 800d470:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 800d474:	fb02 f300 	mul.w	r3, r2, r0
 800d478:	eba1 0103 	sub.w	r1, r1, r3
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop

0800d480 <__aeabi_idiv0>:
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop

0800d484 <__aeabi_drsub>:
 800d484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d488:	e002      	b.n	800d490 <__adddf3>
 800d48a:	bf00      	nop

0800d48c <__aeabi_dsub>:
 800d48c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d490 <__adddf3>:
 800d490:	b530      	push	{r4, r5, lr}
 800d492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d49a:	ea94 0f05 	teq	r4, r5
 800d49e:	bf08      	it	eq
 800d4a0:	ea90 0f02 	teqeq	r0, r2
 800d4a4:	bf1f      	itttt	ne
 800d4a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d4aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d4ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d4b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d4b6:	f000 80e2 	beq.w	800d67e <__adddf3+0x1ee>
 800d4ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d4be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d4c2:	bfb8      	it	lt
 800d4c4:	426d      	neglt	r5, r5
 800d4c6:	dd0c      	ble.n	800d4e2 <__adddf3+0x52>
 800d4c8:	442c      	add	r4, r5
 800d4ca:	ea80 0202 	eor.w	r2, r0, r2
 800d4ce:	ea81 0303 	eor.w	r3, r1, r3
 800d4d2:	ea82 0000 	eor.w	r0, r2, r0
 800d4d6:	ea83 0101 	eor.w	r1, r3, r1
 800d4da:	ea80 0202 	eor.w	r2, r0, r2
 800d4de:	ea81 0303 	eor.w	r3, r1, r3
 800d4e2:	2d36      	cmp	r5, #54	; 0x36
 800d4e4:	bf88      	it	hi
 800d4e6:	bd30      	pophi	{r4, r5, pc}
 800d4e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d4ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d4f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d4f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d4f8:	d002      	beq.n	800d500 <__adddf3+0x70>
 800d4fa:	4240      	negs	r0, r0
 800d4fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800d504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800d50c:	d002      	beq.n	800d514 <__adddf3+0x84>
 800d50e:	4252      	negs	r2, r2
 800d510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d514:	ea94 0f05 	teq	r4, r5
 800d518:	f000 80a7 	beq.w	800d66a <__adddf3+0x1da>
 800d51c:	f1a4 0401 	sub.w	r4, r4, #1
 800d520:	f1d5 0e20 	rsbs	lr, r5, #32
 800d524:	db0d      	blt.n	800d542 <__adddf3+0xb2>
 800d526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800d52a:	fa22 f205 	lsr.w	r2, r2, r5
 800d52e:	1880      	adds	r0, r0, r2
 800d530:	f141 0100 	adc.w	r1, r1, #0
 800d534:	fa03 f20e 	lsl.w	r2, r3, lr
 800d538:	1880      	adds	r0, r0, r2
 800d53a:	fa43 f305 	asr.w	r3, r3, r5
 800d53e:	4159      	adcs	r1, r3
 800d540:	e00e      	b.n	800d560 <__adddf3+0xd0>
 800d542:	f1a5 0520 	sub.w	r5, r5, #32
 800d546:	f10e 0e20 	add.w	lr, lr, #32
 800d54a:	2a01      	cmp	r2, #1
 800d54c:	fa03 fc0e 	lsl.w	ip, r3, lr
 800d550:	bf28      	it	cs
 800d552:	f04c 0c02 	orrcs.w	ip, ip, #2
 800d556:	fa43 f305 	asr.w	r3, r3, r5
 800d55a:	18c0      	adds	r0, r0, r3
 800d55c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800d560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d564:	d507      	bpl.n	800d576 <__adddf3+0xe6>
 800d566:	f04f 0e00 	mov.w	lr, #0
 800d56a:	f1dc 0c00 	rsbs	ip, ip, #0
 800d56e:	eb7e 0000 	sbcs.w	r0, lr, r0
 800d572:	eb6e 0101 	sbc.w	r1, lr, r1
 800d576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d57a:	d31b      	bcc.n	800d5b4 <__adddf3+0x124>
 800d57c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800d580:	d30c      	bcc.n	800d59c <__adddf3+0x10c>
 800d582:	0849      	lsrs	r1, r1, #1
 800d584:	ea5f 0030 	movs.w	r0, r0, rrx
 800d588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800d58c:	f104 0401 	add.w	r4, r4, #1
 800d590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800d594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800d598:	f080 809a 	bcs.w	800d6d0 <__adddf3+0x240>
 800d59c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800d5a0:	bf08      	it	eq
 800d5a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d5a6:	f150 0000 	adcs.w	r0, r0, #0
 800d5aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d5ae:	ea41 0105 	orr.w	r1, r1, r5
 800d5b2:	bd30      	pop	{r4, r5, pc}
 800d5b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800d5b8:	4140      	adcs	r0, r0
 800d5ba:	eb41 0101 	adc.w	r1, r1, r1
 800d5be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d5c2:	f1a4 0401 	sub.w	r4, r4, #1
 800d5c6:	d1e9      	bne.n	800d59c <__adddf3+0x10c>
 800d5c8:	f091 0f00 	teq	r1, #0
 800d5cc:	bf04      	itt	eq
 800d5ce:	4601      	moveq	r1, r0
 800d5d0:	2000      	moveq	r0, #0
 800d5d2:	fab1 f381 	clz	r3, r1
 800d5d6:	bf08      	it	eq
 800d5d8:	3320      	addeq	r3, #32
 800d5da:	f1a3 030b 	sub.w	r3, r3, #11
 800d5de:	f1b3 0220 	subs.w	r2, r3, #32
 800d5e2:	da0c      	bge.n	800d5fe <__adddf3+0x16e>
 800d5e4:	320c      	adds	r2, #12
 800d5e6:	dd08      	ble.n	800d5fa <__adddf3+0x16a>
 800d5e8:	f102 0c14 	add.w	ip, r2, #20
 800d5ec:	f1c2 020c 	rsb	r2, r2, #12
 800d5f0:	fa01 f00c 	lsl.w	r0, r1, ip
 800d5f4:	fa21 f102 	lsr.w	r1, r1, r2
 800d5f8:	e00c      	b.n	800d614 <__adddf3+0x184>
 800d5fa:	f102 0214 	add.w	r2, r2, #20
 800d5fe:	bfd8      	it	le
 800d600:	f1c2 0c20 	rsble	ip, r2, #32
 800d604:	fa01 f102 	lsl.w	r1, r1, r2
 800d608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d60c:	bfdc      	itt	le
 800d60e:	ea41 010c 	orrle.w	r1, r1, ip
 800d612:	4090      	lslle	r0, r2
 800d614:	1ae4      	subs	r4, r4, r3
 800d616:	bfa2      	ittt	ge
 800d618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800d61c:	4329      	orrge	r1, r5
 800d61e:	bd30      	popge	{r4, r5, pc}
 800d620:	ea6f 0404 	mvn.w	r4, r4
 800d624:	3c1f      	subs	r4, #31
 800d626:	da1c      	bge.n	800d662 <__adddf3+0x1d2>
 800d628:	340c      	adds	r4, #12
 800d62a:	dc0e      	bgt.n	800d64a <__adddf3+0x1ba>
 800d62c:	f104 0414 	add.w	r4, r4, #20
 800d630:	f1c4 0220 	rsb	r2, r4, #32
 800d634:	fa20 f004 	lsr.w	r0, r0, r4
 800d638:	fa01 f302 	lsl.w	r3, r1, r2
 800d63c:	ea40 0003 	orr.w	r0, r0, r3
 800d640:	fa21 f304 	lsr.w	r3, r1, r4
 800d644:	ea45 0103 	orr.w	r1, r5, r3
 800d648:	bd30      	pop	{r4, r5, pc}
 800d64a:	f1c4 040c 	rsb	r4, r4, #12
 800d64e:	f1c4 0220 	rsb	r2, r4, #32
 800d652:	fa20 f002 	lsr.w	r0, r0, r2
 800d656:	fa01 f304 	lsl.w	r3, r1, r4
 800d65a:	ea40 0003 	orr.w	r0, r0, r3
 800d65e:	4629      	mov	r1, r5
 800d660:	bd30      	pop	{r4, r5, pc}
 800d662:	fa21 f004 	lsr.w	r0, r1, r4
 800d666:	4629      	mov	r1, r5
 800d668:	bd30      	pop	{r4, r5, pc}
 800d66a:	f094 0f00 	teq	r4, #0
 800d66e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800d672:	bf06      	itte	eq
 800d674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800d678:	3401      	addeq	r4, #1
 800d67a:	3d01      	subne	r5, #1
 800d67c:	e74e      	b.n	800d51c <__adddf3+0x8c>
 800d67e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d682:	bf18      	it	ne
 800d684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d688:	d029      	beq.n	800d6de <__adddf3+0x24e>
 800d68a:	ea94 0f05 	teq	r4, r5
 800d68e:	bf08      	it	eq
 800d690:	ea90 0f02 	teqeq	r0, r2
 800d694:	d005      	beq.n	800d6a2 <__adddf3+0x212>
 800d696:	ea54 0c00 	orrs.w	ip, r4, r0
 800d69a:	bf04      	itt	eq
 800d69c:	4619      	moveq	r1, r3
 800d69e:	4610      	moveq	r0, r2
 800d6a0:	bd30      	pop	{r4, r5, pc}
 800d6a2:	ea91 0f03 	teq	r1, r3
 800d6a6:	bf1e      	ittt	ne
 800d6a8:	2100      	movne	r1, #0
 800d6aa:	2000      	movne	r0, #0
 800d6ac:	bd30      	popne	{r4, r5, pc}
 800d6ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800d6b2:	d105      	bne.n	800d6c0 <__adddf3+0x230>
 800d6b4:	0040      	lsls	r0, r0, #1
 800d6b6:	4149      	adcs	r1, r1
 800d6b8:	bf28      	it	cs
 800d6ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800d6be:	bd30      	pop	{r4, r5, pc}
 800d6c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800d6c4:	bf3c      	itt	cc
 800d6c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800d6ca:	bd30      	popcc	{r4, r5, pc}
 800d6cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d6d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800d6d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6d8:	f04f 0000 	mov.w	r0, #0
 800d6dc:	bd30      	pop	{r4, r5, pc}
 800d6de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d6e2:	bf1a      	itte	ne
 800d6e4:	4619      	movne	r1, r3
 800d6e6:	4610      	movne	r0, r2
 800d6e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800d6ec:	bf1c      	itt	ne
 800d6ee:	460b      	movne	r3, r1
 800d6f0:	4602      	movne	r2, r0
 800d6f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d6f6:	bf06      	itte	eq
 800d6f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800d6fc:	ea91 0f03 	teqeq	r1, r3
 800d700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800d704:	bd30      	pop	{r4, r5, pc}
 800d706:	bf00      	nop

0800d708 <__aeabi_ui2d>:
 800d708:	f090 0f00 	teq	r0, #0
 800d70c:	bf04      	itt	eq
 800d70e:	2100      	moveq	r1, #0
 800d710:	4770      	bxeq	lr
 800d712:	b530      	push	{r4, r5, lr}
 800d714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d71c:	f04f 0500 	mov.w	r5, #0
 800d720:	f04f 0100 	mov.w	r1, #0
 800d724:	e750      	b.n	800d5c8 <__adddf3+0x138>
 800d726:	bf00      	nop

0800d728 <__aeabi_i2d>:
 800d728:	f090 0f00 	teq	r0, #0
 800d72c:	bf04      	itt	eq
 800d72e:	2100      	moveq	r1, #0
 800d730:	4770      	bxeq	lr
 800d732:	b530      	push	{r4, r5, lr}
 800d734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d73c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800d740:	bf48      	it	mi
 800d742:	4240      	negmi	r0, r0
 800d744:	f04f 0100 	mov.w	r1, #0
 800d748:	e73e      	b.n	800d5c8 <__adddf3+0x138>
 800d74a:	bf00      	nop

0800d74c <__aeabi_f2d>:
 800d74c:	0042      	lsls	r2, r0, #1
 800d74e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800d752:	ea4f 0131 	mov.w	r1, r1, rrx
 800d756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800d75a:	bf1f      	itttt	ne
 800d75c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800d760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800d768:	4770      	bxne	lr
 800d76a:	f092 0f00 	teq	r2, #0
 800d76e:	bf14      	ite	ne
 800d770:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d774:	4770      	bxeq	lr
 800d776:	b530      	push	{r4, r5, lr}
 800d778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800d77c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d784:	e720      	b.n	800d5c8 <__adddf3+0x138>
 800d786:	bf00      	nop

0800d788 <__aeabi_ul2d>:
 800d788:	ea50 0201 	orrs.w	r2, r0, r1
 800d78c:	bf08      	it	eq
 800d78e:	4770      	bxeq	lr
 800d790:	b530      	push	{r4, r5, lr}
 800d792:	f04f 0500 	mov.w	r5, #0
 800d796:	e00a      	b.n	800d7ae <__aeabi_l2d+0x16>

0800d798 <__aeabi_l2d>:
 800d798:	ea50 0201 	orrs.w	r2, r0, r1
 800d79c:	bf08      	it	eq
 800d79e:	4770      	bxeq	lr
 800d7a0:	b530      	push	{r4, r5, lr}
 800d7a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800d7a6:	d502      	bpl.n	800d7ae <__aeabi_l2d+0x16>
 800d7a8:	4240      	negs	r0, r0
 800d7aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d7ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d7b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d7b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800d7ba:	f43f aedc 	beq.w	800d576 <__adddf3+0xe6>
 800d7be:	f04f 0203 	mov.w	r2, #3
 800d7c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d7c6:	bf18      	it	ne
 800d7c8:	3203      	addne	r2, #3
 800d7ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d7ce:	bf18      	it	ne
 800d7d0:	3203      	addne	r2, #3
 800d7d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800d7d6:	f1c2 0320 	rsb	r3, r2, #32
 800d7da:	fa00 fc03 	lsl.w	ip, r0, r3
 800d7de:	fa20 f002 	lsr.w	r0, r0, r2
 800d7e2:	fa01 fe03 	lsl.w	lr, r1, r3
 800d7e6:	ea40 000e 	orr.w	r0, r0, lr
 800d7ea:	fa21 f102 	lsr.w	r1, r1, r2
 800d7ee:	4414      	add	r4, r2
 800d7f0:	e6c1      	b.n	800d576 <__adddf3+0xe6>
 800d7f2:	bf00      	nop

0800d7f4 <__aeabi_dmul>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800d7fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800d7fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d802:	bf1d      	ittte	ne
 800d804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d808:	ea94 0f0c 	teqne	r4, ip
 800d80c:	ea95 0f0c 	teqne	r5, ip
 800d810:	f000 f8de 	bleq	800d9d0 <__aeabi_dmul+0x1dc>
 800d814:	442c      	add	r4, r5
 800d816:	ea81 0603 	eor.w	r6, r1, r3
 800d81a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800d81e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800d822:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800d826:	bf18      	it	ne
 800d828:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800d82c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d834:	d038      	beq.n	800d8a8 <__aeabi_dmul+0xb4>
 800d836:	fba0 ce02 	umull	ip, lr, r0, r2
 800d83a:	f04f 0500 	mov.w	r5, #0
 800d83e:	fbe1 e502 	umlal	lr, r5, r1, r2
 800d842:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800d846:	fbe0 e503 	umlal	lr, r5, r0, r3
 800d84a:	f04f 0600 	mov.w	r6, #0
 800d84e:	fbe1 5603 	umlal	r5, r6, r1, r3
 800d852:	f09c 0f00 	teq	ip, #0
 800d856:	bf18      	it	ne
 800d858:	f04e 0e01 	orrne.w	lr, lr, #1
 800d85c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800d860:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800d864:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800d868:	d204      	bcs.n	800d874 <__aeabi_dmul+0x80>
 800d86a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800d86e:	416d      	adcs	r5, r5
 800d870:	eb46 0606 	adc.w	r6, r6, r6
 800d874:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800d878:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800d87c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800d880:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800d884:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800d888:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800d88c:	bf88      	it	hi
 800d88e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800d892:	d81e      	bhi.n	800d8d2 <__aeabi_dmul+0xde>
 800d894:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800d898:	bf08      	it	eq
 800d89a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800d89e:	f150 0000 	adcs.w	r0, r0, #0
 800d8a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800d8ac:	ea46 0101 	orr.w	r1, r6, r1
 800d8b0:	ea40 0002 	orr.w	r0, r0, r2
 800d8b4:	ea81 0103 	eor.w	r1, r1, r3
 800d8b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800d8bc:	bfc2      	ittt	gt
 800d8be:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d8c6:	bd70      	popgt	{r4, r5, r6, pc}
 800d8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d8cc:	f04f 0e00 	mov.w	lr, #0
 800d8d0:	3c01      	subs	r4, #1
 800d8d2:	f300 80ab 	bgt.w	800da2c <__aeabi_dmul+0x238>
 800d8d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800d8da:	bfde      	ittt	le
 800d8dc:	2000      	movle	r0, #0
 800d8de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800d8e2:	bd70      	pople	{r4, r5, r6, pc}
 800d8e4:	f1c4 0400 	rsb	r4, r4, #0
 800d8e8:	3c20      	subs	r4, #32
 800d8ea:	da35      	bge.n	800d958 <__aeabi_dmul+0x164>
 800d8ec:	340c      	adds	r4, #12
 800d8ee:	dc1b      	bgt.n	800d928 <__aeabi_dmul+0x134>
 800d8f0:	f104 0414 	add.w	r4, r4, #20
 800d8f4:	f1c4 0520 	rsb	r5, r4, #32
 800d8f8:	fa00 f305 	lsl.w	r3, r0, r5
 800d8fc:	fa20 f004 	lsr.w	r0, r0, r4
 800d900:	fa01 f205 	lsl.w	r2, r1, r5
 800d904:	ea40 0002 	orr.w	r0, r0, r2
 800d908:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800d90c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d910:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d914:	fa21 f604 	lsr.w	r6, r1, r4
 800d918:	eb42 0106 	adc.w	r1, r2, r6
 800d91c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d920:	bf08      	it	eq
 800d922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d926:	bd70      	pop	{r4, r5, r6, pc}
 800d928:	f1c4 040c 	rsb	r4, r4, #12
 800d92c:	f1c4 0520 	rsb	r5, r4, #32
 800d930:	fa00 f304 	lsl.w	r3, r0, r4
 800d934:	fa20 f005 	lsr.w	r0, r0, r5
 800d938:	fa01 f204 	lsl.w	r2, r1, r4
 800d93c:	ea40 0002 	orr.w	r0, r0, r2
 800d940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d948:	f141 0100 	adc.w	r1, r1, #0
 800d94c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d950:	bf08      	it	eq
 800d952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d956:	bd70      	pop	{r4, r5, r6, pc}
 800d958:	f1c4 0520 	rsb	r5, r4, #32
 800d95c:	fa00 f205 	lsl.w	r2, r0, r5
 800d960:	ea4e 0e02 	orr.w	lr, lr, r2
 800d964:	fa20 f304 	lsr.w	r3, r0, r4
 800d968:	fa01 f205 	lsl.w	r2, r1, r5
 800d96c:	ea43 0302 	orr.w	r3, r3, r2
 800d970:	fa21 f004 	lsr.w	r0, r1, r4
 800d974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d978:	fa21 f204 	lsr.w	r2, r1, r4
 800d97c:	ea20 0002 	bic.w	r0, r0, r2
 800d980:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800d984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d988:	bf08      	it	eq
 800d98a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	f094 0f00 	teq	r4, #0
 800d994:	d10f      	bne.n	800d9b6 <__aeabi_dmul+0x1c2>
 800d996:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800d99a:	0040      	lsls	r0, r0, #1
 800d99c:	eb41 0101 	adc.w	r1, r1, r1
 800d9a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d9a4:	bf08      	it	eq
 800d9a6:	3c01      	subeq	r4, #1
 800d9a8:	d0f7      	beq.n	800d99a <__aeabi_dmul+0x1a6>
 800d9aa:	ea41 0106 	orr.w	r1, r1, r6
 800d9ae:	f095 0f00 	teq	r5, #0
 800d9b2:	bf18      	it	ne
 800d9b4:	4770      	bxne	lr
 800d9b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800d9ba:	0052      	lsls	r2, r2, #1
 800d9bc:	eb43 0303 	adc.w	r3, r3, r3
 800d9c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800d9c4:	bf08      	it	eq
 800d9c6:	3d01      	subeq	r5, #1
 800d9c8:	d0f7      	beq.n	800d9ba <__aeabi_dmul+0x1c6>
 800d9ca:	ea43 0306 	orr.w	r3, r3, r6
 800d9ce:	4770      	bx	lr
 800d9d0:	ea94 0f0c 	teq	r4, ip
 800d9d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d9d8:	bf18      	it	ne
 800d9da:	ea95 0f0c 	teqne	r5, ip
 800d9de:	d00c      	beq.n	800d9fa <__aeabi_dmul+0x206>
 800d9e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d9e4:	bf18      	it	ne
 800d9e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d9ea:	d1d1      	bne.n	800d990 <__aeabi_dmul+0x19c>
 800d9ec:	ea81 0103 	eor.w	r1, r1, r3
 800d9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d9f4:	f04f 0000 	mov.w	r0, #0
 800d9f8:	bd70      	pop	{r4, r5, r6, pc}
 800d9fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d9fe:	bf06      	itte	eq
 800da00:	4610      	moveq	r0, r2
 800da02:	4619      	moveq	r1, r3
 800da04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800da08:	d019      	beq.n	800da3e <__aeabi_dmul+0x24a>
 800da0a:	ea94 0f0c 	teq	r4, ip
 800da0e:	d102      	bne.n	800da16 <__aeabi_dmul+0x222>
 800da10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800da14:	d113      	bne.n	800da3e <__aeabi_dmul+0x24a>
 800da16:	ea95 0f0c 	teq	r5, ip
 800da1a:	d105      	bne.n	800da28 <__aeabi_dmul+0x234>
 800da1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800da20:	bf1c      	itt	ne
 800da22:	4610      	movne	r0, r2
 800da24:	4619      	movne	r1, r3
 800da26:	d10a      	bne.n	800da3e <__aeabi_dmul+0x24a>
 800da28:	ea81 0103 	eor.w	r1, r1, r3
 800da2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800da30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800da34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da38:	f04f 0000 	mov.w	r0, #0
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
 800da3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800da42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800da46:	bd70      	pop	{r4, r5, r6, pc}

0800da48 <__aeabi_ddiv>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800da4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800da52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800da56:	bf1d      	ittte	ne
 800da58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800da5c:	ea94 0f0c 	teqne	r4, ip
 800da60:	ea95 0f0c 	teqne	r5, ip
 800da64:	f000 f8a7 	bleq	800dbb6 <__aeabi_ddiv+0x16e>
 800da68:	eba4 0405 	sub.w	r4, r4, r5
 800da6c:	ea81 0e03 	eor.w	lr, r1, r3
 800da70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800da74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800da78:	f000 8088 	beq.w	800db8c <__aeabi_ddiv+0x144>
 800da7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800da80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800da84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800da88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800da8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800da90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800da94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800da98:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800da9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800daa0:	429d      	cmp	r5, r3
 800daa2:	bf08      	it	eq
 800daa4:	4296      	cmpeq	r6, r2
 800daa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800daaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800daae:	d202      	bcs.n	800dab6 <__aeabi_ddiv+0x6e>
 800dab0:	085b      	lsrs	r3, r3, #1
 800dab2:	ea4f 0232 	mov.w	r2, r2, rrx
 800dab6:	1ab6      	subs	r6, r6, r2
 800dab8:	eb65 0503 	sbc.w	r5, r5, r3
 800dabc:	085b      	lsrs	r3, r3, #1
 800dabe:	ea4f 0232 	mov.w	r2, r2, rrx
 800dac2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dac6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800daca:	ebb6 0e02 	subs.w	lr, r6, r2
 800dace:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dad2:	bf22      	ittt	cs
 800dad4:	1ab6      	subcs	r6, r6, r2
 800dad6:	4675      	movcs	r5, lr
 800dad8:	ea40 000c 	orrcs.w	r0, r0, ip
 800dadc:	085b      	lsrs	r3, r3, #1
 800dade:	ea4f 0232 	mov.w	r2, r2, rrx
 800dae2:	ebb6 0e02 	subs.w	lr, r6, r2
 800dae6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800daea:	bf22      	ittt	cs
 800daec:	1ab6      	subcs	r6, r6, r2
 800daee:	4675      	movcs	r5, lr
 800daf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800daf4:	085b      	lsrs	r3, r3, #1
 800daf6:	ea4f 0232 	mov.w	r2, r2, rrx
 800dafa:	ebb6 0e02 	subs.w	lr, r6, r2
 800dafe:	eb75 0e03 	sbcs.w	lr, r5, r3
 800db02:	bf22      	ittt	cs
 800db04:	1ab6      	subcs	r6, r6, r2
 800db06:	4675      	movcs	r5, lr
 800db08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800db0c:	085b      	lsrs	r3, r3, #1
 800db0e:	ea4f 0232 	mov.w	r2, r2, rrx
 800db12:	ebb6 0e02 	subs.w	lr, r6, r2
 800db16:	eb75 0e03 	sbcs.w	lr, r5, r3
 800db1a:	bf22      	ittt	cs
 800db1c:	1ab6      	subcs	r6, r6, r2
 800db1e:	4675      	movcs	r5, lr
 800db20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800db24:	ea55 0e06 	orrs.w	lr, r5, r6
 800db28:	d018      	beq.n	800db5c <__aeabi_ddiv+0x114>
 800db2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800db2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800db32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800db36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800db3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800db3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800db42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800db46:	d1c0      	bne.n	800daca <__aeabi_ddiv+0x82>
 800db48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800db4c:	d10b      	bne.n	800db66 <__aeabi_ddiv+0x11e>
 800db4e:	ea41 0100 	orr.w	r1, r1, r0
 800db52:	f04f 0000 	mov.w	r0, #0
 800db56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800db5a:	e7b6      	b.n	800daca <__aeabi_ddiv+0x82>
 800db5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800db60:	bf04      	itt	eq
 800db62:	4301      	orreq	r1, r0
 800db64:	2000      	moveq	r0, #0
 800db66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800db6a:	bf88      	it	hi
 800db6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800db70:	f63f aeaf 	bhi.w	800d8d2 <__aeabi_dmul+0xde>
 800db74:	ebb5 0c03 	subs.w	ip, r5, r3
 800db78:	bf04      	itt	eq
 800db7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800db7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800db82:	f150 0000 	adcs.w	r0, r0, #0
 800db86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800db8a:	bd70      	pop	{r4, r5, r6, pc}
 800db8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800db90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800db94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800db98:	bfc2      	ittt	gt
 800db9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800db9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800dba2:	bd70      	popgt	{r4, r5, r6, pc}
 800dba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dba8:	f04f 0e00 	mov.w	lr, #0
 800dbac:	3c01      	subs	r4, #1
 800dbae:	e690      	b.n	800d8d2 <__aeabi_dmul+0xde>
 800dbb0:	ea45 0e06 	orr.w	lr, r5, r6
 800dbb4:	e68d      	b.n	800d8d2 <__aeabi_dmul+0xde>
 800dbb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dbba:	ea94 0f0c 	teq	r4, ip
 800dbbe:	bf08      	it	eq
 800dbc0:	ea95 0f0c 	teqeq	r5, ip
 800dbc4:	f43f af3b 	beq.w	800da3e <__aeabi_dmul+0x24a>
 800dbc8:	ea94 0f0c 	teq	r4, ip
 800dbcc:	d10a      	bne.n	800dbe4 <__aeabi_ddiv+0x19c>
 800dbce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800dbd2:	f47f af34 	bne.w	800da3e <__aeabi_dmul+0x24a>
 800dbd6:	ea95 0f0c 	teq	r5, ip
 800dbda:	f47f af25 	bne.w	800da28 <__aeabi_dmul+0x234>
 800dbde:	4610      	mov	r0, r2
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	e72c      	b.n	800da3e <__aeabi_dmul+0x24a>
 800dbe4:	ea95 0f0c 	teq	r5, ip
 800dbe8:	d106      	bne.n	800dbf8 <__aeabi_ddiv+0x1b0>
 800dbea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800dbee:	f43f aefd 	beq.w	800d9ec <__aeabi_dmul+0x1f8>
 800dbf2:	4610      	mov	r0, r2
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	e722      	b.n	800da3e <__aeabi_dmul+0x24a>
 800dbf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dbfc:	bf18      	it	ne
 800dbfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dc02:	f47f aec5 	bne.w	800d990 <__aeabi_dmul+0x19c>
 800dc06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800dc0a:	f47f af0d 	bne.w	800da28 <__aeabi_dmul+0x234>
 800dc0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800dc12:	f47f aeeb 	bne.w	800d9ec <__aeabi_dmul+0x1f8>
 800dc16:	e712      	b.n	800da3e <__aeabi_dmul+0x24a>

0800dc18 <__gedf2>:
 800dc18:	f04f 3cff 	mov.w	ip, #4294967295
 800dc1c:	e006      	b.n	800dc2c <__cmpdf2+0x4>
 800dc1e:	bf00      	nop

0800dc20 <__ledf2>:
 800dc20:	f04f 0c01 	mov.w	ip, #1
 800dc24:	e002      	b.n	800dc2c <__cmpdf2+0x4>
 800dc26:	bf00      	nop

0800dc28 <__cmpdf2>:
 800dc28:	f04f 0c01 	mov.w	ip, #1
 800dc2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800dc30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800dc34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800dc38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800dc3c:	bf18      	it	ne
 800dc3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800dc42:	d01b      	beq.n	800dc7c <__cmpdf2+0x54>
 800dc44:	b001      	add	sp, #4
 800dc46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800dc4a:	bf0c      	ite	eq
 800dc4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800dc50:	ea91 0f03 	teqne	r1, r3
 800dc54:	bf02      	ittt	eq
 800dc56:	ea90 0f02 	teqeq	r0, r2
 800dc5a:	2000      	moveq	r0, #0
 800dc5c:	4770      	bxeq	lr
 800dc5e:	f110 0f00 	cmn.w	r0, #0
 800dc62:	ea91 0f03 	teq	r1, r3
 800dc66:	bf58      	it	pl
 800dc68:	4299      	cmppl	r1, r3
 800dc6a:	bf08      	it	eq
 800dc6c:	4290      	cmpeq	r0, r2
 800dc6e:	bf2c      	ite	cs
 800dc70:	17d8      	asrcs	r0, r3, #31
 800dc72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800dc76:	f040 0001 	orr.w	r0, r0, #1
 800dc7a:	4770      	bx	lr
 800dc7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800dc80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800dc84:	d102      	bne.n	800dc8c <__cmpdf2+0x64>
 800dc86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800dc8a:	d107      	bne.n	800dc9c <__cmpdf2+0x74>
 800dc8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800dc90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800dc94:	d1d6      	bne.n	800dc44 <__cmpdf2+0x1c>
 800dc96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800dc9a:	d0d3      	beq.n	800dc44 <__cmpdf2+0x1c>
 800dc9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop

0800dca4 <__aeabi_cdrcmple>:
 800dca4:	4684      	mov	ip, r0
 800dca6:	4610      	mov	r0, r2
 800dca8:	4662      	mov	r2, ip
 800dcaa:	468c      	mov	ip, r1
 800dcac:	4619      	mov	r1, r3
 800dcae:	4663      	mov	r3, ip
 800dcb0:	e000      	b.n	800dcb4 <__aeabi_cdcmpeq>
 800dcb2:	bf00      	nop

0800dcb4 <__aeabi_cdcmpeq>:
 800dcb4:	b501      	push	{r0, lr}
 800dcb6:	f7ff ffb7 	bl	800dc28 <__cmpdf2>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	bf48      	it	mi
 800dcbe:	f110 0f00 	cmnmi.w	r0, #0
 800dcc2:	bd01      	pop	{r0, pc}

0800dcc4 <__aeabi_dcmpeq>:
 800dcc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dcc8:	f7ff fff4 	bl	800dcb4 <__aeabi_cdcmpeq>
 800dccc:	bf0c      	ite	eq
 800dcce:	2001      	moveq	r0, #1
 800dcd0:	2000      	movne	r0, #0
 800dcd2:	f85d fb08 	ldr.w	pc, [sp], #8
 800dcd6:	bf00      	nop

0800dcd8 <__aeabi_dcmplt>:
 800dcd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dcdc:	f7ff ffea 	bl	800dcb4 <__aeabi_cdcmpeq>
 800dce0:	bf34      	ite	cc
 800dce2:	2001      	movcc	r0, #1
 800dce4:	2000      	movcs	r0, #0
 800dce6:	f85d fb08 	ldr.w	pc, [sp], #8
 800dcea:	bf00      	nop

0800dcec <__aeabi_dcmple>:
 800dcec:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dcf0:	f7ff ffe0 	bl	800dcb4 <__aeabi_cdcmpeq>
 800dcf4:	bf94      	ite	ls
 800dcf6:	2001      	movls	r0, #1
 800dcf8:	2000      	movhi	r0, #0
 800dcfa:	f85d fb08 	ldr.w	pc, [sp], #8
 800dcfe:	bf00      	nop

0800dd00 <__aeabi_dcmpge>:
 800dd00:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd04:	f7ff ffce 	bl	800dca4 <__aeabi_cdrcmple>
 800dd08:	bf94      	ite	ls
 800dd0a:	2001      	movls	r0, #1
 800dd0c:	2000      	movhi	r0, #0
 800dd0e:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd12:	bf00      	nop

0800dd14 <__aeabi_dcmpgt>:
 800dd14:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd18:	f7ff ffc4 	bl	800dca4 <__aeabi_cdrcmple>
 800dd1c:	bf34      	ite	cc
 800dd1e:	2001      	movcc	r0, #1
 800dd20:	2000      	movcs	r0, #0
 800dd22:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd26:	bf00      	nop

0800dd28 <__aeabi_d2iz>:
 800dd28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800dd2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800dd30:	d215      	bcs.n	800dd5e <__aeabi_d2iz+0x36>
 800dd32:	d511      	bpl.n	800dd58 <__aeabi_d2iz+0x30>
 800dd34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800dd38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800dd3c:	d912      	bls.n	800dd64 <__aeabi_d2iz+0x3c>
 800dd3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800dd42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800dd4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800dd4e:	fa23 f002 	lsr.w	r0, r3, r2
 800dd52:	bf18      	it	ne
 800dd54:	4240      	negne	r0, r0
 800dd56:	4770      	bx	lr
 800dd58:	f04f 0000 	mov.w	r0, #0
 800dd5c:	4770      	bx	lr
 800dd5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800dd62:	d105      	bne.n	800dd70 <__aeabi_d2iz+0x48>
 800dd64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800dd68:	bf08      	it	eq
 800dd6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800dd6e:	4770      	bx	lr
 800dd70:	f04f 0000 	mov.w	r0, #0
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop

0800dd78 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800dd80:	f04f 0300 	mov.w	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	73bb      	strb	r3, [r7, #14]
 800dd8c:	f04f 030f 	mov.w	r3, #15
 800dd90:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	78db      	ldrb	r3, [r3, #3]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d045      	beq.n	800de26 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800dd9a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800dd9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	ea6f 0303 	mvn.w	r3, r3
 800dda8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddac:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ddb0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
 800ddb4:	f1c3 0304 	rsb	r3, r3, #4
 800ddb8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800ddba:	7b7a      	ldrb	r2, [r7, #13]
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	fa42 f303 	asr.w	r3, r2, r3
 800ddc2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	785b      	ldrb	r3, [r3, #1]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
 800ddcc:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	789a      	ldrb	r2, [r3, #2]
 800ddd6:	7b7b      	ldrb	r3, [r7, #13]
 800ddd8:	4013      	ands	r3, r2
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
 800dde4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dde8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800ddea:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800ddee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	7812      	ldrb	r2, [r2, #0]
 800ddf6:	189b      	adds	r3, r3, r2
 800ddf8:	7bfa      	ldrb	r2, [r7, #15]
 800ddfa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800ddfe:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800de02:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	7812      	ldrb	r2, [r2, #0]
 800de0a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800de0e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	7809      	ldrb	r1, [r1, #0]
 800de14:	f001 011f 	and.w	r1, r1, #31
 800de18:	f04f 0001 	mov.w	r0, #1
 800de1c:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800de20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800de24:	e014      	b.n	800de50 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800de26:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800de2a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	7812      	ldrb	r2, [r2, #0]
 800de32:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800de36:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800de38:	6879      	ldr	r1, [r7, #4]
 800de3a:	7809      	ldrb	r1, [r1, #0]
 800de3c:	f001 011f 	and.w	r1, r1, #31
 800de40:	f04f 0001 	mov.w	r0, #1
 800de44:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800de48:	f102 0220 	add.w	r2, r2, #32
 800de4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800de50:	f107 0714 	add.w	r7, r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	bc80      	pop	{r7}
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop

0800de5c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800de68:	f04f 0300 	mov.w	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800de6e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800de72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de76:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	18d3      	adds	r3, r2, r3
 800de7e:	f103 0308 	add.w	r3, r3, #8
 800de82:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	887a      	ldrh	r2, [r7, #2]
 800de88:	601a      	str	r2, [r3, #0]
}
 800de8a:	f107 0714 	add.w	r7, r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	bc80      	pop	{r7}
 800de92:	4770      	bx	lr

0800de94 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f023 0201 	bic.w	r2, r3, #1
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f04f 0200 	mov.w	r2, #0
 800deae:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f04f 0200 	mov.w	r2, #0
 800deb6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f04f 0200 	mov.w	r2, #0
 800debe:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f04f 0200 	mov.w	r2, #0
 800dec6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f04f 0200 	mov.w	r2, #0
 800dece:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f04f 0221 	mov.w	r2, #33	; 0x21
 800ded6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	f246 0310 	movw	r3, #24592	; 0x6010
 800dede:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d107      	bne.n	800def6 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800dee6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800deea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800deee:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800def2:	609a      	str	r2, [r3, #8]
 800def4:	e0eb      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	f246 0328 	movw	r3, #24616	; 0x6028
 800defc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df00:	429a      	cmp	r2, r3
 800df02:	d107      	bne.n	800df14 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800df04:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800df08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df0c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800df10:	609a      	str	r2, [r3, #8]
 800df12:	e0dc      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	f246 0340 	movw	r3, #24640	; 0x6040
 800df1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df1e:	429a      	cmp	r2, r3
 800df20:	d107      	bne.n	800df32 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800df22:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800df26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df2a:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800df2e:	609a      	str	r2, [r3, #8]
 800df30:	e0cd      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	f246 0358 	movw	r3, #24664	; 0x6058
 800df38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d107      	bne.n	800df50 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800df40:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800df44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df48:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800df4c:	609a      	str	r2, [r3, #8]
 800df4e:	e0be      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	f246 0370 	movw	r3, #24688	; 0x6070
 800df56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d109      	bne.n	800df72 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800df5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800df62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df66:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800df6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800df6e:	60da      	str	r2, [r3, #12]
 800df70:	e0ad      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	f246 0388 	movw	r3, #24712	; 0x6088
 800df78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d109      	bne.n	800df94 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800df80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800df84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df88:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800df8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800df90:	60da      	str	r2, [r3, #12]
 800df92:	e09c      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	f246 03a0 	movw	r3, #24736	; 0x60a0
 800df9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d109      	bne.n	800dfb6 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800dfa2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800dfa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dfaa:	f04f 0200 	mov.w	r2, #0
 800dfae:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800dfb2:	60da      	str	r2, [r3, #12]
 800dfb4:	e08b      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	f246 03b8 	movw	r3, #24760	; 0x60b8
 800dfbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d107      	bne.n	800dfd4 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800dfc4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800dfc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dfcc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800dfd0:	60da      	str	r2, [r3, #12]
 800dfd2:	e07c      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	f246 4310 	movw	r3, #25616	; 0x6410
 800dfda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d107      	bne.n	800dff2 <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800dfe2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800dfe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dfea:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800dfee:	609a      	str	r2, [r3, #8]
 800dff0:	e06d      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	f246 4328 	movw	r3, #25640	; 0x6428
 800dff8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d107      	bne.n	800e010 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800e000:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e008:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e00c:	609a      	str	r2, [r3, #8]
 800e00e:	e05e      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	f246 4340 	movw	r3, #25664	; 0x6440
 800e016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d107      	bne.n	800e02e <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800e01e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e022:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e026:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800e02a:	609a      	str	r2, [r3, #8]
 800e02c:	e04f      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	f246 4358 	movw	r3, #25688	; 0x6458
 800e034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e038:	429a      	cmp	r2, r3
 800e03a:	d107      	bne.n	800e04c <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800e03c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e040:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e044:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800e048:	609a      	str	r2, [r3, #8]
 800e04a:	e040      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	f246 4370 	movw	r3, #25712	; 0x6470
 800e052:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e056:	429a      	cmp	r2, r3
 800e058:	d109      	bne.n	800e06e <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800e05a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e05e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e062:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800e066:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e06a:	60da      	str	r2, [r3, #12]
 800e06c:	e02f      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	f246 4388 	movw	r3, #25736	; 0x6488
 800e074:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e078:	429a      	cmp	r2, r3
 800e07a:	d109      	bne.n	800e090 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800e07c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e080:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e084:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e088:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e08c:	60da      	str	r2, [r3, #12]
 800e08e:	e01e      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	f246 43a0 	movw	r3, #25760	; 0x64a0
 800e096:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d109      	bne.n	800e0b2 <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800e09e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e0a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800e0ae:	60da      	str	r2, [r3, #12]
 800e0b0:	e00d      	b.n	800e0ce <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	f246 43b8 	movw	r3, #25784	; 0x64b8
 800e0b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d106      	bne.n	800e0ce <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800e0c0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e0c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0c8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800e0cc:	60da      	str	r2, [r3, #12]
    }
  }
}
 800e0ce:	f107 070c 	add.w	r7, r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bc80      	pop	{r7}
 800e0d6:	4770      	bx	lr

0800e0d8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0e2:	f04f 0300 	mov.w	r3, #0
 800e0e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	f248 033f 	movw	r3, #32831	; 0x803f
 800e0f4:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e10a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800e116:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800e122:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e128:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800e12e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e134:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	4313      	orrs	r3, r2
 800e13a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f023 0307 	bic.w	r3, r3, #7
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e158:	4313      	orrs	r3, r2
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	4313      	orrs	r3, r2
 800e15e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	691a      	ldr	r2, [r3, #16]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	685a      	ldr	r2, [r3, #4]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	689a      	ldr	r2, [r3, #8]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	60da      	str	r2, [r3, #12]
}
 800e17e:	f107 0714 	add.w	r7, r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	bc80      	pop	{r7}
 800e186:	4770      	bx	lr

0800e188 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e194:	78fb      	ldrb	r3, [r7, #3]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d006      	beq.n	800e1a8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f043 0201 	orr.w	r2, r3, #1
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	e005      	b.n	800e1b4 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f023 0201 	bic.w	r2, r3, #1
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	601a      	str	r2, [r3, #0]
  }
}
 800e1b4:	f107 070c 	add.w	r7, r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bc80      	pop	{r7}
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop

0800e1c0 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d006      	beq.n	800e1de <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f043 0220 	orr.w	r2, r3, #32
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	601a      	str	r2, [r3, #0]
 800e1dc:	e005      	b.n	800e1ea <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f023 0220 	bic.w	r2, r3, #32
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	601a      	str	r2, [r3, #0]
  }
}
 800e1ea:	f107 070c 	add.w	r7, r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bc80      	pop	{r7}
 800e1f2:	4770      	bx	lr

0800e1f4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b085      	sub	sp, #20
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800e1fc:	f04f 0300 	mov.w	r3, #0
 800e200:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d003      	beq.n	800e218 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800e210:	f04f 0301 	mov.w	r3, #1
 800e214:	73fb      	strb	r3, [r7, #15]
 800e216:	e002      	b.n	800e21e <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800e218:	f04f 0300 	mov.w	r3, #0
 800e21c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e220:	4618      	mov	r0, r3
 800e222:	f107 0714 	add.w	r7, r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	bc80      	pop	{r7}
 800e22a:	4770      	bx	lr

0800e22c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b087      	sub	sp, #28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800e236:	f04f 0300 	mov.w	r3, #0
 800e23a:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800e23c:	f04f 0300 	mov.w	r3, #0
 800e240:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	f246 430f 	movw	r3, #25615	; 0x640f
 800e248:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d805      	bhi.n	800e25c <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800e250:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e258:	613b      	str	r3, [r7, #16]
 800e25a:	e004      	b.n	800e266 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800e25c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e260:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e264:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	60fb      	str	r3, [r7, #12]
 800e276:	e002      	b.n	800e27e <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	f640 737d 	movw	r3, #3965	; 0xf7d
 800e284:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800e288:	4013      	ands	r3, r2
 800e28a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	4013      	ands	r3, r2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d003      	beq.n	800e29e <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800e296:	f04f 0301 	mov.w	r3, #1
 800e29a:	75fb      	strb	r3, [r7, #23]
 800e29c:	e002      	b.n	800e2a4 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800e29e:	f04f 0300 	mov.w	r3, #0
 800e2a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800e2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f107 071c 	add.w	r7, r7, #28
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bc80      	pop	{r7}
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop

0800e2b4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	f246 430f 	movw	r3, #25615	; 0x640f
 800e2c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d805      	bhi.n	800e2d8 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800e2cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e2d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e2d4:	60fb      	str	r3, [r7, #12]
 800e2d6:	e004      	b.n	800e2e2 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800e2d8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e2dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e2e0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d008      	beq.n	800e2fe <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	f640 737d 	movw	r3, #3965	; 0xf7d
 800e2f2:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	60d3      	str	r3, [r2, #12]
 800e2fc:	e007      	b.n	800e30e <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	f640 737d 	movw	r3, #3965	; 0xf7d
 800e304:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800e308:	4013      	ands	r3, r2
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	6093      	str	r3, [r2, #8]
  }    
}
 800e30e:	f107 0714 	add.w	r7, r7, #20
 800e312:	46bd      	mov	sp, r7
 800e314:	bc80      	pop	{r7}
 800e316:	4770      	bx	lr

0800e318 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	4613      	mov	r3, r2
 800e324:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00f      	beq.n	800e350 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d006      	beq.n	800e344 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	695b      	ldr	r3, [r3, #20]
 800e33a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	615a      	str	r2, [r3, #20]
 800e342:	e005      	b.n	800e350 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	695b      	ldr	r3, [r3, #20]
 800e348:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2b80      	cmp	r3, #128	; 0x80
 800e354:	d017      	beq.n	800e386 <DMA_ITConfig+0x6e>
  {
    if (NewState != DISABLE)
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d009      	beq.n	800e370 <DMA_ITConfig+0x58>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	461a      	mov	r2, r3
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	f003 031e 	and.w	r3, r3, #30
 800e368:	431a      	orrs	r2, r3
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	e00a      	b.n	800e386 <DMA_ITConfig+0x6e>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	461a      	mov	r2, r3
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	f003 031e 	and.w	r3, r3, #30
 800e37c:	ea6f 0303 	mvn.w	r3, r3
 800e380:	401a      	ands	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800e386:	f107 0714 	add.w	r7, r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bc80      	pop	{r7}
 800e38e:	4770      	bx	lr

0800e390 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800e39a:	f04f 0300 	mov.w	r3, #0
 800e39e:	617b      	str	r3, [r7, #20]
 800e3a0:	f04f 0300 	mov.w	r3, #0
 800e3a4:	613b      	str	r3, [r7, #16]
 800e3a6:	f04f 0300 	mov.w	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800e3ac:	f04f 0300 	mov.w	r3, #0
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	e08e      	b.n	800e4d2 <GPIO_Init+0x142>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	f04f 0201 	mov.w	r2, #1
 800e3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e3be:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d17b      	bne.n	800e4ca <GPIO_Init+0x13a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3de:	f04f 0103 	mov.w	r1, #3
 800e3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3e6:	ea6f 0303 	mvn.w	r3, r3
 800e3ea:	401a      	ands	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	791b      	ldrb	r3, [r3, #4]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e402:	fa01 f303 	lsl.w	r3, r1, r3
 800e406:	431a      	orrs	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	791b      	ldrb	r3, [r3, #4]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d003      	beq.n	800e41c <GPIO_Init+0x8c>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	791b      	ldrb	r3, [r3, #4]
 800e418:	2b02      	cmp	r3, #2
 800e41a:	d138      	bne.n	800e48e <GPIO_Init+0xfe>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	461a      	mov	r2, r3
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e428:	f04f 0103 	mov.w	r1, #3
 800e42c:	fa01 f303 	lsl.w	r3, r1, r3
 800e430:	ea6f 0303 	mvn.w	r3, r3
 800e434:	401a      	ands	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	461a      	mov	r2, r3
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	795b      	ldrb	r3, [r3, #5]
 800e444:	4619      	mov	r1, r3
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e44c:	fa01 f303 	lsl.w	r3, r1, r3
 800e450:	431a      	orrs	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	461a      	mov	r2, r3
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	f04f 0101 	mov.w	r1, #1
 800e464:	fa01 f303 	lsl.w	r3, r1, r3
 800e468:	ea6f 0303 	mvn.w	r3, r3
 800e46c:	401a      	ands	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	461a      	mov	r2, r3
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	799b      	ldrb	r3, [r3, #6]
 800e47c:	4619      	mov	r1, r3
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	b29b      	uxth	r3, r3
 800e482:	fa01 f303 	lsl.w	r3, r1, r3
 800e486:	b29b      	uxth	r3, r3
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	461a      	mov	r2, r3
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	b29b      	uxth	r3, r3
 800e498:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e49c:	f04f 0103 	mov.w	r1, #3
 800e4a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a4:	ea6f 0303 	mvn.w	r3, r3
 800e4a8:	401a      	ands	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	79db      	ldrb	r3, [r3, #7]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4c4:	431a      	orrs	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f103 0301 	add.w	r3, r3, #1
 800e4d0:	617b      	str	r3, [r7, #20]
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b0f      	cmp	r3, #15
 800e4d6:	f67f af6d 	bls.w	800e3b4 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800e4da:	f107 071c 	add.w	r7, r7, #28
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bc80      	pop	{r7}
 800e4e2:	4770      	bx	lr

0800e4e4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	887b      	ldrh	r3, [r7, #2]
 800e4fe:	4013      	ands	r3, r2
 800e500:	2b00      	cmp	r3, #0
 800e502:	d003      	beq.n	800e50c <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 800e504:	f04f 0301 	mov.w	r3, #1
 800e508:	73fb      	strb	r3, [r7, #15]
 800e50a:	e002      	b.n	800e512 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800e50c:	f04f 0300 	mov.w	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e512:	7bfb      	ldrb	r3, [r7, #15]
}
 800e514:	4618      	mov	r0, r3
 800e516:	f107 0714 	add.w	r7, r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bc80      	pop	{r7}
 800e51e:	4770      	bx	lr

0800e520 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	b29b      	uxth	r3, r3
}
 800e52e:	4618      	mov	r0, r3
 800e530:	f107 070c 	add.w	r7, r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	bc80      	pop	{r7}
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop

0800e53c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	887a      	ldrh	r2, [r7, #2]
 800e54c:	831a      	strh	r2, [r3, #24]
}
 800e54e:	f107 070c 	add.w	r7, r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	bc80      	pop	{r7}
 800e556:	4770      	bx	lr

0800e558 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	887a      	ldrh	r2, [r7, #2]
 800e568:	835a      	strh	r2, [r3, #26]
}
 800e56a:	f107 070c 	add.w	r7, r7, #12
 800e56e:	46bd      	mov	sp, r7
 800e570:	bc80      	pop	{r7}
 800e572:	4770      	bx	lr

0800e574 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	4613      	mov	r3, r2
 800e57e:	460a      	mov	r2, r1
 800e580:	807a      	strh	r2, [r7, #2]
 800e582:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800e584:	f04f 0300 	mov.w	r3, #0
 800e588:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800e58a:	f04f 0300 	mov.w	r3, #0
 800e58e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800e590:	787a      	ldrb	r2, [r7, #1]
 800e592:	887b      	ldrh	r3, [r7, #2]
 800e594:	f003 0307 	and.w	r3, r3, #7
 800e598:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e59c:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800e5a2:	887b      	ldrh	r3, [r7, #2]
 800e5a4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	887b      	ldrh	r3, [r7, #2]
 800e5ae:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f101 0108 	add.w	r1, r1, #8
 800e5bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	887b      	ldrh	r3, [r7, #2]
 800e5c4:	f003 0307 	and.w	r3, r3, #7
 800e5c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e5cc:	f04f 000f 	mov.w	r0, #15
 800e5d0:	fa00 f303 	lsl.w	r3, r0, r3
 800e5d4:	ea6f 0303 	mvn.w	r3, r3
 800e5d8:	4019      	ands	r1, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f102 0208 	add.w	r2, r2, #8
 800e5e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800e5e4:	887b      	ldrh	r3, [r7, #2]
 800e5e6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f102 0208 	add.w	r2, r2, #8
 800e5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800e600:	887b      	ldrh	r3, [r7, #2]
 800e602:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e606:	b29b      	uxth	r3, r3
 800e608:	461a      	mov	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f102 0208 	add.w	r2, r2, #8
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800e616:	f107 0714 	add.w	r7, r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bc80      	pop	{r7}
 800e61e:	4770      	bx	lr

0800e620 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800e620:	b480      	push	{r7}
 800e622:	b089      	sub	sp, #36	; 0x24
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800e628:	f04f 0300 	mov.w	r3, #0
 800e62c:	61bb      	str	r3, [r7, #24]
 800e62e:	f04f 0300 	mov.w	r3, #0
 800e632:	617b      	str	r3, [r7, #20]
 800e634:	f04f 0300 	mov.w	r3, #0
 800e638:	61fb      	str	r3, [r7, #28]
 800e63a:	f04f 0302 	mov.w	r3, #2
 800e63e:	613b      	str	r3, [r7, #16]
 800e640:	f04f 0300 	mov.w	r3, #0
 800e644:	60fb      	str	r3, [r7, #12]
 800e646:	f04f 0302 	mov.w	r3, #2
 800e64a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800e64c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e650:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f003 030c 	and.w	r3, r3, #12
 800e65a:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d00a      	beq.n	800e678 <RCC_GetClocksFreq+0x58>
 800e662:	2b08      	cmp	r3, #8
 800e664:	d00f      	beq.n	800e686 <RCC_GetClocksFreq+0x66>
 800e666:	2b00      	cmp	r3, #0
 800e668:	d162      	bne.n	800e730 <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800e670:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800e674:	6013      	str	r3, [r2, #0]
      break;
 800e676:	e062      	b.n	800e73e <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800e67e:	f2c0 037a 	movt	r3, #122	; 0x7a
 800e682:	6013      	str	r3, [r2, #0]
      break;
 800e684:	e05b      	b.n	800e73e <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800e686:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e68a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e694:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800e698:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e69a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e69e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6a8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d015      	beq.n	800e6dc <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800e6b0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800e6b4:	f2c0 037a 	movt	r3, #122	; 0x7a
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e6c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e6ce:	400b      	ands	r3, r1
 800e6d0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800e6d4:	fb03 f302 	mul.w	r3, r3, r2
 800e6d8:	61fb      	str	r3, [r7, #28]
 800e6da:	e014      	b.n	800e706 <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800e6dc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800e6e0:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e6ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e6fa:	400b      	ands	r3, r1
 800e6fc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800e700:	fb03 f302 	mul.w	r3, r3, r2
 800e704:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800e706:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e70a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e714:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e718:	f103 0301 	add.w	r3, r3, #1
 800e71c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e720:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800e722:	69fa      	ldr	r2, [r7, #28]
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	fbb2 f2f3 	udiv	r2, r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	601a      	str	r2, [r3, #0]
      break;
 800e72e:	e006      	b.n	800e73e <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800e736:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800e73a:	6013      	str	r3, [r2, #0]
      break;
 800e73c:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800e73e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e742:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e74c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e754:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800e756:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800e75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e75e:	69ba      	ldr	r2, [r7, #24]
 800e760:	189b      	adds	r3, r3, r2
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	fa22 f203 	lsr.w	r2, r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800e776:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e77a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800e784:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800e78c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800e78e:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800e792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e796:	69ba      	ldr	r2, [r7, #24]
 800e798:	189b      	adds	r3, r3, r2
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	fa22 f203 	lsr.w	r2, r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800e7ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e7b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e7b6:	689b      	ldr	r3, [r3, #8]
 800e7b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e7bc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800e7c4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800e7c6:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800e7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7ce:	69ba      	ldr	r2, [r7, #24]
 800e7d0:	189b      	adds	r3, r3, r2
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	fa22 f203 	lsr.w	r2, r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	60da      	str	r2, [r3, #12]
}
 800e7e6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bc80      	pop	{r7}
 800e7ee:	4770      	bx	lr

0800e7f0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00d      	beq.n	800e81e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800e802:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e806:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e80a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e80e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e812:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e814:	4611      	mov	r1, r2
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	430a      	orrs	r2, r1
 800e81a:	631a      	str	r2, [r3, #48]	; 0x30
 800e81c:	e00e      	b.n	800e83c <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800e81e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e822:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e826:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e82a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e82e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e830:	4611      	mov	r1, r2
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	ea6f 0202 	mvn.w	r2, r2
 800e838:	400a      	ands	r2, r1
 800e83a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800e83c:	f107 070c 	add.w	r7, r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	bc80      	pop	{r7}
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop

0800e848 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	460b      	mov	r3, r1
 800e852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e854:	78fb      	ldrb	r3, [r7, #3]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00d      	beq.n	800e876 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800e85a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e85e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e862:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e866:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e86a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e86c:	4611      	mov	r1, r2
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	430a      	orrs	r2, r1
 800e872:	645a      	str	r2, [r3, #68]	; 0x44
 800e874:	e00e      	b.n	800e894 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800e876:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e87a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e87e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e882:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e886:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e888:	4611      	mov	r1, r2
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	ea6f 0202 	mvn.w	r2, r2
 800e890:	400a      	ands	r2, r1
 800e892:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800e894:	f107 070c 	add.w	r7, r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	bc80      	pop	{r7}
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop

0800e8a0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00d      	beq.n	800e8ce <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800e8b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e8b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e8ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e8be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e8c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	430a      	orrs	r2, r1
 800e8ca:	625a      	str	r2, [r3, #36]	; 0x24
 800e8cc:	e00e      	b.n	800e8ec <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800e8ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e8d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e8d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e8da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e8de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e8e0:	4611      	mov	r1, r2
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	ea6f 0202 	mvn.w	r2, r2
 800e8e8:	400a      	ands	r2, r1
 800e8ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e8ec:	f107 070c 	add.w	r7, r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bc80      	pop	{r7}
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop

0800e8f8 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800e8fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e900:	f04f 0101 	mov.w	r1, #1
 800e904:	f7ff ffcc 	bl	800e8a0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800e908:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e90c:	f04f 0100 	mov.w	r1, #0
 800e910:	f7ff ffc6 	bl	800e8a0 <RCC_APB2PeriphResetCmd>
}
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop

0800e918 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e920:	f04f 0300 	mov.w	r3, #0
 800e924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800e926:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e92a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800e938:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e93c:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	7d1b      	ldrb	r3, [r3, #20]
 800e942:	461a      	mov	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800e94e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800e95a:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	4313      	orrs	r3, r2
 800e966:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800e968:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e96c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	605a      	str	r2, [r3, #4]
}
 800e974:	f107 0714 	add.w	r7, r7, #20
 800e978:	46bd      	mov	sp, r7
 800e97a:	bc80      	pop	{r7}
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop

0800e980 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800e98a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800e98e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e992:	79fa      	ldrb	r2, [r7, #7]
 800e994:	601a      	str	r2, [r3, #0]
}
 800e996:	f107 070c 	add.w	r7, r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bc80      	pop	{r7}
 800e99e:	4770      	bx	lr

0800e9a0 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800e9a8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e9ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	601a      	str	r2, [r3, #0]
}
 800e9b4:	f107 070c 	add.w	r7, r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bc80      	pop	{r7}
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop

0800e9c0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800e9c4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e9c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f003 0303 	and.w	r3, r3, #3
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bc80      	pop	{r7}
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop

0800e9dc <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e9e4:	f04f 0300 	mov.w	r3, #0
 800e9e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800e9ea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e9ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	6812      	ldr	r2, [r2, #0]
 800e9f6:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800e9f8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e9fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ea0a:	f023 030f 	bic.w	r3, r3, #15
 800ea0e:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	685a      	ldr	r2, [r3, #4]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800ea2c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ea30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	60da      	str	r2, [r3, #12]
}
 800ea38:	f107 0714 	add.w	r7, r7, #20
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bc80      	pop	{r7}
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop

0800ea44 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800ea44:	b480      	push	{r7}
 800ea46:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800ea48:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ea4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	b2db      	uxtb	r3, r3
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bc80      	pop	{r7}
 800ea5a:	4770      	bx	lr

0800ea5c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800ea64:	f04f 0300 	mov.w	r3, #0
 800ea68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	f642 4314 	movw	r3, #11284	; 0x2c14
 800ea70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ea74:	18d3      	adds	r3, r2, r3
 800ea76:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f107 0714 	add.w	r7, r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bc80      	pop	{r7}
 800ea86:	4770      	bx	lr

0800ea88 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ea90:	f04f 0300 	mov.w	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800ea96:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ea9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	6812      	ldr	r2, [r2, #0]
 800eaa2:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800eaa4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eaa8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	6852      	ldr	r2, [r2, #4]
 800eab0:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800eab2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eab6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabc:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800eac4:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	689a      	ldr	r2, [r3, #8]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	431a      	orrs	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	695b      	ldr	r3, [r3, #20]
 800eada:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4313      	orrs	r3, r2
 800eae0:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800eae2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eae6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800eaee:	f107 0714 	add.w	r7, r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bc80      	pop	{r7}
 800eaf6:	4770      	bx	lr

0800eaf8 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800eaf8:	b480      	push	{r7}
 800eafa:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800eafc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bc80      	pop	{r7}
 800eb0e:	4770      	bx	lr

0800eb10 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4603      	mov	r3, r0
 800eb18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800eb1a:	f248 538c 	movw	r3, #34188	; 0x858c
 800eb1e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800eb22:	79fa      	ldrb	r2, [r7, #7]
 800eb24:	601a      	str	r2, [r3, #0]
}
 800eb26:	f107 070c 	add.w	r7, r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bc80      	pop	{r7}
 800eb2e:	4770      	bx	lr

0800eb30 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800eb3c:	78fb      	ldrb	r3, [r7, #3]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00d      	beq.n	800eb5e <SDIO_ITConfig+0x2e>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800eb42:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb46:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb4a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800eb4e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800eb52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800eb54:	4611      	mov	r1, r2
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	63da      	str	r2, [r3, #60]	; 0x3c
 800eb5c:	e00e      	b.n	800eb7c <SDIO_ITConfig+0x4c>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800eb5e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb66:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800eb6a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800eb6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800eb70:	4611      	mov	r1, r2
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	ea6f 0202 	mvn.w	r2, r2
 800eb78:	400a      	ands	r2, r1
 800eb7a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800eb7c:	f107 070c 	add.w	r7, r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bc80      	pop	{r7}
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop

0800eb88 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800eb90:	f04f 0300 	mov.w	r3, #0
 800eb94:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800eb96:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba0:	461a      	mov	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4013      	ands	r3, r2
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <SDIO_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800ebaa:	f04f 0301 	mov.w	r3, #1
 800ebae:	73fb      	strb	r3, [r7, #15]
 800ebb0:	e002      	b.n	800ebb8 <SDIO_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800ebb2:	f04f 0300 	mov.w	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ebb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f107 0714 	add.w	r7, r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bc80      	pop	{r7}
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop

0800ebc8 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800ebd0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ebd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ebdc:	f107 070c 	add.w	r7, r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bc80      	pop	{r7}
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop

0800ebe8 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800ebf0:	f04f 0300 	mov.w	r3, #0
 800ebf4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800ebf6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ebfa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ebfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec00:	461a      	mov	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4013      	ands	r3, r2
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <SDIO_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800ec0a:	f04f 0301 	mov.w	r3, #1
 800ec0e:	73fb      	strb	r3, [r7, #15]
 800ec10:	e002      	b.n	800ec18 <SDIO_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800ec12:	f04f 0300 	mov.w	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f107 0714 	add.w	r7, r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bc80      	pop	{r7}
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop

0800ec28 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800ec30:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ec34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ec3c:	f107 070c 	add.w	r7, r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bc80      	pop	{r7}
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop

0800ec48 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	460b      	mov	r3, r1
 800ec52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	887a      	ldrh	r2, [r7, #2]
 800ec58:	819a      	strh	r2, [r3, #12]
}
 800ec5a:	f107 070c 	add.w	r7, r7, #12
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bc80      	pop	{r7}
 800ec62:	4770      	bx	lr

0800ec64 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800ec70:	f04f 0300 	mov.w	r3, #0
 800ec74:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	891b      	ldrh	r3, [r3, #8]
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	887b      	ldrh	r3, [r7, #2]
 800ec7e:	4013      	ands	r3, r2
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d003      	beq.n	800ec8e <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800ec86:	f04f 0301 	mov.w	r3, #1
 800ec8a:	73fb      	strb	r3, [r7, #15]
 800ec8c:	e002      	b.n	800ec94 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800ec8e:	f04f 0300 	mov.w	r3, #0
 800ec92:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	f107 0714 	add.w	r7, r7, #20
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bc80      	pop	{r7}
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop

0800eca4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	4603      	mov	r3, r0
 800ecac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800ecae:	79fa      	ldrb	r2, [r7, #7]
 800ecb0:	f248 63c8 	movw	r3, #34504	; 0x86c8
 800ecb4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ecb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f04f 0101 	mov.w	r1, #1
 800ecc2:	f7ff fd95 	bl	800e7f0 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800ecc6:	79fa      	ldrb	r2, [r7, #7]
 800ecc8:	f248 63c0 	movw	r3, #34496	; 0x86c0
 800eccc:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ecd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ecd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800ecd6:	f04f 0301 	mov.w	r3, #1
 800ecda:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ecdc:	f04f 0300 	mov.w	r3, #0
 800ece0:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800ece2:	f04f 0301 	mov.w	r3, #1
 800ece6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800ece8:	f04f 0302 	mov.w	r3, #2
 800ecec:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800ecee:	79fa      	ldrb	r2, [r7, #7]
 800ecf0:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800ecf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ecfc:	f107 0308 	add.w	r3, r7, #8
 800ed00:	4610      	mov	r0, r2
 800ed02:	4619      	mov	r1, r3
 800ed04:	f7ff fb44 	bl	800e390 <GPIO_Init>
}
 800ed08:	f107 0710 	add.w	r7, r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800ed1a:	79fa      	ldrb	r2, [r7, #7]
 800ed1c:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800ed20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ed28:	79f9      	ldrb	r1, [r7, #7]
 800ed2a:	f248 63c0 	movw	r3, #34496	; 0x86c0
 800ed2e:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ed32:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800ed36:	8313      	strh	r3, [r2, #24]
}
 800ed38:	f107 070c 	add.w	r7, r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bc80      	pop	{r7}
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop

0800ed44 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800ed4e:	79fa      	ldrb	r2, [r7, #7]
 800ed50:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800ed54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ed5c:	79f9      	ldrb	r1, [r7, #7]
 800ed5e:	f248 63c0 	movw	r3, #34496	; 0x86c0
 800ed62:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ed66:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800ed6a:	8353      	strh	r3, [r2, #26]
}
 800ed6c:	f107 070c 	add.w	r7, r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bc80      	pop	{r7}
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop

0800ed78 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800ed7c:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800ed80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	f640 03f4 	movw	r3, #2292	; 0x8f4
 800ed8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4610      	mov	r0, r2
 800ed92:	4619      	mov	r1, r3
 800ed94:	f7ff fa4a 	bl	800e22c <DMA_GetFlagStatus>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 80ab 	beq.w	800eef6 <Audio_MAL_IRQHandler+0x17e>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800eda0:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800eda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 8081 	beq.w	800eeb2 <Audio_MAL_IRQHandler+0x13a>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800edb0:	bf00      	nop
 800edb2:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800edb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff fa19 	bl	800e1f4 <DMA_GetCmdStatus>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1f4      	bne.n	800edb2 <Audio_MAL_IRQHandler+0x3a>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800edc8:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800edcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	f640 03f4 	movw	r3, #2292	; 0x8f4
 800edd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4610      	mov	r0, r2
 800edde:	4619      	mov	r1, r3
 800ede0:	f7ff fa68 	bl	800e2b4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800ede4:	f241 7378 	movw	r3, #6008	; 0x1778
 800ede8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	461a      	mov	r2, r3
 800edf0:	f241 73b8 	movw	r3, #6072	; 0x17b8
 800edf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edf8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800edfa:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	bf28      	it	cs
 800ee0c:	461a      	movcs	r2, r3
 800ee0e:	f241 73b8 	movw	r3, #6072	; 0x17b8
 800ee12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee16:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800ee18:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800ee1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f241 71b8 	movw	r1, #6072	; 0x17b8
 800ee28:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ee2c:	f7ff f954 	bl	800e0d8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800ee30:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800ee34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f04f 0101 	mov.w	r1, #1
 800ee40:	f7ff f9a2 	bl	800e188 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800ee44:	f241 7378 	movw	r3, #6008	; 0x1778
 800ee48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800ee52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee56:	6819      	ldr	r1, [r3, #0]
 800ee58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee5c:	4299      	cmp	r1, r3
 800ee5e:	bf38      	it	cc
 800ee60:	460b      	movcc	r3, r1
 800ee62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee66:	18d2      	adds	r2, r2, r3
 800ee68:	f241 7378 	movw	r3, #6008	; 0x1778
 800ee6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee70:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800ee72:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800ee76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800ee80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee84:	6819      	ldr	r1, [r3, #0]
 800ee86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee8a:	4299      	cmp	r1, r3
 800ee8c:	bf38      	it	cc
 800ee8e:	460b      	movcc	r3, r1
 800ee90:	1ad2      	subs	r2, r2, r3
 800ee92:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800ee96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee9a:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800ee9c:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800eea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4618      	mov	r0, r3
 800eea8:	f04f 0101 	mov.w	r1, #1
 800eeac:	f7ff f96c 	bl	800e188 <DMA_Cmd>
 800eeb0:	e021      	b.n	800eef6 <Audio_MAL_IRQHandler+0x17e>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800eeb2:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800eeb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f04f 0100 	mov.w	r1, #0
 800eec2:	f7ff f961 	bl	800e188 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800eec6:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800eeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	f640 03f4 	movw	r3, #2292	; 0x8f4
 800eed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4610      	mov	r0, r2
 800eedc:	4619      	mov	r1, r3
 800eede:	f7ff f9e9 	bl	800e2b4 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800eee2:	f241 7378 	movw	r3, #6008	; 0x1778
 800eee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f04f 0100 	mov.w	r1, #0
 800eef2:	f006 ff1f 	bl	8015d34 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800eef8:	b580      	push	{r7, lr}
 800eefa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800eefc:	f7ff ff3c 	bl	800ed78 <Audio_MAL_IRQHandler>
}
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop

0800ef04 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800ef04:	b580      	push	{r7, lr}
 800ef06:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800ef08:	f7ff ff36 	bl	800ed78 <Audio_MAL_IRQHandler>
}
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop

0800ef10 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800ef14:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800ef18:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ef1c:	f04f 0102 	mov.w	r1, #2
 800ef20:	f7ff fea0 	bl	800ec64 <SPI_I2S_GetFlagStatus>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d018      	beq.n	800ef5c <SPI3_IRQHandler+0x4c>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800ef2a:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ef2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d107      	bne.n	800ef48 <SPI3_IRQHandler+0x38>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800ef38:	f006 fef4 	bl	8015d24 <EVAL_AUDIO_GetSampleCallBack>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f04f 0004 	mov.w	r0, #4
 800ef42:	4619      	mov	r1, r3
 800ef44:	f7fe ff8a 	bl	800de5c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800ef48:	f006 feec 	bl	8015d24 <EVAL_AUDIO_GetSampleCallBack>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800ef52:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ef56:	4619      	mov	r1, r3
 800ef58:	f7ff fe76 	bl	800ec48 <SPI_I2S_SendData>
  }
}
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop

0800ef60 <_ZNK5CTask7IsValidEv>:
	vTaskAllocateMPURegions(m_handleTask, xRegions);
#endif
}

inline
bool CTask::IsValid() const{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
	return m_handleTask != NULL;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	bf0c      	ite	eq
 800ef70:	2300      	moveq	r3, #0
 800ef72:	2301      	movne	r3, #1
 800ef74:	b2db      	uxtb	r3, r3
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	f107 070c 	add.w	r7, r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bc80      	pop	{r7}
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop

0800ef84 <_ZN5CTask6DetachEv>:

inline
xGenericHandle CTask::Detach() {
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
	xTaskHandle res = m_handleTask;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	60fb      	str	r3, [r7, #12]
	m_handleTask = NULL;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f04f 0200 	mov.w	r2, #0
 800ef98:	605a      	str	r2, [r3, #4]
	return res;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f107 0714 	add.w	r7, r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bc80      	pop	{r7}
 800efa6:	4770      	bx	lr

0800efa8 <_ZN12AManagedTask8OnCreateEPKctm>:
	 * @param uxPriority specifies the task priority.
	 *
	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation process
	 * is stopped and no FreeRTOS resource are allocated.
	 */
	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) { return pdTRUE; }
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	603b      	str	r3, [r7, #0]
 800efb4:	4613      	mov	r3, r2
 800efb6:	80fb      	strh	r3, [r7, #6]
 800efb8:	f04f 0301 	mov.w	r3, #1
 800efbc:	4618      	mov	r0, r3
 800efbe:	f107 0714 	add.w	r7, r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bc80      	pop	{r7}
 800efc6:	4770      	bx	lr

0800efc8 <_ZN6CMenueC1EP11CGraphicLCD>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f001 fb39 	bl	801064c <_ZN12AManagedTaskC1Ev>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a05      	ldr	r2, [pc, #20]	; (800eff4 <_ZN6CMenueC1EP11CGraphicLCD+0x2c>)
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	60da      	str	r2, [r3, #12]
}
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4618      	mov	r0, r3
 800efea:	f107 0708 	add.w	r7, r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	080186e0 	.word	0x080186e0

0800eff8 <_ZN6CMenueD1Ev>:

CMenue::~CMenue() {
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a0a      	ldr	r2, [pc, #40]	; (800f02c <_ZN6CMenueD1Ev+0x34>)
 800f004:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f001 fb3c 	bl	8010684 <_ZN12AManagedTaskD1Ev>
 800f00c:	f04f 0300 	mov.w	r3, #0
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	d002      	beq.n	800f020 <_ZN6CMenueD1Ev+0x28>
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f007 fa44 	bl	80164a8 <_ZdlPv>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4618      	mov	r0, r3
 800f024:	f107 0708 	add.w	r7, r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	080186e0 	.word	0x080186e0

0800f030 <_ZN6CMenueD0Ev>:


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
}

CMenue::~CMenue() {
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7ff ffdd 	bl	800eff8 <_ZN6CMenueD1Ev>
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f007 fa32 	bl	80164a8 <_ZdlPv>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4618      	mov	r0, r3
 800f048:	f107 0708 	add.w	r7, r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <_ZN6CMenue12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on success
  */
bool CMenue::HardwareInit(void){
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]

	return true;
 800f058:	f04f 0301 	mov.w	r3, #1
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	f107 070c 	add.w	r7, r7, #12
 800f062:	46bd      	mov	sp, r7
 800f064:	bc80      	pop	{r7}
 800f066:	4770      	bx	lr

0800f068 <_ZN6CMenue3RunEv>:
/**
  * @brief  task function for Menu
  * @param  None
  * @retval None
  */
void CMenue::Run(void){
 800f068:	b590      	push	{r4, r7, lr}
 800f06a:	b087      	sub	sp, #28
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	6078      	str	r0, [r7, #4]
	char buffer[4];
	int x = 0;
 800f070:	f04f 0300 	mov.w	r3, #0
 800f074:	60fb      	str	r3, [r7, #12]

	glcd->Init();
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f103 0320 	add.w	r3, r3, #32
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	68d2      	ldr	r2, [r2, #12]
 800f086:	4610      	mov	r0, r2
 800f088:	4798      	blx	r3
	glcd->Inverse(true);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	4618      	mov	r0, r3
 800f090:	f04f 0101 	mov.w	r1, #1
 800f094:	f000 f930 	bl	800f2f8 <_ZN11CGraphicLCD7InverseEb>
	glcd->Clear();
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	68d2      	ldr	r2, [r2, #12]
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3


	vTaskDelay(500/portTICK_RATE_MS);
 800f0a8:	f04f 0032 	mov.w	r0, #50	; 0x32
 800f0ac:	f001 fda6 	bl	8010bfc <vTaskDelay>
	glcd->WriteString("Introducing Project:",c_FontSansSerif12,5,5);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f103 0318 	add.w	r3, r3, #24
 800f0ba:	681c      	ldr	r4, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	f04f 0205 	mov.w	r2, #5
 800f0c4:	9200      	str	r2, [sp, #0]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f247 6180 	movw	r1, #30336	; 0x7680
 800f0cc:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f0d0:	f248 72e0 	movw	r2, #34784	; 0x87e0
 800f0d4:	f6c0 0201 	movt	r2, #2049	; 0x801
 800f0d8:	f04f 0305 	mov.w	r3, #5
 800f0dc:	47a0      	blx	r4

	vTaskDelay(1000/portTICK_RATE_MS);
 800f0de:	f04f 0064 	mov.w	r0, #100	; 0x64
 800f0e2:	f001 fd8b 	bl	8010bfc <vTaskDelay>
	glcd->WriteString("ThunderCryer",c_FontSansSerif26,3,35);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f103 0318 	add.w	r3, r3, #24
 800f0f0:	681c      	ldr	r4, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	f04f 0223 	mov.w	r2, #35	; 0x23
 800f0fa:	9200      	str	r2, [sp, #0]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f247 6198 	movw	r1, #30360	; 0x7698
 800f102:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f106:	f249 6204 	movw	r2, #38404	; 0x9604
 800f10a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800f10e:	f04f 0303 	mov.w	r3, #3
 800f112:	47a0      	blx	r4

	vTaskDelay(10000/portTICK_RATE_MS);
 800f114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f118:	f001 fd70 	bl	8010bfc <vTaskDelay>
	glcd->Clear();
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	68d2      	ldr	r2, [r2, #12]
 800f128:	4610      	mov	r0, r2
 800f12a:	4798      	blx	r3
	glcd->Window(2,2,100,60);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f103 0308 	add.w	r3, r3, #8
 800f136:	681c      	ldr	r4, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800f140:	9200      	str	r2, [sp, #0]
 800f142:	4618      	mov	r0, r3
 800f144:	f04f 0102 	mov.w	r1, #2
 800f148:	f04f 0202 	mov.w	r2, #2
 800f14c:	f04f 0364 	mov.w	r3, #100	; 0x64
 800f150:	47a0      	blx	r4
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f103 0318 	add.w	r3, r3, #24
 800f15c:	681c      	ldr	r4, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	f04f 0205 	mov.w	r2, #5
 800f166:	9200      	str	r2, [sp, #0]
 800f168:	4618      	mov	r0, r3
 800f16a:	f247 61a8 	movw	r1, #30376	; 0x76a8
 800f16e:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f172:	f249 6204 	movw	r2, #38404	; 0x9604
 800f176:	f6c0 0201 	movt	r2, #2049	; 0x801
 800f17a:	f04f 0305 	mov.w	r3, #5
 800f17e:	47a0      	blx	r4
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f103 0318 	add.w	r3, r3, #24
 800f18a:	681c      	ldr	r4, [r3, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	f04f 0228 	mov.w	r2, #40	; 0x28
 800f194:	9200      	str	r2, [sp, #0]
 800f196:	4618      	mov	r0, r3
 800f198:	f247 61b0 	movw	r1, #30384	; 0x76b0
 800f19c:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f1a0:	f248 7200 	movw	r2, #34560	; 0x8700
 800f1a4:	f6c0 0201 	movt	r2, #2049	; 0x801
 800f1a8:	f04f 0305 	mov.w	r3, #5
 800f1ac:	47a0      	blx	r4

	glcd->WriteString("Development in progress",c_FontNative,1,120);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f103 0318 	add.w	r3, r3, #24
 800f1b8:	681c      	ldr	r4, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	f04f 0278 	mov.w	r2, #120	; 0x78
 800f1c2:	9200      	str	r2, [sp, #0]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f247 61c0 	movw	r1, #30400	; 0x76c0
 800f1ca:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f1ce:	f248 7200 	movw	r2, #34560	; 0x8700
 800f1d2:	f6c0 0201 	movt	r2, #2049	; 0x801
 800f1d6:	f04f 0301 	mov.w	r3, #1
 800f1da:	47a0      	blx	r4

	while(1){
		if(x<60) {
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b3b      	cmp	r3, #59	; 0x3b
 800f1e0:	dc3b      	bgt.n	800f25a <_ZN6CMenue3RunEv+0x1f2>
			sprintf(buffer,"%02u",x);
 800f1e2:	f107 0308 	add.w	r3, r7, #8
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f247 61d8 	movw	r1, #30424	; 0x76d8
 800f1ec:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	f7f8 fe5b 	bl	8007eac <sprintf>
			glcd->SectorClear(75,7,20,20);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f103 0310 	add.w	r3, r3, #16
 800f200:	681c      	ldr	r4, [r3, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	f04f 0214 	mov.w	r2, #20
 800f20a:	9200      	str	r2, [sp, #0]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f04f 014b 	mov.w	r1, #75	; 0x4b
 800f212:	f04f 0207 	mov.w	r2, #7
 800f216:	f04f 0314 	mov.w	r3, #20
 800f21a:	47a0      	blx	r4
			glcd->WriteString(buffer,c_FontSansSerif12,75,7);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f103 0318 	add.w	r3, r3, #24
 800f226:	681c      	ldr	r4, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68da      	ldr	r2, [r3, #12]
 800f22c:	f107 0308 	add.w	r3, r7, #8
 800f230:	f04f 0107 	mov.w	r1, #7
 800f234:	9100      	str	r1, [sp, #0]
 800f236:	4610      	mov	r0, r2
 800f238:	4619      	mov	r1, r3
 800f23a:	f248 72e0 	movw	r2, #34784	; 0x87e0
 800f23e:	f6c0 0201 	movt	r2, #2049	; 0x801
 800f242:	f04f 034b 	mov.w	r3, #75	; 0x4b
 800f246:	47a0      	blx	r4
			x++;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f103 0301 	add.w	r3, r3, #1
 800f24e:	60fb      	str	r3, [r7, #12]
			vTaskDelay(1000/portTICK_RATE_MS);
 800f250:	f04f 0064 	mov.w	r0, #100	; 0x64
 800f254:	f001 fcd2 	bl	8010bfc <vTaskDelay>
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);

	glcd->WriteString("Development in progress",c_FontNative,1,120);

	while(1){
 800f258:	e7c0      	b.n	800f1dc <_ZN6CMenue3RunEv+0x174>
			glcd->SectorClear(75,7,20,20);
			glcd->WriteString(buffer,c_FontSansSerif12,75,7);
			x++;
			vTaskDelay(1000/portTICK_RATE_MS);
		} else
			x = 0;
 800f25a:	f04f 0300 	mov.w	r3, #0
 800f25e:	60fb      	str	r3, [r7, #12]
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);

	glcd->WriteString("Development in progress",c_FontNative,1,120);

	while(1){
 800f260:	e7bc      	b.n	800f1dc <_ZN6CMenue3RunEv+0x174>
 800f262:	bf00      	nop

0800f264 <_ZN11CGraphicLCDC1Ev>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

CGraphicLCD::CGraphicLCD() {
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a06      	ldr	r2, [pc, #24]	; (800f288 <_ZN11CGraphicLCDC1Ev+0x24>)
 800f270:	601a      	str	r2, [r3, #0]
	bInverse=false;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f04f 0200 	mov.w	r2, #0
 800f278:	711a      	strb	r2, [r3, #4]
}
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f107 070c 	add.w	r7, r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	bc80      	pop	{r7}
 800f286:	4770      	bx	lr
 800f288:	08018720 	.word	0x08018720

0800f28c <_ZN11CGraphicLCDD1Ev>:

CGraphicLCD::CGraphicLCD(bool inverse) {
	bInverse=inverse;
}

CGraphicLCD::~CGraphicLCD() {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a09      	ldr	r2, [pc, #36]	; (800f2bc <_ZN11CGraphicLCDD1Ev+0x30>)
 800f298:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800f29a:	f04f 0300 	mov.w	r3, #0
 800f29e:	f003 0301 	and.w	r3, r3, #1
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <_ZN11CGraphicLCDD1Ev+0x22>
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f007 f8fd 	bl	80164a8 <_ZdlPv>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f107 0708 	add.w	r7, r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	08018720 	.word	0x08018720

0800f2c0 <_ZN11CGraphicLCDD0Ev>:

CGraphicLCD::CGraphicLCD(bool inverse) {
	bInverse=inverse;
}

CGraphicLCD::~CGraphicLCD() {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff ffdf 	bl	800f28c <_ZN11CGraphicLCDD1Ev>
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f007 f8ea 	bl	80164a8 <_ZdlPv>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f107 0708 	add.w	r7, r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <_ZN11CGraphicLCD7InverseEv>:
/**
  * @brief gives inverted draw status
  * @param  None
  * @retval true on inverse mode
  */
bool CGraphicLCD::Inverse(){
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
	return bInverse;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	791b      	ldrb	r3, [r3, #4]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f107 070c 	add.w	r7, r7, #12
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bc80      	pop	{r7}
 800f2f6:	4770      	bx	lr

0800f2f8 <_ZN11CGraphicLCD7InverseEb>:
/**
  * @brief  sets inverted draw mode
  * @param  ture for inverted draw mode
  * @retval None
  */
void CGraphicLCD::Inverse(bool inverse){
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	460b      	mov	r3, r1
 800f302:	70fb      	strb	r3, [r7, #3]
	bInverse = inverse;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	78fa      	ldrb	r2, [r7, #3]
 800f308:	711a      	strb	r2, [r3, #4]
}
 800f30a:	f107 070c 	add.w	r7, r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	bc80      	pop	{r7}
 800f312:	4770      	bx	lr

0800f314 <_ZN13CT6963CDriverC1Ev>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CT6963CDriver::CT6963CDriver() {
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff ffa0 	bl	800f264 <_ZN11CGraphicLCDC1Ev>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a04      	ldr	r2, [pc, #16]	; (800f338 <_ZN13CT6963CDriverC1Ev+0x24>)
 800f328:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4618      	mov	r0, r3
 800f32e:	f107 0708 	add.w	r7, r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	08018758 	.word	0x08018758

0800f33c <_ZN13CT6963CDriverD1Ev>:

CT6963CDriver::~CT6963CDriver() {
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a0a      	ldr	r2, [pc, #40]	; (800f370 <_ZN13CT6963CDriverD1Ev+0x34>)
 800f348:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff ff9e 	bl	800f28c <_ZN11CGraphicLCDD1Ev>
 800f350:	f04f 0300 	mov.w	r3, #0
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <_ZN13CT6963CDriverD1Ev+0x28>
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f007 f8a2 	bl	80164a8 <_ZdlPv>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4618      	mov	r0, r3
 800f368:	f107 0708 	add.w	r7, r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	08018758 	.word	0x08018758

0800f374 <_ZN13CT6963CDriverD0Ev>:
CT6963CDriver::CT6963CDriver() {
	// TODO Auto-generated constructor stub

}

CT6963CDriver::~CT6963CDriver() {
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff ffdd 	bl	800f33c <_ZN13CT6963CDriverD1Ev>
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f007 f890 	bl	80164a8 <_ZdlPv>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f107 0708 	add.w	r7, r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <_ZN13CT6963CDriver4InitEv>:
/**
  * @brief  initializes Display controller
  * @param  None
  * @retval None
  */
void CT6963CDriver::Init(){
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]

	HardwareInit();
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	4798      	blx	r3

	Reset();
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	4798      	blx	r3

	// Graphic home address
	WriteData(GLCD_GRAPHIC_HOME & 0xFF);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f04f 01e0 	mov.w	r1, #224	; 0xe0
 800f3c8:	4798      	blx	r3
	WriteData(GLCD_GRAPHIC_HOME >> 8);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f04f 0101 	mov.w	r1, #1
 800f3da:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_HOME_ADDRESS);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f04f 0142 	mov.w	r1, #66	; 0x42
 800f3ec:	4798      	blx	r3

	//graphic line length
	WriteData(GLCD_GRAPHIC_AREA);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f04f 011e 	mov.w	r1, #30
 800f3fe:	4798      	blx	r3
	WriteData(0x00);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f04f 0100 	mov.w	r1, #0
 800f410:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_AREA);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f04f 0143 	mov.w	r1, #67	; 0x43
 800f422:	4798      	blx	r3

	//text home address
	WriteData(GLCD_TEXT_HOME & 0xFF);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f04f 0100 	mov.w	r1, #0
 800f434:	4798      	blx	r3
	WriteData(GLCD_TEXT_HOME >> 8);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f04f 0100 	mov.w	r1, #0
 800f446:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_HOME_ADDRESS);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f04f 0140 	mov.w	r1, #64	; 0x40
 800f458:	4798      	blx	r3

	//text line length
	WriteData(GLCD_TEXT_AREA);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f04f 011e 	mov.w	r1, #30
 800f46a:	4798      	blx	r3
	WriteData(0x00);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f04f 0100 	mov.w	r1, #0
 800f47c:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_AREA);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f04f 0141 	mov.w	r1, #65	; 0x41
 800f48e:	4798      	blx	r3

	//write offset register  (no effect)
	WriteData(GLCD_OFFSET_REGISTER);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f04f 0102 	mov.w	r1, #2
 800f4a0:	4798      	blx	r3
	WriteData(0x00);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f04f 0100 	mov.w	r1, #0
 800f4b2:	4798      	blx	r3
	WriteCommand(T6963_SET_OFFSET_REGISTER);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f04f 0122 	mov.w	r1, #34	; 0x22
 800f4c4:	4798      	blx	r3

	// display in XOR Mode
	WriteCommand(T6963_MODE_SET | 1);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f04f 0181 	mov.w	r1, #129	; 0x81
 800f4d6:	4798      	blx	r3

	//Graphic and Text mode
	WriteCommand(T6963_DISPLAY_MODE  | T6963_TEXT_DISPLAY_ON | T6963_GRAPHIC_DISPLAY_ON );
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f04f 019c 	mov.w	r1, #156	; 0x9c
 800f4e8:	4798      	blx	r3
}
 800f4ea:	f107 0708 	add.w	r7, r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop

0800f4f4 <_ZN13CT6963CDriver17SetAddressPointerEj>:
/**
  * @brief  set address pointer in T6963C
  * @param  address
  * @retval None
  */
void CT6963CDriver::SetAddressPointer(unsigned int address){
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
	address += 2; // display offset
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	f103 0302 	add.w	r3, r3, #2
 800f504:	603b      	str	r3, [r7, #0]
	WriteData(address & 0xFF);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	b2d2      	uxtb	r2, r2
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	4611      	mov	r1, r2
 800f518:	4798      	blx	r3
	WriteData(address >> 8);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800f52a:	b2d2      	uxtb	r2, r2
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	4611      	mov	r1, r2
 800f530:	4798      	blx	r3
	WriteCommand(T6963_SET_ADDRESS_POINTER);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f04f 0124 	mov.w	r1, #36	; 0x24
 800f542:	4798      	blx	r3
}
 800f544:	f107 0708 	add.w	r7, r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <_ZN13CT6963CDriver8TextGoToEhh>:
  * @brief  sets address pointer to specific text address
  * @param  column and line
  * @retval None
  */
void CT6963CDriver::TextGoTo(unsigned char x, unsigned char y)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	4613      	mov	r3, r2
 800f556:	460a      	mov	r2, r1
 800f558:	70fa      	strb	r2, [r7, #3]
 800f55a:	70bb      	strb	r3, [r7, #2]
	unsigned int address;

	address = GLCD_TEXT_HOME +  x + (GLCD_TEXT_AREA * y);
 800f55c:	78f9      	ldrb	r1, [r7, #3]
 800f55e:	78ba      	ldrb	r2, [r7, #2]
 800f560:	4613      	mov	r3, r2
 800f562:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f566:	1a9b      	subs	r3, r3, r2
 800f568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f56c:	18cb      	adds	r3, r1, r3
 800f56e:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	68f9      	ldr	r1, [r7, #12]
 800f574:	f7ff ffbe 	bl	800f4f4 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 800f578:	f107 0710 	add.w	r7, r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <_ZN13CT6963CDriver11GraphicGoToEhh>:
  * @brief  sets address pointer to specific pixel in graphics ram
  * @param  coordinates of the pixel byte
  * @retval None
  */
void CT6963CDriver::GraphicGoTo(unsigned char x, unsigned char y)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	4613      	mov	r3, r2
 800f58a:	460a      	mov	r2, r1
 800f58c:	70fa      	strb	r2, [r7, #3]
 800f58e:	70bb      	strb	r3, [r7, #2]
	unsigned int address;
	address = GLCD_GRAPHIC_HOME + ((x) / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
 800f590:	78fb      	ldrb	r3, [r7, #3]
 800f592:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f596:	b2db      	uxtb	r3, r3
 800f598:	4619      	mov	r1, r3
 800f59a:	78ba      	ldrb	r2, [r7, #2]
 800f59c:	4613      	mov	r3, r2
 800f59e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f5a2:	1a9b      	subs	r3, r3, r2
 800f5a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f5a8:	18cb      	adds	r3, r1, r3
 800f5aa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800f5ae:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	68f9      	ldr	r1, [r7, #12]
 800f5b4:	f7ff ff9e 	bl	800f4f4 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 800f5b8:	f107 0710 	add.w	r7, r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <_ZN13CT6963CDriver5ClearEv>:
/**
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void CT6963CDriver::Clear(){
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f5ce:	f7ff ff91 	bl	800f4f4 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 800f5d2:	f04f 0300 	mov.w	r3, #0
 800f5d6:	60fb      	str	r3, [r7, #12]
 800f5d8:	e015      	b.n	800f606 <_ZN13CT6963CDriver5ClearEv+0x46>
	{
		if(Inverse())
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7ff fe7f 	bl	800f2e0 <_ZN11CGraphicLCD7InverseEv>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d005      	beq.n	800f5f4 <_ZN13CT6963CDriver5ClearEv+0x34>
			WriteDisplayData(0xFF);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800f5ee:	f000 f835 	bl	800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>
 800f5f2:	e004      	b.n	800f5fe <_ZN13CT6963CDriver5ClearEv+0x3e>
		else
			WriteDisplayData(0x00);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f04f 0100 	mov.w	r1, #0
 800f5fa:	f000 f82f 	bl	800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>
void CT6963CDriver::Clear(){
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f103 0301 	add.w	r3, r3, #1
 800f604:	60fb      	str	r3, [r7, #12]
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	f640 63ff 	movw	r3, #3839	; 0xeff
 800f60c:	429a      	cmp	r2, r3
 800f60e:	bf8c      	ite	hi
 800f610:	2300      	movhi	r3, #0
 800f612:	2301      	movls	r3, #1
 800f614:	b2db      	uxtb	r3, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	d1df      	bne.n	800f5da <_ZN13CT6963CDriver5ClearEv+0x1a>
			WriteDisplayData(0xFF);
		else
			WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f04f 0100 	mov.w	r1, #0
 800f620:	f7ff ff68 	bl	800f4f4 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 800f624:	f04f 0300 	mov.w	r3, #0
 800f628:	60fb      	str	r3, [r7, #12]
 800f62a:	e008      	b.n	800f63e <_ZN13CT6963CDriver5ClearEv+0x7e>
	{
			WriteDisplayData(0x00);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f04f 0100 	mov.w	r1, #0
 800f632:	f000 f813 	bl	800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>
			WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f103 0301 	add.w	r3, r3, #1
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	f240 13df 	movw	r3, #479	; 0x1df
 800f644:	429a      	cmp	r2, r3
 800f646:	bf8c      	ite	hi
 800f648:	2300      	movhi	r3, #0
 800f64a:	2301      	movls	r3, #1
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d1ec      	bne.n	800f62c <_ZN13CT6963CDriver5ClearEv+0x6c>
	{
			WriteDisplayData(0x00);
	}
}
 800f652:	f107 0710 	add.w	r7, r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop

0800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>:
  * @brief  writes incremental data to display ram
  * @param  data byte
  * @retval None
  */
void CT6963CDriver::WriteDisplayData(unsigned char x)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	460b      	mov	r3, r1
 800f666:	70fb      	strb	r3, [r7, #3]
	WriteData(x);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	78fa      	ldrb	r2, [r7, #3]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	4611      	mov	r1, r2
 800f678:	4798      	blx	r3
	WriteCommand(T6963_DATA_WRITE_AND_INCREMENT);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800f68a:	4798      	blx	r3
}
 800f68c:	f107 0708 	add.w	r7, r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <_ZN13CT6963CDriver9WriteCharEc>:
  * @brief  writes single ASCII char to display
  * @param  ASCII char
  * @retval None
  */
void CT6963CDriver::WriteChar(char charCode)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	460b      	mov	r3, r1
 800f69e:	70fb      	strb	r3, [r7, #3]
	WriteDisplayData(charCode - 32);
 800f6a0:	78fb      	ldrb	r3, [r7, #3]
 800f6a2:	f1a3 0320 	sub.w	r3, r3, #32
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	f7ff ffd6 	bl	800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>
}
 800f6b0:	f107 0708 	add.w	r7, r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj>:
  * 		ground must be cleared
  * @param  null terminated string, font structure, x, y
  * @retval None
  */
void CT6963CDriver::WriteString(const char * str, const tFont &font,unsigned int x, unsigned int y)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b08c      	sub	sp, #48	; 0x30
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
 800f6c4:	603b      	str	r3, [r7, #0]
	unsigned int offset,width;
	unsigned int i,j,map,height,allwidth=0;
 800f6c6:	f04f 0300 	mov.w	r3, #0
 800f6ca:	623b      	str	r3, [r7, #32]

	// use internal Character generator
	if(font.glyph_height == 0){
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f040 80aa 	bne.w	800f82a <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x172>
		TextGoTo(x/GLCD_FONT_WIDTH, y/8);
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f6dc:	b2da      	uxtb	r2, r3
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	4611      	mov	r1, r2
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	f7ff ff2e 	bl	800f54c <_ZN13CT6963CDriver8TextGoToEhh>

		while(*str)
 800f6f0:	e009      	b.n	800f706 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x4e>
		{
			WriteChar(*str++);
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	f102 0201 	add.w	r2, r2, #1
 800f6fc:	60ba      	str	r2, [r7, #8]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	4619      	mov	r1, r3
 800f702:	f7ff ffc7 	bl	800f694 <_ZN13CT6963CDriver9WriteCharEc>

	// use internal Character generator
	if(font.glyph_height == 0){
		TextGoTo(x/GLCD_FONT_WIDTH, y/8);

		while(*str)
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	bf0c      	ite	eq
 800f70e:	2300      	moveq	r3, #0
 800f710:	2301      	movne	r3, #1
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1ec      	bne.n	800f6f2 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x3a>
 800f718:	e097      	b.n	800f84a <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x192>
	// generate fonts
	else {
		while((map = *str++))
		{
			// get char position in font table
			map = font.mapping_table[map];
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	68da      	ldr	r2, [r3, #12]
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	18d3      	adds	r3, r2, r3
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	61fb      	str	r3, [r7, #28]
			// determine char width
			width = font.glyph_width;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	62fb      	str	r3, [r7, #44]	; 0x2c
			// font has no constant width
			if(width == 0)
 800f72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d105      	bne.n	800f73e <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x86>
				width = font.width_table[map];
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	691a      	ldr	r2, [r3, #16]
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	18d3      	adds	r3, r2, r3
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	62fb      	str	r3, [r7, #44]	; 0x2c

			// char data offset
			offset = font.offset_table[map];
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	695a      	ldr	r2, [r3, #20]
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f748:	18d3      	adds	r3, r2, r3
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	61bb      	str	r3, [r7, #24]
			// height is ever constant
			height = font.glyph_height;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	617b      	str	r3, [r7, #20]

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
 800f754:	f04f 0300 	mov.w	r3, #0
 800f758:	627b      	str	r3, [r7, #36]	; 0x24
 800f75a:	e050      	b.n	800f7fe <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x146>
			{   // step through every single point of a line of the char
				for(i=0 ; i<width  ; i++)
 800f75c:	f04f 0300 	mov.w	r3, #0
 800f760:	62bb      	str	r3, [r7, #40]	; 0x28
 800f762:	e039      	b.n	800f7d8 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x120>
				{   //  the pixel needs to be set
					if( font.glyph_table[ offset+j+(i/8) ] & (1 << ( 7 - ( i % 8 ) ) ) )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	689a      	ldr	r2, [r3, #8]
 800f768:	69b9      	ldr	r1, [r7, #24]
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	18c9      	adds	r1, r1, r3
 800f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f770:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f774:	18cb      	adds	r3, r1, r3
 800f776:	18d3      	adds	r3, r2, r3
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	ea6f 0303 	mvn.w	r3, r3
 800f782:	f003 0307 	and.w	r3, r3, #7
 800f786:	fa42 f303 	asr.w	r3, r2, r3
 800f78a:	f003 0301 	and.w	r3, r3, #1
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b00      	cmp	r3, #0
 800f792:	d01d      	beq.n	800f7d0 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x118>
						SetPixel( x+i+allwidth , y+j/ (((width-1)/8)+1)  );
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	b2da      	uxtb	r2, r3
 800f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	18d3      	adds	r3, r2, r3
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	6a3b      	ldr	r3, [r7, #32]
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	18d3      	adds	r3, r2, r3
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800f7ae:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f7b2:	f103 0301 	add.w	r3, r3, #1
 800f7b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7b8:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7bc:	b2d9      	uxtb	r1, r3
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	18cb      	adds	r3, r1, r3
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f000 f842 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
			height = font.glyph_height;

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
			{   // step through every single point of a line of the char
				for(i=0 ; i<width  ; i++)
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	f103 0301 	add.w	r3, r3, #1
 800f7d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	bf2c      	ite	cs
 800f7e0:	2300      	movcs	r3, #0
 800f7e2:	2301      	movcc	r3, #1
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1bc      	bne.n	800f764 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0xac>
			offset = font.offset_table[map];
			// height is ever constant
			height = font.glyph_height;

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
 800f7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ec:	f103 33ff 	add.w	r3, r3, #4294967295
 800f7f0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	18d3      	adds	r3, r2, r3
 800f7f8:	f103 0301 	add.w	r3, r3, #1
 800f7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	f103 33ff 	add.w	r3, r3, #4294967295
 800f804:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f808:	f103 0301 	add.w	r3, r3, #1
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	fb02 f203 	mul.w	r2, r2, r3
 800f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f814:	429a      	cmp	r2, r3
 800f816:	bf94      	ite	ls
 800f818:	2300      	movls	r3, #0
 800f81a:	2301      	movhi	r3, #1
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d19c      	bne.n	800f75c <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0xa4>
					if( font.glyph_table[ offset+j+(i/8) ] & (1 << ( 7 - ( i % 8 ) ) ) )
						SetPixel( x+i+allwidth , y+j/ (((width-1)/8)+1)  );
				}//End i
			}// End j
			//remember string width to set the next char directly net to the previous
			allwidth+=width;
 800f822:	6a3a      	ldr	r2, [r7, #32]
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	18d3      	adds	r3, r2, r3
 800f828:	623b      	str	r3, [r7, #32]
		}

	}
	// generate fonts
	else {
		while((map = *str++))
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	61fb      	str	r3, [r7, #28]
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	2b00      	cmp	r3, #0
 800f834:	bf0c      	ite	eq
 800f836:	2300      	moveq	r3, #0
 800f838:	2301      	movne	r3, #1
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	68ba      	ldr	r2, [r7, #8]
 800f83e:	f102 0201 	add.w	r2, r2, #1
 800f842:	60ba      	str	r2, [r7, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	f47f af68 	bne.w	800f71a <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x62>
			allwidth+=width;
		}

	}

}
 800f84a:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop

0800f854 <_ZN13CT6963CDriver8SetPixelEhh>:
  * @brief  sets a pixel in graphics ram
  * @param  coordinates from upper left corner
  * @retval None
  */
void CT6963CDriver::SetPixel(unsigned char x, unsigned char y)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	4613      	mov	r3, r2
 800f85e:	460a      	mov	r2, r1
 800f860:	70fa      	strb	r2, [r7, #3]
 800f862:	70bb      	strb	r3, [r7, #2]
	unsigned char tmp;

	// do nothing for pixel out of range
	if(x > (GLCD_PIXELS_PER_LINE-1) || y > (GLCD_NUMBER_OF_LINES-1))
 800f864:	78fb      	ldrb	r3, [r7, #3]
 800f866:	2bef      	cmp	r3, #239	; 0xef
 800f868:	d832      	bhi.n	800f8d0 <_ZN13CT6963CDriver8SetPixelEhh+0x7c>
 800f86a:	78bb      	ldrb	r3, [r7, #2]
 800f86c:	b25b      	sxtb	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	db2e      	blt.n	800f8d0 <_ZN13CT6963CDriver8SetPixelEhh+0x7c>
		return;

	GraphicGoTo(x,y);
 800f872:	78fa      	ldrb	r2, [r7, #3]
 800f874:	78bb      	ldrb	r3, [r7, #2]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	4611      	mov	r1, r2
 800f87a:	461a      	mov	r2, r3
 800f87c:	f7ff fe80 	bl	800f580 <_ZN13CT6963CDriver11GraphicGoToEhh>


	tmp = (GLCD_FONT_WIDTH - 1) - (x % GLCD_FONT_WIDTH);
 800f880:	78fb      	ldrb	r3, [r7, #3]
 800f882:	ea6f 0303 	mvn.w	r3, r3
 800f886:	b2db      	uxtb	r3, r3
 800f888:	f003 0307 	and.w	r3, r3, #7
 800f88c:	73fb      	strb	r3, [r7, #15]

	if(Inverse())
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4618      	mov	r0, r3
 800f892:	f7ff fd25 	bl	800f2e0 <_ZN11CGraphicLCD7InverseEv>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00c      	beq.n	800f8b6 <_ZN13CT6963CDriver8SetPixelEhh+0x62>
		WriteCommand(T6963_BIT_RESET | tmp);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	7bfa      	ldrb	r2, [r7, #15]
 800f8a8:	f062 020f 	orn	r2, r2, #15
 800f8ac:	b2d2      	uxtb	r2, r2
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	4798      	blx	r3
 800f8b4:	e00d      	b.n	800f8d2 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
	else
		WriteCommand(T6963_BIT_SET | tmp);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	7bfa      	ldrb	r2, [r7, #15]
 800f8c2:	f062 0207 	orn	r2, r2, #7
 800f8c6:	b2d2      	uxtb	r2, r2
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	4798      	blx	r3
 800f8ce:	e000      	b.n	800f8d2 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
{
	unsigned char tmp;

	// do nothing for pixel out of range
	if(x > (GLCD_PIXELS_PER_LINE-1) || y > (GLCD_NUMBER_OF_LINES-1))
		return;
 800f8d0:	bf00      	nop

	if(Inverse())
		WriteCommand(T6963_BIT_RESET | tmp);
	else
		WriteCommand(T6963_BIT_SET | tmp);
}
 800f8d2:	f107 0710 	add.w	r7, r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop

0800f8dc <_ZN13CT6963CDriver4LineEjjjj>:
  * @retval None
  *
  * Copyright (c) Radoslaw Kwiecien, 2007r
  * http://en.radzio.dxp.pl/t6963/
  */
void CT6963CDriver::Line(unsigned int x1, unsigned int y1,unsigned int x2, unsigned int y2){
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08e      	sub	sp, #56	; 0x38
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
 800f8e8:	603b      	str	r3, [r7, #0]
	unsigned int CurrentX, CurrentY;
	int Xinc, Yinc,
	Dx, Dy, TwoDx, TwoDy,
	TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (x2-x1);
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	627b      	str	r3, [r7, #36]	; 0x24
	Dy = (y2-y1);
 800f8f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 800f8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fe:	18d3      	adds	r3, r2, r3
 800f900:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 800f902:	6a3a      	ldr	r2, [r7, #32]
 800f904:	6a3b      	ldr	r3, [r7, #32]
 800f906:	18d3      	adds	r3, r2, r3
 800f908:	61bb      	str	r3, [r7, #24]

	CurrentX = x1;
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentY = y1;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	633b      	str	r3, [r7, #48]	; 0x30

	Xinc = 1;
 800f912:	f04f 0301 	mov.w	r3, #1
 800f916:	62fb      	str	r3, [r7, #44]	; 0x2c
	Yinc = 1;
 800f918:	f04f 0301 	mov.w	r3, #1
 800f91c:	62bb      	str	r3, [r7, #40]	; 0x28

	if(Dx < 0)	// line from right to left
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	2b00      	cmp	r3, #0
 800f922:	da0a      	bge.n	800f93a <_ZN13CT6963CDriver4LineEjjjj+0x5e>
	{
		Xinc = -1;
 800f924:	f04f 33ff 	mov.w	r3, #4294967295
 800f928:	62fb      	str	r3, [r7, #44]	; 0x2c
		Dx = -Dx;
 800f92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92c:	f1c3 0300 	rsb	r3, r3, #0
 800f930:	627b      	str	r3, [r7, #36]	; 0x24
		TwoDx = -TwoDx;
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	f1c3 0300 	rsb	r3, r3, #0
 800f938:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) // line from bottom to top
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	da0a      	bge.n	800f956 <_ZN13CT6963CDriver4LineEjjjj+0x7a>
	{
		Yinc = -1;
 800f940:	f04f 33ff 	mov.w	r3, #4294967295
 800f944:	62bb      	str	r3, [r7, #40]	; 0x28
		Dy = -Dy;
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	f1c3 0300 	rsb	r3, r3, #0
 800f94c:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	f1c3 0300 	rsb	r3, r3, #0
 800f954:	61bb      	str	r3, [r7, #24]
	}

	SetPixel(x1,y1); // starting point
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	4611      	mov	r1, r2
 800f962:	461a      	mov	r2, r3
 800f964:	f7ff ff76 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>

	if ((Dx != 0) || (Dy != 0)) // line is vertical or horizontal
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d102      	bne.n	800f974 <_ZN13CT6963CDriver4LineEjjjj+0x98>
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d056      	beq.n	800fa22 <_ZN13CT6963CDriver4LineEjjjj+0x146>
	{

		if (Dy <= Dx) // x is running var
 800f974:	6a3a      	ldr	r2, [r7, #32]
 800f976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f978:	429a      	cmp	r2, r3
 800f97a:	dc29      	bgt.n	800f9d0 <_ZN13CT6963CDriver4LineEjjjj+0xf4>
		{
			TwoDxAccumulatedError = 0;
 800f97c:	f04f 0300 	mov.w	r3, #0
 800f980:	617b      	str	r3, [r7, #20]
			do
			{
				CurrentX += Xinc; // step X
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f986:	18d3      	adds	r3, r2, r3
 800f988:	637b      	str	r3, [r7, #52]	; 0x34
				TwoDxAccumulatedError += TwoDy;
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	18d3      	adds	r3, r2, r3
 800f990:	617b      	str	r3, [r7, #20]
				if(TwoDxAccumulatedError > Dx)  // Increase Y
 800f992:	697a      	ldr	r2, [r7, #20]
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	429a      	cmp	r2, r3
 800f998:	dd07      	ble.n	800f9aa <_ZN13CT6963CDriver4LineEjjjj+0xce>
				{
					CurrentY += Yinc;
 800f99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f99e:	18d3      	adds	r3, r2, r3
 800f9a0:	633b      	str	r3, [r7, #48]	; 0x30
					TwoDxAccumulatedError -= TwoDx;
 800f9a2:	697a      	ldr	r2, [r7, #20]
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	1ad3      	subs	r3, r2, r3
 800f9a8:	617b      	str	r3, [r7, #20]
				}
				SetPixel(CurrentX,CurrentY);
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	f7ff ff4c 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	{

		if (Dy <= Dx) // x is running var
		{
			TwoDxAccumulatedError = 0;
			do
 800f9bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	bf0c      	ite	eq
 800f9c4:	2300      	moveq	r3, #0
 800f9c6:	2301      	movne	r3, #1
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1d9      	bne.n	800f982 <_ZN13CT6963CDriver4LineEjjjj+0xa6>
 800f9ce:	e028      	b.n	800fa22 <_ZN13CT6963CDriver4LineEjjjj+0x146>
				SetPixel(CurrentX,CurrentY);
			}while (CurrentX != x2); // line finished
		}
		else // y is running var
		{
			TwoDyAccumulatedError = 0;
 800f9d0:	f04f 0300 	mov.w	r3, #0
 800f9d4:	613b      	str	r3, [r7, #16]
			do
			{
				CurrentY += Yinc;
 800f9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9da:	18d3      	adds	r3, r2, r3
 800f9dc:	633b      	str	r3, [r7, #48]	; 0x30
				TwoDyAccumulatedError += TwoDx;
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	18d3      	adds	r3, r2, r3
 800f9e4:	613b      	str	r3, [r7, #16]
				if(TwoDyAccumulatedError>Dy)
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	dd07      	ble.n	800f9fe <_ZN13CT6963CDriver4LineEjjjj+0x122>
				{
					CurrentX += Xinc;
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9f2:	18d3      	adds	r3, r2, r3
 800f9f4:	637b      	str	r3, [r7, #52]	; 0x34
					TwoDyAccumulatedError -= TwoDy;
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	613b      	str	r3, [r7, #16]
				}
				SetPixel(CurrentX,CurrentY);
 800f9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	4611      	mov	r1, r2
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	f7ff ff22 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
			}while (CurrentX != x2); // line finished
		}
		else // y is running var
		{
			TwoDyAccumulatedError = 0;
			do
 800fa10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa14:	429a      	cmp	r2, r3
 800fa16:	bf0c      	ite	eq
 800fa18:	2300      	moveq	r3, #0
 800fa1a:	2301      	movne	r3, #1
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1d9      	bne.n	800f9d6 <_ZN13CT6963CDriver4LineEjjjj+0xfa>
				}
				SetPixel(CurrentX,CurrentY);
			}while (CurrentY != y2); // line finished
		}
	}
}
 800fa22:	f107 0738 	add.w	r7, r7, #56	; 0x38
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop

0800fa2c <_ZN13CT6963CDriver6WindowEjjjj>:
/**
  * @brief  draw a window with upper left corner at (x,y) and specified width and height, edges round or square
  * @param  x1,y1,width,heigth, edge type enum
  * @retval None
  */
void CT6963CDriver::Window(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 800fa2c:	b5b0      	push	{r4, r5, r7, lr}
 800fa2e:	b088      	sub	sp, #32
 800fa30:	af02      	add	r7, sp, #8
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	603b      	str	r3, [r7, #0]
	unsigned int i;

	Rectangle(x+3,y,width-4,4,true); // filled top bar
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f103 030c 	add.w	r3, r3, #12
 800fa42:	681c      	ldr	r4, [r3, #0]
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	f103 0203 	add.w	r2, r3, #3
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	f1a3 0304 	sub.w	r3, r3, #4
 800fa50:	f04f 0104 	mov.w	r1, #4
 800fa54:	9100      	str	r1, [sp, #0]
 800fa56:	f04f 0101 	mov.w	r1, #1
 800fa5a:	9101      	str	r1, [sp, #4]
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	4611      	mov	r1, r2
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	47a0      	blx	r4
	Line(x,y+4,x,y+height-4);			// left border
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f103 0304 	add.w	r3, r3, #4
 800fa6c:	681c      	ldr	r4, [r3, #0]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f103 0304 	add.w	r3, r3, #4
 800fa74:	6879      	ldr	r1, [r7, #4]
 800fa76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa78:	188a      	adds	r2, r1, r2
 800fa7a:	f1a2 0204 	sub.w	r2, r2, #4
 800fa7e:	9200      	str	r2, [sp, #0]
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	68b9      	ldr	r1, [r7, #8]
 800fa84:	461a      	mov	r2, r3
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	47a0      	blx	r4
	Line(x+width,y+4,x+width,y+height-4);// right border
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f103 0304 	add.w	r3, r3, #4
 800fa92:	681c      	ldr	r4, [r3, #0]
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	18d1      	adds	r1, r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f103 0204 	add.w	r2, r3, #4
 800faa0:	68b8      	ldr	r0, [r7, #8]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	18c3      	adds	r3, r0, r3
 800faa6:	687d      	ldr	r5, [r7, #4]
 800faa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faaa:	1828      	adds	r0, r5, r0
 800faac:	f1a0 0004 	sub.w	r0, r0, #4
 800fab0:	9000      	str	r0, [sp, #0]
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	47a0      	blx	r4
	Line(x+4,y+height,x+width-5,y+height);// bottom border
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f103 0304 	add.w	r3, r3, #4
 800fabe:	681c      	ldr	r4, [r3, #0]
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	f103 0104 	add.w	r1, r3, #4
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faca:	18d2      	adds	r2, r2, r3
 800facc:	68b8      	ldr	r0, [r7, #8]
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	18c3      	adds	r3, r0, r3
 800fad2:	f1a3 0305 	sub.w	r3, r3, #5
 800fad6:	687d      	ldr	r5, [r7, #4]
 800fad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fada:	1828      	adds	r0, r5, r0
 800fadc:	9000      	str	r0, [sp, #0]
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	47a0      	blx	r4

	for(i=1;i<3;i++){
 800fae2:	f04f 0301 	mov.w	r3, #1
 800fae6:	617b      	str	r3, [r7, #20]
 800fae8:	e04b      	b.n	800fb82 <_ZN13CT6963CDriver6WindowEjjjj+0x156>
		// upper left
		SetPixel(x+i,y+3);
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	b2da      	uxtb	r2, r3
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	18d3      	adds	r3, r2, r3
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	f103 0303 	add.w	r3, r3, #3
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	4611      	mov	r1, r2
 800fb04:	461a      	mov	r2, r3
 800fb06:	f7ff fea5 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+i,y+2);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	18d3      	adds	r3, r2, r3
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	f103 0302 	add.w	r3, r3, #2
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	4611      	mov	r1, r2
 800fb24:	461a      	mov	r2, r3
 800fb26:	f7ff fe95 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>

		// upper right
		SetPixel(x+width-i,y+3);
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	18d3      	adds	r3, r2, r3
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	b2da      	uxtb	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	f103 0303 	add.w	r3, r3, #3
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	f7ff fe81 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+width-i,y+2);
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	18d3      	adds	r3, r2, r3
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	f103 0302 	add.w	r3, r3, #2
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	4611      	mov	r1, r2
 800fb74:	461a      	mov	r2, r3
 800fb76:	f7ff fe6d 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	Rectangle(x+3,y,width-4,4,true); // filled top bar
	Line(x,y+4,x,y+height-4);			// left border
	Line(x+width,y+4,x+width,y+height-4);// right border
	Line(x+4,y+height,x+width-5,y+height);// bottom border

	for(i=1;i<3;i++){
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	f103 0301 	add.w	r3, r3, #1
 800fb80:	617b      	str	r3, [r7, #20]
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	bf8c      	ite	hi
 800fb88:	2300      	movhi	r3, #0
 800fb8a:	2301      	movls	r3, #1
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1ab      	bne.n	800faea <_ZN13CT6963CDriver6WindowEjjjj+0xbe>
		SetPixel(x+width-i,y+3);
		SetPixel(x+width-i,y+2);
	}

	// upper left
	SetPixel(x+3,y+1);
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	f103 0303 	add.w	r3, r3, #3
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	f103 0301 	add.w	r3, r3, #1
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	4611      	mov	r1, r2
 800fbaa:	461a      	mov	r2, r3
 800fbac:	f7ff fe52 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+1);
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	f103 0302 	add.w	r3, r3, #2
 800fbb8:	b2da      	uxtb	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	f103 0301 	add.w	r3, r3, #1
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	461a      	mov	r2, r3
 800fbca:	f7ff fe43 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>

	// upper right
	SetPixel(x+width-3,y+1);
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	b2da      	uxtb	r2, r3
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	18d3      	adds	r3, r2, r3
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	f1a3 0303 	sub.w	r3, r3, #3
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	f103 0301 	add.w	r3, r3, #1
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	4611      	mov	r1, r2
 800fbee:	461a      	mov	r2, r3
 800fbf0:	f7ff fe30 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-2,y+1);
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	18d3      	adds	r3, r2, r3
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	f1a3 0302 	sub.w	r3, r3, #2
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	f103 0301 	add.w	r3, r3, #1
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	4611      	mov	r1, r2
 800fc14:	461a      	mov	r2, r3
 800fc16:	f7ff fe1d 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>


	// bottom left
	SetPixel(x+1,y+height-2);
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	f103 0301 	add.w	r3, r3, #1
 800fc22:	b2da      	uxtb	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	b2d9      	uxtb	r1, r3
 800fc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	18cb      	adds	r3, r1, r3
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	f1a3 0302 	sub.w	r3, r3, #2
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	4611      	mov	r1, r2
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	f7ff fe0a 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+1,y+height-3);
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	f103 0301 	add.w	r3, r3, #1
 800fc48:	b2da      	uxtb	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	b2d9      	uxtb	r1, r3
 800fc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	18cb      	adds	r3, r1, r3
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	f1a3 0303 	sub.w	r3, r3, #3
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	4611      	mov	r1, r2
 800fc60:	461a      	mov	r2, r3
 800fc62:	f7ff fdf7 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>

	// bottom left
	SetPixel(x+3,y+height-1);
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	f103 0303 	add.w	r3, r3, #3
 800fc6e:	b2da      	uxtb	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	b2d9      	uxtb	r1, r3
 800fc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	18cb      	adds	r3, r1, r3
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	68f8      	ldr	r0, [r7, #12]
 800fc84:	4611      	mov	r1, r2
 800fc86:	461a      	mov	r2, r3
 800fc88:	f7ff fde4 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+height-1);
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	f103 0302 	add.w	r3, r3, #2
 800fc94:	b2da      	uxtb	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	b2d9      	uxtb	r1, r3
 800fc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	18cb      	adds	r3, r1, r3
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	f103 33ff 	add.w	r3, r3, #4294967295
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	4611      	mov	r1, r2
 800fcac:	461a      	mov	r2, r3
 800fcae:	f7ff fdd1 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>


	// bottom right
	SetPixel(x+width-1,y+height-2);
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	18d3      	adds	r3, r2, r3
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	f103 33ff 	add.w	r3, r3, #4294967295
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	b2d9      	uxtb	r1, r3
 800fcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	18cb      	adds	r3, r1, r3
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	f1a3 0302 	sub.w	r3, r3, #2
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	4611      	mov	r1, r2
 800fcda:	461a      	mov	r2, r3
 800fcdc:	f7ff fdba 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-1,y+height-3);
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	18d3      	adds	r3, r2, r3
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f103 33ff 	add.w	r3, r3, #4294967295
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	b2d9      	uxtb	r1, r3
 800fcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	18cb      	adds	r3, r1, r3
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	f1a3 0303 	sub.w	r3, r3, #3
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	4611      	mov	r1, r2
 800fd08:	461a      	mov	r2, r3
 800fd0a:	f7ff fda3 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>

	// bottom right
	SetPixel(x+width-2,y+height-1);
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	b2da      	uxtb	r2, r3
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	18d3      	adds	r3, r2, r3
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	f1a3 0302 	sub.w	r3, r3, #2
 800fd1e:	b2da      	uxtb	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	b2d9      	uxtb	r1, r3
 800fd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	18cb      	adds	r3, r1, r3
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	4611      	mov	r1, r2
 800fd36:	461a      	mov	r2, r3
 800fd38:	f7ff fd8c 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-3,y+height-1);
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	18d3      	adds	r3, r2, r3
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	f1a3 0303 	sub.w	r3, r3, #3
 800fd4c:	b2da      	uxtb	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	b2d9      	uxtb	r1, r3
 800fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	18cb      	adds	r3, r1, r3
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	4611      	mov	r1, r2
 800fd64:	461a      	mov	r2, r3
 800fd66:	f7ff fd75 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>



}
 800fd6a:	f107 0718 	add.w	r7, r7, #24
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bdb0      	pop	{r4, r5, r7, pc}
 800fd72:	bf00      	nop

0800fd74 <_ZN13CT6963CDriver9RectangleEjjjjb>:
/**
  * @brief  draw an rectangle with upper left corner at (x,y) and specified width and height
  * @param  x1,y1,width,heigth,  true for filled
  * @retval None
  */
void CT6963CDriver::Rectangle(unsigned int x,unsigned int y,unsigned int width,unsigned int height,  bool fill){
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	603b      	str	r3, [r7, #0]
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
 800fd82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d031      	beq.n	800fdee <_ZN13CT6963CDriver9RectangleEjjjjb+0x7a>
		//lines
		for (i=0;i<height;i++){
 800fd8a:	f04f 0300 	mov.w	r3, #0
 800fd8e:	75fb      	strb	r3, [r7, #23]
 800fd90:	e023      	b.n	800fdda <_ZN13CT6963CDriver9RectangleEjjjjb+0x66>
			// columns
			for (k=0;k<width;k++) {
 800fd92:	f04f 0300 	mov.w	r3, #0
 800fd96:	75bb      	strb	r3, [r7, #22]
 800fd98:	e012      	b.n	800fdc0 <_ZN13CT6963CDriver9RectangleEjjjjb+0x4c>
				SetPixel(x+k,y+i);
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	7dbb      	ldrb	r3, [r7, #22]
 800fda0:	18d3      	adds	r3, r2, r3
 800fda2:	b2da      	uxtb	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	b2d9      	uxtb	r1, r3
 800fda8:	7dfb      	ldrb	r3, [r7, #23]
 800fdaa:	18cb      	adds	r3, r1, r3
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	f7ff fd4e 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
			// columns
			for (k=0;k<width;k++) {
 800fdb8:	7dbb      	ldrb	r3, [r7, #22]
 800fdba:	f103 0301 	add.w	r3, r3, #1
 800fdbe:	75bb      	strb	r3, [r7, #22]
 800fdc0:	7dba      	ldrb	r2, [r7, #22]
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	bf2c      	ite	cs
 800fdc8:	2300      	movcs	r3, #0
 800fdca:	2301      	movcc	r3, #1
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1e3      	bne.n	800fd9a <_ZN13CT6963CDriver9RectangleEjjjjb+0x26>
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
 800fdd2:	7dfb      	ldrb	r3, [r7, #23]
 800fdd4:	f103 0301 	add.w	r3, r3, #1
 800fdd8:	75fb      	strb	r3, [r7, #23]
 800fdda:	7dfa      	ldrb	r2, [r7, #23]
 800fddc:	6a3b      	ldr	r3, [r7, #32]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	bf2c      	ite	cs
 800fde2:	2300      	movcs	r3, #0
 800fde4:	2301      	movcc	r3, #1
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1d2      	bne.n	800fd92 <_ZN13CT6963CDriver9RectangleEjjjjb+0x1e>
 800fdec:	e05f      	b.n	800feae <_ZN13CT6963CDriver9RectangleEjjjjb+0x13a>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 800fdee:	f04f 0300 	mov.w	r3, #0
 800fdf2:	75fb      	strb	r3, [r7, #23]
 800fdf4:	e022      	b.n	800fe3c <_ZN13CT6963CDriver9RectangleEjjjjb+0xc8>
			SetPixel(x, y + i);
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	b2da      	uxtb	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	b2d9      	uxtb	r1, r3
 800fdfe:	7dfb      	ldrb	r3, [r7, #23]
 800fe00:	18cb      	adds	r3, r1, r3
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	4611      	mov	r1, r2
 800fe08:	461a      	mov	r2, r3
 800fe0a:	f7ff fd23 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + width - 1, y + i);
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	b2da      	uxtb	r2, r3
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	18d3      	adds	r3, r2, r3
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	b2d9      	uxtb	r1, r3
 800fe24:	7dfb      	ldrb	r3, [r7, #23]
 800fe26:	18cb      	adds	r3, r1, r3
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	461a      	mov	r2, r3
 800fe30:	f7ff fd10 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 800fe34:	7dfb      	ldrb	r3, [r7, #23]
 800fe36:	f103 0301 	add.w	r3, r3, #1
 800fe3a:	75fb      	strb	r3, [r7, #23]
 800fe3c:	7dfa      	ldrb	r2, [r7, #23]
 800fe3e:	6a3b      	ldr	r3, [r7, #32]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	bf2c      	ite	cs
 800fe44:	2300      	movcs	r3, #0
 800fe46:	2301      	movcc	r3, #1
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1d3      	bne.n	800fdf6 <_ZN13CT6963CDriver9RectangleEjjjjb+0x82>
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 800fe4e:	f04f 0300 	mov.w	r3, #0
 800fe52:	75fb      	strb	r3, [r7, #23]
 800fe54:	e022      	b.n	800fe9c <_ZN13CT6963CDriver9RectangleEjjjjb+0x128>
			SetPixel(x + i, y);
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	7dfb      	ldrb	r3, [r7, #23]
 800fe5c:	18d3      	adds	r3, r2, r3
 800fe5e:	b2da      	uxtb	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	4611      	mov	r1, r2
 800fe68:	461a      	mov	r2, r3
 800fe6a:	f7ff fcf3 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + i, y + height - 1);
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	7dfb      	ldrb	r3, [r7, #23]
 800fe74:	18d3      	adds	r3, r2, r3
 800fe76:	b2da      	uxtb	r2, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	b2d9      	uxtb	r1, r3
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	18cb      	adds	r3, r1, r3
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f7ff fce0 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		for (i = 0; i < height; i++) {
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 800fe94:	7dfb      	ldrb	r3, [r7, #23]
 800fe96:	f103 0301 	add.w	r3, r3, #1
 800fe9a:	75fb      	strb	r3, [r7, #23]
 800fe9c:	7dfa      	ldrb	r2, [r7, #23]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	bf2c      	ite	cs
 800fea4:	2300      	movcs	r3, #0
 800fea6:	2301      	movcc	r3, #1
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1d3      	bne.n	800fe56 <_ZN13CT6963CDriver9RectangleEjjjjb+0xe2>
			SetPixel(x + i, y);
			SetPixel(x + i, y + height - 1);
		}
	}
}
 800feae:	f107 0718 	add.w	r7, r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop

0800feb8 <_ZN13CT6963CDriver11SectorClearEjjjj>:
/**
  * @brief  clear sector from upper left (x,y) with specified width and height
  * @param  x1,y1,width, height
  * @retval None
  */
void CT6963CDriver::SectorClear(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 800feb8:	b590      	push	{r4, r7, lr}
 800feba:	b089      	sub	sp, #36	; 0x24
 800febc:	af02      	add	r7, sp, #8
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
 800fec4:	603b      	str	r3, [r7, #0]
	bool oldInverse;

	oldInverse = Inverse();
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff fa09 	bl	800f2e0 <_ZN11CGraphicLCD7InverseEv>
 800fece:	4603      	mov	r3, r0
 800fed0:	75fb      	strb	r3, [r7, #23]
	Inverse(!oldInverse);
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
 800fed6:	f083 0301 	eor.w	r3, r3, #1
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	4610      	mov	r0, r2
 800fede:	4619      	mov	r1, r3
 800fee0:	f7ff fa0a 	bl	800f2f8 <_ZN11CGraphicLCD7InverseEb>

	Rectangle(x,y,width,height,true);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f103 030c 	add.w	r3, r3, #12
 800feec:	681c      	ldr	r4, [r3, #0]
 800feee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef0:	9300      	str	r3, [sp, #0]
 800fef2:	f04f 0301 	mov.w	r3, #1
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	68b9      	ldr	r1, [r7, #8]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	47a0      	blx	r4

	Inverse(oldInverse);
 800ff02:	68fa      	ldr	r2, [r7, #12]
 800ff04:	7dfb      	ldrb	r3, [r7, #23]
 800ff06:	4610      	mov	r0, r2
 800ff08:	4619      	mov	r1, r3
 800ff0a:	f7ff f9f5 	bl	800f2f8 <_ZN11CGraphicLCD7InverseEb>
}
 800ff0e:	f107 071c 	add.w	r7, r7, #28
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd90      	pop	{r4, r7, pc}
 800ff16:	bf00      	nop

0800ff18 <_ZN13CT6963CDriver6CircleEhhh>:
  * @brief  draw a circle with center at (cx,cy) and specified radius
  * @param  x1,y1,width,
  * @retval None
  */
void CT6963CDriver::Circle(unsigned char cx, unsigned char cy ,unsigned char radius)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b088      	sub	sp, #32
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	70f9      	strb	r1, [r7, #3]
 800ff22:	70ba      	strb	r2, [r7, #2]
 800ff24:	707b      	strb	r3, [r7, #1]
	int x, y, xchange, ychange, radiusError;
	x = radius;
 800ff26:	787b      	ldrb	r3, [r7, #1]
 800ff28:	61fb      	str	r3, [r7, #28]
	y = 0;
 800ff2a:	f04f 0300 	mov.w	r3, #0
 800ff2e:	61bb      	str	r3, [r7, #24]
	xchange = 1 - 2 * radius;
 800ff30:	787a      	ldrb	r2, [r7, #1]
 800ff32:	4613      	mov	r3, r2
 800ff34:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 800ff38:	1a9b      	subs	r3, r3, r2
 800ff3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff3e:	f103 0301 	add.w	r3, r3, #1
 800ff42:	617b      	str	r3, [r7, #20]
	ychange = 1;
 800ff44:	f04f 0301 	mov.w	r3, #1
 800ff48:	613b      	str	r3, [r7, #16]
	radiusError = 0;
 800ff4a:	f04f 0300 	mov.w	r3, #0
 800ff4e:	60fb      	str	r3, [r7, #12]
	while(x >= y)
 800ff50:	e096      	b.n	8010080 <_ZN13CT6963CDriver6CircleEhhh+0x168>
	{
		SetPixel(cx+x, cy+y);
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	b2da      	uxtb	r2, r3
 800ff56:	78fb      	ldrb	r3, [r7, #3]
 800ff58:	18d3      	adds	r3, r2, r3
 800ff5a:	b2da      	uxtb	r2, r3
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	b2d9      	uxtb	r1, r3
 800ff60:	78bb      	ldrb	r3, [r7, #2]
 800ff62:	18cb      	adds	r3, r1, r3
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	4611      	mov	r1, r2
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	f7ff fc72 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy+y );
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	78fa      	ldrb	r2, [r7, #3]
 800ff76:	1ad3      	subs	r3, r2, r3
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	69bb      	ldr	r3, [r7, #24]
 800ff7c:	b2d9      	uxtb	r1, r3
 800ff7e:	78bb      	ldrb	r3, [r7, #2]
 800ff80:	18cb      	adds	r3, r1, r3
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	4611      	mov	r1, r2
 800ff88:	461a      	mov	r2, r3
 800ff8a:	f7ff fc63 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy-y );
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	78fa      	ldrb	r2, [r7, #3]
 800ff94:	1ad3      	subs	r3, r2, r3
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	78b9      	ldrb	r1, [r7, #2]
 800ff9e:	1acb      	subs	r3, r1, r3
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f7ff fc54 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+x, cy-y );
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	b2da      	uxtb	r2, r3
 800ffb0:	78fb      	ldrb	r3, [r7, #3]
 800ffb2:	18d3      	adds	r3, r2, r3
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	78b9      	ldrb	r1, [r7, #2]
 800ffbc:	1acb      	subs	r3, r1, r3
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	f7ff fc45 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy+x );
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	78fb      	ldrb	r3, [r7, #3]
 800ffd0:	18d3      	adds	r3, r2, r3
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	b2d9      	uxtb	r1, r3
 800ffd8:	78bb      	ldrb	r3, [r7, #2]
 800ffda:	18cb      	adds	r3, r1, r3
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	f7ff fc36 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy+x );
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	78fa      	ldrb	r2, [r7, #3]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	b2d9      	uxtb	r1, r3
 800fff6:	78bb      	ldrb	r3, [r7, #2]
 800fff8:	18cb      	adds	r3, r1, r3
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	4611      	mov	r1, r2
 8010000:	461a      	mov	r2, r3
 8010002:	f7ff fc27 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy-x );
 8010006:	69bb      	ldr	r3, [r7, #24]
 8010008:	b2db      	uxtb	r3, r3
 801000a:	78fa      	ldrb	r2, [r7, #3]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	b2da      	uxtb	r2, r3
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	b2db      	uxtb	r3, r3
 8010014:	78b9      	ldrb	r1, [r7, #2]
 8010016:	1acb      	subs	r3, r1, r3
 8010018:	b2db      	uxtb	r3, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	4611      	mov	r1, r2
 801001e:	461a      	mov	r2, r3
 8010020:	f7ff fc18 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy-x );
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	b2da      	uxtb	r2, r3
 8010028:	78fb      	ldrb	r3, [r7, #3]
 801002a:	18d3      	adds	r3, r2, r3
 801002c:	b2da      	uxtb	r2, r3
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	b2db      	uxtb	r3, r3
 8010032:	78b9      	ldrb	r1, [r7, #2]
 8010034:	1acb      	subs	r3, r1, r3
 8010036:	b2db      	uxtb	r3, r3
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	4611      	mov	r1, r2
 801003c:	461a      	mov	r2, r3
 801003e:	f7ff fc09 	bl	800f854 <_ZN13CT6963CDriver8SetPixelEhh>
		y++;
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	f103 0301 	add.w	r3, r3, #1
 8010048:	61bb      	str	r3, [r7, #24]
		radiusError += ychange;
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	18d3      	adds	r3, r2, r3
 8010050:	60fb      	str	r3, [r7, #12]
		ychange += 2;
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	f103 0302 	add.w	r3, r3, #2
 8010058:	613b      	str	r3, [r7, #16]
		if ( 2*radiusError + xchange > 0 )
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	18d3      	adds	r3, r2, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	dd0b      	ble.n	8010080 <_ZN13CT6963CDriver6CircleEhhh+0x168>
		{
			x--;
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	f103 33ff 	add.w	r3, r3, #4294967295
 801006e:	61fb      	str	r3, [r7, #28]
			radiusError += xchange;
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	18d3      	adds	r3, r2, r3
 8010076:	60fb      	str	r3, [r7, #12]
			xchange += 2;
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	f103 0302 	add.w	r3, r3, #2
 801007e:	617b      	str	r3, [r7, #20]
	x = radius;
	y = 0;
	xchange = 1 - 2 * radius;
	ychange = 1;
	radiusError = 0;
	while(x >= y)
 8010080:	69fa      	ldr	r2, [r7, #28]
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	429a      	cmp	r2, r3
 8010086:	bfb4      	ite	lt
 8010088:	2300      	movlt	r3, #0
 801008a:	2301      	movge	r3, #1
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b00      	cmp	r3, #0
 8010090:	f47f af5f 	bne.w	800ff52 <_ZN13CT6963CDriver6CircleEhhh+0x3a>
			x--;
			radiusError += xchange;
			xchange += 2;
		}
	}
}
 8010094:	f107 0720 	add.w	r7, r7, #32
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <_ZN13CT6963CDriver6BitmapEPhhhhh>:
  * @brief  writes a bitmap to graphics ram
  * @param  coordinates, width and heigth
  * @retval None
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	71fa      	strb	r2, [r7, #7]
 80100a8:	71bb      	strb	r3, [r7, #6]
	unsigned char i, j;

	for(j = 0; j < height; j++)
 80100aa:	f04f 0300 	mov.w	r3, #0
 80100ae:	75bb      	strb	r3, [r7, #22]
 80100b0:	e04f      	b.n	8010152 <_ZN13CT6963CDriver6BitmapEPhhhhh+0xb6>
	{
		GraphicGoTo(x, y + j);
 80100b2:	79ba      	ldrb	r2, [r7, #6]
 80100b4:	7dbb      	ldrb	r3, [r7, #22]
 80100b6:	18d3      	adds	r3, r2, r3
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	79fa      	ldrb	r2, [r7, #7]
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	4611      	mov	r1, r2
 80100c0:	461a      	mov	r2, r3
 80100c2:	f7ff fa5d 	bl	800f580 <_ZN13CT6963CDriver11GraphicGoToEhh>
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 80100c6:	f04f 0300 	mov.w	r3, #0
 80100ca:	75fb      	strb	r3, [r7, #23]
 80100cc:	e030      	b.n	8010130 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x94>
		{
			if(Inverse()){
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7ff f905 	bl	800f2e0 <_ZN11CGraphicLCD7InverseEv>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d015      	beq.n	8010108 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x6c>
				WriteDisplayData(!bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 80100dc:	7df9      	ldrb	r1, [r7, #23]
 80100de:	7dba      	ldrb	r2, [r7, #22]
 80100e0:	4613      	mov	r3, r2
 80100e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80100e6:	1a9b      	subs	r3, r3, r2
 80100e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100ec:	18cb      	adds	r3, r1, r3
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	18d3      	adds	r3, r2, r3
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	bf14      	ite	ne
 80100f8:	2300      	movne	r3, #0
 80100fa:	2301      	moveq	r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	4619      	mov	r1, r3
 8010102:	f7ff faab 	bl	800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>
 8010106:	e00f      	b.n	8010128 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x8c>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 8010108:	7df9      	ldrb	r1, [r7, #23]
 801010a:	7dba      	ldrb	r2, [r7, #22]
 801010c:	4613      	mov	r3, r2
 801010e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010112:	1a9b      	subs	r3, r3, r2
 8010114:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010118:	18cb      	adds	r3, r1, r3
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	18d3      	adds	r3, r2, r3
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	4619      	mov	r1, r3
 8010124:	f7ff fa9a 	bl	800f65c <_ZN13CT6963CDriver16WriteDisplayDataEh>
	unsigned char i, j;

	for(j = 0; j < height; j++)
	{
		GraphicGoTo(x, y + j);
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 8010128:	7dfb      	ldrb	r3, [r7, #23]
 801012a:	f103 0301 	add.w	r3, r3, #1
 801012e:	75fb      	strb	r3, [r7, #23]
 8010130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010134:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8010138:	b2db      	uxtb	r3, r3
 801013a:	7dfa      	ldrb	r2, [r7, #23]
 801013c:	429a      	cmp	r2, r3
 801013e:	bf2c      	ite	cs
 8010140:	2300      	movcs	r3, #0
 8010142:	2301      	movcc	r3, #1
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1c1      	bne.n	80100ce <_ZN13CT6963CDriver6BitmapEPhhhhh+0x32>
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
	unsigned char i, j;

	for(j = 0; j < height; j++)
 801014a:	7dbb      	ldrb	r3, [r7, #22]
 801014c:	f103 0301 	add.w	r3, r3, #1
 8010150:	75bb      	strb	r3, [r7, #22]
 8010152:	7dba      	ldrb	r2, [r7, #22]
 8010154:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010158:	429a      	cmp	r2, r3
 801015a:	bf2c      	ite	cs
 801015c:	2300      	movcs	r3, #0
 801015e:	2301      	movcc	r3, #1
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1a5      	bne.n	80100b2 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x16>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
			}
		}
	}
}
 8010166:	f107 0718 	add.w	r7, r7, #24
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop

08010170 <_ZN21CT6963_GPIO_InterfaceC1Ev>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/



CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4618      	mov	r0, r3
 801017c:	f7ff f8ca 	bl	800f314 <_ZN13CT6963CDriverC1Ev>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4a04      	ldr	r2, [pc, #16]	; (8010194 <_ZN21CT6963_GPIO_InterfaceC1Ev+0x24>)
 8010184:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4618      	mov	r0, r3
 801018a:	f107 0708 	add.w	r7, r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	080187a0 	.word	0x080187a0

08010198 <_ZN21CT6963_GPIO_InterfaceD1Ev>:

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4a0a      	ldr	r2, [pc, #40]	; (80101cc <_ZN21CT6963_GPIO_InterfaceD1Ev+0x34>)
 80101a4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff f8c8 	bl	800f33c <_ZN13CT6963CDriverD1Ev>
 80101ac:	f04f 0300 	mov.w	r3, #0
 80101b0:	f003 0301 	and.w	r3, r3, #1
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d002      	beq.n	80101c0 <_ZN21CT6963_GPIO_InterfaceD1Ev+0x28>
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f006 f974 	bl	80164a8 <_ZdlPv>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f107 0708 	add.w	r7, r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	080187a0 	.word	0x080187a0

080101d0 <_ZN21CT6963_GPIO_InterfaceD0Ev>:
CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
	// TODO Auto-generated constructor stub

}

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7ff ffdd 	bl	8010198 <_ZN21CT6963_GPIO_InterfaceD1Ev>
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f006 f962 	bl	80164a8 <_ZdlPv>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4618      	mov	r0, r3
 80101e8:	f107 0708 	add.w	r7, r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <_Z11CheckStatusv>:
  * @brief  reads T6963C status byte
  * @param  None
  * @retval true for display ready
  */
bool CheckStatus(void)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0

	uint16_t tmp;
	GLCD_DATA_INPUT;
 80101f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80101fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010202:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010206:	6812      	ldr	r2, [r2, #0]
 8010208:	ea4f 4202 	mov.w	r2, r2, lsl #16
 801020c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010210:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 8010212:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010216:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801021a:	f04f 0120 	mov.w	r1, #32
 801021e:	f7fe f99b 	bl	800e558 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8010222:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010226:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801022a:	f04f 0102 	mov.w	r1, #2
 801022e:	f7fe f993 	bl	800e558 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8010232:	f04f 0002 	mov.w	r0, #2
 8010236:	f006 f8cb 	bl	80163d0 <delay_us>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 801023a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801023e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010242:	f7fe f96d 	bl	800e520 <GPIO_ReadInputData>
 8010246:	4603      	mov	r3, r0
 8010248:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801024c:	80fb      	strh	r3, [r7, #6]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 801024e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010252:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010256:	f04f 0102 	mov.w	r1, #2
 801025a:	f7fe f96f 	bl	800e53c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 801025e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010262:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010266:	f04f 0120 	mov.w	r1, #32
 801026a:	f7fe f967 	bl	800e53c <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 801026e:	f04f 0001 	mov.w	r0, #1
 8010272:	f006 f8ad 	bl	80163d0 <delay_us>

	GLCD_DATA_OUTPUT;
 8010276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801027a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801027e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010282:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010286:	6812      	ldr	r2, [r2, #0]
 8010288:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 801028c:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 8010290:	601a      	str	r2, [r3, #0]

	return ((tmp&0x03)==0x03);
 8010292:	88fb      	ldrh	r3, [r7, #6]
 8010294:	f003 0303 	and.w	r3, r3, #3
 8010298:	2b03      	cmp	r3, #3
 801029a:	bf14      	ite	ne
 801029c:	2300      	movne	r3, #0
 801029e:	2301      	moveq	r3, #1
 80102a0:	b2db      	uxtb	r3, r3
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	f107 0708 	add.w	r7, r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <_ZN21CT6963_GPIO_Interface12HardwareInitEv>:
/**
  * @brief  initialize Hardware to drive the display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::HardwareInit(void){
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStructure;
	// activate Clock for Io Ports used
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 80102b4:	f04f 0002 	mov.w	r0, #2
 80102b8:	f04f 0101 	mov.w	r1, #1
 80102bc:	f7fe fa98 	bl	800e7f0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC , ENABLE);
 80102c0:	f04f 0004 	mov.w	r0, #4
 80102c4:	f04f 0101 	mov.w	r1, #1
 80102c8:	f7fe fa92 	bl	800e7f0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE , ENABLE);
 80102cc:	f04f 0010 	mov.w	r0, #16
 80102d0:	f04f 0101 	mov.w	r1, #1
 80102d4:	f7fe fa8c 	bl	800e7f0 <RCC_AHB1PeriphClockCmd>

	// all pins as pp outputs with no pull
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80102d8:	f04f 0301 	mov.w	r3, #1
 80102dc:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80102de:	f04f 0300 	mov.w	r3, #0
 80102e2:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80102e4:	f04f 0300 	mov.w	r3, #0
 80102e8:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80102ea:	f04f 0301 	mov.w	r3, #1
 80102ee:	737b      	strb	r3, [r7, #13]

	//Control pins CD and RD
	GPIO_InitStructure.GPIO_Pin = GLCD_CD | GLCD_RD;
 80102f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80102f4:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_CD_RD,&GPIO_InitStructure);
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80102fe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010302:	4619      	mov	r1, r3
 8010304:	f7fe f844 	bl	800e390 <GPIO_Init>
	//Control pins WR, CE and RST
	GPIO_InitStructure.GPIO_Pin = GLCD_WR | GLCD_CE | GLCD_RESET;
 8010308:	f640 0303 	movw	r3, #2051	; 0x803
 801030c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_WR_CE,&GPIO_InitStructure);
 801030e:	f107 0308 	add.w	r3, r7, #8
 8010312:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010316:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801031a:	4619      	mov	r1, r3
 801031c:	f7fe f838 	bl	800e390 <GPIO_Init>

	// data pins are high byte
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8010320:	f04f 0302 	mov.w	r3, #2
 8010324:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Pin = GLCD_DATA_PORT_MASK;
 8010326:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801032a:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_DATA_PORT,&GPIO_InitStructure);
 801032c:	f107 0308 	add.w	r3, r7, #8
 8010330:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010334:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010338:	4619      	mov	r1, r3
 801033a:	f7fe f829 	bl	800e390 <GPIO_Init>

	//Set all Control pins to high level
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD | GLCD_RD);	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR | GLCD_CE );
 801033e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010342:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010346:	f04f 0130 	mov.w	r1, #48	; 0x30
 801034a:	f7fe f8f7 	bl	800e53c <GPIO_SetBits>
 801034e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010352:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010356:	f04f 0103 	mov.w	r1, #3
 801035a:	f7fe f8ef 	bl	800e53c <GPIO_SetBits>

	init_us_timer(); //delay timer init
 801035e:	f006 f865 	bl	801642c <init_us_timer>

}
 8010362:	f107 0710 	add.w	r7, r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop

0801036c <_ZN21CT6963_GPIO_Interface5ResetEv>:
/**
  * @brief  Reset the Display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::Reset(void){
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 8010374:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010378:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801037c:	f640 0102 	movw	r1, #2050	; 0x802
 8010380:	f7fe f8ea 	bl	800e558 <GPIO_ResetBits>

	vTaskDelay(20);  // sleep 20 ms
 8010384:	f04f 0014 	mov.w	r0, #20
 8010388:	f000 fc38 	bl	8010bfc <vTaskDelay>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 801038c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010390:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010394:	f640 0102 	movw	r1, #2050	; 0x802
 8010398:	f7fe f8d0 	bl	800e53c <GPIO_SetBits>

}
 801039c:	f107 0708 	add.w	r7, r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <_ZN21CT6963_GPIO_Interface12WriteCommandEh>:
/**
  * @brief  writes a command
  * @param  command
  * @retval None
  */
void CT6963_GPIO_Interface::WriteCommand(const unsigned char command){
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	460b      	mov	r3, r1
 80103ae:	70fb      	strb	r3, [r7, #3]

	while(!CheckStatus());
 80103b0:	bf00      	nop
 80103b2:	f7ff ff1d 	bl	80101f0 <_Z11CheckStatusv>
 80103b6:	4603      	mov	r3, r0
 80103b8:	f083 0301 	eor.w	r3, r3, #1
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1f7      	bne.n	80103b2 <_ZN21CT6963_GPIO_Interface12WriteCommandEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 80103c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80103ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80103d2:	6952      	ldr	r2, [r2, #20]
 80103d4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80103d8:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= (command << (GLCD_DATA_OFFSET)); // lowbyte will stay as is in this write
 80103da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80103e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80103ea:	6952      	ldr	r2, [r2, #20]
 80103ec:	4611      	mov	r1, r2
 80103ee:	78fa      	ldrb	r2, [r7, #3]
 80103f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80103f4:	430a      	orrs	r2, r1
 80103f6:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 80103f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80103fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010400:	f04f 0101 	mov.w	r1, #1
 8010404:	f7fe f8a8 	bl	800e558 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8010408:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801040c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010410:	f04f 0102 	mov.w	r1, #2
 8010414:	f7fe f8a0 	bl	800e558 <GPIO_ResetBits>

	delay_us(c_iDelayFore);   // time for display to read the data
 8010418:	f04f 0002 	mov.w	r0, #2
 801041c:	f005 ffd8 	bl	80163d0 <delay_us>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8010420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010424:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010428:	f04f 0102 	mov.w	r1, #2
 801042c:	f7fe f886 	bl	800e53c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8010430:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010434:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010438:	f04f 0101 	mov.w	r1, #1
 801043c:	f7fe f87e 	bl	800e53c <GPIO_SetBits>


	delay_us(c_iDelayAfter);
 8010440:	f04f 0001 	mov.w	r0, #1
 8010444:	f005 ffc4 	bl	80163d0 <delay_us>
}
 8010448:	f107 0708 	add.w	r7, r7, #8
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <_ZN21CT6963_GPIO_Interface9WriteDataEh>:
/**
  * @brief  writes a data
  * @param  data
  * @retval None
  */
void CT6963_GPIO_Interface::WriteData(const unsigned char data){
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	460b      	mov	r3, r1
 801045a:	70fb      	strb	r3, [r7, #3]
	while(!CheckStatus());
 801045c:	bf00      	nop
 801045e:	f7ff fec7 	bl	80101f0 <_Z11CheckStatusv>
 8010462:	4603      	mov	r3, r0
 8010464:	f083 0301 	eor.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f7      	bne.n	801045e <_ZN21CT6963_GPIO_Interface9WriteDataEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 801046e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010472:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801047a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801047e:	6952      	ldr	r2, [r2, #20]
 8010480:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010484:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= ((uint16_t)data << GLCD_DATA_OFFSET); // lowbyte will stay as is in this write
 8010486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801048a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801048e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010492:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010496:	6952      	ldr	r2, [r2, #20]
 8010498:	4611      	mov	r1, r2
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80104a0:	430a      	orrs	r2, r1
 80104a2:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 80104a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80104a8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104ac:	f04f 0110 	mov.w	r1, #16
 80104b0:	f7fe f852 	bl	800e558 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 80104b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80104b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104bc:	f04f 0101 	mov.w	r1, #1
 80104c0:	f7fe f84a 	bl	800e558 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 80104c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80104c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104cc:	f04f 0102 	mov.w	r1, #2
 80104d0:	f7fe f842 	bl	800e558 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 80104d4:	f04f 0002 	mov.w	r0, #2
 80104d8:	f005 ff7a 	bl	80163d0 <delay_us>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 80104dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80104e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104e4:	f04f 0102 	mov.w	r1, #2
 80104e8:	f7fe f828 	bl	800e53c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 80104ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80104f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104f4:	f04f 0110 	mov.w	r1, #16
 80104f8:	f7fe f820 	bl	800e53c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 80104fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010500:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010504:	f04f 0101 	mov.w	r1, #1
 8010508:	f7fe f818 	bl	800e53c <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 801050c:	f04f 0001 	mov.w	r0, #1
 8010510:	f005 ff5e 	bl	80163d0 <delay_us>
}
 8010514:	f107 0708 	add.w	r7, r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <_ZN21CT6963_GPIO_Interface8ReadDataEv>:
/**
  * @brief  reads data from display
  * @param  None
  * @retval data from display
  */
unsigned char CT6963_GPIO_Interface::ReadData(){
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	while(!CheckStatus());
 8010524:	bf00      	nop
 8010526:	f7ff fe63 	bl	80101f0 <_Z11CheckStatusv>
 801052a:	4603      	mov	r3, r0
 801052c:	f083 0301 	eor.w	r3, r3, #1
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1f7      	bne.n	8010526 <_ZN21CT6963_GPIO_Interface8ReadDataEv+0xa>

	GLCD_DATA_INPUT;
 8010536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801053a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801053e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010542:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010546:	6812      	ldr	r2, [r2, #0]
 8010548:	ea4f 4202 	mov.w	r2, r2, lsl #16
 801054c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010550:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD );
 8010552:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010556:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801055a:	f04f 0120 	mov.w	r1, #32
 801055e:	f7fd fffb 	bl	800e558 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD );
 8010562:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010566:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801056a:	f04f 0110 	mov.w	r1, #16
 801056e:	f7fd fff3 	bl	800e558 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 8010572:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010576:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801057a:	f04f 0102 	mov.w	r1, #2
 801057e:	f7fd ffeb 	bl	800e558 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8010582:	f04f 0002 	mov.w	r0, #2
 8010586:	f005 ff23 	bl	80163d0 <delay_us>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 801058a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801058e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010592:	f7fd ffc5 	bl	800e520 <GPIO_ReadInputData>
 8010596:	4603      	mov	r3, r0
 8010598:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801059c:	81fb      	strh	r3, [r7, #14]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 801059e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80105a2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80105a6:	f04f 0102 	mov.w	r1, #2
 80105aa:	f7fd ffc7 	bl	800e53c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD );
 80105ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80105b2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80105b6:	f04f 0110 	mov.w	r1, #16
 80105ba:	f7fd ffbf 	bl	800e53c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD );
 80105be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80105c2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80105c6:	f04f 0120 	mov.w	r1, #32
 80105ca:	f7fd ffb7 	bl	800e53c <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 80105ce:	f04f 0001 	mov.w	r0, #1
 80105d2:	f005 fefd 	bl	80163d0 <delay_us>

	GLCD_DATA_OUTPUT;
 80105d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80105de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80105e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80105e6:	6812      	ldr	r2, [r2, #0]
 80105e8:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 80105ec:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 80105f0:	601a      	str	r2, [r3, #0]
	return (unsigned char)tmp;
 80105f2:	89fb      	ldrh	r3, [r7, #14]
 80105f4:	b2db      	uxtb	r3, r3
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	f107 0710 	add.w	r7, r7, #16
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <_ZN5CTask13EnterCriticalEv>:
    inline static void Yeld() { taskYIELD(); }

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void EnterCritical() { taskENTER_CRITICAL(); }
 8010600:	b580      	push	{r7, lr}
 8010602:	af00      	add	r7, sp, #0
 8010604:	f000 f990 	bl	8010928 <vPortEnterCritical>
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop

0801060c <_ZN5CTask12ExitCriticalEv>:

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
 8010610:	f000 f9a0 	bl	8010954 <vPortExitCritical>
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop

08010618 <_ZN12AManagedTask12HardwareInitEv>:
	 * The framework calls this function before the scheduler start. The default implementation simply return true.
	 * Override this method to perform task specific hardware initialization that does not use FreeRTOS API.
	 *
	 * @return true if success, false otherwise.
	 */
	virtual bool HardwareInit() { return true; }
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	f04f 0301 	mov.w	r3, #1
 8010624:	4618      	mov	r0, r3
 8010626:	f107 070c 	add.w	r7, r7, #12
 801062a:	46bd      	mov	sp, r7
 801062c:	bc80      	pop	{r7}
 801062e:	4770      	bx	lr

08010630 <_ZN9CFreeRTOS15SuspendAllTasksEv>:
	static void EndScheduler() { vTaskEndScheduler(); }

	/**
	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
	 */
	static void SuspendAllTasks() { vTaskSuspendAll(); }
 8010630:	b580      	push	{r7, lr}
 8010632:	af00      	add	r7, sp, #0
 8010634:	f000 fb10 	bl	8010c58 <vTaskSuspendAll>
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop

0801063c <_ZN9CFreeRTOS14ResumeAllTasksEv>:

	/**
	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
	 */
	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 801063c:	b580      	push	{r7, lr}
 801063e:	af00      	add	r7, sp, #0
 8010640:	f000 fb1c 	bl	8010c7c <xTaskResumeAll>
 8010644:	4603      	mov	r3, r0
 8010646:	4618      	mov	r0, r3
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop

0801064c <_ZN12AManagedTaskC1Ev>:
#include "AManagedTask.h"
#include "CFreeRTOS.h"

AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;

AManagedTask::AManagedTask() {
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4618      	mov	r0, r3
 8010658:	f000 f8c0 	bl	80107dc <_ZN5CTaskC1Ev>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	4a08      	ldr	r2, [pc, #32]	; (8010680 <_ZN12AManagedTaskC1Ev+0x34>)
 8010660:	601a      	str	r2, [r3, #0]
	m_pNextManagedTask = NULL;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f04f 0200 	mov.w	r2, #0
 8010668:	609a      	str	r2, [r3, #8]
	AddToManagedTask(this);
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	6879      	ldr	r1, [r7, #4]
 801066e:	f000 f839 	bl	80106e4 <_ZN12AManagedTask16AddToManagedTaskEPS_>
}
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	f107 0708 	add.w	r7, r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	0801c118 	.word	0x0801c118

08010684 <_ZN12AManagedTaskD1Ev>:

AManagedTask::~AManagedTask() {
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	4a0c      	ldr	r2, [pc, #48]	; (80106c0 <_ZN12AManagedTaskD1Ev+0x3c>)
 8010690:	601a      	str	r2, [r3, #0]
	RemoveFromManagedTask(this);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	6879      	ldr	r1, [r7, #4]
 8010696:	f000 f84d 	bl	8010734 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>
}
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 f8b6 	bl	801080c <_ZN5CTaskD1Ev>
 80106a0:	f04f 0300 	mov.w	r3, #0
 80106a4:	f003 0301 	and.w	r3, r3, #1
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <_ZN12AManagedTaskD1Ev+0x30>
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f005 fefa 	bl	80164a8 <_ZdlPv>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f107 0708 	add.w	r7, r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	0801c118 	.word	0x0801c118

080106c4 <_ZN12AManagedTaskD0Ev>:
AManagedTask::AManagedTask() {
	m_pNextManagedTask = NULL;
	AddToManagedTask(this);
}

AManagedTask::~AManagedTask() {
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
	RemoveFromManagedTask(this);
}
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff ffd9 	bl	8010684 <_ZN12AManagedTaskD1Ev>
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f005 fee8 	bl	80164a8 <_ZdlPv>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4618      	mov	r0, r3
 80106dc:	f107 0708 	add.w	r7, r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <_ZN12AManagedTask16AddToManagedTaskEPS_>:

void AManagedTask::taskControlFunc(void *pParams) {
	static_cast<AManagedTask *>(pParams)->Run();
}

void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
	EnterCritical();
 80106ee:	f7ff ff87 	bl	8010600 <_ZN5CTask13EnterCriticalEv>
	// is the first element?
	if (s_pManagedTaskListHead == NULL) {
 80106f2:	f640 1360 	movw	r3, #2400	; 0x960
 80106f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d106      	bne.n	801070e <_ZN12AManagedTask16AddToManagedTaskEPS_+0x2a>
		s_pManagedTaskListHead = this;
 8010700:	f640 1360 	movw	r3, #2400	; 0x960
 8010704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	601a      	str	r2, [r3, #0]
 801070c:	e00c      	b.n	8010728 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x44>
	}
	else {
		// add the task to the head of the managed task list.
		m_pNextManagedTask = s_pManagedTaskListHead;
 801070e:	f640 1360 	movw	r3, #2400	; 0x960
 8010712:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	609a      	str	r2, [r3, #8]
		s_pManagedTaskListHead = this;
 801071c:	f640 1360 	movw	r3, #2400	; 0x960
 8010720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	601a      	str	r2, [r3, #0]
	}
	ExitCritical();
 8010728:	f7ff ff70 	bl	801060c <_ZN5CTask12ExitCriticalEv>
}
 801072c:	f107 0708 	add.w	r7, r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>:

void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
	// search for the task to remove in the managed task list
	// is it the first element?
	EnterCritical();
 801073e:	f7ff ff5f 	bl	8010600 <_ZN5CTask13EnterCriticalEv>
	if (pTaskToRemove == s_pManagedTaskListHead) {
 8010742:	f640 1360 	movw	r3, #2400	; 0x960
 8010746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	429a      	cmp	r2, r3
 8010750:	d109      	bne.n	8010766 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x32>
		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	689a      	ldr	r2, [r3, #8]
 8010756:	f640 1360 	movw	r3, #2400	; 0x960
 801075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801075e:	601a      	str	r2, [r3, #0]
		ExitCritical();
 8010760:	f7ff ff54 	bl	801060c <_ZN5CTask12ExitCriticalEv>
 8010764:	e025      	b.n	80107b2 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7e>
	}
	else {
		ExitCritical();
 8010766:	f7ff ff51 	bl	801060c <_ZN5CTask12ExitCriticalEv>
		CFreeRTOS::SuspendAllTasks();
 801076a:	f7ff ff61 	bl	8010630 <_ZN9CFreeRTOS15SuspendAllTasksEv>
		AManagedTask *pTask = s_pManagedTaskListHead;
 801076e:	f640 1360 	movw	r3, #2400	; 0x960
 8010772:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	60fb      	str	r3, [r7, #12]
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 801077a:	e002      	b.n	8010782 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x4e>
			pTask = pTask->m_pNextManagedTask;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	60fb      	str	r3, [r7, #12]
	}
	else {
		ExitCritical();
		CFreeRTOS::SuspendAllTasks();
		AManagedTask *pTask = s_pManagedTaskListHead;
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d007      	beq.n	8010798 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	689a      	ldr	r2, [r3, #8]
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	429a      	cmp	r2, r3
 8010790:	d002      	beq.n	8010798 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8010792:	f04f 0301 	mov.w	r3, #1
 8010796:	e001      	b.n	801079c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x68>
 8010798:	f04f 0300 	mov.w	r3, #0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d1ed      	bne.n	801077c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x48>
			pTask = pTask->m_pNextManagedTask;
		}
		if (pTask != NULL) { // Check to be sure that the task is in the list
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d003      	beq.n	80107ae <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7a>
			// remove the thask from the list
			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	689a      	ldr	r2, [r3, #8]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	609a      	str	r2, [r3, #8]
		}
		CFreeRTOS::ResumeAllTasks();
 80107ae:	f7ff ff45 	bl	801063c <_ZN9CFreeRTOS14ResumeAllTasksEv>
	}
}
 80107b2:	f107 0710 	add.w	r7, r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop

080107bc <_ZN12IFreeRTOSObjC1Ev>:
#ifndef IFREERTOSPROTOCOL_H_
#define IFREERTOSPROTOCOL_H_

typedef void *xGenericHandle;

class IFreeRTOSObj {
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4a04      	ldr	r2, [pc, #16]	; (80107d8 <_ZN12IFreeRTOSObjC1Ev+0x1c>)
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f107 070c 	add.w	r7, r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bc80      	pop	{r7}
 80107d6:	4770      	bx	lr
 80107d8:	0801c140 	.word	0x0801c140

080107dc <_ZN5CTaskC1Ev>:

#include "CTask.h"
#include <assert.h>


CTask::CTask() {
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7ff ffe8 	bl	80107bc <_ZN12IFreeRTOSObjC1Ev>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4a06      	ldr	r2, [pc, #24]	; (8010808 <_ZN5CTaskC1Ev+0x2c>)
 80107f0:	601a      	str	r2, [r3, #0]
	m_handleTask = NULL;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f04f 0200 	mov.w	r2, #0
 80107f8:	605a      	str	r2, [r3, #4]
}
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f107 0708 	add.w	r7, r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	0801c158 	.word	0x0801c158

0801080c <_ZN5CTaskD1Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4a0d      	ldr	r2, [pc, #52]	; (801084c <_ZN5CTaskD1Ev+0x40>)
 8010818:	601a      	str	r2, [r3, #0]
	if (IsValid())
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7fe fba0 	bl	800ef60 <_ZNK5CTask7IsValidEv>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <_ZN5CTaskD1Ev+0x20>
		Delete();
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f000 f84c 	bl	80108c4 <_ZN5CTask6DeleteEv>
}
 801082c:	f04f 0300 	mov.w	r3, #0
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	d002      	beq.n	8010840 <_ZN5CTaskD1Ev+0x34>
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f005 fe34 	bl	80164a8 <_ZdlPv>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	4618      	mov	r0, r3
 8010844:	f107 0708 	add.w	r7, r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	0801c158 	.word	0x0801c158

08010850 <_ZN5CTaskD0Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ff ffd7 	bl	801080c <_ZN5CTaskD1Ev>
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f005 fe22 	bl	80164a8 <_ZdlPv>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f107 0708 	add.w	r7, r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <_ZN5CTask6AttachEPv>:

void CTask::Attach(xGenericHandle handle) {
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d10f      	bne.n	80108a0 <_ZN5CTask6AttachEPv+0x30>
 8010880:	f247 60e0 	movw	r0, #30432	; 0x76e0
 8010884:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010888:	f04f 011b 	mov.w	r1, #27
 801088c:	f24c 1270 	movw	r2, #49520	; 0xc170
 8010890:	f6c0 0201 	movt	r2, #2049	; 0x801
 8010894:	f247 7300 	movw	r3, #30464	; 0x7700
 8010898:	f6c0 0301 	movt	r3, #2049	; 0x801
 801089c:	f7f6 f8ea 	bl	8006a74 <__assert_func>

	if (IsValid()) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	4798      	blx	r3
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <_ZN5CTask6AttachEPv+0x46>
		Delete();
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 f807 	bl	80108c4 <_ZN5CTask6DeleteEv>
	}
	m_handleTask = handle;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	683a      	ldr	r2, [r7, #0]
 80108ba:	605a      	str	r2, [r3, #4]
}
 80108bc:	f107 0708 	add.w	r7, r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <_ZN5CTask6DeleteEv>:

	return res;
}


void CTask::Delete() {
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
	if (m_handleTask != NULL) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d008      	beq.n	80108e6 <_ZN5CTask6DeleteEv+0x22>
#if ( INCLUDE_vTaskDelete == 1 )
		vTaskDelete(m_handleTask);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	4618      	mov	r0, r3
 80108da:	f000 f92f 	bl	8010b3c <vTaskDelete>
#else
		vTaskSuspend(m_handleTask);
#endif
		m_handleTask = NULL;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f04f 0200 	mov.w	r2, #0
 80108e4:	605a      	str	r2, [r3, #4]
	}
}
 80108e6:	f107 0708 	add.w	r7, r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop

080108f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80108f0:	4b06      	ldr	r3, [pc, #24]	; (801090c <pxCurrentTCBConst2>)
 80108f2:	6819      	ldr	r1, [r3, #0]
 80108f4:	6808      	ldr	r0, [r1, #0]
 80108f6:	f850 eb04 	ldr.w	lr, [r0], #4
 80108fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80108fe:	f380 8809 	msr	PSP, r0
 8010902:	f04f 0000 	mov.w	r0, #0
 8010906:	f380 8811 	msr	BASEPRI, r0
 801090a:	4770      	bx	lr

0801090c <pxCurrentTCBConst2>:
 801090c:	20000964 	.word	0x20000964

08010910 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8010910:	b480      	push	{r7}
 8010912:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010914:	f64e 5304 	movw	r3, #60676	; 0xed04
 8010918:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801091c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010920:	601a      	str	r2, [r3, #0]
}
 8010922:	46bd      	mov	sp, r7
 8010924:	bc80      	pop	{r7}
 8010926:	4770      	bx	lr

08010928 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801092c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8010930:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8010934:	f640 03f8 	movw	r3, #2296	; 0x8f8
 8010938:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f103 0201 	add.w	r2, r3, #1
 8010942:	f640 03f8 	movw	r3, #2296	; 0x8f8
 8010946:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801094a:	601a      	str	r2, [r3, #0]
}
 801094c:	46bd      	mov	sp, r7
 801094e:	bc80      	pop	{r7}
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop

08010954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010954:	b480      	push	{r7}
 8010956:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8010958:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801095c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f103 32ff 	add.w	r2, r3, #4294967295
 8010966:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801096a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801096e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8010970:	f640 03f8 	movw	r3, #2296	; 0x8f8
 8010974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d103      	bne.n	8010986 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 801097e:	f04f 0000 	mov.w	r0, #0
 8010982:	f380 8811 	msr	BASEPRI, r0
	}
}
 8010986:	46bd      	mov	sp, r7
 8010988:	bc80      	pop	{r7}
 801098a:	4770      	bx	lr

0801098c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801098c:	f3ef 8009 	mrs	r0, PSP
 8010990:	4b13      	ldr	r3, [pc, #76]	; (80109e0 <pxCurrentTCBConst>)
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010998:	f01e 0f10 	tst.w	lr, #16
 801099c:	bf08      	it	eq
 801099e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109a2:	f840 ed04 	str.w	lr, [r0, #-4]!
 80109a6:	6010      	str	r0, [r2, #0]
 80109a8:	e92d 4008 	stmdb	sp!, {r3, lr}
 80109ac:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80109b0:	f380 8811 	msr	BASEPRI, r0
 80109b4:	f000 fae8 	bl	8010f88 <vTaskSwitchContext>
 80109b8:	f04f 0000 	mov.w	r0, #0
 80109bc:	f380 8811 	msr	BASEPRI, r0
 80109c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80109c4:	6819      	ldr	r1, [r3, #0]
 80109c6:	6808      	ldr	r0, [r1, #0]
 80109c8:	f850 eb04 	ldr.w	lr, [r0], #4
 80109cc:	f01e 0f10 	tst.w	lr, #16
 80109d0:	bf08      	it	eq
 80109d2:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80109d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80109da:	f380 8809 	msr	PSP, r0
 80109de:	4770      	bx	lr

080109e0 <pxCurrentTCBConst>:
 80109e0:	20000964 	.word	0x20000964

080109e4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80109ea:	f64e 5304 	movw	r3, #60676	; 0xed04
 80109ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80109f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109f6:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80109f8:	f04f 0300 	mov.w	r3, #0
 80109fc:	607b      	str	r3, [r7, #4]
 80109fe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8010a02:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8010a06:	f000 f9e3 	bl	8010dd0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8010a0a:	f04f 0000 	mov.w	r0, #0
 8010a0e:	f380 8811 	msr	BASEPRI, r0
}
 8010a12:	f107 0708 	add.w	r7, r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop

08010a1c <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	461a      	mov	r2, r3
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	685a      	ldr	r2, [r3, #4]
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	683a      	ldr	r2, [r7, #0]
 8010a4a:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f103 0201 	add.w	r2, r3, #1
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	601a      	str	r2, [r3, #0]
}
 8010a64:	f107 0714 	add.w	r7, r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bc80      	pop	{r7}
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop

08010a70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a86:	d103      	bne.n	8010a90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	691b      	ldr	r3, [r3, #16]
 8010a8c:	60fb      	str	r3, [r7, #12]
 8010a8e:	e00e      	b.n	8010aae <vListInsert+0x3e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f103 0308 	add.w	r3, r3, #8
 8010a96:	60fb      	str	r3, [r7, #12]
 8010a98:	e002      	b.n	8010aa0 <vListInsert+0x30>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d9f5      	bls.n	8010a9a <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f103 0201 	add.w	r2, r3, #1
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	601a      	str	r2, [r3, #0]
}
 8010ade:	f107 0714 	add.w	r7, r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bc80      	pop	{r7}
 8010ae6:	4770      	bx	lr

08010ae8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	6892      	ldr	r2, [r2, #8]
 8010af8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	6852      	ldr	r2, [r2, #4]
 8010b02:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	685a      	ldr	r2, [r3, #4]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d103      	bne.n	8010b1c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	689a      	ldr	r2, [r3, #8]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f04f 0200 	mov.w	r2, #0
 8010b22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f103 32ff 	add.w	r2, r3, #4294967295
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	601a      	str	r2, [r3, #0]
}
 8010b30:	f107 0714 	add.w	r7, r7, #20
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bc80      	pop	{r7}
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop

08010b3c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8010b44:	f7ff fef0 	bl	8010928 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 8010b48:	f640 1364 	movw	r3, #2404	; 0x964
 8010b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d102      	bne.n	8010b5e <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
 8010b58:	f04f 0300 	mov.w	r3, #0
 8010b5c:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d105      	bne.n	8010b70 <vTaskDelete+0x34>
 8010b64:	f640 1364 	movw	r3, #2404	; 0x964
 8010b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	e000      	b.n	8010b72 <vTaskDelete+0x36>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f103 0304 	add.w	r3, r3, #4
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7ff ffb4 	bl	8010ae8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d005      	beq.n	8010b94 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f103 0318 	add.w	r3, r3, #24
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7ff ffaa 	bl	8010ae8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f103 0304 	add.w	r3, r3, #4
 8010b9a:	f640 10e8 	movw	r0, #2536	; 0x9e8
 8010b9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	f7ff ff3a 	bl	8010a1c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8010ba8:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8010bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f103 0201 	add.w	r2, r3, #1
 8010bb6:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8010bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bbe:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8010bc0:	f640 2320 	movw	r3, #2592	; 0xa20
 8010bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f103 0201 	add.w	r2, r3, #1
 8010bce:	f640 2320 	movw	r3, #2592	; 0xa20
 8010bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bd6:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8010bd8:	f7ff febc 	bl	8010954 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 8010bdc:	f640 230c 	movw	r3, #2572	; 0xa0c
 8010be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d004      	beq.n	8010bf4 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d101      	bne.n	8010bf4 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
 8010bf0:	f7ff fe8e 	bl	8010910 <vPortYieldFromISR>
			}
		}
	}
 8010bf4:	f107 0710 	add.w	r7, r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8010c04:	f04f 0300 	mov.w	r3, #0
 8010c08:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d01a      	beq.n	8010c46 <vTaskDelay+0x4a>
		{
			vTaskSuspendAll();
 8010c10:	f000 f822 	bl	8010c58 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8010c14:	f640 2304 	movw	r3, #2564	; 0xa04
 8010c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	18d3      	adds	r3, r2, r3
 8010c22:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8010c24:	f640 1364 	movw	r3, #2404	; 0x964
 8010c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f103 0304 	add.w	r3, r3, #4
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7ff ff58 	bl	8010ae8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010c38:	68b8      	ldr	r0, [r7, #8]
 8010c3a:	f000 fa45 	bl	80110c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010c3e:	f000 f81d 	bl	8010c7c <xTaskResumeAll>
 8010c42:	4603      	mov	r3, r0
 8010c44:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d101      	bne.n	8010c50 <vTaskDelay+0x54>
		{
			portYIELD_WITHIN_API();
 8010c4c:	f7ff fe60 	bl	8010910 <vPortYieldFromISR>
		}
	}
 8010c50:	f107 0710 	add.w	r7, r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c58:	b480      	push	{r7}
 8010c5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8010c5c:	f640 2310 	movw	r3, #2576	; 0xa10
 8010c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f103 0201 	add.w	r2, r3, #1
 8010c6a:	f640 2310 	movw	r3, #2576	; 0xa10
 8010c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c72:	601a      	str	r2, [r3, #0]
}
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bc80      	pop	{r7}
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8010c7c:	b590      	push	{r4, r7, lr}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8010c82:	f04f 0300 	mov.w	r3, #0
 8010c86:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c88:	f7ff fe4e 	bl	8010928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c8c:	f640 2310 	movw	r3, #2576	; 0xa10
 8010c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f103 32ff 	add.w	r2, r3, #4294967295
 8010c9a:	f640 2310 	movw	r3, #2576	; 0xa10
 8010c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ca2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8010ca4:	f640 2310 	movw	r3, #2576	; 0xa10
 8010ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f040 8086 	bne.w	8010dc0 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8010cb4:	f640 2300 	movw	r3, #2560	; 0xa00
 8010cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d07e      	beq.n	8010dc0 <xTaskResumeAll+0x144>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8010cc2:	f04f 0300 	mov.w	r3, #0
 8010cc6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8010cc8:	e03d      	b.n	8010d46 <xTaskResumeAll+0xca>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8010cca:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8010cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
 8010cd8:	f104 0318 	add.w	r3, r4, #24
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff ff03 	bl	8010ae8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8010ce2:	f104 0304 	add.w	r3, r4, #4
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7ff fefe 	bl	8010ae8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8010cec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010cee:	f640 2308 	movw	r3, #2568	; 0xa08
 8010cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d905      	bls.n	8010d08 <xTaskResumeAll+0x8c>
 8010cfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010cfe:	f640 2308 	movw	r3, #2568	; 0xa08
 8010d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010d10:	189b      	adds	r3, r3, r2
 8010d12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010d16:	461a      	mov	r2, r3
 8010d18:	f640 1368 	movw	r3, #2408	; 0x968
 8010d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d20:	18d2      	adds	r2, r2, r3
 8010d22:	f104 0304 	add.w	r3, r4, #4
 8010d26:	4610      	mov	r0, r2
 8010d28:	4619      	mov	r1, r3
 8010d2a:	f7ff fe77 	bl	8010a1c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010d30:	f640 1364 	movw	r3, #2404	; 0x964
 8010d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d302      	bcc.n	8010d46 <xTaskResumeAll+0xca>
					{
						xYieldRequired = pdTRUE;
 8010d40:	f04f 0301 	mov.w	r3, #1
 8010d44:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8010d46:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8010d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1ba      	bne.n	8010cca <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8010d54:	f640 2314 	movw	r3, #2580	; 0xa14
 8010d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d018      	beq.n	8010d94 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8010d62:	e00d      	b.n	8010d80 <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
 8010d64:	f000 f834 	bl	8010dd0 <vTaskIncrementTick>
						--uxMissedTicks;
 8010d68:	f640 2314 	movw	r3, #2580	; 0xa14
 8010d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f103 32ff 	add.w	r2, r3, #4294967295
 8010d76:	f640 2314 	movw	r3, #2580	; 0xa14
 8010d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d7e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8010d80:	f640 2314 	movw	r3, #2580	; 0xa14
 8010d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1ea      	bne.n	8010d64 <xTaskResumeAll+0xe8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8010d8e:	f04f 0301 	mov.w	r3, #1
 8010d92:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d006      	beq.n	8010da8 <xTaskResumeAll+0x12c>
 8010d9a:	f640 2318 	movw	r3, #2584	; 0xa18
 8010d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d10b      	bne.n	8010dc0 <xTaskResumeAll+0x144>
				{
					xAlreadyYielded = pdTRUE;
 8010da8:	f04f 0301 	mov.w	r3, #1
 8010dac:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8010dae:	f640 2318 	movw	r3, #2584	; 0xa18
 8010db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010db6:	f04f 0200 	mov.w	r2, #0
 8010dba:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8010dbc:	f7ff fda8 	bl	8010910 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8010dc0:	f7ff fdc8 	bl	8010954 <vPortExitCritical>

	return xAlreadyYielded;
 8010dc4:	687b      	ldr	r3, [r7, #4]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f107 070c 	add.w	r7, r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd90      	pop	{r4, r7, pc}

08010dd0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8010dd6:	f640 2310 	movw	r3, #2576	; 0xa10
 8010dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f040 80c0 	bne.w	8010f66 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8010de6:	f640 2304 	movw	r3, #2564	; 0xa04
 8010dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f103 0201 	add.w	r2, r3, #1
 8010df4:	f640 2304 	movw	r3, #2564	; 0xa04
 8010df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dfc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8010dfe:	f640 2304 	movw	r3, #2564	; 0xa04
 8010e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d140      	bne.n	8010e8e <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8010e0c:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8010e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8010e18:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8010e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8010e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e2a:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8010e2c:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8010e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8010e38:	f640 231c 	movw	r3, #2588	; 0xa1c
 8010e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f103 0201 	add.w	r2, r3, #1
 8010e46:	f640 231c 	movw	r3, #2588	; 0xa1c
 8010e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e4e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e50:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8010e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d107      	bne.n	8010e70 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8010e60:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8010e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e68:	f04f 32ff 	mov.w	r2, #4294967295
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	e00e      	b.n	8010e8e <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010e70:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8010e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	685a      	ldr	r2, [r3, #4]
 8010e84:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8010e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e8c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8010e8e:	f640 2304 	movw	r3, #2564	; 0xa04
 8010e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8010e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d36b      	bcc.n	8010f7e <vTaskIncrementTick+0x1ae>
 8010ea6:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8010eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d107      	bne.n	8010ec6 <vTaskIncrementTick+0xf6>
 8010eb6:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8010eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	e05b      	b.n	8010f7e <vTaskIncrementTick+0x1ae>
 8010ec6:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8010eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	60bb      	str	r3, [r7, #8]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	607b      	str	r3, [r7, #4]
 8010edc:	f640 2304 	movw	r3, #2564	; 0xa04
 8010ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d206      	bcs.n	8010efa <vTaskIncrementTick+0x12a>
 8010eec:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8010ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	601a      	str	r2, [r3, #0]
 8010ef8:	e041      	b.n	8010f7e <vTaskIncrementTick+0x1ae>
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	f103 0304 	add.w	r3, r3, #4
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fdf1 	bl	8010ae8 <vListRemove>
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d005      	beq.n	8010f1a <vTaskIncrementTick+0x14a>
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	f103 0318 	add.w	r3, r3, #24
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff fde7 	bl	8010ae8 <vListRemove>
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f1e:	f640 2308 	movw	r3, #2568	; 0xa08
 8010f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d906      	bls.n	8010f3a <vTaskIncrementTick+0x16a>
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f30:	f640 2308 	movw	r3, #2568	; 0xa08
 8010f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3e:	4613      	mov	r3, r2
 8010f40:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010f44:	189b      	adds	r3, r3, r2
 8010f46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	f640 1368 	movw	r3, #2408	; 0x968
 8010f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f54:	18d2      	adds	r2, r2, r3
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	f103 0304 	add.w	r3, r3, #4
 8010f5c:	4610      	mov	r0, r2
 8010f5e:	4619      	mov	r1, r3
 8010f60:	f7ff fd5c 	bl	8010a1c <vListInsertEnd>
 8010f64:	e79f      	b.n	8010ea6 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 8010f66:	f640 2314 	movw	r3, #2580	; 0xa14
 8010f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f103 0201 	add.w	r2, r3, #1
 8010f74:	f640 2314 	movw	r3, #2580	; 0xa14
 8010f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f7c:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8010f7e:	f107 0710 	add.w	r7, r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop

08010f88 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8010f8e:	f640 2310 	movw	r3, #2576	; 0xa10
 8010f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d007      	beq.n	8010fac <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8010f9c:	f640 2318 	movw	r3, #2584	; 0xa18
 8010fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fa4:	f04f 0201 	mov.w	r2, #1
 8010fa8:	601a      	str	r2, [r3, #0]
 8010faa:	e089      	b.n	80110c0 <vTaskSwitchContext+0x138>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8010fac:	f005 f9ca 	bl	8016344 <get_us_time>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8010fb8:	f640 1364 	movw	r3, #2404	; 0x964
 8010fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8010fc4:	f640 2324 	movw	r3, #2596	; 0xa24
 8010fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	1ac3      	subs	r3, r0, r3
 8010fd2:	18cb      	adds	r3, r1, r3
 8010fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8010fd6:	f640 2324 	movw	r3, #2596	; 0xa24
 8010fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8010fe2:	f640 1364 	movw	r3, #2404	; 0x964
 8010fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	f640 1364 	movw	r3, #2404	; 0x964
 8010ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d81d      	bhi.n	801103a <vTaskSwitchContext+0xb2>
 8010ffe:	f640 1364 	movw	r3, #2404	; 0x964
 8011002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	f640 1364 	movw	r3, #2404	; 0x964
 801100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011016:	4610      	mov	r0, r2
 8011018:	4619      	mov	r1, r3
 801101a:	f004 fe7d 	bl	8015d18 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 801101e:	e00c      	b.n	801103a <vTaskSwitchContext+0xb2>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8011020:	f640 2308 	movw	r3, #2568	; 0xa08
 8011024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f103 32ff 	add.w	r2, r3, #4294967295
 801102e:	f640 2308 	movw	r3, #2568	; 0xa08
 8011032:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011036:	601a      	str	r2, [r3, #0]
 8011038:	e000      	b.n	801103c <vTaskSwitchContext+0xb4>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 801103a:	bf00      	nop
 801103c:	f640 2308 	movw	r3, #2568	; 0xa08
 8011040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	4613      	mov	r3, r2
 8011048:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801104c:	189b      	adds	r3, r3, r2
 801104e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011052:	461a      	mov	r2, r3
 8011054:	f640 1368 	movw	r3, #2408	; 0x968
 8011058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801105c:	18d3      	adds	r3, r2, r3
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d0dd      	beq.n	8011020 <vTaskSwitchContext+0x98>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8011064:	f640 2308 	movw	r3, #2568	; 0xa08
 8011068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	4613      	mov	r3, r2
 8011070:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011074:	189b      	adds	r3, r3, r2
 8011076:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801107a:	461a      	mov	r2, r3
 801107c:	f640 1368 	movw	r3, #2408	; 0x968
 8011080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011084:	18d3      	adds	r3, r2, r3
 8011086:	603b      	str	r3, [r7, #0]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	461a      	mov	r2, r3
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	605a      	str	r2, [r3, #4]
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	f103 0308 	add.w	r3, r3, #8
 801109e:	429a      	cmp	r2, r3
 80110a0:	d105      	bne.n	80110ae <vTaskSwitchContext+0x126>
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	461a      	mov	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	605a      	str	r2, [r3, #4]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	461a      	mov	r2, r3
 80110b6:	f640 1364 	movw	r3, #2404	; 0x964
 80110ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110be:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
 80110c0:	f107 0708 	add.w	r7, r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80110d0:	f640 1364 	movw	r3, #2404	; 0x964
 80110d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80110de:	f640 2304 	movw	r3, #2564	; 0xa04
 80110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d210      	bcs.n	8011110 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80110ee:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80110f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	f640 1364 	movw	r3, #2404	; 0x964
 80110fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f103 0304 	add.w	r3, r3, #4
 8011106:	4610      	mov	r0, r2
 8011108:	4619      	mov	r1, r3
 801110a:	f7ff fcb1 	bl	8010a70 <vListInsert>
 801110e:	e01d      	b.n	801114c <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8011110:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8011114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	f640 1364 	movw	r3, #2404	; 0x964
 801111e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f103 0304 	add.w	r3, r3, #4
 8011128:	4610      	mov	r0, r2
 801112a:	4619      	mov	r1, r3
 801112c:	f7ff fca0 	bl	8010a70 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8011130:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8011134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d205      	bcs.n	801114c <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8011140:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8011144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	601a      	str	r2, [r3, #0]
		}
	}
}
 801114c:	f107 0708 	add.w	r7, r7, #8
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <disk_initialize>:
/* Initialize a Drive                                                    */

DSTATUS disk_initialize (
                         BYTE drv				/* Physical drive nmuber (0..) */
                           )
{ 
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]

	switch (drv)
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d102      	bne.n	801116a <disk_initialize+0x16>
			// Set Device Transfer Mode to DMA
			status = SD_SetDeviceMode(SD_DMA_MODE);
		  }*/


		return 0x00;
 8011164:	f04f 0300 	mov.w	r3, #0
 8011168:	e001      	b.n	801116e <disk_initialize+0x1a>

		break;
	}
	return STA_NOINIT;
 801116a:	f04f 0301 	mov.w	r3, #1
}
 801116e:	4618      	mov	r0, r3
 8011170:	f107 070c 	add.w	r7, r7, #12
 8011174:	46bd      	mov	sp, r7
 8011176:	bc80      	pop	{r7}
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop

0801117c <disk_status>:
/* Return Disk Status                                                    */

DSTATUS disk_status (
                     BYTE drv		/* Physical drive nmuber (0..) */
                       )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	71fb      	strb	r3, [r7, #7]
  switch (drv) 
 8011186:	79fb      	ldrb	r3, [r7, #7]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d110      	bne.n	80111ae <disk_status+0x32>
  {
    case SDIO_DRIVE:
    {
      SD_Error status = SD_GetCardInfo(&SDCardInfo);
 801118c:	f241 70f4 	movw	r0, #6132	; 0x17f4
 8011190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011194:	f002 ffae 	bl	80140f4 <SD_GetCardInfo>
 8011198:	4603      	mov	r3, r0
 801119a:	73fb      	strb	r3, [r7, #15]
      
      if (status != SD_OK)
 801119c:	7bfb      	ldrb	r3, [r7, #15]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d002      	beq.n	80111a8 <disk_status+0x2c>
        return STA_NOINIT;
 80111a2:	f04f 0301 	mov.w	r3, #1
 80111a6:	e004      	b.n	80111b2 <disk_status+0x36>
      else
        return 0x00;
 80111a8:	f04f 0300 	mov.w	r3, #0
 80111ac:	e001      	b.n	80111b2 <disk_status+0x36>
    }
  }
  
  return STA_NOINIT;
 80111ae:	f04f 0301 	mov.w	r3, #1
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	f107 0710 	add.w	r7, r7, #16
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <disk_read>:
                   BYTE drv,		/* Physical drive nmuber (0..) */
                   BYTE *buff,		/* Data buffer to store read data */
                   DWORD sector,	/* Sector address (LBA) */
                   BYTE count		/* Number of sectors to read (1..255) */
                     )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b086      	sub	sp, #24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	607a      	str	r2, [r7, #4]
 80111c6:	4602      	mov	r2, r0
 80111c8:	73fa      	strb	r2, [r7, #15]
 80111ca:	73bb      	strb	r3, [r7, #14]
  switch (drv) 
 80111cc:	7bfb      	ldrb	r3, [r7, #15]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d136      	bne.n	8011240 <disk_read+0x84>
  {
    case SDIO_DRIVE:
    {      
      SD_Error status = SD_OK;
 80111d2:	f04f 0300 	mov.w	r3, #0
 80111d6:	75fb      	strb	r3, [r7, #23]
      for (int secNum = 0; secNum < count && status == SD_OK; secNum++)
 80111d8:	f04f 0300 	mov.w	r3, #0
 80111dc:	613b      	str	r3, [r7, #16]
 80111de:	e01f      	b.n	8011220 <disk_read+0x64>
      {
        status = SD_ReadBlock((uint8_t*)(buff+512*secNum),(sector+secNum)*512,512);
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	ea4f 2343 	mov.w	r3, r3, lsl #9
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	18d2      	adds	r2, r2, r3
 80111ea:	6939      	ldr	r1, [r7, #16]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	18cb      	adds	r3, r1, r3
 80111f0:	ea4f 2343 	mov.w	r3, r3, lsl #9
 80111f4:	4610      	mov	r0, r2
 80111f6:	4619      	mov	r1, r3
 80111f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111fc:	f003 fbde 	bl	80149bc <SD_ReadBlock>
 8011200:	4603      	mov	r3, r0
 8011202:	75fb      	strb	r3, [r7, #23]

        /* Check if the Transfer is finished */
        status = SD_WaitReadOperation();
 8011204:	f003 fcb8 	bl	8014b78 <SD_WaitReadOperation>
 8011208:	4603      	mov	r3, r0
 801120a:	75fb      	strb	r3, [r7, #23]

        /* Wait until end of DMA transfer */
        while(SD_GetStatus() != SD_TRANSFER_OK);
 801120c:	bf00      	nop
 801120e:	f002 fc11 	bl	8013a34 <SD_GetStatus>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	d1fa      	bne.n	801120e <disk_read+0x52>
  switch (drv) 
  {
    case SDIO_DRIVE:
    {      
      SD_Error status = SD_OK;
      for (int secNum = 0; secNum < count && status == SD_OK; secNum++)
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	f103 0301 	add.w	r3, r3, #1
 801121e:	613b      	str	r3, [r7, #16]
 8011220:	7bba      	ldrb	r2, [r7, #14]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	429a      	cmp	r2, r3
 8011226:	dd02      	ble.n	801122e <disk_read+0x72>
 8011228:	7dfb      	ldrb	r3, [r7, #23]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d0d8      	beq.n	80111e0 <disk_read+0x24>
        status = SD_WaitReadOperation();

        /* Wait until end of DMA transfer */
        while(SD_GetStatus() != SD_TRANSFER_OK);
      }
      if (status == SD_OK)
 801122e:	7dfb      	ldrb	r3, [r7, #23]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d102      	bne.n	801123a <disk_read+0x7e>
        return RES_OK;
 8011234:	f04f 0300 	mov.w	r3, #0
 8011238:	e004      	b.n	8011244 <disk_read+0x88>
      else
        return RES_ERROR;
 801123a:	f04f 0301 	mov.w	r3, #1
 801123e:	e001      	b.n	8011244 <disk_read+0x88>
    }
  }
  return RES_PARERR;
 8011240:	f04f 0304 	mov.w	r3, #4
}
 8011244:	4618      	mov	r0, r3
 8011246:	f107 0718 	add.w	r7, r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop

08011250 <disk_write>:
                    BYTE drv,			/* Physical drive nmuber (0..) */
                    const BYTE *buff,	/* Data to be written */
                    DWORD sector,		/* Sector address (LBA) */
                    BYTE count			/* Number of sectors to write (1..255) */
                      )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b086      	sub	sp, #24
 8011254:	af00      	add	r7, sp, #0
 8011256:	60b9      	str	r1, [r7, #8]
 8011258:	607a      	str	r2, [r7, #4]
 801125a:	4602      	mov	r2, r0
 801125c:	73fa      	strb	r2, [r7, #15]
 801125e:	73bb      	strb	r3, [r7, #14]
  switch (drv) 
 8011260:	7bfb      	ldrb	r3, [r7, #15]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d136      	bne.n	80112d4 <disk_write+0x84>
  {
    case SDIO_DRIVE:
    {      
      SD_Error status = SD_OK;
 8011266:	f04f 0300 	mov.w	r3, #0
 801126a:	75fb      	strb	r3, [r7, #23]
      for (int secNum = 0; secNum < count && status == SD_OK; secNum++)
 801126c:	f04f 0300 	mov.w	r3, #0
 8011270:	613b      	str	r3, [r7, #16]
 8011272:	e01f      	b.n	80112b4 <disk_write+0x64>
      {
        status = SD_WriteBlock((uint8_t*)(buff+512*secNum),(sector+secNum)*512,512);
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	18d2      	adds	r2, r2, r3
 801127e:	6939      	ldr	r1, [r7, #16]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	18cb      	adds	r3, r1, r3
 8011284:	ea4f 2343 	mov.w	r3, r3, lsl #9
 8011288:	4610      	mov	r0, r2
 801128a:	4619      	mov	r1, r3
 801128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011290:	f003 fce2 	bl	8014c58 <SD_WriteBlock>
 8011294:	4603      	mov	r3, r0
 8011296:	75fb      	strb	r3, [r7, #23]

        /* Check if the Transfer is finished */
        status = SD_WaitWriteOperation();
 8011298:	f003 fdbc 	bl	8014e14 <SD_WaitWriteOperation>
 801129c:	4603      	mov	r3, r0
 801129e:	75fb      	strb	r3, [r7, #23]

        /* Wait until end of DMA transfer */
        while(SD_GetStatus() != SD_TRANSFER_OK);
 80112a0:	bf00      	nop
 80112a2:	f002 fbc7 	bl	8013a34 <SD_GetStatus>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1fa      	bne.n	80112a2 <disk_write+0x52>
  switch (drv) 
  {
    case SDIO_DRIVE:
    {      
      SD_Error status = SD_OK;
      for (int secNum = 0; secNum < count && status == SD_OK; secNum++)
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	f103 0301 	add.w	r3, r3, #1
 80112b2:	613b      	str	r3, [r7, #16]
 80112b4:	7bba      	ldrb	r2, [r7, #14]
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	dd02      	ble.n	80112c2 <disk_write+0x72>
 80112bc:	7dfb      	ldrb	r3, [r7, #23]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0d8      	beq.n	8011274 <disk_write+0x24>
        status = SD_WaitWriteOperation();

        /* Wait until end of DMA transfer */
        while(SD_GetStatus() != SD_TRANSFER_OK);
      }
      if (status == SD_OK)
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d102      	bne.n	80112ce <disk_write+0x7e>
        return RES_OK;
 80112c8:	f04f 0300 	mov.w	r3, #0
 80112cc:	e004      	b.n	80112d8 <disk_write+0x88>
      else
        return RES_ERROR;
 80112ce:	f04f 0301 	mov.w	r3, #1
 80112d2:	e001      	b.n	80112d8 <disk_write+0x88>
    }
  }
  return RES_PARERR;
 80112d4:	f04f 0304 	mov.w	r3, #4
}
 80112d8:	4618      	mov	r0, r3
 80112da:	f107 0718 	add.w	r7, r7, #24
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop

080112e4 <disk_ioctl>:
DRESULT disk_ioctl (
                    BYTE drv,		/* Physical drive nmuber (0..) */
                    BYTE ctrl,		/* Control code */
                    void *buff		/* Buffer to send/receive control data */
                      )
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	460b      	mov	r3, r1
 80112ec:	603a      	str	r2, [r7, #0]
 80112ee:	4602      	mov	r2, r0
 80112f0:	71fa      	strb	r2, [r7, #7]
 80112f2:	71bb      	strb	r3, [r7, #6]
  switch (drv) 
 80112f4:	79fb      	ldrb	r3, [r7, #7]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d12c      	bne.n	8011354 <disk_ioctl+0x70>
  {
    case SDIO_DRIVE:
    {      
      switch (ctrl)
 80112fa:	79bb      	ldrb	r3, [r7, #6]
 80112fc:	2b03      	cmp	r3, #3
 80112fe:	d828      	bhi.n	8011352 <disk_ioctl+0x6e>
 8011300:	a201      	add	r2, pc, #4	; (adr r2, 8011308 <disk_ioctl+0x24>)
 8011302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011306:	bf00      	nop
 8011308:	08011319 	.word	0x08011319
 801130c:	0801132d 	.word	0x0801132d
 8011310:	0801131f 	.word	0x0801131f
 8011314:	08011345 	.word	0x08011345
      {
        case CTRL_SYNC:
          // no synchronization to do since not buffering in this module
          return RES_OK;
 8011318:	f04f 0300 	mov.w	r3, #0
 801131c:	e01c      	b.n	8011358 <disk_ioctl+0x74>
        case GET_SECTOR_SIZE:
          *(WORD*)buff = 512;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011324:	801a      	strh	r2, [r3, #0]
          return RES_OK;
 8011326:	f04f 0300 	mov.w	r3, #0
 801132a:	e015      	b.n	8011358 <disk_ioctl+0x74>
        case GET_SECTOR_COUNT:
          *(DWORD*)buff = SDCardInfo.CardCapacity / 512;
 801132c:	f241 73f4 	movw	r3, #6132	; 0x17f4
 8011330:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011336:	ea4f 2253 	mov.w	r2, r3, lsr #9
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	601a      	str	r2, [r3, #0]
          return RES_OK;
 801133e:	f04f 0300 	mov.w	r3, #0
 8011342:	e009      	b.n	8011358 <disk_ioctl+0x74>
        case GET_BLOCK_SIZE:
          *(DWORD*)buff = 512;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	f44f 7200 	mov.w	r2, #512	; 0x200
 801134a:	601a      	str	r2, [r3, #0]
          return RES_OK;
 801134c:	f04f 0300 	mov.w	r3, #0
 8011350:	e002      	b.n	8011358 <disk_ioctl+0x74>
          break;
      }
      break;
 8011352:	bf00      	nop
    }
  }
  return RES_PARERR;
 8011354:	f04f 0304 	mov.w	r3, #4
}
 8011358:	4618      	mov	r0, r3
 801135a:	f107 070c 	add.w	r7, r7, #12
 801135e:	46bd      	mov	sp, r7
 8011360:	bc80      	pop	{r7}
 8011362:	4770      	bx	lr

08011364 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
 8011364:	b480      	push	{r7}
 8011366:	b087      	sub	sp, #28
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]
	char *d = (char*)dst;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	617b      	str	r3, [r7, #20]
	const char *s = (const char *)src;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	613b      	str	r3, [r7, #16]
	while (cnt--) *d++ = *s++;
 8011378:	e00b      	b.n	8011392 <mem_cpy+0x2e>
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	781a      	ldrb	r2, [r3, #0]
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	701a      	strb	r2, [r3, #0]
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	f103 0301 	add.w	r3, r3, #1
 8011388:	617b      	str	r3, [r7, #20]
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	f103 0301 	add.w	r3, r3, #1
 8011390:	613b      	str	r3, [r7, #16]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	bf0c      	ite	eq
 8011398:	2300      	moveq	r3, #0
 801139a:	2301      	movne	r3, #1
 801139c:	b2db      	uxtb	r3, r3
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80113a4:	607a      	str	r2, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1e7      	bne.n	801137a <mem_cpy+0x16>
}
 80113aa:	f107 071c 	add.w	r7, r7, #28
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bc80      	pop	{r7}
 80113b2:	4770      	bx	lr

080113b4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
 80113b4:	b480      	push	{r7}
 80113b6:	b087      	sub	sp, #28
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
	char *d = (char*)dst;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	617b      	str	r3, [r7, #20]
	while (cnt--) *d++ = (char)val;
 80113c4:	e007      	b.n	80113d6 <mem_set+0x22>
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	f103 0301 	add.w	r3, r3, #1
 80113d4:	617b      	str	r3, [r7, #20]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	bf0c      	ite	eq
 80113dc:	2300      	moveq	r3, #0
 80113de:	2301      	movne	r3, #1
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80113e8:	607a      	str	r2, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1eb      	bne.n	80113c6 <mem_set+0x12>
}
 80113ee:	f107 071c 	add.w	r7, r7, #28
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bc80      	pop	{r7}
 80113f6:	4770      	bx	lr

080113f8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
 80113f8:	b480      	push	{r7}
 80113fa:	b089      	sub	sp, #36	; 0x24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
	const char *d = (const char *)dst, *s = (const char *)src;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	61fb      	str	r3, [r7, #28]
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801140c:	f04f 0300 	mov.w	r3, #0
 8011410:	617b      	str	r3, [r7, #20]
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8011412:	bf00      	nop
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	bf0c      	ite	eq
 801141a:	2300      	moveq	r3, #0
 801141c:	2301      	movne	r3, #1
 801141e:	b2db      	uxtb	r3, r3
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	f102 32ff 	add.w	r2, r2, #4294967295
 8011426:	607a      	str	r2, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d016      	beq.n	801145a <mem_cmp+0x62>
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	461a      	mov	r2, r3
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	617b      	str	r3, [r7, #20]
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	2b00      	cmp	r3, #0
 801143e:	bf14      	ite	ne
 8011440:	2300      	movne	r3, #0
 8011442:	2301      	moveq	r3, #1
 8011444:	b2db      	uxtb	r3, r3
 8011446:	69fa      	ldr	r2, [r7, #28]
 8011448:	f102 0201 	add.w	r2, r2, #1
 801144c:	61fa      	str	r2, [r7, #28]
 801144e:	69ba      	ldr	r2, [r7, #24]
 8011450:	f102 0201 	add.w	r2, r2, #1
 8011454:	61ba      	str	r2, [r7, #24]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d1dc      	bne.n	8011414 <mem_cmp+0x1c>
	return r;
 801145a:	697b      	ldr	r3, [r7, #20]
}
 801145c:	4618      	mov	r0, r3
 801145e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8011462:	46bd      	mov	sp, r7
 8011464:	bc80      	pop	{r7}
 8011466:	4770      	bx	lr

08011468 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011472:	e003      	b.n	801147c <chk_chr+0x14>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f103 0301 	add.w	r3, r3, #1
 801147a:	607b      	str	r3, [r7, #4]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d005      	beq.n	8011490 <chk_chr+0x28>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	461a      	mov	r2, r3
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	429a      	cmp	r2, r3
 801148e:	d1f1      	bne.n	8011474 <chk_chr+0xc>
	return *str;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	781b      	ldrb	r3, [r3, #0]
}
 8011494:	4618      	mov	r0, r3
 8011496:	f107 070c 	add.w	r7, r7, #12
 801149a:	46bd      	mov	sp, r7
 801149c:	bc80      	pop	{r7}
 801149e:	4770      	bx	lr

080114a0 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114ae:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 80114b0:	68fa      	ldr	r2, [r7, #12]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d055      	beq.n	8011564 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	791b      	ldrb	r3, [r3, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d039      	beq.n	8011534 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	785a      	ldrb	r2, [r3, #1]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80114ca:	4610      	mov	r0, r2
 80114cc:	4619      	mov	r1, r3
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	f04f 0301 	mov.w	r3, #1
 80114d4:	f7ff febc 	bl	8011250 <disk_write>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d002      	beq.n	80114e4 <move_window+0x44>
				return FR_DISK_ERR;
 80114de:	f04f 0301 	mov.w	r3, #1
 80114e2:	e041      	b.n	8011568 <move_window+0xc8>
			fs->wflag = 0;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f04f 0200 	mov.w	r2, #0
 80114ea:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	69db      	ldr	r3, [r3, #28]
 80114f4:	18d2      	adds	r2, r2, r3
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d91b      	bls.n	8011534 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	78db      	ldrb	r3, [r3, #3]
 8011500:	72fb      	strb	r3, [r7, #11]
 8011502:	e014      	b.n	801152e <move_window+0x8e>
					wsect += fs->sects_fat;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	69db      	ldr	r3, [r3, #28]
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	18d3      	adds	r3, r2, r3
 801150c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drive, fs->win, wsect, 1);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	785a      	ldrb	r2, [r3, #1]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011518:	4610      	mov	r0, r2
 801151a:	4619      	mov	r1, r3
 801151c:	68fa      	ldr	r2, [r7, #12]
 801151e:	f04f 0301 	mov.w	r3, #1
 8011522:	f7ff fe95 	bl	8011250 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8011526:	7afb      	ldrb	r3, [r7, #11]
 8011528:	f103 33ff 	add.w	r3, r3, #4294967295
 801152c:	72fb      	strb	r3, [r7, #11]
 801152e:	7afb      	ldrb	r3, [r7, #11]
 8011530:	2b01      	cmp	r3, #1
 8011532:	d8e7      	bhi.n	8011504 <move_window+0x64>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d014      	beq.n	8011564 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	785a      	ldrb	r2, [r3, #1]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011544:	4610      	mov	r0, r2
 8011546:	4619      	mov	r1, r3
 8011548:	683a      	ldr	r2, [r7, #0]
 801154a:	f04f 0301 	mov.w	r3, #1
 801154e:	f7ff fe35 	bl	80111bc <disk_read>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <move_window+0xbe>
				return FR_DISK_ERR;
 8011558:	f04f 0301 	mov.w	r3, #1
 801155c:	e004      	b.n	8011568 <move_window+0xc8>
			fs->winsect = sector;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	683a      	ldr	r2, [r7, #0]
 8011562:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}

	return FR_OK;
 8011564:	f04f 0300 	mov.w	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	f107 0710 	add.w	r7, r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
 8011572:	bf00      	nop

08011574 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f04f 0100 	mov.w	r1, #0
 8011582:	f7ff ff8d 	bl	80114a0 <move_window>
 8011586:	4603      	mov	r3, r0
 8011588:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	2b00      	cmp	r3, #0
 801158e:	f040 80ab 	bne.w	80116e8 <sync+0x174>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	2b03      	cmp	r3, #3
 8011598:	f040 8097 	bne.w	80116ca <sync+0x156>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	7a9b      	ldrb	r3, [r3, #10]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	f000 8092 	beq.w	80116ca <sync+0x156>
			fs->winsect = 0;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f04f 0200 	mov.w	r2, #0
 80115ac:	631a      	str	r2, [r3, #48]	; 0x30
			mem_set(fs->win, 0, 512);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80115b4:	4618      	mov	r0, r3
 80115b6:	f04f 0100 	mov.w	r1, #0
 80115ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115be:	f7ff fef9 	bl	80113b4 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f04f 0255 	mov.w	r2, #85	; 0x55
 80115c8:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 80115d2:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f04f 0252 	mov.w	r2, #82	; 0x52
 80115dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f04f 0252 	mov.w	r2, #82	; 0x52
 80115e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f04f 0261 	mov.w	r2, #97	; 0x61
 80115f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f04f 0241 	mov.w	r2, #65	; 0x41
 80115fa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f04f 0272 	mov.w	r2, #114	; 0x72
 8011604:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f04f 0272 	mov.w	r2, #114	; 0x72
 801160e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f04f 0241 	mov.w	r2, #65	; 0x41
 8011618:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f04f 0261 	mov.w	r2, #97	; 0x61
 8011622:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	691b      	ldr	r3, [r3, #16]
 801162a:	b2da      	uxtb	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	b29b      	uxth	r3, r3
 8011638:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801163c:	b29b      	uxth	r3, r3
 801163e:	b2da      	uxtb	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801164e:	b2da      	uxtb	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	691b      	ldr	r3, [r3, #16]
 801165a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801165e:	b2da      	uxtb	r2, r3
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	b2da      	uxtb	r2, r3
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	b29b      	uxth	r3, r3
 8011678:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801167c:	b29b      	uxth	r3, r3
 801167e:	b2da      	uxtb	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801168e:	b2da      	uxtb	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	7859      	ldrb	r1, [r3, #1]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	695b      	ldr	r3, [r3, #20]
 80116b4:	4608      	mov	r0, r1
 80116b6:	4611      	mov	r1, r2
 80116b8:	461a      	mov	r2, r3
 80116ba:	f04f 0301 	mov.w	r3, #1
 80116be:	f7ff fdc7 	bl	8011250 <disk_write>
			fs->fsi_flag = 0;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f04f 0200 	mov.w	r2, #0
 80116c8:	729a      	strb	r2, [r3, #10]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	785b      	ldrb	r3, [r3, #1]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f04f 0100 	mov.w	r1, #0
 80116d4:	f04f 0200 	mov.w	r2, #0
 80116d8:	f7ff fe04 	bl	80112e4 <disk_ioctl>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d002      	beq.n	80116e8 <sync+0x174>
			res = FR_DISK_ERR;
 80116e2:	f04f 0301 	mov.w	r3, #1
 80116e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80116e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	f107 0710 	add.w	r7, r7, #16
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d904      	bls.n	801170e <get_fat+0x1a>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a1a      	ldr	r2, [r3, #32]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	429a      	cmp	r2, r3
 801170c:	d802      	bhi.n	8011714 <get_fat+0x20>
		return 1;
 801170e:	f04f 0301 	mov.w	r3, #1
 8011712:	e0e3      	b.n	80118dc <get_fat+0x1e8>

	fsect = fs->fatbase;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011718:	617b      	str	r3, [r7, #20]
	switch (fs->fs_type) {
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	2b02      	cmp	r3, #2
 8011720:	d052      	beq.n	80117c8 <get_fat+0xd4>
 8011722:	2b03      	cmp	r3, #3
 8011724:	d07f      	beq.n	8011826 <get_fat+0x132>
 8011726:	2b01      	cmp	r3, #1
 8011728:	f040 80d6 	bne.w	80118d8 <get_fat+0x1e4>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	613b      	str	r3, [r7, #16]
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011736:	693a      	ldr	r2, [r7, #16]
 8011738:	18d3      	adds	r3, r2, r3
 801173a:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	18d3      	adds	r3, r2, r3
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	4619      	mov	r1, r3
 801174a:	f7ff fea9 	bl	80114a0 <move_window>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	f040 80ba 	bne.w	80118ca <get_fat+0x1d6>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801175c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	18d3      	adds	r3, r2, r3
 8011764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011768:	60fb      	str	r3, [r7, #12]
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	f103 0301 	add.w	r3, r3, #1
 8011770:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	18d3      	adds	r3, r2, r3
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	4619      	mov	r1, r3
 8011780:	f7ff fe8e 	bl	80114a0 <move_window>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	f040 80a1 	bne.w	80118ce <get_fat+0x1da>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011792:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	18d3      	adds	r3, r2, r3
 801179a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801179e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	4313      	orrs	r3, r2
 80117a6:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d003      	beq.n	80117bc <get_fat+0xc8>
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80117ba:	e004      	b.n	80117c6 <get_fat+0xd2>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80117c2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80117c6:	e089      	b.n	80118dc <get_fat+0x1e8>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	ea4f 2213 	mov.w	r2, r3, lsr #8
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	18d3      	adds	r3, r2, r3
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	4619      	mov	r1, r3
 80117d6:	f7ff fe63 	bl	80114a0 <move_window>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d178      	bne.n	80118d2 <get_fat+0x1de>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80117ee:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80117f2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80117f6:	f103 0301 	add.w	r3, r3, #1
 80117fa:	18d3      	adds	r3, r2, r3
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	b29b      	uxth	r3, r3
 801180e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011812:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011816:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801181a:	18cb      	adds	r3, r1, r3
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	4313      	orrs	r3, r2
 8011820:	b29b      	uxth	r3, r3
 8011822:	b29b      	uxth	r3, r3
 8011824:	e05a      	b.n	80118dc <get_fat+0x1e8>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	ea4f 12d3 	mov.w	r2, r3, lsr #7
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	18d3      	adds	r3, r2, r3
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	4619      	mov	r1, r3
 8011834:	f7ff fe34 	bl	80114a0 <move_window>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d14b      	bne.n	80118d6 <get_fat+0x1e2>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	b29b      	uxth	r3, r3
 8011848:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801184c:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011850:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011854:	f103 0303 	add.w	r3, r3, #3
 8011858:	18d3      	adds	r3, r2, r3
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	b29b      	uxth	r3, r3
 801186a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801186e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011872:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011876:	f103 0302 	add.w	r3, r3, #2
 801187a:	18cb      	adds	r3, r1, r3
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8011882:	431a      	orrs	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	b29b      	uxth	r3, r3
 801188e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011892:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011896:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801189a:	f103 0301 	add.w	r3, r3, #1
 801189e:	18cb      	adds	r3, r1, r3
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80118a6:	431a      	orrs	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80118b6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80118ba:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80118be:	18cb      	adds	r3, r1, r3
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	4313      	orrs	r3, r2
 80118c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80118c8:	e008      	b.n	80118dc <get_fat+0x1e8>

	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 80118ca:	bf00      	nop
 80118cc:	e004      	b.n	80118d8 <get_fat+0x1e4>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 80118ce:	bf00      	nop
 80118d0:	e002      	b.n	80118d8 <get_fat+0x1e4>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 80118d2:	bf00      	nop
 80118d4:	e000      	b.n	80118d8 <get_fat+0x1e4>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 80118d6:	bf00      	nop
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 80118d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80118dc:	4618      	mov	r0, r3
 80118de:	f107 0718 	add.w	r7, r7, #24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop

080118e8 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b088      	sub	sp, #32
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d904      	bls.n	8011904 <put_fat+0x1c>
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	6a1a      	ldr	r2, [r3, #32]
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	429a      	cmp	r2, r3
 8011902:	d803      	bhi.n	801190c <put_fat+0x24>
		res = FR_INT_ERR;
 8011904:	f04f 0302 	mov.w	r3, #2
 8011908:	77fb      	strb	r3, [r7, #31]
 801190a:	e121      	b.n	8011b50 <put_fat+0x268>

	} else {
		fsect = fs->fatbase;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011910:	61bb      	str	r3, [r7, #24]
		switch (fs->fs_type) {
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	2b02      	cmp	r3, #2
 8011918:	d07e      	beq.n	8011a18 <put_fat+0x130>
 801191a:	2b03      	cmp	r3, #3
 801191c:	f000 80b0 	beq.w	8011a80 <put_fat+0x198>
 8011920:	2b01      	cmp	r3, #1
 8011922:	f040 8106 	bne.w	8011b32 <put_fat+0x24a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	617b      	str	r3, [r7, #20]
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011930:	697a      	ldr	r2, [r7, #20]
 8011932:	18d3      	adds	r3, r2, r3
 8011934:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	ea4f 2253 	mov.w	r2, r3, lsr #9
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	18d3      	adds	r3, r2, r3
 8011940:	68f8      	ldr	r0, [r7, #12]
 8011942:	4619      	mov	r1, r3
 8011944:	f7ff fdac 	bl	80114a0 <move_window>
 8011948:	4603      	mov	r3, r0
 801194a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801194c:	7ffb      	ldrb	r3, [r7, #31]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f040 80f3 	bne.w	8011b3a <put_fat+0x252>
			p = &fs->win[bc & (SS(fs) - 1)];
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011960:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011964:	18d3      	adds	r3, r2, r3
 8011966:	613b      	str	r3, [r7, #16]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	b2db      	uxtb	r3, r3
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00e      	beq.n	8011992 <put_fat+0xaa>
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	b2db      	uxtb	r3, r3
 801197a:	f003 030f 	and.w	r3, r3, #15
 801197e:	b2da      	uxtb	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	b2db      	uxtb	r3, r3
 8011984:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011988:	b2db      	uxtb	r3, r3
 801198a:	4313      	orrs	r3, r2
 801198c:	b2db      	uxtb	r3, r3
 801198e:	b2db      	uxtb	r3, r3
 8011990:	e001      	b.n	8011996 <put_fat+0xae>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	b2db      	uxtb	r3, r3
 8011996:	693a      	ldr	r2, [r7, #16]
 8011998:	7013      	strb	r3, [r2, #0]
			bc++;
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	f103 0301 	add.w	r3, r3, #1
 80119a0:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f04f 0201 	mov.w	r2, #1
 80119a8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	ea4f 2253 	mov.w	r2, r3, lsr #9
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	18d3      	adds	r3, r2, r3
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	4619      	mov	r1, r3
 80119b8:	f7ff fd72 	bl	80114a0 <move_window>
 80119bc:	4603      	mov	r3, r0
 80119be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119c0:	7ffb      	ldrb	r3, [r7, #31]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f040 80bb 	bne.w	8011b3e <put_fat+0x256>
			p = &fs->win[bc & (SS(fs) - 1)];
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80119d4:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80119d8:	18d3      	adds	r3, r2, r3
 80119da:	613b      	str	r3, [r7, #16]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	f003 0301 	and.w	r3, r3, #1
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d004      	beq.n	80119f2 <put_fat+0x10a>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	e00f      	b.n	8011a12 <put_fat+0x12a>
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	f023 030f 	bic.w	r3, r3, #15
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	f003 030f 	and.w	r3, r3, #15
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	4313      	orrs	r3, r2
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	b2db      	uxtb	r3, r3
 8011a12:	693a      	ldr	r2, [r7, #16]
 8011a14:	7013      	strb	r3, [r2, #0]
			break;
 8011a16:	e097      	b.n	8011b48 <put_fat+0x260>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	18d3      	adds	r3, r2, r3
 8011a22:	68f8      	ldr	r0, [r7, #12]
 8011a24:	4619      	mov	r1, r3
 8011a26:	f7ff fd3b 	bl	80114a0 <move_window>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a2e:	7ffb      	ldrb	r3, [r7, #31]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f040 8086 	bne.w	8011b42 <put_fat+0x25a>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a44:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011a48:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011a4c:	18d3      	adds	r3, r2, r3
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	b2d2      	uxtb	r2, r2
 8011a52:	701a      	strb	r2, [r3, #0]
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a62:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011a66:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011a6a:	f103 0301 	add.w	r3, r3, #1
 8011a6e:	18d3      	adds	r3, r2, r3
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	b292      	uxth	r2, r2
 8011a74:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8011a78:	b292      	uxth	r2, r2
 8011a7a:	b2d2      	uxtb	r2, r2
 8011a7c:	701a      	strb	r2, [r3, #0]
			break;
 8011a7e:	e063      	b.n	8011b48 <put_fat+0x260>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	ea4f 12d3 	mov.w	r2, r3, lsr #7
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	18d3      	adds	r3, r2, r3
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	f7ff fd07 	bl	80114a0 <move_window>
 8011a92:	4603      	mov	r3, r0
 8011a94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a96:	7ffb      	ldrb	r3, [r7, #31]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d154      	bne.n	8011b46 <put_fat+0x25e>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011aaa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011aae:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011ab2:	18d3      	adds	r3, r2, r3
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	b2d2      	uxtb	r2, r2
 8011ab8:	701a      	strb	r2, [r3, #0]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011ac8:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011acc:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011ad0:	f103 0301 	add.w	r3, r3, #1
 8011ad4:	18d3      	adds	r3, r2, r3
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	b292      	uxth	r2, r2
 8011ada:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8011ade:	b292      	uxth	r2, r2
 8011ae0:	b2d2      	uxtb	r2, r2
 8011ae2:	701a      	strb	r2, [r3, #0]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011af2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011af6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011afa:	f103 0302 	add.w	r3, r3, #2
 8011afe:	18d3      	adds	r3, r2, r3
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8011b06:	b2d2      	uxtb	r2, r2
 8011b08:	701a      	strb	r2, [r3, #0]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011b18:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011b1c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011b20:	f103 0303 	add.w	r3, r3, #3
 8011b24:	18d3      	adds	r3, r2, r3
 8011b26:	687a      	ldr	r2, [r7, #4]
 8011b28:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8011b2c:	b2d2      	uxtb	r2, r2
 8011b2e:	701a      	strb	r2, [r3, #0]
			break;
 8011b30:	e00a      	b.n	8011b48 <put_fat+0x260>

		default :
			res = FR_INT_ERR;
 8011b32:	f04f 0302 	mov.w	r3, #2
 8011b36:	77fb      	strb	r3, [r7, #31]
			break;
 8011b38:	e006      	b.n	8011b48 <put_fat+0x260>
		fsect = fs->fatbase;
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
 8011b3a:	bf00      	nop
 8011b3c:	e004      	b.n	8011b48 <put_fat+0x260>
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
 8011b3e:	bf00      	nop
 8011b40:	e002      	b.n	8011b48 <put_fat+0x260>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
 8011b42:	bf00      	nop
 8011b44:	e000      	b.n	8011b48 <put_fat+0x260>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
 8011b46:	bf00      	nop

		default :
			res = FR_INT_ERR;
			break;
		}
		fs->wflag = 1;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f04f 0201 	mov.w	r2, #1
 8011b4e:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8011b50:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	f107 0720 	add.w	r7, r7, #32
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d904      	bls.n	8011b76 <remove_chain+0x1a>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a1a      	ldr	r2, [r3, #32]
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d803      	bhi.n	8011b7e <remove_chain+0x22>
		res = FR_INT_ERR;
 8011b76:	f04f 0302 	mov.w	r3, #2
 8011b7a:	73fb      	strb	r3, [r7, #15]
 8011b7c:	e040      	b.n	8011c00 <remove_chain+0xa4>

	} else {
		res = FR_OK;
 8011b7e:	f04f 0300 	mov.w	r3, #0
 8011b82:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->max_clust) {			/* Not a last link? */
 8011b84:	e033      	b.n	8011bee <remove_chain+0x92>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	6839      	ldr	r1, [r7, #0]
 8011b8a:	f7ff fdb3 	bl	80116f4 <get_fat>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d030      	beq.n	8011bfa <remove_chain+0x9e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d103      	bne.n	8011ba6 <remove_chain+0x4a>
 8011b9e:	f04f 0302 	mov.w	r3, #2
 8011ba2:	73fb      	strb	r3, [r7, #15]
 8011ba4:	e02c      	b.n	8011c00 <remove_chain+0xa4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bac:	d103      	bne.n	8011bb6 <remove_chain+0x5a>
 8011bae:	f04f 0301 	mov.w	r3, #1
 8011bb2:	73fb      	strb	r3, [r7, #15]
 8011bb4:	e024      	b.n	8011c00 <remove_chain+0xa4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	6839      	ldr	r1, [r7, #0]
 8011bba:	f04f 0200 	mov.w	r2, #0
 8011bbe:	f7ff fe93 	bl	80118e8 <put_fat>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011bc6:	7bfb      	ldrb	r3, [r7, #15]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d118      	bne.n	8011bfe <remove_chain+0xa2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bd4:	d009      	beq.n	8011bea <remove_chain+0x8e>
				fs->free_clust++;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	691b      	ldr	r3, [r3, #16]
 8011bda:	f103 0201 	add.w	r2, r3, #1
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f04f 0201 	mov.w	r2, #1
 8011be8:	729a      	strb	r2, [r3, #10]
			}
			clst = nxt;	/* Next cluster */
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a1a      	ldr	r2, [r3, #32]
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d8c6      	bhi.n	8011b86 <remove_chain+0x2a>
 8011bf8:	e002      	b.n	8011c00 <remove_chain+0xa4>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8011bfa:	bf00      	nop
 8011bfc:	e000      	b.n	8011c00 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
 8011bfe:	bf00      	nop
			}
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	f107 0710 	add.w	r7, r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a1b      	ldr	r3, [r3, #32]
 8011c1a:	60fb      	str	r3, [r7, #12]
	if (clst == 0) {		/* Create new chain */
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d10d      	bne.n	8011c3e <create_chain+0x32>
		scl = fs->last_clust;			/* Get suggested start point */
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	613b      	str	r3, [r7, #16]
		if (scl == 0 || scl >= mcl) scl = 1;
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <create_chain+0x2a>
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d317      	bcc.n	8011c66 <create_chain+0x5a>
 8011c36:	f04f 0301 	mov.w	r3, #1
 8011c3a:	613b      	str	r3, [r7, #16]
 8011c3c:	e013      	b.n	8011c66 <create_chain+0x5a>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	6839      	ldr	r1, [r7, #0]
 8011c42:	f7ff fd57 	bl	80116f4 <get_fat>
 8011c46:	4603      	mov	r3, r0
 8011c48:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d802      	bhi.n	8011c56 <create_chain+0x4a>
 8011c50:	f04f 0301 	mov.w	r3, #1
 8011c54:	e064      	b.n	8011d20 <create_chain+0x114>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 8011c56:	68ba      	ldr	r2, [r7, #8]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d201      	bcs.n	8011c62 <create_chain+0x56>
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	e05e      	b.n	8011d20 <create_chain+0x114>
		scl = clst;
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	617b      	str	r3, [r7, #20]
 8011c6a:	e000      	b.n	8011c6e <create_chain+0x62>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}
 8011c6c:	bf00      	nop
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	f103 0301 	add.w	r3, r3, #1
 8011c74:	617b      	str	r3, [r7, #20]
		if (ncl >= mcl) {				/* Wrap around */
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d309      	bcc.n	8011c92 <create_chain+0x86>
			ncl = 2;
 8011c7e:	f04f 0302 	mov.w	r3, #2
 8011c82:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free custer */
 8011c84:	697a      	ldr	r2, [r7, #20]
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d902      	bls.n	8011c92 <create_chain+0x86>
 8011c8c:	f04f 0300 	mov.w	r3, #0
 8011c90:	e046      	b.n	8011d20 <create_chain+0x114>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	6979      	ldr	r1, [r7, #20]
 8011c96:	f7ff fd2d 	bl	80116f4 <get_fat>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00f      	beq.n	8011cc4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011caa:	d002      	beq.n	8011cb2 <create_chain+0xa6>
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d101      	bne.n	8011cb6 <create_chain+0xaa>
			return cs;
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	e034      	b.n	8011d20 <create_chain+0x114>
		if (ncl == scl) return 0;		/* No free custer */
 8011cb6:	697a      	ldr	r2, [r7, #20]
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d1d6      	bne.n	8011c6c <create_chain+0x60>
 8011cbe:	f04f 0300 	mov.w	r3, #0
 8011cc2:	e02d      	b.n	8011d20 <create_chain+0x114>
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
 8011cc4:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	6979      	ldr	r1, [r7, #20]
 8011cca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011cce:	f7ff fe0b 	bl	80118e8 <put_fat>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d002      	beq.n	8011cde <create_chain+0xd2>
		return 0xFFFFFFFF;
 8011cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cdc:	e020      	b.n	8011d20 <create_chain+0x114>
	if (clst != 0) {					/* Link it to the previous one if needed */
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d00a      	beq.n	8011cfa <create_chain+0xee>
		if (put_fat(fs, clst, ncl))
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	6839      	ldr	r1, [r7, #0]
 8011ce8:	697a      	ldr	r2, [r7, #20]
 8011cea:	f7ff fdfd 	bl	80118e8 <put_fat>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d002      	beq.n	8011cfa <create_chain+0xee>
			return 0xFFFFFFFF;
 8011cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf8:	e012      	b.n	8011d20 <create_chain+0x114>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	60da      	str	r2, [r3, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d08:	d009      	beq.n	8011d1e <create_chain+0x112>
		fs->free_clust--;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	691b      	ldr	r3, [r3, #16]
 8011d0e:	f103 32ff 	add.w	r2, r3, #4294967295
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 1;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f04f 0201 	mov.w	r2, #1
 8011d1c:	729a      	strb	r2, [r3, #10]
	}

	return ncl;		/* Return new cluster number */
 8011d1e:	697b      	ldr	r3, [r7, #20]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	f107 0718 	add.w	r7, r7, #24
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop

08011d2c <clust2sect>:
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	f1a3 0302 	sub.w	r3, r3, #2
 8011d3c:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6a1b      	ldr	r3, [r3, #32]
 8011d42:	f1a3 0202 	sub.w	r2, r3, #2
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d802      	bhi.n	8011d52 <clust2sect+0x26>
 8011d4c:	f04f 0300 	mov.w	r3, #0
 8011d50:	e007      	b.n	8011d62 <clust2sect+0x36>
	return clst * fs->csize + fs->database;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	789b      	ldrb	r3, [r3, #2]
 8011d56:	683a      	ldr	r2, [r7, #0]
 8011d58:	fb02 f203 	mul.w	r2, r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d60:	18d3      	adds	r3, r2, r3
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	f107 070c 	add.w	r7, r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bc80      	pop	{r7}
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop

08011d70 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	887a      	ldrh	r2, [r7, #2]
 8011d80:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d005      	beq.n	8011d9a <dir_seek+0x2a>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	6a1a      	ldr	r2, [r3, #32]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d802      	bhi.n	8011da0 <dir_seek+0x30>
		return FR_INT_ERR;
 8011d9a:	f04f 0302 	mov.w	r3, #2
 8011d9e:	e06e      	b.n	8011e7e <dir_seek+0x10e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d108      	bne.n	8011db8 <dir_seek+0x48>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	2b03      	cmp	r3, #3
 8011dae:	d103      	bne.n	8011db8 <dir_seek+0x48>
		clst = dj->fs->dirbase;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011db6:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table */
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d116      	bne.n	8011dec <dir_seek+0x7c>
		dj->clust = clst;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	891b      	ldrh	r3, [r3, #8]
 8011dca:	887a      	ldrh	r2, [r7, #2]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d302      	bcc.n	8011dd6 <dir_seek+0x66>
			return FR_INT_ERR;
 8011dd0:	f04f 0302 	mov.w	r3, #2
 8011dd4:	e053      	b.n	8011e7e <dir_seek+0x10e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ddc:	887b      	ldrh	r3, [r7, #2]
 8011dde:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	18d2      	adds	r2, r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	611a      	str	r2, [r3, #16]
 8011dea:	e03a      	b.n	8011e62 <dir_seek+0xf2>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	789b      	ldrb	r3, [r3, #2]
 8011df2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011df6:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8011df8:	e01e      	b.n	8011e38 <dir_seek+0xc8>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	68f9      	ldr	r1, [r7, #12]
 8011e02:	f7ff fc77 	bl	80116f4 <get_fat>
 8011e06:	4603      	mov	r3, r0
 8011e08:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e10:	d102      	bne.n	8011e18 <dir_seek+0xa8>
 8011e12:	f04f 0301 	mov.w	r3, #1
 8011e16:	e032      	b.n	8011e7e <dir_seek+0x10e>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d905      	bls.n	8011e2a <dir_seek+0xba>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	6a1a      	ldr	r2, [r3, #32]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d802      	bhi.n	8011e30 <dir_seek+0xc0>
				return FR_INT_ERR;
 8011e2a:	f04f 0302 	mov.w	r3, #2
 8011e2e:	e026      	b.n	8011e7e <dir_seek+0x10e>
			idx -= ic;
 8011e30:	887a      	ldrh	r2, [r7, #2]
 8011e32:	897b      	ldrh	r3, [r7, #10]
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8011e38:	887a      	ldrh	r2, [r7, #2]
 8011e3a:	897b      	ldrh	r3, [r7, #10]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d2dc      	bcs.n	8011dfa <dir_seek+0x8a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68fa      	ldr	r2, [r7, #12]
 8011e44:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	68f9      	ldr	r1, [r7, #12]
 8011e4e:	f7ff ff6d 	bl	8011d2c <clust2sect>
 8011e52:	4602      	mov	r2, r0
 8011e54:	887b      	ldrh	r3, [r7, #2]
 8011e56:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	18d2      	adds	r2, r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e6a:	887b      	ldrh	r3, [r7, #2]
 8011e6c:	f003 030f 	and.w	r3, r3, #15
 8011e70:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8011e74:	18d2      	adds	r2, r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8011e7a:	f04f 0300 	mov.w	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f107 0710 	add.w	r7, r7, #16
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 8011e88:	b590      	push	{r4, r7, lr}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	460b      	mov	r3, r1
 8011e92:	70fb      	strb	r3, [r7, #3]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	88db      	ldrh	r3, [r3, #6]
 8011e98:	f103 0301 	add.w	r3, r3, #1
 8011e9c:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8011e9e:	893b      	ldrh	r3, [r7, #8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d003      	beq.n	8011eac <dir_next+0x24>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	691b      	ldr	r3, [r3, #16]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d102      	bne.n	8011eb2 <dir_next+0x2a>
		return FR_NO_FILE;
 8011eac:	f04f 0304 	mov.w	r3, #4
 8011eb0:	e0d6      	b.n	8012060 <dir_next+0x1d8>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8011eb2:	893b      	ldrh	r3, [r7, #8]
 8011eb4:	f003 030f 	and.w	r3, r3, #15
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	f040 80bf 	bne.w	801203e <dir_next+0x1b6>
		dj->sect++;					/* Next sector */
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	691b      	ldr	r3, [r3, #16]
 8011ec4:	f103 0201 	add.w	r2, r3, #1
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d109      	bne.n	8011ee8 <dir_next+0x60>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	891b      	ldrh	r3, [r3, #8]
 8011eda:	893a      	ldrh	r2, [r7, #8]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	f0c0 80ae 	bcc.w	801203e <dir_next+0x1b6>
				return FR_NO_FILE;
 8011ee2:	f04f 0304 	mov.w	r3, #4
 8011ee6:	e0bb      	b.n	8012060 <dir_next+0x1d8>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8011ee8:	893b      	ldrh	r3, [r7, #8]
 8011eea:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	789b      	ldrb	r3, [r3, #2]
 8011ef8:	f103 33ff 	add.w	r3, r3, #4294967295
 8011efc:	4013      	ands	r3, r2
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f040 809d 	bne.w	801203e <dir_next+0x1b6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	4610      	mov	r0, r2
 8011f0e:	4619      	mov	r1, r3
 8011f10:	f7ff fbf0 	bl	80116f4 <get_fat>
 8011f14:	4603      	mov	r3, r0
 8011f16:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d802      	bhi.n	8011f24 <dir_next+0x9c>
 8011f1e:	f04f 0302 	mov.w	r3, #2
 8011f22:	e09d      	b.n	8012060 <dir_next+0x1d8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f2a:	d102      	bne.n	8011f32 <dir_next+0xaa>
 8011f2c:	f04f 0301 	mov.w	r3, #1
 8011f30:	e096      	b.n	8012060 <dir_next+0x1d8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	6a1a      	ldr	r2, [r3, #32]
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d873      	bhi.n	8012026 <dir_next+0x19e>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 8011f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d102      	bne.n	8011f4c <dir_next+0xc4>
 8011f46:	f04f 0304 	mov.w	r3, #4
 8011f4a:	e089      	b.n	8012060 <dir_next+0x1d8>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	4610      	mov	r0, r2
 8011f56:	4619      	mov	r1, r3
 8011f58:	f7ff fe58 	bl	8011c0c <create_chain>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d102      	bne.n	8011f6c <dir_next+0xe4>
 8011f66:	f04f 0307 	mov.w	r3, #7
 8011f6a:	e079      	b.n	8012060 <dir_next+0x1d8>
					if (clst == 1) return FR_INT_ERR;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d102      	bne.n	8011f78 <dir_next+0xf0>
 8011f72:	f04f 0302 	mov.w	r3, #2
 8011f76:	e073      	b.n	8012060 <dir_next+0x1d8>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f7e:	d102      	bne.n	8011f86 <dir_next+0xfe>
 8011f80:	f04f 0301 	mov.w	r3, #1
 8011f84:	e06c      	b.n	8012060 <dir_next+0x1d8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f04f 0100 	mov.w	r1, #0
 8011f90:	f7ff fa86 	bl	80114a0 <move_window>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <dir_next+0x118>
 8011f9a:	f04f 0301 	mov.w	r3, #1
 8011f9e:	e05f      	b.n	8012060 <dir_next+0x1d8>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f04f 0100 	mov.w	r1, #0
 8011fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fb2:	f7ff f9ff 	bl	80113b4 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681c      	ldr	r4, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	68f9      	ldr	r1, [r7, #12]
 8011fc2:	f7ff feb3 	bl	8011d2c <clust2sect>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8011fca:	f04f 0300 	mov.w	r3, #0
 8011fce:	72fb      	strb	r3, [r7, #11]
 8011fd0:	e01b      	b.n	801200a <dir_next+0x182>
						dj->fs->wflag = 1;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f04f 0201 	mov.w	r2, #1
 8011fda:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f04f 0100 	mov.w	r1, #0
 8011fe6:	f7ff fa5b 	bl	80114a0 <move_window>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d002      	beq.n	8011ff6 <dir_next+0x16e>
 8011ff0:	f04f 0301 	mov.w	r3, #1
 8011ff4:	e034      	b.n	8012060 <dir_next+0x1d8>
						dj->fs->winsect++;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ffc:	f102 0201 	add.w	r2, r2, #1
 8012000:	631a      	str	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8012002:	7afb      	ldrb	r3, [r7, #11]
 8012004:	f103 0301 	add.w	r3, r3, #1
 8012008:	72fb      	strb	r3, [r7, #11]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	789b      	ldrb	r3, [r3, #2]
 8012010:	7afa      	ldrb	r2, [r7, #11]
 8012012:	429a      	cmp	r2, r3
 8012014:	d3dd      	bcc.n	8011fd2 <dir_next+0x14a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	687a      	ldr	r2, [r7, #4]
 801201c:	6812      	ldr	r2, [r2, #0]
 801201e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012020:	7afa      	ldrb	r2, [r7, #11]
 8012022:	1a8a      	subs	r2, r1, r2
 8012024:	631a      	str	r2, [r3, #48]	; 0x30
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	68fa      	ldr	r2, [r7, #12]
 801202a:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4618      	mov	r0, r3
 8012032:	68f9      	ldr	r1, [r7, #12]
 8012034:	f7ff fe7a 	bl	8011d2c <clust2sect>
 8012038:	4602      	mov	r2, r0
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	893a      	ldrh	r2, [r7, #8]
 8012042:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801204c:	893b      	ldrh	r3, [r7, #8]
 801204e:	f003 030f 	and.w	r3, r3, #15
 8012052:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8012056:	18d2      	adds	r2, r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	615a      	str	r2, [r3, #20]

	return FR_OK;
 801205c:	f04f 0300 	mov.w	r3, #0
}
 8012060:	4618      	mov	r0, r3
 8012062:	f107 0714 	add.w	r7, r7, #20
 8012066:	46bd      	mov	sp, r7
 8012068:	bd90      	pop	{r4, r7, pc}
 801206a:	bf00      	nop

0801206c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f04f 0100 	mov.w	r1, #0
 801207a:	f7ff fe79 	bl	8011d70 <dir_seek>
 801207e:	4603      	mov	r3, r0
 8012080:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012082:	7dfb      	ldrb	r3, [r7, #23]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d001      	beq.n	801208c <dir_find+0x20>
 8012088:	7dfb      	ldrb	r3, [r7, #23]
 801208a:	e03b      	b.n	8012104 <dir_find+0x98>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	691b      	ldr	r3, [r3, #16]
 8012094:	4610      	mov	r0, r2
 8012096:	4619      	mov	r1, r3
 8012098:	f7ff fa02 	bl	80114a0 <move_window>
 801209c:	4603      	mov	r3, r0
 801209e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120a0:	7dfb      	ldrb	r3, [r7, #23]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d12a      	bne.n	80120fc <dir_find+0x90>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	695b      	ldr	r3, [r3, #20]
 80120aa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80120b2:	7bfb      	ldrb	r3, [r7, #15]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d103      	bne.n	80120c0 <dir_find+0x54>
 80120b8:	f04f 0304 	mov.w	r3, #4
 80120bc:	75fb      	strb	r3, [r7, #23]
 80120be:	e020      	b.n	8012102 <dir_find+0x96>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	f103 030b 	add.w	r3, r3, #11
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	f003 0308 	and.w	r3, r3, #8
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10a      	bne.n	80120e6 <dir_find+0x7a>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	6938      	ldr	r0, [r7, #16]
 80120d6:	4619      	mov	r1, r3
 80120d8:	f04f 020b 	mov.w	r2, #11
 80120dc:	f7ff f98c 	bl	80113f8 <mem_cmp>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00c      	beq.n	8012100 <dir_find+0x94>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f04f 0100 	mov.w	r1, #0
 80120ec:	f7ff fecc 	bl	8011e88 <dir_next>
 80120f0:	4603      	mov	r3, r0
 80120f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80120f4:	7dfb      	ldrb	r3, [r7, #23]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d0c8      	beq.n	801208c <dir_find+0x20>
 80120fa:	e002      	b.n	8012102 <dir_find+0x96>
#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
 80120fc:	bf00      	nop
 80120fe:	e000      	b.n	8012102 <dir_find+0x96>
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
 8012100:	bf00      	nop
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
	} while (res == FR_OK);

	return res;
 8012102:	7dfb      	ldrb	r3, [r7, #23]
}
 8012104:	4618      	mov	r0, r3
 8012106:	f107 0718 	add.w	r7, r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop

08012110 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b084      	sub	sp, #16
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f04f 0100 	mov.w	r1, #0
 801211e:	f7ff fe27 	bl	8011d70 <dir_seek>
 8012122:	4603      	mov	r3, r0
 8012124:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012126:	7bfb      	ldrb	r3, [r7, #15]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d122      	bne.n	8012172 <dir_register+0x62>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	4610      	mov	r0, r2
 8012136:	4619      	mov	r1, r3
 8012138:	f7ff f9b2 	bl	80114a0 <move_window>
 801213c:	4603      	mov	r3, r0
 801213e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d114      	bne.n	8012170 <dir_register+0x60>
			c = *dj->dir;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	695b      	ldr	r3, [r3, #20]
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 801214e:	7bbb      	ldrb	r3, [r7, #14]
 8012150:	2be5      	cmp	r3, #229	; 0xe5
 8012152:	d00e      	beq.n	8012172 <dir_register+0x62>
 8012154:	7bbb      	ldrb	r3, [r7, #14]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00b      	beq.n	8012172 <dir_register+0x62>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f04f 0101 	mov.w	r1, #1
 8012160:	f7ff fe92 	bl	8011e88 <dir_next>
 8012164:	4603      	mov	r3, r0
 8012166:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8012168:	7bfb      	ldrb	r3, [r7, #15]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d0de      	beq.n	801212c <dir_register+0x1c>
 801216e:	e000      	b.n	8012172 <dir_register+0x62>
#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
 8012170:	bf00      	nop
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 8012172:	7bfb      	ldrb	r3, [r7, #15]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d12f      	bne.n	80121d8 <dir_register+0xc8>
		res = move_window(dj->fs, dj->sect);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	4610      	mov	r0, r2
 8012182:	4619      	mov	r1, r3
 8012184:	f7ff f98c 	bl	80114a0 <move_window>
 8012188:	4603      	mov	r3, r0
 801218a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801218c:	7bfb      	ldrb	r3, [r7, #15]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d122      	bne.n	80121d8 <dir_register+0xc8>
			dir = dj->dir;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	695b      	ldr	r3, [r3, #20]
 8012196:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8012198:	68b8      	ldr	r0, [r7, #8]
 801219a:	f04f 0100 	mov.w	r1, #0
 801219e:	f04f 0220 	mov.w	r2, #32
 80121a2:	f7ff f907 	bl	80113b4 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	699b      	ldr	r3, [r3, #24]
 80121aa:	68b8      	ldr	r0, [r7, #8]
 80121ac:	4619      	mov	r1, r3
 80121ae:	f04f 020b 	mov.w	r2, #11
 80121b2:	f7ff f8d7 	bl	8011364 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	f103 030c 	add.w	r3, r3, #12
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	6992      	ldr	r2, [r2, #24]
 80121c0:	f102 020b 	add.w	r2, r2, #11
 80121c4:	7812      	ldrb	r2, [r2, #0]
 80121c6:	f002 0218 	and.w	r2, r2, #24
 80121ca:	b2d2      	uxtb	r2, r2
 80121cc:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f04f 0201 	mov.w	r2, #1
 80121d6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80121d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	f107 0710 	add.w	r7, r7, #16
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b088      	sub	sp, #32
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	699b      	ldr	r3, [r3, #24]
 80121f2:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f04f 0120 	mov.w	r1, #32
 80121fa:	f04f 020b 	mov.w	r2, #11
 80121fe:	f7ff f8d9 	bl	80113b4 <mem_set>
	si = i = b = 0; ni = 8;
 8012202:	f04f 0300 	mov.w	r3, #0
 8012206:	77fb      	strb	r3, [r7, #31]
 8012208:	f04f 0300 	mov.w	r3, #0
 801220c:	613b      	str	r3, [r7, #16]
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	617b      	str	r3, [r7, #20]
 8012212:	f04f 0308 	mov.w	r3, #8
 8012216:	61bb      	str	r3, [r7, #24]
	p = *path;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	60bb      	str	r3, [r7, #8]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	68ba      	ldr	r2, [r7, #8]
 8012222:	18d3      	adds	r3, r2, r3
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	2b2e      	cmp	r3, #46	; 0x2e
 8012228:	d138      	bne.n	801229c <create_name+0xb8>
		for (;;) {
			c = p[si++];
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	68ba      	ldr	r2, [r7, #8]
 801222e:	18d3      	adds	r3, r2, r3
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	77bb      	strb	r3, [r7, #30]
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	f103 0301 	add.w	r3, r3, #1
 801223a:	617b      	str	r3, [r7, #20]
			if (c != '.' || si >= 3) break;
 801223c:	7fbb      	ldrb	r3, [r7, #30]
 801223e:	2b2e      	cmp	r3, #46	; 0x2e
 8012240:	d10c      	bne.n	801225c <create_name+0x78>
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	2b02      	cmp	r3, #2
 8012246:	dc09      	bgt.n	801225c <create_name+0x78>
			sfn[i++] = c;
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	68fa      	ldr	r2, [r7, #12]
 801224c:	18d3      	adds	r3, r2, r3
 801224e:	7fba      	ldrb	r2, [r7, #30]
 8012250:	701a      	strb	r2, [r3, #0]
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	f103 0301 	add.w	r3, r3, #1
 8012258:	613b      	str	r3, [r7, #16]
		}
 801225a:	e7e6      	b.n	801222a <create_name+0x46>
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
 801225c:	7fbb      	ldrb	r3, [r7, #30]
 801225e:	2b2f      	cmp	r3, #47	; 0x2f
 8012260:	d008      	beq.n	8012274 <create_name+0x90>
 8012262:	7fbb      	ldrb	r3, [r7, #30]
 8012264:	2b5c      	cmp	r3, #92	; 0x5c
 8012266:	d005      	beq.n	8012274 <create_name+0x90>
 8012268:	7fbb      	ldrb	r3, [r7, #30]
 801226a:	2b1f      	cmp	r3, #31
 801226c:	d902      	bls.n	8012274 <create_name+0x90>
 801226e:	f04f 0306 	mov.w	r3, #6
 8012272:	e0b9      	b.n	80123e8 <create_name+0x204>
		*path = &p[si];									/* Rerurn pointer to the next segment */
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	68ba      	ldr	r2, [r7, #8]
 8012278:	18d2      	adds	r2, r2, r3
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	601a      	str	r2, [r3, #0]
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	f103 020b 	add.w	r2, r3, #11
 8012284:	7fbb      	ldrb	r3, [r7, #30]
 8012286:	2b1f      	cmp	r3, #31
 8012288:	d802      	bhi.n	8012290 <create_name+0xac>
 801228a:	f04f 0324 	mov.w	r3, #36	; 0x24
 801228e:	e001      	b.n	8012294 <create_name+0xb0>
 8012290:	f04f 0320 	mov.w	r3, #32
 8012294:	7013      	strb	r3, [r2, #0]
		return FR_OK;
 8012296:	f04f 0300 	mov.w	r3, #0
 801229a:	e0a5      	b.n	80123e8 <create_name+0x204>
	}
#endif
	for (;;) {
		c = p[si++];
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	68ba      	ldr	r2, [r7, #8]
 80122a0:	18d3      	adds	r3, r2, r3
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	77bb      	strb	r3, [r7, #30]
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	f103 0301 	add.w	r3, r3, #1
 80122ac:	617b      	str	r3, [r7, #20]
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80122ae:	7fbb      	ldrb	r3, [r7, #30]
 80122b0:	2b1f      	cmp	r3, #31
 80122b2:	d95d      	bls.n	8012370 <create_name+0x18c>
 80122b4:	7fbb      	ldrb	r3, [r7, #30]
 80122b6:	2b2f      	cmp	r3, #47	; 0x2f
 80122b8:	d05a      	beq.n	8012370 <create_name+0x18c>
 80122ba:	7fbb      	ldrb	r3, [r7, #30]
 80122bc:	2b5c      	cmp	r3, #92	; 0x5c
 80122be:	d057      	beq.n	8012370 <create_name+0x18c>
		if (c == '.' || i >= ni) {
 80122c0:	7fbb      	ldrb	r3, [r7, #30]
 80122c2:	2b2e      	cmp	r3, #46	; 0x2e
 80122c4:	d003      	beq.n	80122ce <create_name+0xea>
 80122c6:	693a      	ldr	r2, [r7, #16]
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	db14      	blt.n	80122f8 <create_name+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	2b08      	cmp	r3, #8
 80122d2:	d102      	bne.n	80122da <create_name+0xf6>
 80122d4:	7fbb      	ldrb	r3, [r7, #30]
 80122d6:	2b2e      	cmp	r3, #46	; 0x2e
 80122d8:	d002      	beq.n	80122e0 <create_name+0xfc>
 80122da:	f04f 0306 	mov.w	r3, #6
 80122de:	e083      	b.n	80123e8 <create_name+0x204>
			i = 8; ni = 11;
 80122e0:	f04f 0308 	mov.w	r3, #8
 80122e4:	613b      	str	r3, [r7, #16]
 80122e6:	f04f 030b 	mov.w	r3, #11
 80122ea:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80122ec:	7ffb      	ldrb	r3, [r7, #31]
 80122ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80122f2:	77fb      	strb	r3, [r7, #31]
 80122f4:	bf00      	nop
					b |= 1; c -= 0x20;
				}
			}
			sfn[i++] = c;
		}
	}
 80122f6:	e7d1      	b.n	801229c <create_name+0xb8>
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
 80122f8:	7fbb      	ldrb	r3, [r7, #30]
 80122fa:	b25b      	sxtb	r3, r3
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	da06      	bge.n	801230e <create_name+0x12a>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
 8012300:	7ffb      	ldrb	r3, [r7, #31]
 8012302:	f043 0303 	orr.w	r3, r3, #3
 8012306:	77fb      	strb	r3, [r7, #31]
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
 8012308:	f04f 0306 	mov.w	r3, #6
 801230c:	e06c      	b.n	80123e8 <create_name+0x204>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
 801230e:	7fbb      	ldrb	r3, [r7, #30]
 8012310:	f247 7010 	movw	r0, #30480	; 0x7710
 8012314:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012318:	4619      	mov	r1, r3
 801231a:	f7ff f8a5 	bl	8011468 <chk_chr>
 801231e:	4603      	mov	r3, r0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d002      	beq.n	801232a <create_name+0x146>
				return FR_INVALID_NAME;
 8012324:	f04f 0306 	mov.w	r3, #6
 8012328:	e05e      	b.n	80123e8 <create_name+0x204>
			if (IsUpper(c)) {
 801232a:	7fbb      	ldrb	r3, [r7, #30]
 801232c:	2b40      	cmp	r3, #64	; 0x40
 801232e:	d907      	bls.n	8012340 <create_name+0x15c>
 8012330:	7fbb      	ldrb	r3, [r7, #30]
 8012332:	2b5a      	cmp	r3, #90	; 0x5a
 8012334:	d804      	bhi.n	8012340 <create_name+0x15c>
				b |= 2;
 8012336:	7ffb      	ldrb	r3, [r7, #31]
 8012338:	f043 0302 	orr.w	r3, r3, #2
 801233c:	77fb      	strb	r3, [r7, #31]
 801233e:	e00d      	b.n	801235c <create_name+0x178>
			} else {
				if (IsLower(c)) {
 8012340:	7fbb      	ldrb	r3, [r7, #30]
 8012342:	2b60      	cmp	r3, #96	; 0x60
 8012344:	d90a      	bls.n	801235c <create_name+0x178>
 8012346:	7fbb      	ldrb	r3, [r7, #30]
 8012348:	2b7a      	cmp	r3, #122	; 0x7a
 801234a:	d807      	bhi.n	801235c <create_name+0x178>
					b |= 1; c -= 0x20;
 801234c:	7ffb      	ldrb	r3, [r7, #31]
 801234e:	f043 0301 	orr.w	r3, r3, #1
 8012352:	77fb      	strb	r3, [r7, #31]
 8012354:	7fbb      	ldrb	r3, [r7, #30]
 8012356:	f1a3 0320 	sub.w	r3, r3, #32
 801235a:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	18d3      	adds	r3, r2, r3
 8012362:	7fba      	ldrb	r2, [r7, #30]
 8012364:	701a      	strb	r2, [r3, #0]
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	f103 0301 	add.w	r3, r3, #1
 801236c:	613b      	str	r3, [r7, #16]
		}
	}
 801236e:	e795      	b.n	801229c <create_name+0xb8>
	*path = &p[si];						/* Rerurn pointer to the next segment */
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	68ba      	ldr	r2, [r7, #8]
 8012374:	18d2      	adds	r2, r2, r3
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	601a      	str	r2, [r3, #0]
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801237a:	7fbb      	ldrb	r3, [r7, #30]
 801237c:	2b1f      	cmp	r3, #31
 801237e:	d802      	bhi.n	8012386 <create_name+0x1a2>
 8012380:	f04f 0304 	mov.w	r3, #4
 8012384:	e001      	b.n	801238a <create_name+0x1a6>
 8012386:	f04f 0300 	mov.w	r3, #0
 801238a:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d102      	bne.n	8012398 <create_name+0x1b4>
 8012392:	f04f 0306 	mov.w	r3, #6
 8012396:	e027      	b.n	80123e8 <create_name+0x204>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	2be5      	cmp	r3, #229	; 0xe5
 801239e:	d103      	bne.n	80123a8 <create_name+0x1c4>
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	f04f 0205 	mov.w	r2, #5
 80123a6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	2b08      	cmp	r3, #8
 80123ac:	d103      	bne.n	80123b6 <create_name+0x1d2>
 80123ae:	7ffb      	ldrb	r3, [r7, #31]
 80123b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80123b4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80123b6:	7ffb      	ldrb	r3, [r7, #31]
 80123b8:	f003 0303 	and.w	r3, r3, #3
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d103      	bne.n	80123c8 <create_name+0x1e4>
 80123c0:	7fbb      	ldrb	r3, [r7, #30]
 80123c2:	f043 0310 	orr.w	r3, r3, #16
 80123c6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80123c8:	7ffb      	ldrb	r3, [r7, #31]
 80123ca:	f003 030c 	and.w	r3, r3, #12
 80123ce:	2b04      	cmp	r3, #4
 80123d0:	d103      	bne.n	80123da <create_name+0x1f6>
 80123d2:	7fbb      	ldrb	r3, [r7, #30]
 80123d4:	f043 0308 	orr.w	r3, r3, #8
 80123d8:	77bb      	strb	r3, [r7, #30]

	sfn[11] = c;		/* Store NT flag, File name is created */
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f103 030b 	add.w	r3, r3, #11
 80123e0:	7fba      	ldrb	r2, [r7, #30]
 80123e2:	701a      	strb	r2, [r3, #0]
#endif

	return FR_OK;
 80123e4:	f04f 0300 	mov.w	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	f107 0720 	add.w	r7, r7, #32
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop

080123f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	2b2f      	cmp	r3, #47	; 0x2f
 8012404:	d003      	beq.n	801240e <follow_path+0x1a>
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	2b5c      	cmp	r3, #92	; 0x5c
 801240c:	d108      	bne.n	8012420 <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	f103 0301 	add.w	r3, r3, #1
 8012414:	603b      	str	r3, [r7, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f04f 0200 	mov.w	r2, #0
 801241c:	609a      	str	r2, [r3, #8]
 801241e:	e004      	b.n	801242a <follow_path+0x36>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	699a      	ldr	r2, [r3, #24]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b1f      	cmp	r3, #31
 8012430:	d80b      	bhi.n	801244a <follow_path+0x56>
		res = dir_seek(dj, 0);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f04f 0100 	mov.w	r1, #0
 8012438:	f7ff fc9a 	bl	8011d70 <dir_seek>
 801243c:	4603      	mov	r3, r0
 801243e:	73fb      	strb	r3, [r7, #15]
		dj->dir = NULL;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f04f 0200 	mov.w	r2, #0
 8012446:	615a      	str	r2, [r3, #20]
 8012448:	e05c      	b.n	8012504 <follow_path+0x110>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 801244a:	463b      	mov	r3, r7
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	4619      	mov	r1, r3
 8012450:	f7ff fec8 	bl	80121e4 <create_name>
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8012458:	7bfb      	ldrb	r3, [r7, #15]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d14d      	bne.n	80124fa <follow_path+0x106>
			res = dir_find(dj);				/* Find it */
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f7ff fe04 	bl	801206c <dir_find>
 8012464:	4603      	mov	r3, r0
 8012466:	73fb      	strb	r3, [r7, #15]
			last = *(dj->fn+11) & NS_LAST;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	699b      	ldr	r3, [r3, #24]
 801246c:	f103 030b 	add.w	r3, r3, #11
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	f003 0304 	and.w	r3, r3, #4
 8012476:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Could not find the object */
 8012478:	7bfb      	ldrb	r3, [r7, #15]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d009      	beq.n	8012492 <follow_path+0x9e>
				if (res == FR_NO_FILE && !last)
 801247e:	7bfb      	ldrb	r3, [r7, #15]
 8012480:	2b04      	cmp	r3, #4
 8012482:	d13c      	bne.n	80124fe <follow_path+0x10a>
 8012484:	7bbb      	ldrb	r3, [r7, #14]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d139      	bne.n	80124fe <follow_path+0x10a>
					res = FR_NO_PATH;
 801248a:	f04f 0305 	mov.w	r3, #5
 801248e:	73fb      	strb	r3, [r7, #15]
				break;
 8012490:	e035      	b.n	80124fe <follow_path+0x10a>
			}
			if (last) break;				/* Last segment match. Function completed. */
 8012492:	7bbb      	ldrb	r3, [r7, #14]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d134      	bne.n	8012502 <follow_path+0x10e>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	695b      	ldr	r3, [r3, #20]
 801249c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	f103 030b 	add.w	r3, r3, #11
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	f003 0310 	and.w	r3, r3, #16
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d103      	bne.n	80124b6 <follow_path+0xc2>
				res = FR_NO_PATH; break;
 80124ae:	f04f 0305 	mov.w	r3, #5
 80124b2:	73fb      	strb	r3, [r7, #15]
 80124b4:	e026      	b.n	8012504 <follow_path+0x110>
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	f103 0315 	add.w	r3, r3, #21
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	f103 0314 	add.w	r3, r3, #20
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	4313      	orrs	r3, r2
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	f103 031b 	add.w	r3, r3, #27
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80124e2:	b299      	uxth	r1, r3
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	f103 031a 	add.w	r3, r3, #26
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	430b      	orrs	r3, r1
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	431a      	orrs	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	609a      	str	r2, [r3, #8]
		}
 80124f8:	e7a7      	b.n	801244a <follow_path+0x56>
		dj->dir = NULL;

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
 80124fa:	bf00      	nop
 80124fc:	e002      	b.n	8012504 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
 80124fe:	bf00      	nop
 8012500:	e000      	b.n	8012504 <follow_path+0x110>
			}
			if (last) break;				/* Last segment match. Function completed. */
 8012502:	bf00      	nop
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
 8012504:	7bfb      	ldrb	r3, [r7, #15]
}
 8012506:	4618      	mov	r0, r3
 8012508:	f107 0710 	add.w	r7, r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	785a      	ldrb	r2, [r3, #1]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8012524:	4610      	mov	r0, r2
 8012526:	4619      	mov	r1, r3
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	f04f 0301 	mov.w	r3, #1
 801252e:	f7fe fe45 	bl	80111bc <disk_read>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <check_fs+0x2e>
		return 3;
 8012538:	f04f 0303 	mov.w	r3, #3
 801253c:	e041      	b.n	80125c2 <check_fs+0xb2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 8012544:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012548:	b29a      	uxth	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8012550:	4313      	orrs	r3, r2
 8012552:	b29b      	uxth	r3, r3
 8012554:	b21a      	sxth	r2, r3
 8012556:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801255a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 801255e:	429a      	cmp	r2, r3
 8012560:	d002      	beq.n	8012568 <check_fs+0x58>
		return 2;
 8012562:	f04f 0302 	mov.w	r3, #2
 8012566:	e02c      	b.n	80125c2 <check_fs+0xb2>

	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801256e:	4618      	mov	r0, r3
 8012570:	f24c 119c 	movw	r1, #49564	; 0xc19c
 8012574:	f6c0 0101 	movt	r1, #2049	; 0x801
 8012578:	f04f 0203 	mov.w	r2, #3
 801257c:	f7fe ff3c 	bl	80113f8 <mem_cmp>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d102      	bne.n	801258c <check_fs+0x7c>
		return 0;
 8012586:	f04f 0300 	mov.w	r3, #0
 801258a:	e01a      	b.n	80125c2 <check_fs+0xb2>
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f103 0386 	add.w	r3, r3, #134	; 0x86
 8012592:	4618      	mov	r0, r3
 8012594:	f24c 119c 	movw	r1, #49564	; 0xc19c
 8012598:	f6c0 0101 	movt	r1, #2049	; 0x801
 801259c:	f04f 0203 	mov.w	r2, #3
 80125a0:	f7fe ff2a 	bl	80113f8 <mem_cmp>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d109      	bne.n	80125be <check_fs+0xae>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	b25b      	sxtb	r3, r3
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	db02      	blt.n	80125be <check_fs+0xae>
		return 0;
 80125b8:	f04f 0300 	mov.w	r3, #0
 80125bc:	e001      	b.n	80125c2 <check_fs+0xb2>

	return 1;
 80125be:	f04f 0301 	mov.w	r3, #1
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	f107 0708 	add.w	r7, r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b090      	sub	sp, #64	; 0x40
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	4613      	mov	r3, r2
 80125d8:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	62bb      	str	r3, [r7, #40]	; 0x28
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
 80125e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80125e8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 80125ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ec:	2b09      	cmp	r3, #9
 80125ee:	d80d      	bhi.n	801260c <auto_mount+0x40>
 80125f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f2:	f103 0301 	add.w	r3, r3, #1
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	2b3a      	cmp	r3, #58	; 0x3a
 80125fa:	d107      	bne.n	801260c <auto_mount+0x40>
		p += 2; *path = p;			/* Return pointer to the path name */
 80125fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fe:	f103 0302 	add.w	r3, r3, #2
 8012602:	62bb      	str	r3, [r7, #40]	; 0x28
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	e005      	b.n	8012618 <auto_mount+0x4c>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
 801260c:	f640 232e 	movw	r3, #2606	; 0xa2e
 8012610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	63bb      	str	r3, [r7, #56]	; 0x38
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 8012618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261a:	2b00      	cmp	r3, #0
 801261c:	d002      	beq.n	8012624 <auto_mount+0x58>
		return FR_INVALID_DRIVE;
 801261e:	f04f 030b 	mov.w	r3, #11
 8012622:	e25d      	b.n	8012ae0 <auto_mount+0x514>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 8012624:	f640 2328 	movw	r3, #2600	; 0xa28
 8012628:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801262c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012632:	627b      	str	r3, [r7, #36]	; 0x24
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012638:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	2b00      	cmp	r3, #0
 801263e:	d102      	bne.n	8012646 <auto_mount+0x7a>
 8012640:	f04f 030c 	mov.w	r3, #12
 8012644:	e24c      	b.n	8012ae0 <auto_mount+0x514>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
 8012646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d01c      	beq.n	8012688 <auto_mount+0xbc>
		stat = disk_status(fs->drive);
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	785b      	ldrb	r3, [r3, #1]
 8012652:	4618      	mov	r0, r3
 8012654:	f7fe fd92 	bl	801117c <disk_status>
 8012658:	4603      	mov	r3, r0
 801265a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 801265e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012662:	f003 0301 	and.w	r3, r3, #1
 8012666:	2b00      	cmp	r3, #0
 8012668:	d10e      	bne.n	8012688 <auto_mount+0xbc>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 801266a:	79fb      	ldrb	r3, [r7, #7]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d008      	beq.n	8012682 <auto_mount+0xb6>
 8012670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012674:	f003 0304 	and.w	r3, r3, #4
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <auto_mount+0xb6>
				return FR_WRITE_PROTECTED;
 801267c:	f04f 030a 	mov.w	r3, #10
 8012680:	e22e      	b.n	8012ae0 <auto_mount+0x514>
#endif
			return FR_OK;			/* The file system object is valid */
 8012682:	f04f 0300 	mov.w	r3, #0
 8012686:	e22b      	b.n	8012ae0 <auto_mount+0x514>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	f04f 0200 	mov.w	r2, #0
 801268e:	701a      	strb	r2, [r3, #0]
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 8012690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012692:	b2da      	uxtb	r2, r3
 8012694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012696:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 8012698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269a:	785b      	ldrb	r3, [r3, #1]
 801269c:	4618      	mov	r0, r3
 801269e:	f7fe fd59 	bl	8011154 <disk_initialize>
 80126a2:	4603      	mov	r3, r0
 80126a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 80126a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126ac:	f003 0301 	and.w	r3, r3, #1
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d002      	beq.n	80126bc <auto_mount+0xf0>
		return FR_NOT_READY;
 80126b6:	f04f 0303 	mov.w	r3, #3
 80126ba:	e211      	b.n	8012ae0 <auto_mount+0x514>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80126bc:	79fb      	ldrb	r3, [r7, #7]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d008      	beq.n	80126d4 <auto_mount+0x108>
 80126c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126c6:	f003 0304 	and.w	r3, r3, #4
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d002      	beq.n	80126d4 <auto_mount+0x108>
		return FR_WRITE_PROTECTED;
 80126ce:	f04f 030a 	mov.w	r3, #10
 80126d2:	e205      	b.n	8012ae0 <auto_mount+0x514>
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 80126d4:	f04f 0300 	mov.w	r3, #0
 80126d8:	637b      	str	r3, [r7, #52]	; 0x34
 80126da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126de:	f7ff ff17 	bl	8012510 <check_fs>
 80126e2:	4603      	mov	r3, r0
 80126e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 80126e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d12a      	bne.n	8012746 <auto_mount+0x17a>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 80126f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f2:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 80126f6:	61fb      	str	r3, [r7, #28]
		if (tbl[4]) {									/* Is the partition existing? */
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	f103 0304 	add.w	r3, r3, #4
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d020      	beq.n	8012746 <auto_mount+0x17a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	f103 030b 	add.w	r3, r3, #11
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	f103 030a 	add.w	r3, r3, #10
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801271c:	431a      	orrs	r2, r3
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	f103 0309 	add.w	r3, r3, #9
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801272a:	431a      	orrs	r2, r3
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	f103 0308 	add.w	r3, r3, #8
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	4313      	orrs	r3, r2
 8012736:	637b      	str	r3, [r7, #52]	; 0x34
			fmt = check_fs(fs, bsect);					/* Check the partition */
 8012738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801273a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801273c:	f7ff fee8 	bl	8012510 <check_fs>
 8012740:	4603      	mov	r3, r0
 8012742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8012746:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801274a:	2b03      	cmp	r3, #3
 801274c:	d102      	bne.n	8012754 <auto_mount+0x188>
 801274e:	f04f 0301 	mov.w	r3, #1
 8012752:	e1c5      	b.n	8012ae0 <auto_mount+0x514>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 8012754:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012758:	2b00      	cmp	r3, #0
 801275a:	d10e      	bne.n	801277a <auto_mount+0x1ae>
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012762:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012766:	b29a      	uxth	r2, r3
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801276e:	4313      	orrs	r3, r2
 8012770:	b29b      	uxth	r3, r3
 8012772:	b21b      	sxth	r3, r3
 8012774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012778:	d002      	beq.n	8012780 <auto_mount+0x1b4>
		return FR_NO_FILESYSTEM;
 801277a:	f04f 030d 	mov.w	r3, #13
 801277e:	e1af      	b.n	8012ae0 <auto_mount+0x514>

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8012780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012782:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012786:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801278a:	b29a      	uxth	r2, r3
 801278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8012792:	4313      	orrs	r3, r2
 8012794:	b29b      	uxth	r3, r3
 8012796:	b29b      	uxth	r3, r3
 8012798:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 801279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279c:	2b00      	cmp	r3, #0
 801279e:	d115      	bne.n	80127cc <auto_mount+0x200>
 80127a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80127a6:	ea4f 6203 	mov.w	r2, r3, lsl #24
 80127aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ac:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80127b0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80127b4:	431a      	orrs	r2, r3
 80127b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80127bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80127c0:	431a      	orrs	r2, r3
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80127c8:	4313      	orrs	r3, r2
 80127ca:	633b      	str	r3, [r7, #48]	; 0x30
	fs->sects_fat = fsize;
 80127cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127d0:	61da      	str	r2, [r3, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80127d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80127d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127da:	70da      	strb	r2, [r3, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	78db      	ldrb	r3, [r3, #3]
 80127e0:	461a      	mov	r2, r3
 80127e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e4:	fb02 f303 	mul.w	r3, r2, r3
 80127e8:	633b      	str	r3, [r7, #48]	; 0x30
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80127f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127fc:	4313      	orrs	r3, r2
 80127fe:	b29b      	uxth	r3, r3
 8012800:	b29b      	uxth	r3, r3
 8012802:	461a      	mov	r2, r3
 8012804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012806:	18d2      	adds	r2, r2, r3
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	625a      	str	r2, [r3, #36]	; 0x24
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8012812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012814:	709a      	strb	r2, [r3, #2]
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801281c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012820:	b29a      	uxth	r2, r3
 8012822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012828:	4313      	orrs	r3, r2
 801282a:	b29b      	uxth	r3, r3
 801282c:	b29a      	uxth	r2, r3
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	811a      	strh	r2, [r3, #8]
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 8012832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012834:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012838:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801283c:	b29a      	uxth	r2, r3
 801283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012840:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8012844:	4313      	orrs	r3, r2
 8012846:	b29b      	uxth	r3, r3
 8012848:	b29b      	uxth	r3, r3
 801284a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 801284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284e:	2b00      	cmp	r3, #0
 8012850:	d115      	bne.n	801287e <auto_mount+0x2b2>
 8012852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012854:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8012858:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8012862:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8012866:	431a      	orrs	r2, r3
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801286e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012872:	431a      	orrs	r2, r3
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801287a:	4313      	orrs	r3, r2
 801287c:	62fb      	str	r3, [r7, #44]	; 0x2c
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012884:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012888:	b29a      	uxth	r2, r3
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012890:	4313      	orrs	r3, r2
 8012892:	b29b      	uxth	r3, r3
 8012894:	b29b      	uxth	r3, r3
 8012896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012898:	1ad2      	subs	r2, r2, r3
 801289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289c:	1ad2      	subs	r2, r2, r3
 801289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a0:	891b      	ldrh	r3, [r3, #8]
 80128a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	1ad2      	subs	r2, r2, r3
		) / fs->csize + 2;
 80128aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ac:	789b      	ldrb	r3, [r3, #2]
 80128ae:	fbb2 f3f3 	udiv	r3, r2, r3
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 80128b2:	f103 0302 	add.w	r3, r3, #2
 80128b6:	61bb      	str	r3, [r7, #24]
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	69ba      	ldr	r2, [r7, #24]
 80128bc:	621a      	str	r2, [r3, #32]
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
 80128be:	f04f 0301 	mov.w	r3, #1
 80128c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 80128c6:	69ba      	ldr	r2, [r7, #24]
 80128c8:	f640 73f6 	movw	r3, #4086	; 0xff6
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d903      	bls.n	80128d8 <auto_mount+0x30c>
 80128d0:	f04f 0302 	mov.w	r3, #2
 80128d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 80128d8:	69ba      	ldr	r2, [r7, #24]
 80128da:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80128de:	429a      	cmp	r2, r3
 80128e0:	d903      	bls.n	80128ea <auto_mount+0x31e>
 80128e2:	f04f 0303 	mov.w	r3, #3
 80128e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (fmt == FS_FAT32)
 80128ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128ee:	2b03      	cmp	r3, #3
 80128f0:	d117      	bne.n	8012922 <auto_mount+0x356>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 80128f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80128f8:	ea4f 6203 	mov.w	r2, r3, lsl #24
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8012902:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8012906:	431a      	orrs	r2, r3
 8012908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801290e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012912:	431a      	orrs	r2, r3
 8012914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012916:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801291a:	431a      	orrs	r2, r3
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	629a      	str	r2, [r3, #40]	; 0x28
 8012920:	e005      	b.n	801292e <auto_mount+0x362>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012928:	18d2      	adds	r2, r2, r3
 801292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292c:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012934:	18d2      	adds	r2, r2, r3
 8012936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012938:	891b      	ldrh	r3, [r3, #8]
 801293a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801293e:	b29b      	uxth	r3, r3
 8012940:	18d2      	adds	r2, r2, r3
 8012942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012944:	62da      	str	r2, [r3, #44]	; 0x2c

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8012946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012948:	f04f 32ff 	mov.w	r2, #4294967295
 801294c:	611a      	str	r2, [r3, #16]
	fs->wflag = 0;
 801294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012950:	f04f 0200 	mov.w	r2, #0
 8012954:	711a      	strb	r2, [r3, #4]
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 8012956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801295a:	2b03      	cmp	r3, #3
 801295c:	f040 809c 	bne.w	8012a98 <auto_mount+0x4cc>
	 	fs->fsi_flag = 0;
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	f04f 0200 	mov.w	r2, #0
 8012966:	729a      	strb	r2, [r3, #10]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8012968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801296e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012972:	b29a      	uxth	r2, r3
 8012974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012976:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801297a:	4313      	orrs	r3, r2
 801297c:	b29b      	uxth	r3, r3
 801297e:	b29b      	uxth	r3, r3
 8012980:	461a      	mov	r2, r3
 8012982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012984:	18d2      	adds	r2, r2, r3
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	7859      	ldrb	r1, [r3, #1]
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012996:	695b      	ldr	r3, [r3, #20]
 8012998:	4608      	mov	r0, r1
 801299a:	4611      	mov	r1, r2
 801299c:	461a      	mov	r2, r3
 801299e:	f04f 0301 	mov.w	r3, #1
 80129a2:	f7fe fc0b 	bl	80111bc <disk_read>
 80129a6:	4603      	mov	r3, r0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d175      	bne.n	8012a98 <auto_mount+0x4cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ae:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 80129b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ba:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 80129be:	4313      	orrs	r3, r2
 80129c0:	b29b      	uxth	r3, r3
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80129c2:	b21a      	sxth	r2, r3
 80129c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80129c8:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d163      	bne.n	8012a98 <auto_mount+0x4cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80129d6:	ea4f 6203 	mov.w	r2, r3, lsl #24
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80129e0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80129e4:	431a      	orrs	r2, r3
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80129ec:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80129f0:	431a      	orrs	r2, r3
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80129f8:	431a      	orrs	r2, r3
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80129fa:	f245 2352 	movw	r3, #21074	; 0x5252
 80129fe:	f2c4 1361 	movt	r3, #16737	; 0x4161
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d148      	bne.n	8012a98 <auto_mount+0x4cc>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8012a0c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8012a16:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8012a1a:	431a      	orrs	r2, r3
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1e:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 8012a22:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012a26:	431a      	orrs	r2, r3
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8012a2e:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8012a30:	f247 2372 	movw	r3, #29298	; 0x7272
 8012a34:	f2c6 1341 	movt	r3, #24897	; 0x6141
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d12d      	bne.n	8012a98 <auto_mount+0x4cc>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 8012a42:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8012a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a48:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8012a4c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8012a50:	431a      	orrs	r2, r3
 8012a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a54:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 8012a58:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012a5c:	431a      	orrs	r2, r3
 8012a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a60:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8012a64:	431a      	orrs	r2, r3
 8012a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a68:	60da      	str	r2, [r3, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8012a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6c:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8012a70:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8012a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a76:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8012a7a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8012a7e:	431a      	orrs	r2, r3
 8012a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a82:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8012a86:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012a8a:	431a      	orrs	r2, r3
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012a92:	431a      	orrs	r2, r3
 8012a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a96:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8012a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012a9e:	701a      	strb	r2, [r3, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	f04f 0200 	mov.w	r2, #0
 8012aa6:	631a      	str	r2, [r3, #48]	; 0x30
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	f04f 0200 	mov.w	r2, #0
 8012aae:	619a      	str	r2, [r3, #24]
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 8012ab0:	f640 232c 	movw	r3, #2604	; 0xa2c
 8012ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	f103 0301 	add.w	r3, r3, #1
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	f640 232c 	movw	r3, #2604	; 0xa2c
 8012ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ac8:	801a      	strh	r2, [r3, #0]
 8012aca:	f640 232c 	movw	r3, #2604	; 0xa2c
 8012ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ad2:	881a      	ldrh	r2, [r3, #0]
 8012ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad6:	80da      	strh	r2, [r3, #6]
	res = FR_OK;
 8012ad8:	f04f 0300 	mov.w	r3, #0
 8012adc:	75fb      	strb	r3, [r7, #23]

	return res;
 8012ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop

08012aec <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	460b      	mov	r3, r1
 8012af6:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d008      	beq.n	8012b10 <validate+0x24>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d004      	beq.n	8012b10 <validate+0x24>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	88db      	ldrh	r3, [r3, #6]
 8012b0a:	887a      	ldrh	r2, [r7, #2]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d002      	beq.n	8012b16 <validate+0x2a>
		return FR_INVALID_OBJECT;
 8012b10:	f04f 0309 	mov.w	r3, #9
 8012b14:	e00f      	b.n	8012b36 <validate+0x4a>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	785b      	ldrb	r3, [r3, #1]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe fb2e 	bl	801117c <disk_status>
 8012b20:	4603      	mov	r3, r0
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <validate+0x46>
		return FR_NOT_READY;
 8012b2c:	f04f 0303 	mov.w	r3, #3
 8012b30:	e001      	b.n	8012b36 <validate+0x4a>

	return FR_OK;
 8012b32:	f04f 0300 	mov.w	r3, #0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	f107 0708 	add.w	r7, r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	4603      	mov	r3, r0
 8012b48:	6039      	str	r1, [r7, #0]
 8012b4a:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 8012b4c:	79fb      	ldrb	r3, [r7, #7]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d002      	beq.n	8012b58 <f_mount+0x18>
		return FR_INVALID_DRIVE;
 8012b52:	f04f 030b 	mov.w	r3, #11
 8012b56:	e01f      	b.n	8012b98 <f_mount+0x58>
	rfs = FatFs[vol];				/* Get current fs object */
 8012b58:	79fa      	ldrb	r2, [r7, #7]
 8012b5a:	f640 2328 	movw	r3, #2600	; 0xa28
 8012b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b66:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d003      	beq.n	8012b76 <f_mount+0x36>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f04f 0200 	mov.w	r2, #0
 8012b74:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d003      	beq.n	8012b84 <f_mount+0x44>
		fs->fs_type = 0;			/* Clear new fs object */
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	f04f 0200 	mov.w	r2, #0
 8012b82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 8012b84:	79fa      	ldrb	r2, [r7, #7]
 8012b86:	f640 2328 	movw	r3, #2600	; 0xa28
 8012b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b8e:	6839      	ldr	r1, [r7, #0]
 8012b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
 8012b94:	f04f 0300 	mov.w	r3, #0
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f107 0714 	add.w	r7, r7, #20
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bc80      	pop	{r7}
 8012ba2:	4770      	bx	lr

08012ba4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/*Access mode and file open mode flags, mcg changed name to modearg */
)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b092      	sub	sp, #72	; 0x48
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	71fb      	strb	r3, [r7, #7]
	BYTE *dir;
//        BYTE mode; //mcg

//      mode = modearg; //mcg using local var to try ad prevent hard fault exception that occurred when using mode arg directly

	fp->fs = NULL;		/* Clear file object */
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	f04f 0200 	mov.w	r2, #0
 8012bb8:	601a      	str	r2, [r3, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 8012bba:	79fb      	ldrb	r3, [r7, #7]
 8012bbc:	f003 031f 	and.w	r3, r3, #31
 8012bc0:	71fb      	strb	r3, [r7, #7]
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 8012bc2:	79fb      	ldrb	r3, [r7, #7]
 8012bc4:	f003 031e 	and.w	r3, r3, #30
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	f107 0108 	add.w	r1, r7, #8
 8012bce:	f107 021c 	add.w	r2, r7, #28
 8012bd2:	4608      	mov	r0, r1
 8012bd4:	4611      	mov	r1, r2
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	f7ff fcf8 	bl	80125cc <auto_mount>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8012be2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d002      	beq.n	8012bf0 <f_open+0x4c>
 8012bea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012bee:	e185      	b.n	8012efc <f_open+0x358>
	INITBUF(dj, sfn, lfn);
 8012bf0:	f107 0310 	add.w	r3, r7, #16
 8012bf4:	637b      	str	r3, [r7, #52]	; 0x34
	res = follow_path(&dj, path);	/* Follow the file path */
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	f107 021c 	add.w	r2, r7, #28
 8012bfc:	4610      	mov	r0, r2
 8012bfe:	4619      	mov	r1, r3
 8012c00:	f7ff fbf8 	bl	80123f4 <follow_path>
 8012c04:	4603      	mov	r3, r0
 8012c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012c0a:	79fb      	ldrb	r3, [r7, #7]
 8012c0c:	f003 031c 	and.w	r3, r3, #28
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	f000 80f0 	beq.w	8012df6 <f_open+0x252>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 8012c16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d019      	beq.n	8012c52 <f_open+0xae>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 8012c1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c22:	2b04      	cmp	r3, #4
 8012c24:	d107      	bne.n	8012c36 <f_open+0x92>
				res = dir_register(&dj);
 8012c26:	f107 031c 	add.w	r3, r7, #28
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7ff fa70 	bl	8012110 <dir_register>
 8012c30:	4603      	mov	r3, r0
 8012c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8012c36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d002      	beq.n	8012c44 <f_open+0xa0>
 8012c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c42:	e15b      	b.n	8012efc <f_open+0x358>
			mode |= FA_CREATE_ALWAYS;
 8012c44:	79fb      	ldrb	r3, [r7, #7]
 8012c46:	f043 0308 	orr.w	r3, r3, #8
 8012c4a:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;			/* Created entry (SFN entry) */
 8012c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8012c50:	e099      	b.n	8012d86 <f_open+0x1e2>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 8012c52:	79fb      	ldrb	r3, [r7, #7]
 8012c54:	f003 0304 	and.w	r3, r3, #4
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d002      	beq.n	8012c62 <f_open+0xbe>
				LEAVE_FF(dj.fs, FR_EXIST);
 8012c5c:	f04f 0308 	mov.w	r3, #8
 8012c60:	e14c      	b.n	8012efc <f_open+0x358>
			dir = dj.dir;
 8012c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c64:	643b      	str	r3, [r7, #64]	; 0x40
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 8012c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d007      	beq.n	8012c7c <f_open+0xd8>
 8012c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c6e:	f103 030b 	add.w	r3, r3, #11
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	f003 0311 	and.w	r3, r3, #17
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d002      	beq.n	8012c82 <f_open+0xde>
				LEAVE_FF(dj.fs, FR_DENIED);
 8012c7c:	f04f 0307 	mov.w	r3, #7
 8012c80:	e13c      	b.n	8012efc <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 8012c82:	79fb      	ldrb	r3, [r7, #7]
 8012c84:	f003 0308 	and.w	r3, r3, #8
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d07c      	beq.n	8012d86 <f_open+0x1e2>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 8012c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c8e:	f103 0315 	add.w	r3, r3, #21
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012c98:	b29a      	uxth	r2, r3
 8012c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c9c:	f103 0314 	add.w	r3, r3, #20
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8012cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cae:	f103 031b 	add.w	r3, r3, #27
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012cb8:	b299      	uxth	r1, r3
 8012cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cbc:	f103 031a 	add.w	r3, r3, #26
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	430b      	orrs	r3, r1
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	63fb      	str	r3, [r7, #60]	; 0x3c
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 8012ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cce:	f103 0314 	add.w	r3, r3, #20
 8012cd2:	f04f 0200 	mov.w	r2, #0
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cda:	f103 0315 	add.w	r3, r3, #21
 8012cde:	f04f 0200 	mov.w	r2, #0
 8012ce2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusLO, 0);
 8012ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ce6:	f103 031a 	add.w	r3, r3, #26
 8012cea:	f04f 0200 	mov.w	r2, #0
 8012cee:	701a      	strb	r2, [r3, #0]
 8012cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cf2:	f103 031b 	add.w	r3, r3, #27
 8012cf6:	f04f 0200 	mov.w	r2, #0
 8012cfa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 8012cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cfe:	f103 031c 	add.w	r3, r3, #28
 8012d02:	f04f 0200 	mov.w	r2, #0
 8012d06:	701a      	strb	r2, [r3, #0]
 8012d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d0a:	f103 031d 	add.w	r3, r3, #29
 8012d0e:	f04f 0200 	mov.w	r2, #0
 8012d12:	701a      	strb	r2, [r3, #0]
 8012d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d16:	f103 031e 	add.w	r3, r3, #30
 8012d1a:	f04f 0200 	mov.w	r2, #0
 8012d1e:	701a      	strb	r2, [r3, #0]
 8012d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d22:	f103 031f 	add.w	r3, r3, #31
 8012d26:	f04f 0200 	mov.w	r2, #0
 8012d2a:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	f04f 0201 	mov.w	r2, #1
 8012d32:	711a      	strb	r2, [r3, #4]
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d38:	63bb      	str	r3, [r7, #56]	; 0x38
				if (cl) {
 8012d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d013      	beq.n	8012d68 <f_open+0x1c4>
					res = remove_chain(dj.fs, cl);
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	4618      	mov	r0, r3
 8012d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d46:	f7fe ff09 	bl	8011b5c <remove_chain>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (res) LEAVE_FF(dj.fs, res);
 8012d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <f_open+0x1ba>
 8012d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d5c:	e0ce      	b.n	8012efc <f_open+0x358>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d62:	f102 32ff 	add.w	r2, r2, #4294967295
 8012d66:	60da      	str	r2, [r3, #12]
				}
				res = move_window(dj.fs, ps);
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d6e:	f7fe fb97 	bl	80114a0 <move_window>
 8012d72:	4603      	mov	r3, r0
 8012d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8012d78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <f_open+0x1e2>
 8012d80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d84:	e0ba      	b.n	8012efc <f_open+0x358>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 8012d86:	79fb      	ldrb	r3, [r7, #7]
 8012d88:	f003 0308 	and.w	r3, r3, #8
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d05a      	beq.n	8012e46 <f_open+0x2a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8012d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d92:	f103 030b 	add.w	r3, r3, #11
 8012d96:	f04f 0200 	mov.w	r2, #0
 8012d9a:	701a      	strb	r2, [r3, #0]
			ps = get_fattime();
 8012d9c:	f000 fc52 	bl	8013644 <get_fattime>
 8012da0:	4603      	mov	r3, r0
 8012da2:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 8012da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012da6:	f103 030e 	add.w	r3, r3, #14
 8012daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dac:	b2d2      	uxtb	r2, r2
 8012dae:	701a      	strb	r2, [r3, #0]
 8012db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012db2:	f103 030f 	add.w	r3, r3, #15
 8012db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012db8:	b292      	uxth	r2, r2
 8012dba:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8012dbe:	b292      	uxth	r2, r2
 8012dc0:	b2d2      	uxtb	r2, r2
 8012dc2:	701a      	strb	r2, [r3, #0]
 8012dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dc6:	f103 0310 	add.w	r3, r3, #16
 8012dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dcc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8012dd0:	b2d2      	uxtb	r2, r2
 8012dd2:	701a      	strb	r2, [r3, #0]
 8012dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dd6:	f103 0311 	add.w	r3, r3, #17
 8012dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ddc:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8012de0:	b2d2      	uxtb	r2, r2
 8012de2:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	f04f 0201 	mov.w	r2, #1
 8012dea:	711a      	strb	r2, [r3, #4]
			mode |= FA__WRITTEN;				/* Set file changed flag */
 8012dec:	79fb      	ldrb	r3, [r7, #7]
 8012dee:	f043 0320 	orr.w	r3, r3, #32
 8012df2:	71fb      	strb	r3, [r7, #7]
 8012df4:	e027      	b.n	8012e46 <f_open+0x2a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 8012df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d002      	beq.n	8012e04 <f_open+0x260>
 8012dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012e02:	e07b      	b.n	8012efc <f_open+0x358>
		dir = dj.dir;
 8012e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e06:	643b      	str	r3, [r7, #64]	; 0x40
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 8012e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d007      	beq.n	8012e1e <f_open+0x27a>
 8012e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e10:	f103 030b 	add.w	r3, r3, #11
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	f003 0310 	and.w	r3, r3, #16
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d002      	beq.n	8012e24 <f_open+0x280>
			LEAVE_FF(dj.fs, FR_NO_FILE);
 8012e1e:	f04f 0304 	mov.w	r3, #4
 8012e22:	e06b      	b.n	8012efc <f_open+0x358>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	f003 0302 	and.w	r3, r3, #2
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d00b      	beq.n	8012e46 <f_open+0x2a2>
 8012e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e30:	f103 030b 	add.w	r3, r3, #11
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	f003 0301 	and.w	r3, r3, #1
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d002      	beq.n	8012e46 <f_open+0x2a2>
			LEAVE_FF(dj.fs, FR_DENIED);
 8012e40:	f04f 0307 	mov.w	r3, #7
 8012e44:	e05a      	b.n	8012efc <f_open+0x358>
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	61da      	str	r2, [r3, #28]
	fp->dir_ptr = dj.dir;
 8012e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	621a      	str	r2, [r3, #32]
#endif
	fp->flag = mode;					/* File access mode */
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	79fa      	ldrb	r2, [r7, #7]
 8012e58:	719a      	strb	r2, [r3, #6]
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8012e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e5c:	f103 0315 	add.w	r3, r3, #21
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e6a:	f103 0314 	add.w	r3, r3, #20
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	4313      	orrs	r3, r2
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8012e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e7c:	f103 031b 	add.w	r3, r3, #27
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012e86:	b299      	uxth	r1, r3
 8012e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e8a:	f103 031a 	add.w	r3, r3, #26
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	430b      	orrs	r3, r1
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	431a      	orrs	r2, r3
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	611a      	str	r2, [r3, #16]
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8012e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e9e:	f103 031f 	add.w	r3, r3, #31
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8012ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eaa:	f103 031e 	add.w	r3, r3, #30
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8012eb4:	431a      	orrs	r2, r3
 8012eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb8:	f103 031d 	add.w	r3, r3, #29
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012ec2:	431a      	orrs	r2, r3
 8012ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec6:	f103 031c 	add.w	r3, r3, #28
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	431a      	orrs	r2, r3
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	60da      	str	r2, [r3, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	f04f 0200 	mov.w	r2, #0
 8012ed8:	609a      	str	r2, [r3, #8]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8012ee0:	71da      	strb	r2, [r3, #7]
	fp->dsect = 0;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f04f 0200 	mov.w	r2, #0
 8012ee8:	619a      	str	r2, [r3, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8012eea:	69fa      	ldr	r2, [r7, #28]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	601a      	str	r2, [r3, #0]
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	88da      	ldrh	r2, [r3, #6]
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	809a      	strh	r2, [r3, #4]

	LEAVE_FF(dj.fs, FR_OK);
 8012ef8:	f04f 0300 	mov.w	r3, #0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop

08012f08 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b08a      	sub	sp, #40	; 0x28
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	60f8      	str	r0, [r7, #12]
 8012f10:	60b9      	str	r1, [r7, #8]
 8012f12:	607a      	str	r2, [r7, #4]
 8012f14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	61bb      	str	r3, [r7, #24]


	*bw = 0;
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	f04f 0200 	mov.w	r2, #0
 8012f20:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	889b      	ldrh	r3, [r3, #4]
 8012f2a:	4610      	mov	r0, r2
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	f7ff fddd 	bl	8012aec <validate>
 8012f32:	4603      	mov	r3, r0
 8012f34:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8012f36:	7dfb      	ldrb	r3, [r7, #23]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d001      	beq.n	8012f40 <f_write+0x38>
 8012f3c:	7dfb      	ldrb	r3, [r7, #23]
 8012f3e:	e198      	b.n	8013272 <f_write+0x36a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	799b      	ldrb	r3, [r3, #6]
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	b25b      	sxtb	r3, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	da02      	bge.n	8012f52 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8012f4c:	f04f 0302 	mov.w	r3, #2
 8012f50:	e18f      	b.n	8013272 <f_write+0x36a>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	799b      	ldrb	r3, [r3, #6]
 8012f56:	f003 0302 	and.w	r3, r3, #2
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d102      	bne.n	8012f64 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8012f5e:	f04f 0307 	mov.w	r3, #7
 8012f62:	e186      	b.n	8013272 <f_write+0x36a>
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	68da      	ldr	r2, [r3, #12]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	18d2      	adds	r2, r2, r3
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	68db      	ldr	r3, [r3, #12]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	f080 8165 	bcs.w	8013240 <f_write+0x338>
 8012f76:	f04f 0300 	mov.w	r3, #0
 8012f7a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;									/* Repeat until all data transferred */
 8012f7c:	e160      	b.n	8013240 <f_write+0x338>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	689b      	ldr	r3, [r3, #8]
 8012f82:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8012f86:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	f040 811e 	bne.w	80131cc <f_write+0x2c4>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	79da      	ldrb	r2, [r3, #7]
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	789b      	ldrb	r3, [r3, #2]
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d346      	bcc.n	801302c <f_write+0x124>
				if (fp->fptr == 0) {				/* On the top of the file? */
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	689b      	ldr	r3, [r3, #8]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d112      	bne.n	8012fcc <f_write+0xc4>
					clst = fp->org_clust;			/* Follow from the origin */
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	691b      	ldr	r3, [r3, #16]
 8012faa:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)					/* When there is no cluster chain, */
 8012fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d116      	bne.n	8012fe0 <f_write+0xd8>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f04f 0100 	mov.w	r1, #0
 8012fbc:	f7fe fe26 	bl	8011c0c <create_chain>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fc8:	611a      	str	r2, [r3, #16]
 8012fca:	e009      	b.n	8012fe0 <f_write+0xd8>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	695b      	ldr	r3, [r3, #20]
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	f7fe fe18 	bl	8011c0c <create_chain>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	f000 8131 	beq.w	801324a <f_write+0x342>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d109      	bne.n	8013002 <f_write+0xfa>
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	799b      	ldrb	r3, [r3, #6]
 8012ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	719a      	strb	r2, [r3, #6]
 8012ffc:	f04f 0302 	mov.w	r3, #2
 8013000:	e137      	b.n	8013272 <f_write+0x36a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8013002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013008:	d109      	bne.n	801301e <f_write+0x116>
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	799b      	ldrb	r3, [r3, #6]
 801300e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013012:	b2da      	uxtb	r2, r3
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	719a      	strb	r2, [r3, #6]
 8013018:	f04f 0301 	mov.w	r3, #1
 801301c:	e129      	b.n	8013272 <f_write+0x36a>
				fp->curr_clust = clst;				/* Update current cluster */
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013022:	615a      	str	r2, [r3, #20]
				fp->csect = 0;						/* Reset sector address in the cluster */
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	f04f 0200 	mov.w	r2, #0
 801302a:	71da      	strb	r2, [r3, #7]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	799b      	ldrb	r3, [r3, #6]
 8013030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013034:	2b00      	cmp	r3, #0
 8013036:	d022      	beq.n	801307e <f_write+0x176>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	7859      	ldrb	r1, [r3, #1]
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	699b      	ldr	r3, [r3, #24]
 8013048:	4608      	mov	r0, r1
 801304a:	4611      	mov	r1, r2
 801304c:	461a      	mov	r2, r3
 801304e:	f04f 0301 	mov.w	r3, #1
 8013052:	f7fe f8fd 	bl	8011250 <disk_write>
 8013056:	4603      	mov	r3, r0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d009      	beq.n	8013070 <f_write+0x168>
					ABORT(fp->fs, FR_DISK_ERR);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	799b      	ldrb	r3, [r3, #6]
 8013060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013064:	b2da      	uxtb	r2, r3
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	719a      	strb	r2, [r3, #6]
 801306a:	f04f 0301 	mov.w	r3, #1
 801306e:	e100      	b.n	8013272 <f_write+0x36a>
				fp->flag &= ~FA__DIRTY;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	799b      	ldrb	r3, [r3, #6]
 8013074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013078:	b2da      	uxtb	r2, r3
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	695b      	ldr	r3, [r3, #20]
 8013086:	4610      	mov	r0, r2
 8013088:	4619      	mov	r1, r3
 801308a:	f7fe fe4f 	bl	8011d2c <clust2sect>
 801308e:	4603      	mov	r3, r0
 8013090:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d109      	bne.n	80130ac <f_write+0x1a4>
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	799b      	ldrb	r3, [r3, #6]
 801309c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80130a0:	b2da      	uxtb	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	719a      	strb	r2, [r3, #6]
 80130a6:	f04f 0302 	mov.w	r3, #2
 80130aa:	e0e2      	b.n	8013272 <f_write+0x36a>
			sect += fp->csect;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	79db      	ldrb	r3, [r3, #7]
 80130b0:	693a      	ldr	r2, [r7, #16]
 80130b2:	18d3      	adds	r3, r2, r3
 80130b4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	ea4f 2353 	mov.w	r3, r3, lsr #9
 80130bc:	61fb      	str	r3, [r7, #28]
			if (cc) {								/* Write maximum contiguous sectors directly */
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d054      	beq.n	801316e <f_write+0x266>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	79db      	ldrb	r3, [r3, #7]
 80130c8:	461a      	mov	r2, r3
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	18d2      	adds	r2, r2, r3
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	789b      	ldrb	r3, [r3, #2]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d907      	bls.n	80130e8 <f_write+0x1e0>
					cc = fp->fs->csize - fp->csect;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	789b      	ldrb	r3, [r3, #2]
 80130de:	461a      	mov	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	79db      	ldrb	r3, [r3, #7]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	785a      	ldrb	r2, [r3, #1]
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	4610      	mov	r0, r2
 80130f4:	69b9      	ldr	r1, [r7, #24]
 80130f6:	693a      	ldr	r2, [r7, #16]
 80130f8:	f7fe f8aa 	bl	8011250 <disk_write>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d009      	beq.n	8013116 <f_write+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	799b      	ldrb	r3, [r3, #6]
 8013106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801310a:	b2da      	uxtb	r2, r3
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	719a      	strb	r2, [r3, #6]
 8013110:	f04f 0301 	mov.w	r3, #1
 8013114:	e0ad      	b.n	8013272 <f_write+0x36a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	699a      	ldr	r2, [r3, #24]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	1ad2      	subs	r2, r2, r3
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	429a      	cmp	r2, r3
 8013122:	d217      	bcs.n	8013154 <f_write+0x24c>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6999      	ldr	r1, [r3, #24]
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	1acb      	subs	r3, r1, r3
 8013132:	ea4f 2343 	mov.w	r3, r3, lsl #9
 8013136:	69b9      	ldr	r1, [r7, #24]
 8013138:	18cb      	adds	r3, r1, r3
 801313a:	4610      	mov	r0, r2
 801313c:	4619      	mov	r1, r3
 801313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013142:	f7fe f90f 	bl	8011364 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	799b      	ldrb	r3, [r3, #6]
 801314a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801314e:	b2da      	uxtb	r2, r3
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	719a      	strb	r2, [r3, #6]
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	79da      	ldrb	r2, [r3, #7]
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	b2db      	uxtb	r3, r3
 801315c:	18d3      	adds	r3, r2, r3
 801315e:	b2da      	uxtb	r2, r3
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	71da      	strb	r2, [r3, #7]
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801316a:	623b      	str	r3, [r7, #32]
				continue;
 801316c:	e054      	b.n	8013218 <f_write+0x310>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	699a      	ldr	r2, [r3, #24]
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	429a      	cmp	r2, r3
 8013176:	d01f      	beq.n	80131b8 <f_write+0x2b0>
				if (fp->fptr < fp->fsize &&
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	689a      	ldr	r2, [r3, #8]
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	68db      	ldr	r3, [r3, #12]
 8013180:	429a      	cmp	r2, r3
 8013182:	d219      	bcs.n	80131b8 <f_write+0x2b0>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	785a      	ldrb	r2, [r3, #1]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8013190:	4610      	mov	r0, r2
 8013192:	4619      	mov	r1, r3
 8013194:	693a      	ldr	r2, [r7, #16]
 8013196:	f04f 0301 	mov.w	r3, #1
 801319a:	f7fe f80f 	bl	80111bc <disk_read>
 801319e:	4603      	mov	r3, r0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d009      	beq.n	80131b8 <f_write+0x2b0>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	799b      	ldrb	r3, [r3, #6]
 80131a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80131ac:	b2da      	uxtb	r2, r3
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	719a      	strb	r2, [r3, #6]
 80131b2:	f04f 0301 	mov.w	r3, #1
 80131b6:	e05c      	b.n	8013272 <f_write+0x36a>
			}
#endif
			fp->dsect = sect;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	693a      	ldr	r2, [r7, #16]
 80131bc:	619a      	str	r2, [r3, #24]
			fp->csect++;							/* Next sector address in the cluster */
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	79db      	ldrb	r3, [r3, #7]
 80131c2:	f103 0301 	add.w	r3, r3, #1
 80131c6:	b2da      	uxtb	r2, r3
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	71da      	strb	r2, [r3, #7]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80131d4:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80131d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80131dc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80131de:	6a3a      	ldr	r2, [r7, #32]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d901      	bls.n	80131ea <f_write+0x2e2>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80131f8:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80131fc:	18d2      	adds	r2, r2, r3
 80131fe:	6a3b      	ldr	r3, [r7, #32]
 8013200:	4610      	mov	r0, r2
 8013202:	69b9      	ldr	r1, [r7, #24]
 8013204:	461a      	mov	r2, r3
 8013206:	f7fe f8ad 	bl	8011364 <mem_cpy>
		fp->flag |= FA__DIRTY;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	799b      	ldrb	r3, [r3, #6]
 801320e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013212:	b2da      	uxtb	r2, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	719a      	strb	r2, [r3, #6]
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8013218:	69ba      	ldr	r2, [r7, #24]
 801321a:	6a3b      	ldr	r3, [r7, #32]
 801321c:	18d3      	adds	r3, r2, r3
 801321e:	61bb      	str	r3, [r7, #24]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	689a      	ldr	r2, [r3, #8]
 8013224:	6a3b      	ldr	r3, [r7, #32]
 8013226:	18d2      	adds	r2, r2, r3
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	609a      	str	r2, [r3, #8]
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	6a3b      	ldr	r3, [r7, #32]
 8013232:	18d2      	adds	r2, r2, r3
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	601a      	str	r2, [r3, #0]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	f47f ae9b 	bne.w	8012f7e <f_write+0x76>
 8013248:	e000      	b.n	801324c <f_write+0x344>
					if (clst == 0)					/* When there is no cluster chain, */
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 801324a:	bf00      	nop
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	689a      	ldr	r2, [r3, #8]
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	429a      	cmp	r2, r3
 8013256:	d903      	bls.n	8013260 <f_write+0x358>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	689a      	ldr	r2, [r3, #8]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	799b      	ldrb	r3, [r3, #6]
 8013264:	f043 0320 	orr.w	r3, r3, #32
 8013268:	b2da      	uxtb	r2, r3
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 801326e:	f04f 0300 	mov.w	r3, #0
}
 8013272:	4618      	mov	r0, r3
 8013274:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	889b      	ldrh	r3, [r3, #4]
 801328c:	4610      	mov	r0, r2
 801328e:	4619      	mov	r1, r3
 8013290:	f7ff fc2c 	bl	8012aec <validate>
 8013294:	4603      	mov	r3, r0
 8013296:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013298:	7dfb      	ldrb	r3, [r7, #23]
 801329a:	2b00      	cmp	r3, #0
 801329c:	f040 80c8 	bne.w	8013430 <f_sync+0x1b4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	799b      	ldrb	r3, [r3, #6]
 80132a4:	f003 0320 	and.w	r3, r3, #32
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	f000 80c1 	beq.w	8013430 <f_sync+0x1b4>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	799b      	ldrb	r3, [r3, #6]
 80132b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d01b      	beq.n	80132f2 <f_sync+0x76>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	7859      	ldrb	r1, [r3, #1]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	699b      	ldr	r3, [r3, #24]
 80132ca:	4608      	mov	r0, r1
 80132cc:	4611      	mov	r1, r2
 80132ce:	461a      	mov	r2, r3
 80132d0:	f04f 0301 	mov.w	r3, #1
 80132d4:	f7fd ffbc 	bl	8011250 <disk_write>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d002      	beq.n	80132e4 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80132de:	f04f 0301 	mov.w	r3, #1
 80132e2:	e0a6      	b.n	8013432 <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	799b      	ldrb	r3, [r3, #6]
 80132e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	69db      	ldr	r3, [r3, #28]
 80132fa:	4610      	mov	r0, r2
 80132fc:	4619      	mov	r1, r3
 80132fe:	f7fe f8cf 	bl	80114a0 <move_window>
 8013302:	4603      	mov	r3, r0
 8013304:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8013306:	7dfb      	ldrb	r3, [r7, #23]
 8013308:	2b00      	cmp	r3, #0
 801330a:	f040 8091 	bne.w	8013430 <f_sync+0x1b4>
				dir = fp->dir_ptr;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6a1b      	ldr	r3, [r3, #32]
 8013312:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	f103 030b 	add.w	r3, r3, #11
 801331a:	693a      	ldr	r2, [r7, #16]
 801331c:	f102 020b 	add.w	r2, r2, #11
 8013320:	7812      	ldrb	r2, [r2, #0]
 8013322:	f042 0220 	orr.w	r2, r2, #32
 8013326:	b2d2      	uxtb	r2, r2
 8013328:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	f103 031c 	add.w	r3, r3, #28
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	68d2      	ldr	r2, [r2, #12]
 8013334:	b2d2      	uxtb	r2, r2
 8013336:	701a      	strb	r2, [r3, #0]
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	f103 031d 	add.w	r3, r3, #29
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	68d2      	ldr	r2, [r2, #12]
 8013342:	b292      	uxth	r2, r2
 8013344:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8013348:	b292      	uxth	r2, r2
 801334a:	b2d2      	uxtb	r2, r2
 801334c:	701a      	strb	r2, [r3, #0]
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	f103 031e 	add.w	r3, r3, #30
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	68d2      	ldr	r2, [r2, #12]
 8013358:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801335c:	b2d2      	uxtb	r2, r2
 801335e:	701a      	strb	r2, [r3, #0]
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	f103 031f 	add.w	r3, r3, #31
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	68d2      	ldr	r2, [r2, #12]
 801336a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801336e:	b2d2      	uxtb	r2, r2
 8013370:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	f103 031a 	add.w	r3, r3, #26
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	6912      	ldr	r2, [r2, #16]
 801337c:	b2d2      	uxtb	r2, r2
 801337e:	701a      	strb	r2, [r3, #0]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	f103 031b 	add.w	r3, r3, #27
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	6912      	ldr	r2, [r2, #16]
 801338a:	b292      	uxth	r2, r2
 801338c:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8013390:	b292      	uxth	r2, r2
 8013392:	b2d2      	uxtb	r2, r2
 8013394:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	f103 0314 	add.w	r3, r3, #20
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	6912      	ldr	r2, [r2, #16]
 80133a0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80133a4:	b2d2      	uxtb	r2, r2
 80133a6:	701a      	strb	r2, [r3, #0]
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	f103 0315 	add.w	r3, r3, #21
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	6912      	ldr	r2, [r2, #16]
 80133b2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80133b6:	b292      	uxth	r2, r2
 80133b8:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80133bc:	b292      	uxth	r2, r2
 80133be:	b2d2      	uxtb	r2, r2
 80133c0:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();			/* Updated time */
 80133c2:	f000 f93f 	bl	8013644 <get_fattime>
 80133c6:	4603      	mov	r3, r0
 80133c8:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	f103 0316 	add.w	r3, r3, #22
 80133d0:	68fa      	ldr	r2, [r7, #12]
 80133d2:	b2d2      	uxtb	r2, r2
 80133d4:	701a      	strb	r2, [r3, #0]
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	f103 0317 	add.w	r3, r3, #23
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	b292      	uxth	r2, r2
 80133e0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80133e4:	b292      	uxth	r2, r2
 80133e6:	b2d2      	uxtb	r2, r2
 80133e8:	701a      	strb	r2, [r3, #0]
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	f103 0318 	add.w	r3, r3, #24
 80133f0:	68fa      	ldr	r2, [r7, #12]
 80133f2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80133f6:	b2d2      	uxtb	r2, r2
 80133f8:	701a      	strb	r2, [r3, #0]
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	f103 0319 	add.w	r3, r3, #25
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8013406:	b2d2      	uxtb	r2, r2
 8013408:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	799b      	ldrb	r3, [r3, #6]
 801340e:	f023 0320 	bic.w	r3, r3, #32
 8013412:	b2da      	uxtb	r2, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f04f 0201 	mov.w	r2, #1
 8013420:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4618      	mov	r0, r3
 8013428:	f7fe f8a4 	bl	8011574 <sync>
 801342c:	4603      	mov	r3, r0
 801342e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8013430:	7dfb      	ldrb	r3, [r7, #23]
}
 8013432:	4618      	mov	r0, r3
 8013434:	f107 0718 	add.w	r7, r7, #24
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f7ff ff19 	bl	801327c <f_sync>
 801344a:	4603      	mov	r3, r0
 801344c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) fp->fs = NULL;
 801344e:	7bfb      	ldrb	r3, [r7, #15]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d103      	bne.n	801345c <f_close+0x20>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f04f 0200 	mov.w	r2, #0
 801345a:	601a      	str	r2, [r3, #0]
	return res;
 801345c:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 801345e:	4618      	mov	r0, r3
 8013460:	f107 0710 	add.w	r7, r7, #16
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <_ZN12CFileHandlerC1Ev>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/



CFileHandler::CFileHandler() {
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4618      	mov	r0, r3
 8013474:	f7fd f8ea 	bl	801064c <_ZN12AManagedTaskC1Ev>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	4a08      	ldr	r2, [pc, #32]	; (801349c <_ZN12CFileHandlerC1Ev+0x34>)
 801347c:	601a      	str	r2, [r3, #0]
	Status = SD_OK;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f04f 0200 	mov.w	r2, #0
 8013484:	731a      	strb	r2, [r3, #12]
	fsresult = FR_OK;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f04f 0200 	mov.w	r2, #0
 801348c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4618      	mov	r0, r3
 8013494:	f107 0708 	add.w	r7, r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	0801c1a8 	.word	0x0801c1a8

080134a0 <_ZN12CFileHandlerD1Ev>:

CFileHandler::~CFileHandler() {
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	4a0a      	ldr	r2, [pc, #40]	; (80134d4 <_ZN12CFileHandlerD1Ev+0x34>)
 80134ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7fd f8e8 	bl	8010684 <_ZN12AManagedTaskD1Ev>
 80134b4:	f04f 0300 	mov.w	r3, #0
 80134b8:	f003 0301 	and.w	r3, r3, #1
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d002      	beq.n	80134c8 <_ZN12CFileHandlerD1Ev+0x28>
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f002 fff0 	bl	80164a8 <_ZdlPv>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f107 0708 	add.w	r7, r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	0801c1a8 	.word	0x0801c1a8

080134d8 <_ZN12CFileHandlerD0Ev>:
CFileHandler::CFileHandler() {
	Status = SD_OK;
	fsresult = FR_OK;
}

CFileHandler::~CFileHandler() {
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f7ff ffdd 	bl	80134a0 <_ZN12CFileHandlerD1Ev>
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f002 ffde 	bl	80164a8 <_ZdlPv>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	4618      	mov	r0, r3
 80134f0:	f107 0708 	add.w	r7, r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <_ZN12CFileHandler12HardwareInitEv>:
  * @brief  HardwareInit called before Scheduler starts
  * 		SD Card interface will be initialised
  * @param  None
  * @retval true on succsess
  */
bool CFileHandler::HardwareInit(){
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;


	// SDIO Interrupt ENABLE
	NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
 8013500:	f04f 0331 	mov.w	r3, #49	; 0x31
 8013504:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8013506:	f04f 0300 	mov.w	r3, #0
 801350a:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 801350c:	f04f 0300 	mov.w	r3, #0
 8013510:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8013512:	f04f 0301 	mov.w	r3, #1
 8013516:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8013518:	f107 030c 	add.w	r3, r7, #12
 801351c:	4618      	mov	r0, r3
 801351e:	f7fa fc2b 	bl	800dd78 <NVIC_Init>
	// DMA2 STREAMx Interrupt ENABLE
	NVIC_InitStructure.NVIC_IRQChannel = SD_SDIO_DMA_IRQn;
 8013522:	f04f 033b 	mov.w	r3, #59	; 0x3b
 8013526:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8013528:	f04f 0301 	mov.w	r3, #1
 801352c:	737b      	strb	r3, [r7, #13]
	NVIC_Init(&NVIC_InitStructure);
 801352e:	f107 030c 	add.w	r3, r7, #12
 8013532:	4618      	mov	r0, r3
 8013534:	f7fa fc20 	bl	800dd78 <NVIC_Init>


	/*-------------------------- SD Init ----------------------------- */
	Status = SD_Init();
 8013538:	f000 fa02 	bl	8013940 <SD_Init>
 801353c:	4603      	mov	r3, r0
 801353e:	461a      	mov	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	731a      	strb	r2, [r3, #12]


	if (Status == SD_OK)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	7b1b      	ldrb	r3, [r3, #12]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d109      	bne.n	8013560 <_ZN12CFileHandler12HardwareInitEv+0x68>
	{
		//SD Card initialized ok.
		/*----------------- Read CSD/CID MSD registers ------------------*/
		Status = SD_GetCardInfo(&SDCardInfo);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f103 0310 	add.w	r3, r3, #16
 8013552:	4618      	mov	r0, r3
 8013554:	f000 fdce 	bl	80140f4 <SD_GetCardInfo>
 8013558:	4603      	mov	r3, r0
 801355a:	461a      	mov	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	731a      	strb	r2, [r3, #12]
	}

	return (Status == SD_OK);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	7b1b      	ldrb	r3, [r3, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	bf14      	ite	ne
 8013568:	2300      	movne	r3, #0
 801356a:	2301      	moveq	r3, #1
 801356c:	b2db      	uxtb	r3, r3
}
 801356e:	4618      	mov	r0, r3
 8013570:	f107 0710 	add.w	r7, r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <_ZN12CFileHandler3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CFileHandler::Run(){
 8013578:	b590      	push	{r4, r7, lr}
 801357a:	b089      	sub	sp, #36	; 0x24
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
	structure with a logical drive number.  Mounting must be done before any file
	operations.  Mounting does not write anything to the SD card, it simply
	initializes and associates the file structure.  The file system structure
	members are not filled in until the first file operation after f_mount.
	-----------------------------------------------------------------------------*/
	fsresult = f_mount(0, &myfs);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013586:	f04f 0000 	mov.w	r0, #0
 801358a:	4619      	mov	r1, r3
 801358c:	f7ff fad8 	bl	8012b40 <f_mount>
 8013590:	4603      	mov	r3, r0
 8013592:	461a      	mov	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	if (fsresult != FR_OK)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d000      	beq.n	80135a6 <_ZN12CFileHandler3RunEv+0x2e>
		//FAT file system mounting failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning.
		while(1);
 80135a4:	e7fe      	b.n	80135a4 <_ZN12CFileHandler3RunEv+0x2c>


	/*-----------------------------------------------------------------------------
	Open a file, write to it, and close it.
	-----------------------------------------------------------------------------*/
	fsresult = f_open(&myfile, "hello.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);  //open/create file for read/write
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80135ac:	4618      	mov	r0, r3
 80135ae:	f247 7144 	movw	r1, #30532	; 0x7744
 80135b2:	f6c0 0101 	movt	r1, #2049	; 0x801
 80135b6:	f04f 0213 	mov.w	r2, #19
 80135ba:	f7ff faf3 	bl	8012ba4 <f_open>
 80135be:	4603      	mov	r3, r0
 80135c0:	461a      	mov	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	if (fsresult != FR_OK)
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d000      	beq.n	80135d4 <_ZN12CFileHandler3RunEv+0x5c>
		//File open failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning
		while(1);
 80135d2:	e7fe      	b.n	80135d2 <_ZN12CFileHandler3RunEv+0x5a>

	BYTE wbuf[16];  //buffer to write to file
	UINT numwritten; //number of bytes actually written
	strcpy((char*)wbuf, "hello world");
 80135d4:	f107 0210 	add.w	r2, r7, #16
 80135d8:	f247 7350 	movw	r3, #30544	; 0x7750
 80135dc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80135e0:	4614      	mov	r4, r2
 80135e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80135e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	fsresult = f_write(&myfile, wbuf, strlen((const char*)wbuf), &numwritten);  //open/create file for read/write
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f503 7426 	add.w	r4, r3, #664	; 0x298
 80135f0:	f107 0310 	add.w	r3, r7, #16
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7f4 fdcd 	bl	8008194 <strlen>
 80135fa:	4602      	mov	r2, r0
 80135fc:	f107 0110 	add.w	r1, r7, #16
 8013600:	f107 030c 	add.w	r3, r7, #12
 8013604:	4620      	mov	r0, r4
 8013606:	f7ff fc7f 	bl	8012f08 <f_write>
 801360a:	4603      	mov	r3, r0
 801360c:	461a      	mov	r2, r3
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	if (fsresult != FR_OK)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801361a:	2b00      	cmp	r3, #0
 801361c:	d000      	beq.n	8013620 <_ZN12CFileHandler3RunEv+0xa8>
		while(1);
 801361e:	e7fe      	b.n	801361e <_ZN12CFileHandler3RunEv+0xa6>
		//File write failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning

	fsresult = f_close(&myfile);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff ff08 	bl	801343c <f_close>
 801362c:	4603      	mov	r3, r0
 801362e:	461a      	mov	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	if (fsresult != FR_OK)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801363c:	2b00      	cmp	r3, #0
 801363e:	d000      	beq.n	8013642 <_ZN12CFileHandler3RunEv+0xca>
		while(1);
 8013640:	e7fe      	b.n	8013640 <_ZN12CFileHandler3RunEv+0xc8>
		printf("File date/time set ok.\n");
	else
		printf("File date/time set failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning.\n", fsresult);

	* Infinite loop */
	while (1)
 8013642:	e7fe      	b.n	8013642 <_ZN12CFileHandler3RunEv+0xca>

08013644 <get_fattime>:
 * 			bit 4:0
 * 				 Second / 2 (0..29)
 *
 */
DWORD get_fattime (void)
{
 8013644:	b480      	push	{r7}
 8013646:	af00      	add	r7, sp, #0


  return 0;
 8013648:	f04f 0300 	mov.w	r3, #0
}
 801364c:	4618      	mov	r0, r3
 801364e:	46bd      	mov	sp, r7
 8013650:	bc80      	pop	{r7}
 8013652:	4770      	bx	lr

08013654 <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 801365a:	f04f 000c 	mov.w	r0, #12
 801365e:	f04f 0101 	mov.w	r1, #1
 8013662:	f7fb f8c5 	bl	800e7f0 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 8013666:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801366a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801366e:	f04f 0108 	mov.w	r1, #8
 8013672:	f04f 020c 	mov.w	r2, #12
 8013676:	f7fa ff7d 	bl	800e574 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
 801367a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801367e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013682:	f04f 0109 	mov.w	r1, #9
 8013686:	f04f 020c 	mov.w	r2, #12
 801368a:	f7fa ff73 	bl	800e574 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
 801368e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013692:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013696:	f04f 010a 	mov.w	r1, #10
 801369a:	f04f 020c 	mov.w	r2, #12
 801369e:	f7fa ff69 	bl	800e574 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
 80136a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80136a6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80136aa:	f04f 010b 	mov.w	r1, #11
 80136ae:	f04f 020c 	mov.w	r2, #12
 80136b2:	f7fa ff5f 	bl	800e574 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
 80136b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80136ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80136be:	f04f 010c 	mov.w	r1, #12
 80136c2:	f04f 020c 	mov.w	r2, #12
 80136c6:	f7fa ff55 	bl	800e574 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 80136ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80136ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80136d2:	f04f 0102 	mov.w	r1, #2
 80136d6:	f04f 020c 	mov.w	r2, #12
 80136da:	f7fa ff4b 	bl	800e574 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 80136de:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80136e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80136e4:	f04f 0301 	mov.w	r3, #1
 80136e8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80136ea:	f04f 0302 	mov.w	r3, #2
 80136ee:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80136f0:	f04f 0300 	mov.w	r3, #0
 80136f4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80136f6:	f04f 0301 	mov.w	r3, #1
 80136fa:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80136fc:	463b      	mov	r3, r7
 80136fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013702:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013706:	4619      	mov	r1, r3
 8013708:	f7fa fe42 	bl	800e390 <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 801370c:	f04f 0304 	mov.w	r3, #4
 8013710:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8013712:	463b      	mov	r3, r7
 8013714:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013718:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801371c:	4619      	mov	r1, r3
 801371e:	f7fa fe37 	bl	800e390 <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8013722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013726:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8013728:	f04f 0300 	mov.w	r3, #0
 801372c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 801372e:	463b      	mov	r3, r7
 8013730:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013734:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013738:	4619      	mov	r1, r3
 801373a:	f7fa fe29 	bl	800e390 <GPIO_Init>

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 801373e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8013742:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8013744:	f04f 0300 	mov.w	r3, #0
 8013748:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 801374a:	f04f 0301 	mov.w	r3, #1
 801374e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8013750:	463b      	mov	r3, r7
 8013752:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013756:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801375a:	4619      	mov	r1, r3
 801375c:	f7fa fe18 	bl	800e390 <GPIO_Init>

  /* Enable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
 8013760:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013764:	f04f 0101 	mov.w	r1, #1
 8013768:	f7fb f86e 	bl	800e848 <RCC_APB2PeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
 801376c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8013770:	f04f 0101 	mov.w	r1, #1
 8013774:	f7fb f83c 	bl	800e7f0 <RCC_AHB1PeriphClockCmd>
}
 8013778:	f107 0708 	add.w	r7, r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b092      	sub	sp, #72	; 0x48
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 801378a:	f246 4058 	movw	r0, #25688	; 0x6458
 801378e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013792:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8013796:	f7fa fd8d 	bl	800e2b4 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 801379a:	f246 4058 	movw	r0, #25688	; 0x6458
 801379e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80137a2:	f04f 0100 	mov.w	r1, #0
 80137a6:	f7fa fcef 	bl	800e188 <DMA_Cmd>

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 80137aa:	f246 4058 	movw	r0, #25688	; 0x6458
 80137ae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80137b2:	f7fa fb6f 	bl	800de94 <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 80137b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80137ba:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 80137bc:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 80137c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80137c4:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80137ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80137ce:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 80137d0:	f04f 0300 	mov.w	r3, #0
 80137d4:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80137d6:	f04f 0300 	mov.w	r3, #0
 80137da:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80137dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137e0:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 80137e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137e6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 80137e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80137ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80137ee:	f04f 0300 	mov.w	r3, #0
 80137f2:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80137f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80137f8:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80137fa:	f04f 0304 	mov.w	r3, #4
 80137fe:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8013800:	f04f 0303 	mov.w	r3, #3
 8013804:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8013806:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801380a:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 801380c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013810:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8013812:	f107 030c 	add.w	r3, r7, #12
 8013816:	f246 4058 	movw	r0, #25688	; 0x6458
 801381a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801381e:	4619      	mov	r1, r3
 8013820:	f7fa fc5a 	bl	800e0d8 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8013824:	f246 4058 	movw	r0, #25688	; 0x6458
 8013828:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801382c:	f04f 0110 	mov.w	r1, #16
 8013830:	f04f 0201 	mov.w	r2, #1
 8013834:	f7fa fd70 	bl	800e318 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8013838:	f246 4058 	movw	r0, #25688	; 0x6458
 801383c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013840:	f04f 0120 	mov.w	r1, #32
 8013844:	f7fa fcbc 	bl	800e1c0 <DMA_FlowControllerConfig>

  /* DMA2 Stream3  or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8013848:	f246 4058 	movw	r0, #25688	; 0x6458
 801384c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013850:	f04f 0101 	mov.w	r1, #1
 8013854:	f7fa fc98 	bl	800e188 <DMA_Cmd>

}
 8013858:	f107 0748 	add.w	r7, r7, #72	; 0x48
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b092      	sub	sp, #72	; 0x48
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 801386a:	f246 4058 	movw	r0, #25688	; 0x6458
 801386e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013872:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8013876:	f7fa fd1d 	bl	800e2b4 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 801387a:	f246 4058 	movw	r0, #25688	; 0x6458
 801387e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013882:	f04f 0100 	mov.w	r1, #0
 8013886:	f7fa fc7f 	bl	800e188 <DMA_Cmd>

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 801388a:	f246 4058 	movw	r0, #25688	; 0x6458
 801388e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013892:	f7fa faff 	bl	800de94 <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8013896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801389a:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 801389c:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 80138a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80138a4:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80138aa:	f04f 0300 	mov.w	r3, #0
 80138ae:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 80138b0:	f04f 0300 	mov.w	r3, #0
 80138b4:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80138b6:	f04f 0300 	mov.w	r3, #0
 80138ba:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80138bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138c0:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 80138c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138c6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 80138c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80138cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80138ce:	f04f 0300 	mov.w	r3, #0
 80138d2:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80138d4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80138d8:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80138da:	f04f 0304 	mov.w	r3, #4
 80138de:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80138e0:	f04f 0303 	mov.w	r3, #3
 80138e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 80138e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80138ea:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 80138ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80138f0:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 80138f2:	f107 030c 	add.w	r3, r7, #12
 80138f6:	f246 4058 	movw	r0, #25688	; 0x6458
 80138fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80138fe:	4619      	mov	r1, r3
 8013900:	f7fa fbea 	bl	800e0d8 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8013904:	f246 4058 	movw	r0, #25688	; 0x6458
 8013908:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801390c:	f04f 0110 	mov.w	r1, #16
 8013910:	f04f 0201 	mov.w	r2, #1
 8013914:	f7fa fd00 	bl	800e318 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8013918:	f246 4058 	movw	r0, #25688	; 0x6458
 801391c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013920:	f04f 0120 	mov.w	r1, #32
 8013924:	f7fa fc4c 	bl	800e1c0 <DMA_FlowControllerConfig>

  /* DMA2 Stream3 or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8013928:	f246 4058 	movw	r0, #25688	; 0x6458
 801392c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013930:	f04f 0101 	mov.w	r1, #1
 8013934:	f7fa fc28 	bl	800e188 <DMA_Cmd>
}
 8013938:	f107 0748 	add.w	r7, r7, #72	; 0x48
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <SD_Init>:
  *         transfer).
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_Init(void)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
  __IO SD_Error errorstatus = SD_OK;
 8013946:	f04f 0300 	mov.w	r3, #0
 801394a:	71fb      	strb	r3, [r7, #7]
  
  /* SDIO Peripheral Low Level Init */
  SD_LowLevel_Init();
 801394c:	f7ff fe82 	bl	8013654 <SD_LowLevel_Init>

  SDIO_DeInit();
 8013950:	f7fa ffd2 	bl	800e8f8 <SDIO_DeInit>

  errorstatus = SD_PowerON();
 8013954:	f000 f8ce 	bl	8013af4 <SD_PowerON>
 8013958:	4603      	mov	r3, r0
 801395a:	71fb      	strb	r3, [r7, #7]

  if (errorstatus != SD_OK)
 801395c:	79fb      	ldrb	r3, [r7, #7]
 801395e:	b2db      	uxtb	r3, r3
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <SD_Init+0x2a>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
 8013964:	79fb      	ldrb	r3, [r7, #7]
 8013966:	b2db      	uxtb	r3, r3
 8013968:	e05f      	b.n	8013a2a <SD_Init+0xea>
  }

  errorstatus = SD_InitializeCards();
 801396a:	f000 fa89 	bl	8013e80 <SD_InitializeCards>
 801396e:	4603      	mov	r3, r0
 8013970:	71fb      	strb	r3, [r7, #7]

  if (errorstatus != SD_OK)
 8013972:	79fb      	ldrb	r3, [r7, #7]
 8013974:	b2db      	uxtb	r3, r3
 8013976:	2b00      	cmp	r3, #0
 8013978:	d002      	beq.n	8013980 <SD_Init+0x40>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
 801397a:	79fb      	ldrb	r3, [r7, #7]
 801397c:	b2db      	uxtb	r3, r3
 801397e:	e054      	b.n	8013a2a <SD_Init+0xea>
  }

  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_TRANSFER_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8013980:	f641 0358 	movw	r3, #6232	; 0x1858
 8013984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013988:	f04f 0276 	mov.w	r2, #118	; 0x76
 801398c:	751a      	strb	r2, [r3, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 801398e:	f641 0358 	movw	r3, #6232	; 0x1858
 8013992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013996:	f04f 0200 	mov.w	r2, #0
 801399a:	601a      	str	r2, [r3, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 801399c:	f641 0358 	movw	r3, #6232	; 0x1858
 80139a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139a4:	f04f 0200 	mov.w	r2, #0
 80139a8:	605a      	str	r2, [r3, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80139aa:	f641 0358 	movw	r3, #6232	; 0x1858
 80139ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139b2:	f04f 0200 	mov.w	r2, #0
 80139b6:	609a      	str	r2, [r3, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 80139b8:	f641 0358 	movw	r3, #6232	; 0x1858
 80139bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139c0:	f04f 0200 	mov.w	r2, #0
 80139c4:	60da      	str	r2, [r3, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 80139c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80139ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139ce:	f04f 0200 	mov.w	r2, #0
 80139d2:	611a      	str	r2, [r3, #16]
  SDIO_Init(&SDIO_InitStructure);
 80139d4:	f641 0058 	movw	r0, #6232	; 0x1858
 80139d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80139dc:	f7fa ff9c 	bl	800e918 <SDIO_Init>

  /*----------------- Read CSD/CID MSD registers ------------------*/
  errorstatus = SD_GetCardInfo(&SDCardInfo);
 80139e0:	f241 70f4 	movw	r0, #6132	; 0x17f4
 80139e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80139e8:	f000 fb84 	bl	80140f4 <SD_GetCardInfo>
 80139ec:	4603      	mov	r3, r0
 80139ee:	71fb      	strb	r3, [r7, #7]

  if (errorstatus == SD_OK)
 80139f0:	79fb      	ldrb	r3, [r7, #7]
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d10c      	bne.n	8013a12 <SD_Init+0xd2>
  {
    /*----------------- Select Card --------------------------------*/
    errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
 80139f8:	f241 73f4 	movw	r3, #6132	; 0x17f4
 80139fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a00:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8013a04:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f000 ff9b 	bl	8014944 <SD_SelectDeselect>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	71fb      	strb	r3, [r7, #7]
  }

  if (errorstatus == SD_OK)
 8013a12:	79fb      	ldrb	r3, [r7, #7]
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d105      	bne.n	8013a26 <SD_Init+0xe6>
  {
    errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_1b);
 8013a1a:	f04f 0000 	mov.w	r0, #0
 8013a1e:	f000 fee3 	bl	80147e8 <SD_EnableWideBusOperation>
 8013a22:	4603      	mov	r3, r0
 8013a24:	71fb      	strb	r3, [r7, #7]
  }  

  return(errorstatus);
 8013a26:	79fb      	ldrb	r3, [r7, #7]
 8013a28:	b2db      	uxtb	r3, r3
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f107 0708 	add.w	r7, r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <SD_GetStatus>:
  *   This value can be: 
  *        - SD_TRANSFER_OK: No data transfer is acting
  *        - SD_TRANSFER_BUSY: Data transfer is acting
  */
SDTransferState SD_GetStatus(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
  SDCardState cardstate =  SD_CARD_TRANSFER;
 8013a3a:	f04f 0304 	mov.w	r3, #4
 8013a3e:	71fb      	strb	r3, [r7, #7]

  cardstate = SD_GetState();
 8013a40:	f000 f816 	bl	8013a70 <SD_GetState>
 8013a44:	4603      	mov	r3, r0
 8013a46:	71fb      	strb	r3, [r7, #7]
  
  if (cardstate == SD_CARD_TRANSFER)
 8013a48:	79fb      	ldrb	r3, [r7, #7]
 8013a4a:	2b04      	cmp	r3, #4
 8013a4c:	d102      	bne.n	8013a54 <SD_GetStatus+0x20>
  {
    return(SD_TRANSFER_OK);
 8013a4e:	f04f 0300 	mov.w	r3, #0
 8013a52:	e007      	b.n	8013a64 <SD_GetStatus+0x30>
  }
  else if(cardstate == SD_CARD_ERROR)
 8013a54:	79fb      	ldrb	r3, [r7, #7]
 8013a56:	2bff      	cmp	r3, #255	; 0xff
 8013a58:	d102      	bne.n	8013a60 <SD_GetStatus+0x2c>
  {
    return (SD_TRANSFER_ERROR);
 8013a5a:	f04f 0302 	mov.w	r3, #2
 8013a5e:	e001      	b.n	8013a64 <SD_GetStatus+0x30>
  }
  else
  {
    return(SD_TRANSFER_BUSY);
 8013a60:	f04f 0301 	mov.w	r3, #1
  }
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	f107 0708 	add.w	r7, r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop

08013a70 <SD_GetState>:
  * @brief  Returns the current card's state.
  * @param  None
  * @retval SDCardState: SD Card Error or SD Card Current State.
  */
SDCardState SD_GetState(void)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
  uint32_t resp1 = 0;
 8013a76:	f04f 0300 	mov.w	r3, #0
 8013a7a:	607b      	str	r3, [r7, #4]
  
  if(SD_Detect()== SD_PRESENT)
 8013a7c:	f000 f81e 	bl	8013abc <SD_Detect>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b01      	cmp	r3, #1
 8013a84:	d112      	bne.n	8013aac <SD_GetState+0x3c>
  {
    if (SD_SendStatus(&resp1) != SD_OK)
 8013a86:	f107 0304 	add.w	r3, r7, #4
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f001 fa6e 	bl	8014f6c <SD_SendStatus>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d002      	beq.n	8013a9c <SD_GetState+0x2c>
    {
      return SD_CARD_ERROR;
 8013a96:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8013a9a:	e009      	b.n	8013ab0 <SD_GetState+0x40>
    }
    else
    {
      return (SDCardState)((resp1 >> 9) & 0x0F);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	f003 030f 	and.w	r3, r3, #15
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	e001      	b.n	8013ab0 <SD_GetState+0x40>
    }
  }
  else
  {
    return SD_CARD_ERROR;
 8013aac:	f04f 03ff 	mov.w	r3, #255	; 0xff
  }
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f107 0708 	add.w	r7, r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop

08013abc <SD_Detect>:
 * @brief  Detect if SD card is correctly plugged in the memory slot.
 * @param  None
 * @retval Return if SD is detected or not
 */
uint8_t SD_Detect(void)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013ac2:	f04f 0301 	mov.w	r3, #1
 8013ac6:	71fb      	strb	r3, [r7, #7]

  /*!< Check GPIO to detect SD */
  if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
 8013ac8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013acc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013ad0:	f04f 0180 	mov.w	r1, #128	; 0x80
 8013ad4:	f7fa fd06 	bl	800e4e4 <GPIO_ReadInputDataBit>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d002      	beq.n	8013ae4 <SD_Detect+0x28>
  {
    status = SD_NOT_PRESENT;
 8013ade:	f04f 0300 	mov.w	r3, #0
 8013ae2:	71fb      	strb	r3, [r7, #7]
  }
  return status;
 8013ae4:	79fb      	ldrb	r3, [r7, #7]
 8013ae6:	b2db      	uxtb	r3, r3
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f107 0708 	add.w	r7, r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop

08013af4 <SD_PowerON>:
  *   clock controls.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_PowerON(void)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
  __IO SD_Error errorstatus = SD_OK;
 8013afa:	f04f 0300 	mov.w	r3, #0
 8013afe:	71fb      	strb	r3, [r7, #7]
  uint32_t response = 0, count = 0, validvoltage = 0;
 8013b00:	f04f 0300 	mov.w	r3, #0
 8013b04:	617b      	str	r3, [r7, #20]
 8013b06:	f04f 0300 	mov.w	r3, #0
 8013b0a:	613b      	str	r3, [r7, #16]
 8013b0c:	f04f 0300 	mov.w	r3, #0
 8013b10:	60fb      	str	r3, [r7, #12]
  uint32_t SDType = SD_STD_CAPACITY;
 8013b12:	f04f 0300 	mov.w	r3, #0
 8013b16:	60bb      	str	r3, [r7, #8]
  /*!< Power ON Sequence -----------------------------------------------------*/
  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  /*!< SDIO_CK for initialization should not exceed 400 KHz */  
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
 8013b18:	f641 0358 	movw	r3, #6232	; 0x1858
 8013b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b20:	f04f 0276 	mov.w	r2, #118	; 0x76
 8013b24:	751a      	strb	r2, [r3, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8013b26:	f641 0358 	movw	r3, #6232	; 0x1858
 8013b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b2e:	f04f 0200 	mov.w	r2, #0
 8013b32:	601a      	str	r2, [r3, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8013b34:	f641 0358 	movw	r3, #6232	; 0x1858
 8013b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b3c:	f04f 0200 	mov.w	r2, #0
 8013b40:	605a      	str	r2, [r3, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8013b42:	f641 0358 	movw	r3, #6232	; 0x1858
 8013b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b4a:	f04f 0200 	mov.w	r2, #0
 8013b4e:	609a      	str	r2, [r3, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8013b50:	f641 0358 	movw	r3, #6232	; 0x1858
 8013b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b58:	f04f 0200 	mov.w	r2, #0
 8013b5c:	60da      	str	r2, [r3, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8013b5e:	f641 0358 	movw	r3, #6232	; 0x1858
 8013b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b66:	f04f 0200 	mov.w	r2, #0
 8013b6a:	611a      	str	r2, [r3, #16]
  SDIO_Init(&SDIO_InitStructure);
 8013b6c:	f641 0058 	movw	r0, #6232	; 0x1858
 8013b70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013b74:	f7fa fed0 	bl	800e918 <SDIO_Init>

  /*!< Set Power State to ON */
  SDIO_SetPowerState(SDIO_PowerState_ON);
 8013b78:	f04f 0003 	mov.w	r0, #3
 8013b7c:	f7fa ff10 	bl	800e9a0 <SDIO_SetPowerState>

  /*!< Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);
 8013b80:	f04f 0001 	mov.w	r0, #1
 8013b84:	f7fa fefc 	bl	800e980 <SDIO_ClockCmd>

  /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
  /*!< No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8013b88:	f641 0344 	movw	r3, #6212	; 0x1844
 8013b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b90:	f04f 0200 	mov.w	r2, #0
 8013b94:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
 8013b96:	f641 0344 	movw	r3, #6212	; 0x1844
 8013b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013b9e:	f04f 0200 	mov.w	r2, #0
 8013ba2:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 8013ba4:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bac:	f04f 0200 	mov.w	r2, #0
 8013bb0:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013bb2:	f641 0344 	movw	r3, #6212	; 0x1844
 8013bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bba:	f04f 0200 	mov.w	r2, #0
 8013bbe:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013bc0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013bcc:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013bce:	f641 0044 	movw	r0, #6212	; 0x1844
 8013bd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013bd6:	f7fa ff01 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdError();
 8013bda:	f001 fac1 	bl	8015160 <CmdError>
 8013bde:	4603      	mov	r3, r0
 8013be0:	71fb      	strb	r3, [r7, #7]

  if (errorstatus != SD_OK)
 8013be2:	79fb      	ldrb	r3, [r7, #7]
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d002      	beq.n	8013bf0 <SD_PowerON+0xfc>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
 8013bea:	79fb      	ldrb	r3, [r7, #7]
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	e142      	b.n	8013e76 <SD_PowerON+0x382>
  /*!< Send CMD8 to verify SD card interface operating condition */
  /*!< Argument: - [31:12]: Reserved (shall be set to '0')
               - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
               - [7:0]: Check Pattern (recommended 0xAA) */
  /*!< CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 8013bf0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013bf8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013bfc:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
 8013bfe:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c06:	f04f 0208 	mov.w	r2, #8
 8013c0a:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8013c0c:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c14:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013c18:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013c1a:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c22:	f04f 0200 	mov.w	r2, #0
 8013c26:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013c28:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013c34:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013c36:	f641 0044 	movw	r0, #6212	; 0x1844
 8013c3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013c3e:	f7fa fecd 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp7Error();
 8013c42:	f001 fab7 	bl	80151b4 <CmdResp7Error>
 8013c46:	4603      	mov	r3, r0
 8013c48:	71fb      	strb	r3, [r7, #7]

  if (errorstatus == SD_OK)
 8013c4a:	79fb      	ldrb	r3, [r7, #7]
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d10a      	bne.n	8013c68 <SD_PowerON+0x174>
  {
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
 8013c52:	f640 2330 	movw	r3, #2608	; 0xa30
 8013c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c5a:	f04f 0201 	mov.w	r2, #1
 8013c5e:	601a      	str	r2, [r3, #0]
    SDType = SD_HIGH_CAPACITY;
 8013c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c64:	60bb      	str	r3, [r7, #8]
 8013c66:	e02e      	b.n	8013cc6 <SD_PowerON+0x1d2>
  }
  else
  {
    /*!< CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8013c68:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c70:	f04f 0200 	mov.w	r2, #0
 8013c74:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8013c76:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c7e:	f04f 0237 	mov.w	r2, #55	; 0x37
 8013c82:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8013c84:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c8c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013c90:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013c92:	f641 0344 	movw	r3, #6212	; 0x1844
 8013c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013c9a:	f04f 0200 	mov.w	r2, #0
 8013c9e:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013ca0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013cac:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013cae:	f641 0044 	movw	r0, #6212	; 0x1844
 8013cb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013cb6:	f7fa fe91 	bl	800e9dc <SDIO_SendCommand>
    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8013cba:	f04f 0037 	mov.w	r0, #55	; 0x37
 8013cbe:	f001 fac1 	bl	8015244 <CmdResp1Error>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	71fb      	strb	r3, [r7, #7]
  }
  /*!< CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8013cc6:	f641 0344 	movw	r3, #6212	; 0x1844
 8013cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cce:	f04f 0200 	mov.w	r2, #0
 8013cd2:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8013cd4:	f641 0344 	movw	r3, #6212	; 0x1844
 8013cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cdc:	f04f 0237 	mov.w	r2, #55	; 0x37
 8013ce0:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8013ce2:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cea:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013cee:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013cf0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013cf8:	f04f 0200 	mov.w	r2, #0
 8013cfc:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013cfe:	f641 0344 	movw	r3, #6212	; 0x1844
 8013d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013d0a:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013d0c:	f641 0044 	movw	r0, #6212	; 0x1844
 8013d10:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013d14:	f7fa fe62 	bl	800e9dc <SDIO_SendCommand>
  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8013d18:	f04f 0037 	mov.w	r0, #55	; 0x37
 8013d1c:	f001 fa92 	bl	8015244 <CmdResp1Error>
 8013d20:	4603      	mov	r3, r0
 8013d22:	71fb      	strb	r3, [r7, #7]

  /*!< If errorstatus is Command TimeOut, it is a MMC card */
  /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if (errorstatus == SD_OK)
 8013d24:	79fb      	ldrb	r3, [r7, #7]
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f040 80a2 	bne.w	8013e72 <SD_PowerON+0x37e>
  {
    /*!< SD CARD */
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8013d2e:	e07e      	b.n	8013e2e <SD_PowerON+0x33a>
    {

      /*!< SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8013d30:	f641 0344 	movw	r3, #6212	; 0x1844
 8013d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d38:	f04f 0200 	mov.w	r2, #0
 8013d3c:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8013d3e:	f641 0344 	movw	r3, #6212	; 0x1844
 8013d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d46:	f04f 0237 	mov.w	r2, #55	; 0x37
 8013d4a:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8013d4c:	f641 0344 	movw	r3, #6212	; 0x1844
 8013d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d54:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013d58:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013d5a:	f641 0344 	movw	r3, #6212	; 0x1844
 8013d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d62:	f04f 0200 	mov.w	r2, #0
 8013d66:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013d68:	f641 0344 	movw	r3, #6212	; 0x1844
 8013d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013d74:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013d76:	f641 0044 	movw	r0, #6212	; 0x1844
 8013d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013d7e:	f7fa fe2d 	bl	800e9dc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8013d82:	f04f 0037 	mov.w	r0, #55	; 0x37
 8013d86:	f001 fa5d 	bl	8015244 <CmdResp1Error>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	71fb      	strb	r3, [r7, #7]

      if (errorstatus != SD_OK)
 8013d8e:	79fb      	ldrb	r3, [r7, #7]
 8013d90:	b2db      	uxtb	r3, r3
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d002      	beq.n	8013d9c <SD_PowerON+0x2a8>
      {
        return(errorstatus);
 8013d96:	79fb      	ldrb	r3, [r7, #7]
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	e06c      	b.n	8013e76 <SD_PowerON+0x382>
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013da2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013da6:	f641 0344 	movw	r3, #6212	; 0x1844
 8013daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013dae:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
 8013db0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013db8:	f04f 0229 	mov.w	r2, #41	; 0x29
 8013dbc:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8013dbe:	f641 0344 	movw	r3, #6212	; 0x1844
 8013dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013dc6:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013dca:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013dcc:	f641 0344 	movw	r3, #6212	; 0x1844
 8013dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013dd4:	f04f 0200 	mov.w	r2, #0
 8013dd8:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013dda:	f641 0344 	movw	r3, #6212	; 0x1844
 8013dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013de6:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013de8:	f641 0044 	movw	r0, #6212	; 0x1844
 8013dec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013df0:	f7fa fdf4 	bl	800e9dc <SDIO_SendCommand>

      errorstatus = CmdResp3Error();
 8013df4:	f001 fb18 	bl	8015428 <CmdResp3Error>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	71fb      	strb	r3, [r7, #7]
      if (errorstatus != SD_OK)
 8013dfc:	79fb      	ldrb	r3, [r7, #7]
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d002      	beq.n	8013e0a <SD_PowerON+0x316>
      {
        return(errorstatus);
 8013e04:	79fb      	ldrb	r3, [r7, #7]
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	e035      	b.n	8013e76 <SD_PowerON+0x382>
      }

      response = SDIO_GetResponse(SDIO_RESP1);
 8013e0a:	f04f 0000 	mov.w	r0, #0
 8013e0e:	f7fa fe25 	bl	800ea5c <SDIO_GetResponse>
 8013e12:	4603      	mov	r3, r0
 8013e14:	617b      	str	r3, [r7, #20]
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	bf14      	ite	ne
 8013e20:	2300      	movne	r3, #0
 8013e22:	2301      	moveq	r3, #1
 8013e24:	60fb      	str	r3, [r7, #12]
      count++;
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	f103 0301 	add.w	r3, r3, #1
 8013e2c:	613b      	str	r3, [r7, #16]
     or SD card 1.x */
  if (errorstatus == SD_OK)
  {
    /*!< SD CARD */
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d105      	bne.n	8013e40 <SD_PowerON+0x34c>
 8013e34:	693a      	ldr	r2, [r7, #16]
 8013e36:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	f67f af78 	bls.w	8013d30 <SD_PowerON+0x23c>

      response = SDIO_GetResponse(SDIO_RESP1);
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      count++;
    }
    if (count >= SD_MAX_VOLT_TRIAL)
 8013e40:	693a      	ldr	r2, [r7, #16]
 8013e42:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d905      	bls.n	8013e56 <SD_PowerON+0x362>
    {
      errorstatus = SD_INVALID_VOLTRANGE;
 8013e4a:	f04f 031b 	mov.w	r3, #27
 8013e4e:	71fb      	strb	r3, [r7, #7]
      return(errorstatus);
 8013e50:	79fb      	ldrb	r3, [r7, #7]
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	e00f      	b.n	8013e76 <SD_PowerON+0x382>
    }

    if (response &= SD_HIGH_CAPACITY)
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013e5c:	617b      	str	r3, [r7, #20]
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d006      	beq.n	8013e72 <SD_PowerON+0x37e>
    {
      CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8013e64:	f640 2330 	movw	r3, #2608	; 0xa30
 8013e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e6c:	f04f 0202 	mov.w	r2, #2
 8013e70:	601a      	str	r2, [r3, #0]
    }

  }/*!< else MMC Card */

  return(errorstatus);
 8013e72:	79fb      	ldrb	r3, [r7, #7]
 8013e74:	b2db      	uxtb	r3, r3
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	f107 0718 	add.w	r7, r7, #24
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <SD_InitializeCards>:
  *         into standby state.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_InitializeCards(void)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8013e86:	f04f 0300 	mov.w	r3, #0
 8013e8a:	71fb      	strb	r3, [r7, #7]
  uint16_t rca = 0x01;
 8013e8c:	f04f 0301 	mov.w	r3, #1
 8013e90:	80bb      	strh	r3, [r7, #4]

  if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 8013e92:	f7fa fd95 	bl	800e9c0 <SDIO_GetPowerState>
 8013e96:	4603      	mov	r3, r0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d104      	bne.n	8013ea6 <SD_InitializeCards+0x26>
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
 8013e9c:	f04f 0325 	mov.w	r3, #37	; 0x25
 8013ea0:	71fb      	strb	r3, [r7, #7]
    return(errorstatus);
 8013ea2:	79fb      	ldrb	r3, [r7, #7]
 8013ea4:	e121      	b.n	80140ea <SD_InitializeCards+0x26a>
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8013ea6:	f640 2330 	movw	r3, #2608	; 0xa30
 8013eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	2b04      	cmp	r3, #4
 8013eb2:	d059      	beq.n	8013f68 <SD_InitializeCards+0xe8>
  {
    /*!< Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8013eb4:	f641 0344 	movw	r3, #6212	; 0x1844
 8013eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ebc:	f04f 0200 	mov.w	r2, #0
 8013ec0:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
 8013ec2:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013eca:	f04f 0202 	mov.w	r2, #2
 8013ece:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 8013ed0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ed8:	f04f 02c0 	mov.w	r2, #192	; 0xc0
 8013edc:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013ede:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ee6:	f04f 0200 	mov.w	r2, #0
 8013eea:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013eec:	f641 0344 	movw	r3, #6212	; 0x1844
 8013ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013ef8:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013efa:	f641 0044 	movw	r0, #6212	; 0x1844
 8013efe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013f02:	f7fa fd6b 	bl	800e9dc <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 8013f06:	f001 fabf 	bl	8015488 <CmdResp2Error>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	71fb      	strb	r3, [r7, #7]

    if (SD_OK != errorstatus)
 8013f0e:	79fb      	ldrb	r3, [r7, #7]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d001      	beq.n	8013f18 <SD_InitializeCards+0x98>
    {
      return(errorstatus);
 8013f14:	79fb      	ldrb	r3, [r7, #7]
 8013f16:	e0e8      	b.n	80140ea <SD_InitializeCards+0x26a>
    }

    CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 8013f18:	f04f 0000 	mov.w	r0, #0
 8013f1c:	f7fa fd9e 	bl	800ea5c <SDIO_GetResponse>
 8013f20:	4602      	mov	r2, r0
 8013f22:	f640 2344 	movw	r3, #2628	; 0xa44
 8013f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f2a:	601a      	str	r2, [r3, #0]
    CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 8013f2c:	f04f 0004 	mov.w	r0, #4
 8013f30:	f7fa fd94 	bl	800ea5c <SDIO_GetResponse>
 8013f34:	4602      	mov	r2, r0
 8013f36:	f640 2344 	movw	r3, #2628	; 0xa44
 8013f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f3e:	605a      	str	r2, [r3, #4]
    CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 8013f40:	f04f 0008 	mov.w	r0, #8
 8013f44:	f7fa fd8a 	bl	800ea5c <SDIO_GetResponse>
 8013f48:	4602      	mov	r2, r0
 8013f4a:	f640 2344 	movw	r3, #2628	; 0xa44
 8013f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f52:	609a      	str	r2, [r3, #8]
    CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 8013f54:	f04f 000c 	mov.w	r0, #12
 8013f58:	f7fa fd80 	bl	800ea5c <SDIO_GetResponse>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	f640 2344 	movw	r3, #2628	; 0xa44
 8013f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f66:	60da      	str	r2, [r3, #12]
  }
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
 8013f68:	f640 2330 	movw	r3, #2608	; 0xa30
 8013f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d014      	beq.n	8013fa0 <SD_InitializeCards+0x120>
 8013f76:	f640 2330 	movw	r3, #2608	; 0xa30
 8013f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d00d      	beq.n	8013fa0 <SD_InitializeCards+0x120>
 8013f84:	f640 2330 	movw	r3, #2608	; 0xa30
 8013f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b06      	cmp	r3, #6
 8013f90:	d006      	beq.n	8013fa0 <SD_InitializeCards+0x120>
      ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8013f92:	f640 2330 	movw	r3, #2608	; 0xa30
 8013f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b02      	cmp	r3, #2
 8013f9e:	d136      	bne.n	801400e <SD_InitializeCards+0x18e>
  {
    /*!< Send CMD3 SET_REL_ADDR with argument 0 */
    /*!< SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8013fa0:	f641 0344 	movw	r3, #6212	; 0x1844
 8013fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fa8:	f04f 0200 	mov.w	r2, #0
 8013fac:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
 8013fae:	f641 0344 	movw	r3, #6212	; 0x1844
 8013fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fb6:	f04f 0203 	mov.w	r2, #3
 8013fba:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8013fbc:	f641 0344 	movw	r3, #6212	; 0x1844
 8013fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fc4:	f04f 0240 	mov.w	r2, #64	; 0x40
 8013fc8:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8013fca:	f641 0344 	movw	r3, #6212	; 0x1844
 8013fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fd2:	f04f 0200 	mov.w	r2, #0
 8013fd6:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8013fd8:	f641 0344 	movw	r3, #6212	; 0x1844
 8013fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013fe4:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8013fe6:	f641 0044 	movw	r0, #6212	; 0x1844
 8013fea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013fee:	f7fa fcf5 	bl	800e9dc <SDIO_SendCommand>

    errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
 8013ff2:	f107 0304 	add.w	r3, r7, #4
 8013ff6:	f04f 0003 	mov.w	r0, #3
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	f001 fa84 	bl	8015508 <CmdResp6Error>
 8014000:	4603      	mov	r3, r0
 8014002:	71fb      	strb	r3, [r7, #7]

    if (SD_OK != errorstatus)
 8014004:	79fb      	ldrb	r3, [r7, #7]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d001      	beq.n	801400e <SD_InitializeCards+0x18e>
    {
      return(errorstatus);
 801400a:	79fb      	ldrb	r3, [r7, #7]
 801400c:	e06d      	b.n	80140ea <SD_InitializeCards+0x26a>
    }
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 801400e:	f640 2330 	movw	r3, #2608	; 0xa30
 8014012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	2b04      	cmp	r3, #4
 801401a:	d062      	beq.n	80140e2 <SD_InitializeCards+0x262>
  {
    RCA = rca;
 801401c:	88bb      	ldrh	r3, [r7, #4]
 801401e:	461a      	mov	r2, r3
 8014020:	f640 2354 	movw	r3, #2644	; 0xa54
 8014024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014028:	601a      	str	r2, [r3, #0]

    /*!< Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 801402a:	88bb      	ldrh	r3, [r7, #4]
 801402c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014030:	461a      	mov	r2, r3
 8014032:	f641 0344 	movw	r3, #6212	; 0x1844
 8014036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801403a:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
 801403c:	f641 0344 	movw	r3, #6212	; 0x1844
 8014040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014044:	f04f 0209 	mov.w	r2, #9
 8014048:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 801404a:	f641 0344 	movw	r3, #6212	; 0x1844
 801404e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014052:	f04f 02c0 	mov.w	r2, #192	; 0xc0
 8014056:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014058:	f641 0344 	movw	r3, #6212	; 0x1844
 801405c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014060:	f04f 0200 	mov.w	r2, #0
 8014064:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014066:	f641 0344 	movw	r3, #6212	; 0x1844
 801406a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801406e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014072:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014074:	f641 0044 	movw	r0, #6212	; 0x1844
 8014078:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801407c:	f7fa fcae 	bl	800e9dc <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 8014080:	f001 fa02 	bl	8015488 <CmdResp2Error>
 8014084:	4603      	mov	r3, r0
 8014086:	71fb      	strb	r3, [r7, #7]

    if (SD_OK != errorstatus)
 8014088:	79fb      	ldrb	r3, [r7, #7]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d001      	beq.n	8014092 <SD_InitializeCards+0x212>
    {
      return(errorstatus);
 801408e:	79fb      	ldrb	r3, [r7, #7]
 8014090:	e02b      	b.n	80140ea <SD_InitializeCards+0x26a>
    }

    CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 8014092:	f04f 0000 	mov.w	r0, #0
 8014096:	f7fa fce1 	bl	800ea5c <SDIO_GetResponse>
 801409a:	4602      	mov	r2, r0
 801409c:	f640 2334 	movw	r3, #2612	; 0xa34
 80140a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140a4:	601a      	str	r2, [r3, #0]
    CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 80140a6:	f04f 0004 	mov.w	r0, #4
 80140aa:	f7fa fcd7 	bl	800ea5c <SDIO_GetResponse>
 80140ae:	4602      	mov	r2, r0
 80140b0:	f640 2334 	movw	r3, #2612	; 0xa34
 80140b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140b8:	605a      	str	r2, [r3, #4]
    CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 80140ba:	f04f 0008 	mov.w	r0, #8
 80140be:	f7fa fccd 	bl	800ea5c <SDIO_GetResponse>
 80140c2:	4602      	mov	r2, r0
 80140c4:	f640 2334 	movw	r3, #2612	; 0xa34
 80140c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140cc:	609a      	str	r2, [r3, #8]
    CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 80140ce:	f04f 000c 	mov.w	r0, #12
 80140d2:	f7fa fcc3 	bl	800ea5c <SDIO_GetResponse>
 80140d6:	4602      	mov	r2, r0
 80140d8:	f640 2334 	movw	r3, #2612	; 0xa34
 80140dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80140e0:	60da      	str	r2, [r3, #12]
  }

  errorstatus = SD_OK; /*!< All cards get intialized */
 80140e2:	f04f 0300 	mov.w	r3, #0
 80140e6:	71fb      	strb	r3, [r7, #7]

  return(errorstatus);
 80140e8:	79fb      	ldrb	r3, [r7, #7]
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	f107 0708 	add.w	r7, r7, #8
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <SD_GetCardInfo>:
  * @param  cardinfo: pointer to a SD_CardInfo structure that contains all SD card 
  *         information.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
 80140f4:	b480      	push	{r7}
 80140f6:	b085      	sub	sp, #20
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 80140fc:	f04f 0300 	mov.w	r3, #0
 8014100:	73bb      	strb	r3, [r7, #14]
  uint8_t tmp = 0;
 8014102:	f04f 0300 	mov.w	r3, #0
 8014106:	73fb      	strb	r3, [r7, #15]

  cardinfo->CardType = (uint8_t)CardType;
 8014108:	f640 2330 	movw	r3, #2608	; 0xa30
 801410c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	b2da      	uxtb	r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  cardinfo->RCA = (uint16_t)RCA;
 801411a:	f640 2354 	movw	r3, #2644	; 0xa54
 801411e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	b29a      	uxth	r2, r3
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /*!< Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 801412c:	f640 2334 	movw	r3, #2612	; 0xa34
 8014130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801413a:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 801413c:	7bfb      	ldrb	r3, [r7, #15]
 801413e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8014142:	b2da      	uxtb	r2, r3
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	701a      	strb	r2, [r3, #0]
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 8014148:	7bfb      	ldrb	r3, [r7, #15]
 801414a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 801414e:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8014152:	b2da      	uxtb	r2, r3
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	705a      	strb	r2, [r3, #1]
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8014158:	7bfb      	ldrb	r3, [r7, #15]
 801415a:	f003 0303 	and.w	r3, r3, #3
 801415e:	b2da      	uxtb	r2, r3
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	709a      	strb	r2, [r3, #2]

  /*!< Byte 1 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 8014164:	f640 2334 	movw	r3, #2612	; 0xa34
 8014168:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014172:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8014176:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.TAAC = tmp;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	7bfa      	ldrb	r2, [r7, #15]
 801417c:	70da      	strb	r2, [r3, #3]

  /*!< Byte 2 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 801417e:	f640 2334 	movw	r3, #2612	; 0xa34
 8014182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801418c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8014190:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.NSAC = tmp;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	7bfa      	ldrb	r2, [r7, #15]
 8014196:	711a      	strb	r2, [r3, #4]

  /*!< Byte 3 */
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 8014198:	f640 2334 	movw	r3, #2612	; 0xa34
 801419c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.MaxBusClkFrec = tmp;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	7bfa      	ldrb	r2, [r7, #15]
 80141a8:	715a      	strb	r2, [r3, #5]

  /*!< Byte 4 */
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 80141aa:	f640 2334 	movw	r3, #2612	; 0xa34
 80141ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80141b8:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CardComdClasses = tmp << 4;
 80141ba:	7bfb      	ldrb	r3, [r7, #15]
 80141bc:	b29b      	uxth	r3, r3
 80141be:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	80da      	strh	r2, [r3, #6]

  /*!< Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
 80141c8:	f640 2334 	movw	r3, #2612	; 0xa34
 80141cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80141d6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80141da:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	88db      	ldrh	r3, [r3, #6]
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	7bfb      	ldrb	r3, [r7, #15]
 80141e4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	4313      	orrs	r3, r2
 80141ec:	b29a      	uxth	r2, r3
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	80da      	strh	r2, [r3, #6]
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 80141f2:	7bfb      	ldrb	r3, [r7, #15]
 80141f4:	f003 030f 	and.w	r3, r3, #15
 80141f8:	b2da      	uxtb	r2, r3
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	721a      	strb	r2, [r3, #8]

  /*!< Byte 6 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 80141fe:	f640 2334 	movw	r3, #2612	; 0xa34
 8014202:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801420c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8014210:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 8014212:	7bfb      	ldrb	r3, [r7, #15]
 8014214:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8014218:	b2da      	uxtb	r2, r3
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	725a      	strb	r2, [r3, #9]
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 801421e:	7bfb      	ldrb	r3, [r7, #15]
 8014220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014224:	ea4f 13a3 	mov.w	r3, r3, asr #6
 8014228:	b2da      	uxtb	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	729a      	strb	r2, [r3, #10]
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 801422e:	7bfb      	ldrb	r3, [r7, #15]
 8014230:	f003 0320 	and.w	r3, r3, #32
 8014234:	ea4f 1363 	mov.w	r3, r3, asr #5
 8014238:	b2da      	uxtb	r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	72da      	strb	r2, [r3, #11]
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 801423e:	7bfb      	ldrb	r3, [r7, #15]
 8014240:	f003 0310 	and.w	r3, r3, #16
 8014244:	ea4f 1323 	mov.w	r3, r3, asr #4
 8014248:	b2da      	uxtb	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	731a      	strb	r2, [r3, #12]
  cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f04f 0200 	mov.w	r2, #0
 8014254:	735a      	strb	r2, [r3, #13]

  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8014256:	f640 2330 	movw	r3, #2608	; 0xa30
 801425a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d007      	beq.n	8014274 <SD_GetCardInfo+0x180>
 8014264:	f640 2330 	movw	r3, #2608	; 0xa30
 8014268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b01      	cmp	r3, #1
 8014270:	f040 8091 	bne.w	8014396 <SD_GetCardInfo+0x2a2>
  {
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8014274:	7bfb      	ldrb	r3, [r7, #15]
 8014276:	f003 0303 	and.w	r3, r3, #3
 801427a:	ea4f 2383 	mov.w	r3, r3, lsl #10
 801427e:	461a      	mov	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	611a      	str	r2, [r3, #16]

    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 8014284:	f640 2334 	movw	r3, #2612	; 0xa34
 8014288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	691b      	ldr	r3, [r3, #16]
 8014294:	461a      	mov	r2, r3
 8014296:	7bfb      	ldrb	r3, [r7, #15]
 8014298:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801429c:	431a      	orrs	r2, r3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	611a      	str	r2, [r3, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 80142a2:	f640 2334 	movw	r3, #2612	; 0xa34
 80142a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80142b0:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	691b      	ldr	r3, [r3, #16]
 80142b6:	461a      	mov	r2, r3
 80142b8:	7bfb      	ldrb	r3, [r7, #15]
 80142ba:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80142be:	b2db      	uxtb	r3, r3
 80142c0:	431a      	orrs	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	611a      	str	r2, [r3, #16]

    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80142c6:	7bfb      	ldrb	r3, [r7, #15]
 80142c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80142cc:	ea4f 03e3 	mov.w	r3, r3, asr #3
 80142d0:	b2da      	uxtb	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	751a      	strb	r2, [r3, #20]
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80142d6:	7bfb      	ldrb	r3, [r7, #15]
 80142d8:	f003 0307 	and.w	r3, r3, #7
 80142dc:	b2da      	uxtb	r2, r3
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	755a      	strb	r2, [r3, #21]

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 80142e2:	f640 2334 	movw	r3, #2612	; 0xa34
 80142e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80142ea:	689b      	ldr	r3, [r3, #8]
 80142ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80142f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80142f4:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80142f6:	7bfb      	ldrb	r3, [r7, #15]
 80142f8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80142fc:	b2da      	uxtb	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	759a      	strb	r2, [r3, #22]
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8014302:	7bfb      	ldrb	r3, [r7, #15]
 8014304:	f003 031c 	and.w	r3, r3, #28
 8014308:	ea4f 03a3 	mov.w	r3, r3, asr #2
 801430c:	b2da      	uxtb	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	75da      	strb	r2, [r3, #23]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 8014312:	7bfb      	ldrb	r3, [r7, #15]
 8014314:	f003 0303 	and.w	r3, r3, #3
 8014318:	b2db      	uxtb	r3, r3
 801431a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801431e:	b2da      	uxtb	r2, r3
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	761a      	strb	r2, [r3, #24]
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8014324:	f640 2334 	movw	r3, #2612	; 0xa34
 8014328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801432c:	689b      	ldr	r3, [r3, #8]
 801432e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014332:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8014336:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	7e1b      	ldrb	r3, [r3, #24]
 801433c:	b2da      	uxtb	r2, r3
 801433e:	7bfb      	ldrb	r3, [r7, #15]
 8014340:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8014344:	b2db      	uxtb	r3, r3
 8014346:	4313      	orrs	r3, r2
 8014348:	b2da      	uxtb	r2, r3
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	761a      	strb	r2, [r3, #24]
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	691b      	ldr	r3, [r3, #16]
 8014352:	f103 0201 	add.w	r2, r3, #1
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	645a      	str	r2, [r3, #68]	; 0x44
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	7e1b      	ldrb	r3, [r3, #24]
 8014362:	b2db      	uxtb	r3, r3
 8014364:	f103 0302 	add.w	r3, r3, #2
 8014368:	fa02 f203 	lsl.w	r2, r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	645a      	str	r2, [r3, #68]	; 0x44
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	7a1b      	ldrb	r3, [r3, #8]
 8014374:	b2db      	uxtb	r3, r3
 8014376:	f04f 0201 	mov.w	r2, #1
 801437a:	fa02 f303 	lsl.w	r3, r2, r3
 801437e:	461a      	mov	r2, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	649a      	str	r2, [r3, #72]	; 0x48
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801438c:	fb02 f203 	mul.w	r2, r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	645a      	str	r2, [r3, #68]	; 0x44
 8014394:	e04c      	b.n	8014430 <SD_GetCardInfo+0x33c>
  }
  else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8014396:	f640 2330 	movw	r3, #2608	; 0xa30
 801439a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2b02      	cmp	r3, #2
 80143a2:	d145      	bne.n	8014430 <SD_GetCardInfo+0x33c>
  {
    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 80143a4:	f640 2334 	movw	r3, #2612	; 0xa34
 80143a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80143b0:	7bfb      	ldrb	r3, [r7, #15]
 80143b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143b6:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80143ba:	461a      	mov	r2, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	611a      	str	r2, [r3, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 80143c0:	f640 2334 	movw	r3, #2612	; 0xa34
 80143c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143c8:	689b      	ldr	r3, [r3, #8]
 80143ca:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80143ce:	73fb      	strb	r3, [r7, #15]

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	691b      	ldr	r3, [r3, #16]
 80143d4:	461a      	mov	r2, r3
 80143d6:	7bfb      	ldrb	r3, [r7, #15]
 80143d8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80143dc:	431a      	orrs	r2, r3
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	611a      	str	r2, [r3, #16]

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 80143e2:	f640 2334 	movw	r3, #2612	; 0xa34
 80143e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80143ea:	689b      	ldr	r3, [r3, #8]
 80143ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80143f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80143f4:	73fb      	strb	r3, [r7, #15]

    cardinfo->SD_csd.DeviceSize |= (tmp);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	461a      	mov	r2, r3
 80143fc:	7bfb      	ldrb	r3, [r7, #15]
 80143fe:	431a      	orrs	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	611a      	str	r2, [r3, #16]

    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8014404:	f640 2334 	movw	r3, #2612	; 0xa34
 8014408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801440c:	689b      	ldr	r3, [r3, #8]
 801440e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014412:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8014416:	73fb      	strb	r3, [r7, #15]
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	691b      	ldr	r3, [r3, #16]
 801441c:	f103 0301 	add.w	r3, r3, #1
 8014420:	ea4f 42c3 	mov.w	r2, r3, lsl #19
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	645a      	str	r2, [r3, #68]	; 0x44
    cardinfo->CardBlockSize = 512;    
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801442e:	649a      	str	r2, [r3, #72]	; 0x48
  }


  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8014430:	7bfb      	ldrb	r3, [r7, #15]
 8014432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014436:	ea4f 13a3 	mov.w	r3, r3, asr #6
 801443a:	b2da      	uxtb	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	765a      	strb	r2, [r3, #25]
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8014440:	7bfb      	ldrb	r3, [r7, #15]
 8014442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014446:	b2db      	uxtb	r3, r3
 8014448:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801444c:	b2da      	uxtb	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	769a      	strb	r2, [r3, #26]

  /*!< Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 8014452:	f640 2334 	movw	r3, #2612	; 0xa34
 8014456:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801445a:	689b      	ldr	r3, [r3, #8]
 801445c:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	7e9b      	ldrb	r3, [r3, #26]
 8014462:	b2da      	uxtb	r2, r3
 8014464:	7bfb      	ldrb	r3, [r7, #15]
 8014466:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 801446a:	b2db      	uxtb	r3, r3
 801446c:	4313      	orrs	r3, r2
 801446e:	b2da      	uxtb	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	769a      	strb	r2, [r3, #26]
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8014474:	7bfb      	ldrb	r3, [r7, #15]
 8014476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801447a:	b2da      	uxtb	r2, r3
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	76da      	strb	r2, [r3, #27]

  /*!< Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 8014480:	f640 2334 	movw	r3, #2612	; 0xa34
 8014484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014488:	68db      	ldr	r3, [r3, #12]
 801448a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801448e:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8014490:	7bfb      	ldrb	r3, [r7, #15]
 8014492:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8014496:	b2da      	uxtb	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	771a      	strb	r2, [r3, #28]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 801449c:	7bfb      	ldrb	r3, [r7, #15]
 801449e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144a2:	ea4f 1363 	mov.w	r3, r3, asr #5
 80144a6:	b2da      	uxtb	r2, r3
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	775a      	strb	r2, [r3, #29]
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 80144ac:	7bfb      	ldrb	r3, [r7, #15]
 80144ae:	f003 031c 	and.w	r3, r3, #28
 80144b2:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80144b6:	b2da      	uxtb	r2, r3
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	779a      	strb	r2, [r3, #30]
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 80144bc:	7bfb      	ldrb	r3, [r7, #15]
 80144be:	f003 0303 	and.w	r3, r3, #3
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80144c8:	b2da      	uxtb	r2, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	77da      	strb	r2, [r3, #31]

  /*!< Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
 80144ce:	f640 2334 	movw	r3, #2612	; 0xa34
 80144d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80144dc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80144e0:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	7fdb      	ldrb	r3, [r3, #31]
 80144e6:	b2da      	uxtb	r2, r3
 80144e8:	7bfb      	ldrb	r3, [r7, #15]
 80144ea:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80144ee:	b2db      	uxtb	r3, r3
 80144f0:	4313      	orrs	r3, r2
 80144f2:	b2da      	uxtb	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	77da      	strb	r2, [r3, #31]
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80144f8:	7bfb      	ldrb	r3, [r7, #15]
 80144fa:	f003 0320 	and.w	r3, r3, #32
 80144fe:	ea4f 1363 	mov.w	r3, r3, asr #5
 8014502:	b2da      	uxtb	r2, r3
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f883 2020 	strb.w	r2, [r3, #32]
  cardinfo->SD_csd.Reserved3 = 0;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f04f 0200 	mov.w	r2, #0
 8014510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8014514:	7bfb      	ldrb	r3, [r7, #15]
 8014516:	f003 0301 	and.w	r3, r3, #1
 801451a:	b2da      	uxtb	r2, r3
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  /*!< Byte 14 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
 8014522:	f640 2334 	movw	r3, #2612	; 0xa34
 8014526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014530:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8014534:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8014536:	7bfb      	ldrb	r3, [r7, #15]
 8014538:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 801453c:	b2da      	uxtb	r2, r3
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 8014544:	7bfb      	ldrb	r3, [r7, #15]
 8014546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801454a:	ea4f 13a3 	mov.w	r3, r3, asr #6
 801454e:	b2da      	uxtb	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 8014556:	7bfb      	ldrb	r3, [r7, #15]
 8014558:	f003 0320 	and.w	r3, r3, #32
 801455c:	ea4f 1363 	mov.w	r3, r3, asr #5
 8014560:	b2da      	uxtb	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 8014568:	7bfb      	ldrb	r3, [r7, #15]
 801456a:	f003 0310 	and.w	r3, r3, #16
 801456e:	ea4f 1323 	mov.w	r3, r3, asr #4
 8014572:	b2da      	uxtb	r2, r3
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 801457a:	7bfb      	ldrb	r3, [r7, #15]
 801457c:	f003 030c 	and.w	r3, r3, #12
 8014580:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8014584:	b2da      	uxtb	r2, r3
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 801458c:	7bfb      	ldrb	r3, [r7, #15]
 801458e:	f003 0303 	and.w	r3, r3, #3
 8014592:	b2da      	uxtb	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /*!< Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
 801459a:	f640 2334 	movw	r3, #2612	; 0xa34
 801459e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 80145a6:	7bfb      	ldrb	r3, [r7, #15]
 80145a8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80145ac:	b2da      	uxtb	r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  cardinfo->SD_csd.Reserved4 = 1;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f04f 0201 	mov.w	r2, #1
 80145ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a


  /*!< Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 80145be:	f640 2344 	movw	r3, #2628	; 0xa44
 80145c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80145cc:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ManufacturerID = tmp;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	7bfa      	ldrb	r2, [r7, #15]
 80145d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /*!< Byte 1 */
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
 80145d6:	f640 2344 	movw	r3, #2628	; 0xa44
 80145da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80145e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80145e8:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 80145ea:	7bfb      	ldrb	r3, [r7, #15]
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /*!< Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
 80145f8:	f640 2344 	movw	r3, #2628	; 0xa44
 80145fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014606:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801460a:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014610:	b29a      	uxth	r2, r3
 8014612:	7bfb      	ldrb	r3, [r7, #15]
 8014614:	b29b      	uxth	r3, r3
 8014616:	4313      	orrs	r3, r2
 8014618:	b29a      	uxth	r2, r3
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /*!< Byte 3 */
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
 801461e:	f640 2344 	movw	r3, #2628	; 0xa44
 8014622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 801462a:	7bfb      	ldrb	r3, [r7, #15]
 801462c:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8014630:	461a      	mov	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 8014636:	f640 2344 	movw	r3, #2628	; 0xa44
 801463a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8014644:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801464a:	461a      	mov	r2, r3
 801464c:	7bfb      	ldrb	r3, [r7, #15]
 801464e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014652:	431a      	orrs	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
 8014658:	f640 2344 	movw	r3, #2628	; 0xa44
 801465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014666:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801466a:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014670:	461a      	mov	r2, r3
 8014672:	7bfb      	ldrb	r3, [r7, #15]
 8014674:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014678:	431a      	orrs	r2, r3
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
 801467e:	f640 2344 	movw	r3, #2628	; 0xa44
 8014682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801468c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8014690:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 |= tmp;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014696:	461a      	mov	r2, r3
 8014698:	7bfb      	ldrb	r3, [r7, #15]
 801469a:	431a      	orrs	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 80146a0:	f640 2344 	movw	r3, #2628	; 0xa44
 80146a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName2 = tmp;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	7bfa      	ldrb	r2, [r7, #15]
 80146b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /*!< Byte 8 */
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 80146b4:	f640 2344 	movw	r3, #2628	; 0xa44
 80146b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146bc:	689b      	ldr	r3, [r3, #8]
 80146be:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80146c2:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdRev = tmp;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	7bfa      	ldrb	r2, [r7, #15]
 80146c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*!< Byte 9 */
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 80146cc:	f640 2344 	movw	r3, #2628	; 0xa44
 80146d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80146da:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80146de:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN = tmp << 24;
 80146e0:	7bfb      	ldrb	r3, [r7, #15]
 80146e2:	ea4f 6303 	mov.w	r3, r3, lsl #24
 80146e6:	461a      	mov	r2, r3
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 10 */
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
 80146ec:	f640 2344 	movw	r3, #2628	; 0xa44
 80146f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80146f4:	689b      	ldr	r3, [r3, #8]
 80146f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80146fa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80146fe:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014704:	461a      	mov	r2, r3
 8014706:	7bfb      	ldrb	r3, [r7, #15]
 8014708:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801470c:	431a      	orrs	r2, r3
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 11 */
  tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
 8014712:	f640 2344 	movw	r3, #2628	; 0xa44
 8014716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014722:	461a      	mov	r2, r3
 8014724:	7bfb      	ldrb	r3, [r7, #15]
 8014726:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801472a:	431a      	orrs	r2, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 8014730:	f640 2344 	movw	r3, #2628	; 0xa44
 8014734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801473e:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN |= tmp;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014744:	461a      	mov	r2, r3
 8014746:	7bfb      	ldrb	r3, [r7, #15]
 8014748:	431a      	orrs	r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
 801474e:	f640 2344 	movw	r3, #2628	; 0xa44
 8014752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801475c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8014760:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014768:	b2da      	uxtb	r2, r3
 801476a:	7bfb      	ldrb	r3, [r7, #15]
 801476c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8014770:	b2db      	uxtb	r3, r3
 8014772:	4313      	orrs	r3, r2
 8014774:	b2da      	uxtb	r2, r3
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 801477c:	7bfb      	ldrb	r3, [r7, #15]
 801477e:	b29b      	uxth	r3, r3
 8014780:	f003 030f 	and.w	r3, r3, #15
 8014784:	b29b      	uxth	r3, r3
 8014786:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801478a:	b29a      	uxth	r2, r3
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*!< Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
 8014790:	f640 2344 	movw	r3, #2628	; 0xa44
 8014794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801479e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80147a2:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ManufactDate |= tmp;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	7bfb      	ldrb	r3, [r7, #15]
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	4313      	orrs	r3, r2
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*!< Byte 15 */
  tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
 80147b6:	f640 2344 	movw	r3, #2628	; 0xa44
 80147ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80147be:	68db      	ldr	r3, [r3, #12]
 80147c0:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 80147c2:	7bfb      	ldrb	r3, [r7, #15]
 80147c4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80147c8:	b2da      	uxtb	r2, r3
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  cardinfo->SD_cid.Reserved2 = 1;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f04f 0201 	mov.w	r2, #1
 80147d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  
  return(errorstatus);
 80147da:	7bbb      	ldrb	r3, [r7, #14]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	f107 0714 	add.w	r7, r7, #20
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bc80      	pop	{r7}
 80147e6:	4770      	bx	lr

080147e8 <SD_EnableWideBusOperation>:
  *     @arg SDIO_BusWide_4b: 4-bit data transfer
  *     @arg SDIO_BusWide_1b: 1-bit data transfer
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b084      	sub	sp, #16
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 80147f0:	f04f 0300 	mov.w	r3, #0
 80147f4:	73fb      	strb	r3, [r7, #15]

  /*!< MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
 80147f6:	f640 2330 	movw	r3, #2608	; 0xa30
 80147fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b03      	cmp	r3, #3
 8014802:	d104      	bne.n	801480e <SD_EnableWideBusOperation+0x26>
  {
    errorstatus = SD_UNSUPPORTED_FEATURE;
 8014804:	f04f 0327 	mov.w	r3, #39	; 0x27
 8014808:	73fb      	strb	r3, [r7, #15]
    return(errorstatus);
 801480a:	7bfb      	ldrb	r3, [r7, #15]
 801480c:	e095      	b.n	801493a <SD_EnableWideBusOperation+0x152>
  }
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 801480e:	f640 2330 	movw	r3, #2608	; 0xa30
 8014812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00d      	beq.n	8014838 <SD_EnableWideBusOperation+0x50>
 801481c:	f640 2330 	movw	r3, #2608	; 0xa30
 8014820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2b01      	cmp	r3, #1
 8014828:	d006      	beq.n	8014838 <SD_EnableWideBusOperation+0x50>
 801482a:	f640 2330 	movw	r3, #2608	; 0xa30
 801482e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b02      	cmp	r3, #2
 8014836:	d17f      	bne.n	8014938 <SD_EnableWideBusOperation+0x150>
  {
    if (SDIO_BusWide_8b == WideMode)
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801483e:	d104      	bne.n	801484a <SD_EnableWideBusOperation+0x62>
    {
      errorstatus = SD_UNSUPPORTED_FEATURE;
 8014840:	f04f 0327 	mov.w	r3, #39	; 0x27
 8014844:	73fb      	strb	r3, [r7, #15]
      return(errorstatus);
 8014846:	7bfb      	ldrb	r3, [r7, #15]
 8014848:	e077      	b.n	801493a <SD_EnableWideBusOperation+0x152>
    }
    else if (SDIO_BusWide_4b == WideMode)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014850:	d139      	bne.n	80148c6 <SD_EnableWideBusOperation+0xde>
    {
      errorstatus = SDEnWideBus(ENABLE);
 8014852:	f04f 0001 	mov.w	r0, #1
 8014856:	f000 fecf 	bl	80155f8 <SDEnWideBus>
 801485a:	4603      	mov	r3, r0
 801485c:	73fb      	strb	r3, [r7, #15]

      if (SD_OK == errorstatus)
 801485e:	7bfb      	ldrb	r3, [r7, #15]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d169      	bne.n	8014938 <SD_EnableWideBusOperation+0x150>
      {
        /*!< Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 8014864:	f641 0358 	movw	r3, #6232	; 0x1858
 8014868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801486c:	f04f 0276 	mov.w	r2, #118	; 0x76
 8014870:	751a      	strb	r2, [r3, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8014872:	f641 0358 	movw	r3, #6232	; 0x1858
 8014876:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801487a:	f04f 0200 	mov.w	r2, #0
 801487e:	601a      	str	r2, [r3, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8014880:	f641 0358 	movw	r3, #6232	; 0x1858
 8014884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014888:	f04f 0200 	mov.w	r2, #0
 801488c:	605a      	str	r2, [r3, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 801488e:	f641 0358 	movw	r3, #6232	; 0x1858
 8014892:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014896:	f04f 0200 	mov.w	r2, #0
 801489a:	609a      	str	r2, [r3, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 801489c:	f641 0358 	movw	r3, #6232	; 0x1858
 80148a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148a8:	60da      	str	r2, [r3, #12]
        SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 80148aa:	f641 0358 	movw	r3, #6232	; 0x1858
 80148ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148b2:	f04f 0200 	mov.w	r2, #0
 80148b6:	611a      	str	r2, [r3, #16]
        SDIO_Init(&SDIO_InitStructure);
 80148b8:	f641 0058 	movw	r0, #6232	; 0x1858
 80148bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80148c0:	f7fa f82a 	bl	800e918 <SDIO_Init>
 80148c4:	e038      	b.n	8014938 <SD_EnableWideBusOperation+0x150>
      }
    }
    else
    {
      errorstatus = SDEnWideBus(DISABLE);
 80148c6:	f04f 0000 	mov.w	r0, #0
 80148ca:	f000 fe95 	bl	80155f8 <SDEnWideBus>
 80148ce:	4603      	mov	r3, r0
 80148d0:	73fb      	strb	r3, [r7, #15]

      if (SD_OK == errorstatus)
 80148d2:	7bfb      	ldrb	r3, [r7, #15]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d12f      	bne.n	8014938 <SD_EnableWideBusOperation+0x150>
      {
        /*!< Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 80148d8:	f641 0358 	movw	r3, #6232	; 0x1858
 80148dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148e0:	f04f 0276 	mov.w	r2, #118	; 0x76
 80148e4:	751a      	strb	r2, [r3, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 80148e6:	f641 0358 	movw	r3, #6232	; 0x1858
 80148ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148ee:	f04f 0200 	mov.w	r2, #0
 80148f2:	601a      	str	r2, [r3, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 80148f4:	f641 0358 	movw	r3, #6232	; 0x1858
 80148f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80148fc:	f04f 0200 	mov.w	r2, #0
 8014900:	605a      	str	r2, [r3, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8014902:	f641 0358 	movw	r3, #6232	; 0x1858
 8014906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801490a:	f04f 0200 	mov.w	r2, #0
 801490e:	609a      	str	r2, [r3, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8014910:	f641 0358 	movw	r3, #6232	; 0x1858
 8014914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014918:	f04f 0200 	mov.w	r2, #0
 801491c:	60da      	str	r2, [r3, #12]
        SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 801491e:	f641 0358 	movw	r3, #6232	; 0x1858
 8014922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014926:	f04f 0200 	mov.w	r2, #0
 801492a:	611a      	str	r2, [r3, #16]
        SDIO_Init(&SDIO_InitStructure);
 801492c:	f641 0058 	movw	r0, #6232	; 0x1858
 8014930:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014934:	f7f9 fff0 	bl	800e918 <SDIO_Init>
      }
    }
  }

  return(errorstatus);
 8014938:	7bfb      	ldrb	r3, [r7, #15]
}
 801493a:	4618      	mov	r0, r3
 801493c:	f107 0710 	add.w	r7, r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}

08014944 <SD_SelectDeselect>:
  * @brief  Selects od Deselects the corresponding card.
  * @param  addr: Address of the Card to be selected.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_SelectDeselect(uint32_t addr)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 801494c:	f04f 0300 	mov.w	r3, #0
 8014950:	73fb      	strb	r3, [r7, #15]

  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
 8014952:	f641 0344 	movw	r3, #6212	; 0x1844
 8014956:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
 801495e:	f641 0344 	movw	r3, #6212	; 0x1844
 8014962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014966:	f04f 0207 	mov.w	r2, #7
 801496a:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 801496c:	f641 0344 	movw	r3, #6212	; 0x1844
 8014970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014974:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014978:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 801497a:	f641 0344 	movw	r3, #6212	; 0x1844
 801497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014982:	f04f 0200 	mov.w	r2, #0
 8014986:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014988:	f641 0344 	movw	r3, #6212	; 0x1844
 801498c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014994:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014996:	f641 0044 	movw	r0, #6212	; 0x1844
 801499a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801499e:	f7fa f81d 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
 80149a2:	f04f 0007 	mov.w	r0, #7
 80149a6:	f000 fc4d 	bl	8015244 <CmdResp1Error>
 80149aa:	4603      	mov	r3, r0
 80149ac:	73fb      	strb	r3, [r7, #15]

  return(errorstatus);
 80149ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	f107 0710 	add.w	r7, r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop

080149bc <SD_ReadBlock>:
  * @param  ReadAddr: Address from where data are to be read.  
  * @param  BlockSize: the SD card Data block size. The Block size should be 512.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_ReadBlock(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b086      	sub	sp, #24
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	4613      	mov	r3, r2
 80149c8:	80fb      	strh	r3, [r7, #6]
  SD_Error errorstatus = SD_OK;
 80149ca:	f04f 0300 	mov.w	r3, #0
 80149ce:	75fb      	strb	r3, [r7, #23]
#if defined (SD_POLLING_MODE) 
  uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
#endif

  TransferError = SD_OK;
 80149d0:	f640 235c 	movw	r3, #2652	; 0xa5c
 80149d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149d8:	f04f 0200 	mov.w	r2, #0
 80149dc:	701a      	strb	r2, [r3, #0]
  TransferEnd = 0;
 80149de:	f640 2360 	movw	r3, #2656	; 0xa60
 80149e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149e6:	f04f 0200 	mov.w	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
  StopCondition = 0;
 80149ec:	f640 2358 	movw	r3, #2648	; 0xa58
 80149f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80149f4:	f04f 0200 	mov.w	r2, #0
 80149f8:	601a      	str	r2, [r3, #0]
  
  SDIO->DCTRL = 0x0;
 80149fa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80149fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8014a02:	f04f 0200 	mov.w	r2, #0
 8014a06:	62da      	str	r2, [r3, #44]	; 0x2c

  
  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8014a08:	f640 2330 	movw	r3, #2608	; 0xa30
 8014a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b02      	cmp	r3, #2
 8014a14:	d106      	bne.n	8014a24 <SD_ReadBlock+0x68>
  {
    BlockSize = 512;
 8014a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a1a:	80fb      	strh	r3, [r7, #6]
    ReadAddr /= 512;
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8014a22:	60bb      	str	r3, [r7, #8]
  }

  /* Set Block Size for Card */ 
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8014a24:	88fa      	ldrh	r2, [r7, #6]
 8014a26:	f641 0344 	movw	r3, #6212	; 0x1844
 8014a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a2e:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8014a30:	f641 0344 	movw	r3, #6212	; 0x1844
 8014a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a38:	f04f 0210 	mov.w	r2, #16
 8014a3c:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8014a3e:	f641 0344 	movw	r3, #6212	; 0x1844
 8014a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a46:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014a4a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014a4c:	f641 0344 	movw	r3, #6212	; 0x1844
 8014a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a54:	f04f 0200 	mov.w	r2, #0
 8014a58:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014a5a:	f641 0344 	movw	r3, #6212	; 0x1844
 8014a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014a66:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014a68:	f641 0044 	movw	r0, #6212	; 0x1844
 8014a6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014a70:	f7f9 ffb4 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 8014a74:	f04f 0010 	mov.w	r0, #16
 8014a78:	f000 fbe4 	bl	8015244 <CmdResp1Error>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	75fb      	strb	r3, [r7, #23]

  if (SD_OK != errorstatus)
 8014a80:	7dfb      	ldrb	r3, [r7, #23]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d001      	beq.n	8014a8a <SD_ReadBlock+0xce>
  {
    return(errorstatus);
 8014a86:	7dfb      	ldrb	r3, [r7, #23]
 8014a88:	e071      	b.n	8014b6e <SD_ReadBlock+0x1b2>
  }
  
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8014a8a:	f641 0370 	movw	r3, #6256	; 0x1870
 8014a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014a92:	f04f 32ff 	mov.w	r2, #4294967295
 8014a96:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 8014a98:	88fa      	ldrh	r2, [r7, #6]
 8014a9a:	f641 0370 	movw	r3, #6256	; 0x1870
 8014a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014aa2:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8014aa4:	f641 0370 	movw	r3, #6256	; 0x1870
 8014aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014aac:	f04f 0290 	mov.w	r2, #144	; 0x90
 8014ab0:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8014ab2:	f641 0370 	movw	r3, #6256	; 0x1870
 8014ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014aba:	f04f 0202 	mov.w	r2, #2
 8014abe:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8014ac0:	f641 0370 	movw	r3, #6256	; 0x1870
 8014ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ac8:	f04f 0200 	mov.w	r2, #0
 8014acc:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8014ace:	f641 0370 	movw	r3, #6256	; 0x1870
 8014ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ad6:	f04f 0201 	mov.w	r2, #1
 8014ada:	615a      	str	r2, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8014adc:	f641 0070 	movw	r0, #6256	; 0x1870
 8014ae0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014ae4:	f7f9 ffd0 	bl	800ea88 <SDIO_DataConfig>

  /*!< Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
 8014ae8:	f641 0344 	movw	r3, #6212	; 0x1844
 8014aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8014af4:	f641 0344 	movw	r3, #6212	; 0x1844
 8014af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014afc:	f04f 0211 	mov.w	r2, #17
 8014b00:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8014b02:	f641 0344 	movw	r3, #6212	; 0x1844
 8014b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014b0a:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014b0e:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014b10:	f641 0344 	movw	r3, #6212	; 0x1844
 8014b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014b18:	f04f 0200 	mov.w	r2, #0
 8014b1c:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014b1e:	f641 0344 	movw	r3, #6212	; 0x1844
 8014b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014b2a:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014b2c:	f641 0044 	movw	r0, #6212	; 0x1844
 8014b30:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014b34:	f7f9 ff52 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
 8014b38:	f04f 0011 	mov.w	r0, #17
 8014b3c:	f000 fb82 	bl	8015244 <CmdResp1Error>
 8014b40:	4603      	mov	r3, r0
 8014b42:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 8014b44:	7dfb      	ldrb	r3, [r7, #23]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d001      	beq.n	8014b4e <SD_ReadBlock+0x192>
  {
    return(errorstatus);
 8014b4a:	7dfb      	ldrb	r3, [r7, #23]
 8014b4c:	e00f      	b.n	8014b6e <SD_ReadBlock+0x1b2>
  
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);

#elif defined (SD_DMA_MODE)
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 8014b4e:	f240 302a 	movw	r0, #810	; 0x32a
 8014b52:	f04f 0101 	mov.w	r1, #1
 8014b56:	f7f9 ffeb 	bl	800eb30 <SDIO_ITConfig>
    SDIO_DMACmd(ENABLE);
 8014b5a:	f04f 0001 	mov.w	r0, #1
 8014b5e:	f7f9 ffd7 	bl	800eb10 <SDIO_DMACmd>
    SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, BlockSize);
 8014b62:	88fb      	ldrh	r3, [r7, #6]
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	4619      	mov	r1, r3
 8014b68:	f7fe fe7a 	bl	8013860 <SD_LowLevel_DMA_RxConfig>
#endif

  return(errorstatus);
 8014b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f107 0718 	add.w	r7, r7, #24
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <SD_WaitReadOperation>:
  *         the DMA controller.
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitReadOperation(void)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b082      	sub	sp, #8
 8014b7c:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8014b7e:	f04f 0300 	mov.w	r3, #0
 8014b82:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
 8014b84:	f04f 33ff 	mov.w	r3, #4294967295
 8014b88:	603b      	str	r3, [r7, #0]
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8014b8a:	e003      	b.n	8014b94 <SD_WaitReadOperation+0x1c>
  {
    timeout--;
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b92:	603b      	str	r3, [r7, #0]
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8014b94:	f640 2364 	movw	r3, #2660	; 0xa64
 8014b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d111      	bne.n	8014bc6 <SD_WaitReadOperation+0x4e>
 8014ba2:	f640 2360 	movw	r3, #2656	; 0xa60
 8014ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d10a      	bne.n	8014bc6 <SD_WaitReadOperation+0x4e>
 8014bb0:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d102      	bne.n	8014bc6 <SD_WaitReadOperation+0x4e>
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d1e2      	bne.n	8014b8c <SD_WaitReadOperation+0x14>
  {
    timeout--;
  }
  
  DMAEndOfTransfer = 0x00;
 8014bc6:	f640 2364 	movw	r3, #2660	; 0xa64
 8014bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014bce:	f04f 0200 	mov.w	r2, #0
 8014bd2:	601a      	str	r2, [r3, #0]

  timeout = SD_DATATIMEOUT;
 8014bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd8:	603b      	str	r3, [r7, #0]
  
  while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
 8014bda:	e003      	b.n	8014be4 <SD_WaitReadOperation+0x6c>
  {
    timeout--;  
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	f103 33ff 	add.w	r3, r3, #4294967295
 8014be2:	603b      	str	r3, [r7, #0]
  
  DMAEndOfTransfer = 0x00;

  timeout = SD_DATATIMEOUT;
  
  while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
 8014be4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8014be8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8014bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d002      	beq.n	8014bfc <SD_WaitReadOperation+0x84>
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1ef      	bne.n	8014bdc <SD_WaitReadOperation+0x64>
  {
    timeout--;  
  }

  if (StopCondition == 1)
 8014bfc:	f640 2358 	movw	r3, #2648	; 0xa58
 8014c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d103      	bne.n	8014c12 <SD_WaitReadOperation+0x9a>
  {
    errorstatus = SD_StopTransfer();
 8014c0a:	f000 f973 	bl	8014ef4 <SD_StopTransfer>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	71fb      	strb	r3, [r7, #7]
  }
  
  if ((timeout == 0) && (errorstatus == SD_OK))
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d105      	bne.n	8014c24 <SD_WaitReadOperation+0xac>
 8014c18:	79fb      	ldrb	r3, [r7, #7]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d102      	bne.n	8014c24 <SD_WaitReadOperation+0xac>
  {
    errorstatus = SD_DATA_TIMEOUT;
 8014c1e:	f04f 0304 	mov.w	r3, #4
 8014c22:	71fb      	strb	r3, [r7, #7]
  }
  
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8014c24:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8014c28:	f7f9 ffce 	bl	800ebc8 <SDIO_ClearFlag>

  if (TransferError != SD_OK)
 8014c2c:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	b2db      	uxtb	r3, r3
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d006      	beq.n	8014c4a <SD_WaitReadOperation+0xd2>
  {
    return(TransferError);
 8014c3c:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	e000      	b.n	8014c4c <SD_WaitReadOperation+0xd4>
  }
  else
  {
    return(errorstatus);  
 8014c4a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f107 0708 	add.w	r7, r7, #8
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop

08014c58 <SD_WriteBlock>:
  * @param  WriteAddr: Address from where data are to be read.   
  * @param  BlockSize: the SD card Data block size. The Block size should be 512.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WriteBlock(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	4613      	mov	r3, r2
 8014c64:	80fb      	strh	r3, [r7, #6]
  SD_Error errorstatus = SD_OK;
 8014c66:	f04f 0300 	mov.w	r3, #0
 8014c6a:	75fb      	strb	r3, [r7, #23]
#if defined (SD_POLLING_MODE)
  uint32_t bytestransferred = 0, count = 0, restwords = 0;
  uint32_t *tempbuff = (uint32_t *)writebuff;
#endif

  TransferError = SD_OK;
 8014c6c:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c74:	f04f 0200 	mov.w	r2, #0
 8014c78:	701a      	strb	r2, [r3, #0]
  TransferEnd = 0;
 8014c7a:	f640 2360 	movw	r3, #2656	; 0xa60
 8014c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c82:	f04f 0200 	mov.w	r2, #0
 8014c86:	601a      	str	r2, [r3, #0]
  StopCondition = 0;
 8014c88:	f640 2358 	movw	r3, #2648	; 0xa58
 8014c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c90:	f04f 0200 	mov.w	r2, #0
 8014c94:	601a      	str	r2, [r3, #0]
  
  SDIO->DCTRL = 0x0;
 8014c96:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8014c9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8014c9e:	f04f 0200 	mov.w	r2, #0
 8014ca2:	62da      	str	r2, [r3, #44]	; 0x2c


  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8014ca4:	f640 2330 	movw	r3, #2608	; 0xa30
 8014ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2b02      	cmp	r3, #2
 8014cb0:	d106      	bne.n	8014cc0 <SD_WriteBlock+0x68>
  {
    BlockSize = 512;
 8014cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cb6:	80fb      	strh	r3, [r7, #6]
    WriteAddr /= 512;
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8014cbe:	60bb      	str	r3, [r7, #8]
  }

  /* Set Block Size for Card */ 
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8014cc0:	88fa      	ldrh	r2, [r7, #6]
 8014cc2:	f641 0344 	movw	r3, #6212	; 0x1844
 8014cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014cca:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8014ccc:	f641 0344 	movw	r3, #6212	; 0x1844
 8014cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014cd4:	f04f 0210 	mov.w	r2, #16
 8014cd8:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8014cda:	f641 0344 	movw	r3, #6212	; 0x1844
 8014cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ce2:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014ce6:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014ce8:	f641 0344 	movw	r3, #6212	; 0x1844
 8014cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014cf0:	f04f 0200 	mov.w	r2, #0
 8014cf4:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014cf6:	f641 0344 	movw	r3, #6212	; 0x1844
 8014cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014d02:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014d04:	f641 0044 	movw	r0, #6212	; 0x1844
 8014d08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014d0c:	f7f9 fe66 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 8014d10:	f04f 0010 	mov.w	r0, #16
 8014d14:	f000 fa96 	bl	8015244 <CmdResp1Error>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	75fb      	strb	r3, [r7, #23]

  if (SD_OK != errorstatus)
 8014d1c:	7dfb      	ldrb	r3, [r7, #23]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d001      	beq.n	8014d26 <SD_WriteBlock+0xce>
  {
    return(errorstatus);
 8014d22:	7dfb      	ldrb	r3, [r7, #23]
 8014d24:	e071      	b.n	8014e0a <SD_WriteBlock+0x1b2>
  }
    
  /*!< Send CMD24 WRITE_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;
 8014d26:	f641 0344 	movw	r3, #6212	; 0x1844
 8014d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014d2e:	68ba      	ldr	r2, [r7, #8]
 8014d30:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8014d32:	f641 0344 	movw	r3, #6212	; 0x1844
 8014d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014d3a:	f04f 0218 	mov.w	r2, #24
 8014d3e:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8014d40:	f641 0344 	movw	r3, #6212	; 0x1844
 8014d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014d48:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014d4c:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014d4e:	f641 0344 	movw	r3, #6212	; 0x1844
 8014d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014d56:	f04f 0200 	mov.w	r2, #0
 8014d5a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014d5c:	f641 0344 	movw	r3, #6212	; 0x1844
 8014d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014d68:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014d6a:	f641 0044 	movw	r0, #6212	; 0x1844
 8014d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014d72:	f7f9 fe33 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
 8014d76:	f04f 0018 	mov.w	r0, #24
 8014d7a:	f000 fa63 	bl	8015244 <CmdResp1Error>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 8014d82:	7dfb      	ldrb	r3, [r7, #23]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d001      	beq.n	8014d8c <SD_WriteBlock+0x134>
  {
    return(errorstatus);
 8014d88:	7dfb      	ldrb	r3, [r7, #23]
 8014d8a:	e03e      	b.n	8014e0a <SD_WriteBlock+0x1b2>
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8014d8c:	f641 0370 	movw	r3, #6256	; 0x1870
 8014d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014d94:	f04f 32ff 	mov.w	r2, #4294967295
 8014d98:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 8014d9a:	88fa      	ldrh	r2, [r7, #6]
 8014d9c:	f641 0370 	movw	r3, #6256	; 0x1870
 8014da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014da4:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8014da6:	f641 0370 	movw	r3, #6256	; 0x1870
 8014daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014dae:	f04f 0290 	mov.w	r2, #144	; 0x90
 8014db2:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8014db4:	f641 0370 	movw	r3, #6256	; 0x1870
 8014db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014dbc:	f04f 0200 	mov.w	r2, #0
 8014dc0:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8014dc2:	f641 0370 	movw	r3, #6256	; 0x1870
 8014dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014dca:	f04f 0200 	mov.w	r2, #0
 8014dce:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8014dd0:	f641 0370 	movw	r3, #6256	; 0x1870
 8014dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014dd8:	f04f 0201 	mov.w	r2, #1
 8014ddc:	615a      	str	r2, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8014dde:	f641 0070 	movw	r0, #6256	; 0x1870
 8014de2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014de6:	f7f9 fe4f 	bl	800ea88 <SDIO_DataConfig>
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
    errorstatus = SD_START_BIT_ERR;
    return(errorstatus);
  }
#elif defined (SD_DMA_MODE)
  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 8014dea:	f240 302a 	movw	r0, #810	; 0x32a
 8014dee:	f04f 0101 	mov.w	r1, #1
 8014df2:	f7f9 fe9d 	bl	800eb30 <SDIO_ITConfig>
  SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, BlockSize);
 8014df6:	88fb      	ldrh	r3, [r7, #6]
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	f7fe fcc0 	bl	8013780 <SD_LowLevel_DMA_TxConfig>
  SDIO_DMACmd(ENABLE);
 8014e00:	f04f 0001 	mov.w	r0, #1
 8014e04:	f7f9 fe84 	bl	800eb10 <SDIO_DMACmd>
#endif

  return(errorstatus);
 8014e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f107 0718 	add.w	r7, r7, #24
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <SD_WaitWriteOperation>:
  *         card are already transferred by the DMA controller.        
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitWriteOperation(void)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8014e1a:	f04f 0300 	mov.w	r3, #0
 8014e1e:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
 8014e20:	f04f 33ff 	mov.w	r3, #4294967295
 8014e24:	603b      	str	r3, [r7, #0]
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8014e26:	e003      	b.n	8014e30 <SD_WaitWriteOperation+0x1c>
  {
    timeout--;
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014e2e:	603b      	str	r3, [r7, #0]
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8014e30:	f640 2364 	movw	r3, #2660	; 0xa64
 8014e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d111      	bne.n	8014e62 <SD_WaitWriteOperation+0x4e>
 8014e3e:	f640 2360 	movw	r3, #2656	; 0xa60
 8014e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d10a      	bne.n	8014e62 <SD_WaitWriteOperation+0x4e>
 8014e4c:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d102      	bne.n	8014e62 <SD_WaitWriteOperation+0x4e>
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1e2      	bne.n	8014e28 <SD_WaitWriteOperation+0x14>
  {
    timeout--;
  }
  
  DMAEndOfTransfer = 0x00;
 8014e62:	f640 2364 	movw	r3, #2660	; 0xa64
 8014e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014e6a:	f04f 0200 	mov.w	r2, #0
 8014e6e:	601a      	str	r2, [r3, #0]

  timeout = SD_DATATIMEOUT;
 8014e70:	f04f 33ff 	mov.w	r3, #4294967295
 8014e74:	603b      	str	r3, [r7, #0]
  
  while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
 8014e76:	e003      	b.n	8014e80 <SD_WaitWriteOperation+0x6c>
  {
    timeout--;  
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014e7e:	603b      	str	r3, [r7, #0]
  
  DMAEndOfTransfer = 0x00;

  timeout = SD_DATATIMEOUT;
  
  while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
 8014e80:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8014e84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8014e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d002      	beq.n	8014e98 <SD_WaitWriteOperation+0x84>
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d1ef      	bne.n	8014e78 <SD_WaitWriteOperation+0x64>
  {
    timeout--;  
  }

  if (StopCondition == 1)
 8014e98:	f640 2358 	movw	r3, #2648	; 0xa58
 8014e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d103      	bne.n	8014eae <SD_WaitWriteOperation+0x9a>
  {
    errorstatus = SD_StopTransfer();
 8014ea6:	f000 f825 	bl	8014ef4 <SD_StopTransfer>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	71fb      	strb	r3, [r7, #7]
  }
  
  if ((timeout == 0) && (errorstatus == SD_OK))
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d105      	bne.n	8014ec0 <SD_WaitWriteOperation+0xac>
 8014eb4:	79fb      	ldrb	r3, [r7, #7]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d102      	bne.n	8014ec0 <SD_WaitWriteOperation+0xac>
  {
    errorstatus = SD_DATA_TIMEOUT;
 8014eba:	f04f 0304 	mov.w	r3, #4
 8014ebe:	71fb      	strb	r3, [r7, #7]
  }
  
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8014ec0:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8014ec4:	f7f9 fe80 	bl	800ebc8 <SDIO_ClearFlag>
  
  if (TransferError != SD_OK)
 8014ec8:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d006      	beq.n	8014ee6 <SD_WaitWriteOperation+0xd2>
  {
    return(TransferError);
 8014ed8:	f640 235c 	movw	r3, #2652	; 0xa5c
 8014edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	e000      	b.n	8014ee8 <SD_WaitWriteOperation+0xd4>
  }
  else
  {
    return(errorstatus);
 8014ee6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f107 0708 	add.w	r7, r7, #8
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}
 8014ef2:	bf00      	nop

08014ef4 <SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_StopTransfer(void)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8014efa:	f04f 0300 	mov.w	r3, #0
 8014efe:	71fb      	strb	r3, [r7, #7]

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8014f00:	f641 0344 	movw	r3, #6212	; 0x1844
 8014f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014f08:	f04f 0200 	mov.w	r2, #0
 8014f0c:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
 8014f0e:	f641 0344 	movw	r3, #6212	; 0x1844
 8014f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014f16:	f04f 020c 	mov.w	r2, #12
 8014f1a:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8014f1c:	f641 0344 	movw	r3, #6212	; 0x1844
 8014f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014f24:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014f28:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014f2a:	f641 0344 	movw	r3, #6212	; 0x1844
 8014f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014f32:	f04f 0200 	mov.w	r2, #0
 8014f36:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014f38:	f641 0344 	movw	r3, #6212	; 0x1844
 8014f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014f44:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014f46:	f641 0044 	movw	r0, #6212	; 0x1844
 8014f4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014f4e:	f7f9 fd45 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
 8014f52:	f04f 000c 	mov.w	r0, #12
 8014f56:	f000 f975 	bl	8015244 <CmdResp1Error>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	71fb      	strb	r3, [r7, #7]

  return(errorstatus);
 8014f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	f107 0708 	add.w	r7, r7, #8
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop

08014f6c <SD_SendStatus>:
  * @param  pcardstatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register).
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_SendStatus(uint32_t *pcardstatus)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 8014f74:	f04f 0300 	mov.w	r3, #0
 8014f78:	73fb      	strb	r3, [r7, #15]

  if (pcardstatus == NULL)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d104      	bne.n	8014f8a <SD_SendStatus+0x1e>
  {
    errorstatus = SD_INVALID_PARAMETER;
 8014f80:	f04f 0326 	mov.w	r3, #38	; 0x26
 8014f84:	73fb      	strb	r3, [r7, #15]
    return(errorstatus);
 8014f86:	7bfb      	ldrb	r3, [r7, #15]
 8014f88:	e040      	b.n	801500c <SD_SendStatus+0xa0>
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8014f8a:	f640 2354 	movw	r3, #2644	; 0xa54
 8014f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8014f98:	f641 0344 	movw	r3, #6212	; 0x1844
 8014f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fa0:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
 8014fa2:	f641 0344 	movw	r3, #6212	; 0x1844
 8014fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014faa:	f04f 020d 	mov.w	r2, #13
 8014fae:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8014fb0:	f641 0344 	movw	r3, #6212	; 0x1844
 8014fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fb8:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014fbc:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8014fbe:	f641 0344 	movw	r3, #6212	; 0x1844
 8014fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fc6:	f04f 0200 	mov.w	r2, #0
 8014fca:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8014fcc:	f641 0344 	movw	r3, #6212	; 0x1844
 8014fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014fd8:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8014fda:	f641 0044 	movw	r0, #6212	; 0x1844
 8014fde:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8014fe2:	f7f9 fcfb 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
 8014fe6:	f04f 000d 	mov.w	r0, #13
 8014fea:	f000 f92b 	bl	8015244 <CmdResp1Error>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	73fb      	strb	r3, [r7, #15]

  if (errorstatus != SD_OK)
 8014ff2:	7bfb      	ldrb	r3, [r7, #15]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d001      	beq.n	8014ffc <SD_SendStatus+0x90>
  {
    return(errorstatus);
 8014ff8:	7bfb      	ldrb	r3, [r7, #15]
 8014ffa:	e007      	b.n	801500c <SD_SendStatus+0xa0>
  }

  *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
 8014ffc:	f04f 0000 	mov.w	r0, #0
 8015000:	f7f9 fd2c 	bl	800ea5c <SDIO_GetResponse>
 8015004:	4602      	mov	r2, r0
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	601a      	str	r2, [r3, #0]

  return(errorstatus);
 801500a:	7bfb      	ldrb	r3, [r7, #15]
}
 801500c:	4618      	mov	r0, r3
 801500e:	f107 0710 	add.w	r7, r7, #16
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop

08015018 <SD_ProcessIRQSrc>:
  * @brief  Allows to process all the interrupts that are high.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_ProcessIRQSrc(void)
{ 
 8015018:	b580      	push	{r7, lr}
 801501a:	af00      	add	r7, sp, #0
  if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
 801501c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015020:	f7f9 fde2 	bl	800ebe8 <SDIO_GetITStatus>
 8015024:	4603      	mov	r3, r0
 8015026:	2b00      	cmp	r3, #0
 8015028:	d012      	beq.n	8015050 <SD_ProcessIRQSrc+0x38>
  {
    TransferError = SD_OK;
 801502a:	f640 235c 	movw	r3, #2652	; 0xa5c
 801502e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015032:	f04f 0200 	mov.w	r2, #0
 8015036:	701a      	strb	r2, [r3, #0]
    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
 8015038:	f44f 7080 	mov.w	r0, #256	; 0x100
 801503c:	f7f9 fdf4 	bl	800ec28 <SDIO_ClearITPendingBit>
    TransferEnd = 1;
 8015040:	f640 2360 	movw	r3, #2656	; 0xa60
 8015044:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015048:	f04f 0201 	mov.w	r2, #1
 801504c:	601a      	str	r2, [r3, #0]
 801504e:	e05d      	b.n	801510c <SD_ProcessIRQSrc+0xf4>
  }  
  else if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
 8015050:	f04f 0002 	mov.w	r0, #2
 8015054:	f7f9 fdc8 	bl	800ebe8 <SDIO_GetITStatus>
 8015058:	4603      	mov	r3, r0
 801505a:	2b00      	cmp	r3, #0
 801505c:	d00b      	beq.n	8015076 <SD_ProcessIRQSrc+0x5e>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
 801505e:	f04f 0002 	mov.w	r0, #2
 8015062:	f7f9 fde1 	bl	800ec28 <SDIO_ClearITPendingBit>
    TransferError = SD_DATA_CRC_FAIL;
 8015066:	f640 235c 	movw	r3, #2652	; 0xa5c
 801506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801506e:	f04f 0202 	mov.w	r2, #2
 8015072:	701a      	strb	r2, [r3, #0]
 8015074:	e04a      	b.n	801510c <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
 8015076:	f04f 0008 	mov.w	r0, #8
 801507a:	f7f9 fdb5 	bl	800ebe8 <SDIO_GetITStatus>
 801507e:	4603      	mov	r3, r0
 8015080:	2b00      	cmp	r3, #0
 8015082:	d00b      	beq.n	801509c <SD_ProcessIRQSrc+0x84>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
 8015084:	f04f 0008 	mov.w	r0, #8
 8015088:	f7f9 fdce 	bl	800ec28 <SDIO_ClearITPendingBit>
    TransferError = SD_DATA_TIMEOUT;
 801508c:	f640 235c 	movw	r3, #2652	; 0xa5c
 8015090:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015094:	f04f 0204 	mov.w	r2, #4
 8015098:	701a      	strb	r2, [r3, #0]
 801509a:	e037      	b.n	801510c <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
 801509c:	f04f 0020 	mov.w	r0, #32
 80150a0:	f7f9 fda2 	bl	800ebe8 <SDIO_GetITStatus>
 80150a4:	4603      	mov	r3, r0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00b      	beq.n	80150c2 <SD_ProcessIRQSrc+0xaa>
  {
    SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
 80150aa:	f04f 0020 	mov.w	r0, #32
 80150ae:	f7f9 fdbb 	bl	800ec28 <SDIO_ClearITPendingBit>
    TransferError = SD_RX_OVERRUN;
 80150b2:	f640 235c 	movw	r3, #2652	; 0xa5c
 80150b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80150ba:	f04f 0206 	mov.w	r2, #6
 80150be:	701a      	strb	r2, [r3, #0]
 80150c0:	e024      	b.n	801510c <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
 80150c2:	f04f 0010 	mov.w	r0, #16
 80150c6:	f7f9 fd8f 	bl	800ebe8 <SDIO_GetITStatus>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d00b      	beq.n	80150e8 <SD_ProcessIRQSrc+0xd0>
  {
    SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
 80150d0:	f04f 0010 	mov.w	r0, #16
 80150d4:	f7f9 fda8 	bl	800ec28 <SDIO_ClearITPendingBit>
    TransferError = SD_TX_UNDERRUN;
 80150d8:	f640 235c 	movw	r3, #2652	; 0xa5c
 80150dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80150e0:	f04f 0205 	mov.w	r2, #5
 80150e4:	701a      	strb	r2, [r3, #0]
 80150e6:	e011      	b.n	801510c <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
 80150e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80150ec:	f7f9 fd7c 	bl	800ebe8 <SDIO_GetITStatus>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00a      	beq.n	801510c <SD_ProcessIRQSrc+0xf4>
  {
    SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
 80150f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80150fa:	f7f9 fd95 	bl	800ec28 <SDIO_ClearITPendingBit>
    TransferError = SD_START_BIT_ERR;
 80150fe:	f640 235c 	movw	r3, #2652	; 0xa5c
 8015102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015106:	f04f 0207 	mov.w	r2, #7
 801510a:	701a      	strb	r2, [r3, #0]
  }

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 801510c:	f24c 303a 	movw	r0, #49978	; 0xc33a
 8015110:	f04f 0100 	mov.w	r1, #0
 8015114:	f7f9 fd0c 	bl	800eb30 <SDIO_ITConfig>
                SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
  return(TransferError);
 8015118:	f640 235c 	movw	r3, #2652	; 0xa5c
 801511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	b2db      	uxtb	r3, r3
}
 8015124:	4618      	mov	r0, r3
 8015126:	bd80      	pop	{r7, pc}

08015128 <SD_ProcessDMAIRQ>:
  * @brief  This function waits until the SDIO DMA data transfer is finished. 
  * @param  None.
  * @retval None.
  */
void SD_ProcessDMAIRQ(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	af00      	add	r7, sp, #0
  if(DMA2->LISR & SD_SDIO_DMA_FLAG_TCIF)
 801512c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8015130:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 801513a:	2b00      	cmp	r3, #0
 801513c:	d00e      	beq.n	801515c <SD_ProcessDMAIRQ+0x34>
  {
    DMAEndOfTransfer = 0x01;
 801513e:	f640 2364 	movw	r3, #2660	; 0xa64
 8015142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015146:	f04f 0201 	mov.w	r2, #1
 801514a:	601a      	str	r2, [r3, #0]
    DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF);
 801514c:	f246 4058 	movw	r0, #25688	; 0x6458
 8015150:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015154:	f04f 51c2 	mov.w	r1, #406847488	; 0x18400000
 8015158:	f7f9 f8ac 	bl	800e2b4 <DMA_ClearFlag>
  }
}
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop

08015160 <CmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdError(void)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8015166:	f04f 0300 	mov.w	r3, #0
 801516a:	70fb      	strb	r3, [r7, #3]
  uint32_t timeout;

  timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
 801516c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015170:	607b      	str	r3, [r7, #4]

  while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 8015172:	e003      	b.n	801517c <CmdError+0x1c>
  {
    timeout--;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f103 33ff 	add.w	r3, r3, #4294967295
 801517a:	607b      	str	r3, [r7, #4]
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */

  while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d006      	beq.n	8015190 <CmdError+0x30>
 8015182:	f04f 0080 	mov.w	r0, #128	; 0x80
 8015186:	f7f9 fcff 	bl	800eb88 <SDIO_GetFlagStatus>
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	d0f1      	beq.n	8015174 <CmdError+0x14>
  {
    timeout--;
  }

  if (timeout == 0)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d104      	bne.n	80151a0 <CmdError+0x40>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 8015196:	f04f 0303 	mov.w	r3, #3
 801519a:	70fb      	strb	r3, [r7, #3]
    return(errorstatus);
 801519c:	78fb      	ldrb	r3, [r7, #3]
 801519e:	e004      	b.n	80151aa <CmdError+0x4a>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80151a0:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80151a4:	f7f9 fd10 	bl	800ebc8 <SDIO_ClearFlag>

  return(errorstatus);
 80151a8:	78fb      	ldrb	r3, [r7, #3]
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	f107 0708 	add.w	r7, r7, #8
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <CmdResp7Error>:
  * @brief  Checks for error conditions for R7 response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp7Error(void)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b084      	sub	sp, #16
 80151b8:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 80151ba:	f04f 0300 	mov.w	r3, #0
 80151be:	71fb      	strb	r3, [r7, #7]
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;
 80151c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80151c4:	60bb      	str	r3, [r7, #8]

  status = SDIO->STA;
 80151c6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80151ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80151ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151d0:	60fb      	str	r3, [r7, #12]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
 80151d2:	e009      	b.n	80151e8 <CmdResp7Error+0x34>
  {
    timeout--;
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80151da:	60bb      	str	r3, [r7, #8]
    status = SDIO->STA;
 80151dc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80151e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80151e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151e6:	60fb      	str	r3, [r7, #12]
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d102      	bne.n	80151f8 <CmdResp7Error+0x44>
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d1ed      	bne.n	80151d4 <CmdResp7Error+0x20>
  {
    timeout--;
    status = SDIO->STA;
  }

  if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d004      	beq.n	8015208 <CmdResp7Error+0x54>
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f003 0304 	and.w	r3, r3, #4
 8015204:	2b00      	cmp	r3, #0
 8015206:	d008      	beq.n	801521a <CmdResp7Error+0x66>
  {
    /*!< Card is not V2.0 complient or card does not support the set voltage range */
    errorstatus = SD_CMD_RSP_TIMEOUT;
 8015208:	f04f 0303 	mov.w	r3, #3
 801520c:	71fb      	strb	r3, [r7, #7]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 801520e:	f04f 0004 	mov.w	r0, #4
 8015212:	f7f9 fcd9 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 8015216:	79fb      	ldrb	r3, [r7, #7]
 8015218:	e00e      	b.n	8015238 <CmdResp7Error+0x84>
  }

  if (status & SDIO_FLAG_CMDREND)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015220:	2b00      	cmp	r3, #0
 8015222:	d008      	beq.n	8015236 <CmdResp7Error+0x82>
  {
    /*!< Card is SD V2.0 compliant */
    errorstatus = SD_OK;
 8015224:	f04f 0300 	mov.w	r3, #0
 8015228:	71fb      	strb	r3, [r7, #7]
    SDIO_ClearFlag(SDIO_FLAG_CMDREND);
 801522a:	f04f 0040 	mov.w	r0, #64	; 0x40
 801522e:	f7f9 fccb 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 8015232:	79fb      	ldrb	r3, [r7, #7]
 8015234:	e000      	b.n	8015238 <CmdResp7Error+0x84>
  }
  return(errorstatus);
 8015236:	79fb      	ldrb	r3, [r7, #7]
}
 8015238:	4618      	mov	r0, r3
 801523a:	f107 0710 	add.w	r7, r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop

08015244 <CmdResp1Error>:
  * @brief  Checks for error conditions for R1 response.
  * @param  cmd: The sent command index.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp1Error(uint8_t cmd)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	4603      	mov	r3, r0
 801524c:	71fb      	strb	r3, [r7, #7]
  SD_Error errorstatus = SD_OK;
 801524e:	f04f 0300 	mov.w	r3, #0
 8015252:	74fb      	strb	r3, [r7, #19]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;
 8015254:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8015258:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801525e:	617b      	str	r3, [r7, #20]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8015260:	e005      	b.n	801526e <CmdResp1Error+0x2a>
  {
    status = SDIO->STA;
 8015262:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8015266:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801526c:	617b      	str	r3, [r7, #20]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8015274:	2b00      	cmp	r3, #0
 8015276:	d0f4      	beq.n	8015262 <CmdResp1Error+0x1e>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	f003 0304 	and.w	r3, r3, #4
 801527e:	2b00      	cmp	r3, #0
 8015280:	d008      	beq.n	8015294 <CmdResp1Error+0x50>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 8015282:	f04f 0303 	mov.w	r3, #3
 8015286:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8015288:	f04f 0004 	mov.w	r0, #4
 801528c:	f7f9 fc9c 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 8015290:	7cfb      	ldrb	r3, [r7, #19]
 8015292:	e0c4      	b.n	801541e <CmdResp1Error+0x1da>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	f003 0301 	and.w	r3, r3, #1
 801529a:	b2db      	uxtb	r3, r3
 801529c:	2b00      	cmp	r3, #0
 801529e:	d008      	beq.n	80152b2 <CmdResp1Error+0x6e>
  {
    errorstatus = SD_CMD_CRC_FAIL;
 80152a0:	f04f 0301 	mov.w	r3, #1
 80152a4:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 80152a6:	f04f 0001 	mov.w	r0, #1
 80152aa:	f7f9 fc8d 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 80152ae:	7cfb      	ldrb	r3, [r7, #19]
 80152b0:	e0b5      	b.n	801541e <CmdResp1Error+0x1da>
  }

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 80152b2:	f7f9 fbc7 	bl	800ea44 <SDIO_GetCommandResponse>
 80152b6:	4603      	mov	r3, r0
 80152b8:	79fa      	ldrb	r2, [r7, #7]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d004      	beq.n	80152c8 <CmdResp1Error+0x84>
  {
    errorstatus = SD_ILLEGAL_CMD;
 80152be:	f04f 0310 	mov.w	r3, #16
 80152c2:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 80152c4:	7cfb      	ldrb	r3, [r7, #19]
 80152c6:	e0aa      	b.n	801541e <CmdResp1Error+0x1da>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80152c8:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80152cc:	f7f9 fc7c 	bl	800ebc8 <SDIO_ClearFlag>

  /*!< We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 80152d0:	f04f 0000 	mov.w	r0, #0
 80152d4:	f7f9 fbc2 	bl	800ea5c <SDIO_GetResponse>
 80152d8:	4603      	mov	r3, r0
 80152da:	60fb      	str	r3, [r7, #12]

  if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 80152dc:	68fa      	ldr	r2, [r7, #12]
 80152de:	f24e 0308 	movw	r3, #57352	; 0xe008
 80152e2:	f6cf 53ff 	movt	r3, #65023	; 0xfdff
 80152e6:	4013      	ands	r3, r2
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d101      	bne.n	80152f0 <CmdResp1Error+0xac>
  {
    return(errorstatus);
 80152ec:	7cfb      	ldrb	r3, [r7, #19]
 80152ee:	e096      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	da02      	bge.n	80152fc <CmdResp1Error+0xb8>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 80152f6:	f04f 031c 	mov.w	r3, #28
 80152fa:	e090      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ADDR_MISALIGNED)
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015302:	2b00      	cmp	r3, #0
 8015304:	d002      	beq.n	801530c <CmdResp1Error+0xc8>
  {
    return(SD_ADDR_MISALIGNED);
 8015306:	f04f 0309 	mov.w	r3, #9
 801530a:	e088      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015312:	2b00      	cmp	r3, #0
 8015314:	d002      	beq.n	801531c <CmdResp1Error+0xd8>
  {
    return(SD_BLOCK_LEN_ERR);
 8015316:	f04f 030a 	mov.w	r3, #10
 801531a:	e080      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015322:	2b00      	cmp	r3, #0
 8015324:	d002      	beq.n	801532c <CmdResp1Error+0xe8>
  {
    return(SD_ERASE_SEQ_ERR);
 8015326:	f04f 030b 	mov.w	r3, #11
 801532a:	e078      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015332:	2b00      	cmp	r3, #0
 8015334:	d002      	beq.n	801533c <CmdResp1Error+0xf8>
  {
    return(SD_BAD_ERASE_PARAM);
 8015336:	f04f 030c 	mov.w	r3, #12
 801533a:	e070      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015342:	2b00      	cmp	r3, #0
 8015344:	d002      	beq.n	801534c <CmdResp1Error+0x108>
  {
    return(SD_WRITE_PROT_VIOLATION);
 8015346:	f04f 030d 	mov.w	r3, #13
 801534a:	e068      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015352:	2b00      	cmp	r3, #0
 8015354:	d002      	beq.n	801535c <CmdResp1Error+0x118>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 8015356:	f04f 030e 	mov.w	r3, #14
 801535a:	e060      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_COM_CRC_FAILED)
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015362:	2b00      	cmp	r3, #0
 8015364:	d002      	beq.n	801536c <CmdResp1Error+0x128>
  {
    return(SD_COM_CRC_FAILED);
 8015366:	f04f 030f 	mov.w	r3, #15
 801536a:	e058      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ILLEGAL_CMD)
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015372:	2b00      	cmp	r3, #0
 8015374:	d002      	beq.n	801537c <CmdResp1Error+0x138>
  {
    return(SD_ILLEGAL_CMD);
 8015376:	f04f 0310 	mov.w	r3, #16
 801537a:	e050      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CARD_ECC_FAILED)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015382:	2b00      	cmp	r3, #0
 8015384:	d002      	beq.n	801538c <CmdResp1Error+0x148>
  {
    return(SD_CARD_ECC_FAILED);
 8015386:	f04f 0311 	mov.w	r3, #17
 801538a:	e048      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CC_ERROR)
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015392:	2b00      	cmp	r3, #0
 8015394:	d002      	beq.n	801539c <CmdResp1Error+0x158>
  {
    return(SD_CC_ERROR);
 8015396:	f04f 0312 	mov.w	r3, #18
 801539a:	e040      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d002      	beq.n	80153ac <CmdResp1Error+0x168>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 80153a6:	f04f 0313 	mov.w	r3, #19
 80153aa:	e038      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d002      	beq.n	80153bc <CmdResp1Error+0x178>
  {
    return(SD_STREAM_READ_UNDERRUN);
 80153b6:	f04f 0314 	mov.w	r3, #20
 80153ba:	e030      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d002      	beq.n	80153cc <CmdResp1Error+0x188>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 80153c6:	f04f 0315 	mov.w	r3, #21
 80153ca:	e028      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d002      	beq.n	80153dc <CmdResp1Error+0x198>
  {
    return(SD_CID_CSD_OVERWRITE);
 80153d6:	f04f 0316 	mov.w	r3, #22
 80153da:	e020      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_WP_ERASE_SKIP)
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d002      	beq.n	80153ec <CmdResp1Error+0x1a8>
  {
    return(SD_WP_ERASE_SKIP);
 80153e6:	f04f 0317 	mov.w	r3, #23
 80153ea:	e018      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d002      	beq.n	80153fc <CmdResp1Error+0x1b8>
  {
    return(SD_CARD_ECC_DISABLED);
 80153f6:	f04f 0318 	mov.w	r3, #24
 80153fa:	e010      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ERASE_RESET)
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015402:	2b00      	cmp	r3, #0
 8015404:	d002      	beq.n	801540c <CmdResp1Error+0x1c8>
  {
    return(SD_ERASE_RESET);
 8015406:	f04f 0319 	mov.w	r3, #25
 801540a:	e008      	b.n	801541e <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	f003 0308 	and.w	r3, r3, #8
 8015412:	2b00      	cmp	r3, #0
 8015414:	d002      	beq.n	801541c <CmdResp1Error+0x1d8>
  {
    return(SD_AKE_SEQ_ERROR);
 8015416:	f04f 031a 	mov.w	r3, #26
 801541a:	e000      	b.n	801541e <CmdResp1Error+0x1da>
  }
  return(errorstatus);
 801541c:	7cfb      	ldrb	r3, [r7, #19]
}
 801541e:	4618      	mov	r0, r3
 8015420:	f107 0718 	add.w	r7, r7, #24
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <CmdResp3Error>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp3Error(void)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 801542e:	f04f 0300 	mov.w	r3, #0
 8015432:	70fb      	strb	r3, [r7, #3]
  uint32_t status;

  status = SDIO->STA;
 8015434:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8015438:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801543e:	607b      	str	r3, [r7, #4]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8015440:	e005      	b.n	801544e <CmdResp3Error+0x26>
  {
    status = SDIO->STA;
 8015442:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8015446:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801544c:	607b      	str	r3, [r7, #4]
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8015454:	2b00      	cmp	r3, #0
 8015456:	d0f4      	beq.n	8015442 <CmdResp3Error+0x1a>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f003 0304 	and.w	r3, r3, #4
 801545e:	2b00      	cmp	r3, #0
 8015460:	d008      	beq.n	8015474 <CmdResp3Error+0x4c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 8015462:	f04f 0303 	mov.w	r3, #3
 8015466:	70fb      	strb	r3, [r7, #3]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8015468:	f04f 0004 	mov.w	r0, #4
 801546c:	f7f9 fbac 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 8015470:	78fb      	ldrb	r3, [r7, #3]
 8015472:	e004      	b.n	801547e <CmdResp3Error+0x56>
  }
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8015474:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8015478:	f7f9 fba6 	bl	800ebc8 <SDIO_ClearFlag>
  return(errorstatus);
 801547c:	78fb      	ldrb	r3, [r7, #3]
}
 801547e:	4618      	mov	r0, r3
 8015480:	f107 0708 	add.w	r7, r7, #8
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}

08015488 <CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp2Error(void)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 801548e:	f04f 0300 	mov.w	r3, #0
 8015492:	70fb      	strb	r3, [r7, #3]
  uint32_t status;

  status = SDIO->STA;
 8015494:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8015498:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801549e:	607b      	str	r3, [r7, #4]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 80154a0:	e005      	b.n	80154ae <CmdResp2Error+0x26>
  {
    status = SDIO->STA;
 80154a2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80154a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80154aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154ac:	607b      	str	r3, [r7, #4]
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d0f4      	beq.n	80154a2 <CmdResp2Error+0x1a>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f003 0304 	and.w	r3, r3, #4
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d008      	beq.n	80154d4 <CmdResp2Error+0x4c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 80154c2:	f04f 0303 	mov.w	r3, #3
 80154c6:	70fb      	strb	r3, [r7, #3]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 80154c8:	f04f 0004 	mov.w	r0, #4
 80154cc:	f7f9 fb7c 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 80154d0:	78fb      	ldrb	r3, [r7, #3]
 80154d2:	e013      	b.n	80154fc <CmdResp2Error+0x74>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	b2db      	uxtb	r3, r3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d008      	beq.n	80154f2 <CmdResp2Error+0x6a>
  {
    errorstatus = SD_CMD_CRC_FAIL;
 80154e0:	f04f 0301 	mov.w	r3, #1
 80154e4:	70fb      	strb	r3, [r7, #3]
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 80154e6:	f04f 0001 	mov.w	r0, #1
 80154ea:	f7f9 fb6d 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 80154ee:	78fb      	ldrb	r3, [r7, #3]
 80154f0:	e004      	b.n	80154fc <CmdResp2Error+0x74>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80154f2:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80154f6:	f7f9 fb67 	bl	800ebc8 <SDIO_ClearFlag>

  return(errorstatus);
 80154fa:	78fb      	ldrb	r3, [r7, #3]
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	f107 0708 	add.w	r7, r7, #8
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop

08015508 <CmdResp6Error>:
  * @param  prca: pointer to the variable that will contain the SD card relative 
  *         address RCA. 
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b086      	sub	sp, #24
 801550c:	af00      	add	r7, sp, #0
 801550e:	4603      	mov	r3, r0
 8015510:	6039      	str	r1, [r7, #0]
 8015512:	71fb      	strb	r3, [r7, #7]
  SD_Error errorstatus = SD_OK;
 8015514:	f04f 0300 	mov.w	r3, #0
 8015518:	74fb      	strb	r3, [r7, #19]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;
 801551a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801551e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8015522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015524:	617b      	str	r3, [r7, #20]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8015526:	e005      	b.n	8015534 <CmdResp6Error+0x2c>
  {
    status = SDIO->STA;
 8015528:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801552c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8015530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015532:	617b      	str	r3, [r7, #20]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801553a:	2b00      	cmp	r3, #0
 801553c:	d0f4      	beq.n	8015528 <CmdResp6Error+0x20>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	f003 0304 	and.w	r3, r3, #4
 8015544:	2b00      	cmp	r3, #0
 8015546:	d008      	beq.n	801555a <CmdResp6Error+0x52>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 8015548:	f04f 0303 	mov.w	r3, #3
 801554c:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 801554e:	f04f 0004 	mov.w	r0, #4
 8015552:	f7f9 fb39 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 8015556:	7cfb      	ldrb	r3, [r7, #19]
 8015558:	e049      	b.n	80155ee <CmdResp6Error+0xe6>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	f003 0301 	and.w	r3, r3, #1
 8015560:	b2db      	uxtb	r3, r3
 8015562:	2b00      	cmp	r3, #0
 8015564:	d008      	beq.n	8015578 <CmdResp6Error+0x70>
  {
    errorstatus = SD_CMD_CRC_FAIL;
 8015566:	f04f 0301 	mov.w	r3, #1
 801556a:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 801556c:	f04f 0001 	mov.w	r0, #1
 8015570:	f7f9 fb2a 	bl	800ebc8 <SDIO_ClearFlag>
    return(errorstatus);
 8015574:	7cfb      	ldrb	r3, [r7, #19]
 8015576:	e03a      	b.n	80155ee <CmdResp6Error+0xe6>
  }

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 8015578:	f7f9 fa64 	bl	800ea44 <SDIO_GetCommandResponse>
 801557c:	4603      	mov	r3, r0
 801557e:	79fa      	ldrb	r2, [r7, #7]
 8015580:	429a      	cmp	r2, r3
 8015582:	d004      	beq.n	801558e <CmdResp6Error+0x86>
  {
    errorstatus = SD_ILLEGAL_CMD;
 8015584:	f04f 0310 	mov.w	r3, #16
 8015588:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 801558a:	7cfb      	ldrb	r3, [r7, #19]
 801558c:	e02f      	b.n	80155ee <CmdResp6Error+0xe6>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 801558e:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8015592:	f7f9 fb19 	bl	800ebc8 <SDIO_ClearFlag>

  /*!< We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8015596:	f04f 0000 	mov.w	r0, #0
 801559a:	f7f9 fa5f 	bl	800ea5c <SDIO_GetResponse>
 801559e:	4603      	mov	r3, r0
 80155a0:	60fb      	str	r3, [r7, #12]

  if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d107      	bne.n	80155bc <CmdResp6Error+0xb4>
  {
    *prca = (uint16_t) (response_r1 >> 16);
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80155b2:	b29a      	uxth	r2, r3
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	801a      	strh	r2, [r3, #0]
    return(errorstatus);
 80155b8:	7cfb      	ldrb	r3, [r7, #19]
 80155ba:	e018      	b.n	80155ee <CmdResp6Error+0xe6>
  }

  if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d002      	beq.n	80155cc <CmdResp6Error+0xc4>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 80155c6:	f04f 0313 	mov.w	r3, #19
 80155ca:	e010      	b.n	80155ee <CmdResp6Error+0xe6>
  }

  if (response_r1 & SD_R6_ILLEGAL_CMD)
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d002      	beq.n	80155dc <CmdResp6Error+0xd4>
  {
    return(SD_ILLEGAL_CMD);
 80155d6:	f04f 0310 	mov.w	r3, #16
 80155da:	e008      	b.n	80155ee <CmdResp6Error+0xe6>
  }

  if (response_r1 & SD_R6_COM_CRC_FAILED)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d002      	beq.n	80155ec <CmdResp6Error+0xe4>
  {
    return(SD_COM_CRC_FAILED);
 80155e6:	f04f 030f 	mov.w	r3, #15
 80155ea:	e000      	b.n	80155ee <CmdResp6Error+0xe6>
  }

  return(errorstatus);
 80155ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	f107 0718 	add.w	r7, r7, #24
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <SDEnWideBus>:
  * @param  NewState: new state of the SDIO wide bus mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error SDEnWideBus(FunctionalState NewState)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b086      	sub	sp, #24
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4603      	mov	r3, r0
 8015600:	71fb      	strb	r3, [r7, #7]
  SD_Error errorstatus = SD_OK;
 8015602:	f04f 0300 	mov.w	r3, #0
 8015606:	75fb      	strb	r3, [r7, #23]

  uint32_t scr[2] = {0, 0};
 8015608:	f04f 0300 	mov.w	r3, #0
 801560c:	60fb      	str	r3, [r7, #12]
 801560e:	f04f 0300 	mov.w	r3, #0
 8015612:	613b      	str	r3, [r7, #16]

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 8015614:	f04f 0000 	mov.w	r0, #0
 8015618:	f7f9 fa20 	bl	800ea5c <SDIO_GetResponse>
 801561c:	4603      	mov	r3, r0
 801561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015622:	2b00      	cmp	r3, #0
 8015624:	d004      	beq.n	8015630 <SDEnWideBus+0x38>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
 8015626:	f04f 030e 	mov.w	r3, #14
 801562a:	75fb      	strb	r3, [r7, #23]
    return(errorstatus);
 801562c:	7dfb      	ldrb	r3, [r7, #23]
 801562e:	e106      	b.n	801583e <SDEnWideBus+0x246>
  }

  /*!< Get SCR Register */
  errorstatus = FindSCR(RCA, scr);
 8015630:	f640 2354 	movw	r3, #2644	; 0xa54
 8015634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	b29a      	uxth	r2, r3
 801563c:	f107 030c 	add.w	r3, r7, #12
 8015640:	4610      	mov	r0, r2
 8015642:	4619      	mov	r1, r3
 8015644:	f000 f900 	bl	8015848 <FindSCR>
 8015648:	4603      	mov	r3, r0
 801564a:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 801564c:	7dfb      	ldrb	r3, [r7, #23]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d001      	beq.n	8015656 <SDEnWideBus+0x5e>
  {
    return(errorstatus);
 8015652:	7dfb      	ldrb	r3, [r7, #23]
 8015654:	e0f3      	b.n	801583e <SDEnWideBus+0x246>
  }

  /*!< If wide bus operation to be enabled */
  if (NewState == ENABLE)
 8015656:	79fb      	ldrb	r3, [r7, #7]
 8015658:	2b01      	cmp	r3, #1
 801565a:	d178      	bne.n	801574e <SDEnWideBus+0x156>
  {
    /*!< If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 801565c:	693b      	ldr	r3, [r7, #16]
 801565e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015662:	2b00      	cmp	r3, #0
 8015664:	d06e      	beq.n	8015744 <SDEnWideBus+0x14c>
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8015666:	f640 2354 	movw	r3, #2644	; 0xa54
 801566a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8015674:	f641 0344 	movw	r3, #6212	; 0x1844
 8015678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801567c:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 801567e:	f641 0344 	movw	r3, #6212	; 0x1844
 8015682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015686:	f04f 0237 	mov.w	r2, #55	; 0x37
 801568a:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 801568c:	f641 0344 	movw	r3, #6212	; 0x1844
 8015690:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015694:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015698:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 801569a:	f641 0344 	movw	r3, #6212	; 0x1844
 801569e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156a2:	f04f 0200 	mov.w	r2, #0
 80156a6:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80156a8:	f641 0344 	movw	r3, #6212	; 0x1844
 80156ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80156b4:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80156b6:	f641 0044 	movw	r0, #6212	; 0x1844
 80156ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80156be:	f7f9 f98d 	bl	800e9dc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 80156c2:	f04f 0037 	mov.w	r0, #55	; 0x37
 80156c6:	f7ff fdbd 	bl	8015244 <CmdResp1Error>
 80156ca:	4603      	mov	r3, r0
 80156cc:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 80156ce:	7dfb      	ldrb	r3, [r7, #23]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d001      	beq.n	80156d8 <SDEnWideBus+0xe0>
      {
        return(errorstatus);
 80156d4:	7dfb      	ldrb	r3, [r7, #23]
 80156d6:	e0b2      	b.n	801583e <SDEnWideBus+0x246>
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x2;
 80156d8:	f641 0344 	movw	r3, #6212	; 0x1844
 80156dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156e0:	f04f 0202 	mov.w	r2, #2
 80156e4:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 80156e6:	f641 0344 	movw	r3, #6212	; 0x1844
 80156ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156ee:	f04f 0206 	mov.w	r2, #6
 80156f2:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80156f4:	f641 0344 	movw	r3, #6212	; 0x1844
 80156f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80156fc:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015700:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015702:	f641 0344 	movw	r3, #6212	; 0x1844
 8015706:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801570a:	f04f 0200 	mov.w	r2, #0
 801570e:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015710:	f641 0344 	movw	r3, #6212	; 0x1844
 8015714:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801571c:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 801571e:	f641 0044 	movw	r0, #6212	; 0x1844
 8015722:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015726:	f7f9 f959 	bl	800e9dc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 801572a:	f04f 0006 	mov.w	r0, #6
 801572e:	f7ff fd89 	bl	8015244 <CmdResp1Error>
 8015732:	4603      	mov	r3, r0
 8015734:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 8015736:	7dfb      	ldrb	r3, [r7, #23]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d001      	beq.n	8015740 <SDEnWideBus+0x148>
      {
        return(errorstatus);
 801573c:	7dfb      	ldrb	r3, [r7, #23]
 801573e:	e07e      	b.n	801583e <SDEnWideBus+0x246>
      }
      return(errorstatus);
 8015740:	7dfb      	ldrb	r3, [r7, #23]
 8015742:	e07c      	b.n	801583e <SDEnWideBus+0x246>
    }
    else
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
 8015744:	f04f 0325 	mov.w	r3, #37	; 0x25
 8015748:	75fb      	strb	r3, [r7, #23]
      return(errorstatus);
 801574a:	7dfb      	ldrb	r3, [r7, #23]
 801574c:	e077      	b.n	801583e <SDEnWideBus+0x246>
    }
  }   /*!< If wide bus operation to be disabled */
  else
  {
    /*!< If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015754:	2b00      	cmp	r3, #0
 8015756:	d06e      	beq.n	8015836 <SDEnWideBus+0x23e>
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8015758:	f640 2354 	movw	r3, #2644	; 0xa54
 801575c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8015766:	f641 0344 	movw	r3, #6212	; 0x1844
 801576a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801576e:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8015770:	f641 0344 	movw	r3, #6212	; 0x1844
 8015774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015778:	f04f 0237 	mov.w	r2, #55	; 0x37
 801577c:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 801577e:	f641 0344 	movw	r3, #6212	; 0x1844
 8015782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015786:	f04f 0240 	mov.w	r2, #64	; 0x40
 801578a:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 801578c:	f641 0344 	movw	r3, #6212	; 0x1844
 8015790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015794:	f04f 0200 	mov.w	r2, #0
 8015798:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 801579a:	f641 0344 	movw	r3, #6212	; 0x1844
 801579e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80157a6:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80157a8:	f641 0044 	movw	r0, #6212	; 0x1844
 80157ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80157b0:	f7f9 f914 	bl	800e9dc <SDIO_SendCommand>


      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 80157b4:	f04f 0037 	mov.w	r0, #55	; 0x37
 80157b8:	f7ff fd44 	bl	8015244 <CmdResp1Error>
 80157bc:	4603      	mov	r3, r0
 80157be:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 80157c0:	7dfb      	ldrb	r3, [r7, #23]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d001      	beq.n	80157ca <SDEnWideBus+0x1d2>
      {
        return(errorstatus);
 80157c6:	7dfb      	ldrb	r3, [r7, #23]
 80157c8:	e039      	b.n	801583e <SDEnWideBus+0x246>
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 80157ca:	f641 0344 	movw	r3, #6212	; 0x1844
 80157ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157d2:	f04f 0200 	mov.w	r2, #0
 80157d6:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 80157d8:	f641 0344 	movw	r3, #6212	; 0x1844
 80157dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157e0:	f04f 0206 	mov.w	r2, #6
 80157e4:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80157e6:	f641 0344 	movw	r3, #6212	; 0x1844
 80157ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157ee:	f04f 0240 	mov.w	r2, #64	; 0x40
 80157f2:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80157f4:	f641 0344 	movw	r3, #6212	; 0x1844
 80157f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80157fc:	f04f 0200 	mov.w	r2, #0
 8015800:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015802:	f641 0344 	movw	r3, #6212	; 0x1844
 8015806:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801580a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801580e:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015810:	f641 0044 	movw	r0, #6212	; 0x1844
 8015814:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015818:	f7f9 f8e0 	bl	800e9dc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 801581c:	f04f 0006 	mov.w	r0, #6
 8015820:	f7ff fd10 	bl	8015244 <CmdResp1Error>
 8015824:	4603      	mov	r3, r0
 8015826:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 8015828:	7dfb      	ldrb	r3, [r7, #23]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <SDEnWideBus+0x23a>
      {
        return(errorstatus);
 801582e:	7dfb      	ldrb	r3, [r7, #23]
 8015830:	e005      	b.n	801583e <SDEnWideBus+0x246>
      }

      return(errorstatus);
 8015832:	7dfb      	ldrb	r3, [r7, #23]
 8015834:	e003      	b.n	801583e <SDEnWideBus+0x246>
    }
    else
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
 8015836:	f04f 0325 	mov.w	r3, #37	; 0x25
 801583a:	75fb      	strb	r3, [r7, #23]
      return(errorstatus);
 801583c:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
}
 801583e:	4618      	mov	r0, r3
 8015840:	f107 0718 	add.w	r7, r7, #24
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <FindSCR>:
  * @param  rca: selected card address.
  * @param  pscr: pointer to the buffer that will contain the SCR value.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
 8015848:	b590      	push	{r4, r7, lr}
 801584a:	b087      	sub	sp, #28
 801584c:	af00      	add	r7, sp, #0
 801584e:	4603      	mov	r3, r0
 8015850:	6039      	str	r1, [r7, #0]
 8015852:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8015854:	f04f 0300 	mov.w	r3, #0
 8015858:	617b      	str	r3, [r7, #20]
  SD_Error errorstatus = SD_OK;
 801585a:	f04f 0300 	mov.w	r3, #0
 801585e:	74fb      	strb	r3, [r7, #19]
  uint32_t tempscr[2] = {0, 0};
 8015860:	f04f 0300 	mov.w	r3, #0
 8015864:	60bb      	str	r3, [r7, #8]
 8015866:	f04f 0300 	mov.w	r3, #0
 801586a:	60fb      	str	r3, [r7, #12]

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 801586c:	f641 0344 	movw	r3, #6212	; 0x1844
 8015870:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015874:	f04f 0208 	mov.w	r2, #8
 8015878:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 801587a:	f641 0344 	movw	r3, #6212	; 0x1844
 801587e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015882:	f04f 0210 	mov.w	r2, #16
 8015886:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8015888:	f641 0344 	movw	r3, #6212	; 0x1844
 801588c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015890:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015894:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015896:	f641 0344 	movw	r3, #6212	; 0x1844
 801589a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801589e:	f04f 0200 	mov.w	r2, #0
 80158a2:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80158a4:	f641 0344 	movw	r3, #6212	; 0x1844
 80158a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80158ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80158b0:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80158b2:	f641 0044 	movw	r0, #6212	; 0x1844
 80158b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80158ba:	f7f9 f88f 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 80158be:	f04f 0010 	mov.w	r0, #16
 80158c2:	f7ff fcbf 	bl	8015244 <CmdResp1Error>
 80158c6:	4603      	mov	r3, r0
 80158c8:	74fb      	strb	r3, [r7, #19]

  if (errorstatus != SD_OK)
 80158ca:	7cfb      	ldrb	r3, [r7, #19]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d001      	beq.n	80158d4 <FindSCR+0x8c>
  {
    return(errorstatus);
 80158d0:	7cfb      	ldrb	r3, [r7, #19]
 80158d2:	e12f      	b.n	8015b34 <FindSCR+0x2ec>
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80158d4:	f640 2354 	movw	r3, #2644	; 0xa54
 80158d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80158e2:	f641 0344 	movw	r3, #6212	; 0x1844
 80158e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80158ea:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80158ec:	f641 0344 	movw	r3, #6212	; 0x1844
 80158f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80158f4:	f04f 0237 	mov.w	r2, #55	; 0x37
 80158f8:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80158fa:	f641 0344 	movw	r3, #6212	; 0x1844
 80158fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015902:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015906:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015908:	f641 0344 	movw	r3, #6212	; 0x1844
 801590c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015910:	f04f 0200 	mov.w	r2, #0
 8015914:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015916:	f641 0344 	movw	r3, #6212	; 0x1844
 801591a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801591e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015922:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015924:	f641 0044 	movw	r0, #6212	; 0x1844
 8015928:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801592c:	f7f9 f856 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8015930:	f04f 0037 	mov.w	r0, #55	; 0x37
 8015934:	f7ff fc86 	bl	8015244 <CmdResp1Error>
 8015938:	4603      	mov	r3, r0
 801593a:	74fb      	strb	r3, [r7, #19]

  if (errorstatus != SD_OK)
 801593c:	7cfb      	ldrb	r3, [r7, #19]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d001      	beq.n	8015946 <FindSCR+0xfe>
  {
    return(errorstatus);
 8015942:	7cfb      	ldrb	r3, [r7, #19]
 8015944:	e0f6      	b.n	8015b34 <FindSCR+0x2ec>
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8015946:	f641 0370 	movw	r3, #6256	; 0x1870
 801594a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801594e:	f04f 32ff 	mov.w	r2, #4294967295
 8015952:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = 8;
 8015954:	f641 0370 	movw	r3, #6256	; 0x1870
 8015958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801595c:	f04f 0208 	mov.w	r2, #8
 8015960:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 8015962:	f641 0370 	movw	r3, #6256	; 0x1870
 8015966:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801596a:	f04f 0230 	mov.w	r2, #48	; 0x30
 801596e:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8015970:	f641 0370 	movw	r3, #6256	; 0x1870
 8015974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015978:	f04f 0202 	mov.w	r2, #2
 801597c:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 801597e:	f641 0370 	movw	r3, #6256	; 0x1870
 8015982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015986:	f04f 0200 	mov.w	r2, #0
 801598a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 801598c:	f641 0370 	movw	r3, #6256	; 0x1870
 8015990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015994:	f04f 0201 	mov.w	r2, #1
 8015998:	615a      	str	r2, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 801599a:	f641 0070 	movw	r0, #6256	; 0x1870
 801599e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80159a2:	f7f9 f871 	bl	800ea88 <SDIO_DataConfig>


  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80159a6:	f641 0344 	movw	r3, #6212	; 0x1844
 80159aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159ae:	f04f 0200 	mov.w	r2, #0
 80159b2:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
 80159b4:	f641 0344 	movw	r3, #6212	; 0x1844
 80159b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159bc:	f04f 0233 	mov.w	r2, #51	; 0x33
 80159c0:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80159c2:	f641 0344 	movw	r3, #6212	; 0x1844
 80159c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159ca:	f04f 0240 	mov.w	r2, #64	; 0x40
 80159ce:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80159d0:	f641 0344 	movw	r3, #6212	; 0x1844
 80159d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159d8:	f04f 0200 	mov.w	r2, #0
 80159dc:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80159de:	f641 0344 	movw	r3, #6212	; 0x1844
 80159e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80159ea:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80159ec:	f641 0044 	movw	r0, #6212	; 0x1844
 80159f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80159f4:	f7f8 fff2 	bl	800e9dc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
 80159f8:	f04f 0033 	mov.w	r0, #51	; 0x33
 80159fc:	f7ff fc22 	bl	8015244 <CmdResp1Error>
 8015a00:	4603      	mov	r3, r0
 8015a02:	74fb      	strb	r3, [r7, #19]

  if (errorstatus != SD_OK)
 8015a04:	7cfb      	ldrb	r3, [r7, #19]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d017      	beq.n	8015a3a <FindSCR+0x1f2>
  {
    return(errorstatus);
 8015a0a:	7cfb      	ldrb	r3, [r7, #19]
 8015a0c:	e092      	b.n	8015b34 <FindSCR+0x2ec>
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
  {
    if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 8015a0e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015a12:	f7f9 f8b9 	bl	800eb88 <SDIO_GetFlagStatus>
 8015a16:	4603      	mov	r3, r0
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d00f      	beq.n	8015a3c <FindSCR+0x1f4>
    {
      *(tempscr + index) = SDIO_ReadData();
 8015a1c:	697b      	ldr	r3, [r7, #20]
 8015a1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8015a22:	f107 0208 	add.w	r2, r7, #8
 8015a26:	18d4      	adds	r4, r2, r3
 8015a28:	f7f9 f866 	bl	800eaf8 <SDIO_ReadData>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	6023      	str	r3, [r4, #0]
      index++;
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	f103 0301 	add.w	r3, r3, #1
 8015a36:	617b      	str	r3, [r7, #20]
 8015a38:	e000      	b.n	8015a3c <FindSCR+0x1f4>
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 8015a3a:	bf00      	nop
 8015a3c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8015a40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8015a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a46:	461a      	mov	r2, r3
 8015a48:	f240 632a 	movw	r3, #1578	; 0x62a
 8015a4c:	4013      	ands	r3, r2
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d0dd      	beq.n	8015a0e <FindSCR+0x1c6>
      *(tempscr + index) = SDIO_ReadData();
      index++;
    }
  }

  if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 8015a52:	f04f 0008 	mov.w	r0, #8
 8015a56:	f7f9 f897 	bl	800eb88 <SDIO_GetFlagStatus>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d008      	beq.n	8015a72 <FindSCR+0x22a>
  {
    SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8015a60:	f04f 0008 	mov.w	r0, #8
 8015a64:	f7f9 f8b0 	bl	800ebc8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_TIMEOUT;
 8015a68:	f04f 0304 	mov.w	r3, #4
 8015a6c:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8015a6e:	7cfb      	ldrb	r3, [r7, #19]
 8015a70:	e060      	b.n	8015b34 <FindSCR+0x2ec>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 8015a72:	f04f 0002 	mov.w	r0, #2
 8015a76:	f7f9 f887 	bl	800eb88 <SDIO_GetFlagStatus>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d008      	beq.n	8015a92 <FindSCR+0x24a>
  {
    SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8015a80:	f04f 0002 	mov.w	r0, #2
 8015a84:	f7f9 f8a0 	bl	800ebc8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_CRC_FAIL;
 8015a88:	f04f 0302 	mov.w	r3, #2
 8015a8c:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8015a8e:	7cfb      	ldrb	r3, [r7, #19]
 8015a90:	e050      	b.n	8015b34 <FindSCR+0x2ec>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 8015a92:	f04f 0020 	mov.w	r0, #32
 8015a96:	f7f9 f877 	bl	800eb88 <SDIO_GetFlagStatus>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d008      	beq.n	8015ab2 <FindSCR+0x26a>
  {
    SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 8015aa0:	f04f 0020 	mov.w	r0, #32
 8015aa4:	f7f9 f890 	bl	800ebc8 <SDIO_ClearFlag>
    errorstatus = SD_RX_OVERRUN;
 8015aa8:	f04f 0306 	mov.w	r3, #6
 8015aac:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8015aae:	7cfb      	ldrb	r3, [r7, #19]
 8015ab0:	e040      	b.n	8015b34 <FindSCR+0x2ec>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 8015ab2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015ab6:	f7f9 f867 	bl	800eb88 <SDIO_GetFlagStatus>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d008      	beq.n	8015ad2 <FindSCR+0x28a>
  {
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 8015ac0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015ac4:	f7f9 f880 	bl	800ebc8 <SDIO_ClearFlag>
    errorstatus = SD_START_BIT_ERR;
 8015ac8:	f04f 0307 	mov.w	r3, #7
 8015acc:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8015ace:	7cfb      	ldrb	r3, [r7, #19]
 8015ad0:	e030      	b.n	8015b34 <FindSCR+0x2ec>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8015ad2:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8015ad6:	f7f9 f877 	bl	800ebc8 <SDIO_ClearFlag>

  *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	f103 0304 	add.w	r3, r3, #4
 8015ae0:	68ba      	ldr	r2, [r7, #8]
 8015ae2:	ea4f 6102 	mov.w	r1, r2, lsl #24
 8015ae6:	68ba      	ldr	r2, [r7, #8]
 8015ae8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015aec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8015af0:	4311      	orrs	r1, r2
 8015af2:	68ba      	ldr	r2, [r7, #8]
 8015af4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8015af8:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8015afc:	4311      	orrs	r1, r2
 8015afe:	68ba      	ldr	r2, [r7, #8]
 8015b00:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8015b04:	430a      	orrs	r2, r1
 8015b06:	601a      	str	r2, [r3, #0]

  *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b14:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8015b18:	431a      	orrs	r2, r3
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b20:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8015b24:	431a      	orrs	r2, r3
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8015b2c:	431a      	orrs	r2, r3
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	601a      	str	r2, [r3, #0]

  return(errorstatus);
 8015b32:	7cfb      	ldrb	r3, [r7, #19]
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	f107 071c 	add.w	r7, r7, #28
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd90      	pop	{r4, r7, pc}
 8015b3e:	bf00      	nop

08015b40 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7fa fd7d 	bl	801064c <_ZN12AManagedTaskC1Ev>
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	4a07      	ldr	r2, [pc, #28]	; (8015b74 <_ZN24CLedHeartBeatSTM32F4DiscC1Em+0x34>)
 8015b56:	601a      	str	r2, [r3, #0]
	ledState = LED_Up;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f04f 0200 	mov.w	r2, #0
 8015b5e:	731a      	strb	r2, [r3, #12]
	ledRate = newRate;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	683a      	ldr	r2, [r7, #0]
 8015b64:	611a      	str	r2, [r3, #16]
}
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f107 0708 	add.w	r7, r7, #8
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	bf00      	nop
 8015b74:	0801c1d0 	.word	0x0801c1d0

08015b78 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>:

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	4a0a      	ldr	r2, [pc, #40]	; (8015bac <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x34>)
 8015b84:	601a      	str	r2, [r3, #0]
	// nothing to destroy
}
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7fa fd7c 	bl	8010684 <_ZN12AManagedTaskD1Ev>
 8015b8c:	f04f 0300 	mov.w	r3, #0
 8015b90:	f003 0301 	and.w	r3, r3, #1
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d002      	beq.n	8015ba0 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x28>
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f000 fc84 	bl	80164a8 <_ZdlPv>
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f107 0708 	add.w	r7, r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	0801c1d0 	.word	0x0801c1d0

08015bb0 <_ZN24CLedHeartBeatSTM32F4DiscD0Ev>:
CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
	ledState = LED_Up;
	ledRate = newRate;
}

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
	// nothing to destroy
}
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f7ff ffdd 	bl	8015b78 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f000 fc72 	bl	80164a8 <_ZdlPv>
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f107 0708 	add.w	r7, r7, #8
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on succsess
  */
bool CLedHeartBeatSTM32F4Disc::HardwareInit(){
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]

	STM_EVAL_LEDInit(LED3);
 8015bd8:	f04f 0001 	mov.w	r0, #1
 8015bdc:	f7f9 f862 	bl	800eca4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8015be0:	f04f 0000 	mov.w	r0, #0
 8015be4:	f7f9 f85e 	bl	800eca4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8015be8:	f04f 0002 	mov.w	r0, #2
 8015bec:	f7f9 f85a 	bl	800eca4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8015bf0:	f04f 0003 	mov.w	r0, #3
 8015bf4:	f7f9 f856 	bl	800eca4 <STM_EVAL_LEDInit>
	return true;
 8015bf8:	f04f 0301 	mov.w	r3, #1
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f107 0708 	add.w	r7, r7, #8
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop

08015c08 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
	while(1){
		switch(ledState){
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	7b1b      	ldrb	r3, [r3, #12]
 8015c14:	2b03      	cmp	r3, #3
 8015c16:	d85f      	bhi.n	8015cd8 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xd0>
 8015c18:	a201      	add	r2, pc, #4	; (adr r2, 8015c20 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x18>)
 8015c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c1e:	bf00      	nop
 8015c20:	08015c31 	.word	0x08015c31
 8015c24:	08015c5b 	.word	0x08015c5b
 8015c28:	08015c85 	.word	0x08015c85
 8015c2c:	08015caf 	.word	0x08015caf
		case LED_Up:
			STM_EVAL_LEDOn(LED3);
 8015c30:	f04f 0001 	mov.w	r0, #1
 8015c34:	f7f9 f86c 	bl	800ed10 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 8015c38:	f04f 0002 	mov.w	r0, #2
 8015c3c:	f7f9 f882 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8015c40:	f04f 0003 	mov.w	r0, #3
 8015c44:	f7f9 f87e 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8015c48:	f04f 0000 	mov.w	r0, #0
 8015c4c:	f7f9 f87a 	bl	800ed44 <STM_EVAL_LEDOff>
			ledState = LED_Right;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f04f 0201 	mov.w	r2, #1
 8015c56:	731a      	strb	r2, [r3, #12]
			break;
 8015c58:	e043      	b.n	8015ce2 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Right:
			STM_EVAL_LEDOff(LED3);
 8015c5a:	f04f 0001 	mov.w	r0, #1
 8015c5e:	f7f9 f871 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED5);
 8015c62:	f04f 0002 	mov.w	r0, #2
 8015c66:	f7f9 f853 	bl	800ed10 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED6);
 8015c6a:	f04f 0003 	mov.w	r0, #3
 8015c6e:	f7f9 f869 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8015c72:	f04f 0000 	mov.w	r0, #0
 8015c76:	f7f9 f865 	bl	800ed44 <STM_EVAL_LEDOff>
			ledState = LED_Down;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f04f 0202 	mov.w	r2, #2
 8015c80:	731a      	strb	r2, [r3, #12]
			break;
 8015c82:	e02e      	b.n	8015ce2 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Down:
			STM_EVAL_LEDOff(LED3);
 8015c84:	f04f 0001 	mov.w	r0, #1
 8015c88:	f7f9 f85c 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8015c8c:	f04f 0002 	mov.w	r0, #2
 8015c90:	f7f9 f858 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED6);
 8015c94:	f04f 0003 	mov.w	r0, #3
 8015c98:	f7f9 f83a 	bl	800ed10 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED4);
 8015c9c:	f04f 0000 	mov.w	r0, #0
 8015ca0:	f7f9 f850 	bl	800ed44 <STM_EVAL_LEDOff>
			ledState = LED_Left;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f04f 0203 	mov.w	r2, #3
 8015caa:	731a      	strb	r2, [r3, #12]
			break;
 8015cac:	e019      	b.n	8015ce2 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Left:
			STM_EVAL_LEDOff(LED3);
 8015cae:	f04f 0001 	mov.w	r0, #1
 8015cb2:	f7f9 f847 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8015cb6:	f04f 0002 	mov.w	r0, #2
 8015cba:	f7f9 f843 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8015cbe:	f04f 0003 	mov.w	r0, #3
 8015cc2:	f7f9 f83f 	bl	800ed44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED4);
 8015cc6:	f04f 0000 	mov.w	r0, #0
 8015cca:	f7f9 f821 	bl	800ed10 <STM_EVAL_LEDOn>
			ledState = LED_Up;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f04f 0200 	mov.w	r2, #0
 8015cd4:	731a      	strb	r2, [r3, #12]
			break;
 8015cd6:	e004      	b.n	8015ce2 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		default:
			ledState = LED_Up;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f04f 0200 	mov.w	r2, #0
 8015cde:	731a      	strb	r2, [r3, #12]
			break;
 8015ce0:	bf00      	nop
		}
		vTaskDelay(ledRate); // 500ms delay
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	691b      	ldr	r3, [r3, #16]
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fa ff88 	bl	8010bfc <vTaskDelay>
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
	while(1){
 8015cec:	e790      	b.n	8015c10 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x8>
 8015cee:	bf00      	nop

08015cf0 <main>:
/**
  * @brief  main function
  * @param  None
  * @retval None
  */
int main(void){
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
	 * then FreeRTOS takes control of execution
	 */
	//CFreeRTOS::InitHardwareForManagedTasks();
	//CFreeRTOS::StartScheduler();

	g_FileHandler.HardwareInit();
 8015cf6:	f640 2094 	movw	r0, #2708	; 0xa94
 8015cfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015cfe:	f7fd fbfb 	bl	80134f8 <_ZN12CFileHandler12HardwareInitEv>

	g_FileHandler.Run();
 8015d02:	f640 2094 	movw	r0, #2708	; 0xa94
 8015d06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d0a:	f7fd fc35 	bl	8013578 <_ZN12CFileHandler3RunEv>


	while(1){
		u++;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f103 0301 	add.w	r3, r3, #1
 8015d14:	607b      	str	r3, [r7, #4]
	g_FileHandler.HardwareInit();

	g_FileHandler.Run();


	while(1){
 8015d16:	e7fa      	b.n	8015d0e <main+0x1e>

08015d18 <vApplicationStackOverflowHook>:
		configASSERT( 0 );  // Latch on any failure / error.
	}

	// A required FreeRTOS function. gets called on stack overflow
	// ----------------------------------------------------------------------------
	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 8015d18:	b480      	push	{r7}
 8015d1a:	b083      	sub	sp, #12
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
		/* TODO, implement your code here */
		while(1);
 8015d22:	e7fe      	b.n	8015d22 <vApplicationStackOverflowHook+0xa>

08015d24 <EVAL_AUDIO_GetSampleCallBack>:
	}

	/* User Callbacks: user has to implement these functions in his code if
	  they are needed. -----------------------------------------------------------*/

	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8015d24:	b480      	push	{r7}
 8015d26:	af00      	add	r7, sp, #0
		return -1;
 8015d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bc80      	pop	{r7}
 8015d32:	4770      	bx	lr

08015d34 <EVAL_AUDIO_TransferComplete_CallBack>:
	/* This function is called when the requested data has been completely transferred.
	   In Normal mode (when  the define AUDIO_MAL_MODE_NORMAL is enabled) this function
	   is called at the end of the whole audio file.
	   In circular mode (when  the define AUDIO_MAL_MODE_CIRCULAR is enabled) this
	   function is called at the end of the current buffer transmission. */
	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]

	}
 8015d3e:	f107 070c 	add.w	r7, r7, #12
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bc80      	pop	{r7}
 8015d46:	4770      	bx	lr

08015d48 <_Z41__static_initialization_and_destruction_0ii>:
	   Typically the user implementation of this callback should reset MEMS peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
		return -1;
	}
} // extern "C"
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
 8015d50:	6039      	str	r1, [r7, #0]
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d15e      	bne.n	8015e16 <_Z41__static_initialization_and_destruction_0ii+0xce>
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d159      	bne.n	8015e16 <_Z41__static_initialization_and_destruction_0ii+0xce>

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 8015d62:	f640 2068 	movw	r0, #2664	; 0xa68
 8015d66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d6a:	f04f 0132 	mov.w	r1, #50	; 0x32
 8015d6e:	f7ff fee7 	bl	8015b40 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>
 8015d72:	f645 3379 	movw	r3, #23417	; 0x5b79
 8015d76:	f6c0 0301 	movt	r3, #2049	; 0x801
 8015d7a:	f640 2068 	movw	r0, #2664	; 0xa68
 8015d7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d82:	4619      	mov	r1, r3
 8015d84:	f240 0200 	movw	r2, #0
 8015d88:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8015d8c:	f000 fb86 	bl	801649c <__aeabi_atexit>
CT6963_GPIO_Interface g_Display;
 8015d90:	f640 207c 	movw	r0, #2684	; 0xa7c
 8015d94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d98:	f7fa f9ea 	bl	8010170 <_ZN21CT6963_GPIO_InterfaceC1Ev>
 8015d9c:	f240 1399 	movw	r3, #409	; 0x199
 8015da0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8015da4:	f640 207c 	movw	r0, #2684	; 0xa7c
 8015da8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015dac:	4619      	mov	r1, r3
 8015dae:	f240 0200 	movw	r2, #0
 8015db2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8015db6:	f000 fb71 	bl	801649c <__aeabi_atexit>
CMenue	g_Menue(&g_Display);
 8015dba:	f640 2084 	movw	r0, #2692	; 0xa84
 8015dbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015dc2:	f640 217c 	movw	r1, #2684	; 0xa7c
 8015dc6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8015dca:	f7f9 f8fd 	bl	800efc8 <_ZN6CMenueC1EP11CGraphicLCD>
 8015dce:	f64e 73f9 	movw	r3, #61433	; 0xeff9
 8015dd2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8015dd6:	f640 2084 	movw	r0, #2692	; 0xa84
 8015dda:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015dde:	4619      	mov	r1, r3
 8015de0:	f240 0200 	movw	r2, #0
 8015de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8015de8:	f000 fb58 	bl	801649c <__aeabi_atexit>
CFileHandler g_FileHandler;
 8015dec:	f640 2094 	movw	r0, #2708	; 0xa94
 8015df0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015df4:	f7fd fb38 	bl	8013468 <_ZN12CFileHandlerC1Ev>
 8015df8:	f243 43a1 	movw	r3, #13473	; 0x34a1
 8015dfc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8015e00:	f640 2094 	movw	r0, #2708	; 0xa94
 8015e04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015e08:	4619      	mov	r1, r3
 8015e0a:	f240 0200 	movw	r2, #0
 8015e0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8015e12:	f000 fb43 	bl	801649c <__aeabi_atexit>
	   Typically the user implementation of this callback should reset MEMS peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
		return -1;
	}
} // extern "C"
 8015e16:	f107 0708 	add.w	r7, r7, #8
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop

08015e20 <_GLOBAL__sub_I_g_LedTast>:
 8015e20:	b580      	push	{r7, lr}
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	f04f 0001 	mov.w	r0, #1
 8015e28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015e2c:	f7ff ff8c 	bl	8015d48 <_Z41__static_initialization_and_destruction_0ii>
 8015e30:	bd80      	pop	{r7, pc}
 8015e32:	bf00      	nop

08015e34 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8015e36:	e003      	b.n	8015e40 <LoopCopyDataInit>

08015e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8015e38:	4b0e      	ldr	r3, [pc, #56]	; (8015e74 <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 8015e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8015e3e:	3104      	adds	r1, #4

08015e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8015e40:	480d      	ldr	r0, [pc, #52]	; (8015e78 <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 8015e42:	4b0e      	ldr	r3, [pc, #56]	; (8015e7c <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 8015e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8015e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8015e48:	d3f6      	bcc.n	8015e38 <CopyDataInit>
  ldr  r2, =_sbss
 8015e4a:	4a0d      	ldr	r2, [pc, #52]	; (8015e80 <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 8015e4c:	e002      	b.n	8015e54 <LoopFillZerobss>

08015e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8015e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015e50:	f842 3b04 	str.w	r3, [r2], #4

08015e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015e54:	4b0b      	ldr	r3, [pc, #44]	; (8015e84 <LoopFillZerobss+0x30>)
  cmp  r2, r3
 8015e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8015e58:	d3f9      	bcc.n	8015e4e <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8015e5a:	480b      	ldr	r0, [pc, #44]	; (8015e88 <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 8015e5c:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8015e5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 8015e62:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8015e64:	f000 f934 	bl	80160d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015e68:	f7f1 f892 	bl	8006f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015e6c:	f7ff ff40 	bl	8015cf0 <main>
  bx  lr    
 8015e70:	4770      	bx	lr
 8015e72:	0000      	.short	0x0000
 8015e74:	0801c9f8 	.word	0x0801c9f8
 8015e78:	20000000 	.word	0x20000000
 8015e7c:	2000090c 	.word	0x2000090c
 8015e80:	20000910 	.word	0x20000910
 8015e84:	2000188c 	.word	0x2000188c
 8015e88:	e000ed88 	.word	0xe000ed88

08015e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015e8c:	e7fe      	b.n	8015e8c <ADC_IRQHandler>
	...

08015e90 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8015e90:	b480      	push	{r7}
 8015e92:	af00      	add	r7, sp, #0
}
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bc80      	pop	{r7}
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop

08015e9c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {}
 8015ea0:	e7fe      	b.n	8015ea0 <HardFault_Handler+0x4>
 8015ea2:	bf00      	nop

08015ea4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {}
 8015ea8:	e7fe      	b.n	8015ea8 <MemManage_Handler+0x4>
 8015eaa:	bf00      	nop

08015eac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8015eac:	b480      	push	{r7}
 8015eae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {}
 8015eb0:	e7fe      	b.n	8015eb0 <BusFault_Handler+0x4>
 8015eb2:	bf00      	nop

08015eb4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {}
 8015eb8:	e7fe      	b.n	8015eb8 <UsageFault_Handler+0x4>
 8015eba:	bf00      	nop

08015ebc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
 8015ebc:	b480      	push	{r7}
 8015ebe:	af00      	add	r7, sp, #0
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bc80      	pop	{r7}
 8015ec4:	4770      	bx	lr
 8015ec6:	bf00      	nop

08015ec8 <SDIO_IRQHandler>:
  * @brief  This function handles SDIO global interrupt request.
  * @param  None
  * @retval None
  */
void SDIO_IRQHandler(void)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	af00      	add	r7, sp, #0
  /* Process All SDIO Interrupt Sources */
  SD_ProcessIRQSrc();
 8015ecc:	f7ff f8a4 	bl	8015018 <SD_ProcessIRQSrc>
}
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop

08015ed4 <DMA2_Stream3_IRQHandler>:
  *         requests.
  * @param  None
  * @retval None
  */
void SD_SDIO_DMA_IRQHANDLER(void)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	af00      	add	r7, sp, #0
  /* Process DMA2 Stream3 or DMA2 Stream6 Interrupt Sources */
  SD_ProcessDMAIRQ();
 8015ed8:	f7ff f926 	bl	8015128 <SD_ProcessDMAIRQ>
}
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop

08015ee0 <_exit>:

size_t   __malloc_margin = 256;
char    *__brkval;

void _exit(int code)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b083      	sub	sp, #12
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
    for (;;);
 8015ee8:	e7fe      	b.n	8015ee8 <_exit+0x8>
 8015eea:	bf00      	nop

08015eec <_read_r>:
}


ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b085      	sub	sp, #20
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	60b9      	str	r1, [r7, #8]
 8015ef6:	607a      	str	r2, [r7, #4]
 8015ef8:	603b      	str	r3, [r7, #0]
    //return uart_read_r(r, fd, ptr, len);
	/**
	 * printf mapping function
	 */
	return 0;
 8015efa:	f04f 0300 	mov.w	r3, #0
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	f107 0714 	add.w	r7, r7, #20
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bc80      	pop	{r7}
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop

08015f0c <_write_r>:


ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b085      	sub	sp, #20
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
 8015f18:	603b      	str	r3, [r7, #0]
    //return uart_write_r(r, fd, ptr, len);
	/**
	 * printf maping function
	 */
	return 0;
 8015f1a:	f04f 0300 	mov.w	r3, #0
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f107 0714 	add.w	r7, r7, #20
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bc80      	pop	{r7}
 8015f28:	4770      	bx	lr
 8015f2a:	bf00      	nop

08015f2c <_lseek_r>:


off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b085      	sub	sp, #20
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]

    r->_errno = ENOSYS;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	f04f 0258 	mov.w	r2, #88	; 0x58
 8015f40:	601a      	str	r2, [r3, #0]
    return -1;
 8015f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	f107 0714 	add.w	r7, r7, #20
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bc80      	pop	{r7}
 8015f50:	4770      	bx	lr
 8015f52:	bf00      	nop

08015f54 <_close_r>:


int _close_r(struct _reent *r, int fd)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
    r->_errno = ENOSYS;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f04f 0258 	mov.w	r2, #88	; 0x58
 8015f64:	601a      	str	r2, [r3, #0]
    return -1;
 8015f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f107 070c 	add.w	r7, r7, #12
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bc80      	pop	{r7}
 8015f74:	4770      	bx	lr
 8015f76:	bf00      	nop

08015f78 <_fstat_r>:


int _fstat_r(struct _reent *r, int fd, struct stat *st)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b085      	sub	sp, #20
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
    if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	db09      	blt.n	8015f9e <_fstat_r+0x26>
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	dc06      	bgt.n	8015f9e <_fstat_r+0x26>
      st->st_mode = S_IFCHR;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015f96:	605a      	str	r2, [r3, #4]
      return 0;
 8015f98:	f04f 0300 	mov.w	r3, #0
 8015f9c:	e005      	b.n	8015faa <_fstat_r+0x32>
    }

    r->_errno = ENOSYS;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	f04f 0258 	mov.w	r2, #88	; 0x58
 8015fa4:	601a      	str	r2, [r3, #0]
    return -1;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	f107 0714 	add.w	r7, r7, #20
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bc80      	pop	{r7}
 8015fb4:	4770      	bx	lr
 8015fb6:	bf00      	nop

08015fb8 <_isatty_r>:


int _isatty_r(struct _reent *r, int fd)
{
 8015fb8:	b480      	push	{r7}
 8015fba:	b083      	sub	sp, #12
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
    return 1;
 8015fc2:	f04f 0301 	mov.w	r3, #1
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f107 070c 	add.w	r7, r7, #12
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bc80      	pop	{r7}
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop

08015fd4 <_sbrk_r>:


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 8015fd4:	b490      	push	{r4, r7}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 8015fde:	f641 0388 	movw	r3, #6280	; 0x1888
 8015fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d108      	bne.n	8015ffe <_sbrk_r+0x2a>
        __brkval = &end;
 8015fec:	f641 0388 	movw	r3, #6280	; 0x1888
 8015ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ff4:	f641 028c 	movw	r2, #6284	; 0x188c
 8015ff8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8015ffc:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 8015ffe:	f641 0388 	movw	r3, #6280	; 0x1888
 8016002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016006:	681a      	ldr	r2, [r3, #0]
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 801600c:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8016010:	4623      	mov	r3, r4
 8016012:	4619      	mov	r1, r3
 8016014:	f640 1300 	movw	r3, #2304	; 0x900
 8016018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	1acb      	subs	r3, r1, r3
 8016020:	429a      	cmp	r2, r3
 8016022:	d906      	bls.n	8016032 <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f04f 020c 	mov.w	r2, #12
 801602a:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 801602c:	f04f 33ff 	mov.w	r3, #4294967295
 8016030:	e012      	b.n	8016058 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 8016032:	f641 0388 	movw	r3, #6280	; 0x1888
 8016036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 801603e:	f641 0388 	movw	r3, #6280	; 0x1888
 8016042:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	18d2      	adds	r2, r2, r3
 801604c:	f641 0388 	movw	r3, #6280	; 0x1888
 8016050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016054:	601a      	str	r2, [r3, #0]

    return ret;
 8016056:	68fb      	ldr	r3, [r7, #12]
}
 8016058:	4618      	mov	r0, r3
 801605a:	f107 0710 	add.w	r7, r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bc90      	pop	{r4, r7}
 8016062:	4770      	bx	lr

08016064 <_kill_r>:


int _kill_r(struct _reent *r, int pid, int signal)
{
 8016064:	b480      	push	{r7}
 8016066:	b085      	sub	sp, #20
 8016068:	af00      	add	r7, sp, #0
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	607a      	str	r2, [r7, #4]
    r->_errno = ENOSYS;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f04f 0258 	mov.w	r2, #88	; 0x58
 8016076:	601a      	str	r2, [r3, #0]
    return -1;
 8016078:	f04f 33ff 	mov.w	r3, #4294967295
}
 801607c:	4618      	mov	r0, r3
 801607e:	f107 0714 	add.w	r7, r7, #20
 8016082:	46bd      	mov	sp, r7
 8016084:	bc80      	pop	{r7}
 8016086:	4770      	bx	lr

08016088 <_getpid_r>:


int _getpid_r(struct _reent *r)
{
 8016088:	b480      	push	{r7}
 801608a:	b083      	sub	sp, #12
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
    r->_errno = ENOSYS;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f04f 0258 	mov.w	r2, #88	; 0x58
 8016096:	601a      	str	r2, [r3, #0]
    return -1;
 8016098:	f04f 33ff 	mov.w	r3, #4294967295
}
 801609c:	4618      	mov	r0, r3
 801609e:	f107 070c 	add.w	r7, r7, #12
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bc80      	pop	{r7}
 80160a6:	4770      	bx	lr

080160a8 <__malloc_lock>:


void __malloc_lock(struct _reent *r)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 80160b0:	f7fa fc3a 	bl	8010928 <vPortEnterCritical>
}
 80160b4:	f107 0708 	add.w	r7, r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 80160c4:	f7fa fc46 	bl	8010954 <vPortExitCritical>
}
 80160c8:	f107 0708 	add.w	r7, r7, #8
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80160d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80160d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80160dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80160e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80160e4:	6812      	ldr	r2, [r2, #0]
 80160e6:	f042 0201 	orr.w	r2, r2, #1
 80160ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80160ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80160f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80160f4:	f04f 0200 	mov.w	r2, #0
 80160f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80160fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80160fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016102:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016106:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801610a:	6812      	ldr	r2, [r2, #0]
 801610c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8016110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8016114:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8016116:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801611a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801611e:	f243 0210 	movw	r2, #12304	; 0x3010
 8016122:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8016126:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8016128:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801612c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016130:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016134:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016138:	6812      	ldr	r2, [r2, #0]
 801613a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801613e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8016140:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016144:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016148:	f04f 0200 	mov.w	r2, #0
 801614c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 801614e:	f000 f809 	bl	8016164 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8016152:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8016156:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801615a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801615e:	609a      	str	r2, [r3, #8]
#endif
}
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop

08016164 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8016164:	b480      	push	{r7}
 8016166:	b083      	sub	sp, #12
 8016168:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 801616a:	f04f 0300 	mov.w	r3, #0
 801616e:	607b      	str	r3, [r7, #4]
 8016170:	f04f 0300 	mov.w	r3, #0
 8016174:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8016176:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801617a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801617e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016182:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016186:	6812      	ldr	r2, [r2, #0]
 8016188:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801618c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 801618e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016192:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801619c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f103 0301 	add.w	r3, r3, #1
 80161a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d103      	bne.n	80161b4 <SetSysClock+0x50>
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80161b2:	d1ec      	bne.n	801618e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80161b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80161b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d003      	beq.n	80161ce <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80161c6:	f04f 0301 	mov.w	r3, #1
 80161ca:	603b      	str	r3, [r7, #0]
 80161cc:	e002      	b.n	80161d4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80161ce:	f04f 0300 	mov.w	r3, #0
 80161d2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	2b01      	cmp	r3, #1
 80161d8:	f040 8082 	bne.w	80162e0 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80161dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80161e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80161e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80161e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80161ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80161ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80161f2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80161f4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80161f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80161fc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8016200:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8016204:	6812      	ldr	r2, [r2, #0]
 8016206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801620a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 801620c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016210:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016214:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016218:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801621c:	6892      	ldr	r2, [r2, #8]
 801621e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8016220:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016224:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016228:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801622c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016230:	6892      	ldr	r2, [r2, #8]
 8016232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016236:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8016238:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801623c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016240:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016244:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016248:	6892      	ldr	r2, [r2, #8]
 801624a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 801624e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8016250:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016258:	f245 4208 	movw	r2, #21512	; 0x5408
 801625c:	f2c0 7240 	movt	r2, #1856	; 0x740
 8016260:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8016262:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016266:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801626a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801626e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8016272:	6812      	ldr	r2, [r2, #0]
 8016274:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8016278:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 801627a:	bf00      	nop
 801627c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016280:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801628a:	2b00      	cmp	r3, #0
 801628c:	d0f6      	beq.n	801627c <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 801628e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016292:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016296:	f240 6205 	movw	r2, #1541	; 0x605
 801629a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 801629c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80162a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80162a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80162a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80162ac:	6892      	ldr	r2, [r2, #8]
 80162ae:	f022 0203 	bic.w	r2, r2, #3
 80162b2:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80162b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80162b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80162bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80162c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80162c4:	6892      	ldr	r2, [r2, #8]
 80162c6:	f042 0202 	orr.w	r2, r2, #2
 80162ca:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80162cc:	bf00      	nop
 80162ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80162d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80162d6:	689b      	ldr	r3, [r3, #8]
 80162d8:	f003 030c 	and.w	r3, r3, #12
 80162dc:	2b08      	cmp	r3, #8
 80162de:	d1f6      	bne.n	80162ce <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80162e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80162e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80162e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80162ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80162f0:	6892      	ldr	r2, [r2, #8]
 80162f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80162f6:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80162f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80162fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016300:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8016304:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8016308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 801630c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016310:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016314:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016318:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801631c:	6812      	ldr	r2, [r2, #0]
 801631e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8016322:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8016324:	bf00      	nop
 8016326:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801632a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016334:	2b00      	cmp	r3, #0
 8016336:	d0f6      	beq.n	8016326 <SetSysClock+0x1c2>
  {
  }
}
 8016338:	f107 070c 	add.w	r7, r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	bc80      	pop	{r7}
 8016340:	4770      	bx	lr
 8016342:	bf00      	nop

08016344 <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 801634a:	f7fa faed 	bl	8010928 <vPortEnterCritical>

    int t = TIM7->CNT;
 801634e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016352:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8016356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016358:	607b      	str	r3, [r7, #4]
    if (t < t0)
 801635a:	f640 7350 	movw	r3, #3920	; 0xf50
 801635e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016362:	881b      	ldrh	r3, [r3, #0]
 8016364:	461a      	mov	r2, r3
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	429a      	cmp	r2, r3
 801636a:	dd03      	ble.n	8016374 <get_us_time+0x30>
        t += 0x10000;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8016372:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 8016374:	f640 7350 	movw	r3, #3920	; 0xf50
 8016378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801637c:	881b      	ldrh	r3, [r3, #0]
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	1ad1      	subs	r1, r2, r3
 8016382:	460a      	mov	r2, r1
 8016384:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016388:	f640 7158 	movw	r1, #3928	; 0xf58
 801638c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8016390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016394:	1880      	adds	r0, r0, r2
 8016396:	eb41 0103 	adc.w	r1, r1, r3
 801639a:	f640 7358 	movw	r3, #3928	; 0xf58
 801639e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163a2:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	b29a      	uxth	r2, r3
 80163aa:	f640 7350 	movw	r3, #3920	; 0xf50
 80163ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163b2:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 80163b4:	f7fa face 	bl	8010954 <vPortExitCritical>

    return tickcount;
 80163b8:	f640 7358 	movw	r3, #3928	; 0xf58
 80163bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80163c0:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80163c4:	4610      	mov	r0, r2
 80163c6:	4619      	mov	r1, r3
 80163c8:	f107 0708 	add.w	r7, r7, #8
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 80163d0:	b480      	push	{r7}
 80163d2:	b085      	sub	sp, #20
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
    uint16_t  t0 = TIM7->CNT;
 80163d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80163dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80163e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163e2:	81fb      	strh	r3, [r7, #14]
    for (;;) {
        int  t = TIM7->CNT;
 80163e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80163e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80163ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ee:	60bb      	str	r3, [r7, #8]
        if (t < t0)
 80163f0:	89fa      	ldrh	r2, [r7, #14]
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	429a      	cmp	r2, r3
 80163f6:	dd03      	ble.n	8016400 <delay_us+0x30>
            t += 0x10000;
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80163fe:	60bb      	str	r3, [r7, #8]

        if (us < t - t0)
 8016400:	89fb      	ldrh	r3, [r7, #14]
 8016402:	68ba      	ldr	r2, [r7, #8]
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	461a      	mov	r2, r3
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	429a      	cmp	r2, r3
 801640c:	d808      	bhi.n	8016420 <delay_us+0x50>
            return;

        us -= t - t0;
 801640e:	89fa      	ldrh	r2, [r7, #14]
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	1ad3      	subs	r3, r2, r3
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	18d3      	adds	r3, r2, r3
 8016418:	607b      	str	r3, [r7, #4]
        t0  = t;
 801641a:	68bb      	ldr	r3, [r7, #8]
 801641c:	81fb      	strh	r3, [r7, #14]
    }
 801641e:	e7e1      	b.n	80163e4 <delay_us+0x14>
        int  t = TIM7->CNT;
        if (t < t0)
            t += 0x10000;

        if (us < t - t0)
            return;
 8016420:	bf00      	nop

        us -= t - t0;
        t0  = t;
    }
}
 8016422:	f107 0714 	add.w	r7, r7, #20
 8016426:	46bd      	mov	sp, r7
 8016428:	bc80      	pop	{r7}
 801642a:	4770      	bx	lr

0801642c <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b084      	sub	sp, #16
 8016430:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 8016432:	463b      	mov	r3, r7
 8016434:	4618      	mov	r0, r3
 8016436:	f7f8 f8f3 	bl	800e620 <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 801643a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801643e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016442:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016446:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801644a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801644c:	f042 0220 	orr.w	r2, r2, #32
 8016450:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 8016452:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016456:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801645a:	68f9      	ldr	r1, [r7, #12]
 801645c:	f64d 6283 	movw	r2, #56963	; 0xde83
 8016460:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8016464:	fba2 0201 	umull	r0, r2, r2, r1
 8016468:	ea4f 4292 	mov.w	r2, r2, lsr #18
 801646c:	b292      	uxth	r2, r2
 801646e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016472:	b292      	uxth	r2, r2
 8016474:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8016476:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801647a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801647e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016482:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 8016484:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016488:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801648c:	f04f 0201 	mov.w	r2, #1
 8016490:	801a      	strh	r2, [r3, #0]
}
 8016492:	f107 0710 	add.w	r7, r7, #16
 8016496:	46bd      	mov	sp, r7
 8016498:	bd80      	pop	{r7, pc}
 801649a:	bf00      	nop

0801649c <__aeabi_atexit>:
 801649c:	4603      	mov	r3, r0
 801649e:	4608      	mov	r0, r1
 80164a0:	4619      	mov	r1, r3
 80164a2:	f7f0 bb0b 	b.w	8006abc <__cxa_atexit>
 80164a6:	bf00      	nop

080164a8 <_ZdlPv>:
 80164a8:	b108      	cbz	r0, 80164ae <_ZdlPv+0x6>
 80164aa:	f7f0 bd9d 	b.w	8006fe8 <free>
 80164ae:	4770      	bx	lr

080164b0 <__cxa_pure_virtual>:
 80164b0:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
 80164b4:	221b      	movs	r2, #27
 80164b6:	b508      	push	{r3, lr}
 80164b8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80164bc:	2002      	movs	r0, #2
 80164be:	f7f3 f877 	bl	80095b0 <write>
 80164c2:	f000 f815 	bl	80164f0 <_ZSt9terminatev>
 80164c6:	bf00      	nop

080164c8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80164c8:	b508      	push	{r3, lr}
 80164ca:	4780      	blx	r0
 80164cc:	f7f0 faca 	bl	8006a64 <abort>
 80164d0:	f000 fa5a 	bl	8016988 <__cxa_begin_catch>
 80164d4:	f7f0 fac6 	bl	8006a64 <abort>
 80164d8:	460c      	mov	r4, r1
 80164da:	4605      	mov	r5, r0
 80164dc:	f000 fa98 	bl	8016a10 <__cxa_end_catch>
 80164e0:	3401      	adds	r4, #1
 80164e2:	d001      	beq.n	80164e8 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 80164e4:	f000 f8a6 	bl	8016634 <__cxa_end_cleanup>
 80164e8:	4628      	mov	r0, r5
 80164ea:	f000 f9bf 	bl	801686c <__cxa_call_unexpected>
 80164ee:	bf00      	nop

080164f0 <_ZSt9terminatev>:
 80164f0:	b508      	push	{r3, lr}
 80164f2:	f640 1304 	movw	r3, #2308	; 0x904
 80164f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	f7ff ffe4 	bl	80164c8 <_ZN10__cxxabiv111__terminateEPFvvE>

08016500 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8016500:	b508      	push	{r3, lr}
 8016502:	4780      	blx	r0
 8016504:	f7ff fff4 	bl	80164f0 <_ZSt9terminatev>

08016508 <_ZSt10unexpectedv>:
 8016508:	b508      	push	{r3, lr}
 801650a:	f640 1308 	movw	r3, #2312	; 0x908
 801650e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	4798      	blx	r3
 8016516:	f7ff ffeb 	bl	80164f0 <_ZSt9terminatev>
 801651a:	bf00      	nop

0801651c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 801651c:	4b3e      	ldr	r3, [pc, #248]	; (8016618 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 801651e:	b570      	push	{r4, r5, r6, lr}
 8016520:	b082      	sub	sp, #8
 8016522:	781a      	ldrb	r2, [r3, #0]
 8016524:	2a00      	cmp	r2, #0
 8016526:	d135      	bne.n	8016594 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8016528:	2401      	movs	r4, #1
 801652a:	701c      	strb	r4, [r3, #0]
 801652c:	f000 fe48 	bl	80171c0 <__cxa_current_exception_type>
 8016530:	2800      	cmp	r0, #0
 8016532:	d047      	beq.n	80165c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa8>
 8016534:	6845      	ldr	r5, [r0, #4]
 8016536:	f04f 36ff 	mov.w	r6, #4294967295
 801653a:	782b      	ldrb	r3, [r5, #0]
 801653c:	2b2a      	cmp	r3, #42	; 0x2a
 801653e:	ab02      	add	r3, sp, #8
 8016540:	bf08      	it	eq
 8016542:	192d      	addeq	r5, r5, r4
 8016544:	2100      	movs	r1, #0
 8016546:	460a      	mov	r2, r1
 8016548:	f843 6d04 	str.w	r6, [r3, #-4]!
 801654c:	4628      	mov	r0, r5
 801654e:	4c33      	ldr	r4, [pc, #204]	; (801661c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8016550:	f7ef fa28 	bl	80059a4 <__cxa_demangle>
 8016554:	2101      	movs	r1, #1
 8016556:	2230      	movs	r2, #48	; 0x30
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	4606      	mov	r6, r0
 801655e:	4830      	ldr	r0, [pc, #192]	; (8016620 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8016560:	f7f0 fd02 	bl	8006f68 <fwrite>
 8016564:	9b01      	ldr	r3, [sp, #4]
 8016566:	b17b      	cbz	r3, 8016588 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8016568:	6823      	ldr	r3, [r4, #0]
 801656a:	4628      	mov	r0, r5
 801656c:	68d9      	ldr	r1, [r3, #12]
 801656e:	f7f0 fb23 	bl	8006bb8 <fputs>
 8016572:	6823      	ldr	r3, [r4, #0]
 8016574:	2101      	movs	r1, #1
 8016576:	482b      	ldr	r0, [pc, #172]	; (8016624 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8016578:	2202      	movs	r2, #2
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	f7f0 fcf4 	bl	8006f68 <fwrite>
 8016580:	9b01      	ldr	r3, [sp, #4]
 8016582:	b18b      	cbz	r3, 80165a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8016584:	f000 fde4 	bl	8017150 <__cxa_rethrow>
 8016588:	6823      	ldr	r3, [r4, #0]
 801658a:	4630      	mov	r0, r6
 801658c:	68d9      	ldr	r1, [r3, #12]
 801658e:	f7f0 fb13 	bl	8006bb8 <fputs>
 8016592:	e7ee      	b.n	8016572 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8016594:	4b21      	ldr	r3, [pc, #132]	; (801661c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8016596:	2101      	movs	r1, #1
 8016598:	221d      	movs	r2, #29
 801659a:	4823      	ldr	r0, [pc, #140]	; (8016628 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	68db      	ldr	r3, [r3, #12]
 80165a0:	f7f0 fce2 	bl	8006f68 <fwrite>
 80165a4:	f7f0 fa5e 	bl	8006a64 <abort>
 80165a8:	4630      	mov	r0, r6
 80165aa:	f7f0 fd1d 	bl	8006fe8 <free>
 80165ae:	f000 fdcf 	bl	8017150 <__cxa_rethrow>
 80165b2:	2901      	cmp	r1, #1
 80165b4:	460e      	mov	r6, r1
 80165b6:	d00f      	beq.n	80165d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
 80165b8:	f000 f9e6 	bl	8016988 <__cxa_begin_catch>
 80165bc:	f000 fa28 	bl	8016a10 <__cxa_end_catch>
 80165c0:	f7f0 fa50 	bl	8006a64 <abort>
 80165c4:	4b15      	ldr	r3, [pc, #84]	; (801661c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 80165c6:	4621      	mov	r1, r4
 80165c8:	222d      	movs	r2, #45	; 0x2d
 80165ca:	4818      	ldr	r0, [pc, #96]	; (801662c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	f7f0 fcca 	bl	8006f68 <fwrite>
 80165d4:	f7f0 fa46 	bl	8006a64 <abort>
 80165d8:	f000 f9d6 	bl	8016988 <__cxa_begin_catch>
 80165dc:	4603      	mov	r3, r0
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	689b      	ldr	r3, [r3, #8]
 80165e2:	4798      	blx	r3
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	4631      	mov	r1, r6
 80165e8:	220b      	movs	r2, #11
 80165ea:	68db      	ldr	r3, [r3, #12]
 80165ec:	4605      	mov	r5, r0
 80165ee:	4810      	ldr	r0, [pc, #64]	; (8016630 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
 80165f0:	f7f0 fcba 	bl	8006f68 <fwrite>
 80165f4:	6823      	ldr	r3, [r4, #0]
 80165f6:	4628      	mov	r0, r5
 80165f8:	68d9      	ldr	r1, [r3, #12]
 80165fa:	f7f0 fadd 	bl	8006bb8 <fputs>
 80165fe:	6823      	ldr	r3, [r4, #0]
 8016600:	200a      	movs	r0, #10
 8016602:	68d9      	ldr	r1, [r3, #12]
 8016604:	f7f0 fa9c 	bl	8006b40 <fputc>
 8016608:	f000 fa02 	bl	8016a10 <__cxa_end_catch>
 801660c:	e7d8      	b.n	80165c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 801660e:	f000 f9ff 	bl	8016a10 <__cxa_end_catch>
 8016612:	f000 f80f 	bl	8016634 <__cxa_end_cleanup>
 8016616:	bf00      	nop
 8016618:	20000f60 	.word	0x20000f60
 801661c:	20000008 	.word	0x20000008
 8016620:	0801c22c 	.word	0x0801c22c
 8016624:	0801c260 	.word	0x0801c260
 8016628:	0801c20c 	.word	0x0801c20c
 801662c:	0801c264 	.word	0x0801c264
 8016630:	0801c294 	.word	0x0801c294

08016634 <__cxa_end_cleanup>:
 8016634:	b41e      	push	{r1, r2, r3, r4}
 8016636:	f000 f8a9 	bl	801678c <__gnu_end_cleanup>
 801663a:	bc1e      	pop	{r1, r2, r3, r4}
 801663c:	f7ef ffe0 	bl	8006600 <_Unwind_Resume>

08016640 <__cxa_type_match>:
 8016640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016642:	461e      	mov	r6, r3
 8016644:	7803      	ldrb	r3, [r0, #0]
 8016646:	b083      	sub	sp, #12
 8016648:	460d      	mov	r5, r1
 801664a:	2b47      	cmp	r3, #71	; 0x47
 801664c:	d02c      	beq.n	80166a8 <__cxa_type_match+0x68>
 801664e:	4c31      	ldr	r4, [pc, #196]	; (8016714 <__cxa_type_match+0xd4>)
 8016650:	6823      	ldr	r3, [r4, #0]
 8016652:	4620      	mov	r0, r4
 8016654:	6832      	ldr	r2, [r6, #0]
 8016656:	689b      	ldr	r3, [r3, #8]
 8016658:	9201      	str	r2, [sp, #4]
 801665a:	4798      	blx	r3
 801665c:	b110      	cbz	r0, 8016664 <__cxa_type_match+0x24>
 801665e:	9b01      	ldr	r3, [sp, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	9301      	str	r3, [sp, #4]
 8016664:	682f      	ldr	r7, [r5, #0]
 8016666:	4628      	mov	r0, r5
 8016668:	4621      	mov	r1, r4
 801666a:	aa01      	add	r2, sp, #4
 801666c:	2301      	movs	r3, #1
 801666e:	693f      	ldr	r7, [r7, #16]
 8016670:	47b8      	blx	r7
 8016672:	b1b8      	cbz	r0, 80166a4 <__cxa_type_match+0x64>
 8016674:	9b01      	ldr	r3, [sp, #4]
 8016676:	4a28      	ldr	r2, [pc, #160]	; (8016718 <__cxa_type_match+0xd8>)
 8016678:	6033      	str	r3, [r6, #0]
 801667a:	6812      	ldr	r2, [r2, #0]
 801667c:	682b      	ldr	r3, [r5, #0]
 801667e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016682:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016686:	f000 fea1 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 801668a:	b150      	cbz	r0, 80166a2 <__cxa_type_match+0x62>
 801668c:	68eb      	ldr	r3, [r5, #12]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d03e      	beq.n	8016710 <__cxa_type_match+0xd0>
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4921      	ldr	r1, [pc, #132]	; (801671c <__cxa_type_match+0xdc>)
 8016696:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801669a:	f000 fe97 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 801669e:	2800      	cmp	r0, #0
 80166a0:	d022      	beq.n	80166e8 <__cxa_type_match+0xa8>
 80166a2:	2001      	movs	r0, #1
 80166a4:	b003      	add	sp, #12
 80166a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166a8:	7843      	ldrb	r3, [r0, #1]
 80166aa:	2b4e      	cmp	r3, #78	; 0x4e
 80166ac:	d1cf      	bne.n	801664e <__cxa_type_match+0xe>
 80166ae:	7883      	ldrb	r3, [r0, #2]
 80166b0:	2b55      	cmp	r3, #85	; 0x55
 80166b2:	d1cc      	bne.n	801664e <__cxa_type_match+0xe>
 80166b4:	78c3      	ldrb	r3, [r0, #3]
 80166b6:	2b43      	cmp	r3, #67	; 0x43
 80166b8:	d1c9      	bne.n	801664e <__cxa_type_match+0xe>
 80166ba:	7903      	ldrb	r3, [r0, #4]
 80166bc:	2b46      	cmp	r3, #70	; 0x46
 80166be:	d01c      	beq.n	80166fa <__cxa_type_match+0xba>
 80166c0:	7903      	ldrb	r3, [r0, #4]
 80166c2:	2b43      	cmp	r3, #67	; 0x43
 80166c4:	d1c3      	bne.n	801664e <__cxa_type_match+0xe>
 80166c6:	7943      	ldrb	r3, [r0, #5]
 80166c8:	2b2b      	cmp	r3, #43	; 0x2b
 80166ca:	d1c0      	bne.n	801664e <__cxa_type_match+0xe>
 80166cc:	7983      	ldrb	r3, [r0, #6]
 80166ce:	2b2b      	cmp	r3, #43	; 0x2b
 80166d0:	d1bd      	bne.n	801664e <__cxa_type_match+0xe>
 80166d2:	79c3      	ldrb	r3, [r0, #7]
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	d8ba      	bhi.n	801664e <__cxa_type_match+0xe>
 80166d8:	bf0a      	itet	eq
 80166da:	f850 3c20 	ldreq.w	r3, [r0, #-32]
 80166de:	f850 4c20 	ldrne.w	r4, [r0, #-32]
 80166e2:	f853 4c78 	ldreq.w	r4, [r3, #-120]
 80166e6:	e7b3      	b.n	8016650 <__cxa_type_match+0x10>
 80166e8:	68e8      	ldr	r0, [r5, #12]
 80166ea:	68e1      	ldr	r1, [r4, #12]
 80166ec:	f000 fe6e 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 80166f0:	2800      	cmp	r0, #0
 80166f2:	bf0c      	ite	eq
 80166f4:	2002      	moveq	r0, #2
 80166f6:	2001      	movne	r0, #1
 80166f8:	e7d4      	b.n	80166a4 <__cxa_type_match+0x64>
 80166fa:	7943      	ldrb	r3, [r0, #5]
 80166fc:	2b4f      	cmp	r3, #79	; 0x4f
 80166fe:	d1df      	bne.n	80166c0 <__cxa_type_match+0x80>
 8016700:	7983      	ldrb	r3, [r0, #6]
 8016702:	2b52      	cmp	r3, #82	; 0x52
 8016704:	d1dc      	bne.n	80166c0 <__cxa_type_match+0x80>
 8016706:	79c3      	ldrb	r3, [r0, #7]
 8016708:	4c05      	ldr	r4, [pc, #20]	; (8016720 <__cxa_type_match+0xe0>)
 801670a:	2b00      	cmp	r3, #0
 801670c:	d0a0      	beq.n	8016650 <__cxa_type_match+0x10>
 801670e:	e7d7      	b.n	80166c0 <__cxa_type_match+0x80>
 8016710:	f000 f876 	bl	8016800 <__cxa_bad_typeid>
 8016714:	0801c324 	.word	0x0801c324
 8016718:	0801c384 	.word	0x0801c384
 801671c:	0801c394 	.word	0x0801c394
 8016720:	0801c2b8 	.word	0x0801c2b8

08016724 <__cxa_begin_cleanup>:
 8016724:	b510      	push	{r4, lr}
 8016726:	4604      	mov	r4, r0
 8016728:	f000 f9ec 	bl	8016b04 <__cxa_get_globals>
 801672c:	f1a4 0220 	sub.w	r2, r4, #32
 8016730:	7823      	ldrb	r3, [r4, #0]
 8016732:	2b47      	cmp	r3, #71	; 0x47
 8016734:	d005      	beq.n	8016742 <__cxa_begin_cleanup+0x1e>
 8016736:	6883      	ldr	r3, [r0, #8]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d124      	bne.n	8016786 <__cxa_begin_cleanup+0x62>
 801673c:	6082      	str	r2, [r0, #8]
 801673e:	2001      	movs	r0, #1
 8016740:	bd10      	pop	{r4, pc}
 8016742:	7863      	ldrb	r3, [r4, #1]
 8016744:	2b4e      	cmp	r3, #78	; 0x4e
 8016746:	d1f6      	bne.n	8016736 <__cxa_begin_cleanup+0x12>
 8016748:	78a3      	ldrb	r3, [r4, #2]
 801674a:	2b55      	cmp	r3, #85	; 0x55
 801674c:	d1f3      	bne.n	8016736 <__cxa_begin_cleanup+0x12>
 801674e:	78e3      	ldrb	r3, [r4, #3]
 8016750:	2b43      	cmp	r3, #67	; 0x43
 8016752:	d1f0      	bne.n	8016736 <__cxa_begin_cleanup+0x12>
 8016754:	7923      	ldrb	r3, [r4, #4]
 8016756:	2b43      	cmp	r3, #67	; 0x43
 8016758:	d1ed      	bne.n	8016736 <__cxa_begin_cleanup+0x12>
 801675a:	7963      	ldrb	r3, [r4, #5]
 801675c:	2b2b      	cmp	r3, #43	; 0x2b
 801675e:	d1ea      	bne.n	8016736 <__cxa_begin_cleanup+0x12>
 8016760:	79a3      	ldrb	r3, [r4, #6]
 8016762:	2b2b      	cmp	r3, #43	; 0x2b
 8016764:	d1e7      	bne.n	8016736 <__cxa_begin_cleanup+0x12>
 8016766:	79e3      	ldrb	r3, [r4, #7]
 8016768:	2b01      	cmp	r3, #1
 801676a:	d8e4      	bhi.n	8016736 <__cxa_begin_cleanup+0x12>
 801676c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016770:	3301      	adds	r3, #1
 8016772:	f844 3c04 	str.w	r3, [r4, #-4]
 8016776:	2b01      	cmp	r3, #1
 8016778:	d1e1      	bne.n	801673e <__cxa_begin_cleanup+0x1a>
 801677a:	6883      	ldr	r3, [r0, #8]
 801677c:	f844 3c08 	str.w	r3, [r4, #-8]
 8016780:	6082      	str	r2, [r0, #8]
 8016782:	2001      	movs	r0, #1
 8016784:	bd10      	pop	{r4, pc}
 8016786:	f7ff feb3 	bl	80164f0 <_ZSt9terminatev>
 801678a:	bf00      	nop

0801678c <__gnu_end_cleanup>:
 801678c:	b508      	push	{r3, lr}
 801678e:	f000 f9b9 	bl	8016b04 <__cxa_get_globals>
 8016792:	6883      	ldr	r3, [r0, #8]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d030      	beq.n	80167fa <__gnu_end_cleanup+0x6e>
 8016798:	f893 2020 	ldrb.w	r2, [r3, #32]
 801679c:	2a47      	cmp	r2, #71	; 0x47
 801679e:	d004      	beq.n	80167aa <__gnu_end_cleanup+0x1e>
 80167a0:	2200      	movs	r2, #0
 80167a2:	6082      	str	r2, [r0, #8]
 80167a4:	f103 0020 	add.w	r0, r3, #32
 80167a8:	bd08      	pop	{r3, pc}
 80167aa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80167ae:	2a4e      	cmp	r2, #78	; 0x4e
 80167b0:	d1f6      	bne.n	80167a0 <__gnu_end_cleanup+0x14>
 80167b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80167b6:	2a55      	cmp	r2, #85	; 0x55
 80167b8:	d1f2      	bne.n	80167a0 <__gnu_end_cleanup+0x14>
 80167ba:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80167be:	2a43      	cmp	r2, #67	; 0x43
 80167c0:	d1ee      	bne.n	80167a0 <__gnu_end_cleanup+0x14>
 80167c2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80167c6:	2a43      	cmp	r2, #67	; 0x43
 80167c8:	d1ea      	bne.n	80167a0 <__gnu_end_cleanup+0x14>
 80167ca:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80167ce:	2a2b      	cmp	r2, #43	; 0x2b
 80167d0:	d1e6      	bne.n	80167a0 <__gnu_end_cleanup+0x14>
 80167d2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80167d6:	2a2b      	cmp	r2, #43	; 0x2b
 80167d8:	d1e2      	bne.n	80167a0 <__gnu_end_cleanup+0x14>
 80167da:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80167de:	2a01      	cmp	r2, #1
 80167e0:	d8de      	bhi.n	80167a0 <__gnu_end_cleanup+0x14>
 80167e2:	69da      	ldr	r2, [r3, #28]
 80167e4:	3a01      	subs	r2, #1
 80167e6:	61da      	str	r2, [r3, #28]
 80167e8:	2a00      	cmp	r2, #0
 80167ea:	d1db      	bne.n	80167a4 <__gnu_end_cleanup+0x18>
 80167ec:	699a      	ldr	r2, [r3, #24]
 80167ee:	6082      	str	r2, [r0, #8]
 80167f0:	2200      	movs	r2, #0
 80167f2:	f103 0020 	add.w	r0, r3, #32
 80167f6:	619a      	str	r2, [r3, #24]
 80167f8:	bd08      	pop	{r3, pc}
 80167fa:	f7ff fe79 	bl	80164f0 <_ZSt9terminatev>
 80167fe:	bf00      	nop

08016800 <__cxa_bad_typeid>:
 8016800:	b508      	push	{r3, lr}
 8016802:	2004      	movs	r0, #4
 8016804:	f000 fe98 	bl	8017538 <__cxa_allocate_exception>
 8016808:	4b05      	ldr	r3, [pc, #20]	; (8016820 <__cxa_bad_typeid+0x20>)
 801680a:	f24c 5108 	movw	r1, #50440	; 0xc508
 801680e:	f247 4215 	movw	r2, #29717	; 0x7415
 8016812:	f6c0 0101 	movt	r1, #2049	; 0x801
 8016816:	f6c0 0201 	movt	r2, #2049	; 0x801
 801681a:	6003      	str	r3, [r0, #0]
 801681c:	f000 fc5c 	bl	80170d8 <__cxa_throw>
 8016820:	0801c4f8 	.word	0x0801c4f8

08016824 <__cxa_call_terminate>:
 8016824:	b510      	push	{r4, lr}
 8016826:	4604      	mov	r4, r0
 8016828:	b120      	cbz	r0, 8016834 <__cxa_call_terminate+0x10>
 801682a:	f000 f8ad 	bl	8016988 <__cxa_begin_catch>
 801682e:	7823      	ldrb	r3, [r4, #0]
 8016830:	2b47      	cmp	r3, #71	; 0x47
 8016832:	d001      	beq.n	8016838 <__cxa_call_terminate+0x14>
 8016834:	f7ff fe5c 	bl	80164f0 <_ZSt9terminatev>
 8016838:	7863      	ldrb	r3, [r4, #1]
 801683a:	2b4e      	cmp	r3, #78	; 0x4e
 801683c:	d1fa      	bne.n	8016834 <__cxa_call_terminate+0x10>
 801683e:	78a3      	ldrb	r3, [r4, #2]
 8016840:	2b55      	cmp	r3, #85	; 0x55
 8016842:	d1f7      	bne.n	8016834 <__cxa_call_terminate+0x10>
 8016844:	78e3      	ldrb	r3, [r4, #3]
 8016846:	2b43      	cmp	r3, #67	; 0x43
 8016848:	d1f4      	bne.n	8016834 <__cxa_call_terminate+0x10>
 801684a:	7923      	ldrb	r3, [r4, #4]
 801684c:	2b43      	cmp	r3, #67	; 0x43
 801684e:	d1f1      	bne.n	8016834 <__cxa_call_terminate+0x10>
 8016850:	7963      	ldrb	r3, [r4, #5]
 8016852:	2b2b      	cmp	r3, #43	; 0x2b
 8016854:	d1ee      	bne.n	8016834 <__cxa_call_terminate+0x10>
 8016856:	79a3      	ldrb	r3, [r4, #6]
 8016858:	2b2b      	cmp	r3, #43	; 0x2b
 801685a:	d1eb      	bne.n	8016834 <__cxa_call_terminate+0x10>
 801685c:	79e3      	ldrb	r3, [r4, #7]
 801685e:	2b01      	cmp	r3, #1
 8016860:	d8e8      	bhi.n	8016834 <__cxa_call_terminate+0x10>
 8016862:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8016866:	f7ff fe2f 	bl	80164c8 <_ZN10__cxxabiv111__terminateEPFvvE>
 801686a:	bf00      	nop

0801686c <__cxa_call_unexpected>:
 801686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016870:	b085      	sub	sp, #20
 8016872:	7803      	ldrb	r3, [r0, #0]
 8016874:	2b47      	cmp	r3, #71	; 0x47
 8016876:	d010      	beq.n	801689a <__cxa_call_unexpected+0x2e>
 8016878:	2400      	movs	r4, #0
 801687a:	f04f 0801 	mov.w	r8, #1
 801687e:	46a1      	mov	r9, r4
 8016880:	4625      	mov	r5, r4
 8016882:	4626      	mov	r6, r4
 8016884:	4627      	mov	r7, r4
 8016886:	f000 f87f 	bl	8016988 <__cxa_begin_catch>
 801688a:	f1b8 0f00 	cmp.w	r8, #0
 801688e:	d001      	beq.n	8016894 <__cxa_call_unexpected+0x28>
 8016890:	f7ff fe3a 	bl	8016508 <_ZSt10unexpectedv>
 8016894:	4648      	mov	r0, r9
 8016896:	f7ff fe33 	bl	8016500 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801689a:	7843      	ldrb	r3, [r0, #1]
 801689c:	2b4e      	cmp	r3, #78	; 0x4e
 801689e:	d1eb      	bne.n	8016878 <__cxa_call_unexpected+0xc>
 80168a0:	7883      	ldrb	r3, [r0, #2]
 80168a2:	2b55      	cmp	r3, #85	; 0x55
 80168a4:	d1e8      	bne.n	8016878 <__cxa_call_unexpected+0xc>
 80168a6:	78c3      	ldrb	r3, [r0, #3]
 80168a8:	2b43      	cmp	r3, #67	; 0x43
 80168aa:	d1e5      	bne.n	8016878 <__cxa_call_unexpected+0xc>
 80168ac:	7903      	ldrb	r3, [r0, #4]
 80168ae:	2b43      	cmp	r3, #67	; 0x43
 80168b0:	d1e2      	bne.n	8016878 <__cxa_call_unexpected+0xc>
 80168b2:	7943      	ldrb	r3, [r0, #5]
 80168b4:	2b2b      	cmp	r3, #43	; 0x2b
 80168b6:	d1df      	bne.n	8016878 <__cxa_call_unexpected+0xc>
 80168b8:	7983      	ldrb	r3, [r0, #6]
 80168ba:	2b2b      	cmp	r3, #43	; 0x2b
 80168bc:	d1dc      	bne.n	8016878 <__cxa_call_unexpected+0xc>
 80168be:	79c3      	ldrb	r3, [r0, #7]
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	d8d9      	bhi.n	8016878 <__cxa_call_unexpected+0xc>
 80168c4:	f850 9c18 	ldr.w	r9, [r0, #-24]
 80168c8:	f04f 0800 	mov.w	r8, #0
 80168cc:	f850 4c14 	ldr.w	r4, [r0, #-20]
 80168d0:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80168d2:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80168d4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80168d6:	e7d6      	b.n	8016886 <__cxa_call_unexpected+0x1a>
 80168d8:	f000 f856 	bl	8016988 <__cxa_begin_catch>
 80168dc:	f000 f90c 	bl	8016af8 <__cxa_get_globals_fast>
 80168e0:	6803      	ldr	r3, [r0, #0]
 80168e2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80168e6:	2a01      	cmp	r2, #1
 80168e8:	bf18      	it	ne
 80168ea:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 80168ee:	d100      	bne.n	80168f2 <__cxa_call_unexpected+0x86>
 80168f0:	681a      	ldr	r2, [r3, #0]
 80168f2:	f04f 0900 	mov.w	r9, #0
 80168f6:	f10d 0a10 	add.w	sl, sp, #16
 80168fa:	46a8      	mov	r8, r5
 80168fc:	46cb      	mov	fp, r9
 80168fe:	f026 0603 	bic.w	r6, r6, #3
 8016902:	3320      	adds	r3, #32
 8016904:	9600      	str	r6, [sp, #0]
 8016906:	f84a 2d04 	str.w	r2, [sl, #-4]!
 801690a:	9301      	str	r3, [sp, #4]
 801690c:	455f      	cmp	r7, fp
 801690e:	dd1e      	ble.n	801694e <__cxa_call_unexpected+0xe2>
 8016910:	f8d8 5000 	ldr.w	r5, [r8]
 8016914:	b105      	cbz	r5, 8016918 <__cxa_call_unexpected+0xac>
 8016916:	4445      	add	r5, r8
 8016918:	9801      	ldr	r0, [sp, #4]
 801691a:	4629      	mov	r1, r5
 801691c:	2200      	movs	r2, #0
 801691e:	4653      	mov	r3, sl
 8016920:	f7ff fe8e 	bl	8016640 <__cxa_type_match>
 8016924:	4602      	mov	r2, r0
 8016926:	b9f0      	cbnz	r0, 8016966 <__cxa_call_unexpected+0xfa>
 8016928:	682b      	ldr	r3, [r5, #0]
 801692a:	4628      	mov	r0, r5
 801692c:	4913      	ldr	r1, [pc, #76]	; (801697c <__cxa_call_unexpected+0x110>)
 801692e:	691e      	ldr	r6, [r3, #16]
 8016930:	2301      	movs	r3, #1
 8016932:	47b0      	blx	r6
 8016934:	9b00      	ldr	r3, [sp, #0]
 8016936:	f10b 0b01 	add.w	fp, fp, #1
 801693a:	2800      	cmp	r0, #0
 801693c:	bf18      	it	ne
 801693e:	f04f 0901 	movne.w	r9, #1
 8016942:	4498      	add	r8, r3
 8016944:	e7e2      	b.n	801690c <__cxa_call_unexpected+0xa0>
 8016946:	f000 f81f 	bl	8016988 <__cxa_begin_catch>
 801694a:	f7ff fdd1 	bl	80164f0 <_ZSt9terminatev>
 801694e:	f1b9 0f00 	cmp.w	r9, #0
 8016952:	d010      	beq.n	8016976 <__cxa_call_unexpected+0x10a>
 8016954:	2004      	movs	r0, #4
 8016956:	f000 fdef 	bl	8017538 <__cxa_allocate_exception>
 801695a:	4b09      	ldr	r3, [pc, #36]	; (8016980 <__cxa_call_unexpected+0x114>)
 801695c:	4907      	ldr	r1, [pc, #28]	; (801697c <__cxa_call_unexpected+0x110>)
 801695e:	4a09      	ldr	r2, [pc, #36]	; (8016984 <__cxa_call_unexpected+0x118>)
 8016960:	6003      	str	r3, [r0, #0]
 8016962:	f000 fbb9 	bl	80170d8 <__cxa_throw>
 8016966:	f000 fbf3 	bl	8017150 <__cxa_rethrow>
 801696a:	f000 f851 	bl	8016a10 <__cxa_end_catch>
 801696e:	f000 f84f 	bl	8016a10 <__cxa_end_catch>
 8016972:	f7ff fe5f 	bl	8016634 <__cxa_end_cleanup>
 8016976:	4620      	mov	r0, r4
 8016978:	f7ff fda6 	bl	80164c8 <_ZN10__cxxabiv111__terminateEPFvvE>
 801697c:	0801c378 	.word	0x0801c378
 8016980:	0801c338 	.word	0x0801c338
 8016984:	08016aad 	.word	0x08016aad

08016988 <__cxa_begin_catch>:
 8016988:	b538      	push	{r3, r4, r5, lr}
 801698a:	4605      	mov	r5, r0
 801698c:	f000 f8ba 	bl	8016b04 <__cxa_get_globals>
 8016990:	f1a5 0320 	sub.w	r3, r5, #32
 8016994:	782a      	ldrb	r2, [r5, #0]
 8016996:	2a47      	cmp	r2, #71	; 0x47
 8016998:	6804      	ldr	r4, [r0, #0]
 801699a:	d004      	beq.n	80169a6 <__cxa_begin_catch+0x1e>
 801699c:	2c00      	cmp	r4, #0
 801699e:	d12f      	bne.n	8016a00 <__cxa_begin_catch+0x78>
 80169a0:	6003      	str	r3, [r0, #0]
 80169a2:	4620      	mov	r0, r4
 80169a4:	bd38      	pop	{r3, r4, r5, pc}
 80169a6:	786a      	ldrb	r2, [r5, #1]
 80169a8:	2a4e      	cmp	r2, #78	; 0x4e
 80169aa:	d1f7      	bne.n	801699c <__cxa_begin_catch+0x14>
 80169ac:	78aa      	ldrb	r2, [r5, #2]
 80169ae:	2a55      	cmp	r2, #85	; 0x55
 80169b0:	d1f4      	bne.n	801699c <__cxa_begin_catch+0x14>
 80169b2:	78ea      	ldrb	r2, [r5, #3]
 80169b4:	2a43      	cmp	r2, #67	; 0x43
 80169b6:	d1f1      	bne.n	801699c <__cxa_begin_catch+0x14>
 80169b8:	792a      	ldrb	r2, [r5, #4]
 80169ba:	2a43      	cmp	r2, #67	; 0x43
 80169bc:	d1ee      	bne.n	801699c <__cxa_begin_catch+0x14>
 80169be:	796a      	ldrb	r2, [r5, #5]
 80169c0:	2a2b      	cmp	r2, #43	; 0x2b
 80169c2:	d1eb      	bne.n	801699c <__cxa_begin_catch+0x14>
 80169c4:	79aa      	ldrb	r2, [r5, #6]
 80169c6:	2a2b      	cmp	r2, #43	; 0x2b
 80169c8:	d1e8      	bne.n	801699c <__cxa_begin_catch+0x14>
 80169ca:	79ea      	ldrb	r2, [r5, #7]
 80169cc:	2a01      	cmp	r2, #1
 80169ce:	d8e5      	bhi.n	801699c <__cxa_begin_catch+0x14>
 80169d0:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80169d4:	2900      	cmp	r1, #0
 80169d6:	db10      	blt.n	80169fa <__cxa_begin_catch+0x72>
 80169d8:	3101      	adds	r1, #1
 80169da:	6842      	ldr	r2, [r0, #4]
 80169dc:	f845 1c0c 	str.w	r1, [r5, #-12]
 80169e0:	3a01      	subs	r2, #1
 80169e2:	42a3      	cmp	r3, r4
 80169e4:	6042      	str	r2, [r0, #4]
 80169e6:	bf1c      	itt	ne
 80169e8:	f845 4c10 	strne.w	r4, [r5, #-16]
 80169ec:	6003      	strne	r3, [r0, #0]
 80169ee:	4628      	mov	r0, r5
 80169f0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80169f2:	f7ef fd2d 	bl	8006450 <_Unwind_Complete>
 80169f6:	4620      	mov	r0, r4
 80169f8:	bd38      	pop	{r3, r4, r5, pc}
 80169fa:	f1c1 0101 	rsb	r1, r1, #1
 80169fe:	e7ec      	b.n	80169da <__cxa_begin_catch+0x52>
 8016a00:	f7ff fd76 	bl	80164f0 <_ZSt9terminatev>
 8016a04:	3101      	adds	r1, #1
 8016a06:	d001      	beq.n	8016a0c <__cxa_begin_catch+0x84>
 8016a08:	f7ff fe14 	bl	8016634 <__cxa_end_cleanup>
 8016a0c:	f7ff ff2e 	bl	801686c <__cxa_call_unexpected>

08016a10 <__cxa_end_catch>:
 8016a10:	b508      	push	{r3, lr}
 8016a12:	f000 f871 	bl	8016af8 <__cxa_get_globals_fast>
 8016a16:	6803      	ldr	r3, [r0, #0]
 8016a18:	4602      	mov	r2, r0
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d03f      	beq.n	8016a9e <__cxa_end_catch+0x8e>
 8016a1e:	f893 1020 	ldrb.w	r1, [r3, #32]
 8016a22:	2947      	cmp	r1, #71	; 0x47
 8016a24:	d007      	beq.n	8016a36 <__cxa_end_catch+0x26>
 8016a26:	f103 0020 	add.w	r0, r3, #32
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	6013      	str	r3, [r2, #0]
 8016a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016a32:	f7ef bd0f 	b.w	8006454 <_Unwind_DeleteException>
 8016a36:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8016a3a:	294e      	cmp	r1, #78	; 0x4e
 8016a3c:	d1f3      	bne.n	8016a26 <__cxa_end_catch+0x16>
 8016a3e:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8016a42:	2955      	cmp	r1, #85	; 0x55
 8016a44:	d1ef      	bne.n	8016a26 <__cxa_end_catch+0x16>
 8016a46:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8016a4a:	2943      	cmp	r1, #67	; 0x43
 8016a4c:	d1eb      	bne.n	8016a26 <__cxa_end_catch+0x16>
 8016a4e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8016a52:	2943      	cmp	r1, #67	; 0x43
 8016a54:	d1e7      	bne.n	8016a26 <__cxa_end_catch+0x16>
 8016a56:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8016a5a:	292b      	cmp	r1, #43	; 0x2b
 8016a5c:	d1e3      	bne.n	8016a26 <__cxa_end_catch+0x16>
 8016a5e:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8016a62:	292b      	cmp	r1, #43	; 0x2b
 8016a64:	d1df      	bne.n	8016a26 <__cxa_end_catch+0x16>
 8016a66:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8016a6a:	2901      	cmp	r1, #1
 8016a6c:	d8db      	bhi.n	8016a26 <__cxa_end_catch+0x16>
 8016a6e:	6959      	ldr	r1, [r3, #20]
 8016a70:	2900      	cmp	r1, #0
 8016a72:	db05      	blt.n	8016a80 <__cxa_end_catch+0x70>
 8016a74:	3901      	subs	r1, #1
 8016a76:	d008      	beq.n	8016a8a <__cxa_end_catch+0x7a>
 8016a78:	1c4a      	adds	r2, r1, #1
 8016a7a:	d00e      	beq.n	8016a9a <__cxa_end_catch+0x8a>
 8016a7c:	6159      	str	r1, [r3, #20]
 8016a7e:	bd08      	pop	{r3, pc}
 8016a80:	3101      	adds	r1, #1
 8016a82:	d1fb      	bne.n	8016a7c <__cxa_end_catch+0x6c>
 8016a84:	6918      	ldr	r0, [r3, #16]
 8016a86:	6010      	str	r0, [r2, #0]
 8016a88:	e7f8      	b.n	8016a7c <__cxa_end_catch+0x6c>
 8016a8a:	6919      	ldr	r1, [r3, #16]
 8016a8c:	f103 0020 	add.w	r0, r3, #32
 8016a90:	6011      	str	r1, [r2, #0]
 8016a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016a96:	f7ef bcdd 	b.w	8006454 <_Unwind_DeleteException>
 8016a9a:	f7ff fd29 	bl	80164f0 <_ZSt9terminatev>
 8016a9e:	bd08      	pop	{r3, pc}

08016aa0 <_ZNSt9exceptionD1Ev>:
 8016aa0:	4b01      	ldr	r3, [pc, #4]	; (8016aa8 <_ZNSt9exceptionD1Ev+0x8>)
 8016aa2:	6003      	str	r3, [r0, #0]
 8016aa4:	4770      	bx	lr
 8016aa6:	bf00      	nop
 8016aa8:	0801c2a8 	.word	0x0801c2a8

08016aac <_ZNSt13bad_exceptionD1Ev>:
 8016aac:	4b01      	ldr	r3, [pc, #4]	; (8016ab4 <_ZNSt13bad_exceptionD1Ev+0x8>)
 8016aae:	6003      	str	r3, [r0, #0]
 8016ab0:	4770      	bx	lr
 8016ab2:	bf00      	nop
 8016ab4:	0801c2a8 	.word	0x0801c2a8

08016ab8 <_ZNKSt9exception4whatEv>:
 8016ab8:	f24c 20dc 	movw	r0, #49884	; 0xc2dc
 8016abc:	f6c0 0001 	movt	r0, #2049	; 0x801
 8016ac0:	4770      	bx	lr
 8016ac2:	bf00      	nop

08016ac4 <_ZNKSt13bad_exception4whatEv>:
 8016ac4:	f24c 20ec 	movw	r0, #49900	; 0xc2ec
 8016ac8:	f6c0 0001 	movt	r0, #2049	; 0x801
 8016acc:	4770      	bx	lr
 8016ace:	bf00      	nop

08016ad0 <_ZNSt13bad_exceptionD0Ev>:
 8016ad0:	4b03      	ldr	r3, [pc, #12]	; (8016ae0 <_ZNSt13bad_exceptionD0Ev+0x10>)
 8016ad2:	b510      	push	{r4, lr}
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	6003      	str	r3, [r0, #0]
 8016ad8:	f7ff fce6 	bl	80164a8 <_ZdlPv>
 8016adc:	4620      	mov	r0, r4
 8016ade:	bd10      	pop	{r4, pc}
 8016ae0:	0801c2a8 	.word	0x0801c2a8

08016ae4 <_ZNSt9exceptionD0Ev>:
 8016ae4:	4b03      	ldr	r3, [pc, #12]	; (8016af4 <_ZNSt9exceptionD0Ev+0x10>)
 8016ae6:	b510      	push	{r4, lr}
 8016ae8:	4604      	mov	r4, r0
 8016aea:	6003      	str	r3, [r0, #0]
 8016aec:	f7ff fcdc 	bl	80164a8 <_ZdlPv>
 8016af0:	4620      	mov	r0, r4
 8016af2:	bd10      	pop	{r4, pc}
 8016af4:	0801c2a8 	.word	0x0801c2a8

08016af8 <__cxa_get_globals_fast>:
 8016af8:	f640 7064 	movw	r0, #3940	; 0xf64
 8016afc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016b00:	4770      	bx	lr
 8016b02:	bf00      	nop

08016b04 <__cxa_get_globals>:
 8016b04:	f640 7064 	movw	r0, #3940	; 0xf64
 8016b08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop

08016b10 <_ZL12read_sleb128PKhPl>:
 8016b10:	2300      	movs	r3, #0
 8016b12:	b470      	push	{r4, r5, r6}
 8016b14:	461a      	mov	r2, r3
 8016b16:	4604      	mov	r4, r0
 8016b18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016b1c:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 8016b20:	4620      	mov	r0, r4
 8016b22:	4096      	lsls	r6, r2
 8016b24:	3207      	adds	r2, #7
 8016b26:	f015 0f80 	tst.w	r5, #128	; 0x80
 8016b2a:	ea43 0306 	orr.w	r3, r3, r6
 8016b2e:	d1f3      	bne.n	8016b18 <_ZL12read_sleb128PKhPl+0x8>
 8016b30:	2a1f      	cmp	r2, #31
 8016b32:	d807      	bhi.n	8016b44 <_ZL12read_sleb128PKhPl+0x34>
 8016b34:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016b38:	d004      	beq.n	8016b44 <_ZL12read_sleb128PKhPl+0x34>
 8016b3a:	f04f 34ff 	mov.w	r4, #4294967295
 8016b3e:	fa14 f202 	lsls.w	r2, r4, r2
 8016b42:	4313      	orrs	r3, r2
 8016b44:	600b      	str	r3, [r1, #0]
 8016b46:	bc70      	pop	{r4, r5, r6}
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop

08016b4c <_ZL28read_encoded_value_with_basehjPKhPj>:
 8016b4c:	2850      	cmp	r0, #80	; 0x50
 8016b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b50:	4604      	mov	r4, r0
 8016b52:	b085      	sub	sp, #20
 8016b54:	460d      	mov	r5, r1
 8016b56:	d053      	beq.n	8016c00 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
 8016b58:	f000 010f 	and.w	r1, r0, #15
 8016b5c:	290c      	cmp	r1, #12
 8016b5e:	d837      	bhi.n	8016bd0 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8016b60:	e8df f001 	tbb	[pc, r1]
 8016b64:	07483807 	.word	0x07483807
 8016b68:	36363620 	.word	0x36363620
 8016b6c:	07252c36 	.word	0x07252c36
 8016b70:	20          	.byte	0x20
 8016b71:	00          	.byte	0x00
 8016b72:	f892 c001 	ldrb.w	ip, [r2, #1]
 8016b76:	1d10      	adds	r0, r2, #4
 8016b78:	7811      	ldrb	r1, [r2, #0]
 8016b7a:	7897      	ldrb	r7, [r2, #2]
 8016b7c:	78d6      	ldrb	r6, [r2, #3]
 8016b7e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8016b82:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8016b86:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8016b8a:	b141      	cbz	r1, 8016b9e <_ZL28read_encoded_value_with_basehjPKhPj+0x52>
 8016b8c:	f004 0670 	and.w	r6, r4, #112	; 0x70
 8016b90:	2e10      	cmp	r6, #16
 8016b92:	bf08      	it	eq
 8016b94:	4615      	moveq	r5, r2
 8016b96:	0622      	lsls	r2, r4, #24
 8016b98:	4429      	add	r1, r5
 8016b9a:	bf48      	it	mi
 8016b9c:	6809      	ldrmi	r1, [r1, #0]
 8016b9e:	6019      	str	r1, [r3, #0]
 8016ba0:	b005      	add	sp, #20
 8016ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ba4:	f892 c001 	ldrb.w	ip, [r2, #1]
 8016ba8:	f102 0008 	add.w	r0, r2, #8
 8016bac:	e7e4      	b.n	8016b78 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 8016bae:	7856      	ldrb	r6, [r2, #1]
 8016bb0:	1c90      	adds	r0, r2, #2
 8016bb2:	7811      	ldrb	r1, [r2, #0]
 8016bb4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8016bb8:	b209      	sxth	r1, r1
 8016bba:	e7e6      	b.n	8016b8a <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8016bbc:	4610      	mov	r0, r2
 8016bbe:	a903      	add	r1, sp, #12
 8016bc0:	9201      	str	r2, [sp, #4]
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	f7ff ffa4 	bl	8016b10 <_ZL12read_sleb128PKhPl>
 8016bc8:	9903      	ldr	r1, [sp, #12]
 8016bca:	9a01      	ldr	r2, [sp, #4]
 8016bcc:	9b00      	ldr	r3, [sp, #0]
 8016bce:	e7dc      	b.n	8016b8a <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8016bd0:	f7ef ff48 	bl	8006a64 <abort>
 8016bd4:	2100      	movs	r1, #0
 8016bd6:	4610      	mov	r0, r2
 8016bd8:	460e      	mov	r6, r1
 8016bda:	f810 7b01 	ldrb.w	r7, [r0], #1
 8016bde:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
 8016be2:	fa0c fc06 	lsl.w	ip, ip, r6
 8016be6:	3607      	adds	r6, #7
 8016be8:	f017 0f80 	tst.w	r7, #128	; 0x80
 8016bec:	ea41 010c 	orr.w	r1, r1, ip
 8016bf0:	d1f3      	bne.n	8016bda <_ZL28read_encoded_value_with_basehjPKhPj+0x8e>
 8016bf2:	e7ca      	b.n	8016b8a <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8016bf4:	7856      	ldrb	r6, [r2, #1]
 8016bf6:	1c90      	adds	r0, r2, #2
 8016bf8:	7811      	ldrb	r1, [r2, #0]
 8016bfa:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8016bfe:	e7c4      	b.n	8016b8a <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8016c00:	1cd0      	adds	r0, r2, #3
 8016c02:	f020 0003 	bic.w	r0, r0, #3
 8016c06:	f850 1b04 	ldr.w	r1, [r0], #4
 8016c0a:	e7c8      	b.n	8016b9e <_ZL28read_encoded_value_with_basehjPKhPj+0x52>

08016c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8016c0c:	28ff      	cmp	r0, #255	; 0xff
 8016c0e:	b508      	push	{r3, lr}
 8016c10:	d00d      	beq.n	8016c2e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8016c12:	f000 0370 	and.w	r3, r0, #112	; 0x70
 8016c16:	2b20      	cmp	r3, #32
 8016c18:	d019      	beq.n	8016c4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
 8016c1a:	dd07      	ble.n	8016c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8016c1c:	2b40      	cmp	r3, #64	; 0x40
 8016c1e:	d011      	beq.n	8016c44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8016c20:	2b50      	cmp	r3, #80	; 0x50
 8016c22:	d004      	beq.n	8016c2e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8016c24:	2b30      	cmp	r3, #48	; 0x30
 8016c26:	d008      	beq.n	8016c3a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8016c28:	f7ef ff1c 	bl	8006a64 <abort>
 8016c2c:	b90b      	cbnz	r3, 8016c32 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8016c2e:	2000      	movs	r0, #0
 8016c30:	bd08      	pop	{r3, pc}
 8016c32:	2b10      	cmp	r3, #16
 8016c34:	d0fb      	beq.n	8016c2e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8016c36:	f7ef ff15 	bl	8006a64 <abort>
 8016c3a:	4608      	mov	r0, r1
 8016c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016c40:	f7ef bf08 	b.w	8006a54 <_Unwind_GetDataRelBase>
 8016c44:	4608      	mov	r0, r1
 8016c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016c4a:	f7ef bef3 	b.w	8006a34 <_Unwind_GetRegionStart>
 8016c4e:	4608      	mov	r0, r1
 8016c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016c54:	f7ef bf02 	b.w	8006a5c <_Unwind_GetTextRelBase>

08016c58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
 8016c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	460e      	mov	r6, r1
 8016c5e:	4614      	mov	r4, r2
 8016c60:	b10d      	cbz	r5, 8016c66 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
 8016c62:	f7ef fee7 	bl	8006a34 <_Unwind_GetRegionStart>
 8016c66:	6020      	str	r0, [r4, #0]
 8016c68:	f816 7b01 	ldrb.w	r7, [r6], #1
 8016c6c:	2fff      	cmp	r7, #255	; 0xff
 8016c6e:	bf08      	it	eq
 8016c70:	6060      	streq	r0, [r4, #4]
 8016c72:	d00a      	beq.n	8016c8a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
 8016c74:	4629      	mov	r1, r5
 8016c76:	4638      	mov	r0, r7
 8016c78:	f7ff ffc8 	bl	8016c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8016c7c:	4632      	mov	r2, r6
 8016c7e:	1d23      	adds	r3, r4, #4
 8016c80:	4601      	mov	r1, r0
 8016c82:	4638      	mov	r0, r7
 8016c84:	f7ff ff62 	bl	8016b4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8016c88:	4606      	mov	r6, r0
 8016c8a:	f816 3b01 	ldrb.w	r3, [r6], #1
 8016c8e:	2bff      	cmp	r3, #255	; 0xff
 8016c90:	7523      	strb	r3, [r4, #20]
 8016c92:	d023      	beq.n	8016cdc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x84>
 8016c94:	2000      	movs	r0, #0
 8016c96:	4602      	mov	r2, r0
 8016c98:	4633      	mov	r3, r6
 8016c9a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016c9e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8016ca2:	461e      	mov	r6, r3
 8016ca4:	4095      	lsls	r5, r2
 8016ca6:	3207      	adds	r2, #7
 8016ca8:	0609      	lsls	r1, r1, #24
 8016caa:	ea40 0005 	orr.w	r0, r0, r5
 8016cae:	d4f3      	bmi.n	8016c98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
 8016cb0:	1818      	adds	r0, r3, r0
 8016cb2:	60e0      	str	r0, [r4, #12]
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	f816 2b01 	ldrb.w	r2, [r6], #1
 8016cba:	460b      	mov	r3, r1
 8016cbc:	7562      	strb	r2, [r4, #21]
 8016cbe:	4630      	mov	r0, r6
 8016cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cc4:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 8016cc8:	4606      	mov	r6, r0
 8016cca:	409d      	lsls	r5, r3
 8016ccc:	3307      	adds	r3, #7
 8016cce:	0612      	lsls	r2, r2, #24
 8016cd0:	ea41 0105 	orr.w	r1, r1, r5
 8016cd4:	d4f3      	bmi.n	8016cbe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
 8016cd6:	1841      	adds	r1, r0, r1
 8016cd8:	6121      	str	r1, [r4, #16]
 8016cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cdc:	2300      	movs	r3, #0
 8016cde:	60e3      	str	r3, [r4, #12]
 8016ce0:	e7e8      	b.n	8016cb4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
 8016ce2:	bf00      	nop

08016ce4 <__gxx_personality_v0>:
 8016ce4:	f000 0303 	and.w	r3, r0, #3
 8016ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cec:	2400      	movs	r4, #0
 8016cee:	b093      	sub	sp, #76	; 0x4c
 8016cf0:	2b01      	cmp	r3, #1
 8016cf2:	4688      	mov	r8, r1
 8016cf4:	4617      	mov	r7, r2
 8016cf6:	940b      	str	r4, [sp, #44]	; 0x2c
 8016cf8:	f000 80b2 	beq.w	8016e60 <__gxx_personality_v0+0x17c>
 8016cfc:	2b02      	cmp	r3, #2
 8016cfe:	f000 80a4 	beq.w	8016e4a <__gxx_personality_v0+0x166>
 8016d02:	f000 0608 	and.w	r6, r0, #8
 8016d06:	f04f 0a01 	mov.w	sl, #1
 8016d0a:	ad0e      	add	r5, sp, #56	; 0x38
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	f040 8085 	bne.w	8016e1c <__gxx_personality_v0+0x138>
 8016d12:	2100      	movs	r1, #0
 8016d14:	220c      	movs	r2, #12
 8016d16:	460b      	mov	r3, r1
 8016d18:	4638      	mov	r0, r7
 8016d1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016d1e:	ea46 0a0a 	orr.w	sl, r6, sl
 8016d22:	9500      	str	r5, [sp, #0]
 8016d24:	f7ef f85a 	bl	8005ddc <_Unwind_VRS_Set>
 8016d28:	4638      	mov	r0, r7
 8016d2a:	f7ef fe89 	bl	8006a40 <_Unwind_GetLanguageSpecificData>
 8016d2e:	4681      	mov	r9, r0
 8016d30:	2800      	cmp	r0, #0
 8016d32:	f000 808a 	beq.w	8016e4a <__gxx_personality_v0+0x166>
 8016d36:	4601      	mov	r1, r0
 8016d38:	aa05      	add	r2, sp, #20
 8016d3a:	4638      	mov	r0, r7
 8016d3c:	f7ff ff8c 	bl	8016c58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 8016d40:	4639      	mov	r1, r7
 8016d42:	4604      	mov	r4, r0
 8016d44:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8016d48:	f7ff ff60 	bl	8016c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	460b      	mov	r3, r1
 8016d50:	220f      	movs	r2, #15
 8016d52:	9500      	str	r5, [sp, #0]
 8016d54:	4606      	mov	r6, r0
 8016d56:	4638      	mov	r0, r7
 8016d58:	9607      	str	r6, [sp, #28]
 8016d5a:	f7ef f819 	bl	8005d90 <_Unwind_VRS_Get>
 8016d5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d62:	f026 0601 	bic.w	r6, r6, #1
 8016d66:	3e01      	subs	r6, #1
 8016d68:	429c      	cmp	r4, r3
 8016d6a:	d23a      	bcs.n	8016de2 <__gxx_personality_v0+0xfe>
 8016d6c:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
 8016d70:	2100      	movs	r1, #0
 8016d72:	4658      	mov	r0, fp
 8016d74:	f7ff ff4a 	bl	8016c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8016d78:	4622      	mov	r2, r4
 8016d7a:	ab0c      	add	r3, sp, #48	; 0x30
 8016d7c:	4601      	mov	r1, r0
 8016d7e:	4658      	mov	r0, fp
 8016d80:	f7ff fee4 	bl	8016b4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8016d84:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 8016d88:	2100      	movs	r1, #0
 8016d8a:	4683      	mov	fp, r0
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f7ff ff3d 	bl	8016c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8016d92:	465a      	mov	r2, fp
 8016d94:	ab0d      	add	r3, sp, #52	; 0x34
 8016d96:	4601      	mov	r1, r0
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f7ff fed7 	bl	8016b4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8016d9e:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 8016da2:	2100      	movs	r1, #0
 8016da4:	4683      	mov	fp, r0
 8016da6:	4620      	mov	r0, r4
 8016da8:	f7ff ff30 	bl	8016c0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8016dac:	462b      	mov	r3, r5
 8016dae:	465a      	mov	r2, fp
 8016db0:	4601      	mov	r1, r0
 8016db2:	4620      	mov	r0, r4
 8016db4:	f7ff feca 	bl	8016b4c <_ZL28read_encoded_value_with_basehjPKhPj>
 8016db8:	2100      	movs	r1, #0
 8016dba:	460b      	mov	r3, r1
 8016dbc:	4604      	mov	r4, r0
 8016dbe:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016dc2:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 8016dc6:	4098      	lsls	r0, r3
 8016dc8:	3307      	adds	r3, #7
 8016dca:	4301      	orrs	r1, r0
 8016dcc:	0610      	lsls	r0, r2, #24
 8016dce:	d4f6      	bmi.n	8016dbe <__gxx_personality_v0+0xda>
 8016dd0:	9b05      	ldr	r3, [sp, #20]
 8016dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dd4:	18d3      	adds	r3, r2, r3
 8016dd6:	429e      	cmp	r6, r3
 8016dd8:	d222      	bcs.n	8016e20 <__gxx_personality_v0+0x13c>
 8016dda:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016ddc:	4623      	mov	r3, r4
 8016dde:	429c      	cmp	r4, r3
 8016de0:	d3c4      	bcc.n	8016d6c <__gxx_personality_v0+0x88>
 8016de2:	2400      	movs	r4, #0
 8016de4:	2601      	movs	r6, #1
 8016de6:	46a3      	mov	fp, r4
 8016de8:	f01a 0f01 	tst.w	sl, #1
 8016dec:	d061      	beq.n	8016eb2 <__gxx_personality_v0+0x1ce>
 8016dee:	2e02      	cmp	r6, #2
 8016df0:	d02b      	beq.n	8016e4a <__gxx_personality_v0+0x166>
 8016df2:	2100      	movs	r1, #0
 8016df4:	4638      	mov	r0, r7
 8016df6:	460b      	mov	r3, r1
 8016df8:	220d      	movs	r2, #13
 8016dfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8016dfc:	9500      	str	r5, [sp, #0]
 8016dfe:	f7ee ffc7 	bl	8005d90 <_Unwind_VRS_Get>
 8016e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e04:	2006      	movs	r0, #6
 8016e06:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
 8016e0a:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 8016e0e:	f8c8 3020 	str.w	r3, [r8, #32]
 8016e12:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
 8016e16:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 8016e1a:	e01e      	b.n	8016e5a <__gxx_personality_v0+0x176>
 8016e1c:	f7ef fe22 	bl	8006a64 <abort>
 8016e20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e22:	189b      	adds	r3, r3, r2
 8016e24:	429e      	cmp	r6, r3
 8016e26:	d301      	bcc.n	8016e2c <__gxx_personality_v0+0x148>
 8016e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e2a:	e79d      	b.n	8016d68 <__gxx_personality_v0+0x84>
 8016e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e2e:	469b      	mov	fp, r3
 8016e30:	b113      	cbz	r3, 8016e38 <__gxx_personality_v0+0x154>
 8016e32:	9a06      	ldr	r2, [sp, #24]
 8016e34:	eb03 0b02 	add.w	fp, r3, r2
 8016e38:	4608      	mov	r0, r1
 8016e3a:	b111      	cbz	r1, 8016e42 <__gxx_personality_v0+0x15e>
 8016e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e3e:	3901      	subs	r1, #1
 8016e40:	1840      	adds	r0, r0, r1
 8016e42:	f1bb 0f00 	cmp.w	fp, #0
 8016e46:	f040 808c 	bne.w	8016f62 <__gxx_personality_v0+0x27e>
 8016e4a:	4640      	mov	r0, r8
 8016e4c:	4639      	mov	r1, r7
 8016e4e:	f7ef fddb 	bl	8006a08 <__gnu_unwind_frame>
 8016e52:	2800      	cmp	r0, #0
 8016e54:	bf0c      	ite	eq
 8016e56:	2008      	moveq	r0, #8
 8016e58:	2009      	movne	r0, #9
 8016e5a:	b013      	add	sp, #76	; 0x4c
 8016e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e60:	f010 0608 	ands.w	r6, r0, #8
 8016e64:	bf18      	it	ne
 8016e66:	ad0e      	addne	r5, sp, #56	; 0x38
 8016e68:	d002      	beq.n	8016e70 <__gxx_personality_v0+0x18c>
 8016e6a:	f04f 0a02 	mov.w	sl, #2
 8016e6e:	e750      	b.n	8016d12 <__gxx_personality_v0+0x2e>
 8016e70:	4610      	mov	r0, r2
 8016e72:	4633      	mov	r3, r6
 8016e74:	220d      	movs	r2, #13
 8016e76:	4631      	mov	r1, r6
 8016e78:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8016e7c:	ad0e      	add	r5, sp, #56	; 0x38
 8016e7e:	9500      	str	r5, [sp, #0]
 8016e80:	f7ee ff86 	bl	8005d90 <_Unwind_VRS_Get>
 8016e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e86:	429c      	cmp	r4, r3
 8016e88:	d1ef      	bne.n	8016e6a <__gxx_personality_v0+0x186>
 8016e8a:	f108 0428 	add.w	r4, r8, #40	; 0x28
 8016e8e:	4631      	mov	r1, r6
 8016e90:	4633      	mov	r3, r6
 8016e92:	4638      	mov	r0, r7
 8016e94:	220c      	movs	r2, #12
 8016e96:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016e9a:	9500      	str	r5, [sp, #0]
 8016e9c:	f7ee ff9e 	bl	8005ddc <_Unwind_VRS_Set>
 8016ea0:	e894 0a10 	ldmia.w	r4, {r4, r9, fp}
 8016ea4:	2603      	movs	r6, #3
 8016ea6:	f1bb 0f00 	cmp.w	fp, #0
 8016eaa:	d13a      	bne.n	8016f22 <__gxx_personality_v0+0x23e>
 8016eac:	4640      	mov	r0, r8
 8016eae:	f7ff fcb9 	bl	8016824 <__cxa_call_terminate>
 8016eb2:	f01a 0f08 	tst.w	sl, #8
 8016eb6:	d032      	beq.n	8016f1e <__gxx_personality_v0+0x23a>
 8016eb8:	2e01      	cmp	r6, #1
 8016eba:	f000 80e3 	beq.w	8017084 <__gxx_personality_v0+0x3a0>
 8016ebe:	2c00      	cmp	r4, #0
 8016ec0:	f2c0 80e2 	blt.w	8017088 <__gxx_personality_v0+0x3a4>
 8016ec4:	2100      	movs	r1, #0
 8016ec6:	4638      	mov	r0, r7
 8016ec8:	460a      	mov	r2, r1
 8016eca:	460b      	mov	r3, r1
 8016ecc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016ed0:	9500      	str	r5, [sp, #0]
 8016ed2:	f7ee ff83 	bl	8005ddc <_Unwind_VRS_Set>
 8016ed6:	2100      	movs	r1, #0
 8016ed8:	2201      	movs	r2, #1
 8016eda:	460b      	mov	r3, r1
 8016edc:	4638      	mov	r0, r7
 8016ede:	940e      	str	r4, [sp, #56]	; 0x38
 8016ee0:	9500      	str	r5, [sp, #0]
 8016ee2:	f7ee ff7b 	bl	8005ddc <_Unwind_VRS_Set>
 8016ee6:	2100      	movs	r1, #0
 8016ee8:	220f      	movs	r2, #15
 8016eea:	460b      	mov	r3, r1
 8016eec:	4638      	mov	r0, r7
 8016eee:	9500      	str	r5, [sp, #0]
 8016ef0:	f7ee ff4e 	bl	8005d90 <_Unwind_VRS_Get>
 8016ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ef6:	2100      	movs	r1, #0
 8016ef8:	220f      	movs	r2, #15
 8016efa:	4638      	mov	r0, r7
 8016efc:	f003 0301 	and.w	r3, r3, #1
 8016f00:	9500      	str	r5, [sp, #0]
 8016f02:	ea4b 0303 	orr.w	r3, fp, r3
 8016f06:	930e      	str	r3, [sp, #56]	; 0x38
 8016f08:	460b      	mov	r3, r1
 8016f0a:	f7ee ff67 	bl	8005ddc <_Unwind_VRS_Set>
 8016f0e:	2007      	movs	r0, #7
 8016f10:	2e02      	cmp	r6, #2
 8016f12:	d1a2      	bne.n	8016e5a <__gxx_personality_v0+0x176>
 8016f14:	4640      	mov	r0, r8
 8016f16:	f7ff fc05 	bl	8016724 <__cxa_begin_cleanup>
 8016f1a:	2007      	movs	r0, #7
 8016f1c:	e79d      	b.n	8016e5a <__gxx_personality_v0+0x176>
 8016f1e:	2e01      	cmp	r6, #1
 8016f20:	d0c4      	beq.n	8016eac <__gxx_personality_v0+0x1c8>
 8016f22:	2c00      	cmp	r4, #0
 8016f24:	dace      	bge.n	8016ec4 <__gxx_personality_v0+0x1e0>
 8016f26:	aa05      	add	r2, sp, #20
 8016f28:	4638      	mov	r0, r7
 8016f2a:	4649      	mov	r1, r9
 8016f2c:	f7ff fe94 	bl	8016c58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 8016f30:	9b08      	ldr	r3, [sp, #32]
 8016f32:	43e2      	mvns	r2, r4
 8016f34:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8016f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f3c:	b133      	cbz	r3, 8016f4c <__gxx_personality_v0+0x268>
 8016f3e:	4602      	mov	r2, r0
 8016f40:	2300      	movs	r3, #0
 8016f42:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8016f46:	3301      	adds	r3, #1
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	d1fa      	bne.n	8016f42 <__gxx_personality_v0+0x25e>
 8016f4c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8016f50:	2300      	movs	r3, #0
 8016f52:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 8016f56:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8016f5a:	2304      	movs	r3, #4
 8016f5c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8016f60:	e7b0      	b.n	8016ec4 <__gxx_personality_v0+0x1e0>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	f000 8089 	beq.w	801707a <__gxx_personality_v0+0x396>
 8016f68:	f01a 0208 	ands.w	r2, sl, #8
 8016f6c:	9203      	str	r2, [sp, #12]
 8016f6e:	d07a      	beq.n	8017066 <__gxx_personality_v0+0x382>
 8016f70:	2347      	movs	r3, #71	; 0x47
 8016f72:	f888 3000 	strb.w	r3, [r8]
 8016f76:	234e      	movs	r3, #78	; 0x4e
 8016f78:	f888 3001 	strb.w	r3, [r8, #1]
 8016f7c:	2355      	movs	r3, #85	; 0x55
 8016f7e:	f888 3002 	strb.w	r3, [r8, #2]
 8016f82:	2343      	movs	r3, #67	; 0x43
 8016f84:	f888 3003 	strb.w	r3, [r8, #3]
 8016f88:	2346      	movs	r3, #70	; 0x46
 8016f8a:	f888 3004 	strb.w	r3, [r8, #4]
 8016f8e:	234f      	movs	r3, #79	; 0x4f
 8016f90:	f888 3005 	strb.w	r3, [r8, #5]
 8016f94:	2352      	movs	r3, #82	; 0x52
 8016f96:	f888 3006 	strb.w	r3, [r8, #6]
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	f888 3007 	strb.w	r3, [r8, #7]
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	9302      	str	r3, [sp, #8]
 8016fa4:	463b      	mov	r3, r7
 8016fa6:	4647      	mov	r7, r8
 8016fa8:	4698      	mov	r8, r3
 8016faa:	a90f      	add	r1, sp, #60	; 0x3c
 8016fac:	f7ff fdb0 	bl	8016b10 <_ZL12read_sleb128PKhPl>
 8016fb0:	a910      	add	r1, sp, #64	; 0x40
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	f7ff fdac 	bl	8016b10 <_ZL12read_sleb128PKhPl>
 8016fb8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016fba:	2c00      	cmp	r4, #0
 8016fbc:	4623      	mov	r3, r4
 8016fbe:	d014      	beq.n	8016fea <__gxx_personality_v0+0x306>
 8016fc0:	dd1e      	ble.n	8017000 <__gxx_personality_v0+0x31c>
 8016fc2:	9b08      	ldr	r3, [sp, #32]
 8016fc4:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8016fc8:	6819      	ldr	r1, [r3, #0]
 8016fca:	b1a9      	cbz	r1, 8016ff8 <__gxx_personality_v0+0x314>
 8016fcc:	18c9      	adds	r1, r1, r3
 8016fce:	d013      	beq.n	8016ff8 <__gxx_personality_v0+0x314>
 8016fd0:	b16f      	cbz	r7, 8016fee <__gxx_personality_v0+0x30a>
 8016fd2:	4638      	mov	r0, r7
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	ab0b      	add	r3, sp, #44	; 0x2c
 8016fd8:	f7ff fb32 	bl	8016640 <__cxa_type_match>
 8016fdc:	b138      	cbz	r0, 8016fee <__gxx_personality_v0+0x30a>
 8016fde:	4643      	mov	r3, r8
 8016fe0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016fe2:	46b8      	mov	r8, r7
 8016fe4:	461f      	mov	r7, r3
 8016fe6:	2603      	movs	r6, #3
 8016fe8:	e6fe      	b.n	8016de8 <__gxx_personality_v0+0x104>
 8016fea:	2301      	movs	r3, #1
 8016fec:	9302      	str	r3, [sp, #8]
 8016fee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016ff0:	2c00      	cmp	r4, #0
 8016ff2:	d029      	beq.n	8017048 <__gxx_personality_v0+0x364>
 8016ff4:	1930      	adds	r0, r6, r4
 8016ff6:	e7d8      	b.n	8016faa <__gxx_personality_v0+0x2c6>
 8016ff8:	4643      	mov	r3, r8
 8016ffa:	46b8      	mov	r8, r7
 8016ffc:	461f      	mov	r7, r3
 8016ffe:	e7f2      	b.n	8016fe6 <__gxx_personality_v0+0x302>
 8017000:	b1bf      	cbz	r7, 8017032 <__gxx_personality_v0+0x34e>
 8017002:	9a03      	ldr	r2, [sp, #12]
 8017004:	b9aa      	cbnz	r2, 8017032 <__gxx_personality_v0+0x34e>
 8017006:	9a08      	ldr	r2, [sp, #32]
 8017008:	43e1      	mvns	r1, r4
 801700a:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 801700e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8017012:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017014:	9211      	str	r2, [sp, #68]	; 0x44
 8017016:	b919      	cbnz	r1, 8017020 <__gxx_personality_v0+0x33c>
 8017018:	e011      	b.n	801703e <__gxx_personality_v0+0x35a>
 801701a:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801701e:	b1e1      	cbz	r1, 801705a <__gxx_personality_v0+0x376>
 8017020:	1861      	adds	r1, r4, r1
 8017022:	4638      	mov	r0, r7
 8017024:	2200      	movs	r2, #0
 8017026:	ab11      	add	r3, sp, #68	; 0x44
 8017028:	f7ff fb0a 	bl	8016640 <__cxa_type_match>
 801702c:	2800      	cmp	r0, #0
 801702e:	d0f4      	beq.n	801701a <__gxx_personality_v0+0x336>
 8017030:	e7dd      	b.n	8016fee <__gxx_personality_v0+0x30a>
 8017032:	9a08      	ldr	r2, [sp, #32]
 8017034:	43d9      	mvns	r1, r3
 8017036:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801703a:	2a00      	cmp	r2, #0
 801703c:	d1d7      	bne.n	8016fee <__gxx_personality_v0+0x30a>
 801703e:	4642      	mov	r2, r8
 8017040:	461c      	mov	r4, r3
 8017042:	46b8      	mov	r8, r7
 8017044:	4617      	mov	r7, r2
 8017046:	e7ce      	b.n	8016fe6 <__gxx_personality_v0+0x302>
 8017048:	9a02      	ldr	r2, [sp, #8]
 801704a:	4643      	mov	r3, r8
 801704c:	46b8      	mov	r8, r7
 801704e:	461f      	mov	r7, r3
 8017050:	2a00      	cmp	r2, #0
 8017052:	f43f aefa 	beq.w	8016e4a <__gxx_personality_v0+0x166>
 8017056:	2602      	movs	r6, #2
 8017058:	e6c6      	b.n	8016de8 <__gxx_personality_v0+0x104>
 801705a:	4643      	mov	r3, r8
 801705c:	46b8      	mov	r8, r7
 801705e:	461f      	mov	r7, r3
 8017060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017062:	461c      	mov	r4, r3
 8017064:	e7bf      	b.n	8016fe6 <__gxx_personality_v0+0x302>
 8017066:	f898 3007 	ldrb.w	r3, [r8, #7]
 801706a:	2b01      	cmp	r3, #1
 801706c:	bf14      	ite	ne
 801706e:	f108 0358 	addne.w	r3, r8, #88	; 0x58
 8017072:	f858 3c20 	ldreq.w	r3, [r8, #-32]
 8017076:	930b      	str	r3, [sp, #44]	; 0x2c
 8017078:	e792      	b.n	8016fa0 <__gxx_personality_v0+0x2bc>
 801707a:	4604      	mov	r4, r0
 801707c:	2602      	movs	r6, #2
 801707e:	e6b3      	b.n	8016de8 <__gxx_personality_v0+0x104>
 8017080:	f7ff fc82 	bl	8016988 <__cxa_begin_catch>
 8017084:	f7ff fa34 	bl	80164f0 <_ZSt9terminatev>
 8017088:	f7ff fa3e 	bl	8016508 <_ZSt10unexpectedv>

0801708c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 801708c:	2801      	cmp	r0, #1
 801708e:	b510      	push	{r4, lr}
 8017090:	d81d      	bhi.n	80170ce <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8017092:	f04f 32ff 	mov.w	r2, #4294967295
 8017096:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 801709a:	f3bf 8f5f 	dmb	sy
 801709e:	e853 0f00 	ldrex	r0, [r3]
 80170a2:	4410      	add	r0, r2
 80170a4:	e843 0400 	strex	r4, r0, [r3]
 80170a8:	f094 0f00 	teq	r4, #0
 80170ac:	d1f7      	bne.n	801709e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
 80170ae:	f3bf 8f5f 	dmb	sy
 80170b2:	b958      	cbnz	r0, 80170cc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x40>
 80170b4:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80170b8:	f101 0458 	add.w	r4, r1, #88	; 0x58
 80170bc:	b10b      	cbz	r3, 80170c2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x36>
 80170be:	4620      	mov	r0, r4
 80170c0:	4798      	blx	r3
 80170c2:	4620      	mov	r0, r4
 80170c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170c8:	f000 ba68 	b.w	801759c <__cxa_free_exception>
 80170cc:	bd10      	pop	{r4, pc}
 80170ce:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80170d2:	f7ff f9f9 	bl	80164c8 <_ZN10__cxxabiv111__terminateEPFvvE>
 80170d6:	bf00      	nop

080170d8 <__cxa_throw>:
 80170d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170da:	f640 1304 	movw	r3, #2308	; 0x904
 80170de:	f640 1408 	movw	r4, #2312	; 0x908
 80170e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80170e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80170ea:	2743      	movs	r7, #67	; 0x43
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	262b      	movs	r6, #43	; 0x2b
 80170f0:	6825      	ldr	r5, [r4, #0]
 80170f2:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
 80170f6:	f840 1c78 	str.w	r1, [r0, #-120]
 80170fa:	2101      	movs	r1, #1
 80170fc:	f840 3c6c 	str.w	r3, [r0, #-108]
 8017100:	f247 038d 	movw	r3, #28813	; 0x708d
 8017104:	f840 1c80 	str.w	r1, [r0, #-128]
 8017108:	f6c0 0301 	movt	r3, #2049	; 0x801
 801710c:	f840 2c74 	str.w	r2, [r0, #-116]
 8017110:	f840 3c50 	str.w	r3, [r0, #-80]
 8017114:	2347      	movs	r3, #71	; 0x47
 8017116:	f840 5c70 	str.w	r5, [r0, #-112]
 801711a:	f800 3c58 	strb.w	r3, [r0, #-88]
 801711e:	234e      	movs	r3, #78	; 0x4e
 8017120:	f800 7c55 	strb.w	r7, [r0, #-85]
 8017124:	f800 3c57 	strb.w	r3, [r0, #-87]
 8017128:	2355      	movs	r3, #85	; 0x55
 801712a:	f800 7c54 	strb.w	r7, [r0, #-84]
 801712e:	f800 3c56 	strb.w	r3, [r0, #-86]
 8017132:	2300      	movs	r3, #0
 8017134:	f800 6c53 	strb.w	r6, [r0, #-83]
 8017138:	f800 3c51 	strb.w	r3, [r0, #-81]
 801713c:	f800 6c52 	strb.w	r6, [r0, #-82]
 8017140:	4620      	mov	r0, r4
 8017142:	f7ef fa4b 	bl	80065dc <_Unwind_RaiseException>
 8017146:	4620      	mov	r0, r4
 8017148:	f7ff fc1e 	bl	8016988 <__cxa_begin_catch>
 801714c:	f7ff f9d0 	bl	80164f0 <_ZSt9terminatev>

08017150 <__cxa_rethrow>:
 8017150:	b510      	push	{r4, lr}
 8017152:	f7ff fcd7 	bl	8016b04 <__cxa_get_globals>
 8017156:	6843      	ldr	r3, [r0, #4]
 8017158:	6804      	ldr	r4, [r0, #0]
 801715a:	3301      	adds	r3, #1
 801715c:	6043      	str	r3, [r0, #4]
 801715e:	b164      	cbz	r4, 801717a <__cxa_rethrow+0x2a>
 8017160:	f894 3020 	ldrb.w	r3, [r4, #32]
 8017164:	2b47      	cmp	r3, #71	; 0x47
 8017166:	d00a      	beq.n	801717e <__cxa_rethrow+0x2e>
 8017168:	2300      	movs	r3, #0
 801716a:	6003      	str	r3, [r0, #0]
 801716c:	3420      	adds	r4, #32
 801716e:	4620      	mov	r0, r4
 8017170:	f7ef fa58 	bl	8006624 <_Unwind_Resume_or_Rethrow>
 8017174:	4620      	mov	r0, r4
 8017176:	f7ff fc07 	bl	8016988 <__cxa_begin_catch>
 801717a:	f7ff f9b9 	bl	80164f0 <_ZSt9terminatev>
 801717e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8017182:	2b4e      	cmp	r3, #78	; 0x4e
 8017184:	d1f0      	bne.n	8017168 <__cxa_rethrow+0x18>
 8017186:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801718a:	2b55      	cmp	r3, #85	; 0x55
 801718c:	d1ec      	bne.n	8017168 <__cxa_rethrow+0x18>
 801718e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017192:	2b43      	cmp	r3, #67	; 0x43
 8017194:	d1e8      	bne.n	8017168 <__cxa_rethrow+0x18>
 8017196:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801719a:	2b43      	cmp	r3, #67	; 0x43
 801719c:	d1e4      	bne.n	8017168 <__cxa_rethrow+0x18>
 801719e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80171a2:	2b2b      	cmp	r3, #43	; 0x2b
 80171a4:	d1e0      	bne.n	8017168 <__cxa_rethrow+0x18>
 80171a6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80171aa:	2b2b      	cmp	r3, #43	; 0x2b
 80171ac:	d1dc      	bne.n	8017168 <__cxa_rethrow+0x18>
 80171ae:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80171b2:	2b01      	cmp	r3, #1
 80171b4:	d8d8      	bhi.n	8017168 <__cxa_rethrow+0x18>
 80171b6:	6963      	ldr	r3, [r4, #20]
 80171b8:	425b      	negs	r3, r3
 80171ba:	6163      	str	r3, [r4, #20]
 80171bc:	e7d6      	b.n	801716c <__cxa_rethrow+0x1c>
 80171be:	bf00      	nop

080171c0 <__cxa_current_exception_type>:
 80171c0:	b508      	push	{r3, lr}
 80171c2:	f7ff fc9f 	bl	8016b04 <__cxa_get_globals>
 80171c6:	6800      	ldr	r0, [r0, #0]
 80171c8:	b130      	cbz	r0, 80171d8 <__cxa_current_exception_type+0x18>
 80171ca:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80171ce:	2b01      	cmp	r3, #1
 80171d0:	bf04      	itt	eq
 80171d2:	6800      	ldreq	r0, [r0, #0]
 80171d4:	3878      	subeq	r0, #120	; 0x78
 80171d6:	6800      	ldr	r0, [r0, #0]
 80171d8:	bd08      	pop	{r3, pc}
 80171da:	bf00      	nop

080171dc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 80171dc:	4b03      	ldr	r3, [pc, #12]	; (80171ec <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 80171de:	b510      	push	{r4, lr}
 80171e0:	4604      	mov	r4, r0
 80171e2:	6003      	str	r3, [r0, #0]
 80171e4:	f000 f8dc 	bl	80173a0 <_ZNSt9type_infoD1Ev>
 80171e8:	4620      	mov	r0, r4
 80171ea:	bd10      	pop	{r4, pc}
 80171ec:	0801c3e0 	.word	0x0801c3e0

080171f0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 80171f0:	4b05      	ldr	r3, [pc, #20]	; (8017208 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 80171f2:	b510      	push	{r4, lr}
 80171f4:	4604      	mov	r4, r0
 80171f6:	6003      	str	r3, [r0, #0]
 80171f8:	f000 f8d2 	bl	80173a0 <_ZNSt9type_infoD1Ev>
 80171fc:	4620      	mov	r0, r4
 80171fe:	f7ff f953 	bl	80164a8 <_ZdlPv>
 8017202:	4620      	mov	r0, r4
 8017204:	bd10      	pop	{r4, pc}
 8017206:	bf00      	nop
 8017208:	0801c3e0 	.word	0x0801c3e0

0801720c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 801720c:	2001      	movs	r0, #1
 801720e:	4770      	bx	lr

08017210 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 8017210:	4b03      	ldr	r3, [pc, #12]	; (8017220 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8017212:	b510      	push	{r4, lr}
 8017214:	4604      	mov	r4, r0
 8017216:	6003      	str	r3, [r0, #0]
 8017218:	f000 f9e4 	bl	80175e4 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 801721c:	4620      	mov	r0, r4
 801721e:	bd10      	pop	{r4, pc}
 8017220:	0801c430 	.word	0x0801c430

08017224 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8017224:	4b05      	ldr	r3, [pc, #20]	; (801723c <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
 8017226:	b510      	push	{r4, lr}
 8017228:	4604      	mov	r4, r0
 801722a:	6003      	str	r3, [r0, #0]
 801722c:	f000 f9da 	bl	80175e4 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8017230:	4620      	mov	r0, r4
 8017232:	f7ff f939 	bl	80164a8 <_ZdlPv>
 8017236:	4620      	mov	r0, r4
 8017238:	bd10      	pop	{r4, pc}
 801723a:	bf00      	nop
 801723c:	0801c430 	.word	0x0801c430

08017240 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 8017240:	2b01      	cmp	r3, #1
 8017242:	b530      	push	{r4, r5, lr}
 8017244:	4604      	mov	r4, r0
 8017246:	b083      	sub	sp, #12
 8017248:	460d      	mov	r5, r1
 801724a:	d908      	bls.n	801725e <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
 801724c:	68e4      	ldr	r4, [r4, #12]
 801724e:	3302      	adds	r3, #2
 8017250:	68e9      	ldr	r1, [r5, #12]
 8017252:	4620      	mov	r0, r4
 8017254:	6824      	ldr	r4, [r4, #0]
 8017256:	6924      	ldr	r4, [r4, #16]
 8017258:	47a0      	blx	r4
 801725a:	b003      	add	sp, #12
 801725c:	bd30      	pop	{r4, r5, pc}
 801725e:	68c0      	ldr	r0, [r0, #12]
 8017260:	4908      	ldr	r1, [pc, #32]	; (8017284 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
 8017262:	9201      	str	r2, [sp, #4]
 8017264:	9300      	str	r3, [sp, #0]
 8017266:	f000 f8b1 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 801726a:	9a01      	ldr	r2, [sp, #4]
 801726c:	9b00      	ldr	r3, [sp, #0]
 801726e:	2800      	cmp	r0, #0
 8017270:	d0ec      	beq.n	801724c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xc>
 8017272:	68eb      	ldr	r3, [r5, #12]
 8017274:	4618      	mov	r0, r3
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	4798      	blx	r3
 801727c:	f080 0001 	eor.w	r0, r0, #1
 8017280:	b2c0      	uxtb	r0, r0
 8017282:	e7ea      	b.n	801725a <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 8017284:	0801c394 	.word	0x0801c394

08017288 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8017288:	4b03      	ldr	r3, [pc, #12]	; (8017298 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801728a:	b510      	push	{r4, lr}
 801728c:	4604      	mov	r4, r0
 801728e:	6003      	str	r3, [r0, #0]
 8017290:	f000 f908 	bl	80174a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8017294:	4620      	mov	r0, r4
 8017296:	bd10      	pop	{r4, pc}
 8017298:	0801c458 	.word	0x0801c458

0801729c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801729c:	4b05      	ldr	r3, [pc, #20]	; (80172b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 801729e:	b510      	push	{r4, lr}
 80172a0:	4604      	mov	r4, r0
 80172a2:	6003      	str	r3, [r0, #0]
 80172a4:	f000 f8fe 	bl	80174a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80172a8:	4620      	mov	r0, r4
 80172aa:	f7ff f8fd 	bl	80164a8 <_ZdlPv>
 80172ae:	4620      	mov	r0, r4
 80172b0:	bd10      	pop	{r4, pc}
 80172b2:	bf00      	nop
 80172b4:	0801c458 	.word	0x0801c458

080172b8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80172b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ba:	4607      	mov	r7, r0
 80172bc:	460e      	mov	r6, r1
 80172be:	4615      	mov	r5, r2
 80172c0:	461c      	mov	r4, r3
 80172c2:	f000 f8e1 	bl	8017488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80172c6:	b108      	cbz	r0, 80172cc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>
 80172c8:	2001      	movs	r0, #1
 80172ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172cc:	68bf      	ldr	r7, [r7, #8]
 80172ce:	4623      	mov	r3, r4
 80172d0:	4631      	mov	r1, r6
 80172d2:	462a      	mov	r2, r5
 80172d4:	4638      	mov	r0, r7
 80172d6:	683c      	ldr	r4, [r7, #0]
 80172d8:	69a4      	ldr	r4, [r4, #24]
 80172da:	47a0      	blx	r4
 80172dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172de:	bf00      	nop

080172e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	b087      	sub	sp, #28
 80172e6:	4689      	mov	r9, r1
 80172e8:	4619      	mov	r1, r3
 80172ea:	4698      	mov	r8, r3
 80172ec:	4607      	mov	r7, r0
 80172ee:	4692      	mov	sl, r2
 80172f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80172f2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80172f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80172f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80172fa:	f000 f867 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 80172fe:	4603      	mov	r3, r0
 8017300:	b168      	cbz	r0, 801731e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e>
 8017302:	f1b9 0f00 	cmp.w	r9, #0
 8017306:	6025      	str	r5, [r4, #0]
 8017308:	f884 a004 	strb.w	sl, [r4, #4]
 801730c:	db18      	blt.n	8017340 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x60>
 801730e:	444d      	add	r5, r9
 8017310:	2000      	movs	r0, #0
 8017312:	42ae      	cmp	r6, r5
 8017314:	bf14      	ite	ne
 8017316:	2601      	movne	r6, #1
 8017318:	2606      	moveq	r6, #6
 801731a:	71a6      	strb	r6, [r4, #6]
 801731c:	e00d      	b.n	801733a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 801731e:	42b5      	cmp	r5, r6
 8017320:	d015      	beq.n	801734e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8017322:	68bf      	ldr	r7, [r7, #8]
 8017324:	4649      	mov	r1, r9
 8017326:	4652      	mov	r2, sl
 8017328:	4643      	mov	r3, r8
 801732a:	4638      	mov	r0, r7
 801732c:	683f      	ldr	r7, [r7, #0]
 801732e:	9602      	str	r6, [sp, #8]
 8017330:	9403      	str	r4, [sp, #12]
 8017332:	e88d 0820 	stmia.w	sp, {r5, fp}
 8017336:	69fc      	ldr	r4, [r7, #28]
 8017338:	47a0      	blx	r4
 801733a:	b007      	add	sp, #28
 801733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017340:	2000      	movs	r0, #0
 8017342:	f119 0f02 	cmn.w	r9, #2
 8017346:	d1f8      	bne.n	801733a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 8017348:	2301      	movs	r3, #1
 801734a:	71a3      	strb	r3, [r4, #6]
 801734c:	e7f5      	b.n	801733a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 801734e:	4638      	mov	r0, r7
 8017350:	4659      	mov	r1, fp
 8017352:	9305      	str	r3, [sp, #20]
 8017354:	f000 f83a 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 8017358:	9b05      	ldr	r3, [sp, #20]
 801735a:	2800      	cmp	r0, #0
 801735c:	d0e1      	beq.n	8017322 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801735e:	f884 a005 	strb.w	sl, [r4, #5]
 8017362:	4618      	mov	r0, r3
 8017364:	e7e9      	b.n	801733a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 8017366:	bf00      	nop

08017368 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8017368:	b570      	push	{r4, r5, r6, lr}
 801736a:	b084      	sub	sp, #16
 801736c:	4605      	mov	r5, r0
 801736e:	460e      	mov	r6, r1
 8017370:	9c08      	ldr	r4, [sp, #32]
 8017372:	4294      	cmp	r4, r2
 8017374:	d008      	beq.n	8017388 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 8017376:	68ad      	ldr	r5, [r5, #8]
 8017378:	4631      	mov	r1, r6
 801737a:	4628      	mov	r0, r5
 801737c:	682d      	ldr	r5, [r5, #0]
 801737e:	9400      	str	r4, [sp, #0]
 8017380:	6a2c      	ldr	r4, [r5, #32]
 8017382:	47a0      	blx	r4
 8017384:	b004      	add	sp, #16
 8017386:	bd70      	pop	{r4, r5, r6, pc}
 8017388:	4619      	mov	r1, r3
 801738a:	9203      	str	r2, [sp, #12]
 801738c:	9302      	str	r3, [sp, #8]
 801738e:	f000 f81d 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 8017392:	9a03      	ldr	r2, [sp, #12]
 8017394:	9b02      	ldr	r3, [sp, #8]
 8017396:	2800      	cmp	r0, #0
 8017398:	d0ed      	beq.n	8017376 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801739a:	2006      	movs	r0, #6
 801739c:	e7f2      	b.n	8017384 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 801739e:	bf00      	nop

080173a0 <_ZNSt9type_infoD1Ev>:
 80173a0:	4b01      	ldr	r3, [pc, #4]	; (80173a8 <_ZNSt9type_infoD1Ev+0x8>)
 80173a2:	6003      	str	r3, [r0, #0]
 80173a4:	4770      	bx	lr
 80173a6:	bf00      	nop
 80173a8:	0801c4d8 	.word	0x0801c4d8

080173ac <_ZNKSt9type_info14__is_pointer_pEv>:
 80173ac:	2000      	movs	r0, #0
 80173ae:	4770      	bx	lr

080173b0 <_ZNKSt9type_info15__is_function_pEv>:
 80173b0:	2000      	movs	r0, #0
 80173b2:	4770      	bx	lr

080173b4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 80173b4:	2000      	movs	r0, #0
 80173b6:	4770      	bx	lr

080173b8 <_ZNSt9type_infoD0Ev>:
 80173b8:	4b03      	ldr	r3, [pc, #12]	; (80173c8 <_ZNSt9type_infoD0Ev+0x10>)
 80173ba:	b510      	push	{r4, lr}
 80173bc:	4604      	mov	r4, r0
 80173be:	6003      	str	r3, [r0, #0]
 80173c0:	f7ff f872 	bl	80164a8 <_ZdlPv>
 80173c4:	4620      	mov	r0, r4
 80173c6:	bd10      	pop	{r4, pc}
 80173c8:	0801c4d8 	.word	0x0801c4d8

080173cc <_ZNKSt9type_infoeqERKS_>:
 80173cc:	4281      	cmp	r1, r0
 80173ce:	b508      	push	{r3, lr}
 80173d0:	d016      	beq.n	8017400 <_ZNKSt9type_infoeqERKS_+0x34>
 80173d2:	6840      	ldr	r0, [r0, #4]
 80173d4:	7803      	ldrb	r3, [r0, #0]
 80173d6:	2b2a      	cmp	r3, #42	; 0x2a
 80173d8:	d00b      	beq.n	80173f2 <_ZNKSt9type_infoeqERKS_+0x26>
 80173da:	6849      	ldr	r1, [r1, #4]
 80173dc:	780b      	ldrb	r3, [r1, #0]
 80173de:	2b2a      	cmp	r3, #42	; 0x2a
 80173e0:	bf08      	it	eq
 80173e2:	3101      	addeq	r1, #1
 80173e4:	f7f0 fd8a 	bl	8007efc <strcmp>
 80173e8:	f1d0 0001 	rsbs	r0, r0, #1
 80173ec:	bf38      	it	cc
 80173ee:	2000      	movcc	r0, #0
 80173f0:	bd08      	pop	{r3, pc}
 80173f2:	7843      	ldrb	r3, [r0, #1]
 80173f4:	2b2a      	cmp	r3, #42	; 0x2a
 80173f6:	d101      	bne.n	80173fc <_ZNKSt9type_infoeqERKS_+0x30>
 80173f8:	2000      	movs	r0, #0
 80173fa:	bd08      	pop	{r3, pc}
 80173fc:	3001      	adds	r0, #1
 80173fe:	e7ec      	b.n	80173da <_ZNKSt9type_infoeqERKS_+0xe>
 8017400:	2001      	movs	r0, #1
 8017402:	bd08      	pop	{r3, pc}

08017404 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8017404:	f7ff bfe2 	b.w	80173cc <_ZNKSt9type_infoeqERKS_>

08017408 <_ZNKSt10bad_typeid4whatEv>:
 8017408:	f24c 5014 	movw	r0, #50452	; 0xc514
 801740c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8017410:	4770      	bx	lr
 8017412:	bf00      	nop

08017414 <_ZNSt10bad_typeidD1Ev>:
 8017414:	4b03      	ldr	r3, [pc, #12]	; (8017424 <_ZNSt10bad_typeidD1Ev+0x10>)
 8017416:	b510      	push	{r4, lr}
 8017418:	4604      	mov	r4, r0
 801741a:	6003      	str	r3, [r0, #0]
 801741c:	f7ff fb40 	bl	8016aa0 <_ZNSt9exceptionD1Ev>
 8017420:	4620      	mov	r0, r4
 8017422:	bd10      	pop	{r4, pc}
 8017424:	0801c4f8 	.word	0x0801c4f8

08017428 <_ZNSt10bad_typeidD0Ev>:
 8017428:	4b05      	ldr	r3, [pc, #20]	; (8017440 <_ZNSt10bad_typeidD0Ev+0x18>)
 801742a:	b510      	push	{r4, lr}
 801742c:	4604      	mov	r4, r0
 801742e:	6003      	str	r3, [r0, #0]
 8017430:	f7ff fb36 	bl	8016aa0 <_ZNSt9exceptionD1Ev>
 8017434:	4620      	mov	r0, r4
 8017436:	f7ff f837 	bl	80164a8 <_ZdlPv>
 801743a:	4620      	mov	r0, r4
 801743c:	bd10      	pop	{r4, pc}
 801743e:	bf00      	nop
 8017440:	0801c4f8 	.word	0x0801c4f8

08017444 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8017444:	b570      	push	{r4, r5, r6, lr}
 8017446:	b084      	sub	sp, #16
 8017448:	6806      	ldr	r6, [r0, #0]
 801744a:	2400      	movs	r4, #0
 801744c:	2310      	movs	r3, #16
 801744e:	4615      	mov	r5, r2
 8017450:	9302      	str	r3, [sp, #8]
 8017452:	466b      	mov	r3, sp
 8017454:	6812      	ldr	r2, [r2, #0]
 8017456:	9400      	str	r4, [sp, #0]
 8017458:	f88d 4004 	strb.w	r4, [sp, #4]
 801745c:	9403      	str	r4, [sp, #12]
 801745e:	69b6      	ldr	r6, [r6, #24]
 8017460:	47b0      	blx	r6
 8017462:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017466:	f003 0306 	and.w	r3, r3, #6
 801746a:	2b06      	cmp	r3, #6
 801746c:	bf18      	it	ne
 801746e:	4620      	movne	r0, r4
 8017470:	d102      	bne.n	8017478 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x34>
 8017472:	9b00      	ldr	r3, [sp, #0]
 8017474:	2001      	movs	r0, #1
 8017476:	602b      	str	r3, [r5, #0]
 8017478:	b004      	add	sp, #16
 801747a:	bd70      	pop	{r4, r5, r6, pc}

0801747c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801747c:	9800      	ldr	r0, [sp, #0]
 801747e:	4290      	cmp	r0, r2
 8017480:	bf14      	ite	ne
 8017482:	2001      	movne	r0, #1
 8017484:	2006      	moveq	r0, #6
 8017486:	4770      	bx	lr

08017488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	4614      	mov	r4, r2
 801748c:	461d      	mov	r5, r3
 801748e:	f7ff ff9d 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 8017492:	b128      	cbz	r0, 80174a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x18>
 8017494:	2001      	movs	r0, #1
 8017496:	2308      	movs	r3, #8
 8017498:	602c      	str	r4, [r5, #0]
 801749a:	60eb      	str	r3, [r5, #12]
 801749c:	2306      	movs	r3, #6
 801749e:	712b      	strb	r3, [r5, #4]
 80174a0:	bd38      	pop	{r3, r4, r5, pc}
 80174a2:	bf00      	nop

080174a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80174a4:	4b03      	ldr	r3, [pc, #12]	; (80174b4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80174a6:	b510      	push	{r4, lr}
 80174a8:	4604      	mov	r4, r0
 80174aa:	6003      	str	r3, [r0, #0]
 80174ac:	f7ff ff78 	bl	80173a0 <_ZNSt9type_infoD1Ev>
 80174b0:	4620      	mov	r0, r4
 80174b2:	bd10      	pop	{r4, pc}
 80174b4:	0801c540 	.word	0x0801c540

080174b8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80174b8:	4b05      	ldr	r3, [pc, #20]	; (80174d0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 80174ba:	b510      	push	{r4, lr}
 80174bc:	4604      	mov	r4, r0
 80174be:	6003      	str	r3, [r0, #0]
 80174c0:	f7ff ff6e 	bl	80173a0 <_ZNSt9type_infoD1Ev>
 80174c4:	4620      	mov	r0, r4
 80174c6:	f7fe ffef 	bl	80164a8 <_ZdlPv>
 80174ca:	4620      	mov	r0, r4
 80174cc:	bd10      	pop	{r4, pc}
 80174ce:	bf00      	nop
 80174d0:	0801c540 	.word	0x0801c540

080174d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80174d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174d6:	b083      	sub	sp, #12
 80174d8:	4616      	mov	r6, r2
 80174da:	4605      	mov	r5, r0
 80174dc:	9c08      	ldr	r4, [sp, #32]
 80174de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80174e2:	4294      	cmp	r4, r2
 80174e4:	d00b      	beq.n	80174fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 80174e6:	4628      	mov	r0, r5
 80174e8:	4619      	mov	r1, r3
 80174ea:	f7ff ff6f 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 80174ee:	b118      	cbz	r0, 80174f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 80174f0:	2301      	movs	r3, #1
 80174f2:	603c      	str	r4, [r7, #0]
 80174f4:	713e      	strb	r6, [r7, #4]
 80174f6:	71bb      	strb	r3, [r7, #6]
 80174f8:	2000      	movs	r0, #0
 80174fa:	b003      	add	sp, #12
 80174fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017500:	9301      	str	r3, [sp, #4]
 8017502:	f7ff ff63 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 8017506:	9b01      	ldr	r3, [sp, #4]
 8017508:	2800      	cmp	r0, #0
 801750a:	d0ec      	beq.n	80174e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
 801750c:	717e      	strb	r6, [r7, #5]
 801750e:	e7f3      	b.n	80174f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>

08017510 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8017510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017512:	4605      	mov	r5, r0
 8017514:	460c      	mov	r4, r1
 8017516:	4616      	mov	r6, r2
 8017518:	461f      	mov	r7, r3
 801751a:	f7ff ff57 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 801751e:	b948      	cbnz	r0, 8017534 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x24>
 8017520:	2f03      	cmp	r7, #3
 8017522:	d900      	bls.n	8017526 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8017524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017526:	6823      	ldr	r3, [r4, #0]
 8017528:	4620      	mov	r0, r4
 801752a:	4629      	mov	r1, r5
 801752c:	4632      	mov	r2, r6
 801752e:	695b      	ldr	r3, [r3, #20]
 8017530:	4798      	blx	r3
 8017532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017534:	2001      	movs	r0, #1
 8017536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017538 <__cxa_allocate_exception>:
 8017538:	b538      	push	{r3, r4, r5, lr}
 801753a:	f100 0580 	add.w	r5, r0, #128	; 0x80
 801753e:	4628      	mov	r0, r5
 8017540:	f7ef fd4a 	bl	8006fd8 <malloc>
 8017544:	4604      	mov	r4, r0
 8017546:	b168      	cbz	r0, 8017564 <__cxa_allocate_exception+0x2c>
 8017548:	f7ff fadc 	bl	8016b04 <__cxa_get_globals>
 801754c:	2100      	movs	r1, #0
 801754e:	2280      	movs	r2, #128	; 0x80
 8017550:	4603      	mov	r3, r0
 8017552:	4620      	mov	r0, r4
 8017554:	685d      	ldr	r5, [r3, #4]
 8017556:	3501      	adds	r5, #1
 8017558:	605d      	str	r5, [r3, #4]
 801755a:	f7f0 f919 	bl	8007790 <memset>
 801755e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	4a0b      	ldr	r2, [pc, #44]	; (8017594 <__cxa_allocate_exception+0x5c>)
 8017566:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801756a:	6811      	ldr	r1, [r2, #0]
 801756c:	bf98      	it	ls
 801756e:	460b      	movls	r3, r1
 8017570:	d805      	bhi.n	801757e <__cxa_allocate_exception+0x46>
 8017572:	07d8      	lsls	r0, r3, #31
 8017574:	d505      	bpl.n	8017582 <__cxa_allocate_exception+0x4a>
 8017576:	3401      	adds	r4, #1
 8017578:	085b      	lsrs	r3, r3, #1
 801757a:	2c04      	cmp	r4, #4
 801757c:	d1f9      	bne.n	8017572 <__cxa_allocate_exception+0x3a>
 801757e:	f7fe ffb7 	bl	80164f0 <_ZSt9terminatev>
 8017582:	2301      	movs	r3, #1
 8017584:	4804      	ldr	r0, [pc, #16]	; (8017598 <__cxa_allocate_exception+0x60>)
 8017586:	40a3      	lsls	r3, r4
 8017588:	eb00 2444 	add.w	r4, r0, r4, lsl #9
 801758c:	4319      	orrs	r1, r3
 801758e:	6011      	str	r1, [r2, #0]
 8017590:	e7da      	b.n	8017548 <__cxa_allocate_exception+0x10>
 8017592:	bf00      	nop
 8017594:	20000f70 	.word	0x20000f70
 8017598:	20000f78 	.word	0x20000f78

0801759c <__cxa_free_exception>:
 801759c:	4b0a      	ldr	r3, [pc, #40]	; (80175c8 <__cxa_free_exception+0x2c>)
 801759e:	4298      	cmp	r0, r3
 80175a0:	d30e      	bcc.n	80175c0 <__cxa_free_exception+0x24>
 80175a2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80175a6:	4290      	cmp	r0, r2
 80175a8:	d20a      	bcs.n	80175c0 <__cxa_free_exception+0x24>
 80175aa:	4a08      	ldr	r2, [pc, #32]	; (80175cc <__cxa_free_exception+0x30>)
 80175ac:	1ac3      	subs	r3, r0, r3
 80175ae:	2001      	movs	r0, #1
 80175b0:	0a5b      	lsrs	r3, r3, #9
 80175b2:	6811      	ldr	r1, [r2, #0]
 80175b4:	fa10 f303 	lsls.w	r3, r0, r3
 80175b8:	ea21 0303 	bic.w	r3, r1, r3
 80175bc:	6013      	str	r3, [r2, #0]
 80175be:	4770      	bx	lr
 80175c0:	3880      	subs	r0, #128	; 0x80
 80175c2:	f7ef bd11 	b.w	8006fe8 <free>
 80175c6:	bf00      	nop
 80175c8:	20000f78 	.word	0x20000f78
 80175cc:	20000f70 	.word	0x20000f70

080175d0 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 80175d0:	b510      	push	{r4, lr}
 80175d2:	3302      	adds	r3, #2
 80175d4:	68c4      	ldr	r4, [r0, #12]
 80175d6:	68c9      	ldr	r1, [r1, #12]
 80175d8:	4620      	mov	r0, r4
 80175da:	6824      	ldr	r4, [r4, #0]
 80175dc:	6924      	ldr	r4, [r4, #16]
 80175de:	47a0      	blx	r4
 80175e0:	bd10      	pop	{r4, pc}
 80175e2:	bf00      	nop

080175e4 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 80175e4:	4b03      	ldr	r3, [pc, #12]	; (80175f4 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 80175e6:	b510      	push	{r4, lr}
 80175e8:	4604      	mov	r4, r0
 80175ea:	6003      	str	r3, [r0, #0]
 80175ec:	f7ff fed8 	bl	80173a0 <_ZNSt9type_infoD1Ev>
 80175f0:	4620      	mov	r0, r4
 80175f2:	bd10      	pop	{r4, pc}
 80175f4:	0801c5d0 	.word	0x0801c5d0

080175f8 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 80175f8:	4b05      	ldr	r3, [pc, #20]	; (8017610 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
 80175fa:	b510      	push	{r4, lr}
 80175fc:	4604      	mov	r4, r0
 80175fe:	6003      	str	r3, [r0, #0]
 8017600:	f7ff fece 	bl	80173a0 <_ZNSt9type_infoD1Ev>
 8017604:	4620      	mov	r0, r4
 8017606:	f7fe ff4f 	bl	80164a8 <_ZdlPv>
 801760a:	4620      	mov	r0, r4
 801760c:	bd10      	pop	{r4, pc}
 801760e:	bf00      	nop
 8017610:	0801c5d0 	.word	0x0801c5d0

08017614 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 8017614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017618:	4605      	mov	r5, r0
 801761a:	460c      	mov	r4, r1
 801761c:	4617      	mov	r7, r2
 801761e:	461e      	mov	r6, r3
 8017620:	f7ff fed4 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 8017624:	4680      	mov	r8, r0
 8017626:	2800      	cmp	r0, #0
 8017628:	d125      	bne.n	8017676 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x62>
 801762a:	682b      	ldr	r3, [r5, #0]
 801762c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017630:	2c00      	cmp	r4, #0
 8017632:	d023      	beq.n	801767c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x68>
 8017634:	6823      	ldr	r3, [r4, #0]
 8017636:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801763a:	f7ff fec7 	bl	80173cc <_ZNKSt9type_infoeqERKS_>
 801763e:	b1a8      	cbz	r0, 801766c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 8017640:	f016 0001 	ands.w	r0, r6, #1
 8017644:	d015      	beq.n	8017672 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 8017646:	68ab      	ldr	r3, [r5, #8]
 8017648:	68a2      	ldr	r2, [r4, #8]
 801764a:	439a      	bics	r2, r3
 801764c:	d110      	bne.n	8017670 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
 801764e:	f8d5 e000 	ldr.w	lr, [r5]
 8017652:	07db      	lsls	r3, r3, #31
 8017654:	bf58      	it	pl
 8017656:	f026 0601 	bicpl.w	r6, r6, #1
 801765a:	4621      	mov	r1, r4
 801765c:	4628      	mov	r0, r5
 801765e:	463a      	mov	r2, r7
 8017660:	4633      	mov	r3, r6
 8017662:	f8de 4018 	ldr.w	r4, [lr, #24]
 8017666:	47a0      	blx	r4
 8017668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017670:	4640      	mov	r0, r8
 8017672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017676:	2001      	movs	r0, #1
 8017678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801767c:	f7ff f8c0 	bl	8016800 <__cxa_bad_typeid>
 8017680:	72746e49 	.word	0x72746e49
 8017684:	6375646f 	.word	0x6375646f
 8017688:	20676e69 	.word	0x20676e69
 801768c:	6a6f7250 	.word	0x6a6f7250
 8017690:	3a746365 	.word	0x3a746365
 8017694:	00000000 	.word	0x00000000
 8017698:	6e756854 	.word	0x6e756854
 801769c:	43726564 	.word	0x43726564
 80176a0:	72657972 	.word	0x72657972
 80176a4:	00000000 	.word	0x00000000
 80176a8:	313a3132 	.word	0x313a3132
 80176ac:	00000034 	.word	0x00000034
 80176b0:	202e7246 	.word	0x202e7246
 80176b4:	302e3432 	.word	0x302e3432
 80176b8:	32312e32 	.word	0x32312e32
 80176bc:	00000000 	.word	0x00000000
 80176c0:	65766544 	.word	0x65766544
 80176c4:	6d706f6c 	.word	0x6d706f6c
 80176c8:	20746e65 	.word	0x20746e65
 80176cc:	70206e69 	.word	0x70206e69
 80176d0:	72676f72 	.word	0x72676f72
 80176d4:	00737365 	.word	0x00737365
 80176d8:	75323025 	.word	0x75323025
 80176dc:	00000000 	.word	0x00000000
 80176e0:	462f2e2e 	.word	0x462f2e2e
 80176e4:	52656572 	.word	0x52656572
 80176e8:	5f534f54 	.word	0x5f534f54
 80176ec:	532f4345 	.word	0x532f4345
 80176f0:	6372756f 	.word	0x6372756f
 80176f4:	54432f65 	.word	0x54432f65
 80176f8:	2e6b7361 	.word	0x2e6b7361
 80176fc:	00707063 	.word	0x00707063
 8017700:	646e6168 	.word	0x646e6168
 8017704:	2120656c 	.word	0x2120656c
 8017708:	554e203d 	.word	0x554e203d
 801770c:	00004c4c 	.word	0x00004c4c
 8017710:	2b2a2220 	.word	0x2b2a2220
 8017714:	5d3d5b2c 	.word	0x5d3d5b2c
 8017718:	00007f7c 	.word	0x00007f7c
 801771c:	4e204f4e 	.word	0x4e204f4e
 8017720:	20454d41 	.word	0x20454d41
 8017724:	46202020 	.word	0x46202020
 8017728:	20205441 	.word	0x20205441
 801772c:	00202020 	.word	0x00202020
 8017730:	4e204f4e 	.word	0x4e204f4e
 8017734:	20454d41 	.word	0x20454d41
 8017738:	46202020 	.word	0x46202020
 801773c:	32335441 	.word	0x32335441
 8017740:	00202020 	.word	0x00202020
 8017744:	6c6c6568 	.word	0x6c6c6568
 8017748:	78742e6f 	.word	0x78742e6f
 801774c:	00000074 	.word	0x00000074
 8017750:	6c6c6568 	.word	0x6c6c6568
 8017754:	6f77206f 	.word	0x6f77206f
 8017758:	00646c72 	.word	0x00646c72
 801775c:	6e676973 	.word	0x6e676973
 8017760:	63206465 	.word	0x63206465
 8017764:	00726168 	.word	0x00726168
 8017768:	6c6f6f62 	.word	0x6c6f6f62
 801776c:	00000000 	.word	0x00000000
 8017770:	6c6f6f62 	.word	0x6c6f6f62
 8017774:	006e6165 	.word	0x006e6165
 8017778:	72616863 	.word	0x72616863
 801777c:	00000000 	.word	0x00000000
 8017780:	65747962 	.word	0x65747962
 8017784:	00000000 	.word	0x00000000
 8017788:	62756f64 	.word	0x62756f64
 801778c:	0000656c 	.word	0x0000656c
 8017790:	676e6f6c 	.word	0x676e6f6c
 8017794:	756f6420 	.word	0x756f6420
 8017798:	00656c62 	.word	0x00656c62
 801779c:	616f6c66 	.word	0x616f6c66
 80177a0:	00000074 	.word	0x00000074
 80177a4:	6c665f5f 	.word	0x6c665f5f
 80177a8:	3174616f 	.word	0x3174616f
 80177ac:	00003832 	.word	0x00003832
 80177b0:	69736e75 	.word	0x69736e75
 80177b4:	64656e67 	.word	0x64656e67
 80177b8:	61686320 	.word	0x61686320
 80177bc:	00000072 	.word	0x00000072
 80177c0:	00746e69 	.word	0x00746e69
 80177c4:	69736e75 	.word	0x69736e75
 80177c8:	64656e67 	.word	0x64656e67
 80177cc:	746e6920 	.word	0x746e6920
 80177d0:	00000000 	.word	0x00000000
 80177d4:	69736e75 	.word	0x69736e75
 80177d8:	64656e67 	.word	0x64656e67
 80177dc:	00000000 	.word	0x00000000
 80177e0:	676e6f6c 	.word	0x676e6f6c
 80177e4:	00000000 	.word	0x00000000
 80177e8:	69736e75 	.word	0x69736e75
 80177ec:	64656e67 	.word	0x64656e67
 80177f0:	6e6f6c20 	.word	0x6e6f6c20
 80177f4:	00000067 	.word	0x00000067
 80177f8:	6e695f5f 	.word	0x6e695f5f
 80177fc:	38323174 	.word	0x38323174
 8017800:	00000000 	.word	0x00000000
 8017804:	69736e75 	.word	0x69736e75
 8017808:	64656e67 	.word	0x64656e67
 801780c:	695f5f20 	.word	0x695f5f20
 8017810:	3231746e 	.word	0x3231746e
 8017814:	00000038 	.word	0x00000038
 8017818:	726f6873 	.word	0x726f6873
 801781c:	00000074 	.word	0x00000074
 8017820:	69736e75 	.word	0x69736e75
 8017824:	64656e67 	.word	0x64656e67
 8017828:	6f687320 	.word	0x6f687320
 801782c:	00007472 	.word	0x00007472
 8017830:	64696f76 	.word	0x64696f76
 8017834:	00000000 	.word	0x00000000
 8017838:	61686377 	.word	0x61686377
 801783c:	00745f72 	.word	0x00745f72
 8017840:	676e6f6c 	.word	0x676e6f6c
 8017844:	6e6f6c20 	.word	0x6e6f6c20
 8017848:	00000067 	.word	0x00000067
 801784c:	69736e75 	.word	0x69736e75
 8017850:	64656e67 	.word	0x64656e67
 8017854:	6e6f6c20 	.word	0x6e6f6c20
 8017858:	6f6c2067 	.word	0x6f6c2067
 801785c:	0000676e 	.word	0x0000676e
 8017860:	002e2e2e 	.word	0x002e2e2e
 8017864:	69636564 	.word	0x69636564
 8017868:	336c616d 	.word	0x336c616d
 801786c:	00000032 	.word	0x00000032
 8017870:	69636564 	.word	0x69636564
 8017874:	366c616d 	.word	0x366c616d
 8017878:	00000034 	.word	0x00000034
 801787c:	69636564 	.word	0x69636564
 8017880:	316c616d 	.word	0x316c616d
 8017884:	00003832 	.word	0x00003832
 8017888:	666c6168 	.word	0x666c6168
 801788c:	00000000 	.word	0x00000000
 8017890:	72616863 	.word	0x72616863
 8017894:	745f3631 	.word	0x745f3631
 8017898:	00000000 	.word	0x00000000
 801789c:	72616863 	.word	0x72616863
 80178a0:	745f3233 	.word	0x745f3233
 80178a4:	00000000 	.word	0x00000000
 80178a8:	6c636564 	.word	0x6c636564
 80178ac:	65707974 	.word	0x65707974
 80178b0:	6c756e28 	.word	0x6c756e28
 80178b4:	7274706c 	.word	0x7274706c
 80178b8:	00000029 	.word	0x00000029

080178bc <cplus_demangle_builtin_types>:
 80178bc:	0801775c 0000000b 0801775c 0000000b     \w......\w......
 80178cc:	00000000 08017768 00000004 08017770     ....hw......pw..
 80178dc:	00000007 00000007 08017778 00000004     ........xw......
 80178ec:	08017780 00000004 00000000 08017788     .w...........w..
 80178fc:	00000006 08017788 00000006 00000008     .....w..........
 801790c:	08017790 0000000b 08017790 0000000b     .w.......w......
 801791c:	00000008 0801779c 00000005 0801779c     .....w.......w..
 801792c:	00000005 00000008 080177a4 0000000a     .........w......
 801793c:	080177a4 0000000a 00000008 080177b0     .w...........w..
 801794c:	0000000d 080177b0 0000000d 00000000     .....w..........
 801795c:	080177c0 00000003 080177c0 00000003     .w.......w......
 801796c:	00000001 080177c4 0000000c 080177d4     .....w.......w..
 801797c:	00000008 00000002 00000000 00000000     ................
	...
 8017998:	080177e0 00000004 080177e0 00000004     .w.......w......
 80179a8:	00000003 080177e8 0000000d 080177e8     .....w.......w..
 80179b8:	0000000d 00000004 080177f8 00000008     .........w......
 80179c8:	080177f8 00000008 00000000 08017804     .w...........x..
 80179d8:	00000011 08017804 00000011 00000000     .....x..........
	...
 8017a24:	08017818 00000005 08017818 00000005     .x.......x......
 8017a34:	00000000 08017820 0000000e 08017820     .... x...... x..
 8017a44:	0000000e 00000000 00000000 00000000     ................
	...
 8017a60:	08017830 00000004 08017830 00000004     0x......0x......
 8017a70:	00000009 08017838 00000007 08017778     ....8x......xw..
 8017a80:	00000004 00000000 08017840 00000009     ........@x......
 8017a90:	080177e0 00000004 00000005 0801784c     .w..........Lx..
 8017aa0:	00000012 0801784c 00000012 00000006     ....Lx..........
 8017ab0:	08017860 00000003 08017860 00000003     `x......`x......
 8017ac0:	00000000 08017864 00000009 08017864     ....dx......dx..
 8017ad0:	00000009 00000000 08017870 00000009     ........px......
 8017ae0:	08017870 00000009 00000000 0801787c     px..........|x..
 8017af0:	0000000a 0801787c 0000000a 00000000     ....|x..........
 8017b00:	08017888 00000004 08017888 00000004     .x.......x......
 8017b10:	00000008 08017890 00000008 08017890     .....x.......x..
 8017b20:	00000008 00000000 0801789c 00000008     .........x......
 8017b30:	0801789c 00000008 00000000 080178a8     .x...........x..
 8017b40:	00000011 080178a8 00000011 00000000     .....x..........
 8017b50:	00647473 4f4c475f 5f4c4142 00000000     std._GLOBAL_....
 8017b60:	6f6e6128 6f6d796e 6e207375 73656d61     (anonymous names
 8017b70:	65636170 00000029 00004e61 00003d26     pace)...aN..&=..
 8017b80:	00005361 0000003d 00006161 00002626     aS..=...aa..&&..
 8017b90:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
 8017ba0:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
 8017bb0:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
 8017bc0:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
 8017bd0:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
 8017be0:	00007464 0000002e 00007664 0000002f     dt......dv../...
 8017bf0:	00004f65 00003d5e 00006f65 0000005e     eO..^=..eo..^...
 8017c00:	00007165 00003d3d 00006567 00003d3e     eq..==..ge..>=..
 8017c10:	00007467 0000003e 00007869 00005d5b     gt..>...ix..[]..
 8017c20:	0000536c 003d3c3c 0000656c 00003d3c     lS..<<=.le..<=..
 8017c30:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
 8017c40:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
 8017c50:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
 8017c60:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
 8017c70:	0000656e 00003d21 0000676e 0000746e     ne..!=..ng..nt..
 8017c80:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
 8017c90:	00003d7c 00006f6f 00007c7c 0000726f     |=..oo..||..or..
 8017ca0:	0000007c 00004c70 00003d2b 00006c70     |...pL..+=..pl..
 8017cb0:	0000002b 00006d70 002a3e2d 00007070     +...pm..->*.pp..
 8017cc0:	00002b2b 00007370 00007470 00003e2d     ++..ps..pt..->..
 8017cd0:	00007571 0000003f 00004d72 00003d25     qu..?...rM..%=..
 8017ce0:	00005372 003d3e3e 00006d72 00000025     rS..>>=.rm..%...
 8017cf0:	00007372 00003e3e 00007473 657a6973     rs..>>..st..size
 8017d00:	0020666f 00007a73 00007461 67696c61     of .sz..at..alig
 8017d10:	20666f6e 00000000 00007a61              nof ....az..

08017d1c <cplus_demangle_operators>:
 8017d1c:	08017b78 08017b7c 00000002 00000002     x{..|{..........
 8017d2c:	08017b80 08017b84 00000001 00000002     .{...{..........
 8017d3c:	08017b88 08017b8c 00000002 00000002     .{...{..........
 8017d4c:	08017b90 08017b94 00000001 00000001     .{...{..........
 8017d5c:	08017b98 08017b94 00000001 00000002     .{...{..........
 8017d6c:	08017b9c 08017ba0 00000002 00000002     .{...{..........
 8017d7c:	08017ba4 08017ba8 00000001 00000002     .{...{..........
 8017d8c:	08017bac 08017bb0 00000001 00000001     .{...{..........
 8017d9c:	08017bb4 08017bb8 00000002 00000002     .{...{..........
 8017dac:	08017bbc 08017bc0 00000008 00000001     .{...{..........
 8017dbc:	08017bcc 08017bd0 00000001 00000001     .{...{..........
 8017dcc:	08017bd4 08017bd8 00000006 00000001     .{...{..........
 8017ddc:	08017be0 08017be4 00000001 00000002     .{...{..........
 8017dec:	08017be8 08017bec 00000001 00000002     .{...{..........
 8017dfc:	08017bf0 08017bf4 00000002 00000002     .{...{..........
 8017e0c:	08017bf8 08017bfc 00000001 00000002     .{...{..........
 8017e1c:	08017c00 08017c04 00000002 00000002     .|...|..........
 8017e2c:	08017c08 08017c0c 00000002 00000002     .|...|..........
 8017e3c:	08017c10 08017c14 00000001 00000002     .|...|..........
 8017e4c:	08017c18 08017c1c 00000002 00000002     .|...|..........
 8017e5c:	08017c20 08017c24 00000003 00000002      |..$|..........
 8017e6c:	08017c28 08017c2c 00000002 00000002     (|..,|..........
 8017e7c:	08017c30 08017c34 00000002 00000002     0|..4|..........
 8017e8c:	08017c38 08017c3c 00000001 00000002     8|..<|..........
 8017e9c:	08017c40 08017c44 00000002 00000002     @|..D|..........
 8017eac:	08017c48 08017c4c 00000002 00000002     H|..L|..........
 8017ebc:	08017c50 08017c54 00000001 00000002     P|..T|..........
 8017ecc:	08017c58 08017bd0 00000001 00000002     X|...{..........
 8017edc:	08017c5c 08017c60 00000002 00000001     \|..`|..........
 8017eec:	08017c64 08017c68 00000005 00000001     d|..h|..........
 8017efc:	08017c70 08017c74 00000002 00000002     p|..t|..........
 8017f0c:	08017c78 08017c54 00000001 00000001     x|..T|..........
 8017f1c:	08017c7c 08017c80 00000001 00000001     ||...|..........
 8017f2c:	08017c84 08017c88 00000003 00000001     .|...|..........
 8017f3c:	08017c8c 08017c90 00000002 00000002     .|...|..........
 8017f4c:	08017c94 08017c98 00000002 00000002     .|...|..........
 8017f5c:	08017c9c 08017ca0 00000001 00000002     .|...|..........
 8017f6c:	08017ca4 08017ca8 00000002 00000002     .|...|..........
 8017f7c:	08017cac 08017cb0 00000001 00000002     .|...|..........
 8017f8c:	08017cb4 08017cb8 00000003 00000002     .|...|..........
 8017f9c:	08017cbc 08017cc0 00000002 00000001     .|...|..........
 8017fac:	08017cc4 08017cb0 00000001 00000001     .|...|..........
 8017fbc:	08017cc8 08017ccc 00000002 00000002     .|...|..........
 8017fcc:	08017cd0 08017cd4 00000001 00000003     .|...|..........
 8017fdc:	08017cd8 08017cdc 00000002 00000002     .|...|..........
 8017fec:	08017ce0 08017ce4 00000003 00000002     .|...|..........
 8017ffc:	08017ce8 08017cec 00000001 00000002     .|...|..........
 801800c:	08017cf0 08017cf4 00000002 00000002     .|...|..........
 801801c:	08017cf8 08017cfc 00000007 00000001     .|...|..........
 801802c:	08017d04 08017cfc 00000007 00000001     .}...|..........
 801803c:	08017d08 08017d0c 00000008 00000001     .}...}..........
 801804c:	08017d18 08017d0c 00000008 00000001     .}...}..........
	...
 801806c:	69727473 6c20676e 72657469 00006c61     string literal..
 801807c:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
 801808c:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
 801809c:	7361623a 735f6369 6e697274 00000067     :basic_string...
 80180ac:	69736162 74735f63 676e6972 00000000     basic_string....
 80180bc:	3a647473 7274733a 00676e69 3a647473     std::string.std:
 80180cc:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
 80180dc:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
 80180ec:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
 80180fc:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
 801810c:	00003e20 3a647473 7473693a 6d616572      >..std::istream
 801811c:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
 801812c:	65727473 633c6d61 2c726168 64747320     stream<char, std
 801813c:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
 801814c:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
 801815c:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
 801816c:	6d616572 00000000 3a647473 7361623a     ream....std::bas
 801817c:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
 801818c:	64747320 68633a3a 745f7261 74696172      std::char_trait
 801819c:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
 80181ac:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
 80181bc:	736f693a 61657274 0000006d 3a647473     :iostream...std:
 80181cc:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
 80181dc:	72616863 7473202c 633a3a64 5f726168     char, std::char_
 80181ec:	69617274 633c7374 3e726168 00003e20     traits<char> >..
 80181fc:	69736162 6f695f63 65727473 00006d61     basic_iostream..

0801820c <standard_subs>:
 801820c:	00000074 08017b50 00000003 08017b50     t...P{......P{..
 801821c:	00000003 00000000 00000000 00000061     ............a...
 801822c:	0801807c 0000000e 0801807c 0000000e     |.......|.......
 801823c:	0801808c 00000009 00000062 08018098     ........b.......
 801824c:	00000011 08018098 00000011 080180ac     ................
 801825c:	0000000c 00000073 080180bc 0000000b     ....s...........
 801826c:	080180c8 00000046 080180ac 0000000c     ....F...........
 801827c:	00000069 08018110 0000000c 08018120     i........... ...
 801828c:	00000031 08018154 0000000d 0000006f     1...T.......o...
 801829c:	08018164 0000000c 08018174 00000031     d.......t...1...
 80182ac:	080181a8 0000000d 00000064 080181b8     ........d.......
 80182bc:	0000000d 080181c8 00000032 080181fc     ........2.......
 80182cc:	0000000e 00646c25 00003a3a 7272414a     ....%ld.::..JArr
 80182dc:	00007961 62617476 6620656c 0020726f     ay..vtable for .
 80182ec:	20545456 20726f66 00000000 736e6f63     VTT for ....cons
 80182fc:	63757274 6e6f6974 61747620 20656c62     truction vtable 
 801830c:	20726f66 00000000 2d6e692d 00000000     for ....-in-....
 801831c:	65707974 6f666e69 726f6620 00000020     typeinfo for ...
 801832c:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
 801833c:	00002072 65707974 6f666e69 206e6620     r ..typeinfo fn 
 801834c:	20726f66 00000000 2d6e6f6e 74726976     for ....non-virt
 801835c:	206c6175 6e756874 6f74206b 00000020     ual thunk to ...
 801836c:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
 801837c:	00000020 61766f63 6e616972 65722074      ...covariant re
 801838c:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
 801839c:	6176616a 616c4320 66207373 0020726f     java Class for .
 80183ac:	72617567 61762064 62616972 6620656c     guard variable f
 80183bc:	0020726f 65666572 636e6572 65742065     or .reference te
 80183cc:	726f706d 20797261 20726f66 00000000     mporary for ....
 80183dc:	64646968 61206e65 7361696c 726f6620     hidden alias for
 80183ec:	00000020 7461535f 00000020 6363415f      ..._Sat ..._Acc
 80183fc:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
 801840c:	7265706f 726f7461 00000000 7265706f     operator....oper
 801841c:	726f7461 00000020 00203a20 00006c75     ator ... : .ul..
 801842c:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
 801843c:	65757274 00000000 6176616a 73657220     true....java res
 801844c:	6372756f 00002065 6c636564 65707974     ource ..decltype
 801845c:	00002820 7261707b 0000236d 626f6c67      (..{parm#..glob
 801846c:	63206c61 74736e6f 74637572 2073726f     al constructors 
 801847c:	6579656b 6f742064 00000020 626f6c67     keyed to ...glob
 801848c:	64206c61 72747365 6f746375 6b207372     al destructors k
 801849c:	64657965 206f7420 00000000 6d616c7b     eyed to ....{lam
 80184ac:	28616462 00000000 00002329 6e6e757b     bda(....)#..{unn
 80184bc:	64656d61 70797420 00002365 6c635b20     amed type#.. [cl
 80184cc:	20656e6f 00000000 6665647b 746c7561     one ....{default
 80184dc:	67726120 00000023 003a3a7d 73657220      arg#...}::. res
 80184ec:	63697274 00000074 6c6f7620 6c697461     trict... volatil
 80184fc:	00000065 6e6f6320 00007473 706d6f63     e... const..comp
 801850c:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
 801851c:	00002079 002a3a3a 765f5f20 6f746365     y ..::*. __vecto
 801852c:	00002872 00002820                       r(.. (..

08018534 <_global_impure_ptr>:
 8018534:	20000010                                ... 

08018538 <blanks.3927>:
 8018538:	20202020 20202020 20202020 20202020                     

08018548 <zeroes.3928>:
 8018548:	30303030 30303030 30303030 30303030     0000000000000000

08018558 <blanks.3885>:
 8018558:	20202020 20202020 20202020 20202020                     

08018568 <zeroes.3886>:
 8018568:	30303030 30303030 30303030 30303030     0000000000000000

08018578 <p05.2449>:
 8018578:	00000005 00000019 0000007d 00000000     ........}.......

08018588 <__mprec_tens>:
 8018588:	00000000 3ff00000 00000000 40240000     .......?......$@
 8018598:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80185a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80185b8:	00000000 412e8480 00000000 416312d0     .......A......cA
 80185c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80185d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80185e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80185f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8018608:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8018618:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8018628:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8018638:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8018648:	79d99db4 44ea7843                       ...yCx.D

08018650 <__mprec_tinytens>:
 8018650:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8018660:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8018670:	64ac6f43 0ac80628                       Co.d(...

08018678 <__mprec_bigtens>:
 8018678:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8018688:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8018698:	7f73bf3c 75154fdd                       <.s..O.u

080186a0 <blanks.3871>:
 80186a0:	20202020 20202020 20202020 20202020                     

080186b0 <zeroes.3872>:
 80186b0:	30303030 30303030 30303030 30303030     0000000000000000

080186c0 <GPIO_PIN>:
 80186c0:	20001000 80004000                       ... .@..

080186c8 <GPIO_CLK>:
 80186c8:	00000008 00000008 00000008 00000008     ................

080186d8 <_ZTV6CMenue>:
	...
 80186e0:	0800ef61 08010871 0800ef85 0800eff9     a...q...........
 80186f0:	0800f031 0800f051 0800f069 0800efa9     1...Q...i.......

08018700 <_ZL12c_FontNative>:
	...

08018718 <_ZTV11CGraphicLCD>:
	...
 8018720:	080164b1 080164b1 080164b1 080164b1     .d...d...d...d..
 8018730:	080164b1 080164b1 080164b1 080164b1     .d...d...d...d..
 8018740:	080164b1 0800f28d 0800f2c1 00000000     .d..............

08018750 <_ZTV13CT6963CDriver>:
	...
 8018758:	0800f5c1 0800f8dd 0800fa2d 0800fd75     ........-...u...
 8018768:	0800feb9 0800ff19 0800f6b9 0801009d     ................
 8018778:	0800f395 0800f33d 0800f375 080164b1     ....=...u....d..
 8018788:	080164b1 080164b1 080164b1 080164b1     .d...d...d...d..

08018798 <_ZTV21CT6963_GPIO_Interface>:
	...
 80187a0:	0800f5c1 0800f8dd 0800fa2d 0800fd75     ........-...u...
 80187b0:	0800feb9 0800ff19 0800f6b9 0801009d     ................
 80187c0:	0800f395 08010199 080101d1 080102ad     ................
 80187d0:	0801036d 080103a5 08010451 0801051d     m.......Q.......

080187e0 <c_FontSansSerif12>:
 80187e0:	00000000 00000012 080187f8 08019338     ............8...
 80187f0:	08019438 08019494                       8.......

080187f8 <_ZL35Microsoft_Sans_Serif__12_char_table>:
	...
 801880c:	001c0000 00220022 00410041 00410041     ....".".A.A.A.A.
 801881c:	00410041 00220022 0000001c 00000000     A.A.".".........
 801882c:	00000000 10107010 10101010 10101010     .....p..........
	...
 8018844:	0022001c 00010041 00020001 00080004     ..".A...........
 8018854:	00200010 007f0040 00000000 00000000     .. .@...........
 8018864:	00000000 0022001c 00010041 000c0002     ......".A.......
 8018874:	00010002 00410001 001c0022 00000000     ......A.".......
	...
 801888c:	00060002 000a0006 00120012 00420022     ............".B.
 801889c:	0002007f 00020002 00000000 00000000     ................
 80188ac:	00000000 0040007f 00400040 0062005c     ......@.@.@.\.b.
 80188bc:	00010001 00410001 001c0022 00000000     ......A.".......
	...
 80188d4:	0022001c 00400041 0062005c 00410041     ..".A.@.\.b.A.A.
 80188e4:	00410041 001c0022 00000000 00000000     A.A."...........
 80188f4:	00000000 0001007f 00020001 00020002     ................
 8018904:	00040004 00080004 00080008 00000000     ................
	...
 801891c:	0022001c 00410041 001c0022 00410022     ..".A.A."...".A.
 801892c:	00410041 001c0022 00000000 00000000     A.A."...........
 801893c:	00000000 0022001c 00410041 00410041     ......".A.A.A.A.
 801894c:	001d0023 00410001 001c0022 00000000     #.....A.".......
	...
 8018964:	00020002 00050005 80088008 c01f4010     .............@..
 8018974:	20202020 10401040 00000000 00000000         @.@.........
 8018984:	00000000 0041007e 80408040 007e0041     ....~.A.@.@.A.~.
 8018994:	80400041 80408040 007e0041 00000000     A.@.@.@.A.~.....
	...
 80189ac:	c030000f 20404020 00400040 00400040     ..0. @@ @.@.@.@.
 80189bc:	40202040 000fc030 00000000 00000000     @  @0...........
 80189cc:	00000000 8041007e 40408040 40404040     ....~.A.@.@@@@@@
 80189dc:	40404040 80404040 007e8041 00000000     @@@@@@@.A.~.....
	...
 80189f4:	0040807f 00400040 007f0040 00400040     ..@.@.@.@...@.@.
 8018a04:	00400040 807f0040 00000000 00000000     @.@.@...........
 8018a14:	00000000 0040807f 00400040 007f0040     ......@.@.@.@...
 8018a24:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
	...
 8018a3c:	c030000f 20404020 00400040 2040e041     ..0. @@ @.@.A.@ 
 8018a4c:	60202040 200fe030 00000000 00000000     @  `0.. ........
 8018a5c:	00000000 80408040 80408040 807f8040     ....@.@.@.@.@...
 8018a6c:	80408040 80408040 80408040 00000000     @.@.@.@.@.@.....
 8018a7c:	00000000 40400000 40404040 40404040     ......@@@@@@@@@@
 8018a8c:	00004040 00000000 02020202 02020202     @@..............
 8018a9c:	3c424242 00000000 00000000 00420041     BBB<........A.B.
 8018aac:	00480044 00600050 00480050 00420044     D.H.P.`.P.H.D.B.
 8018abc:	80400041 00000000 00000000 00000000     A.@.............
 8018acc:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8018adc:	00400040 007f0040 00000000 00000000     @.@.@...........
 8018aec:	00000000 40404040 c060c060 40514051     ....@@@@`.`.Q@Q@
 8018afc:	404a404a 40444044 40404040 00000000     J@J@D@D@@@@@....
	...
 8018b14:	00610041 00510061 00490051 00450049     A.a.a.Q.Q.I.I.E.
 8018b24:	00430045 00410043 00000000 00000000     E.C.C.A.........
 8018b34:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 8018b44:	20402040 40202040 000fc030 00000000     @ @ @  @0.......
	...
 8018b5c:	0041007e 80408040 00418040 0040007e     ~.A.@.@.@.A.~.@.
 8018b6c:	00400040 00400040 00000000 00000000     @.@.@.@.........
 8018b7c:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 8018b8c:	20402040 40212042 400fc030 00002000     @ @ B !@0..@. ..
	...
 8018ba4:	0041007e 80408040 00418040 0041007e     ~.A.@.@.@.A.~.A.
 8018bb4:	80408040 40408040 00000000 00000000     @.@.@.@@........
 8018bc4:	00000000 8020001f 00404040 001f0020     ...... .@@@. ...
 8018bd4:	40008000 40404000 001f8020 00000000     ...@.@@@ .......
	...
 8018bec:	0004c07f 00040004 00040004 00040004     ................
 8018bfc:	00040004 00040004 00000000 00000000     ................
 8018c0c:	00000000 80408040 80408040 80408040     ....@.@.@.@.@.@.
 8018c1c:	80408040 80408040 001e0021 00000000     @.@.@.@.!.......
	...
 8018c34:	10401040 20202020 40104010 80088008     @.@.    .@.@....
 8018c44:	00050005 00020002 00000000 00000000     ................
 8018c54:	00000000 01400000 00814000 20008220     ......@..@.. .. 
 8018c64:	42210082 00441100 0a004411 280a0028     ..!B..D..D..(..(
 8018c74:	00100400 04001004 00000010 00000000     ................
	...
 8018c8c:	10400000 40102020 00058008 00020002     ..@.  .@........
 8018c9c:	80080005 20204010 00001040 00000000     .....@  @.......
 8018cac:	00000000 10400000 40102020 00058008     ......@.  .@....
 8018cbc:	00020002 00020002 00020002 00000002     ................
	...
 8018cd4:	807f0000 00018000 00020002 00080004     ................
 8018ce4:	00100010 00400020 0000807f 00000000     .... .@.........
	...
 8018d00:	0041003e 00010001 0041003f 00410041     >.A.....?.A.A.A.
 8018d10:	0000803e 00000000 00000000 00400000     >.............@.
 8018d20:	00400040 0062005c 00410041 00410041     @.@.\.b.A.A.A.A.
 8018d30:	00620041 0000005c 00000000 00000000     A.b.\...........
	...
 8018d48:	0022001c 00400041 00400040 00220041     ..".A.@.@.@.A.".
 8018d58:	0000001c 00000000 00000000 00010000     ................
 8018d68:	00010001 0023001d 00410041 00410041     ......#.A.A.A.A.
 8018d78:	00230041 0000001d 00000000 00000000     A.#.............
	...
 8018d90:	0022001c 00410041 0040007f 00220041     ..".A.A...@.A.".
 8018da0:	0000001c 00000000 00000000 7c10100c     ...............|
 8018db0:	10101010 10101010 00000000 00000000     ................
 8018dc0:	00000000 001d0000 00410023 00410041     ........#.A.A.A.
 8018dd0:	00410041 001d0023 00010001 003c0002     A.A.#.........<.
 8018de0:	00000000 00400040 005c0040 00410062     ....@.@.@.\.b.A.
 8018df0:	00410041 00410041 00410041 00000000     A.A.A.A.A.A.....
 8018e00:	00000000 00400000 40404000 40404040     ......@..@@@@@@@
 8018e10:	00004040 00000000 20000020 20202020     @@...... ..     
 8018e20:	20202020 40202020 00000000 00400040            @....@.@.
 8018e30:	00420040 00480044 00700050 00440048     @.B.D.H.P.p.H.D.
 8018e40:	00410042 00000000 00000000 40400000     B.A...........@@
 8018e50:	40404040 40404040 00004040 00000000     @@@@@@@@@@......
	...
 8018e68:	2065c058 10421042 10421042 10421042     X.e B.B.B.B.B.B.
 8018e78:	00001042 00000000 00000000 00000000     B...............
 8018e88:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 8018e98:	00410041 00000041 00000000 00000000     A.A.A...........
	...
 8018eb0:	0022001c 00410041 00410041 00220041     ..".A.A.A.A.A.".
 8018ec0:	0000001c 00000000 00000000 00000000     ................
 8018ed0:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 8018ee0:	00620041 0040005c 00400040 00000040     A.b.\.@.@.@.@...
	...
 8018ef8:	0023001d 00410041 00410041 00230041     ..#.A.A.A.A.A.#.
 8018f08:	0001001d 00010001 00000001 58000000     ...............X
 8018f18:	40404060 40404040 00000000 00000000     `@@@@@@@........
 8018f28:	40423c00 02023c40 00003c42 00000000     .<B@@<..B<......
 8018f38:	7c101010 10101010 08101010 00000000     ...|............
	...
 8018f50:	00410000 00410041 00410041 00410041     ..A.A.A.A.A.A.A.
 8018f60:	001d0023 00000000 00000000 00000000     #...............
 8018f70:	00000000 00410000 00220041 00140022     ......A.A."."...
 8018f80:	00080014 00080008 00000000 00000000     ................
	...
 8018f98:	10420000 10421042 20252025 c018a028     ..B.B.B.% % (...
 8018fa8:	40104010 00000000 00000000 00000000     .@.@............
 8018fb8:	00000000 00410000 00220022 00080014     ......A.".".....
 8018fc8:	00220014 00410022 00000000 00000000     ..".".A.........
	...
 8018fe0:	00410000 00220041 00140022 00080014     ..A.A.".".......
 8018ff0:	00080008 00100010 00600010 00000000     ..........`.....
 8019000:	04027e00 20101008 00007e40 00000000     .~..... @~......
	...
 8019018:	40000000 00000000 00000000 00000000     ...@............
 8019028:	00000000 20202000 00000040 00000000     .....   @.......
 8019038:	00000020 20000000 00402020 00000000      ......   @.....
 8019048:	00400000 00000000 00004000 00000000     ..@......@......
 8019058:	00000000 78000000 00000000 00000000     .......x........
	...
 8019088:	0000c07f 00000000 00000000 00080000     ................
 8019098:	00080008 0008007f 00080008 00000000     ................
	...
 80190b0:	54100000 00282838 00000000 00000000     ...T8((.........
 80190c0:	00000000 80080000 80088008 0011c03f     ............?...
 80190d0:	00110011 807f0011 00220022 00000022     ........"."."...
	...
 80190ec:	00000022 0022001c 00410041 00410041     ".....".A.A.A.A.
 80190fc:	00220041 0000001c 00000000 00000000     A.".............
 801910c:	00000000 00000012 0041003e 00010001     ........>.A.....
 801911c:	0041003f 00410041 0000803e 00000000     ?.A.A.A.>.......
	...
 8019134:	00000022 00410041 00410041 00410041     "...A.A.A.A.A.A.
 8019144:	00230041 0000001d 00000000 00090000     A.#.............
 8019154:	000f0000 4020c030 20402040 20402040     ....0. @@ @ @ @ 
 8019164:	20402040 c0304020 0000000f 00000000     @ @  @0.........
 8019174:	80080000 00020000 00050002 80080005     ................
 8019184:	40108008 2020c01f 10402020 00001040     ...@..    @.@...
 8019194:	00000000 00120000 80400000 80408040     ..........@.@.@.
 80191a4:	80408040 80408040 80408040 00218040     @.@.@.@.@.@.@.!.
 80191b4:	0000001e 00000000 00000000 001c0000     ................
 80191c4:	00410022 00010001 00040002 00080008     ".A.............
 80191d4:	00000000 00000008 00000000 00000000     ................
 80191e4:	40404040 40404040 40000040 00000000     @@@@@@@@@..@....
 80191f4:	48300000 00003048 00000000 00000000     ..0HH0..........
 8019204:	00000000 00442810 00000000 00000000     .....(D.........
 8019214:	00000000 08080000 10101010 20202020     ............    
 8019224:	00004040 00000000 20202010 40404040     @@.......   @@@@
 8019234:	40404040 10202020 20400000 10102020     @@@@   ...@   ..
 8019244:	10101010 20201010 00004020 001c0000     ......   @......
 8019254:	00220022 00140022 00240018 40412042     ".".".....$.B A@
 8019264:	40218040 0000201e 00000000 00000000     @.!@. ..........
 8019274:	20380000 40444044 00458044 70020039     ..8 D@D@D.E.9..p
 8019284:	88048802 88088808 00007010 00000000     .........p......
 8019294:	00000000 001c0008 0049002a 00280048     ........*.I.H.(.
 80192a4:	000a001c 00090009 002a0049 0008001c     ........I.*.....
	...
 80192bc:	e0030000 0410180c 2226e421 22482244     ........!.&"D"H"
 80192cc:	42484248 cc484448 00207027 e0071018     HBHBHDH.'p .....
 80192dc:	00000000 40404040 40404040 40404040     ....@@@@@@@@@@@@
 80192ec:	40404040 00000000 00000000 00030000     @@@@............
 80192fc:	0030000c 00300040 0003000c 00000000     ..0.@.0.........
	...
 801931c:	00600000 00060018 00060001 00600018     ..`...........`.
	...

08019338 <_ZL38Microsoft_Sans_Serif__12_mapping_table>:
	...
 8019358:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 8019368:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 8019378:	0d0c0b58 11100f0e 15141312 19181716     X...............
 8019388:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 8019398:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 80193a8:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 80193e8:	00000050 00000000 00000000 00000000     P...............
 80193f8:	00000000 0000004c 00000000 00000000     ....L...........
 8019408:	00000000 004b0000 00000000 0000004d     ......K.....M...
 8019418:	00000000 00000049 00000000 00000000     ....I...........
 8019428:	00000000 00480000 00000000 0000004a     ......H.....J...

08019438 <_ZL36Microsoft_Sans_Serif__12_width_table>:
 8019438:	09050905 09090909 0d090909 0a0b0c0a     ................
 8019448:	030a0c0a 0b090a08 0c0a0c09 0a0b0b0b     ................
 8019458:	0d0d110d 09090a0a 09070909 09040309     ................
 8019468:	09090d03 08060909 0d090907 03080909     ................
 8019478:	06030404 0b07090b 0c090a09 03090a0d     ................
 8019488:	05060706 090e0c05 09090310              ............

08019494 <_ZL37Microsoft_Sans_Serif__12_offset_table>:
 8019494:	00000000 00000012 00000036 00000048     ........6...H...
 80194a4:	0000006c 00000090 000000b4 000000d8     l...............
 80194b4:	000000fc 00000120 00000144 00000168     .... ...D...h...
 80194c4:	0000018c 000001b0 000001d4 000001f8     ................
 80194d4:	0000021c 00000240 00000264 00000288     ....@...d.......
 80194e4:	0000029a 000002ac 000002d0 000002f4     ................
 80194f4:	00000318 0000033c 00000360 00000384     ....<...`.......
 8019504:	000003a8 000003cc 000003f0 00000414     ................
 8019514:	00000438 0000045c 00000492 000004b6     8...\...........
 8019524:	000004da 000004fe 00000522 00000546     ........"...F...
 8019534:	0000056a 0000058e 000005b2 000005c4     j...............
 8019544:	000005e8 0000060c 0000061e 00000630     ............0...
 8019554:	00000654 00000666 0000068a 000006ae     T...f...........
 8019564:	000006d2 000006f6 0000071a 0000072c     ............,...
 8019574:	0000073e 00000750 00000774 00000798     >...P...t.......
 8019584:	000007bc 000007e0 00000804 00000816     ................
 8019594:	00000828 0000083a 0000084c 0000085e     (...:...L...^...
 80195a4:	00000870 00000894 000008b8 000008ca     p...............
 80195b4:	000008ee 00000912 00000936 0000095a     ........6...Z...
 80195c4:	0000097e 000009a2 000009c6 000009ea     ~...............
 80195d4:	000009fc 00000a0e 00000a20 00000a32     ........ ...2...
 80195e4:	00000a44 00000a56 00000a7a 00000a9e     D...V...z.......
 80195f4:	00000ac2 00000ae6 00000af8 00000b1c     ................

08019604 <c_FontSansSerif26>:
 8019604:	00000000 00000028 0801961c 0801be44     ....(.......D...
 8019614:	0801bf44 0801bfa0                       D.......

0801961c <_ZL35Microsoft_Sans_Serif__26_char_table>:
	...
 8019680:	00f80700 1f00fc0f 3f3f00fe 000f3c00     ..........??.<..
 8019690:	78800f7c 07788007 80077880 70800778     |..x..x..x..x..p
 80196a0:	03708003 80037080 70800370 07788003     ..p..p..p..p..x.
 80196b0:	80077880 78800778 0f7c8007 000f3c80     .x..x..x..|..<..
 80196c0:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 80196f0:	c0010000 c003c001 c01fc007 c07fc07f     ................
 8019700:	c001c07d c001c001 c001c001 c001c001     }...............
 8019710:	c001c001 c001c001 c001c001 c001c001     ................
 8019720:	c001c001 00000000 00000000 00000000     ................
	...
 8019748:	00fe0300 1f00ff0f 9f1f80ff c0073ec0     .............>..
 8019758:	38c0033c 0100c001 c00300c0 00c00300     <..8............
 8019768:	0700c003 000f0080 00003e00 f800007c     .........>..|...
 8019778:	00f00300 0f00e007 001f0080 00003e00     .............>..
 8019788:	7f00003c ff7fc0ff c0ff7fc0 00000000     <...............
	...
 80197c0:	00f80700 3f00fc1f 3f3e00fe 000f7800     .......?..>?.x..
 80197d0:	70000778 0f000007 000f0000 01007e00     x..p.........~..
 80197e0:	fc0100fc 00fe0100 00003f00 0700800f     .........?......
 80197f0:	80030080 70800300 07788007 800f7c80     .......p..x..|..
 8019800:	3f003f3f fe1f00ff 00f80700 00000000     ??.?............
	...
 8019838:	001c0000 00003c00 7c00007c 00fc0000     .....<..|..|....
 8019848:	0100fc01 9c0300dc 009c0700 0e001c07     ................
 8019858:	1c1e001c 001c1c00 78001c38 1c70001c     ........8..x..p.
 8019868:	80ff7f00 7f80ff7f 1c0080ff 001c0000     ................
 8019878:	00001c00 1c00001c 001c0000 00000000     ................
	...
 80198b0:	00ff1f00 3f00ff3f 003c00ff 00003c00     ....?..?..<..<..
 80198c0:	3c00003c 003c0000 00f83f00 3f00fe3f     <..<..<..?..?..?
 80198d0:	3f3f00ff 800f3c00 00800700 03008007     ..??.<..........
 80198e0:	80030080 70800300 07788007 800f7c80     .......p..x..|..
 80198f0:	3f003f3f fc1f00fe 00f80700 00000000     ??.?............
	...
 8019928:	00fc0300 1f00fe0f 9f1f00ff 80073e80     .............>..
 8019938:	7c80073c 00780000 00007800 7f00f87b     <..|..x..x..{...
 8019948:	ff7f00fe 003f7f00 78800f7c 07708007     ......?.|..x..p.
 8019958:	80037880 78800378 077c8007 800f3c80     .x..x..x..|..<..
 8019968:	1f003f3f fe0f00ff 00f80700 00000000     ??..............
	...
 80199a0:	80ff7f00 7f80ff7f 070080ff 000f0080     ................
 80199b0:	00000f00 1e00000f 001e0000 00003c00     .............<..
 80199c0:	7800003c 00780000 00007800 f00000f0     <..x..x..x......
 80199d0:	00e00100 0300e001 c00300c0 00c00300     ................
 80199e0:	07008007 000f0080 00000f00 00000000     ................
	...
 8019a18:	00f80700 1f00fc0f 3f3f00fe 000f3c00     ..........??.<..
 8019a28:	38000f3c 0f3c0007 000f3c00 1f001f3e     <..8..<..<..>...
 8019a38:	fc0f00fe 00f80700 3f00fe1f 1f7e00ff     ...........?..~.
 8019a48:	80077880 70800778 07788003 80077880     .x..x..p..x..x..
 8019a58:	3f803f7f fe1f00ff 00f80700 00000000     .?.?............
	...
 8019a90:	00f80700 3f00fc1f 3f3f00fe 000f7c00     .......?..??.|..
 8019aa0:	78800f78 07708007 80077080 78800378     x..x..p..p..x..x
 8019ab0:	0f7c8007 803f3f80 1f80ff3f f70780ff     ..|..??.?.......
 8019ac0:	80070080 00800700 0f78800f 001f7800     ..........x..x..
 8019ad0:	3f007e7e fc1f00fe 00f00f00 00000000     ~~.?............
	...
 8019b10:	00003e00 00007e00 00007e00 00007f00     .>...~...~......
 8019b20:	0000f700 0080e700 0080e700 0080e301     ................
 8019b30:	00c0c301 00c0c103 00e0c103 00e08103     ................
 8019b40:	00e08007 00f08007 00f00007 00f8ff0f     ................
 8019b50:	00f8ff0f 00f8ff1f 003c001e 003c001e     ..........<...<.
 8019b60:	001e003c 001e003c 001e0038 000f0078     <...<...8...x...
 8019b70:	000f0078 00000000 00000000 00000000     x...............
	...
 8019ba8:	00fe7f00 7f00ff7f 1f7080ff c00370c0     ..........p..p..
 8019bb8:	70c00370 0370c001 c00370c0 7f801f70     p..p..p..p..p...
 8019bc8:	ff7f00ff 80ff7f00 70c00f70 0170e003     ........p..p..p.
 8019bd8:	e00070e0 70e00070 0170e000 e00370e0     .p..p..p..p..p..
 8019be8:	7fc00f70 ff7fc0ff 00fe7f80 00000000     p...............
	...
 8019c20:	80ff0100 0fe0ff03 e31ff0ff f8001ff8     ................
 8019c30:	3c3c003e 00783c00 0000781c 78000078     >.<<.<x..x..x..x
 8019c40:	00700000 00007000 78000070 00780000     ..p..p..p..x..x.
 8019c50:	00007800 3c1c0078 003e3c00 f8001f3c     .x..x..<.<>.<...
 8019c60:	0ff8e31f ff03f0ff 80ff01e0 00000000     ................
	...
 8019c98:	00fc7f00 7f80ff7f 1f70c0ff f00370e0     ..........p..p..
 8019ca8:	70f00070 0070f000 78007078 70780070     p..p..p.xp.xp.xp
 8019cb8:	00703800 38007038 70380070 00707800     .8p.8p.8p.8p.xp.
 8019cc8:	78007078 70780070 0170f000 f00370f0     xp.xp.xp..p..p..
 8019cd8:	7fe01f70 ff7fc0ff 00fc7f80 00000000     p...............
	...
 8019d10:	c0ff7f00 7fc0ff7f 0070c0ff 00007000     ..........p..p..
 8019d20:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 8019d30:	ff7f0000 80ff7f80 7080ff7f 00700000     ...........p..p.
 8019d40:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8019d50:	7f000070 ff7fe0ff e0ff7fe0 00000000     p...............
	...
 8019d88:	80ff7f00 7f80ff7f 007080ff 00007000     ..........p..p..
 8019d98:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 8019da8:	fe7f0000 00fe7f00 7000fe7f 00700000     ...........p..p.
 8019db8:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8019dc8:	70000070 00700000 00007000 00000000     p..p..p..p......
	...
 8019e08:	00c0ff00 00f0ff03 00fcff07 00fee10f     ................
 8019e18:	003e801f 001f003e 000f003c 0007007c     ..>.>...<...|...
 8019e28:	00000078 00000078 00000078 00000070     x...x...x...p...
 8019e38:	00ff0370 00ff0370 00ff0378 00070078     p...p...x...x...
 8019e48:	00070078 00070078 000f003c 000f003e     x...x...<...>...
 8019e58:	003f001f 00ffe10f 00ffff07 00f7ff03     ..?.............
 8019e68:	00c7ff00 00000000 00000000 00000000     ................
	...
 8019ea0:	70007000 70700070 00707000 70007070     .p.pp.pp.pp.pp.p
 8019eb0:	70700070 00707000 70007070 7f700070     p.pp.pp.pp.pp.p.
 8019ec0:	ff7ff0ff f0ff7ff0 70700070 00707000     ........p.pp.pp.
 8019ed0:	70007070 70700070 00707000 70007070     pp.pp.pp.pp.pp.p
 8019ee0:	70700070 00707000 70007070 00000000     p.pp.pp.pp.p....
	...
 8019f08:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 8019f18:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 8019f38:	0e000000 0e000e00 0e000e00 0e000e00     ................
 8019f48:	0e000e00 0e000e00 0e000e00 0e000e00     ................
 8019f58:	0e000e00 0e700e70 1e781e78 fc3f7e7e     ....p.p.x.x.~~?.
 8019f68:	f00ff81f 00000000 00000000 00000000     ................
	...
 8019f90:	f8007000 70e00170 0770c003 000f7080     .p..p..p..p..p..
 8019fa0:	70001e70 7870003c 00f07000 7300e071     p..p<.px.p..q..s
 8019fb0:	f07700e0 00f07f00 7c00787e 3e78003c     ..w.....~x.|<.x>
 8019fc0:	001e7800 70000f70 0770800f c00370c0     .x..p..p..p..p..
 8019fd0:	70e00170 0070f001 780070f0 00000000     p..p..p..p.x....
	...
 801a008:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801a018:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 801a028:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
 801a038:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801a048:	7f000070 ff7f00ff 00ff7f00 00000000     p...............
	...
 801a088:	001f007c 003f007e 003f007e 003f007e     |...~.?.~.?.~.?.
 801a098:	007f007f 007f007f 007f007f 00f78077     ............w...
 801a0a8:	00f78077 00f78077 00e7c173 00e7c173     w...w...s...s...
 801a0b8:	00e7c173 00c7e371 00c7e371 00c7e371     s...q...q...q...
 801a0c8:	0087f770 0087f770 0087f770 00077f70     p...p...p...p...
 801a0d8:	00077f70 00077f70 00073e70 00073e70     p...p...p>..p>..
 801a0e8:	00073e70 00000000 00000000 00000000     p>..............
	...
 801a120:	70007800 7c70007c 007e7000 70007f70     .x.p|.p|.p~.p..p
 801a130:	7f70007f c0777080 70c07370 7170e073     ..p..pw.ps.ps.pq
 801a140:	f07070e0 70f87070 70707870 3e70703c     .pp.pp.ppxpp<pp>
 801a150:	701e7070 70701f70 0770f00f f00770f0     pp.pp.pp..p..p..
 801a160:	70f00370 0170f001 f00070f0 00000000     p..p..p..p......
	...
 801a1a0:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 801a1b0:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 801a1c0:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 801a1d0:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 801a1e0:	000f0078 000f0078 001e003c 003e003e     x...x...<...>.>.
 801a1f0:	007c001f 00f8e30f 00f0ff07 00e0ff03     ..|.............
 801a200:	0080ff00 00000000 00000000 00000000     ................
	...
 801a238:	00ff7f00 7f80ff7f 0f70c0ff e00170e0     ..........p..p..
 801a248:	70e00170 0070e000 e00070e0 70e00170     p..p..p..p..p..p
 801a258:	0f70e003 c0ff7fc0 7f80ff7f 007000fe     ..p...........p.
 801a268:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801a278:	70000070 00700000 00007000 00000000     p..p..p..p......
	...
 801a2b8:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 801a2c8:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 801a2d8:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 801a2e8:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 801a2f8:	000f0078 001f0178 00de033c 00fe073e     x...x...<...>...
 801a308:	00fc031f 00f8e30f 00fcff07 00feff03     ................
 801a318:	009fff00 000f0000 00060000 00000000     ................
	...
 801a350:	80ff7f00 7fc0ff7f 0770e0ff f00070f0     ..........p..p..
 801a360:	70f00070 00707000 f0007070 70f00070     p..p.pp.pp..p..p
 801a370:	ff7fe007 c0ff7fe0 7000ff7f 0770801f     ...........p..p.
 801a380:	c00370c0 70e00170 0070e001 f00070e0     .p..p..p..p..p..
 801a390:	70f00070 00707800 78007078 00000000     p..p.xp.xp.x....
	...
 801a3c8:	00fe0300 1f00ff0f 8f3f80ff e0033cc0     ..........?..<..
 801a3d8:	38e0013c 003ce001 00003ee0 1f00803f     <..8..<..>..?...
 801a3e8:	ff0f00f8 c0ff0300 00e07f00 0100f007     ................
 801a3f8:	f00000f0 78700070 00787000 f0017ef0     ....p.px.px..~..
 801a408:	1fe0873f ff0fe0ff 00ff03c0 00000000     ?...............
	...
 801a440:	f0ff7f00 7ff0ff7f 7000f0ff 00700000     ...........p..p.
 801a450:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801a460:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 801a470:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
 801a480:	00007000 70000070 00700000 00000000     .p..p..p..p.....
	...
 801a4b8:	70007000 70700070 00707000 70007070     .p.pp.pp.pp.pp.p
 801a4c8:	70700070 00707000 70007070 70700070     p.pp.pp.pp.pp.pp
 801a4d8:	00707000 70007070 70700070 00707000     .pp.pp.pp.pp.pp.
 801a4e8:	f0007870 78f00078 0078f000 f0017cf0     px..x..x..x..|..
 801a4f8:	1fe08f3f ff0fc0ff 00ff0780 00000000     ?...............
	...
 801a538:	000f0078 000f0078 001e003c 001e003c     x...x...<...<...
 801a548:	001e003c 003c001e 003c001e 0038000e     <.....<...<...8.
 801a558:	0078000f 0078000f 00700007 00f08007     ..x...x...p.....
 801a568:	00f08007 00e0c103 00e0c103 00c0c101     ................
 801a578:	00c0e301 00c0e301 0080e300 0080f700     ................
 801a588:	00007700 00007f00 00007f00 00003e00     .w...........>..
 801a598:	00003e00 00000000 00000000 00000000     .>..............
	...
 801a5dc:	78000000 c003e000 03f00178 f00178c0     ...x....x....x..
 801a5ec:	0138c003 3c8003f0 8007f803 07b8033c     ..8....<....<...
 801a5fc:	b8033c80 071c8007 1e0007bc 000f1c07     .<..............
 801a60c:	0f1c071e 1e0f0e00 0e0e000e 0f000e0e     ................
 801a61c:	001e0e0e 1e0f1e0f 071c0700 1c07001c     ................
 801a62c:	07001c07 003c079c b803b803 03b80300     ......<.........
 801a63c:	f80300b8 0300f803 00f803f8 f001f001     ................
 801a64c:	01f00100 f00100f0 0000f001 00e000e0     ................
	...
 801a6a0:	001e003c 003c001e 007c001f 00f8800f     <.....<...|.....
 801a6b0:	00f08007 00e0c103 00e0e303 00c0e301     ................
 801a6c0:	0080f700 00007f00 00007f00 00003e00     .............>..
 801a6d0:	00003e00 00007f00 0080ff00 0080f700     .>..............
 801a6e0:	00c0e301 00e0c103 00f0c107 00f08007     ................
 801a6f0:	0078000f 007c001f 003e003e 001e003c     ..x...|.>.>.<...
 801a700:	000f0078 00000000 00000000 00000000     x...............
	...
 801a740:	000f0078 001e003c 003e003e 003c001e     x...<...>.>...<.
 801a750:	0078000f 00f8800f 00f08007 00e0c103     ..x.............
 801a760:	00e0e303 00c0e301 0080f700 0080ff00     ................
 801a770:	00007f00 00003e00 00001c00 00001c00     .....>..........
 801a780:	00001c00 00001c00 00001c00 00001c00     ................
 801a790:	00001c00 00001c00 00001c00 00001c00     ................
 801a7a0:	00001c00 00000000 00000000 00000000     ................
	...
 801a7d8:	c0ff3f00 3fc0ff3f 0300c0ff c00700c0     .?..?..?........
 801a7e8:	00800f00 1e00000f 003e0000 00007c00     ..........>..|..
 801a7f8:	f8000078 00f00100 0300e003 c00700c0     x...............
 801a808:	00800f00 1e00000f 003e0000 00007c00     ..........>..|..
 801a818:	7f000078 ff7fc0ff c0ff7fc0 00000000     x...............
	...
 801a860:	07000000 fe1f00f8 00ff1f00 3c001f3f     ............?..<
 801a870:	0738000f 00070000 1f00ff07 ff3f00ff     ..8...........?.
 801a880:	00877f00 7800077c 0f700007 001f7800     ....|..x..p..x..
 801a890:	7f007f7c ff3f00ff 00f71f00 00000000     |.....?.........
	...
 801a8c8:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801a8d8:	73000070 fc7f00f8 00fe7f00 7c003e7f     p..s.........>.|
 801a8e8:	0f78001f 000f7000 70000f70 07700007     ..x..p..p..p..p.
 801a8f8:	00077000 70000f70 0f70000f 001e7800     .p..p..p..p..x..
 801a908:	7f003e7e f87f00fc 00f07f00 00000000     ~>..............
	...
 801a950:	07000000 fe0f00fc 00ff1f00 3c801f3f     ............?..<
 801a960:	03788007 00007880 70000078 00700000     ..x..x..x..p..p.
 801a970:	00007000 78000078 03780000 80073c80     .p..x..x..x..<..
 801a980:	1f801f3f fe0f00ff 00fc0700 00000000     ?...............
	...
 801a9b8:	00070000 00000700 07000007 00070000     ................
 801a9c8:	07000700 ff0f00f7 00ff1f00 3c003f3e     ............>?.<
 801a9d8:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 801a9e8:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 801a9f8:	3f007f3e ff1f00ff 00f70f00 00000000     >..?............
	...
 801aa40:	07000000 fc0f00f8 00fe1f00 3c003f3f     ............??.<
 801aa50:	0778000f 80077880 7f800778 ff7f80ff     ..x..x..x.......
 801aa60:	80ff7f80 78000070 03780000 80073c80     ....p..x..x..<..
 801aa70:	1f801f3f fe0f00ff 00fc0700 00000000     ?...............
	...
 801aaa0:	e0070000 e00fe00f 000e000f c07f000e     ................
 801aab0:	c07fc07f 000e000e 000e000e 000e000e     ................
 801aac0:	000e000e 000e000e 000e000e 000e000e     ................
 801aad0:	000e000e 00000000 00000000 00000000     ................
	...
 801ab08:	07000000 ff0f00ff 00ff1f00 3c003f3e     ............>?.<
 801ab18:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 801ab28:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 801ab38:	3f007f3e ff1f00ff 00e70f00 00000f00     >..?............
 801ab48:	0f3c000f 003e3e00 1f00fe3f f80f00fc     ..<..>>.?.......
	...
 801ab68:	00700000 00700070 00700070 f8730070     ..p.p.p.p.p.p.s.
 801ab78:	fe7ffc7f 1e7c3e7f 0e701e78 0e700e70     .....>|.x.p.p.p.
 801ab88:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 801ab98:	0e700e70 00000000 00000000 00000000     p.p.............
	...
 801abb0:	70000000 00007070 70707000 70707070     ...ppp...ppppppp
 801abc0:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 801abe0:	00070000 00070007 00000000 00070000     ................
 801abf0:	00070007 00070007 00070007 00070007     ................
 801ac00:	00070007 00070007 00070007 00070007     ................
 801ac10:	00070007 00070007 004f000f 007e007f     ..........O...~.
 801ac20:	0000007c 00000000 00000000 00000000     |...............
	...
 801ac38:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801ac48:	70000070 7c70003e 00f87000 7100f071     p..p>.p|.p..q..q
 801ac58:	c07300e0 00807700 7f00807f c07f00c0     ..s..w..........
 801ac68:	00e07900 7000f079 787000f0 007c7000     .y..y..p..px.p|.
 801ac78:	70003c70 1f70001e 000f7000 00000000     p<.p..p..p......
	...
 801aca0:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801acb0:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 801acf8:	007ff873 80fffc7f c0ffff7f c0e73f7f     s............?..
 801ad08:	c0831f7c c0031f78 c0010e70 c0010e70     |...x...p...p...
 801ad18:	c0010e70 c0010e70 c0010e70 c0010e70     p...p...p...p...
 801ad28:	c0010e70 c0010e70 c0010e70 c0010e70     p...p...p...p...
 801ad38:	c0010e70 c0010e70 c0010e70 00000000     p...p...p.......
	...
 801ad7c:	f8730000 fe7ffc7f 1e7c3e7f 0e701e78     ..s......>|.x.p.
 801ad8c:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 801ad9c:	0e700e70 0e700e70 00000000 00000000     p.p.p.p.........
	...
 801add8:	07000000 fc0f00f8 00fe1f00 7c003f3f     ............??.|
 801ade8:	0778800f 80077880 70800778 03708003     ..x..x..x..p..p.
 801adf8:	80037080 78800778 07788007 800f7c80     .p..x..x..x..|..
 801ae08:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 801ae50:	77000000 fc7f00f8 00fe7f00 7c003e7f     ...w.........>.|
 801ae60:	0f78001f 000f7000 70000f70 07700007     ..x..p..p..p..p.
 801ae70:	00077000 70000f70 0f70000f 001e7800     .p..p..p..p..x..
 801ae80:	7f003e7e f87f00fc 00f07700 70000070     ~>.......w..p..p
 801ae90:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
	...
 801aec8:	07000000 ff0f00ff 00ff1f00 3c003f3e     ............>?.<
 801aed8:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 801aee8:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 801aef8:	3f007f3e ff1f00ff 00e70f00 00000700     >..?............
 801af08:	07000007 00070000 00000700 07000007     ................
	...
 801af34:	c0730000 c07fc07f 0078007e 00700078     ..s.....~.x.x.p.
 801af44:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 801af54:	00700070 00700070 00000000 00000000     p.p.p.p.........
	...
 801af90:	0f000000 fc3f00f8 00fe7f00 78003e7e     ......?.....~>.x
 801afa0:	0078001e 00007c00 3f00c07f fe1f00f8     ..x..|.....?....
 801afb0:	00ff0300 00003f00 0770000f 000f7800     .....?....p..x..
 801afc0:	3f003f7e fc1f00fe 00f80f00 00000000     ~?.?............
	...
 801aff4:	001c001c 001c001c 807f001c 807f807f     ................
 801b004:	001c001c 001c001c 001c001c 001c001c     ................
 801b014:	001c001c 001c001c 801f001e 800f801f     ................
	...
 801b04c:	0e700000 0e700e70 0e700e70 0e700e70     ..p.p.p.p.p.p.p.
 801b05c:	0e700e70 0e700e70 0e700e70 3e781e78     p.p.p.p.p.p.x.x>
 801b06c:	fe7ffe7c ce1ffe3f 00000000 00000000     |...?...........
	...
 801b0a8:	78000000 0378c003 800338c0 3c80073c     ...x..x..8..<..<
 801b0b8:	071c8007 000f1e00 0e000f1e 1e0f000e     ................
 801b0c8:	001e0f00 07001c07 b80300bc 00f80300     ................
 801b0d8:	0100f803 f00100f0 00f00100 00000000     ................
	...
 801b130:	80071e78 80071e78 80073f78 00073f38     x...x...x?..8?..
 801b140:	00073f38 000f3f3c 008f7f3c 008e7f1c     8?..<?..<.......
 801b150:	008e731c 009e731e 00def30e 00dcf30e     .s...s..........
 801b160:	00dce10e 00fce10f 00f8e107 00f8e107     ................
 801b170:	00f8c007 00f8c007 00f0c003 00000000     ................
	...
 801b1c0:	3c000000 0f3e8007 000f1e80 07001e0f     ...<..>.........
 801b1d0:	bc0700bc 00f80300 0100f001 f00100f0     ................
 801b1e0:	00f80300 0700f803 1e0f00bc 001e0f00     ................
 801b1f0:	3c000f1e 077c8007 c00378c0 00000000     ...<..|..x......
	...
 801b238:	78000000 0378c003 800338c0 3c80073c     ...x..x..8..<..<
 801b248:	071c8007 000f1e00 0e000f1e 1e0f000e     ................
 801b258:	001e0f00 07001c07 b80300bc 00f80300     ................
 801b268:	0100f803 f00100f0 00f00100 0100e001     ................
 801b278:	c00300e0 00c02f00 3f00803f 003e0000     ...../..?..?..>.
	...
 801b2b0:	3f000000 ff3f00ff 00ff3f00 00001f00     ...?..?..?......
 801b2c0:	3c00001e 00780000 0100f800 e00300f0     ...<..x.........
 801b2d0:	00c00700 0f00800f 001e0000 00003c00     .............<..
 801b2e0:	7f00007c ff7f80ff 80ff7f80 00000000     |...............
	...
 801b320:	70707070 00000000 00000000 00000000     pppp............
	...
 801b348:	70707070 60707030 00000000 00000000     pppp0pp`........
	...
 801b360:	70700000 00007070 00000000 00000000     ..pppp..........
 801b370:	70707070 60707030 00000000 00000000     pppp0pp`........
	...
 801b388:	70700000 00007070 00000000 00000000     ..pppp..........
 801b398:	70707070 00000000 00000000 00000000     pppp............
	...
 801b3cc:	e07f0000 e07fe07f 00000000 00000000     ................
	...
 801b460:	7ff0ff7f 0000f0ff 00000000 00000000     ................
	...
 801b48c:	00e00000 0000e000 e00000e0 00e00000     ................
 801b49c:	0000e000 ff7f00e0 c0ff7fc0 00c0ff7f     ................
 801b4ac:	e00000e0 00e00000 0000e000 e00000e0     ................
 801b4bc:	00e00000 00000000 00000000 00000000     ................
	...
 801b4f0:	00070000 00070007 f07f7077 800ff07f     ........wp......
 801b500:	c01dc01f c018e03d 00000000 00000000     ....=...........
	...
 801b548:	00cf0100 0300cf03 cf0300cf 00ce0300     ................
 801b558:	07009e03 ff3f009e 80ff3f80 0f80ff3f     ......?..?..?...
 801b568:	3c0f003c 003c0f00 0f003c0f 781e0038     <..<..<..<..8..x
 801b578:	00ff7f00 7f00ff7f 781e00ff 00f01c00     ...........x....
 801b588:	3c00f03c f03c00f0 00f03c00 00000000     <..<..<..<......
	...
 801b5c0:	001c0700 07001c07 1c07001c 00000000     ................
 801b5d0:	07000000 fc0f00f8 00fe1f00 7c003f3f     ............??.|
 801b5e0:	0778800f 80077880 70800778 03708003     ..x..x..x..p..p.
 801b5f0:	80037080 78800778 07788007 800f7c80     .p..x..x..x..|..
 801b600:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 801b638:	001c0700 07001c07 1c07001c 00000000     ................
 801b648:	07000000 fe1f00f8 00ff1f00 3c001f3f     ............?..<
 801b658:	0738000f 00070000 1f00ff07 ff3f00ff     ..8...........?.
 801b668:	00877f00 7800077c 0f700007 001f7800     ....|..x..p..x..
 801b678:	7f007f7c ff3f00ff 00f71f00 00000000     |.....?.........
	...
 801b6a8:	380e0000 380e380e 0000380e 0e700000     ...8.8.8.8....p.
 801b6b8:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 801b6c8:	0e700e70 0e700e70 3e781e78 fe7ffe7c     p.p.p.p.x.x>|...
 801b6d8:	ce1ffe3f 00000000 00000000 00000000     ?...............
	...
 801b6f0:	0080e300 0080e300 0080e300 0080e300     ................
	...
 801b708:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 801b718:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 801b728:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 801b738:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 801b748:	000f0078 000f0078 001e003c 003e003e     x...x...<...>.>.
 801b758:	007c001f 00f8e30f 00f0ff07 00e0ff03     ..|.............
 801b768:	0080ff00 00000000 00000000 00000000     ................
	...
 801b790:	0080e300 0080e300 0080e300 0080e300     ................
	...
 801b7a8:	00003e00 00007e00 00007e00 00007f00     .>...~...~......
 801b7b8:	0000f700 0080e700 0080e700 0080e301     ................
 801b7c8:	00c0c301 00c0c103 00e0c103 00e08103     ................
 801b7d8:	00e08007 00f08007 00f00007 00f8ff0f     ................
 801b7e8:	00f8ff0f 00f8ff1f 003c001e 003c001e     ..........<...<.
 801b7f8:	001e003c 001e003c 001e0038 000f0078     <...<...8...x...
 801b808:	000f0078 00000000 00000000 00000000     x...............
	...
 801b82c:	03000000 8e03008e 008e0300 00008e03     ................
 801b83c:	00000000 70007000 70700070 00707000     .....p.pp.pp.pp.
 801b84c:	70007070 70700070 00707000 70007070     pp.pp.pp.pp.pp.p
 801b85c:	70700070 00707000 70007070 70700070     p.pp.pp.pp.pp.pp
 801b86c:	00707000 f0007870 78f00078 0078f000     .pp.px..x..x..x.
 801b87c:	f0017cf0 1fe08f3f ff0fc0ff 00ff0780     .|..?...........
	...
 801b8b8:	00f80700 3f00fc1f 3f3e00fe 000f7c00     .......?..>?.|..
 801b8c8:	78000f78 07000007 000f0000 00001f00     x..x............
 801b8d8:	7c00003e 00f80000 0100f001 e00100e0     >..|............
 801b8e8:	00c00100 0000c001 00000000 00000000     ................
 801b8f8:	0100c001 c00100c0 00c00100 00000000     ................
	...
 801b920:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801b930:	70707070 00000070 70707070 00000000     ppppp...pppp....
	...
 801b950:	001f0000 c07b803f c060c071 c07bc071     ....?.{.q.`.q.{.
 801b960:	001f803f 00000000 00000000 00000000     ?...............
	...
 801b9a0:	c0030000 e007c003 f00ff00f 781e781e     .............x.x
 801b9b0:	3c3c3c3c 1e781e78 00000000 00000000     <<<<x.x.........
	...
 801b9f0:	e0000000 e000e000 c001c001 8003c001     ................
 801ba00:	80038003 00070007 00060007 000e000e     ................
 801ba10:	001c000e 001c001c 00380038 00700038     ........8.8.8.p.
 801ba20:	00700070 00000000 00000000 00000000     p.p.............
	...
 801ba40:	80030000 00078007 000e000e 001c001e     ................
 801ba50:	003c003c 00780038 00780078 00700078     <.<.8.x.x.x.x.p.
 801ba60:	00700070 00780070 00780078 00380078     p.p.p.x.x.x.x.8.
 801ba70:	003c003c 001e001c 000e000e 80070007     <.<.............
 801ba80:	00008003 00000000 00000000 00000000     ................
 801ba90:	00700000 00380078 001c001c 000e001e     ..p.x.8.........
 801baa0:	000f000f 80070007 80078007 80038007     ................
 801bab0:	80038003 80078003 80078007 00078007     ................
 801bac0:	000f000f 001e000e 001c001c 00780038     ............8.x.
 801bad0:	00000070 00000000 00000000 00000000     p...............
	...
 801bae8:	00f80300 0f00fc07 be0f00fe 001e0f00     ................
 801baf8:	0f000e0e 1e0f000e 00be0700 0300fc07     ................
 801bb08:	f00f00f8 00f01f00 3ce0f83f 3f78e07c     ........?..<|.x?
 801bb18:	e01f78e0 78e01f70 0778e00f e0077cc0     .x..p..x..x..|..
 801bb28:	3fe03f3e fe1ff0ff 60f807f0 00000000     >?.?.......`....
	...
 801bb68:	000ec01f 001ee03f 001ce03d 0038f078     ....?...=...x.8.
 801bb78:	0038f078 00707070 00f07070 00e07070     x.8.ppp.pp..pp..
 801bb88:	00c0f178 00c0f178 0080e33d 0080e33f     x...x...=...?...
 801bb98:	c01fc71f e03f0e00 e03d0e00 f0781c00     ......?...=...x.
 801bba8:	f0781c00 70703800 70707800 70707000     ..x..8pp.xpp.ppp
 801bbb8:	f078e000 f078e000 e03dc001 e03fc003     ..x...x...=...?.
 801bbc8:	c01f8003 00000000 00000000 00000000     ................
	...
 801bbf8:	0000c000 c00000c0 00f80700 1f00fe0f     ................
 801bc08:	ff3f00fe 00cf3c00 3800c73c c03800c0     ..?..<..<..8..8.
 801bc18:	00c03c00 1f00c03e fc0f00e0 00fe0700     .<..>...........
 801bc28:	0000ff01 c70080df 80c70080 7880c370     ............p..x
 801bc38:	c77880c3 80c77c80 3f00ff3f fe1f00ff     ..x..|..?..?....
 801bc48:	00f80700 0000c000 c00000c0 00000000     ................
	...
 801bc88:	0000fe0f c0ff7f00 1fff0000 f00100e0     ................
 801bc98:	0300f001 007800e0 3c008007 00000f00     ......x....<....
 801bca8:	071e001e 1e009eff 008fff1f 8fff3f3c     ............<?..
 801bcb8:	3f7e3c00 f878008f 7800070f 00070ff0     .<~?..x....x....
 801bcc8:	070ff078 0fe07900 e0710007 71000f0e     x....y....q....q
 801bcd8:	000f1ee0 0f1ec071 1ec07100 e079001f     ....q....q....y.
 801bce8:	79001e3e 003e7ce0 fcfef979 ffff7800     >..y.|>.y....x..
 801bcf8:	7f3c00f8 3c00f0df 00c09f3f 0000001e     ..<....<?.......
 801bd08:	00000f00 c00f0000 07000000 000000e0     ................
 801bd18:	c007ff01 ff7f0000 1f0000c0 000080ff     ................
	...
 801bd30:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801bd40:	70707070 70707070 70707070 70707070     pppppppppppppppp
 801bd50:	00707070 00000000 00000000 00000000     ppp.............
	...
 801bd74:	00030000 00000f00 ff00003f 00fc0300     ........?.......
 801bd84:	7f00f01f 007e00c0 00007c00 7f00007e     ......~..|..~...
 801bd94:	f01f00c0 00fc0300 0000ff00 0f00003f     ............?...
 801bda4:	00030000 00000000 00000000 00000000     ................
	...
 801bdec:	00006000 7e000078 807f0000 00e01f00     .`..x..~........
 801bdfc:	0100fc07 3f0000ff 001f0000 01003f00     .......?.....?..
 801be0c:	fc0700ff 00e01f00 7e00807f 00780000     ...........~..x.
 801be1c:	00006000 00000000 00000000 00000000     .`..............
	...

0801be44 <_ZL38Microsoft_Sans_Serif__26_mapping_table>:
	...
 801be64:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 801be74:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 801be84:	0d0c0b58 11100f0e 15141312 19181716     X...............
 801be94:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 801bea4:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 801beb4:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 801bef4:	00000050 00000000 00000000 00000000     P...............
 801bf04:	00000000 0000004c 00000000 00000000     ....L...........
 801bf14:	00000000 004b0000 00000000 0000004d     ......K.....M...
 801bf24:	00000000 00000049 00000000 00000000     ....I...........
 801bf34:	00000000 00480000 00000000 0000004a     ......H.....J...

0801bf44 <_ZL36Microsoft_Sans_Serif__26_width_table>:
 801bf44:	130b120b 12121212 19121212 14161714     ................
 801bf54:	05151912 19111610 19141915 15151516     ................
 801bf64:	19192319 12111113 110c1211 11090510     .#..............
 801bf74:	12101b05 110b1111 1a13100a 05121313     ................
 801bf84:	0c050505 120d1315 19101112 05111519     ................
 801bf94:	0a0c100b 121d150a 11110521              ........!...

0801bfa0 <_ZL37Microsoft_Sans_Serif__26_offset_table>:
 801bfa0:	00000000 00000050 000000c8 00000118     ....P...........
 801bfb0:	00000190 00000208 00000280 000002f8     ................
 801bfc0:	00000370 000003e8 00000460 000004d8     p.......`.......
 801bfd0:	00000578 000005f0 00000668 000006e0     x.......h.......
 801bfe0:	00000758 000007d0 00000870 000008e8     X.......p.......
 801bff0:	00000910 00000960 000009d8 00000a50     ....`.......P...
 801c000:	00000af0 00000b68 00000c08 00000c80     ....h...........
 801c010:	00000d20 00000d98 00000e10 00000e88      ...............
 801c020:	00000f00 00000fa0 00001068 00001108     ........h.......
 801c030:	000011a8 00001220 00001298 00001310     .... ...........
 801c040:	00001388 00001400 00001478 000014c8     ........x.......
 801c050:	00001540 00001590 000015b8 00001608     @...............
 801c060:	00001680 000016a8 00001748 00001798     ........H.......
 801c070:	00001810 00001888 00001900 00001950     ............P...
 801c080:	000019c8 00001a18 00001a68 00001ae0     ........h.......
 801c090:	00001b80 00001bf8 00001c70 00001ce8     ........p.......
 801c0a0:	00001d10 00001d38 00001d60 00001d88     ....8...`.......
 801c0b0:	00001dd8 00001e50 00001ec8 00001f18     ....P...........
 801c0c0:	00001f90 00002008 00002080 000020d0     ..... ... ... ..
 801c0d0:	00002170 00002210 00002288 00002300     p!..."..."...#..
 801c0e0:	00002328 00002378 000023c8 00002418     (#..x#...#...$..
 801c0f0:	00002468 000024b8 00002530 000025d0     h$...$..0%...%..
 801c100:	00002648 00002710 00002738 000027b0     H&...'..8'...'..

0801c110 <_ZTV12AManagedTask>:
	...
 801c118:	0800ef61 08010871 0800ef85 08010685     a...q...........
 801c128:	080106c5 08010619 080164b1 0800efa9     .........d......

0801c138 <_ZTV12IFreeRTOSObj>:
	...
 801c140:	080164b1 080164b1 080164b1 00000000     .d...d...d......

0801c150 <_ZTV5CTask>:
	...
 801c158:	0800ef61 08010871 0800ef85 0801080d     a...q...........
 801c168:	08010851 00000000                       Q.......

0801c170 <_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__>:
 801c170:	74726976 206c6175 64696f76 61544320     virtual void CTa
 801c180:	3a3a6b73 61747441 78286863 656e6547     sk::Attach(xGene
 801c190:	48636972 6c646e61 00002965              ricHandle)..

0801c19c <fatstr.1639>:
 801c19c:	00544146                                FAT.

0801c1a0 <_ZTV12CFileHandler>:
	...
 801c1a8:	0800ef61 08010871 0800ef85 080134a1     a...q........4..
 801c1b8:	080134d9 080134f9 08013579 0800efa9     .4...4..y5......

0801c1c8 <_ZTV24CLedHeartBeatSTM32F4Disc>:
	...
 801c1d0:	0800ef61 08010871 0800ef85 08015b79     a...q.......y[..
 801c1e0:	08015bb1 08015bd1 08015c09 0800efa9     .[...[...\......
 801c1f0:	65727570 72697620 6c617574 74656d20     pure virtual met
 801c200:	20646f68 6c6c6163 000a6465 6d726574     hod called..term
 801c210:	74616e69 61632065 64656c6c 63657220     inate called rec
 801c220:	69737275 796c6576 0000000a 6d726574     ursively....term
 801c230:	74616e69 61632065 64656c6c 74666120     inate called aft
 801c240:	74207265 776f7268 20676e69 69206e61     er throwing an i
 801c250:	6174736e 2065636e 2720666f 00000000     nstance of '....
 801c260:	00000a27 6d726574 74616e69 61632065     '...terminate ca
 801c270:	64656c6c 74697720 74756f68 206e6120     lled without an 
 801c280:	69746361 65206576 70656378 6e6f6974     active exception
 801c290:	0000000a 68772020 29287461 0020203a     ....  what():  .

0801c2a0 <_ZTVSt9exception>:
 801c2a0:	00000000 0801c2c0 08016aa1 08016ae5     .........j...j..
 801c2b0:	08016ab9 00000000                       .j......

0801c2b8 <_ZTIN10__cxxabiv115__forced_unwindE>:
 801c2b8:	0801c540 0801c358                       @...X...

0801c2c0 <_ZTISt9exception>:
 801c2c0:	0801c540 0801c348                       @...H...

0801c2c8 <_ZTSSt13bad_exception>:
 801c2c8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
 801c2d8:	0000006e 3a647473 6378653a 69747065     n...std::excepti
 801c2e8:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
 801c2f8:	69747065 00006e6f                       eption..

0801c300 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
 801c300:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 801c310:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
 801c320:	00456e6f                                onE.

0801c324 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
 801c324:	0801c540 0801c300 00000000              @...........

0801c330 <_ZTVSt13bad_exception>:
 801c330:	00000000 0801c378 08016aad 08016ad1     ....x....j...j..
 801c340:	08016ac5 00000000                       .j......

0801c348 <_ZTSSt9exception>:
 801c348:	65397453 70656378 6e6f6974 00000000     St9exception....

0801c358 <_ZTSN10__cxxabiv115__forced_unwindE>:
 801c358:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
 801c368:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0801c378 <_ZTISt13bad_exception>:
 801c378:	0801c458 0801c2c8 0801c2c0              X...........

0801c384 <_ZTIPv>:
 801c384:	0801c430 0801c39c 00000000 0801c394     0...............

0801c394 <_ZTIv>:
 801c394:	0801c3e0 0801c3a0                       ........

0801c39c <_ZTSPv>:
 801c39c:	00007650                                Pv..

0801c3a0 <_ZTSv>:
 801c3a0:	00000076                                v...

0801c3a4 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
 801c3a4:	0801c458 0801c3b0 0801c4b4              X...........

0801c3b0 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
 801c3b0:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
 801c3c0:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
 801c3d0:	6e695f65 00456f66                       e_infoE.

0801c3d8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
 801c3d8:	00000000 0801c3a4 080171dd 080171f1     .........q...q..
 801c3e8:	080173ad 080173b1 08017405 080173b5     .s...s...t...s..

0801c3f8 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
 801c3f8:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 801c408:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
 801c418:	00456f66                                foE.

0801c41c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
 801c41c:	0801c458 0801c3f8 0801c598              X...........

0801c428 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
 801c428:	00000000 0801c41c 08017211 08017225     .........r..%r..
 801c438:	0801720d 080173b1 08017615 080173b5     .r...s...v...s..
 801c448:	08017241 00000000                       Ar......

0801c450 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 801c450:	00000000 0801c480 08017289 0801729d     .........r...r..
 801c460:	080173ad 080173b1 08017511 08017445     .s...s...u..Et..
 801c470:	080172b9 080172e1 08017369 00000000     .r...r..is......

0801c480 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 801c480:	0801c458 0801c48c 0801c568              X.......h...

0801c48c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 801c48c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 801c49c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 801c4ac:	456f666e 00000000                       nfoE....

0801c4b4 <_ZTISt9type_info>:
 801c4b4:	0801c540 0801c4bc                       @.......

0801c4bc <_ZTSSt9type_info>:
 801c4bc:	74397453 5f657079 6f666e69 00000000     St9type_info....
 801c4cc:	00000000                                ....

0801c4d0 <_ZTVSt9type_info>:
 801c4d0:	00000000 0801c4b4 080173a1 080173b9     .........s...s..
 801c4e0:	080173ad 080173b1 08017405 080173b5     .s...s...t...s..

0801c4f0 <_ZTVSt10bad_typeid>:
 801c4f0:	00000000 0801c508 08017415 08017429     .........t..)t..
 801c500:	08017409 00000000                       .t......

0801c508 <_ZTISt10bad_typeid>:
 801c508:	0801c458 0801c524 0801c2c0 3a647473     X...$.......std:
 801c518:	6461623a 7079745f 00646965              :bad_typeid.

0801c524 <_ZTSSt10bad_typeid>:
 801c524:	30317453 5f646162 65707974 00006469     St10bad_typeid..
 801c534:	00000000                                ....

0801c538 <_ZTVN10__cxxabiv117__class_type_infoE>:
 801c538:	00000000 0801c568 080174a5 080174b9     ....h....t...t..
 801c548:	080173ad 080173b1 08017511 08017445     .s...s...u..Et..
 801c558:	08017489 080174d5 0801747d 00000000     .t...t..}t......

0801c568 <_ZTIN10__cxxabiv117__class_type_infoE>:
 801c568:	0801c458 0801c574 0801c4b4              X...t.......

0801c574 <_ZTSN10__cxxabiv117__class_type_infoE>:
 801c574:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 801c584:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 801c594:	00000045                                E...

0801c598 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
 801c598:	0801c458 0801c5a4 0801c4b4              X...........

0801c5a4 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
 801c5a4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 801c5b4:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
 801c5c4:	00000045                                E...

0801c5c8 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
 801c5c8:	00000000 0801c598 080175e5 080175f9     .........u...u..
 801c5d8:	080173ad 080173b1 08017615 080173b5     .s...s...v...s..
 801c5e8:	080175d1 00000000 7566202c 6974636e     .u......, functi
 801c5f8:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
 801c608:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
 801c618:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
 801c628:	25732564 00000a73 00000043 00464e49     d%s%s...C...INF.
 801c638:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
 801c648:	37363534 42413938 46454443 00000000     456789ABCDEF....
 801c658:	33323130 37363534 62613938 66656463     0123456789abcdef
 801c668:	00000000 6c756e28 0000296c 00000030     ....(null)..0...
 801c678:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 801c688:	49534f50 00000058 0000002e              POSIX.......

0801c694 <_init>:
 801c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c696:	bf00      	nop
 801c698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c69a:	bc08      	pop	{r3}
 801c69c:	469e      	mov	lr, r3
 801c69e:	4770      	bx	lr

0801c6a0 <_fini>:
 801c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6a2:	bf00      	nop
 801c6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6a6:	bc08      	pop	{r3}
 801c6a8:	469e      	mov	lr, r3
 801c6aa:	4770      	bx	lr
