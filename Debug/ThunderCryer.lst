
ThunderCryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e754  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000138  0801e8dc  0801e8dc  000268dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000208  0801ea14  0801ea14  00026a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801ec1c  0801ec1c  00026c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ec24  0801ec24  00026c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000920  20000000  0801ec28  00028000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006ccc  20000920  0801f548  00028920  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  200075ec  0801f548  0002f5ec  2**0
                  ALLOC
  9 .ARM.attributes 00000033  00000000  00000000  00028920  2**0
                  CONTENTS, READONLY
 10 .debug_line   00023611  00000000  00000000  00028953  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0004eae2  00000000  00000000  0004bf64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000fbd1  00000000  00000000  0009aa46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003198  00000000  00000000  000aa618  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000032f8  00000000  00000000  000ad7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000011  00000000  00000000  000b0aa8  2**0
                  CONTENTS, READONLY
 16 .debug_loc    000200d6  00000000  00000000  000b0ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 010ac83d  00000000  00000000  000d0b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00010aa7  00000000  00000000  0117d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  00009c04  00000000  00000000  0118de74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000920 	.word	0x20000920
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801e8c4 	.word	0x0801e8c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0801e8c4 	.word	0x0801e8c4
 80001d0:	20000924 	.word	0x20000924
 80001d4:	20000920 	.word	0x20000920
 80001d8:	00000000 	.word	0x00000000

080001dc <d_fill_name>:
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d005      	beq.n	80001fa <d_fill_name+0x1e>
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d002      	beq.n	80001fa <d_fill_name+0x1e>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d102      	bne.n	8000200 <d_fill_name+0x24>
 80001fa:	f04f 0300 	mov.w	r3, #0
 80001fe:	e00b      	b.n	8000218 <d_fill_name+0x3c>
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f04f 0200 	mov.w	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	f04f 0301 	mov.w	r3, #1
 8000218:	4618      	mov	r0, r3
 800021a:	f107 0714 	add.w	r7, r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <d_fill_extended_operator>:
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d005      	beq.n	8000242 <d_fill_extended_operator+0x1e>
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db02      	blt.n	8000242 <d_fill_extended_operator+0x1e>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d102      	bne.n	8000248 <d_fill_extended_operator+0x24>
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	e00b      	b.n	8000260 <d_fill_extended_operator+0x3c>
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f04f 022d 	mov.w	r2, #45	; 0x2d
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	f04f 0301 	mov.w	r3, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f107 0714 	add.w	r7, r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <d_fill_ctor>:
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	460b      	mov	r3, r1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	72fb      	strb	r3, [r7, #11]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d008      	beq.n	8000292 <d_fill_ctor+0x26>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <d_fill_ctor+0x26>
 8000286:	7afb      	ldrb	r3, [r7, #11]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <d_fill_ctor+0x26>
 800028c:	7afb      	ldrb	r3, [r7, #11]
 800028e:	2b03      	cmp	r3, #3
 8000290:	d902      	bls.n	8000298 <d_fill_ctor+0x2c>
 8000292:	f04f 0300 	mov.w	r3, #0
 8000296:	e00b      	b.n	80002b0 <d_fill_ctor+0x44>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f04f 0207 	mov.w	r2, #7
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	7afa      	ldrb	r2, [r7, #11]
 80002a4:	711a      	strb	r2, [r3, #4]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	f04f 0301 	mov.w	r3, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f107 0714 	add.w	r7, r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <d_fill_dtor>:
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	460b      	mov	r3, r1
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	72fb      	strb	r3, [r7, #11]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d008      	beq.n	80002e2 <d_fill_dtor+0x26>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d005      	beq.n	80002e2 <d_fill_dtor+0x26>
 80002d6:	7afb      	ldrb	r3, [r7, #11]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <d_fill_dtor+0x26>
 80002dc:	7afb      	ldrb	r3, [r7, #11]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d902      	bls.n	80002e8 <d_fill_dtor+0x2c>
 80002e2:	f04f 0300 	mov.w	r3, #0
 80002e6:	e00b      	b.n	8000300 <d_fill_dtor+0x44>
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	f04f 0208 	mov.w	r2, #8
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	7afa      	ldrb	r2, [r7, #11]
 80002f4:	711a      	strb	r2, [r3, #4]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	f04f 0301 	mov.w	r3, #1
 8000300:	4618      	mov	r0, r3
 8000302:	f107 0714 	add.w	r7, r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <d_make_empty>:
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	429a      	cmp	r2, r3
 800031e:	db02      	blt.n	8000326 <d_make_empty+0x1a>
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	e013      	b.n	800034e <d_make_empty+0x42>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6919      	ldr	r1, [r3, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	461a      	mov	r2, r3
 8000330:	4613      	mov	r3, r2
 8000332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000336:	189b      	adds	r3, r3, r2
 8000338:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800033c:	18cb      	adds	r3, r1, r3
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f103 0201 	add.w	r2, r3, #1
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	615a      	str	r2, [r3, #20]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	4618      	mov	r0, r3
 8000350:	f107 0714 	add.w	r7, r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <d_make_comp>:
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	607a      	str	r2, [r7, #4]
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	460b      	mov	r3, r1
 800036a:	72fb      	strb	r3, [r7, #11]
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	f103 33ff 	add.w	r3, r3, #4294967295
 8000372:	2b41      	cmp	r3, #65	; 0x41
 8000374:	f200 809d 	bhi.w	80004b2 <d_make_comp+0x156>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <d_make_comp+0x24>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	08000489 	.word	0x08000489
 8000384:	08000489 	.word	0x08000489
 8000388:	08000489 	.word	0x08000489
 800038c:	08000489 	.word	0x08000489
 8000390:	080004b3 	.word	0x080004b3
 8000394:	080004b3 	.word	0x080004b3
 8000398:	080004b3 	.word	0x080004b3
 800039c:	080004b3 	.word	0x080004b3
 80003a0:	0800049b 	.word	0x0800049b
 80003a4:	0800049b 	.word	0x0800049b
 80003a8:	08000489 	.word	0x08000489
 80003ac:	0800049b 	.word	0x0800049b
 80003b0:	0800049b 	.word	0x0800049b
 80003b4:	0800049b 	.word	0x0800049b
 80003b8:	0800049b 	.word	0x0800049b
 80003bc:	0800049b 	.word	0x0800049b
 80003c0:	0800049b 	.word	0x0800049b
 80003c4:	0800049b 	.word	0x0800049b
 80003c8:	0800049b 	.word	0x0800049b
 80003cc:	0800049b 	.word	0x0800049b
 80003d0:	0800049b 	.word	0x0800049b
 80003d4:	080004b3 	.word	0x080004b3
 80003d8:	080004b9 	.word	0x080004b9
 80003dc:	080004b9 	.word	0x080004b9
 80003e0:	080004b9 	.word	0x080004b9
 80003e4:	080004b9 	.word	0x080004b9
 80003e8:	080004b9 	.word	0x080004b9
 80003ec:	080004b9 	.word	0x080004b9
 80003f0:	08000489 	.word	0x08000489
 80003f4:	0800049b 	.word	0x0800049b
 80003f8:	0800049b 	.word	0x0800049b
 80003fc:	0800049b 	.word	0x0800049b
 8000400:	0800049b 	.word	0x0800049b
 8000404:	0800049b 	.word	0x0800049b
 8000408:	080004b3 	.word	0x080004b3
 800040c:	0800049b 	.word	0x0800049b
 8000410:	080004b9 	.word	0x080004b9
 8000414:	080004a7 	.word	0x080004a7
 8000418:	08000489 	.word	0x08000489
 800041c:	080004b3 	.word	0x080004b3
 8000420:	08000489 	.word	0x08000489
 8000424:	080004b9 	.word	0x080004b9
 8000428:	080004b9 	.word	0x080004b9
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b3 	.word	0x080004b3
 8000434:	0800049b 	.word	0x0800049b
 8000438:	08000489 	.word	0x08000489
 800043c:	08000489 	.word	0x08000489
 8000440:	08000489 	.word	0x08000489
 8000444:	08000489 	.word	0x08000489
 8000448:	08000489 	.word	0x08000489
 800044c:	08000489 	.word	0x08000489
 8000450:	08000489 	.word	0x08000489
 8000454:	08000489 	.word	0x08000489
 8000458:	0800049b 	.word	0x0800049b
 800045c:	08000489 	.word	0x08000489
 8000460:	080004b3 	.word	0x080004b3
 8000464:	080004b3 	.word	0x080004b3
 8000468:	0800049b 	.word	0x0800049b
 800046c:	0800049b 	.word	0x0800049b
 8000470:	0800049b 	.word	0x0800049b
 8000474:	080004b3 	.word	0x080004b3
 8000478:	080004b3 	.word	0x080004b3
 800047c:	080004b3 	.word	0x080004b3
 8000480:	0800049b 	.word	0x0800049b
 8000484:	08000489 	.word	0x08000489
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <d_make_comp+0x138>
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d113      	bne.n	80004bc <d_make_comp+0x160>
 8000494:	f04f 0300 	mov.w	r3, #0
 8000498:	e027      	b.n	80004ea <d_make_comp+0x18e>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10f      	bne.n	80004c0 <d_make_comp+0x164>
 80004a0:	f04f 0300 	mov.w	r3, #0
 80004a4:	e021      	b.n	80004ea <d_make_comp+0x18e>
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d10b      	bne.n	80004c4 <d_make_comp+0x168>
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	e01b      	b.n	80004ea <d_make_comp+0x18e>
 80004b2:	f04f 0300 	mov.w	r3, #0
 80004b6:	e018      	b.n	80004ea <d_make_comp+0x18e>
 80004b8:	bf00      	nop
 80004ba:	e004      	b.n	80004c6 <d_make_comp+0x16a>
 80004bc:	bf00      	nop
 80004be:	e002      	b.n	80004c6 <d_make_comp+0x16a>
 80004c0:	bf00      	nop
 80004c2:	e000      	b.n	80004c6 <d_make_comp+0x16a>
 80004c4:	bf00      	nop
 80004c6:	68f8      	ldr	r0, [r7, #12]
 80004c8:	f7ff ff20 	bl	800030c <d_make_empty>
 80004cc:	4603      	mov	r3, r0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <d_make_comp+0x18c>
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	7afa      	ldrb	r2, [r7, #11]
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f107 0718 	add.w	r7, r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <d_make_demangle_mangled_name>:
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b5f      	cmp	r3, #95	; 0x5f
 8000506:	d106      	bne.n	8000516 <d_make_demangle_mangled_name+0x22>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	f103 0301 	add.w	r3, r3, #1
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b5a      	cmp	r3, #90	; 0x5a
 8000514:	d00a      	beq.n	800052c <d_make_demangle_mangled_name+0x38>
 8000516:	6838      	ldr	r0, [r7, #0]
 8000518:	f007 fe3c 	bl	8008194 <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	6839      	ldr	r1, [r7, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	f000 f814 	bl	8000550 <d_make_name>
 8000528:	4603      	mov	r3, r0
 800052a:	e00b      	b.n	8000544 <d_make_demangle_mangled_name+0x50>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	f103 0202 	add.w	r2, r3, #2
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f04f 0100 	mov.w	r1, #0
 800053e:	f000 fa4d 	bl	80009dc <d_encoding>
 8000542:	4603      	mov	r3, r0
 8000544:	4618      	mov	r0, r3
 8000546:	f107 0708 	add.w	r7, r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop

08000550 <d_make_name>:
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f7ff fed5 	bl	800030c <d_make_empty>
 8000562:	4603      	mov	r3, r0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	6978      	ldr	r0, [r7, #20]
 8000568:	68b9      	ldr	r1, [r7, #8]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	f7ff fe36 	bl	80001dc <d_fill_name>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d102      	bne.n	800057c <d_make_name+0x2c>
 8000576:	f04f 0300 	mov.w	r3, #0
 800057a:	e000      	b.n	800057e <d_make_name+0x2e>
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	4618      	mov	r0, r3
 8000580:	f107 0718 	add.w	r7, r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <d_make_builtin_type>:
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <d_make_builtin_type+0x16>
 8000598:	f04f 0300 	mov.w	r3, #0
 800059c:	e00f      	b.n	80005be <d_make_builtin_type+0x36>
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff feb4 	bl	800030c <d_make_empty>
 80005a4:	4603      	mov	r3, r0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d006      	beq.n	80005bc <d_make_builtin_type+0x34>
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f04f 0223 	mov.w	r2, #35	; 0x23
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f107 0710 	add.w	r7, r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <d_make_operator>:
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff fe9a 	bl	800030c <d_make_empty>
 80005d8:	4603      	mov	r3, r0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <d_make_operator+0x28>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f04f 022c 	mov.w	r2, #44	; 0x2c
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f107 0710 	add.w	r7, r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <d_make_extended_operator>:
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff fe7f 	bl	800030c <d_make_empty>
 800060e:	4603      	mov	r3, r0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	6978      	ldr	r0, [r7, #20]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	f7ff fe04 	bl	8000224 <d_fill_extended_operator>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <d_make_extended_operator+0x2c>
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	e000      	b.n	800062a <d_make_extended_operator+0x2e>
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	4618      	mov	r0, r3
 800062c:	f107 0718 	add.w	r7, r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <d_make_default_arg>:
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff fe63 	bl	800030c <d_make_empty>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <d_make_default_arg+0x30>
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4618      	mov	r0, r3
 8000668:	f107 0718 	add.w	r7, r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <d_make_ctor>:
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	460b      	mov	r3, r1
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	72fb      	strb	r3, [r7, #11]
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f7ff fe44 	bl	800030c <d_make_empty>
 8000684:	4603      	mov	r3, r0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	6978      	ldr	r0, [r7, #20]
 800068c:	4619      	mov	r1, r3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	f7ff fdec 	bl	800026c <d_fill_ctor>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d102      	bne.n	80006a0 <d_make_ctor+0x30>
 800069a:	f04f 0300 	mov.w	r3, #0
 800069e:	e000      	b.n	80006a2 <d_make_ctor+0x32>
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f107 0718 	add.w	r7, r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <d_make_dtor>:
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	460b      	mov	r3, r1
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	72fb      	strb	r3, [r7, #11]
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff fe26 	bl	800030c <d_make_empty>
 80006c0:	4603      	mov	r3, r0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	6978      	ldr	r0, [r7, #20]
 80006c8:	4619      	mov	r1, r3
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	f7ff fdf6 	bl	80002bc <d_fill_dtor>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d102      	bne.n	80006dc <d_make_dtor+0x30>
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	e000      	b.n	80006de <d_make_dtor+0x32>
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	4618      	mov	r0, r3
 80006e0:	f107 0718 	add.w	r7, r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <d_make_template_param>:
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff fe0a 	bl	800030c <d_make_empty>
 80006f8:	4603      	mov	r3, r0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d006      	beq.n	8000710 <d_make_template_param+0x28>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f04f 0205 	mov.w	r2, #5
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4618      	mov	r0, r3
 8000714:	f107 0710 	add.w	r7, r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <d_make_function_param>:
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff fdf0 	bl	800030c <d_make_empty>
 800072c:	4603      	mov	r3, r0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <d_make_function_param+0x28>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f04f 0206 	mov.w	r2, #6
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4618      	mov	r0, r3
 8000748:	f107 0710 	add.w	r7, r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <d_make_sub>:
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff fdd5 	bl	800030c <d_make_empty>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d009      	beq.n	8000780 <d_make_sub+0x30>
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	f04f 0216 	mov.w	r2, #22
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4618      	mov	r0, r3
 8000784:	f107 0718 	add.w	r7, r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <d_mangled_name>:
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b5f      	cmp	r3, #95	; 0x5f
 800079e:	d108      	bne.n	80007b2 <d_mangled_name+0x26>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f103 0201 	add.w	r2, r3, #1
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	e001      	b.n	80007b6 <d_mangled_name+0x2a>
 80007b2:	f04f 0301 	mov.w	r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <d_mangled_name+0x3a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <d_mangled_name+0x3a>
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e054      	b.n	8000870 <d_mangled_name+0xe4>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b5a      	cmp	r3, #90	; 0x5a
 80007ce:	d108      	bne.n	80007e2 <d_mangled_name+0x56>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f103 0201 	add.w	r2, r3, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e001      	b.n	80007e6 <d_mangled_name+0x5a>
 80007e2:	f04f 0301 	mov.w	r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <d_mangled_name+0x64>
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e03f      	b.n	8000870 <d_mangled_name+0xe4>
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	f000 f8f2 	bl	80009dc <d_encoding>
 80007f8:	4603      	mov	r3, r0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d035      	beq.n	800086e <d_mangled_name+0xe2>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d02e      	beq.n	800086e <d_mangled_name+0xe2>
 8000810:	e005      	b.n	800081e <d_mangled_name+0x92>
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	f002 fcbb 	bl	8003190 <d_clone_suffix>
 800081a:	4603      	mov	r3, r0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b2e      	cmp	r3, #46	; 0x2e
 8000826:	d122      	bne.n	800086e <d_mangled_name+0xe2>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	f103 0301 	add.w	r3, r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b60      	cmp	r3, #96	; 0x60
 8000834:	d906      	bls.n	8000844 <d_mangled_name+0xb8>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f103 0301 	add.w	r3, r3, #1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b7a      	cmp	r3, #122	; 0x7a
 8000842:	d9e6      	bls.n	8000812 <d_mangled_name+0x86>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f103 0301 	add.w	r3, r3, #1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b5f      	cmp	r3, #95	; 0x5f
 8000850:	d0df      	beq.n	8000812 <d_mangled_name+0x86>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f103 0301 	add.w	r3, r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b2f      	cmp	r3, #47	; 0x2f
 800085e:	d906      	bls.n	800086e <d_mangled_name+0xe2>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f103 0301 	add.w	r3, r3, #1
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b39      	cmp	r3, #57	; 0x39
 800086c:	d9d1      	bls.n	8000812 <d_mangled_name+0x86>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4618      	mov	r0, r3
 8000872:	f107 0710 	add.w	r7, r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop

0800087c <has_return_type>:
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <has_return_type+0x14>
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e01d      	b.n	80008cc <has_return_type+0x50>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d008      	beq.n	80008aa <has_return_type+0x2e>
 8000898:	2b04      	cmp	r3, #4
 800089a:	db03      	blt.n	80008a4 <has_return_type+0x28>
 800089c:	f1a3 031a 	sub.w	r3, r3, #26
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d90d      	bls.n	80008c0 <has_return_type+0x44>
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	e010      	b.n	80008cc <has_return_type+0x50>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f812 	bl	80008d8 <is_ctor_dtor_or_conversion>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2300      	movne	r3, #0
 80008bc:	2301      	moveq	r3, #1
 80008be:	e005      	b.n	80008cc <has_return_type+0x50>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffd9 	bl	800087c <has_return_type>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f107 0708 	add.w	r7, r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop

080008d8 <is_ctor_dtor_or_conversion>:
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <is_ctor_dtor_or_conversion+0x14>
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	e071      	b.n	80009d0 <is_ctor_dtor_or_conversion+0xf8>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80008f4:	2b2d      	cmp	r3, #45	; 0x2d
 80008f6:	d85f      	bhi.n	80009b8 <is_ctor_dtor_or_conversion+0xe0>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <is_ctor_dtor_or_conversion+0x28>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	080009bf 	.word	0x080009bf
 8000904:	080009bf 	.word	0x080009bf
 8000908:	080009b9 	.word	0x080009b9
 800090c:	080009b9 	.word	0x080009b9
 8000910:	080009b9 	.word	0x080009b9
 8000914:	080009b9 	.word	0x080009b9
 8000918:	080009cd 	.word	0x080009cd
 800091c:	080009cd 	.word	0x080009cd
 8000920:	080009b9 	.word	0x080009b9
 8000924:	080009b9 	.word	0x080009b9
 8000928:	080009b9 	.word	0x080009b9
 800092c:	080009b9 	.word	0x080009b9
 8000930:	080009b9 	.word	0x080009b9
 8000934:	080009b9 	.word	0x080009b9
 8000938:	080009b9 	.word	0x080009b9
 800093c:	080009b9 	.word	0x080009b9
 8000940:	080009b9 	.word	0x080009b9
 8000944:	080009b9 	.word	0x080009b9
 8000948:	080009b9 	.word	0x080009b9
 800094c:	080009b9 	.word	0x080009b9
 8000950:	080009b9 	.word	0x080009b9
 8000954:	080009b9 	.word	0x080009b9
 8000958:	080009b9 	.word	0x080009b9
 800095c:	080009b9 	.word	0x080009b9
 8000960:	080009b9 	.word	0x080009b9
 8000964:	080009b9 	.word	0x080009b9
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009b9 	.word	0x080009b9
 8000970:	080009b9 	.word	0x080009b9
 8000974:	080009b9 	.word	0x080009b9
 8000978:	080009b9 	.word	0x080009b9
 800097c:	080009b9 	.word	0x080009b9
 8000980:	080009b9 	.word	0x080009b9
 8000984:	080009b9 	.word	0x080009b9
 8000988:	080009b9 	.word	0x080009b9
 800098c:	080009b9 	.word	0x080009b9
 8000990:	080009b9 	.word	0x080009b9
 8000994:	080009b9 	.word	0x080009b9
 8000998:	080009b9 	.word	0x080009b9
 800099c:	080009b9 	.word	0x080009b9
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009b9 	.word	0x080009b9
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	080009b9 	.word	0x080009b9
 80009b0:	080009b9 	.word	0x080009b9
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	e008      	b.n	80009d0 <is_ctor_dtor_or_conversion+0xf8>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff88 	bl	80008d8 <is_ctor_dtor_or_conversion>
 80009c8:	4603      	mov	r3, r0
 80009ca:	e001      	b.n	80009d0 <is_ctor_dtor_or_conversion+0xf8>
 80009cc:	f04f 0301 	mov.w	r3, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f107 0708 	add.w	r7, r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop

080009dc <d_encoding>:
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b47      	cmp	r3, #71	; 0x47
 80009f2:	d002      	beq.n	80009fa <d_encoding+0x1e>
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b54      	cmp	r3, #84	; 0x54
 80009f8:	d104      	bne.n	8000a04 <d_encoding+0x28>
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 fd1c 	bl	8001438 <d_special_name>
 8000a00:	4603      	mov	r3, r0
 8000a02:	e05b      	b.n	8000abc <d_encoding+0xe0>
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 f85f 	bl	8000ac8 <d_name>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d034      	beq.n	8000a7e <d_encoding+0xa2>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d031      	beq.n	8000a7e <d_encoding+0xa2>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d12b      	bne.n	8000a7e <d_encoding+0xa2>
 8000a26:	e002      	b.n	8000a2e <d_encoding+0x52>
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b1a      	cmp	r3, #26
 8000a34:	d0f8      	beq.n	8000a28 <d_encoding+0x4c>
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b1b      	cmp	r3, #27
 8000a3c:	d0f4      	beq.n	8000a28 <d_encoding+0x4c>
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b1c      	cmp	r3, #28
 8000a44:	d0f0      	beq.n	8000a28 <d_encoding+0x4c>
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d115      	bne.n	8000a7a <d_encoding+0x9e>
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	e002      	b.n	8000a5c <d_encoding+0x80>
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b1a      	cmp	r3, #26
 8000a62:	d0f8      	beq.n	8000a56 <d_encoding+0x7a>
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b1b      	cmp	r3, #27
 8000a6a:	d0f4      	beq.n	8000a56 <d_encoding+0x7a>
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b1c      	cmp	r3, #28
 8000a72:	d0f0      	beq.n	8000a56 <d_encoding+0x7a>
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	e01e      	b.n	8000abc <d_encoding+0xe0>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <d_encoding+0xbc>
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <d_encoding+0xbc>
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b45      	cmp	r3, #69	; 0x45
 8000a96:	d101      	bne.n	8000a9c <d_encoding+0xc0>
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	e00f      	b.n	8000abc <d_encoding+0xe0>
 8000a9c:	6978      	ldr	r0, [r7, #20]
 8000a9e:	f7ff feed 	bl	800087c <has_return_type>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f001 fc7e 	bl	80023a8 <d_bare_function_type>
 8000aac:	4603      	mov	r3, r0
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f04f 0103 	mov.w	r1, #3
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	f7ff fc51 	bl	800035c <d_make_comp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f107 0718 	add.w	r7, r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop

08000ac8 <d_name>:
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8000ade:	2b0e      	cmp	r3, #14
 8000ae0:	f200 8088 	bhi.w	8000bf4 <d_name+0x12c>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <d_name+0x24>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000bf5 	.word	0x08000bf5
 8000af4:	08000b29 	.word	0x08000b29
 8000af8:	08000bf5 	.word	0x08000bf5
 8000afc:	08000bf5 	.word	0x08000bf5
 8000b00:	08000bf5 	.word	0x08000bf5
 8000b04:	08000bf5 	.word	0x08000bf5
 8000b08:	08000b47 	.word	0x08000b47
 8000b0c:	08000bf5 	.word	0x08000bf5
 8000b10:	08000b3d 	.word	0x08000b3d
 8000b14:	08000bf5 	.word	0x08000bf5
 8000b18:	08000bf5 	.word	0x08000bf5
 8000b1c:	08000bf5 	.word	0x08000bf5
 8000b20:	08000bf5 	.word	0x08000bf5
 8000b24:	08000b33 	.word	0x08000b33
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f889 	bl	8000c40 <d_nested_name>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e081      	b.n	8000c36 <d_name+0x16e>
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f002 f990 	bl	8002e58 <d_local_name>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	e07c      	b.n	8000c36 <d_name+0x16e>
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f96b 	bl	8000e18 <d_unqualified_name>
 8000b42:	4603      	mov	r3, r0
 8000b44:	e077      	b.n	8000c36 <d_name+0x16e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f103 0301 	add.w	r3, r3, #1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b74      	cmp	r3, #116	; 0x74
 8000b52:	d00a      	beq.n	8000b6a <d_name+0xa2>
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f04f 0100 	mov.w	r1, #0
 8000b5a:	f002 fbbd 	bl	80032d8 <d_substitution>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	f04f 0301 	mov.w	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	e024      	b.n	8000bb4 <d_name+0xec>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	f103 0202 	add.w	r2, r3, #2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f649 517c 	movw	r1, #40316	; 0x9d7c
 8000b7c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8000b80:	f04f 0203 	mov.w	r2, #3
 8000b84:	f7ff fce4 	bl	8000550 <d_make_name>
 8000b88:	4604      	mov	r4, r0
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f944 	bl	8000e18 <d_unqualified_name>
 8000b90:	4603      	mov	r3, r0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f04f 0101 	mov.w	r1, #1
 8000b98:	4622      	mov	r2, r4
 8000b9a:	f7ff fbdf 	bl	800035c <d_make_comp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f103 0203 	add.w	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b49      	cmp	r3, #73	; 0x49
 8000bbc:	d118      	bne.n	8000bf0 <d_name+0x128>
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d109      	bne.n	8000bd8 <d_name+0x110>
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	6979      	ldr	r1, [r7, #20]
 8000bc8:	f002 fb5a 	bl	8003280 <d_add_substitution>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <d_name+0x110>
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	e02e      	b.n	8000c36 <d_name+0x16e>
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f001 fdc3 	bl	8002764 <d_template_args>
 8000bde:	4603      	mov	r3, r0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f04f 0104 	mov.w	r1, #4
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	f7ff fbb8 	bl	800035c <d_make_comp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	e020      	b.n	8000c36 <d_name+0x16e>
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f90f 	bl	8000e18 <d_unqualified_name>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b49      	cmp	r3, #73	; 0x49
 8000c06:	d115      	bne.n	8000c34 <d_name+0x16c>
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	6979      	ldr	r1, [r7, #20]
 8000c0c:	f002 fb38 	bl	8003280 <d_add_substitution>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <d_name+0x154>
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e00c      	b.n	8000c36 <d_name+0x16e>
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 fda1 	bl	8002764 <d_template_args>
 8000c22:	4603      	mov	r3, r0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f04f 0104 	mov.w	r1, #4
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	f7ff fb96 	bl	800035c <d_make_comp>
 8000c30:	4603      	mov	r3, r0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f107 071c 	add.w	r7, r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}

08000c40 <d_nested_name>:
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b4e      	cmp	r3, #78	; 0x4e
 8000c50:	d108      	bne.n	8000c64 <d_nested_name+0x24>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f103 0201 	add.w	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	e001      	b.n	8000c68 <d_nested_name+0x28>
 8000c64:	f04f 0301 	mov.w	r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <d_nested_name+0x32>
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e032      	b.n	8000cd8 <d_nested_name+0x98>
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 0201 	mov.w	r2, #1
 8000c7e:	f001 fa77 	bl	8002170 <d_cv_qualifiers>
 8000c82:	4603      	mov	r3, r0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <d_nested_name+0x52>
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e022      	b.n	8000cd8 <d_nested_name+0x98>
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f826 	bl	8000ce4 <d_prefix>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <d_nested_name+0x6c>
 8000ca6:	f04f 0300 	mov.w	r3, #0
 8000caa:	e015      	b.n	8000cd8 <d_nested_name+0x98>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b45      	cmp	r3, #69	; 0x45
 8000cb4:	d108      	bne.n	8000cc8 <d_nested_name+0x88>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f103 0201 	add.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	e001      	b.n	8000ccc <d_nested_name+0x8c>
 8000cc8:	f04f 0301 	mov.w	r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <d_nested_name+0x96>
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <d_nested_name+0x98>
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f107 0710 	add.w	r7, r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop

08000ce4 <d_prefix>:
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e000      	b.n	8000cf6 <d_prefix+0x12>
 8000cf4:	bf00      	nop
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	72fb      	strb	r3, [r7, #11]
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <d_prefix+0x26>
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e081      	b.n	8000e0e <d_prefix+0x12a>
 8000d0a:	f04f 0301 	mov.w	r3, #1
 8000d0e:	74fb      	strb	r3, [r7, #19]
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	2b2f      	cmp	r3, #47	; 0x2f
 8000d14:	d902      	bls.n	8000d1c <d_prefix+0x38>
 8000d16:	7afb      	ldrb	r3, [r7, #11]
 8000d18:	2b39      	cmp	r3, #57	; 0x39
 8000d1a:	d911      	bls.n	8000d40 <d_prefix+0x5c>
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	2b60      	cmp	r3, #96	; 0x60
 8000d20:	d902      	bls.n	8000d28 <d_prefix+0x44>
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	2b7a      	cmp	r3, #122	; 0x7a
 8000d26:	d90b      	bls.n	8000d40 <d_prefix+0x5c>
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	2b43      	cmp	r3, #67	; 0x43
 8000d2c:	d008      	beq.n	8000d40 <d_prefix+0x5c>
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	2b44      	cmp	r3, #68	; 0x44
 8000d32:	d005      	beq.n	8000d40 <d_prefix+0x5c>
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	2b55      	cmp	r3, #85	; 0x55
 8000d38:	d002      	beq.n	8000d40 <d_prefix+0x5c>
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	2b4c      	cmp	r3, #76	; 0x4c
 8000d3e:	d105      	bne.n	8000d4c <d_prefix+0x68>
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f869 	bl	8000e18 <d_unqualified_name>
 8000d46:	4603      	mov	r3, r0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e03e      	b.n	8000dca <d_prefix+0xe6>
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	2b53      	cmp	r3, #83	; 0x53
 8000d50:	d107      	bne.n	8000d62 <d_prefix+0x7e>
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f04f 0101 	mov.w	r1, #1
 8000d58:	f002 fabe 	bl	80032d8 <d_substitution>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e033      	b.n	8000dca <d_prefix+0xe6>
 8000d62:	7afb      	ldrb	r3, [r7, #11]
 8000d64:	2b49      	cmp	r3, #73	; 0x49
 8000d66:	d10e      	bne.n	8000d86 <d_prefix+0xa2>
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <d_prefix+0x90>
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e04c      	b.n	8000e0e <d_prefix+0x12a>
 8000d74:	f04f 0304 	mov.w	r3, #4
 8000d78:	74fb      	strb	r3, [r7, #19]
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f001 fcf2 	bl	8002764 <d_template_args>
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e021      	b.n	8000dca <d_prefix+0xe6>
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	2b54      	cmp	r3, #84	; 0x54
 8000d8a:	d105      	bne.n	8000d98 <d_prefix+0xb4>
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fcb5 	bl	80026fc <d_template_param>
 8000d92:	4603      	mov	r3, r0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e018      	b.n	8000dca <d_prefix+0xe6>
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	2b45      	cmp	r3, #69	; 0x45
 8000d9c:	d101      	bne.n	8000da2 <d_prefix+0xbe>
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	e035      	b.n	8000e0e <d_prefix+0x12a>
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	2b4d      	cmp	r3, #77	; 0x4d
 8000da6:	d10d      	bne.n	8000dc4 <d_prefix+0xe0>
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <d_prefix+0xd0>
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	e02c      	b.n	8000e0e <d_prefix+0x12a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f103 0201 	add.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	bf00      	nop
 8000dc2:	e797      	b.n	8000cf4 <d_prefix+0x10>
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e021      	b.n	8000e0e <d_prefix+0x12a>
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <d_prefix+0xf2>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e008      	b.n	8000de8 <d_prefix+0x104>
 8000dd6:	7cfb      	ldrb	r3, [r7, #19]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f7ff fabc 	bl	800035c <d_make_comp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	2b53      	cmp	r3, #83	; 0x53
 8000dec:	d082      	beq.n	8000cf4 <d_prefix+0x10>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b45      	cmp	r3, #69	; 0x45
 8000df6:	f43f af7d 	beq.w	8000cf4 <d_prefix+0x10>
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	6979      	ldr	r1, [r7, #20]
 8000dfe:	f002 fa3f 	bl	8003280 <d_add_substitution>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f af75 	bne.w	8000cf4 <d_prefix+0x10>
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f107 0718 	add.w	r7, r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <d_unqualified_name>:
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	75fb      	strb	r3, [r7, #23]
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e2c:	d907      	bls.n	8000e3e <d_unqualified_name+0x26>
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b39      	cmp	r3, #57	; 0x39
 8000e32:	d804      	bhi.n	8000e3e <d_unqualified_name+0x26>
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f86d 	bl	8000f14 <d_source_name>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	e065      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b60      	cmp	r3, #96	; 0x60
 8000e42:	d91c      	bls.n	8000e7e <d_unqualified_name+0x66>
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b7a      	cmp	r3, #122	; 0x7a
 8000e48:	d819      	bhi.n	8000e7e <d_unqualified_name+0x66>
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f956 	bl	80010fc <d_operator_name>
 8000e50:	4603      	mov	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00f      	beq.n	8000e7a <d_unqualified_name+0x62>
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e60:	d10b      	bne.n	8000e7a <d_unqualified_name+0x62>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	461a      	mov	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	18d3      	adds	r3, r2, r3
 8000e70:	f103 0307 	add.w	r3, r3, #7
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	e045      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	2b43      	cmp	r3, #67	; 0x43
 8000e82:	d002      	beq.n	8000e8a <d_unqualified_name+0x72>
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	2b44      	cmp	r3, #68	; 0x44
 8000e88:	d104      	bne.n	8000e94 <d_unqualified_name+0x7c>
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fd2e 	bl	80018ec <d_ctor_dtor_name>
 8000e90:	4603      	mov	r3, r0
 8000e92:	e03a      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b4c      	cmp	r3, #76	; 0x4c
 8000e98:	d11b      	bne.n	8000ed2 <d_unqualified_name+0xba>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f103 0201 	add.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f834 	bl	8000f14 <d_source_name>
 8000eac:	4603      	mov	r3, r0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <d_unqualified_name+0xa4>
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	e026      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f002 f86f 	bl	8002fa0 <d_discriminator>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <d_unqualified_name+0xb6>
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e01d      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	e01b      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	2b55      	cmp	r3, #85	; 0x55
 8000ed6:	d116      	bne.n	8000f06 <d_unqualified_name+0xee>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f103 0301 	add.w	r3, r3, #1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b6c      	cmp	r3, #108	; 0x6c
 8000ee4:	d002      	beq.n	8000eec <d_unqualified_name+0xd4>
 8000ee6:	2b74      	cmp	r3, #116	; 0x74
 8000ee8:	d005      	beq.n	8000ef6 <d_unqualified_name+0xde>
 8000eea:	e009      	b.n	8000f00 <d_unqualified_name+0xe8>
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f002 f87b 	bl	8002fe8 <d_lambda>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e009      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f002 f8f2 	bl	80030e0 <d_unnamed_type>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e004      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e001      	b.n	8000f0a <d_unqualified_name+0xf2>
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f107 0718 	add.w	r7, r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <d_source_name>:
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f817 	bl	8000f50 <d_number>
 8000f22:	4603      	mov	r3, r0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dc02      	bgt.n	8000f32 <d_source_name+0x1e>
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e009      	b.n	8000f46 <d_source_name+0x32>
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	f000 f871 	bl	800101c <d_identifier>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f107 0710 	add.w	r7, r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <d_number>:
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	74fb      	strb	r3, [r7, #19]
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	2b6e      	cmp	r3, #110	; 0x6e
 8000f6a:	d10c      	bne.n	8000f86 <d_number+0x36>
 8000f6c:	f04f 0301 	mov.w	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f103 0201 	add.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	74fb      	strb	r3, [r7, #19]
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	7cfb      	ldrb	r3, [r7, #19]
 8000f8e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f90:	d902      	bls.n	8000f98 <d_number+0x48>
 8000f92:	7cfb      	ldrb	r3, [r7, #19]
 8000f94:	2b39      	cmp	r3, #57	; 0x39
 8000f96:	d90d      	bls.n	8000fb4 <d_number+0x64>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <d_number+0x56>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1c3 0300 	rsb	r3, r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f107 071c 	add.w	r7, r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000fbc:	189b      	adds	r3, r3, r2
 8000fbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	7cfb      	ldrb	r3, [r7, #19]
 8000fc6:	18d3      	adds	r3, r2, r3
 8000fc8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f103 0201 	add.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	74fb      	strb	r3, [r7, #19]
 8000fe2:	e7d3      	b.n	8000f8c <d_number+0x3c>

08000fe4 <d_number_component>:
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f98d 	bl	800030c <d_make_empty>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d009      	beq.n	8001010 <d_number_component+0x2c>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f04f 023a 	mov.w	r2, #58	; 0x3a
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffa3 	bl	8000f50 <d_number>
 800100a:	4602      	mov	r2, r0
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f107 0710 	add.w	r7, r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <d_identifier>:
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	da02      	bge.n	8001042 <d_identifier+0x26>
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e056      	b.n	80010f0 <d_identifier+0xd4>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	18d2      	adds	r2, r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00a      	beq.n	8001070 <d_identifier+0x54>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b24      	cmp	r3, #36	; 0x24
 8001062:	d105      	bne.n	8001070 <d_identifier+0x54>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f103 0201 	add.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b09      	cmp	r3, #9
 8001074:	dd36      	ble.n	80010e4 <d_identifier+0xc8>
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f649 5180 	movw	r1, #40320	; 0x9d80
 800107c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8001080:	f04f 0208 	mov.w	r2, #8
 8001084:	f006 faae 	bl	80075e4 <memcmp>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d12a      	bne.n	80010e4 <d_identifier+0xc8>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f103 0308 	add.w	r3, r3, #8
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2e      	cmp	r3, #46	; 0x2e
 800109c:	d007      	beq.n	80010ae <d_identifier+0x92>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b5f      	cmp	r3, #95	; 0x5f
 80010a4:	d003      	beq.n	80010ae <d_identifier+0x92>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b24      	cmp	r3, #36	; 0x24
 80010ac:	d11a      	bne.n	80010e4 <d_identifier+0xc8>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f103 0301 	add.w	r3, r3, #1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b4e      	cmp	r3, #78	; 0x4e
 80010b8:	d114      	bne.n	80010e4 <d_identifier+0xc8>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f103 0316 	add.w	r3, r3, #22
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f649 518c 	movw	r1, #40332	; 0x9d8c
 80010d4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80010d8:	f04f 0215 	mov.w	r2, #21
 80010dc:	f7ff fa38 	bl	8000550 <d_make_name>
 80010e0:	4603      	mov	r3, r0
 80010e2:	e005      	b.n	80010f0 <d_identifier+0xd4>
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	f7ff fa31 	bl	8000550 <d_make_name>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f107 0710 	add.w	r7, r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop

080010fc <d_operator_name>:
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <d_operator_name+0x22>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	7813      	ldrb	r3, [r2, #0]
 8001114:	f102 0101 	add.w	r1, r2, #1
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	60d1      	str	r1, [r2, #12]
 800111c:	e001      	b.n	8001122 <d_operator_name+0x26>
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	75fb      	strb	r3, [r7, #23]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <d_operator_name+0x42>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	7813      	ldrb	r3, [r2, #0]
 8001134:	f102 0101 	add.w	r1, r2, #1
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	60d1      	str	r1, [r2, #12]
 800113c:	e001      	b.n	8001142 <d_operator_name+0x46>
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	75bb      	strb	r3, [r7, #22]
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	2b76      	cmp	r3, #118	; 0x76
 8001148:	d113      	bne.n	8001172 <d_operator_name+0x76>
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	2b2f      	cmp	r3, #47	; 0x2f
 800114e:	d910      	bls.n	8001172 <d_operator_name+0x76>
 8001150:	7dbb      	ldrb	r3, [r7, #22]
 8001152:	2b39      	cmp	r3, #57	; 0x39
 8001154:	d80d      	bhi.n	8001172 <d_operator_name+0x76>
 8001156:	7dbb      	ldrb	r3, [r7, #22]
 8001158:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fed9 	bl	8000f14 <d_source_name>
 8001162:	4603      	mov	r3, r0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4621      	mov	r1, r4
 8001168:	461a      	mov	r2, r3
 800116a:	f7ff fa47 	bl	80005fc <d_make_extended_operator>
 800116e:	4603      	mov	r3, r0
 8001170:	e065      	b.n	800123e <d_operator_name+0x142>
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b63      	cmp	r3, #99	; 0x63
 8001176:	d110      	bne.n	800119a <d_operator_name+0x9e>
 8001178:	7dbb      	ldrb	r3, [r7, #22]
 800117a:	2b76      	cmp	r3, #118	; 0x76
 800117c:	d10d      	bne.n	800119a <d_operator_name+0x9e>
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fc3a 	bl	80019f8 <d_type>
 8001184:	4603      	mov	r3, r0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800118c:	461a      	mov	r2, r3
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	f7ff f8e3 	bl	800035c <d_make_comp>
 8001196:	4603      	mov	r3, r0
 8001198:	e051      	b.n	800123e <d_operator_name+0x142>
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	f04f 0334 	mov.w	r3, #52	; 0x34
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	e000      	b.n	80011aa <d_operator_name+0xae>
 80011a8:	bf00      	nop
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	ea4f 0363 	mov.w	r3, r3, asr #1
 80011ba:	461a      	mov	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	ea4f 1203 	mov.w	r2, r3, lsl #4
 80011c8:	f649 7348 	movw	r3, #40776	; 0x9f48
 80011cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	7dfa      	ldrb	r2, [r7, #23]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d10d      	bne.n	80011fc <d_operator_name+0x100>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f103 0301 	add.w	r3, r3, #1
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	7dba      	ldrb	r2, [r7, #22]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d105      	bne.n	80011fc <d_operator_name+0x100>
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	f7ff f9e8 	bl	80005c8 <d_make_operator>
 80011f8:	4603      	mov	r3, r0
 80011fa:	e020      	b.n	800123e <d_operator_name+0x142>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7dfa      	ldrb	r2, [r7, #23]
 8001204:	429a      	cmp	r2, r3
 8001206:	d30d      	bcc.n	8001224 <d_operator_name+0x128>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	7dfa      	ldrb	r2, [r7, #23]
 8001210:	429a      	cmp	r2, r3
 8001212:	d10a      	bne.n	800122a <d_operator_name+0x12e>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f103 0301 	add.w	r3, r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	7dba      	ldrb	r2, [r7, #22]
 8001220:	429a      	cmp	r2, r3
 8001222:	d202      	bcs.n	800122a <d_operator_name+0x12e>
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	e003      	b.n	8001232 <d_operator_name+0x136>
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f103 0301 	add.w	r3, r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	429a      	cmp	r2, r3
 8001238:	d1b6      	bne.n	80011a8 <d_operator_name+0xac>
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}

08001248 <d_make_character>:
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff f85a 	bl	800030c <d_make_empty>
 8001258:	4603      	mov	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <d_make_character+0x28>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f04f 0239 	mov.w	r2, #57	; 0x39
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4618      	mov	r0, r3
 8001274:	f107 0710 	add.w	r7, r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <d_java_resource>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fe5d 	bl	8000f50 <d_number>
 8001296:	4603      	mov	r3, r0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dc02      	bgt.n	80012a6 <d_java_resource+0x2a>
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e0c2      	b.n	800142c <d_java_resource+0x1b0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <d_java_resource+0x50>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	2a5f      	cmp	r2, #95	; 0x5f
 80012b8:	bf0c      	ite	eq
 80012ba:	2200      	moveq	r2, #0
 80012bc:	2201      	movne	r2, #1
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f103 0101 	add.w	r1, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60d9      	str	r1, [r3, #12]
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d002      	beq.n	80012d2 <d_java_resource+0x56>
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e0ac      	b.n	800142c <d_java_resource+0x1b0>
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e092      	b.n	800140e <d_java_resource+0x192>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <d_java_resource+0x82>
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e096      	b.n	800142c <d_java_resource+0x1b0>
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b24      	cmp	r3, #36	; 0x24
 8001302:	d142      	bne.n	800138a <d_java_resource+0x10e>
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f103 0301 	add.w	r3, r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	f102 0201 	add.w	r2, r2, #1
 800131a:	613a      	str	r2, [r7, #16]
 800131c:	2b53      	cmp	r3, #83	; 0x53
 800131e:	d004      	beq.n	800132a <d_java_resource+0xae>
 8001320:	2b5f      	cmp	r3, #95	; 0x5f
 8001322:	d006      	beq.n	8001332 <d_java_resource+0xb6>
 8001324:	2b24      	cmp	r3, #36	; 0x24
 8001326:	d008      	beq.n	800133a <d_java_resource+0xbe>
 8001328:	e00b      	b.n	8001342 <d_java_resource+0xc6>
 800132a:	f04f 032f 	mov.w	r3, #47	; 0x2f
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e00a      	b.n	8001348 <d_java_resource+0xcc>
 8001332:	f04f 032e 	mov.w	r3, #46	; 0x2e
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e006      	b.n	8001348 <d_java_resource+0xcc>
 800133a:	f04f 0324 	mov.w	r3, #36	; 0x24
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e002      	b.n	8001348 <d_java_resource+0xcc>
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e071      	b.n	800142c <d_java_resource+0x1b0>
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff ff7b 	bl	8001248 <d_make_character>
 8001352:	4603      	mov	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	18d2      	adds	r2, r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d133      	bne.n	80013e4 <d_java_resource+0x168>
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e054      	b.n	800142c <d_java_resource+0x1b0>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f103 0301 	add.w	r3, r3, #1
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	429a      	cmp	r2, r3
 8001390:	da0b      	bge.n	80013aa <d_java_resource+0x12e>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	18d3      	adds	r3, r2, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <d_java_resource+0x12e>
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	18d3      	adds	r3, r2, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b24      	cmp	r3, #36	; 0x24
 80013a8:	d1eb      	bne.n	8001382 <d_java_resource+0x106>
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	f7ff f8ce 	bl	8000550 <d_make_name>
 80013b4:	4603      	mov	r3, r0
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	18d2      	adds	r2, r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <d_java_resource+0x168>
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	e023      	b.n	800142c <d_java_resource+0x1b0>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <d_java_resource+0x174>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e00e      	b.n	800140e <d_java_resource+0x192>
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f04f 0138 	mov.w	r1, #56	; 0x38
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f7fe ffaf 	bl	800035c <d_make_comp>
 80013fe:	4603      	mov	r3, r0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <d_java_resource+0x192>
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e00e      	b.n	800142c <d_java_resource+0x1b0>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f73f af69 	bgt.w	80012e8 <d_java_resource+0x6c>
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f04f 0137 	mov.w	r1, #55	; 0x37
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f7fe ff9b 	bl	800035c <d_make_comp>
 8001426:	4603      	mov	r3, r0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4618      	mov	r0, r3
 800142e:	f107 0720 	add.w	r7, r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop

08001438 <d_special_name>:
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f103 0214 	add.w	r2, r3, #20
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b54      	cmp	r3, #84	; 0x54
 8001454:	d108      	bne.n	8001468 <d_special_name+0x30>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f103 0201 	add.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	f04f 0301 	mov.w	r3, #1
 8001466:	e001      	b.n	800146c <d_special_name+0x34>
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8177 	beq.w	8001760 <d_special_name+0x328>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <d_special_name+0x54>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	7813      	ldrb	r3, [r2, #0]
 8001482:	f102 0101 	add.w	r1, r2, #1
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	60d1      	str	r1, [r2, #12]
 800148a:	e001      	b.n	8001490 <d_special_name+0x58>
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	f1a3 0343 	sub.w	r3, r3, #67	; 0x43
 8001494:	2b33      	cmp	r3, #51	; 0x33
 8001496:	f200 8160 	bhi.w	800175a <d_special_name+0x322>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <d_special_name+0x68>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080016b1 	.word	0x080016b1
 80014a4:	0800175b 	.word	0x0800175b
 80014a8:	0800175b 	.word	0x0800175b
 80014ac:	08001723 	.word	0x08001723
 80014b0:	0800175b 	.word	0x0800175b
 80014b4:	0800175b 	.word	0x0800175b
 80014b8:	080015c1 	.word	0x080015c1
 80014bc:	0800173f 	.word	0x0800173f
 80014c0:	0800175b 	.word	0x0800175b
 80014c4:	0800175b 	.word	0x0800175b
 80014c8:	0800175b 	.word	0x0800175b
 80014cc:	0800175b 	.word	0x0800175b
 80014d0:	0800175b 	.word	0x0800175b
 80014d4:	0800175b 	.word	0x0800175b
 80014d8:	0800175b 	.word	0x0800175b
 80014dc:	0800175b 	.word	0x0800175b
 80014e0:	080015dd 	.word	0x080015dd
 80014e4:	08001599 	.word	0x08001599
 80014e8:	0800175b 	.word	0x0800175b
 80014ec:	08001571 	.word	0x08001571
 80014f0:	0800175b 	.word	0x0800175b
 80014f4:	0800175b 	.word	0x0800175b
 80014f8:	0800175b 	.word	0x0800175b
 80014fc:	0800175b 	.word	0x0800175b
 8001500:	0800175b 	.word	0x0800175b
 8001504:	0800175b 	.word	0x0800175b
 8001508:	0800175b 	.word	0x0800175b
 800150c:	0800175b 	.word	0x0800175b
 8001510:	0800175b 	.word	0x0800175b
 8001514:	0800175b 	.word	0x0800175b
 8001518:	0800175b 	.word	0x0800175b
 800151c:	0800175b 	.word	0x0800175b
 8001520:	08001665 	.word	0x08001665
 8001524:	0800175b 	.word	0x0800175b
 8001528:	0800175b 	.word	0x0800175b
 800152c:	0800175b 	.word	0x0800175b
 8001530:	0800175b 	.word	0x0800175b
 8001534:	080015f9 	.word	0x080015f9
 8001538:	0800175b 	.word	0x0800175b
 800153c:	0800175b 	.word	0x0800175b
 8001540:	0800175b 	.word	0x0800175b
 8001544:	0800175b 	.word	0x0800175b
 8001548:	0800175b 	.word	0x0800175b
 800154c:	0800175b 	.word	0x0800175b
 8001550:	0800175b 	.word	0x0800175b
 8001554:	0800175b 	.word	0x0800175b
 8001558:	0800175b 	.word	0x0800175b
 800155c:	0800175b 	.word	0x0800175b
 8001560:	0800175b 	.word	0x0800175b
 8001564:	0800175b 	.word	0x0800175b
 8001568:	0800175b 	.word	0x0800175b
 800156c:	0800162f 	.word	0x0800162f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f1a3 0205 	sub.w	r2, r3, #5
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fa3b 	bl	80019f8 <d_type>
 8001582:	4603      	mov	r3, r0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f04f 0109 	mov.w	r1, #9
 800158a:	461a      	mov	r2, r3
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f7fe fee4 	bl	800035c <d_make_comp>
 8001594:	4603      	mov	r3, r0
 8001596:	e146      	b.n	8001826 <d_special_name+0x3ee>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f1a3 020a 	sub.w	r2, r3, #10
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fa27 	bl	80019f8 <d_type>
 80015aa:	4603      	mov	r3, r0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f04f 010a 	mov.w	r1, #10
 80015b2:	461a      	mov	r2, r3
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	f7fe fed0 	bl	800035c <d_make_comp>
 80015bc:	4603      	mov	r3, r0
 80015be:	e132      	b.n	8001826 <d_special_name+0x3ee>
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa19 	bl	80019f8 <d_type>
 80015c6:	4603      	mov	r3, r0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f04f 010c 	mov.w	r1, #12
 80015ce:	461a      	mov	r2, r3
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7fe fec2 	bl	800035c <d_make_comp>
 80015d8:	4603      	mov	r3, r0
 80015da:	e124      	b.n	8001826 <d_special_name+0x3ee>
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fa0b 	bl	80019f8 <d_type>
 80015e2:	4603      	mov	r3, r0
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f04f 010d 	mov.w	r1, #13
 80015ea:	461a      	mov	r2, r3
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f7fe feb4 	bl	800035c <d_make_comp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	e116      	b.n	8001826 <d_special_name+0x3ee>
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f04f 0168 	mov.w	r1, #104	; 0x68
 80015fe:	f000 f917 	bl	8001830 <d_call_offset>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <d_special_name+0x1d6>
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e10b      	b.n	8001826 <d_special_name+0x3ee>
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	f7ff f9e2 	bl	80009dc <d_encoding>
 8001618:	4603      	mov	r3, r0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f04f 010f 	mov.w	r1, #15
 8001620:	461a      	mov	r2, r3
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	f7fe fe99 	bl	800035c <d_make_comp>
 800162a:	4603      	mov	r3, r0
 800162c:	e0fb      	b.n	8001826 <d_special_name+0x3ee>
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f04f 0176 	mov.w	r1, #118	; 0x76
 8001634:	f000 f8fc 	bl	8001830 <d_call_offset>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <d_special_name+0x20c>
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e0f0      	b.n	8001826 <d_special_name+0x3ee>
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f7ff f9c7 	bl	80009dc <d_encoding>
 800164e:	4603      	mov	r3, r0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f04f 0110 	mov.w	r1, #16
 8001656:	461a      	mov	r2, r3
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	f7fe fe7e 	bl	800035c <d_make_comp>
 8001660:	4603      	mov	r3, r0
 8001662:	e0e0      	b.n	8001826 <d_special_name+0x3ee>
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	f000 f8e1 	bl	8001830 <d_call_offset>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <d_special_name+0x242>
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e0d5      	b.n	8001826 <d_special_name+0x3ee>
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	f000 f8d6 	bl	8001830 <d_call_offset>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <d_special_name+0x258>
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e0ca      	b.n	8001826 <d_special_name+0x3ee>
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f7ff f9a1 	bl	80009dc <d_encoding>
 800169a:	4603      	mov	r3, r0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f04f 0111 	mov.w	r1, #17
 80016a2:	461a      	mov	r2, r3
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f7fe fe58 	bl	800035c <d_make_comp>
 80016ac:	4603      	mov	r3, r0
 80016ae:	e0ba      	b.n	8001826 <d_special_name+0x3ee>
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f9a1 	bl	80019f8 <d_type>
 80016b6:	4603      	mov	r3, r0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fc48 	bl	8000f50 <d_number>
 80016c0:	4603      	mov	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da02      	bge.n	80016d0 <d_special_name+0x298>
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e0aa      	b.n	8001826 <d_special_name+0x3ee>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b5f      	cmp	r3, #95	; 0x5f
 80016d8:	d108      	bne.n	80016ec <d_special_name+0x2b4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f103 0201 	add.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e001      	b.n	80016f0 <d_special_name+0x2b8>
 80016ec:	f04f 0301 	mov.w	r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <d_special_name+0x2c2>
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e095      	b.n	8001826 <d_special_name+0x3ee>
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f97c 	bl	80019f8 <d_type>
 8001700:	4603      	mov	r3, r0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f103 0205 	add.w	r2, r3, #5
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f04f 010b 	mov.w	r1, #11
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f7fe fe1f 	bl	800035c <d_make_comp>
 800171e:	4603      	mov	r3, r0
 8001720:	e081      	b.n	8001826 <d_special_name+0x3ee>
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f968 	bl	80019f8 <d_type>
 8001728:	4603      	mov	r3, r0
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f04f 010e 	mov.w	r1, #14
 8001730:	461a      	mov	r2, r3
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	f7fe fe11 	bl	800035c <d_make_comp>
 800173a:	4603      	mov	r3, r0
 800173c:	e073      	b.n	8001826 <d_special_name+0x3ee>
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f95a 	bl	80019f8 <d_type>
 8001744:	4603      	mov	r3, r0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f04f 0112 	mov.w	r1, #18
 800174c:	461a      	mov	r2, r3
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f7fe fe03 	bl	800035c <d_make_comp>
 8001756:	4603      	mov	r3, r0
 8001758:	e065      	b.n	8001826 <d_special_name+0x3ee>
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e062      	b.n	8001826 <d_special_name+0x3ee>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b47      	cmp	r3, #71	; 0x47
 8001768:	d108      	bne.n	800177c <d_special_name+0x344>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f103 0201 	add.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	f04f 0301 	mov.w	r3, #1
 800177a:	e001      	b.n	8001780 <d_special_name+0x348>
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d04e      	beq.n	8001822 <d_special_name+0x3ea>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <d_special_name+0x366>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	7813      	ldrb	r3, [r2, #0]
 8001794:	f102 0101 	add.w	r1, r2, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	60d1      	str	r1, [r2, #12]
 800179c:	e001      	b.n	80017a2 <d_special_name+0x36a>
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	2b52      	cmp	r3, #82	; 0x52
 80017a4:	d017      	beq.n	80017d6 <d_special_name+0x39e>
 80017a6:	2b52      	cmp	r3, #82	; 0x52
 80017a8:	dc02      	bgt.n	80017b0 <d_special_name+0x378>
 80017aa:	2b41      	cmp	r3, #65	; 0x41
 80017ac:	d021      	beq.n	80017f2 <d_special_name+0x3ba>
 80017ae:	e035      	b.n	800181c <d_special_name+0x3e4>
 80017b0:	2b56      	cmp	r3, #86	; 0x56
 80017b2:	d002      	beq.n	80017ba <d_special_name+0x382>
 80017b4:	2b72      	cmp	r3, #114	; 0x72
 80017b6:	d02c      	beq.n	8001812 <d_special_name+0x3da>
 80017b8:	e030      	b.n	800181c <d_special_name+0x3e4>
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff f984 	bl	8000ac8 <d_name>
 80017c0:	4603      	mov	r3, r0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f04f 0113 	mov.w	r1, #19
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f7fe fdc5 	bl	800035c <d_make_comp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	e027      	b.n	8001826 <d_special_name+0x3ee>
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f976 	bl	8000ac8 <d_name>
 80017dc:	4603      	mov	r3, r0
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f04f 0114 	mov.w	r1, #20
 80017e4:	461a      	mov	r2, r3
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f7fe fdb7 	bl	800035c <d_make_comp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	e019      	b.n	8001826 <d_special_name+0x3ee>
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	f7ff f8f0 	bl	80009dc <d_encoding>
 80017fc:	4603      	mov	r3, r0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f04f 0115 	mov.w	r1, #21
 8001804:	461a      	mov	r2, r3
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f7fe fda7 	bl	800035c <d_make_comp>
 800180e:	4603      	mov	r3, r0
 8001810:	e009      	b.n	8001826 <d_special_name+0x3ee>
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fd32 	bl	800127c <d_java_resource>
 8001818:	4603      	mov	r3, r0
 800181a:	e004      	b.n	8001826 <d_special_name+0x3ee>
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e001      	b.n	8001826 <d_special_name+0x3ee>
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f107 0718 	add.w	r7, r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <d_call_offset>:
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10f      	bne.n	8001860 <d_call_offset+0x30>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <d_call_offset+0x2a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	7813      	ldrb	r3, [r2, #0]
 8001850:	f102 0101 	add.w	r1, r2, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60d1      	str	r1, [r2, #12]
 8001858:	e001      	b.n	800185e <d_call_offset+0x2e>
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b68      	cmp	r3, #104	; 0x68
 8001864:	d103      	bne.n	800186e <d_call_offset+0x3e>
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fb72 	bl	8000f50 <d_number>
 800186c:	e021      	b.n	80018b2 <d_call_offset+0x82>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b76      	cmp	r3, #118	; 0x76
 8001872:	d11b      	bne.n	80018ac <d_call_offset+0x7c>
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fb6b 	bl	8000f50 <d_number>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b5f      	cmp	r3, #95	; 0x5f
 8001882:	d108      	bne.n	8001896 <d_call_offset+0x66>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f103 0201 	add.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e001      	b.n	800189a <d_call_offset+0x6a>
 8001896:	f04f 0301 	mov.w	r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <d_call_offset+0x74>
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e01d      	b.n	80018e0 <d_call_offset+0xb0>
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fb53 	bl	8000f50 <d_number>
 80018aa:	e002      	b.n	80018b2 <d_call_offset+0x82>
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e016      	b.n	80018e0 <d_call_offset+0xb0>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b5f      	cmp	r3, #95	; 0x5f
 80018ba:	d108      	bne.n	80018ce <d_call_offset+0x9e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f103 0201 	add.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e001      	b.n	80018d2 <d_call_offset+0xa2>
 80018ce:	f04f 0301 	mov.w	r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <d_call_offset+0xac>
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e001      	b.n	80018e0 <d_call_offset+0xb0>
 80018dc:	f04f 0301 	mov.w	r3, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f107 0708 	add.w	r7, r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop

080018ec <d_ctor_dtor_name>:
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01a      	beq.n	8001932 <d_ctor_dtor_name+0x46>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <d_ctor_dtor_name+0x2c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	18d2      	adds	r2, r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
 8001916:	e00c      	b.n	8001932 <d_ctor_dtor_name+0x46>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b16      	cmp	r3, #22
 8001920:	d107      	bne.n	8001932 <d_ctor_dtor_name+0x46>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	18d2      	adds	r2, r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b43      	cmp	r3, #67	; 0x43
 800193a:	d002      	beq.n	8001942 <d_ctor_dtor_name+0x56>
 800193c:	2b44      	cmp	r3, #68	; 0x44
 800193e:	d02a      	beq.n	8001996 <d_ctor_dtor_name+0xaa>
 8001940:	e053      	b.n	80019ea <d_ctor_dtor_name+0xfe>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f103 0301 	add.w	r3, r3, #1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b32      	cmp	r3, #50	; 0x32
 800194e:	d007      	beq.n	8001960 <d_ctor_dtor_name+0x74>
 8001950:	2b33      	cmp	r3, #51	; 0x33
 8001952:	d009      	beq.n	8001968 <d_ctor_dtor_name+0x7c>
 8001954:	2b31      	cmp	r3, #49	; 0x31
 8001956:	d10b      	bne.n	8001970 <d_ctor_dtor_name+0x84>
 8001958:	f04f 0301 	mov.w	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e00a      	b.n	8001976 <d_ctor_dtor_name+0x8a>
 8001960:	f04f 0302 	mov.w	r3, #2
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e006      	b.n	8001976 <d_ctor_dtor_name+0x8a>
 8001968:	f04f 0303 	mov.w	r3, #3
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e002      	b.n	8001976 <d_ctor_dtor_name+0x8a>
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e03b      	b.n	80019ee <d_ctor_dtor_name+0x102>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f103 0202 	add.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4611      	mov	r1, r2
 800198c:	461a      	mov	r2, r3
 800198e:	f7fe fe6f 	bl	8000670 <d_make_ctor>
 8001992:	4603      	mov	r3, r0
 8001994:	e02b      	b.n	80019ee <d_ctor_dtor_name+0x102>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f103 0301 	add.w	r3, r3, #1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	d007      	beq.n	80019b4 <d_ctor_dtor_name+0xc8>
 80019a4:	2b32      	cmp	r3, #50	; 0x32
 80019a6:	d009      	beq.n	80019bc <d_ctor_dtor_name+0xd0>
 80019a8:	2b30      	cmp	r3, #48	; 0x30
 80019aa:	d10b      	bne.n	80019c4 <d_ctor_dtor_name+0xd8>
 80019ac:	f04f 0301 	mov.w	r3, #1
 80019b0:	73bb      	strb	r3, [r7, #14]
 80019b2:	e00a      	b.n	80019ca <d_ctor_dtor_name+0xde>
 80019b4:	f04f 0302 	mov.w	r3, #2
 80019b8:	73bb      	strb	r3, [r7, #14]
 80019ba:	e006      	b.n	80019ca <d_ctor_dtor_name+0xde>
 80019bc:	f04f 0303 	mov.w	r3, #3
 80019c0:	73bb      	strb	r3, [r7, #14]
 80019c2:	e002      	b.n	80019ca <d_ctor_dtor_name+0xde>
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e011      	b.n	80019ee <d_ctor_dtor_name+0x102>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f103 0202 	add.w	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	7bba      	ldrb	r2, [r7, #14]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	f7fe fe63 	bl	80006ac <d_make_dtor>
 80019e6:	4603      	mov	r3, r0
 80019e8:	e001      	b.n	80019ee <d_ctor_dtor_name+0x102>
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f107 0710 	add.w	r7, r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <d_type>:
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	74fb      	strb	r3, [r7, #19]
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	2b72      	cmp	r3, #114	; 0x72
 8001a0c:	d005      	beq.n	8001a1a <d_type+0x22>
 8001a0e:	7cfb      	ldrb	r3, [r7, #19]
 8001a10:	2b56      	cmp	r3, #86	; 0x56
 8001a12:	d002      	beq.n	8001a1a <d_type+0x22>
 8001a14:	7cfb      	ldrb	r3, [r7, #19]
 8001a16:	2b4b      	cmp	r3, #75	; 0x4b
 8001a18:	d126      	bne.n	8001a68 <d_type+0x70>
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f000 fba3 	bl	8002170 <d_cv_qualifiers>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <d_type+0x42>
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e386      	b.n	8002148 <d_type+0x750>
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffdc 	bl	80019f8 <d_type>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <d_type+0x66>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4619      	mov	r1, r3
 8001a54:	f001 fc14 	bl	8003280 <d_add_substitution>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <d_type+0x6c>
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e371      	b.n	8002148 <d_type+0x750>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	e36f      	b.n	8002148 <d_type+0x750>
 8001a68:	f04f 0301 	mov.w	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8001a74:	2b4a      	cmp	r3, #74	; 0x4a
 8001a76:	f200 8352 	bhi.w	800211e <d_type+0x726>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <d_type+0x88>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001c33 	.word	0x08001c33
 8001a84:	08001c33 	.word	0x08001c33
 8001a88:	08001c33 	.word	0x08001c33
 8001a8c:	08001c33 	.word	0x08001c33
 8001a90:	08001c33 	.word	0x08001c33
 8001a94:	08001c33 	.word	0x08001c33
 8001a98:	08001c33 	.word	0x08001c33
 8001a9c:	08001c33 	.word	0x08001c33
 8001aa0:	08001c33 	.word	0x08001c33
 8001aa4:	08001c33 	.word	0x08001c33
 8001aa8:	0800211f 	.word	0x0800211f
 8001aac:	0800211f 	.word	0x0800211f
 8001ab0:	0800211f 	.word	0x0800211f
 8001ab4:	0800211f 	.word	0x0800211f
 8001ab8:	0800211f 	.word	0x0800211f
 8001abc:	0800211f 	.word	0x0800211f
 8001ac0:	0800211f 	.word	0x0800211f
 8001ac4:	08001c3f 	.word	0x08001c3f
 8001ac8:	0800211f 	.word	0x0800211f
 8001acc:	08001da5 	.word	0x08001da5
 8001ad0:	08001e29 	.word	0x08001e29
 8001ad4:	0800211f 	.word	0x0800211f
 8001ad8:	08001c27 	.word	0x08001c27
 8001adc:	08001dcf 	.word	0x08001dcf
 8001ae0:	0800211f 	.word	0x0800211f
 8001ae4:	0800211f 	.word	0x0800211f
 8001ae8:	0800211f 	.word	0x0800211f
 8001aec:	0800211f 	.word	0x0800211f
 8001af0:	0800211f 	.word	0x0800211f
 8001af4:	08001c4b 	.word	0x08001c4b
 8001af8:	08001c33 	.word	0x08001c33
 8001afc:	08001d27 	.word	0x08001d27
 8001b00:	08001d51 	.word	0x08001d51
 8001b04:	0800211f 	.word	0x0800211f
 8001b08:	08001d7b 	.word	0x08001d7b
 8001b0c:	08001c9f 	.word	0x08001c9f
 8001b10:	08001c57 	.word	0x08001c57
 8001b14:	08001df9 	.word	0x08001df9
 8001b18:	0800211f 	.word	0x0800211f
 8001b1c:	0800211f 	.word	0x0800211f
 8001b20:	0800211f 	.word	0x0800211f
 8001b24:	0800211f 	.word	0x0800211f
 8001b28:	08001c33 	.word	0x08001c33
 8001b2c:	0800211f 	.word	0x0800211f
 8001b30:	0800211f 	.word	0x0800211f
 8001b34:	0800211f 	.word	0x0800211f
 8001b38:	0800211f 	.word	0x0800211f
 8001b3c:	0800211f 	.word	0x0800211f
 8001b40:	0800211f 	.word	0x0800211f
 8001b44:	08001bad 	.word	0x08001bad
 8001b48:	08001bad 	.word	0x08001bad
 8001b4c:	08001bad 	.word	0x08001bad
 8001b50:	08001bad 	.word	0x08001bad
 8001b54:	08001bad 	.word	0x08001bad
 8001b58:	08001bad 	.word	0x08001bad
 8001b5c:	08001bad 	.word	0x08001bad
 8001b60:	08001bad 	.word	0x08001bad
 8001b64:	08001bad 	.word	0x08001bad
 8001b68:	08001bad 	.word	0x08001bad
 8001b6c:	0800211f 	.word	0x0800211f
 8001b70:	08001bad 	.word	0x08001bad
 8001b74:	08001bad 	.word	0x08001bad
 8001b78:	08001bad 	.word	0x08001bad
 8001b7c:	08001bad 	.word	0x08001bad
 8001b80:	0800211f 	.word	0x0800211f
 8001b84:	0800211f 	.word	0x0800211f
 8001b88:	0800211f 	.word	0x0800211f
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001bad 	.word	0x08001bad
 8001b94:	08001bfd 	.word	0x08001bfd
 8001b98:	08001bad 	.word	0x08001bad
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bad 	.word	0x08001bad
 8001ba4:	08001bad 	.word	0x08001bad
 8001ba8:	08001bad 	.word	0x08001bad
 8001bac:	7cfa      	ldrb	r2, [r7, #19]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bb4:	189b      	adds	r3, r3, r2
 8001bb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bba:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 8001bbe:	f1a2 0204 	sub.w	r2, r2, #4
 8001bc2:	f649 23e8 	movw	r3, #39656	; 0x9ae8
 8001bc6:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001bca:	18d3      	adds	r3, r2, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe fcda 	bl	8000588 <d_make_builtin_type>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	18d2      	adds	r2, r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f103 0201 	add.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	e296      	b.n	800212a <d_type+0x732>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f103 0201 	add.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff f983 	bl	8000f14 <d_source_name>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f04f 0124 	mov.w	r1, #36	; 0x24
 8001c16:	461a      	mov	r2, r3
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	f7fe fb9e 	bl	800035c <d_make_comp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	e281      	b.n	800212a <d_type+0x732>
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fb16 	bl	8002258 <d_function_type>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	e27b      	b.n	800212a <d_type+0x732>
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fbf6 	bl	8002424 <d_class_enum_type>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	e275      	b.n	800212a <d_type+0x732>
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fbfe 	bl	8002440 <d_array_type>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	e26f      	b.n	800212a <d_type+0x732>
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fcc0 	bl	80025d0 <d_pointer_to_member_type>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	e269      	b.n	800212a <d_type+0x732>
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fd50 	bl	80026fc <d_template_param>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b49      	cmp	r3, #73	; 0x49
 8001c68:	f040 825c 	bne.w	8002124 <d_type+0x72c>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f001 fb05 	bl	8003280 <d_add_substitution>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <d_type+0x28a>
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e262      	b.n	8002148 <d_type+0x750>
 8001c82:	68bc      	ldr	r4, [r7, #8]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fd6d 	bl	8002764 <d_template_args>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f04f 0104 	mov.w	r1, #4
 8001c92:	4622      	mov	r2, r4
 8001c94:	f7fe fb62 	bl	800035c <d_make_comp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e242      	b.n	8002124 <d_type+0x72c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	74bb      	strb	r3, [r7, #18]
 8001ca6:	7cbb      	ldrb	r3, [r7, #18]
 8001ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8001caa:	d902      	bls.n	8001cb2 <d_type+0x2ba>
 8001cac:	7cbb      	ldrb	r3, [r7, #18]
 8001cae:	2b39      	cmp	r3, #57	; 0x39
 8001cb0:	d908      	bls.n	8001cc4 <d_type+0x2cc>
 8001cb2:	7cbb      	ldrb	r3, [r7, #18]
 8001cb4:	2b5f      	cmp	r3, #95	; 0x5f
 8001cb6:	d005      	beq.n	8001cc4 <d_type+0x2cc>
 8001cb8:	7cbb      	ldrb	r3, [r7, #18]
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d920      	bls.n	8001d00 <d_type+0x308>
 8001cbe:	7cbb      	ldrb	r3, [r7, #18]
 8001cc0:	2b5a      	cmp	r3, #90	; 0x5a
 8001cc2:	d81d      	bhi.n	8001d00 <d_type+0x308>
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	f001 fb05 	bl	80032d8 <d_substitution>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b49      	cmp	r3, #73	; 0x49
 8001cda:	d10d      	bne.n	8001cf8 <d_type+0x300>
 8001cdc:	68bc      	ldr	r4, [r7, #8]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fd40 	bl	8002764 <d_template_args>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f04f 0104 	mov.w	r1, #4
 8001cec:	4622      	mov	r2, r4
 8001cee:	f7fe fb35 	bl	800035c <d_make_comp>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	e015      	b.n	8001d24 <d_type+0x32c>
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e011      	b.n	8001d24 <d_type+0x32c>
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb8f 	bl	8002424 <d_class_enum_type>
 8001d06:	4603      	mov	r3, r0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 820b 	beq.w	8002128 <d_type+0x730>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b16      	cmp	r3, #22
 8001d18:	f040 8206 	bne.w	8002128 <d_type+0x730>
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e201      	b.n	8002128 <d_type+0x730>
 8001d24:	e200      	b.n	8002128 <d_type+0x730>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f103 0201 	add.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fe60 	bl	80019f8 <d_type>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f04f 0120 	mov.w	r1, #32
 8001d40:	461a      	mov	r2, r3
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f7fe fb09 	bl	800035c <d_make_comp>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	e1ec      	b.n	800212a <d_type+0x732>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f103 0201 	add.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe4b 	bl	80019f8 <d_type>
 8001d62:	4603      	mov	r3, r0
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f04f 011e 	mov.w	r1, #30
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	f7fe faf4 	bl	800035c <d_make_comp>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	e1d7      	b.n	800212a <d_type+0x732>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f103 0201 	add.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fe36 	bl	80019f8 <d_type>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f04f 011f 	mov.w	r1, #31
 8001d94:	461a      	mov	r2, r3
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	f7fe fadf 	bl	800035c <d_make_comp>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	e1c2      	b.n	800212a <d_type+0x732>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f103 0201 	add.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fe21 	bl	80019f8 <d_type>
 8001db6:	4603      	mov	r3, r0
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f04f 0121 	mov.w	r1, #33	; 0x21
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f7fe faca 	bl	800035c <d_make_comp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	e1ad      	b.n	800212a <d_type+0x732>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f103 0201 	add.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fe0c 	bl	80019f8 <d_type>
 8001de0:	4603      	mov	r3, r0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f04f 0122 	mov.w	r1, #34	; 0x22
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f7fe fab5 	bl	800035c <d_make_comp>
 8001df2:	4603      	mov	r3, r0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	e198      	b.n	800212a <d_type+0x732>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f103 0201 	add.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff f885 	bl	8000f14 <d_source_name>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fdf2 	bl	80019f8 <d_type>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f04f 011d 	mov.w	r1, #29
 8001e1e:	f7fe fa9d 	bl	800035c <d_make_comp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e180      	b.n	800212a <d_type+0x732>
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f103 0201 	add.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <d_type+0x45c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	7813      	ldrb	r3, [r2, #0]
 8001e4a:	f102 0101 	add.w	r1, r2, #1
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60d1      	str	r1, [r2, #12]
 8001e52:	e001      	b.n	8001e58 <d_type+0x460>
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	74fb      	strb	r3, [r7, #19]
 8001e5a:	7cfb      	ldrb	r3, [r7, #19]
 8001e5c:	f1a3 0346 	sub.w	r3, r3, #70	; 0x46
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	f200 8157 	bhi.w	8002114 <d_type+0x71c>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <d_type+0x474>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08002057 	.word	0x08002057
 8001e70:	08002115 	.word	0x08002115
 8001e74:	08002115 	.word	0x08002115
 8001e78:	08002115 	.word	0x08002115
 8001e7c:	08002115 	.word	0x08002115
 8001e80:	08002115 	.word	0x08002115
 8001e84:	08002115 	.word	0x08002115
 8001e88:	08002115 	.word	0x08002115
 8001e8c:	08002115 	.word	0x08002115
 8001e90:	08002115 	.word	0x08002115
 8001e94:	08002115 	.word	0x08002115
 8001e98:	08002115 	.word	0x08002115
 8001e9c:	08002115 	.word	0x08002115
 8001ea0:	08002115 	.word	0x08002115
 8001ea4:	08001f31 	.word	0x08001f31
 8001ea8:	08002115 	.word	0x08002115
 8001eac:	08002115 	.word	0x08002115
 8001eb0:	08002115 	.word	0x08002115
 8001eb4:	08002115 	.word	0x08002115
 8001eb8:	08002115 	.word	0x08002115
 8001ebc:	08002115 	.word	0x08002115
 8001ec0:	08002115 	.word	0x08002115
 8001ec4:	08002115 	.word	0x08002115
 8001ec8:	08002115 	.word	0x08002115
 8001ecc:	08002115 	.word	0x08002115
 8001ed0:	08002115 	.word	0x08002115
 8001ed4:	08002115 	.word	0x08002115
 8001ed8:	08002115 	.word	0x08002115
 8001edc:	08002115 	.word	0x08002115
 8001ee0:	08002115 	.word	0x08002115
 8001ee4:	08001fc1 	.word	0x08001fc1
 8001ee8:	08001fdf 	.word	0x08001fdf
 8001eec:	08001fa3 	.word	0x08001fa3
 8001ef0:	08002115 	.word	0x08002115
 8001ef4:	08001ffd 	.word	0x08001ffd
 8001ef8:	08002039 	.word	0x08002039
 8001efc:	08002115 	.word	0x08002115
 8001f00:	08002115 	.word	0x08002115
 8001f04:	08002115 	.word	0x08002115
 8001f08:	08002115 	.word	0x08002115
 8001f0c:	080020f7 	.word	0x080020f7
 8001f10:	08002115 	.word	0x08002115
 8001f14:	08001f85 	.word	0x08001f85
 8001f18:	08002115 	.word	0x08002115
 8001f1c:	08002115 	.word	0x08002115
 8001f20:	0800201b 	.word	0x0800201b
 8001f24:	08001f31 	.word	0x08001f31
 8001f28:	08002115 	.word	0x08002115
 8001f2c:	080020eb 	.word	0x080020eb
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fd23 	bl	800297c <d_expression>
 8001f36:	4603      	mov	r3, r0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f04f 013b 	mov.w	r1, #59	; 0x3b
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f7fe fa0a 	bl	800035c <d_make_comp>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80e3 	beq.w	800211a <d_type+0x722>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00e      	beq.n	8001f7c <d_type+0x584>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	2a45      	cmp	r2, #69	; 0x45
 8001f66:	bf0c      	ite	eq
 8001f68:	2200      	moveq	r2, #0
 8001f6a:	2201      	movne	r2, #1
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f103 0101 	add.w	r1, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60d9      	str	r1, [r3, #12]
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	f000 80cf 	beq.w	800211a <d_type+0x722>
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	e0ca      	b.n	800211a <d_type+0x722>
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fd37 	bl	80019f8 <d_type>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f04f 0141 	mov.w	r1, #65	; 0x41
 8001f92:	461a      	mov	r2, r3
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	f7fe f9e0 	bl	800035c <d_make_comp>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	e0bc      	b.n	800211c <d_type+0x724>
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	496b      	ldr	r1, [pc, #428]	; (8002154 <d_type+0x75c>)
 8001fa6:	f7fe faef 	bl	8000588 <d_make_builtin_type>
 8001faa:	4603      	mov	r3, r0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	18d2      	adds	r2, r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	e0ad      	b.n	800211c <d_type+0x724>
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4965      	ldr	r1, [pc, #404]	; (8002158 <d_type+0x760>)
 8001fc4:	f7fe fae0 	bl	8000588 <d_make_builtin_type>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e09e      	b.n	800211c <d_type+0x724>
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	495e      	ldr	r1, [pc, #376]	; (800215c <d_type+0x764>)
 8001fe2:	f7fe fad1 	bl	8000588 <d_make_builtin_type>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	18d2      	adds	r2, r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffa:	e08f      	b.n	800211c <d_type+0x724>
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4958      	ldr	r1, [pc, #352]	; (8002160 <d_type+0x768>)
 8002000:	f7fe fac2 	bl	8000588 <d_make_builtin_type>
 8002004:	4603      	mov	r3, r0
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	18d2      	adds	r2, r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
 8002018:	e080      	b.n	800211c <d_type+0x724>
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4951      	ldr	r1, [pc, #324]	; (8002164 <d_type+0x76c>)
 800201e:	f7fe fab3 	bl	8000588 <d_make_builtin_type>
 8002022:	4603      	mov	r3, r0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	18d2      	adds	r2, r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
 8002036:	e071      	b.n	800211c <d_type+0x724>
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	494b      	ldr	r1, [pc, #300]	; (8002168 <d_type+0x770>)
 800203c:	f7fe faa4 	bl	8000588 <d_make_builtin_type>
 8002040:	4603      	mov	r3, r0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	18d2      	adds	r2, r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	e062      	b.n	800211c <d_type+0x724>
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe f958 	bl	800030c <d_make_empty>
 800205c:	4603      	mov	r3, r0
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f04f 0228 	mov.w	r2, #40	; 0x28
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68d2      	ldr	r2, [r2, #12]
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	2a2f      	cmp	r2, #47	; 0x2f
 8002072:	d907      	bls.n	8002084 <d_type+0x68c>
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	2a39      	cmp	r2, #57	; 0x39
 800207c:	d802      	bhi.n	8002084 <d_type+0x68c>
 800207e:	f04f 0201 	mov.w	r2, #1
 8002082:	e001      	b.n	8002088 <d_type+0x690>
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	b292      	uxth	r2, r2
 800208a:	811a      	strh	r2, [r3, #8]
 800208c:	891b      	ldrh	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <d_type+0x6a0>
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe ff5c 	bl	8000f50 <d_number>
 8002098:	68bc      	ldr	r4, [r7, #8]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fcac 	bl	80019f8 <d_type>
 80020a0:	4603      	mov	r3, r0
 80020a2:	6063      	str	r3, [r4, #4]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <d_type+0x6ba>
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e04a      	b.n	8002148 <d_type+0x750>
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe ff4c 	bl	8000f50 <d_number>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <d_type+0x6da>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	7813      	ldrb	r3, [r2, #0]
 80020c8:	f102 0101 	add.w	r1, r2, #1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	60d1      	str	r1, [r2, #12]
 80020d0:	e001      	b.n	80020d6 <d_type+0x6de>
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	74fb      	strb	r3, [r7, #19]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	7cfa      	ldrb	r2, [r7, #19]
 80020dc:	2a73      	cmp	r2, #115	; 0x73
 80020de:	bf14      	ite	ne
 80020e0:	2200      	movne	r2, #0
 80020e2:	2201      	moveq	r2, #1
 80020e4:	b292      	uxth	r2, r2
 80020e6:	815a      	strh	r2, [r3, #10]
 80020e8:	e018      	b.n	800211c <d_type+0x724>
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa28 	bl	8002540 <d_vector_type>
 80020f0:	4603      	mov	r3, r0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	e012      	b.n	800211c <d_type+0x724>
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	491c      	ldr	r1, [pc, #112]	; (800216c <d_type+0x774>)
 80020fa:	f7fe fa45 	bl	8000588 <d_make_builtin_type>
 80020fe:	4603      	mov	r3, r0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	18d2      	adds	r2, r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	e003      	b.n	800211c <d_type+0x724>
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e016      	b.n	8002148 <d_type+0x750>
 800211a:	bf00      	nop
 800211c:	e005      	b.n	800212a <d_type+0x732>
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e011      	b.n	8002148 <d_type+0x750>
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <d_type+0x732>
 8002128:	bf00      	nop
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <d_type+0x74e>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4619      	mov	r1, r3
 8002136:	f001 f8a3 	bl	8003280 <d_add_substitution>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <d_type+0x74e>
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e000      	b.n	8002148 <d_type+0x750>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f107 071c 	add.w	r7, r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	bf00      	nop
 8002154:	08019cf0 	.word	0x08019cf0
 8002158:	08019d04 	.word	0x08019d04
 800215c:	08019d18 	.word	0x08019d18
 8002160:	08019d2c 	.word	0x08019d2c
 8002164:	08019d40 	.word	0x08019d40
 8002168:	08019d54 	.word	0x08019d54
 800216c:	08019d68 	.word	0x08019d68

08002170 <d_cv_qualifiers>:
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	75fb      	strb	r3, [r7, #23]
 8002184:	e059      	b.n	800223a <d_cv_qualifiers+0xca>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f103 0201 	add.w	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b72      	cmp	r3, #114	; 0x72
 8002196:	d110      	bne.n	80021ba <d_cv_qualifiers+0x4a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <d_cv_qualifiers+0x34>
 800219e:	f04f 031a 	mov.w	r3, #26
 80021a2:	e001      	b.n	80021a8 <d_cv_qualifiers+0x38>
 80021a4:	f04f 0317 	mov.w	r3, #23
 80021a8:	75bb      	strb	r3, [r7, #22]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f103 0309 	add.w	r3, r3, #9
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
 80021b8:	e023      	b.n	8002202 <d_cv_qualifiers+0x92>
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b56      	cmp	r3, #86	; 0x56
 80021be:	d110      	bne.n	80021e2 <d_cv_qualifiers+0x72>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <d_cv_qualifiers+0x5c>
 80021c6:	f04f 031b 	mov.w	r3, #27
 80021ca:	e001      	b.n	80021d0 <d_cv_qualifiers+0x60>
 80021cc:	f04f 0318 	mov.w	r3, #24
 80021d0:	75bb      	strb	r3, [r7, #22]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f103 0309 	add.w	r3, r3, #9
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e00f      	b.n	8002202 <d_cv_qualifiers+0x92>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <d_cv_qualifiers+0x7e>
 80021e8:	f04f 031c 	mov.w	r3, #28
 80021ec:	e001      	b.n	80021f2 <d_cv_qualifiers+0x82>
 80021ee:	f04f 0319 	mov.w	r3, #25
 80021f2:	75bb      	strb	r3, [r7, #22]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f103 0306 	add.w	r3, r3, #6
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	f7fe f8a4 	bl	800035c <d_make_comp>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <d_cv_qualifiers+0xb8>
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e012      	b.n	800224e <d_cv_qualifiers+0xde>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f103 0304 	add.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	75fb      	strb	r3, [r7, #23]
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b72      	cmp	r3, #114	; 0x72
 800223e:	d0a2      	beq.n	8002186 <d_cv_qualifiers+0x16>
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b56      	cmp	r3, #86	; 0x56
 8002244:	d09f      	beq.n	8002186 <d_cv_qualifiers+0x16>
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b4b      	cmp	r3, #75	; 0x4b
 800224a:	d09c      	beq.n	8002186 <d_cv_qualifiers+0x16>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f107 0718 	add.w	r7, r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <d_function_type>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b46      	cmp	r3, #70	; 0x46
 8002268:	d108      	bne.n	800227c <d_function_type+0x24>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f103 0201 	add.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e001      	b.n	8002280 <d_function_type+0x28>
 800227c:	f04f 0301 	mov.w	r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <d_function_type+0x32>
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e027      	b.n	80022da <d_function_type+0x82>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b59      	cmp	r3, #89	; 0x59
 8002292:	d105      	bne.n	80022a0 <d_function_type+0x48>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f103 0201 	add.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f04f 0101 	mov.w	r1, #1
 80022a6:	f000 f87f 	bl	80023a8 <d_bare_function_type>
 80022aa:	4603      	mov	r3, r0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b45      	cmp	r3, #69	; 0x45
 80022b6:	d108      	bne.n	80022ca <d_function_type+0x72>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f103 0201 	add.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e001      	b.n	80022ce <d_function_type+0x76>
 80022ca:	f04f 0301 	mov.w	r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <d_function_type+0x80>
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e000      	b.n	80022da <d_function_type+0x82>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	f107 0710 	add.w	r7, r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <d_parmlist>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	74fb      	strb	r3, [r7, #19]
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <d_parmlist+0x74>
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b45      	cmp	r3, #69	; 0x45
 800230a:	d025      	beq.n	8002358 <d_parmlist+0x74>
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b2e      	cmp	r3, #46	; 0x2e
 8002310:	d022      	beq.n	8002358 <d_parmlist+0x74>
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fb70 	bl	80019f8 <d_type>
 8002318:	4603      	mov	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <d_parmlist+0x44>
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e03a      	b.n	800239e <d_parmlist+0xba>
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f04f 012a 	mov.w	r1, #42	; 0x2a
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	f7fe f812 	bl	800035c <d_make_comp>
 8002338:	4602      	mov	r2, r0
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <d_parmlist+0x68>
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e028      	b.n	800239e <d_parmlist+0xba>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f103 0308 	add.w	r3, r3, #8
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e7cf      	b.n	80022f8 <d_parmlist+0x14>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <d_parmlist+0x80>
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e01c      	b.n	800239e <d_parmlist+0xba>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d117      	bne.n	800239c <d_parmlist+0xb8>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b23      	cmp	r3, #35	; 0x23
 8002374:	d112      	bne.n	800239c <d_parmlist+0xb8>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	7c1b      	ldrb	r3, [r3, #16]
 800237e:	2b09      	cmp	r3, #9
 8002380:	d10c      	bne.n	800239c <d_parmlist+0xb8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f107 0718 	add.w	r7, r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <d_bare_function_type>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	74fb      	strb	r3, [r7, #19]
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b4a      	cmp	r3, #74	; 0x4a
 80023be:	d108      	bne.n	80023d2 <d_bare_function_type+0x2a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f103 0201 	add.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	f04f 0301 	mov.w	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <d_bare_function_type+0x46>
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fb0d 	bl	80019f8 <d_type>
 80023de:	4603      	mov	r3, r0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <d_bare_function_type+0x4c>
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e015      	b.n	800241a <d_bare_function_type+0x72>
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff75 	bl	80022e4 <d_parmlist>
 80023fa:	4603      	mov	r3, r0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <d_bare_function_type+0x62>
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e007      	b.n	800241a <d_bare_function_type+0x72>
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f04f 0125 	mov.w	r1, #37	; 0x25
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f7fd ffa2 	bl	800035c <d_make_comp>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	f107 0718 	add.w	r7, r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <d_class_enum_type>:
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fe fb4b 	bl	8000ac8 <d_name>
 8002432:	4603      	mov	r3, r0
 8002434:	4618      	mov	r0, r3
 8002436:	f107 0708 	add.w	r7, r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop

08002440 <d_array_type>:
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b41      	cmp	r3, #65	; 0x41
 8002450:	d108      	bne.n	8002464 <d_array_type+0x24>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f103 0201 	add.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e001      	b.n	8002468 <d_array_type+0x28>
 8002464:	f04f 0301 	mov.w	r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <d_array_type+0x32>
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e061      	b.n	8002536 <d_array_type+0xf6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	74fb      	strb	r3, [r7, #19]
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	2b5f      	cmp	r3, #95	; 0x5f
 800247e:	d103      	bne.n	8002488 <d_array_type+0x48>
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e036      	b.n	80024f6 <d_array_type+0xb6>
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b2f      	cmp	r3, #47	; 0x2f
 800248c:	d927      	bls.n	80024de <d_array_type+0x9e>
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b39      	cmp	r3, #57	; 0x39
 8002492:	d824      	bhi.n	80024de <d_array_type+0x9e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f103 0201 	add.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	74fb      	strb	r3, [r7, #19]
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b2f      	cmp	r3, #47	; 0x2f
 80024b2:	d902      	bls.n	80024ba <d_array_type+0x7a>
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	2b39      	cmp	r3, #57	; 0x39
 80024b8:	d9ef      	bls.n	800249a <d_array_type+0x5a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f7fe f841 	bl	8000550 <d_make_name>
 80024ce:	4603      	mov	r3, r0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10d      	bne.n	80024f4 <d_array_type+0xb4>
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e02b      	b.n	8002536 <d_array_type+0xf6>
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa4c 	bl	800297c <d_expression>
 80024e4:	4603      	mov	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <d_array_type+0xb6>
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e020      	b.n	8002536 <d_array_type+0xf6>
 80024f4:	bf00      	nop
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b5f      	cmp	r3, #95	; 0x5f
 80024fe:	d108      	bne.n	8002512 <d_array_type+0xd2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f103 0201 	add.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e001      	b.n	8002516 <d_array_type+0xd6>
 8002512:	f04f 0301 	mov.w	r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <d_array_type+0xe0>
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e00a      	b.n	8002536 <d_array_type+0xf6>
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fa69 	bl	80019f8 <d_type>
 8002526:	4603      	mov	r3, r0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f04f 0126 	mov.w	r1, #38	; 0x26
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	f7fd ff14 	bl	800035c <d_make_comp>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f107 0718 	add.w	r7, r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <d_vector_type>:
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	72fb      	strb	r3, [r7, #11]
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	2b5f      	cmp	r3, #95	; 0x5f
 8002554:	d10b      	bne.n	800256e <d_vector_type+0x2e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f103 0201 	add.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa0a 	bl	800297c <d_expression>
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e004      	b.n	8002578 <d_vector_type+0x38>
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fd38 	bl	8000fe4 <d_number_component>
 8002574:	4603      	mov	r3, r0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <d_vector_type+0x44>
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e01f      	b.n	80025c4 <d_vector_type+0x84>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b5f      	cmp	r3, #95	; 0x5f
 800258c:	d108      	bne.n	80025a0 <d_vector_type+0x60>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f103 0201 	add.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e001      	b.n	80025a4 <d_vector_type+0x64>
 80025a0:	f04f 0301 	mov.w	r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <d_vector_type+0x6e>
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e00a      	b.n	80025c4 <d_vector_type+0x84>
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fa22 	bl	80019f8 <d_type>
 80025b4:	4603      	mov	r3, r0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f04f 0129 	mov.w	r1, #41	; 0x29
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f7fd fecd 	bl	800035c <d_make_comp>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f107 0710 	add.w	r7, r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop

080025d0 <d_pointer_to_member_type>:
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b4d      	cmp	r3, #77	; 0x4d
 80025e0:	d108      	bne.n	80025f4 <d_pointer_to_member_type+0x24>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f103 0201 	add.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e001      	b.n	80025f8 <d_pointer_to_member_type+0x28>
 80025f4:	f04f 0301 	mov.w	r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <d_pointer_to_member_type+0x32>
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e03e      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f9f8 	bl	80019f8 <d_type>
 8002608:	4603      	mov	r3, r0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4619      	mov	r1, r3
 8002614:	f04f 0201 	mov.w	r2, #1
 8002618:	f7ff fdaa 	bl	8002170 <d_cv_qualifiers>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <d_pointer_to_member_type+0x5c>
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e029      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff f9e3 	bl	80019f8 <d_type>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <d_pointer_to_member_type+0x76>
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e01c      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d00f      	beq.n	8002670 <d_pointer_to_member_type+0xa0>
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b25      	cmp	r3, #37	; 0x25
 8002658:	d00a      	beq.n	8002670 <d_pointer_to_member_type+0xa0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4619      	mov	r1, r3
 8002660:	f000 fe0e 	bl	8003280 <d_add_substitution>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <d_pointer_to_member_type+0xa0>
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e007      	b.n	8002680 <d_pointer_to_member_type+0xb0>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f04f 0127 	mov.w	r1, #39	; 0x27
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	f7fd fe6f 	bl	800035c <d_make_comp>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f107 0718 	add.w	r7, r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop

0800268c <d_compact_number>:
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b5f      	cmp	r3, #95	; 0x5f
 800269c:	d103      	bne.n	80026a6 <d_compact_number+0x1a>
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e00e      	b.n	80026c4 <d_compact_number+0x38>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b6e      	cmp	r3, #110	; 0x6e
 80026ae:	d102      	bne.n	80026b6 <d_compact_number+0x2a>
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	e01c      	b.n	80026f0 <d_compact_number+0x64>
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fc4a 	bl	8000f50 <d_number>
 80026bc:	4603      	mov	r3, r0
 80026be:	f103 0301 	add.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b5f      	cmp	r3, #95	; 0x5f
 80026cc:	d108      	bne.n	80026e0 <d_compact_number+0x54>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f103 0201 	add.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e001      	b.n	80026e4 <d_compact_number+0x58>
 80026e0:	f04f 0301 	mov.w	r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <d_compact_number+0x62>
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	e000      	b.n	80026f0 <d_compact_number+0x64>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f107 0710 	add.w	r7, r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop

080026fc <d_template_param>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b54      	cmp	r3, #84	; 0x54
 800270c:	d108      	bne.n	8002720 <d_template_param+0x24>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f103 0201 	add.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e001      	b.n	8002724 <d_template_param+0x28>
 8002720:	f04f 0301 	mov.w	r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <d_template_param+0x32>
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e015      	b.n	800275a <d_template_param+0x5e>
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffac 	bl	800268c <d_compact_number>
 8002734:	4603      	mov	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da02      	bge.n	8002744 <d_template_param+0x48>
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e00a      	b.n	800275a <d_template_param+0x5e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f103 0201 	add.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	f7fd ffc8 	bl	80006e8 <d_make_template_param>
 8002758:	4603      	mov	r3, r0
 800275a:	4618      	mov	r0, r3
 800275c:	f107 0710 	add.w	r7, r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <d_template_args>:
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b49      	cmp	r3, #73	; 0x49
 800277a:	d108      	bne.n	800278e <d_template_args+0x2a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f103 0201 	add.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e001      	b.n	8002792 <d_template_args+0x2e>
 800278e:	f04f 0301 	mov.w	r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <d_template_args+0x38>
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e04f      	b.n	800283c <d_template_args+0xd8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b45      	cmp	r3, #69	; 0x45
 80027a4:	d110      	bne.n	80027c8 <d_template_args+0x64>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f103 0201 	add.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f04f 012b 	mov.w	r1, #43	; 0x2b
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	f7fd fdcc 	bl	800035c <d_make_comp>
 80027c4:	4603      	mov	r3, r0
 80027c6:	e039      	b.n	800283c <d_template_args+0xd8>
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e000      	b.n	80027d8 <d_template_args+0x74>
 80027d6:	bf00      	nop
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f835 	bl	8002848 <d_template_arg>
 80027de:	4603      	mov	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <d_template_args+0x8a>
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e026      	b.n	800283c <d_template_args+0xd8>
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f04f 012b 	mov.w	r1, #43	; 0x2b
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f7fd fdaf 	bl	800035c <d_make_comp>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <d_template_args+0xae>
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e014      	b.n	800283c <d_template_args+0xd8>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f103 0308 	add.w	r3, r3, #8
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b45      	cmp	r3, #69	; 0x45
 8002824:	d1d7      	bne.n	80027d6 <d_template_args+0x72>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f103 0201 	add.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	bf00      	nop
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4618      	mov	r0, r3
 800283e:	f107 0718 	add.w	r7, r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop

08002848 <d_template_arg>:
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b4c      	cmp	r3, #76	; 0x4c
 8002858:	d026      	beq.n	80028a8 <d_template_arg+0x60>
 800285a:	2b58      	cmp	r3, #88	; 0x58
 800285c:	d002      	beq.n	8002864 <d_template_arg+0x1c>
 800285e:	2b49      	cmp	r3, #73	; 0x49
 8002860:	d027      	beq.n	80028b2 <d_template_arg+0x6a>
 8002862:	e02b      	b.n	80028bc <d_template_arg+0x74>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f103 0201 	add.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f883 	bl	800297c <d_expression>
 8002876:	4603      	mov	r3, r0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b45      	cmp	r3, #69	; 0x45
 8002882:	d108      	bne.n	8002896 <d_template_arg+0x4e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f103 0201 	add.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e001      	b.n	800289a <d_template_arg+0x52>
 8002896:	f04f 0301 	mov.w	r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <d_template_arg+0x5c>
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e00f      	b.n	80028c4 <d_template_arg+0x7c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	e00d      	b.n	80028c4 <d_template_arg+0x7c>
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fa37 	bl	8002d1c <d_expr_primary>
 80028ae:	4603      	mov	r3, r0
 80028b0:	e008      	b.n	80028c4 <d_template_arg+0x7c>
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff56 	bl	8002764 <d_template_args>
 80028b8:	4603      	mov	r3, r0
 80028ba:	e003      	b.n	80028c4 <d_template_arg+0x7c>
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff f89b 	bl	80019f8 <d_type>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f107 0710 	add.w	r7, r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop

080028d0 <d_exprlist>:
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b45      	cmp	r3, #69	; 0x45
 80028ec:	d111      	bne.n	8002912 <d_exprlist+0x42>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f103 0201 	add.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f7fd fd28 	bl	800035c <d_make_comp>
 800290c:	4603      	mov	r3, r0
 800290e:	e02f      	b.n	8002970 <d_exprlist+0xa0>
 8002910:	bf00      	nop
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f832 	bl	800297c <d_expression>
 8002918:	4603      	mov	r3, r0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <d_exprlist+0x58>
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e023      	b.n	8002970 <d_exprlist+0xa0>
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f04f 012a 	mov.w	r1, #42	; 0x2a
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f7fd fd12 	bl	800035c <d_make_comp>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <d_exprlist+0x7c>
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e011      	b.n	8002970 <d_exprlist+0xa0>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f103 0308 	add.w	r3, r3, #8
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b45      	cmp	r3, #69	; 0x45
 800295e:	d1d7      	bne.n	8002910 <d_exprlist+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f103 0201 	add.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	bf00      	nop
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	f107 0718 	add.w	r7, r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop

0800297c <d_expression>:
 800297c:	b580      	push	{r7, lr}
 800297e:	b090      	sub	sp, #64	; 0x40
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800298e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002992:	2b4c      	cmp	r3, #76	; 0x4c
 8002994:	d104      	bne.n	80029a0 <d_expression+0x24>
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9c0 	bl	8002d1c <d_expr_primary>
 800299c:	4603      	mov	r3, r0
 800299e:	e1b8      	b.n	8002d12 <d_expression+0x396>
 80029a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029a4:	2b54      	cmp	r3, #84	; 0x54
 80029a6:	d104      	bne.n	80029b2 <d_expression+0x36>
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fea7 	bl	80026fc <d_template_param>
 80029ae:	4603      	mov	r3, r0
 80029b0:	e1af      	b.n	8002d12 <d_expression+0x396>
 80029b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029b6:	2b73      	cmp	r3, #115	; 0x73
 80029b8:	d137      	bne.n	8002a2a <d_expression+0xae>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f103 0301 	add.w	r3, r3, #1
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b72      	cmp	r3, #114	; 0x72
 80029c6:	d130      	bne.n	8002a2a <d_expression+0xae>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f103 0202 	add.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff f80f 	bl	80019f8 <d_type>
 80029da:	4603      	mov	r3, r0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fa1a 	bl	8000e18 <d_unqualified_name>
 80029e4:	4603      	mov	r3, r0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b49      	cmp	r3, #73	; 0x49
 80029f0:	d008      	beq.n	8002a04 <d_expression+0x88>
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f04f 0101 	mov.w	r1, #1
 80029f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	f7fd fcae 	bl	800035c <d_make_comp>
 8002a00:	4603      	mov	r3, r0
 8002a02:	e186      	b.n	8002d12 <d_expression+0x396>
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fead 	bl	8002764 <d_template_args>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f04f 0104 	mov.w	r1, #4
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	f7fd fca2 	bl	800035c <d_make_comp>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f04f 0101 	mov.w	r1, #1
 8002a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a22:	f7fd fc9b 	bl	800035c <d_make_comp>
 8002a26:	4603      	mov	r3, r0
 8002a28:	e173      	b.n	8002d12 <d_expression+0x396>
 8002a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a2e:	2b73      	cmp	r3, #115	; 0x73
 8002a30:	d11a      	bne.n	8002a68 <d_expression+0xec>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f103 0301 	add.w	r3, r3, #1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b70      	cmp	r3, #112	; 0x70
 8002a3e:	d113      	bne.n	8002a68 <d_expression+0xec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f103 0202 	add.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff95 	bl	800297c <d_expression>
 8002a52:	4603      	mov	r3, r0
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f04f 0141 	mov.w	r1, #65	; 0x41
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f7fd fc7c 	bl	800035c <d_make_comp>
 8002a64:	4603      	mov	r3, r0
 8002a66:	e154      	b.n	8002d12 <d_expression+0x396>
 8002a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a6c:	2b66      	cmp	r3, #102	; 0x66
 8002a6e:	d11d      	bne.n	8002aac <d_expression+0x130>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f103 0301 	add.w	r3, r3, #1
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b70      	cmp	r3, #112	; 0x70
 8002a7c:	d116      	bne.n	8002aac <d_expression+0x130>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f103 0202 	add.w	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fdfe 	bl	800268c <d_compact_number>
 8002a90:	4603      	mov	r3, r0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da02      	bge.n	8002aa0 <d_expression+0x124>
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e138      	b.n	8002d12 <d_expression+0x396>
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	f7fd fe3a 	bl	800071c <d_make_function_param>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	e132      	b.n	8002d12 <d_expression+0x396>
 8002aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8002ab2:	d903      	bls.n	8002abc <d_expression+0x140>
 8002ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab8:	2b39      	cmp	r3, #57	; 0x39
 8002aba:	d90a      	bls.n	8002ad2 <d_expression+0x156>
 8002abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ac0:	2b6f      	cmp	r3, #111	; 0x6f
 8002ac2:	d12e      	bne.n	8002b22 <d_expression+0x1a6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f103 0301 	add.w	r3, r3, #1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b6e      	cmp	r3, #110	; 0x6e
 8002ad0:	d127      	bne.n	8002b22 <d_expression+0x1a6>
 8002ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ad6:	2b6f      	cmp	r3, #111	; 0x6f
 8002ad8:	d105      	bne.n	8002ae6 <d_expression+0x16a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f103 0202 	add.w	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe f996 	bl	8000e18 <d_unqualified_name>
 8002aec:	4603      	mov	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <d_expression+0x180>
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e10a      	b.n	8002d12 <d_expression+0x396>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b49      	cmp	r3, #73	; 0x49
 8002b04:	d10b      	bne.n	8002b1e <d_expression+0x1a2>
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fe2c 	bl	8002764 <d_template_args>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f04f 0104 	mov.w	r1, #4
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	f7fd fc21 	bl	800035c <d_make_comp>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	e0f9      	b.n	8002d12 <d_expression+0x396>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	e0f7      	b.n	8002d12 <d_expression+0x396>
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe faea 	bl	80010fc <d_operator_name>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <d_expression+0x1bc>
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e0ec      	b.n	8002d12 <d_expression+0x396>
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b2c      	cmp	r3, #44	; 0x2c
 8002b3e:	d109      	bne.n	8002b54 <d_expression+0x1d8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f1a3 0302 	sub.w	r3, r3, #2
 8002b4e:	18d2      	adds	r2, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b2c      	cmp	r3, #44	; 0x2c
 8002b5a:	d118      	bne.n	8002b8e <d_expression+0x212>
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f649 7124 	movw	r1, #40740	; 0x9f24
 8002b68:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002b6c:	f005 f9c6 	bl	8007efc <strcmp>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <d_expression+0x212>
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe ff3e 	bl	80019f8 <d_type>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	f7fd fbe9 	bl	800035c <d_make_comp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	e0c1      	b.n	8002d12 <d_expression+0x396>
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b2d      	cmp	r3, #45	; 0x2d
 8002b94:	d00b      	beq.n	8002bae <d_expression+0x232>
 8002b96:	2b2e      	cmp	r3, #46	; 0x2e
 8002b98:	d00d      	beq.n	8002bb6 <d_expression+0x23a>
 8002b9a:	2b2c      	cmp	r3, #44	; 0x2c
 8002b9c:	d002      	beq.n	8002ba4 <d_expression+0x228>
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e0b6      	b.n	8002d12 <d_expression+0x396>
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	e007      	b.n	8002bbe <d_expression+0x242>
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb4:	e003      	b.n	8002bbe <d_expression+0x242>
 8002bb6:	f04f 0301 	mov.w	r3, #1
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	bf00      	nop
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d027      	beq.n	8002c14 <d_expression+0x298>
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d07e      	beq.n	8002cc6 <d_expression+0x34a>
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 80a0 	bne.w	8002d0e <d_expression+0x392>
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd4:	d110      	bne.n	8002bf8 <d_expression+0x27c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b5f      	cmp	r3, #95	; 0x5f
 8002bde:	d10b      	bne.n	8002bf8 <d_expression+0x27c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f103 0201 	add.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fe6f 	bl	80028d0 <d_exprlist>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf6:	e004      	b.n	8002c02 <d_expression+0x286>
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff febf 	bl	800297c <d_expression>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	f7fd fba6 	bl	800035c <d_make_comp>
 8002c10:	4603      	mov	r3, r0
 8002c12:	e07e      	b.n	8002d12 <d_expression+0x396>
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fead 	bl	800297c <d_expression>
 8002c22:	4603      	mov	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	69f8      	ldr	r0, [r7, #28]
 8002c28:	f649 51c8 	movw	r1, #40392	; 0x9dc8
 8002c2c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c30:	f005 f964 	bl	8007efc <strcmp>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <d_expression+0x2ca>
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fe48 	bl	80028d0 <d_exprlist>
 8002c40:	4603      	mov	r3, r0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	e02f      	b.n	8002ca6 <d_expression+0x32a>
 8002c46:	69f8      	ldr	r0, [r7, #28]
 8002c48:	f649 610c 	movw	r1, #40460	; 0x9e0c
 8002c4c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c50:	f005 f954 	bl	8007efc <strcmp>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <d_expression+0x2f2>
 8002c5a:	69f8      	ldr	r0, [r7, #28]
 8002c5c:	f649 61f4 	movw	r1, #40692	; 0x9ef4
 8002c60:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c64:	f005 f94a 	bl	8007efc <strcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <d_expression+0x320>
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f8d2 	bl	8000e18 <d_unqualified_name>
 8002c74:	4603      	mov	r3, r0
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b49      	cmp	r3, #73	; 0x49
 8002c80:	d111      	bne.n	8002ca6 <d_expression+0x32a>
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fd6e 	bl	8002764 <d_template_args>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f04f 0104 	mov.w	r1, #4
 8002c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c92:	f7fd fb63 	bl	800035c <d_make_comp>
 8002c96:	4603      	mov	r3, r0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9a:	e004      	b.n	8002ca6 <d_expression+0x32a>
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe6d 	bl	800297c <d_expression>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f04f 0131 	mov.w	r1, #49	; 0x31
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	f7fd fb54 	bl	800035c <d_make_comp>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f04f 0130 	mov.w	r1, #48	; 0x30
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	f7fd fb4d 	bl	800035c <d_make_comp>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	e025      	b.n	8002d12 <d_expression+0x396>
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe58 	bl	800297c <d_expression>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fe53 	bl	800297c <d_expression>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fe4e 	bl	800297c <d_expression>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f04f 0134 	mov.w	r1, #52	; 0x34
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	f7fd fb37 	bl	800035c <d_make_comp>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f04f 0133 	mov.w	r1, #51	; 0x33
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	f7fd fb30 	bl	800035c <d_make_comp>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f04f 0132 	mov.w	r1, #50	; 0x32
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	f7fd fb29 	bl	800035c <d_make_comp>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	e001      	b.n	8002d12 <d_expression+0x396>
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <d_expr_primary>:
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b4c      	cmp	r3, #76	; 0x4c
 8002d2c:	d108      	bne.n	8002d40 <d_expr_primary+0x24>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f103 0201 	add.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e001      	b.n	8002d44 <d_expr_primary+0x28>
 8002d40:	f04f 0301 	mov.w	r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <d_expr_primary+0x32>
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e07e      	b.n	8002e4c <d_expr_primary+0x130>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b5f      	cmp	r3, #95	; 0x5f
 8002d56:	d004      	beq.n	8002d62 <d_expr_primary+0x46>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b5a      	cmp	r3, #90	; 0x5a
 8002d60:	d107      	bne.n	8002d72 <d_expr_primary+0x56>
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	f7fd fd10 	bl	800078c <d_mangled_name>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e056      	b.n	8002e20 <d_expr_primary+0x104>
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fe40 	bl	80019f8 <d_type>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <d_expr_primary+0x6c>
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e061      	b.n	8002e4c <d_expr_primary+0x130>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b23      	cmp	r3, #35	; 0x23
 8002d8e:	d10c      	bne.n	8002daa <d_expr_primary+0x8e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	7c1b      	ldrb	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <d_expr_primary+0x8e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	1ad2      	subs	r2, r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
 8002daa:	f04f 0335 	mov.w	r3, #53	; 0x35
 8002dae:	74fb      	strb	r3, [r7, #19]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b6e      	cmp	r3, #110	; 0x6e
 8002db8:	d108      	bne.n	8002dcc <d_expr_primary+0xb0>
 8002dba:	f04f 0336 	mov.w	r3, #54	; 0x36
 8002dbe:	74fb      	strb	r3, [r7, #19]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f103 0201 	add.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e00d      	b.n	8002df0 <d_expr_primary+0xd4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <d_expr_primary+0xc8>
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e033      	b.n	8002e4c <d_expr_primary+0x130>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f103 0201 	add.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b45      	cmp	r3, #69	; 0x45
 8002df8:	d1ec      	bne.n	8002dd4 <d_expr_primary+0xb8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7fd fba1 	bl	8000550 <d_make_name>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	7cfa      	ldrb	r2, [r7, #19]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4611      	mov	r1, r2
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	f7fd faa0 	bl	800035c <d_make_comp>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b45      	cmp	r3, #69	; 0x45
 8002e28:	d108      	bne.n	8002e3c <d_expr_primary+0x120>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f103 0201 	add.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e001      	b.n	8002e40 <d_expr_primary+0x124>
 8002e3c:	f04f 0301 	mov.w	r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <d_expr_primary+0x12e>
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e000      	b.n	8002e4c <d_expr_primary+0x130>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f107 0718 	add.w	r7, r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <d_local_name>:
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b5a      	cmp	r3, #90	; 0x5a
 8002e68:	d108      	bne.n	8002e7c <d_local_name+0x24>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f103 0201 	add.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e001      	b.n	8002e80 <d_local_name+0x28>
 8002e7c:	f04f 0301 	mov.w	r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <d_local_name+0x32>
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e084      	b.n	8002f94 <d_local_name+0x13c>
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	f7fd fda4 	bl	80009dc <d_encoding>
 8002e94:	4603      	mov	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b45      	cmp	r3, #69	; 0x45
 8002ea0:	d108      	bne.n	8002eb4 <d_local_name+0x5c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f103 0201 	add.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e001      	b.n	8002eb8 <d_local_name+0x60>
 8002eb4:	f04f 0301 	mov.w	r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <d_local_name+0x6a>
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e068      	b.n	8002f94 <d_local_name+0x13c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b73      	cmp	r3, #115	; 0x73
 8002eca:	d120      	bne.n	8002f0e <d_local_name+0xb6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f103 0201 	add.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f861 	bl	8002fa0 <d_discriminator>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <d_local_name+0x92>
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e054      	b.n	8002f94 <d_local_name+0x13c>
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f24a 2198 	movw	r1, #41624	; 0xa298
 8002ef0:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002ef4:	f04f 020e 	mov.w	r2, #14
 8002ef8:	f7fd fb2a 	bl	8000550 <d_make_name>
 8002efc:	4603      	mov	r3, r0
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f04f 0102 	mov.w	r1, #2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	f7fd fa29 	bl	800035c <d_make_comp>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	e042      	b.n	8002f94 <d_local_name+0x13c>
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d110      	bne.n	8002f40 <d_local_name+0xe8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f103 0201 	add.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fbae 	bl	800268c <d_compact_number>
 8002f30:	4603      	mov	r3, r0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	da02      	bge.n	8002f40 <d_local_name+0xe8>
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e029      	b.n	8002f94 <d_local_name+0x13c>
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fd fdc1 	bl	8000ac8 <d_name>
 8002f46:	4603      	mov	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <d_local_name+0x118>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b3e      	cmp	r3, #62	; 0x3e
 8002f56:	d00a      	beq.n	8002f6e <d_local_name+0x116>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d008      	beq.n	8002f6e <d_local_name+0x116>
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f81f 	bl	8002fa0 <d_discriminator>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <d_local_name+0x118>
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e012      	b.n	8002f94 <d_local_name+0x13c>
 8002f6e:	bf00      	nop
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db06      	blt.n	8002f84 <d_local_name+0x12c>
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	6939      	ldr	r1, [r7, #16]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	f7fd fb5a 	bl	8000634 <d_make_default_arg>
 8002f80:	4603      	mov	r3, r0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f04f 0102 	mov.w	r1, #2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f7fd f9e5 	bl	800035c <d_make_comp>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f107 0718 	add.w	r7, r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop

08002fa0 <d_discriminator>:
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b5f      	cmp	r3, #95	; 0x5f
 8002fb0:	d002      	beq.n	8002fb8 <d_discriminator+0x18>
 8002fb2:	f04f 0301 	mov.w	r3, #1
 8002fb6:	e012      	b.n	8002fde <d_discriminator+0x3e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f103 0201 	add.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fd ffc3 	bl	8000f50 <d_number>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da02      	bge.n	8002fda <d_discriminator+0x3a>
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e001      	b.n	8002fde <d_discriminator+0x3e>
 8002fda:	f04f 0301 	mov.w	r3, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f107 0710 	add.w	r7, r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <d_lambda>:
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b55      	cmp	r3, #85	; 0x55
 8002ff8:	d108      	bne.n	800300c <d_lambda+0x24>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f103 0201 	add.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e001      	b.n	8003010 <d_lambda+0x28>
 800300c:	f04f 0301 	mov.w	r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <d_lambda+0x32>
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e05c      	b.n	80030d4 <d_lambda+0xec>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b6c      	cmp	r3, #108	; 0x6c
 8003022:	d108      	bne.n	8003036 <d_lambda+0x4e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f103 0201 	add.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e001      	b.n	800303a <d_lambda+0x52>
 8003036:	f04f 0301 	mov.w	r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <d_lambda+0x5c>
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e047      	b.n	80030d4 <d_lambda+0xec>
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff f94d 	bl	80022e4 <d_parmlist>
 800304a:	4603      	mov	r3, r0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <d_lambda+0x72>
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e03c      	b.n	80030d4 <d_lambda+0xec>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b45      	cmp	r3, #69	; 0x45
 8003062:	d108      	bne.n	8003076 <d_lambda+0x8e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f103 0201 	add.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e001      	b.n	800307a <d_lambda+0x92>
 8003076:	f04f 0301 	mov.w	r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <d_lambda+0x9c>
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e027      	b.n	80030d4 <d_lambda+0xec>
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fb01 	bl	800268c <d_compact_number>
 800308a:	4603      	mov	r3, r0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da02      	bge.n	800309a <d_lambda+0xb2>
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e01c      	b.n	80030d4 <d_lambda+0xec>
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd f936 	bl	800030c <d_make_empty>
 80030a0:	4603      	mov	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <d_lambda+0xd6>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f04f 023e 	mov.w	r2, #62	; 0x3e
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	f000 f8dd 	bl	8003280 <d_add_substitution>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <d_lambda+0xea>
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e000      	b.n	80030d4 <d_lambda+0xec>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f107 0718 	add.w	r7, r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <d_unnamed_type>:
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b55      	cmp	r3, #85	; 0x55
 80030f0:	d108      	bne.n	8003104 <d_unnamed_type+0x24>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f103 0201 	add.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e001      	b.n	8003108 <d_unnamed_type+0x28>
 8003104:	f04f 0301 	mov.w	r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <d_unnamed_type+0x32>
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e039      	b.n	8003186 <d_unnamed_type+0xa6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b74      	cmp	r3, #116	; 0x74
 800311a:	d108      	bne.n	800312e <d_unnamed_type+0x4e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f103 0201 	add.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e001      	b.n	8003132 <d_unnamed_type+0x52>
 800312e:	f04f 0301 	mov.w	r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <d_unnamed_type+0x5c>
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e024      	b.n	8003186 <d_unnamed_type+0xa6>
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff faa5 	bl	800268c <d_compact_number>
 8003142:	4603      	mov	r3, r0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da02      	bge.n	8003152 <d_unnamed_type+0x72>
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e019      	b.n	8003186 <d_unnamed_type+0xa6>
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd f8da 	bl	800030c <d_make_empty>
 8003158:	4603      	mov	r3, r0
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <d_unnamed_type+0x90>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f04f 0240 	mov.w	r2, #64	; 0x40
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	f000 f884 	bl	8003280 <d_add_substitution>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <d_unnamed_type+0xa4>
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e000      	b.n	8003186 <d_unnamed_type+0xa6>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f107 0710 	add.w	r7, r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <d_clone_suffix>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b2e      	cmp	r3, #46	; 0x2e
 80031aa:	d139      	bne.n	8003220 <d_clone_suffix+0x90>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f103 0301 	add.w	r3, r3, #1
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d905      	bls.n	80031c4 <d_clone_suffix+0x34>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f103 0301 	add.w	r3, r3, #1
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b7a      	cmp	r3, #122	; 0x7a
 80031c2:	d905      	bls.n	80031d0 <d_clone_suffix+0x40>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f103 0301 	add.w	r3, r3, #1
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b5f      	cmp	r3, #95	; 0x5f
 80031ce:	d127      	bne.n	8003220 <d_clone_suffix+0x90>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f103 0302 	add.w	r3, r3, #2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e003      	b.n	80031e2 <d_clone_suffix+0x52>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f103 0301 	add.w	r3, r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b60      	cmp	r3, #96	; 0x60
 80031e8:	d903      	bls.n	80031f2 <d_clone_suffix+0x62>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b7a      	cmp	r3, #122	; 0x7a
 80031f0:	d9f3      	bls.n	80031da <d_clone_suffix+0x4a>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b5f      	cmp	r3, #95	; 0x5f
 80031f8:	d0ef      	beq.n	80031da <d_clone_suffix+0x4a>
 80031fa:	e011      	b.n	8003220 <d_clone_suffix+0x90>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f103 0302 	add.w	r3, r3, #2
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e003      	b.n	800320e <d_clone_suffix+0x7e>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f103 0301 	add.w	r3, r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b2f      	cmp	r3, #47	; 0x2f
 8003214:	d905      	bls.n	8003222 <d_clone_suffix+0x92>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b39      	cmp	r3, #57	; 0x39
 800321c:	d9f3      	bls.n	8003206 <d_clone_suffix+0x76>
 800321e:	e000      	b.n	8003222 <d_clone_suffix+0x92>
 8003220:	bf00      	nop
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b2e      	cmp	r3, #46	; 0x2e
 8003228:	d10b      	bne.n	8003242 <d_clone_suffix+0xb2>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f103 0301 	add.w	r3, r3, #1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b2f      	cmp	r3, #47	; 0x2f
 8003234:	d905      	bls.n	8003242 <d_clone_suffix+0xb2>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f103 0301 	add.w	r3, r3, #1
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b39      	cmp	r3, #57	; 0x39
 8003240:	d9dc      	bls.n	80031fc <d_clone_suffix+0x6c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1acb      	subs	r3, r1, r3
 800324c:	18d2      	adds	r2, r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	6939      	ldr	r1, [r7, #16]
 800325c:	461a      	mov	r2, r3
 800325e:	f7fd f977 	bl	8000550 <d_make_name>
 8003262:	4603      	mov	r3, r0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f04f 0142 	mov.w	r1, #66	; 0x42
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f7fd f874 	bl	800035c <d_make_comp>
 8003274:	4603      	mov	r3, r0
 8003276:	4618      	mov	r0, r3
 8003278:	f107 0718 	add.w	r7, r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <d_add_substitution>:
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <d_add_substitution+0x16>
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e019      	b.n	80032ca <d_add_substitution+0x4a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	429a      	cmp	r2, r3
 80032a0:	db02      	blt.n	80032a8 <d_add_substitution+0x28>
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e010      	b.n	80032ca <d_add_substitution+0x4a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032b4:	18d3      	adds	r3, r2, r3
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f103 0201 	add.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]
 80032c6:	f04f 0301 	mov.w	r3, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f107 070c 	add.w	r7, r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <d_substitution>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b53      	cmp	r3, #83	; 0x53
 80032ea:	d108      	bne.n	80032fe <d_substitution+0x26>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f103 0201 	add.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e001      	b.n	8003302 <d_substitution+0x2a>
 80032fe:	f04f 0301 	mov.w	r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <d_substitution+0x34>
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e0f6      	b.n	80034fa <d_substitution+0x222>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <d_substitution+0x4e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	7813      	ldrb	r3, [r2, #0]
 800331c:	f102 0101 	add.w	r1, r2, #1
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	60d1      	str	r1, [r2, #12]
 8003324:	e001      	b.n	800332a <d_substitution+0x52>
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800332e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003332:	2b5f      	cmp	r3, #95	; 0x5f
 8003334:	d00f      	beq.n	8003356 <d_substitution+0x7e>
 8003336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800333a:	2b2f      	cmp	r3, #47	; 0x2f
 800333c:	d903      	bls.n	8003346 <d_substitution+0x6e>
 800333e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003342:	2b39      	cmp	r3, #57	; 0x39
 8003344:	d907      	bls.n	8003356 <d_substitution+0x7e>
 8003346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d974      	bls.n	8003438 <d_substitution+0x160>
 800334e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003352:	2b5a      	cmp	r3, #90	; 0x5a
 8003354:	d870      	bhi.n	8003438 <d_substitution+0x160>
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 800335c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003360:	2b5f      	cmp	r3, #95	; 0x5f
 8003362:	d052      	beq.n	800340a <d_substitution+0x132>
 8003364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003368:	2b2f      	cmp	r3, #47	; 0x2f
 800336a:	d912      	bls.n	8003392 <d_substitution+0xba>
 800336c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003370:	2b39      	cmp	r3, #57	; 0x39
 8003372:	d80e      	bhi.n	8003392 <d_substitution+0xba>
 8003374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003376:	4613      	mov	r3, r2
 8003378:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800337c:	189b      	adds	r3, r3, r2
 800337e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003382:	461a      	mov	r2, r3
 8003384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
 8003390:	e019      	b.n	80033c6 <d_substitution+0xee>
 8003392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d912      	bls.n	80033c0 <d_substitution+0xe8>
 800339a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800339e:	2b5a      	cmp	r3, #90	; 0x5a
 80033a0:	d80e      	bhi.n	80033c0 <d_substitution+0xe8>
 80033a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a4:	4613      	mov	r3, r2
 80033a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033b6:	18d3      	adds	r3, r2, r3
 80033b8:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e002      	b.n	80033c6 <d_substitution+0xee>
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e099      	b.n	80034fa <d_substitution+0x222>
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d202      	bcs.n	80033d4 <d_substitution+0xfc>
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e092      	b.n	80034fa <d_substitution+0x222>
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <d_substitution+0x11a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	7813      	ldrb	r3, [r2, #0]
 80033e8:	f102 0101 	add.w	r1, r2, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	60d1      	str	r1, [r2, #12]
 80033f0:	e001      	b.n	80033f6 <d_substitution+0x11e>
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80033fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033fe:	2b5f      	cmp	r3, #95	; 0x5f
 8003400:	d1b0      	bne.n	8003364 <d_substitution+0x8c>
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	f103 0301 	add.w	r3, r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	461a      	mov	r2, r3
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	429a      	cmp	r2, r3
 8003414:	d802      	bhi.n	800341c <d_substitution+0x144>
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e06e      	b.n	80034fa <d_substitution+0x222>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	f103 0201 	add.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	e060      	b.n	80034fa <d_substitution+0x222>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2300      	moveq	r3, #0
 8003446:	2301      	movne	r3, #1
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <d_substitution+0x198>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <d_substitution+0x198>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	74fb      	strb	r3, [r7, #19]
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	2b43      	cmp	r3, #67	; 0x43
 8003462:	d002      	beq.n	800346a <d_substitution+0x192>
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	2b44      	cmp	r3, #68	; 0x44
 8003468:	d102      	bne.n	8003470 <d_substitution+0x198>
 800346a:	f04f 0301 	mov.w	r3, #1
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <d_substitution+0x22c>)
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	f24a 4338 	movw	r3, #42040	; 0xa438
 8003478:	f6c0 0301 	movt	r3, #2049	; 0x801
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e036      	b.n	80034ee <d_substitution+0x216>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003488:	429a      	cmp	r2, r3
 800348a:	d12c      	bne.n	80034e6 <d_substitution+0x20e>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <d_substitution+0x1d4>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7fd f955 	bl	8000750 <d_make_sub>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <d_substitution+0x1e8>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e005      	b.n	80034cc <d_substitution+0x1f4>
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	f7fd f937 	bl	8000750 <d_make_sub>
 80034e2:	4603      	mov	r3, r0
 80034e4:	e009      	b.n	80034fa <d_substitution+0x222>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f103 031c 	add.w	r3, r3, #28
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d3c4      	bcc.n	8003480 <d_substitution+0x1a8>
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	0801a4fc 	.word	0x0801a4fc

08003508 <d_growable_string_init>:
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <d_growable_string_init+0x38>
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	f000 f804 	bl	8003548 <d_growable_string_resize>
 8003540:	f107 0708 	add.w	r7, r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <d_growable_string_resize>:
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d13a      	bne.n	80035d0 <d_growable_string_resize+0x88>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <d_growable_string_resize+0x20>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	e001      	b.n	800356c <d_growable_string_resize+0x24>
 8003568:	f04f 0302 	mov.w	r3, #2
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e003      	b.n	8003578 <d_growable_string_resize+0x30>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d3f7      	bcc.n	8003570 <d_growable_string_resize+0x28>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f004 f9b0 	bl	80078ec <realloc>
 800358c:	4603      	mov	r3, r0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <d_growable_string_resize+0x7a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fd24 	bl	8006fe8 <free>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f04f 0201 	mov.w	r2, #1
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	e007      	b.n	80035d2 <d_growable_string_resize+0x8a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	e000      	b.n	80035d2 <d_growable_string_resize+0x8a>
 80035d0:	bf00      	nop
 80035d2:	f107 0710 	add.w	r7, r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <d_growable_string_append_buffer>:
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	f103 0301 	add.w	r3, r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d203      	bcs.n	8003608 <d_growable_string_append_buffer+0x2c>
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	f7ff ffa0 	bl	8003548 <d_growable_string_resize>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11e      	bne.n	800364e <d_growable_string_append_buffer+0x72>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	18d2      	adds	r2, r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4611      	mov	r1, r2
 800361e:	461a      	mov	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4608      	mov	r0, r1
 8003624:	4611      	mov	r1, r2
 8003626:	461a      	mov	r2, r3
 8003628:	f004 f80c 	bl	8007644 <memcpy>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	18cb      	adds	r3, r1, r3
 8003638:	18d3      	adds	r3, r2, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	18d2      	adds	r2, r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e000      	b.n	8003650 <d_growable_string_append_buffer+0x74>
 800364e:	bf00      	nop
 8003650:	f107 0718 	add.w	r7, r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <d_growable_string_callback_adapter>:
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	6978      	ldr	r0, [r7, #20]
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	f7ff ffb5 	bl	80035dc <d_growable_string_append_buffer>
 8003672:	f107 0718 	add.w	r7, r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <d_print_init>:
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80036dc:	f107 0714 	add.w	r7, r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <d_print_error>:
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f04f 0201 	mov.w	r2, #1
 80036f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80036fa:	f107 070c 	add.w	r7, r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <d_print_saw_error>:
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf0c      	ite	eq
 8003716:	2300      	moveq	r3, #0
 8003718:	2301      	movne	r3, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f107 070c 	add.w	r7, r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop

08003728 <d_print_flush>:
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	711a      	strb	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	f102 0004 	add.w	r0, r2, #4
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8003758:	4798      	blx	r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800376a:	f103 0201 	add.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8003774:	f107 0708 	add.w	r7, r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <d_append_char>:
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	d102      	bne.n	8003798 <d_append_char+0x1c>
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffc8 	bl	8003728 <d_print_flush>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	18d2      	adds	r2, r2, r3
 80037a2:	78f9      	ldrb	r1, [r7, #3]
 80037a4:	7111      	strb	r1, [r2, #4]
 80037a6:	f103 0201 	add.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80037b8:	f107 0708 	add.w	r7, r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <d_append_buffer>:
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e00b      	b.n	80037ec <d_append_buffer+0x2c>
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	4619      	mov	r1, r3
 80037e0:	f7ff ffcc 	bl	800377c <d_append_char>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f103 0301 	add.w	r3, r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3ef      	bcc.n	80037d4 <d_append_buffer+0x14>
 80037f4:	f107 0718 	add.w	r7, r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <d_append_string>:
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	6838      	ldr	r0, [r7, #0]
 8003808:	f004 fcc4 	bl	8008194 <strlen>
 800380c:	4603      	mov	r3, r0
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	6839      	ldr	r1, [r7, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	f7ff ffd4 	bl	80037c0 <d_append_buffer>
 8003818:	f107 0708 	add.w	r7, r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <d_append_num>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	4618      	mov	r0, r3
 8003830:	f24a 41fc 	movw	r1, #42236	; 0xa4fc
 8003834:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	f004 fb37 	bl	8007eac <sprintf>
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4619      	mov	r1, r3
 8003846:	f7ff ffd9 	bl	80037fc <d_append_string>
 800384a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <d_last_char>:
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003862:	4618      	mov	r0, r3
 8003864:	f107 070c 	add.w	r7, r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <d_print_callback>:
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b0cf      	sub	sp, #316	; 0x13c
 8003874:	af00      	add	r7, sp, #0
 8003876:	f107 040c 	add.w	r4, r7, #12
 800387a:	6020      	str	r0, [r4, #0]
 800387c:	f107 0008 	add.w	r0, r7, #8
 8003880:	6001      	str	r1, [r0, #0]
 8003882:	f107 0104 	add.w	r1, r7, #4
 8003886:	600a      	str	r2, [r1, #0]
 8003888:	463a      	mov	r2, r7
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	f107 0010 	add.w	r0, r7, #16
 8003890:	f107 010c 	add.w	r1, r7, #12
 8003894:	f107 0204 	add.w	r2, r7, #4
 8003898:	463b      	mov	r3, r7
 800389a:	6809      	ldr	r1, [r1, #0]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f7ff feec 	bl	800367c <d_print_init>
 80038a4:	f107 0210 	add.w	r2, r7, #16
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	4610      	mov	r0, r2
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	f000 f9cc 	bl	8003c4c <d_print_comp>
 80038b4:	f107 0310 	add.w	r3, r7, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff35 	bl	8003728 <d_print_flush>
 80038be:	f107 0310 	add.w	r3, r7, #16
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff1e 	bl	8003704 <d_print_saw_error>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2300      	movne	r3, #0
 80038d0:	2301      	moveq	r3, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}

080038dc <d_print>:
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f107 0210 	add.w	r2, r7, #16
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7ff fe08 	bl	8003508 <d_growable_string_init>
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	f243 6259 	movw	r2, #13913	; 0x3659
 8003904:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003908:	f7ff ffb2 	bl	8003870 <d_print_callback>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <d_print+0x4c>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fb67 	bl	8006fe8 <free>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e009      	b.n	800393c <d_print+0x60>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <d_print+0x56>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	e001      	b.n	8003936 <d_print+0x5a>
 8003932:	f04f 0301 	mov.w	r3, #1
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4618      	mov	r0, r3
 800393e:	f107 0720 	add.w	r7, r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <d_index_template_argument>:
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e010      	b.n	800397a <d_index_template_argument+0x32>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b2b      	cmp	r3, #43	; 0x2b
 800395e:	d002      	beq.n	8003966 <d_index_template_argument+0x1e>
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e019      	b.n	800399a <d_index_template_argument+0x52>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	dd0a      	ble.n	8003982 <d_index_template_argument+0x3a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1eb      	bne.n	8003958 <d_index_template_argument+0x10>
 8003980:	e000      	b.n	8003984 <d_index_template_argument+0x3c>
 8003982:	bf00      	nop
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <d_index_template_argument+0x48>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <d_index_template_argument+0x4e>
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e001      	b.n	800399a <d_index_template_argument+0x52>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f107 0714 	add.w	r7, r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop

080039a8 <d_lookup_template_argument>:
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <d_lookup_template_argument+0x20>
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fe93 	bl	80036e8 <d_print_error>
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e00b      	b.n	80039e0 <d_lookup_template_argument+0x38>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	f7ff ffb5 	bl	8003948 <d_index_template_argument>
 80039de:	4603      	mov	r3, r0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f107 0708 	add.w	r7, r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <d_find_pack>:
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <d_find_pack+0x16>
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e0d0      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b41      	cmp	r3, #65	; 0x41
 8003a08:	f200 80b8 	bhi.w	8003b7c <d_find_pack+0x190>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <d_find_pack+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003b47 	.word	0x08003b47
 8003a18:	08003b7d 	.word	0x08003b7d
 8003a1c:	08003b7d 	.word	0x08003b7d
 8003a20:	08003b7d 	.word	0x08003b7d
 8003a24:	08003b7d 	.word	0x08003b7d
 8003a28:	08003b1d 	.word	0x08003b1d
 8003a2c:	08003b47 	.word	0x08003b47
 8003a30:	08003b5d 	.word	0x08003b5d
 8003a34:	08003b6d 	.word	0x08003b6d
 8003a38:	08003b7d 	.word	0x08003b7d
 8003a3c:	08003b7d 	.word	0x08003b7d
 8003a40:	08003b7d 	.word	0x08003b7d
 8003a44:	08003b7d 	.word	0x08003b7d
 8003a48:	08003b7d 	.word	0x08003b7d
 8003a4c:	08003b7d 	.word	0x08003b7d
 8003a50:	08003b7d 	.word	0x08003b7d
 8003a54:	08003b7d 	.word	0x08003b7d
 8003a58:	08003b7d 	.word	0x08003b7d
 8003a5c:	08003b7d 	.word	0x08003b7d
 8003a60:	08003b7d 	.word	0x08003b7d
 8003a64:	08003b7d 	.word	0x08003b7d
 8003a68:	08003b7d 	.word	0x08003b7d
 8003a6c:	08003b47 	.word	0x08003b47
 8003a70:	08003b7d 	.word	0x08003b7d
 8003a74:	08003b7d 	.word	0x08003b7d
 8003a78:	08003b7d 	.word	0x08003b7d
 8003a7c:	08003b7d 	.word	0x08003b7d
 8003a80:	08003b7d 	.word	0x08003b7d
 8003a84:	08003b7d 	.word	0x08003b7d
 8003a88:	08003b7d 	.word	0x08003b7d
 8003a8c:	08003b7d 	.word	0x08003b7d
 8003a90:	08003b7d 	.word	0x08003b7d
 8003a94:	08003b7d 	.word	0x08003b7d
 8003a98:	08003b7d 	.word	0x08003b7d
 8003a9c:	08003b7d 	.word	0x08003b7d
 8003aa0:	08003b47 	.word	0x08003b47
 8003aa4:	08003b7d 	.word	0x08003b7d
 8003aa8:	08003b7d 	.word	0x08003b7d
 8003aac:	08003b7d 	.word	0x08003b7d
 8003ab0:	08003b7d 	.word	0x08003b7d
 8003ab4:	08003b7d 	.word	0x08003b7d
 8003ab8:	08003b7d 	.word	0x08003b7d
 8003abc:	08003b7d 	.word	0x08003b7d
 8003ac0:	08003b7d 	.word	0x08003b7d
 8003ac4:	08003b47 	.word	0x08003b47
 8003ac8:	08003b4d 	.word	0x08003b4d
 8003acc:	08003b7d 	.word	0x08003b7d
 8003ad0:	08003b7d 	.word	0x08003b7d
 8003ad4:	08003b7d 	.word	0x08003b7d
 8003ad8:	08003b7d 	.word	0x08003b7d
 8003adc:	08003b7d 	.word	0x08003b7d
 8003ae0:	08003b7d 	.word	0x08003b7d
 8003ae4:	08003b7d 	.word	0x08003b7d
 8003ae8:	08003b7d 	.word	0x08003b7d
 8003aec:	08003b7d 	.word	0x08003b7d
 8003af0:	08003b7d 	.word	0x08003b7d
 8003af4:	08003b7d 	.word	0x08003b7d
 8003af8:	08003b47 	.word	0x08003b47
 8003afc:	08003b7d 	.word	0x08003b7d
 8003b00:	08003b7d 	.word	0x08003b7d
 8003b04:	08003b7d 	.word	0x08003b7d
 8003b08:	08003b7d 	.word	0x08003b7d
 8003b0c:	08003b47 	.word	0x08003b47
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	f7ff ff42 	bl	80039a8 <d_lookup_template_argument>
 8003b24:	4603      	mov	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <d_find_pack+0x14e>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b2b      	cmp	r3, #43	; 0x2b
 8003b34:	d101      	bne.n	8003b3a <d_find_pack+0x14e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e034      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e031      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e02e      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e02b      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4619      	mov	r1, r3
 8003b54:	f7ff ff4a 	bl	80039ec <d_find_pack>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	e023      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4619      	mov	r1, r3
 8003b64:	f7ff ff42 	bl	80039ec <d_find_pack>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	e01b      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7ff ff3a 	bl	80039ec <d_find_pack>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	e013      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4619      	mov	r1, r3
 8003b84:	f7ff ff32 	bl	80039ec <d_find_pack>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <d_find_pack+0x1aa>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	e006      	b.n	8003ba4 <d_find_pack+0x1b8>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7ff ff25 	bl	80039ec <d_find_pack>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f107 0710 	add.w	r7, r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <d_pack_length>:
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e006      	b.n	8003bce <d_pack_length+0x1e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f103 0301 	add.w	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <d_pack_length+0x34>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b2b      	cmp	r3, #43	; 0x2b
 8003bda:	d103      	bne.n	8003be4 <d_pack_length+0x34>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ed      	bne.n	8003bc0 <d_pack_length+0x10>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f107 0714 	add.w	r7, r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop

08003bf4 <d_print_subexpr>:
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <d_print_subexpr+0x20>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d102      	bne.n	8003c1a <d_print_subexpr+0x26>
 8003c14:	f04f 0301 	mov.w	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <d_print_subexpr+0x36>
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f04f 0128 	mov.w	r1, #40	; 0x28
 8003c26:	f7ff fda9 	bl	800377c <d_append_char>
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	f000 f80d 	bl	8003c4c <d_print_comp>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <d_print_subexpr+0x4e>
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f04f 0129 	mov.w	r1, #41	; 0x29
 8003c3e:	f7ff fd9d 	bl	800377c <d_append_char>
 8003c42:	f107 0710 	add.w	r7, r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop

08003c4c <d_print_comp>:
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b0b5      	sub	sp, #212	; 0xd4
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <d_print_comp+0x1a>
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fd43 	bl	80036e8 <d_print_error>
 8003c62:	f001 b8f3 	b.w	8004e4c <d_print_comp+0x1200>
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd4c 	bl	8003704 <d_print_saw_error>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f041 80e1 	bne.w	8004e36 <d_print_comp+0x11ea>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b42      	cmp	r3, #66	; 0x42
 8003c7a:	f201 80d7 	bhi.w	8004e2c <d_print_comp+0x11e0>
 8003c7e:	a101      	add	r1, pc, #4	; (adr r1, 8003c84 <d_print_comp+0x38>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003d91 	.word	0x08003d91
 8003c88:	08003dc9 	.word	0x08003dc9
 8003c8c:	08003dc9 	.word	0x08003dc9
 8003c90:	08003e0b 	.word	0x08003e0b
 8003c94:	080040eb 	.word	0x080040eb
 8003c98:	080041c5 	.word	0x080041c5
 8003c9c:	08004d2b 	.word	0x08004d2b
 8003ca0:	0800423b 	.word	0x0800423b
 8003ca4:	0800424b 	.word	0x0800424b
 8003ca8:	08004265 	.word	0x08004265
 8003cac:	08004283 	.word	0x08004283
 8003cb0:	080042a1 	.word	0x080042a1
 8003cb4:	080042d9 	.word	0x080042d9
 8003cb8:	080042f7 	.word	0x080042f7
 8003cbc:	08004315 	.word	0x08004315
 8003cc0:	08004333 	.word	0x08004333
 8003cc4:	08004351 	.word	0x08004351
 8003cc8:	0800436f 	.word	0x0800436f
 8003ccc:	0800438d 	.word	0x0800438d
 8003cd0:	080043ab 	.word	0x080043ab
 8003cd4:	080043c9 	.word	0x080043c9
 8003cd8:	080043e7 	.word	0x080043e7
 8003cdc:	08004405 	.word	0x08004405
 8003ce0:	0800441b 	.word	0x0800441b
 8003ce4:	0800441b 	.word	0x0800441b
 8003ce8:	0800441b 	.word	0x0800441b
 8003cec:	0800448b 	.word	0x0800448b
 8003cf0:	0800448b 	.word	0x0800448b
 8003cf4:	0800448b 	.word	0x0800448b
 8003cf8:	0800448b 	.word	0x0800448b
 8003cfc:	0800448b 	.word	0x0800448b
 8003d00:	0800448b 	.word	0x0800448b
 8003d04:	0800448b 	.word	0x0800448b
 8003d08:	0800448b 	.word	0x0800448b
 8003d0c:	0800448b 	.word	0x0800448b
 8003d10:	080044d5 	.word	0x080044d5
 8003d14:	08004515 	.word	0x08004515
 8003d18:	08004525 	.word	0x08004525
 8003d1c:	080045c1 	.word	0x080045c1
 8003d20:	08004713 	.word	0x08004713
 8003d24:	0800475b 	.word	0x0800475b
 8003d28:	08004713 	.word	0x08004713
 8003d2c:	080047bb 	.word	0x080047bb
 8003d30:	080047bb 	.word	0x080047bb
 8003d34:	08004849 	.word	0x08004849
 8003d38:	08004895 	.word	0x08004895
 8003d3c:	080048b1 	.word	0x080048b1
 8003d40:	080048c9 	.word	0x080048c9
 8003d44:	0800490f 	.word	0x0800490f
 8003d48:	08004a0d 	.word	0x08004a0d
 8003d4c:	08004a15 	.word	0x08004a15
 8003d50:	08004a7d 	.word	0x08004a7d
 8003d54:	08004a7d 	.word	0x08004a7d
 8003d58:	08004a85 	.word	0x08004a85
 8003d5c:	08004a85 	.word	0x08004a85
 8003d60:	08004c21 	.word	0x08004c21
 8003d64:	08004c3d 	.word	0x08004c3d
 8003d68:	08004c57 	.word	0x08004c57
 8003d6c:	08004c13 	.word	0x08004c13
 8003d70:	08004c67 	.word	0x08004c67
 8003d74:	08004d55 	.word	0x08004d55
 8003d78:	08004d71 	.word	0x08004d71
 8003d7c:	08004d8d 	.word	0x08004d8d
 8003d80:	08004e2d 	.word	0x08004e2d
 8003d84:	08004dd1 	.word	0x08004dd1
 8003d88:	08004c8d 	.word	0x08004c8d
 8003d8c:	08004dfb 	.word	0x08004dfb
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <d_print_comp+0x166>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4611      	mov	r1, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	f7ff fd09 	bl	80037c0 <d_append_buffer>
 8003dae:	f001 b84d 	b.w	8004e4c <d_print_comp+0x1200>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f001 f848 	bl	8004e54 <d_print_java_identifier>
 8003dc4:	f001 b842 	b.w	8004e4c <d_print_comp+0x1200>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7ff ff3c 	bl	8003c4c <d_print_comp>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <d_print_comp+0x1a4>
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f24a 5100 	movw	r1, #42240	; 0xa500
 8003de6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003dea:	f7ff fd07 	bl	80037fc <d_append_string>
 8003dee:	e004      	b.n	8003dfa <d_print_comp+0x1ae>
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8003df6:	f7ff fcc1 	bl	800377c <d_append_char>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7ff ff23 	bl	8003c4c <d_print_comp>
 8003e06:	f001 b821 	b.w	8004e4c <d_print_comp+0x1200>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e2e:	e05e      	b.n	8003eee <d_print_comp+0x2a2>
 8003e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d904      	bls.n	8003e42 <d_print_comp+0x1f6>
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fc55 	bl	80036e8 <d_print_error>
 8003e3e:	f001 b805 	b.w	8004e4c <d_print_comp+0x1200>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8003e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e50:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003e54:	18cb      	adds	r3, r1, r3
 8003e56:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e60:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e64:	f107 020c 	add.w	r2, r7, #12
 8003e68:	18d2      	adds	r2, r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e74:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e78:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8003e82:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e90:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003e94:	18cb      	adds	r3, r1, r3
 8003e96:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eaa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003eae:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003eb2:	18cb      	adds	r3, r1, r3
 8003eb4:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ebe:	f103 0301 	add.w	r3, r3, #1
 8003ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b1a      	cmp	r3, #26
 8003ece:	d009      	beq.n	8003ee4 <d_print_comp+0x298>
 8003ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b1b      	cmp	r3, #27
 8003ed8:	d004      	beq.n	8003ee4 <d_print_comp+0x298>
 8003eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b1c      	cmp	r3, #28
 8003ee2:	d109      	bne.n	8003ef8 <d_print_comp+0x2ac>
 8003ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d19c      	bne.n	8003e30 <d_print_comp+0x1e4>
 8003ef6:	e000      	b.n	8003efa <d_print_comp+0x2ae>
 8003ef8:	bf00      	nop
 8003efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <d_print_comp+0x2c0>
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fbf0 	bl	80036e8 <d_print_error>
 8003f08:	f000 bfa0 	b.w	8004e4c <d_print_comp+0x1200>
 8003f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d10c      	bne.n	8003f30 <d_print_comp+0x2e4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8003f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f040 8097 	bne.w	800406a <d_print_comp+0x41e>
 8003f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b3f      	cmp	r3, #63	; 0x3f
 8003f4e:	d17a      	bne.n	8004046 <d_print_comp+0x3fa>
 8003f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f5a:	e074      	b.n	8004046 <d_print_comp+0x3fa>
 8003f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d904      	bls.n	8003f6e <d_print_comp+0x322>
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fbbf 	bl	80036e8 <d_print_error>
 8003f6a:	f000 bf6f 	b.w	8004e4c <d_print_comp+0x1200>
 8003f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8003f7e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003f82:	188a      	adds	r2, r1, r2
 8003f84:	f1a2 02c4 	sub.w	r2, r2, #196	; 0xc4
 8003f88:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f8c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003f90:	18cb      	adds	r3, r1, r3
 8003f92:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003f96:	4614      	mov	r4, r2
 8003f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fa6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003faa:	f107 020c 	add.w	r2, r7, #12
 8003fae:	18d2      	adds	r2, r2, r3
 8003fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fb4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fb8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003fbc:	18cb      	adds	r3, r1, r3
 8003fbe:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fcc:	f107 020c 	add.w	r2, r7, #12
 8003fd0:	18d2      	adds	r2, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fdc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fe0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fe4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003fe8:	18d3      	adds	r3, r2, r3
 8003fea:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8003fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ff8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ffc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004000:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004004:	18cb      	adds	r3, r1, r3
 8004006:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004014:	f103 33ff 	add.w	r3, r3, #4294967295
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 800401e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004022:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004026:	18cb      	adds	r3, r1, r3
 8004028:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004032:	f103 0301 	add.w	r3, r3, #1
 8004036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800403a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004044:	e000      	b.n	8004048 <d_print_comp+0x3fc>
 8004046:	bf00      	nop
 8004048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b1a      	cmp	r3, #26
 8004050:	d084      	beq.n	8003f5c <d_print_comp+0x310>
 8004052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b1b      	cmp	r3, #27
 800405a:	f43f af7f 	beq.w	8003f5c <d_print_comp+0x310>
 800405e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b1c      	cmp	r3, #28
 8004066:	f43f af79 	beq.w	8003f5c <d_print_comp+0x310>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4619      	mov	r1, r3
 8004072:	f7ff fdeb 	bl	8003c4c <d_print_comp>
 8004076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b04      	cmp	r3, #4
 800407e:	d129      	bne.n	80040d4 <d_print_comp+0x488>
 8004080:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004088:	e024      	b.n	80040d4 <d_print_comp+0x488>
 800408a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800408e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800409a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800409e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80040a2:	18d3      	adds	r3, r2, r3
 80040a4:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d112      	bne.n	80040d4 <d_print_comp+0x488>
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f04f 0120 	mov.w	r1, #32
 80040b4:	f7ff fb62 	bl	800377c <d_append_char>
 80040b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80040c0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80040c4:	18cb      	adds	r3, r1, r3
 80040c6:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4619      	mov	r1, r3
 80040d0:	f001 f82a 	bl	8005128 <d_print_mod>
 80040d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1d6      	bne.n	800408a <d_print_comp+0x43e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80040e6:	f000 beb1 	b.w	8004e4c <d_print_comp+0x1200>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80040f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d026      	beq.n	8004160 <d_print_comp+0x514>
 8004112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d121      	bne.n	8004160 <d_print_comp+0x514>
 800411c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d11c      	bne.n	8004160 <d_print_comp+0x514>
 8004126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	f24a 5104 	movw	r1, #42244	; 0xa504
 8004132:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004136:	f04f 0206 	mov.w	r2, #6
 800413a:	f004 f85b 	bl	80081f4 <strncmp>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <d_print_comp+0x514>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4619      	mov	r1, r3
 800414c:	f7ff fd7e 	bl	8003c4c <d_print_comp>
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f649 6148 	movw	r1, #40520	; 0x9e48
 8004156:	f6c0 0101 	movt	r1, #2049	; 0x801
 800415a:	f7ff fb4f 	bl	80037fc <d_append_string>
 800415e:	e02a      	b.n	80041b6 <d_print_comp+0x56a>
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004166:	f7ff fd71 	bl	8003c4c <d_print_comp>
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fb72 	bl	8003854 <d_last_char>
 8004170:	4603      	mov	r3, r0
 8004172:	2b3c      	cmp	r3, #60	; 0x3c
 8004174:	d104      	bne.n	8004180 <d_print_comp+0x534>
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f04f 0120 	mov.w	r1, #32
 800417c:	f7ff fafe 	bl	800377c <d_append_char>
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8004186:	f7ff faf9 	bl	800377c <d_append_char>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	f7ff fd5b 	bl	8003c4c <d_print_comp>
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fb5c 	bl	8003854 <d_last_char>
 800419c:	4603      	mov	r3, r0
 800419e:	2b3e      	cmp	r3, #62	; 0x3e
 80041a0:	d104      	bne.n	80041ac <d_print_comp+0x560>
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f04f 0120 	mov.w	r1, #32
 80041a8:	f7ff fae8 	bl	800377c <d_append_char>
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f04f 013e 	mov.w	r1, #62	; 0x3e
 80041b2:	f7ff fae3 	bl	800377c <d_append_char>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80041bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80041c0:	f000 be44 	b.w	8004e4c <d_print_comp+0x1200>
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	f7ff fbee 	bl	80039a8 <d_lookup_template_argument>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00f      	beq.n	80041fa <d_print_comp+0x5ae>
 80041da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b2b      	cmp	r3, #43	; 0x2b
 80041e2:	d10a      	bne.n	80041fa <d_print_comp+0x5ae>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041ea:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80041ee:	4619      	mov	r1, r3
 80041f0:	f7ff fbaa 	bl	8003948 <d_index_template_argument>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <d_print_comp+0x5c0>
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fa70 	bl	80036e8 <d_print_error>
 8004208:	f000 be20 	b.w	8004e4c <d_print_comp+0x1200>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8004228:	f7ff fd10 	bl	8003c4c <d_print_comp>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004232:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004236:	f000 be09 	b.w	8004e4c <d_print_comp+0x1200>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4619      	mov	r1, r3
 8004242:	f7ff fd03 	bl	8003c4c <d_print_comp>
 8004246:	f000 be01 	b.w	8004e4c <d_print_comp+0x1200>
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f04f 017e 	mov.w	r1, #126	; 0x7e
 8004250:	f7ff fa94 	bl	800377c <d_append_char>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4619      	mov	r1, r3
 800425c:	f7ff fcf6 	bl	8003c4c <d_print_comp>
 8004260:	f000 bdf4 	b.w	8004e4c <d_print_comp+0x1200>
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f24a 510c 	movw	r1, #42252	; 0xa50c
 800426a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800426e:	f7ff fac5 	bl	80037fc <d_append_string>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4619      	mov	r1, r3
 800427a:	f7ff fce7 	bl	8003c4c <d_print_comp>
 800427e:	f000 bde5 	b.w	8004e4c <d_print_comp+0x1200>
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f24a 5118 	movw	r1, #42264	; 0xa518
 8004288:	f6c0 0101 	movt	r1, #2049	; 0x801
 800428c:	f7ff fab6 	bl	80037fc <d_append_string>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	f7ff fcd8 	bl	8003c4c <d_print_comp>
 800429c:	f000 bdd6 	b.w	8004e4c <d_print_comp+0x1200>
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f24a 5124 	movw	r1, #42276	; 0xa524
 80042a6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042aa:	f7ff faa7 	bl	80037fc <d_append_string>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7ff fcc9 	bl	8003c4c <d_print_comp>
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f24a 5140 	movw	r1, #42304	; 0xa540
 80042c0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042c4:	f7ff fa9a 	bl	80037fc <d_append_string>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7ff fcbc 	bl	8003c4c <d_print_comp>
 80042d4:	f000 bdba 	b.w	8004e4c <d_print_comp+0x1200>
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f24a 5148 	movw	r1, #42312	; 0xa548
 80042de:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042e2:	f7ff fa8b 	bl	80037fc <d_append_string>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f7ff fcad 	bl	8003c4c <d_print_comp>
 80042f2:	f000 bdab 	b.w	8004e4c <d_print_comp+0x1200>
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f24a 5158 	movw	r1, #42328	; 0xa558
 80042fc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004300:	f7ff fa7c 	bl	80037fc <d_append_string>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4619      	mov	r1, r3
 800430c:	f7ff fc9e 	bl	8003c4c <d_print_comp>
 8004310:	f000 bd9c 	b.w	8004e4c <d_print_comp+0x1200>
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f24a 516c 	movw	r1, #42348	; 0xa56c
 800431a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800431e:	f7ff fa6d 	bl	80037fc <d_append_string>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	f7ff fc8f 	bl	8003c4c <d_print_comp>
 800432e:	f000 bd8d 	b.w	8004e4c <d_print_comp+0x1200>
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f24a 5180 	movw	r1, #42368	; 0xa580
 8004338:	f6c0 0101 	movt	r1, #2049	; 0x801
 800433c:	f7ff fa5e 	bl	80037fc <d_append_string>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4619      	mov	r1, r3
 8004348:	f7ff fc80 	bl	8003c4c <d_print_comp>
 800434c:	f000 bd7e 	b.w	8004e4c <d_print_comp+0x1200>
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f24a 5198 	movw	r1, #42392	; 0xa598
 8004356:	f6c0 0101 	movt	r1, #2049	; 0x801
 800435a:	f7ff fa4f 	bl	80037fc <d_append_string>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	f7ff fc71 	bl	8003c4c <d_print_comp>
 800436a:	f000 bd6f 	b.w	8004e4c <d_print_comp+0x1200>
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f24a 51ac 	movw	r1, #42412	; 0xa5ac
 8004374:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004378:	f7ff fa40 	bl	80037fc <d_append_string>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4619      	mov	r1, r3
 8004384:	f7ff fc62 	bl	8003c4c <d_print_comp>
 8004388:	f000 bd60 	b.w	8004e4c <d_print_comp+0x1200>
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f24a 51c8 	movw	r1, #42440	; 0xa5c8
 8004392:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004396:	f7ff fa31 	bl	80037fc <d_append_string>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7ff fc53 	bl	8003c4c <d_print_comp>
 80043a6:	f000 bd51 	b.w	8004e4c <d_print_comp+0x1200>
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f24a 51d8 	movw	r1, #42456	; 0xa5d8
 80043b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80043b4:	f7ff fa22 	bl	80037fc <d_append_string>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4619      	mov	r1, r3
 80043c0:	f7ff fc44 	bl	8003c4c <d_print_comp>
 80043c4:	f000 bd42 	b.w	8004e4c <d_print_comp+0x1200>
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f24a 51ec 	movw	r1, #42476	; 0xa5ec
 80043ce:	f6c0 0101 	movt	r1, #2049	; 0x801
 80043d2:	f7ff fa13 	bl	80037fc <d_append_string>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4619      	mov	r1, r3
 80043de:	f7ff fc35 	bl	8003c4c <d_print_comp>
 80043e2:	f000 bd33 	b.w	8004e4c <d_print_comp+0x1200>
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f24a 6108 	movw	r1, #42504	; 0xa608
 80043ec:	f6c0 0101 	movt	r1, #2049	; 0x801
 80043f0:	f7ff fa04 	bl	80037fc <d_append_string>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4619      	mov	r1, r3
 80043fc:	f7ff fc26 	bl	8003c4c <d_print_comp>
 8004400:	f000 bd24 	b.w	8004e4c <d_print_comp+0x1200>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	f7ff f9d5 	bl	80037c0 <d_append_buffer>
 8004416:	f000 bd19 	b.w	8004e4c <d_print_comp+0x1200>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004424:	e02b      	b.n	800447e <d_print_comp+0x832>
 8004426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d121      	bne.n	8004474 <d_print_comp+0x828>
 8004430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b17      	cmp	r3, #23
 800443a:	d00b      	beq.n	8004454 <d_print_comp+0x808>
 800443c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b18      	cmp	r3, #24
 8004446:	d005      	beq.n	8004454 <d_print_comp+0x808>
 8004448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b19      	cmp	r3, #25
 8004452:	d119      	bne.n	8004488 <d_print_comp+0x83c>
 8004454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <d_print_comp+0x828>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4619      	mov	r1, r3
 800446c:	f7ff fbee 	bl	8003c4c <d_print_comp>
 8004470:	f000 bcec 	b.w	8004e4c <d_print_comp+0x1200>
 8004474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800447e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1cf      	bne.n	8004426 <d_print_comp+0x7da>
 8004486:	e000      	b.n	800448a <d_print_comp+0x83e>
 8004488:	bf00      	nop
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004498:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	673b      	str	r3, [r7, #112]	; 0x70
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	677b      	str	r3, [r7, #116]	; 0x74
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80044ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7ff fbc9 	bl	8003c4c <d_print_comp>
 80044ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <d_print_comp+0x87c>
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	f000 fe30 	bl	8005128 <d_print_mod>
 80044c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80044d0:	f000 bcbc 	b.w	8004e4c <d_print_comp+0x1200>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10c      	bne.n	80044fa <d_print_comp+0x8ae>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	f7ff f965 	bl	80037c0 <d_append_buffer>
 80044f6:	f000 bca9 	b.w	8004e4c <d_print_comp+0x1200>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4611      	mov	r1, r2
 800450a:	461a      	mov	r2, r3
 800450c:	f7ff f958 	bl	80037c0 <d_append_buffer>
 8004510:	f000 bc9c 	b.w	8004e4c <d_print_comp+0x1200>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4619      	mov	r1, r3
 800451c:	f7ff fb96 	bl	8003c4c <d_print_comp>
 8004520:	f000 bc94 	b.w	8004e4c <d_print_comp+0x1200>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <d_print_comp+0x8f4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fede 	bl	80052fc <d_print_function_type>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02a      	beq.n	800459e <d_print_comp+0x952>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004556:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	663b      	str	r3, [r7, #96]	; 0x60
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	667b      	str	r3, [r7, #100]	; 0x64
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800456a:	66bb      	str	r3, [r7, #104]	; 0x68
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4619      	mov	r1, r3
 8004574:	f7ff fb6a 	bl	8003c4c <d_print_comp>
 8004578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 8459 	bne.w	8004e3a <d_print_comp+0x11ee>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <d_print_comp+0x952>
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f04f 0120 	mov.w	r1, #32
 800459a:	f7ff f8ef 	bl	800377c <d_append_char>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8449 	bne.w	8004e3e <d_print_comp+0x11f2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fea0 	bl	80052fc <d_print_function_type>
 80045bc:	f000 bc3f 	b.w	8004e3e <d_print_comp+0x11f2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80045c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f107 020c 	add.w	r2, r7, #12
 80045d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	f04f 0301 	mov.w	r3, #1
 80045f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045fc:	e043      	b.n	8004686 <d_print_comp+0xa3a>
 80045fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d139      	bne.n	800467c <d_print_comp+0xa30>
 8004608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800460c:	2b03      	cmp	r3, #3
 800460e:	d904      	bls.n	800461a <d_print_comp+0x9ce>
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff f869 	bl	80036e8 <d_print_error>
 8004616:	f000 bc19 	b.w	8004e4c <d_print_comp+0x1200>
 800461a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800461e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004622:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004626:	18d3      	adds	r3, r2, r3
 8004628:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 800462c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004630:	4614      	mov	r4, r2
 8004632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800463e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004642:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004646:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800464a:	18cb      	adds	r3, r1, r3
 800464c:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004656:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800465a:	f107 020c 	add.w	r2, r7, #12
 800465e:	18d2      	adds	r2, r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800466a:	f04f 0201 	mov.w	r2, #1
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004674:	f103 0301 	add.w	r3, r3, #1
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800467c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <d_print_comp+0xa66>
 800468e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b17      	cmp	r3, #23
 8004698:	d0b1      	beq.n	80045fe <d_print_comp+0x9b2>
 800469a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b18      	cmp	r3, #24
 80046a4:	d0ab      	beq.n	80045fe <d_print_comp+0x9b2>
 80046a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b19      	cmp	r3, #25
 80046b0:	d0a5      	beq.n	80045fe <d_print_comp+0x9b2>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	f7ff fac7 	bl	8003c4c <d_print_comp>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80046c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <d_print_comp+0xaac>
 80046ce:	e3bd      	b.n	8004e4c <d_print_comp+0x1200>
 80046d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80046d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046e4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4619      	mov	r1, r3
 80046f4:	f000 fd18 	bl	8005128 <d_print_mod>
 80046f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d8e7      	bhi.n	80046d0 <d_print_comp+0xa84>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fea0 	bl	8005450 <d_print_array_type>
 8004710:	e39c      	b.n	8004e4c <d_print_comp+0x1200>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004720:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	657b      	str	r3, [r7, #84]	; 0x54
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004734:	65bb      	str	r3, [r7, #88]	; 0x58
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	f7ff fa85 	bl	8003c4c <d_print_comp>
 8004742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <d_print_comp+0xb04>
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	f000 fcec 	bl	8005128 <d_print_mod>
 8004750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004758:	e378      	b.n	8004e4c <d_print_comp+0x1200>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	895b      	ldrh	r3, [r3, #10]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <d_print_comp+0xb24>
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f24a 611c 	movw	r1, #42524	; 0xa61c
 8004768:	f6c0 0101 	movt	r1, #2049	; 0x801
 800476c:	f7ff f846 	bl	80037fc <d_append_string>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4ba4      	ldr	r3, [pc, #656]	; (8004a08 <d_print_comp+0xdbc>)
 8004778:	429a      	cmp	r2, r3
 800477a:	d00a      	beq.n	8004792 <d_print_comp+0xb46>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4619      	mov	r1, r3
 8004784:	f7ff fa62 	bl	8003c4c <d_print_comp>
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f04f 0120 	mov.w	r1, #32
 800478e:	f7fe fff5 	bl	800377c <d_append_char>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	891b      	ldrh	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <d_print_comp+0xb5e>
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f24a 6124 	movw	r1, #42532	; 0xa624
 80047a0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80047a4:	f7ff f82a 	bl	80037fc <d_append_string>
 80047a8:	e350      	b.n	8004e4c <d_print_comp+0x1200>
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f24a 612c 	movw	r1, #42540	; 0xa62c
 80047b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80047b4:	f7ff f822 	bl	80037fc <d_append_string>
 80047b8:	e348      	b.n	8004e4c <d_print_comp+0x1200>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <d_print_comp+0xb82>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7ff fa3f 	bl	8003c4c <d_print_comp>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8335 	beq.w	8004e42 <d_print_comp+0x11f6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80047de:	2bfd      	cmp	r3, #253	; 0xfd
 80047e0:	d902      	bls.n	80047e8 <d_print_comp+0xb9c>
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe ffa0 	bl	8003728 <d_print_flush>
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f24a 6134 	movw	r1, #42548	; 0xa634
 80047ee:	f6c0 0101 	movt	r1, #2049	; 0x801
 80047f2:	f7ff f803 	bl	80037fc <d_append_string>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80047fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	f7ff fa1b 	bl	8003c4c <d_print_comp>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004820:	429a      	cmp	r2, r3
 8004822:	f040 830e 	bne.w	8004e42 <d_print_comp+0x11f6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800482c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 8306 	bne.w	8004e42 <d_print_comp+0x11f6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800483c:	f1a3 0202 	sub.w	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8004846:	e2fc      	b.n	8004e42 <d_print_comp+0x11f6>
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f24a 6138 	movw	r1, #42552	; 0xa638
 800484e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004852:	f7fe ffd3 	bl	80037fc <d_append_string>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004862:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004866:	2b60      	cmp	r3, #96	; 0x60
 8004868:	d908      	bls.n	800487c <d_print_comp+0xc30>
 800486a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800486e:	2b7a      	cmp	r3, #122	; 0x7a
 8004870:	d804      	bhi.n	800487c <d_print_comp+0xc30>
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f04f 0120 	mov.w	r1, #32
 8004878:	f7fe ff80 	bl	800377c <d_append_char>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4611      	mov	r1, r2
 800488c:	461a      	mov	r2, r3
 800488e:	f7fe ff97 	bl	80037c0 <d_append_buffer>
 8004892:	e2db      	b.n	8004e4c <d_print_comp+0x1200>
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f24a 6144 	movw	r1, #42564	; 0xa644
 800489a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800489e:	f7fe ffad 	bl	80037fc <d_append_string>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7ff f9cf 	bl	8003c4c <d_print_comp>
 80048ae:	e2cd      	b.n	8004e4c <d_print_comp+0x1200>
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f24a 6144 	movw	r1, #42564	; 0xa644
 80048b6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80048ba:	f7fe ff9f 	bl	80037fc <d_append_string>
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	f000 fe47 	bl	8005554 <d_print_cast>
 80048c6:	e2c1      	b.n	8004e4c <d_print_comp+0x1200>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b2e      	cmp	r3, #46	; 0x2e
 80048d0:	d006      	beq.n	80048e0 <d_print_comp+0xc94>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4619      	mov	r1, r3
 80048da:	f000 fe1d 	bl	8005518 <d_print_expr_op>
 80048de:	e00f      	b.n	8004900 <d_print_comp+0xcb4>
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f04f 0128 	mov.w	r1, #40	; 0x28
 80048e6:	f7fe ff49 	bl	800377c <d_append_char>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4619      	mov	r1, r3
 80048f2:	f000 fe2f 	bl	8005554 <d_print_cast>
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f04f 0129 	mov.w	r1, #41	; 0x29
 80048fc:	f7fe ff3e 	bl	800377c <d_append_char>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4619      	mov	r1, r3
 8004908:	f7ff f974 	bl	8003bf4 <d_print_subexpr>
 800490c:	e29e      	b.n	8004e4c <d_print_comp+0x1200>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b31      	cmp	r3, #49	; 0x31
 8004916:	d003      	beq.n	8004920 <d_print_comp+0xcd4>
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fe fee5 	bl	80036e8 <d_print_error>
 800491e:	e295      	b.n	8004e4c <d_print_comp+0x1200>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b2c      	cmp	r3, #44	; 0x2c
 8004928:	d111      	bne.n	800494e <d_print_comp+0xd02>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10b      	bne.n	800494e <d_print_comp+0xd02>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b3e      	cmp	r3, #62	; 0x3e
 8004942:	d104      	bne.n	800494e <d_print_comp+0xd02>
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f04f 0128 	mov.w	r1, #40	; 0x28
 800494a:	f7fe ff17 	bl	800377c <d_append_char>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4619      	mov	r1, r3
 8004958:	f7ff f94c 	bl	8003bf4 <d_print_subexpr>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f649 6144 	movw	r1, #40516	; 0x9e44
 800496a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800496e:	f003 fac5 	bl	8007efc <strcmp>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <d_print_comp+0xd50>
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f04f 015b 	mov.w	r1, #91	; 0x5b
 800497e:	f7fe fefd 	bl	800377c <d_append_char>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	f7ff f95e 	bl	8003c4c <d_print_comp>
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004996:	f7fe fef1 	bl	800377c <d_append_char>
 800499a:	e01a      	b.n	80049d2 <d_print_comp+0xd86>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f649 51c8 	movw	r1, #40392	; 0x9dc8
 80049aa:	f6c0 0101 	movt	r1, #2049	; 0x801
 80049ae:	f003 faa5 	bl	8007efc <strcmp>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <d_print_comp+0xd78>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4619      	mov	r1, r3
 80049c0:	f000 fdaa 	bl	8005518 <d_print_expr_op>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7ff f911 	bl	8003bf4 <d_print_subexpr>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b2c      	cmp	r3, #44	; 0x2c
 80049da:	f040 8234 	bne.w	8004e46 <d_print_comp+0x11fa>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	f040 822d 	bne.w	8004e46 <d_print_comp+0x11fa>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b3e      	cmp	r3, #62	; 0x3e
 80049f8:	f040 8225 	bne.w	8004e46 <d_print_comp+0x11fa>
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004a02:	f7fe febb 	bl	800377c <d_append_char>
 8004a06:	e21e      	b.n	8004e46 <d_print_comp+0x11fa>
 8004a08:	08019b88 	.word	0x08019b88
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe fe6b 	bl	80036e8 <d_print_error>
 8004a12:	e21b      	b.n	8004e4c <d_print_comp+0x1200>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b33      	cmp	r3, #51	; 0x33
 8004a1c:	d105      	bne.n	8004a2a <d_print_comp+0xdde>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b34      	cmp	r3, #52	; 0x34
 8004a28:	d003      	beq.n	8004a32 <d_print_comp+0xde6>
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe fe5c 	bl	80036e8 <d_print_error>
 8004a30:	e20c      	b.n	8004e4c <d_print_comp+0x1200>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7ff f8da 	bl	8003bf4 <d_print_subexpr>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f000 fd66 	bl	8005518 <d_print_expr_op>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4619      	mov	r1, r3
 8004a58:	f7ff f8cc 	bl	8003bf4 <d_print_subexpr>
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f24a 6150 	movw	r1, #42576	; 0xa650
 8004a62:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004a66:	f7fe fec9 	bl	80037fc <d_append_string>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f7ff f8bd 	bl	8003bf4 <d_print_subexpr>
 8004a7a:	e1e7      	b.n	8004e4c <d_print_comp+0x1200>
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fe fe33 	bl	80036e8 <d_print_error>
 8004a82:	e1e3      	b.n	8004e4c <d_print_comp+0x1200>
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b23      	cmp	r3, #35	; 0x23
 8004a94:	f040 808a 	bne.w	8004bac <d_print_comp+0xf60>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	7c1b      	ldrb	r3, [r3, #16]
 8004aa0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8004aa4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	db7a      	blt.n	8004ba2 <d_print_comp+0xf56>
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	dd02      	ble.n	8004ab6 <d_print_comp+0xe6a>
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d04d      	beq.n	8004b50 <d_print_comp+0xf04>
 8004ab4:	e075      	b.n	8004ba2 <d_print_comp+0xf56>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d172      	bne.n	8004ba6 <d_print_comp+0xf5a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b36      	cmp	r3, #54	; 0x36
 8004ac6:	d104      	bne.n	8004ad2 <d_print_comp+0xe86>
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8004ace:	f7fe fe55 	bl	800377c <d_append_char>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f7ff f8b7 	bl	8003c4c <d_print_comp>
 8004ade:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004ae2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d830      	bhi.n	8004b4c <d_print_comp+0xf00>
 8004aea:	a101      	add	r1, pc, #4	; (adr r1, 8004af0 <d_print_comp+0xea4>)
 8004aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af0:	08004b05 	.word	0x08004b05
 8004af4:	08004b11 	.word	0x08004b11
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004b3d 	.word	0x08004b3d
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f04f 0175 	mov.w	r1, #117	; 0x75
 8004b0a:	f7fe fe37 	bl	800377c <d_append_char>
 8004b0e:	e01e      	b.n	8004b4e <d_print_comp+0xf02>
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f04f 016c 	mov.w	r1, #108	; 0x6c
 8004b16:	f7fe fe31 	bl	800377c <d_append_char>
 8004b1a:	e018      	b.n	8004b4e <d_print_comp+0xf02>
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f24a 6154 	movw	r1, #42580	; 0xa654
 8004b22:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b26:	f7fe fe69 	bl	80037fc <d_append_string>
 8004b2a:	e010      	b.n	8004b4e <d_print_comp+0xf02>
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f24a 6158 	movw	r1, #42584	; 0xa658
 8004b32:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b36:	f7fe fe61 	bl	80037fc <d_append_string>
 8004b3a:	e008      	b.n	8004b4e <d_print_comp+0xf02>
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f24a 615c 	movw	r1, #42588	; 0xa65c
 8004b42:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b46:	f7fe fe59 	bl	80037fc <d_append_string>
 8004b4a:	e000      	b.n	8004b4e <d_print_comp+0xf02>
 8004b4c:	bf00      	nop
 8004b4e:	e17d      	b.n	8004e4c <d_print_comp+0x1200>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d127      	bne.n	8004baa <d_print_comp+0xf5e>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d122      	bne.n	8004baa <d_print_comp+0xf5e>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b35      	cmp	r3, #53	; 0x35
 8004b6a:	d11e      	bne.n	8004baa <d_print_comp+0xf5e>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d002      	beq.n	8004b7e <d_print_comp+0xf32>
 8004b78:	2b31      	cmp	r3, #49	; 0x31
 8004b7a:	d008      	beq.n	8004b8e <d_print_comp+0xf42>
 8004b7c:	e00f      	b.n	8004b9e <d_print_comp+0xf52>
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f24a 6160 	movw	r1, #42592	; 0xa660
 8004b84:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b88:	f7fe fe38 	bl	80037fc <d_append_string>
 8004b8c:	e15e      	b.n	8004e4c <d_print_comp+0x1200>
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f24a 6168 	movw	r1, #42600	; 0xa668
 8004b94:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004b98:	f7fe fe30 	bl	80037fc <d_append_string>
 8004b9c:	e156      	b.n	8004e4c <d_print_comp+0x1200>
 8004b9e:	bf00      	nop
 8004ba0:	e003      	b.n	8004baa <d_print_comp+0xf5e>
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <d_print_comp+0xf60>
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <d_print_comp+0xf60>
 8004baa:	bf00      	nop
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f04f 0128 	mov.w	r1, #40	; 0x28
 8004bb2:	f7fe fde3 	bl	800377c <d_append_char>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f7ff f845 	bl	8003c4c <d_print_comp>
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004bc8:	f7fe fdd8 	bl	800377c <d_append_char>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b36      	cmp	r3, #54	; 0x36
 8004bd2:	d104      	bne.n	8004bde <d_print_comp+0xf92>
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8004bda:	f7fe fdcf 	bl	800377c <d_append_char>
 8004bde:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d104      	bne.n	8004bf0 <d_print_comp+0xfa4>
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8004bec:	f7fe fdc6 	bl	800377c <d_append_char>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f7ff f828 	bl	8003c4c <d_print_comp>
 8004bfc:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	f040 8122 	bne.w	8004e4a <d_print_comp+0x11fe>
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004c0c:	f7fe fdb6 	bl	800377c <d_append_char>
 8004c10:	e11b      	b.n	8004e4a <d_print_comp+0x11fe>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fe fe01 	bl	8003820 <d_append_num>
 8004c1e:	e115      	b.n	8004e4c <d_print_comp+0x1200>
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f24a 6170 	movw	r1, #42608	; 0xa670
 8004c26:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004c2a:	f7fe fde7 	bl	80037fc <d_append_string>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7ff f809 	bl	8003c4c <d_print_comp>
 8004c3a:	e107      	b.n	8004e4c <d_print_comp+0x1200>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4619      	mov	r1, r3
 8004c44:	f7ff f802 	bl	8003c4c <d_print_comp>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7fe fffc 	bl	8003c4c <d_print_comp>
 8004c54:	e0fa      	b.n	8004e4c <d_print_comp+0x1200>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fe fd8c 	bl	800377c <d_append_char>
 8004c64:	e0f2      	b.n	8004e4c <d_print_comp+0x1200>
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f24a 6180 	movw	r1, #42624	; 0xa680
 8004c6c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004c70:	f7fe fdc4 	bl	80037fc <d_append_string>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f7fe ffe6 	bl	8003c4c <d_print_comp>
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004c86:	f7fe fd79 	bl	800377c <d_append_char>
 8004c8a:	e0df      	b.n	8004e4c <d_print_comp+0x1200>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7fe feaa 	bl	80039ec <d_find_pack>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <d_print_comp+0x1076>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7fe ffa1 	bl	8003bf4 <d_print_subexpr>
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f649 218c 	movw	r1, #39564	; 0x9a8c
 8004cb8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004cbc:	f7fe fd9e 	bl	80037fc <d_append_string>
 8004cc0:	e0c4      	b.n	8004e4c <d_print_comp+0x1200>
 8004cc2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004cc6:	f7fe ff73 	bl	8003bb0 <d_pack_length>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cde:	e01d      	b.n	8004d1c <d_print_comp+0x10d0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ce6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	f7fe ffad 	bl	8003c4c <d_print_comp>
 8004cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf6:	f103 32ff 	add.w	r2, r3, #4294967295
 8004cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	dd06      	ble.n	8004d10 <d_print_comp+0x10c4>
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f24a 6134 	movw	r1, #42548	; 0xa634
 8004d08:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d0c:	f7fe fd76 	bl	80037fc <d_append_string>
 8004d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d14:	f103 0301 	add.w	r3, r3, #1
 8004d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d24:	429a      	cmp	r2, r3
 8004d26:	dbdb      	blt.n	8004ce0 <d_print_comp+0x1094>
 8004d28:	e090      	b.n	8004e4c <d_print_comp+0x1200>
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f24a 618c 	movw	r1, #42636	; 0xa68c
 8004d30:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d34:	f7fe fd62 	bl	80037fc <d_append_string>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f103 0301 	add.w	r3, r3, #1
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7fe fd6c 	bl	8003820 <d_append_num>
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004d4e:	f7fe fd15 	bl	800377c <d_append_char>
 8004d52:	e07b      	b.n	8004e4c <d_print_comp+0x1200>
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f24a 6194 	movw	r1, #42644	; 0xa694
 8004d5a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d5e:	f7fe fd4d 	bl	80037fc <d_append_string>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fe ff6f 	bl	8003c4c <d_print_comp>
 8004d6e:	e06d      	b.n	8004e4c <d_print_comp+0x1200>
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f24a 61b4 	movw	r1, #42676	; 0xa6b4
 8004d76:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d7a:	f7fe fd3f 	bl	80037fc <d_append_string>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f7fe ff61 	bl	8003c4c <d_print_comp>
 8004d8a:	e05f      	b.n	8004e4c <d_print_comp+0x1200>
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f24a 61d4 	movw	r1, #42708	; 0xa6d4
 8004d92:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004d96:	f7fe fd31 	bl	80037fc <d_append_string>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f7fe ff53 	bl	8003c4c <d_print_comp>
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f24a 61e0 	movw	r1, #42720	; 0xa6e0
 8004dac:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004db0:	f7fe fd24 	bl	80037fc <d_append_string>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f103 0301 	add.w	r3, r3, #1
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fe fd2e 	bl	8003820 <d_append_num>
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004dca:	f7fe fcd7 	bl	800377c <d_append_char>
 8004dce:	e03d      	b.n	8004e4c <d_print_comp+0x1200>
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f24a 61e4 	movw	r1, #42724	; 0xa6e4
 8004dd6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004dda:	f7fe fd0f 	bl	80037fc <d_append_string>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f103 0301 	add.w	r3, r3, #1
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4619      	mov	r1, r3
 8004dea:	f7fe fd19 	bl	8003820 <d_append_num>
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004df4:	f7fe fcc2 	bl	800377c <d_append_char>
 8004df8:	e028      	b.n	8004e4c <d_print_comp+0x1200>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fe ff23 	bl	8003c4c <d_print_comp>
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f24a 61f4 	movw	r1, #42740	; 0xa6f4
 8004e0c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004e10:	f7fe fcf4 	bl	80037fc <d_append_string>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7fe ff16 	bl	8003c4c <d_print_comp>
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004e26:	f7fe fca9 	bl	800377c <d_append_char>
 8004e2a:	e00f      	b.n	8004e4c <d_print_comp+0x1200>
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fe fc5b 	bl	80036e8 <d_print_error>
 8004e32:	bf00      	nop
 8004e34:	e00a      	b.n	8004e4c <d_print_comp+0x1200>
 8004e36:	bf00      	nop
 8004e38:	e008      	b.n	8004e4c <d_print_comp+0x1200>
 8004e3a:	bf00      	nop
 8004e3c:	e006      	b.n	8004e4c <d_print_comp+0x1200>
 8004e3e:	bf00      	nop
 8004e40:	e004      	b.n	8004e4c <d_print_comp+0x1200>
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <d_print_comp+0x1200>
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <d_print_comp+0x1200>
 8004e4a:	bf00      	nop
 8004e4c:	f107 07d4 	add.w	r7, r7, #212	; 0xd4
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <d_print_java_identifier>:
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6c:	e071      	b.n	8004f52 <d_print_java_identifier+0xfe>
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	dd62      	ble.n	8004f3e <d_print_java_identifier+0xea>
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b5f      	cmp	r3, #95	; 0x5f
 8004e7e:	d15e      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	f103 0301 	add.w	r3, r3, #1
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b5f      	cmp	r3, #95	; 0x5f
 8004e8a:	d158      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	f103 0302 	add.w	r3, r3, #2
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b55      	cmp	r3, #85	; 0x55
 8004e96:	d152      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	f103 0303 	add.w	r3, r3, #3
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e032      	b.n	8004f0e <d_print_java_identifier+0xba>
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b2f      	cmp	r3, #47	; 0x2f
 8004eae:	d909      	bls.n	8004ec4 <d_print_java_identifier+0x70>
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b39      	cmp	r3, #57	; 0x39
 8004eb6:	d805      	bhi.n	8004ec4 <d_print_java_identifier+0x70>
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e01a      	b.n	8004efa <d_print_java_identifier+0xa6>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d909      	bls.n	8004ee0 <d_print_java_identifier+0x8c>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b46      	cmp	r3, #70	; 0x46
 8004ed2:	d805      	bhi.n	8004ee0 <d_print_java_identifier+0x8c>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e00c      	b.n	8004efa <d_print_java_identifier+0xa6>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d916      	bls.n	8004f16 <d_print_java_identifier+0xc2>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b66      	cmp	r3, #102	; 0x66
 8004eee:	d812      	bhi.n	8004f16 <d_print_java_identifier+0xc2>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f1a3 0357 	sub.w	r3, r3, #87	; 0x57
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	ea4f 1203 	mov.w	r2, r3, lsl #4
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	18d3      	adds	r3, r2, r3
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f103 0301 	add.w	r3, r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d3c8      	bcc.n	8004ea8 <d_print_java_identifier+0x54>
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20f      	bcs.n	8004f3e <d_print_java_identifier+0xea>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b5f      	cmp	r3, #95	; 0x5f
 8004f24:	d10b      	bne.n	8004f3e <d_print_java_identifier+0xea>
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	2bff      	cmp	r3, #255	; 0xff
 8004f2a:	d808      	bhi.n	8004f3e <d_print_java_identifier+0xea>
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fe fc22 	bl	800377c <d_append_char>
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3c:	e005      	b.n	8004f4a <d_print_java_identifier+0xf6>
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7fe fc19 	bl	800377c <d_append_char>
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	f103 0301 	add.w	r3, r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d389      	bcc.n	8004e6e <d_print_java_identifier+0x1a>
 8004f5a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <d_print_mod_list>:
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80d2 	beq.w	800511c <d_print_mod_list+0x1b8>
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7fe fbc3 	bl	8003704 <d_print_saw_error>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 80cb 	bne.w	800511c <d_print_mod_list+0x1b8>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d111      	bne.n	8004fb2 <d_print_mod_list+0x4e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <d_print_mod_list+0x5e>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b1a      	cmp	r3, #26
 8004f9c:	d009      	beq.n	8004fb2 <d_print_mod_list+0x4e>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b1b      	cmp	r3, #27
 8004fa6:	d004      	beq.n	8004fb2 <d_print_mod_list+0x4e>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b1c      	cmp	r3, #28
 8004fb0:	d107      	bne.n	8004fc2 <d_print_mod_list+0x5e>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	f7ff ffd2 	bl	8004f64 <d_print_mod_list>
 8004fc0:	e0ad      	b.n	800511e <d_print_mod_list+0x1ba>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f04f 0201 	mov.w	r2, #1
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b25      	cmp	r3, #37	; 0x25
 8004fe4:	d10d      	bne.n	8005002 <d_print_mod_list+0x9e>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 f982 	bl	80052fc <d_print_function_type>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005000:	e08d      	b.n	800511e <d_print_mod_list+0x1ba>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b26      	cmp	r3, #38	; 0x26
 800500a:	d10d      	bne.n	8005028 <d_print_mod_list+0xc4>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	f000 fa19 	bl	8005450 <d_print_array_type>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005026:	e07a      	b.n	800511e <d_print_mod_list+0x1ba>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d162      	bne.n	80050f8 <d_print_mod_list+0x194>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	4619      	mov	r1, r3
 800504e:	f7fe fdfd 	bl	8003c4c <d_print_comp>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <d_print_mod_list+0x112>
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f24a 5100 	movw	r1, #42240	; 0xa500
 800506c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005070:	f7fe fbc4 	bl	80037fc <d_append_string>
 8005074:	e004      	b.n	8005080 <d_print_mod_list+0x11c>
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800507c:	f7fe fb7e 	bl	800377c <d_append_char>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b3f      	cmp	r3, #63	; 0x3f
 800508e:	d11d      	bne.n	80050cc <d_print_mod_list+0x168>
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f24a 7100 	movw	r1, #42752	; 0xa700
 8005096:	f6c0 0101 	movt	r1, #2049	; 0x801
 800509a:	f7fe fbaf 	bl	80037fc <d_append_string>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f103 0301 	add.w	r3, r3, #1
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f7fe fbb9 	bl	8003820 <d_append_num>
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f24a 7110 	movw	r1, #42768	; 0xa710
 80050b4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80050b8:	f7fe fba0 	bl	80037fc <d_append_string>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e003      	b.n	80050cc <d_print_mod_list+0x168>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e000      	b.n	80050ce <d_print_mod_list+0x16a>
 80050cc:	bf00      	nop
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b1a      	cmp	r3, #26
 80050d4:	d0f6      	beq.n	80050c4 <d_print_mod_list+0x160>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b1b      	cmp	r3, #27
 80050dc:	d0f2      	beq.n	80050c4 <d_print_mod_list+0x160>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b1c      	cmp	r3, #28
 80050e4:	d0ee      	beq.n	80050c4 <d_print_mod_list+0x160>
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	69f9      	ldr	r1, [r7, #28]
 80050ea:	f7fe fdaf 	bl	8003c4c <d_print_comp>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80050f6:	e012      	b.n	800511e <d_print_mod_list+0x1ba>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	4619      	mov	r1, r3
 8005100:	f000 f812 	bl	8005128 <d_print_mod>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	f7ff ff25 	bl	8004f64 <d_print_mod_list>
 800511a:	e000      	b.n	800511e <d_print_mod_list+0x1ba>
 800511c:	bf00      	nop
 800511e:	f107 0720 	add.w	r7, r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop

08005128 <d_print_mod>:
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f1a3 0303 	sub.w	r3, r3, #3
 800513a:	2b26      	cmp	r3, #38	; 0x26
 800513c:	f200 80d3 	bhi.w	80052e6 <d_print_mod+0x1be>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <d_print_mod+0x20>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	080052b3 	.word	0x080052b3
 800514c:	080052e7 	.word	0x080052e7
 8005150:	080052e7 	.word	0x080052e7
 8005154:	080052e7 	.word	0x080052e7
 8005158:	080052e7 	.word	0x080052e7
 800515c:	080052e7 	.word	0x080052e7
 8005160:	080052e7 	.word	0x080052e7
 8005164:	080052e7 	.word	0x080052e7
 8005168:	080052e7 	.word	0x080052e7
 800516c:	080052e7 	.word	0x080052e7
 8005170:	080052e7 	.word	0x080052e7
 8005174:	080052e7 	.word	0x080052e7
 8005178:	080052e7 	.word	0x080052e7
 800517c:	080052e7 	.word	0x080052e7
 8005180:	080052e7 	.word	0x080052e7
 8005184:	080052e7 	.word	0x080052e7
 8005188:	080052e7 	.word	0x080052e7
 800518c:	080052e7 	.word	0x080052e7
 8005190:	080052e7 	.word	0x080052e7
 8005194:	080052e7 	.word	0x080052e7
 8005198:	080051e5 	.word	0x080051e5
 800519c:	080051f5 	.word	0x080051f5
 80051a0:	08005205 	.word	0x08005205
 80051a4:	080051e5 	.word	0x080051e5
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005215 	.word	0x08005215
 80051b4:	0800522d 	.word	0x0800522d
 80051b8:	08005245 	.word	0x08005245
 80051bc:	08005251 	.word	0x08005251
 80051c0:	08005261 	.word	0x08005261
 80051c4:	08005271 	.word	0x08005271
 80051c8:	080052e7 	.word	0x080052e7
 80051cc:	080052e7 	.word	0x080052e7
 80051d0:	080052e7 	.word	0x080052e7
 80051d4:	080052e7 	.word	0x080052e7
 80051d8:	08005281 	.word	0x08005281
 80051dc:	080052e7 	.word	0x080052e7
 80051e0:	080052c1 	.word	0x080052c1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f24a 7114 	movw	r1, #42772	; 0xa714
 80051ea:	f6c0 0101 	movt	r1, #2049	; 0x801
 80051ee:	f7fe fb05 	bl	80037fc <d_append_string>
 80051f2:	e07f      	b.n	80052f4 <d_print_mod+0x1cc>
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f24a 7120 	movw	r1, #42784	; 0xa720
 80051fa:	f6c0 0101 	movt	r1, #2049	; 0x801
 80051fe:	f7fe fafd 	bl	80037fc <d_append_string>
 8005202:	e077      	b.n	80052f4 <d_print_mod+0x1cc>
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f24a 712c 	movw	r1, #42796	; 0xa72c
 800520a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800520e:	f7fe faf5 	bl	80037fc <d_append_string>
 8005212:	e06f      	b.n	80052f4 <d_print_mod+0x1cc>
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f7fe faaf 	bl	800377c <d_append_char>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	f7fe fd11 	bl	8003c4c <d_print_comp>
 800522a:	e063      	b.n	80052f4 <d_print_mod+0x1cc>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d15c      	bne.n	80052f2 <d_print_mod+0x1ca>
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f04f 012a 	mov.w	r1, #42	; 0x2a
 800523e:	f7fe fa9d 	bl	800377c <d_append_char>
 8005242:	e056      	b.n	80052f2 <d_print_mod+0x1ca>
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f04f 0126 	mov.w	r1, #38	; 0x26
 800524a:	f7fe fa97 	bl	800377c <d_append_char>
 800524e:	e051      	b.n	80052f4 <d_print_mod+0x1cc>
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f649 51b8 	movw	r1, #40376	; 0x9db8
 8005256:	f6c0 0101 	movt	r1, #2049	; 0x801
 800525a:	f7fe facf 	bl	80037fc <d_append_string>
 800525e:	e049      	b.n	80052f4 <d_print_mod+0x1cc>
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f24a 7134 	movw	r1, #42804	; 0xa734
 8005266:	f6c0 0101 	movt	r1, #2049	; 0x801
 800526a:	f7fe fac7 	bl	80037fc <d_append_string>
 800526e:	e041      	b.n	80052f4 <d_print_mod+0x1cc>
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f24a 7140 	movw	r1, #42816	; 0xa740
 8005276:	f6c0 0101 	movt	r1, #2049	; 0x801
 800527a:	f7fe fabf 	bl	80037fc <d_append_string>
 800527e:	e039      	b.n	80052f4 <d_print_mod+0x1cc>
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fe fae7 	bl	8003854 <d_last_char>
 8005286:	4603      	mov	r3, r0
 8005288:	2b28      	cmp	r3, #40	; 0x28
 800528a:	d004      	beq.n	8005296 <d_print_mod+0x16e>
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f04f 0120 	mov.w	r1, #32
 8005292:	f7fe fa73 	bl	800377c <d_append_char>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	f7fe fcd5 	bl	8003c4c <d_print_comp>
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f24a 714c 	movw	r1, #42828	; 0xa74c
 80052a8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80052ac:	f7fe faa6 	bl	80037fc <d_append_string>
 80052b0:	e020      	b.n	80052f4 <d_print_mod+0x1cc>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fe fcc7 	bl	8003c4c <d_print_comp>
 80052be:	e019      	b.n	80052f4 <d_print_mod+0x1cc>
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f24a 7150 	movw	r1, #42832	; 0xa750
 80052c6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80052ca:	f7fe fa97 	bl	80037fc <d_append_string>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f7fe fcb9 	bl	8003c4c <d_print_comp>
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f04f 0129 	mov.w	r1, #41	; 0x29
 80052e0:	f7fe fa4c 	bl	800377c <d_append_char>
 80052e4:	e006      	b.n	80052f4 <d_print_mod+0x1cc>
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	f7fe fcaf 	bl	8003c4c <d_print_comp>
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <d_print_mod+0x1cc>
 80052f2:	bf00      	nop
 80052f4:	f107 0708 	add.w	r7, r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <d_print_function_type>:
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e032      	b.n	8005380 <d_print_function_type+0x84>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d132      	bne.n	8005388 <d_print_function_type+0x8c>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f1a3 0317 	sub.w	r3, r3, #23
 800532c:	2b10      	cmp	r3, #16
 800532e:	d81e      	bhi.n	800536e <d_print_function_type+0x72>
 8005330:	f04f 0201 	mov.w	r2, #1
 8005334:	fa02 f203 	lsl.w	r2, r2, r3
 8005338:	f640 4347 	movw	r3, #3143	; 0xc47
 800533c:	f2c0 0301 	movt	r3, #1
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10c      	bne.n	8005360 <d_print_function_type+0x64>
 8005346:	f402 7360 	and.w	r3, r2, #896	; 0x380
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <d_print_function_type+0x5c>
 800534e:	f002 0338 	and.w	r3, r2, #56	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10d      	bne.n	8005372 <d_print_function_type+0x76>
 8005356:	e00a      	b.n	800536e <d_print_function_type+0x72>
 8005358:	f04f 0301 	mov.w	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e009      	b.n	8005374 <d_print_function_type+0x78>
 8005360:	f04f 0301 	mov.w	r3, #1
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	f04f 0301 	mov.w	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e002      	b.n	8005374 <d_print_function_type+0x78>
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <d_print_function_type+0x78>
 8005372:	bf00      	nop
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <d_print_function_type+0x90>
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1c9      	bne.n	800531a <d_print_function_type+0x1e>
 8005386:	e002      	b.n	800538e <d_print_function_type+0x92>
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <d_print_function_type+0x92>
 800538c:	bf00      	nop
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d024      	beq.n	80053de <d_print_function_type+0xe2>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10e      	bne.n	80053b8 <d_print_function_type+0xbc>
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7fe fa5a 	bl	8003854 <d_last_char>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b28      	cmp	r3, #40	; 0x28
 80053a4:	d008      	beq.n	80053b8 <d_print_function_type+0xbc>
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7fe fa54 	bl	8003854 <d_last_char>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b2a      	cmp	r3, #42	; 0x2a
 80053b0:	d002      	beq.n	80053b8 <d_print_function_type+0xbc>
 80053b2:	f04f 0301 	mov.w	r3, #1
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <d_print_function_type+0xd8>
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7fe fa48 	bl	8003854 <d_last_char>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d004      	beq.n	80053d4 <d_print_function_type+0xd8>
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f04f 0120 	mov.w	r1, #32
 80053d0:	f7fe f9d4 	bl	800377c <d_append_char>
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f04f 0128 	mov.w	r1, #40	; 0x28
 80053da:	f7fe f9cf 	bl	800377c <d_append_char>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f7ff fdb4 	bl	8004f64 <d_print_mod_list>
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <d_print_function_type+0x110>
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f04f 0129 	mov.w	r1, #41	; 0x29
 8005408:	f7fe f9b8 	bl	800377c <d_append_char>
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f04f 0128 	mov.w	r1, #40	; 0x28
 8005412:	f7fe f9b3 	bl	800377c <d_append_char>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <d_print_function_type+0x12e>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	4619      	mov	r1, r3
 8005426:	f7fe fc11 	bl	8003c4c <d_print_comp>
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8005430:	f7fe f9a4 	bl	800377c <d_append_char>
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	f04f 0201 	mov.w	r2, #1
 800543c:	f7ff fd92 	bl	8004f64 <d_print_mod_list>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005448:	f107 0720 	add.w	r7, r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <d_print_array_type>:
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	f04f 0301 	mov.w	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d037      	beq.n	80054d8 <d_print_array_type+0x88>
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e016      	b.n	80054a2 <d_print_array_type+0x52>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <d_print_array_type+0x4c>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b26      	cmp	r3, #38	; 0x26
 8005484:	d103      	bne.n	800548e <d_print_array_type+0x3e>
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e00c      	b.n	80054a8 <d_print_array_type+0x58>
 800548e:	f04f 0301 	mov.w	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	f04f 0301 	mov.w	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e005      	b.n	80054a8 <d_print_array_type+0x58>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e5      	bne.n	8005474 <d_print_array_type+0x24>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <d_print_array_type+0x6c>
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f24a 715c 	movw	r1, #42844	; 0xa75c
 80054b4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80054b8:	f7fe f9a0 	bl	80037fc <d_append_string>
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f7ff fd4e 	bl	8004f64 <d_print_mod_list>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <d_print_array_type+0x88>
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f04f 0129 	mov.w	r1, #41	; 0x29
 80054d4:	f7fe f952 	bl	800377c <d_append_char>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <d_print_array_type+0x98>
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f04f 0120 	mov.w	r1, #32
 80054e4:	f7fe f94a 	bl	800377c <d_append_char>
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f04f 015b 	mov.w	r1, #91	; 0x5b
 80054ee:	f7fe f945 	bl	800377c <d_append_char>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <d_print_array_type+0xb6>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	4619      	mov	r1, r3
 8005502:	f7fe fba3 	bl	8003c4c <d_print_comp>
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f04f 015d 	mov.w	r1, #93	; 0x5d
 800550c:	f7fe f936 	bl	800377c <d_append_char>
 8005510:	f107 0720 	add.w	r7, r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <d_print_expr_op>:
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b2c      	cmp	r3, #44	; 0x2c
 8005528:	d10b      	bne.n	8005542 <d_print_expr_op+0x2a>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4611      	mov	r1, r2
 800553a:	461a      	mov	r2, r3
 800553c:	f7fe f940 	bl	80037c0 <d_append_buffer>
 8005540:	e003      	b.n	800554a <d_print_expr_op+0x32>
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	f7fe fb81 	bl	8003c4c <d_print_comp>
 800554a:	f107 0708 	add.w	r7, r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop

08005554 <d_print_cast>:
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d006      	beq.n	8005576 <d_print_cast+0x22>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4619      	mov	r1, r3
 8005570:	f7fe fb6c 	bl	8003c4c <d_print_comp>
 8005574:	e04a      	b.n	800560c <d_print_cast+0xb8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7fe fb4f 	bl	8003c4c <d_print_comp>
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fe f94c 	bl	8003854 <d_last_char>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b3c      	cmp	r3, #60	; 0x3c
 80055c0:	d104      	bne.n	80055cc <d_print_cast+0x78>
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f04f 0120 	mov.w	r1, #32
 80055c8:	f7fe f8d8 	bl	800377c <d_append_char>
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80055d2:	f7fe f8d3 	bl	800377c <d_append_char>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4619      	mov	r1, r3
 80055e0:	f7fe fb34 	bl	8003c4c <d_print_comp>
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fe f935 	bl	8003854 <d_last_char>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b3e      	cmp	r3, #62	; 0x3e
 80055ee:	d104      	bne.n	80055fa <d_print_cast+0xa6>
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f04f 0120 	mov.w	r1, #32
 80055f6:	f7fe f8c1 	bl	800377c <d_append_char>
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8005600:	f7fe f8bc 	bl	800377c <d_append_char>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800560c:	f107 0718 	add.w	r7, r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <d_init_info>:
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	18d2      	adds	r2, r2, r3
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005644:	461a      	mov	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	619a      	str	r2, [r3, #24]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	615a      	str	r2, [r3, #20]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	621a      	str	r2, [r3, #32]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
 8005678:	f107 0714 	add.w	r7, r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop

08005684 <d_demangle_callback>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	b099      	sub	sp, #100	; 0x64
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b5f      	cmp	r3, #95	; 0x5f
 800569a:	d10a      	bne.n	80056b2 <d_demangle_callback+0x2e>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f103 0301 	add.w	r3, r3, #1
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b5a      	cmp	r3, #90	; 0x5a
 80056a6:	d104      	bne.n	80056b2 <d_demangle_callback+0x2e>
 80056a8:	f04f 0301 	mov.w	r3, #1
 80056ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056b0:	e049      	b.n	8005746 <d_demangle_callback+0xc2>
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f649 5180 	movw	r1, #40320	; 0x9d80
 80056b8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80056bc:	f04f 0208 	mov.w	r2, #8
 80056c0:	f002 fd98 	bl	80081f4 <strncmp>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d131      	bne.n	800572e <d_demangle_callback+0xaa>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f103 0308 	add.w	r3, r3, #8
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b2e      	cmp	r3, #46	; 0x2e
 80056d4:	d00b      	beq.n	80056ee <d_demangle_callback+0x6a>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f103 0308 	add.w	r3, r3, #8
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b5f      	cmp	r3, #95	; 0x5f
 80056e0:	d005      	beq.n	80056ee <d_demangle_callback+0x6a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f103 0308 	add.w	r3, r3, #8
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b24      	cmp	r3, #36	; 0x24
 80056ec:	d11f      	bne.n	800572e <d_demangle_callback+0xaa>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f103 0309 	add.w	r3, r3, #9
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b44      	cmp	r3, #68	; 0x44
 80056f8:	d005      	beq.n	8005706 <d_demangle_callback+0x82>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f103 0309 	add.w	r3, r3, #9
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b49      	cmp	r3, #73	; 0x49
 8005704:	d113      	bne.n	800572e <d_demangle_callback+0xaa>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f103 030a 	add.w	r3, r3, #10
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b5f      	cmp	r3, #95	; 0x5f
 8005710:	d10d      	bne.n	800572e <d_demangle_callback+0xaa>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f103 0309 	add.w	r3, r3, #9
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b49      	cmp	r3, #73	; 0x49
 800571c:	d102      	bne.n	8005724 <d_demangle_callback+0xa0>
 800571e:	f04f 0302 	mov.w	r3, #2
 8005722:	e001      	b.n	8005728 <d_demangle_callback+0xa4>
 8005724:	f04f 0303 	mov.w	r3, #3
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800572c:	e00b      	b.n	8005746 <d_demangle_callback+0xc2>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <d_demangle_callback+0xba>
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e0f6      	b.n	800592c <d_demangle_callback+0x2a8>
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f002 fd24 	bl	8008194 <strlen>
 800574c:	4602      	mov	r2, r0
 800574e:	f107 0310 	add.w	r3, r7, #16
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	f7ff ff5d 	bl	8005614 <d_init_info>
 800575a:	466b      	mov	r3, sp
 800575c:	461e      	mov	r6, r3
 800575e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8005760:	f105 33ff 	add.w	r3, r5, #4294967295
 8005764:	657b      	str	r3, [r7, #84]	; 0x54
 8005766:	462b      	mov	r3, r5
 8005768:	4618      	mov	r0, r3
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005772:	fb03 f201 	mul.w	r2, r3, r1
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	fb03 f300 	mul.w	r3, r3, r0
 800577e:	18d4      	adds	r4, r2, r3
 8005780:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005784:	fba0 2303 	umull	r2, r3, r0, r3
 8005788:	18e1      	adds	r1, r4, r3
 800578a:	460b      	mov	r3, r1
 800578c:	462a      	mov	r2, r5
 800578e:	4613      	mov	r3, r2
 8005790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005794:	189b      	adds	r3, r3, r2
 8005796:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800579a:	462b      	mov	r3, r5
 800579c:	4618      	mov	r0, r3
 800579e:	f04f 0100 	mov.w	r1, #0
 80057a2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80057a6:	fb03 f201 	mul.w	r2, r3, r1
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	fb03 f300 	mul.w	r3, r3, r0
 80057b2:	18d4      	adds	r4, r2, r3
 80057b4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80057b8:	fba0 2303 	umull	r2, r3, r0, r3
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	460b      	mov	r3, r1
 80057c0:	462a      	mov	r2, r5
 80057c2:	4613      	mov	r3, r2
 80057c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80057ce:	f103 0307 	add.w	r3, r3, #7
 80057d2:	f103 0307 	add.w	r3, r3, #7
 80057d6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80057da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80057de:	ebad 0d03 	sub.w	sp, sp, r3
 80057e2:	466b      	mov	r3, sp
 80057e4:	f103 0307 	add.w	r3, r3, #7
 80057e8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80057ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80057f0:	653b      	str	r3, [r7, #80]	; 0x50
 80057f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fa:	4601      	mov	r1, r0
 80057fc:	460a      	mov	r2, r1
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 8005806:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800580a:	ea41 0b0b 	orr.w	fp, r1, fp
 800580e:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005812:	4601      	mov	r1, r0
 8005814:	460a      	mov	r2, r1
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 800581e:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8005822:	ea41 0909 	orr.w	r9, r1, r9
 8005826:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800582a:	4603      	mov	r3, r0
 800582c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005830:	f103 0307 	add.w	r3, r3, #7
 8005834:	f103 0307 	add.w	r3, r3, #7
 8005838:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800583c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005840:	ebad 0d03 	sub.w	sp, sp, r3
 8005844:	466b      	mov	r3, sp
 8005846:	f103 0307 	add.w	r3, r3, #7
 800584a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800584e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005860:	2b03      	cmp	r3, #3
 8005862:	d846      	bhi.n	80058f2 <d_demangle_callback+0x26e>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <d_demangle_callback+0x1e8>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	0800587d 	.word	0x0800587d
 8005870:	0800588d 	.word	0x0800588d
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058a1 	.word	0x080058a1
 800587c:	f107 0310 	add.w	r3, r7, #16
 8005880:	4618      	mov	r0, r3
 8005882:	f7fc f8b9 	bl	80019f8 <d_type>
 8005886:	4603      	mov	r3, r0
 8005888:	65bb      	str	r3, [r7, #88]	; 0x58
 800588a:	e032      	b.n	80058f2 <d_demangle_callback+0x26e>
 800588c:	f107 0310 	add.w	r3, r7, #16
 8005890:	4618      	mov	r0, r3
 8005892:	f04f 0101 	mov.w	r1, #1
 8005896:	f7fa ff79 	bl	800078c <d_mangled_name>
 800589a:	4603      	mov	r3, r0
 800589c:	65bb      	str	r3, [r7, #88]	; 0x58
 800589e:	e028      	b.n	80058f2 <d_demangle_callback+0x26e>
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f103 030b 	add.w	r3, r3, #11
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d102      	bne.n	80058b6 <d_demangle_callback+0x232>
 80058b0:	f04f 043c 	mov.w	r4, #60	; 0x3c
 80058b4:	e001      	b.n	80058ba <d_demangle_callback+0x236>
 80058b6:	f04f 043d 	mov.w	r4, #61	; 0x3d
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f107 0210 	add.w	r2, r7, #16
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	f7fa fe16 	bl	80004f4 <d_make_demangle_mangled_name>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f107 0210 	add.w	r2, r7, #16
 80058ce:	4610      	mov	r0, r2
 80058d0:	4621      	mov	r1, r4
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f7fa fd40 	bl	800035c <d_make_comp>
 80058dc:	4603      	mov	r3, r0
 80058de:	65bb      	str	r3, [r7, #88]	; 0x58
 80058e0:	69fc      	ldr	r4, [r7, #28]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 fc55 	bl	8008194 <strlen>
 80058ea:	4603      	mov	r3, r0
 80058ec:	18e3      	adds	r3, r4, r3
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	bf00      	nop
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <d_demangle_callback+0x288>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <d_demangle_callback+0x288>
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	65bb      	str	r3, [r7, #88]	; 0x58
 800590c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <d_demangle_callback+0x29e>
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f7fd ffa9 	bl	8003870 <d_print_callback>
 800591e:	4603      	mov	r3, r0
 8005920:	e001      	b.n	8005926 <d_demangle_callback+0x2a2>
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
 8005928:	46b5      	mov	sp, r6
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	4618      	mov	r0, r3
 800592e:	f107 0764 	add.w	r7, r7, #100	; 0x64
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005938 <d_demangle>:
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4618      	mov	r0, r3
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	f7fd fddb 	bl	8003508 <d_growable_string_init>
 8005952:	f107 0314 	add.w	r3, r7, #20
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	f243 6259 	movw	r2, #13913	; 0x3659
 800595e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005962:	f7ff fe8f 	bl	8005684 <d_demangle_callback>
 8005966:	4603      	mov	r3, r0
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <d_demangle+0x4e>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fb38 	bl	8006fe8 <free>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e009      	b.n	800599a <d_demangle+0x62>
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <d_demangle+0x58>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	e001      	b.n	8005994 <d_demangle+0x5c>
 8005990:	f04f 0301 	mov.w	r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4618      	mov	r0, r3
 800599c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <__cxa_demangle>:
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <__cxa_demangle+0x28>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <__cxa_demangle+0x22>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f06f 0202 	mvn.w	r2, #2
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	e058      	b.n	8005a7e <__cxa_demangle+0xda>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <__cxa_demangle+0x48>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <__cxa_demangle+0x48>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <__cxa_demangle+0x42>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	e048      	b.n	8005a7e <__cxa_demangle+0xda>
 80059ec:	f107 0310 	add.w	r3, r7, #16
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f04f 0111 	mov.w	r1, #17
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7ff ff9e 	bl	8005938 <d_demangle>
 80059fc:	4603      	mov	r3, r0
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d111      	bne.n	8005a2a <__cxa_demangle+0x86>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <__cxa_demangle+0x80>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d104      	bne.n	8005a1c <__cxa_demangle+0x78>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e003      	b.n	8005a24 <__cxa_demangle+0x80>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f06f 0201 	mvn.w	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e029      	b.n	8005a7e <__cxa_demangle+0xda>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <__cxa_demangle+0x9a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01b      	beq.n	8005a6e <__cxa_demangle+0xca>
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e017      	b.n	8005a6e <__cxa_demangle+0xca>
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f002 fba8 	bl	8008194 <strlen>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d209      	bcs.n	8005a62 <__cxa_demangle+0xbe>
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	f002 fb41 	bl	80080d8 <strcpy>
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	f001 fac6 	bl	8006fe8 <free>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e005      	b.n	8005a6e <__cxa_demangle+0xca>
 8005a62:	68b8      	ldr	r0, [r7, #8]
 8005a64:	f001 fac0 	bl	8006fe8 <free>
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <__cxa_demangle+0xd8>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f107 0718 	add.w	r7, r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <__gcclibcxx_demangle_callback>:
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <__gcclibcxx_demangle_callback+0x18>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <__gcclibcxx_demangle_callback+0x1e>
 8005aa0:	f06f 0302 	mvn.w	r3, #2
 8005aa4:	e010      	b.n	8005ac8 <__gcclibcxx_demangle_callback+0x40>
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f04f 0111 	mov.w	r1, #17
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f7ff fde8 	bl	8005684 <d_demangle_callback>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <__gcclibcxx_demangle_callback+0x3c>
 8005abe:	f06f 0301 	mvn.w	r3, #1
 8005ac2:	e001      	b.n	8005ac8 <__gcclibcxx_demangle_callback+0x40>
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f107 0718 	add.w	r7, r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <_Unwind_decode_target2>:
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_Unwind_decode_target2+0x6>
 8005ad8:	181b      	adds	r3, r3, r0
 8005ada:	4618      	mov	r0, r3
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <selfrel_offset31>:
 8005ae0:	6803      	ldr	r3, [r0, #0]
 8005ae2:	005a      	lsls	r2, r3, #1
 8005ae4:	bf4c      	ite	mi
 8005ae6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005aea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005aee:	18c0      	adds	r0, r0, r3
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <search_EIT_table>:
 8005af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	4604      	mov	r4, r0
 8005afa:	4691      	mov	r9, r2
 8005afc:	460e      	mov	r6, r1
 8005afe:	b301      	cbz	r1, 8005b42 <search_EIT_table+0x4e>
 8005b00:	f101 3bff 	add.w	fp, r1, #4294967295
 8005b04:	2700      	movs	r7, #0
 8005b06:	46da      	mov	sl, fp
 8005b08:	eb07 050a 	add.w	r5, r7, sl
 8005b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b10:	106d      	asrs	r5, r5, #1
 8005b12:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7ff ffe2 	bl	8005ae0 <selfrel_offset31>
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	1c68      	adds	r0, r5, #1
 8005b20:	45ab      	cmp	fp, r5
 8005b22:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005b26:	bf08      	it	eq
 8005b28:	f04f 30ff 	moveq.w	r0, #4294967295
 8005b2c:	d002      	beq.n	8005b34 <search_EIT_table+0x40>
 8005b2e:	f7ff ffd7 	bl	8005ae0 <selfrel_offset31>
 8005b32:	3801      	subs	r0, #1
 8005b34:	45c8      	cmp	r8, r9
 8005b36:	d907      	bls.n	8005b48 <search_EIT_table+0x54>
 8005b38:	42bd      	cmp	r5, r7
 8005b3a:	f105 3aff 	add.w	sl, r5, #4294967295
 8005b3e:	d1e3      	bne.n	8005b08 <search_EIT_table+0x14>
 8005b40:	2600      	movs	r6, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	4548      	cmp	r0, r9
 8005b4a:	f105 0701 	add.w	r7, r5, #1
 8005b4e:	d3db      	bcc.n	8005b08 <search_EIT_table+0x14>
 8005b50:	4630      	mov	r0, r6
 8005b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	bf00      	nop

08005b58 <get_eit_entry>:
 8005b58:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <get_eit_entry+0xb4>)
 8005b5a:	b530      	push	{r4, r5, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	b083      	sub	sp, #12
 8005b60:	1e8d      	subs	r5, r1, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d04a      	beq.n	8005bfc <get_eit_entry+0xa4>
 8005b66:	4628      	mov	r0, r5
 8005b68:	a901      	add	r1, sp, #4
 8005b6a:	f3af 8000 	nop.w
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d023      	beq.n	8005bbc <get_eit_entry+0x64>
 8005b74:	462a      	mov	r2, r5
 8005b76:	4618      	mov	r0, r3
 8005b78:	9901      	ldr	r1, [sp, #4]
 8005b7a:	f7ff ffbb 	bl	8005af4 <search_EIT_table>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d01e      	beq.n	8005bc2 <get_eit_entry+0x6a>
 8005b84:	f7ff ffac 	bl	8005ae0 <selfrel_offset31>
 8005b88:	686b      	ldr	r3, [r5, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	64a0      	str	r0, [r4, #72]	; 0x48
 8005b8e:	d011      	beq.n	8005bb4 <get_eit_entry+0x5c>
 8005b90:	1d28      	adds	r0, r5, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	db23      	blt.n	8005bde <get_eit_entry+0x86>
 8005b96:	f7ff ffa3 	bl	8005ae0 <selfrel_offset31>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b9e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005ba0:	6803      	ldr	r3, [r0, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	db10      	blt.n	8005bc8 <get_eit_entry+0x70>
 8005ba6:	f7ff ff9b 	bl	8005ae0 <selfrel_offset31>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2000      	movs	r0, #0
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2005      	movs	r0, #5
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	e7f9      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bbc:	6120      	str	r0, [r4, #16]
 8005bbe:	2009      	movs	r0, #9
 8005bc0:	e7f6      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bc2:	6120      	str	r0, [r4, #16]
 8005bc4:	2009      	movs	r0, #9
 8005bc6:	e7f3      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bc8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005bcc:	b158      	cbz	r0, 8005be6 <get_eit_entry+0x8e>
 8005bce:	2801      	cmp	r0, #1
 8005bd0:	d00c      	beq.n	8005bec <get_eit_entry+0x94>
 8005bd2:	2802      	cmp	r0, #2
 8005bd4:	d00e      	beq.n	8005bf4 <get_eit_entry+0x9c>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2009      	movs	r0, #9
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	e7e8      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bde:	2301      	movs	r3, #1
 8005be0:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005be2:	6523      	str	r3, [r4, #80]	; 0x50
 8005be4:	e7dc      	b.n	8005ba0 <get_eit_entry+0x48>
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <get_eit_entry+0xb8>)
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	e7e1      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <get_eit_entry+0xbc>)
 8005bee:	2000      	movs	r0, #0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	e7dd      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <get_eit_entry+0xc0>)
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	e7d9      	b.n	8005bb0 <get_eit_entry+0x58>
 8005bfc:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <get_eit_entry+0xc4>)
 8005bfe:	4908      	ldr	r1, [pc, #32]	; (8005c20 <get_eit_entry+0xc8>)
 8005c00:	4613      	mov	r3, r2
 8005c02:	1a8a      	subs	r2, r1, r2
 8005c04:	10d2      	asrs	r2, r2, #3
 8005c06:	9201      	str	r2, [sp, #4]
 8005c08:	e7b4      	b.n	8005b74 <get_eit_entry+0x1c>
 8005c0a:	bf00      	nop
 8005c0c:	00000000 	.word	0x00000000
 8005c10:	080060f9 	.word	0x080060f9
 8005c14:	080060f5 	.word	0x080060f5
 8005c18:	080060f1 	.word	0x080060f1
 8005c1c:	0801ea14 	.word	0x0801ea14
 8005c20:	0801ec1c 	.word	0x0801ec1c

08005c24 <restore_non_core_regs>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	b510      	push	{r4, lr}
 8005c28:	4604      	mov	r4, r0
 8005c2a:	07d8      	lsls	r0, r3, #31
 8005c2c:	d406      	bmi.n	8005c3c <restore_non_core_regs+0x18>
 8005c2e:	0799      	lsls	r1, r3, #30
 8005c30:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8005c34:	d509      	bpl.n	8005c4a <restore_non_core_regs+0x26>
 8005c36:	f000 fc69 	bl	800650c <__gnu_Unwind_Restore_VFP_D>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	075a      	lsls	r2, r3, #29
 8005c3e:	d509      	bpl.n	8005c54 <restore_non_core_regs+0x30>
 8005c40:	0718      	lsls	r0, r3, #28
 8005c42:	d50e      	bpl.n	8005c62 <restore_non_core_regs+0x3e>
 8005c44:	06d9      	lsls	r1, r3, #27
 8005c46:	d513      	bpl.n	8005c70 <restore_non_core_regs+0x4c>
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	f000 fc57 	bl	80064fc <__gnu_Unwind_Restore_VFP>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	075a      	lsls	r2, r3, #29
 8005c52:	d4f5      	bmi.n	8005c40 <restore_non_core_regs+0x1c>
 8005c54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c58:	f000 fc60 	bl	800651c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	0718      	lsls	r0, r3, #28
 8005c60:	d4f0      	bmi.n	8005c44 <restore_non_core_regs+0x20>
 8005c62:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8005c66:	f000 fc61 	bl	800652c <__gnu_Unwind_Restore_WMMXD>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	06d9      	lsls	r1, r3, #27
 8005c6e:	d4eb      	bmi.n	8005c48 <restore_non_core_regs+0x24>
 8005c70:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f000 bc9c 	b.w	80065b4 <__gnu_Unwind_Restore_WMMXC>

08005c7c <unwind_phase2_forced>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	f101 0e04 	add.w	lr, r1, #4
 8005c84:	4605      	mov	r5, r0
 8005c86:	4616      	mov	r6, r2
 8005c88:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005c8c:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8005c90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005c94:	ac02      	add	r4, sp, #8
 8005c96:	1d27      	adds	r7, r4, #4
 8005c98:	f04f 0c00 	mov.w	ip, #0
 8005c9c:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8005ca0:	4566      	cmp	r6, ip
 8005ca2:	bf14      	ite	ne
 8005ca4:	260a      	movne	r6, #10
 8005ca6:	2609      	moveq	r6, #9
 8005ca8:	46e0      	mov	r8, ip
 8005caa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005cb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005cb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005cb6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005cb8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005cbc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005cc4:	f8c4 c000 	str.w	ip, [r4]
 8005cc8:	f7ff ff46 	bl	8005b58 <get_eit_entry>
 8005ccc:	4607      	mov	r7, r0
 8005cce:	b307      	cbz	r7, 8005d12 <unwind_phase2_forced+0x96>
 8005cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd2:	f046 0610 	orr.w	r6, r6, #16
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	4631      	mov	r1, r6
 8005cda:	462a      	mov	r2, r5
 8005cdc:	6463      	str	r3, [r4, #68]	; 0x44
 8005cde:	462b      	mov	r3, r5
 8005ce0:	9400      	str	r4, [sp, #0]
 8005ce2:	f8cd a004 	str.w	sl, [sp, #4]
 8005ce6:	47c8      	blx	r9
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d12c      	bne.n	8005d46 <unwind_phase2_forced+0xca>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	d12b      	bne.n	8005d48 <unwind_phase2_forced+0xcc>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	a992      	add	r1, sp, #584	; 0x248
 8005cf4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005cf8:	f001 fca4 	bl	8007644 <memcpy>
 8005cfc:	f1b8 0f08 	cmp.w	r8, #8
 8005d00:	d128      	bne.n	8005d54 <unwind_phase2_forced+0xd8>
 8005d02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff ff27 	bl	8005b58 <get_eit_entry>
 8005d0a:	2609      	movs	r6, #9
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	2f00      	cmp	r7, #0
 8005d10:	d1de      	bne.n	8005cd0 <unwind_phase2_forced+0x54>
 8005d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d14:	4621      	mov	r1, r4
 8005d16:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d1a:	a892      	add	r0, sp, #584	; 0x248
 8005d1c:	616b      	str	r3, [r5, #20]
 8005d1e:	f001 fc91 	bl	8007644 <memcpy>
 8005d22:	692b      	ldr	r3, [r5, #16]
 8005d24:	4629      	mov	r1, r5
 8005d26:	aa92      	add	r2, sp, #584	; 0x248
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4798      	blx	r3
 8005d2c:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8005d2e:	4631      	mov	r1, r6
 8005d30:	462a      	mov	r2, r5
 8005d32:	6463      	str	r3, [r4, #68]	; 0x44
 8005d34:	462b      	mov	r3, r5
 8005d36:	9400      	str	r4, [sp, #0]
 8005d38:	f8cd a004 	str.w	sl, [sp, #4]
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	2001      	movs	r0, #1
 8005d40:	47c8      	blx	r9
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d0d2      	beq.n	8005cec <unwind_phase2_forced+0x70>
 8005d46:	2709      	movs	r7, #9
 8005d48:	4638      	mov	r0, r7
 8005d4a:	b022      	add	sp, #136	; 0x88
 8005d4c:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	f1b8 0f07 	cmp.w	r8, #7
 8005d58:	d1f5      	bne.n	8005d46 <unwind_phase2_forced+0xca>
 8005d5a:	1d20      	adds	r0, r4, #4
 8005d5c:	f000 fbc2 	bl	80064e4 <__restore_core_regs>

08005d60 <unwind_phase2>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f7ff fef5 	bl	8005b58 <get_eit_entry>
 8005d6e:	b950      	cbnz	r0, 8005d86 <unwind_phase2+0x26>
 8005d70:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8005d72:	2001      	movs	r0, #1
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	4621      	mov	r1, r4
 8005d78:	462a      	mov	r2, r5
 8005d7a:	6166      	str	r6, [r4, #20]
 8005d7c:	4798      	blx	r3
 8005d7e:	2808      	cmp	r0, #8
 8005d80:	d0f1      	beq.n	8005d66 <unwind_phase2+0x6>
 8005d82:	2807      	cmp	r0, #7
 8005d84:	d001      	beq.n	8005d8a <unwind_phase2+0x2a>
 8005d86:	f000 fe6d 	bl	8006a64 <abort>
 8005d8a:	1d28      	adds	r0, r5, #4
 8005d8c:	f000 fbaa 	bl	80064e4 <__restore_core_regs>

08005d90 <_Unwind_VRS_Get>:
 8005d90:	b959      	cbnz	r1, 8005daa <_Unwind_VRS_Get+0x1a>
 8005d92:	2a0f      	cmp	r2, #15
 8005d94:	bf94      	ite	ls
 8005d96:	2100      	movls	r1, #0
 8005d98:	2101      	movhi	r1, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bf0c      	ite	eq
 8005d9e:	460b      	moveq	r3, r1
 8005da0:	f041 0301 	orrne.w	r3, r1, #1
 8005da4:	b133      	cbz	r3, 8005db4 <_Unwind_VRS_Get+0x24>
 8005da6:	2002      	movs	r0, #2
 8005da8:	4770      	bx	lr
 8005daa:	2904      	cmp	r1, #4
 8005dac:	bf8c      	ite	hi
 8005dae:	2002      	movhi	r0, #2
 8005db0:	2001      	movls	r0, #1
 8005db2:	4770      	bx	lr
 8005db4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005db8:	4618      	mov	r0, r3
 8005dba:	9b00      	ldr	r3, [sp, #0]
 8005dbc:	6852      	ldr	r2, [r2, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <_Unwind_GetGR>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	460a      	mov	r2, r1
 8005dc8:	b084      	sub	sp, #16
 8005dca:	2100      	movs	r1, #0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	ac03      	add	r4, sp, #12
 8005dd0:	9400      	str	r4, [sp, #0]
 8005dd2:	f7ff ffdd 	bl	8005d90 <_Unwind_VRS_Get>
 8005dd6:	9803      	ldr	r0, [sp, #12]
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <_Unwind_VRS_Set>:
 8005ddc:	b959      	cbnz	r1, 8005df6 <_Unwind_VRS_Set+0x1a>
 8005dde:	2a0f      	cmp	r2, #15
 8005de0:	bf94      	ite	ls
 8005de2:	2100      	movls	r1, #0
 8005de4:	2101      	movhi	r1, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf0c      	ite	eq
 8005dea:	460b      	moveq	r3, r1
 8005dec:	f041 0301 	orrne.w	r3, r1, #1
 8005df0:	b133      	cbz	r3, 8005e00 <_Unwind_VRS_Set+0x24>
 8005df2:	2002      	movs	r0, #2
 8005df4:	4770      	bx	lr
 8005df6:	2904      	cmp	r1, #4
 8005df8:	bf8c      	ite	hi
 8005dfa:	2002      	movhi	r0, #2
 8005dfc:	2001      	movls	r0, #1
 8005dfe:	4770      	bx	lr
 8005e00:	9900      	ldr	r1, [sp, #0]
 8005e02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	6809      	ldr	r1, [r1, #0]
 8005e0a:	6051      	str	r1, [r2, #4]
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop

08005e10 <_Unwind_SetGR>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	ab04      	add	r3, sp, #16
 8005e16:	460c      	mov	r4, r1
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005e1e:	4622      	mov	r2, r4
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	460b      	mov	r3, r1
 8005e24:	f7ff ffda 	bl	8005ddc <_Unwind_VRS_Set>
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd10      	pop	{r4, pc}

08005e2c <__gnu_unwind_pr_common>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	461e      	mov	r6, r3
 8005e32:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005e34:	4617      	mov	r7, r2
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	460c      	mov	r4, r1
 8005e3a:	f000 0803 	and.w	r8, r0, #3
 8005e3e:	f000 0108 	and.w	r1, r0, #8
 8005e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e46:	9102      	str	r1, [sp, #8]
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	f040 80df 	bne.w	800600e <__gnu_unwind_pr_common+0x1e2>
 8005e50:	0212      	lsls	r2, r2, #8
 8005e52:	f88d 6019 	strb.w	r6, [sp, #25]
 8005e56:	9204      	str	r2, [sp, #16]
 8005e58:	2203      	movs	r2, #3
 8005e5a:	f88d 2018 	strb.w	r2, [sp, #24]
 8005e5e:	f1b8 0f02 	cmp.w	r8, #2
 8005e62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e64:	bf08      	it	eq
 8005e66:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8005e68:	f012 0201 	ands.w	r2, r2, #1
 8005e6c:	bf02      	ittt	eq
 8005e6e:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
 8005e72:	9200      	streq	r2, [sp, #0]
 8005e74:	9101      	streq	r1, [sp, #4]
 8005e76:	f040 80d6 	bne.w	8006026 <__gnu_unwind_pr_common+0x1fa>
 8005e7a:	f8d3 9000 	ldr.w	r9, [r3]
 8005e7e:	f1b9 0f00 	cmp.w	r9, #0
 8005e82:	d031      	beq.n	8005ee8 <__gnu_unwind_pr_common+0xbc>
 8005e84:	2e02      	cmp	r6, #2
 8005e86:	f000 80bd 	beq.w	8006004 <__gnu_unwind_pr_common+0x1d8>
 8005e8a:	f8b3 9000 	ldrh.w	r9, [r3]
 8005e8e:	1d1d      	adds	r5, r3, #4
 8005e90:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8005e94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e96:	210f      	movs	r1, #15
 8005e98:	f02b 0a01 	bic.w	sl, fp, #1
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	449a      	add	sl, r3
 8005ea0:	f7ff ff90 	bl	8005dc4 <_Unwind_GetGR>
 8005ea4:	4582      	cmp	sl, r0
 8005ea6:	d839      	bhi.n	8005f1c <__gnu_unwind_pr_common+0xf0>
 8005ea8:	f029 0301 	bic.w	r3, r9, #1
 8005eac:	f00b 0b01 	and.w	fp, fp, #1
 8005eb0:	449a      	add	sl, r3
 8005eb2:	f009 0901 	and.w	r9, r9, #1
 8005eb6:	4550      	cmp	r0, sl
 8005eb8:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8005ebc:	bf2c      	ite	cs
 8005ebe:	2000      	movcs	r0, #0
 8005ec0:	2001      	movcc	r0, #1
 8005ec2:	f1b9 0f01 	cmp.w	r9, #1
 8005ec6:	d033      	beq.n	8005f30 <__gnu_unwind_pr_common+0x104>
 8005ec8:	d255      	bcs.n	8005f76 <__gnu_unwind_pr_common+0x14a>
 8005eca:	f1b8 0f00 	cmp.w	r8, #0
 8005ece:	bf0c      	ite	eq
 8005ed0:	2000      	moveq	r0, #0
 8005ed2:	f000 0001 	andne.w	r0, r0, #1
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f040 80f0 	bne.w	80060bc <__gnu_unwind_pr_common+0x290>
 8005edc:	1d2b      	adds	r3, r5, #4
 8005ede:	f8d3 9000 	ldr.w	r9, [r3]
 8005ee2:	f1b9 0f00 	cmp.w	r9, #0
 8005ee6:	d1cd      	bne.n	8005e84 <__gnu_unwind_pr_common+0x58>
 8005ee8:	4638      	mov	r0, r7
 8005eea:	a904      	add	r1, sp, #16
 8005eec:	f000 fbfa 	bl	80066e4 <__gnu_unwind_execute>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d143      	bne.n	8005f7c <__gnu_unwind_pr_common+0x150>
 8005ef4:	9a00      	ldr	r2, [sp, #0]
 8005ef6:	2008      	movs	r0, #8
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	d040      	beq.n	8005f7e <__gnu_unwind_pr_common+0x152>
 8005efc:	210f      	movs	r1, #15
 8005efe:	4638      	mov	r0, r7
 8005f00:	f7ff ff60 	bl	8005dc4 <_Unwind_GetGR>
 8005f04:	210e      	movs	r1, #14
 8005f06:	4602      	mov	r2, r0
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ff81 	bl	8005e10 <_Unwind_SetGR>
 8005f0e:	4638      	mov	r0, r7
 8005f10:	210f      	movs	r1, #15
 8005f12:	4a76      	ldr	r2, [pc, #472]	; (80060ec <__gnu_unwind_pr_common+0x2c0>)
 8005f14:	f7ff ff7c 	bl	8005e10 <_Unwind_SetGR>
 8005f18:	2007      	movs	r0, #7
 8005f1a:	e030      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 8005f1c:	f00b 0b01 	and.w	fp, fp, #1
 8005f20:	f009 0901 	and.w	r9, r9, #1
 8005f24:	2000      	movs	r0, #0
 8005f26:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8005f2a:	f1b9 0f01 	cmp.w	r9, #1
 8005f2e:	d1cb      	bne.n	8005ec8 <__gnu_unwind_pr_common+0x9c>
 8005f30:	f1b8 0f00 	cmp.w	r8, #0
 8005f34:	f040 8094 	bne.w	8006060 <__gnu_unwind_pr_common+0x234>
 8005f38:	b1d0      	cbz	r0, 8005f70 <__gnu_unwind_pr_common+0x144>
 8005f3a:	686b      	ldr	r3, [r5, #4]
 8005f3c:	f8d5 9000 	ldr.w	r9, [r5]
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	d01b      	beq.n	8005f7c <__gnu_unwind_pr_common+0x150>
 8005f44:	9901      	ldr	r1, [sp, #4]
 8005f46:	3301      	adds	r3, #1
 8005f48:	460a      	mov	r2, r1
 8005f4a:	9107      	str	r1, [sp, #28]
 8005f4c:	f000 80a4 	beq.w	8006098 <__gnu_unwind_pr_common+0x26c>
 8005f50:	1d28      	adds	r0, r5, #4
 8005f52:	f7ff fdbf 	bl	8005ad4 <_Unwind_decode_target2>
 8005f56:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8005f5a:	ab07      	add	r3, sp, #28
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f012 fc42 	bl	80187e8 <__cxa_type_match>
 8005f64:	9a07      	ldr	r2, [sp, #28]
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 8096 	bne.w	8006098 <__gnu_unwind_pr_common+0x26c>
 8005f6c:	f8cd 801c 	str.w	r8, [sp, #28]
 8005f70:	f105 0308 	add.w	r3, r5, #8
 8005f74:	e781      	b.n	8005e7a <__gnu_unwind_pr_common+0x4e>
 8005f76:	f1b9 0f02 	cmp.w	r9, #2
 8005f7a:	d003      	beq.n	8005f84 <__gnu_unwind_pr_common+0x158>
 8005f7c:	2009      	movs	r0, #9
 8005f7e:	b009      	add	sp, #36	; 0x24
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8005f8a:	f1b8 0f00 	cmp.w	r8, #0
 8005f8e:	d14d      	bne.n	800602c <__gnu_unwind_pr_common+0x200>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d030      	beq.n	8005ff6 <__gnu_unwind_pr_common+0x1ca>
 8005f94:	9902      	ldr	r1, [sp, #8]
 8005f96:	f1d1 0201 	rsbs	r2, r1, #1
 8005f9a:	bf38      	it	cc
 8005f9c:	2200      	movcc	r2, #0
 8005f9e:	f1ba 0f00 	cmp.w	sl, #0
 8005fa2:	bf08      	it	eq
 8005fa4:	f042 0201 	orreq.w	r2, r2, #1
 8005fa8:	b32a      	cbz	r2, 8005ff6 <__gnu_unwind_pr_common+0x1ca>
 8005faa:	f1ba 0f00 	cmp.w	sl, #0
 8005fae:	d07a      	beq.n	80060a6 <__gnu_unwind_pr_common+0x27a>
 8005fb0:	f105 0904 	add.w	r9, r5, #4
 8005fb4:	46c3      	mov	fp, r8
 8005fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fba:	46b0      	mov	r8, r6
 8005fbc:	462e      	mov	r6, r5
 8005fbe:	9d01      	ldr	r5, [sp, #4]
 8005fc0:	e004      	b.n	8005fcc <__gnu_unwind_pr_common+0x1a0>
 8005fc2:	4553      	cmp	r3, sl
 8005fc4:	f109 0904 	add.w	r9, r9, #4
 8005fc8:	469b      	mov	fp, r3
 8005fca:	d06b      	beq.n	80060a4 <__gnu_unwind_pr_common+0x278>
 8005fcc:	4648      	mov	r0, r9
 8005fce:	9507      	str	r5, [sp, #28]
 8005fd0:	f7ff fd80 	bl	8005ad4 <_Unwind_decode_target2>
 8005fd4:	ab07      	add	r3, sp, #28
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4601      	mov	r1, r0
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f012 fc04 	bl	80187e8 <__cxa_type_match>
 8005fe0:	f10b 0301 	add.w	r3, fp, #1
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0ec      	beq.n	8005fc2 <__gnu_unwind_pr_common+0x196>
 8005fe8:	45da      	cmp	sl, fp
 8005fea:	4635      	mov	r5, r6
 8005fec:	4646      	mov	r6, r8
 8005fee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ff2:	d058      	beq.n	80060a6 <__gnu_unwind_pr_common+0x27a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	db52      	blt.n	80060a0 <__gnu_unwind_pr_common+0x274>
 8005ffa:	f10a 0a01 	add.w	sl, sl, #1
 8005ffe:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 8006002:	e73a      	b.n	8005e7a <__gnu_unwind_pr_common+0x4e>
 8006004:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006008:	f103 0508 	add.w	r5, r3, #8
 800600c:	e742      	b.n	8005e94 <__gnu_unwind_pr_common+0x68>
 800600e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8006012:	0412      	lsls	r2, r2, #16
 8006014:	f88d 1019 	strb.w	r1, [sp, #25]
 8006018:	9204      	str	r2, [sp, #16]
 800601a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800601e:	2202      	movs	r2, #2
 8006020:	f88d 2018 	strb.w	r2, [sp, #24]
 8006024:	e71b      	b.n	8005e5e <__gnu_unwind_pr_common+0x32>
 8006026:	2200      	movs	r2, #0
 8006028:	9200      	str	r2, [sp, #0]
 800602a:	e75d      	b.n	8005ee8 <__gnu_unwind_pr_common+0xbc>
 800602c:	210d      	movs	r1, #13
 800602e:	4638      	mov	r0, r7
 8006030:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8006034:	f7ff fec6 	bl	8005dc4 <_Unwind_GetGR>
 8006038:	4581      	cmp	r9, r0
 800603a:	d1db      	bne.n	8005ff4 <__gnu_unwind_pr_common+0x1c8>
 800603c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800603e:	429d      	cmp	r5, r3
 8006040:	d1d8      	bne.n	8005ff4 <__gnu_unwind_pr_common+0x1c8>
 8006042:	2200      	movs	r2, #0
 8006044:	1d2b      	adds	r3, r5, #4
 8006046:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006048:	2204      	movs	r2, #4
 800604a:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 800604e:	6322      	str	r2, [r4, #48]	; 0x30
 8006050:	6363      	str	r3, [r4, #52]	; 0x34
 8006052:	682a      	ldr	r2, [r5, #0]
 8006054:	2a00      	cmp	r2, #0
 8006056:	da44      	bge.n	80060e2 <__gnu_unwind_pr_common+0x2b6>
 8006058:	461d      	mov	r5, r3
 800605a:	2301      	movs	r3, #1
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	e7cc      	b.n	8005ffa <__gnu_unwind_pr_common+0x1ce>
 8006060:	210d      	movs	r1, #13
 8006062:	4638      	mov	r0, r7
 8006064:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8006068:	f7ff feac 	bl	8005dc4 <_Unwind_GetGR>
 800606c:	4581      	cmp	r9, r0
 800606e:	f47f af7f 	bne.w	8005f70 <__gnu_unwind_pr_common+0x144>
 8006072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006074:	429d      	cmp	r5, r3
 8006076:	f47f af7b 	bne.w	8005f70 <__gnu_unwind_pr_common+0x144>
 800607a:	4628      	mov	r0, r5
 800607c:	f7ff fd30 	bl	8005ae0 <selfrel_offset31>
 8006080:	210f      	movs	r1, #15
 8006082:	4602      	mov	r2, r0
 8006084:	4638      	mov	r0, r7
 8006086:	f7ff fec3 	bl	8005e10 <_Unwind_SetGR>
 800608a:	4638      	mov	r0, r7
 800608c:	2100      	movs	r1, #0
 800608e:	4622      	mov	r2, r4
 8006090:	f7ff febe 	bl	8005e10 <_Unwind_SetGR>
 8006094:	2007      	movs	r0, #7
 8006096:	e772      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 8006098:	b92a      	cbnz	r2, 80060a6 <__gnu_unwind_pr_common+0x27a>
 800609a:	f105 0308 	add.w	r3, r5, #8
 800609e:	e6ec      	b.n	8005e7a <__gnu_unwind_pr_common+0x4e>
 80060a0:	3504      	adds	r5, #4
 80060a2:	e7aa      	b.n	8005ffa <__gnu_unwind_pr_common+0x1ce>
 80060a4:	4635      	mov	r5, r6
 80060a6:	4638      	mov	r0, r7
 80060a8:	210d      	movs	r1, #13
 80060aa:	f7ff fe8b 	bl	8005dc4 <_Unwind_GetGR>
 80060ae:	62a5      	str	r5, [r4, #40]	; 0x28
 80060b0:	4603      	mov	r3, r0
 80060b2:	6223      	str	r3, [r4, #32]
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	2006      	movs	r0, #6
 80060b8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ba:	e760      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 80060bc:	4628      	mov	r0, r5
 80060be:	3504      	adds	r5, #4
 80060c0:	f7ff fd0e 	bl	8005ae0 <selfrel_offset31>
 80060c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80060c6:	4606      	mov	r6, r0
 80060c8:	4620      	mov	r0, r4
 80060ca:	f012 fbff 	bl	80188cc <__cxa_begin_cleanup>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f43f af54 	beq.w	8005f7c <__gnu_unwind_pr_common+0x150>
 80060d4:	4638      	mov	r0, r7
 80060d6:	210f      	movs	r1, #15
 80060d8:	4632      	mov	r2, r6
 80060da:	f7ff fe99 	bl	8005e10 <_Unwind_SetGR>
 80060de:	2007      	movs	r0, #7
 80060e0:	e74d      	b.n	8005f7e <__gnu_unwind_pr_common+0x152>
 80060e2:	f10a 0001 	add.w	r0, sl, #1
 80060e6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80060ea:	e7c7      	b.n	800607c <__gnu_unwind_pr_common+0x250>
 80060ec:	08018a15 	.word	0x08018a15

080060f0 <__aeabi_unwind_cpp_pr2>:
 80060f0:	2302      	movs	r3, #2
 80060f2:	e69b      	b.n	8005e2c <__gnu_unwind_pr_common>

080060f4 <__aeabi_unwind_cpp_pr1>:
 80060f4:	2301      	movs	r3, #1
 80060f6:	e699      	b.n	8005e2c <__gnu_unwind_pr_common>

080060f8 <__aeabi_unwind_cpp_pr0>:
 80060f8:	2300      	movs	r3, #0
 80060fa:	e697      	b.n	8005e2c <__gnu_unwind_pr_common>

080060fc <_Unwind_VRS_Pop>:
 80060fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	4604      	mov	r4, r0
 8006102:	b0e8      	sub	sp, #416	; 0x1a0
 8006104:	2904      	cmp	r1, #4
 8006106:	d807      	bhi.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006108:	e8df f001 	tbb	[pc, r1]
 800610c:	034b4d33 	.word	0x034b4d33
 8006110:	0a          	.byte	0x0a
 8006111:	00          	.byte	0x00
 8006112:	2b03      	cmp	r3, #3
 8006114:	f000 80d8 	beq.w	80062c8 <_Unwind_VRS_Pop+0x1cc>
 8006118:	2002      	movs	r0, #2
 800611a:	b068      	add	sp, #416	; 0x1a0
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	2a10      	cmp	r2, #16
 8006122:	bf94      	ite	ls
 8006124:	2100      	movls	r1, #0
 8006126:	2101      	movhi	r1, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	460b      	moveq	r3, r1
 800612e:	f041 0301 	orrne.w	r3, r1, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	06d9      	lsls	r1, r3, #27
 800613a:	f100 80e7 	bmi.w	800630c <_Unwind_VRS_Pop+0x210>
 800613e:	ad64      	add	r5, sp, #400	; 0x190
 8006140:	9201      	str	r2, [sp, #4]
 8006142:	4628      	mov	r0, r5
 8006144:	2601      	movs	r6, #1
 8006146:	f000 fa3f 	bl	80065c8 <__gnu_Unwind_Save_WMMXC>
 800614a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800614c:	9a01      	ldr	r2, [sp, #4]
 800614e:	2300      	movs	r3, #0
 8006150:	fa16 f103 	lsls.w	r1, r6, r3
 8006154:	4211      	tst	r1, r2
 8006156:	bf1c      	itt	ne
 8006158:	f850 1b04 	ldrne.w	r1, [r0], #4
 800615c:	f845 1023 	strne.w	r1, [r5, r3, lsl #2]
 8006160:	3301      	adds	r3, #1
 8006162:	2b04      	cmp	r3, #4
 8006164:	d1f4      	bne.n	8006150 <_Unwind_VRS_Pop+0x54>
 8006166:	63a0      	str	r0, [r4, #56]	; 0x38
 8006168:	4628      	mov	r0, r5
 800616a:	f000 fa23 	bl	80065b4 <__gnu_Unwind_Restore_WMMXC>
 800616e:	2000      	movs	r0, #0
 8006170:	e7d3      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d0      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006176:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006178:	b292      	uxth	r2, r2
 800617a:	2001      	movs	r0, #1
 800617c:	fa10 f103 	lsls.w	r1, r0, r3
 8006180:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8006184:	3301      	adds	r3, #1
 8006186:	4211      	tst	r1, r2
 8006188:	bf1c      	itt	ne
 800618a:	f856 1b04 	ldrne.w	r1, [r6], #4
 800618e:	6069      	strne	r1, [r5, #4]
 8006190:	2b10      	cmp	r3, #16
 8006192:	d1f3      	bne.n	800617c <_Unwind_VRS_Pop+0x80>
 8006194:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8006198:	bf08      	it	eq
 800619a:	63a6      	streq	r6, [r4, #56]	; 0x38
 800619c:	d0bd      	beq.n	800611a <_Unwind_VRS_Pop+0x1e>
 800619e:	2000      	movs	r0, #0
 80061a0:	e7bb      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 80061a2:	2001      	movs	r0, #1
 80061a4:	e7b9      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 80061a6:	1f59      	subs	r1, r3, #5
 80061a8:	bf18      	it	ne
 80061aa:	2101      	movne	r1, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf0c      	ite	eq
 80061b0:	2000      	moveq	r0, #0
 80061b2:	f001 0001 	andne.w	r0, r1, #1
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d1ae      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 80061ba:	0c15      	lsrs	r5, r2, #16
 80061bc:	b296      	uxth	r6, r2
 80061be:	1972      	adds	r2, r6, r5
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2020      	movne	r0, #32
 80061c6:	2010      	moveq	r0, #16
 80061c8:	4290      	cmp	r0, r2
 80061ca:	d3a5      	bcc.n	8006118 <_Unwind_VRS_Pop+0x1c>
 80061cc:	f1a3 0c01 	sub.w	ip, r3, #1
 80061d0:	f1dc 0700 	rsbs	r7, ip, #0
 80061d4:	eb47 070c 	adc.w	r7, r7, ip
 80061d8:	2d0f      	cmp	r5, #15
 80061da:	bf94      	ite	ls
 80061dc:	2000      	movls	r0, #0
 80061de:	2001      	movhi	r0, #1
 80061e0:	4238      	tst	r0, r7
 80061e2:	d199      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 80061e4:	46b0      	mov	r8, r6
 80061e6:	b928      	cbnz	r0, 80061f4 <_Unwind_VRS_Pop+0xf8>
 80061e8:	2a10      	cmp	r2, #16
 80061ea:	bf98      	it	ls
 80061ec:	4680      	movls	r8, r0
 80061ee:	d909      	bls.n	8006204 <_Unwind_VRS_Pop+0x108>
 80061f0:	f1a2 0810 	sub.w	r8, r2, #16
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	bf0c      	ite	eq
 80061fa:	2100      	moveq	r1, #0
 80061fc:	f001 0101 	andne.w	r1, r1, #1
 8006200:	2900      	cmp	r1, #0
 8006202:	d189      	bne.n	8006118 <_Unwind_VRS_Pop+0x1c>
 8006204:	2d0f      	cmp	r5, #15
 8006206:	d80f      	bhi.n	8006228 <_Unwind_VRS_Pop+0x12c>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	07d1      	lsls	r1, r2, #31
 800620c:	d50c      	bpl.n	8006228 <_Unwind_VRS_Pop+0x12c>
 800620e:	2b05      	cmp	r3, #5
 8006210:	f022 0101 	bic.w	r1, r2, #1
 8006214:	4620      	mov	r0, r4
 8006216:	6021      	str	r1, [r4, #0]
 8006218:	f000 80b0 	beq.w	800637c <_Unwind_VRS_Pop+0x280>
 800621c:	f022 0203 	bic.w	r2, r2, #3
 8006220:	f840 2b48 	str.w	r2, [r0], #72
 8006224:	f000 f96e 	bl	8006504 <__gnu_Unwind_Save_VFP>
 8006228:	f1b8 0f00 	cmp.w	r8, #0
 800622c:	d003      	beq.n	8006236 <_Unwind_VRS_Pop+0x13a>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	075a      	lsls	r2, r3, #29
 8006232:	f100 8082 	bmi.w	800633a <_Unwind_VRS_Pop+0x23e>
 8006236:	2f00      	cmp	r7, #0
 8006238:	f040 8096 	bne.w	8006368 <_Unwind_VRS_Pop+0x26c>
 800623c:	2d0f      	cmp	r5, #15
 800623e:	d975      	bls.n	800632c <_Unwind_VRS_Pop+0x230>
 8006240:	f1b8 0f00 	cmp.w	r8, #0
 8006244:	d16c      	bne.n	8006320 <_Unwind_VRS_Pop+0x224>
 8006246:	4633      	mov	r3, r6
 8006248:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800624a:	2b00      	cmp	r3, #0
 800624c:	4616      	mov	r6, r2
 800624e:	dd0f      	ble.n	8006270 <_Unwind_VRS_Pop+0x174>
 8006250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006254:	ab02      	add	r3, sp, #8
 8006256:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 800625a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800625e:	f852 0b04 	ldr.w	r0, [r2], #4
 8006262:	3b01      	subs	r3, #1
 8006264:	f841 0b04 	str.w	r0, [r1], #4
 8006268:	1c58      	adds	r0, r3, #1
 800626a:	d1f8      	bne.n	800625e <_Unwind_VRS_Pop+0x162>
 800626c:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8006270:	f1b8 0f00 	cmp.w	r8, #0
 8006274:	d016      	beq.n	80062a4 <_Unwind_VRS_Pop+0x1a8>
 8006276:	2d10      	cmp	r5, #16
 8006278:	bf2c      	ite	cs
 800627a:	462a      	movcs	r2, r5
 800627c:	2210      	movcc	r2, #16
 800627e:	a868      	add	r0, sp, #416	; 0x1a0
 8006280:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8006284:	4631      	mov	r1, r6
 8006286:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800628a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800628e:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8006292:	f851 0b04 	ldr.w	r0, [r1], #4
 8006296:	3b01      	subs	r3, #1
 8006298:	f842 0b04 	str.w	r0, [r2], #4
 800629c:	1c58      	adds	r0, r3, #1
 800629e:	d1f8      	bne.n	8006292 <_Unwind_VRS_Pop+0x196>
 80062a0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	d158      	bne.n	800635a <_Unwind_VRS_Pop+0x25e>
 80062a8:	2d0f      	cmp	r5, #15
 80062aa:	63a6      	str	r6, [r4, #56]	; 0x38
 80062ac:	d802      	bhi.n	80062b4 <_Unwind_VRS_Pop+0x1b8>
 80062ae:	a802      	add	r0, sp, #8
 80062b0:	f000 f92c 	bl	800650c <__gnu_Unwind_Restore_VFP_D>
 80062b4:	4640      	mov	r0, r8
 80062b6:	f1b8 0f00 	cmp.w	r8, #0
 80062ba:	f43f af2e 	beq.w	800611a <_Unwind_VRS_Pop+0x1e>
 80062be:	a824      	add	r0, sp, #144	; 0x90
 80062c0:	f000 f92c 	bl	800651c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e728      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 80062c8:	0c16      	lsrs	r6, r2, #16
 80062ca:	b295      	uxth	r5, r2
 80062cc:	19ab      	adds	r3, r5, r6
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	f63f af22 	bhi.w	8006118 <_Unwind_VRS_Pop+0x1c>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	0718      	lsls	r0, r3, #28
 80062d8:	d437      	bmi.n	800634a <_Unwind_VRS_Pop+0x24e>
 80062da:	a844      	add	r0, sp, #272	; 0x110
 80062dc:	006f      	lsls	r7, r5, #1
 80062de:	f000 f947 	bl	8006570 <__gnu_Unwind_Save_WMMXD>
 80062e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062e4:	4610      	mov	r0, r2
 80062e6:	b15d      	cbz	r5, 8006300 <_Unwind_VRS_Pop+0x204>
 80062e8:	ab44      	add	r3, sp, #272	; 0x110
 80062ea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062ee:	463b      	mov	r3, r7
 80062f0:	f852 1b04 	ldr.w	r1, [r2], #4
 80062f4:	3b01      	subs	r3, #1
 80062f6:	f846 1b04 	str.w	r1, [r6], #4
 80062fa:	d1f9      	bne.n	80062f0 <_Unwind_VRS_Pop+0x1f4>
 80062fc:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006300:	63a0      	str	r0, [r4, #56]	; 0x38
 8006302:	a844      	add	r0, sp, #272	; 0x110
 8006304:	f000 f912 	bl	800652c <__gnu_Unwind_Restore_WMMXD>
 8006308:	2000      	movs	r0, #0
 800630a:	e706      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 800630c:	f023 0310 	bic.w	r3, r3, #16
 8006310:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	f000 f956 	bl	80065c8 <__gnu_Unwind_Save_WMMXC>
 800631c:	9a01      	ldr	r2, [sp, #4]
 800631e:	e70e      	b.n	800613e <_Unwind_VRS_Pop+0x42>
 8006320:	a824      	add	r0, sp, #144	; 0x90
 8006322:	f000 f8ff 	bl	8006524 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006326:	f1c5 0310 	rsb	r3, r5, #16
 800632a:	e78d      	b.n	8006248 <_Unwind_VRS_Pop+0x14c>
 800632c:	a802      	add	r0, sp, #8
 800632e:	f000 f8f1 	bl	8006514 <__gnu_Unwind_Save_VFP_D>
 8006332:	f1b8 0f00 	cmp.w	r8, #0
 8006336:	d086      	beq.n	8006246 <_Unwind_VRS_Pop+0x14a>
 8006338:	e7f2      	b.n	8006320 <_Unwind_VRS_Pop+0x224>
 800633a:	4620      	mov	r0, r4
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	f840 3bd0 	str.w	r3, [r0], #208
 8006344:	f000 f8ee 	bl	8006524 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006348:	e775      	b.n	8006236 <_Unwind_VRS_Pop+0x13a>
 800634a:	f023 0308 	bic.w	r3, r3, #8
 800634e:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	f000 f90c 	bl	8006570 <__gnu_Unwind_Save_WMMXD>
 8006358:	e7bf      	b.n	80062da <_Unwind_VRS_Pop+0x1de>
 800635a:	a802      	add	r0, sp, #8
 800635c:	3604      	adds	r6, #4
 800635e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006360:	f000 f8cc 	bl	80064fc <__gnu_Unwind_Restore_VFP>
 8006364:	2000      	movs	r0, #0
 8006366:	e6d8      	b.n	800611a <_Unwind_VRS_Pop+0x1e>
 8006368:	a802      	add	r0, sp, #8
 800636a:	f000 f8cb 	bl	8006504 <__gnu_Unwind_Save_VFP>
 800636e:	f1b8 0f00 	cmp.w	r8, #0
 8006372:	f43f af68 	beq.w	8006246 <_Unwind_VRS_Pop+0x14a>
 8006376:	f1c5 0310 	rsb	r3, r5, #16
 800637a:	e765      	b.n	8006248 <_Unwind_VRS_Pop+0x14c>
 800637c:	f041 0102 	orr.w	r1, r1, #2
 8006380:	f840 1b48 	str.w	r1, [r0], #72
 8006384:	f000 f8c6 	bl	8006514 <__gnu_Unwind_Save_VFP_D>
 8006388:	e74e      	b.n	8006228 <_Unwind_VRS_Pop+0x12c>
 800638a:	bf00      	nop

0800638c <_Unwind_GetCFA>:
 800638c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800638e:	4770      	bx	lr

08006390 <__gnu_Unwind_RaiseException>:
 8006390:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006394:	1d0f      	adds	r7, r1, #4
 8006396:	640b      	str	r3, [r1, #64]	; 0x40
 8006398:	460d      	mov	r5, r1
 800639a:	4604      	mov	r4, r0
 800639c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80063a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063a2:	ae01      	add	r6, sp, #4
 80063a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80063a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80063aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80063ae:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80063b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff fbca 	bl	8005b58 <get_eit_entry>
 80063c4:	b958      	cbnz	r0, 80063de <__gnu_Unwind_RaiseException+0x4e>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	4621      	mov	r1, r4
 80063ca:	466a      	mov	r2, sp
 80063cc:	4798      	blx	r3
 80063ce:	2808      	cmp	r0, #8
 80063d0:	4606      	mov	r6, r0
 80063d2:	d0f3      	beq.n	80063bc <__gnu_Unwind_RaiseException+0x2c>
 80063d4:	4668      	mov	r0, sp
 80063d6:	f7ff fc25 	bl	8005c24 <restore_non_core_regs>
 80063da:	2e06      	cmp	r6, #6
 80063dc:	d003      	beq.n	80063e6 <__gnu_Unwind_RaiseException+0x56>
 80063de:	2009      	movs	r0, #9
 80063e0:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7ff fcb9 	bl	8005d60 <unwind_phase2>
 80063ee:	bf00      	nop

080063f0 <__gnu_Unwind_ForcedUnwind>:
 80063f0:	b410      	push	{r4}
 80063f2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80063f4:	60c1      	str	r1, [r0, #12]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6182      	str	r2, [r0, #24]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641c      	str	r4, [r3, #64]	; 0x40
 80063fe:	bc10      	pop	{r4}
 8006400:	e43c      	b.n	8005c7c <unwind_phase2_forced>
 8006402:	bf00      	nop

08006404 <__gnu_Unwind_Resume>:
 8006404:	6942      	ldr	r2, [r0, #20]
 8006406:	b538      	push	{r3, r4, r5, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	68c3      	ldr	r3, [r0, #12]
 800640c:	460d      	mov	r5, r1
 800640e:	640a      	str	r2, [r1, #64]	; 0x40
 8006410:	b123      	cbz	r3, 800641c <__gnu_Unwind_Resume+0x18>
 8006412:	2201      	movs	r2, #1
 8006414:	f7ff fc32 	bl	8005c7c <unwind_phase2_forced>
 8006418:	f000 fb24 	bl	8006a64 <abort>
 800641c:	6903      	ldr	r3, [r0, #16]
 800641e:	4621      	mov	r1, r4
 8006420:	2002      	movs	r0, #2
 8006422:	462a      	mov	r2, r5
 8006424:	4798      	blx	r3
 8006426:	2807      	cmp	r0, #7
 8006428:	d003      	beq.n	8006432 <__gnu_Unwind_Resume+0x2e>
 800642a:	2808      	cmp	r0, #8
 800642c:	d004      	beq.n	8006438 <__gnu_Unwind_Resume+0x34>
 800642e:	f000 fb19 	bl	8006a64 <abort>
 8006432:	1d28      	adds	r0, r5, #4
 8006434:	f000 f856 	bl	80064e4 <__restore_core_regs>
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7ff fc90 	bl	8005d60 <unwind_phase2>

08006440 <__gnu_Unwind_Resume_or_Rethrow>:
 8006440:	68c3      	ldr	r3, [r0, #12]
 8006442:	b11b      	cbz	r3, 800644c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8006444:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006446:	2200      	movs	r2, #0
 8006448:	640b      	str	r3, [r1, #64]	; 0x40
 800644a:	e417      	b.n	8005c7c <unwind_phase2_forced>
 800644c:	e7a0      	b.n	8006390 <__gnu_Unwind_RaiseException>
 800644e:	bf00      	nop

08006450 <_Unwind_Complete>:
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <_Unwind_DeleteException>:
 8006454:	b508      	push	{r3, lr}
 8006456:	4601      	mov	r1, r0
 8006458:	6883      	ldr	r3, [r0, #8]
 800645a:	b10b      	cbz	r3, 8006460 <_Unwind_DeleteException+0xc>
 800645c:	2001      	movs	r0, #1
 800645e:	4798      	blx	r3
 8006460:	bd08      	pop	{r3, pc}
 8006462:	bf00      	nop

08006464 <__gnu_Unwind_Backtrace>:
 8006464:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006468:	1d17      	adds	r7, r2, #4
 800646a:	6413      	str	r3, [r2, #64]	; 0x40
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8006474:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006476:	ae01      	add	r6, sp, #4
 8006478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800647a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800647c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800647e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006480:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006482:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8006486:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800648a:	f04f 33ff 	mov.w	r3, #4294967295
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006492:	a890      	add	r0, sp, #576	; 0x240
 8006494:	f7ff fb60 	bl	8005b58 <get_eit_entry>
 8006498:	aa90      	add	r2, sp, #576	; 0x240
 800649a:	210c      	movs	r1, #12
 800649c:	4603      	mov	r3, r0
 800649e:	4668      	mov	r0, sp
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11d      	bne.n	80064e0 <__gnu_Unwind_Backtrace+0x7c>
 80064a4:	f7ff fcb4 	bl	8005e10 <_Unwind_SetGR>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4668      	mov	r0, sp
 80064ac:	47a8      	blx	r5
 80064ae:	a990      	add	r1, sp, #576	; 0x240
 80064b0:	466a      	mov	r2, sp
 80064b2:	4603      	mov	r3, r0
 80064b4:	2008      	movs	r0, #8
 80064b6:	b99b      	cbnz	r3, 80064e0 <__gnu_Unwind_Backtrace+0x7c>
 80064b8:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80064ba:	4798      	blx	r3
 80064bc:	1f43      	subs	r3, r0, #5
 80064be:	4606      	mov	r6, r0
 80064c0:	bf18      	it	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2809      	cmp	r0, #9
 80064c6:	bf0c      	ite	eq
 80064c8:	2300      	moveq	r3, #0
 80064ca:	f003 0301 	andne.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1de      	bne.n	8006490 <__gnu_Unwind_Backtrace+0x2c>
 80064d2:	4668      	mov	r0, sp
 80064d4:	f7ff fba6 	bl	8005c24 <restore_non_core_regs>
 80064d8:	4630      	mov	r0, r6
 80064da:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 80064de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e0:	2609      	movs	r6, #9
 80064e2:	e7f6      	b.n	80064d2 <__gnu_Unwind_Backtrace+0x6e>

080064e4 <__restore_core_regs>:
 80064e4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80064e8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80064ec:	469c      	mov	ip, r3
 80064ee:	46a6      	mov	lr, r4
 80064f0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80064f4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80064f8:	46e5      	mov	sp, ip
 80064fa:	bd00      	pop	{pc}

080064fc <__gnu_Unwind_Restore_VFP>:
 80064fc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <__gnu_Unwind_Save_VFP>:
 8006504:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <__gnu_Unwind_Restore_VFP_D>:
 800650c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop

08006514 <__gnu_Unwind_Save_VFP_D>:
 8006514:	ec80 0b20 	vstmia	r0, {d0-d15}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800651c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop

08006524 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8006524:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop

0800652c <__gnu_Unwind_Restore_WMMXD>:
 800652c:	ecf0 0102 	ldfe	f0, [r0], #8
 8006530:	ecf0 1102 	ldfe	f1, [r0], #8
 8006534:	ecf0 2102 	ldfe	f2, [r0], #8
 8006538:	ecf0 3102 	ldfe	f3, [r0], #8
 800653c:	ecf0 4102 	ldfe	f4, [r0], #8
 8006540:	ecf0 5102 	ldfe	f5, [r0], #8
 8006544:	ecf0 6102 	ldfe	f6, [r0], #8
 8006548:	ecf0 7102 	ldfe	f7, [r0], #8
 800654c:	ecf0 8102 	ldfp	f0, [r0], #8
 8006550:	ecf0 9102 	ldfp	f1, [r0], #8
 8006554:	ecf0 a102 	ldfp	f2, [r0], #8
 8006558:	ecf0 b102 	ldfp	f3, [r0], #8
 800655c:	ecf0 c102 	ldfp	f4, [r0], #8
 8006560:	ecf0 d102 	ldfp	f5, [r0], #8
 8006564:	ecf0 e102 	ldfp	f6, [r0], #8
 8006568:	ecf0 f102 	ldfp	f7, [r0], #8
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <__gnu_Unwind_Save_WMMXD>:
 8006570:	ece0 0102 	stfe	f0, [r0], #8
 8006574:	ece0 1102 	stfe	f1, [r0], #8
 8006578:	ece0 2102 	stfe	f2, [r0], #8
 800657c:	ece0 3102 	stfe	f3, [r0], #8
 8006580:	ece0 4102 	stfe	f4, [r0], #8
 8006584:	ece0 5102 	stfe	f5, [r0], #8
 8006588:	ece0 6102 	stfe	f6, [r0], #8
 800658c:	ece0 7102 	stfe	f7, [r0], #8
 8006590:	ece0 8102 	stfp	f0, [r0], #8
 8006594:	ece0 9102 	stfp	f1, [r0], #8
 8006598:	ece0 a102 	stfp	f2, [r0], #8
 800659c:	ece0 b102 	stfp	f3, [r0], #8
 80065a0:	ece0 c102 	stfp	f4, [r0], #8
 80065a4:	ece0 d102 	stfp	f5, [r0], #8
 80065a8:	ece0 e102 	stfp	f6, [r0], #8
 80065ac:	ece0 f102 	stfp	f7, [r0], #8
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop

080065b4 <__gnu_Unwind_Restore_WMMXC>:
 80065b4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80065b8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80065bc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80065c0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop

080065c8 <__gnu_Unwind_Save_WMMXC>:
 80065c8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80065cc:	fca0 9101 	stc2	1, cr9, [r0], #4
 80065d0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80065d4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop

080065dc <_Unwind_RaiseException>:
 80065dc:	46ec      	mov	ip, sp
 80065de:	b500      	push	{lr}
 80065e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80065e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80065f0:	a901      	add	r1, sp, #4
 80065f2:	f7ff fecd 	bl	8006390 <__gnu_Unwind_RaiseException>
 80065f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80065fa:	b012      	add	sp, #72	; 0x48
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <_Unwind_Resume>:
 8006600:	46ec      	mov	ip, sp
 8006602:	b500      	push	{lr}
 8006604:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006608:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006614:	a901      	add	r1, sp, #4
 8006616:	f7ff fef5 	bl	8006404 <__gnu_Unwind_Resume>
 800661a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800661e:	b012      	add	sp, #72	; 0x48
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <_Unwind_Resume_or_Rethrow>:
 8006624:	46ec      	mov	ip, sp
 8006626:	b500      	push	{lr}
 8006628:	e92d 5000 	stmdb	sp!, {ip, lr}
 800662c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006638:	a901      	add	r1, sp, #4
 800663a:	f7ff ff01 	bl	8006440 <__gnu_Unwind_Resume_or_Rethrow>
 800663e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006642:	b012      	add	sp, #72	; 0x48
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop

08006648 <_Unwind_ForcedUnwind>:
 8006648:	46ec      	mov	ip, sp
 800664a:	b500      	push	{lr}
 800664c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006650:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e92d 000c 	stmdb	sp!, {r2, r3}
 800665c:	ab01      	add	r3, sp, #4
 800665e:	f7ff fec7 	bl	80063f0 <__gnu_Unwind_ForcedUnwind>
 8006662:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006666:	b012      	add	sp, #72	; 0x48
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop

0800666c <_Unwind_Backtrace>:
 800666c:	46ec      	mov	ip, sp
 800666e:	b500      	push	{lr}
 8006670:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006674:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006680:	aa01      	add	r2, sp, #4
 8006682:	f7ff feef 	bl	8006464 <__gnu_Unwind_Backtrace>
 8006686:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800668a:	b012      	add	sp, #72	; 0x48
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <next_unwind_byte>:
 8006690:	7a02      	ldrb	r2, [r0, #8]
 8006692:	4603      	mov	r3, r0
 8006694:	b91a      	cbnz	r2, 800669e <next_unwind_byte+0xe>
 8006696:	7a42      	ldrb	r2, [r0, #9]
 8006698:	b942      	cbnz	r2, 80066ac <next_unwind_byte+0x1c>
 800669a:	20b0      	movs	r0, #176	; 0xb0
 800669c:	4770      	bx	lr
 800669e:	6800      	ldr	r0, [r0, #0]
 80066a0:	3a01      	subs	r2, #1
 80066a2:	721a      	strb	r2, [r3, #8]
 80066a4:	0202      	lsls	r2, r0, #8
 80066a6:	0e00      	lsrs	r0, r0, #24
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	4770      	bx	lr
 80066ac:	6841      	ldr	r1, [r0, #4]
 80066ae:	3a01      	subs	r2, #1
 80066b0:	7242      	strb	r2, [r0, #9]
 80066b2:	2203      	movs	r2, #3
 80066b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80066b8:	721a      	strb	r2, [r3, #8]
 80066ba:	6059      	str	r1, [r3, #4]
 80066bc:	0202      	lsls	r2, r0, #8
 80066be:	0e00      	lsrs	r0, r0, #24
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	4770      	bx	lr

080066c4 <_Unwind_GetGR.constprop.0>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	2100      	movs	r1, #0
 80066c8:	b084      	sub	sp, #16
 80066ca:	220c      	movs	r2, #12
 80066cc:	460b      	mov	r3, r1
 80066ce:	eb0d 0402 	add.w	r4, sp, r2
 80066d2:	9400      	str	r4, [sp, #0]
 80066d4:	f7ff fb5c 	bl	8005d90 <_Unwind_VRS_Get>
 80066d8:	9803      	ldr	r0, [sp, #12]
 80066da:	b004      	add	sp, #16
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop

080066e0 <unwind_UCB_from_context>:
 80066e0:	e7f0      	b.n	80066c4 <_Unwind_GetGR.constprop.0>
 80066e2:	bf00      	nop

080066e4 <__gnu_unwind_execute>:
 80066e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e8:	4606      	mov	r6, r0
 80066ea:	b085      	sub	sp, #20
 80066ec:	460d      	mov	r5, r1
 80066ee:	f04f 0900 	mov.w	r9, #0
 80066f2:	f44f 677f 	mov.w	r7, #4080	; 0xff0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7ff ffca 	bl	8006690 <next_unwind_byte>
 80066fc:	28b0      	cmp	r0, #176	; 0xb0
 80066fe:	4604      	mov	r4, r0
 8006700:	f000 80c9 	beq.w	8006896 <__gnu_unwind_execute+0x1b2>
 8006704:	f010 0180 	ands.w	r1, r0, #128	; 0x80
 8006708:	d021      	beq.n	800674e <__gnu_unwind_execute+0x6a>
 800670a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	f000 8085 	beq.w	800681e <__gnu_unwind_execute+0x13a>
 8006714:	2b90      	cmp	r3, #144	; 0x90
 8006716:	d037      	beq.n	8006788 <__gnu_unwind_execute+0xa4>
 8006718:	2ba0      	cmp	r3, #160	; 0xa0
 800671a:	d054      	beq.n	80067c6 <__gnu_unwind_execute+0xe2>
 800671c:	2bb0      	cmp	r3, #176	; 0xb0
 800671e:	d065      	beq.n	80067ec <__gnu_unwind_execute+0x108>
 8006720:	2bc0      	cmp	r3, #192	; 0xc0
 8006722:	f000 8094 	beq.w	800684e <__gnu_unwind_execute+0x16a>
 8006726:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800672a:	2bd0      	cmp	r3, #208	; 0xd0
 800672c:	d10b      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 800672e:	f000 0207 	and.w	r2, r0, #7
 8006732:	2101      	movs	r1, #1
 8006734:	3201      	adds	r2, #1
 8006736:	4630      	mov	r0, r6
 8006738:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800673c:	2305      	movs	r3, #5
 800673e:	f7ff fcdd 	bl	80060fc <_Unwind_VRS_Pop>
 8006742:	2800      	cmp	r0, #0
 8006744:	d0d7      	beq.n	80066f6 <__gnu_unwind_execute+0x12>
 8006746:	2009      	movs	r0, #9
 8006748:	b005      	add	sp, #20
 800674a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800674e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8006752:	ab03      	add	r3, sp, #12
 8006754:	220d      	movs	r2, #13
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4630      	mov	r0, r6
 800675a:	460b      	mov	r3, r1
 800675c:	f7ff fb18 	bl	8005d90 <_Unwind_VRS_Get>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	fa5f f888 	uxtb.w	r8, r8
 8006766:	0664      	lsls	r4, r4, #25
 8006768:	f108 0804 	add.w	r8, r8, #4
 800676c:	ac03      	add	r4, sp, #12
 800676e:	bf4c      	ite	mi
 8006770:	ebc8 0303 	rsbmi	r3, r8, r3
 8006774:	4443      	addpl	r3, r8
 8006776:	9400      	str	r4, [sp, #0]
 8006778:	9303      	str	r3, [sp, #12]
 800677a:	2100      	movs	r1, #0
 800677c:	4630      	mov	r0, r6
 800677e:	220d      	movs	r2, #13
 8006780:	460b      	mov	r3, r1
 8006782:	f7ff fb2b 	bl	8005ddc <_Unwind_VRS_Set>
 8006786:	e7b6      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006788:	f000 020f 	and.w	r2, r0, #15
 800678c:	f1a2 000d 	sub.w	r0, r2, #13
 8006790:	4244      	negs	r4, r0
 8006792:	eb44 0400 	adc.w	r4, r4, r0
 8006796:	2a0f      	cmp	r2, #15
 8006798:	bf14      	ite	ne
 800679a:	46a0      	movne	r8, r4
 800679c:	f044 0801 	orreq.w	r8, r4, #1
 80067a0:	f1b8 0f00 	cmp.w	r8, #0
 80067a4:	d1cf      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 80067a6:	4641      	mov	r1, r8
 80067a8:	4643      	mov	r3, r8
 80067aa:	4630      	mov	r0, r6
 80067ac:	ac03      	add	r4, sp, #12
 80067ae:	9400      	str	r4, [sp, #0]
 80067b0:	f7ff faee 	bl	8005d90 <_Unwind_VRS_Get>
 80067b4:	ab03      	add	r3, sp, #12
 80067b6:	4630      	mov	r0, r6
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4641      	mov	r1, r8
 80067bc:	220d      	movs	r2, #13
 80067be:	4643      	mov	r3, r8
 80067c0:	f7ff fb0c 	bl	8005ddc <_Unwind_VRS_Set>
 80067c4:	e797      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80067c6:	43c2      	mvns	r2, r0
 80067c8:	f002 0207 	and.w	r2, r2, #7
 80067cc:	fa57 f202 	asrs.w	r2, r7, r2
 80067d0:	0701      	lsls	r1, r0, #28
 80067d2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80067d6:	4630      	mov	r0, r6
 80067d8:	bf48      	it	mi
 80067da:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80067de:	2100      	movs	r1, #0
 80067e0:	460b      	mov	r3, r1
 80067e2:	f7ff fc8b 	bl	80060fc <_Unwind_VRS_Pop>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d1ad      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 80067ea:	e784      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80067ec:	28b1      	cmp	r0, #177	; 0xb1
 80067ee:	d076      	beq.n	80068de <__gnu_unwind_execute+0x1fa>
 80067f0:	28b2      	cmp	r0, #178	; 0xb2
 80067f2:	f000 8087 	beq.w	8006904 <__gnu_unwind_execute+0x220>
 80067f6:	28b3      	cmp	r0, #179	; 0xb3
 80067f8:	f000 80aa 	beq.w	8006950 <__gnu_unwind_execute+0x26c>
 80067fc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8006800:	2bb4      	cmp	r3, #180	; 0xb4
 8006802:	d05e      	beq.n	80068c2 <__gnu_unwind_execute+0x1de>
 8006804:	f000 0207 	and.w	r2, r0, #7
 8006808:	2101      	movs	r1, #1
 800680a:	3201      	adds	r2, #1
 800680c:	4630      	mov	r0, r6
 800680e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006812:	460b      	mov	r3, r1
 8006814:	f7ff fc72 	bl	80060fc <_Unwind_VRS_Pop>
 8006818:	2800      	cmp	r0, #0
 800681a:	d194      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 800681c:	e76b      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 800681e:	4628      	mov	r0, r5
 8006820:	0224      	lsls	r4, r4, #8
 8006822:	f7ff ff35 	bl	8006690 <next_unwind_byte>
 8006826:	4304      	orrs	r4, r0
 8006828:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800682c:	d08b      	beq.n	8006746 <__gnu_unwind_execute+0x62>
 800682e:	0522      	lsls	r2, r4, #20
 8006830:	2100      	movs	r1, #0
 8006832:	4630      	mov	r0, r6
 8006834:	460b      	mov	r3, r1
 8006836:	0c12      	lsrs	r2, r2, #16
 8006838:	0124      	lsls	r4, r4, #4
 800683a:	f7ff fc5f 	bl	80060fc <_Unwind_VRS_Pop>
 800683e:	2800      	cmp	r0, #0
 8006840:	d181      	bne.n	8006746 <__gnu_unwind_execute+0x62>
 8006842:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8006846:	bf18      	it	ne
 8006848:	f04f 0901 	movne.w	r9, #1
 800684c:	e753      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 800684e:	28c6      	cmp	r0, #198	; 0xc6
 8006850:	f000 8091 	beq.w	8006976 <__gnu_unwind_execute+0x292>
 8006854:	28c7      	cmp	r0, #199	; 0xc7
 8006856:	f000 80a1 	beq.w	800699c <__gnu_unwind_execute+0x2b8>
 800685a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800685e:	2bc0      	cmp	r3, #192	; 0xc0
 8006860:	f000 80af 	beq.w	80069c2 <__gnu_unwind_execute+0x2de>
 8006864:	28c8      	cmp	r0, #200	; 0xc8
 8006866:	f000 80ba 	beq.w	80069de <__gnu_unwind_execute+0x2fa>
 800686a:	28c9      	cmp	r0, #201	; 0xc9
 800686c:	f47f af6b 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff ff0d 	bl	8006690 <next_unwind_byte>
 8006876:	2101      	movs	r1, #1
 8006878:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800687c:	f000 030f 	and.w	r3, r0, #15
 8006880:	3301      	adds	r3, #1
 8006882:	4630      	mov	r0, r6
 8006884:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006888:	2305      	movs	r3, #5
 800688a:	f7ff fc37 	bl	80060fc <_Unwind_VRS_Pop>
 800688e:	2800      	cmp	r0, #0
 8006890:	f47f af59 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006894:	e72f      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006896:	2000      	movs	r0, #0
 8006898:	f1b9 0f00 	cmp.w	r9, #0
 800689c:	f47f af54 	bne.w	8006748 <__gnu_unwind_execute+0x64>
 80068a0:	4649      	mov	r1, r9
 80068a2:	220e      	movs	r2, #14
 80068a4:	464b      	mov	r3, r9
 80068a6:	4630      	mov	r0, r6
 80068a8:	ac03      	add	r4, sp, #12
 80068aa:	9400      	str	r4, [sp, #0]
 80068ac:	f7ff fa70 	bl	8005d90 <_Unwind_VRS_Get>
 80068b0:	4630      	mov	r0, r6
 80068b2:	4649      	mov	r1, r9
 80068b4:	220f      	movs	r2, #15
 80068b6:	464b      	mov	r3, r9
 80068b8:	9400      	str	r4, [sp, #0]
 80068ba:	f7ff fa8f 	bl	8005ddc <_Unwind_VRS_Set>
 80068be:	4648      	mov	r0, r9
 80068c0:	e742      	b.n	8006748 <__gnu_unwind_execute+0x64>
 80068c2:	f000 0203 	and.w	r2, r0, #3
 80068c6:	2102      	movs	r1, #2
 80068c8:	3201      	adds	r2, #1
 80068ca:	4630      	mov	r0, r6
 80068cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80068d0:	460b      	mov	r3, r1
 80068d2:	f7ff fc13 	bl	80060fc <_Unwind_VRS_Pop>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f47f af35 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80068dc:	e70b      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff fed6 	bl	8006690 <next_unwind_byte>
 80068e4:	4602      	mov	r2, r0
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f43f af2d 	beq.w	8006746 <__gnu_unwind_execute+0x62>
 80068ec:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 80068f0:	f47f af29 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80068f4:	4630      	mov	r0, r6
 80068f6:	460b      	mov	r3, r1
 80068f8:	f7ff fc00 	bl	80060fc <_Unwind_VRS_Pop>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f47f af22 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006902:	e6f8      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006904:	2100      	movs	r1, #0
 8006906:	220d      	movs	r2, #13
 8006908:	460b      	mov	r3, r1
 800690a:	4630      	mov	r0, r6
 800690c:	ac03      	add	r4, sp, #12
 800690e:	9400      	str	r4, [sp, #0]
 8006910:	f7ff fa3e 	bl	8005d90 <_Unwind_VRS_Get>
 8006914:	4628      	mov	r0, r5
 8006916:	f7ff febb 	bl	8006690 <next_unwind_byte>
 800691a:	2402      	movs	r4, #2
 800691c:	0602      	lsls	r2, r0, #24
 800691e:	d50b      	bpl.n	8006938 <__gnu_unwind_execute+0x254>
 8006920:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8006924:	9a03      	ldr	r2, [sp, #12]
 8006926:	4628      	mov	r0, r5
 8006928:	40a3      	lsls	r3, r4
 800692a:	3407      	adds	r4, #7
 800692c:	18d3      	adds	r3, r2, r3
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	f7ff feae 	bl	8006690 <next_unwind_byte>
 8006934:	0603      	lsls	r3, r0, #24
 8006936:	d4f3      	bmi.n	8006920 <__gnu_unwind_execute+0x23c>
 8006938:	ab03      	add	r3, sp, #12
 800693a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	fa10 f404 	lsls.w	r4, r0, r4
 8006946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800694a:	191b      	adds	r3, r3, r4
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	e714      	b.n	800677a <__gnu_unwind_execute+0x96>
 8006950:	4628      	mov	r0, r5
 8006952:	f7ff fe9d 	bl	8006690 <next_unwind_byte>
 8006956:	2101      	movs	r1, #1
 8006958:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800695c:	f000 030f 	and.w	r3, r0, #15
 8006960:	3301      	adds	r3, #1
 8006962:	4630      	mov	r0, r6
 8006964:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006968:	460b      	mov	r3, r1
 800696a:	f7ff fbc7 	bl	80060fc <_Unwind_VRS_Pop>
 800696e:	2800      	cmp	r0, #0
 8006970:	f47f aee9 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006974:	e6bf      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006976:	4628      	mov	r0, r5
 8006978:	f7ff fe8a 	bl	8006690 <next_unwind_byte>
 800697c:	2103      	movs	r1, #3
 800697e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006982:	f000 030f 	and.w	r3, r0, #15
 8006986:	3301      	adds	r3, #1
 8006988:	4630      	mov	r0, r6
 800698a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800698e:	460b      	mov	r3, r1
 8006990:	f7ff fbb4 	bl	80060fc <_Unwind_VRS_Pop>
 8006994:	2800      	cmp	r0, #0
 8006996:	f47f aed6 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 800699a:	e6ac      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 800699c:	4628      	mov	r0, r5
 800699e:	f7ff fe77 	bl	8006690 <next_unwind_byte>
 80069a2:	4602      	mov	r2, r0
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f43f aece 	beq.w	8006746 <__gnu_unwind_execute+0x62>
 80069aa:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80069ae:	f47f aeca 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80069b2:	4630      	mov	r0, r6
 80069b4:	2104      	movs	r1, #4
 80069b6:	f7ff fba1 	bl	80060fc <_Unwind_VRS_Pop>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f47f aec3 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80069c0:	e699      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80069c2:	f000 020f 	and.w	r2, r0, #15
 80069c6:	2103      	movs	r1, #3
 80069c8:	3201      	adds	r2, #1
 80069ca:	4630      	mov	r0, r6
 80069cc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80069d0:	460b      	mov	r3, r1
 80069d2:	f7ff fb93 	bl	80060fc <_Unwind_VRS_Pop>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f47f aeb5 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 80069dc:	e68b      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff fe56 	bl	8006690 <next_unwind_byte>
 80069e4:	2101      	movs	r1, #1
 80069e6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80069ea:	f000 030f 	and.w	r3, r0, #15
 80069ee:	3210      	adds	r2, #16
 80069f0:	3301      	adds	r3, #1
 80069f2:	4630      	mov	r0, r6
 80069f4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80069f8:	2305      	movs	r3, #5
 80069fa:	f7ff fb7f 	bl	80060fc <_Unwind_VRS_Pop>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f47f aea1 	bne.w	8006746 <__gnu_unwind_execute+0x62>
 8006a04:	e677      	b.n	80066f6 <__gnu_unwind_execute+0x12>
 8006a06:	bf00      	nop

08006a08 <__gnu_unwind_frame>:
 8006a08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	b530      	push	{r4, r5, lr}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	f103 0408 	add.w	r4, r3, #8
 8006a16:	2503      	movs	r5, #3
 8006a18:	f88d 500c 	strb.w	r5, [sp, #12]
 8006a1c:	79db      	ldrb	r3, [r3, #7]
 8006a1e:	a901      	add	r1, sp, #4
 8006a20:	0212      	lsls	r2, r2, #8
 8006a22:	9402      	str	r4, [sp, #8]
 8006a24:	9201      	str	r2, [sp, #4]
 8006a26:	f88d 300d 	strb.w	r3, [sp, #13]
 8006a2a:	f7ff fe5b 	bl	80066e4 <__gnu_unwind_execute>
 8006a2e:	b005      	add	sp, #20
 8006a30:	bd30      	pop	{r4, r5, pc}
 8006a32:	bf00      	nop

08006a34 <_Unwind_GetRegionStart>:
 8006a34:	b508      	push	{r3, lr}
 8006a36:	f7ff fe53 	bl	80066e0 <unwind_UCB_from_context>
 8006a3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006a3c:	bd08      	pop	{r3, pc}
 8006a3e:	bf00      	nop

08006a40 <_Unwind_GetLanguageSpecificData>:
 8006a40:	b508      	push	{r3, lr}
 8006a42:	f7ff fe4d 	bl	80066e0 <unwind_UCB_from_context>
 8006a46:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006a48:	79d8      	ldrb	r0, [r3, #7]
 8006a4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006a4e:	f103 0008 	add.w	r0, r3, #8
 8006a52:	bd08      	pop	{r3, pc}

08006a54 <_Unwind_GetDataRelBase>:
 8006a54:	b508      	push	{r3, lr}
 8006a56:	f000 f805 	bl	8006a64 <abort>
 8006a5a:	bf00      	nop

08006a5c <_Unwind_GetTextRelBase>:
 8006a5c:	b508      	push	{r3, lr}
 8006a5e:	f000 f801 	bl	8006a64 <abort>
 8006a62:	bf00      	nop

08006a64 <abort>:
 8006a64:	b508      	push	{r3, lr}
 8006a66:	2006      	movs	r0, #6
 8006a68:	f001 f9e0 	bl	8007e2c <raise>
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	f011 fb0b 	bl	8018088 <_exit>
 8006a72:	bf00      	nop

08006a74 <__assert_func>:
 8006a74:	4604      	mov	r4, r0
 8006a76:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <__assert_func+0x2c>)
 8006a78:	b500      	push	{lr}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	4d09      	ldr	r5, [pc, #36]	; (8006aa4 <__assert_func+0x30>)
 8006a80:	68c0      	ldr	r0, [r0, #12]
 8006a82:	b14a      	cbz	r2, 8006a98 <__assert_func+0x24>
 8006a84:	e88d 0022 	stmia.w	sp, {r1, r5}
 8006a88:	9202      	str	r2, [sp, #8]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4906      	ldr	r1, [pc, #24]	; (8006aa8 <__assert_func+0x34>)
 8006a8e:	4623      	mov	r3, r4
 8006a90:	f000 f82e 	bl	8006af0 <fiprintf>
 8006a94:	f7ff ffe6 	bl	8006a64 <abort>
 8006a98:	4d04      	ldr	r5, [pc, #16]	; (8006aac <__assert_func+0x38>)
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	e7f2      	b.n	8006a84 <__assert_func+0x10>
 8006a9e:	bf00      	nop
 8006aa0:	20000008 	.word	0x20000008
 8006aa4:	0801e820 	.word	0x0801e820
 8006aa8:	0801e830 	.word	0x0801e830
 8006aac:	0801e82c 	.word	0x0801e82c

08006ab0 <__assert>:
 8006ab0:	b508      	push	{r3, lr}
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f7ff ffdd 	bl	8006a74 <__assert_func>
 8006aba:	bf00      	nop

08006abc <__cxa_atexit>:
 8006abc:	b410      	push	{r4}
 8006abe:	460c      	mov	r4, r1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	2002      	movs	r0, #2
 8006ac8:	bc10      	pop	{r4}
 8006aca:	f003 bc21 	b.w	800a310 <__register_exitproc>
 8006ace:	bf00      	nop

08006ad0 <_fiprintf_r>:
 8006ad0:	b40c      	push	{r2, r3}
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	ac04      	add	r4, sp, #16
 8006ad8:	f854 2b04 	ldr.w	r2, [r4], #4
 8006adc:	4623      	mov	r3, r4
 8006ade:	9401      	str	r4, [sp, #4]
 8006ae0:	f002 fdec 	bl	80096bc <_vfiprintf_r>
 8006ae4:	b002      	add	sp, #8
 8006ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aea:	b002      	add	sp, #8
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <fiprintf>:
 8006af0:	b40e      	push	{r1, r2, r3}
 8006af2:	f240 0308 	movw	r3, #8
 8006af6:	b510      	push	{r4, lr}
 8006af8:	b083      	sub	sp, #12
 8006afa:	ac05      	add	r4, sp, #20
 8006afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b00:	4601      	mov	r1, r0
 8006b02:	f854 2b04 	ldr.w	r2, [r4], #4
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	4623      	mov	r3, r4
 8006b0a:	9401      	str	r4, [sp, #4]
 8006b0c:	f002 fdd6 	bl	80096bc <_vfiprintf_r>
 8006b10:	b003      	add	sp, #12
 8006b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b16:	b003      	add	sp, #12
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop

08006b1c <_fputc_r>:
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	4604      	mov	r4, r0
 8006b20:	b082      	sub	sp, #8
 8006b22:	b138      	cbz	r0, 8006b34 <_fputc_r+0x18>
 8006b24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b26:	b92b      	cbnz	r3, 8006b34 <_fputc_r+0x18>
 8006b28:	9101      	str	r1, [sp, #4]
 8006b2a:	9200      	str	r2, [sp, #0]
 8006b2c:	f004 fd8a 	bl	800b644 <__sinit>
 8006b30:	9a00      	ldr	r2, [sp, #0]
 8006b32:	9901      	ldr	r1, [sp, #4]
 8006b34:	4620      	mov	r0, r4
 8006b36:	b002      	add	sp, #8
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f000 be72 	b.w	8007824 <_putc_r>

08006b40 <fputc>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4606      	mov	r6, r0
 8006b44:	4c07      	ldr	r4, [pc, #28]	; (8006b64 <fputc+0x24>)
 8006b46:	460d      	mov	r5, r1
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	b120      	cbz	r0, 8006b56 <fputc+0x16>
 8006b4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b4e:	b913      	cbnz	r3, 8006b56 <fputc+0x16>
 8006b50:	f004 fd78 	bl	800b644 <__sinit>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	4631      	mov	r1, r6
 8006b58:	462a      	mov	r2, r5
 8006b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b5e:	f000 be61 	b.w	8007824 <_putc_r>
 8006b62:	bf00      	nop
 8006b64:	20000008 	.word	0x20000008

08006b68 <_fputs_r>:
 8006b68:	b530      	push	{r4, r5, lr}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4615      	mov	r5, r2
 8006b72:	9104      	str	r1, [sp, #16]
 8006b74:	f001 fb0e 	bl	8008194 <strlen>
 8006b78:	ab04      	add	r3, sp, #16
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9302      	str	r3, [sp, #8]
 8006b80:	9003      	str	r0, [sp, #12]
 8006b82:	9005      	str	r0, [sp, #20]
 8006b84:	b10c      	cbz	r4, 8006b8a <_fputs_r+0x22>
 8006b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b88:	b18b      	cbz	r3, 8006bae <_fputs_r+0x46>
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	4629      	mov	r1, r5
 8006b90:	049a      	lsls	r2, r3, #18
 8006b92:	bf5f      	itttt	pl
 8006b94:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8006b98:	81ab      	strhpl	r3, [r5, #12]
 8006b9a:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
 8006b9c:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 8006ba0:	aa01      	add	r2, sp, #4
 8006ba2:	bf58      	it	pl
 8006ba4:	666b      	strpl	r3, [r5, #100]	; 0x64
 8006ba6:	f000 f80f 	bl	8006bc8 <__sfvwrite_r>
 8006baa:	b007      	add	sp, #28
 8006bac:	bd30      	pop	{r4, r5, pc}
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f004 fd48 	bl	800b644 <__sinit>
 8006bb4:	e7e9      	b.n	8006b8a <_fputs_r+0x22>
 8006bb6:	bf00      	nop

08006bb8 <fputs>:
 8006bb8:	f240 0308 	movw	r3, #8
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	e7cf      	b.n	8006b68 <_fputs_r>

08006bc8 <__sfvwrite_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	4690      	mov	r8, r2
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	9001      	str	r0, [sp, #4]
 8006bd4:	6890      	ldr	r0, [r2, #8]
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d04d      	beq.n	8006c76 <__sfvwrite_r+0xae>
 8006bda:	898b      	ldrh	r3, [r1, #12]
 8006bdc:	0719      	lsls	r1, r3, #28
 8006bde:	d56b      	bpl.n	8006cb8 <__sfvwrite_r+0xf0>
 8006be0:	6922      	ldr	r2, [r4, #16]
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	d068      	beq.n	8006cb8 <__sfvwrite_r+0xf0>
 8006be6:	f013 0b02 	ands.w	fp, r3, #2
 8006bea:	f8d8 5000 	ldr.w	r5, [r8]
 8006bee:	bf1c      	itt	ne
 8006bf0:	f04f 0900 	movne.w	r9, #0
 8006bf4:	464f      	movne	r7, r9
 8006bf6:	d145      	bne.n	8006c84 <__sfvwrite_r+0xbc>
 8006bf8:	f013 0901 	ands.w	r9, r3, #1
 8006bfc:	bf1e      	ittt	ne
 8006bfe:	46dc      	movne	ip, fp
 8006c00:	46da      	movne	sl, fp
 8006c02:	465f      	movne	r7, fp
 8006c04:	f000 80b5 	beq.w	8006d72 <__sfvwrite_r+0x1aa>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	d065      	beq.n	8006cd8 <__sfvwrite_r+0x110>
 8006c0c:	f1bc 0f00 	cmp.w	ip, #0
 8006c10:	f000 8083 	beq.w	8006d1a <__sfvwrite_r+0x152>
 8006c14:	6922      	ldr	r2, [r4, #16]
 8006c16:	45bb      	cmp	fp, r7
 8006c18:	bf34      	ite	cc
 8006c1a:	46d9      	movcc	r9, fp
 8006c1c:	46b9      	movcs	r9, r7
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	6963      	ldr	r3, [r4, #20]
 8006c22:	68a6      	ldr	r6, [r4, #8]
 8006c24:	4290      	cmp	r0, r2
 8006c26:	bf94      	ite	ls
 8006c28:	2200      	movls	r2, #0
 8006c2a:	2201      	movhi	r2, #1
 8006c2c:	199e      	adds	r6, r3, r6
 8006c2e:	45b1      	cmp	r9, r6
 8006c30:	bfd4      	ite	le
 8006c32:	2200      	movle	r2, #0
 8006c34:	f002 0201 	andgt.w	r2, r2, #1
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	f040 8081 	bne.w	8006d40 <__sfvwrite_r+0x178>
 8006c3e:	4599      	cmp	r9, r3
 8006c40:	db51      	blt.n	8006ce6 <__sfvwrite_r+0x11e>
 8006c42:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c44:	4652      	mov	r2, sl
 8006c46:	69e1      	ldr	r1, [r4, #28]
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	f8cd c000 	str.w	ip, [sp]
 8006c4e:	47b0      	blx	r6
 8006c50:	f8dd c000 	ldr.w	ip, [sp]
 8006c54:	2800      	cmp	r0, #0
 8006c56:	4606      	mov	r6, r0
 8006c58:	f340 8084 	ble.w	8006d64 <__sfvwrite_r+0x19c>
 8006c5c:	ebbb 0b06 	subs.w	fp, fp, r6
 8006c60:	d054      	beq.n	8006d0c <__sfvwrite_r+0x144>
 8006c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c66:	44b2      	add	sl, r6
 8006c68:	1bbf      	subs	r7, r7, r6
 8006c6a:	1b9e      	subs	r6, r3, r6
 8006c6c:	f8c8 6008 	str.w	r6, [r8, #8]
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	d1c9      	bne.n	8006c08 <__sfvwrite_r+0x40>
 8006c74:	4630      	mov	r0, r6
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	f8d5 9000 	ldr.w	r9, [r5]
 8006c80:	686f      	ldr	r7, [r5, #4]
 8006c82:	3508      	adds	r5, #8
 8006c84:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006c88:	bf34      	ite	cc
 8006c8a:	463b      	movcc	r3, r7
 8006c8c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8006c90:	464a      	mov	r2, r9
 8006c92:	9801      	ldr	r0, [sp, #4]
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	d0f1      	beq.n	8006c7c <__sfvwrite_r+0xb4>
 8006c98:	69e1      	ldr	r1, [r4, #28]
 8006c9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c9c:	47b0      	blx	r6
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	4481      	add	r9, r0
 8006ca2:	ebc0 0707 	rsb	r7, r0, r7
 8006ca6:	dd5d      	ble.n	8006d64 <__sfvwrite_r+0x19c>
 8006ca8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8006cac:	1a30      	subs	r0, r6, r0
 8006cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d1e6      	bne.n	8006c84 <__sfvwrite_r+0xbc>
 8006cb6:	e7de      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006cb8:	9801      	ldr	r0, [sp, #4]
 8006cba:	4621      	mov	r1, r4
 8006cbc:	f003 facc 	bl	800a258 <__swsetup_r>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d08f      	beq.n	8006be6 <__sfvwrite_r+0x1e>
 8006cc6:	9901      	ldr	r1, [sp, #4]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	2309      	movs	r3, #9
 8006cd4:	600b      	str	r3, [r1, #0]
 8006cd6:	e7ce      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006cd8:	f8d5 a000 	ldr.w	sl, [r5]
 8006cdc:	f04f 0c00 	mov.w	ip, #0
 8006ce0:	686f      	ldr	r7, [r5, #4]
 8006ce2:	3508      	adds	r5, #8
 8006ce4:	e790      	b.n	8006c08 <__sfvwrite_r+0x40>
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	4651      	mov	r1, sl
 8006cea:	464e      	mov	r6, r9
 8006cec:	f8cd c000 	str.w	ip, [sp]
 8006cf0:	f000 fcea 	bl	80076c8 <memmove>
 8006cf4:	68a2      	ldr	r2, [r4, #8]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	ebbb 0b06 	subs.w	fp, fp, r6
 8006cfc:	ebc9 0202 	rsb	r2, r9, r2
 8006d00:	f8dd c000 	ldr.w	ip, [sp]
 8006d04:	444b      	add	r3, r9
 8006d06:	60a2      	str	r2, [r4, #8]
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	d1aa      	bne.n	8006c62 <__sfvwrite_r+0x9a>
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	f004 fb76 	bl	800b400 <_fflush_r>
 8006d14:	bb30      	cbnz	r0, 8006d64 <__sfvwrite_r+0x19c>
 8006d16:	46dc      	mov	ip, fp
 8006d18:	e7a3      	b.n	8006c62 <__sfvwrite_r+0x9a>
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	210a      	movs	r1, #10
 8006d1e:	463a      	mov	r2, r7
 8006d20:	f107 0b01 	add.w	fp, r7, #1
 8006d24:	f000 fc1a 	bl	800755c <memchr>
 8006d28:	f04f 0c01 	mov.w	ip, #1
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f af71 	beq.w	8006c14 <__sfvwrite_r+0x4c>
 8006d32:	f100 0b01 	add.w	fp, r0, #1
 8006d36:	f04f 0c01 	mov.w	ip, #1
 8006d3a:	ebca 0b0b 	rsb	fp, sl, fp
 8006d3e:	e769      	b.n	8006c14 <__sfvwrite_r+0x4c>
 8006d40:	4651      	mov	r1, sl
 8006d42:	4632      	mov	r2, r6
 8006d44:	f8cd c000 	str.w	ip, [sp]
 8006d48:	f000 fcbe 	bl	80076c8 <memmove>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	9801      	ldr	r0, [sp, #4]
 8006d52:	199b      	adds	r3, r3, r6
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	f004 fb53 	bl	800b400 <_fflush_r>
 8006d5a:	f8dd c000 	ldr.w	ip, [sp]
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f43f af7c 	beq.w	8006c5c <__sfvwrite_r+0x94>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	e781      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006d72:	464e      	mov	r6, r9
 8006d74:	b326      	cbz	r6, 8006dc0 <__sfvwrite_r+0x1f8>
 8006d76:	059a      	lsls	r2, r3, #22
 8006d78:	68a7      	ldr	r7, [r4, #8]
 8006d7a:	d526      	bpl.n	8006dca <__sfvwrite_r+0x202>
 8006d7c:	42be      	cmp	r6, r7
 8006d7e:	46bb      	mov	fp, r7
 8006d80:	d246      	bcs.n	8006e10 <__sfvwrite_r+0x248>
 8006d82:	6820      	ldr	r0, [r4, #0]
 8006d84:	4633      	mov	r3, r6
 8006d86:	46b3      	mov	fp, r6
 8006d88:	46b2      	mov	sl, r6
 8006d8a:	4637      	mov	r7, r6
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	465a      	mov	r2, fp
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	f000 fc99 	bl	80076c8 <memmove>
 8006d96:	9b00      	ldr	r3, [sp, #0]
 8006d98:	68a1      	ldr	r1, [r4, #8]
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	1acb      	subs	r3, r1, r3
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	eb02 030b 	add.w	r3, r2, fp
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006daa:	1bc7      	subs	r7, r0, r7
 8006dac:	f8c8 7008 	str.w	r7, [r8, #8]
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	d02b      	beq.n	8006e0c <__sfvwrite_r+0x244>
 8006db4:	ebca 0606 	rsb	r6, sl, r6
 8006db8:	44d1      	add	r9, sl
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	2e00      	cmp	r6, #0
 8006dbe:	d1da      	bne.n	8006d76 <__sfvwrite_r+0x1ae>
 8006dc0:	f8d5 9000 	ldr.w	r9, [r5]
 8006dc4:	686e      	ldr	r6, [r5, #4]
 8006dc6:	3508      	adds	r5, #8
 8006dc8:	e7d4      	b.n	8006d74 <__sfvwrite_r+0x1ac>
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	46ba      	mov	sl, r7
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bf94      	ite	ls
 8006dd4:	2300      	movls	r3, #0
 8006dd6:	2301      	movhi	r3, #1
 8006dd8:	42b7      	cmp	r7, r6
 8006dda:	bf2c      	ite	cs
 8006ddc:	2300      	movcs	r3, #0
 8006dde:	f003 0301 	andcc.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d129      	bne.n	8006e3a <__sfvwrite_r+0x272>
 8006de6:	6963      	ldr	r3, [r4, #20]
 8006de8:	429e      	cmp	r6, r3
 8006dea:	d319      	bcc.n	8006e20 <__sfvwrite_r+0x258>
 8006dec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006dee:	464a      	mov	r2, r9
 8006df0:	69e1      	ldr	r1, [r4, #28]
 8006df2:	9801      	ldr	r0, [sp, #4]
 8006df4:	47b8      	blx	r7
 8006df6:	2800      	cmp	r0, #0
 8006df8:	4607      	mov	r7, r0
 8006dfa:	ddb3      	ble.n	8006d64 <__sfvwrite_r+0x19c>
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006e02:	1bc7      	subs	r7, r0, r7
 8006e04:	f8c8 7008 	str.w	r7, [r8, #8]
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	d1d3      	bne.n	8006db4 <__sfvwrite_r+0x1ec>
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	e732      	b.n	8006c76 <__sfvwrite_r+0xae>
 8006e10:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006e14:	d11f      	bne.n	8006e56 <__sfvwrite_r+0x28e>
 8006e16:	463b      	mov	r3, r7
 8006e18:	6820      	ldr	r0, [r4, #0]
 8006e1a:	46b2      	mov	sl, r6
 8006e1c:	4637      	mov	r7, r6
 8006e1e:	e7b5      	b.n	8006d8c <__sfvwrite_r+0x1c4>
 8006e20:	4632      	mov	r2, r6
 8006e22:	4649      	mov	r1, r9
 8006e24:	f000 fc50 	bl	80076c8 <memmove>
 8006e28:	68a2      	ldr	r2, [r4, #8]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	1b92      	subs	r2, r2, r6
 8006e30:	46b2      	mov	sl, r6
 8006e32:	199b      	adds	r3, r3, r6
 8006e34:	60a2      	str	r2, [r4, #8]
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	e7b5      	b.n	8006da6 <__sfvwrite_r+0x1de>
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	463a      	mov	r2, r7
 8006e3e:	f000 fc43 	bl	80076c8 <memmove>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	9801      	ldr	r0, [sp, #4]
 8006e46:	4621      	mov	r1, r4
 8006e48:	19db      	adds	r3, r3, r7
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	f004 fad8 	bl	800b400 <_fflush_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d0a8      	beq.n	8006da6 <__sfvwrite_r+0x1de>
 8006e54:	e786      	b.n	8006d64 <__sfvwrite_r+0x19c>
 8006e56:	6962      	ldr	r2, [r4, #20]
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8006e60:	1a40      	subs	r0, r0, r1
 8006e62:	9003      	str	r0, [sp, #12]
 8006e64:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8006e68:	3001      	adds	r0, #1
 8006e6a:	1980      	adds	r0, r0, r6
 8006e6c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8006e70:	4584      	cmp	ip, r0
 8006e72:	4662      	mov	r2, ip
 8006e74:	bf38      	it	cc
 8006e76:	4684      	movcc	ip, r0
 8006e78:	9801      	ldr	r0, [sp, #4]
 8006e7a:	bf38      	it	cc
 8006e7c:	4662      	movcc	r2, ip
 8006e7e:	055b      	lsls	r3, r3, #21
 8006e80:	d527      	bpl.n	8006ed2 <__sfvwrite_r+0x30a>
 8006e82:	4611      	mov	r1, r2
 8006e84:	f8cd c000 	str.w	ip, [sp]
 8006e88:	f000 f8b6 	bl	8006ff8 <_malloc_r>
 8006e8c:	f8dd c000 	ldr.w	ip, [sp]
 8006e90:	9002      	str	r0, [sp, #8]
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d02e      	beq.n	8006ef4 <__sfvwrite_r+0x32c>
 8006e96:	6921      	ldr	r1, [r4, #16]
 8006e98:	9802      	ldr	r0, [sp, #8]
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	f8cd c000 	str.w	ip, [sp]
 8006ea0:	f000 fbd0 	bl	8007644 <memcpy>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	f8dd c000 	ldr.w	ip, [sp]
 8006eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	9902      	ldr	r1, [sp, #8]
 8006eb6:	4633      	mov	r3, r6
 8006eb8:	9a03      	ldr	r2, [sp, #12]
 8006eba:	46b3      	mov	fp, r6
 8006ebc:	46b2      	mov	sl, r6
 8006ebe:	4637      	mov	r7, r6
 8006ec0:	1888      	adds	r0, r1, r2
 8006ec2:	6121      	str	r1, [r4, #16]
 8006ec4:	ebc2 020c 	rsb	r2, r2, ip
 8006ec8:	6020      	str	r0, [r4, #0]
 8006eca:	f8c4 c014 	str.w	ip, [r4, #20]
 8006ece:	60a2      	str	r2, [r4, #8]
 8006ed0:	e75c      	b.n	8006d8c <__sfvwrite_r+0x1c4>
 8006ed2:	f8cd c000 	str.w	ip, [sp]
 8006ed6:	f000 fd13 	bl	8007900 <_realloc_r>
 8006eda:	f8dd c000 	ldr.w	ip, [sp]
 8006ede:	9002      	str	r0, [sp, #8]
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1e7      	bne.n	8006eb4 <__sfvwrite_r+0x2ec>
 8006ee4:	6921      	ldr	r1, [r4, #16]
 8006ee6:	9801      	ldr	r0, [sp, #4]
 8006ee8:	f004 fd10 	bl	800b90c <_free_r>
 8006eec:	9901      	ldr	r1, [sp, #4]
 8006eee:	230c      	movs	r3, #12
 8006ef0:	600b      	str	r3, [r1, #0]
 8006ef2:	e737      	b.n	8006d64 <__sfvwrite_r+0x19c>
 8006ef4:	9a01      	ldr	r2, [sp, #4]
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e733      	b.n	8006d64 <__sfvwrite_r+0x19c>

08006efc <_fwrite_r>:
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	fb02 f603 	mul.w	r6, r2, r3
 8006f06:	461d      	mov	r5, r3
 8006f08:	4614      	mov	r4, r2
 8006f0a:	ab04      	add	r3, sp, #16
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006f14:	2301      	movs	r3, #1
 8006f16:	9104      	str	r1, [sp, #16]
 8006f18:	9302      	str	r3, [sp, #8]
 8006f1a:	9605      	str	r6, [sp, #20]
 8006f1c:	9603      	str	r6, [sp, #12]
 8006f1e:	b108      	cbz	r0, 8006f24 <_fwrite_r+0x28>
 8006f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f22:	b1f3      	cbz	r3, 8006f62 <_fwrite_r+0x66>
 8006f24:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006f28:	4638      	mov	r0, r7
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	049a      	lsls	r2, r3, #18
 8006f2e:	bf5f      	itttt	pl
 8006f30:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8006f34:	f8a8 300c 	strhpl.w	r3, [r8, #12]
 8006f38:	f8d8 2064 	ldrpl.w	r2, [r8, #100]	; 0x64
 8006f3c:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 8006f40:	aa01      	add	r2, sp, #4
 8006f42:	bf58      	it	pl
 8006f44:	f8c8 3064 	strpl.w	r3, [r8, #100]	; 0x64
 8006f48:	f7ff fe3e 	bl	8006bc8 <__sfvwrite_r>
 8006f4c:	b128      	cbz	r0, 8006f5a <_fwrite_r+0x5e>
 8006f4e:	9803      	ldr	r0, [sp, #12]
 8006f50:	4621      	mov	r1, r4
 8006f52:	1a30      	subs	r0, r6, r0
 8006f54:	f006 f990 	bl	800d278 <__aeabi_uidiv>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	b006      	add	sp, #24
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f62:	f004 fb6f 	bl	800b644 <__sinit>
 8006f66:	e7dd      	b.n	8006f24 <_fwrite_r+0x28>

08006f68 <fwrite>:
 8006f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6a:	f240 0408 	movw	r4, #8
 8006f6e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006f72:	4686      	mov	lr, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	4616      	mov	r6, r2
 8006f78:	b083      	sub	sp, #12
 8006f7a:	461d      	mov	r5, r3
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	4671      	mov	r1, lr
 8006f80:	463a      	mov	r2, r7
 8006f82:	4633      	mov	r3, r6
 8006f84:	9500      	str	r5, [sp, #0]
 8006f86:	f7ff ffb9 	bl	8006efc <_fwrite_r>
 8006f8a:	b003      	add	sp, #12
 8006f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8e:	bf00      	nop

08006f90 <__libc_init_array>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4d0d      	ldr	r5, [pc, #52]	; (8006fc8 <__libc_init_array+0x38>)
 8006f94:	4e0d      	ldr	r6, [pc, #52]	; (8006fcc <__libc_init_array+0x3c>)
 8006f96:	1b76      	subs	r6, r6, r5
 8006f98:	10b6      	asrs	r6, r6, #2
 8006f9a:	d006      	beq.n	8006faa <__libc_init_array+0x1a>
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	4798      	blx	r3
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d1f9      	bne.n	8006f9e <__libc_init_array+0xe>
 8006faa:	4d09      	ldr	r5, [pc, #36]	; (8006fd0 <__libc_init_array+0x40>)
 8006fac:	f017 fc8a 	bl	801e8c4 <_init>
 8006fb0:	4e08      	ldr	r6, [pc, #32]	; (8006fd4 <__libc_init_array+0x44>)
 8006fb2:	1b76      	subs	r6, r6, r5
 8006fb4:	10b6      	asrs	r6, r6, #2
 8006fb6:	d006      	beq.n	8006fc6 <__libc_init_array+0x36>
 8006fb8:	2400      	movs	r4, #0
 8006fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	4798      	blx	r3
 8006fc2:	42a6      	cmp	r6, r4
 8006fc4:	d1f9      	bne.n	8006fba <__libc_init_array+0x2a>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	0801ec1c 	.word	0x0801ec1c
 8006fcc:	0801ec1c 	.word	0x0801ec1c
 8006fd0:	0801ec1c 	.word	0x0801ec1c
 8006fd4:	0801ec24 	.word	0x0801ec24

08006fd8 <malloc>:
 8006fd8:	f240 0308 	movw	r3, #8
 8006fdc:	4601      	mov	r1, r0
 8006fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	f000 b808 	b.w	8006ff8 <_malloc_r>

08006fe8 <free>:
 8006fe8:	f240 0308 	movw	r3, #8
 8006fec:	4601      	mov	r1, r0
 8006fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	f004 bc8a 	b.w	800b90c <_free_r>

08006ff8 <_malloc_r>:
 8006ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	f101 040b 	add.w	r4, r1, #11
 8007000:	2c16      	cmp	r4, #22
 8007002:	4605      	mov	r5, r0
 8007004:	d92c      	bls.n	8007060 <_malloc_r+0x68>
 8007006:	f024 0407 	bic.w	r4, r4, #7
 800700a:	0fe3      	lsrs	r3, r4, #31
 800700c:	428c      	cmp	r4, r1
 800700e:	bf2c      	ite	cs
 8007010:	4619      	movcs	r1, r3
 8007012:	f043 0101 	orrcc.w	r1, r3, #1
 8007016:	2900      	cmp	r1, #0
 8007018:	d12b      	bne.n	8007072 <_malloc_r+0x7a>
 800701a:	4628      	mov	r0, r5
 800701c:	f011 f918 	bl	8018250 <__malloc_lock>
 8007020:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007024:	d22b      	bcs.n	800707e <_malloc_r+0x86>
 8007026:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800702a:	4e7e      	ldr	r6, [pc, #504]	; (8007224 <_malloc_r+0x22c>)
 800702c:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 8007030:	68d3      	ldr	r3, [r2, #12]
 8007032:	4293      	cmp	r3, r2
 8007034:	f000 822b 	beq.w	800748e <_malloc_r+0x496>
 8007038:	685c      	ldr	r4, [r3, #4]
 800703a:	f103 0708 	add.w	r7, r3, #8
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	4628      	mov	r0, r5
 8007042:	f024 0403 	bic.w	r4, r4, #3
 8007046:	6899      	ldr	r1, [r3, #8]
 8007048:	191b      	adds	r3, r3, r4
 800704a:	685c      	ldr	r4, [r3, #4]
 800704c:	60ca      	str	r2, [r1, #12]
 800704e:	f044 0401 	orr.w	r4, r4, #1
 8007052:	6091      	str	r1, [r2, #8]
 8007054:	605c      	str	r4, [r3, #4]
 8007056:	f011 f905 	bl	8018264 <__malloc_unlock>
 800705a:	4638      	mov	r0, r7
 800705c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	2300      	movs	r3, #0
 8007062:	2410      	movs	r4, #16
 8007064:	428c      	cmp	r4, r1
 8007066:	bf2c      	ite	cs
 8007068:	4619      	movcs	r1, r3
 800706a:	f043 0101 	orrcc.w	r1, r3, #1
 800706e:	2900      	cmp	r1, #0
 8007070:	d0d3      	beq.n	800701a <_malloc_r+0x22>
 8007072:	2700      	movs	r7, #0
 8007074:	230c      	movs	r3, #12
 8007076:	4638      	mov	r0, r7
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 8007082:	bf04      	itt	eq
 8007084:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8007088:	ea4f 01cc 	moveq.w	r1, ip, lsl #3
 800708c:	f040 8083 	bne.w	8007196 <_malloc_r+0x19e>
 8007090:	4e64      	ldr	r6, [pc, #400]	; (8007224 <_malloc_r+0x22c>)
 8007092:	1871      	adds	r1, r6, r1
 8007094:	68cf      	ldr	r7, [r1, #12]
 8007096:	42b9      	cmp	r1, r7
 8007098:	d106      	bne.n	80070a8 <_malloc_r+0xb0>
 800709a:	e00d      	b.n	80070b8 <_malloc_r+0xc0>
 800709c:	2a00      	cmp	r2, #0
 800709e:	f280 816c 	bge.w	800737a <_malloc_r+0x382>
 80070a2:	68ff      	ldr	r7, [r7, #12]
 80070a4:	42b9      	cmp	r1, r7
 80070a6:	d007      	beq.n	80070b8 <_malloc_r+0xc0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	1b1a      	subs	r2, r3, r4
 80070b0:	2a0f      	cmp	r2, #15
 80070b2:	ddf3      	ble.n	800709c <_malloc_r+0xa4>
 80070b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070b8:	f10c 0c01 	add.w	ip, ip, #1
 80070bc:	4859      	ldr	r0, [pc, #356]	; (8007224 <_malloc_r+0x22c>)
 80070be:	6937      	ldr	r7, [r6, #16]
 80070c0:	f100 0308 	add.w	r3, r0, #8
 80070c4:	429f      	cmp	r7, r3
 80070c6:	bf08      	it	eq
 80070c8:	6841      	ldreq	r1, [r0, #4]
 80070ca:	d024      	beq.n	8007116 <_malloc_r+0x11e>
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	f021 0103 	bic.w	r1, r1, #3
 80070d2:	1b0a      	subs	r2, r1, r4
 80070d4:	2a0f      	cmp	r2, #15
 80070d6:	f300 81aa 	bgt.w	800742e <_malloc_r+0x436>
 80070da:	2a00      	cmp	r2, #0
 80070dc:	6143      	str	r3, [r0, #20]
 80070de:	6103      	str	r3, [r0, #16]
 80070e0:	f280 8093 	bge.w	800720a <_malloc_r+0x212>
 80070e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80070e8:	f080 8166 	bcs.w	80073b8 <_malloc_r+0x3c0>
 80070ec:	08c9      	lsrs	r1, r1, #3
 80070ee:	f04f 0e01 	mov.w	lr, #1
 80070f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80070f6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80070fa:	1089      	asrs	r1, r1, #2
 80070fc:	fa0e f101 	lsl.w	r1, lr, r1
 8007100:	60fa      	str	r2, [r7, #12]
 8007102:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8007106:	ea41 0108 	orr.w	r1, r1, r8
 800710a:	6041      	str	r1, [r0, #4]
 800710c:	f8c7 e008 	str.w	lr, [r7, #8]
 8007110:	f8ce 700c 	str.w	r7, [lr, #12]
 8007114:	6097      	str	r7, [r2, #8]
 8007116:	2701      	movs	r7, #1
 8007118:	ea4f 02ac 	mov.w	r2, ip, asr #2
 800711c:	4097      	lsls	r7, r2
 800711e:	428f      	cmp	r7, r1
 8007120:	f200 8082 	bhi.w	8007228 <_malloc_r+0x230>
 8007124:	4239      	tst	r1, r7
 8007126:	d106      	bne.n	8007136 <_malloc_r+0x13e>
 8007128:	f02c 0c03 	bic.w	ip, ip, #3
 800712c:	007f      	lsls	r7, r7, #1
 800712e:	f10c 0c04 	add.w	ip, ip, #4
 8007132:	4239      	tst	r1, r7
 8007134:	d0fa      	beq.n	800712c <_malloc_r+0x134>
 8007136:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 800713a:	46e0      	mov	r8, ip
 800713c:	46ce      	mov	lr, r9
 800713e:	f8de 200c 	ldr.w	r2, [lr, #12]
 8007142:	4596      	cmp	lr, r2
 8007144:	d107      	bne.n	8007156 <_malloc_r+0x15e>
 8007146:	e183      	b.n	8007450 <_malloc_r+0x458>
 8007148:	2900      	cmp	r1, #0
 800714a:	f280 81aa 	bge.w	80074a2 <_malloc_r+0x4aa>
 800714e:	68d2      	ldr	r2, [r2, #12]
 8007150:	4596      	cmp	lr, r2
 8007152:	f000 817d 	beq.w	8007450 <_malloc_r+0x458>
 8007156:	6850      	ldr	r0, [r2, #4]
 8007158:	f020 0003 	bic.w	r0, r0, #3
 800715c:	1b01      	subs	r1, r0, r4
 800715e:	290f      	cmp	r1, #15
 8007160:	ddf2      	ble.n	8007148 <_malloc_r+0x150>
 8007162:	4617      	mov	r7, r2
 8007164:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8007168:	1910      	adds	r0, r2, r4
 800716a:	f041 0801 	orr.w	r8, r1, #1
 800716e:	f857 cf08 	ldr.w	ip, [r7, #8]!
 8007172:	f044 0401 	orr.w	r4, r4, #1
 8007176:	5041      	str	r1, [r0, r1]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	f8cc e00c 	str.w	lr, [ip, #12]
 800717e:	f8ce c008 	str.w	ip, [lr, #8]
 8007182:	6170      	str	r0, [r6, #20]
 8007184:	6130      	str	r0, [r6, #16]
 8007186:	60c3      	str	r3, [r0, #12]
 8007188:	6083      	str	r3, [r0, #8]
 800718a:	f8c0 8004 	str.w	r8, [r0, #4]
 800718e:	4628      	mov	r0, r5
 8007190:	f011 f868 	bl	8018264 <__malloc_unlock>
 8007194:	e761      	b.n	800705a <_malloc_r+0x62>
 8007196:	f1bc 0f04 	cmp.w	ip, #4
 800719a:	bf9e      	ittt	ls
 800719c:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 80071a0:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 80071a4:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071a8:	f67f af72 	bls.w	8007090 <_malloc_r+0x98>
 80071ac:	f1bc 0f14 	cmp.w	ip, #20
 80071b0:	bf9c      	itt	ls
 80071b2:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 80071b6:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071ba:	f67f af69 	bls.w	8007090 <_malloc_r+0x98>
 80071be:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80071c2:	bf9e      	ittt	ls
 80071c4:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 80071c8:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 80071cc:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071d0:	f67f af5e 	bls.w	8007090 <_malloc_r+0x98>
 80071d4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80071d8:	bf9e      	ittt	ls
 80071da:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 80071de:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 80071e2:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80071e6:	f67f af53 	bls.w	8007090 <_malloc_r+0x98>
 80071ea:	f240 5354 	movw	r3, #1364	; 0x554
 80071ee:	459c      	cmp	ip, r3
 80071f0:	bf95      	itete	ls
 80071f2:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 80071f6:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 80071fa:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80071fe:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8007202:	bf98      	it	ls
 8007204:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8007208:	e742      	b.n	8007090 <_malloc_r+0x98>
 800720a:	187b      	adds	r3, r7, r1
 800720c:	4628      	mov	r0, r5
 800720e:	3708      	adds	r7, #8
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	f011 f824 	bl	8018264 <__malloc_unlock>
 800721c:	4638      	mov	r0, r7
 800721e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	bf00      	nop
 8007224:	20000438 	.word	0x20000438
 8007228:	68b7      	ldr	r7, [r6, #8]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f023 0803 	bic.w	r8, r3, #3
 8007230:	4544      	cmp	r4, r8
 8007232:	ebc4 0208 	rsb	r2, r4, r8
 8007236:	bf94      	ite	ls
 8007238:	2300      	movls	r3, #0
 800723a:	2301      	movhi	r3, #1
 800723c:	2a0f      	cmp	r2, #15
 800723e:	bfd8      	it	le
 8007240:	f043 0301 	orrle.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80a8 	beq.w	800739a <_malloc_r+0x3a2>
 800724a:	4bb4      	ldr	r3, [pc, #720]	; (800751c <_malloc_r+0x524>)
 800724c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8007520 <_malloc_r+0x528>
 8007250:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007254:	f8da 3000 	ldr.w	r3, [sl]
 8007258:	3201      	adds	r2, #1
 800725a:	4423      	add	r3, r4
 800725c:	bf08      	it	eq
 800725e:	f103 0b10 	addeq.w	fp, r3, #16
 8007262:	d006      	beq.n	8007272 <_malloc_r+0x27a>
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	330f      	adds	r3, #15
 800726a:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 800726e:	f023 0b1f 	bic.w	fp, r3, #31
 8007272:	4628      	mov	r0, r5
 8007274:	4659      	mov	r1, fp
 8007276:	f010 ff81 	bl	801817c <_sbrk_r>
 800727a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800727e:	4681      	mov	r9, r0
 8007280:	f000 813b 	beq.w	80074fa <_malloc_r+0x502>
 8007284:	eb07 0208 	add.w	r2, r7, r8
 8007288:	4282      	cmp	r2, r0
 800728a:	f200 8119 	bhi.w	80074c0 <_malloc_r+0x4c8>
 800728e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007292:	454a      	cmp	r2, r9
 8007294:	445b      	add	r3, fp
 8007296:	f8ca 3004 	str.w	r3, [sl, #4]
 800729a:	f000 8133 	beq.w	8007504 <_malloc_r+0x50c>
 800729e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80072a2:	4628      	mov	r0, r5
 80072a4:	3101      	adds	r1, #1
 80072a6:	bf17      	itett	ne
 80072a8:	ebc2 0209 	rsbne	r2, r2, r9
 80072ac:	4b9b      	ldreq	r3, [pc, #620]	; (800751c <_malloc_r+0x524>)
 80072ae:	189b      	addne	r3, r3, r2
 80072b0:	f8ca 3004 	strne.w	r3, [sl, #4]
 80072b4:	bf08      	it	eq
 80072b6:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 80072ba:	f019 0307 	ands.w	r3, r9, #7
 80072be:	bf1f      	itttt	ne
 80072c0:	f1c3 0208 	rsbne	r2, r3, #8
 80072c4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80072c8:	4491      	addne	r9, r2
 80072ca:	f103 0208 	addne.w	r2, r3, #8
 80072ce:	eb09 030b 	add.w	r3, r9, fp
 80072d2:	bf08      	it	eq
 80072d4:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80072d8:	051b      	lsls	r3, r3, #20
 80072da:	0d1b      	lsrs	r3, r3, #20
 80072dc:	ebc3 0b02 	rsb	fp, r3, r2
 80072e0:	4659      	mov	r1, fp
 80072e2:	f010 ff4b 	bl	801817c <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	f000 8124 	beq.w	8007534 <_malloc_r+0x53c>
 80072ec:	ebc9 0200 	rsb	r2, r9, r0
 80072f0:	445a      	add	r2, fp
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80072fa:	42b7      	cmp	r7, r6
 80072fc:	f8c6 9008 	str.w	r9, [r6, #8]
 8007300:	445b      	add	r3, fp
 8007302:	f8c9 2004 	str.w	r2, [r9, #4]
 8007306:	f8ca 3004 	str.w	r3, [sl, #4]
 800730a:	d016      	beq.n	800733a <_malloc_r+0x342>
 800730c:	f1b8 0f0f 	cmp.w	r8, #15
 8007310:	f240 80ed 	bls.w	80074ee <_malloc_r+0x4f6>
 8007314:	f1a8 020c 	sub.w	r2, r8, #12
 8007318:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800731c:	f022 0207 	bic.w	r2, r2, #7
 8007320:	2005      	movs	r0, #5
 8007322:	18b9      	adds	r1, r7, r2
 8007324:	2a0f      	cmp	r2, #15
 8007326:	f00e 0e01 	and.w	lr, lr, #1
 800732a:	ea42 0e0e 	orr.w	lr, r2, lr
 800732e:	f8c7 e004 	str.w	lr, [r7, #4]
 8007332:	6048      	str	r0, [r1, #4]
 8007334:	6088      	str	r0, [r1, #8]
 8007336:	f200 80f5 	bhi.w	8007524 <_malloc_r+0x52c>
 800733a:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800733e:	68b7      	ldr	r7, [r6, #8]
 8007340:	4293      	cmp	r3, r2
 8007342:	bf84      	itt	hi
 8007344:	4a76      	ldrhi	r2, [pc, #472]	; (8007520 <_malloc_r+0x528>)
 8007346:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8007348:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 800734c:	4293      	cmp	r3, r2
 800734e:	bf84      	itt	hi
 8007350:	4a73      	ldrhi	r2, [pc, #460]	; (8007520 <_malloc_r+0x528>)
 8007352:	6313      	strhi	r3, [r2, #48]	; 0x30
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	429c      	cmp	r4, r3
 800735c:	ebc4 0203 	rsb	r2, r4, r3
 8007360:	bf94      	ite	ls
 8007362:	2300      	movls	r3, #0
 8007364:	2301      	movhi	r3, #1
 8007366:	2a0f      	cmp	r2, #15
 8007368:	bfd8      	it	le
 800736a:	f043 0301 	orrle.w	r3, r3, #1
 800736e:	b1a3      	cbz	r3, 800739a <_malloc_r+0x3a2>
 8007370:	4628      	mov	r0, r5
 8007372:	2700      	movs	r7, #0
 8007374:	f010 ff76 	bl	8018264 <__malloc_unlock>
 8007378:	e66f      	b.n	800705a <_malloc_r+0x62>
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4628      	mov	r0, r5
 8007382:	685c      	ldr	r4, [r3, #4]
 8007384:	3708      	adds	r7, #8
 8007386:	60ca      	str	r2, [r1, #12]
 8007388:	f044 0401 	orr.w	r4, r4, #1
 800738c:	6091      	str	r1, [r2, #8]
 800738e:	605c      	str	r4, [r3, #4]
 8007390:	f010 ff68 	bl	8018264 <__malloc_unlock>
 8007394:	4638      	mov	r0, r7
 8007396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	193b      	adds	r3, r7, r4
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	f044 0401 	orr.w	r4, r4, #1
 80073a6:	60b3      	str	r3, [r6, #8]
 80073a8:	607c      	str	r4, [r7, #4]
 80073aa:	3708      	adds	r7, #8
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	f010 ff59 	bl	8018264 <__malloc_unlock>
 80073b2:	4638      	mov	r0, r7
 80073b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	0988      	lsrs	r0, r1, #6
 80073ba:	0a4a      	lsrs	r2, r1, #9
 80073bc:	3038      	adds	r0, #56	; 0x38
 80073be:	2a04      	cmp	r2, #4
 80073c0:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80073c4:	d91c      	bls.n	8007400 <_malloc_r+0x408>
 80073c6:	2a14      	cmp	r2, #20
 80073c8:	bf9c      	itt	ls
 80073ca:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 80073ce:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
 80073d2:	d915      	bls.n	8007400 <_malloc_r+0x408>
 80073d4:	0b08      	lsrs	r0, r1, #12
 80073d6:	306e      	adds	r0, #110	; 0x6e
 80073d8:	2a54      	cmp	r2, #84	; 0x54
 80073da:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80073de:	d90f      	bls.n	8007400 <_malloc_r+0x408>
 80073e0:	0bc8      	lsrs	r0, r1, #15
 80073e2:	3077      	adds	r0, #119	; 0x77
 80073e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80073e8:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80073ec:	d908      	bls.n	8007400 <_malloc_r+0x408>
 80073ee:	f240 5054 	movw	r0, #1364	; 0x554
 80073f2:	4282      	cmp	r2, r0
 80073f4:	f200 80a7 	bhi.w	8007546 <_malloc_r+0x54e>
 80073f8:	0c88      	lsrs	r0, r1, #18
 80073fa:	307c      	adds	r0, #124	; 0x7c
 80073fc:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8007400:	44b6      	add	lr, r6
 8007402:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800751c <_malloc_r+0x524>
 8007406:	f8de 2008 	ldr.w	r2, [lr, #8]
 800740a:	4572      	cmp	r2, lr
 800740c:	d103      	bne.n	8007416 <_malloc_r+0x41e>
 800740e:	e060      	b.n	80074d2 <_malloc_r+0x4da>
 8007410:	6892      	ldr	r2, [r2, #8]
 8007412:	4596      	cmp	lr, r2
 8007414:	d004      	beq.n	8007420 <_malloc_r+0x428>
 8007416:	6850      	ldr	r0, [r2, #4]
 8007418:	f020 0003 	bic.w	r0, r0, #3
 800741c:	4281      	cmp	r1, r0
 800741e:	d3f7      	bcc.n	8007410 <_malloc_r+0x418>
 8007420:	68d0      	ldr	r0, [r2, #12]
 8007422:	6871      	ldr	r1, [r6, #4]
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60ba      	str	r2, [r7, #8]
 8007428:	60d7      	str	r7, [r2, #12]
 800742a:	6087      	str	r7, [r0, #8]
 800742c:	e673      	b.n	8007116 <_malloc_r+0x11e>
 800742e:	1939      	adds	r1, r7, r4
 8007430:	f042 0601 	orr.w	r6, r2, #1
 8007434:	6141      	str	r1, [r0, #20]
 8007436:	f044 0401 	orr.w	r4, r4, #1
 800743a:	6101      	str	r1, [r0, #16]
 800743c:	4628      	mov	r0, r5
 800743e:	607c      	str	r4, [r7, #4]
 8007440:	3708      	adds	r7, #8
 8007442:	60cb      	str	r3, [r1, #12]
 8007444:	608b      	str	r3, [r1, #8]
 8007446:	604e      	str	r6, [r1, #4]
 8007448:	508a      	str	r2, [r1, r2]
 800744a:	f010 ff0b 	bl	8018264 <__malloc_unlock>
 800744e:	e604      	b.n	800705a <_malloc_r+0x62>
 8007450:	f108 0801 	add.w	r8, r8, #1
 8007454:	f10e 0e08 	add.w	lr, lr, #8
 8007458:	f018 0f03 	tst.w	r8, #3
 800745c:	f47f ae6f 	bne.w	800713e <_malloc_r+0x146>
 8007460:	464a      	mov	r2, r9
 8007462:	f01c 0f03 	tst.w	ip, #3
 8007466:	f1a2 0108 	sub.w	r1, r2, #8
 800746a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800746e:	d065      	beq.n	800753c <_malloc_r+0x544>
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	428a      	cmp	r2, r1
 8007474:	d0f5      	beq.n	8007462 <_malloc_r+0x46a>
 8007476:	6872      	ldr	r2, [r6, #4]
 8007478:	007f      	lsls	r7, r7, #1
 800747a:	4297      	cmp	r7, r2
 800747c:	f63f aed4 	bhi.w	8007228 <_malloc_r+0x230>
 8007480:	2f00      	cmp	r7, #0
 8007482:	f43f aed1 	beq.w	8007228 <_malloc_r+0x230>
 8007486:	4217      	tst	r7, r2
 8007488:	d061      	beq.n	800754e <_malloc_r+0x556>
 800748a:	46c4      	mov	ip, r8
 800748c:	e653      	b.n	8007136 <_malloc_r+0x13e>
 800748e:	f103 0208 	add.w	r2, r3, #8
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	429a      	cmp	r2, r3
 8007496:	bf08      	it	eq
 8007498:	f10c 0c02 	addeq.w	ip, ip, #2
 800749c:	f43f ae0e 	beq.w	80070bc <_malloc_r+0xc4>
 80074a0:	e5ca      	b.n	8007038 <_malloc_r+0x40>
 80074a2:	4617      	mov	r7, r2
 80074a4:	1810      	adds	r0, r2, r0
 80074a6:	68d3      	ldr	r3, [r2, #12]
 80074a8:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80074ac:	6841      	ldr	r1, [r0, #4]
 80074ae:	60d3      	str	r3, [r2, #12]
 80074b0:	f041 0101 	orr.w	r1, r1, #1
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	6041      	str	r1, [r0, #4]
 80074b8:	4628      	mov	r0, r5
 80074ba:	f010 fed3 	bl	8018264 <__malloc_unlock>
 80074be:	e5cc      	b.n	800705a <_malloc_r+0x62>
 80074c0:	42b7      	cmp	r7, r6
 80074c2:	f43f aee4 	beq.w	800728e <_malloc_r+0x296>
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <_malloc_r+0x524>)
 80074c8:	689f      	ldr	r7, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	e743      	b.n	800735a <_malloc_r+0x362>
 80074d2:	f04f 0901 	mov.w	r9, #1
 80074d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074da:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80074de:	4610      	mov	r0, r2
 80074e0:	fa09 fe0e 	lsl.w	lr, r9, lr
 80074e4:	ea4e 0101 	orr.w	r1, lr, r1
 80074e8:	f8c8 1004 	str.w	r1, [r8, #4]
 80074ec:	e79a      	b.n	8007424 <_malloc_r+0x42c>
 80074ee:	2301      	movs	r3, #1
 80074f0:	464f      	mov	r7, r9
 80074f2:	f8c9 3004 	str.w	r3, [r9, #4]
 80074f6:	2300      	movs	r3, #0
 80074f8:	e72f      	b.n	800735a <_malloc_r+0x362>
 80074fa:	68b7      	ldr	r7, [r6, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	e72a      	b.n	800735a <_malloc_r+0x362>
 8007504:	0511      	lsls	r1, r2, #20
 8007506:	0d09      	lsrs	r1, r1, #20
 8007508:	2900      	cmp	r1, #0
 800750a:	f47f aec8 	bne.w	800729e <_malloc_r+0x2a6>
 800750e:	68b2      	ldr	r2, [r6, #8]
 8007510:	eb0b 0108 	add.w	r1, fp, r8
 8007514:	f041 0101 	orr.w	r1, r1, #1
 8007518:	6051      	str	r1, [r2, #4]
 800751a:	e70e      	b.n	800733a <_malloc_r+0x342>
 800751c:	20000438 	.word	0x20000438
 8007520:	2000093c 	.word	0x2000093c
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	4628      	mov	r0, r5
 800752a:	f004 f9ef 	bl	800b90c <_free_r>
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <_malloc_r+0x560>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	e702      	b.n	800733a <_malloc_r+0x342>
 8007534:	2201      	movs	r2, #1
 8007536:	f04f 0b00 	mov.w	fp, #0
 800753a:	e6dc      	b.n	80072f6 <_malloc_r+0x2fe>
 800753c:	6872      	ldr	r2, [r6, #4]
 800753e:	ea22 0207 	bic.w	r2, r2, r7
 8007542:	6072      	str	r2, [r6, #4]
 8007544:	e798      	b.n	8007478 <_malloc_r+0x480>
 8007546:	f44f 7e7c 	mov.w	lr, #1008	; 0x3f0
 800754a:	207e      	movs	r0, #126	; 0x7e
 800754c:	e758      	b.n	8007400 <_malloc_r+0x408>
 800754e:	007f      	lsls	r7, r7, #1
 8007550:	f108 0804 	add.w	r8, r8, #4
 8007554:	e797      	b.n	8007486 <_malloc_r+0x48e>
 8007556:	bf00      	nop
 8007558:	2000093c 	.word	0x2000093c

0800755c <memchr>:
 800755c:	0783      	lsls	r3, r0, #30
 800755e:	b2c9      	uxtb	r1, r1
 8007560:	b470      	push	{r4, r5, r6}
 8007562:	d012      	beq.n	800758a <memchr+0x2e>
 8007564:	2a00      	cmp	r2, #0
 8007566:	d039      	beq.n	80075dc <memchr+0x80>
 8007568:	7803      	ldrb	r3, [r0, #0]
 800756a:	428b      	cmp	r3, r1
 800756c:	d025      	beq.n	80075ba <memchr+0x5e>
 800756e:	4603      	mov	r3, r0
 8007570:	3a01      	subs	r2, #1
 8007572:	e006      	b.n	8007582 <memchr+0x26>
 8007574:	2a00      	cmp	r2, #0
 8007576:	d031      	beq.n	80075dc <memchr+0x80>
 8007578:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800757c:	3a01      	subs	r2, #1
 800757e:	428c      	cmp	r4, r1
 8007580:	d01b      	beq.n	80075ba <memchr+0x5e>
 8007582:	3001      	adds	r0, #1
 8007584:	f010 0f03 	tst.w	r0, #3
 8007588:	d1f4      	bne.n	8007574 <memchr+0x18>
 800758a:	2a03      	cmp	r2, #3
 800758c:	bf84      	itt	hi
 800758e:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8007592:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8007596:	d812      	bhi.n	80075be <memchr+0x62>
 8007598:	2a00      	cmp	r2, #0
 800759a:	d01f      	beq.n	80075dc <memchr+0x80>
 800759c:	7803      	ldrb	r3, [r0, #0]
 800759e:	428b      	cmp	r3, r1
 80075a0:	d00b      	beq.n	80075ba <memchr+0x5e>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	1882      	adds	r2, r0, r2
 80075a6:	e003      	b.n	80075b0 <memchr+0x54>
 80075a8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80075ac:	428c      	cmp	r4, r1
 80075ae:	d004      	beq.n	80075ba <memchr+0x5e>
 80075b0:	4293      	cmp	r3, r2
 80075b2:	f100 0001 	add.w	r0, r0, #1
 80075b6:	d1f7      	bne.n	80075a8 <memchr+0x4c>
 80075b8:	2000      	movs	r0, #0
 80075ba:	bc70      	pop	{r4, r5, r6}
 80075bc:	4770      	bx	lr
 80075be:	4604      	mov	r4, r0
 80075c0:	3004      	adds	r0, #4
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	4073      	eors	r3, r6
 80075c6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80075ca:	ea25 0303 	bic.w	r3, r5, r3
 80075ce:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80075d2:	d105      	bne.n	80075e0 <memchr+0x84>
 80075d4:	3a04      	subs	r2, #4
 80075d6:	2a03      	cmp	r2, #3
 80075d8:	d8f1      	bhi.n	80075be <memchr+0x62>
 80075da:	e7dd      	b.n	8007598 <memchr+0x3c>
 80075dc:	4610      	mov	r0, r2
 80075de:	e7ec      	b.n	80075ba <memchr+0x5e>
 80075e0:	4620      	mov	r0, r4
 80075e2:	e7d9      	b.n	8007598 <memchr+0x3c>

080075e4 <memcmp>:
 80075e4:	2a03      	cmp	r2, #3
 80075e6:	b470      	push	{r4, r5, r6}
 80075e8:	d926      	bls.n	8007638 <memcmp+0x54>
 80075ea:	ea41 0500 	orr.w	r5, r1, r0
 80075ee:	4603      	mov	r3, r0
 80075f0:	07ad      	lsls	r5, r5, #30
 80075f2:	460c      	mov	r4, r1
 80075f4:	d013      	beq.n	800761e <memcmp+0x3a>
 80075f6:	7805      	ldrb	r5, [r0, #0]
 80075f8:	3a01      	subs	r2, #1
 80075fa:	780c      	ldrb	r4, [r1, #0]
 80075fc:	2300      	movs	r3, #0
 80075fe:	42a5      	cmp	r5, r4
 8007600:	d004      	beq.n	800760c <memcmp+0x28>
 8007602:	e01d      	b.n	8007640 <memcmp+0x5c>
 8007604:	7865      	ldrb	r5, [r4, #1]
 8007606:	5ccc      	ldrb	r4, [r1, r3]
 8007608:	42a5      	cmp	r5, r4
 800760a:	d119      	bne.n	8007640 <memcmp+0x5c>
 800760c:	429a      	cmp	r2, r3
 800760e:	eb00 0403 	add.w	r4, r0, r3
 8007612:	f103 0301 	add.w	r3, r3, #1
 8007616:	d1f5      	bne.n	8007604 <memcmp+0x20>
 8007618:	2000      	movs	r0, #0
 800761a:	bc70      	pop	{r4, r5, r6}
 800761c:	4770      	bx	lr
 800761e:	4621      	mov	r1, r4
 8007620:	4618      	mov	r0, r3
 8007622:	3404      	adds	r4, #4
 8007624:	3304      	adds	r3, #4
 8007626:	6806      	ldr	r6, [r0, #0]
 8007628:	680d      	ldr	r5, [r1, #0]
 800762a:	42ae      	cmp	r6, r5
 800762c:	d104      	bne.n	8007638 <memcmp+0x54>
 800762e:	3a04      	subs	r2, #4
 8007630:	2a03      	cmp	r2, #3
 8007632:	d8f4      	bhi.n	800761e <memcmp+0x3a>
 8007634:	4621      	mov	r1, r4
 8007636:	4618      	mov	r0, r3
 8007638:	2a00      	cmp	r2, #0
 800763a:	d1dc      	bne.n	80075f6 <memcmp+0x12>
 800763c:	4610      	mov	r0, r2
 800763e:	e7ec      	b.n	800761a <memcmp+0x36>
 8007640:	1b28      	subs	r0, r5, r4
 8007642:	e7ea      	b.n	800761a <memcmp+0x36>

08007644 <memcpy>:
 8007644:	2a0f      	cmp	r2, #15
 8007646:	b4f0      	push	{r4, r5, r6, r7}
 8007648:	bf98      	it	ls
 800764a:	4603      	movls	r3, r0
 800764c:	d931      	bls.n	80076b2 <memcpy+0x6e>
 800764e:	ea41 0300 	orr.w	r3, r1, r0
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	d136      	bne.n	80076c4 <memcpy+0x80>
 8007656:	460c      	mov	r4, r1
 8007658:	4603      	mov	r3, r0
 800765a:	4615      	mov	r5, r2
 800765c:	6826      	ldr	r6, [r4, #0]
 800765e:	3d10      	subs	r5, #16
 8007660:	601e      	str	r6, [r3, #0]
 8007662:	6866      	ldr	r6, [r4, #4]
 8007664:	605e      	str	r6, [r3, #4]
 8007666:	68a6      	ldr	r6, [r4, #8]
 8007668:	609e      	str	r6, [r3, #8]
 800766a:	68e6      	ldr	r6, [r4, #12]
 800766c:	3410      	adds	r4, #16
 800766e:	60de      	str	r6, [r3, #12]
 8007670:	3310      	adds	r3, #16
 8007672:	2d0f      	cmp	r5, #15
 8007674:	d8f2      	bhi.n	800765c <memcpy+0x18>
 8007676:	f1a2 0410 	sub.w	r4, r2, #16
 800767a:	f002 020f 	and.w	r2, r2, #15
 800767e:	f024 040f 	bic.w	r4, r4, #15
 8007682:	3410      	adds	r4, #16
 8007684:	2a03      	cmp	r2, #3
 8007686:	eb00 0304 	add.w	r3, r0, r4
 800768a:	4421      	add	r1, r4
 800768c:	d911      	bls.n	80076b2 <memcpy+0x6e>
 800768e:	460e      	mov	r6, r1
 8007690:	461d      	mov	r5, r3
 8007692:	4614      	mov	r4, r2
 8007694:	f856 7b04 	ldr.w	r7, [r6], #4
 8007698:	3c04      	subs	r4, #4
 800769a:	2c03      	cmp	r4, #3
 800769c:	f845 7b04 	str.w	r7, [r5], #4
 80076a0:	d8f8      	bhi.n	8007694 <memcpy+0x50>
 80076a2:	1f14      	subs	r4, r2, #4
 80076a4:	f002 0203 	and.w	r2, r2, #3
 80076a8:	f024 0403 	bic.w	r4, r4, #3
 80076ac:	3404      	adds	r4, #4
 80076ae:	1909      	adds	r1, r1, r4
 80076b0:	191b      	adds	r3, r3, r4
 80076b2:	b12a      	cbz	r2, 80076c0 <memcpy+0x7c>
 80076b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b8:	3a01      	subs	r2, #1
 80076ba:	f803 4b01 	strb.w	r4, [r3], #1
 80076be:	d1f9      	bne.n	80076b4 <memcpy+0x70>
 80076c0:	bcf0      	pop	{r4, r5, r6, r7}
 80076c2:	4770      	bx	lr
 80076c4:	4603      	mov	r3, r0
 80076c6:	e7f5      	b.n	80076b4 <memcpy+0x70>

080076c8 <memmove>:
 80076c8:	4288      	cmp	r0, r1
 80076ca:	b4f0      	push	{r4, r5, r6, r7}
 80076cc:	d912      	bls.n	80076f4 <memmove+0x2c>
 80076ce:	188d      	adds	r5, r1, r2
 80076d0:	42a8      	cmp	r0, r5
 80076d2:	d20f      	bcs.n	80076f4 <memmove+0x2c>
 80076d4:	b162      	cbz	r2, 80076f0 <memmove+0x28>
 80076d6:	4613      	mov	r3, r2
 80076d8:	1882      	adds	r2, r0, r2
 80076da:	4259      	negs	r1, r3
 80076dc:	186d      	adds	r5, r5, r1
 80076de:	1852      	adds	r2, r2, r1
 80076e0:	18ec      	adds	r4, r5, r3
 80076e2:	18d1      	adds	r1, r2, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80076ea:	f801 4c01 	strb.w	r4, [r1, #-1]
 80076ee:	d1f7      	bne.n	80076e0 <memmove+0x18>
 80076f0:	bcf0      	pop	{r4, r5, r6, r7}
 80076f2:	4770      	bx	lr
 80076f4:	2a0f      	cmp	r2, #15
 80076f6:	bf98      	it	ls
 80076f8:	4603      	movls	r3, r0
 80076fa:	d931      	bls.n	8007760 <memmove+0x98>
 80076fc:	ea41 0300 	orr.w	r3, r1, r0
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	d13c      	bne.n	800777e <memmove+0xb6>
 8007704:	460c      	mov	r4, r1
 8007706:	4603      	mov	r3, r0
 8007708:	4615      	mov	r5, r2
 800770a:	6826      	ldr	r6, [r4, #0]
 800770c:	3d10      	subs	r5, #16
 800770e:	601e      	str	r6, [r3, #0]
 8007710:	6866      	ldr	r6, [r4, #4]
 8007712:	605e      	str	r6, [r3, #4]
 8007714:	68a6      	ldr	r6, [r4, #8]
 8007716:	609e      	str	r6, [r3, #8]
 8007718:	68e6      	ldr	r6, [r4, #12]
 800771a:	3410      	adds	r4, #16
 800771c:	60de      	str	r6, [r3, #12]
 800771e:	3310      	adds	r3, #16
 8007720:	2d0f      	cmp	r5, #15
 8007722:	d8f2      	bhi.n	800770a <memmove+0x42>
 8007724:	f1a2 0410 	sub.w	r4, r2, #16
 8007728:	f002 020f 	and.w	r2, r2, #15
 800772c:	f024 040f 	bic.w	r4, r4, #15
 8007730:	3410      	adds	r4, #16
 8007732:	2a03      	cmp	r2, #3
 8007734:	eb00 0304 	add.w	r3, r0, r4
 8007738:	4421      	add	r1, r4
 800773a:	d911      	bls.n	8007760 <memmove+0x98>
 800773c:	460e      	mov	r6, r1
 800773e:	461d      	mov	r5, r3
 8007740:	4614      	mov	r4, r2
 8007742:	f856 7b04 	ldr.w	r7, [r6], #4
 8007746:	3c04      	subs	r4, #4
 8007748:	2c03      	cmp	r4, #3
 800774a:	f845 7b04 	str.w	r7, [r5], #4
 800774e:	d8f8      	bhi.n	8007742 <memmove+0x7a>
 8007750:	1f14      	subs	r4, r2, #4
 8007752:	f002 0203 	and.w	r2, r2, #3
 8007756:	f024 0403 	bic.w	r4, r4, #3
 800775a:	3404      	adds	r4, #4
 800775c:	1909      	adds	r1, r1, r4
 800775e:	191b      	adds	r3, r3, r4
 8007760:	2a00      	cmp	r2, #0
 8007762:	d0c5      	beq.n	80076f0 <memmove+0x28>
 8007764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007768:	3a01      	subs	r2, #1
 800776a:	f803 4b01 	strb.w	r4, [r3], #1
 800776e:	d0bf      	beq.n	80076f0 <memmove+0x28>
 8007770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007774:	3a01      	subs	r2, #1
 8007776:	f803 4b01 	strb.w	r4, [r3], #1
 800777a:	d1f3      	bne.n	8007764 <memmove+0x9c>
 800777c:	e7b8      	b.n	80076f0 <memmove+0x28>
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	4603      	mov	r3, r0
 8007784:	3a01      	subs	r2, #1
 8007786:	f803 4b01 	strb.w	r4, [r3], #1
 800778a:	d1f1      	bne.n	8007770 <memmove+0xa8>
 800778c:	e7b0      	b.n	80076f0 <memmove+0x28>
 800778e:	bf00      	nop

08007790 <memset>:
 8007790:	f010 0f03 	tst.w	r0, #3
 8007794:	4603      	mov	r3, r0
 8007796:	b470      	push	{r4, r5, r6}
 8007798:	d041      	beq.n	800781e <memset+0x8e>
 800779a:	2a00      	cmp	r2, #0
 800779c:	d03d      	beq.n	800781a <memset+0x8a>
 800779e:	b2ce      	uxtb	r6, r1
 80077a0:	e001      	b.n	80077a6 <memset+0x16>
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d039      	beq.n	800781a <memset+0x8a>
 80077a6:	f803 6b01 	strb.w	r6, [r3], #1
 80077aa:	1e54      	subs	r4, r2, #1
 80077ac:	f013 0f03 	tst.w	r3, #3
 80077b0:	4622      	mov	r2, r4
 80077b2:	461d      	mov	r5, r3
 80077b4:	d1f5      	bne.n	80077a2 <memset+0x12>
 80077b6:	2c03      	cmp	r4, #3
 80077b8:	d929      	bls.n	800780e <memset+0x7e>
 80077ba:	b2ca      	uxtb	r2, r1
 80077bc:	2c0f      	cmp	r4, #15
 80077be:	bf84      	itt	hi
 80077c0:	462b      	movhi	r3, r5
 80077c2:	4626      	movhi	r6, r4
 80077c4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80077c8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80077cc:	d911      	bls.n	80077f2 <memset+0x62>
 80077ce:	3e10      	subs	r6, #16
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	3310      	adds	r3, #16
 80077da:	2e0f      	cmp	r6, #15
 80077dc:	d8f7      	bhi.n	80077ce <memset+0x3e>
 80077de:	f1a4 0310 	sub.w	r3, r4, #16
 80077e2:	f004 040f 	and.w	r4, r4, #15
 80077e6:	f023 030f 	bic.w	r3, r3, #15
 80077ea:	3310      	adds	r3, #16
 80077ec:	2c03      	cmp	r4, #3
 80077ee:	441d      	add	r5, r3
 80077f0:	d90d      	bls.n	800780e <memset+0x7e>
 80077f2:	462e      	mov	r6, r5
 80077f4:	4623      	mov	r3, r4
 80077f6:	3b04      	subs	r3, #4
 80077f8:	f846 2b04 	str.w	r2, [r6], #4
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d8fa      	bhi.n	80077f6 <memset+0x66>
 8007800:	1f23      	subs	r3, r4, #4
 8007802:	f004 0403 	and.w	r4, r4, #3
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	3304      	adds	r3, #4
 800780c:	18ed      	adds	r5, r5, r3
 800780e:	b2c9      	uxtb	r1, r1
 8007810:	b11c      	cbz	r4, 800781a <memset+0x8a>
 8007812:	3c01      	subs	r4, #1
 8007814:	f805 1b01 	strb.w	r1, [r5], #1
 8007818:	d1fb      	bne.n	8007812 <memset+0x82>
 800781a:	bc70      	pop	{r4, r5, r6}
 800781c:	4770      	bx	lr
 800781e:	4605      	mov	r5, r0
 8007820:	4614      	mov	r4, r2
 8007822:	e7c8      	b.n	80077b6 <memset+0x26>

08007824 <_putc_r>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	460e      	mov	r6, r1
 800782a:	4615      	mov	r5, r2
 800782c:	b108      	cbz	r0, 8007832 <_putc_r+0xe>
 800782e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007830:	b1c3      	cbz	r3, 8007864 <_putc_r+0x40>
 8007832:	68ab      	ldr	r3, [r5, #8]
 8007834:	3b01      	subs	r3, #1
 8007836:	60ab      	str	r3, [r5, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	db06      	blt.n	800784a <_putc_r+0x26>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	701e      	strb	r6, [r3, #0]
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	69aa      	ldr	r2, [r5, #24]
 800784c:	4293      	cmp	r3, r2
 800784e:	db0c      	blt.n	800786a <_putc_r+0x46>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	701e      	strb	r6, [r3, #0]
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	7819      	ldrb	r1, [r3, #0]
 8007858:	290a      	cmp	r1, #10
 800785a:	d00d      	beq.n	8007878 <_putc_r+0x54>
 800785c:	3301      	adds	r3, #1
 800785e:	4608      	mov	r0, r1
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	f003 feee 	bl	800b644 <__sinit>
 8007868:	e7e3      	b.n	8007832 <_putc_r+0xe>
 800786a:	4620      	mov	r0, r4
 800786c:	4631      	mov	r1, r6
 800786e:	462a      	mov	r2, r5
 8007870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007874:	f002 bc8c 	b.w	800a190 <__swbuf_r>
 8007878:	4620      	mov	r0, r4
 800787a:	462a      	mov	r2, r5
 800787c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007880:	f002 bc86 	b.w	800a190 <__swbuf_r>

08007884 <putc>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4606      	mov	r6, r0
 8007888:	4d17      	ldr	r5, [pc, #92]	; (80078e8 <putc+0x64>)
 800788a:	460c      	mov	r4, r1
 800788c:	6828      	ldr	r0, [r5, #0]
 800788e:	b108      	cbz	r0, 8007894 <putc+0x10>
 8007890:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007892:	b1c3      	cbz	r3, 80078c6 <putc+0x42>
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	3b01      	subs	r3, #1
 8007898:	60a3      	str	r3, [r4, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	db06      	blt.n	80078ac <putc+0x28>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	701e      	strb	r6, [r3, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	69a2      	ldr	r2, [r4, #24]
 80078ae:	4293      	cmp	r3, r2
 80078b0:	db0c      	blt.n	80078cc <putc+0x48>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	701e      	strb	r6, [r3, #0]
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	7819      	ldrb	r1, [r3, #0]
 80078ba:	290a      	cmp	r1, #10
 80078bc:	d00d      	beq.n	80078da <putc+0x56>
 80078be:	3301      	adds	r3, #1
 80078c0:	4608      	mov	r0, r1
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
 80078c6:	f003 febd 	bl	800b644 <__sinit>
 80078ca:	e7e3      	b.n	8007894 <putc+0x10>
 80078cc:	6828      	ldr	r0, [r5, #0]
 80078ce:	4631      	mov	r1, r6
 80078d0:	4622      	mov	r2, r4
 80078d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078d6:	f002 bc5b 	b.w	800a190 <__swbuf_r>
 80078da:	6828      	ldr	r0, [r5, #0]
 80078dc:	4622      	mov	r2, r4
 80078de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078e2:	f002 bc55 	b.w	800a190 <__swbuf_r>
 80078e6:	bf00      	nop
 80078e8:	20000008 	.word	0x20000008

080078ec <realloc>:
 80078ec:	f240 0308 	movw	r3, #8
 80078f0:	460a      	mov	r2, r1
 80078f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 b801 	b.w	8007900 <_realloc_r>
 80078fe:	bf00      	nop

08007900 <_realloc_r>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	b083      	sub	sp, #12
 8007908:	4606      	mov	r6, r0
 800790a:	2900      	cmp	r1, #0
 800790c:	f000 8135 	beq.w	8007b7a <_realloc_r+0x27a>
 8007910:	9201      	str	r2, [sp, #4]
 8007912:	f010 fc9d 	bl	8018250 <__malloc_lock>
 8007916:	9a01      	ldr	r2, [sp, #4]
 8007918:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800791c:	f102 050b 	add.w	r5, r2, #11
 8007920:	2d16      	cmp	r5, #22
 8007922:	f200 809d 	bhi.w	8007a60 <_realloc_r+0x160>
 8007926:	2110      	movs	r1, #16
 8007928:	2700      	movs	r7, #0
 800792a:	460d      	mov	r5, r1
 800792c:	4295      	cmp	r5, r2
 800792e:	bf38      	it	cc
 8007930:	f047 0701 	orrcc.w	r7, r7, #1
 8007934:	2f00      	cmp	r7, #0
 8007936:	f040 8126 	bne.w	8007b86 <_realloc_r+0x286>
 800793a:	f020 0903 	bic.w	r9, r0, #3
 800793e:	f1a4 0a08 	sub.w	sl, r4, #8
 8007942:	4589      	cmp	r9, r1
 8007944:	bfa8      	it	ge
 8007946:	464f      	movge	r7, r9
 8007948:	da74      	bge.n	8007a34 <_realloc_r+0x134>
 800794a:	4ba1      	ldr	r3, [pc, #644]	; (8007bd0 <_realloc_r+0x2d0>)
 800794c:	eb0a 0e09 	add.w	lr, sl, r9
 8007950:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8007954:	45f3      	cmp	fp, lr
 8007956:	f000 811a 	beq.w	8007b8e <_realloc_r+0x28e>
 800795a:	f8de c004 	ldr.w	ip, [lr, #4]
 800795e:	f02c 0801 	bic.w	r8, ip, #1
 8007962:	44f0      	add	r8, lr
 8007964:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8007968:	f018 0f01 	tst.w	r8, #1
 800796c:	bf1c      	itt	ne
 800796e:	46bc      	movne	ip, r7
 8007970:	46e6      	movne	lr, ip
 8007972:	d07a      	beq.n	8007a6a <_realloc_r+0x16a>
 8007974:	07c0      	lsls	r0, r0, #31
 8007976:	f100 809a 	bmi.w	8007aae <_realloc_r+0x1ae>
 800797a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800797e:	ebc0 080a 	rsb	r8, r0, sl
 8007982:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007986:	f020 0003 	bic.w	r0, r0, #3
 800798a:	f1be 0f00 	cmp.w	lr, #0
 800798e:	f000 80b6 	beq.w	8007afe <_realloc_r+0x1fe>
 8007992:	45de      	cmp	lr, fp
 8007994:	eb00 0b09 	add.w	fp, r0, r9
 8007998:	f000 814d 	beq.w	8007c36 <_realloc_r+0x336>
 800799c:	eb0c 070b 	add.w	r7, ip, fp
 80079a0:	42b9      	cmp	r1, r7
 80079a2:	f300 80ae 	bgt.w	8007b02 <_realloc_r+0x202>
 80079a6:	f8de 100c 	ldr.w	r1, [lr, #12]
 80079aa:	4643      	mov	r3, r8
 80079ac:	f8de 0008 	ldr.w	r0, [lr, #8]
 80079b0:	f1a9 0204 	sub.w	r2, r9, #4
 80079b4:	2a24      	cmp	r2, #36	; 0x24
 80079b6:	60c1      	str	r1, [r0, #12]
 80079b8:	6088      	str	r0, [r1, #8]
 80079ba:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80079be:	f853 0f08 	ldr.w	r0, [r3, #8]!
 80079c2:	60c1      	str	r1, [r0, #12]
 80079c4:	6088      	str	r0, [r1, #8]
 80079c6:	f200 8191 	bhi.w	8007cec <_realloc_r+0x3ec>
 80079ca:	2a13      	cmp	r2, #19
 80079cc:	bf9c      	itt	ls
 80079ce:	461a      	movls	r2, r3
 80079d0:	4621      	movls	r1, r4
 80079d2:	d925      	bls.n	8007a20 <_realloc_r+0x120>
 80079d4:	6821      	ldr	r1, [r4, #0]
 80079d6:	2a1b      	cmp	r2, #27
 80079d8:	bf98      	it	ls
 80079da:	f108 0210 	addls.w	r2, r8, #16
 80079de:	f8c8 1008 	str.w	r1, [r8, #8]
 80079e2:	6861      	ldr	r1, [r4, #4]
 80079e4:	f8c8 100c 	str.w	r1, [r8, #12]
 80079e8:	bf98      	it	ls
 80079ea:	f104 0108 	addls.w	r1, r4, #8
 80079ee:	d917      	bls.n	8007a20 <_realloc_r+0x120>
 80079f0:	68a1      	ldr	r1, [r4, #8]
 80079f2:	2a24      	cmp	r2, #36	; 0x24
 80079f4:	bf14      	ite	ne
 80079f6:	f108 0218 	addne.w	r2, r8, #24
 80079fa:	f108 0220 	addeq.w	r2, r8, #32
 80079fe:	f8c8 1010 	str.w	r1, [r8, #16]
 8007a02:	68e1      	ldr	r1, [r4, #12]
 8007a04:	f8c8 1014 	str.w	r1, [r8, #20]
 8007a08:	bf11      	iteee	ne
 8007a0a:	f104 0110 	addne.w	r1, r4, #16
 8007a0e:	6920      	ldreq	r0, [r4, #16]
 8007a10:	f104 0118 	addeq.w	r1, r4, #24
 8007a14:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007a18:	bf04      	itt	eq
 8007a1a:	6960      	ldreq	r0, [r4, #20]
 8007a1c:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	461c      	mov	r4, r3
 8007a24:	6010      	str	r0, [r2, #0]
 8007a26:	46c2      	mov	sl, r8
 8007a28:	684b      	ldr	r3, [r1, #4]
 8007a2a:	6053      	str	r3, [r2, #4]
 8007a2c:	688b      	ldr	r3, [r1, #8]
 8007a2e:	6093      	str	r3, [r2, #8]
 8007a30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a34:	1b7b      	subs	r3, r7, r5
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	d825      	bhi.n	8007a86 <_realloc_r+0x186>
 8007a3a:	eb0a 0307 	add.w	r3, sl, r7
 8007a3e:	f000 0001 	and.w	r0, r0, #1
 8007a42:	4307      	orrs	r7, r0
 8007a44:	f8ca 7004 	str.w	r7, [sl, #4]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	4630      	mov	r0, r6
 8007a52:	4627      	mov	r7, r4
 8007a54:	f010 fc06 	bl	8018264 <__malloc_unlock>
 8007a58:	4638      	mov	r0, r7
 8007a5a:	b003      	add	sp, #12
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	f025 0507 	bic.w	r5, r5, #7
 8007a64:	4629      	mov	r1, r5
 8007a66:	0fef      	lsrs	r7, r5, #31
 8007a68:	e760      	b.n	800792c <_realloc_r+0x2c>
 8007a6a:	f02c 0c03 	bic.w	ip, ip, #3
 8007a6e:	eb0c 0709 	add.w	r7, ip, r9
 8007a72:	42b9      	cmp	r1, r7
 8007a74:	f73f af7e 	bgt.w	8007974 <_realloc_r+0x74>
 8007a78:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007a7c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8007a80:	60d3      	str	r3, [r2, #12]
 8007a82:	609a      	str	r2, [r3, #8]
 8007a84:	e7d6      	b.n	8007a34 <_realloc_r+0x134>
 8007a86:	eb0a 0105 	add.w	r1, sl, r5
 8007a8a:	f000 0001 	and.w	r0, r0, #1
 8007a8e:	18ca      	adds	r2, r1, r3
 8007a90:	4305      	orrs	r5, r0
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	f8ca 5004 	str.w	r5, [sl, #4]
 8007a9a:	604b      	str	r3, [r1, #4]
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	6853      	ldr	r3, [r2, #4]
 8007aa0:	3108      	adds	r1, #8
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	6053      	str	r3, [r2, #4]
 8007aa8:	f003 ff30 	bl	800b90c <_free_r>
 8007aac:	e7d0      	b.n	8007a50 <_realloc_r+0x150>
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	f7ff faa1 	bl	8006ff8 <_malloc_r>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	b1e8      	cbz	r0, 8007af6 <_realloc_r+0x1f6>
 8007aba:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8007abe:	f1a7 0208 	sub.w	r2, r7, #8
 8007ac2:	f020 0301 	bic.w	r3, r0, #1
 8007ac6:	4453      	add	r3, sl
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	f000 8109 	beq.w	8007ce0 <_realloc_r+0x3e0>
 8007ace:	f1a9 0204 	sub.w	r2, r9, #4
 8007ad2:	2a24      	cmp	r2, #36	; 0x24
 8007ad4:	f200 80aa 	bhi.w	8007c2c <_realloc_r+0x32c>
 8007ad8:	2a13      	cmp	r2, #19
 8007ada:	bf9c      	itt	ls
 8007adc:	463b      	movls	r3, r7
 8007ade:	4622      	movls	r2, r4
 8007ae0:	d878      	bhi.n	8007bd4 <_realloc_r+0x2d4>
 8007ae2:	6811      	ldr	r1, [r2, #0]
 8007ae4:	6019      	str	r1, [r3, #0]
 8007ae6:	6851      	ldr	r1, [r2, #4]
 8007ae8:	6059      	str	r1, [r3, #4]
 8007aea:	6892      	ldr	r2, [r2, #8]
 8007aec:	609a      	str	r2, [r3, #8]
 8007aee:	4630      	mov	r0, r6
 8007af0:	4621      	mov	r1, r4
 8007af2:	f003 ff0b 	bl	800b90c <_free_r>
 8007af6:	4630      	mov	r0, r6
 8007af8:	f010 fbb4 	bl	8018264 <__malloc_unlock>
 8007afc:	e7ac      	b.n	8007a58 <_realloc_r+0x158>
 8007afe:	eb00 0b09 	add.w	fp, r0, r9
 8007b02:	4559      	cmp	r1, fp
 8007b04:	dcd3      	bgt.n	8007aae <_realloc_r+0x1ae>
 8007b06:	4643      	mov	r3, r8
 8007b08:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007b0c:	f1a9 0204 	sub.w	r2, r9, #4
 8007b10:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8007b14:	2a24      	cmp	r2, #36	; 0x24
 8007b16:	60c1      	str	r1, [r0, #12]
 8007b18:	6088      	str	r0, [r1, #8]
 8007b1a:	d87d      	bhi.n	8007c18 <_realloc_r+0x318>
 8007b1c:	2a13      	cmp	r2, #19
 8007b1e:	bf9c      	itt	ls
 8007b20:	461a      	movls	r2, r3
 8007b22:	4621      	movls	r1, r4
 8007b24:	d925      	bls.n	8007b72 <_realloc_r+0x272>
 8007b26:	6821      	ldr	r1, [r4, #0]
 8007b28:	2a1b      	cmp	r2, #27
 8007b2a:	bf98      	it	ls
 8007b2c:	f108 0210 	addls.w	r2, r8, #16
 8007b30:	f8c8 1008 	str.w	r1, [r8, #8]
 8007b34:	6861      	ldr	r1, [r4, #4]
 8007b36:	f8c8 100c 	str.w	r1, [r8, #12]
 8007b3a:	bf98      	it	ls
 8007b3c:	f104 0108 	addls.w	r1, r4, #8
 8007b40:	d917      	bls.n	8007b72 <_realloc_r+0x272>
 8007b42:	68a1      	ldr	r1, [r4, #8]
 8007b44:	2a24      	cmp	r2, #36	; 0x24
 8007b46:	bf14      	ite	ne
 8007b48:	f108 0218 	addne.w	r2, r8, #24
 8007b4c:	f108 0220 	addeq.w	r2, r8, #32
 8007b50:	f8c8 1010 	str.w	r1, [r8, #16]
 8007b54:	68e1      	ldr	r1, [r4, #12]
 8007b56:	f8c8 1014 	str.w	r1, [r8, #20]
 8007b5a:	bf11      	iteee	ne
 8007b5c:	f104 0110 	addne.w	r1, r4, #16
 8007b60:	6920      	ldreq	r0, [r4, #16]
 8007b62:	f104 0118 	addeq.w	r1, r4, #24
 8007b66:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007b6a:	bf04      	itt	eq
 8007b6c:	6960      	ldreq	r0, [r4, #20]
 8007b6e:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007b72:	6808      	ldr	r0, [r1, #0]
 8007b74:	461c      	mov	r4, r3
 8007b76:	465f      	mov	r7, fp
 8007b78:	e754      	b.n	8007a24 <_realloc_r+0x124>
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b82:	f7ff ba39 	b.w	8006ff8 <_malloc_r>
 8007b86:	230c      	movs	r3, #12
 8007b88:	2700      	movs	r7, #0
 8007b8a:	6033      	str	r3, [r6, #0]
 8007b8c:	e764      	b.n	8007a58 <_realloc_r+0x158>
 8007b8e:	f8db 7004 	ldr.w	r7, [fp, #4]
 8007b92:	f105 0e10 	add.w	lr, r5, #16
 8007b96:	f027 0c03 	bic.w	ip, r7, #3
 8007b9a:	eb0c 0709 	add.w	r7, ip, r9
 8007b9e:	4577      	cmp	r7, lr
 8007ba0:	bfb8      	it	lt
 8007ba2:	46de      	movlt	lr, fp
 8007ba4:	f6ff aee6 	blt.w	8007974 <_realloc_r+0x74>
 8007ba8:	eb0a 0205 	add.w	r2, sl, r5
 8007bac:	1b79      	subs	r1, r7, r5
 8007bae:	f041 0101 	orr.w	r1, r1, #1
 8007bb2:	609a      	str	r2, [r3, #8]
 8007bb4:	6051      	str	r1, [r2, #4]
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007bbc:	4627      	mov	r7, r4
 8007bbe:	f001 0301 	and.w	r3, r1, #1
 8007bc2:	431d      	orrs	r5, r3
 8007bc4:	f844 5c04 	str.w	r5, [r4, #-4]
 8007bc8:	f010 fb4c 	bl	8018264 <__malloc_unlock>
 8007bcc:	e744      	b.n	8007a58 <_realloc_r+0x158>
 8007bce:	bf00      	nop
 8007bd0:	20000438 	.word	0x20000438
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	2a1b      	cmp	r2, #27
 8007bd8:	bf98      	it	ls
 8007bda:	f104 0208 	addls.w	r2, r4, #8
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	607b      	str	r3, [r7, #4]
 8007be4:	bf98      	it	ls
 8007be6:	f107 0308 	addls.w	r3, r7, #8
 8007bea:	f67f af7a 	bls.w	8007ae2 <_realloc_r+0x1e2>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	2a24      	cmp	r2, #36	; 0x24
 8007bf2:	bf14      	ite	ne
 8007bf4:	f104 0210 	addne.w	r2, r4, #16
 8007bf8:	f104 0218 	addeq.w	r2, r4, #24
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	bf11      	iteee	ne
 8007c04:	f107 0310 	addne.w	r3, r7, #16
 8007c08:	6921      	ldreq	r1, [r4, #16]
 8007c0a:	f107 0318 	addeq.w	r3, r7, #24
 8007c0e:	6139      	streq	r1, [r7, #16]
 8007c10:	bf04      	itt	eq
 8007c12:	6961      	ldreq	r1, [r4, #20]
 8007c14:	6179      	streq	r1, [r7, #20]
 8007c16:	e764      	b.n	8007ae2 <_realloc_r+0x1e2>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	465f      	mov	r7, fp
 8007c20:	f7ff fd52 	bl	80076c8 <memmove>
 8007c24:	46c2      	mov	sl, r8
 8007c26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c2a:	e703      	b.n	8007a34 <_realloc_r+0x134>
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	4621      	mov	r1, r4
 8007c30:	f7ff fd4a 	bl	80076c8 <memmove>
 8007c34:	e75b      	b.n	8007aee <_realloc_r+0x1ee>
 8007c36:	f105 0010 	add.w	r0, r5, #16
 8007c3a:	44dc      	add	ip, fp
 8007c3c:	4584      	cmp	ip, r0
 8007c3e:	f6ff af60 	blt.w	8007b02 <_realloc_r+0x202>
 8007c42:	4647      	mov	r7, r8
 8007c44:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007c48:	f1a9 0204 	sub.w	r2, r9, #4
 8007c4c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007c50:	2a24      	cmp	r2, #36	; 0x24
 8007c52:	60c1      	str	r1, [r0, #12]
 8007c54:	6088      	str	r0, [r1, #8]
 8007c56:	d852      	bhi.n	8007cfe <_realloc_r+0x3fe>
 8007c58:	2a13      	cmp	r2, #19
 8007c5a:	bf9c      	itt	ls
 8007c5c:	463a      	movls	r2, r7
 8007c5e:	4621      	movls	r1, r4
 8007c60:	d925      	bls.n	8007cae <_realloc_r+0x3ae>
 8007c62:	6821      	ldr	r1, [r4, #0]
 8007c64:	2a1b      	cmp	r2, #27
 8007c66:	bf98      	it	ls
 8007c68:	f108 0210 	addls.w	r2, r8, #16
 8007c6c:	f8c8 1008 	str.w	r1, [r8, #8]
 8007c70:	6861      	ldr	r1, [r4, #4]
 8007c72:	f8c8 100c 	str.w	r1, [r8, #12]
 8007c76:	bf98      	it	ls
 8007c78:	f104 0108 	addls.w	r1, r4, #8
 8007c7c:	d917      	bls.n	8007cae <_realloc_r+0x3ae>
 8007c7e:	68a1      	ldr	r1, [r4, #8]
 8007c80:	2a24      	cmp	r2, #36	; 0x24
 8007c82:	bf14      	ite	ne
 8007c84:	f108 0218 	addne.w	r2, r8, #24
 8007c88:	f108 0220 	addeq.w	r2, r8, #32
 8007c8c:	f8c8 1010 	str.w	r1, [r8, #16]
 8007c90:	68e1      	ldr	r1, [r4, #12]
 8007c92:	f8c8 1014 	str.w	r1, [r8, #20]
 8007c96:	bf11      	iteee	ne
 8007c98:	f104 0110 	addne.w	r1, r4, #16
 8007c9c:	6920      	ldreq	r0, [r4, #16]
 8007c9e:	f104 0118 	addeq.w	r1, r4, #24
 8007ca2:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007ca6:	bf04      	itt	eq
 8007ca8:	6960      	ldreq	r0, [r4, #20]
 8007caa:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007cae:	6808      	ldr	r0, [r1, #0]
 8007cb0:	6010      	str	r0, [r2, #0]
 8007cb2:	6848      	ldr	r0, [r1, #4]
 8007cb4:	6050      	str	r0, [r2, #4]
 8007cb6:	6889      	ldr	r1, [r1, #8]
 8007cb8:	6091      	str	r1, [r2, #8]
 8007cba:	eb08 0205 	add.w	r2, r8, r5
 8007cbe:	ebc5 010c 	rsb	r1, r5, ip
 8007cc2:	f041 0101 	orr.w	r1, r1, #1
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	6051      	str	r1, [r2, #4]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	431d      	orrs	r5, r3
 8007cd6:	f8c8 5004 	str.w	r5, [r8, #4]
 8007cda:	f010 fac3 	bl	8018264 <__malloc_unlock>
 8007cde:	e6bb      	b.n	8007a58 <_realloc_r+0x158>
 8007ce0:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8007ce4:	f027 0703 	bic.w	r7, r7, #3
 8007ce8:	444f      	add	r7, r9
 8007cea:	e6a3      	b.n	8007a34 <_realloc_r+0x134>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4618      	mov	r0, r3
 8007cf0:	461c      	mov	r4, r3
 8007cf2:	46c2      	mov	sl, r8
 8007cf4:	f7ff fce8 	bl	80076c8 <memmove>
 8007cf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007cfc:	e69a      	b.n	8007a34 <_realloc_r+0x134>
 8007cfe:	4638      	mov	r0, r7
 8007d00:	4621      	mov	r1, r4
 8007d02:	e88d 1008 	stmia.w	sp, {r3, ip}
 8007d06:	f7ff fcdf 	bl	80076c8 <memmove>
 8007d0a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8007d0e:	e7d4      	b.n	8007cba <_realloc_r+0x3ba>

08007d10 <_init_signal_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 8007d18:	b10d      	cbz	r5, 8007d1e <_init_signal_r+0xe>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	2180      	movs	r1, #128	; 0x80
 8007d20:	f7ff f96a 	bl	8006ff8 <_malloc_r>
 8007d24:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8007d28:	b148      	cbz	r0, 8007d3e <_init_signal_r+0x2e>
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	e001      	b.n	8007d32 <_init_signal_r+0x22>
 8007d2e:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
 8007d32:	5143      	str	r3, [r0, r5]
 8007d34:	3504      	adds	r5, #4
 8007d36:	2d80      	cmp	r5, #128	; 0x80
 8007d38:	d1f9      	bne.n	8007d2e <_init_signal_r+0x1e>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	bd38      	pop	{r3, r4, r5, pc}

08007d44 <_signal_r>:
 8007d44:	291f      	cmp	r1, #31
 8007d46:	b510      	push	{r4, lr}
 8007d48:	4604      	mov	r4, r0
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	d808      	bhi.n	8007d60 <_signal_r+0x1c>
 8007d4e:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8007d52:	b153      	cbz	r3, 8007d6a <_signal_r+0x26>
 8007d54:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007d58:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd10      	pop	{r4, pc}
 8007d60:	2316      	movs	r3, #22
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	e7f8      	b.n	8007d5c <_signal_r+0x18>
 8007d6a:	9101      	str	r1, [sp, #4]
 8007d6c:	9200      	str	r2, [sp, #0]
 8007d6e:	f7ff ffcf 	bl	8007d10 <_init_signal_r>
 8007d72:	9901      	ldr	r1, [sp, #4]
 8007d74:	9a00      	ldr	r2, [sp, #0]
 8007d76:	b910      	cbnz	r0, 8007d7e <_signal_r+0x3a>
 8007d78:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 8007d7c:	e7ea      	b.n	8007d54 <_signal_r+0x10>
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d82:	e7eb      	b.n	8007d5c <_signal_r+0x18>

08007d84 <_raise_r>:
 8007d84:	291f      	cmp	r1, #31
 8007d86:	b538      	push	{r3, r4, r5, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	d820      	bhi.n	8007dd0 <_raise_r+0x4c>
 8007d8e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8007d92:	b19a      	cbz	r2, 8007dbc <_raise_r+0x38>
 8007d94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d98:	b183      	cbz	r3, 8007dbc <_raise_r+0x38>
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d00c      	beq.n	8007db8 <_raise_r+0x34>
 8007d9e:	1c59      	adds	r1, r3, #1
 8007da0:	d006      	beq.n	8007db0 <_raise_r+0x2c>
 8007da2:	2500      	movs	r5, #0
 8007da4:	4620      	mov	r0, r4
 8007da6:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8007daa:	4798      	blx	r3
 8007dac:	4628      	mov	r0, r5
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	2316      	movs	r3, #22
 8007db2:	2001      	movs	r0, #1
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	2000      	movs	r0, #0
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f010 fa37 	bl	8018230 <_getpid_r>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	4601      	mov	r1, r0
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dcc:	f010 ba1e 	b.w	801820c <_kill_r>
 8007dd0:	2316      	movs	r3, #22
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop

08007ddc <__sigtramp_r>:
 8007ddc:	291f      	cmp	r1, #31
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	b082      	sub	sp, #8
 8007de4:	d81e      	bhi.n	8007e24 <__sigtramp_r+0x48>
 8007de6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8007dea:	b19a      	cbz	r2, 8007e14 <__sigtramp_r+0x38>
 8007dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007df0:	2001      	movs	r0, #1
 8007df2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007df6:	b14b      	cbz	r3, 8007e0c <__sigtramp_r+0x30>
 8007df8:	1c58      	adds	r0, r3, #1
 8007dfa:	d009      	beq.n	8007e10 <__sigtramp_r+0x34>
 8007dfc:	2003      	movs	r0, #3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d004      	beq.n	8007e0c <__sigtramp_r+0x30>
 8007e02:	2400      	movs	r4, #0
 8007e04:	4608      	mov	r0, r1
 8007e06:	6014      	str	r4, [r2, #0]
 8007e08:	4798      	blx	r3
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd10      	pop	{r4, pc}
 8007e10:	2002      	movs	r0, #2
 8007e12:	e7fb      	b.n	8007e0c <__sigtramp_r+0x30>
 8007e14:	9101      	str	r1, [sp, #4]
 8007e16:	f7ff ff7b 	bl	8007d10 <_init_signal_r>
 8007e1a:	9901      	ldr	r1, [sp, #4]
 8007e1c:	b910      	cbnz	r0, 8007e24 <__sigtramp_r+0x48>
 8007e1e:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 8007e22:	e7e3      	b.n	8007dec <__sigtramp_r+0x10>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	e7f0      	b.n	8007e0c <__sigtramp_r+0x30>
 8007e2a:	bf00      	nop

08007e2c <raise>:
 8007e2c:	f240 0308 	movw	r3, #8
 8007e30:	4601      	mov	r1, r0
 8007e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	e7a4      	b.n	8007d84 <_raise_r>
 8007e3a:	bf00      	nop

08007e3c <signal>:
 8007e3c:	f240 0308 	movw	r3, #8
 8007e40:	460a      	mov	r2, r1
 8007e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e46:	4601      	mov	r1, r0
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	e77b      	b.n	8007d44 <_signal_r>

08007e4c <_init_signal>:
 8007e4c:	f240 0308 	movw	r3, #8
 8007e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	e75b      	b.n	8007d10 <_init_signal_r>

08007e58 <__sigtramp>:
 8007e58:	f240 0308 	movw	r3, #8
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	e7ba      	b.n	8007ddc <__sigtramp_r>
 8007e66:	bf00      	nop

08007e68 <_sprintf_r>:
 8007e68:	b40c      	push	{r2, r3}
 8007e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6c:	b09d      	sub	sp, #116	; 0x74
 8007e6e:	ac22      	add	r4, sp, #136	; 0x88
 8007e70:	460e      	mov	r6, r1
 8007e72:	a901      	add	r1, sp, #4
 8007e74:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007e78:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e7c:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007e80:	9601      	str	r6, [sp, #4]
 8007e82:	4623      	mov	r3, r4
 8007e84:	9605      	str	r6, [sp, #20]
 8007e86:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007e8a:	f04f 36ff 	mov.w	r6, #4294967295
 8007e8e:	9503      	str	r5, [sp, #12]
 8007e90:	f8ad 6012 	strh.w	r6, [sp, #18]
 8007e94:	9506      	str	r5, [sp, #24]
 8007e96:	941b      	str	r4, [sp, #108]	; 0x6c
 8007e98:	f000 fa38 	bl	800830c <_svfprintf_r>
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	b01d      	add	sp, #116	; 0x74
 8007ea4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ea8:	b002      	add	sp, #8
 8007eaa:	4770      	bx	lr

08007eac <sprintf>:
 8007eac:	b40e      	push	{r1, r2, r3}
 8007eae:	f240 0308 	movw	r3, #8
 8007eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb4:	b09c      	sub	sp, #112	; 0x70
 8007eb6:	ac21      	add	r4, sp, #132	; 0x84
 8007eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	a901      	add	r1, sp, #4
 8007ec0:	f854 2b04 	ldr.w	r2, [r4], #4
 8007ec4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007ece:	4623      	mov	r3, r4
 8007ed0:	9601      	str	r6, [sp, #4]
 8007ed2:	9605      	str	r6, [sp, #20]
 8007ed4:	f04f 36ff 	mov.w	r6, #4294967295
 8007ed8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007edc:	f8ad 6012 	strh.w	r6, [sp, #18]
 8007ee0:	9503      	str	r5, [sp, #12]
 8007ee2:	9506      	str	r5, [sp, #24]
 8007ee4:	941b      	str	r4, [sp, #108]	; 0x6c
 8007ee6:	f000 fa11 	bl	800830c <_svfprintf_r>
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	b01c      	add	sp, #112	; 0x70
 8007ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ef6:	b003      	add	sp, #12
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop

08007efc <strcmp>:
 8007efc:	ea80 0201 	eor.w	r2, r0, r1
 8007f00:	f012 0f03 	tst.w	r2, #3
 8007f04:	d13a      	bne.n	8007f7c <strcmp_unaligned>
 8007f06:	f010 0203 	ands.w	r2, r0, #3
 8007f0a:	f020 0003 	bic.w	r0, r0, #3
 8007f0e:	f021 0103 	bic.w	r1, r1, #3
 8007f12:	f850 cb04 	ldr.w	ip, [r0], #4
 8007f16:	bf08      	it	eq
 8007f18:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007f1c:	d00d      	beq.n	8007f3a <strcmp+0x3e>
 8007f1e:	f082 0203 	eor.w	r2, r2, #3
 8007f22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007f26:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007f2a:	fa23 f202 	lsr.w	r2, r3, r2
 8007f2e:	f851 3b04 	ldr.w	r3, [r1], #4
 8007f32:	ea4c 0c02 	orr.w	ip, ip, r2
 8007f36:	ea43 0302 	orr.w	r3, r3, r2
 8007f3a:	bf00      	nop
 8007f3c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8007f40:	459c      	cmp	ip, r3
 8007f42:	bf01      	itttt	eq
 8007f44:	ea22 020c 	biceq.w	r2, r2, ip
 8007f48:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8007f4c:	f850 cb04 	ldreq.w	ip, [r0], #4
 8007f50:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007f54:	d0f2      	beq.n	8007f3c <strcmp+0x40>
 8007f56:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8007f5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8007f5e:	2801      	cmp	r0, #1
 8007f60:	bf28      	it	cs
 8007f62:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8007f66:	bf08      	it	eq
 8007f68:	0a1b      	lsreq	r3, r3, #8
 8007f6a:	d0f4      	beq.n	8007f56 <strcmp+0x5a>
 8007f6c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8007f70:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8007f74:	eba0 0003 	sub.w	r0, r0, r3
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <strcmp_unaligned>:
 8007f7c:	f010 0f03 	tst.w	r0, #3
 8007f80:	d00a      	beq.n	8007f98 <strcmp_unaligned+0x1c>
 8007f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	bf28      	it	cs
 8007f8e:	429a      	cmpcs	r2, r3
 8007f90:	d0f4      	beq.n	8007f7c <strcmp_unaligned>
 8007f92:	eba2 0003 	sub.w	r0, r2, r3
 8007f96:	4770      	bx	lr
 8007f98:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8007f9c:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8007fa0:	f04f 0201 	mov.w	r2, #1
 8007fa4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8007fa8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8007fac:	f001 0c03 	and.w	ip, r1, #3
 8007fb0:	f021 0103 	bic.w	r1, r1, #3
 8007fb4:	f850 4b04 	ldr.w	r4, [r0], #4
 8007fb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fbc:	f1bc 0f02 	cmp.w	ip, #2
 8007fc0:	d026      	beq.n	8008010 <strcmp_unaligned+0x94>
 8007fc2:	d84b      	bhi.n	800805c <strcmp_unaligned+0xe0>
 8007fc4:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8007fc8:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8007fcc:	eba4 0302 	sub.w	r3, r4, r2
 8007fd0:	ea23 0304 	bic.w	r3, r3, r4
 8007fd4:	d10d      	bne.n	8007ff2 <strcmp_unaligned+0x76>
 8007fd6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007fda:	bf08      	it	eq
 8007fdc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8007fe0:	d10a      	bne.n	8007ff8 <strcmp_unaligned+0x7c>
 8007fe2:	ea8c 0c04 	eor.w	ip, ip, r4
 8007fe6:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8007fea:	d10c      	bne.n	8008006 <strcmp_unaligned+0x8a>
 8007fec:	f850 4b04 	ldr.w	r4, [r0], #4
 8007ff0:	e7e8      	b.n	8007fc4 <strcmp_unaligned+0x48>
 8007ff2:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8007ff6:	e05c      	b.n	80080b2 <strcmp_unaligned+0x136>
 8007ff8:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8007ffc:	d152      	bne.n	80080a4 <strcmp_unaligned+0x128>
 8007ffe:	780d      	ldrb	r5, [r1, #0]
 8008000:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8008004:	e055      	b.n	80080b2 <strcmp_unaligned+0x136>
 8008006:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800800a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800800e:	e050      	b.n	80080b2 <strcmp_unaligned+0x136>
 8008010:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8008014:	eba4 0302 	sub.w	r3, r4, r2
 8008018:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800801c:	ea23 0304 	bic.w	r3, r3, r4
 8008020:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8008024:	d117      	bne.n	8008056 <strcmp_unaligned+0xda>
 8008026:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800802a:	bf08      	it	eq
 800802c:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008030:	d107      	bne.n	8008042 <strcmp_unaligned+0xc6>
 8008032:	ea8c 0c04 	eor.w	ip, ip, r4
 8008036:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800803a:	d108      	bne.n	800804e <strcmp_unaligned+0xd2>
 800803c:	f850 4b04 	ldr.w	r4, [r0], #4
 8008040:	e7e6      	b.n	8008010 <strcmp_unaligned+0x94>
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	d12e      	bne.n	80080a4 <strcmp_unaligned+0x128>
 8008046:	880d      	ldrh	r5, [r1, #0]
 8008048:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800804c:	e031      	b.n	80080b2 <strcmp_unaligned+0x136>
 800804e:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8008052:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008056:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800805a:	e02a      	b.n	80080b2 <strcmp_unaligned+0x136>
 800805c:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8008060:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8008064:	eba4 0302 	sub.w	r3, r4, r2
 8008068:	ea23 0304 	bic.w	r3, r3, r4
 800806c:	d10d      	bne.n	800808a <strcmp_unaligned+0x10e>
 800806e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008072:	bf08      	it	eq
 8008074:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008078:	d10a      	bne.n	8008090 <strcmp_unaligned+0x114>
 800807a:	ea8c 0c04 	eor.w	ip, ip, r4
 800807e:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8008082:	d10a      	bne.n	800809a <strcmp_unaligned+0x11e>
 8008084:	f850 4b04 	ldr.w	r4, [r0], #4
 8008088:	e7e8      	b.n	800805c <strcmp_unaligned+0xe0>
 800808a:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800808e:	e010      	b.n	80080b2 <strcmp_unaligned+0x136>
 8008090:	f014 0fff 	tst.w	r4, #255	; 0xff
 8008094:	d006      	beq.n	80080a4 <strcmp_unaligned+0x128>
 8008096:	f851 5b04 	ldr.w	r5, [r1], #4
 800809a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800809e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80080a2:	e006      	b.n	80080b2 <strcmp_unaligned+0x136>
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ac:	f85d 5b04 	ldr.w	r5, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80080b6:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80080ba:	2801      	cmp	r0, #1
 80080bc:	bf28      	it	cs
 80080be:	4290      	cmpcs	r0, r2
 80080c0:	bf04      	itt	eq
 80080c2:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80080c6:	0a2d      	lsreq	r5, r5, #8
 80080c8:	d0f3      	beq.n	80080b2 <strcmp_unaligned+0x136>
 80080ca:	eba2 0000 	sub.w	r0, r2, r0
 80080ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d2:	f85d 5b04 	ldr.w	r5, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <strcpy>:
 80080d8:	ea80 0201 	eor.w	r2, r0, r1
 80080dc:	4684      	mov	ip, r0
 80080de:	f012 0f03 	tst.w	r2, #3
 80080e2:	d14f      	bne.n	8008184 <strcpy+0xac>
 80080e4:	f011 0f03 	tst.w	r1, #3
 80080e8:	d132      	bne.n	8008150 <strcpy+0x78>
 80080ea:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80080ee:	f011 0f04 	tst.w	r1, #4
 80080f2:	f851 3b04 	ldr.w	r3, [r1], #4
 80080f6:	d00b      	beq.n	8008110 <strcpy+0x38>
 80080f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80080fc:	439a      	bics	r2, r3
 80080fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8008102:	bf04      	itt	eq
 8008104:	f84c 3b04 	streq.w	r3, [ip], #4
 8008108:	f851 3b04 	ldreq.w	r3, [r1], #4
 800810c:	d116      	bne.n	800813c <strcpy+0x64>
 800810e:	bf00      	nop
 8008110:	f851 4b04 	ldr.w	r4, [r1], #4
 8008114:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008118:	439a      	bics	r2, r3
 800811a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800811e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8008122:	d10b      	bne.n	800813c <strcpy+0x64>
 8008124:	f84c 3b04 	str.w	r3, [ip], #4
 8008128:	43a2      	bics	r2, r4
 800812a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800812e:	bf04      	itt	eq
 8008130:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008134:	f84c 4b04 	streq.w	r4, [ip], #4
 8008138:	d0ea      	beq.n	8008110 <strcpy+0x38>
 800813a:	4623      	mov	r3, r4
 800813c:	f80c 3b01 	strb.w	r3, [ip], #1
 8008140:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008144:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008148:	d1f8      	bne.n	800813c <strcpy+0x64>
 800814a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	f011 0f01 	tst.w	r1, #1
 8008154:	d006      	beq.n	8008164 <strcpy+0x8c>
 8008156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800815a:	f80c 2b01 	strb.w	r2, [ip], #1
 800815e:	2a00      	cmp	r2, #0
 8008160:	bf08      	it	eq
 8008162:	4770      	bxeq	lr
 8008164:	f011 0f02 	tst.w	r1, #2
 8008168:	d0bf      	beq.n	80080ea <strcpy+0x12>
 800816a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800816e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8008172:	bf16      	itet	ne
 8008174:	f82c 2b02 	strhne.w	r2, [ip], #2
 8008178:	f88c 2000 	strbeq.w	r2, [ip]
 800817c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8008180:	d1b3      	bne.n	80080ea <strcpy+0x12>
 8008182:	4770      	bx	lr
 8008184:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008188:	f80c 2b01 	strb.w	r2, [ip], #1
 800818c:	2a00      	cmp	r2, #0
 800818e:	d1f9      	bne.n	8008184 <strcpy+0xac>
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop

08008194 <strlen>:
 8008194:	f020 0103 	bic.w	r1, r0, #3
 8008198:	f010 0003 	ands.w	r0, r0, #3
 800819c:	f1c0 0000 	rsb	r0, r0, #0
 80081a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80081a4:	f100 0c04 	add.w	ip, r0, #4
 80081a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80081ac:	f06f 0200 	mvn.w	r2, #0
 80081b0:	bf1c      	itt	ne
 80081b2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80081b6:	4313      	orrne	r3, r2
 80081b8:	f04f 0c01 	mov.w	ip, #1
 80081bc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80081c0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80081c4:	eba3 020c 	sub.w	r2, r3, ip
 80081c8:	ea22 0203 	bic.w	r2, r2, r3
 80081cc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80081d0:	bf04      	itt	eq
 80081d2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80081d6:	3004      	addeq	r0, #4
 80081d8:	d0f4      	beq.n	80081c4 <strlen+0x30>
 80081da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081de:	bf1f      	itttt	ne
 80081e0:	3001      	addne	r0, #1
 80081e2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80081e6:	3001      	addne	r0, #1
 80081e8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80081ec:	bf18      	it	ne
 80081ee:	3001      	addne	r0, #1
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <strncmp>:
 80081f4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d044      	beq.n	8008286 <strncmp+0x92>
 80081fc:	ea41 0300 	orr.w	r3, r1, r0
 8008200:	f013 0303 	ands.w	r3, r3, #3
 8008204:	d12c      	bne.n	8008260 <strncmp+0x6c>
 8008206:	2a03      	cmp	r2, #3
 8008208:	d92a      	bls.n	8008260 <strncmp+0x6c>
 800820a:	6804      	ldr	r4, [r0, #0]
 800820c:	680d      	ldr	r5, [r1, #0]
 800820e:	42ac      	cmp	r4, r5
 8008210:	d126      	bne.n	8008260 <strncmp+0x6c>
 8008212:	3a04      	subs	r2, #4
 8008214:	d037      	beq.n	8008286 <strncmp+0x92>
 8008216:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800821a:	ea25 0404 	bic.w	r4, r5, r4
 800821e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8008222:	bf04      	itt	eq
 8008224:	460c      	moveq	r4, r1
 8008226:	4605      	moveq	r5, r0
 8008228:	d011      	beq.n	800824e <strncmp+0x5a>
 800822a:	e034      	b.n	8008296 <strncmp+0xa2>
 800822c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8008230:	4635      	mov	r5, r6
 8008232:	f851 cf04 	ldr.w	ip, [r1, #4]!
 8008236:	463c      	mov	r4, r7
 8008238:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
 800823c:	4563      	cmp	r3, ip
 800823e:	ea28 0803 	bic.w	r8, r8, r3
 8008242:	d109      	bne.n	8008258 <strncmp+0x64>
 8008244:	3a04      	subs	r2, #4
 8008246:	d01e      	beq.n	8008286 <strncmp+0x92>
 8008248:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
 800824c:	d119      	bne.n	8008282 <strncmp+0x8e>
 800824e:	1d2e      	adds	r6, r5, #4
 8008250:	1d27      	adds	r7, r4, #4
 8008252:	2a03      	cmp	r2, #3
 8008254:	d8ea      	bhi.n	800822c <strncmp+0x38>
 8008256:	b1d2      	cbz	r2, 800828e <strncmp+0x9a>
 8008258:	3a01      	subs	r2, #1
 800825a:	4639      	mov	r1, r7
 800825c:	4630      	mov	r0, r6
 800825e:	e000      	b.n	8008262 <strncmp+0x6e>
 8008260:	3a01      	subs	r2, #1
 8008262:	7803      	ldrb	r3, [r0, #0]
 8008264:	780c      	ldrb	r4, [r1, #0]
 8008266:	42a3      	cmp	r3, r4
 8008268:	d113      	bne.n	8008292 <strncmp+0x9e>
 800826a:	b162      	cbz	r2, 8008286 <strncmp+0x92>
 800826c:	b19b      	cbz	r3, 8008296 <strncmp+0xa2>
 800826e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008272:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008276:	42a3      	cmp	r3, r4
 8008278:	d10b      	bne.n	8008292 <strncmp+0x9e>
 800827a:	2a01      	cmp	r2, #1
 800827c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008280:	d1f4      	bne.n	800826c <strncmp+0x78>
 8008282:	2000      	movs	r0, #0
 8008284:	e000      	b.n	8008288 <strncmp+0x94>
 8008286:	4610      	mov	r0, r2
 8008288:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800828c:	4770      	bx	lr
 800828e:	792b      	ldrb	r3, [r5, #4]
 8008290:	7924      	ldrb	r4, [r4, #4]
 8008292:	1b18      	subs	r0, r3, r4
 8008294:	e7f8      	b.n	8008288 <strncmp+0x94>
 8008296:	4618      	mov	r0, r3
 8008298:	e7f6      	b.n	8008288 <strncmp+0x94>
 800829a:	bf00      	nop

0800829c <strncpy>:
 800829c:	ea41 0300 	orr.w	r3, r1, r0
 80082a0:	f013 0f03 	tst.w	r3, #3
 80082a4:	460b      	mov	r3, r1
 80082a6:	b470      	push	{r4, r5, r6}
 80082a8:	bf14      	ite	ne
 80082aa:	2500      	movne	r5, #0
 80082ac:	2501      	moveq	r5, #1
 80082ae:	2a03      	cmp	r2, #3
 80082b0:	bf94      	ite	ls
 80082b2:	2500      	movls	r5, #0
 80082b4:	f005 0501 	andhi.w	r5, r5, #1
 80082b8:	4604      	mov	r4, r0
 80082ba:	b17d      	cbz	r5, 80082dc <strncpy+0x40>
 80082bc:	4619      	mov	r1, r3
 80082be:	f853 5b04 	ldr.w	r5, [r3], #4
 80082c2:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 80082c6:	ea26 0605 	bic.w	r6, r6, r5
 80082ca:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80082ce:	d105      	bne.n	80082dc <strncpy+0x40>
 80082d0:	3a04      	subs	r2, #4
 80082d2:	f844 5b04 	str.w	r5, [r4], #4
 80082d6:	2a03      	cmp	r2, #3
 80082d8:	d8f0      	bhi.n	80082bc <strncpy+0x20>
 80082da:	4619      	mov	r1, r3
 80082dc:	b1a2      	cbz	r2, 8008308 <strncpy+0x6c>
 80082de:	780d      	ldrb	r5, [r1, #0]
 80082e0:	1e53      	subs	r3, r2, #1
 80082e2:	f804 5b01 	strb.w	r5, [r4], #1
 80082e6:	4622      	mov	r2, r4
 80082e8:	b145      	cbz	r5, 80082fc <strncpy+0x60>
 80082ea:	b16b      	cbz	r3, 8008308 <strncpy+0x6c>
 80082ec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80082f0:	3b01      	subs	r3, #1
 80082f2:	f802 5b01 	strb.w	r5, [r2], #1
 80082f6:	4614      	mov	r4, r2
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	d1f6      	bne.n	80082ea <strncpy+0x4e>
 80082fc:	2200      	movs	r2, #0
 80082fe:	b11b      	cbz	r3, 8008308 <strncpy+0x6c>
 8008300:	3b01      	subs	r3, #1
 8008302:	f804 2b01 	strb.w	r2, [r4], #1
 8008306:	d1fb      	bne.n	8008300 <strncpy+0x64>
 8008308:	bc70      	pop	{r4, r5, r6}
 800830a:	4770      	bx	lr

0800830c <_svfprintf_r>:
 800830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	b0c9      	sub	sp, #292	; 0x124
 8008312:	468b      	mov	fp, r1
 8008314:	4692      	mov	sl, r2
 8008316:	9311      	str	r3, [sp, #68]	; 0x44
 8008318:	9010      	str	r0, [sp, #64]	; 0x40
 800831a:	f003 fc3d 	bl	800bb98 <_localeconv_r>
 800831e:	2300      	movs	r3, #0
 8008320:	2200      	movs	r2, #0
 8008322:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	9019      	str	r0, [sp, #100]	; 0x64
 800832a:	f7ff ff33 	bl	8008194 <strlen>
 800832e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008332:	061d      	lsls	r5, r3, #24
 8008334:	901a      	str	r0, [sp, #104]	; 0x68
 8008336:	d504      	bpl.n	8008342 <_svfprintf_r+0x36>
 8008338:	f8db 3010 	ldr.w	r3, [fp, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f001 801f 	beq.w	8009380 <_svfprintf_r+0x1074>
 8008342:	ad3d      	add	r5, sp, #244	; 0xf4
 8008344:	9509      	str	r5, [sp, #36]	; 0x24
 8008346:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 800834a:	9508      	str	r5, [sp, #32]
 800834c:	f246 6567 	movw	r5, #26215	; 0x6667
 8008350:	9808      	ldr	r0, [sp, #32]
 8008352:	f2c6 6566 	movt	r5, #26214	; 0x6666
 8008356:	951e      	str	r5, [sp, #120]	; 0x78
 8008358:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800835a:	2300      	movs	r3, #0
 800835c:	ae23      	add	r6, sp, #140	; 0x8c
 800835e:	9312      	str	r3, [sp, #72]	; 0x48
 8008360:	1a2d      	subs	r5, r5, r0
 8008362:	9521      	str	r5, [sp, #132]	; 0x84
 8008364:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8008368:	9320      	str	r3, [sp, #128]	; 0x80
 800836a:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
 800836e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008370:	930d      	str	r3, [sp, #52]	; 0x34
 8008372:	951b      	str	r5, [sp, #108]	; 0x6c
 8008374:	963d      	str	r6, [sp, #244]	; 0xf4
 8008376:	933f      	str	r3, [sp, #252]	; 0xfc
 8008378:	933e      	str	r3, [sp, #248]	; 0xf8
 800837a:	f89a 3000 	ldrb.w	r3, [sl]
 800837e:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8008382:	bf18      	it	ne
 8008384:	2201      	movne	r2, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	bf0c      	ite	eq
 800838a:	2300      	moveq	r3, #0
 800838c:	f002 0301 	andne.w	r3, r2, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80c6 	beq.w	8008522 <_svfprintf_r+0x216>
 8008396:	4652      	mov	r2, sl
 8008398:	4657      	mov	r7, sl
 800839a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800839e:	3701      	adds	r7, #1
 80083a0:	1c19      	adds	r1, r3, #0
 80083a2:	bf18      	it	ne
 80083a4:	2101      	movne	r1, #1
 80083a6:	2b25      	cmp	r3, #37	; 0x25
 80083a8:	bf0c      	ite	eq
 80083aa:	2300      	moveq	r3, #0
 80083ac:	f001 0301 	andne.w	r3, r1, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1f2      	bne.n	800839a <_svfprintf_r+0x8e>
 80083b4:	ebb7 080a 	subs.w	r8, r7, sl
 80083b8:	d010      	beq.n	80083dc <_svfprintf_r+0xd0>
 80083ba:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80083bc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80083be:	3401      	adds	r4, #1
 80083c0:	f8c6 a000 	str.w	sl, [r6]
 80083c4:	2c07      	cmp	r4, #7
 80083c6:	f8c6 8004 	str.w	r8, [r6, #4]
 80083ca:	4445      	add	r5, r8
 80083cc:	943e      	str	r4, [sp, #248]	; 0xf8
 80083ce:	953f      	str	r5, [sp, #252]	; 0xfc
 80083d0:	f300 808b 	bgt.w	80084ea <_svfprintf_r+0x1de>
 80083d4:	3608      	adds	r6, #8
 80083d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80083d8:	4445      	add	r5, r8
 80083da:	950d      	str	r5, [sp, #52]	; 0x34
 80083dc:	783b      	ldrb	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 808b 	beq.w	80084fa <_svfprintf_r+0x1ee>
 80083e4:	f107 0a01 	add.w	sl, r7, #1
 80083e8:	f04f 34ff 	mov.w	r4, #4294967295
 80083ec:	2720      	movs	r7, #32
 80083ee:	212b      	movs	r1, #43	; 0x2b
 80083f0:	2300      	movs	r3, #0
 80083f2:	930c      	str	r3, [sp, #48]	; 0x30
 80083f4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80083f8:	930a      	str	r3, [sp, #40]	; 0x28
 80083fa:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80083fe:	f1a3 0220 	sub.w	r2, r3, #32
 8008402:	2a58      	cmp	r2, #88	; 0x58
 8008404:	f200 8147 	bhi.w	8008696 <_svfprintf_r+0x38a>
 8008408:	e8df f012 	tbh	[pc, r2, lsl #1]
 800840c:	01450157 	.word	0x01450157
 8008410:	02160145 	.word	0x02160145
 8008414:	01450145 	.word	0x01450145
 8008418:	01450145 	.word	0x01450145
 800841c:	01450145 	.word	0x01450145
 8008420:	008d005e 	.word	0x008d005e
 8008424:	006a0145 	.word	0x006a0145
 8008428:	0145015f 	.word	0x0145015f
 800842c:	017f017a 	.word	0x017f017a
 8008430:	017f017f 	.word	0x017f017f
 8008434:	017f017f 	.word	0x017f017f
 8008438:	017f017f 	.word	0x017f017f
 800843c:	017f017f 	.word	0x017f017f
 8008440:	01450145 	.word	0x01450145
 8008444:	01450145 	.word	0x01450145
 8008448:	01450145 	.word	0x01450145
 800844c:	01450145 	.word	0x01450145
 8008450:	01450145 	.word	0x01450145
 8008454:	024d0192 	.word	0x024d0192
 8008458:	024d0145 	.word	0x024d0145
 800845c:	01450145 	.word	0x01450145
 8008460:	01450145 	.word	0x01450145
 8008464:	01450283 	.word	0x01450283
 8008468:	01d30145 	.word	0x01d30145
 800846c:	01450145 	.word	0x01450145
 8008470:	01450145 	.word	0x01450145
 8008474:	023c0145 	.word	0x023c0145
 8008478:	01450145 	.word	0x01450145
 800847c:	0145021b 	.word	0x0145021b
 8008480:	01450145 	.word	0x01450145
 8008484:	01450145 	.word	0x01450145
 8008488:	01450145 	.word	0x01450145
 800848c:	01450145 	.word	0x01450145
 8008490:	022b0145 	.word	0x022b0145
 8008494:	024d01f8 	.word	0x024d01f8
 8008498:	024d024d 	.word	0x024d024d
 800849c:	01f80211 	.word	0x01f80211
 80084a0:	01450145 	.word	0x01450145
 80084a4:	01450059 	.word	0x01450059
 80084a8:	01e501c4 	.word	0x01e501c4
 80084ac:	00590288 	.word	0x00590288
 80084b0:	00900145 	.word	0x00900145
 80084b4:	01040145 	.word	0x01040145
 80084b8:	01450145 	.word	0x01450145
 80084bc:	01a5      	.short	0x01a5
 80084be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084c0:	f045 0510 	orr.w	r5, r5, #16
 80084c4:	950a      	str	r5, [sp, #40]	; 0x28
 80084c6:	e798      	b.n	80083fa <_svfprintf_r+0xee>
 80084c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80084ca:	682d      	ldr	r5, [r5, #0]
 80084cc:	950c      	str	r5, [sp, #48]	; 0x30
 80084ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80084d0:	1d2b      	adds	r3, r5, #4
 80084d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	f280 8241 	bge.w	800895c <_svfprintf_r+0x650>
 80084da:	426d      	negs	r5, r5
 80084dc:	9311      	str	r3, [sp, #68]	; 0x44
 80084de:	950c      	str	r5, [sp, #48]	; 0x30
 80084e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084e2:	f045 0504 	orr.w	r5, r5, #4
 80084e6:	950a      	str	r5, [sp, #40]	; 0x28
 80084e8:	e787      	b.n	80083fa <_svfprintf_r+0xee>
 80084ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084ec:	4659      	mov	r1, fp
 80084ee:	aa3d      	add	r2, sp, #244	; 0xf4
 80084f0:	f004 f8c6 	bl	800c680 <__ssprint_r>
 80084f4:	b940      	cbnz	r0, 8008508 <_svfprintf_r+0x1fc>
 80084f6:	ae23      	add	r6, sp, #140	; 0x8c
 80084f8:	e76d      	b.n	80083d6 <_svfprintf_r+0xca>
 80084fa:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80084fc:	b123      	cbz	r3, 8008508 <_svfprintf_r+0x1fc>
 80084fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008500:	4659      	mov	r1, fp
 8008502:	aa3d      	add	r2, sp, #244	; 0xf4
 8008504:	f004 f8bc 	bl	800c680 <__ssprint_r>
 8008508:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800850c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800850e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008512:	bf18      	it	ne
 8008514:	f04f 35ff 	movne.w	r5, #4294967295
 8008518:	950d      	str	r5, [sp, #52]	; 0x34
 800851a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800851c:	b049      	add	sp, #292	; 0x124
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008522:	4657      	mov	r7, sl
 8008524:	e75a      	b.n	80083dc <_svfprintf_r+0xd0>
 8008526:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 800852a:	e766      	b.n	80083fa <_svfprintf_r+0xee>
 800852c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800852e:	2500      	movs	r5, #0
 8008530:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 8008534:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	9317      	str	r3, [sp, #92]	; 0x5c
 800853a:	1d0f      	adds	r7, r1, #4
 800853c:	9013      	str	r0, [sp, #76]	; 0x4c
 800853e:	2800      	cmp	r0, #0
 8008540:	f000 87af 	beq.w	80094a2 <_svfprintf_r+0x1196>
 8008544:	2c00      	cmp	r4, #0
 8008546:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008548:	f2c0 8767 	blt.w	800941a <_svfprintf_r+0x110e>
 800854c:	4629      	mov	r1, r5
 800854e:	4622      	mov	r2, r4
 8008550:	f7ff f804 	bl	800755c <memchr>
 8008554:	2800      	cmp	r0, #0
 8008556:	f000 87d3 	beq.w	8009500 <_svfprintf_r+0x11f4>
 800855a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800855c:	9514      	str	r5, [sp, #80]	; 0x50
 800855e:	1a40      	subs	r0, r0, r1
 8008560:	900e      	str	r0, [sp, #56]	; 0x38
 8008562:	42a0      	cmp	r0, r4
 8008564:	f340 8608 	ble.w	8009178 <_svfprintf_r+0xe6c>
 8008568:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800856c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008570:	950b      	str	r5, [sp, #44]	; 0x2c
 8008572:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008574:	9711      	str	r7, [sp, #68]	; 0x44
 8008576:	940e      	str	r4, [sp, #56]	; 0x38
 8008578:	9518      	str	r5, [sp, #96]	; 0x60
 800857a:	b113      	cbz	r3, 8008582 <_svfprintf_r+0x276>
 800857c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800857e:	3501      	adds	r5, #1
 8008580:	950b      	str	r5, [sp, #44]	; 0x2c
 8008582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008584:	f013 0302 	ands.w	r3, r3, #2
 8008588:	9315      	str	r3, [sp, #84]	; 0x54
 800858a:	d002      	beq.n	8008592 <_svfprintf_r+0x286>
 800858c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800858e:	3502      	adds	r5, #2
 8008590:	950b      	str	r5, [sp, #44]	; 0x2c
 8008592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008594:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8008598:	9316      	str	r3, [sp, #88]	; 0x58
 800859a:	f040 81e1 	bne.w	8008960 <_svfprintf_r+0x654>
 800859e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80085a2:	1a2f      	subs	r7, r5, r0
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	f340 81db 	ble.w	8008960 <_svfprintf_r+0x654>
 80085aa:	2f10      	cmp	r7, #16
 80085ac:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80085ae:	f340 873b 	ble.w	8009428 <_svfprintf_r+0x111c>
 80085b2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80085b4:	f04f 0910 	mov.w	r9, #16
 80085b8:	f8df 8428 	ldr.w	r8, [pc, #1064]	; 80089e4 <_svfprintf_r+0x6d8>
 80085bc:	4623      	mov	r3, r4
 80085be:	4644      	mov	r4, r8
 80085c0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80085c4:	e002      	b.n	80085cc <_svfprintf_r+0x2c0>
 80085c6:	3f10      	subs	r7, #16
 80085c8:	2f10      	cmp	r7, #16
 80085ca:	dd15      	ble.n	80085f8 <_svfprintf_r+0x2ec>
 80085cc:	3301      	adds	r3, #1
 80085ce:	e886 0210 	stmia.w	r6, {r4, r9}
 80085d2:	3510      	adds	r5, #16
 80085d4:	3608      	adds	r6, #8
 80085d6:	2b07      	cmp	r3, #7
 80085d8:	933e      	str	r3, [sp, #248]	; 0xf8
 80085da:	953f      	str	r5, [sp, #252]	; 0xfc
 80085dc:	ddf3      	ble.n	80085c6 <_svfprintf_r+0x2ba>
 80085de:	4640      	mov	r0, r8
 80085e0:	4659      	mov	r1, fp
 80085e2:	aa3d      	add	r2, sp, #244	; 0xf4
 80085e4:	ae23      	add	r6, sp, #140	; 0x8c
 80085e6:	f004 f84b 	bl	800c680 <__ssprint_r>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d18c      	bne.n	8008508 <_svfprintf_r+0x1fc>
 80085ee:	3f10      	subs	r7, #16
 80085f0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80085f2:	2f10      	cmp	r7, #16
 80085f4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80085f6:	dce9      	bgt.n	80085cc <_svfprintf_r+0x2c0>
 80085f8:	46a0      	mov	r8, r4
 80085fa:	461c      	mov	r4, r3
 80085fc:	3401      	adds	r4, #1
 80085fe:	f8c6 8000 	str.w	r8, [r6]
 8008602:	2c07      	cmp	r4, #7
 8008604:	6077      	str	r7, [r6, #4]
 8008606:	443d      	add	r5, r7
 8008608:	943e      	str	r4, [sp, #248]	; 0xf8
 800860a:	953f      	str	r5, [sp, #252]	; 0xfc
 800860c:	f300 8434 	bgt.w	8008e78 <_svfprintf_r+0xb6c>
 8008610:	3608      	adds	r6, #8
 8008612:	e1a6      	b.n	8008962 <_svfprintf_r+0x656>
 8008614:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008616:	9317      	str	r3, [sp, #92]	; 0x5c
 8008618:	06ea      	lsls	r2, r5, #27
 800861a:	f140 813c 	bpl.w	8008896 <_svfprintf_r+0x58a>
 800861e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	3504      	adds	r5, #4
 8008624:	2201      	movs	r2, #1
 8008626:	1c19      	adds	r1, r3, #0
 8008628:	9511      	str	r5, [sp, #68]	; 0x44
 800862a:	bf18      	it	ne
 800862c:	2101      	movne	r1, #1
 800862e:	2000      	movs	r0, #0
 8008630:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
 8008634:	2c00      	cmp	r4, #0
 8008636:	bfa2      	ittt	ge
 8008638:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 800863a:	f025 0580 	bicge.w	r5, r5, #128	; 0x80
 800863e:	950a      	strge	r5, [sp, #40]	; 0x28
 8008640:	2c00      	cmp	r4, #0
 8008642:	bf18      	it	ne
 8008644:	f041 0101 	orrne.w	r1, r1, #1
 8008648:	2900      	cmp	r1, #0
 800864a:	f000 82c8 	beq.w	8008bde <_svfprintf_r+0x8d2>
 800864e:	2a01      	cmp	r2, #1
 8008650:	f000 8406 	beq.w	8008e60 <_svfprintf_r+0xb54>
 8008654:	2a02      	cmp	r2, #2
 8008656:	bf18      	it	ne
 8008658:	aa3d      	addne	r2, sp, #244	; 0xf4
 800865a:	d101      	bne.n	8008660 <_svfprintf_r+0x354>
 800865c:	e3f0      	b.n	8008e40 <_svfprintf_r+0xb34>
 800865e:	4602      	mov	r2, r0
 8008660:	f003 0107 	and.w	r1, r3, #7
 8008664:	1e50      	subs	r0, r2, #1
 8008666:	3130      	adds	r1, #48	; 0x30
 8008668:	08db      	lsrs	r3, r3, #3
 800866a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800866e:	d1f6      	bne.n	800865e <_svfprintf_r+0x352>
 8008670:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008672:	9013      	str	r0, [sp, #76]	; 0x4c
 8008674:	07ed      	lsls	r5, r5, #31
 8008676:	f100 84f4 	bmi.w	8009062 <_svfprintf_r+0xd56>
 800867a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867c:	1a1b      	subs	r3, r3, r0
 800867e:	930e      	str	r3, [sp, #56]	; 0x38
 8008680:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008682:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008686:	42a5      	cmp	r5, r4
 8008688:	bfb8      	it	lt
 800868a:	4625      	movlt	r5, r4
 800868c:	9414      	str	r4, [sp, #80]	; 0x50
 800868e:	950b      	str	r5, [sp, #44]	; 0x2c
 8008690:	2500      	movs	r5, #0
 8008692:	9518      	str	r5, [sp, #96]	; 0x60
 8008694:	e771      	b.n	800857a <_svfprintf_r+0x26e>
 8008696:	9317      	str	r3, [sp, #92]	; 0x5c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f43f af2e 	beq.w	80084fa <_svfprintf_r+0x1ee>
 800869e:	2501      	movs	r5, #1
 80086a0:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 80086a4:	950b      	str	r5, [sp, #44]	; 0x2c
 80086a6:	2300      	movs	r3, #0
 80086a8:	950e      	str	r5, [sp, #56]	; 0x38
 80086aa:	ad33      	add	r5, sp, #204	; 0xcc
 80086ac:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80086b0:	9513      	str	r5, [sp, #76]	; 0x4c
 80086b2:	2300      	movs	r3, #0
 80086b4:	9314      	str	r3, [sp, #80]	; 0x50
 80086b6:	9318      	str	r3, [sp, #96]	; 0x60
 80086b8:	e763      	b.n	8008582 <_svfprintf_r+0x276>
 80086ba:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f47f ae9b 	bne.w	80083fa <_svfprintf_r+0xee>
 80086c4:	f88d 711f 	strb.w	r7, [sp, #287]	; 0x11f
 80086c8:	e697      	b.n	80083fa <_svfprintf_r+0xee>
 80086ca:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80086ce:	2b2a      	cmp	r3, #42	; 0x2a
 80086d0:	f000 813a 	beq.w	8008948 <_svfprintf_r+0x63c>
 80086d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80086d8:	2400      	movs	r4, #0
 80086da:	2a09      	cmp	r2, #9
 80086dc:	f63f ae8f 	bhi.w	80083fe <_svfprintf_r+0xf2>
 80086e0:	4650      	mov	r0, sl
 80086e2:	2400      	movs	r4, #0
 80086e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80086ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80086f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80086f4:	2a09      	cmp	r2, #9
 80086f6:	4682      	mov	sl, r0
 80086f8:	d9f4      	bls.n	80086e4 <_svfprintf_r+0x3d8>
 80086fa:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80086fe:	e67e      	b.n	80083fe <_svfprintf_r+0xf2>
 8008700:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008702:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008706:	950a      	str	r5, [sp, #40]	; 0x28
 8008708:	e677      	b.n	80083fa <_svfprintf_r+0xee>
 800870a:	4650      	mov	r0, sl
 800870c:	2200      	movs	r2, #0
 800870e:	46b4      	mov	ip, r6
 8008710:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008714:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008718:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800871c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8008720:	4682      	mov	sl, r0
 8008722:	2d09      	cmp	r5, #9
 8008724:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8008728:	d9f2      	bls.n	8008710 <_svfprintf_r+0x404>
 800872a:	4666      	mov	r6, ip
 800872c:	920c      	str	r2, [sp, #48]	; 0x30
 800872e:	e666      	b.n	80083fe <_svfprintf_r+0xf2>
 8008730:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008732:	9317      	str	r3, [sp, #92]	; 0x5c
 8008734:	f045 0510 	orr.w	r5, r5, #16
 8008738:	950a      	str	r5, [sp, #40]	; 0x28
 800873a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800873c:	06e8      	lsls	r0, r5, #27
 800873e:	d561      	bpl.n	8008804 <_svfprintf_r+0x4f8>
 8008740:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	3504      	adds	r5, #4
 8008746:	9511      	str	r5, [sp, #68]	; 0x44
 8008748:	2b00      	cmp	r3, #0
 800874a:	db67      	blt.n	800881c <_svfprintf_r+0x510>
 800874c:	bf0c      	ite	eq
 800874e:	2100      	moveq	r1, #0
 8008750:	2101      	movne	r1, #1
 8008752:	2201      	movs	r2, #1
 8008754:	e76e      	b.n	8008634 <_svfprintf_r+0x328>
 8008756:	4d9f      	ldr	r5, [pc, #636]	; (80089d4 <_svfprintf_r+0x6c8>)
 8008758:	9317      	str	r3, [sp, #92]	; 0x5c
 800875a:	9520      	str	r5, [sp, #128]	; 0x80
 800875c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800875e:	06eb      	lsls	r3, r5, #27
 8008760:	d575      	bpl.n	800884e <_svfprintf_r+0x542>
 8008762:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	3504      	adds	r5, #4
 8008768:	9511      	str	r5, [sp, #68]	; 0x44
 800876a:	1c19      	adds	r1, r3, #0
 800876c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800876e:	bf18      	it	ne
 8008770:	2101      	movne	r1, #1
 8008772:	2202      	movs	r2, #2
 8008774:	420d      	tst	r5, r1
 8008776:	f43f af5a 	beq.w	800862e <_svfprintf_r+0x322>
 800877a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800877c:	2230      	movs	r2, #48	; 0x30
 800877e:	2101      	movs	r1, #1
 8008780:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 8008784:	2202      	movs	r2, #2
 8008786:	f88d 511d 	strb.w	r5, [sp, #285]	; 0x11d
 800878a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800878c:	f045 0502 	orr.w	r5, r5, #2
 8008790:	950a      	str	r5, [sp, #40]	; 0x28
 8008792:	e74c      	b.n	800862e <_svfprintf_r+0x322>
 8008794:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008796:	06e8      	lsls	r0, r5, #27
 8008798:	f100 83a3 	bmi.w	8008ee2 <_svfprintf_r+0xbd6>
 800879c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800879e:	0669      	lsls	r1, r5, #25
 80087a0:	f140 839f 	bpl.w	8008ee2 <_svfprintf_r+0xbd6>
 80087a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	3504      	adds	r5, #4
 80087aa:	9511      	str	r5, [sp, #68]	; 0x44
 80087ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80087ae:	801d      	strh	r5, [r3, #0]
 80087b0:	e5e3      	b.n	800837a <_svfprintf_r+0x6e>
 80087b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80087b6:	f045 0510 	orr.w	r5, r5, #16
 80087ba:	950a      	str	r5, [sp, #40]	; 0x28
 80087bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087be:	f015 0110 	ands.w	r1, r5, #16
 80087c2:	d00d      	beq.n	80087e0 <_svfprintf_r+0x4d4>
 80087c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087c6:	2200      	movs	r2, #0
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	3504      	adds	r5, #4
 80087cc:	9511      	str	r5, [sp, #68]	; 0x44
 80087ce:	1a99      	subs	r1, r3, r2
 80087d0:	bf18      	it	ne
 80087d2:	2101      	movne	r1, #1
 80087d4:	e72b      	b.n	800862e <_svfprintf_r+0x322>
 80087d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80087da:	f015 0110 	ands.w	r1, r5, #16
 80087de:	d1f1      	bne.n	80087c4 <_svfprintf_r+0x4b8>
 80087e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087e2:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 80087e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087e8:	bf1a      	itte	ne
 80087ea:	460a      	movne	r2, r1
 80087ec:	882b      	ldrhne	r3, [r5, #0]
 80087ee:	682b      	ldreq	r3, [r5, #0]
 80087f0:	3504      	adds	r5, #4
 80087f2:	9511      	str	r5, [sp, #68]	; 0x44
 80087f4:	1c19      	adds	r1, r3, #0
 80087f6:	bf18      	it	ne
 80087f8:	2101      	movne	r1, #1
 80087fa:	e718      	b.n	800862e <_svfprintf_r+0x322>
 80087fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008800:	06e8      	lsls	r0, r5, #27
 8008802:	d49d      	bmi.n	8008740 <_svfprintf_r+0x434>
 8008804:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800880a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800880c:	bf0c      	ite	eq
 800880e:	682b      	ldreq	r3, [r5, #0]
 8008810:	f9b5 3000 	ldrshne.w	r3, [r5]
 8008814:	3504      	adds	r5, #4
 8008816:	9511      	str	r5, [sp, #68]	; 0x44
 8008818:	2b00      	cmp	r3, #0
 800881a:	da97      	bge.n	800874c <_svfprintf_r+0x440>
 800881c:	425b      	negs	r3, r3
 800881e:	1c19      	adds	r1, r3, #0
 8008820:	bf18      	it	ne
 8008822:	2101      	movne	r1, #1
 8008824:	222d      	movs	r2, #45	; 0x2d
 8008826:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 800882a:	2201      	movs	r2, #1
 800882c:	e702      	b.n	8008634 <_svfprintf_r+0x328>
 800882e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008830:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008834:	950a      	str	r5, [sp, #40]	; 0x28
 8008836:	e5e0      	b.n	80083fa <_svfprintf_r+0xee>
 8008838:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800883a:	f045 0501 	orr.w	r5, r5, #1
 800883e:	950a      	str	r5, [sp, #40]	; 0x28
 8008840:	e5db      	b.n	80083fa <_svfprintf_r+0xee>
 8008842:	4d65      	ldr	r5, [pc, #404]	; (80089d8 <_svfprintf_r+0x6cc>)
 8008844:	9317      	str	r3, [sp, #92]	; 0x5c
 8008846:	9520      	str	r5, [sp, #128]	; 0x80
 8008848:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800884a:	06eb      	lsls	r3, r5, #27
 800884c:	d489      	bmi.n	8008762 <_svfprintf_r+0x456>
 800884e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008850:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008854:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008856:	bf0c      	ite	eq
 8008858:	682b      	ldreq	r3, [r5, #0]
 800885a:	882b      	ldrhne	r3, [r5, #0]
 800885c:	3504      	adds	r5, #4
 800885e:	9511      	str	r5, [sp, #68]	; 0x44
 8008860:	e783      	b.n	800876a <_svfprintf_r+0x45e>
 8008862:	9317      	str	r3, [sp, #92]	; 0x5c
 8008864:	2501      	movs	r5, #1
 8008866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008868:	950b      	str	r5, [sp, #44]	; 0x2c
 800886a:	1d1d      	adds	r5, r3, #4
 800886c:	9511      	str	r5, [sp, #68]	; 0x44
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	2501      	movs	r5, #1
 8008872:	2300      	movs	r3, #0
 8008874:	950e      	str	r5, [sp, #56]	; 0x38
 8008876:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800887a:	ad33      	add	r5, sp, #204	; 0xcc
 800887c:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 8008880:	9513      	str	r5, [sp, #76]	; 0x4c
 8008882:	e716      	b.n	80086b2 <_svfprintf_r+0x3a6>
 8008884:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008886:	9317      	str	r3, [sp, #92]	; 0x5c
 8008888:	f045 0510 	orr.w	r5, r5, #16
 800888c:	950a      	str	r5, [sp, #40]	; 0x28
 800888e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008890:	06ea      	lsls	r2, r5, #27
 8008892:	f53f aec4 	bmi.w	800861e <_svfprintf_r+0x312>
 8008896:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008898:	f015 0f40 	tst.w	r5, #64	; 0x40
 800889c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800889e:	bf14      	ite	ne
 80088a0:	882b      	ldrhne	r3, [r5, #0]
 80088a2:	682b      	ldreq	r3, [r5, #0]
 80088a4:	e6bd      	b.n	8008622 <_svfprintf_r+0x316>
 80088a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80088a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80088aa:	1deb      	adds	r3, r5, #7
 80088ac:	f023 0307 	bic.w	r3, r3, #7
 80088b0:	f103 0508 	add.w	r5, r3, #8
 80088b4:	9511      	str	r5, [sp, #68]	; 0x44
 80088b6:	f8d3 8000 	ldr.w	r8, [r3]
 80088ba:	685f      	ldr	r7, [r3, #4]
 80088bc:	4640      	mov	r0, r8
 80088be:	4642      	mov	r2, r8
 80088c0:	4639      	mov	r1, r7
 80088c2:	463b      	mov	r3, r7
 80088c4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80088c8:	f003 fe4c 	bl	800c564 <__fpclassifyd>
 80088cc:	2801      	cmp	r0, #1
 80088ce:	4640      	mov	r0, r8
 80088d0:	f040 83d4 	bne.w	800907c <_svfprintf_r+0xd70>
 80088d4:	2300      	movs	r3, #0
 80088d6:	2200      	movs	r2, #0
 80088d8:	4639      	mov	r1, r7
 80088da:	f005 fa35 	bl	800dd48 <__aeabi_dcmplt>
 80088de:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80088e2:	b110      	cbz	r0, 80088ea <_svfprintf_r+0x5de>
 80088e4:	232d      	movs	r3, #45	; 0x2d
 80088e6:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80088ea:	2503      	movs	r5, #3
 80088ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80088ee:	2500      	movs	r5, #0
 80088f0:	9514      	str	r5, [sp, #80]	; 0x50
 80088f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088f4:	4a39      	ldr	r2, [pc, #228]	; (80089dc <_svfprintf_r+0x6d0>)
 80088f6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80088fa:	4939      	ldr	r1, [pc, #228]	; (80089e0 <_svfprintf_r+0x6d4>)
 80088fc:	950a      	str	r5, [sp, #40]	; 0x28
 80088fe:	2503      	movs	r5, #3
 8008900:	950e      	str	r5, [sp, #56]	; 0x38
 8008902:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008904:	2d47      	cmp	r5, #71	; 0x47
 8008906:	bfd8      	it	le
 8008908:	4611      	movle	r1, r2
 800890a:	2500      	movs	r5, #0
 800890c:	9113      	str	r1, [sp, #76]	; 0x4c
 800890e:	9518      	str	r5, [sp, #96]	; 0x60
 8008910:	e633      	b.n	800857a <_svfprintf_r+0x26e>
 8008912:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008914:	f045 0508 	orr.w	r5, r5, #8
 8008918:	950a      	str	r5, [sp, #40]	; 0x28
 800891a:	e56e      	b.n	80083fa <_svfprintf_r+0xee>
 800891c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800891e:	2078      	movs	r0, #120	; 0x78
 8008920:	2230      	movs	r2, #48	; 0x30
 8008922:	9017      	str	r0, [sp, #92]	; 0x5c
 8008924:	1d1d      	adds	r5, r3, #4
 8008926:	9511      	str	r5, [sp, #68]	; 0x44
 8008928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f045 0502 	orr.w	r5, r5, #2
 8008930:	950a      	str	r5, [sp, #40]	; 0x28
 8008932:	4d28      	ldr	r5, [pc, #160]	; (80089d4 <_svfprintf_r+0x6c8>)
 8008934:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 8008938:	2202      	movs	r2, #2
 800893a:	1c19      	adds	r1, r3, #0
 800893c:	f88d 011d 	strb.w	r0, [sp, #285]	; 0x11d
 8008940:	bf18      	it	ne
 8008942:	2101      	movne	r1, #1
 8008944:	9520      	str	r5, [sp, #128]	; 0x80
 8008946:	e672      	b.n	800862e <_svfprintf_r+0x322>
 8008948:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800894a:	1d2b      	adds	r3, r5, #4
 800894c:	682c      	ldr	r4, [r5, #0]
 800894e:	2c00      	cmp	r4, #0
 8008950:	bfbc      	itt	lt
 8008952:	9311      	strlt	r3, [sp, #68]	; 0x44
 8008954:	f04f 34ff 	movlt.w	r4, #4294967295
 8008958:	f6ff ad4f 	blt.w	80083fa <_svfprintf_r+0xee>
 800895c:	9311      	str	r3, [sp, #68]	; 0x44
 800895e:	e54c      	b.n	80083fa <_svfprintf_r+0xee>
 8008960:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008962:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008966:	b16b      	cbz	r3, 8008984 <_svfprintf_r+0x678>
 8008968:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800896a:	ab47      	add	r3, sp, #284	; 0x11c
 800896c:	3303      	adds	r3, #3
 800896e:	6033      	str	r3, [r6, #0]
 8008970:	3401      	adds	r4, #1
 8008972:	2301      	movs	r3, #1
 8008974:	2c07      	cmp	r4, #7
 8008976:	6073      	str	r3, [r6, #4]
 8008978:	441d      	add	r5, r3
 800897a:	943e      	str	r4, [sp, #248]	; 0xf8
 800897c:	953f      	str	r5, [sp, #252]	; 0xfc
 800897e:	f300 81f8 	bgt.w	8008d72 <_svfprintf_r+0xa66>
 8008982:	3608      	adds	r6, #8
 8008984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008986:	b163      	cbz	r3, 80089a2 <_svfprintf_r+0x696>
 8008988:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800898a:	ab47      	add	r3, sp, #284	; 0x11c
 800898c:	6033      	str	r3, [r6, #0]
 800898e:	2302      	movs	r3, #2
 8008990:	3401      	adds	r4, #1
 8008992:	6073      	str	r3, [r6, #4]
 8008994:	2c07      	cmp	r4, #7
 8008996:	441d      	add	r5, r3
 8008998:	943e      	str	r4, [sp, #248]	; 0xf8
 800899a:	953f      	str	r5, [sp, #252]	; 0xfc
 800899c:	f300 81f4 	bgt.w	8008d88 <_svfprintf_r+0xa7c>
 80089a0:	3608      	adds	r6, #8
 80089a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089a4:	2b80      	cmp	r3, #128	; 0x80
 80089a6:	f000 812e 	beq.w	8008c06 <_svfprintf_r+0x8fa>
 80089aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80089ae:	1a1f      	subs	r7, r3, r0
 80089b0:	2f00      	cmp	r7, #0
 80089b2:	dd42      	ble.n	8008a3a <_svfprintf_r+0x72e>
 80089b4:	2f10      	cmp	r7, #16
 80089b6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80089b8:	bfd8      	it	le
 80089ba:	f8df 802c 	ldrle.w	r8, [pc, #44]	; 80089e8 <_svfprintf_r+0x6dc>
 80089be:	dd31      	ble.n	8008a24 <_svfprintf_r+0x718>
 80089c0:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80089e8 <_svfprintf_r+0x6dc>
 80089c4:	4623      	mov	r3, r4
 80089c6:	f04f 0910 	mov.w	r9, #16
 80089ca:	4644      	mov	r4, r8
 80089cc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80089d0:	e00f      	b.n	80089f2 <_svfprintf_r+0x6e6>
 80089d2:	bf00      	nop
 80089d4:	0801e888 	.word	0x0801e888
 80089d8:	0801e874 	.word	0x0801e874
 80089dc:	0801e864 	.word	0x0801e864
 80089e0:	0801e868 	.word	0x0801e868
 80089e4:	0801a764 	.word	0x0801a764
 80089e8:	0801a774 	.word	0x0801a774
 80089ec:	3f10      	subs	r7, #16
 80089ee:	2f10      	cmp	r7, #16
 80089f0:	dd16      	ble.n	8008a20 <_svfprintf_r+0x714>
 80089f2:	3301      	adds	r3, #1
 80089f4:	e886 0210 	stmia.w	r6, {r4, r9}
 80089f8:	3510      	adds	r5, #16
 80089fa:	3608      	adds	r6, #8
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	933e      	str	r3, [sp, #248]	; 0xf8
 8008a00:	953f      	str	r5, [sp, #252]	; 0xfc
 8008a02:	ddf3      	ble.n	80089ec <_svfprintf_r+0x6e0>
 8008a04:	4640      	mov	r0, r8
 8008a06:	4659      	mov	r1, fp
 8008a08:	aa3d      	add	r2, sp, #244	; 0xf4
 8008a0a:	ae23      	add	r6, sp, #140	; 0x8c
 8008a0c:	f003 fe38 	bl	800c680 <__ssprint_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f47f ad79 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008a16:	3f10      	subs	r7, #16
 8008a18:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008a1a:	2f10      	cmp	r7, #16
 8008a1c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008a1e:	dce8      	bgt.n	80089f2 <_svfprintf_r+0x6e6>
 8008a20:	46a0      	mov	r8, r4
 8008a22:	461c      	mov	r4, r3
 8008a24:	3401      	adds	r4, #1
 8008a26:	f8c6 8000 	str.w	r8, [r6]
 8008a2a:	2c07      	cmp	r4, #7
 8008a2c:	6077      	str	r7, [r6, #4]
 8008a2e:	443d      	add	r5, r7
 8008a30:	943e      	str	r4, [sp, #248]	; 0xf8
 8008a32:	953f      	str	r5, [sp, #252]	; 0xfc
 8008a34:	f300 8192 	bgt.w	8008d5c <_svfprintf_r+0xa50>
 8008a38:	3608      	adds	r6, #8
 8008a3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a3c:	05ca      	lsls	r2, r1, #23
 8008a3e:	d475      	bmi.n	8008b2c <_svfprintf_r+0x820>
 8008a40:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a44:	3401      	adds	r4, #1
 8008a46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008a48:	2c07      	cmp	r4, #7
 8008a4a:	441d      	add	r5, r3
 8008a4c:	6073      	str	r3, [r6, #4]
 8008a4e:	6030      	str	r0, [r6, #0]
 8008a50:	953f      	str	r5, [sp, #252]	; 0xfc
 8008a52:	943e      	str	r4, [sp, #248]	; 0xf8
 8008a54:	dc5f      	bgt.n	8008b16 <_svfprintf_r+0x80a>
 8008a56:	3608      	adds	r6, #8
 8008a58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a5a:	074b      	lsls	r3, r1, #29
 8008a5c:	d541      	bpl.n	8008ae2 <_svfprintf_r+0x7d6>
 8008a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a62:	1ad7      	subs	r7, r2, r3
 8008a64:	2f00      	cmp	r7, #0
 8008a66:	dd3c      	ble.n	8008ae2 <_svfprintf_r+0x7d6>
 8008a68:	2f10      	cmp	r7, #16
 8008a6a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008a6c:	bfd8      	it	le
 8008a6e:	f8df 8334 	ldrle.w	r8, [pc, #820]	; 8008da4 <_svfprintf_r+0xa98>
 8008a72:	dd24      	ble.n	8008abe <_svfprintf_r+0x7b2>
 8008a74:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8008da4 <_svfprintf_r+0xa98>
 8008a78:	4623      	mov	r3, r4
 8008a7a:	f04f 0910 	mov.w	r9, #16
 8008a7e:	4644      	mov	r4, r8
 8008a80:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008a84:	e002      	b.n	8008a8c <_svfprintf_r+0x780>
 8008a86:	3f10      	subs	r7, #16
 8008a88:	2f10      	cmp	r7, #16
 8008a8a:	dd16      	ble.n	8008aba <_svfprintf_r+0x7ae>
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	e886 0210 	stmia.w	r6, {r4, r9}
 8008a92:	3510      	adds	r5, #16
 8008a94:	3608      	adds	r6, #8
 8008a96:	2b07      	cmp	r3, #7
 8008a98:	933e      	str	r3, [sp, #248]	; 0xf8
 8008a9a:	953f      	str	r5, [sp, #252]	; 0xfc
 8008a9c:	ddf3      	ble.n	8008a86 <_svfprintf_r+0x77a>
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	aa3d      	add	r2, sp, #244	; 0xf4
 8008aa4:	ae23      	add	r6, sp, #140	; 0x8c
 8008aa6:	f003 fdeb 	bl	800c680 <__ssprint_r>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	f47f ad2c 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008ab0:	3f10      	subs	r7, #16
 8008ab2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008ab4:	2f10      	cmp	r7, #16
 8008ab6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008ab8:	dce8      	bgt.n	8008a8c <_svfprintf_r+0x780>
 8008aba:	46a0      	mov	r8, r4
 8008abc:	461c      	mov	r4, r3
 8008abe:	3401      	adds	r4, #1
 8008ac0:	f8c6 8000 	str.w	r8, [r6]
 8008ac4:	2c07      	cmp	r4, #7
 8008ac6:	6077      	str	r7, [r6, #4]
 8008ac8:	443d      	add	r5, r7
 8008aca:	943e      	str	r4, [sp, #248]	; 0xf8
 8008acc:	953f      	str	r5, [sp, #252]	; 0xfc
 8008ace:	dd08      	ble.n	8008ae2 <_svfprintf_r+0x7d6>
 8008ad0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ad2:	4659      	mov	r1, fp
 8008ad4:	aa3d      	add	r2, sp, #244	; 0xf4
 8008ad6:	f003 fdd3 	bl	800c680 <__ssprint_r>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f47f ad14 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008ae0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008ae2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae8:	4291      	cmp	r1, r2
 8008aea:	bfac      	ite	ge
 8008aec:	1840      	addge	r0, r0, r1
 8008aee:	1880      	addlt	r0, r0, r2
 8008af0:	900d      	str	r0, [sp, #52]	; 0x34
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	f040 8124 	bne.w	8008d40 <_svfprintf_r+0xa34>
 8008af8:	2300      	movs	r3, #0
 8008afa:	ae23      	add	r6, sp, #140	; 0x8c
 8008afc:	933e      	str	r3, [sp, #248]	; 0xf8
 8008afe:	e43c      	b.n	800837a <_svfprintf_r+0x6e>
 8008b00:	46a0      	mov	r8, r4
 8008b02:	461c      	mov	r4, r3
 8008b04:	3401      	adds	r4, #1
 8008b06:	f8c6 8000 	str.w	r8, [r6]
 8008b0a:	2c07      	cmp	r4, #7
 8008b0c:	6077      	str	r7, [r6, #4]
 8008b0e:	443d      	add	r5, r7
 8008b10:	943e      	str	r4, [sp, #248]	; 0xf8
 8008b12:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b14:	dd9f      	ble.n	8008a56 <_svfprintf_r+0x74a>
 8008b16:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b18:	4659      	mov	r1, fp
 8008b1a:	aa3d      	add	r2, sp, #244	; 0xf4
 8008b1c:	f003 fdb0 	bl	800c680 <__ssprint_r>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f47f acf1 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008b26:	ae23      	add	r6, sp, #140	; 0x8c
 8008b28:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008b2a:	e795      	b.n	8008a58 <_svfprintf_r+0x74c>
 8008b2c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008b2e:	2965      	cmp	r1, #101	; 0x65
 8008b30:	f340 80a6 	ble.w	8008c80 <_svfprintf_r+0x974>
 8008b34:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f005 f8fa 	bl	800dd34 <__aeabi_dcmpeq>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f000 8133 	beq.w	8008dac <_svfprintf_r+0xaa0>
 8008b46:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b48:	2301      	movs	r3, #1
 8008b4a:	6073      	str	r3, [r6, #4]
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	3401      	adds	r4, #1
 8008b50:	4b93      	ldr	r3, [pc, #588]	; (8008da0 <_svfprintf_r+0xa94>)
 8008b52:	2c07      	cmp	r4, #7
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b58:	943e      	str	r4, [sp, #248]	; 0xf8
 8008b5a:	f300 82b8 	bgt.w	80090ce <_svfprintf_r+0xdc2>
 8008b5e:	3608      	adds	r6, #8
 8008b60:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8008b62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b64:	429a      	cmp	r2, r3
 8008b66:	dc03      	bgt.n	8008b70 <_svfprintf_r+0x864>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	07db      	lsls	r3, r3, #31
 8008b6c:	f57f af74 	bpl.w	8008a58 <_svfprintf_r+0x74c>
 8008b70:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b72:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008b74:	3401      	adds	r4, #1
 8008b76:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008b78:	2c07      	cmp	r4, #7
 8008b7a:	4405      	add	r5, r0
 8008b7c:	6070      	str	r0, [r6, #4]
 8008b7e:	6031      	str	r1, [r6, #0]
 8008b80:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b82:	943e      	str	r4, [sp, #248]	; 0xf8
 8008b84:	f300 8303 	bgt.w	800918e <_svfprintf_r+0xe82>
 8008b88:	3608      	adds	r6, #8
 8008b8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b8c:	1e57      	subs	r7, r2, #1
 8008b8e:	2f00      	cmp	r7, #0
 8008b90:	f77f af62 	ble.w	8008a58 <_svfprintf_r+0x74c>
 8008b94:	2f10      	cmp	r7, #16
 8008b96:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b98:	f340 84e0 	ble.w	800955c <_svfprintf_r+0x1250>
 8008b9c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8008da8 <_svfprintf_r+0xa9c>
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	f04f 0910 	mov.w	r9, #16
 8008ba6:	4644      	mov	r4, r8
 8008ba8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008bac:	e002      	b.n	8008bb4 <_svfprintf_r+0x8a8>
 8008bae:	3f10      	subs	r7, #16
 8008bb0:	2f10      	cmp	r7, #16
 8008bb2:	dda5      	ble.n	8008b00 <_svfprintf_r+0x7f4>
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	e886 0210 	stmia.w	r6, {r4, r9}
 8008bba:	3510      	adds	r5, #16
 8008bbc:	3608      	adds	r6, #8
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	933e      	str	r3, [sp, #248]	; 0xf8
 8008bc2:	953f      	str	r5, [sp, #252]	; 0xfc
 8008bc4:	ddf3      	ble.n	8008bae <_svfprintf_r+0x8a2>
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4659      	mov	r1, fp
 8008bca:	aa3d      	add	r2, sp, #244	; 0xf4
 8008bcc:	ae23      	add	r6, sp, #140	; 0x8c
 8008bce:	f003 fd57 	bl	800c680 <__ssprint_r>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	f47f ac98 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008bd8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008bda:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008bdc:	e7e7      	b.n	8008bae <_svfprintf_r+0x8a2>
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	f040 80b8 	bne.w	8008d54 <_svfprintf_r+0xa48>
 8008be4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008be6:	07e9      	lsls	r1, r5, #31
 8008be8:	bf5e      	ittt	pl
 8008bea:	920e      	strpl	r2, [sp, #56]	; 0x38
 8008bec:	ad3d      	addpl	r5, sp, #244	; 0xf4
 8008bee:	9513      	strpl	r5, [sp, #76]	; 0x4c
 8008bf0:	f57f ad46 	bpl.w	8008680 <_svfprintf_r+0x374>
 8008bf4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008bf6:	2330      	movs	r3, #48	; 0x30
 8008bf8:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8008bfc:	950e      	str	r5, [sp, #56]	; 0x38
 8008bfe:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008c02:	9513      	str	r5, [sp, #76]	; 0x4c
 8008c04:	e53c      	b.n	8008680 <_svfprintf_r+0x374>
 8008c06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c0a:	1a47      	subs	r7, r0, r1
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f77f aecc 	ble.w	80089aa <_svfprintf_r+0x69e>
 8008c12:	2f10      	cmp	r7, #16
 8008c14:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008c16:	bfd8      	it	le
 8008c18:	f8df 818c 	ldrle.w	r8, [pc, #396]	; 8008da8 <_svfprintf_r+0xa9c>
 8008c1c:	dd24      	ble.n	8008c68 <_svfprintf_r+0x95c>
 8008c1e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8008da8 <_svfprintf_r+0xa9c>
 8008c22:	4623      	mov	r3, r4
 8008c24:	f04f 0910 	mov.w	r9, #16
 8008c28:	4644      	mov	r4, r8
 8008c2a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008c2e:	e002      	b.n	8008c36 <_svfprintf_r+0x92a>
 8008c30:	3f10      	subs	r7, #16
 8008c32:	2f10      	cmp	r7, #16
 8008c34:	dd16      	ble.n	8008c64 <_svfprintf_r+0x958>
 8008c36:	3301      	adds	r3, #1
 8008c38:	e886 0210 	stmia.w	r6, {r4, r9}
 8008c3c:	3510      	adds	r5, #16
 8008c3e:	3608      	adds	r6, #8
 8008c40:	2b07      	cmp	r3, #7
 8008c42:	933e      	str	r3, [sp, #248]	; 0xf8
 8008c44:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c46:	ddf3      	ble.n	8008c30 <_svfprintf_r+0x924>
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4659      	mov	r1, fp
 8008c4c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008c4e:	ae23      	add	r6, sp, #140	; 0x8c
 8008c50:	f003 fd16 	bl	800c680 <__ssprint_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f47f ac57 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008c5a:	3f10      	subs	r7, #16
 8008c5c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008c5e:	2f10      	cmp	r7, #16
 8008c60:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008c62:	dce8      	bgt.n	8008c36 <_svfprintf_r+0x92a>
 8008c64:	46a0      	mov	r8, r4
 8008c66:	461c      	mov	r4, r3
 8008c68:	3401      	adds	r4, #1
 8008c6a:	f8c6 8000 	str.w	r8, [r6]
 8008c6e:	2c07      	cmp	r4, #7
 8008c70:	6077      	str	r7, [r6, #4]
 8008c72:	443d      	add	r5, r7
 8008c74:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c76:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c78:	f300 81e8 	bgt.w	800904c <_svfprintf_r+0xd40>
 8008c7c:	3608      	adds	r6, #8
 8008c7e:	e694      	b.n	80089aa <_svfprintf_r+0x69e>
 8008c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c82:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f340 8196 	ble.w	8008fb6 <_svfprintf_r+0xcaa>
 8008c8a:	3401      	adds	r4, #1
 8008c8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c8e:	3501      	adds	r5, #1
 8008c90:	2301      	movs	r3, #1
 8008c92:	2c07      	cmp	r4, #7
 8008c94:	6073      	str	r3, [r6, #4]
 8008c96:	6031      	str	r1, [r6, #0]
 8008c98:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c9a:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c9c:	f300 81a6 	bgt.w	8008fec <_svfprintf_r+0xce0>
 8008ca0:	3608      	adds	r6, #8
 8008ca2:	3401      	adds	r4, #1
 8008ca4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008ca6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ca8:	2c07      	cmp	r4, #7
 8008caa:	441d      	add	r5, r3
 8008cac:	6073      	str	r3, [r6, #4]
 8008cae:	6032      	str	r2, [r6, #0]
 8008cb0:	943e      	str	r4, [sp, #248]	; 0xf8
 8008cb2:	953f      	str	r5, [sp, #252]	; 0xfc
 8008cb4:	f300 81a6 	bgt.w	8009004 <_svfprintf_r+0xcf8>
 8008cb8:	3608      	adds	r6, #8
 8008cba:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f005 f837 	bl	800dd34 <__aeabi_dcmpeq>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f040 80e1 	bne.w	8008e8e <_svfprintf_r+0xb82>
 8008ccc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008cce:	3401      	adds	r4, #1
 8008cd0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008cd2:	1e42      	subs	r2, r0, #1
 8008cd4:	6072      	str	r2, [r6, #4]
 8008cd6:	1c4b      	adds	r3, r1, #1
 8008cd8:	2c07      	cmp	r4, #7
 8008cda:	6033      	str	r3, [r6, #0]
 8008cdc:	4415      	add	r5, r2
 8008cde:	943e      	str	r4, [sp, #248]	; 0xf8
 8008ce0:	953f      	str	r5, [sp, #252]	; 0xfc
 8008ce2:	dc21      	bgt.n	8008d28 <_svfprintf_r+0xa1c>
 8008ce4:	3608      	adds	r6, #8
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008cea:	2c07      	cmp	r4, #7
 8008cec:	ab40      	add	r3, sp, #256	; 0x100
 8008cee:	4405      	add	r5, r0
 8008cf0:	6033      	str	r3, [r6, #0]
 8008cf2:	6070      	str	r0, [r6, #4]
 8008cf4:	953f      	str	r5, [sp, #252]	; 0xfc
 8008cf6:	943e      	str	r4, [sp, #248]	; 0xf8
 8008cf8:	f77f aead 	ble.w	8008a56 <_svfprintf_r+0x74a>
 8008cfc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cfe:	4659      	mov	r1, fp
 8008d00:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d02:	f003 fcbd 	bl	800c680 <__ssprint_r>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f47f abfe 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008d0c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d0e:	ae23      	add	r6, sp, #140	; 0x8c
 8008d10:	e6a2      	b.n	8008a58 <_svfprintf_r+0x74c>
 8008d12:	46a0      	mov	r8, r4
 8008d14:	461c      	mov	r4, r3
 8008d16:	3401      	adds	r4, #1
 8008d18:	f8c6 8000 	str.w	r8, [r6]
 8008d1c:	2c07      	cmp	r4, #7
 8008d1e:	6077      	str	r7, [r6, #4]
 8008d20:	443d      	add	r5, r7
 8008d22:	943e      	str	r4, [sp, #248]	; 0xf8
 8008d24:	953f      	str	r5, [sp, #252]	; 0xfc
 8008d26:	dddd      	ble.n	8008ce4 <_svfprintf_r+0x9d8>
 8008d28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d2a:	4659      	mov	r1, fp
 8008d2c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d2e:	f003 fca7 	bl	800c680 <__ssprint_r>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f47f abe8 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008d38:	ae23      	add	r6, sp, #140	; 0x8c
 8008d3a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d3c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008d3e:	e7d2      	b.n	8008ce6 <_svfprintf_r+0x9da>
 8008d40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d42:	4659      	mov	r1, fp
 8008d44:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d46:	f003 fc9b 	bl	800c680 <__ssprint_r>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f aed4 	beq.w	8008af8 <_svfprintf_r+0x7ec>
 8008d50:	f7ff bbda 	b.w	8008508 <_svfprintf_r+0x1fc>
 8008d54:	ad3d      	add	r5, sp, #244	; 0xf4
 8008d56:	910e      	str	r1, [sp, #56]	; 0x38
 8008d58:	9513      	str	r5, [sp, #76]	; 0x4c
 8008d5a:	e491      	b.n	8008680 <_svfprintf_r+0x374>
 8008d5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d5e:	4659      	mov	r1, fp
 8008d60:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d62:	f003 fc8d 	bl	800c680 <__ssprint_r>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f47f abce 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008d6c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d6e:	ae23      	add	r6, sp, #140	; 0x8c
 8008d70:	e663      	b.n	8008a3a <_svfprintf_r+0x72e>
 8008d72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d74:	4659      	mov	r1, fp
 8008d76:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d78:	f003 fc82 	bl	800c680 <__ssprint_r>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f47f abc3 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008d82:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d84:	ae23      	add	r6, sp, #140	; 0x8c
 8008d86:	e5fd      	b.n	8008984 <_svfprintf_r+0x678>
 8008d88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d8a:	4659      	mov	r1, fp
 8008d8c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d8e:	f003 fc77 	bl	800c680 <__ssprint_r>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f47f abb8 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008d98:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d9a:	ae23      	add	r6, sp, #140	; 0x8c
 8008d9c:	e601      	b.n	80089a2 <_svfprintf_r+0x696>
 8008d9e:	bf00      	nop
 8008da0:	0801e8a4 	.word	0x0801e8a4
 8008da4:	0801a764 	.word	0x0801a764
 8008da8:	0801a774 	.word	0x0801a774
 8008dac:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8008dae:	2f00      	cmp	r7, #0
 8008db0:	f340 8198 	ble.w	80090e4 <_svfprintf_r+0xdd8>
 8008db4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008db6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008db8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008dba:	428f      	cmp	r7, r1
 8008dbc:	bfa8      	it	ge
 8008dbe:	460f      	movge	r7, r1
 8008dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dc2:	2f00      	cmp	r7, #0
 8008dc4:	4403      	add	r3, r0
 8008dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8008dc8:	dd0a      	ble.n	8008de0 <_svfprintf_r+0xad4>
 8008dca:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008dcc:	19ed      	adds	r5, r5, r7
 8008dce:	6030      	str	r0, [r6, #0]
 8008dd0:	3401      	adds	r4, #1
 8008dd2:	6077      	str	r7, [r6, #4]
 8008dd4:	2c07      	cmp	r4, #7
 8008dd6:	953f      	str	r5, [sp, #252]	; 0xfc
 8008dd8:	943e      	str	r4, [sp, #248]	; 0xf8
 8008dda:	f300 832a 	bgt.w	8009432 <_svfprintf_r+0x1126>
 8008dde:	3608      	adds	r6, #8
 8008de0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008de2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008de6:	1bcf      	subs	r7, r1, r7
 8008de8:	2f00      	cmp	r7, #0
 8008dea:	f340 808c 	ble.w	8008f06 <_svfprintf_r+0xbfa>
 8008dee:	2f10      	cmp	r7, #16
 8008df0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008df2:	bfd8      	it	le
 8008df4:	f8df 8538 	ldrle.w	r8, [pc, #1336]	; 8009330 <_svfprintf_r+0x1024>
 8008df8:	f340 815d 	ble.w	80090b6 <_svfprintf_r+0xdaa>
 8008dfc:	f8df 8530 	ldr.w	r8, [pc, #1328]	; 8009330 <_svfprintf_r+0x1024>
 8008e00:	4623      	mov	r3, r4
 8008e02:	f04f 0910 	mov.w	r9, #16
 8008e06:	4644      	mov	r4, r8
 8008e08:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008e0c:	e003      	b.n	8008e16 <_svfprintf_r+0xb0a>
 8008e0e:	3f10      	subs	r7, #16
 8008e10:	2f10      	cmp	r7, #16
 8008e12:	f340 814e 	ble.w	80090b2 <_svfprintf_r+0xda6>
 8008e16:	3301      	adds	r3, #1
 8008e18:	e886 0210 	stmia.w	r6, {r4, r9}
 8008e1c:	3510      	adds	r5, #16
 8008e1e:	3608      	adds	r6, #8
 8008e20:	2b07      	cmp	r3, #7
 8008e22:	933e      	str	r3, [sp, #248]	; 0xf8
 8008e24:	953f      	str	r5, [sp, #252]	; 0xfc
 8008e26:	ddf2      	ble.n	8008e0e <_svfprintf_r+0xb02>
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e2e:	ae23      	add	r6, sp, #140	; 0x8c
 8008e30:	f003 fc26 	bl	800c680 <__ssprint_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	f47f ab67 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008e3a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e3c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008e3e:	e7e6      	b.n	8008e0e <_svfprintf_r+0xb02>
 8008e40:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008e42:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 8008e46:	f003 000f 	and.w	r0, r3, #15
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	3901      	subs	r1, #1
 8008e4e:	091b      	lsrs	r3, r3, #4
 8008e50:	5c28      	ldrb	r0, [r5, r0]
 8008e52:	7010      	strb	r0, [r2, #0]
 8008e54:	d1f7      	bne.n	8008e46 <_svfprintf_r+0xb3a>
 8008e56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e58:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e5a:	1aad      	subs	r5, r5, r2
 8008e5c:	950e      	str	r5, [sp, #56]	; 0x38
 8008e5e:	e40f      	b.n	8008680 <_svfprintf_r+0x374>
 8008e60:	2b09      	cmp	r3, #9
 8008e62:	f200 80db 	bhi.w	800901c <_svfprintf_r+0xd10>
 8008e66:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008e68:	3330      	adds	r3, #48	; 0x30
 8008e6a:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8008e6e:	950e      	str	r5, [sp, #56]	; 0x38
 8008e70:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008e74:	9513      	str	r5, [sp, #76]	; 0x4c
 8008e76:	e403      	b.n	8008680 <_svfprintf_r+0x374>
 8008e78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e7e:	f003 fbff 	bl	800c680 <__ssprint_r>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f47f ab40 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008e88:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e8a:	ae23      	add	r6, sp, #140	; 0x8c
 8008e8c:	e569      	b.n	8008962 <_svfprintf_r+0x656>
 8008e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e90:	1e57      	subs	r7, r2, #1
 8008e92:	2f00      	cmp	r7, #0
 8008e94:	f77f af27 	ble.w	8008ce6 <_svfprintf_r+0x9da>
 8008e98:	2f10      	cmp	r7, #16
 8008e9a:	f8df 8494 	ldr.w	r8, [pc, #1172]	; 8009330 <_svfprintf_r+0x1024>
 8008e9e:	f77f af3a 	ble.w	8008d16 <_svfprintf_r+0xa0a>
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	f04f 0910 	mov.w	r9, #16
 8008ea8:	4644      	mov	r4, r8
 8008eaa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008eae:	e003      	b.n	8008eb8 <_svfprintf_r+0xbac>
 8008eb0:	3f10      	subs	r7, #16
 8008eb2:	2f10      	cmp	r7, #16
 8008eb4:	f77f af2d 	ble.w	8008d12 <_svfprintf_r+0xa06>
 8008eb8:	3301      	adds	r3, #1
 8008eba:	e886 0210 	stmia.w	r6, {r4, r9}
 8008ebe:	3510      	adds	r5, #16
 8008ec0:	3608      	adds	r6, #8
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	933e      	str	r3, [sp, #248]	; 0xf8
 8008ec6:	953f      	str	r5, [sp, #252]	; 0xfc
 8008ec8:	ddf2      	ble.n	8008eb0 <_svfprintf_r+0xba4>
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4659      	mov	r1, fp
 8008ece:	aa3d      	add	r2, sp, #244	; 0xf4
 8008ed0:	ae23      	add	r6, sp, #140	; 0x8c
 8008ed2:	f003 fbd5 	bl	800c680 <__ssprint_r>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f47f ab16 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008edc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008ede:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008ee0:	e7e6      	b.n	8008eb0 <_svfprintf_r+0xba4>
 8008ee2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	3504      	adds	r5, #4
 8008ee8:	9511      	str	r5, [sp, #68]	; 0x44
 8008eea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008eec:	601d      	str	r5, [r3, #0]
 8008eee:	f7ff ba44 	b.w	800837a <_svfprintf_r+0x6e>
 8008ef2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	aa3d      	add	r2, sp, #244	; 0xf4
 8008ef8:	f003 fbc2 	bl	800c680 <__ssprint_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f47f ab03 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008f02:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008f04:	ae23      	add	r6, sp, #140	; 0x8c
 8008f06:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8008f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	dc45      	bgt.n	8008f9a <_svfprintf_r+0xc8e>
 8008f0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f10:	07c1      	lsls	r1, r0, #31
 8008f12:	d442      	bmi.n	8008f9a <_svfprintf_r+0xc8e>
 8008f14:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f16:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008f18:	180a      	adds	r2, r1, r0
 8008f1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008f1e:	1ac3      	subs	r3, r0, r3
 8008f20:	1a8f      	subs	r7, r1, r2
 8008f22:	42bb      	cmp	r3, r7
 8008f24:	bfb8      	it	lt
 8008f26:	461f      	movlt	r7, r3
 8008f28:	2f00      	cmp	r7, #0
 8008f2a:	dd0a      	ble.n	8008f42 <_svfprintf_r+0xc36>
 8008f2c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f2e:	19ed      	adds	r5, r5, r7
 8008f30:	6032      	str	r2, [r6, #0]
 8008f32:	3401      	adds	r4, #1
 8008f34:	6077      	str	r7, [r6, #4]
 8008f36:	2c07      	cmp	r4, #7
 8008f38:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f3a:	943e      	str	r4, [sp, #248]	; 0xf8
 8008f3c:	f300 8284 	bgt.w	8009448 <_svfprintf_r+0x113c>
 8008f40:	3608      	adds	r6, #8
 8008f42:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008f46:	1bdf      	subs	r7, r3, r7
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	f77f ad85 	ble.w	8008a58 <_svfprintf_r+0x74c>
 8008f4e:	2f10      	cmp	r7, #16
 8008f50:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f52:	f340 8303 	ble.w	800955c <_svfprintf_r+0x1250>
 8008f56:	f8df 83d8 	ldr.w	r8, [pc, #984]	; 8009330 <_svfprintf_r+0x1024>
 8008f5a:	4623      	mov	r3, r4
 8008f5c:	f04f 0910 	mov.w	r9, #16
 8008f60:	4644      	mov	r4, r8
 8008f62:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008f66:	e003      	b.n	8008f70 <_svfprintf_r+0xc64>
 8008f68:	3f10      	subs	r7, #16
 8008f6a:	2f10      	cmp	r7, #16
 8008f6c:	f77f adc8 	ble.w	8008b00 <_svfprintf_r+0x7f4>
 8008f70:	3301      	adds	r3, #1
 8008f72:	e886 0210 	stmia.w	r6, {r4, r9}
 8008f76:	3510      	adds	r5, #16
 8008f78:	3608      	adds	r6, #8
 8008f7a:	2b07      	cmp	r3, #7
 8008f7c:	933e      	str	r3, [sp, #248]	; 0xf8
 8008f7e:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f80:	ddf2      	ble.n	8008f68 <_svfprintf_r+0xc5c>
 8008f82:	4640      	mov	r0, r8
 8008f84:	4659      	mov	r1, fp
 8008f86:	aa3d      	add	r2, sp, #244	; 0xf4
 8008f88:	ae23      	add	r6, sp, #140	; 0x8c
 8008f8a:	f003 fb79 	bl	800c680 <__ssprint_r>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f47f aaba 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008f94:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008f96:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008f98:	e7e6      	b.n	8008f68 <_svfprintf_r+0xc5c>
 8008f9a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f9e:	3401      	adds	r4, #1
 8008fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fa2:	2c07      	cmp	r4, #7
 8008fa4:	440d      	add	r5, r1
 8008fa6:	6071      	str	r1, [r6, #4]
 8008fa8:	6032      	str	r2, [r6, #0]
 8008faa:	953f      	str	r5, [sp, #252]	; 0xfc
 8008fac:	943e      	str	r4, [sp, #248]	; 0xf8
 8008fae:	f300 826c 	bgt.w	800948a <_svfprintf_r+0x117e>
 8008fb2:	3608      	adds	r6, #8
 8008fb4:	e7ae      	b.n	8008f14 <_svfprintf_r+0xc08>
 8008fb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fb8:	07c2      	lsls	r2, r0, #31
 8008fba:	f53f ae66 	bmi.w	8008c8a <_svfprintf_r+0x97e>
 8008fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fc0:	3401      	adds	r4, #1
 8008fc2:	3501      	adds	r5, #1
 8008fc4:	6033      	str	r3, [r6, #0]
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	2c07      	cmp	r4, #7
 8008fca:	6073      	str	r3, [r6, #4]
 8008fcc:	953f      	str	r5, [sp, #252]	; 0xfc
 8008fce:	943e      	str	r4, [sp, #248]	; 0xf8
 8008fd0:	f77f ae88 	ble.w	8008ce4 <_svfprintf_r+0x9d8>
 8008fd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	aa3d      	add	r2, sp, #244	; 0xf4
 8008fda:	f003 fb51 	bl	800c680 <__ssprint_r>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f47f aa92 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008fe4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008fe6:	ae23      	add	r6, sp, #140	; 0x8c
 8008fe8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008fea:	e67c      	b.n	8008ce6 <_svfprintf_r+0x9da>
 8008fec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008fee:	4659      	mov	r1, fp
 8008ff0:	aa3d      	add	r2, sp, #244	; 0xf4
 8008ff2:	f003 fb45 	bl	800c680 <__ssprint_r>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f47f aa86 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8008ffc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008ffe:	ae23      	add	r6, sp, #140	; 0x8c
 8009000:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009002:	e64e      	b.n	8008ca2 <_svfprintf_r+0x996>
 8009004:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009006:	4659      	mov	r1, fp
 8009008:	aa3d      	add	r2, sp, #244	; 0xf4
 800900a:	f003 fb39 	bl	800c680 <__ssprint_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	f47f aa7a 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8009014:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009016:	ae23      	add	r6, sp, #140	; 0x8c
 8009018:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800901a:	e64e      	b.n	8008cba <_svfprintf_r+0x9ae>
 800901c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800901e:	f10d 00f3 	add.w	r0, sp, #243	; 0xf3
 8009022:	fba5 1203 	umull	r1, r2, r5, r3
 8009026:	4601      	mov	r1, r0
 8009028:	3801      	subs	r0, #1
 800902a:	08d2      	lsrs	r2, r2, #3
 800902c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8009030:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 8009034:	4613      	mov	r3, r2
 8009036:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800903a:	700a      	strb	r2, [r1, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f0      	bne.n	8009022 <_svfprintf_r+0xd16>
 8009040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009042:	9113      	str	r1, [sp, #76]	; 0x4c
 8009044:	1a5b      	subs	r3, r3, r1
 8009046:	930e      	str	r3, [sp, #56]	; 0x38
 8009048:	f7ff bb1a 	b.w	8008680 <_svfprintf_r+0x374>
 800904c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800904e:	4659      	mov	r1, fp
 8009050:	aa3d      	add	r2, sp, #244	; 0xf4
 8009052:	f003 fb15 	bl	800c680 <__ssprint_r>
 8009056:	2800      	cmp	r0, #0
 8009058:	f47f aa56 	bne.w	8008508 <_svfprintf_r+0x1fc>
 800905c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800905e:	ae23      	add	r6, sp, #140	; 0x8c
 8009060:	e4a3      	b.n	80089aa <_svfprintf_r+0x69e>
 8009062:	2930      	cmp	r1, #48	; 0x30
 8009064:	f000 81fe 	beq.w	8009464 <_svfprintf_r+0x1158>
 8009068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906a:	1e95      	subs	r5, r2, #2
 800906c:	9513      	str	r5, [sp, #76]	; 0x4c
 800906e:	1b5b      	subs	r3, r3, r5
 8009070:	930e      	str	r3, [sp, #56]	; 0x38
 8009072:	2330      	movs	r3, #48	; 0x30
 8009074:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009078:	f7ff bb02 	b.w	8008680 <_svfprintf_r+0x374>
 800907c:	4639      	mov	r1, r7
 800907e:	f003 fa71 	bl	800c564 <__fpclassifyd>
 8009082:	2800      	cmp	r0, #0
 8009084:	f040 808e 	bne.w	80091a4 <_svfprintf_r+0xe98>
 8009088:	2503      	movs	r5, #3
 800908a:	950b      	str	r5, [sp, #44]	; 0x2c
 800908c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800908e:	4aa5      	ldr	r2, [pc, #660]	; (8009324 <_svfprintf_r+0x1018>)
 8009090:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8009094:	49a4      	ldr	r1, [pc, #656]	; (8009328 <_svfprintf_r+0x101c>)
 8009096:	950a      	str	r5, [sp, #40]	; 0x28
 8009098:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800909a:	9014      	str	r0, [sp, #80]	; 0x50
 800909c:	2d47      	cmp	r5, #71	; 0x47
 800909e:	bfd8      	it	le
 80090a0:	4611      	movle	r1, r2
 80090a2:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80090a6:	2503      	movs	r5, #3
 80090a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80090aa:	950e      	str	r5, [sp, #56]	; 0x38
 80090ac:	9018      	str	r0, [sp, #96]	; 0x60
 80090ae:	f7ff ba64 	b.w	800857a <_svfprintf_r+0x26e>
 80090b2:	46a0      	mov	r8, r4
 80090b4:	461c      	mov	r4, r3
 80090b6:	3401      	adds	r4, #1
 80090b8:	f8c6 8000 	str.w	r8, [r6]
 80090bc:	2c07      	cmp	r4, #7
 80090be:	6077      	str	r7, [r6, #4]
 80090c0:	443d      	add	r5, r7
 80090c2:	943e      	str	r4, [sp, #248]	; 0xf8
 80090c4:	953f      	str	r5, [sp, #252]	; 0xfc
 80090c6:	f73f af14 	bgt.w	8008ef2 <_svfprintf_r+0xbe6>
 80090ca:	3608      	adds	r6, #8
 80090cc:	e71b      	b.n	8008f06 <_svfprintf_r+0xbfa>
 80090ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090d0:	4659      	mov	r1, fp
 80090d2:	aa3d      	add	r2, sp, #244	; 0xf4
 80090d4:	f003 fad4 	bl	800c680 <__ssprint_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	f47f aa15 	bne.w	8008508 <_svfprintf_r+0x1fc>
 80090de:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80090e0:	ae23      	add	r6, sp, #140	; 0x8c
 80090e2:	e53d      	b.n	8008b60 <_svfprintf_r+0x854>
 80090e4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80090e6:	2301      	movs	r3, #1
 80090e8:	6073      	str	r3, [r6, #4]
 80090ea:	3501      	adds	r5, #1
 80090ec:	3401      	adds	r4, #1
 80090ee:	4b8f      	ldr	r3, [pc, #572]	; (800932c <_svfprintf_r+0x1020>)
 80090f0:	2c07      	cmp	r4, #7
 80090f2:	6033      	str	r3, [r6, #0]
 80090f4:	953f      	str	r5, [sp, #252]	; 0xfc
 80090f6:	943e      	str	r4, [sp, #248]	; 0xf8
 80090f8:	f300 8152 	bgt.w	80093a0 <_svfprintf_r+0x1094>
 80090fc:	3608      	adds	r6, #8
 80090fe:	b92f      	cbnz	r7, 800910c <_svfprintf_r+0xe00>
 8009100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009102:	b91b      	cbnz	r3, 800910c <_svfprintf_r+0xe00>
 8009104:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009106:	07c0      	lsls	r0, r0, #31
 8009108:	f57f aca6 	bpl.w	8008a58 <_svfprintf_r+0x74c>
 800910c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800910e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009110:	3401      	adds	r4, #1
 8009112:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009114:	2c07      	cmp	r4, #7
 8009116:	440d      	add	r5, r1
 8009118:	6071      	str	r1, [r6, #4]
 800911a:	6032      	str	r2, [r6, #0]
 800911c:	953f      	str	r5, [sp, #252]	; 0xfc
 800911e:	943e      	str	r4, [sp, #248]	; 0xf8
 8009120:	f300 81fb 	bgt.w	800951a <_svfprintf_r+0x120e>
 8009124:	3608      	adds	r6, #8
 8009126:	427f      	negs	r7, r7
 8009128:	2f00      	cmp	r7, #0
 800912a:	f340 8169 	ble.w	8009400 <_svfprintf_r+0x10f4>
 800912e:	2f10      	cmp	r7, #16
 8009130:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8009330 <_svfprintf_r+0x1024>
 8009134:	f340 819e 	ble.w	8009474 <_svfprintf_r+0x1168>
 8009138:	4623      	mov	r3, r4
 800913a:	f04f 0910 	mov.w	r9, #16
 800913e:	4644      	mov	r4, r8
 8009140:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8009144:	e003      	b.n	800914e <_svfprintf_r+0xe42>
 8009146:	3f10      	subs	r7, #16
 8009148:	2f10      	cmp	r7, #16
 800914a:	f340 8191 	ble.w	8009470 <_svfprintf_r+0x1164>
 800914e:	3301      	adds	r3, #1
 8009150:	e886 0210 	stmia.w	r6, {r4, r9}
 8009154:	3510      	adds	r5, #16
 8009156:	3608      	adds	r6, #8
 8009158:	2b07      	cmp	r3, #7
 800915a:	933e      	str	r3, [sp, #248]	; 0xf8
 800915c:	953f      	str	r5, [sp, #252]	; 0xfc
 800915e:	ddf2      	ble.n	8009146 <_svfprintf_r+0xe3a>
 8009160:	4640      	mov	r0, r8
 8009162:	4659      	mov	r1, fp
 8009164:	aa3d      	add	r2, sp, #244	; 0xf4
 8009166:	f003 fa8b 	bl	800c680 <__ssprint_r>
 800916a:	2800      	cmp	r0, #0
 800916c:	f47f a9cc 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8009170:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009172:	ae23      	add	r6, sp, #140	; 0x8c
 8009174:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8009176:	e7e6      	b.n	8009146 <_svfprintf_r+0xe3a>
 8009178:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800917a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800917e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009180:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009182:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8009186:	9711      	str	r7, [sp, #68]	; 0x44
 8009188:	9518      	str	r5, [sp, #96]	; 0x60
 800918a:	f7ff b9f6 	b.w	800857a <_svfprintf_r+0x26e>
 800918e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009190:	4659      	mov	r1, fp
 8009192:	aa3d      	add	r2, sp, #244	; 0xf4
 8009194:	f003 fa74 	bl	800c680 <__ssprint_r>
 8009198:	2800      	cmp	r0, #0
 800919a:	f47f a9b5 	bne.w	8008508 <_svfprintf_r+0x1fc>
 800919e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80091a0:	ae23      	add	r6, sp, #140	; 0x8c
 80091a2:	e4f2      	b.n	8008b8a <_svfprintf_r+0x87e>
 80091a4:	1c61      	adds	r1, r4, #1
 80091a6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80091a8:	f000 8106 	beq.w	80093b8 <_svfprintf_r+0x10ac>
 80091ac:	f1a5 0967 	sub.w	r9, r5, #103	; 0x67
 80091b0:	f1d9 0300 	rsbs	r3, r9, #0
 80091b4:	eb43 0309 	adc.w	r3, r3, r9
 80091b8:	2d47      	cmp	r5, #71	; 0x47
 80091ba:	bf08      	it	eq
 80091bc:	f043 0301 	orreq.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 81a8 	beq.w	8009516 <_svfprintf_r+0x120a>
 80091c6:	2c00      	cmp	r4, #0
 80091c8:	f000 81c5 	beq.w	8009556 <_svfprintf_r+0x124a>
 80091cc:	2501      	movs	r5, #1
 80091ce:	950b      	str	r5, [sp, #44]	; 0x2c
 80091d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80091d2:	2f00      	cmp	r7, #0
 80091d4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 80091d8:	950a      	str	r5, [sp, #40]	; 0x28
 80091da:	f2c0 81ab 	blt.w	8009534 <_svfprintf_r+0x1228>
 80091de:	2500      	movs	r5, #0
 80091e0:	9514      	str	r5, [sp, #80]	; 0x50
 80091e2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80091e4:	46a1      	mov	r9, r4
 80091e6:	f1a5 0c66 	sub.w	ip, r5, #102	; 0x66
 80091ea:	f1dc 0500 	rsbs	r5, ip, #0
 80091ee:	eb45 050c 	adc.w	r5, r5, ip
 80091f2:	9515      	str	r5, [sp, #84]	; 0x54
 80091f4:	46ac      	mov	ip, r5
 80091f6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80091f8:	2303      	movs	r3, #3
 80091fa:	2d46      	cmp	r5, #70	; 0x46
 80091fc:	bf08      	it	eq
 80091fe:	f04c 0c01 	orreq.w	ip, ip, #1
 8009202:	f1bc 0f00 	cmp.w	ip, #0
 8009206:	d10f      	bne.n	8009228 <_svfprintf_r+0xf1c>
 8009208:	f1a5 0e65 	sub.w	lr, r5, #101	; 0x65
 800920c:	f1de 0300 	rsbs	r3, lr, #0
 8009210:	eb43 030e 	adc.w	r3, r3, lr
 8009214:	2d45      	cmp	r5, #69	; 0x45
 8009216:	bf08      	it	eq
 8009218:	f043 0301 	orreq.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 818e 	beq.w	800953e <_svfprintf_r+0x1232>
 8009222:	f104 0901 	add.w	r9, r4, #1
 8009226:	2302      	movs	r3, #2
 8009228:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800922c:	a944      	add	r1, sp, #272	; 0x110
 800922e:	970f      	str	r7, [sp, #60]	; 0x3c
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009234:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009238:	9102      	str	r1, [sp, #8]
 800923a:	a945      	add	r1, sp, #276	; 0x114
 800923c:	f8cd c01c 	str.w	ip, [sp, #28]
 8009240:	9103      	str	r1, [sp, #12]
 8009242:	a946      	add	r1, sp, #280	; 0x118
 8009244:	f8cd 9004 	str.w	r9, [sp, #4]
 8009248:	9104      	str	r1, [sp, #16]
 800924a:	f001 f95b 	bl	800a504 <_dtoa_r>
 800924e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009250:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009254:	f1b5 0367 	subs.w	r3, r5, #103	; 0x67
 8009258:	bf18      	it	ne
 800925a:	2301      	movne	r3, #1
 800925c:	2d47      	cmp	r5, #71	; 0x47
 800925e:	bf0c      	ite	eq
 8009260:	2300      	moveq	r3, #0
 8009262:	f003 0301 	andne.w	r3, r3, #1
 8009266:	9013      	str	r0, [sp, #76]	; 0x4c
 8009268:	b923      	cbnz	r3, 8009274 <_svfprintf_r+0xf68>
 800926a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800926c:	07ed      	lsls	r5, r5, #31
 800926e:	bf58      	it	pl
 8009270:	9d46      	ldrpl	r5, [sp, #280]	; 0x118
 8009272:	d515      	bpl.n	80092a0 <_svfprintf_r+0xf94>
 8009274:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009276:	eb00 0509 	add.w	r5, r0, r9
 800927a:	f1bc 0f00 	cmp.w	ip, #0
 800927e:	d005      	beq.n	800928c <_svfprintf_r+0xf80>
 8009280:	7803      	ldrb	r3, [r0, #0]
 8009282:	2b30      	cmp	r3, #48	; 0x30
 8009284:	f000 80a4 	beq.w	80093d0 <_svfprintf_r+0x10c4>
 8009288:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800928a:	18ed      	adds	r5, r5, r3
 800928c:	4640      	mov	r0, r8
 800928e:	2200      	movs	r2, #0
 8009290:	2300      	movs	r3, #0
 8009292:	4639      	mov	r1, r7
 8009294:	f004 fd4e 	bl	800dd34 <__aeabi_dcmpeq>
 8009298:	2800      	cmp	r0, #0
 800929a:	f000 8124 	beq.w	80094e6 <_svfprintf_r+0x11da>
 800929e:	9546      	str	r5, [sp, #280]	; 0x118
 80092a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80092a2:	1a6d      	subs	r5, r5, r1
 80092a4:	9512      	str	r5, [sp, #72]	; 0x48
 80092a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	f000 8106 	beq.w	80094ba <_svfprintf_r+0x11ae>
 80092ae:	9944      	ldr	r1, [sp, #272]	; 0x110
 80092b0:	1cc8      	adds	r0, r1, #3
 80092b2:	db02      	blt.n	80092ba <_svfprintf_r+0xfae>
 80092b4:	428c      	cmp	r4, r1
 80092b6:	f280 8107 	bge.w	80094c8 <_svfprintf_r+0x11bc>
 80092ba:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80092bc:	3d02      	subs	r5, #2
 80092be:	9517      	str	r5, [sp, #92]	; 0x5c
 80092c0:	3901      	subs	r1, #1
 80092c2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80092c4:	2900      	cmp	r1, #0
 80092c6:	9144      	str	r1, [sp, #272]	; 0x110
 80092c8:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
 80092cc:	f2c0 8175 	blt.w	80095ba <_svfprintf_r+0x12ae>
 80092d0:	232b      	movs	r3, #43	; 0x2b
 80092d2:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 80092d6:	2909      	cmp	r1, #9
 80092d8:	f340 8134 	ble.w	8009544 <_svfprintf_r+0x1238>
 80092dc:	ad43      	add	r5, sp, #268	; 0x10c
 80092de:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80092e0:	3503      	adds	r5, #3
 80092e2:	4628      	mov	r0, r5
 80092e4:	fb87 3201 	smull	r3, r2, r7, r1
 80092e8:	17cb      	asrs	r3, r1, #31
 80092ea:	4604      	mov	r4, r0
 80092ec:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80092f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80092f4:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 80092f8:	4619      	mov	r1, r3
 80092fa:	3230      	adds	r2, #48	; 0x30
 80092fc:	2b09      	cmp	r3, #9
 80092fe:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8009302:	dcef      	bgt.n	80092e4 <_svfprintf_r+0xfd8>
 8009304:	3130      	adds	r1, #48	; 0x30
 8009306:	4622      	mov	r2, r4
 8009308:	b2c9      	uxtb	r1, r1
 800930a:	f802 1d02 	strb.w	r1, [r2, #-2]!
 800930e:	4295      	cmp	r5, r2
 8009310:	bf98      	it	ls
 8009312:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 8009316:	d914      	bls.n	8009342 <_svfprintf_r+0x1036>
 8009318:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 800931c:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 8009320:	e00a      	b.n	8009338 <_svfprintf_r+0x102c>
 8009322:	bf00      	nop
 8009324:	0801e86c 	.word	0x0801e86c
 8009328:	0801e870 	.word	0x0801e870
 800932c:	0801e8a4 	.word	0x0801e8a4
 8009330:	0801a774 	.word	0x0801a774
 8009334:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009338:	4282      	cmp	r2, r0
 800933a:	f803 1b01 	strb.w	r1, [r3], #1
 800933e:	4619      	mov	r1, r3
 8009340:	d1f8      	bne.n	8009334 <_svfprintf_r+0x1028>
 8009342:	ab40      	add	r3, sp, #256	; 0x100
 8009344:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009346:	1acb      	subs	r3, r1, r3
 8009348:	931f      	str	r3, [sp, #124]	; 0x7c
 800934a:	195d      	adds	r5, r3, r5
 800934c:	950e      	str	r5, [sp, #56]	; 0x38
 800934e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009350:	2d01      	cmp	r5, #1
 8009352:	f340 8127 	ble.w	80095a4 <_svfprintf_r+0x1298>
 8009356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009358:	2500      	movs	r5, #0
 800935a:	9518      	str	r5, [sp, #96]	; 0x60
 800935c:	3301      	adds	r3, #1
 800935e:	930e      	str	r3, [sp, #56]	; 0x38
 8009360:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8009364:	950b      	str	r5, [sp, #44]	; 0x2c
 8009366:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009368:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800936c:	2d00      	cmp	r5, #0
 800936e:	f43f a904 	beq.w	800857a <_svfprintf_r+0x26e>
 8009372:	2300      	movs	r3, #0
 8009374:	9314      	str	r3, [sp, #80]	; 0x50
 8009376:	232d      	movs	r3, #45	; 0x2d
 8009378:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800937c:	f7ff b8fe 	b.w	800857c <_svfprintf_r+0x270>
 8009380:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009382:	2140      	movs	r1, #64	; 0x40
 8009384:	f7fd fe38 	bl	8006ff8 <_malloc_r>
 8009388:	f8cb 0000 	str.w	r0, [fp]
 800938c:	f8cb 0010 	str.w	r0, [fp, #16]
 8009390:	2800      	cmp	r0, #0
 8009392:	f000 8136 	beq.w	8009602 <_svfprintf_r+0x12f6>
 8009396:	2340      	movs	r3, #64	; 0x40
 8009398:	f8cb 3014 	str.w	r3, [fp, #20]
 800939c:	f7fe bfd1 	b.w	8008342 <_svfprintf_r+0x36>
 80093a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093a2:	4659      	mov	r1, fp
 80093a4:	aa3d      	add	r2, sp, #244	; 0xf4
 80093a6:	f003 f96b 	bl	800c680 <__ssprint_r>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f47f a8ac 	bne.w	8008508 <_svfprintf_r+0x1fc>
 80093b0:	9f44      	ldr	r7, [sp, #272]	; 0x110
 80093b2:	ae23      	add	r6, sp, #140	; 0x8c
 80093b4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80093b6:	e6a2      	b.n	80090fe <_svfprintf_r+0xdf2>
 80093b8:	f1a5 0247 	sub.w	r2, r5, #71	; 0x47
 80093bc:	4253      	negs	r3, r2
 80093be:	eb43 0302 	adc.w	r3, r3, r2
 80093c2:	2406      	movs	r4, #6
 80093c4:	2d67      	cmp	r5, #103	; 0x67
 80093c6:	bf08      	it	eq
 80093c8:	f043 0301 	orreq.w	r3, r3, #1
 80093cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ce:	e6ff      	b.n	80091d0 <_svfprintf_r+0xec4>
 80093d0:	4640      	mov	r0, r8
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	4639      	mov	r1, r7
 80093d8:	f004 fcac 	bl	800dd34 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	f47f af53 	bne.w	8009288 <_svfprintf_r+0xf7c>
 80093e2:	f1c9 0301 	rsb	r3, r9, #1
 80093e6:	9344      	str	r3, [sp, #272]	; 0x110
 80093e8:	e74f      	b.n	800928a <_svfprintf_r+0xf7e>
 80093ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093ec:	4659      	mov	r1, fp
 80093ee:	aa3d      	add	r2, sp, #244	; 0xf4
 80093f0:	f003 f946 	bl	800c680 <__ssprint_r>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f47f a887 	bne.w	8008508 <_svfprintf_r+0x1fc>
 80093fa:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80093fc:	ae23      	add	r6, sp, #140	; 0x8c
 80093fe:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009400:	3401      	adds	r4, #1
 8009402:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009406:	2c07      	cmp	r4, #7
 8009408:	4405      	add	r5, r0
 800940a:	6070      	str	r0, [r6, #4]
 800940c:	6033      	str	r3, [r6, #0]
 800940e:	943e      	str	r4, [sp, #248]	; 0xf8
 8009410:	953f      	str	r5, [sp, #252]	; 0xfc
 8009412:	f77f ab20 	ble.w	8008a56 <_svfprintf_r+0x74a>
 8009416:	f7ff bb7e 	b.w	8008b16 <_svfprintf_r+0x80a>
 800941a:	9514      	str	r5, [sp, #80]	; 0x50
 800941c:	f7fe feba 	bl	8008194 <strlen>
 8009420:	900e      	str	r0, [sp, #56]	; 0x38
 8009422:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8009426:	e6aa      	b.n	800917e <_svfprintf_r+0xe72>
 8009428:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800942a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8009618 <_svfprintf_r+0x130c>
 800942e:	f7ff b8e5 	b.w	80085fc <_svfprintf_r+0x2f0>
 8009432:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009434:	4659      	mov	r1, fp
 8009436:	aa3d      	add	r2, sp, #244	; 0xf4
 8009438:	f003 f922 	bl	800c680 <__ssprint_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	f47f a863 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8009442:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009444:	ae23      	add	r6, sp, #140	; 0x8c
 8009446:	e4cb      	b.n	8008de0 <_svfprintf_r+0xad4>
 8009448:	9810      	ldr	r0, [sp, #64]	; 0x40
 800944a:	4659      	mov	r1, fp
 800944c:	aa3d      	add	r2, sp, #244	; 0xf4
 800944e:	f003 f917 	bl	800c680 <__ssprint_r>
 8009452:	2800      	cmp	r0, #0
 8009454:	f47f a858 	bne.w	8008508 <_svfprintf_r+0x1fc>
 8009458:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800945a:	ae23      	add	r6, sp, #140	; 0x8c
 800945c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800945e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	e56e      	b.n	8008f42 <_svfprintf_r+0xc36>
 8009464:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009466:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009468:	1a2d      	subs	r5, r5, r0
 800946a:	950e      	str	r5, [sp, #56]	; 0x38
 800946c:	f7ff b908 	b.w	8008680 <_svfprintf_r+0x374>
 8009470:	46a0      	mov	r8, r4
 8009472:	461c      	mov	r4, r3
 8009474:	3401      	adds	r4, #1
 8009476:	f8c6 8000 	str.w	r8, [r6]
 800947a:	2c07      	cmp	r4, #7
 800947c:	6077      	str	r7, [r6, #4]
 800947e:	443d      	add	r5, r7
 8009480:	943e      	str	r4, [sp, #248]	; 0xf8
 8009482:	953f      	str	r5, [sp, #252]	; 0xfc
 8009484:	dcb1      	bgt.n	80093ea <_svfprintf_r+0x10de>
 8009486:	3608      	adds	r6, #8
 8009488:	e7ba      	b.n	8009400 <_svfprintf_r+0x10f4>
 800948a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800948c:	4659      	mov	r1, fp
 800948e:	aa3d      	add	r2, sp, #244	; 0xf4
 8009490:	f003 f8f6 	bl	800c680 <__ssprint_r>
 8009494:	2800      	cmp	r0, #0
 8009496:	f47f a837 	bne.w	8008508 <_svfprintf_r+0x1fc>
 800949a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800949c:	ae23      	add	r6, sp, #140	; 0x8c
 800949e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80094a0:	e538      	b.n	8008f14 <_svfprintf_r+0xc08>
 80094a2:	2c06      	cmp	r4, #6
 80094a4:	bf28      	it	cs
 80094a6:	2406      	movcs	r4, #6
 80094a8:	9711      	str	r7, [sp, #68]	; 0x44
 80094aa:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80094ae:	950b      	str	r5, [sp, #44]	; 0x2c
 80094b0:	4d58      	ldr	r5, [pc, #352]	; (8009614 <_svfprintf_r+0x1308>)
 80094b2:	940e      	str	r4, [sp, #56]	; 0x38
 80094b4:	9513      	str	r5, [sp, #76]	; 0x4c
 80094b6:	f7ff b8fc 	b.w	80086b2 <_svfprintf_r+0x3a6>
 80094ba:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80094bc:	2d65      	cmp	r5, #101	; 0x65
 80094be:	dd6f      	ble.n	80095a0 <_svfprintf_r+0x1294>
 80094c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80094c2:	9944      	ldr	r1, [sp, #272]	; 0x110
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	d15d      	bne.n	8009584 <_svfprintf_r+0x1278>
 80094c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80094ca:	428d      	cmp	r5, r1
 80094cc:	dc4a      	bgt.n	8009564 <_svfprintf_r+0x1258>
 80094ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80094d0:	07ed      	lsls	r5, r5, #31
 80094d2:	d54f      	bpl.n	8009574 <_svfprintf_r+0x1268>
 80094d4:	1c4b      	adds	r3, r1, #1
 80094d6:	2567      	movs	r5, #103	; 0x67
 80094d8:	930e      	str	r3, [sp, #56]	; 0x38
 80094da:	9517      	str	r5, [sp, #92]	; 0x5c
 80094dc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80094e0:	9118      	str	r1, [sp, #96]	; 0x60
 80094e2:	950b      	str	r5, [sp, #44]	; 0x2c
 80094e4:	e73f      	b.n	8009366 <_svfprintf_r+0x105a>
 80094e6:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80094e8:	429d      	cmp	r5, r3
 80094ea:	bf98      	it	ls
 80094ec:	461d      	movls	r5, r3
 80094ee:	f67f aed7 	bls.w	80092a0 <_svfprintf_r+0xf94>
 80094f2:	2230      	movs	r2, #48	; 0x30
 80094f4:	f803 2b01 	strb.w	r2, [r3], #1
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	9346      	str	r3, [sp, #280]	; 0x118
 80094fc:	d1fa      	bne.n	80094f4 <_svfprintf_r+0x11e8>
 80094fe:	e6cf      	b.n	80092a0 <_svfprintf_r+0xf94>
 8009500:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8009504:	9014      	str	r0, [sp, #80]	; 0x50
 8009506:	950b      	str	r5, [sp, #44]	; 0x2c
 8009508:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800950c:	9711      	str	r7, [sp, #68]	; 0x44
 800950e:	940e      	str	r4, [sp, #56]	; 0x38
 8009510:	9018      	str	r0, [sp, #96]	; 0x60
 8009512:	f7ff b832 	b.w	800857a <_svfprintf_r+0x26e>
 8009516:	930b      	str	r3, [sp, #44]	; 0x2c
 8009518:	e65a      	b.n	80091d0 <_svfprintf_r+0xec4>
 800951a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800951c:	4659      	mov	r1, fp
 800951e:	aa3d      	add	r2, sp, #244	; 0xf4
 8009520:	f003 f8ae 	bl	800c680 <__ssprint_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	f47e afef 	bne.w	8008508 <_svfprintf_r+0x1fc>
 800952a:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800952c:	ae23      	add	r6, sp, #140	; 0x8c
 800952e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009530:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009532:	e5f8      	b.n	8009126 <_svfprintf_r+0xe1a>
 8009534:	252d      	movs	r5, #45	; 0x2d
 8009536:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800953a:	9514      	str	r5, [sp, #80]	; 0x50
 800953c:	e651      	b.n	80091e2 <_svfprintf_r+0xed6>
 800953e:	46a1      	mov	r9, r4
 8009540:	2302      	movs	r3, #2
 8009542:	e671      	b.n	8009228 <_svfprintf_r+0xf1c>
 8009544:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8009548:	2330      	movs	r3, #48	; 0x30
 800954a:	a941      	add	r1, sp, #260	; 0x104
 800954c:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 8009550:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
 8009554:	e6f5      	b.n	8009342 <_svfprintf_r+0x1036>
 8009556:	2401      	movs	r4, #1
 8009558:	940b      	str	r4, [sp, #44]	; 0x2c
 800955a:	e639      	b.n	80091d0 <_svfprintf_r+0xec4>
 800955c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800961c <_svfprintf_r+0x1310>
 8009560:	f7ff bad0 	b.w	8008b04 <_svfprintf_r+0x7f8>
 8009564:	2900      	cmp	r1, #0
 8009566:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009568:	bfd4      	ite	le
 800956a:	f1c1 0302 	rsble	r3, r1, #2
 800956e:	2301      	movgt	r3, #1
 8009570:	195b      	adds	r3, r3, r5
 8009572:	e7b0      	b.n	80094d6 <_svfprintf_r+0x11ca>
 8009574:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8009578:	910e      	str	r1, [sp, #56]	; 0x38
 800957a:	950b      	str	r5, [sp, #44]	; 0x2c
 800957c:	2567      	movs	r5, #103	; 0x67
 800957e:	9118      	str	r1, [sp, #96]	; 0x60
 8009580:	9517      	str	r5, [sp, #92]	; 0x5c
 8009582:	e6f0      	b.n	8009366 <_svfprintf_r+0x105a>
 8009584:	2900      	cmp	r1, #0
 8009586:	dd27      	ble.n	80095d8 <_svfprintf_r+0x12cc>
 8009588:	b9e4      	cbnz	r4, 80095c4 <_svfprintf_r+0x12b8>
 800958a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800958c:	07ea      	lsls	r2, r5, #31
 800958e:	d419      	bmi.n	80095c4 <_svfprintf_r+0x12b8>
 8009590:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8009594:	910e      	str	r1, [sp, #56]	; 0x38
 8009596:	950b      	str	r5, [sp, #44]	; 0x2c
 8009598:	2566      	movs	r5, #102	; 0x66
 800959a:	9118      	str	r1, [sp, #96]	; 0x60
 800959c:	9517      	str	r5, [sp, #92]	; 0x5c
 800959e:	e6e2      	b.n	8009366 <_svfprintf_r+0x105a>
 80095a0:	9944      	ldr	r1, [sp, #272]	; 0x110
 80095a2:	e68d      	b.n	80092c0 <_svfprintf_r+0xfb4>
 80095a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095a6:	f015 0301 	ands.w	r3, r5, #1
 80095aa:	f47f aed4 	bne.w	8009356 <_svfprintf_r+0x104a>
 80095ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80095b0:	9318      	str	r3, [sp, #96]	; 0x60
 80095b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80095b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80095b8:	e6d5      	b.n	8009366 <_svfprintf_r+0x105a>
 80095ba:	232d      	movs	r3, #45	; 0x2d
 80095bc:	4249      	negs	r1, r1
 80095be:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 80095c2:	e688      	b.n	80092d6 <_svfprintf_r+0xfca>
 80095c4:	3401      	adds	r4, #1
 80095c6:	2566      	movs	r5, #102	; 0x66
 80095c8:	190c      	adds	r4, r1, r4
 80095ca:	9517      	str	r5, [sp, #92]	; 0x5c
 80095cc:	940e      	str	r4, [sp, #56]	; 0x38
 80095ce:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80095d2:	9118      	str	r1, [sp, #96]	; 0x60
 80095d4:	950b      	str	r5, [sp, #44]	; 0x2c
 80095d6:	e6c6      	b.n	8009366 <_svfprintf_r+0x105a>
 80095d8:	b914      	cbnz	r4, 80095e0 <_svfprintf_r+0x12d4>
 80095da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095dc:	07eb      	lsls	r3, r5, #31
 80095de:	d508      	bpl.n	80095f2 <_svfprintf_r+0x12e6>
 80095e0:	3402      	adds	r4, #2
 80095e2:	2566      	movs	r5, #102	; 0x66
 80095e4:	940e      	str	r4, [sp, #56]	; 0x38
 80095e6:	9517      	str	r5, [sp, #92]	; 0x5c
 80095e8:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80095ec:	9118      	str	r1, [sp, #96]	; 0x60
 80095ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80095f0:	e6b9      	b.n	8009366 <_svfprintf_r+0x105a>
 80095f2:	2501      	movs	r5, #1
 80095f4:	9118      	str	r1, [sp, #96]	; 0x60
 80095f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80095f8:	2566      	movs	r5, #102	; 0x66
 80095fa:	9517      	str	r5, [sp, #92]	; 0x5c
 80095fc:	2501      	movs	r5, #1
 80095fe:	950e      	str	r5, [sp, #56]	; 0x38
 8009600:	e6b1      	b.n	8009366 <_svfprintf_r+0x105a>
 8009602:	f04f 35ff 	mov.w	r5, #4294967295
 8009606:	950d      	str	r5, [sp, #52]	; 0x34
 8009608:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800960a:	230c      	movs	r3, #12
 800960c:	602b      	str	r3, [r5, #0]
 800960e:	f7fe bf84 	b.w	800851a <_svfprintf_r+0x20e>
 8009612:	bf00      	nop
 8009614:	0801e89c 	.word	0x0801e89c
 8009618:	0801a764 	.word	0x0801a764
 800961c:	0801a774 	.word	0x0801a774

08009620 <write>:
 8009620:	b430      	push	{r4, r5}
 8009622:	f240 0408 	movw	r4, #8
 8009626:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800962a:	460d      	mov	r5, r1
 800962c:	4613      	mov	r3, r2
 800962e:	4601      	mov	r1, r0
 8009630:	462a      	mov	r2, r5
 8009632:	6820      	ldr	r0, [r4, #0]
 8009634:	bc30      	pop	{r4, r5}
 8009636:	f00e bd3d 	b.w	80180b4 <_write_r>
 800963a:	bf00      	nop

0800963c <__sprint_r>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	4680      	mov	r8, r0
 8009642:	6890      	ldr	r0, [r2, #8]
 8009644:	4691      	mov	r9, r2
 8009646:	460e      	mov	r6, r1
 8009648:	b348      	cbz	r0, 800969e <__sprint_r+0x62>
 800964a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800964c:	049a      	lsls	r2, r3, #18
 800964e:	d529      	bpl.n	80096a4 <__sprint_r+0x68>
 8009650:	f8d9 3000 	ldr.w	r3, [r9]
 8009654:	f103 0a08 	add.w	sl, r3, #8
 8009658:	e91a 00a0 	ldmdb	sl, {r5, r7}
 800965c:	08bf      	lsrs	r7, r7, #2
 800965e:	b1af      	cbz	r7, 800968c <__sprint_r+0x50>
 8009660:	2400      	movs	r4, #0
 8009662:	e001      	b.n	8009668 <__sprint_r+0x2c>
 8009664:	42a7      	cmp	r7, r4
 8009666:	d00f      	beq.n	8009688 <__sprint_r+0x4c>
 8009668:	f855 1b04 	ldr.w	r1, [r5], #4
 800966c:	4640      	mov	r0, r8
 800966e:	4632      	mov	r2, r6
 8009670:	3401      	adds	r4, #1
 8009672:	f002 f879 	bl	800b768 <_fputwc_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d1f4      	bne.n	8009664 <__sprint_r+0x28>
 800967a:	2300      	movs	r3, #0
 800967c:	f8c9 3008 	str.w	r3, [r9, #8]
 8009680:	f8c9 3004 	str.w	r3, [r9, #4]
 8009684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009688:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800968c:	eba0 0087 	sub.w	r0, r0, r7, lsl #2
 8009690:	f10a 0a08 	add.w	sl, sl, #8
 8009694:	f8c9 0008 	str.w	r0, [r9, #8]
 8009698:	2800      	cmp	r0, #0
 800969a:	d1dd      	bne.n	8009658 <__sprint_r+0x1c>
 800969c:	e7ed      	b.n	800967a <__sprint_r+0x3e>
 800969e:	6050      	str	r0, [r2, #4]
 80096a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a4:	4640      	mov	r0, r8
 80096a6:	464a      	mov	r2, r9
 80096a8:	f7fd fa8e 	bl	8006bc8 <__sfvwrite_r>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c9 3008 	str.w	r3, [r9, #8]
 80096b2:	f8c9 3004 	str.w	r3, [r9, #4]
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	bf00      	nop

080096bc <_vfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80096c4:	b081      	sub	sp, #4
 80096c6:	4683      	mov	fp, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	4617      	mov	r7, r2
 80096cc:	9307      	str	r3, [sp, #28]
 80096ce:	b118      	cbz	r0, 80096d8 <_vfiprintf_r+0x1c>
 80096d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f000 845b 	beq.w	8009f8e <_vfiprintf_r+0x8d2>
 80096d8:	89a5      	ldrh	r5, [r4, #12]
 80096da:	b2ab      	uxth	r3, r5
 80096dc:	0498      	lsls	r0, r3, #18
 80096de:	d407      	bmi.n	80096f0 <_vfiprintf_r+0x34>
 80096e0:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 80096e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096e6:	81a5      	strh	r5, [r4, #12]
 80096e8:	b2ab      	uxth	r3, r5
 80096ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096ee:	6662      	str	r2, [r4, #100]	; 0x64
 80096f0:	0719      	lsls	r1, r3, #28
 80096f2:	f140 83c3 	bpl.w	8009e7c <_vfiprintf_r+0x7c0>
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	f000 83bf 	beq.w	8009e7c <_vfiprintf_r+0x7c0>
 80096fe:	f003 031a 	and.w	r3, r3, #26
 8009702:	2b0a      	cmp	r3, #10
 8009704:	f000 83c8 	beq.w	8009e98 <_vfiprintf_r+0x7dc>
 8009708:	f50d 65a2 	add.w	r5, sp, #1296	; 0x510
 800970c:	9502      	str	r5, [sp, #8]
 800970e:	f50d 65a0 	add.w	r5, sp, #1280	; 0x500
 8009712:	f50d 6a95 	add.w	sl, sp, #1192	; 0x4a8
 8009716:	350f      	adds	r5, #15
 8009718:	9501      	str	r5, [sp, #4]
 800971a:	9802      	ldr	r0, [sp, #8]
 800971c:	4655      	mov	r5, sl
 800971e:	9901      	ldr	r1, [sp, #4]
 8009720:	46a1      	mov	r9, r4
 8009722:	f64c 42cd 	movw	r2, #52429	; 0xcccd
 8009726:	2300      	movs	r3, #0
 8009728:	1a40      	subs	r0, r0, r1
 800972a:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 800972e:	930d      	str	r3, [sp, #52]	; 0x34
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	900f      	str	r0, [sp, #60]	; 0x3c
 8009734:	920e      	str	r2, [sp, #56]	; 0x38
 8009736:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
 800973a:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
 800973e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009742:	783b      	ldrb	r3, [r7, #0]
 8009744:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8009748:	bf18      	it	ne
 800974a:	2201      	movne	r2, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2300      	moveq	r3, #0
 8009752:	f002 0301 	andne.w	r3, r2, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 8319 	beq.w	8009d8e <_vfiprintf_r+0x6d2>
 800975c:	463a      	mov	r2, r7
 800975e:	463c      	mov	r4, r7
 8009760:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009764:	3401      	adds	r4, #1
 8009766:	1c19      	adds	r1, r3, #0
 8009768:	bf18      	it	ne
 800976a:	2101      	movne	r1, #1
 800976c:	2b25      	cmp	r3, #37	; 0x25
 800976e:	bf0c      	ite	eq
 8009770:	2300      	moveq	r3, #0
 8009772:	f001 0301 	andne.w	r3, r1, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1f2      	bne.n	8009760 <_vfiprintf_r+0xa4>
 800977a:	1be6      	subs	r6, r4, r7
 800977c:	d012      	beq.n	80097a4 <_vfiprintf_r+0xe8>
 800977e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009782:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009786:	3301      	adds	r3, #1
 8009788:	602f      	str	r7, [r5, #0]
 800978a:	2b07      	cmp	r3, #7
 800978c:	4432      	add	r2, r6
 800978e:	606e      	str	r6, [r5, #4]
 8009790:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009794:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009798:	f300 83c1 	bgt.w	8009f1e <_vfiprintf_r+0x862>
 800979c:	3508      	adds	r5, #8
 800979e:	9b05      	ldr	r3, [sp, #20]
 80097a0:	199b      	adds	r3, r3, r6
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	7823      	ldrb	r3, [r4, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 84a8 	beq.w	800a0fc <_vfiprintf_r+0xa40>
 80097ac:	2300      	movs	r3, #0
 80097ae:	1c67      	adds	r7, r4, #1
 80097b0:	461a      	mov	r2, r3
 80097b2:	f04f 34ff 	mov.w	r4, #4294967295
 80097b6:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 80097ba:	9308      	str	r3, [sp, #32]
 80097bc:	9303      	str	r3, [sp, #12]
 80097be:	f817 3b01 	ldrb.w	r3, [r7], #1
 80097c2:	f1a3 0120 	sub.w	r1, r3, #32
 80097c6:	2958      	cmp	r1, #88	; 0x58
 80097c8:	f200 81dd 	bhi.w	8009b86 <_vfiprintf_r+0x4ca>
 80097cc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80097d0:	01db01d7 	.word	0x01db01d7
 80097d4:	01d201db 	.word	0x01d201db
 80097d8:	01db01db 	.word	0x01db01db
 80097dc:	01db01db 	.word	0x01db01db
 80097e0:	01db01db 	.word	0x01db01db
 80097e4:	020c00d8 	.word	0x020c00d8
 80097e8:	00e401db 	.word	0x00e401db
 80097ec:	01db01f1 	.word	0x01db01f1
 80097f0:	017b01ec 	.word	0x017b01ec
 80097f4:	017b017b 	.word	0x017b017b
 80097f8:	017b017b 	.word	0x017b017b
 80097fc:	017b017b 	.word	0x017b017b
 8009800:	017b017b 	.word	0x017b017b
 8009804:	01db01db 	.word	0x01db01db
 8009808:	01db01db 	.word	0x01db01db
 800980c:	01db01db 	.word	0x01db01db
 8009810:	01db01db 	.word	0x01db01db
 8009814:	01db01db 	.word	0x01db01db
 8009818:	01db005e 	.word	0x01db005e
 800981c:	01db01db 	.word	0x01db01db
 8009820:	01db01db 	.word	0x01db01db
 8009824:	01db01db 	.word	0x01db01db
 8009828:	01db01db 	.word	0x01db01db
 800982c:	00b001db 	.word	0x00b001db
 8009830:	01db01db 	.word	0x01db01db
 8009834:	01db01db 	.word	0x01db01db
 8009838:	00c601db 	.word	0x00c601db
 800983c:	01db01db 	.word	0x01db01db
 8009840:	01db014a 	.word	0x01db014a
 8009844:	01db01db 	.word	0x01db01db
 8009848:	01db01db 	.word	0x01db01db
 800984c:	01db01db 	.word	0x01db01db
 8009850:	01db01db 	.word	0x01db01db
 8009854:	00ee01db 	.word	0x00ee01db
 8009858:	01db0062 	.word	0x01db0062
 800985c:	01db01db 	.word	0x01db01db
 8009860:	006200e9 	.word	0x006200e9
 8009864:	01db01db 	.word	0x01db01db
 8009868:	01db0059 	.word	0x01db0059
 800986c:	00b4018c 	.word	0x00b4018c
 8009870:	00590166 	.word	0x00590166
 8009874:	01b401db 	.word	0x01b401db
 8009878:	00ca01db 	.word	0x00ca01db
 800987c:	01db01db 	.word	0x01db01db
 8009880:	019d      	.short	0x019d
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	f043 0310 	orr.w	r3, r3, #16
 8009888:	9303      	str	r3, [sp, #12]
 800988a:	e798      	b.n	80097be <_vfiprintf_r+0x102>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	f043 0310 	orr.w	r3, r3, #16
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800989a:	06d8      	lsls	r0, r3, #27
 800989c:	f140 83bf 	bpl.w	800a01e <_vfiprintf_r+0x962>
 80098a0:	9b07      	ldr	r3, [sp, #28]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	3304      	adds	r3, #4
 80098a6:	9307      	str	r3, [sp, #28]
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	f2c0 83c5 	blt.w	800a038 <_vfiprintf_r+0x97c>
 80098ae:	bf0c      	ite	eq
 80098b0:	2100      	moveq	r1, #0
 80098b2:	2101      	movne	r1, #1
 80098b4:	2301      	movs	r3, #1
 80098b6:	2c00      	cmp	r4, #0
 80098b8:	bfa2      	ittt	ge
 80098ba:	9803      	ldrge	r0, [sp, #12]
 80098bc:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 80098c0:	9003      	strge	r0, [sp, #12]
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	bf18      	it	ne
 80098c6:	f041 0101 	orrne.w	r1, r1, #1
 80098ca:	2900      	cmp	r1, #0
 80098cc:	f000 8261 	beq.w	8009d92 <_vfiprintf_r+0x6d6>
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	f000 8365 	beq.w	8009fa0 <_vfiprintf_r+0x8e4>
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	bf18      	it	ne
 80098da:	f50d 63a2 	addne.w	r3, sp, #1296	; 0x510
 80098de:	d101      	bne.n	80098e4 <_vfiprintf_r+0x228>
 80098e0:	e378      	b.n	8009fd4 <_vfiprintf_r+0x918>
 80098e2:	4603      	mov	r3, r0
 80098e4:	f002 0107 	and.w	r1, r2, #7
 80098e8:	1e58      	subs	r0, r3, #1
 80098ea:	3130      	adds	r1, #48	; 0x30
 80098ec:	08d2      	lsrs	r2, r2, #3
 80098ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098f2:	d1f6      	bne.n	80098e2 <_vfiprintf_r+0x226>
 80098f4:	9a03      	ldr	r2, [sp, #12]
 80098f6:	900a      	str	r0, [sp, #40]	; 0x28
 80098f8:	07d2      	lsls	r2, r2, #31
 80098fa:	f140 83d8 	bpl.w	800a0ae <_vfiprintf_r+0x9f2>
 80098fe:	2930      	cmp	r1, #48	; 0x30
 8009900:	f000 8425 	beq.w	800a14e <_vfiprintf_r+0xa92>
 8009904:	9a02      	ldr	r2, [sp, #8]
 8009906:	1e99      	subs	r1, r3, #2
 8009908:	910a      	str	r1, [sp, #40]	; 0x28
 800990a:	1a52      	subs	r2, r2, r1
 800990c:	9206      	str	r2, [sp, #24]
 800990e:	2230      	movs	r2, #48	; 0x30
 8009910:	f803 2c02 	strb.w	r2, [r3, #-2]
 8009914:	9409      	str	r4, [sp, #36]	; 0x24
 8009916:	9806      	ldr	r0, [sp, #24]
 8009918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800991a:	f89d 351f 	ldrb.w	r3, [sp, #1311]	; 0x51f
 800991e:	4288      	cmp	r0, r1
 8009920:	bfb8      	it	lt
 8009922:	4608      	movlt	r0, r1
 8009924:	9004      	str	r0, [sp, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d051      	beq.n	80099ce <_vfiprintf_r+0x312>
 800992a:	3001      	adds	r0, #1
 800992c:	9004      	str	r0, [sp, #16]
 800992e:	e04e      	b.n	80099ce <_vfiprintf_r+0x312>
 8009930:	9b03      	ldr	r3, [sp, #12]
 8009932:	f043 0310 	orr.w	r3, r3, #16
 8009936:	9303      	str	r3, [sp, #12]
 8009938:	9803      	ldr	r0, [sp, #12]
 800993a:	f010 0310 	ands.w	r3, r0, #16
 800993e:	f000 835a 	beq.w	8009ff6 <_vfiprintf_r+0x93a>
 8009942:	9b07      	ldr	r3, [sp, #28]
 8009944:	9807      	ldr	r0, [sp, #28]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	3004      	adds	r0, #4
 800994c:	9007      	str	r0, [sp, #28]
 800994e:	1ad1      	subs	r1, r2, r3
 8009950:	bf18      	it	ne
 8009952:	2101      	movne	r1, #1
 8009954:	2000      	movs	r0, #0
 8009956:	f88d 051f 	strb.w	r0, [sp, #1311]	; 0x51f
 800995a:	e7ac      	b.n	80098b6 <_vfiprintf_r+0x1fa>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	f043 0310 	orr.w	r3, r3, #16
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	06db      	lsls	r3, r3, #27
 8009968:	f140 8351 	bpl.w	800a00e <_vfiprintf_r+0x952>
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	2301      	movs	r3, #1
 8009972:	9807      	ldr	r0, [sp, #28]
 8009974:	3004      	adds	r0, #4
 8009976:	1c11      	adds	r1, r2, #0
 8009978:	9007      	str	r0, [sp, #28]
 800997a:	bf18      	it	ne
 800997c:	2101      	movne	r1, #1
 800997e:	e7e9      	b.n	8009954 <_vfiprintf_r+0x298>
 8009980:	9b07      	ldr	r3, [sp, #28]
 8009982:	9807      	ldr	r0, [sp, #28]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	1d03      	adds	r3, r0, #4
 800998a:	9908      	ldr	r1, [sp, #32]
 800998c:	2900      	cmp	r1, #0
 800998e:	f280 8375 	bge.w	800a07c <_vfiprintf_r+0x9c0>
 8009992:	4249      	negs	r1, r1
 8009994:	9307      	str	r3, [sp, #28]
 8009996:	9108      	str	r1, [sp, #32]
 8009998:	9b03      	ldr	r3, [sp, #12]
 800999a:	f043 0304 	orr.w	r3, r3, #4
 800999e:	9303      	str	r3, [sp, #12]
 80099a0:	e70d      	b.n	80097be <_vfiprintf_r+0x102>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a8:	9303      	str	r3, [sp, #12]
 80099aa:	e708      	b.n	80097be <_vfiprintf_r+0x102>
 80099ac:	9b07      	ldr	r3, [sp, #28]
 80099ae:	2001      	movs	r0, #1
 80099b0:	2200      	movs	r2, #0
 80099b2:	9004      	str	r0, [sp, #16]
 80099b4:	1d19      	adds	r1, r3, #4
 80099b6:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
 80099c0:	9107      	str	r1, [sp, #28]
 80099c2:	9006      	str	r0, [sp, #24]
 80099c4:	920a      	str	r2, [sp, #40]	; 0x28
 80099c6:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 80099ca:	2300      	movs	r3, #0
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	f013 0302 	ands.w	r3, r3, #2
 80099d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d6:	d002      	beq.n	80099de <_vfiprintf_r+0x322>
 80099d8:	9b04      	ldr	r3, [sp, #16]
 80099da:	3302      	adds	r3, #2
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80099e4:	930c      	str	r3, [sp, #48]	; 0x30
 80099e6:	f040 8101 	bne.w	8009bec <_vfiprintf_r+0x530>
 80099ea:	9b08      	ldr	r3, [sp, #32]
 80099ec:	9804      	ldr	r0, [sp, #16]
 80099ee:	1a1c      	subs	r4, r3, r0
 80099f0:	2c00      	cmp	r4, #0
 80099f2:	f340 80fb 	ble.w	8009bec <_vfiprintf_r+0x530>
 80099f6:	2c10      	cmp	r4, #16
 80099f8:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80099fc:	f340 83a3 	ble.w	800a146 <_vfiprintf_r+0xa8a>
 8009a00:	f04f 0810 	mov.w	r8, #16
 8009a04:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009a08:	4e95      	ldr	r6, [pc, #596]	; (8009c60 <_vfiprintf_r+0x5a4>)
 8009a0a:	e002      	b.n	8009a12 <_vfiprintf_r+0x356>
 8009a0c:	3c10      	subs	r4, #16
 8009a0e:	2c10      	cmp	r4, #16
 8009a10:	dd1b      	ble.n	8009a4a <_vfiprintf_r+0x38e>
 8009a12:	3301      	adds	r3, #1
 8009a14:	3210      	adds	r2, #16
 8009a16:	e885 0140 	stmia.w	r5, {r6, r8}
 8009a1a:	3508      	adds	r5, #8
 8009a1c:	2b07      	cmp	r3, #7
 8009a1e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009a22:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009a26:	ddf1      	ble.n	8009a0c <_vfiprintf_r+0x350>
 8009a28:	4658      	mov	r0, fp
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009a30:	4655      	mov	r5, sl
 8009a32:	f7ff fe03 	bl	800963c <__sprint_r>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f040 81c8 	bne.w	8009dcc <_vfiprintf_r+0x710>
 8009a3c:	3c10      	subs	r4, #16
 8009a3e:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009a42:	2c10      	cmp	r4, #16
 8009a44:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009a48:	dce3      	bgt.n	8009a12 <_vfiprintf_r+0x356>
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	1912      	adds	r2, r2, r4
 8009a4e:	2b07      	cmp	r3, #7
 8009a50:	602e      	str	r6, [r5, #0]
 8009a52:	606c      	str	r4, [r5, #4]
 8009a54:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009a58:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009a5c:	f300 82f5 	bgt.w	800a04a <_vfiprintf_r+0x98e>
 8009a60:	3508      	adds	r5, #8
 8009a62:	e0c7      	b.n	8009bf4 <_vfiprintf_r+0x538>
 8009a64:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009a68:	9a03      	ldr	r2, [sp, #12]
 8009a6a:	497e      	ldr	r1, [pc, #504]	; (8009c64 <_vfiprintf_r+0x5a8>)
 8009a6c:	06d0      	lsls	r0, r2, #27
 8009a6e:	910d      	str	r1, [sp, #52]	; 0x34
 8009a70:	d552      	bpl.n	8009b18 <_vfiprintf_r+0x45c>
 8009a72:	9807      	ldr	r0, [sp, #28]
 8009a74:	6802      	ldr	r2, [r0, #0]
 8009a76:	3004      	adds	r0, #4
 8009a78:	9007      	str	r0, [sp, #28]
 8009a7a:	1c11      	adds	r1, r2, #0
 8009a7c:	9803      	ldr	r0, [sp, #12]
 8009a7e:	bf18      	it	ne
 8009a80:	2101      	movne	r1, #1
 8009a82:	4208      	tst	r0, r1
 8009a84:	d056      	beq.n	8009b34 <_vfiprintf_r+0x478>
 8009a86:	f88d 351d 	strb.w	r3, [sp, #1309]	; 0x51d
 8009a8a:	f040 0002 	orr.w	r0, r0, #2
 8009a8e:	2330      	movs	r3, #48	; 0x30
 8009a90:	9003      	str	r0, [sp, #12]
 8009a92:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8009a96:	2101      	movs	r1, #1
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e75b      	b.n	8009954 <_vfiprintf_r+0x298>
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	4872      	ldr	r0, [pc, #456]	; (8009c68 <_vfiprintf_r+0x5ac>)
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	9107      	str	r1, [sp, #28]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	2178      	movs	r1, #120	; 0x78
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	f88d 151d 	strb.w	r1, [sp, #1309]	; 0x51d
 8009aae:	f043 0302 	orr.w	r3, r3, #2
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8009aba:	2302      	movs	r3, #2
 8009abc:	1c11      	adds	r1, r2, #0
 8009abe:	bf18      	it	ne
 8009ac0:	2101      	movne	r1, #1
 8009ac2:	900d      	str	r0, [sp, #52]	; 0x34
 8009ac4:	e746      	b.n	8009954 <_vfiprintf_r+0x298>
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	2100      	movs	r1, #0
 8009aca:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009ace:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ad2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009ad6:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009ada:	4607      	mov	r7, r0
 8009adc:	2e09      	cmp	r6, #9
 8009ade:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009ae2:	d9f2      	bls.n	8009aca <_vfiprintf_r+0x40e>
 8009ae4:	9108      	str	r1, [sp, #32]
 8009ae6:	e66c      	b.n	80097c2 <_vfiprintf_r+0x106>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009aee:	06d9      	lsls	r1, r3, #27
 8009af0:	f100 82e1 	bmi.w	800a0b6 <_vfiprintf_r+0x9fa>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	065a      	lsls	r2, r3, #25
 8009af8:	f140 830d 	bpl.w	800a116 <_vfiprintf_r+0xa5a>
 8009afc:	9807      	ldr	r0, [sp, #28]
 8009afe:	9905      	ldr	r1, [sp, #20]
 8009b00:	6803      	ldr	r3, [r0, #0]
 8009b02:	3004      	adds	r0, #4
 8009b04:	9007      	str	r0, [sp, #28]
 8009b06:	8019      	strh	r1, [r3, #0]
 8009b08:	e61b      	b.n	8009742 <_vfiprintf_r+0x86>
 8009b0a:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009b0e:	9a03      	ldr	r2, [sp, #12]
 8009b10:	4955      	ldr	r1, [pc, #340]	; (8009c68 <_vfiprintf_r+0x5ac>)
 8009b12:	06d0      	lsls	r0, r2, #27
 8009b14:	910d      	str	r1, [sp, #52]	; 0x34
 8009b16:	d4ac      	bmi.n	8009a72 <_vfiprintf_r+0x3b6>
 8009b18:	9903      	ldr	r1, [sp, #12]
 8009b1a:	0649      	lsls	r1, r1, #25
 8009b1c:	f140 82d6 	bpl.w	800a0cc <_vfiprintf_r+0xa10>
 8009b20:	9807      	ldr	r0, [sp, #28]
 8009b22:	8802      	ldrh	r2, [r0, #0]
 8009b24:	3004      	adds	r0, #4
 8009b26:	9007      	str	r0, [sp, #28]
 8009b28:	1c11      	adds	r1, r2, #0
 8009b2a:	9803      	ldr	r0, [sp, #12]
 8009b2c:	bf18      	it	ne
 8009b2e:	2101      	movne	r1, #1
 8009b30:	4208      	tst	r0, r1
 8009b32:	d1a8      	bne.n	8009a86 <_vfiprintf_r+0x3ca>
 8009b34:	2302      	movs	r3, #2
 8009b36:	e70d      	b.n	8009954 <_vfiprintf_r+0x298>
 8009b38:	9b07      	ldr	r3, [sp, #28]
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	f88d 651f 	strb.w	r6, [sp, #1311]	; 0x51f
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	9107      	str	r1, [sp, #28]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	930a      	str	r3, [sp, #40]	; 0x28
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 82f2 	beq.w	800a132 <_vfiprintf_r+0xa76>
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b52:	f2c0 82e8 	blt.w	800a126 <_vfiprintf_r+0xa6a>
 8009b56:	4631      	mov	r1, r6
 8009b58:	4622      	mov	r2, r4
 8009b5a:	f7fd fcff 	bl	800755c <memchr>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	f000 82fb 	beq.w	800a15a <_vfiprintf_r+0xa9e>
 8009b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b66:	9609      	str	r6, [sp, #36]	; 0x24
 8009b68:	1ac0      	subs	r0, r0, r3
 8009b6a:	9006      	str	r0, [sp, #24]
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	bfc8      	it	gt
 8009b70:	9406      	strgt	r4, [sp, #24]
 8009b72:	e6d0      	b.n	8009916 <_vfiprintf_r+0x25a>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	f043 0301 	orr.w	r3, r3, #1
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	e61f      	b.n	80097be <_vfiprintf_r+0x102>
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	bf08      	it	eq
 8009b82:	2220      	moveq	r2, #32
 8009b84:	e61b      	b.n	80097be <_vfiprintf_r+0x102>
 8009b86:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 82b6 	beq.w	800a0fc <_vfiprintf_r+0xa40>
 8009b90:	2001      	movs	r0, #1
 8009b92:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 8009b96:	9004      	str	r0, [sp, #16]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9006      	str	r0, [sp, #24]
 8009b9c:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 8009ba0:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8009ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ba6:	e710      	b.n	80099ca <_vfiprintf_r+0x30e>
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	e605      	b.n	80097be <_vfiprintf_r+0x102>
 8009bb2:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb8:	f000 8256 	beq.w	800a068 <_vfiprintf_r+0x9ac>
 8009bbc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009bc0:	2400      	movs	r4, #0
 8009bc2:	2909      	cmp	r1, #9
 8009bc4:	f63f adfd 	bhi.w	80097c2 <_vfiprintf_r+0x106>
 8009bc8:	4638      	mov	r0, r7
 8009bca:	2400      	movs	r4, #0
 8009bcc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009bd0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009bd4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8009bd8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009bdc:	2909      	cmp	r1, #9
 8009bde:	4607      	mov	r7, r0
 8009be0:	d9f4      	bls.n	8009bcc <_vfiprintf_r+0x510>
 8009be2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009be6:	e5ec      	b.n	80097c2 <_vfiprintf_r+0x106>
 8009be8:	222b      	movs	r2, #43	; 0x2b
 8009bea:	e5e8      	b.n	80097be <_vfiprintf_r+0x102>
 8009bec:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009bf0:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009bf4:	f89d 151f 	ldrb.w	r1, [sp, #1311]	; 0x51f
 8009bf8:	b179      	cbz	r1, 8009c1a <_vfiprintf_r+0x55e>
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8009c00:	310f      	adds	r1, #15
 8009c02:	6029      	str	r1, [r5, #0]
 8009c04:	2101      	movs	r1, #1
 8009c06:	2b07      	cmp	r3, #7
 8009c08:	440a      	add	r2, r1
 8009c0a:	6069      	str	r1, [r5, #4]
 8009c0c:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009c10:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009c14:	f300 819d 	bgt.w	8009f52 <_vfiprintf_r+0x896>
 8009c18:	3508      	adds	r5, #8
 8009c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c1c:	b179      	cbz	r1, 8009c3e <_vfiprintf_r+0x582>
 8009c1e:	3301      	adds	r3, #1
 8009c20:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8009c24:	310c      	adds	r1, #12
 8009c26:	6029      	str	r1, [r5, #0]
 8009c28:	2102      	movs	r1, #2
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	440a      	add	r2, r1
 8009c2e:	6069      	str	r1, [r5, #4]
 8009c30:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009c34:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009c38:	f300 819a 	bgt.w	8009f70 <_vfiprintf_r+0x8b4>
 8009c3c:	3508      	adds	r5, #8
 8009c3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c40:	2880      	cmp	r0, #128	; 0x80
 8009c42:	f000 80d2 	beq.w	8009dea <_vfiprintf_r+0x72e>
 8009c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c48:	9806      	ldr	r0, [sp, #24]
 8009c4a:	1a0c      	subs	r4, r1, r0
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	dd3a      	ble.n	8009cc6 <_vfiprintf_r+0x60a>
 8009c50:	2c10      	cmp	r4, #16
 8009c52:	4e06      	ldr	r6, [pc, #24]	; (8009c6c <_vfiprintf_r+0x5b0>)
 8009c54:	bfc8      	it	gt
 8009c56:	f04f 0810 	movgt.w	r8, #16
 8009c5a:	dc0c      	bgt.n	8009c76 <_vfiprintf_r+0x5ba>
 8009c5c:	e027      	b.n	8009cae <_vfiprintf_r+0x5f2>
 8009c5e:	bf00      	nop
 8009c60:	0801a784 	.word	0x0801a784
 8009c64:	0801e874 	.word	0x0801e874
 8009c68:	0801e888 	.word	0x0801e888
 8009c6c:	0801a794 	.word	0x0801a794
 8009c70:	3c10      	subs	r4, #16
 8009c72:	2c10      	cmp	r4, #16
 8009c74:	dd1b      	ble.n	8009cae <_vfiprintf_r+0x5f2>
 8009c76:	3301      	adds	r3, #1
 8009c78:	3210      	adds	r2, #16
 8009c7a:	e885 0140 	stmia.w	r5, {r6, r8}
 8009c7e:	3508      	adds	r5, #8
 8009c80:	2b07      	cmp	r3, #7
 8009c82:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009c86:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009c8a:	ddf1      	ble.n	8009c70 <_vfiprintf_r+0x5b4>
 8009c8c:	4658      	mov	r0, fp
 8009c8e:	4649      	mov	r1, r9
 8009c90:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009c94:	4655      	mov	r5, sl
 8009c96:	f7ff fcd1 	bl	800963c <__sprint_r>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	f040 8096 	bne.w	8009dcc <_vfiprintf_r+0x710>
 8009ca0:	3c10      	subs	r4, #16
 8009ca2:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009ca6:	2c10      	cmp	r4, #16
 8009ca8:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009cac:	dce3      	bgt.n	8009c76 <_vfiprintf_r+0x5ba>
 8009cae:	3301      	adds	r3, #1
 8009cb0:	1912      	adds	r2, r2, r4
 8009cb2:	2b07      	cmp	r3, #7
 8009cb4:	602e      	str	r6, [r5, #0]
 8009cb6:	606c      	str	r4, [r5, #4]
 8009cb8:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009cbc:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009cc0:	f300 8138 	bgt.w	8009f34 <_vfiprintf_r+0x878>
 8009cc4:	3508      	adds	r5, #8
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cca:	9806      	ldr	r0, [sp, #24]
 8009ccc:	2b07      	cmp	r3, #7
 8009cce:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009cd2:	6029      	str	r1, [r5, #0]
 8009cd4:	4402      	add	r2, r0
 8009cd6:	6068      	str	r0, [r5, #4]
 8009cd8:	bfd8      	it	le
 8009cda:	f105 0108 	addle.w	r1, r5, #8
 8009cde:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009ce2:	f300 80ba 	bgt.w	8009e5a <_vfiprintf_r+0x79e>
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	0758      	lsls	r0, r3, #29
 8009cea:	d536      	bpl.n	8009d5a <_vfiprintf_r+0x69e>
 8009cec:	9d08      	ldr	r5, [sp, #32]
 8009cee:	9b04      	ldr	r3, [sp, #16]
 8009cf0:	1aec      	subs	r4, r5, r3
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	dd31      	ble.n	8009d5a <_vfiprintf_r+0x69e>
 8009cf6:	2c10      	cmp	r4, #16
 8009cf8:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009cfc:	bfd8      	it	le
 8009cfe:	4ea6      	ldrle	r6, [pc, #664]	; (8009f98 <_vfiprintf_r+0x8dc>)
 8009d00:	dd20      	ble.n	8009d44 <_vfiprintf_r+0x688>
 8009d02:	2510      	movs	r5, #16
 8009d04:	4ea4      	ldr	r6, [pc, #656]	; (8009f98 <_vfiprintf_r+0x8dc>)
 8009d06:	e002      	b.n	8009d0e <_vfiprintf_r+0x652>
 8009d08:	3c10      	subs	r4, #16
 8009d0a:	2c10      	cmp	r4, #16
 8009d0c:	dd1a      	ble.n	8009d44 <_vfiprintf_r+0x688>
 8009d0e:	3301      	adds	r3, #1
 8009d10:	3210      	adds	r2, #16
 8009d12:	600e      	str	r6, [r1, #0]
 8009d14:	604d      	str	r5, [r1, #4]
 8009d16:	3108      	adds	r1, #8
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009d1e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009d22:	ddf1      	ble.n	8009d08 <_vfiprintf_r+0x64c>
 8009d24:	4658      	mov	r0, fp
 8009d26:	4649      	mov	r1, r9
 8009d28:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009d2c:	f7ff fc86 	bl	800963c <__sprint_r>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d14b      	bne.n	8009dcc <_vfiprintf_r+0x710>
 8009d34:	3c10      	subs	r4, #16
 8009d36:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009d3a:	2c10      	cmp	r4, #16
 8009d3c:	4651      	mov	r1, sl
 8009d3e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009d42:	dce4      	bgt.n	8009d0e <_vfiprintf_r+0x652>
 8009d44:	3301      	adds	r3, #1
 8009d46:	18a2      	adds	r2, r4, r2
 8009d48:	2b07      	cmp	r3, #7
 8009d4a:	600e      	str	r6, [r1, #0]
 8009d4c:	604c      	str	r4, [r1, #4]
 8009d4e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009d52:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009d56:	f300 8194 	bgt.w	800a082 <_vfiprintf_r+0x9c6>
 8009d5a:	9d05      	ldr	r5, [sp, #20]
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	9808      	ldr	r0, [sp, #32]
 8009d60:	4283      	cmp	r3, r0
 8009d62:	bfac      	ite	ge
 8009d64:	18ed      	addge	r5, r5, r3
 8009d66:	182d      	addlt	r5, r5, r0
 8009d68:	9505      	str	r5, [sp, #20]
 8009d6a:	bb3a      	cbnz	r2, 8009dbc <_vfiprintf_r+0x700>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009d72:	783b      	ldrb	r3, [r7, #0]
 8009d74:	4655      	mov	r5, sl
 8009d76:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8009d7a:	bf18      	it	ne
 8009d7c:	2201      	movne	r2, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bf0c      	ite	eq
 8009d82:	2300      	moveq	r3, #0
 8009d84:	f002 0301 	andne.w	r3, r2, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f47f ace7 	bne.w	800975c <_vfiprintf_r+0xa0>
 8009d8e:	463c      	mov	r4, r7
 8009d90:	e508      	b.n	80097a4 <_vfiprintf_r+0xe8>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d16d      	bne.n	8009e72 <_vfiprintf_r+0x7b6>
 8009d96:	9803      	ldr	r0, [sp, #12]
 8009d98:	07c2      	lsls	r2, r0, #31
 8009d9a:	bf5e      	ittt	pl
 8009d9c:	9306      	strpl	r3, [sp, #24]
 8009d9e:	f50d 63a2 	addpl.w	r3, sp, #1296	; 0x510
 8009da2:	930a      	strpl	r3, [sp, #40]	; 0x28
 8009da4:	f57f adb6 	bpl.w	8009914 <_vfiprintf_r+0x258>
 8009da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009daa:	9306      	str	r3, [sp, #24]
 8009dac:	2330      	movs	r3, #48	; 0x30
 8009dae:	f88d 350f 	strb.w	r3, [sp, #1295]	; 0x50f
 8009db2:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8009db6:	330f      	adds	r3, #15
 8009db8:	930a      	str	r3, [sp, #40]	; 0x28
 8009dba:	e5ab      	b.n	8009914 <_vfiprintf_r+0x258>
 8009dbc:	4658      	mov	r0, fp
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009dc4:	f7ff fc3a 	bl	800963c <__sprint_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d0cf      	beq.n	8009d6c <_vfiprintf_r+0x6b0>
 8009dcc:	464c      	mov	r4, r9
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009dd4:	9b05      	ldr	r3, [sp, #20]
 8009dd6:	bf18      	it	ne
 8009dd8:	f04f 33ff 	movne.w	r3, #4294967295
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	9805      	ldr	r0, [sp, #20]
 8009de0:	b049      	add	sp, #292	; 0x124
 8009de2:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8009de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dea:	9908      	ldr	r1, [sp, #32]
 8009dec:	9804      	ldr	r0, [sp, #16]
 8009dee:	1a0c      	subs	r4, r1, r0
 8009df0:	2c00      	cmp	r4, #0
 8009df2:	f77f af28 	ble.w	8009c46 <_vfiprintf_r+0x58a>
 8009df6:	2c10      	cmp	r4, #16
 8009df8:	4e68      	ldr	r6, [pc, #416]	; (8009f9c <_vfiprintf_r+0x8e0>)
 8009dfa:	bfc8      	it	gt
 8009dfc:	f04f 0810 	movgt.w	r8, #16
 8009e00:	dc03      	bgt.n	8009e0a <_vfiprintf_r+0x74e>
 8009e02:	e01d      	b.n	8009e40 <_vfiprintf_r+0x784>
 8009e04:	3c10      	subs	r4, #16
 8009e06:	2c10      	cmp	r4, #16
 8009e08:	dd1a      	ble.n	8009e40 <_vfiprintf_r+0x784>
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	3210      	adds	r2, #16
 8009e0e:	e885 0140 	stmia.w	r5, {r6, r8}
 8009e12:	3508      	adds	r5, #8
 8009e14:	2b07      	cmp	r3, #7
 8009e16:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009e1a:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009e1e:	ddf1      	ble.n	8009e04 <_vfiprintf_r+0x748>
 8009e20:	4658      	mov	r0, fp
 8009e22:	4649      	mov	r1, r9
 8009e24:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009e28:	4655      	mov	r5, sl
 8009e2a:	f7ff fc07 	bl	800963c <__sprint_r>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1cc      	bne.n	8009dcc <_vfiprintf_r+0x710>
 8009e32:	3c10      	subs	r4, #16
 8009e34:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009e38:	2c10      	cmp	r4, #16
 8009e3a:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009e3e:	dce4      	bgt.n	8009e0a <_vfiprintf_r+0x74e>
 8009e40:	3301      	adds	r3, #1
 8009e42:	1912      	adds	r2, r2, r4
 8009e44:	2b07      	cmp	r3, #7
 8009e46:	602e      	str	r6, [r5, #0]
 8009e48:	606c      	str	r4, [r5, #4]
 8009e4a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009e4e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009e52:	f300 8144 	bgt.w	800a0de <_vfiprintf_r+0xa22>
 8009e56:	3508      	adds	r5, #8
 8009e58:	e6f5      	b.n	8009c46 <_vfiprintf_r+0x58a>
 8009e5a:	4658      	mov	r0, fp
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009e62:	f7ff fbeb 	bl	800963c <__sprint_r>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d1b0      	bne.n	8009dcc <_vfiprintf_r+0x710>
 8009e6a:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009e6e:	4651      	mov	r1, sl
 8009e70:	e739      	b.n	8009ce6 <_vfiprintf_r+0x62a>
 8009e72:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8009e76:	9106      	str	r1, [sp, #24]
 8009e78:	930a      	str	r3, [sp, #40]	; 0x28
 8009e7a:	e54b      	b.n	8009914 <_vfiprintf_r+0x258>
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	4621      	mov	r1, r4
 8009e80:	f000 f9ea 	bl	800a258 <__swsetup_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f040 816c 	bne.w	800a162 <_vfiprintf_r+0xaa6>
 8009e8a:	89a5      	ldrh	r5, [r4, #12]
 8009e8c:	b2ab      	uxth	r3, r5
 8009e8e:	f003 031a 	and.w	r3, r3, #26
 8009e92:	2b0a      	cmp	r3, #10
 8009e94:	f47f ac38 	bne.w	8009708 <_vfiprintf_r+0x4c>
 8009e98:	89e6      	ldrh	r6, [r4, #14]
 8009e9a:	0432      	lsls	r2, r6, #16
 8009e9c:	f53f ac34 	bmi.w	8009708 <_vfiprintf_r+0x4c>
 8009ea0:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8009ea4:	463a      	mov	r2, r7
 8009ea6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8009eaa:	4658      	mov	r0, fp
 8009eac:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8009eb0:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	f025 0502 	bic.w	r5, r5, #2
 8009eba:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8009ebe:	f8ad 544c 	strh.w	r5, [sp, #1100]	; 0x44c
 8009ec2:	f8cd e4a4 	str.w	lr, [sp, #1188]	; 0x4a4
 8009ec6:	ad10      	add	r5, sp, #64	; 0x40
 8009ec8:	f8ad 644e 	strh.w	r6, [sp, #1102]	; 0x44e
 8009ecc:	f8cd 5440 	str.w	r5, [sp, #1088]	; 0x440
 8009ed0:	f8cd 5450 	str.w	r5, [sp, #1104]	; 0x450
 8009ed4:	2500      	movs	r5, #0
 8009ed6:	f8cd c45c 	str.w	ip, [sp, #1116]	; 0x45c
 8009eda:	f8cd 8464 	str.w	r8, [sp, #1124]	; 0x464
 8009ede:	f8cd 7448 	str.w	r7, [sp, #1096]	; 0x448
 8009ee2:	f8cd 7454 	str.w	r7, [sp, #1108]	; 0x454
 8009ee6:	f8cd 5458 	str.w	r5, [sp, #1112]	; 0x458
 8009eea:	f7ff fbe7 	bl	80096bc <_vfiprintf_r>
 8009eee:	42a8      	cmp	r0, r5
 8009ef0:	9005      	str	r0, [sp, #20]
 8009ef2:	db0a      	blt.n	8009f0a <_vfiprintf_r+0x84e>
 8009ef4:	4658      	mov	r0, fp
 8009ef6:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 8009efa:	f001 fa81 	bl	800b400 <_fflush_r>
 8009efe:	9b05      	ldr	r3, [sp, #20]
 8009f00:	42a8      	cmp	r0, r5
 8009f02:	bf18      	it	ne
 8009f04:	f04f 33ff 	movne.w	r3, #4294967295
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	f8bd 344c 	ldrh.w	r3, [sp, #1100]	; 0x44c
 8009f0e:	065b      	lsls	r3, r3, #25
 8009f10:	f57f af65 	bpl.w	8009dde <_vfiprintf_r+0x722>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	e75f      	b.n	8009dde <_vfiprintf_r+0x722>
 8009f1e:	4658      	mov	r0, fp
 8009f20:	4649      	mov	r1, r9
 8009f22:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f26:	f7ff fb89 	bl	800963c <__sprint_r>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f47f af4e 	bne.w	8009dcc <_vfiprintf_r+0x710>
 8009f30:	4655      	mov	r5, sl
 8009f32:	e434      	b.n	800979e <_vfiprintf_r+0xe2>
 8009f34:	4658      	mov	r0, fp
 8009f36:	4649      	mov	r1, r9
 8009f38:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f3c:	f7ff fb7e 	bl	800963c <__sprint_r>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f47f af43 	bne.w	8009dcc <_vfiprintf_r+0x710>
 8009f46:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009f4a:	4655      	mov	r5, sl
 8009f4c:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009f50:	e6b9      	b.n	8009cc6 <_vfiprintf_r+0x60a>
 8009f52:	4658      	mov	r0, fp
 8009f54:	4649      	mov	r1, r9
 8009f56:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f5a:	f7ff fb6f 	bl	800963c <__sprint_r>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f47f af34 	bne.w	8009dcc <_vfiprintf_r+0x710>
 8009f64:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009f68:	4655      	mov	r5, sl
 8009f6a:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009f6e:	e654      	b.n	8009c1a <_vfiprintf_r+0x55e>
 8009f70:	4658      	mov	r0, fp
 8009f72:	4649      	mov	r1, r9
 8009f74:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f78:	f7ff fb60 	bl	800963c <__sprint_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f47f af25 	bne.w	8009dcc <_vfiprintf_r+0x710>
 8009f82:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009f86:	4655      	mov	r5, sl
 8009f88:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009f8c:	e657      	b.n	8009c3e <_vfiprintf_r+0x582>
 8009f8e:	f001 fb59 	bl	800b644 <__sinit>
 8009f92:	f7ff bba1 	b.w	80096d8 <_vfiprintf_r+0x1c>
 8009f96:	bf00      	nop
 8009f98:	0801a784 	.word	0x0801a784
 8009f9c:	0801a794 	.word	0x0801a794
 8009fa0:	2a09      	cmp	r2, #9
 8009fa2:	d97a      	bls.n	800a09a <_vfiprintf_r+0x9de>
 8009fa4:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
 8009fa8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8009fac:	300f      	adds	r0, #15
 8009fae:	fbac 1302 	umull	r1, r3, ip, r2
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	3801      	subs	r0, #1
 8009fb6:	08db      	lsrs	r3, r3, #3
 8009fb8:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8009fbc:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	3630      	adds	r6, #48	; 0x30
 8009fc4:	700e      	strb	r6, [r1, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1f1      	bne.n	8009fae <_vfiprintf_r+0x8f2>
 8009fca:	9b02      	ldr	r3, [sp, #8]
 8009fcc:	910a      	str	r1, [sp, #40]	; 0x28
 8009fce:	1a5b      	subs	r3, r3, r1
 8009fd0:	9306      	str	r3, [sp, #24]
 8009fd2:	e49f      	b.n	8009914 <_vfiprintf_r+0x258>
 8009fd4:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8009fd8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009fda:	330f      	adds	r3, #15
 8009fdc:	f002 000f 	and.w	r0, r2, #15
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	0912      	lsrs	r2, r2, #4
 8009fe6:	5c30      	ldrb	r0, [r6, r0]
 8009fe8:	7008      	strb	r0, [r1, #0]
 8009fea:	d1f7      	bne.n	8009fdc <_vfiprintf_r+0x920>
 8009fec:	9b02      	ldr	r3, [sp, #8]
 8009fee:	910a      	str	r1, [sp, #40]	; 0x28
 8009ff0:	1a5b      	subs	r3, r3, r1
 8009ff2:	9306      	str	r3, [sp, #24]
 8009ff4:	e48e      	b.n	8009914 <_vfiprintf_r+0x258>
 8009ff6:	9a03      	ldr	r2, [sp, #12]
 8009ff8:	f012 0140 	ands.w	r1, r2, #64	; 0x40
 8009ffc:	d06b      	beq.n	800a0d6 <_vfiprintf_r+0xa1a>
 8009ffe:	9807      	ldr	r0, [sp, #28]
 800a000:	8802      	ldrh	r2, [r0, #0]
 800a002:	3004      	adds	r0, #4
 800a004:	9007      	str	r0, [sp, #28]
 800a006:	1c11      	adds	r1, r2, #0
 800a008:	bf18      	it	ne
 800a00a:	2101      	movne	r1, #1
 800a00c:	e4a2      	b.n	8009954 <_vfiprintf_r+0x298>
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	d056      	beq.n	800a0c6 <_vfiprintf_r+0xa0a>
 800a018:	881a      	ldrh	r2, [r3, #0]
 800a01a:	2301      	movs	r3, #1
 800a01c:	e4a9      	b.n	8009972 <_vfiprintf_r+0x2b6>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a024:	9b07      	ldr	r3, [sp, #28]
 800a026:	bf0c      	ite	eq
 800a028:	681a      	ldreq	r2, [r3, #0]
 800a02a:	f9b3 2000 	ldrshne.w	r2, [r3]
 800a02e:	3304      	adds	r3, #4
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	2a00      	cmp	r2, #0
 800a034:	f6bf ac3b 	bge.w	80098ae <_vfiprintf_r+0x1f2>
 800a038:	4252      	negs	r2, r2
 800a03a:	1c11      	adds	r1, r2, #0
 800a03c:	bf18      	it	ne
 800a03e:	2101      	movne	r1, #1
 800a040:	232d      	movs	r3, #45	; 0x2d
 800a042:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 800a046:	2301      	movs	r3, #1
 800a048:	e435      	b.n	80098b6 <_vfiprintf_r+0x1fa>
 800a04a:	4658      	mov	r0, fp
 800a04c:	4649      	mov	r1, r9
 800a04e:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a052:	f7ff faf3 	bl	800963c <__sprint_r>
 800a056:	2800      	cmp	r0, #0
 800a058:	f47f aeb8 	bne.w	8009dcc <_vfiprintf_r+0x710>
 800a05c:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a060:	4655      	mov	r5, sl
 800a062:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a066:	e5c5      	b.n	8009bf4 <_vfiprintf_r+0x538>
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	681c      	ldr	r4, [r3, #0]
 800a06c:	3304      	adds	r3, #4
 800a06e:	2c00      	cmp	r4, #0
 800a070:	bfbc      	itt	lt
 800a072:	9307      	strlt	r3, [sp, #28]
 800a074:	f04f 34ff 	movlt.w	r4, #4294967295
 800a078:	f6ff aba1 	blt.w	80097be <_vfiprintf_r+0x102>
 800a07c:	9307      	str	r3, [sp, #28]
 800a07e:	f7ff bb9e 	b.w	80097be <_vfiprintf_r+0x102>
 800a082:	4658      	mov	r0, fp
 800a084:	4649      	mov	r1, r9
 800a086:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a08a:	f7ff fad7 	bl	800963c <__sprint_r>
 800a08e:	2800      	cmp	r0, #0
 800a090:	f47f ae9c 	bne.w	8009dcc <_vfiprintf_r+0x710>
 800a094:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a098:	e65f      	b.n	8009d5a <_vfiprintf_r+0x69e>
 800a09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09c:	3230      	adds	r2, #48	; 0x30
 800a09e:	f88d 250f 	strb.w	r2, [sp, #1295]	; 0x50f
 800a0a2:	9306      	str	r3, [sp, #24]
 800a0a4:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800a0a8:	330f      	adds	r3, #15
 800a0aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ac:	e432      	b.n	8009914 <_vfiprintf_r+0x258>
 800a0ae:	9b02      	ldr	r3, [sp, #8]
 800a0b0:	1a1b      	subs	r3, r3, r0
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	e42e      	b.n	8009914 <_vfiprintf_r+0x258>
 800a0b6:	9807      	ldr	r0, [sp, #28]
 800a0b8:	9905      	ldr	r1, [sp, #20]
 800a0ba:	6803      	ldr	r3, [r0, #0]
 800a0bc:	3004      	adds	r0, #4
 800a0be:	9007      	str	r0, [sp, #28]
 800a0c0:	6019      	str	r1, [r3, #0]
 800a0c2:	f7ff bb3e 	b.w	8009742 <_vfiprintf_r+0x86>
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e452      	b.n	8009972 <_vfiprintf_r+0x2b6>
 800a0cc:	9907      	ldr	r1, [sp, #28]
 800a0ce:	680a      	ldr	r2, [r1, #0]
 800a0d0:	3104      	adds	r1, #4
 800a0d2:	9107      	str	r1, [sp, #28]
 800a0d4:	e4d1      	b.n	8009a7a <_vfiprintf_r+0x3be>
 800a0d6:	9b07      	ldr	r3, [sp, #28]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	e449      	b.n	8009972 <_vfiprintf_r+0x2b6>
 800a0de:	4658      	mov	r0, fp
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a0e6:	f7ff faa9 	bl	800963c <__sprint_r>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	f47f ae6e 	bne.w	8009dcc <_vfiprintf_r+0x710>
 800a0f0:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a0f4:	4655      	mov	r5, sl
 800a0f6:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a0fa:	e5a4      	b.n	8009c46 <_vfiprintf_r+0x58a>
 800a0fc:	f8dd 3518 	ldr.w	r3, [sp, #1304]	; 0x518
 800a100:	464c      	mov	r4, r9
 800a102:	2b00      	cmp	r3, #0
 800a104:	f43f ae63 	beq.w	8009dce <_vfiprintf_r+0x712>
 800a108:	4658      	mov	r0, fp
 800a10a:	4649      	mov	r1, r9
 800a10c:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a110:	f7ff fa94 	bl	800963c <__sprint_r>
 800a114:	e65b      	b.n	8009dce <_vfiprintf_r+0x712>
 800a116:	9a07      	ldr	r2, [sp, #28]
 800a118:	9805      	ldr	r0, [sp, #20]
 800a11a:	6813      	ldr	r3, [r2, #0]
 800a11c:	3204      	adds	r2, #4
 800a11e:	9207      	str	r2, [sp, #28]
 800a120:	6018      	str	r0, [r3, #0]
 800a122:	f7ff bb0e 	b.w	8009742 <_vfiprintf_r+0x86>
 800a126:	9609      	str	r6, [sp, #36]	; 0x24
 800a128:	f7fe f834 	bl	8008194 <strlen>
 800a12c:	9006      	str	r0, [sp, #24]
 800a12e:	f7ff bbf2 	b.w	8009916 <_vfiprintf_r+0x25a>
 800a132:	4b0e      	ldr	r3, [pc, #56]	; (800a16c <_vfiprintf_r+0xab0>)
 800a134:	2c06      	cmp	r4, #6
 800a136:	bf28      	it	cs
 800a138:	2406      	movcs	r4, #6
 800a13a:	9406      	str	r4, [sp, #24]
 800a13c:	930a      	str	r3, [sp, #40]	; 0x28
 800a13e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	e441      	b.n	80099ca <_vfiprintf_r+0x30e>
 800a146:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a14a:	4e09      	ldr	r6, [pc, #36]	; (800a170 <_vfiprintf_r+0xab4>)
 800a14c:	e47d      	b.n	8009a4a <_vfiprintf_r+0x38e>
 800a14e:	9b02      	ldr	r3, [sp, #8]
 800a150:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a152:	1a1b      	subs	r3, r3, r0
 800a154:	9306      	str	r3, [sp, #24]
 800a156:	f7ff bbdd 	b.w	8009914 <_vfiprintf_r+0x258>
 800a15a:	9406      	str	r4, [sp, #24]
 800a15c:	9009      	str	r0, [sp, #36]	; 0x24
 800a15e:	f7ff bbda 	b.w	8009916 <_vfiprintf_r+0x25a>
 800a162:	f04f 35ff 	mov.w	r5, #4294967295
 800a166:	9505      	str	r5, [sp, #20]
 800a168:	e639      	b.n	8009dde <_vfiprintf_r+0x722>
 800a16a:	bf00      	nop
 800a16c:	0801e89c 	.word	0x0801e89c
 800a170:	0801a784 	.word	0x0801a784

0800a174 <vfiprintf>:
 800a174:	b430      	push	{r4, r5}
 800a176:	f240 0408 	movw	r4, #8
 800a17a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a17e:	460d      	mov	r5, r1
 800a180:	4613      	mov	r3, r2
 800a182:	4601      	mov	r1, r0
 800a184:	462a      	mov	r2, r5
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	bc30      	pop	{r4, r5}
 800a18a:	f7ff ba97 	b.w	80096bc <_vfiprintf_r>
 800a18e:	bf00      	nop

0800a190 <__swbuf_r>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	4604      	mov	r4, r0
 800a194:	460d      	mov	r5, r1
 800a196:	4616      	mov	r6, r2
 800a198:	b110      	cbz	r0, 800a1a0 <__swbuf_r+0x10>
 800a19a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d044      	beq.n	800a22a <__swbuf_r+0x9a>
 800a1a0:	89b2      	ldrh	r2, [r6, #12]
 800a1a2:	69b1      	ldr	r1, [r6, #24]
 800a1a4:	b293      	uxth	r3, r2
 800a1a6:	60b1      	str	r1, [r6, #8]
 800a1a8:	0719      	lsls	r1, r3, #28
 800a1aa:	d52d      	bpl.n	800a208 <__swbuf_r+0x78>
 800a1ac:	6931      	ldr	r1, [r6, #16]
 800a1ae:	2900      	cmp	r1, #0
 800a1b0:	d02a      	beq.n	800a208 <__swbuf_r+0x78>
 800a1b2:	049b      	lsls	r3, r3, #18
 800a1b4:	bf5e      	ittt	pl
 800a1b6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800a1ba:	81b2      	strhpl	r2, [r6, #12]
 800a1bc:	6e73      	ldrpl	r3, [r6, #100]	; 0x64
 800a1be:	6972      	ldr	r2, [r6, #20]
 800a1c0:	bf5c      	itt	pl
 800a1c2:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 800a1c6:	6673      	strpl	r3, [r6, #100]	; 0x64
 800a1c8:	6833      	ldr	r3, [r6, #0]
 800a1ca:	1a59      	subs	r1, r3, r1
 800a1cc:	4291      	cmp	r1, r2
 800a1ce:	da24      	bge.n	800a21a <__swbuf_r+0x8a>
 800a1d0:	3101      	adds	r1, #1
 800a1d2:	68b2      	ldr	r2, [r6, #8]
 800a1d4:	b2ed      	uxtb	r5, r5
 800a1d6:	3a01      	subs	r2, #1
 800a1d8:	60b2      	str	r2, [r6, #8]
 800a1da:	f803 5b01 	strb.w	r5, [r3], #1
 800a1de:	6972      	ldr	r2, [r6, #20]
 800a1e0:	6033      	str	r3, [r6, #0]
 800a1e2:	428a      	cmp	r2, r1
 800a1e4:	d006      	beq.n	800a1f4 <__swbuf_r+0x64>
 800a1e6:	89b3      	ldrh	r3, [r6, #12]
 800a1e8:	2d0a      	cmp	r5, #10
 800a1ea:	bf14      	ite	ne
 800a1ec:	2300      	movne	r3, #0
 800a1ee:	f003 0301 	andeq.w	r3, r3, #1
 800a1f2:	b13b      	cbz	r3, 800a204 <__swbuf_r+0x74>
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	f001 f902 	bl	800b400 <_fflush_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	bf18      	it	ne
 800a200:	f04f 35ff 	movne.w	r5, #4294967295
 800a204:	4628      	mov	r0, r5
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	4620      	mov	r0, r4
 800a20a:	4631      	mov	r1, r6
 800a20c:	f000 f824 	bl	800a258 <__swsetup_r>
 800a210:	b970      	cbnz	r0, 800a230 <__swbuf_r+0xa0>
 800a212:	89b2      	ldrh	r2, [r6, #12]
 800a214:	6931      	ldr	r1, [r6, #16]
 800a216:	b293      	uxth	r3, r2
 800a218:	e7cb      	b.n	800a1b2 <__swbuf_r+0x22>
 800a21a:	4620      	mov	r0, r4
 800a21c:	4631      	mov	r1, r6
 800a21e:	f001 f8ef 	bl	800b400 <_fflush_r>
 800a222:	b970      	cbnz	r0, 800a242 <__swbuf_r+0xb2>
 800a224:	6833      	ldr	r3, [r6, #0]
 800a226:	2101      	movs	r1, #1
 800a228:	e7d3      	b.n	800a1d2 <__swbuf_r+0x42>
 800a22a:	f001 fa0b 	bl	800b644 <__sinit>
 800a22e:	e7b7      	b.n	800a1a0 <__swbuf_r+0x10>
 800a230:	89b3      	ldrh	r3, [r6, #12]
 800a232:	f04f 35ff 	mov.w	r5, #4294967295
 800a236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a23a:	81b3      	strh	r3, [r6, #12]
 800a23c:	2309      	movs	r3, #9
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	e7e0      	b.n	800a204 <__swbuf_r+0x74>
 800a242:	f04f 35ff 	mov.w	r5, #4294967295
 800a246:	e7dd      	b.n	800a204 <__swbuf_r+0x74>

0800a248 <__swbuf>:
 800a248:	f240 0308 	movw	r3, #8
 800a24c:	460a      	mov	r2, r1
 800a24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a252:	4601      	mov	r1, r0
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	e79b      	b.n	800a190 <__swbuf_r>

0800a258 <__swsetup_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4605      	mov	r5, r0
 800a25c:	4b2b      	ldr	r3, [pc, #172]	; (800a30c <__swsetup_r+0xb4>)
 800a25e:	460c      	mov	r4, r1
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	b110      	cbz	r0, 800a26a <__swsetup_r+0x12>
 800a264:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a266:	2b00      	cmp	r3, #0
 800a268:	d03d      	beq.n	800a2e6 <__swsetup_r+0x8e>
 800a26a:	89a2      	ldrh	r2, [r4, #12]
 800a26c:	b293      	uxth	r3, r2
 800a26e:	0719      	lsls	r1, r3, #28
 800a270:	bf48      	it	mi
 800a272:	6921      	ldrmi	r1, [r4, #16]
 800a274:	d41d      	bmi.n	800a2b2 <__swsetup_r+0x5a>
 800a276:	06d8      	lsls	r0, r3, #27
 800a278:	d544      	bpl.n	800a304 <__swsetup_r+0xac>
 800a27a:	0759      	lsls	r1, r3, #29
 800a27c:	bf58      	it	pl
 800a27e:	6921      	ldrpl	r1, [r4, #16]
 800a280:	d513      	bpl.n	800a2aa <__swsetup_r+0x52>
 800a282:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a284:	b149      	cbz	r1, 800a29a <__swsetup_r+0x42>
 800a286:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a28a:	4299      	cmp	r1, r3
 800a28c:	d003      	beq.n	800a296 <__swsetup_r+0x3e>
 800a28e:	4628      	mov	r0, r5
 800a290:	f001 fb3c 	bl	800b90c <_free_r>
 800a294:	89a2      	ldrh	r2, [r4, #12]
 800a296:	2300      	movs	r3, #0
 800a298:	6323      	str	r3, [r4, #48]	; 0x30
 800a29a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800a29e:	6921      	ldr	r1, [r4, #16]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	6063      	str	r3, [r4, #4]
 800a2a4:	0412      	lsls	r2, r2, #16
 800a2a6:	6021      	str	r1, [r4, #0]
 800a2a8:	0c12      	lsrs	r2, r2, #16
 800a2aa:	f042 0308 	orr.w	r3, r2, #8
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	b1d9      	cbz	r1, 800a2ec <__swsetup_r+0x94>
 800a2b4:	f013 0201 	ands.w	r2, r3, #1
 800a2b8:	d007      	beq.n	800a2ca <__swsetup_r+0x72>
 800a2ba:	6963      	ldr	r3, [r4, #20]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	60a2      	str	r2, [r4, #8]
 800a2c0:	425b      	negs	r3, r3
 800a2c2:	61a3      	str	r3, [r4, #24]
 800a2c4:	b139      	cbz	r1, 800a2d6 <__swsetup_r+0x7e>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	079b      	lsls	r3, r3, #30
 800a2cc:	bf58      	it	pl
 800a2ce:	6962      	ldrpl	r2, [r4, #20]
 800a2d0:	60a2      	str	r2, [r4, #8]
 800a2d2:	2900      	cmp	r1, #0
 800a2d4:	d1f7      	bne.n	800a2c6 <__swsetup_r+0x6e>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2dc:	bf14      	ite	ne
 800a2de:	f04f 30ff 	movne.w	r0, #4294967295
 800a2e2:	2000      	moveq	r0, #0
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
 800a2e6:	f001 f9ad 	bl	800b644 <__sinit>
 800a2ea:	e7be      	b.n	800a26a <__swsetup_r+0x12>
 800a2ec:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800a2f0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a2f4:	d0de      	beq.n	800a2b4 <__swsetup_r+0x5c>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f001 fc5d 	bl	800bbb8 <__smakebuf_r>
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	6921      	ldr	r1, [r4, #16]
 800a302:	e7d7      	b.n	800a2b4 <__swsetup_r+0x5c>
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	bd38      	pop	{r3, r4, r5, pc}
 800a30a:	bf00      	nop
 800a30c:	20000008 	.word	0x20000008

0800a310 <__register_exitproc>:
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	4828      	ldr	r0, [pc, #160]	; (800a3b8 <__register_exitproc+0xa8>)
 800a318:	b084      	sub	sp, #16
 800a31a:	6805      	ldr	r5, [r0, #0]
 800a31c:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800a320:	2e00      	cmp	r6, #0
 800a322:	d044      	beq.n	800a3ae <__register_exitproc+0x9e>
 800a324:	6870      	ldr	r0, [r6, #4]
 800a326:	281f      	cmp	r0, #31
 800a328:	dd1e      	ble.n	800a368 <__register_exitproc+0x58>
 800a32a:	4824      	ldr	r0, [pc, #144]	; (800a3bc <__register_exitproc+0xac>)
 800a32c:	b910      	cbnz	r0, 800a334 <__register_exitproc+0x24>
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
 800a332:	e020      	b.n	800a376 <__register_exitproc+0x66>
 800a334:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a338:	9103      	str	r1, [sp, #12]
 800a33a:	9202      	str	r2, [sp, #8]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f7fc fe4b 	bl	8006fd8 <malloc>
 800a342:	9903      	ldr	r1, [sp, #12]
 800a344:	9a02      	ldr	r2, [sp, #8]
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	4606      	mov	r6, r0
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d0ef      	beq.n	800a32e <__register_exitproc+0x1e>
 800a34e:	f8d5 c148 	ldr.w	ip, [r5, #328]	; 0x148
 800a352:	2700      	movs	r7, #0
 800a354:	4638      	mov	r0, r7
 800a356:	6077      	str	r7, [r6, #4]
 800a358:	f8c6 c000 	str.w	ip, [r6]
 800a35c:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800a360:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 800a364:	f8c6 718c 	str.w	r7, [r6, #396]	; 0x18c
 800a368:	b944      	cbnz	r4, 800a37c <__register_exitproc+0x6c>
 800a36a:	1c83      	adds	r3, r0, #2
 800a36c:	1c42      	adds	r2, r0, #1
 800a36e:	2000      	movs	r0, #0
 800a370:	6072      	str	r2, [r6, #4]
 800a372:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800a376:	b004      	add	sp, #16
 800a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37c:	2501      	movs	r5, #1
 800a37e:	eb06 0880 	add.w	r8, r6, r0, lsl #2
 800a382:	f8d6 c188 	ldr.w	ip, [r6, #392]	; 0x188
 800a386:	4647      	mov	r7, r8
 800a388:	4085      	lsls	r5, r0
 800a38a:	2c02      	cmp	r4, #2
 800a38c:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800a390:	bf08      	it	eq
 800a392:	f8d6 318c 	ldreq.w	r3, [r6, #396]	; 0x18c
 800a396:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800a39a:	ea4c 0205 	orr.w	r2, ip, r5
 800a39e:	bf08      	it	eq
 800a3a0:	431d      	orreq	r5, r3
 800a3a2:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
 800a3a6:	bf08      	it	eq
 800a3a8:	f8c6 518c 	streq.w	r5, [r6, #396]	; 0x18c
 800a3ac:	e7dd      	b.n	800a36a <__register_exitproc+0x5a>
 800a3ae:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800a3b2:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800a3b6:	e7b5      	b.n	800a324 <__register_exitproc+0x14>
 800a3b8:	0801a760 	.word	0x0801a760
 800a3bc:	08006fd9 	.word	0x08006fd9

0800a3c0 <quorem>:
 800a3c0:	6903      	ldr	r3, [r0, #16]
 800a3c2:	690a      	ldr	r2, [r1, #16]
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	4680      	mov	r8, r0
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	4689      	mov	r9, r1
 800a3d2:	9200      	str	r2, [sp, #0]
 800a3d4:	f300 8093 	bgt.w	800a4fe <quorem+0x13e>
 800a3d8:	3203      	adds	r2, #3
 800a3da:	9b00      	ldr	r3, [sp, #0]
 800a3dc:	f101 0514 	add.w	r5, r1, #20
 800a3e0:	0092      	lsls	r2, r2, #2
 800a3e2:	1e5c      	subs	r4, r3, #1
 800a3e4:	f108 0314 	add.w	r3, r8, #20
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	188b      	adds	r3, r1, r2
 800a3ec:	4442      	add	r2, r8
 800a3ee:	1d1f      	adds	r7, r3, #4
 800a3f0:	6859      	ldr	r1, [r3, #4]
 800a3f2:	6850      	ldr	r0, [r2, #4]
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	f002 ff3f 	bl	800d278 <__aeabi_uidiv>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d042      	beq.n	800a486 <quorem+0xc6>
 800a400:	2000      	movs	r0, #0
 800a402:	9a01      	ldr	r2, [sp, #4]
 800a404:	462b      	mov	r3, r5
 800a406:	4686      	mov	lr, r0
 800a408:	f853 cb04 	ldr.w	ip, [r3], #4
 800a40c:	6811      	ldr	r1, [r2, #0]
 800a40e:	fa1f fb8c 	uxth.w	fp, ip
 800a412:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a416:	fa1f fa81 	uxth.w	sl, r1
 800a41a:	fb06 0b0b 	mla	fp, r6, fp, r0
 800a41e:	44d6      	add	lr, sl
 800a420:	fb06 f00c 	mul.w	r0, r6, ip
 800a424:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 800a428:	fa1f fb8b 	uxth.w	fp, fp
 800a42c:	ebcb 0a0e 	rsb	sl, fp, lr
 800a430:	fa1f fe80 	uxth.w	lr, r0
 800a434:	0c00      	lsrs	r0, r0, #16
 800a436:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 800a43a:	429f      	cmp	r7, r3
 800a43c:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 800a440:	fa1f fc8a 	uxth.w	ip, sl
 800a444:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 800a448:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a44c:	f842 1b04 	str.w	r1, [r2], #4
 800a450:	d2da      	bcs.n	800a408 <quorem+0x48>
 800a452:	1d22      	adds	r2, r4, #4
 800a454:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800a458:	6859      	ldr	r1, [r3, #4]
 800a45a:	b9a1      	cbnz	r1, 800a486 <quorem+0xc6>
 800a45c:	9801      	ldr	r0, [sp, #4]
 800a45e:	4298      	cmp	r0, r3
 800a460:	d20f      	bcs.n	800a482 <quorem+0xc2>
 800a462:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a466:	b962      	cbnz	r2, 800a482 <quorem+0xc2>
 800a468:	9a00      	ldr	r2, [sp, #0]
 800a46a:	1e91      	subs	r1, r2, #2
 800a46c:	43c2      	mvns	r2, r0
 800a46e:	18d2      	adds	r2, r2, r3
 800a470:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 800a474:	e002      	b.n	800a47c <quorem+0xbc>
 800a476:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a47a:	b912      	cbnz	r2, 800a482 <quorem+0xc2>
 800a47c:	3c01      	subs	r4, #1
 800a47e:	428c      	cmp	r4, r1
 800a480:	d1f9      	bne.n	800a476 <quorem+0xb6>
 800a482:	f8c8 4010 	str.w	r4, [r8, #16]
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f001 fe61 	bl	800c150 <__mcmp>
 800a48e:	2800      	cmp	r0, #0
 800a490:	db34      	blt.n	800a4fc <quorem+0x13c>
 800a492:	9b01      	ldr	r3, [sp, #4]
 800a494:	3601      	adds	r6, #1
 800a496:	f04f 0c00 	mov.w	ip, #0
 800a49a:	f855 0b04 	ldr.w	r0, [r5], #4
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	fa1f f980 	uxth.w	r9, r0
 800a4a4:	0c00      	lsrs	r0, r0, #16
 800a4a6:	b28a      	uxth	r2, r1
 800a4a8:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 800a4ac:	ebc9 0202 	rsb	r2, r9, r2
 800a4b0:	42af      	cmp	r7, r5
 800a4b2:	4494      	add	ip, r2
 800a4b4:	eb01 422c 	add.w	r2, r1, ip, asr #16
 800a4b8:	fa1f fc8c 	uxth.w	ip, ip
 800a4bc:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 800a4c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4c4:	f843 1b04 	str.w	r1, [r3], #4
 800a4c8:	d2e7      	bcs.n	800a49a <quorem+0xda>
 800a4ca:	1d22      	adds	r2, r4, #4
 800a4cc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800a4d0:	6859      	ldr	r1, [r3, #4]
 800a4d2:	b999      	cbnz	r1, 800a4fc <quorem+0x13c>
 800a4d4:	9801      	ldr	r0, [sp, #4]
 800a4d6:	4298      	cmp	r0, r3
 800a4d8:	d20e      	bcs.n	800a4f8 <quorem+0x138>
 800a4da:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a4de:	b95a      	cbnz	r2, 800a4f8 <quorem+0x138>
 800a4e0:	43c1      	mvns	r1, r0
 800a4e2:	18c9      	adds	r1, r1, r3
 800a4e4:	f021 0103 	bic.w	r1, r1, #3
 800a4e8:	1a59      	subs	r1, r3, r1
 800a4ea:	e002      	b.n	800a4f2 <quorem+0x132>
 800a4ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4f0:	b912      	cbnz	r2, 800a4f8 <quorem+0x138>
 800a4f2:	3c01      	subs	r4, #1
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	d1f9      	bne.n	800a4ec <quorem+0x12c>
 800a4f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	b003      	add	sp, #12
 800a500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a504 <_dtoa_r>:
 800a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a508:	4681      	mov	r9, r0
 800a50a:	b09d      	sub	sp, #116	; 0x74
 800a50c:	4619      	mov	r1, r3
 800a50e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a512:	4610      	mov	r0, r2
 800a514:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800a516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51a:	b163      	cbz	r3, 800a536 <_dtoa_r+0x32>
 800a51c:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800a520:	2501      	movs	r5, #1
 800a522:	4619      	mov	r1, r3
 800a524:	4648      	mov	r0, r9
 800a526:	4095      	lsls	r5, r2
 800a528:	609d      	str	r5, [r3, #8]
 800a52a:	605a      	str	r2, [r3, #4]
 800a52c:	f001 fbdc 	bl	800bce8 <_Bfree>
 800a530:	2300      	movs	r3, #0
 800a532:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800a536:	9d03      	ldr	r5, [sp, #12]
 800a538:	2d00      	cmp	r5, #0
 800a53a:	f2c0 80e3 	blt.w	800a704 <_dtoa_r+0x200>
 800a53e:	2300      	movs	r3, #0
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	2300      	movs	r3, #0
 800a544:	461a      	mov	r2, r3
 800a546:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800a54a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800a54e:	402b      	ands	r3, r5
 800a550:	4293      	cmp	r3, r2
 800a552:	f000 80c3 	beq.w	800a6dc <_dtoa_r+0x1d8>
 800a556:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a55a:	2200      	movs	r2, #0
 800a55c:	2300      	movs	r3, #0
 800a55e:	2401      	movs	r4, #1
 800a560:	4630      	mov	r0, r6
 800a562:	4639      	mov	r1, r7
 800a564:	f003 fbe6 	bl	800dd34 <__aeabi_dcmpeq>
 800a568:	b978      	cbnz	r0, 800a58a <_dtoa_r+0x86>
 800a56a:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a56e:	d110      	bne.n	800a592 <_dtoa_r+0x8e>
 800a570:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800a572:	2301      	movs	r3, #1
 800a574:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	4d7b      	ldr	r5, [pc, #492]	; (800a768 <_dtoa_r+0x264>)
 800a57a:	b114      	cbz	r4, 800a582 <_dtoa_r+0x7e>
 800a57c:	4b7b      	ldr	r3, [pc, #492]	; (800a76c <_dtoa_r+0x268>)
 800a57e:	1e5d      	subs	r5, r3, #1
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	4628      	mov	r0, r5
 800a584:	b01d      	add	sp, #116	; 0x74
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	2400      	movs	r4, #0
 800a58c:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a590:	d0ee      	beq.n	800a570 <_dtoa_r+0x6c>
 800a592:	463b      	mov	r3, r7
 800a594:	4648      	mov	r0, r9
 800a596:	4632      	mov	r2, r6
 800a598:	a91b      	add	r1, sp, #108	; 0x6c
 800a59a:	9100      	str	r1, [sp, #0]
 800a59c:	a91a      	add	r1, sp, #104	; 0x68
 800a59e:	9101      	str	r1, [sp, #4]
 800a5a0:	f001 fee0 	bl	800c364 <__d2b>
 800a5a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a5a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f040 80b9 	bne.w	800a722 <_dtoa_r+0x21e>
 800a5b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a5b2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800a5b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a5b8:	19be      	adds	r6, r7, r6
 800a5ba:	429e      	cmp	r6, r3
 800a5bc:	f2c0 82a2 	blt.w	800ab04 <_dtoa_r+0x600>
 800a5c0:	9802      	ldr	r0, [sp, #8]
 800a5c2:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800a5c6:	f506 6282 	add.w	r2, r6, #1040	; 0x410
 800a5ca:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800a5ce:	3202      	adds	r2, #2
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	fa30 f202 	lsrs.w	r2, r0, r2
 800a5d6:	fa15 f303 	lsls.w	r3, r5, r3
 800a5da:	ea43 0002 	orr.w	r0, r3, r2
 800a5de:	f003 f8cb 	bl	800d778 <__aeabi_ui2d>
 800a5e2:	3e01      	subs	r6, #1
 800a5e4:	2401      	movs	r4, #1
 800a5e6:	9417      	str	r4, [sp, #92]	; 0x5c
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a5f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a5f2:	f1a5 75f8 	sub.w	r5, r5, #32505856	; 0x1f00000
 800a5f6:	950d      	str	r5, [sp, #52]	; 0x34
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800a600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a604:	f002 ff7a 	bl	800d4fc <__aeabi_dsub>
 800a608:	a351      	add	r3, pc, #324	; (adr r3, 800a750 <_dtoa_r+0x24c>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	f003 f929 	bl	800d864 <__aeabi_dmul>
 800a612:	a351      	add	r3, pc, #324	; (adr r3, 800a758 <_dtoa_r+0x254>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f002 ff72 	bl	800d500 <__adddf3>
 800a61c:	4604      	mov	r4, r0
 800a61e:	4630      	mov	r0, r6
 800a620:	460d      	mov	r5, r1
 800a622:	f003 f8b9 	bl	800d798 <__aeabi_i2d>
 800a626:	a34e      	add	r3, pc, #312	; (adr r3, 800a760 <_dtoa_r+0x25c>)
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	f003 f91a 	bl	800d864 <__aeabi_dmul>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f002 ff62 	bl	800d500 <__adddf3>
 800a63c:	4604      	mov	r4, r0
 800a63e:	460d      	mov	r5, r1
 800a640:	f003 fbaa 	bl	800dd98 <__aeabi_d2iz>
 800a644:	4629      	mov	r1, r5
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	9006      	str	r0, [sp, #24]
 800a64c:	4620      	mov	r0, r4
 800a64e:	f003 fb7b 	bl	800dd48 <__aeabi_dcmplt>
 800a652:	b150      	cbz	r0, 800a66a <_dtoa_r+0x166>
 800a654:	9806      	ldr	r0, [sp, #24]
 800a656:	f003 f89f 	bl	800d798 <__aeabi_i2d>
 800a65a:	4622      	mov	r2, r4
 800a65c:	462b      	mov	r3, r5
 800a65e:	f003 fb69 	bl	800dd34 <__aeabi_dcmpeq>
 800a662:	b910      	cbnz	r0, 800a66a <_dtoa_r+0x166>
 800a664:	9c06      	ldr	r4, [sp, #24]
 800a666:	3c01      	subs	r4, #1
 800a668:	9406      	str	r4, [sp, #24]
 800a66a:	9d06      	ldr	r5, [sp, #24]
 800a66c:	2d16      	cmp	r5, #22
 800a66e:	f200 816a 	bhi.w	800a946 <_dtoa_r+0x442>
 800a672:	493f      	ldr	r1, [pc, #252]	; (800a770 <_dtoa_r+0x26c>)
 800a674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a678:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a680:	f003 fb80 	bl	800dd84 <__aeabi_dcmpgt>
 800a684:	2800      	cmp	r0, #0
 800a686:	f000 8246 	beq.w	800ab16 <_dtoa_r+0x612>
 800a68a:	9c06      	ldr	r4, [sp, #24]
 800a68c:	2500      	movs	r5, #0
 800a68e:	9515      	str	r5, [sp, #84]	; 0x54
 800a690:	3c01      	subs	r4, #1
 800a692:	9406      	str	r4, [sp, #24]
 800a694:	1bbe      	subs	r6, r7, r6
 800a696:	3e01      	subs	r6, #1
 800a698:	f100 822f 	bmi.w	800aafa <_dtoa_r+0x5f6>
 800a69c:	2500      	movs	r5, #0
 800a69e:	960b      	str	r6, [sp, #44]	; 0x2c
 800a6a0:	9510      	str	r5, [sp, #64]	; 0x40
 800a6a2:	9c06      	ldr	r4, [sp, #24]
 800a6a4:	2c00      	cmp	r4, #0
 800a6a6:	f2c0 821f 	blt.w	800aae8 <_dtoa_r+0x5e4>
 800a6aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6ac:	9414      	str	r4, [sp, #80]	; 0x50
 800a6ae:	192d      	adds	r5, r5, r4
 800a6b0:	2400      	movs	r4, #0
 800a6b2:	950b      	str	r5, [sp, #44]	; 0x2c
 800a6b4:	9411      	str	r4, [sp, #68]	; 0x44
 800a6b6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a6b8:	2d09      	cmp	r5, #9
 800a6ba:	d85f      	bhi.n	800a77c <_dtoa_r+0x278>
 800a6bc:	2401      	movs	r4, #1
 800a6be:	2d05      	cmp	r5, #5
 800a6c0:	dd02      	ble.n	800a6c8 <_dtoa_r+0x1c4>
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	3d04      	subs	r5, #4
 800a6c6:	9526      	str	r5, [sp, #152]	; 0x98
 800a6c8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a6ca:	1eab      	subs	r3, r5, #2
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d857      	bhi.n	800a780 <_dtoa_r+0x27c>
 800a6d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a6d4:	039a03af 	.word	0x039a03af
 800a6d8:	03b20264 	.word	0x03b20264
 800a6dc:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800a6de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6e2:	9802      	ldr	r0, [sp, #8]
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	b198      	cbz	r0, 800a710 <_dtoa_r+0x20c>
 800a6e8:	4d22      	ldr	r5, [pc, #136]	; (800a774 <_dtoa_r+0x270>)
 800a6ea:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a6ec:	2c00      	cmp	r4, #0
 800a6ee:	f43f af48 	beq.w	800a582 <_dtoa_r+0x7e>
 800a6f2:	78eb      	ldrb	r3, [r5, #3]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 8124 	beq.w	800a942 <_dtoa_r+0x43e>
 800a6fa:	f105 0308 	add.w	r3, r5, #8
 800a6fe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	e73e      	b.n	800a582 <_dtoa_r+0x7e>
 800a704:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800a708:	2301      	movs	r3, #1
 800a70a:	9503      	str	r5, [sp, #12]
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	e718      	b.n	800a542 <_dtoa_r+0x3e>
 800a710:	4b18      	ldr	r3, [pc, #96]	; (800a774 <_dtoa_r+0x270>)
 800a712:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a716:	4a18      	ldr	r2, [pc, #96]	; (800a778 <_dtoa_r+0x274>)
 800a718:	2d00      	cmp	r5, #0
 800a71a:	bf0c      	ite	eq
 800a71c:	4615      	moveq	r5, r2
 800a71e:	461d      	movne	r5, r3
 800a720:	e7e3      	b.n	800a6ea <_dtoa_r+0x1e6>
 800a722:	4639      	mov	r1, r7
 800a724:	4630      	mov	r0, r6
 800a726:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a72a:	f5a3 767e 	sub.w	r6, r3, #1016	; 0x3f8
 800a72e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a730:	2400      	movs	r4, #0
 800a732:	3e07      	subs	r6, #7
 800a734:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a736:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 800a73a:	9417      	str	r4, [sp, #92]	; 0x5c
 800a73c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a740:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a744:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a748:	930d      	str	r3, [sp, #52]	; 0x34
 800a74a:	e755      	b.n	800a5f8 <_dtoa_r+0xf4>
 800a74c:	f3af 8000 	nop.w
 800a750:	636f4361 	.word	0x636f4361
 800a754:	3fd287a7 	.word	0x3fd287a7
 800a758:	8b60c8b3 	.word	0x8b60c8b3
 800a75c:	3fc68a28 	.word	0x3fc68a28
 800a760:	509f79fb 	.word	0x509f79fb
 800a764:	3fd34413 	.word	0x3fd34413
 800a768:	0801e8a4 	.word	0x0801e8a4
 800a76c:	0801e8a5 	.word	0x0801e8a5
 800a770:	0801a7b8 	.word	0x0801a7b8
 800a774:	0801e8b4 	.word	0x0801e8b4
 800a778:	0801e8a8 	.word	0x0801e8a8
 800a77c:	2400      	movs	r4, #0
 800a77e:	9426      	str	r4, [sp, #152]	; 0x98
 800a780:	2400      	movs	r4, #0
 800a782:	4648      	mov	r0, r9
 800a784:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800a788:	4621      	mov	r1, r4
 800a78a:	f04f 35ff 	mov.w	r5, #4294967295
 800a78e:	950e      	str	r5, [sp, #56]	; 0x38
 800a790:	f001 fa84 	bl	800bc9c <_Balloc>
 800a794:	2501      	movs	r5, #1
 800a796:	9513      	str	r5, [sp, #76]	; 0x4c
 800a798:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a79a:	9427      	str	r4, [sp, #156]	; 0x9c
 800a79c:	9516      	str	r5, [sp, #88]	; 0x58
 800a79e:	900a      	str	r0, [sp, #40]	; 0x28
 800a7a0:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a7a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7a6:	9d06      	ldr	r5, [sp, #24]
 800a7a8:	43dc      	mvns	r4, r3
 800a7aa:	0fe4      	lsrs	r4, r4, #31
 800a7ac:	2d0e      	cmp	r5, #14
 800a7ae:	bfcc      	ite	gt
 800a7b0:	2400      	movgt	r4, #0
 800a7b2:	f004 0401 	andle.w	r4, r4, #1
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	f000 80ca 	beq.w	800a950 <_dtoa_r+0x44c>
 800a7bc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a7be:	4b63      	ldr	r3, [pc, #396]	; (800a94c <_dtoa_r+0x448>)
 800a7c0:	0fec      	lsrs	r4, r5, #31
 800a7c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a7c4:	2d00      	cmp	r5, #0
 800a7c6:	bfcc      	ite	gt
 800a7c8:	2400      	movgt	r4, #0
 800a7ca:	f004 0401 	andle.w	r4, r4, #1
 800a7ce:	9d06      	ldr	r5, [sp, #24]
 800a7d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7dc:	2c00      	cmp	r4, #0
 800a7de:	f040 81c2 	bne.w	800ab66 <_dtoa_r+0x662>
 800a7e2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f003 f962 	bl	800dab8 <__aeabi_ddiv>
 800a7f4:	f003 fad0 	bl	800dd98 <__aeabi_d2iz>
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	f002 ffcd 	bl	800d798 <__aeabi_i2d>
 800a7fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a802:	f003 f82f 	bl	800d864 <__aeabi_dmul>
 800a806:	460b      	mov	r3, r1
 800a808:	4602      	mov	r2, r0
 800a80a:	4639      	mov	r1, r7
 800a80c:	4630      	mov	r0, r6
 800a80e:	f002 fe75 	bl	800d4fc <__aeabi_dsub>
 800a812:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800a816:	f805 3b01 	strb.w	r3, [r5], #1
 800a81a:	46a8      	mov	r8, r5
 800a81c:	9512      	str	r5, [sp, #72]	; 0x48
 800a81e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a820:	2d01      	cmp	r5, #1
 800a822:	4606      	mov	r6, r0
 800a824:	460f      	mov	r7, r1
 800a826:	d052      	beq.n	800a8ce <_dtoa_r+0x3ca>
 800a828:	2300      	movs	r3, #0
 800a82a:	2200      	movs	r2, #0
 800a82c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a830:	f003 f818 	bl	800d864 <__aeabi_dmul>
 800a834:	2300      	movs	r3, #0
 800a836:	2200      	movs	r2, #0
 800a838:	4606      	mov	r6, r0
 800a83a:	460f      	mov	r7, r1
 800a83c:	f003 fa7a 	bl	800dd34 <__aeabi_dcmpeq>
 800a840:	2301      	movs	r3, #1
 800a842:	b100      	cbz	r0, 800a846 <_dtoa_r+0x342>
 800a844:	4623      	mov	r3, r4
 800a846:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a84a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a84c:	f000 85b6 	beq.w	800b3bc <_dtoa_r+0xeb8>
 800a850:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a852:	1cac      	adds	r4, r5, #2
 800a854:	f8cd 9008 	str.w	r9, [sp, #8]
 800a858:	eb05 0b00 	add.w	fp, r5, r0
 800a85c:	e00e      	b.n	800a87c <_dtoa_r+0x378>
 800a85e:	f003 f801 	bl	800d864 <__aeabi_dmul>
 800a862:	2200      	movs	r2, #0
 800a864:	2300      	movs	r3, #0
 800a866:	4606      	mov	r6, r0
 800a868:	460f      	mov	r7, r1
 800a86a:	f003 fa63 	bl	800dd34 <__aeabi_dcmpeq>
 800a86e:	b108      	cbz	r0, 800a874 <_dtoa_r+0x370>
 800a870:	f04f 0800 	mov.w	r8, #0
 800a874:	f018 0fff 	tst.w	r8, #255	; 0xff
 800a878:	f000 845a 	beq.w	800b130 <_dtoa_r+0xc2c>
 800a87c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	46a1      	mov	r9, r4
 800a886:	f003 f917 	bl	800dab8 <__aeabi_ddiv>
 800a88a:	f04f 0801 	mov.w	r8, #1
 800a88e:	f003 fa83 	bl	800dd98 <__aeabi_d2iz>
 800a892:	4682      	mov	sl, r0
 800a894:	f002 ff80 	bl	800d798 <__aeabi_i2d>
 800a898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89c:	f10a 0530 	add.w	r5, sl, #48	; 0x30
 800a8a0:	f002 ffe0 	bl	800d864 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f002 fe26 	bl	800d4fc <__aeabi_dsub>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	455c      	cmp	r4, fp
 800a8b6:	f804 5c01 	strb.w	r5, [r4, #-1]
 800a8ba:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a8be:	f104 0401 	add.w	r4, r4, #1
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	d1ca      	bne.n	800a85e <_dtoa_r+0x35a>
 800a8c8:	46c8      	mov	r8, r9
 800a8ca:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f002 fe13 	bl	800d500 <__adddf3>
 800a8da:	4604      	mov	r4, r0
 800a8dc:	460d      	mov	r5, r1
 800a8de:	4622      	mov	r2, r4
 800a8e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	f003 fa2f 	bl	800dd48 <__aeabi_dcmplt>
 800a8ea:	b960      	cbnz	r0, 800a906 <_dtoa_r+0x402>
 800a8ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8f0:	4622      	mov	r2, r4
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	f003 fa1e 	bl	800dd34 <__aeabi_dcmpeq>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f000 841c 	beq.w	800b136 <_dtoa_r+0xc32>
 800a8fe:	f01a 0f01 	tst.w	sl, #1
 800a902:	f000 8418 	beq.w	800b136 <_dtoa_r+0xc32>
 800a906:	9c06      	ldr	r4, [sp, #24]
 800a908:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800a90c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a90e:	9418      	str	r4, [sp, #96]	; 0x60
 800a910:	4643      	mov	r3, r8
 800a912:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a914:	e002      	b.n	800a91c <_dtoa_r+0x418>
 800a916:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	2e39      	cmp	r6, #57	; 0x39
 800a91e:	461a      	mov	r2, r3
 800a920:	f040 84d2 	bne.w	800b2c8 <_dtoa_r+0xdc4>
 800a924:	428b      	cmp	r3, r1
 800a926:	d1f6      	bne.n	800a916 <_dtoa_r+0x412>
 800a928:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a92a:	2330      	movs	r3, #48	; 0x30
 800a92c:	920a      	str	r2, [sp, #40]	; 0x28
 800a92e:	2231      	movs	r2, #49	; 0x31
 800a930:	3401      	adds	r4, #1
 800a932:	9406      	str	r4, [sp, #24]
 800a934:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800a936:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a93a:	4623      	mov	r3, r4
 800a93c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a940:	e0c0      	b.n	800aac4 <_dtoa_r+0x5c0>
 800a942:	1ceb      	adds	r3, r5, #3
 800a944:	e6db      	b.n	800a6fe <_dtoa_r+0x1fa>
 800a946:	2401      	movs	r4, #1
 800a948:	9415      	str	r4, [sp, #84]	; 0x54
 800a94a:	e6a3      	b.n	800a694 <_dtoa_r+0x190>
 800a94c:	0801a7b8 	.word	0x0801a7b8
 800a950:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a952:	2d00      	cmp	r5, #0
 800a954:	f040 80e2 	bne.w	800ab1c <_dtoa_r+0x618>
 800a958:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a95a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a95c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a960:	2d00      	cmp	r5, #0
 800a962:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a964:	bfd4      	ite	le
 800a966:	2300      	movle	r3, #0
 800a968:	2301      	movgt	r3, #1
 800a96a:	2800      	cmp	r0, #0
 800a96c:	bfd4      	ite	le
 800a96e:	2300      	movle	r3, #0
 800a970:	f003 0301 	andgt.w	r3, r3, #1
 800a974:	b14b      	cbz	r3, 800a98a <_dtoa_r+0x486>
 800a976:	4603      	mov	r3, r0
 800a978:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a97a:	42ab      	cmp	r3, r5
 800a97c:	bfa8      	it	ge
 800a97e:	462b      	movge	r3, r5
 800a980:	1aed      	subs	r5, r5, r3
 800a982:	1ac9      	subs	r1, r1, r3
 800a984:	1ac0      	subs	r0, r0, r3
 800a986:	9110      	str	r1, [sp, #64]	; 0x40
 800a988:	900b      	str	r0, [sp, #44]	; 0x2c
 800a98a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	dd1a      	ble.n	800a9c6 <_dtoa_r+0x4c2>
 800a990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 8457 	beq.w	800b246 <_dtoa_r+0xd42>
 800a998:	2c00      	cmp	r4, #0
 800a99a:	dd10      	ble.n	800a9be <_dtoa_r+0x4ba>
 800a99c:	4651      	mov	r1, sl
 800a99e:	4622      	mov	r2, r4
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	f001 fb29 	bl	800bff8 <__pow5mult>
 800a9a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	4648      	mov	r0, r9
 800a9ac:	4651      	mov	r1, sl
 800a9ae:	f001 fa87 	bl	800bec0 <__multiply>
 800a9b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	4648      	mov	r0, r9
 800a9b8:	f001 f996 	bl	800bce8 <_Bfree>
 800a9bc:	960f      	str	r6, [sp, #60]	; 0x3c
 800a9be:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a9c0:	1b02      	subs	r2, r0, r4
 800a9c2:	f040 8464 	bne.w	800b28e <_dtoa_r+0xd8a>
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4648      	mov	r0, r9
 800a9ca:	f001 fa6f 	bl	800beac <__i2b>
 800a9ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	dd05      	ble.n	800a9e2 <_dtoa_r+0x4de>
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4648      	mov	r0, r9
 800a9da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9dc:	f001 fb0c 	bl	800bff8 <__pow5mult>
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a9e4:	2a01      	cmp	r2, #1
 800a9e6:	f340 822a 	ble.w	800ae3e <_dtoa_r+0x93a>
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	f040 83a4 	bne.w	800b13e <_dtoa_r+0xc3a>
 800a9f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a9f8:	181b      	adds	r3, r3, r0
 800a9fa:	f013 031f 	ands.w	r3, r3, #31
 800a9fe:	f000 8275 	beq.w	800aeec <_dtoa_r+0x9e8>
 800aa02:	f1c3 0220 	rsb	r2, r3, #32
 800aa06:	2a04      	cmp	r2, #4
 800aa08:	f340 84f3 	ble.w	800b3f2 <_dtoa_r+0xeee>
 800aa0c:	f1c3 031c 	rsb	r3, r3, #28
 800aa10:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aa12:	18ed      	adds	r5, r5, r3
 800aa14:	18c0      	adds	r0, r0, r3
 800aa16:	18c9      	adds	r1, r1, r3
 800aa18:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa1a:	9110      	str	r1, [sp, #64]	; 0x40
 800aa1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aa1e:	2900      	cmp	r1, #0
 800aa20:	dd05      	ble.n	800aa2e <_dtoa_r+0x52a>
 800aa22:	4648      	mov	r0, r9
 800aa24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa28:	f001 fb32 	bl	800c090 <__lshift>
 800aa2c:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	dd04      	ble.n	800aa3e <_dtoa_r+0x53a>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4648      	mov	r0, r9
 800aa38:	f001 fb2a 	bl	800c090 <__lshift>
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8385 	bne.w	800b150 <_dtoa_r+0xc4c>
 800aa46:	9826      	ldr	r0, [sp, #152]	; 0x98
 800aa48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa4a:	2802      	cmp	r0, #2
 800aa4c:	bfd4      	ite	le
 800aa4e:	2300      	movle	r3, #0
 800aa50:	2301      	movgt	r3, #1
 800aa52:	2900      	cmp	r1, #0
 800aa54:	bfcc      	ite	gt
 800aa56:	2300      	movgt	r3, #0
 800aa58:	f003 0301 	andle.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 824e 	beq.w	800aefe <_dtoa_r+0x9fa>
 800aa62:	2900      	cmp	r1, #0
 800aa64:	f040 8094 	bne.w	800ab90 <_dtoa_r+0x68c>
 800aa68:	2205      	movs	r2, #5
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4648      	mov	r0, r9
 800aa6e:	4621      	mov	r1, r4
 800aa70:	f001 f944 	bl	800bcfc <__multadd>
 800aa74:	4604      	mov	r4, r0
 800aa76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aa78:	4621      	mov	r1, r4
 800aa7a:	f001 fb69 	bl	800c150 <__mcmp>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f340 8086 	ble.w	800ab90 <_dtoa_r+0x68c>
 800aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa86:	2700      	movs	r7, #0
 800aa88:	9806      	ldr	r0, [sp, #24]
 800aa8a:	2231      	movs	r2, #49	; 0x31
 800aa8c:	461d      	mov	r5, r3
 800aa8e:	3001      	adds	r0, #1
 800aa90:	f803 2b01 	strb.w	r2, [r3], #1
 800aa94:	9006      	str	r0, [sp, #24]
 800aa96:	930a      	str	r3, [sp, #40]	; 0x28
 800aa98:	4648      	mov	r0, r9
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	f001 f924 	bl	800bce8 <_Bfree>
 800aaa0:	f1ba 0f00 	cmp.w	sl, #0
 800aaa4:	d00e      	beq.n	800aac4 <_dtoa_r+0x5c0>
 800aaa6:	1c3b      	adds	r3, r7, #0
 800aaa8:	bf18      	it	ne
 800aaaa:	2301      	movne	r3, #1
 800aaac:	4557      	cmp	r7, sl
 800aaae:	bf0c      	ite	eq
 800aab0:	2300      	moveq	r3, #0
 800aab2:	f003 0301 	andne.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f040 8213 	bne.w	800aee2 <_dtoa_r+0x9de>
 800aabc:	4648      	mov	r0, r9
 800aabe:	4651      	mov	r1, sl
 800aac0:	f001 f912 	bl	800bce8 <_Bfree>
 800aac4:	4648      	mov	r0, r9
 800aac6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aac8:	f001 f90e 	bl	800bce8 <_Bfree>
 800aacc:	9c06      	ldr	r4, [sp, #24]
 800aace:	2200      	movs	r2, #0
 800aad0:	1c63      	adds	r3, r4, #1
 800aad2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aad4:	7022      	strb	r2, [r4, #0]
 800aad6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800aadc:	2c00      	cmp	r4, #0
 800aade:	f43f ad50 	beq.w	800a582 <_dtoa_r+0x7e>
 800aae2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aae4:	6020      	str	r0, [r4, #0]
 800aae6:	e54c      	b.n	800a582 <_dtoa_r+0x7e>
 800aae8:	9c06      	ldr	r4, [sp, #24]
 800aaea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aaec:	1b2d      	subs	r5, r5, r4
 800aaee:	9510      	str	r5, [sp, #64]	; 0x40
 800aaf0:	4265      	negs	r5, r4
 800aaf2:	2400      	movs	r4, #0
 800aaf4:	9511      	str	r5, [sp, #68]	; 0x44
 800aaf6:	9414      	str	r4, [sp, #80]	; 0x50
 800aaf8:	e5dd      	b.n	800a6b6 <_dtoa_r+0x1b2>
 800aafa:	4276      	negs	r6, r6
 800aafc:	2400      	movs	r4, #0
 800aafe:	9610      	str	r6, [sp, #64]	; 0x40
 800ab00:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab02:	e5ce      	b.n	800a6a2 <_dtoa_r+0x19e>
 800ab04:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 800ab08:	9902      	ldr	r1, [sp, #8]
 800ab0a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800ab0e:	1b92      	subs	r2, r2, r6
 800ab10:	fa11 f002 	lsls.w	r0, r1, r2
 800ab14:	e563      	b.n	800a5de <_dtoa_r+0xda>
 800ab16:	2500      	movs	r5, #0
 800ab18:	9515      	str	r5, [sp, #84]	; 0x54
 800ab1a:	e5bb      	b.n	800a694 <_dtoa_r+0x190>
 800ab1c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ab1e:	2d01      	cmp	r5, #1
 800ab20:	f340 83bf 	ble.w	800b2a2 <_dtoa_r+0xd9e>
 800ab24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ab26:	1e6b      	subs	r3, r5, #1
 800ab28:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ab2a:	429d      	cmp	r5, r3
 800ab2c:	bfaf      	iteee	ge
 800ab2e:	ebc3 0405 	rsbge	r4, r3, r5
 800ab32:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 800ab34:	9311      	strlt	r3, [sp, #68]	; 0x44
 800ab36:	ebc5 0203 	rsblt	r2, r5, r3
 800ab3a:	bfbe      	ittt	lt
 800ab3c:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 800ab3e:	18ad      	addlt	r5, r5, r2
 800ab40:	9514      	strlt	r5, [sp, #80]	; 0x50
 800ab42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ab44:	2d00      	cmp	r5, #0
 800ab46:	f2c0 83c8 	blt.w	800b2da <_dtoa_r+0xdd6>
 800ab4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ab4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab50:	4648      	mov	r0, r9
 800ab52:	2101      	movs	r1, #1
 800ab54:	18d2      	adds	r2, r2, r3
 800ab56:	9210      	str	r2, [sp, #64]	; 0x40
 800ab58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab5a:	18d2      	adds	r2, r2, r3
 800ab5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab5e:	f001 f9a5 	bl	800beac <__i2b>
 800ab62:	4682      	mov	sl, r0
 800ab64:	e6fc      	b.n	800a960 <_dtoa_r+0x45c>
 800ab66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	f040 8397 	bne.w	800b29c <_dtoa_r+0xd98>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2200      	movs	r2, #0
 800ab72:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800ab76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab7a:	f002 fe73 	bl	800d864 <__aeabi_dmul>
 800ab7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab82:	f003 f8f5 	bl	800dd70 <__aeabi_dcmpge>
 800ab86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ab88:	46a2      	mov	sl, r4
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f43f af7a 	beq.w	800aa84 <_dtoa_r+0x580>
 800ab90:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ab92:	2700      	movs	r7, #0
 800ab94:	43ed      	mvns	r5, r5
 800ab96:	9506      	str	r5, [sp, #24]
 800ab98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ab9a:	e77d      	b.n	800aa98 <_dtoa_r+0x594>
 800ab9c:	2501      	movs	r5, #1
 800ab9e:	9513      	str	r5, [sp, #76]	; 0x4c
 800aba0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800aba2:	2d00      	cmp	r5, #0
 800aba4:	f340 82ec 	ble.w	800b180 <_dtoa_r+0xc7c>
 800aba8:	46ab      	mov	fp, r5
 800abaa:	2d0e      	cmp	r5, #14
 800abac:	bf8c      	ite	hi
 800abae:	2400      	movhi	r4, #0
 800abb0:	f004 0401 	andls.w	r4, r4, #1
 800abb4:	9516      	str	r5, [sp, #88]	; 0x58
 800abb6:	950e      	str	r5, [sp, #56]	; 0x38
 800abb8:	2100      	movs	r1, #0
 800abba:	f1bb 0f17 	cmp.w	fp, #23
 800abbe:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800abc2:	d90a      	bls.n	800abda <_dtoa_r+0x6d6>
 800abc4:	2201      	movs	r2, #1
 800abc6:	2304      	movs	r3, #4
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	4611      	mov	r1, r2
 800abcc:	f103 0014 	add.w	r0, r3, #20
 800abd0:	3201      	adds	r2, #1
 800abd2:	4558      	cmp	r0, fp
 800abd4:	d9f8      	bls.n	800abc8 <_dtoa_r+0x6c4>
 800abd6:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800abda:	4648      	mov	r0, r9
 800abdc:	f001 f85e 	bl	800bc9c <_Balloc>
 800abe0:	900a      	str	r0, [sp, #40]	; 0x28
 800abe2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800abe6:	2c00      	cmp	r4, #0
 800abe8:	f43f addc 	beq.w	800a7a4 <_dtoa_r+0x2a0>
 800abec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abf0:	461d      	mov	r5, r3
 800abf2:	4614      	mov	r4, r2
 800abf4:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800abf8:	9d06      	ldr	r5, [sp, #24]
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	f340 820d 	ble.w	800b01a <_dtoa_r+0xb16>
 800ac00:	f005 020f 	and.w	r2, r5, #15
 800ac04:	4b9b      	ldr	r3, [pc, #620]	; (800ae74 <_dtoa_r+0x970>)
 800ac06:	112c      	asrs	r4, r5, #4
 800ac08:	2602      	movs	r6, #2
 800ac0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac0e:	06e2      	lsls	r2, r4, #27
 800ac10:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800ac14:	d50b      	bpl.n	800ac2e <_dtoa_r+0x72a>
 800ac16:	4b98      	ldr	r3, [pc, #608]	; (800ae78 <_dtoa_r+0x974>)
 800ac18:	f004 040f 	and.w	r4, r4, #15
 800ac1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac20:	2603      	movs	r6, #3
 800ac22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac26:	f002 ff47 	bl	800dab8 <__aeabi_ddiv>
 800ac2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2e:	b174      	cbz	r4, 800ac4e <_dtoa_r+0x74a>
 800ac30:	4d91      	ldr	r5, [pc, #580]	; (800ae78 <_dtoa_r+0x974>)
 800ac32:	07e3      	lsls	r3, r4, #31
 800ac34:	4650      	mov	r0, sl
 800ac36:	4659      	mov	r1, fp
 800ac38:	d506      	bpl.n	800ac48 <_dtoa_r+0x744>
 800ac3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac3e:	3601      	adds	r6, #1
 800ac40:	f002 fe10 	bl	800d864 <__aeabi_dmul>
 800ac44:	4682      	mov	sl, r0
 800ac46:	468b      	mov	fp, r1
 800ac48:	3508      	adds	r5, #8
 800ac4a:	1064      	asrs	r4, r4, #1
 800ac4c:	d1f1      	bne.n	800ac32 <_dtoa_r+0x72e>
 800ac4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac52:	4652      	mov	r2, sl
 800ac54:	465b      	mov	r3, fp
 800ac56:	f002 ff2f 	bl	800dab8 <__aeabi_ddiv>
 800ac5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac5e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	f000 810b 	beq.w	800ae7c <_dtoa_r+0x978>
 800ac66:	2300      	movs	r3, #0
 800ac68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ac70:	2200      	movs	r2, #0
 800ac72:	f003 f869 	bl	800dd48 <__aeabi_dcmplt>
 800ac76:	2301      	movs	r3, #1
 800ac78:	b900      	cbnz	r0, 800ac7c <_dtoa_r+0x778>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	bfd4      	ite	le
 800ac82:	2300      	movle	r3, #0
 800ac84:	f003 0301 	andgt.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 80f7 	beq.w	800ae7c <_dtoa_r+0x978>
 800ac8e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800ac90:	2c00      	cmp	r4, #0
 800ac92:	f340 81ad 	ble.w	800aff0 <_dtoa_r+0xaec>
 800ac96:	2300      	movs	r3, #0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ac9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca2:	f002 fddf 	bl	800d864 <__aeabi_dmul>
 800aca6:	9d06      	ldr	r5, [sp, #24]
 800aca8:	3d01      	subs	r5, #1
 800acaa:	9518      	str	r5, [sp, #96]	; 0x60
 800acac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800acae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acb2:	1c70      	adds	r0, r6, #1
 800acb4:	f002 fd70 	bl	800d798 <__aeabi_i2d>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc0:	f002 fdd0 	bl	800d864 <__aeabi_dmul>
 800acc4:	2300      	movs	r3, #0
 800acc6:	2200      	movs	r2, #0
 800acc8:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800accc:	f002 fc18 	bl	800d500 <__adddf3>
 800acd0:	4606      	mov	r6, r0
 800acd2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800acd6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800acd8:	2c00      	cmp	r4, #0
 800acda:	f000 81cb 	beq.w	800b074 <_dtoa_r+0xb70>
 800acde:	4b65      	ldr	r3, [pc, #404]	; (800ae74 <_dtoa_r+0x970>)
 800ace0:	2100      	movs	r1, #0
 800ace2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ace4:	2000      	movs	r0, #0
 800ace6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800acea:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800acee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acf2:	9412      	str	r4, [sp, #72]	; 0x48
 800acf4:	f002 fee0 	bl	800dab8 <__aeabi_ddiv>
 800acf8:	4632      	mov	r2, r6
 800acfa:	463b      	mov	r3, r7
 800acfc:	f002 fbfe 	bl	800d4fc <__aeabi_dsub>
 800ad00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad08:	f003 f846 	bl	800dd98 <__aeabi_d2iz>
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	f002 fd43 	bl	800d798 <__aeabi_i2d>
 800ad12:	3430      	adds	r4, #48	; 0x30
 800ad14:	b2e6      	uxtb	r6, r4
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1e:	f002 fbed 	bl	800d4fc <__aeabi_dsub>
 800ad22:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ad24:	f804 6b01 	strb.w	r6, [r4], #1
 800ad28:	9412      	str	r4, [sp, #72]	; 0x48
 800ad2a:	4682      	mov	sl, r0
 800ad2c:	468b      	mov	fp, r1
 800ad2e:	4652      	mov	r2, sl
 800ad30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad34:	465b      	mov	r3, fp
 800ad36:	f003 f825 	bl	800dd84 <__aeabi_dcmpgt>
 800ad3a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f040 8345 	bne.w	800b3ce <_dtoa_r+0xeca>
 800ad44:	2100      	movs	r1, #0
 800ad46:	4652      	mov	r2, sl
 800ad48:	465b      	mov	r3, fp
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ad50:	f002 fbd4 	bl	800d4fc <__aeabi_dsub>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad5c:	f003 f812 	bl	800dd84 <__aeabi_dcmpgt>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	f040 82ae 	bne.w	800b2c2 <_dtoa_r+0xdbe>
 800ad66:	2d01      	cmp	r5, #1
 800ad68:	f340 8142 	ble.w	800aff0 <_dtoa_r+0xaec>
 800ad6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ad70:	1965      	adds	r5, r4, r5
 800ad72:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800ad76:	9502      	str	r5, [sp, #8]
 800ad78:	e00c      	b.n	800ad94 <_dtoa_r+0x890>
 800ad7a:	f002 fbbf 	bl	800d4fc <__aeabi_dsub>
 800ad7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad82:	f002 ffe1 	bl	800dd48 <__aeabi_dcmplt>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f040 8298 	bne.w	800b2bc <_dtoa_r+0xdb8>
 800ad8c:	9d02      	ldr	r5, [sp, #8]
 800ad8e:	42af      	cmp	r7, r5
 800ad90:	f000 812c 	beq.w	800afec <_dtoa_r+0xae8>
 800ad94:	2300      	movs	r3, #0
 800ad96:	2200      	movs	r2, #0
 800ad98:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ad9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ada0:	f002 fd60 	bl	800d864 <__aeabi_dmul>
 800ada4:	2300      	movs	r3, #0
 800ada6:	2200      	movs	r2, #0
 800ada8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800adac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800adb0:	4650      	mov	r0, sl
 800adb2:	4659      	mov	r1, fp
 800adb4:	f002 fd56 	bl	800d864 <__aeabi_dmul>
 800adb8:	4689      	mov	r9, r1
 800adba:	4680      	mov	r8, r0
 800adbc:	f002 ffec 	bl	800dd98 <__aeabi_d2iz>
 800adc0:	4604      	mov	r4, r0
 800adc2:	f002 fce9 	bl	800d798 <__aeabi_i2d>
 800adc6:	3430      	adds	r4, #48	; 0x30
 800adc8:	b2e6      	uxtb	r6, r4
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f002 fb93 	bl	800d4fc <__aeabi_dsub>
 800add6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800adda:	f807 6b01 	strb.w	r6, [r7], #1
 800adde:	463d      	mov	r5, r7
 800ade0:	468b      	mov	fp, r1
 800ade2:	4682      	mov	sl, r0
 800ade4:	f002 ffb0 	bl	800dd48 <__aeabi_dcmplt>
 800ade8:	2100      	movs	r1, #0
 800adea:	4652      	mov	r2, sl
 800adec:	465b      	mov	r3, fp
 800adee:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800adf2:	4604      	mov	r4, r0
 800adf4:	2000      	movs	r0, #0
 800adf6:	2c00      	cmp	r4, #0
 800adf8:	d0bf      	beq.n	800ad7a <_dtoa_r+0x876>
 800adfa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800adfc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800adfe:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800ae02:	9406      	str	r4, [sp, #24]
 800ae04:	970a      	str	r7, [sp, #40]	; 0x28
 800ae06:	e65d      	b.n	800aac4 <_dtoa_r+0x5c0>
 800ae08:	2500      	movs	r5, #0
 800ae0a:	9513      	str	r5, [sp, #76]	; 0x4c
 800ae0c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800ae0e:	9d06      	ldr	r5, [sp, #24]
 800ae10:	1945      	adds	r5, r0, r5
 800ae12:	9516      	str	r5, [sp, #88]	; 0x58
 800ae14:	f105 0b01 	add.w	fp, r5, #1
 800ae18:	f1bb 0f00 	cmp.w	fp, #0
 800ae1c:	f340 81b9 	ble.w	800b192 <_dtoa_r+0xc8e>
 800ae20:	f1bb 0f0e 	cmp.w	fp, #14
 800ae24:	bf8c      	ite	hi
 800ae26:	2400      	movhi	r4, #0
 800ae28:	f004 0401 	andls.w	r4, r4, #1
 800ae2c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ae30:	e6c2      	b.n	800abb8 <_dtoa_r+0x6b4>
 800ae32:	2500      	movs	r5, #0
 800ae34:	9513      	str	r5, [sp, #76]	; 0x4c
 800ae36:	e6b3      	b.n	800aba0 <_dtoa_r+0x69c>
 800ae38:	2501      	movs	r5, #1
 800ae3a:	9513      	str	r5, [sp, #76]	; 0x4c
 800ae3c:	e7e6      	b.n	800ae0c <_dtoa_r+0x908>
 800ae3e:	9b02      	ldr	r3, [sp, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f47f add2 	bne.w	800a9ea <_dtoa_r+0x4e6>
 800ae46:	9a03      	ldr	r2, [sp, #12]
 800ae48:	9e02      	ldr	r6, [sp, #8]
 800ae4a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f47f adcc 	bne.w	800a9ec <_dtoa_r+0x4e8>
 800ae54:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800ae58:	4013      	ands	r3, r2
 800ae5a:	461e      	mov	r6, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f43f adc5 	beq.w	800a9ec <_dtoa_r+0x4e8>
 800ae62:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae64:	2601      	movs	r6, #1
 800ae66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae68:	3001      	adds	r0, #1
 800ae6a:	9010      	str	r0, [sp, #64]	; 0x40
 800ae6c:	3101      	adds	r1, #1
 800ae6e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae70:	e5bc      	b.n	800a9ec <_dtoa_r+0x4e8>
 800ae72:	bf00      	nop
 800ae74:	0801a7b8 	.word	0x0801a7b8
 800ae78:	0801a8a8 	.word	0x0801a8a8
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f002 fc8b 	bl	800d798 <__aeabi_i2d>
 800ae82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae86:	f002 fced 	bl	800d864 <__aeabi_dmul>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800ae92:	f002 fb35 	bl	800d500 <__adddf3>
 800ae96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ae98:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	4627      	mov	r7, r4
 800aea0:	2d00      	cmp	r5, #0
 800aea2:	f040 80b6 	bne.w	800b012 <_dtoa_r+0xb0e>
 800aea6:	2300      	movs	r3, #0
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800aeae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb2:	f002 fb23 	bl	800d4fc <__aeabi_dsub>
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	4623      	mov	r3, r4
 800aeba:	4682      	mov	sl, r0
 800aebc:	468b      	mov	fp, r1
 800aebe:	f002 ff61 	bl	800dd84 <__aeabi_dcmpgt>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	f040 80d3 	bne.w	800b06e <_dtoa_r+0xb6a>
 800aec8:	4632      	mov	r2, r6
 800aeca:	4650      	mov	r0, sl
 800aecc:	4659      	mov	r1, fp
 800aece:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800aed2:	f002 ff39 	bl	800dd48 <__aeabi_dcmplt>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f000 808a 	beq.w	800aff0 <_dtoa_r+0xaec>
 800aedc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aede:	46a2      	mov	sl, r4
 800aee0:	e656      	b.n	800ab90 <_dtoa_r+0x68c>
 800aee2:	4648      	mov	r0, r9
 800aee4:	4639      	mov	r1, r7
 800aee6:	f000 feff 	bl	800bce8 <_Bfree>
 800aeea:	e5e7      	b.n	800aabc <_dtoa_r+0x5b8>
 800aeec:	231c      	movs	r3, #28
 800aeee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aef0:	18ed      	adds	r5, r5, r3
 800aef2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aef4:	18d2      	adds	r2, r2, r3
 800aef6:	9210      	str	r2, [sp, #64]	; 0x40
 800aef8:	18c0      	adds	r0, r0, r3
 800aefa:	900b      	str	r0, [sp, #44]	; 0x2c
 800aefc:	e58e      	b.n	800aa1c <_dtoa_r+0x518>
 800aefe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af00:	2900      	cmp	r1, #0
 800af02:	f000 814e 	beq.w	800b1a2 <_dtoa_r+0xc9e>
 800af06:	2d00      	cmp	r5, #0
 800af08:	dd05      	ble.n	800af16 <_dtoa_r+0xa12>
 800af0a:	4651      	mov	r1, sl
 800af0c:	4648      	mov	r0, r9
 800af0e:	462a      	mov	r2, r5
 800af10:	f001 f8be 	bl	800c090 <__lshift>
 800af14:	4682      	mov	sl, r0
 800af16:	2e00      	cmp	r6, #0
 800af18:	f040 820a 	bne.w	800b330 <_dtoa_r+0xe2c>
 800af1c:	4656      	mov	r6, sl
 800af1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800af20:	4657      	mov	r7, sl
 800af22:	f04f 0801 	mov.w	r8, #1
 800af26:	9507      	str	r5, [sp, #28]
 800af28:	9d02      	ldr	r5, [sp, #8]
 800af2a:	9402      	str	r4, [sp, #8]
 800af2c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800af2e:	ea05 0508 	and.w	r5, r5, r8
 800af32:	950c      	str	r5, [sp, #48]	; 0x30
 800af34:	9902      	ldr	r1, [sp, #8]
 800af36:	4620      	mov	r0, r4
 800af38:	f7ff fa42 	bl	800a3c0 <quorem>
 800af3c:	4639      	mov	r1, r7
 800af3e:	f04f 0b01 	mov.w	fp, #1
 800af42:	9008      	str	r0, [sp, #32]
 800af44:	4620      	mov	r0, r4
 800af46:	f001 f903 	bl	800c150 <__mcmp>
 800af4a:	9b08      	ldr	r3, [sp, #32]
 800af4c:	9902      	ldr	r1, [sp, #8]
 800af4e:	4632      	mov	r2, r6
 800af50:	3330      	adds	r3, #48	; 0x30
 800af52:	930b      	str	r3, [sp, #44]	; 0x2c
 800af54:	4605      	mov	r5, r0
 800af56:	4648      	mov	r0, r9
 800af58:	f001 f91a 	bl	800c190 <__mdiff>
 800af5c:	68c3      	ldr	r3, [r0, #12]
 800af5e:	4682      	mov	sl, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d03d      	beq.n	800afe0 <_dtoa_r+0xadc>
 800af64:	4648      	mov	r0, r9
 800af66:	4651      	mov	r1, sl
 800af68:	f000 febe 	bl	800bce8 <_Bfree>
 800af6c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800af6e:	ea5b 0000 	orrs.w	r0, fp, r0
 800af72:	d103      	bne.n	800af7c <_dtoa_r+0xa78>
 800af74:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af76:	2900      	cmp	r1, #0
 800af78:	f000 8216 	beq.w	800b3a8 <_dtoa_r+0xea4>
 800af7c:	2d00      	cmp	r5, #0
 800af7e:	f2c0 81b0 	blt.w	800b2e2 <_dtoa_r+0xdde>
 800af82:	9826      	ldr	r0, [sp, #152]	; 0x98
 800af84:	4328      	orrs	r0, r5
 800af86:	d103      	bne.n	800af90 <_dtoa_r+0xa8c>
 800af88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af8a:	2d00      	cmp	r5, #0
 800af8c:	f000 81a9 	beq.w	800b2e2 <_dtoa_r+0xdde>
 800af90:	f1bb 0f00 	cmp.w	fp, #0
 800af94:	f300 81f0 	bgt.w	800b378 <_dtoa_r+0xe74>
 800af98:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af9a:	9807      	ldr	r0, [sp, #28]
 800af9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af9e:	4588      	cmp	r8, r1
 800afa0:	f800 5b01 	strb.w	r5, [r0], #1
 800afa4:	4605      	mov	r5, r0
 800afa6:	9007      	str	r0, [sp, #28]
 800afa8:	f000 81e0 	beq.w	800b36c <_dtoa_r+0xe68>
 800afac:	4621      	mov	r1, r4
 800afae:	220a      	movs	r2, #10
 800afb0:	2300      	movs	r3, #0
 800afb2:	4648      	mov	r0, r9
 800afb4:	f000 fea2 	bl	800bcfc <__multadd>
 800afb8:	42b7      	cmp	r7, r6
 800afba:	4604      	mov	r4, r0
 800afbc:	d01e      	beq.n	800affc <_dtoa_r+0xaf8>
 800afbe:	4639      	mov	r1, r7
 800afc0:	220a      	movs	r2, #10
 800afc2:	2300      	movs	r3, #0
 800afc4:	4648      	mov	r0, r9
 800afc6:	f000 fe99 	bl	800bcfc <__multadd>
 800afca:	4631      	mov	r1, r6
 800afcc:	220a      	movs	r2, #10
 800afce:	2300      	movs	r3, #0
 800afd0:	f108 0801 	add.w	r8, r8, #1
 800afd4:	4607      	mov	r7, r0
 800afd6:	4648      	mov	r0, r9
 800afd8:	f000 fe90 	bl	800bcfc <__multadd>
 800afdc:	4606      	mov	r6, r0
 800afde:	e7a9      	b.n	800af34 <_dtoa_r+0xa30>
 800afe0:	4620      	mov	r0, r4
 800afe2:	4651      	mov	r1, sl
 800afe4:	f001 f8b4 	bl	800c150 <__mcmp>
 800afe8:	4683      	mov	fp, r0
 800afea:	e7bb      	b.n	800af64 <_dtoa_r+0xa60>
 800afec:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800aff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff8:	f7ff bbd4 	b.w	800a7a4 <_dtoa_r+0x2a0>
 800affc:	4639      	mov	r1, r7
 800affe:	4648      	mov	r0, r9
 800b000:	220a      	movs	r2, #10
 800b002:	2300      	movs	r3, #0
 800b004:	f000 fe7a 	bl	800bcfc <__multadd>
 800b008:	f108 0801 	add.w	r8, r8, #1
 800b00c:	4607      	mov	r7, r0
 800b00e:	4606      	mov	r6, r0
 800b010:	e790      	b.n	800af34 <_dtoa_r+0xa30>
 800b012:	9c06      	ldr	r4, [sp, #24]
 800b014:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b016:	9418      	str	r4, [sp, #96]	; 0x60
 800b018:	e65d      	b.n	800acd6 <_dtoa_r+0x7d2>
 800b01a:	9d06      	ldr	r5, [sp, #24]
 800b01c:	426c      	negs	r4, r5
 800b01e:	2c00      	cmp	r4, #0
 800b020:	f000 810f 	beq.w	800b242 <_dtoa_r+0xd3e>
 800b024:	f004 020f 	and.w	r2, r4, #15
 800b028:	4ba2      	ldr	r3, [pc, #648]	; (800b2b4 <_dtoa_r+0xdb0>)
 800b02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b02e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f002 fc15 	bl	800d864 <__aeabi_dmul>
 800b03a:	1124      	asrs	r4, r4, #4
 800b03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b040:	f000 80ff 	beq.w	800b242 <_dtoa_r+0xd3e>
 800b044:	4d9c      	ldr	r5, [pc, #624]	; (800b2b8 <_dtoa_r+0xdb4>)
 800b046:	2602      	movs	r6, #2
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	07e7      	lsls	r7, r4, #31
 800b04e:	4610      	mov	r0, r2
 800b050:	4619      	mov	r1, r3
 800b052:	d506      	bpl.n	800b062 <_dtoa_r+0xb5e>
 800b054:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b058:	3601      	adds	r6, #1
 800b05a:	f002 fc03 	bl	800d864 <__aeabi_dmul>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	3508      	adds	r5, #8
 800b064:	1064      	asrs	r4, r4, #1
 800b066:	d1f1      	bne.n	800b04c <_dtoa_r+0xb48>
 800b068:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b06c:	e5f7      	b.n	800ac5e <_dtoa_r+0x75a>
 800b06e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b070:	46a2      	mov	sl, r4
 800b072:	e507      	b.n	800aa84 <_dtoa_r+0x580>
 800b074:	f105 3aff 	add.w	sl, r5, #4294967295
 800b078:	498e      	ldr	r1, [pc, #568]	; (800b2b4 <_dtoa_r+0xdb0>)
 800b07a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b07c:	4632      	mov	r2, r6
 800b07e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b082:	463b      	mov	r3, r7
 800b084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b088:	9412      	str	r4, [sp, #72]	; 0x48
 800b08a:	f002 fbeb 	bl	800d864 <__aeabi_dmul>
 800b08e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b096:	f002 fe7f 	bl	800dd98 <__aeabi_d2iz>
 800b09a:	4604      	mov	r4, r0
 800b09c:	f002 fb7c 	bl	800d798 <__aeabi_i2d>
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a8:	f002 fa28 	bl	800d4fc <__aeabi_dsub>
 800b0ac:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800b0b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b0b2:	2d01      	cmp	r5, #1
 800b0b4:	f804 3b01 	strb.w	r3, [r4], #1
 800b0b8:	46a0      	mov	r8, r4
 800b0ba:	9412      	str	r4, [sp, #72]	; 0x48
 800b0bc:	4606      	mov	r6, r0
 800b0be:	460f      	mov	r7, r1
 800b0c0:	d020      	beq.n	800b104 <_dtoa_r+0xc00>
 800b0c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b0c4:	f104 38ff 	add.w	r8, r4, #4294967295
 800b0c8:	44a8      	add	r8, r5
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b0d2:	f002 fbc7 	bl	800d864 <__aeabi_dmul>
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	4606      	mov	r6, r0
 800b0da:	f002 fe5d 	bl	800dd98 <__aeabi_d2iz>
 800b0de:	4605      	mov	r5, r0
 800b0e0:	f002 fb5a 	bl	800d798 <__aeabi_i2d>
 800b0e4:	3530      	adds	r5, #48	; 0x30
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f002 fa05 	bl	800d4fc <__aeabi_dsub>
 800b0f2:	f804 5f01 	strb.w	r5, [r4, #1]!
 800b0f6:	4544      	cmp	r4, r8
 800b0f8:	d1e7      	bne.n	800b0ca <_dtoa_r+0xbc6>
 800b0fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	eb05 080a 	add.w	r8, r5, sl
 800b104:	2300      	movs	r3, #0
 800b106:	2200      	movs	r2, #0
 800b108:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b10c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b110:	f002 f9f6 	bl	800d500 <__adddf3>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f002 fe32 	bl	800dd84 <__aeabi_dcmpgt>
 800b120:	2800      	cmp	r0, #0
 800b122:	f000 8098 	beq.w	800b256 <_dtoa_r+0xd52>
 800b126:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800b12a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b12c:	f7ff bbf0 	b.w	800a910 <_dtoa_r+0x40c>
 800b130:	46c8      	mov	r8, r9
 800b132:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b136:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b138:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b13c:	e4c2      	b.n	800aac4 <_dtoa_r+0x5c0>
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b144:	6918      	ldr	r0, [r3, #16]
 800b146:	f000 fe65 	bl	800be14 <__hi0bits>
 800b14a:	f1c0 0320 	rsb	r3, r0, #32
 800b14e:	e452      	b.n	800a9f6 <_dtoa_r+0x4f2>
 800b150:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b152:	4621      	mov	r1, r4
 800b154:	f000 fffc 	bl	800c150 <__mcmp>
 800b158:	2800      	cmp	r0, #0
 800b15a:	f6bf ac74 	bge.w	800aa46 <_dtoa_r+0x542>
 800b15e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b160:	4648      	mov	r0, r9
 800b162:	220a      	movs	r2, #10
 800b164:	2300      	movs	r3, #0
 800b166:	f000 fdc9 	bl	800bcfc <__multadd>
 800b16a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b16c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b16e:	9806      	ldr	r0, [sp, #24]
 800b170:	3801      	subs	r0, #1
 800b172:	9006      	str	r0, [sp, #24]
 800b174:	2900      	cmp	r1, #0
 800b176:	f040 8131 	bne.w	800b3dc <_dtoa_r+0xed8>
 800b17a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b17c:	930e      	str	r3, [sp, #56]	; 0x38
 800b17e:	e462      	b.n	800aa46 <_dtoa_r+0x542>
 800b180:	2301      	movs	r3, #1
 800b182:	9316      	str	r3, [sp, #88]	; 0x58
 800b184:	930e      	str	r3, [sp, #56]	; 0x38
 800b186:	9327      	str	r3, [sp, #156]	; 0x9c
 800b188:	2100      	movs	r1, #0
 800b18a:	401c      	ands	r4, r3
 800b18c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b190:	e523      	b.n	800abda <_dtoa_r+0x6d6>
 800b192:	f1bb 0f0e 	cmp.w	fp, #14
 800b196:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b19a:	bf8c      	ite	hi
 800b19c:	2300      	movhi	r3, #0
 800b19e:	2301      	movls	r3, #1
 800b1a0:	e7f2      	b.n	800b188 <_dtoa_r+0xc84>
 800b1a2:	46d3      	mov	fp, sl
 800b1a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b1a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800b1a8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800b1ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b1ae:	e002      	b.n	800b1b6 <_dtoa_r+0xcb2>
 800b1b0:	f000 fda4 	bl	800bcfc <__multadd>
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff f901 	bl	800a3c0 <quorem>
 800b1be:	220a      	movs	r2, #10
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b1c8:	f807 8005 	strb.w	r8, [r7, r5]
 800b1cc:	3501      	adds	r5, #1
 800b1ce:	4648      	mov	r0, r9
 800b1d0:	45aa      	cmp	sl, r5
 800b1d2:	dced      	bgt.n	800b1b0 <_dtoa_r+0xcac>
 800b1d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b1d6:	46da      	mov	sl, fp
 800b1d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1da:	461f      	mov	r7, r3
 800b1dc:	960f      	str	r6, [sp, #60]	; 0x3c
 800b1de:	2a01      	cmp	r2, #1
 800b1e0:	bfac      	ite	ge
 800b1e2:	18ad      	addge	r5, r5, r2
 800b1e4:	3501      	addlt	r5, #1
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b1ea:	4648      	mov	r0, r9
 800b1ec:	f000 ff50 	bl	800c090 <__lshift>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800b1f4:	f000 ffac 	bl	800c150 <__mcmp>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	dd16      	ble.n	800b22a <_dtoa_r+0xd26>
 800b1fc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b200:	462b      	mov	r3, r5
 800b202:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b204:	1c69      	adds	r1, r5, #1
 800b206:	e002      	b.n	800b20e <_dtoa_r+0xd0a>
 800b208:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	2a39      	cmp	r2, #57	; 0x39
 800b210:	f040 8087 	bne.w	800b322 <_dtoa_r+0xe1e>
 800b214:	428b      	cmp	r3, r1
 800b216:	d1f7      	bne.n	800b208 <_dtoa_r+0xd04>
 800b218:	9806      	ldr	r0, [sp, #24]
 800b21a:	2231      	movs	r2, #49	; 0x31
 800b21c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b21e:	3001      	adds	r0, #1
 800b220:	9006      	str	r0, [sp, #24]
 800b222:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b226:	930a      	str	r3, [sp, #40]	; 0x28
 800b228:	e436      	b.n	800aa98 <_dtoa_r+0x594>
 800b22a:	d102      	bne.n	800b232 <_dtoa_r+0xd2e>
 800b22c:	f018 0f01 	tst.w	r8, #1
 800b230:	d1e4      	bne.n	800b1fc <_dtoa_r+0xcf8>
 800b232:	462a      	mov	r2, r5
 800b234:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800b238:	2b30      	cmp	r3, #48	; 0x30
 800b23a:	d0fa      	beq.n	800b232 <_dtoa_r+0xd2e>
 800b23c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b23e:	920a      	str	r2, [sp, #40]	; 0x28
 800b240:	e42a      	b.n	800aa98 <_dtoa_r+0x594>
 800b242:	2602      	movs	r6, #2
 800b244:	e50b      	b.n	800ac5e <_dtoa_r+0x75a>
 800b246:	4648      	mov	r0, r9
 800b248:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b24a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b24c:	f000 fed4 	bl	800bff8 <__pow5mult>
 800b250:	900f      	str	r0, [sp, #60]	; 0x3c
 800b252:	f7ff bbb8 	b.w	800a9c6 <_dtoa_r+0x4c2>
 800b256:	2100      	movs	r1, #0
 800b258:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b25c:	2000      	movs	r0, #0
 800b25e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800b262:	f002 f94b 	bl	800d4fc <__aeabi_dsub>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4630      	mov	r0, r6
 800b26c:	4639      	mov	r1, r7
 800b26e:	f002 fd6b 	bl	800dd48 <__aeabi_dcmplt>
 800b272:	2800      	cmp	r0, #0
 800b274:	f43f aebc 	beq.w	800aff0 <_dtoa_r+0xaec>
 800b278:	4643      	mov	r3, r8
 800b27a:	4619      	mov	r1, r3
 800b27c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b280:	2a30      	cmp	r2, #48	; 0x30
 800b282:	d0fa      	beq.n	800b27a <_dtoa_r+0xd76>
 800b284:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b286:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b288:	910a      	str	r1, [sp, #40]	; 0x28
 800b28a:	9406      	str	r4, [sp, #24]
 800b28c:	e41a      	b.n	800aac4 <_dtoa_r+0x5c0>
 800b28e:	4648      	mov	r0, r9
 800b290:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b292:	f000 feb1 	bl	800bff8 <__pow5mult>
 800b296:	900f      	str	r0, [sp, #60]	; 0x3c
 800b298:	f7ff bb95 	b.w	800a9c6 <_dtoa_r+0x4c2>
 800b29c:	2400      	movs	r4, #0
 800b29e:	46a2      	mov	sl, r4
 800b2a0:	e476      	b.n	800ab90 <_dtoa_r+0x68c>
 800b2a2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b2a4:	2c00      	cmp	r4, #0
 800b2a6:	d05a      	beq.n	800b35e <_dtoa_r+0xe5a>
 800b2a8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b2ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b2ae:	3303      	adds	r3, #3
 800b2b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b2b2:	e44c      	b.n	800ab4e <_dtoa_r+0x64a>
 800b2b4:	0801a7b8 	.word	0x0801a7b8
 800b2b8:	0801a8a8 	.word	0x0801a8a8
 800b2bc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800b2c0:	46a8      	mov	r8, r5
 800b2c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b2c4:	f7ff bb24 	b.w	800a910 <_dtoa_r+0x40c>
 800b2c8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b2ca:	1c72      	adds	r2, r6, #1
 800b2cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b2d4:	9406      	str	r4, [sp, #24]
 800b2d6:	f7ff bbf5 	b.w	800aac4 <_dtoa_r+0x5c0>
 800b2da:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b2dc:	2300      	movs	r3, #0
 800b2de:	1b45      	subs	r5, r0, r5
 800b2e0:	e435      	b.n	800ab4e <_dtoa_r+0x64a>
 800b2e2:	f1bb 0f00 	cmp.w	fp, #0
 800b2e6:	940f      	str	r4, [sp, #60]	; 0x3c
 800b2e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b2ec:	9c02      	ldr	r4, [sp, #8]
 800b2ee:	dd10      	ble.n	800b312 <_dtoa_r+0xe0e>
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b2f4:	4648      	mov	r0, r9
 800b2f6:	f000 fecb 	bl	800c090 <__lshift>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	900f      	str	r0, [sp, #60]	; 0x3c
 800b2fe:	f000 ff27 	bl	800c150 <__mcmp>
 800b302:	2800      	cmp	r0, #0
 800b304:	dd5e      	ble.n	800b3c4 <_dtoa_r+0xec0>
 800b306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b30a:	d046      	beq.n	800b39a <_dtoa_r+0xe96>
 800b30c:	9b08      	ldr	r3, [sp, #32]
 800b30e:	f103 0831 	add.w	r8, r3, #49	; 0x31
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	46b2      	mov	sl, r6
 800b316:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b318:	f803 8b01 	strb.w	r8, [r3], #1
 800b31c:	930a      	str	r3, [sp, #40]	; 0x28
 800b31e:	f7ff bbbb 	b.w	800aa98 <_dtoa_r+0x594>
 800b322:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b324:	3201      	adds	r2, #1
 800b326:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b32a:	930a      	str	r3, [sp, #40]	; 0x28
 800b32c:	f7ff bbb4 	b.w	800aa98 <_dtoa_r+0x594>
 800b330:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b334:	4648      	mov	r0, r9
 800b336:	f000 fcb1 	bl	800bc9c <_Balloc>
 800b33a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b33e:	f10a 010c 	add.w	r1, sl, #12
 800b342:	3202      	adds	r2, #2
 800b344:	0092      	lsls	r2, r2, #2
 800b346:	4605      	mov	r5, r0
 800b348:	f100 000c 	add.w	r0, r0, #12
 800b34c:	f7fc f97a 	bl	8007644 <memcpy>
 800b350:	4648      	mov	r0, r9
 800b352:	4629      	mov	r1, r5
 800b354:	2201      	movs	r2, #1
 800b356:	f000 fe9b 	bl	800c090 <__lshift>
 800b35a:	4606      	mov	r6, r0
 800b35c:	e5df      	b.n	800af1e <_dtoa_r+0xa1a>
 800b35e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b360:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b362:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b364:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b368:	f7ff bbf1 	b.w	800ab4e <_dtoa_r+0x64a>
 800b36c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b36e:	46b2      	mov	sl, r6
 800b370:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b374:	9c02      	ldr	r4, [sp, #8]
 800b376:	e736      	b.n	800b1e6 <_dtoa_r+0xce2>
 800b378:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b37c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b37e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b382:	9c02      	ldr	r4, [sp, #8]
 800b384:	d009      	beq.n	800b39a <_dtoa_r+0xe96>
 800b386:	9b07      	ldr	r3, [sp, #28]
 800b388:	f108 0801 	add.w	r8, r8, #1
 800b38c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b38e:	46b2      	mov	sl, r6
 800b390:	f803 8b01 	strb.w	r8, [r3], #1
 800b394:	930a      	str	r3, [sp, #40]	; 0x28
 800b396:	f7ff bb7f 	b.w	800aa98 <_dtoa_r+0x594>
 800b39a:	9d07      	ldr	r5, [sp, #28]
 800b39c:	2339      	movs	r3, #57	; 0x39
 800b39e:	46b2      	mov	sl, r6
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	f805 3b01 	strb.w	r3, [r5], #1
 800b3a6:	e72b      	b.n	800b200 <_dtoa_r+0xcfc>
 800b3a8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b3ac:	940f      	str	r4, [sp, #60]	; 0x3c
 800b3ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b3b2:	9c02      	ldr	r4, [sp, #8]
 800b3b4:	d0f1      	beq.n	800b39a <_dtoa_r+0xe96>
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	dca8      	bgt.n	800b30c <_dtoa_r+0xe08>
 800b3ba:	e7aa      	b.n	800b312 <_dtoa_r+0xe0e>
 800b3bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b3be:	940a      	str	r4, [sp, #40]	; 0x28
 800b3c0:	f7ff bb80 	b.w	800aac4 <_dtoa_r+0x5c0>
 800b3c4:	d1a5      	bne.n	800b312 <_dtoa_r+0xe0e>
 800b3c6:	f018 0f01 	tst.w	r8, #1
 800b3ca:	d0a2      	beq.n	800b312 <_dtoa_r+0xe0e>
 800b3cc:	e79b      	b.n	800b306 <_dtoa_r+0xe02>
 800b3ce:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b3d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b3d2:	9406      	str	r4, [sp, #24]
 800b3d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b3d6:	940a      	str	r4, [sp, #40]	; 0x28
 800b3d8:	f7ff bb74 	b.w	800aac4 <_dtoa_r+0x5c0>
 800b3dc:	4651      	mov	r1, sl
 800b3de:	220a      	movs	r2, #10
 800b3e0:	4648      	mov	r0, r9
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f000 fc8a 	bl	800bcfc <__multadd>
 800b3e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3ea:	920e      	str	r2, [sp, #56]	; 0x38
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	f7ff bb2a 	b.w	800aa46 <_dtoa_r+0x542>
 800b3f2:	bf18      	it	ne
 800b3f4:	f1c3 033c 	rsbne	r3, r3, #60	; 0x3c
 800b3f8:	f43f ab10 	beq.w	800aa1c <_dtoa_r+0x518>
 800b3fc:	e577      	b.n	800aeee <_dtoa_r+0x9ea>
 800b3fe:	bf00      	nop

0800b400 <_fflush_r>:
 800b400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b404:	4680      	mov	r8, r0
 800b406:	460c      	mov	r4, r1
 800b408:	b110      	cbz	r0, 800b410 <_fflush_r+0x10>
 800b40a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d066      	beq.n	800b4de <_fflush_r+0xde>
 800b410:	89a6      	ldrh	r6, [r4, #12]
 800b412:	2e00      	cmp	r6, #0
 800b414:	d060      	beq.n	800b4d8 <_fflush_r+0xd8>
 800b416:	b233      	sxth	r3, r6
 800b418:	f013 0008 	ands.w	r0, r3, #8
 800b41c:	d01e      	beq.n	800b45c <_fflush_r+0x5c>
 800b41e:	6926      	ldr	r6, [r4, #16]
 800b420:	2e00      	cmp	r6, #0
 800b422:	f000 8088 	beq.w	800b536 <_fflush_r+0x136>
 800b426:	079b      	lsls	r3, r3, #30
 800b428:	6825      	ldr	r5, [r4, #0]
 800b42a:	6026      	str	r6, [r4, #0]
 800b42c:	bf08      	it	eq
 800b42e:	6963      	ldreq	r3, [r4, #20]
 800b430:	ebc6 0505 	rsb	r5, r6, r5
 800b434:	bf18      	it	ne
 800b436:	2300      	movne	r3, #0
 800b438:	60a3      	str	r3, [r4, #8]
 800b43a:	e00a      	b.n	800b452 <_fflush_r+0x52>
 800b43c:	4632      	mov	r2, r6
 800b43e:	462b      	mov	r3, r5
 800b440:	69e1      	ldr	r1, [r4, #28]
 800b442:	4640      	mov	r0, r8
 800b444:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800b446:	47b8      	blx	r7
 800b448:	2800      	cmp	r0, #0
 800b44a:	ebc0 0505 	rsb	r5, r0, r5
 800b44e:	4406      	add	r6, r0
 800b450:	dd65      	ble.n	800b51e <_fflush_r+0x11e>
 800b452:	2d00      	cmp	r5, #0
 800b454:	dcf2      	bgt.n	800b43c <_fflush_r+0x3c>
 800b456:	2000      	movs	r0, #0
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45c:	6862      	ldr	r2, [r4, #4]
 800b45e:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	2a00      	cmp	r2, #0
 800b466:	dd62      	ble.n	800b52e <_fflush_r+0x12e>
 800b468:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	d063      	beq.n	800b536 <_fflush_r+0x136>
 800b46e:	b29b      	uxth	r3, r3
 800b470:	2200      	movs	r2, #0
 800b472:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 800b476:	f8d8 5000 	ldr.w	r5, [r8]
 800b47a:	f8c8 2000 	str.w	r2, [r8]
 800b47e:	bf18      	it	ne
 800b480:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800b482:	d033      	beq.n	800b4ec <_fflush_r+0xec>
 800b484:	0759      	lsls	r1, r3, #29
 800b486:	d505      	bpl.n	800b494 <_fflush_r+0x94>
 800b488:	6861      	ldr	r1, [r4, #4]
 800b48a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b48c:	1a52      	subs	r2, r2, r1
 800b48e:	b10b      	cbz	r3, 800b494 <_fflush_r+0x94>
 800b490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b492:	1ad2      	subs	r2, r2, r3
 800b494:	2300      	movs	r3, #0
 800b496:	69e1      	ldr	r1, [r4, #28]
 800b498:	4640      	mov	r0, r8
 800b49a:	47b0      	blx	r6
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d030      	beq.n	800b502 <_fflush_r+0x102>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	6922      	ldr	r2, [r4, #16]
 800b4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4aa:	6061      	str	r1, [r4, #4]
 800b4ac:	041b      	lsls	r3, r3, #16
 800b4ae:	6022      	str	r2, [r4, #0]
 800b4b0:	0c1b      	lsrs	r3, r3, #16
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	04d9      	lsls	r1, r3, #19
 800b4b6:	d415      	bmi.n	800b4e4 <_fflush_r+0xe4>
 800b4b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b4ba:	f8c8 5000 	str.w	r5, [r8]
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d042      	beq.n	800b548 <_fflush_r+0x148>
 800b4c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	d002      	beq.n	800b4d0 <_fflush_r+0xd0>
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f000 fa1e 	bl	800b90c <_free_r>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	6320      	str	r0, [r4, #48]	; 0x30
 800b4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d8:	4630      	mov	r0, r6
 800b4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4de:	f000 f8b1 	bl	800b644 <__sinit>
 800b4e2:	e795      	b.n	800b410 <_fflush_r+0x10>
 800b4e4:	1c42      	adds	r2, r0, #1
 800b4e6:	d029      	beq.n	800b53c <_fflush_r+0x13c>
 800b4e8:	6520      	str	r0, [r4, #80]	; 0x50
 800b4ea:	e7e5      	b.n	800b4b8 <_fflush_r+0xb8>
 800b4ec:	463a      	mov	r2, r7
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	69e1      	ldr	r1, [r4, #28]
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	47b0      	blx	r6
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	d028      	beq.n	800b54e <_fflush_r+0x14e>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b500:	e7c0      	b.n	800b484 <_fflush_r+0x84>
 800b502:	f8d8 3000 	ldr.w	r3, [r8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0ca      	beq.n	800b4a0 <_fflush_r+0xa0>
 800b50a:	2b1d      	cmp	r3, #29
 800b50c:	d0c8      	beq.n	800b4a0 <_fflush_r+0xa0>
 800b50e:	2b16      	cmp	r3, #22
 800b510:	d0c6      	beq.n	800b4a0 <_fflush_r+0xa0>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f04f 30ff 	mov.w	r0, #4294967295
 800b524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b52e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b530:	2a00      	cmp	r2, #0
 800b532:	dc99      	bgt.n	800b468 <_fflush_r+0x68>
 800b534:	e7d1      	b.n	800b4da <_fflush_r+0xda>
 800b536:	4630      	mov	r0, r6
 800b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53c:	f8d8 3000 	ldr.w	r3, [r8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1b9      	bne.n	800b4b8 <_fflush_r+0xb8>
 800b544:	6520      	str	r0, [r4, #80]	; 0x50
 800b546:	e7b7      	b.n	800b4b8 <_fflush_r+0xb8>
 800b548:	4608      	mov	r0, r1
 800b54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54e:	f8d8 3000 	ldr.w	r3, [r8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0d2      	beq.n	800b4fc <_fflush_r+0xfc>
 800b556:	f1a3 001d 	sub.w	r0, r3, #29
 800b55a:	4241      	negs	r1, r0
 800b55c:	eb41 0100 	adc.w	r1, r1, r0
 800b560:	2b16      	cmp	r3, #22
 800b562:	bf14      	ite	ne
 800b564:	460b      	movne	r3, r1
 800b566:	f041 0301 	orreq.w	r3, r1, #1
 800b56a:	b123      	cbz	r3, 800b576 <_fflush_r+0x176>
 800b56c:	f8c8 5000 	str.w	r5, [r8]
 800b570:	4638      	mov	r0, r7
 800b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	4610      	mov	r0, r2
 800b57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b584 <fflush>:
 800b584:	4601      	mov	r1, r0
 800b586:	b110      	cbz	r0, 800b58e <fflush+0xa>
 800b588:	4b03      	ldr	r3, [pc, #12]	; (800b598 <fflush+0x14>)
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	e738      	b.n	800b400 <_fflush_r>
 800b58e:	4b03      	ldr	r3, [pc, #12]	; (800b59c <fflush+0x18>)
 800b590:	4903      	ldr	r1, [pc, #12]	; (800b5a0 <fflush+0x1c>)
 800b592:	6818      	ldr	r0, [r3, #0]
 800b594:	f000 baa2 	b.w	800badc <_fwalk_reent>
 800b598:	20000008 	.word	0x20000008
 800b59c:	0801a760 	.word	0x0801a760
 800b5a0:	0800b401 	.word	0x0800b401

0800b5a4 <__fp_lock>:
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	4770      	bx	lr

0800b5a8 <__fp_unlock>:
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	4770      	bx	lr

0800b5ac <_cleanup_r>:
 800b5ac:	f24d 2165 	movw	r1, #53861	; 0xd265
 800b5b0:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b5b4:	f000 ba6c 	b.w	800ba90 <_fwalk>

0800b5b8 <std.isra.0>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2300      	movs	r3, #0
 800b5be:	460e      	mov	r6, r1
 800b5c0:	4615      	mov	r5, r2
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	6063      	str	r3, [r4, #4]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	60a3      	str	r3, [r4, #8]
 800b5ca:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 800b5ce:	6663      	str	r3, [r4, #100]	; 0x64
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	6123      	str	r3, [r4, #16]
 800b5d4:	6163      	str	r3, [r4, #20]
 800b5d6:	61a3      	str	r3, [r4, #24]
 800b5d8:	81a6      	strh	r6, [r4, #12]
 800b5da:	81e5      	strh	r5, [r4, #14]
 800b5dc:	f7fc f8d8 	bl	8007790 <memset>
 800b5e0:	f24c 53f5 	movw	r3, #50677	; 0xc5f5
 800b5e4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b5e8:	6223      	str	r3, [r4, #32]
 800b5ea:	f24c 631d 	movw	r3, #50717	; 0xc61d
 800b5ee:	61e4      	str	r4, [r4, #28]
 800b5f0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b5f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5f6:	f24c 6355 	movw	r3, #50773	; 0xc655
 800b5fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b5fe:	62a3      	str	r3, [r4, #40]	; 0x28
 800b600:	f24c 6379 	movw	r3, #50809	; 0xc679
 800b604:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b60a:	bd70      	pop	{r4, r5, r6, pc}

0800b60c <__sfmoreglue>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	2568      	movs	r5, #104	; 0x68
 800b610:	460e      	mov	r6, r1
 800b612:	fb05 f501 	mul.w	r5, r5, r1
 800b616:	f105 010c 	add.w	r1, r5, #12
 800b61a:	f7fb fced 	bl	8006ff8 <_malloc_r>
 800b61e:	4604      	mov	r4, r0
 800b620:	b140      	cbz	r0, 800b634 <__sfmoreglue+0x28>
 800b622:	2100      	movs	r1, #0
 800b624:	f100 000c 	add.w	r0, r0, #12
 800b628:	e884 0042 	stmia.w	r4, {r1, r6}
 800b62c:	462a      	mov	r2, r5
 800b62e:	60a0      	str	r0, [r4, #8]
 800b630:	f7fc f8ae 	bl	8007790 <memset>
 800b634:	4620      	mov	r0, r4
 800b636:	bd70      	pop	{r4, r5, r6, pc}

0800b638 <_cleanup>:
 800b638:	f24a 7360 	movw	r3, #42848	; 0xa760
 800b63c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b640:	6818      	ldr	r0, [r3, #0]
 800b642:	e7b3      	b.n	800b5ac <_cleanup_r>

0800b644 <__sinit>:
 800b644:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b646:	b570      	push	{r4, r5, r6, lr}
 800b648:	4604      	mov	r4, r0
 800b64a:	b103      	cbz	r3, 800b64e <__sinit+0xa>
 800b64c:	bd70      	pop	{r4, r5, r6, pc}
 800b64e:	4e0e      	ldr	r6, [pc, #56]	; (800b688 <__sinit+0x44>)
 800b650:	2501      	movs	r5, #1
 800b652:	2104      	movs	r1, #4
 800b654:	461a      	mov	r2, r3
 800b656:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 800b65a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800b65e:	63e6      	str	r6, [r4, #60]	; 0x3c
 800b660:	2603      	movs	r6, #3
 800b662:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800b666:	6840      	ldr	r0, [r0, #4]
 800b668:	63a5      	str	r5, [r4, #56]	; 0x38
 800b66a:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
 800b66e:	f7ff ffa3 	bl	800b5b8 <std.isra.0>
 800b672:	68a0      	ldr	r0, [r4, #8]
 800b674:	2109      	movs	r1, #9
 800b676:	462a      	mov	r2, r5
 800b678:	f7ff ff9e 	bl	800b5b8 <std.isra.0>
 800b67c:	68e0      	ldr	r0, [r4, #12]
 800b67e:	2112      	movs	r1, #18
 800b680:	2202      	movs	r2, #2
 800b682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b686:	e797      	b.n	800b5b8 <std.isra.0>
 800b688:	0800b5ad 	.word	0x0800b5ad

0800b68c <__sfp>:
 800b68c:	4b25      	ldr	r3, [pc, #148]	; (800b724 <__sfp+0x98>)
 800b68e:	b570      	push	{r4, r5, r6, lr}
 800b690:	4606      	mov	r6, r0
 800b692:	681d      	ldr	r5, [r3, #0]
 800b694:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b696:	2b00      	cmp	r3, #0
 800b698:	d034      	beq.n	800b704 <__sfp+0x78>
 800b69a:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800b69e:	686b      	ldr	r3, [r5, #4]
 800b6a0:	68a9      	ldr	r1, [r5, #8]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	d411      	bmi.n	800b6ca <__sfp+0x3e>
 800b6a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	b18a      	cbz	r2, 800b6d2 <__sfp+0x46>
 800b6ae:	f101 0068 	add.w	r0, r1, #104	; 0x68
 800b6b2:	e002      	b.n	800b6ba <__sfp+0x2e>
 800b6b4:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
 800b6b8:	b15a      	cbz	r2, 800b6d2 <__sfp+0x46>
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	3468      	adds	r4, #104	; 0x68
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	ebc1 0204 	rsb	r2, r1, r4
 800b6c6:	4402      	add	r2, r0
 800b6c8:	d1f4      	bne.n	800b6b4 <__sfp+0x28>
 800b6ca:	6828      	ldr	r0, [r5, #0]
 800b6cc:	b1f0      	cbz	r0, 800b70c <__sfp+0x80>
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	e7e5      	b.n	800b69e <__sfp+0x12>
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6dc:	81e3      	strh	r3, [r4, #14]
 800b6de:	6665      	str	r5, [r4, #100]	; 0x64
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	6025      	str	r5, [r4, #0]
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	2208      	movs	r2, #8
 800b6ea:	60a5      	str	r5, [r4, #8]
 800b6ec:	6065      	str	r5, [r4, #4]
 800b6ee:	6125      	str	r5, [r4, #16]
 800b6f0:	6165      	str	r5, [r4, #20]
 800b6f2:	61a5      	str	r5, [r4, #24]
 800b6f4:	f7fc f84c 	bl	8007790 <memset>
 800b6f8:	6325      	str	r5, [r4, #48]	; 0x30
 800b6fa:	6365      	str	r5, [r4, #52]	; 0x34
 800b6fc:	6465      	str	r5, [r4, #68]	; 0x44
 800b6fe:	64a5      	str	r5, [r4, #72]	; 0x48
 800b700:	4620      	mov	r0, r4
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	4628      	mov	r0, r5
 800b706:	f7ff ff9d 	bl	800b644 <__sinit>
 800b70a:	e7c6      	b.n	800b69a <__sfp+0xe>
 800b70c:	4630      	mov	r0, r6
 800b70e:	2104      	movs	r1, #4
 800b710:	f7ff ff7c 	bl	800b60c <__sfmoreglue>
 800b714:	6028      	str	r0, [r5, #0]
 800b716:	2800      	cmp	r0, #0
 800b718:	d1d9      	bne.n	800b6ce <__sfp+0x42>
 800b71a:	230c      	movs	r3, #12
 800b71c:	4604      	mov	r4, r0
 800b71e:	6033      	str	r3, [r6, #0]
 800b720:	e7ee      	b.n	800b700 <__sfp+0x74>
 800b722:	bf00      	nop
 800b724:	0801a760 	.word	0x0801a760

0800b728 <__sfp_lock_acquire>:
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop

0800b72c <__sfp_lock_release>:
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop

0800b730 <__sinit_lock_acquire>:
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop

0800b734 <__sinit_lock_release>:
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop

0800b738 <__fp_lock_all>:
 800b738:	f240 0308 	movw	r3, #8
 800b73c:	f24b 51a5 	movw	r1, #46501	; 0xb5a5
 800b740:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b744:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f000 b9a1 	b.w	800ba90 <_fwalk>
 800b74e:	bf00      	nop

0800b750 <__fp_unlock_all>:
 800b750:	f240 0308 	movw	r3, #8
 800b754:	f24b 51a9 	movw	r1, #46505	; 0xb5a9
 800b758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b75c:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	f000 b995 	b.w	800ba90 <_fwalk>
 800b766:	bf00      	nop

0800b768 <_fputwc_r>:
 800b768:	8993      	ldrh	r3, [r2, #12]
 800b76a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b76e:	4614      	mov	r4, r2
 800b770:	049a      	lsls	r2, r3, #18
 800b772:	b083      	sub	sp, #12
 800b774:	bf5e      	ittt	pl
 800b776:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800b77a:	81a3      	strhpl	r3, [r4, #12]
 800b77c:	6e62      	ldrpl	r2, [r4, #100]	; 0x64
 800b77e:	4607      	mov	r7, r0
 800b780:	460e      	mov	r6, r1
 800b782:	bf5c      	itt	pl
 800b784:	f442 5300 	orrpl.w	r3, r2, #8192	; 0x2000
 800b788:	6663      	strpl	r3, [r4, #100]	; 0x64
 800b78a:	f000 f9f9 	bl	800bb80 <__locale_mb_cur_max>
 800b78e:	2801      	cmp	r0, #1
 800b790:	d04b      	beq.n	800b82a <_fputwc_r+0xc2>
 800b792:	ad01      	add	r5, sp, #4
 800b794:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b798:	4638      	mov	r0, r7
 800b79a:	4629      	mov	r1, r5
 800b79c:	4632      	mov	r2, r6
 800b79e:	f001 fc6f 	bl	800d080 <_wcrtomb_r>
 800b7a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7a6:	4681      	mov	r9, r0
 800b7a8:	d028      	beq.n	800b7fc <_fputwc_r+0x94>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d03b      	beq.n	800b826 <_fputwc_r+0xbe>
 800b7ae:	f04f 0800 	mov.w	r8, #0
 800b7b2:	e00a      	b.n	800b7ca <_fputwc_r+0x62>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	f815 2008 	ldrb.w	r2, [r5, r8]
 800b7ba:	701a      	strb	r2, [r3, #0]
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	f108 0801 	add.w	r8, r8, #1
 800b7c6:	45c8      	cmp	r8, r9
 800b7c8:	d22d      	bcs.n	800b826 <_fputwc_r+0xbe>
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	60a3      	str	r3, [r4, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	daef      	bge.n	800b7b4 <_fputwc_r+0x4c>
 800b7d4:	69a2      	ldr	r2, [r4, #24]
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	db16      	blt.n	800b80a <_fputwc_r+0xa2>
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	f815 2008 	ldrb.w	r2, [r5, r8]
 800b7e2:	701a      	strb	r2, [r3, #0]
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	7819      	ldrb	r1, [r3, #0]
 800b7ea:	290a      	cmp	r1, #10
 800b7ec:	bf18      	it	ne
 800b7ee:	6022      	strne	r2, [r4, #0]
 800b7f0:	d00d      	beq.n	800b80e <_fputwc_r+0xa6>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d0e5      	beq.n	800b7c2 <_fputwc_r+0x5a>
 800b7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fa:	e003      	b.n	800b804 <_fputwc_r+0x9c>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	b003      	add	sp, #12
 800b806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b80a:	f815 1008 	ldrb.w	r1, [r5, r8]
 800b80e:	4638      	mov	r0, r7
 800b810:	4622      	mov	r2, r4
 800b812:	f7fe fcbd 	bl	800a190 <__swbuf_r>
 800b816:	f1a0 33ff 	sub.w	r3, r0, #4294967295
 800b81a:	4258      	negs	r0, r3
 800b81c:	eb40 0003 	adc.w	r0, r0, r3
 800b820:	2800      	cmp	r0, #0
 800b822:	d0ce      	beq.n	800b7c2 <_fputwc_r+0x5a>
 800b824:	e7e7      	b.n	800b7f6 <_fputwc_r+0x8e>
 800b826:	4630      	mov	r0, r6
 800b828:	e7ec      	b.n	800b804 <_fputwc_r+0x9c>
 800b82a:	1c33      	adds	r3, r6, #0
 800b82c:	bf18      	it	ne
 800b82e:	2301      	movne	r3, #1
 800b830:	2eff      	cmp	r6, #255	; 0xff
 800b832:	bf8c      	ite	hi
 800b834:	2300      	movhi	r3, #0
 800b836:	f003 0301 	andls.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d0a9      	beq.n	800b792 <_fputwc_r+0x2a>
 800b83e:	ad02      	add	r5, sp, #8
 800b840:	4681      	mov	r9, r0
 800b842:	f805 6d04 	strb.w	r6, [r5, #-4]!
 800b846:	e7b2      	b.n	800b7ae <_fputwc_r+0x46>

0800b848 <fputwc>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	4606      	mov	r6, r0
 800b84c:	4c06      	ldr	r4, [pc, #24]	; (800b868 <fputwc+0x20>)
 800b84e:	460d      	mov	r5, r1
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	b120      	cbz	r0, 800b85e <fputwc+0x16>
 800b854:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b856:	b913      	cbnz	r3, 800b85e <fputwc+0x16>
 800b858:	f7ff fef4 	bl	800b644 <__sinit>
 800b85c:	6820      	ldr	r0, [r4, #0]
 800b85e:	4631      	mov	r1, r6
 800b860:	462a      	mov	r2, r5
 800b862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b866:	e77f      	b.n	800b768 <_fputwc_r>
 800b868:	20000008 	.word	0x20000008

0800b86c <_malloc_trim_r>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	4604      	mov	r4, r0
 800b870:	4d23      	ldr	r5, [pc, #140]	; (800b900 <_malloc_trim_r+0x94>)
 800b872:	460f      	mov	r7, r1
 800b874:	f00c fcec 	bl	8018250 <__malloc_lock>
 800b878:	4620      	mov	r0, r4
 800b87a:	68ab      	ldr	r3, [r5, #8]
 800b87c:	685e      	ldr	r6, [r3, #4]
 800b87e:	f026 0603 	bic.w	r6, r6, #3
 800b882:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 800b886:	330f      	adds	r3, #15
 800b888:	1bdf      	subs	r7, r3, r7
 800b88a:	0b3f      	lsrs	r7, r7, #12
 800b88c:	3f01      	subs	r7, #1
 800b88e:	033f      	lsls	r7, r7, #12
 800b890:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800b894:	db1c      	blt.n	800b8d0 <_malloc_trim_r+0x64>
 800b896:	2100      	movs	r1, #0
 800b898:	f00c fc70 	bl	801817c <_sbrk_r>
 800b89c:	68ab      	ldr	r3, [r5, #8]
 800b89e:	199b      	adds	r3, r3, r6
 800b8a0:	4298      	cmp	r0, r3
 800b8a2:	d019      	beq.n	800b8d8 <_malloc_trim_r+0x6c>
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f00c fcdd 	bl	8018264 <__malloc_unlock>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f00c fc63 	bl	801817c <_sbrk_r>
 800b8b6:	68ab      	ldr	r3, [r5, #8]
 800b8b8:	1ac2      	subs	r2, r0, r3
 800b8ba:	2a0f      	cmp	r2, #15
 800b8bc:	dd07      	ble.n	800b8ce <_malloc_trim_r+0x62>
 800b8be:	f042 0201 	orr.w	r2, r2, #1
 800b8c2:	605a      	str	r2, [r3, #4]
 800b8c4:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <_malloc_trim_r+0x98>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	1ac0      	subs	r0, r0, r3
 800b8ca:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <_malloc_trim_r+0x9c>)
 800b8cc:	6018      	str	r0, [r3, #0]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f00c fcc8 	bl	8018264 <__malloc_unlock>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d8:	4279      	negs	r1, r7
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f00c fc4e 	bl	801817c <_sbrk_r>
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	d0e4      	beq.n	800b8ae <_malloc_trim_r+0x42>
 800b8e4:	4b08      	ldr	r3, [pc, #32]	; (800b908 <_malloc_trim_r+0x9c>)
 800b8e6:	1bf6      	subs	r6, r6, r7
 800b8e8:	68a9      	ldr	r1, [r5, #8]
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f046 0601 	orr.w	r6, r6, #1
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	604e      	str	r6, [r1, #4]
 800b8f4:	1bd7      	subs	r7, r2, r7
 800b8f6:	601f      	str	r7, [r3, #0]
 800b8f8:	f00c fcb4 	bl	8018264 <__malloc_unlock>
 800b8fc:	2001      	movs	r0, #1
 800b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b900:	20000438 	.word	0x20000438
 800b904:	20000840 	.word	0x20000840
 800b908:	20000940 	.word	0x20000940

0800b90c <_free_r>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	460d      	mov	r5, r1
 800b910:	4604      	mov	r4, r0
 800b912:	2900      	cmp	r1, #0
 800b914:	d06f      	beq.n	800b9f6 <_free_r+0xea>
 800b916:	f00c fc9b 	bl	8018250 <__malloc_lock>
 800b91a:	4e59      	ldr	r6, [pc, #356]	; (800ba80 <_free_r+0x174>)
 800b91c:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800b920:	f1a5 0108 	sub.w	r1, r5, #8
 800b924:	f020 0301 	bic.w	r3, r0, #1
 800b928:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800b92c:	18ca      	adds	r2, r1, r3
 800b92e:	4594      	cmp	ip, r2
 800b930:	6857      	ldr	r7, [r2, #4]
 800b932:	f027 0703 	bic.w	r7, r7, #3
 800b936:	d07b      	beq.n	800ba30 <_free_r+0x124>
 800b938:	f010 0001 	ands.w	r0, r0, #1
 800b93c:	6057      	str	r7, [r2, #4]
 800b93e:	d04a      	beq.n	800b9d6 <_free_r+0xca>
 800b940:	2000      	movs	r0, #0
 800b942:	19d5      	adds	r5, r2, r7
 800b944:	686d      	ldr	r5, [r5, #4]
 800b946:	f015 0f01 	tst.w	r5, #1
 800b94a:	d106      	bne.n	800b95a <_free_r+0x4e>
 800b94c:	19db      	adds	r3, r3, r7
 800b94e:	6895      	ldr	r5, [r2, #8]
 800b950:	2800      	cmp	r0, #0
 800b952:	d061      	beq.n	800ba18 <_free_r+0x10c>
 800b954:	68d2      	ldr	r2, [r2, #12]
 800b956:	60ea      	str	r2, [r5, #12]
 800b958:	6095      	str	r5, [r2, #8]
 800b95a:	f043 0201 	orr.w	r2, r3, #1
 800b95e:	50cb      	str	r3, [r1, r3]
 800b960:	604a      	str	r2, [r1, #4]
 800b962:	2800      	cmp	r0, #0
 800b964:	d132      	bne.n	800b9cc <_free_r+0xc0>
 800b966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b96a:	d345      	bcc.n	800b9f8 <_free_r+0xec>
 800b96c:	099d      	lsrs	r5, r3, #6
 800b96e:	0a5a      	lsrs	r2, r3, #9
 800b970:	3538      	adds	r5, #56	; 0x38
 800b972:	00e8      	lsls	r0, r5, #3
 800b974:	2a04      	cmp	r2, #4
 800b976:	d916      	bls.n	800b9a6 <_free_r+0x9a>
 800b978:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800b97c:	00e8      	lsls	r0, r5, #3
 800b97e:	2a14      	cmp	r2, #20
 800b980:	d911      	bls.n	800b9a6 <_free_r+0x9a>
 800b982:	0b1d      	lsrs	r5, r3, #12
 800b984:	356e      	adds	r5, #110	; 0x6e
 800b986:	00e8      	lsls	r0, r5, #3
 800b988:	2a54      	cmp	r2, #84	; 0x54
 800b98a:	d90c      	bls.n	800b9a6 <_free_r+0x9a>
 800b98c:	0bdd      	lsrs	r5, r3, #15
 800b98e:	3577      	adds	r5, #119	; 0x77
 800b990:	00e8      	lsls	r0, r5, #3
 800b992:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b996:	d906      	bls.n	800b9a6 <_free_r+0x9a>
 800b998:	f240 5054 	movw	r0, #1364	; 0x554
 800b99c:	4282      	cmp	r2, r0
 800b99e:	d86b      	bhi.n	800ba78 <_free_r+0x16c>
 800b9a0:	0c9d      	lsrs	r5, r3, #18
 800b9a2:	357c      	adds	r5, #124	; 0x7c
 800b9a4:	00e8      	lsls	r0, r5, #3
 800b9a6:	1986      	adds	r6, r0, r6
 800b9a8:	4835      	ldr	r0, [pc, #212]	; (800ba80 <_free_r+0x174>)
 800b9aa:	68b2      	ldr	r2, [r6, #8]
 800b9ac:	42b2      	cmp	r2, r6
 800b9ae:	d103      	bne.n	800b9b8 <_free_r+0xac>
 800b9b0:	e059      	b.n	800ba66 <_free_r+0x15a>
 800b9b2:	6892      	ldr	r2, [r2, #8]
 800b9b4:	4296      	cmp	r6, r2
 800b9b6:	d004      	beq.n	800b9c2 <_free_r+0xb6>
 800b9b8:	6850      	ldr	r0, [r2, #4]
 800b9ba:	f020 0003 	bic.w	r0, r0, #3
 800b9be:	4283      	cmp	r3, r0
 800b9c0:	d3f7      	bcc.n	800b9b2 <_free_r+0xa6>
 800b9c2:	68d3      	ldr	r3, [r2, #12]
 800b9c4:	60cb      	str	r3, [r1, #12]
 800b9c6:	608a      	str	r2, [r1, #8]
 800b9c8:	60d1      	str	r1, [r2, #12]
 800b9ca:	6099      	str	r1, [r3, #8]
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b9d2:	f00c bc47 	b.w	8018264 <__malloc_unlock>
 800b9d6:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800b9da:	f106 0c08 	add.w	ip, r6, #8
 800b9de:	1b49      	subs	r1, r1, r5
 800b9e0:	195b      	adds	r3, r3, r5
 800b9e2:	688d      	ldr	r5, [r1, #8]
 800b9e4:	4565      	cmp	r5, ip
 800b9e6:	d03c      	beq.n	800ba62 <_free_r+0x156>
 800b9e8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800b9ec:	f8c5 c00c 	str.w	ip, [r5, #12]
 800b9f0:	f8cc 5008 	str.w	r5, [ip, #8]
 800b9f4:	e7a5      	b.n	800b942 <_free_r+0x36>
 800b9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9f8:	08db      	lsrs	r3, r3, #3
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	6875      	ldr	r5, [r6, #4]
 800b9fe:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ba02:	109b      	asrs	r3, r3, #2
 800ba04:	fa10 f303 	lsls.w	r3, r0, r3
 800ba08:	60ca      	str	r2, [r1, #12]
 800ba0a:	6890      	ldr	r0, [r2, #8]
 800ba0c:	432b      	orrs	r3, r5
 800ba0e:	6073      	str	r3, [r6, #4]
 800ba10:	6088      	str	r0, [r1, #8]
 800ba12:	60c1      	str	r1, [r0, #12]
 800ba14:	6091      	str	r1, [r2, #8]
 800ba16:	e7d9      	b.n	800b9cc <_free_r+0xc0>
 800ba18:	4f1a      	ldr	r7, [pc, #104]	; (800ba84 <_free_r+0x178>)
 800ba1a:	42bd      	cmp	r5, r7
 800ba1c:	d19a      	bne.n	800b954 <_free_r+0x48>
 800ba1e:	6171      	str	r1, [r6, #20]
 800ba20:	f043 0201 	orr.w	r2, r3, #1
 800ba24:	6131      	str	r1, [r6, #16]
 800ba26:	60cd      	str	r5, [r1, #12]
 800ba28:	608d      	str	r5, [r1, #8]
 800ba2a:	604a      	str	r2, [r1, #4]
 800ba2c:	50cb      	str	r3, [r1, r3]
 800ba2e:	e7cd      	b.n	800b9cc <_free_r+0xc0>
 800ba30:	07c2      	lsls	r2, r0, #31
 800ba32:	443b      	add	r3, r7
 800ba34:	d407      	bmi.n	800ba46 <_free_r+0x13a>
 800ba36:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800ba3a:	1a89      	subs	r1, r1, r2
 800ba3c:	189b      	adds	r3, r3, r2
 800ba3e:	6888      	ldr	r0, [r1, #8]
 800ba40:	68ca      	ldr	r2, [r1, #12]
 800ba42:	60c2      	str	r2, [r0, #12]
 800ba44:	6090      	str	r0, [r2, #8]
 800ba46:	f043 0201 	orr.w	r2, r3, #1
 800ba4a:	604a      	str	r2, [r1, #4]
 800ba4c:	4a0e      	ldr	r2, [pc, #56]	; (800ba88 <_free_r+0x17c>)
 800ba4e:	60b1      	str	r1, [r6, #8]
 800ba50:	6812      	ldr	r2, [r2, #0]
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d3ba      	bcc.n	800b9cc <_free_r+0xc0>
 800ba56:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <_free_r+0x180>)
 800ba58:	4620      	mov	r0, r4
 800ba5a:	6819      	ldr	r1, [r3, #0]
 800ba5c:	f7ff ff06 	bl	800b86c <_malloc_trim_r>
 800ba60:	e7b4      	b.n	800b9cc <_free_r+0xc0>
 800ba62:	2001      	movs	r0, #1
 800ba64:	e76d      	b.n	800b942 <_free_r+0x36>
 800ba66:	2701      	movs	r7, #1
 800ba68:	6846      	ldr	r6, [r0, #4]
 800ba6a:	10ad      	asrs	r5, r5, #2
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	fa17 f505 	lsls.w	r5, r7, r5
 800ba72:	4335      	orrs	r5, r6
 800ba74:	6045      	str	r5, [r0, #4]
 800ba76:	e7a5      	b.n	800b9c4 <_free_r+0xb8>
 800ba78:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800ba7c:	257e      	movs	r5, #126	; 0x7e
 800ba7e:	e792      	b.n	800b9a6 <_free_r+0x9a>
 800ba80:	20000438 	.word	0x20000438
 800ba84:	20000440 	.word	0x20000440
 800ba88:	20000844 	.word	0x20000844
 800ba8c:	2000093c 	.word	0x2000093c

0800ba90 <_fwalk>:
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	4606      	mov	r6, r0
 800ba96:	4688      	mov	r8, r1
 800ba98:	f7ff fe46 	bl	800b728 <__sfp_lock_acquire>
 800ba9c:	f516 7638 	adds.w	r6, r6, #736	; 0x2e0
 800baa0:	bf08      	it	eq
 800baa2:	4637      	moveq	r7, r6
 800baa4:	d015      	beq.n	800bad2 <_fwalk+0x42>
 800baa6:	2700      	movs	r7, #0
 800baa8:	6875      	ldr	r5, [r6, #4]
 800baaa:	68b4      	ldr	r4, [r6, #8]
 800baac:	3d01      	subs	r5, #1
 800baae:	d40d      	bmi.n	800bacc <_fwalk+0x3c>
 800bab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab4:	3d01      	subs	r5, #1
 800bab6:	b133      	cbz	r3, 800bac6 <_fwalk+0x36>
 800bab8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800babc:	4620      	mov	r0, r4
 800babe:	3301      	adds	r3, #1
 800bac0:	d001      	beq.n	800bac6 <_fwalk+0x36>
 800bac2:	47c0      	blx	r8
 800bac4:	4307      	orrs	r7, r0
 800bac6:	3468      	adds	r4, #104	; 0x68
 800bac8:	1c6b      	adds	r3, r5, #1
 800baca:	d1f1      	bne.n	800bab0 <_fwalk+0x20>
 800bacc:	6836      	ldr	r6, [r6, #0]
 800bace:	2e00      	cmp	r6, #0
 800bad0:	d1ea      	bne.n	800baa8 <_fwalk+0x18>
 800bad2:	f7ff fe2b 	bl	800b72c <__sfp_lock_release>
 800bad6:	4638      	mov	r0, r7
 800bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800badc <_fwalk_reent>:
 800badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae0:	4607      	mov	r7, r0
 800bae2:	4689      	mov	r9, r1
 800bae4:	f7ff fe20 	bl	800b728 <__sfp_lock_acquire>
 800bae8:	f517 7638 	adds.w	r6, r7, #736	; 0x2e0
 800baec:	bf08      	it	eq
 800baee:	46b0      	moveq	r8, r6
 800baf0:	d018      	beq.n	800bb24 <_fwalk_reent+0x48>
 800baf2:	f04f 0800 	mov.w	r8, #0
 800baf6:	6875      	ldr	r5, [r6, #4]
 800baf8:	68b4      	ldr	r4, [r6, #8]
 800bafa:	3d01      	subs	r5, #1
 800bafc:	d40f      	bmi.n	800bb1e <_fwalk_reent+0x42>
 800bafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb02:	3d01      	subs	r5, #1
 800bb04:	b143      	cbz	r3, 800bb18 <_fwalk_reent+0x3c>
 800bb06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	3301      	adds	r3, #1
 800bb10:	d002      	beq.n	800bb18 <_fwalk_reent+0x3c>
 800bb12:	47c8      	blx	r9
 800bb14:	ea48 0800 	orr.w	r8, r8, r0
 800bb18:	3468      	adds	r4, #104	; 0x68
 800bb1a:	1c6a      	adds	r2, r5, #1
 800bb1c:	d1ef      	bne.n	800bafe <_fwalk_reent+0x22>
 800bb1e:	6836      	ldr	r6, [r6, #0]
 800bb20:	2e00      	cmp	r6, #0
 800bb22:	d1e8      	bne.n	800baf6 <_fwalk_reent+0x1a>
 800bb24:	f7ff fe02 	bl	800b72c <__sfp_lock_release>
 800bb28:	4640      	mov	r0, r8
 800bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb2e:	bf00      	nop

0800bb30 <_setlocale_r>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	4614      	mov	r4, r2
 800bb34:	b122      	cbz	r2, 800bb40 <_setlocale_r+0x10>
 800bb36:	4610      	mov	r0, r2
 800bb38:	490b      	ldr	r1, [pc, #44]	; (800bb68 <_setlocale_r+0x38>)
 800bb3a:	f7fc f9df 	bl	8007efc <strcmp>
 800bb3e:	b908      	cbnz	r0, 800bb44 <_setlocale_r+0x14>
 800bb40:	480a      	ldr	r0, [pc, #40]	; (800bb6c <_setlocale_r+0x3c>)
 800bb42:	bd10      	pop	{r4, pc}
 800bb44:	4620      	mov	r0, r4
 800bb46:	4909      	ldr	r1, [pc, #36]	; (800bb6c <_setlocale_r+0x3c>)
 800bb48:	f7fc f9d8 	bl	8007efc <strcmp>
 800bb4c:	b908      	cbnz	r0, 800bb52 <_setlocale_r+0x22>
 800bb4e:	4807      	ldr	r0, [pc, #28]	; (800bb6c <_setlocale_r+0x3c>)
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	4620      	mov	r0, r4
 800bb54:	4906      	ldr	r1, [pc, #24]	; (800bb70 <_setlocale_r+0x40>)
 800bb56:	f7fc f9d1 	bl	8007efc <strcmp>
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <_setlocale_r+0x3c>)
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	bf0c      	ite	eq
 800bb60:	4618      	moveq	r0, r3
 800bb62:	2000      	movne	r0, #0
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	bf00      	nop
 800bb68:	0801e8b8 	.word	0x0801e8b8
 800bb6c:	0801e860 	.word	0x0801e860
 800bb70:	0801e82c 	.word	0x0801e82c

0800bb74 <__locale_charset>:
 800bb74:	f640 0048 	movw	r0, #2120	; 0x848
 800bb78:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop

0800bb80 <__locale_mb_cur_max>:
 800bb80:	f640 0348 	movw	r3, #2120	; 0x848
 800bb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb88:	6a18      	ldr	r0, [r3, #32]
 800bb8a:	4770      	bx	lr

0800bb8c <__locale_msgcharset>:
 800bb8c:	4800      	ldr	r0, [pc, #0]	; (800bb90 <__locale_msgcharset+0x4>)
 800bb8e:	4770      	bx	lr
 800bb90:	2000086c 	.word	0x2000086c

0800bb94 <__locale_cjk_lang>:
 800bb94:	2000      	movs	r0, #0
 800bb96:	4770      	bx	lr

0800bb98 <_localeconv_r>:
 800bb98:	4800      	ldr	r0, [pc, #0]	; (800bb9c <_localeconv_r+0x4>)
 800bb9a:	4770      	bx	lr
 800bb9c:	2000088c 	.word	0x2000088c

0800bba0 <setlocale>:
 800bba0:	f240 0308 	movw	r3, #8
 800bba4:	460a      	mov	r2, r1
 800bba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbaa:	4601      	mov	r1, r0
 800bbac:	6818      	ldr	r0, [r3, #0]
 800bbae:	e7bf      	b.n	800bb30 <_setlocale_r>

0800bbb0 <localeconv>:
 800bbb0:	4800      	ldr	r0, [pc, #0]	; (800bbb4 <localeconv+0x4>)
 800bbb2:	4770      	bx	lr
 800bbb4:	2000088c 	.word	0x2000088c

0800bbb8 <__smakebuf_r>:
 800bbb8:	898b      	ldrh	r3, [r1, #12]
 800bbba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	b091      	sub	sp, #68	; 0x44
 800bbc2:	0790      	lsls	r0, r2, #30
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	d439      	bmi.n	800bc3c <__smakebuf_r+0x84>
 800bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbcc:	2900      	cmp	r1, #0
 800bbce:	db19      	blt.n	800bc04 <__smakebuf_r+0x4c>
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	aa01      	add	r2, sp, #4
 800bbd4:	f00c faa4 	bl	8018120 <_fstat_r>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	db11      	blt.n	800bc00 <__smakebuf_r+0x48>
 800bbdc:	9b02      	ldr	r3, [sp, #8]
 800bbde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bbe2:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
 800bbe6:	424f      	negs	r7, r1
 800bbe8:	eb47 0701 	adc.w	r7, r7, r1
 800bbec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbf0:	d037      	beq.n	800bc62 <__smakebuf_r+0xaa>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800bbf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	e00b      	b.n	800bc18 <__smakebuf_r+0x60>
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bc08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bc0c:	bf14      	ite	ne
 800bc0e:	2640      	movne	r6, #64	; 0x40
 800bc10:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800bc14:	2700      	movs	r7, #0
 800bc16:	81a3      	strh	r3, [r4, #12]
 800bc18:	4628      	mov	r0, r5
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	f7fb f9ec 	bl	8006ff8 <_malloc_r>
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d029      	beq.n	800bc7a <__smakebuf_r+0xc2>
 800bc26:	4a1b      	ldr	r2, [pc, #108]	; (800bc94 <__smakebuf_r+0xdc>)
 800bc28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc2c:	63ea      	str	r2, [r5, #60]	; 0x3c
 800bc2e:	6020      	str	r0, [r4, #0]
 800bc30:	81a3      	strh	r3, [r4, #12]
 800bc32:	6120      	str	r0, [r4, #16]
 800bc34:	6166      	str	r6, [r4, #20]
 800bc36:	b947      	cbnz	r7, 800bc4a <__smakebuf_r+0x92>
 800bc38:	b011      	add	sp, #68	; 0x44
 800bc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc3c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800bc40:	600b      	str	r3, [r1, #0]
 800bc42:	610b      	str	r3, [r1, #16]
 800bc44:	2301      	movs	r3, #1
 800bc46:	614b      	str	r3, [r1, #20]
 800bc48:	e7f6      	b.n	800bc38 <__smakebuf_r+0x80>
 800bc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f00c fa86 	bl	8018160 <_isatty_r>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d0ef      	beq.n	800bc38 <__smakebuf_r+0x80>
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	f043 0301 	orr.w	r3, r3, #1
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	e7ea      	b.n	800bc38 <__smakebuf_r+0x80>
 800bc62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <__smakebuf_r+0xe0>)
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d1c3      	bne.n	800bbf2 <__smakebuf_r+0x3a>
 800bc6a:	89a2      	ldrh	r2, [r4, #12]
 800bc6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc70:	461e      	mov	r6, r3
 800bc72:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bc74:	4313      	orrs	r3, r2
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	e7ce      	b.n	800bc18 <__smakebuf_r+0x60>
 800bc7a:	059a      	lsls	r2, r3, #22
 800bc7c:	d4dc      	bmi.n	800bc38 <__smakebuf_r+0x80>
 800bc7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc82:	f043 0302 	orr.w	r3, r3, #2
 800bc86:	6022      	str	r2, [r4, #0]
 800bc88:	81a3      	strh	r3, [r4, #12]
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	6122      	str	r2, [r4, #16]
 800bc8e:	6163      	str	r3, [r4, #20]
 800bc90:	e7d2      	b.n	800bc38 <__smakebuf_r+0x80>
 800bc92:	bf00      	nop
 800bc94:	0800b5ad 	.word	0x0800b5ad
 800bc98:	0800c655 	.word	0x0800c655

0800bc9c <_Balloc>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4605      	mov	r5, r0
 800bca0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bca2:	460c      	mov	r4, r1
 800bca4:	b14b      	cbz	r3, 800bcba <_Balloc+0x1e>
 800bca6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bcaa:	b178      	cbz	r0, 800bccc <_Balloc+0x30>
 800bcac:	6802      	ldr	r2, [r0, #0]
 800bcae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	6103      	str	r3, [r0, #16]
 800bcb6:	60c3      	str	r3, [r0, #12]
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
 800bcba:	2104      	movs	r1, #4
 800bcbc:	2221      	movs	r2, #33	; 0x21
 800bcbe:	f001 fa5b 	bl	800d178 <_calloc_r>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d1ed      	bne.n	800bca6 <_Balloc+0xa>
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	2301      	movs	r3, #1
 800bcce:	4628      	mov	r0, r5
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	fa13 f504 	lsls.w	r5, r3, r4
 800bcd6:	1d6a      	adds	r2, r5, #5
 800bcd8:	0092      	lsls	r2, r2, #2
 800bcda:	f001 fa4d 	bl	800d178 <_calloc_r>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d0f3      	beq.n	800bcca <_Balloc+0x2e>
 800bce2:	6044      	str	r4, [r0, #4]
 800bce4:	6085      	str	r5, [r0, #8]
 800bce6:	e7e4      	b.n	800bcb2 <_Balloc+0x16>

0800bce8 <_Bfree>:
 800bce8:	b131      	cbz	r1, 800bcf8 <_Bfree+0x10>
 800bcea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bcec:	684a      	ldr	r2, [r1, #4]
 800bcee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bcf2:	6008      	str	r0, [r1, #0]
 800bcf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <__multadd>:
 800bcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcfe:	460c      	mov	r4, r1
 800bd00:	4605      	mov	r5, r0
 800bd02:	690e      	ldr	r6, [r1, #16]
 800bd04:	f101 0014 	add.w	r0, r1, #20
 800bd08:	b083      	sub	sp, #12
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	6807      	ldr	r7, [r0, #0]
 800bd0e:	3101      	adds	r1, #1
 800bd10:	fa1f fc87 	uxth.w	ip, r7
 800bd14:	0c3f      	lsrs	r7, r7, #16
 800bd16:	fb02 330c 	mla	r3, r2, ip, r3
 800bd1a:	fb02 f707 	mul.w	r7, r2, r7
 800bd1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	eb03 4c07 	add.w	ip, r3, r7, lsl #16
 800bd28:	0c3b      	lsrs	r3, r7, #16
 800bd2a:	428e      	cmp	r6, r1
 800bd2c:	f840 cb04 	str.w	ip, [r0], #4
 800bd30:	dcec      	bgt.n	800bd0c <__multadd+0x10>
 800bd32:	b13b      	cbz	r3, 800bd44 <__multadd+0x48>
 800bd34:	68a2      	ldr	r2, [r4, #8]
 800bd36:	4296      	cmp	r6, r2
 800bd38:	da07      	bge.n	800bd4a <__multadd+0x4e>
 800bd3a:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800bd3e:	3601      	adds	r6, #1
 800bd40:	6126      	str	r6, [r4, #16]
 800bd42:	6153      	str	r3, [r2, #20]
 800bd44:	4620      	mov	r0, r4
 800bd46:	b003      	add	sp, #12
 800bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4a:	6861      	ldr	r1, [r4, #4]
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	3101      	adds	r1, #1
 800bd52:	f7ff ffa3 	bl	800bc9c <_Balloc>
 800bd56:	6922      	ldr	r2, [r4, #16]
 800bd58:	f104 010c 	add.w	r1, r4, #12
 800bd5c:	3202      	adds	r2, #2
 800bd5e:	0092      	lsls	r2, r2, #2
 800bd60:	4607      	mov	r7, r0
 800bd62:	f100 000c 	add.w	r0, r0, #12
 800bd66:	f7fb fc6d 	bl	8007644 <memcpy>
 800bd6a:	6861      	ldr	r1, [r4, #4]
 800bd6c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800bd74:	6020      	str	r0, [r4, #0]
 800bd76:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 800bd7a:	463c      	mov	r4, r7
 800bd7c:	e7dd      	b.n	800bd3a <__multadd+0x3e>
 800bd7e:	bf00      	nop

0800bd80 <__s2b>:
 800bd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd84:	f648 6439 	movw	r4, #36409	; 0x8e39
 800bd88:	461e      	mov	r6, r3
 800bd8a:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 800bd8e:	f103 0308 	add.w	r3, r3, #8
 800bd92:	4688      	mov	r8, r1
 800bd94:	4605      	mov	r5, r0
 800bd96:	4617      	mov	r7, r2
 800bd98:	fb84 1403 	smull	r1, r4, r4, r3
 800bd9c:	17db      	asrs	r3, r3, #31
 800bd9e:	2100      	movs	r1, #0
 800bda0:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	dd05      	ble.n	800bdb4 <__s2b+0x34>
 800bda8:	2201      	movs	r2, #1
 800bdaa:	2100      	movs	r1, #0
 800bdac:	0052      	lsls	r2, r2, #1
 800bdae:	3101      	adds	r1, #1
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	dcfb      	bgt.n	800bdac <__s2b+0x2c>
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f7ff ff71 	bl	800bc9c <_Balloc>
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	6143      	str	r3, [r0, #20]
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	2f09      	cmp	r7, #9
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	6103      	str	r3, [r0, #16]
 800bdc6:	dd21      	ble.n	800be0c <__s2b+0x8c>
 800bdc8:	f108 0909 	add.w	r9, r8, #9
 800bdcc:	2409      	movs	r4, #9
 800bdce:	f818 3004 	ldrb.w	r3, [r8, r4]
 800bdd2:	220a      	movs	r2, #10
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	3401      	adds	r4, #1
 800bdd8:	3b30      	subs	r3, #48	; 0x30
 800bdda:	f7ff ff8f 	bl	800bcfc <__multadd>
 800bdde:	42bc      	cmp	r4, r7
 800bde0:	4601      	mov	r1, r0
 800bde2:	d1f4      	bne.n	800bdce <__s2b+0x4e>
 800bde4:	eb09 0804 	add.w	r8, r9, r4
 800bde8:	f1a8 0808 	sub.w	r8, r8, #8
 800bdec:	42a6      	cmp	r6, r4
 800bdee:	dd0a      	ble.n	800be06 <__s2b+0x86>
 800bdf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bdf4:	220a      	movs	r2, #10
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	3401      	adds	r4, #1
 800bdfa:	3b30      	subs	r3, #48	; 0x30
 800bdfc:	f7ff ff7e 	bl	800bcfc <__multadd>
 800be00:	42b4      	cmp	r4, r6
 800be02:	4601      	mov	r1, r0
 800be04:	d1f4      	bne.n	800bdf0 <__s2b+0x70>
 800be06:	4608      	mov	r0, r1
 800be08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0c:	f108 080a 	add.w	r8, r8, #10
 800be10:	2409      	movs	r4, #9
 800be12:	e7eb      	b.n	800bdec <__s2b+0x6c>

0800be14 <__hi0bits>:
 800be14:	4603      	mov	r3, r0
 800be16:	2000      	movs	r0, #0
 800be18:	0c1a      	lsrs	r2, r3, #16
 800be1a:	d101      	bne.n	800be20 <__hi0bits+0xc>
 800be1c:	041b      	lsls	r3, r3, #16
 800be1e:	2010      	movs	r0, #16
 800be20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be24:	d101      	bne.n	800be2a <__hi0bits+0x16>
 800be26:	3008      	adds	r0, #8
 800be28:	021b      	lsls	r3, r3, #8
 800be2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be2e:	d101      	bne.n	800be34 <__hi0bits+0x20>
 800be30:	3004      	adds	r0, #4
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be38:	d101      	bne.n	800be3e <__hi0bits+0x2a>
 800be3a:	3002      	adds	r0, #2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	2b00      	cmp	r3, #0
 800be40:	db02      	blt.n	800be48 <__hi0bits+0x34>
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	d401      	bmi.n	800be4a <__hi0bits+0x36>
 800be46:	2020      	movs	r0, #32
 800be48:	4770      	bx	lr
 800be4a:	3001      	adds	r0, #1
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop

0800be50 <__lo0bits>:
 800be50:	6803      	ldr	r3, [r0, #0]
 800be52:	4602      	mov	r2, r0
 800be54:	f013 0007 	ands.w	r0, r3, #7
 800be58:	d007      	beq.n	800be6a <__lo0bits+0x1a>
 800be5a:	07d9      	lsls	r1, r3, #31
 800be5c:	d41f      	bmi.n	800be9e <__lo0bits+0x4e>
 800be5e:	0798      	lsls	r0, r3, #30
 800be60:	d41f      	bmi.n	800bea2 <__lo0bits+0x52>
 800be62:	089b      	lsrs	r3, r3, #2
 800be64:	2002      	movs	r0, #2
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	4770      	bx	lr
 800be6a:	b299      	uxth	r1, r3
 800be6c:	b909      	cbnz	r1, 800be72 <__lo0bits+0x22>
 800be6e:	0c1b      	lsrs	r3, r3, #16
 800be70:	2010      	movs	r0, #16
 800be72:	f013 0fff 	tst.w	r3, #255	; 0xff
 800be76:	d101      	bne.n	800be7c <__lo0bits+0x2c>
 800be78:	3008      	adds	r0, #8
 800be7a:	0a1b      	lsrs	r3, r3, #8
 800be7c:	0719      	lsls	r1, r3, #28
 800be7e:	d101      	bne.n	800be84 <__lo0bits+0x34>
 800be80:	3004      	adds	r0, #4
 800be82:	091b      	lsrs	r3, r3, #4
 800be84:	0799      	lsls	r1, r3, #30
 800be86:	d101      	bne.n	800be8c <__lo0bits+0x3c>
 800be88:	3002      	adds	r0, #2
 800be8a:	089b      	lsrs	r3, r3, #2
 800be8c:	07d9      	lsls	r1, r3, #31
 800be8e:	d404      	bmi.n	800be9a <__lo0bits+0x4a>
 800be90:	085b      	lsrs	r3, r3, #1
 800be92:	d101      	bne.n	800be98 <__lo0bits+0x48>
 800be94:	2020      	movs	r0, #32
 800be96:	4770      	bx	lr
 800be98:	3001      	adds	r0, #1
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	4770      	bx	lr
 800be9e:	2000      	movs	r0, #0
 800bea0:	4770      	bx	lr
 800bea2:	085b      	lsrs	r3, r3, #1
 800bea4:	2001      	movs	r0, #1
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop

0800beac <__i2b>:
 800beac:	b510      	push	{r4, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	2101      	movs	r1, #1
 800beb2:	f7ff fef3 	bl	800bc9c <_Balloc>
 800beb6:	2301      	movs	r3, #1
 800beb8:	6144      	str	r4, [r0, #20]
 800beba:	6103      	str	r3, [r0, #16]
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	bf00      	nop

0800bec0 <__multiply>:
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	460c      	mov	r4, r1
 800bec6:	690d      	ldr	r5, [r1, #16]
 800bec8:	b087      	sub	sp, #28
 800beca:	6916      	ldr	r6, [r2, #16]
 800becc:	4692      	mov	sl, r2
 800bece:	42b5      	cmp	r5, r6
 800bed0:	da04      	bge.n	800bedc <__multiply+0x1c>
 800bed2:	462a      	mov	r2, r5
 800bed4:	4654      	mov	r4, sl
 800bed6:	4635      	mov	r5, r6
 800bed8:	468a      	mov	sl, r1
 800beda:	4616      	mov	r6, r2
 800bedc:	68a3      	ldr	r3, [r4, #8]
 800bede:	eb05 0b06 	add.w	fp, r5, r6
 800bee2:	6861      	ldr	r1, [r4, #4]
 800bee4:	459b      	cmp	fp, r3
 800bee6:	bfc8      	it	gt
 800bee8:	3101      	addgt	r1, #1
 800beea:	f7ff fed7 	bl	800bc9c <_Balloc>
 800beee:	f10b 0104 	add.w	r1, fp, #4
 800bef2:	9105      	str	r1, [sp, #20]
 800bef4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800bef8:	f100 0914 	add.w	r9, r0, #20
 800befc:	3304      	adds	r3, #4
 800befe:	9003      	str	r0, [sp, #12]
 800bf00:	4599      	cmp	r9, r3
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	d206      	bcs.n	800bf14 <__multiply+0x54>
 800bf06:	9904      	ldr	r1, [sp, #16]
 800bf08:	464b      	mov	r3, r9
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f843 2b04 	str.w	r2, [r3], #4
 800bf10:	4299      	cmp	r1, r3
 800bf12:	d8fb      	bhi.n	800bf0c <__multiply+0x4c>
 800bf14:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800bf18:	f10a 0a14 	add.w	sl, sl, #20
 800bf1c:	3614      	adds	r6, #20
 800bf1e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf22:	3414      	adds	r4, #20
 800bf24:	45b2      	cmp	sl, r6
 800bf26:	9601      	str	r6, [sp, #4]
 800bf28:	f105 0814 	add.w	r8, r5, #20
 800bf2c:	9402      	str	r4, [sp, #8]
 800bf2e:	d24a      	bcs.n	800bfc6 <__multiply+0x106>
 800bf30:	f85a 5b04 	ldr.w	r5, [sl], #4
 800bf34:	b2ac      	uxth	r4, r5
 800bf36:	b1ec      	cbz	r4, 800bf74 <__multiply+0xb4>
 800bf38:	9a02      	ldr	r2, [sp, #8]
 800bf3a:	464b      	mov	r3, r9
 800bf3c:	2500      	movs	r5, #0
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	461f      	mov	r7, r3
 800bf42:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf46:	b286      	uxth	r6, r0
 800bf48:	0c00      	lsrs	r0, r0, #16
 800bf4a:	1976      	adds	r6, r6, r5
 800bf4c:	fa1f fc81 	uxth.w	ip, r1
 800bf50:	0c09      	lsrs	r1, r1, #16
 800bf52:	fb04 660c 	mla	r6, r4, ip, r6
 800bf56:	fb04 0001 	mla	r0, r4, r1, r0
 800bf5a:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 800bf5e:	b2b6      	uxth	r6, r6
 800bf60:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800bf64:	0c2d      	lsrs	r5, r5, #16
 800bf66:	4590      	cmp	r8, r2
 800bf68:	f843 6b04 	str.w	r6, [r3], #4
 800bf6c:	d8e7      	bhi.n	800bf3e <__multiply+0x7e>
 800bf6e:	607d      	str	r5, [r7, #4]
 800bf70:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 800bf74:	0c2d      	lsrs	r5, r5, #16
 800bf76:	d021      	beq.n	800bfbc <__multiply+0xfc>
 800bf78:	f8d9 1000 	ldr.w	r1, [r9]
 800bf7c:	46cc      	mov	ip, r9
 800bf7e:	9b02      	ldr	r3, [sp, #8]
 800bf80:	464e      	mov	r6, r9
 800bf82:	4608      	mov	r0, r1
 800bf84:	2700      	movs	r7, #0
 800bf86:	e000      	b.n	800bf8a <__multiply+0xca>
 800bf88:	4616      	mov	r6, r2
 800bf8a:	881c      	ldrh	r4, [r3, #0]
 800bf8c:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 800bf90:	4632      	mov	r2, r6
 800bf92:	b289      	uxth	r1, r1
 800bf94:	fb05 7704 	mla	r7, r5, r4, r7
 800bf98:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bf9c:	f842 1b04 	str.w	r1, [r2], #4
 800bfa0:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfa4:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 800bfa8:	0c09      	lsrs	r1, r1, #16
 800bfaa:	b284      	uxth	r4, r0
 800bfac:	fb05 4101 	mla	r1, r5, r1, r4
 800bfb0:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800bfb4:	0c0f      	lsrs	r7, r1, #16
 800bfb6:	4598      	cmp	r8, r3
 800bfb8:	d8e6      	bhi.n	800bf88 <__multiply+0xc8>
 800bfba:	6071      	str	r1, [r6, #4]
 800bfbc:	9a01      	ldr	r2, [sp, #4]
 800bfbe:	f109 0904 	add.w	r9, r9, #4
 800bfc2:	4552      	cmp	r2, sl
 800bfc4:	d8b4      	bhi.n	800bf30 <__multiply+0x70>
 800bfc6:	f1bb 0f00 	cmp.w	fp, #0
 800bfca:	dd0e      	ble.n	800bfea <__multiply+0x12a>
 800bfcc:	9905      	ldr	r1, [sp, #20]
 800bfce:	9a03      	ldr	r2, [sp, #12]
 800bfd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfd4:	b94b      	cbnz	r3, 800bfea <__multiply+0x12a>
 800bfd6:	9904      	ldr	r1, [sp, #16]
 800bfd8:	465a      	mov	r2, fp
 800bfda:	1f0b      	subs	r3, r1, #4
 800bfdc:	e002      	b.n	800bfe4 <__multiply+0x124>
 800bfde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfe2:	b909      	cbnz	r1, 800bfe8 <__multiply+0x128>
 800bfe4:	3a01      	subs	r2, #1
 800bfe6:	d1fa      	bne.n	800bfde <__multiply+0x11e>
 800bfe8:	4693      	mov	fp, r2
 800bfea:	9a03      	ldr	r2, [sp, #12]
 800bfec:	4610      	mov	r0, r2
 800bfee:	f8c2 b010 	str.w	fp, [r2, #16]
 800bff2:	b007      	add	sp, #28
 800bff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bff8 <__pow5mult>:
 800bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffc:	f012 0603 	ands.w	r6, r2, #3
 800c000:	4615      	mov	r5, r2
 800c002:	4604      	mov	r4, r0
 800c004:	4688      	mov	r8, r1
 800c006:	d12d      	bne.n	800c064 <__pow5mult+0x6c>
 800c008:	10ad      	asrs	r5, r5, #2
 800c00a:	d01d      	beq.n	800c048 <__pow5mult+0x50>
 800c00c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800c00e:	b92f      	cbnz	r7, 800c01c <__pow5mult+0x24>
 800c010:	e031      	b.n	800c076 <__pow5mult+0x7e>
 800c012:	106d      	asrs	r5, r5, #1
 800c014:	d018      	beq.n	800c048 <__pow5mult+0x50>
 800c016:	683e      	ldr	r6, [r7, #0]
 800c018:	b1ce      	cbz	r6, 800c04e <__pow5mult+0x56>
 800c01a:	4637      	mov	r7, r6
 800c01c:	07e8      	lsls	r0, r5, #31
 800c01e:	d5f8      	bpl.n	800c012 <__pow5mult+0x1a>
 800c020:	4641      	mov	r1, r8
 800c022:	463a      	mov	r2, r7
 800c024:	4620      	mov	r0, r4
 800c026:	f7ff ff4b 	bl	800bec0 <__multiply>
 800c02a:	f1b8 0f00 	cmp.w	r8, #0
 800c02e:	d017      	beq.n	800c060 <__pow5mult+0x68>
 800c030:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c034:	106d      	asrs	r5, r5, #1
 800c036:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c03c:	f8c8 1000 	str.w	r1, [r8]
 800c040:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800c044:	4680      	mov	r8, r0
 800c046:	d1e6      	bne.n	800c016 <__pow5mult+0x1e>
 800c048:	4640      	mov	r0, r8
 800c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c04e:	4639      	mov	r1, r7
 800c050:	463a      	mov	r2, r7
 800c052:	4620      	mov	r0, r4
 800c054:	f7ff ff34 	bl	800bec0 <__multiply>
 800c058:	6038      	str	r0, [r7, #0]
 800c05a:	4607      	mov	r7, r0
 800c05c:	6006      	str	r6, [r0, #0]
 800c05e:	e7dd      	b.n	800c01c <__pow5mult+0x24>
 800c060:	4680      	mov	r8, r0
 800c062:	e7d6      	b.n	800c012 <__pow5mult+0x1a>
 800c064:	4a09      	ldr	r2, [pc, #36]	; (800c08c <__pow5mult+0x94>)
 800c066:	3e01      	subs	r6, #1
 800c068:	2300      	movs	r3, #0
 800c06a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800c06e:	f7ff fe45 	bl	800bcfc <__multadd>
 800c072:	4680      	mov	r8, r0
 800c074:	e7c8      	b.n	800c008 <__pow5mult+0x10>
 800c076:	4620      	mov	r0, r4
 800c078:	f240 2171 	movw	r1, #625	; 0x271
 800c07c:	f7ff ff16 	bl	800beac <__i2b>
 800c080:	2300      	movs	r3, #0
 800c082:	64a0      	str	r0, [r4, #72]	; 0x48
 800c084:	4607      	mov	r7, r0
 800c086:	6003      	str	r3, [r0, #0]
 800c088:	e7c8      	b.n	800c01c <__pow5mult+0x24>
 800c08a:	bf00      	nop
 800c08c:	0801a7a8 	.word	0x0801a7a8

0800c090 <__lshift>:
 800c090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	4691      	mov	r9, r2
 800c096:	690a      	ldr	r2, [r1, #16]
 800c098:	460c      	mov	r4, r1
 800c09a:	ea4f 1769 	mov.w	r7, r9, asr #5
 800c09e:	688b      	ldr	r3, [r1, #8]
 800c0a0:	eb07 0b02 	add.w	fp, r7, r2
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	f10b 0501 	add.w	r5, fp, #1
 800c0aa:	6849      	ldr	r1, [r1, #4]
 800c0ac:	429d      	cmp	r5, r3
 800c0ae:	dd03      	ble.n	800c0b8 <__lshift+0x28>
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	3101      	adds	r1, #1
 800c0b4:	429d      	cmp	r5, r3
 800c0b6:	dcfb      	bgt.n	800c0b0 <__lshift+0x20>
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f7ff fdef 	bl	800bc9c <_Balloc>
 800c0be:	2f00      	cmp	r7, #0
 800c0c0:	f100 0314 	add.w	r3, r0, #20
 800c0c4:	dd09      	ble.n	800c0da <__lshift+0x4a>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	3201      	adds	r2, #1
 800c0cc:	f843 1b04 	str.w	r1, [r3], #4
 800c0d0:	42ba      	cmp	r2, r7
 800c0d2:	d1fa      	bne.n	800c0ca <__lshift+0x3a>
 800c0d4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800c0d8:	3314      	adds	r3, #20
 800c0da:	6922      	ldr	r2, [r4, #16]
 800c0dc:	f019 091f 	ands.w	r9, r9, #31
 800c0e0:	f104 0114 	add.w	r1, r4, #20
 800c0e4:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800c0e8:	f10c 0c14 	add.w	ip, ip, #20
 800c0ec:	d022      	beq.n	800c134 <__lshift+0xa4>
 800c0ee:	f1c9 0a20 	rsb	sl, r9, #32
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	e000      	b.n	800c0f8 <__lshift+0x68>
 800c0f6:	463b      	mov	r3, r7
 800c0f8:	f8d1 8000 	ldr.w	r8, [r1]
 800c0fc:	461f      	mov	r7, r3
 800c0fe:	fa08 f809 	lsl.w	r8, r8, r9
 800c102:	ea48 0202 	orr.w	r2, r8, r2
 800c106:	f847 2b04 	str.w	r2, [r7], #4
 800c10a:	f851 2b04 	ldr.w	r2, [r1], #4
 800c10e:	458c      	cmp	ip, r1
 800c110:	fa22 f20a 	lsr.w	r2, r2, sl
 800c114:	d8ef      	bhi.n	800c0f6 <__lshift+0x66>
 800c116:	605a      	str	r2, [r3, #4]
 800c118:	b10a      	cbz	r2, 800c11e <__lshift+0x8e>
 800c11a:	f10b 0502 	add.w	r5, fp, #2
 800c11e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800c120:	3d01      	subs	r5, #1
 800c122:	6862      	ldr	r2, [r4, #4]
 800c124:	6105      	str	r5, [r0, #16]
 800c126:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c12a:	6021      	str	r1, [r4, #0]
 800c12c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	f851 2b04 	ldr.w	r2, [r1], #4
 800c138:	458c      	cmp	ip, r1
 800c13a:	f843 2b04 	str.w	r2, [r3], #4
 800c13e:	d9ee      	bls.n	800c11e <__lshift+0x8e>
 800c140:	f851 2b04 	ldr.w	r2, [r1], #4
 800c144:	458c      	cmp	ip, r1
 800c146:	f843 2b04 	str.w	r2, [r3], #4
 800c14a:	d8f3      	bhi.n	800c134 <__lshift+0xa4>
 800c14c:	e7e7      	b.n	800c11e <__lshift+0x8e>
 800c14e:	bf00      	nop

0800c150 <__mcmp>:
 800c150:	4603      	mov	r3, r0
 800c152:	690a      	ldr	r2, [r1, #16]
 800c154:	6900      	ldr	r0, [r0, #16]
 800c156:	b430      	push	{r4, r5}
 800c158:	1a80      	subs	r0, r0, r2
 800c15a:	d110      	bne.n	800c17e <__mcmp+0x2e>
 800c15c:	3204      	adds	r2, #4
 800c15e:	f103 0514 	add.w	r5, r3, #20
 800c162:	0092      	lsls	r2, r2, #2
 800c164:	189b      	adds	r3, r3, r2
 800c166:	1889      	adds	r1, r1, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	3104      	adds	r1, #4
 800c16c:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800c170:	3b04      	subs	r3, #4
 800c172:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c176:	4294      	cmp	r4, r2
 800c178:	d103      	bne.n	800c182 <__mcmp+0x32>
 800c17a:	429d      	cmp	r5, r3
 800c17c:	d3f6      	bcc.n	800c16c <__mcmp+0x1c>
 800c17e:	bc30      	pop	{r4, r5}
 800c180:	4770      	bx	lr
 800c182:	bf38      	it	cc
 800c184:	f04f 30ff 	movcc.w	r0, #4294967295
 800c188:	d3f9      	bcc.n	800c17e <__mcmp+0x2e>
 800c18a:	2001      	movs	r0, #1
 800c18c:	e7f7      	b.n	800c17e <__mcmp+0x2e>
 800c18e:	bf00      	nop

0800c190 <__mdiff>:
 800c190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	460c      	mov	r4, r1
 800c196:	4607      	mov	r7, r0
 800c198:	4611      	mov	r1, r2
 800c19a:	4620      	mov	r0, r4
 800c19c:	4615      	mov	r5, r2
 800c19e:	f7ff ffd7 	bl	800c150 <__mcmp>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	d05b      	beq.n	800c260 <__mdiff+0xd0>
 800c1a8:	db55      	blt.n	800c256 <__mdiff+0xc6>
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	6861      	ldr	r1, [r4, #4]
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f7ff fd74 	bl	800bc9c <_Balloc>
 800c1b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800c1b8:	692b      	ldr	r3, [r5, #16]
 800c1ba:	f104 0c14 	add.w	ip, r4, #20
 800c1be:	f105 0914 	add.w	r9, r5, #20
 800c1c2:	2700      	movs	r7, #0
 800c1c4:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800c1c8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800c1cc:	3414      	adds	r4, #20
 800c1ce:	3514      	adds	r5, #20
 800c1d0:	f100 0a14 	add.w	sl, r0, #20
 800c1d4:	60c6      	str	r6, [r0, #12]
 800c1d6:	f85c 6b04 	ldr.w	r6, [ip], #4
 800c1da:	4653      	mov	r3, sl
 800c1dc:	f859 ab04 	ldr.w	sl, [r9], #4
 800c1e0:	4662      	mov	r2, ip
 800c1e2:	b2b1      	uxth	r1, r6
 800c1e4:	19c9      	adds	r1, r1, r7
 800c1e6:	fa1f fb8a 	uxth.w	fp, sl
 800c1ea:	ebcb 0101 	rsb	r1, fp, r1
 800c1ee:	ea4f 471a 	mov.w	r7, sl, lsr #16
 800c1f2:	ebc7 4716 	rsb	r7, r7, r6, lsr #16
 800c1f6:	eb07 4721 	add.w	r7, r7, r1, asr #16
 800c1fa:	b289      	uxth	r1, r1
 800c1fc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800c200:	143f      	asrs	r7, r7, #16
 800c202:	454d      	cmp	r5, r9
 800c204:	f843 1b04 	str.w	r1, [r3], #4
 800c208:	469a      	mov	sl, r3
 800c20a:	d8e4      	bhi.n	800c1d6 <__mdiff+0x46>
 800c20c:	4564      	cmp	r4, ip
 800c20e:	461e      	mov	r6, r3
 800c210:	d915      	bls.n	800c23e <__mdiff+0xae>
 800c212:	f852 5b04 	ldr.w	r5, [r2], #4
 800c216:	b2a9      	uxth	r1, r5
 800c218:	0c2d      	lsrs	r5, r5, #16
 800c21a:	19cf      	adds	r7, r1, r7
 800c21c:	eb05 4527 	add.w	r5, r5, r7, asr #16
 800c220:	b2bf      	uxth	r7, r7
 800c222:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800c226:	142f      	asrs	r7, r5, #16
 800c228:	4294      	cmp	r4, r2
 800c22a:	f843 1b04 	str.w	r1, [r3], #4
 800c22e:	d8f0      	bhi.n	800c212 <__mdiff+0x82>
 800c230:	ea6f 030c 	mvn.w	r3, ip
 800c234:	191b      	adds	r3, r3, r4
 800c236:	f023 0303 	bic.w	r3, r3, #3
 800c23a:	3304      	adds	r3, #4
 800c23c:	18f3      	adds	r3, r6, r3
 800c23e:	b931      	cbnz	r1, 800c24e <__mdiff+0xbe>
 800c240:	3b04      	subs	r3, #4
 800c242:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c246:	f108 38ff 	add.w	r8, r8, #4294967295
 800c24a:	2a00      	cmp	r2, #0
 800c24c:	d0f9      	beq.n	800c242 <__mdiff+0xb2>
 800c24e:	f8c0 8010 	str.w	r8, [r0, #16]
 800c252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c256:	4623      	mov	r3, r4
 800c258:	2601      	movs	r6, #1
 800c25a:	462c      	mov	r4, r5
 800c25c:	461d      	mov	r5, r3
 800c25e:	e7a5      	b.n	800c1ac <__mdiff+0x1c>
 800c260:	4638      	mov	r0, r7
 800c262:	4631      	mov	r1, r6
 800c264:	f7ff fd1a 	bl	800bc9c <_Balloc>
 800c268:	2301      	movs	r3, #1
 800c26a:	6146      	str	r6, [r0, #20]
 800c26c:	6103      	str	r3, [r0, #16]
 800c26e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c272:	bf00      	nop

0800c274 <__ulp>:
 800c274:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c278:	0d1b      	lsrs	r3, r3, #20
 800c27a:	051b      	lsls	r3, r3, #20
 800c27c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c280:	2b00      	cmp	r3, #0
 800c282:	dd02      	ble.n	800c28a <__ulp+0x16>
 800c284:	4619      	mov	r1, r3
 800c286:	2000      	movs	r0, #0
 800c288:	4770      	bx	lr
 800c28a:	425b      	negs	r3, r3
 800c28c:	2100      	movs	r1, #0
 800c28e:	151b      	asrs	r3, r3, #20
 800c290:	2b13      	cmp	r3, #19
 800c292:	dd0b      	ble.n	800c2ac <__ulp+0x38>
 800c294:	2b32      	cmp	r3, #50	; 0x32
 800c296:	dd02      	ble.n	800c29e <__ulp+0x2a>
 800c298:	2301      	movs	r3, #1
 800c29a:	4618      	mov	r0, r3
 800c29c:	4770      	bx	lr
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800c2a4:	fa12 f303 	lsls.w	r3, r2, r3
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	4770      	bx	lr
 800c2ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	fa52 f103 	asrs.w	r1, r2, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <__b2d>:
 800c2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2bc:	f100 0614 	add.w	r6, r0, #20
 800c2c0:	6904      	ldr	r4, [r0, #16]
 800c2c2:	460f      	mov	r7, r1
 800c2c4:	3404      	adds	r4, #4
 800c2c6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c2ca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800c2ce:	46a0      	mov	r8, r4
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	f7ff fd9f 	bl	800be14 <__hi0bits>
 800c2d6:	280a      	cmp	r0, #10
 800c2d8:	f1c0 0320 	rsb	r3, r0, #32
 800c2dc:	603b      	str	r3, [r7, #0]
 800c2de:	dc15      	bgt.n	800c30c <__b2d+0x54>
 800c2e0:	f1c0 010b 	rsb	r1, r0, #11
 800c2e4:	fa35 f701 	lsrs.w	r7, r5, r1
 800c2e8:	42a6      	cmp	r6, r4
 800c2ea:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 800c2ee:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 800c2f2:	d232      	bcs.n	800c35a <__b2d+0xa2>
 800c2f4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800c2f8:	fa34 f101 	lsrs.w	r1, r4, r1
 800c2fc:	3015      	adds	r0, #21
 800c2fe:	4085      	lsls	r5, r0
 800c300:	ea41 0205 	orr.w	r2, r1, r5
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c30c:	2100      	movs	r1, #0
 800c30e:	42a6      	cmp	r6, r4
 800c310:	d202      	bcs.n	800c318 <__b2d+0x60>
 800c312:	f858 1c04 	ldr.w	r1, [r8, #-4]
 800c316:	3c04      	subs	r4, #4
 800c318:	f1b0 070b 	subs.w	r7, r0, #11
 800c31c:	bf02      	ittt	eq
 800c31e:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 800c322:	460a      	moveq	r2, r1
 800c324:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 800c328:	d0ec      	beq.n	800c304 <__b2d+0x4c>
 800c32a:	40bd      	lsls	r5, r7
 800c32c:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800c330:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 800c334:	42b4      	cmp	r4, r6
 800c336:	fa21 fc00 	lsr.w	ip, r1, r0
 800c33a:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 800c33e:	ea45 030c 	orr.w	r3, r5, ip
 800c342:	d90c      	bls.n	800c35e <__b2d+0xa6>
 800c344:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800c348:	fa34 f000 	lsrs.w	r0, r4, r0
 800c34c:	40b9      	lsls	r1, r7
 800c34e:	ea40 0201 	orr.w	r2, r0, r1
 800c352:	4619      	mov	r1, r3
 800c354:	4610      	mov	r0, r2
 800c356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35a:	2100      	movs	r1, #0
 800c35c:	e7ce      	b.n	800c2fc <__b2d+0x44>
 800c35e:	2000      	movs	r0, #0
 800c360:	e7f4      	b.n	800c34c <__b2d+0x94>
 800c362:	bf00      	nop

0800c364 <__d2b>:
 800c364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c368:	b083      	sub	sp, #12
 800c36a:	2101      	movs	r1, #1
 800c36c:	461d      	mov	r5, r3
 800c36e:	4614      	mov	r4, r2
 800c370:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c372:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c374:	f7ff fc92 	bl	800bc9c <_Balloc>
 800c378:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800c37c:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800c380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	4680      	mov	r8, r0
 800c388:	f1b9 0f00 	cmp.w	r9, #0
 800c38c:	d002      	beq.n	800c394 <__d2b+0x30>
 800c38e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	2c00      	cmp	r4, #0
 800c396:	d026      	beq.n	800c3e6 <__d2b+0x82>
 800c398:	a802      	add	r0, sp, #8
 800c39a:	f840 4d08 	str.w	r4, [r0, #-8]!
 800c39e:	4668      	mov	r0, sp
 800c3a0:	f7ff fd56 	bl	800be50 <__lo0bits>
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d135      	bne.n	800c416 <__d2b+0xb2>
 800c3aa:	9a00      	ldr	r2, [sp, #0]
 800c3ac:	f8c8 2014 	str.w	r2, [r8, #20]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bf0c      	ite	eq
 800c3b4:	2401      	moveq	r4, #1
 800c3b6:	2402      	movne	r4, #2
 800c3b8:	f8c8 3018 	str.w	r3, [r8, #24]
 800c3bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800c3c0:	f1b9 0f00 	cmp.w	r9, #0
 800c3c4:	d11d      	bne.n	800c402 <__d2b+0x9e>
 800c3c6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800c3ca:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 800c3ce:	3802      	subs	r0, #2
 800c3d0:	6038      	str	r0, [r7, #0]
 800c3d2:	6918      	ldr	r0, [r3, #16]
 800c3d4:	f7ff fd1e 	bl	800be14 <__hi0bits>
 800c3d8:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 800c3dc:	6034      	str	r4, [r6, #0]
 800c3de:	4640      	mov	r0, r8
 800c3e0:	b003      	add	sp, #12
 800c3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3e6:	a801      	add	r0, sp, #4
 800c3e8:	f7ff fd32 	bl	800be50 <__lo0bits>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	461c      	mov	r4, r3
 800c3f0:	f8c8 3010 	str.w	r3, [r8, #16]
 800c3f4:	9b01      	ldr	r3, [sp, #4]
 800c3f6:	f8c8 3014 	str.w	r3, [r8, #20]
 800c3fa:	3020      	adds	r0, #32
 800c3fc:	f1b9 0f00 	cmp.w	r9, #0
 800c400:	d0e1      	beq.n	800c3c6 <__d2b+0x62>
 800c402:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 800c406:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 800c40a:	f1a9 0903 	sub.w	r9, r9, #3
 800c40e:	4448      	add	r0, r9
 800c410:	6038      	str	r0, [r7, #0]
 800c412:	6033      	str	r3, [r6, #0]
 800c414:	e7e3      	b.n	800c3de <__d2b+0x7a>
 800c416:	f1c0 0220 	rsb	r2, r0, #32
 800c41a:	9900      	ldr	r1, [sp, #0]
 800c41c:	fa13 f202 	lsls.w	r2, r3, r2
 800c420:	40c3      	lsrs	r3, r0
 800c422:	430a      	orrs	r2, r1
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	f8c8 2014 	str.w	r2, [r8, #20]
 800c42a:	e7c1      	b.n	800c3b0 <__d2b+0x4c>

0800c42c <__ratio>:
 800c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	b083      	sub	sp, #12
 800c432:	460c      	mov	r4, r1
 800c434:	4669      	mov	r1, sp
 800c436:	4605      	mov	r5, r0
 800c438:	f7ff ff3e 	bl	800c2b8 <__b2d>
 800c43c:	460f      	mov	r7, r1
 800c43e:	4606      	mov	r6, r0
 800c440:	a901      	add	r1, sp, #4
 800c442:	4620      	mov	r0, r4
 800c444:	f7ff ff38 	bl	800c2b8 <__b2d>
 800c448:	46b9      	mov	r9, r7
 800c44a:	46b0      	mov	r8, r6
 800c44c:	460b      	mov	r3, r1
 800c44e:	4602      	mov	r2, r0
 800c450:	6929      	ldr	r1, [r5, #16]
 800c452:	469b      	mov	fp, r3
 800c454:	6920      	ldr	r0, [r4, #16]
 800c456:	4692      	mov	sl, r2
 800c458:	9c00      	ldr	r4, [sp, #0]
 800c45a:	1a09      	subs	r1, r1, r0
 800c45c:	9801      	ldr	r0, [sp, #4]
 800c45e:	1a20      	subs	r0, r4, r0
 800c460:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800c464:	2900      	cmp	r1, #0
 800c466:	bfc9      	itett	gt
 800c468:	eb07 5901 	addgt.w	r9, r7, r1, lsl #20
 800c46c:	eba3 5b01 	suble.w	fp, r3, r1, lsl #20
 800c470:	4636      	movgt	r6, r6
 800c472:	464f      	movgt	r7, r9
 800c474:	bfdc      	itt	le
 800c476:	4612      	movle	r2, r2
 800c478:	465b      	movle	r3, fp
 800c47a:	4630      	mov	r0, r6
 800c47c:	4639      	mov	r1, r7
 800c47e:	f001 fb1b 	bl	800dab8 <__aeabi_ddiv>
 800c482:	b003      	add	sp, #12
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c488 <_mprec_log10>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	4604      	mov	r4, r0
 800c48c:	2100      	movs	r1, #0
 800c48e:	2000      	movs	r0, #0
 800c490:	2c17      	cmp	r4, #23
 800c492:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c496:	dd08      	ble.n	800c4aa <_mprec_log10+0x22>
 800c498:	2300      	movs	r3, #0
 800c49a:	2200      	movs	r2, #0
 800c49c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c4a0:	f001 f9e0 	bl	800d864 <__aeabi_dmul>
 800c4a4:	3c01      	subs	r4, #1
 800c4a6:	d1f7      	bne.n	800c498 <_mprec_log10+0x10>
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	4b03      	ldr	r3, [pc, #12]	; (800c4b8 <_mprec_log10+0x30>)
 800c4ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c4b0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	bf00      	nop
 800c4b8:	0801a7a8 	.word	0x0801a7a8

0800c4bc <__copybits>:
 800c4bc:	b470      	push	{r4, r5, r6}
 800c4be:	3901      	subs	r1, #1
 800c4c0:	6916      	ldr	r6, [r2, #16]
 800c4c2:	f102 0314 	add.w	r3, r2, #20
 800c4c6:	1149      	asrs	r1, r1, #5
 800c4c8:	3101      	adds	r1, #1
 800c4ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4ce:	3614      	adds	r6, #20
 800c4d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4d4:	42b3      	cmp	r3, r6
 800c4d6:	d20c      	bcs.n	800c4f2 <__copybits+0x36>
 800c4d8:	4604      	mov	r4, r0
 800c4da:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4de:	429e      	cmp	r6, r3
 800c4e0:	f844 5b04 	str.w	r5, [r4], #4
 800c4e4:	d8f9      	bhi.n	800c4da <__copybits+0x1e>
 800c4e6:	1ab3      	subs	r3, r6, r2
 800c4e8:	3b15      	subs	r3, #21
 800c4ea:	f023 0303 	bic.w	r3, r3, #3
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	18c0      	adds	r0, r0, r3
 800c4f2:	4281      	cmp	r1, r0
 800c4f4:	d904      	bls.n	800c500 <__copybits+0x44>
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f840 3b04 	str.w	r3, [r0], #4
 800c4fc:	4281      	cmp	r1, r0
 800c4fe:	d8fb      	bhi.n	800c4f8 <__copybits+0x3c>
 800c500:	bc70      	pop	{r4, r5, r6}
 800c502:	4770      	bx	lr

0800c504 <__any_on>:
 800c504:	6902      	ldr	r2, [r0, #16]
 800c506:	114b      	asrs	r3, r1, #5
 800c508:	b410      	push	{r4}
 800c50a:	429a      	cmp	r2, r3
 800c50c:	db01      	blt.n	800c512 <__any_on+0xe>
 800c50e:	461a      	mov	r2, r3
 800c510:	dc18      	bgt.n	800c544 <__any_on+0x40>
 800c512:	3204      	adds	r2, #4
 800c514:	f100 0114 	add.w	r1, r0, #20
 800c518:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800c51c:	1d1c      	adds	r4, r3, #4
 800c51e:	42a1      	cmp	r1, r4
 800c520:	d21d      	bcs.n	800c55e <__any_on+0x5a>
 800c522:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c526:	b952      	cbnz	r2, 800c53e <__any_on+0x3a>
 800c528:	1a59      	subs	r1, r3, r1
 800c52a:	3103      	adds	r1, #3
 800c52c:	f021 0103 	bic.w	r1, r1, #3
 800c530:	1a59      	subs	r1, r3, r1
 800c532:	428b      	cmp	r3, r1
 800c534:	d013      	beq.n	800c55e <__any_on+0x5a>
 800c536:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	d0f9      	beq.n	800c532 <__any_on+0x2e>
 800c53e:	2001      	movs	r0, #1
 800c540:	bc10      	pop	{r4}
 800c542:	4770      	bx	lr
 800c544:	f011 011f 	ands.w	r1, r1, #31
 800c548:	d0e3      	beq.n	800c512 <__any_on+0xe>
 800c54a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	fa33 f401 	lsrs.w	r4, r3, r1
 800c554:	fa14 f101 	lsls.w	r1, r4, r1
 800c558:	4299      	cmp	r1, r3
 800c55a:	d1f0      	bne.n	800c53e <__any_on+0x3a>
 800c55c:	e7d9      	b.n	800c512 <__any_on+0xe>
 800c55e:	2000      	movs	r0, #0
 800c560:	e7ee      	b.n	800c540 <__any_on+0x3c>
 800c562:	bf00      	nop

0800c564 <__fpclassifyd>:
 800c564:	ea50 0201 	orrs.w	r2, r0, r1
 800c568:	460b      	mov	r3, r1
 800c56a:	b410      	push	{r4}
 800c56c:	d102      	bne.n	800c574 <__fpclassifyd+0x10>
 800c56e:	2002      	movs	r0, #2
 800c570:	bc10      	pop	{r4}
 800c572:	4770      	bx	lr
 800c574:	f1d0 0001 	rsbs	r0, r0, #1
 800c578:	bf38      	it	cc
 800c57a:	2000      	movcc	r0, #0
 800c57c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800c580:	bf14      	ite	ne
 800c582:	2200      	movne	r2, #0
 800c584:	f000 0201 	andeq.w	r2, r0, #1
 800c588:	2a00      	cmp	r2, #0
 800c58a:	d1f0      	bne.n	800c56e <__fpclassifyd+0xa>
 800c58c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c590:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 800c594:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800c598:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c59c:	4291      	cmp	r1, r2
 800c59e:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 800c5a2:	bf8c      	ite	hi
 800c5a4:	2100      	movhi	r1, #0
 800c5a6:	2101      	movls	r1, #1
 800c5a8:	4294      	cmp	r4, r2
 800c5aa:	bf8c      	ite	hi
 800c5ac:	460a      	movhi	r2, r1
 800c5ae:	f041 0201 	orrls.w	r2, r1, #1
 800c5b2:	b10a      	cbz	r2, 800c5b8 <__fpclassifyd+0x54>
 800c5b4:	2004      	movs	r0, #4
 800c5b6:	e7db      	b.n	800c570 <__fpclassifyd+0xc>
 800c5b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5bc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c5c0:	bf2c      	ite	cs
 800c5c2:	2200      	movcs	r2, #0
 800c5c4:	2201      	movcc	r2, #1
 800c5c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c5ca:	bf38      	it	cc
 800c5cc:	f042 0201 	orrcc.w	r2, r2, #1
 800c5d0:	b10a      	cbz	r2, 800c5d6 <__fpclassifyd+0x72>
 800c5d2:	2003      	movs	r0, #3
 800c5d4:	e7cc      	b.n	800c570 <__fpclassifyd+0xc>
 800c5d6:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800c5da:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800c5de:	bf14      	ite	ne
 800c5e0:	2100      	movne	r1, #0
 800c5e2:	2101      	moveq	r1, #1
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	bf14      	ite	ne
 800c5e8:	460b      	movne	r3, r1
 800c5ea:	f041 0301 	orreq.w	r3, r1, #1
 800c5ee:	4018      	ands	r0, r3
 800c5f0:	e7be      	b.n	800c570 <__fpclassifyd+0xc>
 800c5f2:	bf00      	nop

0800c5f4 <__sread>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5fc:	f00b fd4a 	bl	8018094 <_read_r>
 800c600:	2800      	cmp	r0, #0
 800c602:	bfab      	itete	ge
 800c604:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800c606:	89a3      	ldrhlt	r3, [r4, #12]
 800c608:	181b      	addge	r3, r3, r0
 800c60a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c60e:	bfac      	ite	ge
 800c610:	6523      	strge	r3, [r4, #80]	; 0x50
 800c612:	81a3      	strhlt	r3, [r4, #12]
 800c614:	bd10      	pop	{r4, pc}
 800c616:	bf00      	nop

0800c618 <__seofread>:
 800c618:	2000      	movs	r0, #0
 800c61a:	4770      	bx	lr

0800c61c <__swrite>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	461e      	mov	r6, r3
 800c622:	898b      	ldrh	r3, [r1, #12]
 800c624:	4617      	mov	r7, r2
 800c626:	460c      	mov	r4, r1
 800c628:	4605      	mov	r5, r0
 800c62a:	05da      	lsls	r2, r3, #23
 800c62c:	d506      	bpl.n	800c63c <__swrite+0x20>
 800c62e:	2302      	movs	r3, #2
 800c630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c634:	2200      	movs	r2, #0
 800c636:	f00b fd4d 	bl	80180d4 <_lseek_r>
 800c63a:	89a3      	ldrh	r3, [r4, #12]
 800c63c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c644:	81a3      	strh	r3, [r4, #12]
 800c646:	4628      	mov	r0, r5
 800c648:	463a      	mov	r2, r7
 800c64a:	4633      	mov	r3, r6
 800c64c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	f00b bd30 	b.w	80180b4 <_write_r>

0800c654 <__sseek>:
 800c654:	b510      	push	{r4, lr}
 800c656:	460c      	mov	r4, r1
 800c658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c65c:	f00b fd3a 	bl	80180d4 <_lseek_r>
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	1c41      	adds	r1, r0, #1
 800c664:	bf15      	itete	ne
 800c666:	6520      	strne	r0, [r4, #80]	; 0x50
 800c668:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c66c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c670:	81a3      	strheq	r3, [r4, #12]
 800c672:	bf18      	it	ne
 800c674:	81a3      	strhne	r3, [r4, #12]
 800c676:	bd10      	pop	{r4, pc}

0800c678 <__sclose>:
 800c678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c67c:	f00b bd3e 	b.w	80180fc <_close_r>

0800c680 <__ssprint_r>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	b085      	sub	sp, #20
 800c686:	6894      	ldr	r4, [r2, #8]
 800c688:	4691      	mov	r9, r2
 800c68a:	9003      	str	r0, [sp, #12]
 800c68c:	460d      	mov	r5, r1
 800c68e:	6817      	ldr	r7, [r2, #0]
 800c690:	2c00      	cmp	r4, #0
 800c692:	d07a      	beq.n	800c78a <__ssprint_r+0x10a>
 800c694:	f04f 0a00 	mov.w	sl, #0
 800c698:	6808      	ldr	r0, [r1, #0]
 800c69a:	688b      	ldr	r3, [r1, #8]
 800c69c:	4654      	mov	r4, sl
 800c69e:	2c00      	cmp	r4, #0
 800c6a0:	d054      	beq.n	800c74c <__ssprint_r+0xcc>
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	461e      	mov	r6, r3
 800c6a6:	4698      	mov	r8, r3
 800c6a8:	bf3c      	itt	cc
 800c6aa:	4626      	movcc	r6, r4
 800c6ac:	46a0      	movcc	r8, r4
 800c6ae:	d33d      	bcc.n	800c72c <__ssprint_r+0xac>
 800c6b0:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 800c6b4:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 800c6b8:	d038      	beq.n	800c72c <__ssprint_r+0xac>
 800c6ba:	696b      	ldr	r3, [r5, #20]
 800c6bc:	1c62      	adds	r2, r4, #1
 800c6be:	6929      	ldr	r1, [r5, #16]
 800c6c0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800c6c4:	1a43      	subs	r3, r0, r1
 800c6c6:	18d0      	adds	r0, r2, r3
 800c6c8:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 800c6cc:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800c6d0:	4583      	cmp	fp, r0
 800c6d2:	465a      	mov	r2, fp
 800c6d4:	bf38      	it	cc
 800c6d6:	4683      	movcc	fp, r0
 800c6d8:	9803      	ldr	r0, [sp, #12]
 800c6da:	bf38      	it	cc
 800c6dc:	465a      	movcc	r2, fp
 800c6de:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 800c6e2:	d038      	beq.n	800c756 <__ssprint_r+0xd6>
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	f7fa fc86 	bl	8006ff8 <_malloc_r>
 800c6ec:	9b01      	ldr	r3, [sp, #4]
 800c6ee:	4684      	mov	ip, r0
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d03b      	beq.n	800c76c <__ssprint_r+0xec>
 800c6f4:	6929      	ldr	r1, [r5, #16]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	f8cd c008 	str.w	ip, [sp, #8]
 800c6fe:	f7fa ffa1 	bl	8007644 <memcpy>
 800c702:	89aa      	ldrh	r2, [r5, #12]
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c70a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c70e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c712:	81aa      	strh	r2, [r5, #12]
 800c714:	4626      	mov	r6, r4
 800c716:	46a0      	mov	r8, r4
 800c718:	eb0c 0003 	add.w	r0, ip, r3
 800c71c:	f8c5 c010 	str.w	ip, [r5, #16]
 800c720:	ebc3 030b 	rsb	r3, r3, fp
 800c724:	6028      	str	r0, [r5, #0]
 800c726:	f8c5 b014 	str.w	fp, [r5, #20]
 800c72a:	60ab      	str	r3, [r5, #8]
 800c72c:	4642      	mov	r2, r8
 800c72e:	4651      	mov	r1, sl
 800c730:	f7fa ffca 	bl	80076c8 <memmove>
 800c734:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c738:	68ab      	ldr	r3, [r5, #8]
 800c73a:	6828      	ldr	r0, [r5, #0]
 800c73c:	1b14      	subs	r4, r2, r4
 800c73e:	1b9b      	subs	r3, r3, r6
 800c740:	60ab      	str	r3, [r5, #8]
 800c742:	4440      	add	r0, r8
 800c744:	6028      	str	r0, [r5, #0]
 800c746:	f8c9 4008 	str.w	r4, [r9, #8]
 800c74a:	b1f4      	cbz	r4, 800c78a <__ssprint_r+0x10a>
 800c74c:	f8d7 a000 	ldr.w	sl, [r7]
 800c750:	687c      	ldr	r4, [r7, #4]
 800c752:	3708      	adds	r7, #8
 800c754:	e7a3      	b.n	800c69e <__ssprint_r+0x1e>
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	f7fb f8d2 	bl	8007900 <_realloc_r>
 800c75c:	9b01      	ldr	r3, [sp, #4]
 800c75e:	4684      	mov	ip, r0
 800c760:	2800      	cmp	r0, #0
 800c762:	d1d7      	bne.n	800c714 <__ssprint_r+0x94>
 800c764:	6929      	ldr	r1, [r5, #16]
 800c766:	9803      	ldr	r0, [sp, #12]
 800c768:	f7ff f8d0 	bl	800b90c <_free_r>
 800c76c:	9a03      	ldr	r2, [sp, #12]
 800c76e:	230c      	movs	r3, #12
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	2300      	movs	r3, #0
 800c778:	89aa      	ldrh	r2, [r5, #12]
 800c77a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c77e:	81aa      	strh	r2, [r5, #12]
 800c780:	f8c9 3008 	str.w	r3, [r9, #8]
 800c784:	f8c9 3004 	str.w	r3, [r9, #4]
 800c788:	e002      	b.n	800c790 <__ssprint_r+0x110>
 800c78a:	4620      	mov	r0, r4
 800c78c:	f8c9 4004 	str.w	r4, [r9, #4]
 800c790:	b005      	add	sp, #20
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	bf00      	nop

0800c798 <_svfiprintf_r>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	b0af      	sub	sp, #188	; 0xbc
 800c79e:	468a      	mov	sl, r1
 800c7a0:	9307      	str	r3, [sp, #28]
 800c7a2:	898b      	ldrh	r3, [r1, #12]
 800c7a4:	9003      	str	r0, [sp, #12]
 800c7a6:	061b      	lsls	r3, r3, #24
 800c7a8:	d503      	bpl.n	800c7b2 <_svfiprintf_r+0x1a>
 800c7aa:	690b      	ldr	r3, [r1, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8435 	beq.w	800d01c <_svfiprintf_r+0x884>
 800c7b2:	4617      	mov	r7, r2
 800c7b4:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 800c7b8:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800c7bc:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9102      	str	r1, [sp, #8]
 800c7c4:	ac10      	add	r4, sp, #64	; 0x40
 800c7c6:	ebc1 0108 	rsb	r1, r1, r8
 800c7ca:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 800c7ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c7d0:	9306      	str	r3, [sp, #24]
 800c7d2:	910f      	str	r1, [sp, #60]	; 0x3c
 800c7d4:	900e      	str	r0, [sp, #56]	; 0x38
 800c7d6:	942a      	str	r4, [sp, #168]	; 0xa8
 800c7d8:	932c      	str	r3, [sp, #176]	; 0xb0
 800c7da:	932b      	str	r3, [sp, #172]	; 0xac
 800c7dc:	783b      	ldrb	r3, [r7, #0]
 800c7de:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800c7e2:	bf18      	it	ne
 800c7e4:	2201      	movne	r2, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bf0c      	ite	eq
 800c7ea:	2300      	moveq	r3, #0
 800c7ec:	f002 0301 	andne.w	r3, r2, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 82ef 	beq.w	800cdd4 <_svfiprintf_r+0x63c>
 800c7f6:	463a      	mov	r2, r7
 800c7f8:	463d      	mov	r5, r7
 800c7fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c7fe:	3501      	adds	r5, #1
 800c800:	1c19      	adds	r1, r3, #0
 800c802:	bf18      	it	ne
 800c804:	2101      	movne	r1, #1
 800c806:	2b25      	cmp	r3, #37	; 0x25
 800c808:	bf0c      	ite	eq
 800c80a:	2300      	moveq	r3, #0
 800c80c:	f001 0301 	andne.w	r3, r1, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1f2      	bne.n	800c7fa <_svfiprintf_r+0x62>
 800c814:	1bee      	subs	r6, r5, r7
 800c816:	d00e      	beq.n	800c836 <_svfiprintf_r+0x9e>
 800c818:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c81a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c81c:	3301      	adds	r3, #1
 800c81e:	6027      	str	r7, [r4, #0]
 800c820:	2b07      	cmp	r3, #7
 800c822:	4432      	add	r2, r6
 800c824:	6066      	str	r6, [r4, #4]
 800c826:	932b      	str	r3, [sp, #172]	; 0xac
 800c828:	922c      	str	r2, [sp, #176]	; 0xb0
 800c82a:	f300 8330 	bgt.w	800ce8e <_svfiprintf_r+0x6f6>
 800c82e:	3408      	adds	r4, #8
 800c830:	9b06      	ldr	r3, [sp, #24]
 800c832:	199b      	adds	r3, r3, r6
 800c834:	9306      	str	r3, [sp, #24]
 800c836:	782b      	ldrb	r3, [r5, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 82cd 	beq.w	800cdd8 <_svfiprintf_r+0x640>
 800c83e:	2300      	movs	r3, #0
 800c840:	1c6f      	adds	r7, r5, #1
 800c842:	461a      	mov	r2, r3
 800c844:	f04f 35ff 	mov.w	r5, #4294967295
 800c848:	469b      	mov	fp, r3
 800c84a:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800c84e:	9308      	str	r3, [sp, #32]
 800c850:	f817 3b01 	ldrb.w	r3, [r7], #1
 800c854:	f1a3 0120 	sub.w	r1, r3, #32
 800c858:	2958      	cmp	r1, #88	; 0x58
 800c85a:	f200 81a1 	bhi.w	800cba0 <_svfiprintf_r+0x408>
 800c85e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c862:	019b      	.short	0x019b
 800c864:	019f019f 	.word	0x019f019f
 800c868:	019f01fe 	.word	0x019f01fe
 800c86c:	019f019f 	.word	0x019f019f
 800c870:	019f019f 	.word	0x019f019f
 800c874:	00f0019f 	.word	0x00f0019f
 800c878:	019f01fc 	.word	0x019f01fc
 800c87c:	01e100fc 	.word	0x01e100fc
 800c880:	01de019f 	.word	0x01de019f
 800c884:	01cd01cd 	.word	0x01cd01cd
 800c888:	01cd01cd 	.word	0x01cd01cd
 800c88c:	01cd01cd 	.word	0x01cd01cd
 800c890:	01cd01cd 	.word	0x01cd01cd
 800c894:	019f01cd 	.word	0x019f01cd
 800c898:	019f019f 	.word	0x019f019f
 800c89c:	019f019f 	.word	0x019f019f
 800c8a0:	019f019f 	.word	0x019f019f
 800c8a4:	019f019f 	.word	0x019f019f
 800c8a8:	005c019f 	.word	0x005c019f
 800c8ac:	019f019f 	.word	0x019f019f
 800c8b0:	019f019f 	.word	0x019f019f
 800c8b4:	019f019f 	.word	0x019f019f
 800c8b8:	019f019f 	.word	0x019f019f
 800c8bc:	019f019f 	.word	0x019f019f
 800c8c0:	019f009c 	.word	0x019f009c
 800c8c4:	019f019f 	.word	0x019f019f
 800c8c8:	019f019f 	.word	0x019f019f
 800c8cc:	019f00dd 	.word	0x019f00dd
 800c8d0:	0152019f 	.word	0x0152019f
 800c8d4:	019f019f 	.word	0x019f019f
 800c8d8:	019f019f 	.word	0x019f019f
 800c8dc:	019f019f 	.word	0x019f019f
 800c8e0:	019f019f 	.word	0x019f019f
 800c8e4:	019f019f 	.word	0x019f019f
 800c8e8:	005e0102 	.word	0x005e0102
 800c8ec:	019f019f 	.word	0x019f019f
 800c8f0:	00ff019f 	.word	0x00ff019f
 800c8f4:	019f005e 	.word	0x019f005e
 800c8f8:	0059019f 	.word	0x0059019f
 800c8fc:	0172019f 	.word	0x0172019f
 800c900:	0188009e 	.word	0x0188009e
 800c904:	019f0059 	.word	0x019f0059
 800c908:	019f01af 	.word	0x019f01af
 800c90c:	019f00df 	.word	0x019f00df
 800c910:	0183019f 	.word	0x0183019f
 800c914:	f04b 0b10 	orr.w	fp, fp, #16
 800c918:	e79a      	b.n	800c850 <_svfiprintf_r+0xb8>
 800c91a:	f04b 0b10 	orr.w	fp, fp, #16
 800c91e:	f01b 0f10 	tst.w	fp, #16
 800c922:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800c926:	9b07      	ldr	r3, [sp, #28]
 800c928:	d103      	bne.n	800c932 <_svfiprintf_r+0x19a>
 800c92a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800c92e:	f040 8339 	bne.w	800cfa4 <_svfiprintf_r+0x80c>
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	3304      	adds	r3, #4
 800c936:	9307      	str	r3, [sp, #28]
 800c938:	2a00      	cmp	r2, #0
 800c93a:	f2c0 833a 	blt.w	800cfb2 <_svfiprintf_r+0x81a>
 800c93e:	bf0c      	ite	eq
 800c940:	2100      	moveq	r1, #0
 800c942:	2101      	movne	r1, #1
 800c944:	2301      	movs	r3, #1
 800c946:	2d00      	cmp	r5, #0
 800c948:	bfa8      	it	ge
 800c94a:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800c94e:	2d00      	cmp	r5, #0
 800c950:	bf18      	it	ne
 800c952:	f041 0101 	orrne.w	r1, r1, #1
 800c956:	2900      	cmp	r1, #0
 800c958:	d13b      	bne.n	800c9d2 <_svfiprintf_r+0x23a>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f040 8293 	bne.w	800ce86 <_svfiprintf_r+0x6ee>
 800c960:	f01b 0f01 	tst.w	fp, #1
 800c964:	bf04      	itt	eq
 800c966:	9305      	streq	r3, [sp, #20]
 800c968:	f8cd 8028 	streq.w	r8, [sp, #40]	; 0x28
 800c96c:	d007      	beq.n	800c97e <_svfiprintf_r+0x1e6>
 800c96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c970:	9305      	str	r3, [sp, #20]
 800c972:	2330      	movs	r3, #48	; 0x30
 800c974:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 800c978:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800c97c:	930a      	str	r3, [sp, #40]	; 0x28
 800c97e:	9509      	str	r5, [sp, #36]	; 0x24
 800c980:	9805      	ldr	r0, [sp, #20]
 800c982:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c984:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 800c988:	4288      	cmp	r0, r1
 800c98a:	bfb8      	it	lt
 800c98c:	4608      	movlt	r0, r1
 800c98e:	9004      	str	r0, [sp, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d078      	beq.n	800ca86 <_svfiprintf_r+0x2ee>
 800c994:	3001      	adds	r0, #1
 800c996:	9004      	str	r0, [sp, #16]
 800c998:	e075      	b.n	800ca86 <_svfiprintf_r+0x2ee>
 800c99a:	f04b 0b10 	orr.w	fp, fp, #16
 800c99e:	f01b 0310 	ands.w	r3, fp, #16
 800c9a2:	f000 82c9 	beq.w	800cf38 <_svfiprintf_r+0x7a0>
 800c9a6:	9b07      	ldr	r3, [sp, #28]
 800c9a8:	9807      	ldr	r0, [sp, #28]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	3004      	adds	r0, #4
 800c9b0:	9007      	str	r0, [sp, #28]
 800c9b2:	1ad1      	subs	r1, r2, r3
 800c9b4:	bf18      	it	ne
 800c9b6:	2101      	movne	r1, #1
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 800c9be:	2d00      	cmp	r5, #0
 800c9c0:	bfa8      	it	ge
 800c9c2:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	bf18      	it	ne
 800c9ca:	f041 0101 	orrne.w	r1, r1, #1
 800c9ce:	2900      	cmp	r1, #0
 800c9d0:	d0c3      	beq.n	800c95a <_svfiprintf_r+0x1c2>
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	f000 8285 	beq.w	800cee2 <_svfiprintf_r+0x74a>
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	bf18      	it	ne
 800c9dc:	4643      	movne	r3, r8
 800c9de:	d101      	bne.n	800c9e4 <_svfiprintf_r+0x24c>
 800c9e0:	e298      	b.n	800cf14 <_svfiprintf_r+0x77c>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f002 0107 	and.w	r1, r2, #7
 800c9e8:	1e58      	subs	r0, r3, #1
 800c9ea:	3130      	adds	r1, #48	; 0x30
 800c9ec:	08d2      	lsrs	r2, r2, #3
 800c9ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c9f2:	d1f6      	bne.n	800c9e2 <_svfiprintf_r+0x24a>
 800c9f4:	f01b 0f01 	tst.w	fp, #1
 800c9f8:	900a      	str	r0, [sp, #40]	; 0x28
 800c9fa:	bf04      	itt	eq
 800c9fc:	ebc0 0308 	rsbeq	r3, r0, r8
 800ca00:	9305      	streq	r3, [sp, #20]
 800ca02:	d0bc      	beq.n	800c97e <_svfiprintf_r+0x1e6>
 800ca04:	2930      	cmp	r1, #48	; 0x30
 800ca06:	f000 831b 	beq.w	800d040 <_svfiprintf_r+0x8a8>
 800ca0a:	1e98      	subs	r0, r3, #2
 800ca0c:	2230      	movs	r2, #48	; 0x30
 800ca0e:	ebc0 0108 	rsb	r1, r0, r8
 800ca12:	900a      	str	r0, [sp, #40]	; 0x28
 800ca14:	9105      	str	r1, [sp, #20]
 800ca16:	f803 2c02 	strb.w	r2, [r3, #-2]
 800ca1a:	e7b0      	b.n	800c97e <_svfiprintf_r+0x1e6>
 800ca1c:	f04b 0b10 	orr.w	fp, fp, #16
 800ca20:	f01b 0f10 	tst.w	fp, #16
 800ca24:	9b07      	ldr	r3, [sp, #28]
 800ca26:	d103      	bne.n	800ca30 <_svfiprintf_r+0x298>
 800ca28:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800ca2c:	f040 82da 	bne.w	800cfe4 <_svfiprintf_r+0x84c>
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	2301      	movs	r3, #1
 800ca34:	9807      	ldr	r0, [sp, #28]
 800ca36:	3004      	adds	r0, #4
 800ca38:	1c11      	adds	r1, r2, #0
 800ca3a:	9007      	str	r0, [sp, #28]
 800ca3c:	bf18      	it	ne
 800ca3e:	2101      	movne	r1, #1
 800ca40:	e7ba      	b.n	800c9b8 <_svfiprintf_r+0x220>
 800ca42:	9b07      	ldr	r3, [sp, #28]
 800ca44:	9807      	ldr	r0, [sp, #28]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	9308      	str	r3, [sp, #32]
 800ca4a:	1d03      	adds	r3, r0, #4
 800ca4c:	9908      	ldr	r1, [sp, #32]
 800ca4e:	2900      	cmp	r1, #0
 800ca50:	f280 8293 	bge.w	800cf7a <_svfiprintf_r+0x7e2>
 800ca54:	4249      	negs	r1, r1
 800ca56:	9307      	str	r3, [sp, #28]
 800ca58:	9108      	str	r1, [sp, #32]
 800ca5a:	f04b 0b04 	orr.w	fp, fp, #4
 800ca5e:	e6f7      	b.n	800c850 <_svfiprintf_r+0xb8>
 800ca60:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800ca64:	e6f4      	b.n	800c850 <_svfiprintf_r+0xb8>
 800ca66:	9b07      	ldr	r3, [sp, #28]
 800ca68:	2001      	movs	r0, #1
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	9004      	str	r0, [sp, #16]
 800ca6e:	1d19      	adds	r1, r3, #4
 800ca70:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	aa20      	add	r2, sp, #128	; 0x80
 800ca78:	9107      	str	r1, [sp, #28]
 800ca7a:	9005      	str	r0, [sp, #20]
 800ca7c:	920a      	str	r2, [sp, #40]	; 0x28
 800ca7e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800ca82:	2300      	movs	r3, #0
 800ca84:	9309      	str	r3, [sp, #36]	; 0x24
 800ca86:	f01b 0302 	ands.w	r3, fp, #2
 800ca8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca8c:	d002      	beq.n	800ca94 <_svfiprintf_r+0x2fc>
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	3302      	adds	r3, #2
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800ca98:	930c      	str	r3, [sp, #48]	; 0x30
 800ca9a:	f040 80e3 	bne.w	800cc64 <_svfiprintf_r+0x4cc>
 800ca9e:	9b08      	ldr	r3, [sp, #32]
 800caa0:	9804      	ldr	r0, [sp, #16]
 800caa2:	1a1d      	subs	r5, r3, r0
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	f340 80dd 	ble.w	800cc64 <_svfiprintf_r+0x4cc>
 800caaa:	2d10      	cmp	r5, #16
 800caac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800caae:	f340 82c4 	ble.w	800d03a <_svfiprintf_r+0x8a2>
 800cab2:	f04f 0910 	mov.w	r9, #16
 800cab6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cab8:	4ea4      	ldr	r6, [pc, #656]	; (800cd4c <_svfiprintf_r+0x5b4>)
 800caba:	e002      	b.n	800cac2 <_svfiprintf_r+0x32a>
 800cabc:	3d10      	subs	r5, #16
 800cabe:	2d10      	cmp	r5, #16
 800cac0:	dd16      	ble.n	800caf0 <_svfiprintf_r+0x358>
 800cac2:	3301      	adds	r3, #1
 800cac4:	3210      	adds	r2, #16
 800cac6:	e884 0240 	stmia.w	r4, {r6, r9}
 800caca:	3408      	adds	r4, #8
 800cacc:	2b07      	cmp	r3, #7
 800cace:	932b      	str	r3, [sp, #172]	; 0xac
 800cad0:	922c      	str	r2, [sp, #176]	; 0xb0
 800cad2:	ddf3      	ble.n	800cabc <_svfiprintf_r+0x324>
 800cad4:	9803      	ldr	r0, [sp, #12]
 800cad6:	4651      	mov	r1, sl
 800cad8:	4642      	mov	r2, r8
 800cada:	ac10      	add	r4, sp, #64	; 0x40
 800cadc:	f7ff fdd0 	bl	800c680 <__ssprint_r>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	f040 8180 	bne.w	800cde6 <_svfiprintf_r+0x64e>
 800cae6:	3d10      	subs	r5, #16
 800cae8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800caea:	2d10      	cmp	r5, #16
 800caec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800caee:	dce8      	bgt.n	800cac2 <_svfiprintf_r+0x32a>
 800caf0:	3301      	adds	r3, #1
 800caf2:	1952      	adds	r2, r2, r5
 800caf4:	2b07      	cmp	r3, #7
 800caf6:	6026      	str	r6, [r4, #0]
 800caf8:	6065      	str	r5, [r4, #4]
 800cafa:	932b      	str	r3, [sp, #172]	; 0xac
 800cafc:	922c      	str	r2, [sp, #176]	; 0xb0
 800cafe:	f300 8226 	bgt.w	800cf4e <_svfiprintf_r+0x7b6>
 800cb02:	3408      	adds	r4, #8
 800cb04:	e0b0      	b.n	800cc68 <_svfiprintf_r+0x4d0>
 800cb06:	4992      	ldr	r1, [pc, #584]	; (800cd50 <_svfiprintf_r+0x5b8>)
 800cb08:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cb0c:	910d      	str	r1, [sp, #52]	; 0x34
 800cb0e:	f01b 0f10 	tst.w	fp, #16
 800cb12:	d103      	bne.n	800cb1c <_svfiprintf_r+0x384>
 800cb14:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cb18:	f040 825f 	bne.w	800cfda <_svfiprintf_r+0x842>
 800cb1c:	9807      	ldr	r0, [sp, #28]
 800cb1e:	6802      	ldr	r2, [r0, #0]
 800cb20:	3004      	adds	r0, #4
 800cb22:	9007      	str	r0, [sp, #28]
 800cb24:	1c11      	adds	r1, r2, #0
 800cb26:	bf18      	it	ne
 800cb28:	2101      	movne	r1, #1
 800cb2a:	ea1b 0f01 	tst.w	fp, r1
 800cb2e:	f000 8201 	beq.w	800cf34 <_svfiprintf_r+0x79c>
 800cb32:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 800cb36:	f04b 0b02 	orr.w	fp, fp, #2
 800cb3a:	2330      	movs	r3, #48	; 0x30
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800cb42:	2302      	movs	r3, #2
 800cb44:	e738      	b.n	800c9b8 <_svfiprintf_r+0x220>
 800cb46:	f01b 0f10 	tst.w	fp, #16
 800cb4a:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cb4e:	f040 823d 	bne.w	800cfcc <_svfiprintf_r+0x834>
 800cb52:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cb56:	f000 8259 	beq.w	800d00c <_svfiprintf_r+0x874>
 800cb5a:	9a07      	ldr	r2, [sp, #28]
 800cb5c:	9806      	ldr	r0, [sp, #24]
 800cb5e:	6813      	ldr	r3, [r2, #0]
 800cb60:	3204      	adds	r2, #4
 800cb62:	9207      	str	r2, [sp, #28]
 800cb64:	8018      	strh	r0, [r3, #0]
 800cb66:	e639      	b.n	800c7dc <_svfiprintf_r+0x44>
 800cb68:	497a      	ldr	r1, [pc, #488]	; (800cd54 <_svfiprintf_r+0x5bc>)
 800cb6a:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cb6e:	910d      	str	r1, [sp, #52]	; 0x34
 800cb70:	e7cd      	b.n	800cb0e <_svfiprintf_r+0x376>
 800cb72:	9b07      	ldr	r3, [sp, #28]
 800cb74:	f04b 0b02 	orr.w	fp, fp, #2
 800cb78:	4876      	ldr	r0, [pc, #472]	; (800cd54 <_svfiprintf_r+0x5bc>)
 800cb7a:	1d19      	adds	r1, r3, #4
 800cb7c:	9107      	str	r1, [sp, #28]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	2178      	movs	r1, #120	; 0x78
 800cb82:	2330      	movs	r3, #48	; 0x30
 800cb84:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 800cb88:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	1c11      	adds	r1, r2, #0
 800cb90:	900d      	str	r0, [sp, #52]	; 0x34
 800cb92:	bf18      	it	ne
 800cb94:	2101      	movne	r1, #1
 800cb96:	e70f      	b.n	800c9b8 <_svfiprintf_r+0x220>
 800cb98:	2a00      	cmp	r2, #0
 800cb9a:	bf08      	it	eq
 800cb9c:	2220      	moveq	r2, #32
 800cb9e:	e657      	b.n	800c850 <_svfiprintf_r+0xb8>
 800cba0:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f000 8117 	beq.w	800cdd8 <_svfiprintf_r+0x640>
 800cbaa:	2001      	movs	r0, #1
 800cbac:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800cbb0:	9004      	str	r0, [sp, #16]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9005      	str	r0, [sp, #20]
 800cbb6:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800cbba:	ab20      	add	r3, sp, #128	; 0x80
 800cbbc:	930a      	str	r3, [sp, #40]	; 0x28
 800cbbe:	e760      	b.n	800ca82 <_svfiprintf_r+0x2ea>
 800cbc0:	9b07      	ldr	r3, [sp, #28]
 800cbc2:	2600      	movs	r6, #0
 800cbc4:	f88d 60b7 	strb.w	r6, [sp, #183]	; 0xb7
 800cbc8:	1d19      	adds	r1, r3, #4
 800cbca:	9107      	str	r1, [sp, #28]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 823a 	beq.w	800d04a <_svfiprintf_r+0x8b2>
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cbda:	f2c0 8206 	blt.w	800cfea <_svfiprintf_r+0x852>
 800cbde:	4631      	mov	r1, r6
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	f7fa fcbb 	bl	800755c <memchr>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	f000 8239 	beq.w	800d05e <_svfiprintf_r+0x8c6>
 800cbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbee:	9609      	str	r6, [sp, #36]	; 0x24
 800cbf0:	1ac0      	subs	r0, r0, r3
 800cbf2:	9005      	str	r0, [sp, #20]
 800cbf4:	42a8      	cmp	r0, r5
 800cbf6:	bfc8      	it	gt
 800cbf8:	9505      	strgt	r5, [sp, #20]
 800cbfa:	e6c1      	b.n	800c980 <_svfiprintf_r+0x1e8>
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	2100      	movs	r1, #0
 800cc00:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800cc04:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cc08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cc0c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800cc10:	4607      	mov	r7, r0
 800cc12:	2e09      	cmp	r6, #9
 800cc14:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cc18:	d9f2      	bls.n	800cc00 <_svfiprintf_r+0x468>
 800cc1a:	9108      	str	r1, [sp, #32]
 800cc1c:	e61a      	b.n	800c854 <_svfiprintf_r+0xbc>
 800cc1e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800cc22:	e615      	b.n	800c850 <_svfiprintf_r+0xb8>
 800cc24:	f817 3b01 	ldrb.w	r3, [r7], #1
 800cc28:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2a:	f000 819c 	beq.w	800cf66 <_svfiprintf_r+0x7ce>
 800cc2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cc32:	2500      	movs	r5, #0
 800cc34:	2909      	cmp	r1, #9
 800cc36:	f63f ae0d 	bhi.w	800c854 <_svfiprintf_r+0xbc>
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	2500      	movs	r5, #0
 800cc3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cc42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cc46:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800cc4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cc4e:	2909      	cmp	r1, #9
 800cc50:	4607      	mov	r7, r0
 800cc52:	d9f4      	bls.n	800cc3e <_svfiprintf_r+0x4a6>
 800cc54:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800cc58:	e5fc      	b.n	800c854 <_svfiprintf_r+0xbc>
 800cc5a:	222b      	movs	r2, #43	; 0x2b
 800cc5c:	e5f8      	b.n	800c850 <_svfiprintf_r+0xb8>
 800cc5e:	f04b 0b01 	orr.w	fp, fp, #1
 800cc62:	e5f5      	b.n	800c850 <_svfiprintf_r+0xb8>
 800cc64:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cc66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cc68:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
 800cc6c:	b161      	cbz	r1, 800cc88 <_svfiprintf_r+0x4f0>
 800cc6e:	3301      	adds	r3, #1
 800cc70:	f10d 01b7 	add.w	r1, sp, #183	; 0xb7
 800cc74:	6021      	str	r1, [r4, #0]
 800cc76:	2101      	movs	r1, #1
 800cc78:	2b07      	cmp	r3, #7
 800cc7a:	440a      	add	r2, r1
 800cc7c:	6061      	str	r1, [r4, #4]
 800cc7e:	932b      	str	r3, [sp, #172]	; 0xac
 800cc80:	922c      	str	r2, [sp, #176]	; 0xb0
 800cc82:	f300 8118 	bgt.w	800ceb6 <_svfiprintf_r+0x71e>
 800cc86:	3408      	adds	r4, #8
 800cc88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc8a:	b159      	cbz	r1, 800cca4 <_svfiprintf_r+0x50c>
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	a92d      	add	r1, sp, #180	; 0xb4
 800cc90:	6021      	str	r1, [r4, #0]
 800cc92:	2102      	movs	r1, #2
 800cc94:	2b07      	cmp	r3, #7
 800cc96:	440a      	add	r2, r1
 800cc98:	6061      	str	r1, [r4, #4]
 800cc9a:	932b      	str	r3, [sp, #172]	; 0xac
 800cc9c:	922c      	str	r2, [sp, #176]	; 0xb0
 800cc9e:	f300 8115 	bgt.w	800cecc <_svfiprintf_r+0x734>
 800cca2:	3408      	adds	r4, #8
 800cca4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cca6:	2880      	cmp	r0, #128	; 0x80
 800cca8:	f000 80aa 	beq.w	800ce00 <_svfiprintf_r+0x668>
 800ccac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccae:	9805      	ldr	r0, [sp, #20]
 800ccb0:	1a0d      	subs	r5, r1, r0
 800ccb2:	2d00      	cmp	r5, #0
 800ccb4:	dd29      	ble.n	800cd0a <_svfiprintf_r+0x572>
 800ccb6:	2d10      	cmp	r5, #16
 800ccb8:	4e27      	ldr	r6, [pc, #156]	; (800cd58 <_svfiprintf_r+0x5c0>)
 800ccba:	bfc8      	it	gt
 800ccbc:	f04f 0910 	movgt.w	r9, #16
 800ccc0:	dc03      	bgt.n	800ccca <_svfiprintf_r+0x532>
 800ccc2:	e018      	b.n	800ccf6 <_svfiprintf_r+0x55e>
 800ccc4:	3d10      	subs	r5, #16
 800ccc6:	2d10      	cmp	r5, #16
 800ccc8:	dd15      	ble.n	800ccf6 <_svfiprintf_r+0x55e>
 800ccca:	3301      	adds	r3, #1
 800cccc:	3210      	adds	r2, #16
 800ccce:	e884 0240 	stmia.w	r4, {r6, r9}
 800ccd2:	3408      	adds	r4, #8
 800ccd4:	2b07      	cmp	r3, #7
 800ccd6:	932b      	str	r3, [sp, #172]	; 0xac
 800ccd8:	922c      	str	r2, [sp, #176]	; 0xb0
 800ccda:	ddf3      	ble.n	800ccc4 <_svfiprintf_r+0x52c>
 800ccdc:	9803      	ldr	r0, [sp, #12]
 800ccde:	4651      	mov	r1, sl
 800cce0:	4642      	mov	r2, r8
 800cce2:	ac10      	add	r4, sp, #64	; 0x40
 800cce4:	f7ff fccc 	bl	800c680 <__ssprint_r>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d17c      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800ccec:	3d10      	subs	r5, #16
 800ccee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ccf0:	2d10      	cmp	r5, #16
 800ccf2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ccf4:	dce9      	bgt.n	800ccca <_svfiprintf_r+0x532>
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	1952      	adds	r2, r2, r5
 800ccfa:	2b07      	cmp	r3, #7
 800ccfc:	6026      	str	r6, [r4, #0]
 800ccfe:	6065      	str	r5, [r4, #4]
 800cd00:	932b      	str	r3, [sp, #172]	; 0xac
 800cd02:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd04:	f300 80cc 	bgt.w	800cea0 <_svfiprintf_r+0x708>
 800cd08:	3408      	adds	r4, #8
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd0e:	9805      	ldr	r0, [sp, #20]
 800cd10:	2b07      	cmp	r3, #7
 800cd12:	932b      	str	r3, [sp, #172]	; 0xac
 800cd14:	6021      	str	r1, [r4, #0]
 800cd16:	4402      	add	r2, r0
 800cd18:	6060      	str	r0, [r4, #4]
 800cd1a:	bfd8      	it	le
 800cd1c:	f104 0108 	addle.w	r1, r4, #8
 800cd20:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd22:	f300 809e 	bgt.w	800ce62 <_svfiprintf_r+0x6ca>
 800cd26:	f01b 0f04 	tst.w	fp, #4
 800cd2a:	d039      	beq.n	800cda0 <_svfiprintf_r+0x608>
 800cd2c:	9b08      	ldr	r3, [sp, #32]
 800cd2e:	9804      	ldr	r0, [sp, #16]
 800cd30:	1a1d      	subs	r5, r3, r0
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	dd34      	ble.n	800cda0 <_svfiprintf_r+0x608>
 800cd36:	2d10      	cmp	r5, #16
 800cd38:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cd3a:	bfd8      	it	le
 800cd3c:	4e03      	ldrle	r6, [pc, #12]	; (800cd4c <_svfiprintf_r+0x5b4>)
 800cd3e:	dd26      	ble.n	800cd8e <_svfiprintf_r+0x5f6>
 800cd40:	2410      	movs	r4, #16
 800cd42:	4e02      	ldr	r6, [pc, #8]	; (800cd4c <_svfiprintf_r+0x5b4>)
 800cd44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cd48:	e00b      	b.n	800cd62 <_svfiprintf_r+0x5ca>
 800cd4a:	bf00      	nop
 800cd4c:	0801a8d0 	.word	0x0801a8d0
 800cd50:	0801e874 	.word	0x0801e874
 800cd54:	0801e888 	.word	0x0801e888
 800cd58:	0801a8e0 	.word	0x0801a8e0
 800cd5c:	3d10      	subs	r5, #16
 800cd5e:	2d10      	cmp	r5, #16
 800cd60:	dd15      	ble.n	800cd8e <_svfiprintf_r+0x5f6>
 800cd62:	3301      	adds	r3, #1
 800cd64:	3210      	adds	r2, #16
 800cd66:	600e      	str	r6, [r1, #0]
 800cd68:	604c      	str	r4, [r1, #4]
 800cd6a:	3108      	adds	r1, #8
 800cd6c:	2b07      	cmp	r3, #7
 800cd6e:	932b      	str	r3, [sp, #172]	; 0xac
 800cd70:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd72:	ddf3      	ble.n	800cd5c <_svfiprintf_r+0x5c4>
 800cd74:	4648      	mov	r0, r9
 800cd76:	4651      	mov	r1, sl
 800cd78:	4642      	mov	r2, r8
 800cd7a:	f7ff fc81 	bl	800c680 <__ssprint_r>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d131      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800cd82:	3d10      	subs	r5, #16
 800cd84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cd86:	2d10      	cmp	r5, #16
 800cd88:	a910      	add	r1, sp, #64	; 0x40
 800cd8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cd8c:	dce9      	bgt.n	800cd62 <_svfiprintf_r+0x5ca>
 800cd8e:	3301      	adds	r3, #1
 800cd90:	18aa      	adds	r2, r5, r2
 800cd92:	2b07      	cmp	r3, #7
 800cd94:	600e      	str	r6, [r1, #0]
 800cd96:	604d      	str	r5, [r1, #4]
 800cd98:	932b      	str	r3, [sp, #172]	; 0xac
 800cd9a:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd9c:	f300 80ef 	bgt.w	800cf7e <_svfiprintf_r+0x7e6>
 800cda0:	9b06      	ldr	r3, [sp, #24]
 800cda2:	9804      	ldr	r0, [sp, #16]
 800cda4:	9908      	ldr	r1, [sp, #32]
 800cda6:	4288      	cmp	r0, r1
 800cda8:	bfac      	ite	ge
 800cdaa:	181b      	addge	r3, r3, r0
 800cdac:	185b      	addlt	r3, r3, r1
 800cdae:	9306      	str	r3, [sp, #24]
 800cdb0:	2a00      	cmp	r2, #0
 800cdb2:	d160      	bne.n	800ce76 <_svfiprintf_r+0x6de>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	932b      	str	r3, [sp, #172]	; 0xac
 800cdb8:	783b      	ldrb	r3, [r7, #0]
 800cdba:	ac10      	add	r4, sp, #64	; 0x40
 800cdbc:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800cdc0:	bf18      	it	ne
 800cdc2:	2201      	movne	r2, #1
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bf0c      	ite	eq
 800cdc8:	2300      	moveq	r3, #0
 800cdca:	f002 0301 	andne.w	r3, r2, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f47f ad11 	bne.w	800c7f6 <_svfiprintf_r+0x5e>
 800cdd4:	463d      	mov	r5, r7
 800cdd6:	e52e      	b.n	800c836 <_svfiprintf_r+0x9e>
 800cdd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800cdda:	b123      	cbz	r3, 800cde6 <_svfiprintf_r+0x64e>
 800cddc:	9803      	ldr	r0, [sp, #12]
 800cdde:	4651      	mov	r1, sl
 800cde0:	aa2a      	add	r2, sp, #168	; 0xa8
 800cde2:	f7ff fc4d 	bl	800c680 <__ssprint_r>
 800cde6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cdea:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	bf18      	it	ne
 800cdf2:	f04f 33ff 	movne.w	r3, #4294967295
 800cdf6:	9306      	str	r3, [sp, #24]
 800cdf8:	9806      	ldr	r0, [sp, #24]
 800cdfa:	b02f      	add	sp, #188	; 0xbc
 800cdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce00:	9908      	ldr	r1, [sp, #32]
 800ce02:	9804      	ldr	r0, [sp, #16]
 800ce04:	1a0d      	subs	r5, r1, r0
 800ce06:	2d00      	cmp	r5, #0
 800ce08:	f77f af50 	ble.w	800ccac <_svfiprintf_r+0x514>
 800ce0c:	2d10      	cmp	r5, #16
 800ce0e:	4e99      	ldr	r6, [pc, #612]	; (800d074 <_svfiprintf_r+0x8dc>)
 800ce10:	bfc8      	it	gt
 800ce12:	f04f 0910 	movgt.w	r9, #16
 800ce16:	dc03      	bgt.n	800ce20 <_svfiprintf_r+0x688>
 800ce18:	e018      	b.n	800ce4c <_svfiprintf_r+0x6b4>
 800ce1a:	3d10      	subs	r5, #16
 800ce1c:	2d10      	cmp	r5, #16
 800ce1e:	dd15      	ble.n	800ce4c <_svfiprintf_r+0x6b4>
 800ce20:	3301      	adds	r3, #1
 800ce22:	3210      	adds	r2, #16
 800ce24:	e884 0240 	stmia.w	r4, {r6, r9}
 800ce28:	3408      	adds	r4, #8
 800ce2a:	2b07      	cmp	r3, #7
 800ce2c:	932b      	str	r3, [sp, #172]	; 0xac
 800ce2e:	922c      	str	r2, [sp, #176]	; 0xb0
 800ce30:	ddf3      	ble.n	800ce1a <_svfiprintf_r+0x682>
 800ce32:	9803      	ldr	r0, [sp, #12]
 800ce34:	4651      	mov	r1, sl
 800ce36:	4642      	mov	r2, r8
 800ce38:	ac10      	add	r4, sp, #64	; 0x40
 800ce3a:	f7ff fc21 	bl	800c680 <__ssprint_r>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d1d1      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800ce42:	3d10      	subs	r5, #16
 800ce44:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce46:	2d10      	cmp	r5, #16
 800ce48:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ce4a:	dce9      	bgt.n	800ce20 <_svfiprintf_r+0x688>
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	1952      	adds	r2, r2, r5
 800ce50:	2b07      	cmp	r3, #7
 800ce52:	6026      	str	r6, [r4, #0]
 800ce54:	6065      	str	r5, [r4, #4]
 800ce56:	932b      	str	r3, [sp, #172]	; 0xac
 800ce58:	922c      	str	r2, [sp, #176]	; 0xb0
 800ce5a:	f300 80cb 	bgt.w	800cff4 <_svfiprintf_r+0x85c>
 800ce5e:	3408      	adds	r4, #8
 800ce60:	e724      	b.n	800ccac <_svfiprintf_r+0x514>
 800ce62:	9803      	ldr	r0, [sp, #12]
 800ce64:	4651      	mov	r1, sl
 800ce66:	4642      	mov	r2, r8
 800ce68:	f7ff fc0a 	bl	800c680 <__ssprint_r>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d1ba      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800ce70:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce72:	a910      	add	r1, sp, #64	; 0x40
 800ce74:	e757      	b.n	800cd26 <_svfiprintf_r+0x58e>
 800ce76:	9803      	ldr	r0, [sp, #12]
 800ce78:	4651      	mov	r1, sl
 800ce7a:	4642      	mov	r2, r8
 800ce7c:	f7ff fc00 	bl	800c680 <__ssprint_r>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d097      	beq.n	800cdb4 <_svfiprintf_r+0x61c>
 800ce84:	e7af      	b.n	800cde6 <_svfiprintf_r+0x64e>
 800ce86:	9105      	str	r1, [sp, #20]
 800ce88:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ce8c:	e577      	b.n	800c97e <_svfiprintf_r+0x1e6>
 800ce8e:	9803      	ldr	r0, [sp, #12]
 800ce90:	4651      	mov	r1, sl
 800ce92:	4642      	mov	r2, r8
 800ce94:	f7ff fbf4 	bl	800c680 <__ssprint_r>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d1a4      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800ce9c:	ac10      	add	r4, sp, #64	; 0x40
 800ce9e:	e4c7      	b.n	800c830 <_svfiprintf_r+0x98>
 800cea0:	9803      	ldr	r0, [sp, #12]
 800cea2:	4651      	mov	r1, sl
 800cea4:	4642      	mov	r2, r8
 800cea6:	f7ff fbeb 	bl	800c680 <__ssprint_r>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d19b      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800ceae:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ceb0:	ac10      	add	r4, sp, #64	; 0x40
 800ceb2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ceb4:	e729      	b.n	800cd0a <_svfiprintf_r+0x572>
 800ceb6:	9803      	ldr	r0, [sp, #12]
 800ceb8:	4651      	mov	r1, sl
 800ceba:	4642      	mov	r2, r8
 800cebc:	f7ff fbe0 	bl	800c680 <__ssprint_r>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d190      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800cec4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cec6:	ac10      	add	r4, sp, #64	; 0x40
 800cec8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ceca:	e6dd      	b.n	800cc88 <_svfiprintf_r+0x4f0>
 800cecc:	9803      	ldr	r0, [sp, #12]
 800cece:	4651      	mov	r1, sl
 800ced0:	4642      	mov	r2, r8
 800ced2:	f7ff fbd5 	bl	800c680 <__ssprint_r>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d185      	bne.n	800cde6 <_svfiprintf_r+0x64e>
 800ceda:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cedc:	ac10      	add	r4, sp, #64	; 0x40
 800cede:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cee0:	e6e0      	b.n	800cca4 <_svfiprintf_r+0x50c>
 800cee2:	2a09      	cmp	r2, #9
 800cee4:	d955      	bls.n	800cf92 <_svfiprintf_r+0x7fa>
 800cee6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800ceea:	f10d 00a7 	add.w	r0, sp, #167	; 0xa7
 800ceee:	fbac 1302 	umull	r1, r3, ip, r2
 800cef2:	4601      	mov	r1, r0
 800cef4:	3801      	subs	r0, #1
 800cef6:	08db      	lsrs	r3, r3, #3
 800cef8:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800cefc:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 800cf00:	461a      	mov	r2, r3
 800cf02:	3630      	adds	r6, #48	; 0x30
 800cf04:	700e      	strb	r6, [r1, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1f1      	bne.n	800ceee <_svfiprintf_r+0x756>
 800cf0a:	ebc1 0308 	rsb	r3, r1, r8
 800cf0e:	910a      	str	r1, [sp, #40]	; 0x28
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	e534      	b.n	800c97e <_svfiprintf_r+0x1e6>
 800cf14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cf16:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800cf1a:	f002 000f 	and.w	r0, r2, #15
 800cf1e:	4619      	mov	r1, r3
 800cf20:	3b01      	subs	r3, #1
 800cf22:	0912      	lsrs	r2, r2, #4
 800cf24:	5c30      	ldrb	r0, [r6, r0]
 800cf26:	7008      	strb	r0, [r1, #0]
 800cf28:	d1f7      	bne.n	800cf1a <_svfiprintf_r+0x782>
 800cf2a:	ebc1 0308 	rsb	r3, r1, r8
 800cf2e:	910a      	str	r1, [sp, #40]	; 0x28
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	e524      	b.n	800c97e <_svfiprintf_r+0x1e6>
 800cf34:	2302      	movs	r3, #2
 800cf36:	e53f      	b.n	800c9b8 <_svfiprintf_r+0x220>
 800cf38:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800cf3c:	d042      	beq.n	800cfc4 <_svfiprintf_r+0x82c>
 800cf3e:	9907      	ldr	r1, [sp, #28]
 800cf40:	880a      	ldrh	r2, [r1, #0]
 800cf42:	3104      	adds	r1, #4
 800cf44:	9107      	str	r1, [sp, #28]
 800cf46:	1c11      	adds	r1, r2, #0
 800cf48:	bf18      	it	ne
 800cf4a:	2101      	movne	r1, #1
 800cf4c:	e534      	b.n	800c9b8 <_svfiprintf_r+0x220>
 800cf4e:	9803      	ldr	r0, [sp, #12]
 800cf50:	4651      	mov	r1, sl
 800cf52:	4642      	mov	r2, r8
 800cf54:	f7ff fb94 	bl	800c680 <__ssprint_r>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f47f af44 	bne.w	800cde6 <_svfiprintf_r+0x64e>
 800cf5e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cf60:	ac10      	add	r4, sp, #64	; 0x40
 800cf62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cf64:	e680      	b.n	800cc68 <_svfiprintf_r+0x4d0>
 800cf66:	9b07      	ldr	r3, [sp, #28]
 800cf68:	681d      	ldr	r5, [r3, #0]
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	2d00      	cmp	r5, #0
 800cf6e:	bfbc      	itt	lt
 800cf70:	9307      	strlt	r3, [sp, #28]
 800cf72:	f04f 35ff 	movlt.w	r5, #4294967295
 800cf76:	f6ff ac6b 	blt.w	800c850 <_svfiprintf_r+0xb8>
 800cf7a:	9307      	str	r3, [sp, #28]
 800cf7c:	e468      	b.n	800c850 <_svfiprintf_r+0xb8>
 800cf7e:	9803      	ldr	r0, [sp, #12]
 800cf80:	4651      	mov	r1, sl
 800cf82:	4642      	mov	r2, r8
 800cf84:	f7ff fb7c 	bl	800c680 <__ssprint_r>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	f47f af2c 	bne.w	800cde6 <_svfiprintf_r+0x64e>
 800cf8e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cf90:	e706      	b.n	800cda0 <_svfiprintf_r+0x608>
 800cf92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf94:	3230      	adds	r2, #48	; 0x30
 800cf96:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 800cf9a:	9305      	str	r3, [sp, #20]
 800cf9c:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800cfa0:	930a      	str	r3, [sp, #40]	; 0x28
 800cfa2:	e4ec      	b.n	800c97e <_svfiprintf_r+0x1e6>
 800cfa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	9307      	str	r3, [sp, #28]
 800cfac:	2a00      	cmp	r2, #0
 800cfae:	f6bf acc6 	bge.w	800c93e <_svfiprintf_r+0x1a6>
 800cfb2:	4252      	negs	r2, r2
 800cfb4:	1c11      	adds	r1, r2, #0
 800cfb6:	bf18      	it	ne
 800cfb8:	2101      	movne	r1, #1
 800cfba:	232d      	movs	r3, #45	; 0x2d
 800cfbc:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e4fc      	b.n	800c9be <_svfiprintf_r+0x226>
 800cfc4:	9b07      	ldr	r3, [sp, #28]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	e533      	b.n	800ca34 <_svfiprintf_r+0x29c>
 800cfcc:	9807      	ldr	r0, [sp, #28]
 800cfce:	9906      	ldr	r1, [sp, #24]
 800cfd0:	6803      	ldr	r3, [r0, #0]
 800cfd2:	3004      	adds	r0, #4
 800cfd4:	9007      	str	r0, [sp, #28]
 800cfd6:	6019      	str	r1, [r3, #0]
 800cfd8:	e400      	b.n	800c7dc <_svfiprintf_r+0x44>
 800cfda:	9907      	ldr	r1, [sp, #28]
 800cfdc:	880a      	ldrh	r2, [r1, #0]
 800cfde:	3104      	adds	r1, #4
 800cfe0:	9107      	str	r1, [sp, #28]
 800cfe2:	e59f      	b.n	800cb24 <_svfiprintf_r+0x38c>
 800cfe4:	881a      	ldrh	r2, [r3, #0]
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e524      	b.n	800ca34 <_svfiprintf_r+0x29c>
 800cfea:	9609      	str	r6, [sp, #36]	; 0x24
 800cfec:	f7fb f8d2 	bl	8008194 <strlen>
 800cff0:	9005      	str	r0, [sp, #20]
 800cff2:	e4c5      	b.n	800c980 <_svfiprintf_r+0x1e8>
 800cff4:	9803      	ldr	r0, [sp, #12]
 800cff6:	4651      	mov	r1, sl
 800cff8:	4642      	mov	r2, r8
 800cffa:	f7ff fb41 	bl	800c680 <__ssprint_r>
 800cffe:	2800      	cmp	r0, #0
 800d000:	f47f aef1 	bne.w	800cde6 <_svfiprintf_r+0x64e>
 800d004:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d006:	ac10      	add	r4, sp, #64	; 0x40
 800d008:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d00a:	e64f      	b.n	800ccac <_svfiprintf_r+0x514>
 800d00c:	9907      	ldr	r1, [sp, #28]
 800d00e:	9a06      	ldr	r2, [sp, #24]
 800d010:	680b      	ldr	r3, [r1, #0]
 800d012:	3104      	adds	r1, #4
 800d014:	9107      	str	r1, [sp, #28]
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	f7ff bbe0 	b.w	800c7dc <_svfiprintf_r+0x44>
 800d01c:	2140      	movs	r1, #64	; 0x40
 800d01e:	9201      	str	r2, [sp, #4]
 800d020:	f7f9 ffea 	bl	8006ff8 <_malloc_r>
 800d024:	9a01      	ldr	r2, [sp, #4]
 800d026:	f8ca 0000 	str.w	r0, [sl]
 800d02a:	f8ca 0010 	str.w	r0, [sl, #16]
 800d02e:	b1c8      	cbz	r0, 800d064 <_svfiprintf_r+0x8cc>
 800d030:	2340      	movs	r3, #64	; 0x40
 800d032:	f8ca 3014 	str.w	r3, [sl, #20]
 800d036:	f7ff bbbc 	b.w	800c7b2 <_svfiprintf_r+0x1a>
 800d03a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d03c:	4e0e      	ldr	r6, [pc, #56]	; (800d078 <_svfiprintf_r+0x8e0>)
 800d03e:	e557      	b.n	800caf0 <_svfiprintf_r+0x358>
 800d040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d042:	ebc3 0308 	rsb	r3, r3, r8
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	e499      	b.n	800c97e <_svfiprintf_r+0x1e6>
 800d04a:	4b0c      	ldr	r3, [pc, #48]	; (800d07c <_svfiprintf_r+0x8e4>)
 800d04c:	2d06      	cmp	r5, #6
 800d04e:	bf28      	it	cs
 800d050:	2506      	movcs	r5, #6
 800d052:	9505      	str	r5, [sp, #20]
 800d054:	930a      	str	r3, [sp, #40]	; 0x28
 800d056:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800d05a:	9304      	str	r3, [sp, #16]
 800d05c:	e511      	b.n	800ca82 <_svfiprintf_r+0x2ea>
 800d05e:	9505      	str	r5, [sp, #20]
 800d060:	9009      	str	r0, [sp, #36]	; 0x24
 800d062:	e48d      	b.n	800c980 <_svfiprintf_r+0x1e8>
 800d064:	9803      	ldr	r0, [sp, #12]
 800d066:	f04f 33ff 	mov.w	r3, #4294967295
 800d06a:	9306      	str	r3, [sp, #24]
 800d06c:	230c      	movs	r3, #12
 800d06e:	6003      	str	r3, [r0, #0]
 800d070:	e6c2      	b.n	800cdf8 <_svfiprintf_r+0x660>
 800d072:	bf00      	nop
 800d074:	0801a8e0 	.word	0x0801a8e0
 800d078:	0801a8d0 	.word	0x0801a8d0
 800d07c:	0801e89c 	.word	0x0801e89c

0800d080 <_wcrtomb_r>:
 800d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d084:	461e      	mov	r6, r3
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <_wcrtomb_r+0x48>)
 800d088:	b086      	sub	sp, #24
 800d08a:	460c      	mov	r4, r1
 800d08c:	4605      	mov	r5, r0
 800d08e:	4690      	mov	r8, r2
 800d090:	681f      	ldr	r7, [r3, #0]
 800d092:	b181      	cbz	r1, 800d0b6 <_wcrtomb_r+0x36>
 800d094:	f7fe fd6e 	bl	800bb74 <__locale_charset>
 800d098:	9600      	str	r6, [sp, #0]
 800d09a:	4621      	mov	r1, r4
 800d09c:	4642      	mov	r2, r8
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b8      	blx	r7
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d103      	bne.n	800d0b0 <_wcrtomb_r+0x30>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	6033      	str	r3, [r6, #0]
 800d0ac:	238a      	movs	r3, #138	; 0x8a
 800d0ae:	602b      	str	r3, [r5, #0]
 800d0b0:	b006      	add	sp, #24
 800d0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b6:	f7fe fd5d 	bl	800bb74 <__locale_charset>
 800d0ba:	9600      	str	r6, [sp, #0]
 800d0bc:	a903      	add	r1, sp, #12
 800d0be:	4622      	mov	r2, r4
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	47b8      	blx	r7
 800d0c6:	e7ed      	b.n	800d0a4 <_wcrtomb_r+0x24>
 800d0c8:	200008c4 	.word	0x200008c4

0800d0cc <wcrtomb>:
 800d0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	4688      	mov	r8, r1
 800d0d6:	4614      	mov	r4, r2
 800d0d8:	4d12      	ldr	r5, [pc, #72]	; (800d124 <wcrtomb+0x58>)
 800d0da:	b1a8      	cbz	r0, 800d108 <wcrtomb+0x3c>
 800d0dc:	4b12      	ldr	r3, [pc, #72]	; (800d128 <wcrtomb+0x5c>)
 800d0de:	f8d5 9000 	ldr.w	r9, [r5]
 800d0e2:	681e      	ldr	r6, [r3, #0]
 800d0e4:	f7fe fd46 	bl	800bb74 <__locale_charset>
 800d0e8:	9400      	str	r4, [sp, #0]
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	4648      	mov	r0, r9
 800d0f2:	47b0      	blx	r6
 800d0f4:	1c42      	adds	r2, r0, #1
 800d0f6:	d104      	bne.n	800d102 <wcrtomb+0x36>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	6022      	str	r2, [r4, #0]
 800d0fe:	228a      	movs	r2, #138	; 0x8a
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	b007      	add	sp, #28
 800d104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <wcrtomb+0x5c>)
 800d10a:	f8d5 8000 	ldr.w	r8, [r5]
 800d10e:	681e      	ldr	r6, [r3, #0]
 800d110:	f7fe fd30 	bl	800bb74 <__locale_charset>
 800d114:	9400      	str	r4, [sp, #0]
 800d116:	a903      	add	r1, sp, #12
 800d118:	463a      	mov	r2, r7
 800d11a:	4603      	mov	r3, r0
 800d11c:	4640      	mov	r0, r8
 800d11e:	47b0      	blx	r6
 800d120:	e7e8      	b.n	800d0f4 <wcrtomb+0x28>
 800d122:	bf00      	nop
 800d124:	20000008 	.word	0x20000008
 800d128:	200008c4 	.word	0x200008c4

0800d12c <__ascii_wctomb>:
 800d12c:	4603      	mov	r3, r0
 800d12e:	b121      	cbz	r1, 800d13a <__ascii_wctomb+0xe>
 800d130:	2aff      	cmp	r2, #255	; 0xff
 800d132:	d804      	bhi.n	800d13e <__ascii_wctomb+0x12>
 800d134:	700a      	strb	r2, [r1, #0]
 800d136:	2001      	movs	r0, #1
 800d138:	4770      	bx	lr
 800d13a:	4608      	mov	r0, r1
 800d13c:	4770      	bx	lr
 800d13e:	228a      	movs	r2, #138	; 0x8a
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	4770      	bx	lr

0800d148 <_wctomb_r>:
 800d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14c:	f640 04c4 	movw	r4, #2244	; 0x8c4
 800d150:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d154:	b082      	sub	sp, #8
 800d156:	461e      	mov	r6, r3
 800d158:	4605      	mov	r5, r0
 800d15a:	4688      	mov	r8, r1
 800d15c:	4617      	mov	r7, r2
 800d15e:	6824      	ldr	r4, [r4, #0]
 800d160:	f7fe fd08 	bl	800bb74 <__locale_charset>
 800d164:	9600      	str	r6, [sp, #0]
 800d166:	4641      	mov	r1, r8
 800d168:	463a      	mov	r2, r7
 800d16a:	4603      	mov	r3, r0
 800d16c:	4628      	mov	r0, r5
 800d16e:	47a0      	blx	r4
 800d170:	b002      	add	sp, #8
 800d172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d176:	bf00      	nop

0800d178 <_calloc_r>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	fb01 f102 	mul.w	r1, r1, r2
 800d17e:	f7f9 ff3b 	bl	8006ff8 <_malloc_r>
 800d182:	4604      	mov	r4, r0
 800d184:	b308      	cbz	r0, 800d1ca <_calloc_r+0x52>
 800d186:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d18a:	f022 0203 	bic.w	r2, r2, #3
 800d18e:	3a04      	subs	r2, #4
 800d190:	2a24      	cmp	r2, #36	; 0x24
 800d192:	d81c      	bhi.n	800d1ce <_calloc_r+0x56>
 800d194:	2a13      	cmp	r2, #19
 800d196:	bf98      	it	ls
 800d198:	4602      	movls	r2, r0
 800d19a:	d912      	bls.n	800d1c2 <_calloc_r+0x4a>
 800d19c:	2300      	movs	r3, #0
 800d19e:	2a1b      	cmp	r2, #27
 800d1a0:	6003      	str	r3, [r0, #0]
 800d1a2:	bf98      	it	ls
 800d1a4:	f100 0208 	addls.w	r2, r0, #8
 800d1a8:	6043      	str	r3, [r0, #4]
 800d1aa:	d90a      	bls.n	800d1c2 <_calloc_r+0x4a>
 800d1ac:	2a24      	cmp	r2, #36	; 0x24
 800d1ae:	6083      	str	r3, [r0, #8]
 800d1b0:	bf14      	ite	ne
 800d1b2:	f100 0210 	addne.w	r2, r0, #16
 800d1b6:	f100 0218 	addeq.w	r2, r0, #24
 800d1ba:	60c3      	str	r3, [r0, #12]
 800d1bc:	bf04      	itt	eq
 800d1be:	6103      	streq	r3, [r0, #16]
 800d1c0:	6143      	streq	r3, [r0, #20]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	6053      	str	r3, [r2, #4]
 800d1c8:	6093      	str	r3, [r2, #8]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	f7fa fade 	bl	8007790 <memset>
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	bd10      	pop	{r4, pc}

0800d1d8 <_fclose_r>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	460c      	mov	r4, r1
 800d1dc:	4605      	mov	r5, r0
 800d1de:	460e      	mov	r6, r1
 800d1e0:	2900      	cmp	r1, #0
 800d1e2:	d030      	beq.n	800d246 <_fclose_r+0x6e>
 800d1e4:	f7fe faa0 	bl	800b728 <__sfp_lock_acquire>
 800d1e8:	b115      	cbz	r5, 800d1f0 <_fclose_r+0x18>
 800d1ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d02c      	beq.n	800d24a <_fclose_r+0x72>
 800d1f0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d1f4:	b32e      	cbz	r6, 800d242 <_fclose_r+0x6a>
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	4621      	mov	r1, r4
 800d1fa:	f7fe f901 	bl	800b400 <_fflush_r>
 800d1fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d200:	4606      	mov	r6, r0
 800d202:	b13b      	cbz	r3, 800d214 <_fclose_r+0x3c>
 800d204:	69e1      	ldr	r1, [r4, #28]
 800d206:	4628      	mov	r0, r5
 800d208:	4798      	blx	r3
 800d20a:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 800d20e:	bf28      	it	cs
 800d210:	f04f 36ff 	movcs.w	r6, #4294967295
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	061b      	lsls	r3, r3, #24
 800d218:	d41f      	bmi.n	800d25a <_fclose_r+0x82>
 800d21a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d21c:	b141      	cbz	r1, 800d230 <_fclose_r+0x58>
 800d21e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d222:	4299      	cmp	r1, r3
 800d224:	d002      	beq.n	800d22c <_fclose_r+0x54>
 800d226:	4628      	mov	r0, r5
 800d228:	f7fe fb70 	bl	800b90c <_free_r>
 800d22c:	2300      	movs	r3, #0
 800d22e:	6323      	str	r3, [r4, #48]	; 0x30
 800d230:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d232:	b121      	cbz	r1, 800d23e <_fclose_r+0x66>
 800d234:	4628      	mov	r0, r5
 800d236:	f7fe fb69 	bl	800b90c <_free_r>
 800d23a:	2300      	movs	r3, #0
 800d23c:	6463      	str	r3, [r4, #68]	; 0x44
 800d23e:	2300      	movs	r3, #0
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	f7fe fa73 	bl	800b72c <__sfp_lock_release>
 800d246:	4630      	mov	r0, r6
 800d248:	bd70      	pop	{r4, r5, r6, pc}
 800d24a:	4628      	mov	r0, r5
 800d24c:	f7fe f9fa 	bl	800b644 <__sinit>
 800d250:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d254:	2e00      	cmp	r6, #0
 800d256:	d1ce      	bne.n	800d1f6 <_fclose_r+0x1e>
 800d258:	e7f3      	b.n	800d242 <_fclose_r+0x6a>
 800d25a:	6921      	ldr	r1, [r4, #16]
 800d25c:	4628      	mov	r0, r5
 800d25e:	f7fe fb55 	bl	800b90c <_free_r>
 800d262:	e7da      	b.n	800d21a <_fclose_r+0x42>

0800d264 <fclose>:
 800d264:	f240 0308 	movw	r3, #8
 800d268:	4601      	mov	r1, r0
 800d26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d26e:	6818      	ldr	r0, [r3, #0]
 800d270:	e7b2      	b.n	800d1d8 <_fclose_r>
 800d272:	bf00      	nop
 800d274:	0000      	movs	r0, r0
	...

0800d278 <__aeabi_uidiv>:
 800d278:	1e4a      	subs	r2, r1, #1
 800d27a:	bf08      	it	eq
 800d27c:	4770      	bxeq	lr
 800d27e:	f0c0 8124 	bcc.w	800d4ca <__aeabi_uidiv+0x252>
 800d282:	4288      	cmp	r0, r1
 800d284:	f240 8116 	bls.w	800d4b4 <__aeabi_uidiv+0x23c>
 800d288:	4211      	tst	r1, r2
 800d28a:	f000 8117 	beq.w	800d4bc <__aeabi_uidiv+0x244>
 800d28e:	fab0 f380 	clz	r3, r0
 800d292:	fab1 f281 	clz	r2, r1
 800d296:	eba2 0303 	sub.w	r3, r2, r3
 800d29a:	f1c3 031f 	rsb	r3, r3, #31
 800d29e:	a204      	add	r2, pc, #16	; (adr r2, 800d2b0 <__aeabi_uidiv+0x38>)
 800d2a0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800d2a4:	f04f 0200 	mov.w	r2, #0
 800d2a8:	469f      	mov	pc, r3
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 800d2b4:	bf00      	nop
 800d2b6:	eb42 0202 	adc.w	r2, r2, r2
 800d2ba:	bf28      	it	cs
 800d2bc:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 800d2c0:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 800d2c4:	bf00      	nop
 800d2c6:	eb42 0202 	adc.w	r2, r2, r2
 800d2ca:	bf28      	it	cs
 800d2cc:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 800d2d0:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 800d2d4:	bf00      	nop
 800d2d6:	eb42 0202 	adc.w	r2, r2, r2
 800d2da:	bf28      	it	cs
 800d2dc:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 800d2e0:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 800d2e4:	bf00      	nop
 800d2e6:	eb42 0202 	adc.w	r2, r2, r2
 800d2ea:	bf28      	it	cs
 800d2ec:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 800d2f0:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 800d2f4:	bf00      	nop
 800d2f6:	eb42 0202 	adc.w	r2, r2, r2
 800d2fa:	bf28      	it	cs
 800d2fc:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 800d300:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 800d304:	bf00      	nop
 800d306:	eb42 0202 	adc.w	r2, r2, r2
 800d30a:	bf28      	it	cs
 800d30c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 800d310:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 800d314:	bf00      	nop
 800d316:	eb42 0202 	adc.w	r2, r2, r2
 800d31a:	bf28      	it	cs
 800d31c:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 800d320:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 800d324:	bf00      	nop
 800d326:	eb42 0202 	adc.w	r2, r2, r2
 800d32a:	bf28      	it	cs
 800d32c:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 800d330:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 800d334:	bf00      	nop
 800d336:	eb42 0202 	adc.w	r2, r2, r2
 800d33a:	bf28      	it	cs
 800d33c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 800d340:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 800d344:	bf00      	nop
 800d346:	eb42 0202 	adc.w	r2, r2, r2
 800d34a:	bf28      	it	cs
 800d34c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 800d350:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800d354:	bf00      	nop
 800d356:	eb42 0202 	adc.w	r2, r2, r2
 800d35a:	bf28      	it	cs
 800d35c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 800d360:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 800d364:	bf00      	nop
 800d366:	eb42 0202 	adc.w	r2, r2, r2
 800d36a:	bf28      	it	cs
 800d36c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 800d370:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 800d374:	bf00      	nop
 800d376:	eb42 0202 	adc.w	r2, r2, r2
 800d37a:	bf28      	it	cs
 800d37c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 800d380:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 800d384:	bf00      	nop
 800d386:	eb42 0202 	adc.w	r2, r2, r2
 800d38a:	bf28      	it	cs
 800d38c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 800d390:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 800d394:	bf00      	nop
 800d396:	eb42 0202 	adc.w	r2, r2, r2
 800d39a:	bf28      	it	cs
 800d39c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 800d3a0:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 800d3a4:	bf00      	nop
 800d3a6:	eb42 0202 	adc.w	r2, r2, r2
 800d3aa:	bf28      	it	cs
 800d3ac:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 800d3b0:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 800d3b4:	bf00      	nop
 800d3b6:	eb42 0202 	adc.w	r2, r2, r2
 800d3ba:	bf28      	it	cs
 800d3bc:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 800d3c0:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 800d3c4:	bf00      	nop
 800d3c6:	eb42 0202 	adc.w	r2, r2, r2
 800d3ca:	bf28      	it	cs
 800d3cc:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 800d3d0:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 800d3d4:	bf00      	nop
 800d3d6:	eb42 0202 	adc.w	r2, r2, r2
 800d3da:	bf28      	it	cs
 800d3dc:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 800d3e0:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 800d3e4:	bf00      	nop
 800d3e6:	eb42 0202 	adc.w	r2, r2, r2
 800d3ea:	bf28      	it	cs
 800d3ec:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 800d3f0:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 800d3f4:	bf00      	nop
 800d3f6:	eb42 0202 	adc.w	r2, r2, r2
 800d3fa:	bf28      	it	cs
 800d3fc:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 800d400:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 800d404:	bf00      	nop
 800d406:	eb42 0202 	adc.w	r2, r2, r2
 800d40a:	bf28      	it	cs
 800d40c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 800d410:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 800d414:	bf00      	nop
 800d416:	eb42 0202 	adc.w	r2, r2, r2
 800d41a:	bf28      	it	cs
 800d41c:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 800d420:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800d424:	bf00      	nop
 800d426:	eb42 0202 	adc.w	r2, r2, r2
 800d42a:	bf28      	it	cs
 800d42c:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 800d430:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 800d434:	bf00      	nop
 800d436:	eb42 0202 	adc.w	r2, r2, r2
 800d43a:	bf28      	it	cs
 800d43c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 800d440:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 800d444:	bf00      	nop
 800d446:	eb42 0202 	adc.w	r2, r2, r2
 800d44a:	bf28      	it	cs
 800d44c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 800d450:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800d454:	bf00      	nop
 800d456:	eb42 0202 	adc.w	r2, r2, r2
 800d45a:	bf28      	it	cs
 800d45c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 800d460:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 800d464:	bf00      	nop
 800d466:	eb42 0202 	adc.w	r2, r2, r2
 800d46a:	bf28      	it	cs
 800d46c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 800d470:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800d474:	bf00      	nop
 800d476:	eb42 0202 	adc.w	r2, r2, r2
 800d47a:	bf28      	it	cs
 800d47c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 800d480:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800d484:	bf00      	nop
 800d486:	eb42 0202 	adc.w	r2, r2, r2
 800d48a:	bf28      	it	cs
 800d48c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 800d490:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800d494:	bf00      	nop
 800d496:	eb42 0202 	adc.w	r2, r2, r2
 800d49a:	bf28      	it	cs
 800d49c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 800d4a0:	ebb0 0f01 	cmp.w	r0, r1
 800d4a4:	bf00      	nop
 800d4a6:	eb42 0202 	adc.w	r2, r2, r2
 800d4aa:	bf28      	it	cs
 800d4ac:	eba0 0001 	subcs.w	r0, r0, r1
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4770      	bx	lr
 800d4b4:	bf0c      	ite	eq
 800d4b6:	2001      	moveq	r0, #1
 800d4b8:	2000      	movne	r0, #0
 800d4ba:	4770      	bx	lr
 800d4bc:	fab1 f281 	clz	r2, r1
 800d4c0:	f1c2 021f 	rsb	r2, r2, #31
 800d4c4:	fa20 f002 	lsr.w	r0, r0, r2
 800d4c8:	4770      	bx	lr
 800d4ca:	b108      	cbz	r0, 800d4d0 <__aeabi_uidiv+0x258>
 800d4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d0:	f000 b80e 	b.w	800d4f0 <__aeabi_idiv0>

0800d4d4 <__aeabi_uidivmod>:
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	d0f8      	beq.n	800d4ca <__aeabi_uidiv+0x252>
 800d4d8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 800d4dc:	f7ff fecc 	bl	800d278 <__aeabi_uidiv>
 800d4e0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 800d4e4:	fb02 f300 	mul.w	r3, r2, r0
 800d4e8:	eba1 0103 	sub.w	r1, r1, r3
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <__aeabi_idiv0>:
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop

0800d4f4 <__aeabi_drsub>:
 800d4f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d4f8:	e002      	b.n	800d500 <__adddf3>
 800d4fa:	bf00      	nop

0800d4fc <__aeabi_dsub>:
 800d4fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d500 <__adddf3>:
 800d500:	b530      	push	{r4, r5, lr}
 800d502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d50a:	ea94 0f05 	teq	r4, r5
 800d50e:	bf08      	it	eq
 800d510:	ea90 0f02 	teqeq	r0, r2
 800d514:	bf1f      	itttt	ne
 800d516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d51a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d51e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d526:	f000 80e2 	beq.w	800d6ee <__adddf3+0x1ee>
 800d52a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d52e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d532:	bfb8      	it	lt
 800d534:	426d      	neglt	r5, r5
 800d536:	dd0c      	ble.n	800d552 <__adddf3+0x52>
 800d538:	442c      	add	r4, r5
 800d53a:	ea80 0202 	eor.w	r2, r0, r2
 800d53e:	ea81 0303 	eor.w	r3, r1, r3
 800d542:	ea82 0000 	eor.w	r0, r2, r0
 800d546:	ea83 0101 	eor.w	r1, r3, r1
 800d54a:	ea80 0202 	eor.w	r2, r0, r2
 800d54e:	ea81 0303 	eor.w	r3, r1, r3
 800d552:	2d36      	cmp	r5, #54	; 0x36
 800d554:	bf88      	it	hi
 800d556:	bd30      	pophi	{r4, r5, pc}
 800d558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d55c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d568:	d002      	beq.n	800d570 <__adddf3+0x70>
 800d56a:	4240      	negs	r0, r0
 800d56c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800d574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800d57c:	d002      	beq.n	800d584 <__adddf3+0x84>
 800d57e:	4252      	negs	r2, r2
 800d580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d584:	ea94 0f05 	teq	r4, r5
 800d588:	f000 80a7 	beq.w	800d6da <__adddf3+0x1da>
 800d58c:	f1a4 0401 	sub.w	r4, r4, #1
 800d590:	f1d5 0e20 	rsbs	lr, r5, #32
 800d594:	db0d      	blt.n	800d5b2 <__adddf3+0xb2>
 800d596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800d59a:	fa22 f205 	lsr.w	r2, r2, r5
 800d59e:	1880      	adds	r0, r0, r2
 800d5a0:	f141 0100 	adc.w	r1, r1, #0
 800d5a4:	fa03 f20e 	lsl.w	r2, r3, lr
 800d5a8:	1880      	adds	r0, r0, r2
 800d5aa:	fa43 f305 	asr.w	r3, r3, r5
 800d5ae:	4159      	adcs	r1, r3
 800d5b0:	e00e      	b.n	800d5d0 <__adddf3+0xd0>
 800d5b2:	f1a5 0520 	sub.w	r5, r5, #32
 800d5b6:	f10e 0e20 	add.w	lr, lr, #32
 800d5ba:	2a01      	cmp	r2, #1
 800d5bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 800d5c0:	bf28      	it	cs
 800d5c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 800d5c6:	fa43 f305 	asr.w	r3, r3, r5
 800d5ca:	18c0      	adds	r0, r0, r3
 800d5cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800d5d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d5d4:	d507      	bpl.n	800d5e6 <__adddf3+0xe6>
 800d5d6:	f04f 0e00 	mov.w	lr, #0
 800d5da:	f1dc 0c00 	rsbs	ip, ip, #0
 800d5de:	eb7e 0000 	sbcs.w	r0, lr, r0
 800d5e2:	eb6e 0101 	sbc.w	r1, lr, r1
 800d5e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d5ea:	d31b      	bcc.n	800d624 <__adddf3+0x124>
 800d5ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800d5f0:	d30c      	bcc.n	800d60c <__adddf3+0x10c>
 800d5f2:	0849      	lsrs	r1, r1, #1
 800d5f4:	ea5f 0030 	movs.w	r0, r0, rrx
 800d5f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800d5fc:	f104 0401 	add.w	r4, r4, #1
 800d600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800d604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800d608:	f080 809a 	bcs.w	800d740 <__adddf3+0x240>
 800d60c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800d610:	bf08      	it	eq
 800d612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d616:	f150 0000 	adcs.w	r0, r0, #0
 800d61a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d61e:	ea41 0105 	orr.w	r1, r1, r5
 800d622:	bd30      	pop	{r4, r5, pc}
 800d624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800d628:	4140      	adcs	r0, r0
 800d62a:	eb41 0101 	adc.w	r1, r1, r1
 800d62e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d632:	f1a4 0401 	sub.w	r4, r4, #1
 800d636:	d1e9      	bne.n	800d60c <__adddf3+0x10c>
 800d638:	f091 0f00 	teq	r1, #0
 800d63c:	bf04      	itt	eq
 800d63e:	4601      	moveq	r1, r0
 800d640:	2000      	moveq	r0, #0
 800d642:	fab1 f381 	clz	r3, r1
 800d646:	bf08      	it	eq
 800d648:	3320      	addeq	r3, #32
 800d64a:	f1a3 030b 	sub.w	r3, r3, #11
 800d64e:	f1b3 0220 	subs.w	r2, r3, #32
 800d652:	da0c      	bge.n	800d66e <__adddf3+0x16e>
 800d654:	320c      	adds	r2, #12
 800d656:	dd08      	ble.n	800d66a <__adddf3+0x16a>
 800d658:	f102 0c14 	add.w	ip, r2, #20
 800d65c:	f1c2 020c 	rsb	r2, r2, #12
 800d660:	fa01 f00c 	lsl.w	r0, r1, ip
 800d664:	fa21 f102 	lsr.w	r1, r1, r2
 800d668:	e00c      	b.n	800d684 <__adddf3+0x184>
 800d66a:	f102 0214 	add.w	r2, r2, #20
 800d66e:	bfd8      	it	le
 800d670:	f1c2 0c20 	rsble	ip, r2, #32
 800d674:	fa01 f102 	lsl.w	r1, r1, r2
 800d678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d67c:	bfdc      	itt	le
 800d67e:	ea41 010c 	orrle.w	r1, r1, ip
 800d682:	4090      	lslle	r0, r2
 800d684:	1ae4      	subs	r4, r4, r3
 800d686:	bfa2      	ittt	ge
 800d688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800d68c:	4329      	orrge	r1, r5
 800d68e:	bd30      	popge	{r4, r5, pc}
 800d690:	ea6f 0404 	mvn.w	r4, r4
 800d694:	3c1f      	subs	r4, #31
 800d696:	da1c      	bge.n	800d6d2 <__adddf3+0x1d2>
 800d698:	340c      	adds	r4, #12
 800d69a:	dc0e      	bgt.n	800d6ba <__adddf3+0x1ba>
 800d69c:	f104 0414 	add.w	r4, r4, #20
 800d6a0:	f1c4 0220 	rsb	r2, r4, #32
 800d6a4:	fa20 f004 	lsr.w	r0, r0, r4
 800d6a8:	fa01 f302 	lsl.w	r3, r1, r2
 800d6ac:	ea40 0003 	orr.w	r0, r0, r3
 800d6b0:	fa21 f304 	lsr.w	r3, r1, r4
 800d6b4:	ea45 0103 	orr.w	r1, r5, r3
 800d6b8:	bd30      	pop	{r4, r5, pc}
 800d6ba:	f1c4 040c 	rsb	r4, r4, #12
 800d6be:	f1c4 0220 	rsb	r2, r4, #32
 800d6c2:	fa20 f002 	lsr.w	r0, r0, r2
 800d6c6:	fa01 f304 	lsl.w	r3, r1, r4
 800d6ca:	ea40 0003 	orr.w	r0, r0, r3
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	bd30      	pop	{r4, r5, pc}
 800d6d2:	fa21 f004 	lsr.w	r0, r1, r4
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	bd30      	pop	{r4, r5, pc}
 800d6da:	f094 0f00 	teq	r4, #0
 800d6de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800d6e2:	bf06      	itte	eq
 800d6e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800d6e8:	3401      	addeq	r4, #1
 800d6ea:	3d01      	subne	r5, #1
 800d6ec:	e74e      	b.n	800d58c <__adddf3+0x8c>
 800d6ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d6f2:	bf18      	it	ne
 800d6f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d6f8:	d029      	beq.n	800d74e <__adddf3+0x24e>
 800d6fa:	ea94 0f05 	teq	r4, r5
 800d6fe:	bf08      	it	eq
 800d700:	ea90 0f02 	teqeq	r0, r2
 800d704:	d005      	beq.n	800d712 <__adddf3+0x212>
 800d706:	ea54 0c00 	orrs.w	ip, r4, r0
 800d70a:	bf04      	itt	eq
 800d70c:	4619      	moveq	r1, r3
 800d70e:	4610      	moveq	r0, r2
 800d710:	bd30      	pop	{r4, r5, pc}
 800d712:	ea91 0f03 	teq	r1, r3
 800d716:	bf1e      	ittt	ne
 800d718:	2100      	movne	r1, #0
 800d71a:	2000      	movne	r0, #0
 800d71c:	bd30      	popne	{r4, r5, pc}
 800d71e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800d722:	d105      	bne.n	800d730 <__adddf3+0x230>
 800d724:	0040      	lsls	r0, r0, #1
 800d726:	4149      	adcs	r1, r1
 800d728:	bf28      	it	cs
 800d72a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800d72e:	bd30      	pop	{r4, r5, pc}
 800d730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800d734:	bf3c      	itt	cc
 800d736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800d73a:	bd30      	popcc	{r4, r5, pc}
 800d73c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800d744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d748:	f04f 0000 	mov.w	r0, #0
 800d74c:	bd30      	pop	{r4, r5, pc}
 800d74e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d752:	bf1a      	itte	ne
 800d754:	4619      	movne	r1, r3
 800d756:	4610      	movne	r0, r2
 800d758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800d75c:	bf1c      	itt	ne
 800d75e:	460b      	movne	r3, r1
 800d760:	4602      	movne	r2, r0
 800d762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d766:	bf06      	itte	eq
 800d768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800d76c:	ea91 0f03 	teqeq	r1, r3
 800d770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800d774:	bd30      	pop	{r4, r5, pc}
 800d776:	bf00      	nop

0800d778 <__aeabi_ui2d>:
 800d778:	f090 0f00 	teq	r0, #0
 800d77c:	bf04      	itt	eq
 800d77e:	2100      	moveq	r1, #0
 800d780:	4770      	bxeq	lr
 800d782:	b530      	push	{r4, r5, lr}
 800d784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d78c:	f04f 0500 	mov.w	r5, #0
 800d790:	f04f 0100 	mov.w	r1, #0
 800d794:	e750      	b.n	800d638 <__adddf3+0x138>
 800d796:	bf00      	nop

0800d798 <__aeabi_i2d>:
 800d798:	f090 0f00 	teq	r0, #0
 800d79c:	bf04      	itt	eq
 800d79e:	2100      	moveq	r1, #0
 800d7a0:	4770      	bxeq	lr
 800d7a2:	b530      	push	{r4, r5, lr}
 800d7a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d7a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d7ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800d7b0:	bf48      	it	mi
 800d7b2:	4240      	negmi	r0, r0
 800d7b4:	f04f 0100 	mov.w	r1, #0
 800d7b8:	e73e      	b.n	800d638 <__adddf3+0x138>
 800d7ba:	bf00      	nop

0800d7bc <__aeabi_f2d>:
 800d7bc:	0042      	lsls	r2, r0, #1
 800d7be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800d7c2:	ea4f 0131 	mov.w	r1, r1, rrx
 800d7c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800d7ca:	bf1f      	itttt	ne
 800d7cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800d7d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d7d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800d7d8:	4770      	bxne	lr
 800d7da:	f092 0f00 	teq	r2, #0
 800d7de:	bf14      	ite	ne
 800d7e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d7e4:	4770      	bxeq	lr
 800d7e6:	b530      	push	{r4, r5, lr}
 800d7e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 800d7ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d7f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d7f4:	e720      	b.n	800d638 <__adddf3+0x138>
 800d7f6:	bf00      	nop

0800d7f8 <__aeabi_ul2d>:
 800d7f8:	ea50 0201 	orrs.w	r2, r0, r1
 800d7fc:	bf08      	it	eq
 800d7fe:	4770      	bxeq	lr
 800d800:	b530      	push	{r4, r5, lr}
 800d802:	f04f 0500 	mov.w	r5, #0
 800d806:	e00a      	b.n	800d81e <__aeabi_l2d+0x16>

0800d808 <__aeabi_l2d>:
 800d808:	ea50 0201 	orrs.w	r2, r0, r1
 800d80c:	bf08      	it	eq
 800d80e:	4770      	bxeq	lr
 800d810:	b530      	push	{r4, r5, lr}
 800d812:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800d816:	d502      	bpl.n	800d81e <__aeabi_l2d+0x16>
 800d818:	4240      	negs	r0, r0
 800d81a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d81e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d822:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800d82a:	f43f aedc 	beq.w	800d5e6 <__adddf3+0xe6>
 800d82e:	f04f 0203 	mov.w	r2, #3
 800d832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d836:	bf18      	it	ne
 800d838:	3203      	addne	r2, #3
 800d83a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d83e:	bf18      	it	ne
 800d840:	3203      	addne	r2, #3
 800d842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800d846:	f1c2 0320 	rsb	r3, r2, #32
 800d84a:	fa00 fc03 	lsl.w	ip, r0, r3
 800d84e:	fa20 f002 	lsr.w	r0, r0, r2
 800d852:	fa01 fe03 	lsl.w	lr, r1, r3
 800d856:	ea40 000e 	orr.w	r0, r0, lr
 800d85a:	fa21 f102 	lsr.w	r1, r1, r2
 800d85e:	4414      	add	r4, r2
 800d860:	e6c1      	b.n	800d5e6 <__adddf3+0xe6>
 800d862:	bf00      	nop

0800d864 <__aeabi_dmul>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800d86a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800d86e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d872:	bf1d      	ittte	ne
 800d874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d878:	ea94 0f0c 	teqne	r4, ip
 800d87c:	ea95 0f0c 	teqne	r5, ip
 800d880:	f000 f8de 	bleq	800da40 <__aeabi_dmul+0x1dc>
 800d884:	442c      	add	r4, r5
 800d886:	ea81 0603 	eor.w	r6, r1, r3
 800d88a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800d88e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800d892:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800d896:	bf18      	it	ne
 800d898:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800d89c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d8a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8a4:	d038      	beq.n	800d918 <__aeabi_dmul+0xb4>
 800d8a6:	fba0 ce02 	umull	ip, lr, r0, r2
 800d8aa:	f04f 0500 	mov.w	r5, #0
 800d8ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 800d8b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800d8b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 800d8ba:	f04f 0600 	mov.w	r6, #0
 800d8be:	fbe1 5603 	umlal	r5, r6, r1, r3
 800d8c2:	f09c 0f00 	teq	ip, #0
 800d8c6:	bf18      	it	ne
 800d8c8:	f04e 0e01 	orrne.w	lr, lr, #1
 800d8cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800d8d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800d8d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800d8d8:	d204      	bcs.n	800d8e4 <__aeabi_dmul+0x80>
 800d8da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800d8de:	416d      	adcs	r5, r5
 800d8e0:	eb46 0606 	adc.w	r6, r6, r6
 800d8e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800d8e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800d8ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800d8f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800d8f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800d8f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800d8fc:	bf88      	it	hi
 800d8fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800d902:	d81e      	bhi.n	800d942 <__aeabi_dmul+0xde>
 800d904:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800d908:	bf08      	it	eq
 800d90a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800d90e:	f150 0000 	adcs.w	r0, r0, #0
 800d912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800d91c:	ea46 0101 	orr.w	r1, r6, r1
 800d920:	ea40 0002 	orr.w	r0, r0, r2
 800d924:	ea81 0103 	eor.w	r1, r1, r3
 800d928:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800d92c:	bfc2      	ittt	gt
 800d92e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d936:	bd70      	popgt	{r4, r5, r6, pc}
 800d938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d93c:	f04f 0e00 	mov.w	lr, #0
 800d940:	3c01      	subs	r4, #1
 800d942:	f300 80ab 	bgt.w	800da9c <__aeabi_dmul+0x238>
 800d946:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800d94a:	bfde      	ittt	le
 800d94c:	2000      	movle	r0, #0
 800d94e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800d952:	bd70      	pople	{r4, r5, r6, pc}
 800d954:	f1c4 0400 	rsb	r4, r4, #0
 800d958:	3c20      	subs	r4, #32
 800d95a:	da35      	bge.n	800d9c8 <__aeabi_dmul+0x164>
 800d95c:	340c      	adds	r4, #12
 800d95e:	dc1b      	bgt.n	800d998 <__aeabi_dmul+0x134>
 800d960:	f104 0414 	add.w	r4, r4, #20
 800d964:	f1c4 0520 	rsb	r5, r4, #32
 800d968:	fa00 f305 	lsl.w	r3, r0, r5
 800d96c:	fa20 f004 	lsr.w	r0, r0, r4
 800d970:	fa01 f205 	lsl.w	r2, r1, r5
 800d974:	ea40 0002 	orr.w	r0, r0, r2
 800d978:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800d97c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d984:	fa21 f604 	lsr.w	r6, r1, r4
 800d988:	eb42 0106 	adc.w	r1, r2, r6
 800d98c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d990:	bf08      	it	eq
 800d992:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d996:	bd70      	pop	{r4, r5, r6, pc}
 800d998:	f1c4 040c 	rsb	r4, r4, #12
 800d99c:	f1c4 0520 	rsb	r5, r4, #32
 800d9a0:	fa00 f304 	lsl.w	r3, r0, r4
 800d9a4:	fa20 f005 	lsr.w	r0, r0, r5
 800d9a8:	fa01 f204 	lsl.w	r2, r1, r4
 800d9ac:	ea40 0002 	orr.w	r0, r0, r2
 800d9b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d9b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d9b8:	f141 0100 	adc.w	r1, r1, #0
 800d9bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d9c0:	bf08      	it	eq
 800d9c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	f1c4 0520 	rsb	r5, r4, #32
 800d9cc:	fa00 f205 	lsl.w	r2, r0, r5
 800d9d0:	ea4e 0e02 	orr.w	lr, lr, r2
 800d9d4:	fa20 f304 	lsr.w	r3, r0, r4
 800d9d8:	fa01 f205 	lsl.w	r2, r1, r5
 800d9dc:	ea43 0302 	orr.w	r3, r3, r2
 800d9e0:	fa21 f004 	lsr.w	r0, r1, r4
 800d9e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d9e8:	fa21 f204 	lsr.w	r2, r1, r4
 800d9ec:	ea20 0002 	bic.w	r0, r0, r2
 800d9f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800d9f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d9f8:	bf08      	it	eq
 800d9fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	f094 0f00 	teq	r4, #0
 800da04:	d10f      	bne.n	800da26 <__aeabi_dmul+0x1c2>
 800da06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800da0a:	0040      	lsls	r0, r0, #1
 800da0c:	eb41 0101 	adc.w	r1, r1, r1
 800da10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800da14:	bf08      	it	eq
 800da16:	3c01      	subeq	r4, #1
 800da18:	d0f7      	beq.n	800da0a <__aeabi_dmul+0x1a6>
 800da1a:	ea41 0106 	orr.w	r1, r1, r6
 800da1e:	f095 0f00 	teq	r5, #0
 800da22:	bf18      	it	ne
 800da24:	4770      	bxne	lr
 800da26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800da2a:	0052      	lsls	r2, r2, #1
 800da2c:	eb43 0303 	adc.w	r3, r3, r3
 800da30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800da34:	bf08      	it	eq
 800da36:	3d01      	subeq	r5, #1
 800da38:	d0f7      	beq.n	800da2a <__aeabi_dmul+0x1c6>
 800da3a:	ea43 0306 	orr.w	r3, r3, r6
 800da3e:	4770      	bx	lr
 800da40:	ea94 0f0c 	teq	r4, ip
 800da44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800da48:	bf18      	it	ne
 800da4a:	ea95 0f0c 	teqne	r5, ip
 800da4e:	d00c      	beq.n	800da6a <__aeabi_dmul+0x206>
 800da50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800da54:	bf18      	it	ne
 800da56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800da5a:	d1d1      	bne.n	800da00 <__aeabi_dmul+0x19c>
 800da5c:	ea81 0103 	eor.w	r1, r1, r3
 800da60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800da64:	f04f 0000 	mov.w	r0, #0
 800da68:	bd70      	pop	{r4, r5, r6, pc}
 800da6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800da6e:	bf06      	itte	eq
 800da70:	4610      	moveq	r0, r2
 800da72:	4619      	moveq	r1, r3
 800da74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800da78:	d019      	beq.n	800daae <__aeabi_dmul+0x24a>
 800da7a:	ea94 0f0c 	teq	r4, ip
 800da7e:	d102      	bne.n	800da86 <__aeabi_dmul+0x222>
 800da80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800da84:	d113      	bne.n	800daae <__aeabi_dmul+0x24a>
 800da86:	ea95 0f0c 	teq	r5, ip
 800da8a:	d105      	bne.n	800da98 <__aeabi_dmul+0x234>
 800da8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800da90:	bf1c      	itt	ne
 800da92:	4610      	movne	r0, r2
 800da94:	4619      	movne	r1, r3
 800da96:	d10a      	bne.n	800daae <__aeabi_dmul+0x24a>
 800da98:	ea81 0103 	eor.w	r1, r1, r3
 800da9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800daa0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800daa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800daa8:	f04f 0000 	mov.w	r0, #0
 800daac:	bd70      	pop	{r4, r5, r6, pc}
 800daae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800dab2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800dab6:	bd70      	pop	{r4, r5, r6, pc}

0800dab8 <__aeabi_ddiv>:
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800dabe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800dac2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800dac6:	bf1d      	ittte	ne
 800dac8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800dacc:	ea94 0f0c 	teqne	r4, ip
 800dad0:	ea95 0f0c 	teqne	r5, ip
 800dad4:	f000 f8a7 	bleq	800dc26 <__aeabi_ddiv+0x16e>
 800dad8:	eba4 0405 	sub.w	r4, r4, r5
 800dadc:	ea81 0e03 	eor.w	lr, r1, r3
 800dae0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800dae4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800dae8:	f000 8088 	beq.w	800dbfc <__aeabi_ddiv+0x144>
 800daec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800daf0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800daf4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800daf8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800dafc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800db00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800db04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800db08:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800db0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800db10:	429d      	cmp	r5, r3
 800db12:	bf08      	it	eq
 800db14:	4296      	cmpeq	r6, r2
 800db16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800db1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800db1e:	d202      	bcs.n	800db26 <__aeabi_ddiv+0x6e>
 800db20:	085b      	lsrs	r3, r3, #1
 800db22:	ea4f 0232 	mov.w	r2, r2, rrx
 800db26:	1ab6      	subs	r6, r6, r2
 800db28:	eb65 0503 	sbc.w	r5, r5, r3
 800db2c:	085b      	lsrs	r3, r3, #1
 800db2e:	ea4f 0232 	mov.w	r2, r2, rrx
 800db32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800db36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800db3a:	ebb6 0e02 	subs.w	lr, r6, r2
 800db3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800db42:	bf22      	ittt	cs
 800db44:	1ab6      	subcs	r6, r6, r2
 800db46:	4675      	movcs	r5, lr
 800db48:	ea40 000c 	orrcs.w	r0, r0, ip
 800db4c:	085b      	lsrs	r3, r3, #1
 800db4e:	ea4f 0232 	mov.w	r2, r2, rrx
 800db52:	ebb6 0e02 	subs.w	lr, r6, r2
 800db56:	eb75 0e03 	sbcs.w	lr, r5, r3
 800db5a:	bf22      	ittt	cs
 800db5c:	1ab6      	subcs	r6, r6, r2
 800db5e:	4675      	movcs	r5, lr
 800db60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800db64:	085b      	lsrs	r3, r3, #1
 800db66:	ea4f 0232 	mov.w	r2, r2, rrx
 800db6a:	ebb6 0e02 	subs.w	lr, r6, r2
 800db6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800db72:	bf22      	ittt	cs
 800db74:	1ab6      	subcs	r6, r6, r2
 800db76:	4675      	movcs	r5, lr
 800db78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800db7c:	085b      	lsrs	r3, r3, #1
 800db7e:	ea4f 0232 	mov.w	r2, r2, rrx
 800db82:	ebb6 0e02 	subs.w	lr, r6, r2
 800db86:	eb75 0e03 	sbcs.w	lr, r5, r3
 800db8a:	bf22      	ittt	cs
 800db8c:	1ab6      	subcs	r6, r6, r2
 800db8e:	4675      	movcs	r5, lr
 800db90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800db94:	ea55 0e06 	orrs.w	lr, r5, r6
 800db98:	d018      	beq.n	800dbcc <__aeabi_ddiv+0x114>
 800db9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800db9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800dba2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800dba6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800dbaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800dbae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800dbb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800dbb6:	d1c0      	bne.n	800db3a <__aeabi_ddiv+0x82>
 800dbb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dbbc:	d10b      	bne.n	800dbd6 <__aeabi_ddiv+0x11e>
 800dbbe:	ea41 0100 	orr.w	r1, r1, r0
 800dbc2:	f04f 0000 	mov.w	r0, #0
 800dbc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800dbca:	e7b6      	b.n	800db3a <__aeabi_ddiv+0x82>
 800dbcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dbd0:	bf04      	itt	eq
 800dbd2:	4301      	orreq	r1, r0
 800dbd4:	2000      	moveq	r0, #0
 800dbd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800dbda:	bf88      	it	hi
 800dbdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800dbe0:	f63f aeaf 	bhi.w	800d942 <__aeabi_dmul+0xde>
 800dbe4:	ebb5 0c03 	subs.w	ip, r5, r3
 800dbe8:	bf04      	itt	eq
 800dbea:	ebb6 0c02 	subseq.w	ip, r6, r2
 800dbee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800dbf2:	f150 0000 	adcs.w	r0, r0, #0
 800dbf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800dc00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800dc04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800dc08:	bfc2      	ittt	gt
 800dc0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800dc0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800dc12:	bd70      	popgt	{r4, r5, r6, pc}
 800dc14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dc18:	f04f 0e00 	mov.w	lr, #0
 800dc1c:	3c01      	subs	r4, #1
 800dc1e:	e690      	b.n	800d942 <__aeabi_dmul+0xde>
 800dc20:	ea45 0e06 	orr.w	lr, r5, r6
 800dc24:	e68d      	b.n	800d942 <__aeabi_dmul+0xde>
 800dc26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dc2a:	ea94 0f0c 	teq	r4, ip
 800dc2e:	bf08      	it	eq
 800dc30:	ea95 0f0c 	teqeq	r5, ip
 800dc34:	f43f af3b 	beq.w	800daae <__aeabi_dmul+0x24a>
 800dc38:	ea94 0f0c 	teq	r4, ip
 800dc3c:	d10a      	bne.n	800dc54 <__aeabi_ddiv+0x19c>
 800dc3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800dc42:	f47f af34 	bne.w	800daae <__aeabi_dmul+0x24a>
 800dc46:	ea95 0f0c 	teq	r5, ip
 800dc4a:	f47f af25 	bne.w	800da98 <__aeabi_dmul+0x234>
 800dc4e:	4610      	mov	r0, r2
 800dc50:	4619      	mov	r1, r3
 800dc52:	e72c      	b.n	800daae <__aeabi_dmul+0x24a>
 800dc54:	ea95 0f0c 	teq	r5, ip
 800dc58:	d106      	bne.n	800dc68 <__aeabi_ddiv+0x1b0>
 800dc5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800dc5e:	f43f aefd 	beq.w	800da5c <__aeabi_dmul+0x1f8>
 800dc62:	4610      	mov	r0, r2
 800dc64:	4619      	mov	r1, r3
 800dc66:	e722      	b.n	800daae <__aeabi_dmul+0x24a>
 800dc68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dc6c:	bf18      	it	ne
 800dc6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dc72:	f47f aec5 	bne.w	800da00 <__aeabi_dmul+0x19c>
 800dc76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800dc7a:	f47f af0d 	bne.w	800da98 <__aeabi_dmul+0x234>
 800dc7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800dc82:	f47f aeeb 	bne.w	800da5c <__aeabi_dmul+0x1f8>
 800dc86:	e712      	b.n	800daae <__aeabi_dmul+0x24a>

0800dc88 <__gedf2>:
 800dc88:	f04f 3cff 	mov.w	ip, #4294967295
 800dc8c:	e006      	b.n	800dc9c <__cmpdf2+0x4>
 800dc8e:	bf00      	nop

0800dc90 <__ledf2>:
 800dc90:	f04f 0c01 	mov.w	ip, #1
 800dc94:	e002      	b.n	800dc9c <__cmpdf2+0x4>
 800dc96:	bf00      	nop

0800dc98 <__cmpdf2>:
 800dc98:	f04f 0c01 	mov.w	ip, #1
 800dc9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800dca0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800dca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800dca8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800dcac:	bf18      	it	ne
 800dcae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800dcb2:	d01b      	beq.n	800dcec <__cmpdf2+0x54>
 800dcb4:	b001      	add	sp, #4
 800dcb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800dcba:	bf0c      	ite	eq
 800dcbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800dcc0:	ea91 0f03 	teqne	r1, r3
 800dcc4:	bf02      	ittt	eq
 800dcc6:	ea90 0f02 	teqeq	r0, r2
 800dcca:	2000      	moveq	r0, #0
 800dccc:	4770      	bxeq	lr
 800dcce:	f110 0f00 	cmn.w	r0, #0
 800dcd2:	ea91 0f03 	teq	r1, r3
 800dcd6:	bf58      	it	pl
 800dcd8:	4299      	cmppl	r1, r3
 800dcda:	bf08      	it	eq
 800dcdc:	4290      	cmpeq	r0, r2
 800dcde:	bf2c      	ite	cs
 800dce0:	17d8      	asrcs	r0, r3, #31
 800dce2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800dce6:	f040 0001 	orr.w	r0, r0, #1
 800dcea:	4770      	bx	lr
 800dcec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800dcf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800dcf4:	d102      	bne.n	800dcfc <__cmpdf2+0x64>
 800dcf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800dcfa:	d107      	bne.n	800dd0c <__cmpdf2+0x74>
 800dcfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800dd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800dd04:	d1d6      	bne.n	800dcb4 <__cmpdf2+0x1c>
 800dd06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800dd0a:	d0d3      	beq.n	800dcb4 <__cmpdf2+0x1c>
 800dd0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop

0800dd14 <__aeabi_cdrcmple>:
 800dd14:	4684      	mov	ip, r0
 800dd16:	4610      	mov	r0, r2
 800dd18:	4662      	mov	r2, ip
 800dd1a:	468c      	mov	ip, r1
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4663      	mov	r3, ip
 800dd20:	e000      	b.n	800dd24 <__aeabi_cdcmpeq>
 800dd22:	bf00      	nop

0800dd24 <__aeabi_cdcmpeq>:
 800dd24:	b501      	push	{r0, lr}
 800dd26:	f7ff ffb7 	bl	800dc98 <__cmpdf2>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	bf48      	it	mi
 800dd2e:	f110 0f00 	cmnmi.w	r0, #0
 800dd32:	bd01      	pop	{r0, pc}

0800dd34 <__aeabi_dcmpeq>:
 800dd34:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd38:	f7ff fff4 	bl	800dd24 <__aeabi_cdcmpeq>
 800dd3c:	bf0c      	ite	eq
 800dd3e:	2001      	moveq	r0, #1
 800dd40:	2000      	movne	r0, #0
 800dd42:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd46:	bf00      	nop

0800dd48 <__aeabi_dcmplt>:
 800dd48:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd4c:	f7ff ffea 	bl	800dd24 <__aeabi_cdcmpeq>
 800dd50:	bf34      	ite	cc
 800dd52:	2001      	movcc	r0, #1
 800dd54:	2000      	movcs	r0, #0
 800dd56:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd5a:	bf00      	nop

0800dd5c <__aeabi_dcmple>:
 800dd5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd60:	f7ff ffe0 	bl	800dd24 <__aeabi_cdcmpeq>
 800dd64:	bf94      	ite	ls
 800dd66:	2001      	movls	r0, #1
 800dd68:	2000      	movhi	r0, #0
 800dd6a:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd6e:	bf00      	nop

0800dd70 <__aeabi_dcmpge>:
 800dd70:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd74:	f7ff ffce 	bl	800dd14 <__aeabi_cdrcmple>
 800dd78:	bf94      	ite	ls
 800dd7a:	2001      	movls	r0, #1
 800dd7c:	2000      	movhi	r0, #0
 800dd7e:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd82:	bf00      	nop

0800dd84 <__aeabi_dcmpgt>:
 800dd84:	f84d ed08 	str.w	lr, [sp, #-8]!
 800dd88:	f7ff ffc4 	bl	800dd14 <__aeabi_cdrcmple>
 800dd8c:	bf34      	ite	cc
 800dd8e:	2001      	movcc	r0, #1
 800dd90:	2000      	movcs	r0, #0
 800dd92:	f85d fb08 	ldr.w	pc, [sp], #8
 800dd96:	bf00      	nop

0800dd98 <__aeabi_d2iz>:
 800dd98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800dd9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800dda0:	d215      	bcs.n	800ddce <__aeabi_d2iz+0x36>
 800dda2:	d511      	bpl.n	800ddc8 <__aeabi_d2iz+0x30>
 800dda4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800dda8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ddac:	d912      	bls.n	800ddd4 <__aeabi_d2iz+0x3c>
 800ddae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ddb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ddba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ddbe:	fa23 f002 	lsr.w	r0, r3, r2
 800ddc2:	bf18      	it	ne
 800ddc4:	4240      	negne	r0, r0
 800ddc6:	4770      	bx	lr
 800ddc8:	f04f 0000 	mov.w	r0, #0
 800ddcc:	4770      	bx	lr
 800ddce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ddd2:	d105      	bne.n	800dde0 <__aeabi_d2iz+0x48>
 800ddd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ddd8:	bf08      	it	eq
 800ddda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ddde:	4770      	bx	lr
 800dde0:	f04f 0000 	mov.w	r0, #0
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop

0800dde8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800ddf0:	f04f 0300 	mov.w	r3, #0
 800ddf4:	73fb      	strb	r3, [r7, #15]
 800ddf6:	f04f 0300 	mov.w	r3, #0
 800ddfa:	73bb      	strb	r3, [r7, #14]
 800ddfc:	f04f 030f 	mov.w	r3, #15
 800de00:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	78db      	ldrb	r3, [r3, #3]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d045      	beq.n	800de96 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800de0a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800de0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	ea6f 0303 	mvn.w	r3, r3
 800de18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de1c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800de20:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	f1c3 0304 	rsb	r3, r3, #4
 800de28:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800de2a:	7b7a      	ldrb	r2, [r7, #13]
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	fa42 f303 	asr.w	r3, r2, r3
 800de32:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	785b      	ldrb	r3, [r3, #1]
 800de38:	461a      	mov	r2, r3
 800de3a:	7bbb      	ldrb	r3, [r7, #14]
 800de3c:	fa02 f303 	lsl.w	r3, r2, r3
 800de40:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	789a      	ldrb	r2, [r3, #2]
 800de46:	7b7b      	ldrb	r3, [r7, #13]
 800de48:	4013      	ands	r3, r2
 800de4a:	b2da      	uxtb	r2, r3
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	4313      	orrs	r3, r2
 800de50:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800de58:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800de5a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800de5e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	7812      	ldrb	r2, [r2, #0]
 800de66:	189b      	adds	r3, r3, r2
 800de68:	7bfa      	ldrb	r2, [r7, #15]
 800de6a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800de6e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800de72:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	7812      	ldrb	r2, [r2, #0]
 800de7a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800de7e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800de80:	6879      	ldr	r1, [r7, #4]
 800de82:	7809      	ldrb	r1, [r1, #0]
 800de84:	f001 011f 	and.w	r1, r1, #31
 800de88:	f04f 0001 	mov.w	r0, #1
 800de8c:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800de90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800de94:	e014      	b.n	800dec0 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800de96:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800de9a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	7812      	ldrb	r2, [r2, #0]
 800dea2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800dea6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800dea8:	6879      	ldr	r1, [r7, #4]
 800deaa:	7809      	ldrb	r1, [r1, #0]
 800deac:	f001 011f 	and.w	r1, r1, #31
 800deb0:	f04f 0001 	mov.w	r0, #1
 800deb4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800deb8:	f102 0220 	add.w	r2, r2, #32
 800debc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800dec0:	f107 0714 	add.w	r7, r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bc80      	pop	{r7}
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop

0800decc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800ded6:	f04f 0300 	mov.w	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	f04f 0300 	mov.w	r3, #0
 800dee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800dee2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800dee6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f640 72fe 	movw	r2, #4094	; 0xffe
 800def4:	fa02 f303 	lsl.w	r3, r2, r3
 800def8:	ea6f 0303 	mvn.w	r3, r3
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4013      	ands	r3, r2
 800df00:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800df10:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800df16:	4313      	orrs	r3, r2
 800df18:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	fa02 f303 	lsl.w	r3, r2, r3
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800df28:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800df2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	601a      	str	r2, [r3, #0]
}
 800df34:	f107 0714 	add.w	r7, r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	bc80      	pop	{r7}
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d011      	beq.n	800df76 <DAC_Cmd+0x36>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800df52:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800df56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df5a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800df5e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800df62:	6812      	ldr	r2, [r2, #0]
 800df64:	4611      	mov	r1, r2
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	f04f 0001 	mov.w	r0, #1
 800df6c:	fa00 f202 	lsl.w	r2, r0, r2
 800df70:	430a      	orrs	r2, r1
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	e012      	b.n	800df9c <DAC_Cmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800df76:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800df7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df7e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800df82:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800df86:	6812      	ldr	r2, [r2, #0]
 800df88:	4611      	mov	r1, r2
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	f04f 0001 	mov.w	r0, #1
 800df90:	fa00 f202 	lsl.w	r2, r0, r2
 800df94:	ea6f 0202 	mvn.w	r2, r2
 800df98:	400a      	ands	r2, r1
 800df9a:	601a      	str	r2, [r3, #0]
  }
}
 800df9c:	f107 070c 	add.w	r7, r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bc80      	pop	{r7}
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800dfb4:	f04f 0300 	mov.w	r3, #0
 800dfb8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800dfba:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800dfbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dfc2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	18d3      	adds	r3, r2, r3
 800dfca:	f103 0308 	add.w	r3, r3, #8
 800dfce:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	887a      	ldrh	r2, [r7, #2]
 800dfd4:	601a      	str	r2, [r3, #0]
}
 800dfd6:	f107 0714 	add.w	r7, r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bc80      	pop	{r7}
 800dfde:	4770      	bx	lr

0800dfe0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f023 0201 	bic.w	r2, r3, #1
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f04f 0200 	mov.w	r2, #0
 800e002:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f04f 0200 	mov.w	r2, #0
 800e012:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f04f 0221 	mov.w	r2, #33	; 0x21
 800e022:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	f246 0310 	movw	r3, #24592	; 0x6010
 800e02a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e02e:	429a      	cmp	r2, r3
 800e030:	d107      	bne.n	800e042 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800e032:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e036:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e03a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800e03e:	609a      	str	r2, [r3, #8]
 800e040:	e0eb      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	f246 0328 	movw	r3, #24616	; 0x6028
 800e048:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d107      	bne.n	800e060 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800e050:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e054:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e058:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e05c:	609a      	str	r2, [r3, #8]
 800e05e:	e0dc      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	f246 0340 	movw	r3, #24640	; 0x6040
 800e066:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d107      	bne.n	800e07e <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800e06e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e072:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e076:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800e07a:	609a      	str	r2, [r3, #8]
 800e07c:	e0cd      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	f246 0358 	movw	r3, #24664	; 0x6058
 800e084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e088:	429a      	cmp	r2, r3
 800e08a:	d107      	bne.n	800e09c <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800e08c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e090:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e094:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800e098:	609a      	str	r2, [r3, #8]
 800e09a:	e0be      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	f246 0370 	movw	r3, #24688	; 0x6070
 800e0a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d109      	bne.n	800e0be <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800e0aa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e0ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0b2:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800e0b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e0ba:	60da      	str	r2, [r3, #12]
 800e0bc:	e0ad      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	f246 0388 	movw	r3, #24712	; 0x6088
 800e0c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d109      	bne.n	800e0e0 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800e0cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e0d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0d4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e0d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e0dc:	60da      	str	r2, [r3, #12]
 800e0de:	e09c      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	f246 03a0 	movw	r3, #24736	; 0x60a0
 800e0e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d109      	bne.n	800e102 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800e0ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e0f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e0f6:	f04f 0200 	mov.w	r2, #0
 800e0fa:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800e0fe:	60da      	str	r2, [r3, #12]
 800e100:	e08b      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	f246 03b8 	movw	r3, #24760	; 0x60b8
 800e108:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d107      	bne.n	800e120 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800e110:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e114:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e118:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800e11c:	60da      	str	r2, [r3, #12]
 800e11e:	e07c      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	f246 4310 	movw	r3, #25616	; 0x6410
 800e126:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d107      	bne.n	800e13e <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800e12e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e132:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e136:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800e13a:	609a      	str	r2, [r3, #8]
 800e13c:	e06d      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	f246 4328 	movw	r3, #25640	; 0x6428
 800e144:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e148:	429a      	cmp	r2, r3
 800e14a:	d107      	bne.n	800e15c <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800e14c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e150:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e154:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e158:	609a      	str	r2, [r3, #8]
 800e15a:	e05e      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	f246 4340 	movw	r3, #25664	; 0x6440
 800e162:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e166:	429a      	cmp	r2, r3
 800e168:	d107      	bne.n	800e17a <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800e16a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e16e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e172:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800e176:	609a      	str	r2, [r3, #8]
 800e178:	e04f      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	f246 4358 	movw	r3, #25688	; 0x6458
 800e180:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e184:	429a      	cmp	r2, r3
 800e186:	d107      	bne.n	800e198 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800e188:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e18c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e190:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800e194:	609a      	str	r2, [r3, #8]
 800e196:	e040      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	f246 4370 	movw	r3, #25712	; 0x6470
 800e19e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d109      	bne.n	800e1ba <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800e1a6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e1aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e1ae:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800e1b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e1b6:	60da      	str	r2, [r3, #12]
 800e1b8:	e02f      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	f246 4388 	movw	r3, #25736	; 0x6488
 800e1c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d109      	bne.n	800e1dc <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800e1c8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e1cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e1d0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800e1d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e1d8:	60da      	str	r2, [r3, #12]
 800e1da:	e01e      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	f246 43a0 	movw	r3, #25760	; 0x64a0
 800e1e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d109      	bne.n	800e1fe <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800e1ea:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e1ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e1f2:	f04f 0200 	mov.w	r2, #0
 800e1f6:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800e1fa:	60da      	str	r2, [r3, #12]
 800e1fc:	e00d      	b.n	800e21a <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	f246 43b8 	movw	r3, #25784	; 0x64b8
 800e204:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e208:	429a      	cmp	r2, r3
 800e20a:	d106      	bne.n	800e21a <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800e20c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e210:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e214:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800e218:	60da      	str	r2, [r3, #12]
    }
  }
}
 800e21a:	f107 070c 	add.w	r7, r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	bc80      	pop	{r7}
 800e222:	4770      	bx	lr

0800e224 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e22e:	f04f 0300 	mov.w	r3, #0
 800e232:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	f248 033f 	movw	r3, #32831	; 0x803f
 800e240:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 800e244:	4013      	ands	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800e262:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800e26e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e274:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800e27a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e280:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	4313      	orrs	r3, r2
 800e286:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	68fa      	ldr	r2, [r7, #12]
 800e28c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f023 0307 	bic.w	r3, r3, #7
 800e29a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	691a      	ldr	r2, [r3, #16]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	689a      	ldr	r2, [r3, #8]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	60da      	str	r2, [r3, #12]
}
 800e2ca:	f107 0714 	add.w	r7, r7, #20
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bc80      	pop	{r7}
 800e2d2:	4770      	bx	lr

0800e2d4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d006      	beq.n	800e2f4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f043 0201 	orr.w	r2, r3, #1
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	e005      	b.n	800e300 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f023 0201 	bic.w	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	601a      	str	r2, [r3, #0]
  }
}
 800e300:	f107 070c 	add.w	r7, r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	bc80      	pop	{r7}
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop

0800e30c <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d006      	beq.n	800e32a <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f043 0220 	orr.w	r2, r3, #32
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	e005      	b.n	800e336 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f023 0220 	bic.w	r2, r3, #32
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	601a      	str	r2, [r3, #0]
  }
}
 800e336:	f107 070c 	add.w	r7, r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bc80      	pop	{r7}
 800e33e:	4770      	bx	lr

0800e340 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800e348:	f04f 0300 	mov.w	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f003 0301 	and.w	r3, r3, #1
 800e356:	b2db      	uxtb	r3, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800e35c:	f04f 0301 	mov.w	r3, #1
 800e360:	73fb      	strb	r3, [r7, #15]
 800e362:	e002      	b.n	800e36a <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800e364:	f04f 0300 	mov.w	r3, #0
 800e368:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	f107 0714 	add.w	r7, r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	bc80      	pop	{r7}
 800e376:	4770      	bx	lr

0800e378 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800e378:	b480      	push	{r7}
 800e37a:	b087      	sub	sp, #28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800e382:	f04f 0300 	mov.w	r3, #0
 800e386:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800e388:	f04f 0300 	mov.w	r3, #0
 800e38c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	f246 430f 	movw	r3, #25615	; 0x640f
 800e394:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e398:	429a      	cmp	r2, r3
 800e39a:	d805      	bhi.n	800e3a8 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800e39c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e3a4:	613b      	str	r3, [r7, #16]
 800e3a6:	e004      	b.n	800e3b2 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800e3a8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e3b0:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	e002      	b.n	800e3ca <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	f640 737d 	movw	r3, #3965	; 0xf7d
 800e3d0:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	4013      	ands	r3, r2
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d003      	beq.n	800e3ea <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800e3e2:	f04f 0301 	mov.w	r3, #1
 800e3e6:	75fb      	strb	r3, [r7, #23]
 800e3e8:	e002      	b.n	800e3f0 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800e3ea:	f04f 0300 	mov.w	r3, #0
 800e3ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f107 071c 	add.w	r7, r7, #28
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bc80      	pop	{r7}
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop

0800e400 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	f246 430f 	movw	r3, #25615	; 0x640f
 800e410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e414:	429a      	cmp	r2, r3
 800e416:	d805      	bhi.n	800e424 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800e418:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800e41c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	e004      	b.n	800e42e <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800e424:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800e428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e42c:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e434:	2b00      	cmp	r3, #0
 800e436:	d008      	beq.n	800e44a <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	f640 737d 	movw	r3, #3965	; 0xf7d
 800e43e:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800e442:	4013      	ands	r3, r2
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	60d3      	str	r3, [r2, #12]
 800e448:	e007      	b.n	800e45a <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	f640 737d 	movw	r3, #3965	; 0xf7d
 800e450:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800e454:	4013      	ands	r3, r2
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	6093      	str	r3, [r2, #8]
  }    
}
 800e45a:	f107 0714 	add.w	r7, r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	bc80      	pop	{r7}
 800e462:	4770      	bx	lr

0800e464 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	4613      	mov	r3, r2
 800e470:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00f      	beq.n	800e49c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d006      	beq.n	800e490 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	615a      	str	r2, [r3, #20]
 800e48e:	e005      	b.n	800e49c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b80      	cmp	r3, #128	; 0x80
 800e4a0:	d017      	beq.n	800e4d2 <DMA_ITConfig+0x6e>
  {
    if (NewState != DISABLE)
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d009      	beq.n	800e4bc <DMA_ITConfig+0x58>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f003 031e 	and.w	r3, r3, #30
 800e4b4:	431a      	orrs	r2, r3
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	601a      	str	r2, [r3, #0]
 800e4ba:	e00a      	b.n	800e4d2 <DMA_ITConfig+0x6e>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	f003 031e 	and.w	r3, r3, #30
 800e4c8:	ea6f 0303 	mvn.w	r3, r3
 800e4cc:	401a      	ands	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800e4d2:	f107 0714 	add.w	r7, r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bc80      	pop	{r7}
 800e4da:	4770      	bx	lr

0800e4dc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800e4e6:	f04f 0300 	mov.w	r3, #0
 800e4ea:	617b      	str	r3, [r7, #20]
 800e4ec:	f04f 0300 	mov.w	r3, #0
 800e4f0:	613b      	str	r3, [r7, #16]
 800e4f2:	f04f 0300 	mov.w	r3, #0
 800e4f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	617b      	str	r3, [r7, #20]
 800e4fe:	e08e      	b.n	800e61e <GPIO_Init+0x142>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	f04f 0201 	mov.w	r2, #1
 800e506:	fa02 f303 	lsl.w	r3, r2, r3
 800e50a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	4013      	ands	r3, r2
 800e514:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d17b      	bne.n	800e616 <GPIO_Init+0x13a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e52a:	f04f 0103 	mov.w	r1, #3
 800e52e:	fa01 f303 	lsl.w	r3, r1, r3
 800e532:	ea6f 0303 	mvn.w	r3, r3
 800e536:	401a      	ands	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	791b      	ldrb	r3, [r3, #4]
 800e546:	4619      	mov	r1, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e54e:	fa01 f303 	lsl.w	r3, r1, r3
 800e552:	431a      	orrs	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	791b      	ldrb	r3, [r3, #4]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d003      	beq.n	800e568 <GPIO_Init+0x8c>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	791b      	ldrb	r3, [r3, #4]
 800e564:	2b02      	cmp	r3, #2
 800e566:	d138      	bne.n	800e5da <GPIO_Init+0xfe>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	461a      	mov	r2, r3
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e574:	f04f 0103 	mov.w	r1, #3
 800e578:	fa01 f303 	lsl.w	r3, r1, r3
 800e57c:	ea6f 0303 	mvn.w	r3, r3
 800e580:	401a      	ands	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	689b      	ldr	r3, [r3, #8]
 800e58a:	461a      	mov	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	795b      	ldrb	r3, [r3, #5]
 800e590:	4619      	mov	r1, r3
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e598:	fa01 f303 	lsl.w	r3, r1, r3
 800e59c:	431a      	orrs	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	f04f 0101 	mov.w	r1, #1
 800e5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e5b4:	ea6f 0303 	mvn.w	r3, r3
 800e5b8:	401a      	ands	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	799b      	ldrb	r3, [r3, #6]
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	431a      	orrs	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5e8:	f04f 0103 	mov.w	r1, #3
 800e5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e5f0:	ea6f 0303 	mvn.w	r3, r3
 800e5f4:	401a      	ands	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	461a      	mov	r2, r3
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	79db      	ldrb	r3, [r3, #7]
 800e604:	4619      	mov	r1, r3
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e60c:	fa01 f303 	lsl.w	r3, r1, r3
 800e610:	431a      	orrs	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f103 0301 	add.w	r3, r3, #1
 800e61c:	617b      	str	r3, [r7, #20]
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2b0f      	cmp	r3, #15
 800e622:	f67f af6d 	bls.w	800e500 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800e626:	f107 071c 	add.w	r7, r7, #28
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bc80      	pop	{r7}
 800e62e:	4770      	bx	lr

0800e630 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	460b      	mov	r3, r1
 800e63a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800e63c:	f04f 0300 	mov.w	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	461a      	mov	r2, r3
 800e648:	887b      	ldrh	r3, [r7, #2]
 800e64a:	4013      	ands	r3, r2
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d003      	beq.n	800e658 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 800e650:	f04f 0301 	mov.w	r3, #1
 800e654:	73fb      	strb	r3, [r7, #15]
 800e656:	e002      	b.n	800e65e <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800e658:	f04f 0300 	mov.w	r3, #0
 800e65c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e660:	4618      	mov	r0, r3
 800e662:	f107 0714 	add.w	r7, r7, #20
 800e666:	46bd      	mov	sp, r7
 800e668:	bc80      	pop	{r7}
 800e66a:	4770      	bx	lr

0800e66c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	b29b      	uxth	r3, r3
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	f107 070c 	add.w	r7, r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	bc80      	pop	{r7}
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop

0800e688 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	887a      	ldrh	r2, [r7, #2]
 800e698:	831a      	strh	r2, [r3, #24]
}
 800e69a:	f107 070c 	add.w	r7, r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bc80      	pop	{r7}
 800e6a2:	4770      	bx	lr

0800e6a4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	887a      	ldrh	r2, [r7, #2]
 800e6b4:	835a      	strh	r2, [r3, #26]
}
 800e6b6:	f107 070c 	add.w	r7, r7, #12
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bc80      	pop	{r7}
 800e6be:	4770      	bx	lr

0800e6c0 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	460a      	mov	r2, r1
 800e6cc:	807a      	strh	r2, [r7, #2]
 800e6ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800e6d0:	787b      	ldrb	r3, [r7, #1]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d003      	beq.n	800e6de <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	887a      	ldrh	r2, [r7, #2]
 800e6da:	831a      	strh	r2, [r3, #24]
 800e6dc:	e002      	b.n	800e6e4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	887a      	ldrh	r2, [r7, #2]
 800e6e2:	835a      	strh	r2, [r3, #26]
  }
}
 800e6e4:	f107 070c 	add.w	r7, r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bc80      	pop	{r7}
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop

0800e6f0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	460a      	mov	r2, r1
 800e6fc:	807a      	strh	r2, [r7, #2]
 800e6fe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800e700:	f04f 0300 	mov.w	r3, #0
 800e704:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800e706:	f04f 0300 	mov.w	r3, #0
 800e70a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800e70c:	787a      	ldrb	r2, [r7, #1]
 800e70e:	887b      	ldrh	r3, [r7, #2]
 800e710:	f003 0307 	and.w	r3, r3, #7
 800e714:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e718:	fa02 f303 	lsl.w	r3, r2, r3
 800e71c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800e71e:	887b      	ldrh	r3, [r7, #2]
 800e720:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e724:	b29b      	uxth	r3, r3
 800e726:	461a      	mov	r2, r3
 800e728:	887b      	ldrh	r3, [r7, #2]
 800e72a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e72e:	b29b      	uxth	r3, r3
 800e730:	4619      	mov	r1, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f101 0108 	add.w	r1, r1, #8
 800e738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e73c:	4619      	mov	r1, r3
 800e73e:	887b      	ldrh	r3, [r7, #2]
 800e740:	f003 0307 	and.w	r3, r3, #7
 800e744:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e748:	f04f 000f 	mov.w	r0, #15
 800e74c:	fa00 f303 	lsl.w	r3, r0, r3
 800e750:	ea6f 0303 	mvn.w	r3, r3
 800e754:	4019      	ands	r1, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f102 0208 	add.w	r2, r2, #8
 800e75c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800e760:	887b      	ldrh	r3, [r7, #2]
 800e762:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e766:	b29b      	uxth	r3, r3
 800e768:	461a      	mov	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f102 0208 	add.w	r2, r2, #8
 800e770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e774:	461a      	mov	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	4313      	orrs	r3, r2
 800e77a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800e77c:	887b      	ldrh	r3, [r7, #2]
 800e77e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e782:	b29b      	uxth	r3, r3
 800e784:	461a      	mov	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f102 0208 	add.w	r2, r2, #8
 800e78c:	68b9      	ldr	r1, [r7, #8]
 800e78e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800e792:	f107 0714 	add.w	r7, r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	bc80      	pop	{r7}
 800e79a:	4770      	bx	lr

0800e79c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800e7aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d10c      	bne.n	800e7cc <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800e7b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e7b6:	f04f 0101 	mov.w	r1, #1
 800e7ba:	f000 fbbd 	bl	800ef38 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800e7be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e7c2:	f04f 0100 	mov.w	r1, #0
 800e7c6:	f000 fbb7 	bl	800ef38 <RCC_APB1PeriphResetCmd>
 800e7ca:	e026      	b.n	800e81a <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800e7d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d10c      	bne.n	800e7f4 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800e7da:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800e7de:	f04f 0101 	mov.w	r1, #1
 800e7e2:	f000 fba9 	bl	800ef38 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800e7e6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800e7ea:	f04f 0100 	mov.w	r1, #0
 800e7ee:	f000 fba3 	bl	800ef38 <RCC_APB1PeriphResetCmd>
 800e7f2:	e012      	b.n	800e81a <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e7fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d10b      	bne.n	800e81a <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800e802:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e806:	f04f 0101 	mov.w	r1, #1
 800e80a:	f000 fb95 	bl	800ef38 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800e80e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e812:	f04f 0100 	mov.w	r1, #0
 800e816:	f000 fb8f 	bl	800ef38 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800e81a:	f107 0708 	add.w	r7, r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop

0800e824 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08a      	sub	sp, #40	; 0x28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800e82e:	f04f 0300 	mov.w	r3, #0
 800e832:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e834:	f04f 0300 	mov.w	r3, #0
 800e838:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800e83a:	f04f 0304 	mov.w	r3, #4
 800e83e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800e840:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800e844:	f2c0 037a 	movt	r3, #122	; 0x7a
 800e848:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	889b      	ldrh	r3, [r3, #4]
 800e84e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800e850:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e852:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e856:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800e858:	f107 030c 	add.w	r3, r7, #12
 800e85c:	4618      	mov	r0, r3
 800e85e:	f000 f9ff 	bl	800ec60 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800e866:	69fa      	ldr	r2, [r7, #28]
 800e868:	f64d 6383 	movw	r3, #56963	; 0xde83
 800e86c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800e870:	fba3 1302 	umull	r1, r3, r3, r2
 800e874:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800e878:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800e87a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e87c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e87e:	4313      	orrs	r3, r2
 800e880:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e886:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	881b      	ldrh	r3, [r3, #0]
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	f023 0301 	bic.w	r3, r3, #1
 800e892:	b29a      	uxth	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800e898:	f04f 0300 	mov.w	r3, #0
 800e89c:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800e8a6:	f2c0 0301 	movt	r3, #1
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d818      	bhi.n	800e8e0 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e8b6:	69fa      	ldr	r2, [r7, #28]
 800e8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800e8be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c0:	2b03      	cmp	r3, #3
 800e8c2:	d802      	bhi.n	800e8ca <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800e8c4:	f04f 0304 	mov.w	r3, #4
 800e8c8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800e8ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800e8d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8d4:	f103 0301 	add.w	r3, r3, #1
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	841a      	strh	r2, [r3, #32]
 800e8de:	e04b      	b.n	800e978 <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	88da      	ldrh	r2, [r3, #6]
 800e8e4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d10a      	bne.n	800e902 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e8f6:	189b      	adds	r3, r3, r2
 800e8f8:	69fa      	ldr	r2, [r7, #28]
 800e8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e900:	e010      	b.n	800e924 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	4613      	mov	r3, r2
 800e908:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e90c:	189b      	adds	r3, r3, r2
 800e90e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e912:	189b      	adds	r3, r3, r2
 800e914:	69fa      	ldr	r2, [r7, #28]
 800e916:	fbb2 f3f3 	udiv	r3, r2, r3
 800e91a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800e91c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e91e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e922:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800e924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e926:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800e92a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d103      	bne.n	800e93a <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800e932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e934:	f043 0301 	orr.w	r3, r3, #1
 800e938:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800e93a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e93c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e93e:	4313      	orrs	r3, r2
 800e940:	b29b      	uxth	r3, r3
 800e942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e94a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800e94c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e94e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e952:	fb02 f203 	mul.w	r2, r2, r3
 800e956:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800e95a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800e95e:	fb83 1302 	smull	r1, r3, r3, r2
 800e962:	ea4f 11a3 	mov.w	r1, r3, asr #6
 800e966:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e96a:	1acb      	subs	r3, r1, r3
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	f103 0301 	add.w	r3, r3, #1
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e97c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	b29b      	uxth	r3, r3
 800e984:	f043 0301 	orr.w	r3, r3, #1
 800e988:	b29a      	uxth	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800e994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e99a:	f023 030a 	bic.w	r3, r3, #10
 800e99e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	889a      	ldrh	r2, [r3, #4]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	895b      	ldrh	r3, [r3, #10]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e9b6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	899a      	ldrh	r2, [r3, #12]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	891b      	ldrh	r3, [r3, #8]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	811a      	strh	r2, [r3, #8]
}
 800e9c8:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e9dc:	78fb      	ldrb	r3, [r7, #3]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d008      	beq.n	800e9f4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	881b      	ldrh	r3, [r3, #0]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	f043 0301 	orr.w	r3, r3, #1
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	801a      	strh	r2, [r3, #0]
 800e9f2:	e007      	b.n	800ea04 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	881b      	ldrh	r3, [r3, #0]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	f023 0301 	bic.w	r3, r3, #1
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	801a      	strh	r2, [r3, #0]
  }
}
 800ea04:	f107 070c 	add.w	r7, r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bc80      	pop	{r7}
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop

0800ea10 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ea1c:	78fb      	ldrb	r3, [r7, #3]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d008      	beq.n	800ea34 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	801a      	strh	r2, [r3, #0]
 800ea32:	e007      	b.n	800ea44 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	881b      	ldrh	r3, [r3, #0]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	801a      	strh	r2, [r3, #0]
  }
}
 800ea44:	f107 070c 	add.w	r7, r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bc80      	pop	{r7}
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop

0800ea50 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d008      	beq.n	800ea74 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	801a      	strh	r2, [r3, #0]
 800ea72:	e007      	b.n	800ea84 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	881b      	ldrh	r3, [r3, #0]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	801a      	strh	r2, [r3, #0]
  }
}
 800ea84:	f107 070c 	add.w	r7, r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bc80      	pop	{r7}
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop

0800ea90 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	460a      	mov	r2, r1
 800ea9c:	70fa      	strb	r2, [r7, #3]
 800ea9e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800eaa0:	78bb      	ldrb	r3, [r7, #2]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d004      	beq.n	800eab0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800eaa6:	78fb      	ldrb	r3, [r7, #3]
 800eaa8:	f043 0301 	orr.w	r3, r3, #1
 800eaac:	70fb      	strb	r3, [r7, #3]
 800eaae:	e003      	b.n	800eab8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	f023 0301 	bic.w	r3, r3, #1
 800eab6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800eab8:	78fb      	ldrb	r3, [r7, #3]
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	821a      	strh	r2, [r3, #16]
}
 800eac0:	f107 070c 	add.w	r7, r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bc80      	pop	{r7}
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop

0800eacc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	460b      	mov	r3, r1
 800ead6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ead8:	78fb      	ldrb	r3, [r7, #3]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d008      	beq.n	800eaf0 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	801a      	strh	r2, [r3, #0]
 800eaee:	e007      	b.n	800eb00 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	881b      	ldrh	r3, [r3, #0]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	801a      	strh	r2, [r3, #0]
  }
}
 800eb00:	f107 070c 	add.w	r7, r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bc80      	pop	{r7}
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop

0800eb0c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800eb18:	78fb      	ldrb	r3, [r7, #3]
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	821a      	strh	r2, [r3, #16]
}
 800eb20:	f107 070c 	add.w	r7, r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bc80      	pop	{r7}
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop

0800eb2c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	8a1b      	ldrh	r3, [r3, #16]
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	b2db      	uxtb	r3, r3
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f107 070c 	add.w	r7, r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bc80      	pop	{r7}
 800eb46:	4770      	bx	lr

0800eb48 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b087      	sub	sp, #28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800eb52:	f04f 0300 	mov.w	r3, #0
 800eb56:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800eb58:	f04f 0300 	mov.w	r3, #0
 800eb5c:	60fb      	str	r3, [r7, #12]
 800eb5e:	f04f 0300 	mov.w	r3, #0
 800eb62:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800eb64:	f04f 0300 	mov.w	r3, #0
 800eb68:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	8a9b      	ldrh	r3, [r3, #20]
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	8b1b      	ldrh	r3, [r3, #24]
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800eb80:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb8c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	401a      	ands	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d103      	bne.n	800eba2 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800eb9a:	f04f 0301 	mov.w	r3, #1
 800eb9e:	75fb      	strb	r3, [r7, #23]
 800eba0:	e002      	b.n	800eba8 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800eba2:	f04f 0300 	mov.w	r3, #0
 800eba6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800eba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f107 071c 	add.w	r7, r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bc80      	pop	{r7}
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop

0800ebb8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b087      	sub	sp, #28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800ebc2:	f04f 0300 	mov.w	r3, #0
 800ebc6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800ebc8:	f04f 0300 	mov.w	r3, #0
 800ebcc:	613b      	str	r3, [r7, #16]
 800ebce:	f04f 0300 	mov.w	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800ebde:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebe6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d004      	beq.n	800ebf8 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f103 0314 	add.w	r3, r3, #20
 800ebf4:	60fb      	str	r3, [r7, #12]
 800ebf6:	e007      	b.n	800ec08 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ebfe:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f103 0318 	add.w	r3, r3, #24
 800ec06:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	4013      	ands	r3, r2
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d003      	beq.n	800ec1c <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800ec14:	f04f 0301 	mov.w	r3, #1
 800ec18:	75fb      	strb	r3, [r7, #23]
 800ec1a:	e002      	b.n	800ec22 <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800ec1c:	f04f 0300 	mov.w	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800ec22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	f107 071c 	add.w	r7, r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bc80      	pop	{r7}
 800ec2e:	4770      	bx	lr

0800ec30 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800ec3a:	f04f 0300 	mov.w	r3, #0
 800ec3e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec46:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	ea6f 0303 	mvn.w	r3, r3
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	829a      	strh	r2, [r3, #20]
}
 800ec56:	f107 0714 	add.w	r7, r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bc80      	pop	{r7}
 800ec5e:	4770      	bx	lr

0800ec60 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b089      	sub	sp, #36	; 0x24
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800ec68:	f04f 0300 	mov.w	r3, #0
 800ec6c:	61bb      	str	r3, [r7, #24]
 800ec6e:	f04f 0300 	mov.w	r3, #0
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	f04f 0300 	mov.w	r3, #0
 800ec78:	61fb      	str	r3, [r7, #28]
 800ec7a:	f04f 0302 	mov.w	r3, #2
 800ec7e:	613b      	str	r3, [r7, #16]
 800ec80:	f04f 0300 	mov.w	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	f04f 0302 	mov.w	r3, #2
 800ec8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800ec8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ec90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	f003 030c 	and.w	r3, r3, #12
 800ec9a:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	2b04      	cmp	r3, #4
 800eca0:	d00a      	beq.n	800ecb8 <RCC_GetClocksFreq+0x58>
 800eca2:	2b08      	cmp	r3, #8
 800eca4:	d00f      	beq.n	800ecc6 <RCC_GetClocksFreq+0x66>
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d162      	bne.n	800ed70 <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800ecb0:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800ecb4:	6013      	str	r3, [r2, #0]
      break;
 800ecb6:	e062      	b.n	800ed7e <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800ecbe:	f2c0 037a 	movt	r3, #122	; 0x7a
 800ecc2:	6013      	str	r3, [r2, #0]
      break;
 800ecc4:	e05b      	b.n	800ed7e <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800ecc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ecca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecd4:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800ecd8:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ecda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ecde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ece8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d015      	beq.n	800ed1c <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800ecf0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800ecf4:	f2c0 037a 	movt	r3, #122	; 0x7a
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	fbb3 f2f2 	udiv	r2, r3, r2
 800ecfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ed02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	4619      	mov	r1, r3
 800ed0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ed0e:	400b      	ands	r3, r1
 800ed10:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800ed14:	fb03 f302 	mul.w	r3, r3, r2
 800ed18:	61fb      	str	r3, [r7, #28]
 800ed1a:	e014      	b.n	800ed46 <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800ed1c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800ed20:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ed2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4619      	mov	r1, r3
 800ed36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ed3a:	400b      	ands	r3, r1
 800ed3c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800ed40:	fb03 f302 	mul.w	r3, r3, r2
 800ed44:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800ed46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ed4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ed54:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ed58:	f103 0301 	add.w	r3, r3, #1
 800ed5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed60:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800ed62:	69fa      	ldr	r2, [r7, #28]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	601a      	str	r2, [r3, #0]
      break;
 800ed6e:	e006      	b.n	800ed7e <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800ed76:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800ed7a:	6013      	str	r3, [r2, #0]
      break;
 800ed7c:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800ed7e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ed82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed8c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ed94:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800ed96:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800ed9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed9e:	69ba      	ldr	r2, [r7, #24]
 800eda0:	189b      	adds	r3, r3, r2
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	fa22 f203 	lsr.w	r2, r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800edb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800edc4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800edcc:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800edce:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800edd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	189b      	adds	r3, r3, r2
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	685a      	ldr	r2, [r3, #4]
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	fa22 f203 	lsr.w	r2, r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800edee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800edfc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800ee04:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800ee06:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800ee0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee0e:	69ba      	ldr	r2, [r7, #24]
 800ee10:	189b      	adds	r3, r3, r2
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685a      	ldr	r2, [r3, #4]
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	fa22 f203 	lsr.w	r2, r2, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	60da      	str	r2, [r3, #12]
}
 800ee26:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bc80      	pop	{r7}
 800ee2e:	4770      	bx	lr

0800ee30 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ee3c:	78fb      	ldrb	r3, [r7, #3]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00d      	beq.n	800ee5e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800ee42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ee46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ee4a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ee4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ee52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ee54:	4611      	mov	r1, r2
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	430a      	orrs	r2, r1
 800ee5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ee5c:	e00e      	b.n	800ee7c <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800ee5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ee62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ee66:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ee6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ee6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ee70:	4611      	mov	r1, r2
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	ea6f 0202 	mvn.w	r2, r2
 800ee78:	400a      	ands	r2, r1
 800ee7a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800ee7c:	f107 070c 	add.w	r7, r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bc80      	pop	{r7}
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop

0800ee88 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	460b      	mov	r3, r1
 800ee92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ee94:	78fb      	ldrb	r3, [r7, #3]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00d      	beq.n	800eeb6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800ee9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ee9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800eea2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800eea6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800eeaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800eeac:	4611      	mov	r1, r2
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	430a      	orrs	r2, r1
 800eeb2:	641a      	str	r2, [r3, #64]	; 0x40
 800eeb4:	e00e      	b.n	800eed4 <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800eeb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800eeba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800eebe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800eec2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800eec6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800eec8:	4611      	mov	r1, r2
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	ea6f 0202 	mvn.w	r2, r2
 800eed0:	400a      	ands	r2, r1
 800eed2:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800eed4:	f107 070c 	add.w	r7, r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bc80      	pop	{r7}
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop

0800eee0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00d      	beq.n	800ef0e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800eef2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800eef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800eefa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800eefe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ef02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ef04:	4611      	mov	r1, r2
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	645a      	str	r2, [r3, #68]	; 0x44
 800ef0c:	e00e      	b.n	800ef2c <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800ef0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ef12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ef16:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ef1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ef1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ef20:	4611      	mov	r1, r2
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	ea6f 0202 	mvn.w	r2, r2
 800ef28:	400a      	ands	r2, r1
 800ef2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800ef2c:	f107 070c 	add.w	r7, r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bc80      	pop	{r7}
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop

0800ef38 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	460b      	mov	r3, r1
 800ef42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00d      	beq.n	800ef66 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800ef4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ef4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ef52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ef56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ef5a:	6a12      	ldr	r2, [r2, #32]
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	430a      	orrs	r2, r1
 800ef62:	621a      	str	r2, [r3, #32]
 800ef64:	e00e      	b.n	800ef84 <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800ef66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ef6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ef6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ef72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ef76:	6a12      	ldr	r2, [r2, #32]
 800ef78:	4611      	mov	r1, r2
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	ea6f 0202 	mvn.w	r2, r2
 800ef80:	400a      	ands	r2, r1
 800ef82:	621a      	str	r2, [r3, #32]
  }
}
 800ef84:	f107 070c 	add.w	r7, r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bc80      	pop	{r7}
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop

0800ef90 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ef9c:	78fb      	ldrb	r3, [r7, #3]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00d      	beq.n	800efbe <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800efa2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800efa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800efaa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800efae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800efb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800efb4:	4611      	mov	r1, r2
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	430a      	orrs	r2, r1
 800efba:	625a      	str	r2, [r3, #36]	; 0x24
 800efbc:	e00e      	b.n	800efdc <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800efbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800efc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800efc6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800efca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800efce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800efd0:	4611      	mov	r1, r2
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	ea6f 0202 	mvn.w	r2, r2
 800efd8:	400a      	ands	r2, r1
 800efda:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800efdc:	f107 070c 	add.w	r7, r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bc80      	pop	{r7}
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop

0800efe8 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800efec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eff0:	f04f 0101 	mov.w	r1, #1
 800eff4:	f7ff ffcc 	bl	800ef90 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800eff8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800effc:	f04f 0100 	mov.w	r1, #0
 800f000:	f7ff ffc6 	bl	800ef90 <RCC_APB2PeriphResetCmd>
}
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop

0800f008 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f010:	f04f 0300 	mov.w	r3, #0
 800f014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800f016:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f01a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800f028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f02c:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	7d1b      	ldrb	r3, [r3, #20]
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800f03e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800f04a:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	691b      	ldr	r3, [r3, #16]
 800f050:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	4313      	orrs	r3, r2
 800f056:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800f058:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f05c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	605a      	str	r2, [r3, #4]
}
 800f064:	f107 0714 	add.w	r7, r7, #20
 800f068:	46bd      	mov	sp, r7
 800f06a:	bc80      	pop	{r7}
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop

0800f070 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800f07a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800f07e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f082:	79fa      	ldrb	r2, [r7, #7]
 800f084:	601a      	str	r2, [r3, #0]
}
 800f086:	f107 070c 	add.w	r7, r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bc80      	pop	{r7}
 800f08e:	4770      	bx	lr

0800f090 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800f098:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f09c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	601a      	str	r2, [r3, #0]
}
 800f0a4:	f107 070c 	add.w	r7, r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bc80      	pop	{r7}
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop

0800f0b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800f0b4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f0b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f003 0303 	and.w	r3, r3, #3
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bc80      	pop	{r7}
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop

0800f0cc <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f0d4:	f04f 0300 	mov.w	r3, #0
 800f0d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800f0da:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f0de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	6812      	ldr	r2, [r2, #0]
 800f0e6:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800f0e8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f0ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f0fa:	f023 030f 	bic.w	r3, r3, #15
 800f0fe:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685a      	ldr	r2, [r3, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	431a      	orrs	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800f116:	68fa      	ldr	r2, [r7, #12]
 800f118:	4313      	orrs	r3, r2
 800f11a:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800f11c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f120:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	60da      	str	r2, [r3, #12]
}
 800f128:	f107 0714 	add.w	r7, r7, #20
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bc80      	pop	{r7}
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop

0800f134 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800f134:	b480      	push	{r7}
 800f136:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800f138:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f13c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	b2db      	uxtb	r3, r3
}
 800f144:	4618      	mov	r0, r3
 800f146:	46bd      	mov	sp, r7
 800f148:	bc80      	pop	{r7}
 800f14a:	4770      	bx	lr

0800f14c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800f154:	f04f 0300 	mov.w	r3, #0
 800f158:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	f642 4314 	movw	r3, #11284	; 0x2c14
 800f160:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f164:	18d3      	adds	r3, r2, r3
 800f166:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	f107 0714 	add.w	r7, r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	bc80      	pop	{r7}
 800f176:	4770      	bx	lr

0800f178 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f180:	f04f 0300 	mov.w	r3, #0
 800f184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800f186:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f18a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	6812      	ldr	r2, [r2, #0]
 800f192:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800f194:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f198:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	6852      	ldr	r2, [r2, #4]
 800f1a0:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800f1a2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f1a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ac:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800f1b4:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	689a      	ldr	r2, [r3, #8]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	431a      	orrs	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800f1d2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f1d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f1de:	f107 0714 	add.w	r7, r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bc80      	pop	{r7}
 800f1e6:	4770      	bx	lr

0800f1e8 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800f1e8:	b480      	push	{r7}
 800f1ea:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800f1ec:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f1f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bc80      	pop	{r7}
 800f1fe:	4770      	bx	lr

0800f200 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800f20a:	f248 538c 	movw	r3, #34188	; 0x858c
 800f20e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f212:	79fa      	ldrb	r2, [r7, #7]
 800f214:	601a      	str	r2, [r3, #0]
}
 800f216:	f107 070c 	add.w	r7, r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bc80      	pop	{r7}
 800f21e:	4770      	bx	lr

0800f220 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f22c:	78fb      	ldrb	r3, [r7, #3]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00d      	beq.n	800f24e <SDIO_ITConfig+0x2e>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800f232:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f236:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f23a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800f23e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f242:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f244:	4611      	mov	r1, r2
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	430a      	orrs	r2, r1
 800f24a:	63da      	str	r2, [r3, #60]	; 0x3c
 800f24c:	e00e      	b.n	800f26c <SDIO_ITConfig+0x4c>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800f24e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f252:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f256:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800f25a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f25e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f260:	4611      	mov	r1, r2
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	ea6f 0202 	mvn.w	r2, r2
 800f268:	400a      	ands	r2, r1
 800f26a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800f26c:	f107 070c 	add.w	r7, r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	bc80      	pop	{r7}
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop

0800f278 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f280:	f04f 0300 	mov.w	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800f286:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f28a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f290:	461a      	mov	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4013      	ands	r3, r2
 800f296:	2b00      	cmp	r3, #0
 800f298:	d003      	beq.n	800f2a2 <SDIO_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800f29a:	f04f 0301 	mov.w	r3, #1
 800f29e:	73fb      	strb	r3, [r7, #15]
 800f2a0:	e002      	b.n	800f2a8 <SDIO_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800f2a2:	f04f 0300 	mov.w	r3, #0
 800f2a6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f107 0714 	add.w	r7, r7, #20
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bc80      	pop	{r7}
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop

0800f2b8 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800f2c0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f2c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f2cc:	f107 070c 	add.w	r7, r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bc80      	pop	{r7}
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop

0800f2d8 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800f2e0:	f04f 0300 	mov.w	r3, #0
 800f2e4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800f2e6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f2ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4013      	ands	r3, r2
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d003      	beq.n	800f302 <SDIO_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800f2fa:	f04f 0301 	mov.w	r3, #1
 800f2fe:	73fb      	strb	r3, [r7, #15]
 800f300:	e002      	b.n	800f308 <SDIO_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800f302:	f04f 0300 	mov.w	r3, #0
 800f306:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f308:	7bfb      	ldrb	r3, [r7, #15]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	f107 0714 	add.w	r7, r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	bc80      	pop	{r7}
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop

0800f318 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800f320:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f324:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f32c:	f107 070c 	add.w	r7, r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	bc80      	pop	{r7}
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop

0800f338 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f346:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d10c      	bne.n	800f368 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800f34e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f352:	f04f 0101 	mov.w	r1, #1
 800f356:	f7ff fe1b 	bl	800ef90 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800f35a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f35e:	f04f 0100 	mov.w	r1, #0
 800f362:	f7ff fe15 	bl	800ef90 <RCC_APB2PeriphResetCmd>
 800f366:	e026      	b.n	800f3b6 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f36e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f372:	429a      	cmp	r2, r3
 800f374:	d10c      	bne.n	800f390 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800f376:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f37a:	f04f 0101 	mov.w	r1, #1
 800f37e:	f7ff fddb 	bl	800ef38 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800f382:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f386:	f04f 0100 	mov.w	r1, #0
 800f38a:	f7ff fdd5 	bl	800ef38 <RCC_APB1PeriphResetCmd>
 800f38e:	e012      	b.n	800f3b6 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f396:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d10b      	bne.n	800f3b6 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800f39e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f3a2:	f04f 0101 	mov.w	r1, #1
 800f3a6:	f7ff fdc7 	bl	800ef38 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800f3aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f3ae:	f04f 0100 	mov.w	r1, #0
 800f3b2:	f7ff fdc1 	bl	800ef38 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800f3b6:	f107 0708 	add.w	r7, r7, #8
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop

0800f3c0 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b08b      	sub	sp, #44	; 0x2c
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800f3ca:	f04f 0300 	mov.w	r3, #0
 800f3ce:	837b      	strh	r3, [r7, #26]
 800f3d0:	f04f 0302 	mov.w	r3, #2
 800f3d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f3d6:	f04f 0300 	mov.w	r3, #0
 800f3da:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f3dc:	f04f 0301 	mov.w	r3, #1
 800f3e0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800f3e2:	f04f 0300 	mov.w	r3, #0
 800f3e6:	61fb      	str	r3, [r7, #28]
 800f3e8:	f04f 0300 	mov.w	r3, #0
 800f3ec:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800f3ee:	f04f 0300 	mov.w	r3, #0
 800f3f2:	613b      	str	r3, [r7, #16]
 800f3f4:	f04f 0300 	mov.w	r3, #0
 800f3f8:	60fb      	str	r3, [r7, #12]
 800f3fa:	f04f 0300 	mov.w	r3, #0
 800f3fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	8b9b      	ldrh	r3, [r3, #28]
 800f404:	b29b      	uxth	r3, r3
 800f406:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800f40a:	f023 031f 	bic.w	r3, r3, #31
 800f40e:	b29a      	uxth	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f04f 0202 	mov.w	r2, #2
 800f41a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	8b9b      	ldrh	r3, [r3, #28]
 800f420:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	2b02      	cmp	r3, #2
 800f428:	d106      	bne.n	800f438 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800f42a:	f04f 0300 	mov.w	r3, #0
 800f42e:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800f430:	f04f 0302 	mov.w	r3, #2
 800f434:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f436:	e09b      	b.n	800f570 <I2S_Init+0x1b0>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	889b      	ldrh	r3, [r3, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d103      	bne.n	800f448 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800f440:	f04f 0301 	mov.w	r3, #1
 800f444:	847b      	strh	r3, [r7, #34]	; 0x22
 800f446:	e002      	b.n	800f44e <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800f448:	f04f 0302 	mov.w	r3, #2
 800f44c:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800f44e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f452:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00b      	beq.n	800f478 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800f460:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f468:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800f46c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f470:	6892      	ldr	r2, [r2, #8]
 800f472:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f476:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800f478:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f47c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f484:	461a      	mov	r2, r3
 800f486:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f48a:	4013      	ands	r3, r2
 800f48c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800f490:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800f494:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800f498:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800f49a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f49e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f4aa:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800f4ae:	f003 0307 	and.w	r3, r3, #7
 800f4b2:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800f4b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f4b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4c2:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800f4c4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800f4c8:	f2c0 037a 	movt	r3, #122	; 0x7a
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	fb02 f203 	mul.w	r2, r2, r3
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4de:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	88db      	ldrh	r3, [r3, #6]
 800f4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4e8:	d113      	bne.n	800f512 <I2S_Init+0x152>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f4f6:	189b      	adds	r3, r3, r2
 800f4f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	fbb2 f3f3 	udiv	r3, r2, r3
 800f506:	b29b      	uxth	r3, r3
 800f508:	f103 0305 	add.w	r3, r3, #5
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	61fb      	str	r3, [r7, #28]
 800f510:	e015      	b.n	800f53e <I2S_Init+0x17e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800f512:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f514:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800f518:	697a      	ldr	r2, [r7, #20]
 800f51a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f51e:	4613      	mov	r3, r2
 800f520:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f524:	189b      	adds	r3, r3, r2
 800f526:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f52a:	461a      	mov	r2, r3
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	fbb2 f3f3 	udiv	r3, r2, r3
 800f534:	b29b      	uxth	r3, r3
 800f536:	f103 0305 	add.w	r3, r3, #5
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800f53e:	69fa      	ldr	r2, [r7, #28]
 800f540:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800f544:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800f548:	fba3 1302 	umull	r1, r3, r3, r2
 800f54c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f550:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	b29b      	uxth	r3, r3
 800f556:	f003 0301 	and.w	r3, r3, #1
 800f55a:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800f55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f55e:	69fa      	ldr	r2, [r7, #28]
 800f560:	1ad3      	subs	r3, r2, r3
 800f562:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800f566:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800f568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f56a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f56e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800f570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f572:	2b01      	cmp	r3, #1
 800f574:	d902      	bls.n	800f57c <I2S_Init+0x1bc>
 800f576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f578:	2bff      	cmp	r3, #255	; 0xff
 800f57a:	d905      	bls.n	800f588 <I2S_Init+0x1c8>
  {
    /* Set the default values */
    i2sdiv = 2;
 800f57c:	f04f 0302 	mov.w	r3, #2
 800f580:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800f582:	f04f 0300 	mov.w	r3, #0
 800f586:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	88da      	ldrh	r2, [r3, #6]
 800f58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f58e:	4313      	orrs	r3, r2
 800f590:	b29a      	uxth	r2, r3
 800f592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f594:	4313      	orrs	r3, r2
 800f596:	b29a      	uxth	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	8859      	ldrh	r1, [r3, #2]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f5ac:	4303      	orrs	r3, r0
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	430b      	orrs	r3, r1
 800f5b2:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	8b7b      	ldrh	r3, [r7, #26]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f5c2:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	8b7a      	ldrh	r2, [r7, #26]
 800f5c8:	839a      	strh	r2, [r3, #28]
}
 800f5ca:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bc80      	pop	{r7}
 800f5d2:	4770      	bx	lr

0800f5d4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	887a      	ldrh	r2, [r7, #2]
 800f5e4:	819a      	strh	r2, [r3, #12]
}
 800f5e6:	f107 070c 	add.w	r7, r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bc80      	pop	{r7}
 800f5ee:	4770      	bx	lr

0800f5f0 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	460a      	mov	r2, r1
 800f5fc:	807a      	strh	r2, [r7, #2]
 800f5fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800f600:	787b      	ldrb	r3, [r7, #1]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d008      	beq.n	800f618 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	889b      	ldrh	r3, [r3, #4]
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	887b      	ldrh	r3, [r7, #2]
 800f60e:	4313      	orrs	r3, r2
 800f610:	b29a      	uxth	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	809a      	strh	r2, [r3, #4]
 800f616:	e00a      	b.n	800f62e <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	889b      	ldrh	r3, [r3, #4]
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	887b      	ldrh	r3, [r7, #2]
 800f620:	ea6f 0303 	mvn.w	r3, r3
 800f624:	b29b      	uxth	r3, r3
 800f626:	4013      	ands	r3, r2
 800f628:	b29a      	uxth	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	809a      	strh	r2, [r3, #4]
  }
}
 800f62e:	f107 070c 	add.w	r7, r7, #12
 800f632:	46bd      	mov	sp, r7
 800f634:	bc80      	pop	{r7}
 800f636:	4770      	bx	lr

0800f638 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	4613      	mov	r3, r2
 800f642:	460a      	mov	r2, r1
 800f644:	70fa      	strb	r2, [r7, #3]
 800f646:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800f648:	f04f 0300 	mov.w	r3, #0
 800f64c:	81fb      	strh	r3, [r7, #14]
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800f654:	78fb      	ldrb	r3, [r7, #3]
 800f656:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800f65e:	89fb      	ldrh	r3, [r7, #14]
 800f660:	f04f 0201 	mov.w	r2, #1
 800f664:	fa02 f303 	lsl.w	r3, r2, r3
 800f668:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800f66a:	78bb      	ldrb	r3, [r7, #2]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d008      	beq.n	800f682 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	889b      	ldrh	r3, [r3, #4]
 800f674:	b29a      	uxth	r2, r3
 800f676:	89bb      	ldrh	r3, [r7, #12]
 800f678:	4313      	orrs	r3, r2
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	809a      	strh	r2, [r3, #4]
 800f680:	e00a      	b.n	800f698 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	889b      	ldrh	r3, [r3, #4]
 800f686:	b29a      	uxth	r2, r3
 800f688:	89bb      	ldrh	r3, [r7, #12]
 800f68a:	ea6f 0303 	mvn.w	r3, r3
 800f68e:	b29b      	uxth	r3, r3
 800f690:	4013      	ands	r3, r2
 800f692:	b29a      	uxth	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	809a      	strh	r2, [r3, #4]
  }
}
 800f698:	f107 0714 	add.w	r7, r7, #20
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bc80      	pop	{r7}
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop

0800f6a4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800f6b0:	f04f 0300 	mov.w	r3, #0
 800f6b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	891b      	ldrh	r3, [r3, #8]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	887b      	ldrh	r3, [r7, #2]
 800f6be:	4013      	ands	r3, r2
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800f6c6:	f04f 0301 	mov.w	r3, #1
 800f6ca:	73fb      	strb	r3, [r7, #15]
 800f6cc:	e002      	b.n	800f6d4 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800f6ce:	f04f 0300 	mov.w	r3, #0
 800f6d2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800f6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f107 0714 	add.w	r7, r7, #20
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bc80      	pop	{r7}
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop

0800f6e4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800f6ee:	79fa      	ldrb	r2, [r7, #7]
 800f6f0:	f64a 03f8 	movw	r3, #43256	; 0xa8f8
 800f6f4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f04f 0101 	mov.w	r1, #1
 800f702:	f7ff fb95 	bl	800ee30 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800f706:	79fa      	ldrb	r2, [r7, #7]
 800f708:	f64a 03f0 	movw	r3, #43248	; 0xa8f0
 800f70c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f710:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800f716:	f04f 0301 	mov.w	r3, #1
 800f71a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f71c:	f04f 0300 	mov.w	r3, #0
 800f720:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800f722:	f04f 0301 	mov.w	r3, #1
 800f726:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800f728:	f04f 0302 	mov.w	r3, #2
 800f72c:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800f72e:	79fa      	ldrb	r2, [r7, #7]
 800f730:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800f734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f738:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f73c:	f107 0308 	add.w	r3, r7, #8
 800f740:	4610      	mov	r0, r2
 800f742:	4619      	mov	r1, r3
 800f744:	f7fe feca 	bl	800e4dc <GPIO_Init>
}
 800f748:	f107 0710 	add.w	r7, r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	4603      	mov	r3, r0
 800f758:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800f75a:	79fa      	ldrb	r2, [r7, #7]
 800f75c:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800f760:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f768:	79f9      	ldrb	r1, [r7, #7]
 800f76a:	f64a 03f0 	movw	r3, #43248	; 0xa8f0
 800f76e:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f772:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800f776:	8313      	strh	r3, [r2, #24]
}
 800f778:	f107 070c 	add.w	r7, r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bc80      	pop	{r7}
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop

0800f784 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	4603      	mov	r3, r0
 800f78c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800f78e:	79fa      	ldrb	r2, [r7, #7]
 800f790:	f640 03d8 	movw	r3, #2264	; 0x8d8
 800f794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f79c:	79f9      	ldrb	r1, [r7, #7]
 800f79e:	f64a 03f0 	movw	r3, #43248	; 0xa8f0
 800f7a2:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f7a6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800f7aa:	8353      	strh	r3, [r2, #26]
}
 800f7ac:	f107 070c 	add.w	r7, r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bc80      	pop	{r7}
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop

0800f7b8 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	603a      	str	r2, [r7, #0]
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	80fa      	strh	r2, [r7, #6]
 800f7c6:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 800f7c8:	797b      	ldrb	r3, [r7, #5]
 800f7ca:	2b64      	cmp	r3, #100	; 0x64
 800f7cc:	d811      	bhi.n	800f7f2 <EVAL_AUDIO_Init+0x3a>
 800f7ce:	797a      	ldrb	r2, [r7, #5]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f7d6:	1a9a      	subs	r2, r3, r2
 800f7d8:	f248 531f 	movw	r3, #34079	; 0x851f
 800f7dc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800f7e0:	fb83 1302 	smull	r1, r3, r3, r2
 800f7e4:	ea4f 1163 	mov.w	r1, r3, asr #5
 800f7e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f7ec:	1acb      	subs	r3, r1, r3
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	e001      	b.n	800f7f6 <EVAL_AUDIO_Init+0x3e>
 800f7f2:	f04f 0364 	mov.w	r3, #100	; 0x64
 800f7f6:	88fa      	ldrh	r2, [r7, #6]
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	683a      	ldr	r2, [r7, #0]
 800f7fe:	f000 f903 	bl	800fa08 <Codec_Init>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d002      	beq.n	800f80e <EVAL_AUDIO_Init+0x56>
  {
    return 1;                
 800f808:	f04f 0301 	mov.w	r3, #1
 800f80c:	e003      	b.n	800f816 <EVAL_AUDIO_Init+0x5e>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 800f80e:	f000 fe85 	bl	801051c <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 800f812:	f04f 0300 	mov.w	r3, #0
  }
}
 800f816:	4618      	mov	r0, r3
 800f818:	f107 0708 	add.w	r7, r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800f820:	b580      	push	{r7, lr}
 800f822:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800f824:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f828:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	f640 1304 	movw	r3, #2308	; 0x904
 800f832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4610      	mov	r0, r2
 800f83a:	4619      	mov	r1, r3
 800f83c:	f7fe fd9c 	bl	800e378 <DMA_GetFlagStatus>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 80ab 	beq.w	800f99e <Audio_MAL_IRQHandler+0x17e>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800f848:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800f84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 8081 	beq.w	800f95a <Audio_MAL_IRQHandler+0x13a>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800f858:	bf00      	nop
 800f85a:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	f7fe fd6b 	bl	800e340 <DMA_GetCmdStatus>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1f4      	bne.n	800f85a <Audio_MAL_IRQHandler+0x3a>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800f870:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	f640 1304 	movw	r3, #2308	; 0x904
 800f87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4610      	mov	r0, r2
 800f886:	4619      	mov	r1, r3
 800f888:	f7fe fdba 	bl	800e400 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800f88c:	f241 73d0 	movw	r3, #6096	; 0x17d0
 800f890:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	461a      	mov	r2, r3
 800f898:	f641 0310 	movw	r3, #6160	; 0x1810
 800f89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8a0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800f8a2:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800f8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	bf28      	it	cs
 800f8b4:	461a      	movcs	r2, r3
 800f8b6:	f641 0310 	movw	r3, #6160	; 0x1810
 800f8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8be:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800f8c0:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f641 0110 	movw	r1, #6160	; 0x1810
 800f8d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800f8d4:	f7fe fca6 	bl	800e224 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800f8d8:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f04f 0101 	mov.w	r1, #1
 800f8e8:	f7fe fcf4 	bl	800e2d4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800f8ec:	f241 73d0 	movw	r3, #6096	; 0x17d0
 800f8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800f8fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8fe:	6819      	ldr	r1, [r3, #0]
 800f900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f904:	4299      	cmp	r1, r3
 800f906:	bf38      	it	cc
 800f908:	460b      	movcc	r3, r1
 800f90a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f90e:	18d2      	adds	r2, r2, r3
 800f910:	f241 73d0 	movw	r3, #6096	; 0x17d0
 800f914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f918:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800f91a:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800f91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800f928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f92c:	6819      	ldr	r1, [r3, #0]
 800f92e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f932:	4299      	cmp	r1, r3
 800f934:	bf38      	it	cc
 800f936:	460b      	movcc	r3, r1
 800f938:	1ad2      	subs	r2, r2, r3
 800f93a:	f640 03e8 	movw	r3, #2280	; 0x8e8
 800f93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f942:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800f944:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4618      	mov	r0, r3
 800f950:	f04f 0101 	mov.w	r1, #1
 800f954:	f7fe fcbe 	bl	800e2d4 <DMA_Cmd>
 800f958:	e021      	b.n	800f99e <Audio_MAL_IRQHandler+0x17e>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800f95a:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4618      	mov	r0, r3
 800f966:	f04f 0100 	mov.w	r1, #0
 800f96a:	f7fe fcb3 	bl	800e2d4 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800f96e:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800f972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	f640 1304 	movw	r3, #2308	; 0x904
 800f97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4610      	mov	r0, r2
 800f984:	4619      	mov	r1, r3
 800f986:	f7fe fd3b 	bl	800e400 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800f98a:	f241 73d0 	movw	r3, #6096	; 0x17d0
 800f98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4618      	mov	r0, r3
 800f996:	f04f 0100 	mov.w	r1, #0
 800f99a:	f008 fa97 	bl	8017ecc <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800f9a4:	f7ff ff3c 	bl	800f820 <Audio_MAL_IRQHandler>
}
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop

0800f9ac <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800f9b0:	f7ff ff36 	bl	800f820 <Audio_MAL_IRQHandler>
}
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop

0800f9b8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800f9bc:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800f9c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800f9c4:	f04f 0102 	mov.w	r1, #2
 800f9c8:	f7ff fe6c 	bl	800f6a4 <SPI_I2S_GetFlagStatus>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d018      	beq.n	800fa04 <SPI3_IRQHandler+0x4c>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800f9d2:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800f9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d107      	bne.n	800f9f0 <SPI3_IRQHandler+0x38>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800f9e0:	f008 fa6c 	bl	8017ebc <EVAL_AUDIO_GetSampleCallBack>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f04f 0004 	mov.w	r0, #4
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	f7fe fadc 	bl	800dfa8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800f9f0:	f008 fa64 	bl	8017ebc <EVAL_AUDIO_GetSampleCallBack>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800f9fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800f9fe:	4619      	mov	r1, r3
 800fa00:	f7ff fde8 	bl	800f5d4 <SPI_I2S_SendData>
  }
}
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop

0800fa08 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	603a      	str	r2, [r7, #0]
 800fa12:	4602      	mov	r2, r0
 800fa14:	80fa      	strh	r2, [r7, #6]
 800fa16:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800fa18:	f04f 0300 	mov.w	r3, #0
 800fa1c:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 800fa1e:	f000 fc95 	bl	801034c <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 800fa22:	f000 f90b 	bl	800fc3c <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 800fa26:	f000 fc07 	bl	8010238 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 800fa2a:	f04f 0002 	mov.w	r0, #2
 800fa2e:	f04f 0101 	mov.w	r1, #1
 800fa32:	f000 f91f 	bl	800fc74 <Codec_WriteRegister>
 800fa36:	4603      	mov	r3, r0
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	18d3      	adds	r3, r2, r3
 800fa3c:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 800fa3e:	f04f 0004 	mov.w	r0, #4
 800fa42:	f04f 01af 	mov.w	r1, #175	; 0xaf
 800fa46:	f000 f915 	bl	800fc74 <Codec_WriteRegister>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	18d3      	adds	r3, r2, r3
 800fa50:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 800fa52:	f640 1370 	movw	r3, #2416	; 0x970
 800fa56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa5a:	f04f 02af 	mov.w	r2, #175	; 0xaf
 800fa5e:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 800fa60:	f04f 0005 	mov.w	r0, #5
 800fa64:	f04f 0181 	mov.w	r1, #129	; 0x81
 800fa68:	f000 f904 	bl	800fc74 <Codec_WriteRegister>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	18d3      	adds	r3, r2, r3
 800fa72:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 800fa74:	f04f 0006 	mov.w	r0, #6
 800fa78:	f04f 0104 	mov.w	r1, #4
 800fa7c:	f000 f8fa 	bl	800fc74 <Codec_WriteRegister>
 800fa80:	4603      	mov	r3, r0
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	18d3      	adds	r3, r2, r3
 800fa86:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 800fa88:	797b      	ldrb	r3, [r7, #5]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f000 f890 	bl	800fbb0 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800fa90:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800fa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	d131      	bne.n	800fb02 <Codec_Init+0xfa>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 800fa9e:	f04f 0008 	mov.w	r0, #8
 800faa2:	f04f 0101 	mov.w	r1, #1
 800faa6:	f000 f8e5 	bl	800fc74 <Codec_WriteRegister>
 800faaa:	4603      	mov	r3, r0
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	18d3      	adds	r3, r2, r3
 800fab0:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 800fab2:	f04f 0009 	mov.w	r0, #9
 800fab6:	f04f 0101 	mov.w	r1, #1
 800faba:	f000 f8db 	bl	800fc74 <Codec_WriteRegister>
 800fabe:	4603      	mov	r3, r0
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	18d3      	adds	r3, r2, r3
 800fac4:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 800fac6:	f04f 000e 	mov.w	r0, #14
 800faca:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800face:	f000 f8d1 	bl	800fc74 <Codec_WriteRegister>
 800fad2:	4603      	mov	r3, r0
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	18d3      	adds	r3, r2, r3
 800fad8:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 800fada:	f04f 0014 	mov.w	r0, #20
 800fade:	f04f 0100 	mov.w	r1, #0
 800fae2:	f000 f8c7 	bl	800fc74 <Codec_WriteRegister>
 800fae6:	4603      	mov	r3, r0
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	18d3      	adds	r3, r2, r3
 800faec:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 800faee:	f04f 0015 	mov.w	r0, #21
 800faf2:	f04f 0100 	mov.w	r1, #0
 800faf6:	f000 f8bd 	bl	800fc74 <Codec_WriteRegister>
 800fafa:	4603      	mov	r3, r0
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	18d3      	adds	r3, r2, r3
 800fb00:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 800fb02:	f04f 0002 	mov.w	r0, #2
 800fb06:	f04f 019e 	mov.w	r1, #158	; 0x9e
 800fb0a:	f000 f8b3 	bl	800fc74 <Codec_WriteRegister>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	68fa      	ldr	r2, [r7, #12]
 800fb12:	18d3      	adds	r3, r2, r3
 800fb14:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 800fb16:	f04f 000a 	mov.w	r0, #10
 800fb1a:	f04f 0100 	mov.w	r1, #0
 800fb1e:	f000 f8a9 	bl	800fc74 <Codec_WriteRegister>
 800fb22:	4603      	mov	r3, r0
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	18d3      	adds	r3, r2, r3
 800fb28:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 800fb2a:	f640 03f0 	movw	r3, #2288	; 0x8f0
 800fb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d009      	beq.n	800fb4c <Codec_Init+0x144>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 800fb38:	f04f 000e 	mov.w	r0, #14
 800fb3c:	f04f 0104 	mov.w	r1, #4
 800fb40:	f000 f898 	bl	800fc74 <Codec_WriteRegister>
 800fb44:	4603      	mov	r3, r0
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	18d3      	adds	r3, r2, r3
 800fb4a:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 800fb4c:	f04f 0027 	mov.w	r0, #39	; 0x27
 800fb50:	f04f 0100 	mov.w	r1, #0
 800fb54:	f000 f88e 	bl	800fc74 <Codec_WriteRegister>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	18d3      	adds	r3, r2, r3
 800fb5e:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 800fb60:	f04f 001f 	mov.w	r0, #31
 800fb64:	f04f 010f 	mov.w	r1, #15
 800fb68:	f000 f884 	bl	800fc74 <Codec_WriteRegister>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	18d3      	adds	r3, r2, r3
 800fb72:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 800fb74:	f04f 001a 	mov.w	r0, #26
 800fb78:	f04f 010a 	mov.w	r1, #10
 800fb7c:	f000 f87a 	bl	800fc74 <Codec_WriteRegister>
 800fb80:	4603      	mov	r3, r0
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	18d3      	adds	r3, r2, r3
 800fb86:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 800fb88:	f04f 001b 	mov.w	r0, #27
 800fb8c:	f04f 010a 	mov.w	r1, #10
 800fb90:	f000 f870 	bl	800fc74 <Codec_WriteRegister>
 800fb94:	4603      	mov	r3, r0
 800fb96:	68fa      	ldr	r2, [r7, #12]
 800fb98:	18d3      	adds	r3, r2, r3
 800fb9a:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 800fb9c:	6838      	ldr	r0, [r7, #0]
 800fb9e:	f000 fb83 	bl	80102a8 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 800fba2:	68fb      	ldr	r3, [r7, #12]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	f107 0710 	add.w	r7, r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop

0800fbb0 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800fbba:	f04f 0300 	mov.w	r3, #0
 800fbbe:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 800fbc0:	79fb      	ldrb	r3, [r7, #7]
 800fbc2:	2be6      	cmp	r3, #230	; 0xe6
 800fbc4:	d91a      	bls.n	800fbfc <Codec_VolumeCtrl+0x4c>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 800fbc6:	79fb      	ldrb	r3, [r7, #7]
 800fbc8:	f103 0319 	add.w	r3, r3, #25
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	f04f 0020 	mov.w	r0, #32
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	f000 f84e 	bl	800fc74 <Codec_WriteRegister>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	18d3      	adds	r3, r2, r3
 800fbde:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 800fbe0:	79fb      	ldrb	r3, [r7, #7]
 800fbe2:	f103 0319 	add.w	r3, r3, #25
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	f04f 0021 	mov.w	r0, #33	; 0x21
 800fbec:	4619      	mov	r1, r3
 800fbee:	f000 f841 	bl	800fc74 <Codec_WriteRegister>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	18d3      	adds	r3, r2, r3
 800fbf8:	60fb      	str	r3, [r7, #12]
 800fbfa:	e019      	b.n	800fc30 <Codec_VolumeCtrl+0x80>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 800fbfc:	79fb      	ldrb	r3, [r7, #7]
 800fbfe:	f103 0319 	add.w	r3, r3, #25
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	f04f 0020 	mov.w	r0, #32
 800fc08:	4619      	mov	r1, r3
 800fc0a:	f000 f833 	bl	800fc74 <Codec_WriteRegister>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	18d3      	adds	r3, r2, r3
 800fc14:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 800fc16:	79fb      	ldrb	r3, [r7, #7]
 800fc18:	f103 0319 	add.w	r3, r3, #25
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	f04f 0021 	mov.w	r0, #33	; 0x21
 800fc22:	4619      	mov	r1, r3
 800fc24:	f000 f826 	bl	800fc74 <Codec_WriteRegister>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	18d3      	adds	r3, r2, r3
 800fc2e:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 800fc30:	68fb      	ldr	r3, [r7, #12]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	f107 0710 	add.w	r7, r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 800fc40:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800fc44:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fc48:	f04f 0110 	mov.w	r1, #16
 800fc4c:	f04f 0200 	mov.w	r2, #0
 800fc50:	f7fe fd36 	bl	800e6c0 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 800fc54:	f644 70ff 	movw	r0, #20479	; 0x4fff
 800fc58:	f000 fc4e 	bl	80104f8 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 800fc5c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800fc60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fc64:	f04f 0110 	mov.w	r1, #16
 800fc68:	f04f 0201 	mov.w	r2, #1
 800fc6c:	f7fe fd28 	bl	800e6c0 <GPIO_WriteBit>
}
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop

0800fc74 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	71fa      	strb	r2, [r7, #7]
 800fc80:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 800fc82:	f04f 0300 	mov.w	r3, #0
 800fc86:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800fc88:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc90:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800fc94:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800fc96:	e016      	b.n	800fcc6 <Codec_WriteRegister+0x52>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800fc98:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fc9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	bf14      	ite	ne
 800fca6:	2200      	movne	r2, #0
 800fca8:	2201      	moveq	r2, #1
 800fcaa:	b2d2      	uxtb	r2, r2
 800fcac:	f103 31ff 	add.w	r1, r3, #4294967295
 800fcb0:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcb8:	6019      	str	r1, [r3, #0]
 800fcba:	2a00      	cmp	r2, #0
 800fcbc:	d003      	beq.n	800fcc6 <Codec_WriteRegister+0x52>
 800fcbe:	f008 f90f 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	e0ee      	b.n	800fea4 <Codec_WriteRegister+0x230>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800fcc6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fcca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fcce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fcd2:	f7fe ff71 	bl	800ebb8 <I2C_GetFlagStatus>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1dd      	bne.n	800fc98 <Codec_WriteRegister+0x24>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800fcdc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fce0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fce4:	f04f 0101 	mov.w	r1, #1
 800fce8:	f7fe fe92 	bl	800ea10 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800fcec:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fcf8:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800fcfa:	e016      	b.n	800fd2a <Codec_WriteRegister+0xb6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800fcfc:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fd00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	bf14      	ite	ne
 800fd0a:	2200      	movne	r2, #0
 800fd0c:	2201      	moveq	r2, #1
 800fd0e:	b2d2      	uxtb	r2, r2
 800fd10:	f103 31ff 	add.w	r1, r3, #4294967295
 800fd14:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fd18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd1c:	6019      	str	r1, [r3, #0]
 800fd1e:	2a00      	cmp	r2, #0
 800fd20:	d003      	beq.n	800fd2a <Codec_WriteRegister+0xb6>
 800fd22:	f008 f8dd 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800fd26:	4603      	mov	r3, r0
 800fd28:	e0bc      	b.n	800fea4 <Codec_WriteRegister+0x230>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800fd2a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fd2e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fd32:	f04f 0101 	mov.w	r1, #1
 800fd36:	f2c0 0103 	movt	r1, #3
 800fd3a:	f7fe ff05 	bl	800eb48 <I2C_CheckEvent>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d0db      	beq.n	800fcfc <Codec_WriteRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 800fd44:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fd48:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fd4c:	f04f 0194 	mov.w	r1, #148	; 0x94
 800fd50:	f04f 0200 	mov.w	r2, #0
 800fd54:	f7fe fe9c 	bl	800ea90 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800fd58:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd64:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800fd66:	e016      	b.n	800fd96 <Codec_WriteRegister+0x122>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800fd68:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	bf14      	ite	ne
 800fd76:	2200      	movne	r2, #0
 800fd78:	2201      	moveq	r2, #1
 800fd7a:	b2d2      	uxtb	r2, r2
 800fd7c:	f103 31ff 	add.w	r1, r3, #4294967295
 800fd80:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd88:	6019      	str	r1, [r3, #0]
 800fd8a:	2a00      	cmp	r2, #0
 800fd8c:	d003      	beq.n	800fd96 <Codec_WriteRegister+0x122>
 800fd8e:	f008 f8a7 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800fd92:	4603      	mov	r3, r0
 800fd94:	e086      	b.n	800fea4 <Codec_WriteRegister+0x230>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800fd96:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fd9a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fd9e:	f04f 0182 	mov.w	r1, #130	; 0x82
 800fda2:	f2c0 0107 	movt	r1, #7
 800fda6:	f7fe fecf 	bl	800eb48 <I2C_CheckEvent>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d0db      	beq.n	800fd68 <Codec_WriteRegister+0xf4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 800fdb0:	79fb      	ldrb	r3, [r7, #7]
 800fdb2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fdb6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fdba:	4619      	mov	r1, r3
 800fdbc:	f7fe fea6 	bl	800eb0c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800fdc0:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fdcc:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800fdce:	e016      	b.n	800fdfe <Codec_WriteRegister+0x18a>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800fdd0:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fdd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	bf14      	ite	ne
 800fdde:	2200      	movne	r2, #0
 800fde0:	2201      	moveq	r2, #1
 800fde2:	b2d2      	uxtb	r2, r2
 800fde4:	f103 31ff 	add.w	r1, r3, #4294967295
 800fde8:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fdec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdf0:	6019      	str	r1, [r3, #0]
 800fdf2:	2a00      	cmp	r2, #0
 800fdf4:	d003      	beq.n	800fdfe <Codec_WriteRegister+0x18a>
 800fdf6:	f008 f873 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	e052      	b.n	800fea4 <Codec_WriteRegister+0x230>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800fdfe:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fe02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fe06:	f04f 0180 	mov.w	r1, #128	; 0x80
 800fe0a:	f2c0 0107 	movt	r1, #7
 800fe0e:	f7fe fe9b 	bl	800eb48 <I2C_CheckEvent>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d0db      	beq.n	800fdd0 <Codec_WriteRegister+0x15c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 800fe18:	79bb      	ldrb	r3, [r7, #6]
 800fe1a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fe1e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fe22:	4619      	mov	r1, r3
 800fe24:	f7fe fe72 	bl	800eb0c <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800fe28:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fe2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe30:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800fe34:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 800fe36:	e014      	b.n	800fe62 <Codec_WriteRegister+0x1ee>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 800fe38:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fe3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	bf14      	ite	ne
 800fe46:	2200      	movne	r2, #0
 800fe48:	2201      	moveq	r2, #1
 800fe4a:	b2d2      	uxtb	r2, r2
 800fe4c:	f103 31ff 	add.w	r1, r3, #4294967295
 800fe50:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fe54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe58:	6019      	str	r1, [r3, #0]
 800fe5a:	2a00      	cmp	r2, #0
 800fe5c:	d001      	beq.n	800fe62 <Codec_WriteRegister+0x1ee>
 800fe5e:	f008 f83f 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 800fe62:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fe66:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fe6a:	f04f 0104 	mov.w	r1, #4
 800fe6e:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800fe72:	f7fe fea1 	bl	800ebb8 <I2C_GetFlagStatus>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d0dd      	beq.n	800fe38 <Codec_WriteRegister+0x1c4>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 800fe7c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800fe80:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fe84:	f04f 0101 	mov.w	r1, #1
 800fe88:	f7fe fde2 	bl	800ea50 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 800fe8c:	79fb      	ldrb	r3, [r7, #7]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f000 f80e 	bl	800feb0 <Codec_ReadRegister>
 800fe94:	4602      	mov	r2, r0
 800fe96:	79bb      	ldrb	r3, [r7, #6]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2300      	moveq	r3, #0
 800fe9e:	2301      	movne	r3, #1
 800fea0:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 800fea2:	68fb      	ldr	r3, [r7, #12]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	f107 0710 	add.w	r7, r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop

0800feb0 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	4603      	mov	r3, r0
 800feb8:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 800feba:	f04f 0300 	mov.w	r3, #0
 800febe:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800fec0:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fec8:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800fecc:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800fece:	e016      	b.n	800fefe <Codec_ReadRegister+0x4e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800fed0:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	bf14      	ite	ne
 800fede:	2200      	movne	r2, #0
 800fee0:	2201      	moveq	r2, #1
 800fee2:	b2d2      	uxtb	r2, r2
 800fee4:	f103 31ff 	add.w	r1, r3, #4294967295
 800fee8:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800feec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fef0:	6019      	str	r1, [r3, #0]
 800fef2:	2a00      	cmp	r2, #0
 800fef4:	d003      	beq.n	800fefe <Codec_ReadRegister+0x4e>
 800fef6:	f007 fff3 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800fefa:	4603      	mov	r3, r0
 800fefc:	e197      	b.n	801022e <Codec_ReadRegister+0x37e>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800fefe:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ff02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ff06:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800ff0a:	f7fe fe55 	bl	800ebb8 <I2C_GetFlagStatus>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1dd      	bne.n	800fed0 <Codec_ReadRegister+0x20>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800ff14:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ff18:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ff1c:	f04f 0101 	mov.w	r1, #1
 800ff20:	f7fe fd76 	bl	800ea10 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800ff24:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ff28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff30:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800ff32:	e016      	b.n	800ff62 <Codec_ReadRegister+0xb2>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800ff34:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ff38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	bf14      	ite	ne
 800ff42:	2200      	movne	r2, #0
 800ff44:	2201      	moveq	r2, #1
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	f103 31ff 	add.w	r1, r3, #4294967295
 800ff4c:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ff50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff54:	6019      	str	r1, [r3, #0]
 800ff56:	2a00      	cmp	r2, #0
 800ff58:	d003      	beq.n	800ff62 <Codec_ReadRegister+0xb2>
 800ff5a:	f007 ffc1 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	e165      	b.n	801022e <Codec_ReadRegister+0x37e>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800ff62:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ff66:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ff6a:	f04f 0101 	mov.w	r1, #1
 800ff6e:	f2c0 0103 	movt	r1, #3
 800ff72:	f7fe fde9 	bl	800eb48 <I2C_CheckEvent>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d0db      	beq.n	800ff34 <Codec_ReadRegister+0x84>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 800ff7c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ff80:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ff84:	f04f 0194 	mov.w	r1, #148	; 0x94
 800ff88:	f04f 0200 	mov.w	r2, #0
 800ff8c:	f7fe fd80 	bl	800ea90 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800ff90:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ff94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff9c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800ff9e:	e016      	b.n	800ffce <Codec_ReadRegister+0x11e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800ffa0:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ffa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	bf14      	ite	ne
 800ffae:	2200      	movne	r2, #0
 800ffb0:	2201      	moveq	r2, #1
 800ffb2:	b2d2      	uxtb	r2, r2
 800ffb4:	f103 31ff 	add.w	r1, r3, #4294967295
 800ffb8:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800ffbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffc0:	6019      	str	r1, [r3, #0]
 800ffc2:	2a00      	cmp	r2, #0
 800ffc4:	d003      	beq.n	800ffce <Codec_ReadRegister+0x11e>
 800ffc6:	f007 ff8b 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	e12f      	b.n	801022e <Codec_ReadRegister+0x37e>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800ffce:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ffd2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ffd6:	f04f 0182 	mov.w	r1, #130	; 0x82
 800ffda:	f2c0 0107 	movt	r1, #7
 800ffde:	f7fe fdb3 	bl	800eb48 <I2C_CheckEvent>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d0db      	beq.n	800ffa0 <Codec_ReadRegister+0xf0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ffee:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800fff2:	4619      	mov	r1, r3
 800fff4:	f7fe fd8a 	bl	800eb0c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800fff8:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800fffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010000:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010004:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8010006:	e016      	b.n	8010036 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8010008:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801000c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	bf14      	ite	ne
 8010016:	2200      	movne	r2, #0
 8010018:	2201      	moveq	r2, #1
 801001a:	b2d2      	uxtb	r2, r2
 801001c:	f103 31ff 	add.w	r1, r3, #4294967295
 8010020:	f640 03ec 	movw	r3, #2284	; 0x8ec
 8010024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010028:	6019      	str	r1, [r3, #0]
 801002a:	2a00      	cmp	r2, #0
 801002c:	d003      	beq.n	8010036 <Codec_ReadRegister+0x186>
 801002e:	f007 ff57 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 8010032:	4603      	mov	r3, r0
 8010034:	e0fb      	b.n	801022e <Codec_ReadRegister+0x37e>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8010036:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801003a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801003e:	f04f 0104 	mov.w	r1, #4
 8010042:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010046:	f7fe fdb7 	bl	800ebb8 <I2C_GetFlagStatus>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d0db      	beq.n	8010008 <Codec_ReadRegister+0x158>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8010050:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010054:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010058:	f04f 0101 	mov.w	r1, #1
 801005c:	f7fe fcd8 	bl	800ea10 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8010060:	f640 03ec 	movw	r3, #2284	; 0x8ec
 8010064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801006c:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801006e:	e016      	b.n	801009e <Codec_ReadRegister+0x1ee>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8010070:	f640 03ec 	movw	r3, #2284	; 0x8ec
 8010074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	bf14      	ite	ne
 801007e:	2200      	movne	r2, #0
 8010080:	2201      	moveq	r2, #1
 8010082:	b2d2      	uxtb	r2, r2
 8010084:	f103 31ff 	add.w	r1, r3, #4294967295
 8010088:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801008c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010090:	6019      	str	r1, [r3, #0]
 8010092:	2a00      	cmp	r2, #0
 8010094:	d003      	beq.n	801009e <Codec_ReadRegister+0x1ee>
 8010096:	f007 ff23 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 801009a:	4603      	mov	r3, r0
 801009c:	e0c7      	b.n	801022e <Codec_ReadRegister+0x37e>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801009e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80100a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80100a6:	f04f 0101 	mov.w	r1, #1
 80100aa:	f2c0 0103 	movt	r1, #3
 80100ae:	f7fe fd4b 	bl	800eb48 <I2C_CheckEvent>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d0db      	beq.n	8010070 <Codec_ReadRegister+0x1c0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 80100b8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80100bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80100c0:	f04f 0194 	mov.w	r1, #148	; 0x94
 80100c4:	f04f 0201 	mov.w	r2, #1
 80100c8:	f7fe fce2 	bl	800ea90 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80100cc:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80100d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100d8:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 80100da:	e016      	b.n	801010a <Codec_ReadRegister+0x25a>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80100dc:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80100e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	bf14      	ite	ne
 80100ea:	2200      	movne	r2, #0
 80100ec:	2201      	moveq	r2, #1
 80100ee:	b2d2      	uxtb	r2, r2
 80100f0:	f103 31ff 	add.w	r1, r3, #4294967295
 80100f4:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80100f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100fc:	6019      	str	r1, [r3, #0]
 80100fe:	2a00      	cmp	r2, #0
 8010100:	d003      	beq.n	801010a <Codec_ReadRegister+0x25a>
 8010102:	f007 feed 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 8010106:	4603      	mov	r3, r0
 8010108:	e091      	b.n	801022e <Codec_ReadRegister+0x37e>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 801010a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801010e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010112:	f04f 0102 	mov.w	r1, #2
 8010116:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801011a:	f7fe fd4d 	bl	800ebb8 <I2C_GetFlagStatus>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d0db      	beq.n	80100dc <Codec_ReadRegister+0x22c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8010124:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010128:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801012c:	f04f 0100 	mov.w	r1, #0
 8010130:	f7fe fccc 	bl	800eacc <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8010134:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8010138:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801013c:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 801013e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010142:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010146:	f04f 0101 	mov.w	r1, #1
 801014a:	f7fe fc81 	bl	800ea50 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801014e:	f640 03ec 	movw	r3, #2284	; 0x8ec
 8010152:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801015a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 801015c:	e016      	b.n	801018c <Codec_ReadRegister+0x2dc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801015e:	f640 03ec 	movw	r3, #2284	; 0x8ec
 8010162:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	bf14      	ite	ne
 801016c:	2200      	movne	r2, #0
 801016e:	2201      	moveq	r2, #1
 8010170:	b2d2      	uxtb	r2, r2
 8010172:	f103 31ff 	add.w	r1, r3, #4294967295
 8010176:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801017a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801017e:	6019      	str	r1, [r3, #0]
 8010180:	2a00      	cmp	r2, #0
 8010182:	d003      	beq.n	801018c <Codec_ReadRegister+0x2dc>
 8010184:	f007 feac 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 8010188:	4603      	mov	r3, r0
 801018a:	e050      	b.n	801022e <Codec_ReadRegister+0x37e>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 801018c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010190:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010194:	f04f 0140 	mov.w	r1, #64	; 0x40
 8010198:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801019c:	f7fe fd0c 	bl	800ebb8 <I2C_GetFlagStatus>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d0db      	beq.n	801015e <Codec_ReadRegister+0x2ae>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 80101a6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80101aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80101ae:	f7fe fcbd 	bl	800eb2c <I2C_ReceiveData>
 80101b2:	4603      	mov	r3, r0
 80101b4:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80101b6:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80101ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80101be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101c2:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80101c4:	e016      	b.n	80101f4 <Codec_ReadRegister+0x344>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80101c6:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80101ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	bf14      	ite	ne
 80101d4:	2200      	movne	r2, #0
 80101d6:	2201      	moveq	r2, #1
 80101d8:	b2d2      	uxtb	r2, r2
 80101da:	f103 31ff 	add.w	r1, r3, #4294967295
 80101de:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80101e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80101e6:	6019      	str	r1, [r3, #0]
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d003      	beq.n	80101f4 <Codec_ReadRegister+0x344>
 80101ec:	f007 fe78 	bl	8017ee0 <Codec_TIMEOUT_UserCallback>
 80101f0:	4603      	mov	r3, r0
 80101f2:	e01c      	b.n	801022e <Codec_ReadRegister+0x37e>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80101f4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80101f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1de      	bne.n	80101c6 <Codec_ReadRegister+0x316>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8010208:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801020c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010210:	f04f 0101 	mov.w	r1, #1
 8010214:	f7fe fc5a 	bl	800eacc <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8010218:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801021c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010224:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010228:	f7fe fd02 	bl	800ec30 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 801022c:	68fb      	ldr	r3, [r7, #12]
}
 801022e:	4618      	mov	r0, r3
 8010230:	f107 0710 	add.w	r7, r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 801023e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010242:	f04f 0101 	mov.w	r1, #1
 8010246:	f7fe fe1f 	bl	800ee88 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 801024a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801024e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010252:	f7fe faa3 	bl	800e79c <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8010256:	f04f 0300 	mov.w	r3, #0
 801025a:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 801025c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8010260:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8010262:	f04f 0333 	mov.w	r3, #51	; 0x33
 8010266:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8010268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801026c:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 801026e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010272:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8010274:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8010278:	f2c0 0301 	movt	r3, #1
 801027c:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 801027e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010282:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010286:	f04f 0101 	mov.w	r1, #1
 801028a:	f7fe fba1 	bl	800e9d0 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 801028e:	463b      	mov	r3, r7
 8010290:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010294:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010298:	4619      	mov	r1, r3
 801029a:	f7fe fac3 	bl	800e824 <I2C_Init>
}
 801029e:	f107 0710 	add.w	r7, r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop

080102a8 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08a      	sub	sp, #40	; 0x28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 80102b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80102b4:	f04f 0101 	mov.w	r1, #1
 80102b8:	f7fe fde6 	bl	800ee88 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 80102bc:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 80102c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80102c4:	f7ff f838 	bl	800f338 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 80102cc:	f04f 0300 	mov.w	r3, #0
 80102d0:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 80102d2:	f04f 0300 	mov.w	r3, #0
 80102d6:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 80102d8:	f04f 0300 	mov.w	r3, #0
 80102dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 80102de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102e2:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 80102e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102e8:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 80102ea:	f107 0318 	add.w	r3, r7, #24
 80102ee:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 80102f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80102f6:	4619      	mov	r1, r3
 80102f8:	f7ff f862 	bl	800f3c0 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80102fc:	f640 03f0 	movw	r3, #2288	; 0x8f0
 8010300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b02      	cmp	r3, #2
 8010308:	d11b      	bne.n	8010342 <Codec_AudioInterface_Init+0x9a>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 801030a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801030e:	f04f 0101 	mov.w	r1, #1
 8010312:	f7fe fdb9 	bl	800ee88 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8010316:	f04f 0300 	mov.w	r3, #0
 801031a:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 801031c:	f04f 0300 	mov.w	r3, #0
 8010320:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8010322:	f04f 0300 	mov.w	r3, #0
 8010326:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8010328:	f107 0308 	add.w	r3, r7, #8
 801032c:	f04f 0000 	mov.w	r0, #0
 8010330:	4619      	mov	r1, r3
 8010332:	f7fd fdcb 	bl	800decc <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8010336:	f04f 0000 	mov.w	r0, #0
 801033a:	f04f 0101 	mov.w	r1, #1
 801033e:	f7fd fdff 	bl	800df40 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8010342:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop

0801034c <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8010352:	f04f 0008 	mov.w	r0, #8
 8010356:	f04f 0101 	mov.w	r1, #1
 801035a:	f7fe fd69 	bl	800ee30 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 801035e:	f04f 0310 	mov.w	r3, #16
 8010362:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8010364:	f04f 0301 	mov.w	r3, #1
 8010368:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801036a:	f04f 0302 	mov.w	r3, #2
 801036e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010370:	f04f 0300 	mov.w	r3, #0
 8010374:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8010376:	f04f 0300 	mov.w	r3, #0
 801037a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 801037c:	463b      	mov	r3, r7
 801037e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8010382:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010386:	4619      	mov	r1, r3
 8010388:	f7fe f8a8 	bl	800e4dc <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 801038c:	f04f 0007 	mov.w	r0, #7
 8010390:	f04f 0101 	mov.w	r1, #1
 8010394:	f7fe fd4c 	bl	800ee30 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8010398:	f44f 7310 	mov.w	r3, #576	; 0x240
 801039c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801039e:	f04f 0302 	mov.w	r3, #2
 80103a2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80103a4:	f04f 0302 	mov.w	r3, #2
 80103a8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80103aa:	f04f 0301 	mov.w	r3, #1
 80103ae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80103b0:	f04f 0300 	mov.w	r3, #0
 80103b4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 80103b6:	463b      	mov	r3, r7
 80103b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80103bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80103c0:	4619      	mov	r1, r3
 80103c2:	f7fe f88b 	bl	800e4dc <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 80103c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80103ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80103ce:	f04f 0106 	mov.w	r1, #6
 80103d2:	f04f 0204 	mov.w	r2, #4
 80103d6:	f7fe f98b 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 80103da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80103de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80103e2:	f04f 0109 	mov.w	r1, #9
 80103e6:	f04f 0204 	mov.w	r2, #4
 80103ea:	f7fe f981 	bl	800e6f0 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 80103ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80103f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80103f4:	f04f 0302 	mov.w	r3, #2
 80103f8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80103fa:	f04f 0302 	mov.w	r3, #2
 80103fe:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010400:	f04f 0300 	mov.w	r3, #0
 8010404:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8010406:	f04f 0300 	mov.w	r3, #0
 801040a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 801040c:	463b      	mov	r3, r7
 801040e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010412:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010416:	4619      	mov	r1, r3
 8010418:	f7fe f860 	bl	800e4dc <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 801041c:	f04f 0000 	mov.w	r0, #0
 8010420:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010424:	f04f 0104 	mov.w	r1, #4
 8010428:	f04f 0206 	mov.w	r2, #6
 801042c:	f7fe f960 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8010430:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010434:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010438:	f04f 010a 	mov.w	r1, #10
 801043c:	f04f 0206 	mov.w	r2, #6
 8010440:	f7fe f956 	bl	800e6f0 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8010444:	f640 03f0 	movw	r3, #2288	; 0x8f0
 8010448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b02      	cmp	r3, #2
 8010450:	d015      	beq.n	801047e <Codec_GPIO_Init+0x132>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8010452:	f04f 0310 	mov.w	r3, #16
 8010456:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8010458:	463b      	mov	r3, r7
 801045a:	f04f 0000 	mov.w	r0, #0
 801045e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010462:	4619      	mov	r1, r3
 8010464:	f7fe f83a 	bl	800e4dc <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8010468:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801046c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010470:	f04f 010c 	mov.w	r1, #12
 8010474:	f04f 0206 	mov.w	r2, #6
 8010478:	f7fe f93a 	bl	800e6f0 <GPIO_PinAFConfig>
 801047c:	e016      	b.n	80104ac <Codec_GPIO_Init+0x160>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 801047e:	f04f 0001 	mov.w	r0, #1
 8010482:	f04f 0101 	mov.w	r1, #1
 8010486:	f7fe fcd3 	bl	800ee30 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 801048a:	f04f 0310 	mov.w	r3, #16
 801048e:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8010490:	f04f 0303 	mov.w	r3, #3
 8010494:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8010496:	f04f 0300 	mov.w	r3, #0
 801049a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 801049c:	463b      	mov	r3, r7
 801049e:	f04f 0000 	mov.w	r0, #0
 80104a2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104a6:	4619      	mov	r1, r3
 80104a8:	f7fe f818 	bl	800e4dc <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 80104ac:	f04f 0380 	mov.w	r3, #128	; 0x80
 80104b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80104b2:	f04f 0302 	mov.w	r3, #2
 80104b6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80104b8:	f04f 0302 	mov.w	r3, #2
 80104bc:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80104be:	f04f 0300 	mov.w	r3, #0
 80104c2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 80104ca:	463b      	mov	r3, r7
 80104cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80104d0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104d4:	4619      	mov	r1, r3
 80104d6:	f7fe f801 	bl	800e4dc <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 80104da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80104de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80104e2:	f04f 0107 	mov.w	r1, #7
 80104e6:	f04f 0206 	mov.w	r2, #6
 80104ea:	f7fe f901 	bl	800e6f0 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 80104ee:	f107 0708 	add.w	r7, r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop

080104f8 <Delay>:
  * @brief  Inserts a delay time (not accurate timing).
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void Delay( __IO uint32_t nCount)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8010500:	e003      	b.n	801050a <Delay+0x12>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f103 33ff 	add.w	r3, r3, #4294967295
 8010508:	607b      	str	r3, [r7, #4]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1f8      	bne.n	8010502 <Delay+0xa>
}
 8010510:	f107 070c 	add.w	r7, r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	bc80      	pop	{r7}
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop

0801051c <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8010522:	f640 03f0 	movw	r3, #2288	; 0x8f0
 8010526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b01      	cmp	r3, #1
 801052e:	f040 80b8 	bne.w	80106a2 <Audio_MAL_Init+0x186>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8010532:	f640 03f4 	movw	r3, #2292	; 0x8f4
 8010536:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4618      	mov	r0, r3
 801053e:	f04f 0101 	mov.w	r1, #1
 8010542:	f7fe fc75 	bl	800ee30 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8010546:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801054a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4618      	mov	r0, r3
 8010552:	f04f 0100 	mov.w	r1, #0
 8010556:	f7fd febd 	bl	800e2d4 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 801055a:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801055e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4618      	mov	r0, r3
 8010566:	f7fd fd3b 	bl	800dfe0 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 801056a:	f640 1374 	movw	r3, #2420	; 0x974
 801056e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	f641 0310 	movw	r3, #6160	; 0x1810
 8010578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801057c:	601a      	str	r2, [r3, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 801057e:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8010582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	f641 0310 	movw	r3, #6160	; 0x1810
 801058c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010590:	605a      	str	r2, [r3, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8010592:	f641 0310 	movw	r3, #6160	; 0x1810
 8010596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801059a:	f04f 0200 	mov.w	r2, #0
 801059e:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80105a0:	f641 0310 	movw	r3, #6160	; 0x1810
 80105a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105a8:	f04f 0240 	mov.w	r2, #64	; 0x40
 80105ac:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 80105ae:	f641 0310 	movw	r3, #6160	; 0x1810
 80105b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80105ba:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80105bc:	f641 0310 	movw	r3, #6160	; 0x1810
 80105c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105c4:	f04f 0200 	mov.w	r2, #0
 80105c8:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80105ca:	f641 0310 	movw	r3, #6160	; 0x1810
 80105ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80105d6:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 80105d8:	f641 0310 	movw	r3, #6160	; 0x1810
 80105dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105e4:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 80105e6:	f641 0310 	movw	r3, #6160	; 0x1810
 80105ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80105f2:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80105f4:	f641 0310 	movw	r3, #6160	; 0x1810
 80105f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105fc:	f04f 0200 	mov.w	r2, #0
 8010600:	625a      	str	r2, [r3, #36]	; 0x24
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8010602:	f641 0310 	movw	r3, #6160	; 0x1810
 8010606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801060a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801060e:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8010610:	f641 0310 	movw	r3, #6160	; 0x1810
 8010614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010618:	f04f 0200 	mov.w	r2, #0
 801061c:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 801061e:	f641 0310 	movw	r3, #6160	; 0x1810
 8010622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010626:	f04f 0200 	mov.w	r2, #0
 801062a:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 801062c:	f641 0310 	movw	r3, #6160	; 0x1810
 8010630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010634:	f04f 0200 	mov.w	r2, #0
 8010638:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 801063a:	f641 0310 	movw	r3, #6160	; 0x1810
 801063e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010642:	f04f 0200 	mov.w	r2, #0
 8010646:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8010648:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801064c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4618      	mov	r0, r3
 8010654:	f641 0110 	movw	r1, #6160	; 0x1810
 8010658:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801065c:	f7fd fde2 	bl	800e224 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8010660:	f640 03f8 	movw	r3, #2296	; 0x8f8
 8010664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4618      	mov	r0, r3
 801066c:	f04f 0110 	mov.w	r1, #16
 8010670:	f04f 0201 	mov.w	r2, #1
 8010674:	f7fd fef6 	bl	800e464 <DMA_ITConfig>
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8010678:	f640 1300 	movw	r3, #2304	; 0x900
 801067c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	b2db      	uxtb	r3, r3
 8010684:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8010686:	f04f 0300 	mov.w	r3, #0
 801068a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 801068c:	f04f 0300 	mov.w	r3, #0
 8010690:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8010692:	f04f 0301 	mov.w	r3, #1
 8010696:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8010698:	f107 0304 	add.w	r3, r7, #4
 801069c:	4618      	mov	r0, r3
 801069e:	f7fd fba3 	bl	800dde8 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 80106a2:	f640 03f0 	movw	r3, #2288	; 0x8f0
 80106a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b01      	cmp	r3, #1
 80106ae:	d10a      	bne.n	80106c6 <Audio_MAL_Init+0x1aa>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 80106b0:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 80106b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80106b8:	f04f 0102 	mov.w	r1, #2
 80106bc:	f04f 0201 	mov.w	r2, #1
 80106c0:	f7fe ff96 	bl	800f5f0 <SPI_I2S_DMACmd>
 80106c4:	e01c      	b.n	8010700 <Audio_MAL_Init+0x1e4>
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 80106c6:	f000 f81f 	bl	8010708 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 80106ca:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 80106ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80106d2:	f04f 0171 	mov.w	r1, #113	; 0x71
 80106d6:	f04f 0201 	mov.w	r2, #1
 80106da:	f7fe ffad 	bl	800f638 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 80106de:	f04f 0333 	mov.w	r3, #51	; 0x33
 80106e2:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 80106e4:	f04f 0300 	mov.w	r3, #0
 80106e8:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 80106ea:	f04f 0300 	mov.w	r3, #0
 80106ee:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80106f0:	f04f 0301 	mov.w	r3, #1
 80106f4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 80106f6:	f107 0304 	add.w	r3, r7, #4
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fd fb74 	bl	800dde8 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8010700:	f107 0708 	add.w	r7, r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 801070e:	f04f 0001 	mov.w	r0, #1
 8010712:	f2c0 0020 	movt	r0, #32
 8010716:	f04f 0101 	mov.w	r1, #1
 801071a:	f7fe fb89 	bl	800ee30 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 801071e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010722:	f04f 0101 	mov.w	r1, #1
 8010726:	f7fe fbaf 	bl	800ee88 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 801072a:	f04f 0310 	mov.w	r3, #16
 801072e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8010730:	f04f 0303 	mov.w	r3, #3
 8010734:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8010736:	f04f 0300 	mov.w	r3, #0
 801073a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 801073c:	463b      	mov	r3, r7
 801073e:	f04f 0000 	mov.w	r0, #0
 8010742:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010746:	4619      	mov	r1, r3
 8010748:	f7fd fec8 	bl	800e4dc <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 801074c:	f04f 0300 	mov.w	r3, #0
 8010750:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8010752:	f04f 0300 	mov.w	r3, #0
 8010756:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8010758:	f04f 0300 	mov.w	r3, #0
 801075c:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 801075e:	f107 0308 	add.w	r3, r7, #8
 8010762:	f04f 0000 	mov.w	r0, #0
 8010766:	4619      	mov	r1, r3
 8010768:	f7fd fbb0 	bl	800decc <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 801076c:	f04f 0000 	mov.w	r0, #0
 8010770:	f04f 0101 	mov.w	r1, #1
 8010774:	f7fd fbe4 	bl	800df40 <DAC_Cmd>
}
 8010778:	f107 0718 	add.w	r7, r7, #24
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <_ZNK5CTask7IsValidEv>:
	vTaskAllocateMPURegions(m_handleTask, xRegions);
#endif
}

inline
bool CTask::IsValid() const{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
	return m_handleTask != NULL;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	2b00      	cmp	r3, #0
 801078e:	bf0c      	ite	eq
 8010790:	2300      	moveq	r3, #0
 8010792:	2301      	movne	r3, #1
 8010794:	b2db      	uxtb	r3, r3
}
 8010796:	4618      	mov	r0, r3
 8010798:	f107 070c 	add.w	r7, r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	bc80      	pop	{r7}
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop

080107a4 <_ZN5CTask6DetachEv>:

inline
xGenericHandle CTask::Detach() {
 80107a4:	b480      	push	{r7}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
	xTaskHandle res = m_handleTask;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	60fb      	str	r3, [r7, #12]
	m_handleTask = NULL;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f04f 0200 	mov.w	r2, #0
 80107b8:	605a      	str	r2, [r3, #4]
	return res;
 80107ba:	68fb      	ldr	r3, [r7, #12]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	f107 0714 	add.w	r7, r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bc80      	pop	{r7}
 80107c6:	4770      	bx	lr

080107c8 <_ZN12AManagedTask8OnCreateEPKctm>:
	 * @param uxPriority specifies the task priority.
	 *
	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation process
	 * is stopped and no FreeRTOS resource are allocated.
	 */
	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) { return pdTRUE; }
 80107c8:	b480      	push	{r7}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	603b      	str	r3, [r7, #0]
 80107d4:	4613      	mov	r3, r2
 80107d6:	80fb      	strh	r3, [r7, #6]
 80107d8:	f04f 0301 	mov.w	r3, #1
 80107dc:	4618      	mov	r0, r3
 80107de:	f107 0714 	add.w	r7, r7, #20
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bc80      	pop	{r7}
 80107e6:	4770      	bx	lr

080107e8 <_ZN6CMenueC1EP11CGraphicLCD>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4618      	mov	r0, r3
 80107f6:	f001 fbf3 	bl	8011fe0 <_ZN12AManagedTaskC1Ev>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4a05      	ldr	r2, [pc, #20]	; (8010814 <_ZN6CMenueC1EP11CGraphicLCD+0x2c>)
 80107fe:	601a      	str	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	683a      	ldr	r2, [r7, #0]
 8010804:	60da      	str	r2, [r3, #12]
}
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	f107 0708 	add.w	r7, r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	0801a910 	.word	0x0801a910

08010818 <_ZN6CMenueD1Ev>:

CMenue::~CMenue() {
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4a0a      	ldr	r2, [pc, #40]	; (801084c <_ZN6CMenueD1Ev+0x34>)
 8010824:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f001 fbf6 	bl	8012018 <_ZN12AManagedTaskD1Ev>
 801082c:	f04f 0300 	mov.w	r3, #0
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	d002      	beq.n	8010840 <_ZN6CMenueD1Ev+0x28>
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f007 ff08 	bl	8018650 <_ZdlPv>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	4618      	mov	r0, r3
 8010844:	f107 0708 	add.w	r7, r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	0801a910 	.word	0x0801a910

08010850 <_ZN6CMenueD0Ev>:


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
}

CMenue::~CMenue() {
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ff ffdd 	bl	8010818 <_ZN6CMenueD1Ev>
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f007 fef6 	bl	8018650 <_ZdlPv>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f107 0708 	add.w	r7, r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <_ZN6CMenue12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on success
  */
bool CMenue::HardwareInit(void){
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]

	return true;
 8010878:	f04f 0301 	mov.w	r3, #1
}
 801087c:	4618      	mov	r0, r3
 801087e:	f107 070c 	add.w	r7, r7, #12
 8010882:	46bd      	mov	sp, r7
 8010884:	bc80      	pop	{r7}
 8010886:	4770      	bx	lr

08010888 <_ZN6CMenue3RunEv>:
/**
  * @brief  task function for Menu
  * @param  None
  * @retval None
  */
void CMenue::Run(void){
 8010888:	b590      	push	{r4, r7, lr}
 801088a:	b087      	sub	sp, #28
 801088c:	af02      	add	r7, sp, #8
 801088e:	6078      	str	r0, [r7, #4]
	char buffer[4];
	int x = 0;
 8010890:	f04f 0300 	mov.w	r3, #0
 8010894:	60fb      	str	r3, [r7, #12]

	glcd->Init();
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f103 0320 	add.w	r3, r3, #32
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	68d2      	ldr	r2, [r2, #12]
 80108a6:	4610      	mov	r0, r2
 80108a8:	4798      	blx	r3
	glcd->Inverse(true);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f04f 0101 	mov.w	r1, #1
 80108b4:	f000 f9ea 	bl	8010c8c <_ZN11CGraphicLCD7InverseEb>
	glcd->Clear();
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	68d2      	ldr	r2, [r2, #12]
 80108c4:	4610      	mov	r0, r2
 80108c6:	4798      	blx	r3


	vTaskDelay(500/portTICK_RATE_MS);
 80108c8:	f04f 0032 	mov.w	r0, #50	; 0x32
 80108cc:	f002 f892 	bl	80129f4 <vTaskDelay>
	glcd->WriteString("Introducing Project:",c_FontSansSerif12,5,5);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f103 0318 	add.w	r3, r3, #24
 80108da:	681c      	ldr	r4, [r3, #0]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	f04f 0205 	mov.w	r2, #5
 80108e4:	9200      	str	r2, [sp, #0]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f649 0128 	movw	r1, #38952	; 0x9828
 80108ec:	f6c0 0101 	movt	r1, #2049	; 0x801
 80108f0:	f64a 2210 	movw	r2, #43536	; 0xaa10
 80108f4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80108f8:	f04f 0305 	mov.w	r3, #5
 80108fc:	47a0      	blx	r4

	vTaskDelay(1000/portTICK_RATE_MS);
 80108fe:	f04f 0064 	mov.w	r0, #100	; 0x64
 8010902:	f002 f877 	bl	80129f4 <vTaskDelay>
	glcd->WriteString("ThunderCryer",c_FontSansSerif26,3,35);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f103 0318 	add.w	r3, r3, #24
 8010910:	681c      	ldr	r4, [r3, #0]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	f04f 0223 	mov.w	r2, #35	; 0x23
 801091a:	9200      	str	r2, [sp, #0]
 801091c:	4618      	mov	r0, r3
 801091e:	f649 0140 	movw	r1, #38976	; 0x9840
 8010922:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010926:	f64b 0234 	movw	r2, #47156	; 0xb834
 801092a:	f6c0 0201 	movt	r2, #2049	; 0x801
 801092e:	f04f 0303 	mov.w	r3, #3
 8010932:	47a0      	blx	r4

	vTaskDelay(10000/portTICK_RATE_MS);
 8010934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010938:	f002 f85c 	bl	80129f4 <vTaskDelay>
	glcd->Clear();
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	68d2      	ldr	r2, [r2, #12]
 8010948:	4610      	mov	r0, r2
 801094a:	4798      	blx	r3
	glcd->Window(2,2,100,60);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f103 0308 	add.w	r3, r3, #8
 8010956:	681c      	ldr	r4, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8010960:	9200      	str	r2, [sp, #0]
 8010962:	4618      	mov	r0, r3
 8010964:	f04f 0102 	mov.w	r1, #2
 8010968:	f04f 0202 	mov.w	r2, #2
 801096c:	f04f 0364 	mov.w	r3, #100	; 0x64
 8010970:	47a0      	blx	r4
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f103 0318 	add.w	r3, r3, #24
 801097c:	681c      	ldr	r4, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	f04f 0205 	mov.w	r2, #5
 8010986:	9200      	str	r2, [sp, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	f649 0150 	movw	r1, #38992	; 0x9850
 801098e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010992:	f64b 0234 	movw	r2, #47156	; 0xb834
 8010996:	f6c0 0201 	movt	r2, #2049	; 0x801
 801099a:	f04f 0305 	mov.w	r3, #5
 801099e:	47a0      	blx	r4
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f103 0318 	add.w	r3, r3, #24
 80109aa:	681c      	ldr	r4, [r3, #0]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	f04f 0228 	mov.w	r2, #40	; 0x28
 80109b4:	9200      	str	r2, [sp, #0]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f649 0158 	movw	r1, #39000	; 0x9858
 80109bc:	f6c0 0101 	movt	r1, #2049	; 0x801
 80109c0:	f64a 1230 	movw	r2, #43312	; 0xa930
 80109c4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80109c8:	f04f 0305 	mov.w	r3, #5
 80109cc:	47a0      	blx	r4

	glcd->WriteString("Development in progress",c_FontNative,1,120);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	f103 0318 	add.w	r3, r3, #24
 80109d8:	681c      	ldr	r4, [r3, #0]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	f04f 0278 	mov.w	r2, #120	; 0x78
 80109e2:	9200      	str	r2, [sp, #0]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f649 0168 	movw	r1, #39016	; 0x9868
 80109ea:	f6c0 0101 	movt	r1, #2049	; 0x801
 80109ee:	f64a 1230 	movw	r2, #43312	; 0xa930
 80109f2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80109f6:	f04f 0301 	mov.w	r3, #1
 80109fa:	47a0      	blx	r4

	while(1){
		if(x<60) {
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2b3b      	cmp	r3, #59	; 0x3b
 8010a00:	dc3b      	bgt.n	8010a7a <_ZN6CMenue3RunEv+0x1f2>
			sprintf(buffer,"%02u",x);
 8010a02:	f107 0308 	add.w	r3, r7, #8
 8010a06:	4618      	mov	r0, r3
 8010a08:	f649 0180 	movw	r1, #39040	; 0x9880
 8010a0c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010a10:	68fa      	ldr	r2, [r7, #12]
 8010a12:	f7f7 fa4b 	bl	8007eac <sprintf>
			glcd->SectorClear(75,7,20,20);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f103 0310 	add.w	r3, r3, #16
 8010a20:	681c      	ldr	r4, [r3, #0]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	f04f 0214 	mov.w	r2, #20
 8010a2a:	9200      	str	r2, [sp, #0]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f04f 014b 	mov.w	r1, #75	; 0x4b
 8010a32:	f04f 0207 	mov.w	r2, #7
 8010a36:	f04f 0314 	mov.w	r3, #20
 8010a3a:	47a0      	blx	r4
			glcd->WriteString(buffer,c_FontSansSerif12,75,7);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f103 0318 	add.w	r3, r3, #24
 8010a46:	681c      	ldr	r4, [r3, #0]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	68da      	ldr	r2, [r3, #12]
 8010a4c:	f107 0308 	add.w	r3, r7, #8
 8010a50:	f04f 0107 	mov.w	r1, #7
 8010a54:	9100      	str	r1, [sp, #0]
 8010a56:	4610      	mov	r0, r2
 8010a58:	4619      	mov	r1, r3
 8010a5a:	f64a 2210 	movw	r2, #43536	; 0xaa10
 8010a5e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8010a62:	f04f 034b 	mov.w	r3, #75	; 0x4b
 8010a66:	47a0      	blx	r4
			x++;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f103 0301 	add.w	r3, r3, #1
 8010a6e:	60fb      	str	r3, [r7, #12]
			vTaskDelay(1000/portTICK_RATE_MS);
 8010a70:	f04f 0064 	mov.w	r0, #100	; 0x64
 8010a74:	f001 ffbe 	bl	80129f4 <vTaskDelay>
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);

	glcd->WriteString("Development in progress",c_FontNative,1,120);

	while(1){
 8010a78:	e7c0      	b.n	80109fc <_ZN6CMenue3RunEv+0x174>
			glcd->SectorClear(75,7,20,20);
			glcd->WriteString(buffer,c_FontSansSerif12,75,7);
			x++;
			vTaskDelay(1000/portTICK_RATE_MS);
		} else
			x = 0;
 8010a7a:	f04f 0300 	mov.w	r3, #0
 8010a7e:	60fb      	str	r3, [r7, #12]
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);

	glcd->WriteString("Development in progress",c_FontNative,1,120);

	while(1){
 8010a80:	e7bc      	b.n	80109fc <_ZN6CMenue3RunEv+0x174>
 8010a82:	bf00      	nop

08010a84 <ClearBuffer>:
 * Return:      none
 *
 * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
 **************************************************************************************/
void ClearBuffer(void *buf, int nBytes)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
	int i;
	unsigned char *cbuf = (unsigned char *)buf;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < nBytes; i++)
 8010a92:	f04f 0300 	mov.w	r3, #0
 8010a96:	60fb      	str	r3, [r7, #12]
 8010a98:	e009      	b.n	8010aae <ClearBuffer+0x2a>
		cbuf[i] = 0;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	18d3      	adds	r3, r2, r3
 8010aa0:	f04f 0200 	mov.w	r2, #0
 8010aa4:	701a      	strb	r2, [r3, #0]
void ClearBuffer(void *buf, int nBytes)
{
	int i;
	unsigned char *cbuf = (unsigned char *)buf;

	for (i = 0; i < nBytes; i++)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f103 0301 	add.w	r3, r3, #1
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	dbf1      	blt.n	8010a9a <ClearBuffer+0x16>
		cbuf[i] = 0;

}
 8010ab6:	f107 0714 	add.w	r7, r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bc80      	pop	{r7}
 8010abe:	4770      	bx	lr

08010ac0 <xmp3_AllocateBuffers>:
 *
 *              Changed by Kasper Jepsen to support static buffers as well.
 *
 **************************************************************************************/
MP3DecInfo *AllocateBuffers(void)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
  MP3DecInfo *mp3DecInfo_pointer;
  #ifdef static_buffers
  mp3DecInfo_pointer = (MP3DecInfo*)&mp3DecInfo;
 8010ac6:	f641 0384 	movw	r3, #6276	; 0x1884
 8010aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ace:	607b      	str	r3, [r7, #4]
  ClearBuffer((void*)&mp3DecInfo, sizeof(MP3DecInfo));
 8010ad0:	f641 0084 	movw	r0, #6276	; 0x1884
 8010ad4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010ad8:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8010adc:	f7ff ffd2 	bl	8010a84 <ClearBuffer>

  	mp3DecInfo.FrameHeaderPS =     (void*)&fh;
 8010ae0:	f641 0384 	movw	r3, #6276	; 0x1884
 8010ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ae8:	f641 024c 	movw	r2, #6220	; 0x184c
 8010aec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010af0:	601a      	str	r2, [r3, #0]
	mp3DecInfo.SideInfoPS =        (void*)&si;
 8010af2:	f641 0384 	movw	r3, #6276	; 0x1884
 8010af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010afa:	f242 1290 	movw	r2, #8592	; 0x2190
 8010afe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010b02:	605a      	str	r2, [r3, #4]
	mp3DecInfo.ScaleFactorInfoPS = (void*)&sfi;
 8010b04:	f641 0384 	movw	r3, #6276	; 0x1884
 8010b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b0c:	f242 0274 	movw	r2, #8308	; 0x2074
 8010b10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010b14:	609a      	str	r2, [r3, #8]
	mp3DecInfo.HuffmanInfoPS =     (void*)&hi;
 8010b16:	f641 0384 	movw	r3, #6276	; 0x1884
 8010b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b1e:	f244 42dc 	movw	r2, #17628	; 0x44dc
 8010b22:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010b26:	60da      	str	r2, [r3, #12]
	mp3DecInfo.DequantInfoPS =     (void*)&di;
 8010b28:	f641 0384 	movw	r3, #6276	; 0x1884
 8010b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b30:	f245 62ec 	movw	r2, #22252	; 0x56ec
 8010b34:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010b38:	611a      	str	r2, [r3, #16]
	mp3DecInfo.IMDCTInfoPS =       (void*)&mi;
 8010b3a:	f641 0384 	movw	r3, #6276	; 0x1884
 8010b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b42:	f645 2234 	movw	r2, #23092	; 0x5a34
 8010b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010b4a:	615a      	str	r2, [r3, #20]
	mp3DecInfo.SubbandInfoPS =     (void*)&sbi;
 8010b4c:	f641 0384 	movw	r3, #6276	; 0x1884
 8010b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b54:	f242 22d8 	movw	r2, #8920	; 0x22d8
 8010b58:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8010b5c:	619a      	str	r2, [r3, #24]

	/* important to do this - DSP primitives assume a bunch of state variables are 0 on first use */
    ClearBuffer((void*)&fh,  sizeof(FrameHeader));
 8010b5e:	f641 004c 	movw	r0, #6220	; 0x184c
 8010b62:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010b66:	f04f 0138 	mov.w	r1, #56	; 0x38
 8010b6a:	f7ff ff8b 	bl	8010a84 <ClearBuffer>
	ClearBuffer((void*)&si,  sizeof(SideInfo));
 8010b6e:	f242 1090 	movw	r0, #8592	; 0x2190
 8010b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010b76:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8010b7a:	f7ff ff83 	bl	8010a84 <ClearBuffer>
	ClearBuffer((void*)&sfi, sizeof(ScaleFactorInfo));
 8010b7e:	f242 0074 	movw	r0, #8308	; 0x2074
 8010b82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010b86:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8010b8a:	f7ff ff7b 	bl	8010a84 <ClearBuffer>
	ClearBuffer((void*)&hi,  sizeof(HuffmanInfo));
 8010b8e:	f244 40dc 	movw	r0, #17628	; 0x44dc
 8010b92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010b96:	f241 2110 	movw	r1, #4624	; 0x1210
 8010b9a:	f7ff ff73 	bl	8010a84 <ClearBuffer>
	ClearBuffer((void*)&di,  sizeof(DequantInfo));
 8010b9e:	f245 60ec 	movw	r0, #22252	; 0x56ec
 8010ba2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010ba6:	f44f 7152 	mov.w	r1, #840	; 0x348
 8010baa:	f7ff ff6b 	bl	8010a84 <ClearBuffer>
	ClearBuffer((void*)&mi,  sizeof(IMDCTInfo));
 8010bae:	f645 2034 	movw	r0, #23092	; 0x5a34
 8010bb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010bb6:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8010bba:	f7ff ff63 	bl	8010a84 <ClearBuffer>
	ClearBuffer((void*)&sbi, sizeof(SubbandInfo));
 8010bbe:	f242 20d8 	movw	r0, #8920	; 0x22d8
 8010bc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010bc6:	f242 2104 	movw	r1, #8708	; 0x2204
 8010bca:	f7ff ff5b 	bl	8010a84 <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
	ClearBuffer(mi,  sizeof(IMDCTInfo));
	ClearBuffer(sbi, sizeof(SubbandInfo));

#endif
	return mp3DecInfo_pointer;
 8010bce:	687b      	ldr	r3, [r7, #4]

}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f107 0708 	add.w	r7, r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop

08010bdc <MP3InitDecoder>:
 * Outputs:     none
 *
 * Return:      handle to mp3 decoder instance, 0 if malloc fails
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 8010be2:	f7ff ff6d 	bl	8010ac0 <xmp3_AllocateBuffers>
 8010be6:	4603      	mov	r3, r0
 8010be8:	607b      	str	r3, [r7, #4]

	return (HMP3Decoder)mp3DecInfo;
 8010bea:	687b      	ldr	r3, [r7, #4]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	f107 0708 	add.w	r7, r7, #8
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop

08010bf8 <_ZN11CGraphicLCDC1Ev>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

CGraphicLCD::CGraphicLCD() {
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4a06      	ldr	r2, [pc, #24]	; (8010c1c <_ZN11CGraphicLCDC1Ev+0x24>)
 8010c04:	601a      	str	r2, [r3, #0]
	bInverse=false;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f04f 0200 	mov.w	r2, #0
 8010c0c:	711a      	strb	r2, [r3, #4]
}
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f107 070c 	add.w	r7, r7, #12
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bc80      	pop	{r7}
 8010c1a:	4770      	bx	lr
 8010c1c:	0801a950 	.word	0x0801a950

08010c20 <_ZN11CGraphicLCDD1Ev>:

CGraphicLCD::CGraphicLCD(bool inverse) {
	bInverse=inverse;
}

CGraphicLCD::~CGraphicLCD() {
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	4a09      	ldr	r2, [pc, #36]	; (8010c50 <_ZN11CGraphicLCDD1Ev+0x30>)
 8010c2c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8010c2e:	f04f 0300 	mov.w	r3, #0
 8010c32:	f003 0301 	and.w	r3, r3, #1
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d002      	beq.n	8010c42 <_ZN11CGraphicLCDD1Ev+0x22>
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f007 fd07 	bl	8018650 <_ZdlPv>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f107 0708 	add.w	r7, r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	0801a950 	.word	0x0801a950

08010c54 <_ZN11CGraphicLCDD0Ev>:

CGraphicLCD::CGraphicLCD(bool inverse) {
	bInverse=inverse;
}

CGraphicLCD::~CGraphicLCD() {
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff ffdf 	bl	8010c20 <_ZN11CGraphicLCDD1Ev>
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f007 fcf4 	bl	8018650 <_ZdlPv>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f107 0708 	add.w	r7, r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <_ZN11CGraphicLCD7InverseEv>:
/**
  * @brief gives inverted draw status
  * @param  None
  * @retval true on inverse mode
  */
bool CGraphicLCD::Inverse(){
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
	return bInverse;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	791b      	ldrb	r3, [r3, #4]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	f107 070c 	add.w	r7, r7, #12
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bc80      	pop	{r7}
 8010c8a:	4770      	bx	lr

08010c8c <_ZN11CGraphicLCD7InverseEb>:
/**
  * @brief  sets inverted draw mode
  * @param  ture for inverted draw mode
  * @retval None
  */
void CGraphicLCD::Inverse(bool inverse){
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70fb      	strb	r3, [r7, #3]
	bInverse = inverse;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	78fa      	ldrb	r2, [r7, #3]
 8010c9c:	711a      	strb	r2, [r3, #4]
}
 8010c9e:	f107 070c 	add.w	r7, r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bc80      	pop	{r7}
 8010ca6:	4770      	bx	lr

08010ca8 <_ZN13CT6963CDriverC1Ev>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CT6963CDriver::CT6963CDriver() {
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7ff ffa0 	bl	8010bf8 <_ZN11CGraphicLCDC1Ev>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4a04      	ldr	r2, [pc, #16]	; (8010ccc <_ZN13CT6963CDriverC1Ev+0x24>)
 8010cbc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f107 0708 	add.w	r7, r7, #8
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	0801a988 	.word	0x0801a988

08010cd0 <_ZN13CT6963CDriverD1Ev>:

CT6963CDriver::~CT6963CDriver() {
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	4a0a      	ldr	r2, [pc, #40]	; (8010d04 <_ZN13CT6963CDriverD1Ev+0x34>)
 8010cdc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f7ff ff9e 	bl	8010c20 <_ZN11CGraphicLCDD1Ev>
 8010ce4:	f04f 0300 	mov.w	r3, #0
 8010ce8:	f003 0301 	and.w	r3, r3, #1
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d002      	beq.n	8010cf8 <_ZN13CT6963CDriverD1Ev+0x28>
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f007 fcac 	bl	8018650 <_ZdlPv>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f107 0708 	add.w	r7, r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	0801a988 	.word	0x0801a988

08010d08 <_ZN13CT6963CDriverD0Ev>:
CT6963CDriver::CT6963CDriver() {
	// TODO Auto-generated constructor stub

}

CT6963CDriver::~CT6963CDriver() {
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff ffdd 	bl	8010cd0 <_ZN13CT6963CDriverD1Ev>
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f007 fc9a 	bl	8018650 <_ZdlPv>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f107 0708 	add.w	r7, r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <_ZN13CT6963CDriver4InitEv>:
/**
  * @brief  initializes Display controller
  * @param  None
  * @retval None
  */
void CT6963CDriver::Init(){
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]

	HardwareInit();
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	4798      	blx	r3

	Reset();
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	4798      	blx	r3

	// Graphic home address
	WriteData(GLCD_GRAPHIC_HOME & 0xFF);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f04f 01e0 	mov.w	r1, #224	; 0xe0
 8010d5c:	4798      	blx	r3
	WriteData(GLCD_GRAPHIC_HOME >> 8);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f04f 0101 	mov.w	r1, #1
 8010d6e:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_HOME_ADDRESS);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f04f 0142 	mov.w	r1, #66	; 0x42
 8010d80:	4798      	blx	r3

	//graphic line length
	WriteData(GLCD_GRAPHIC_AREA);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f04f 011e 	mov.w	r1, #30
 8010d92:	4798      	blx	r3
	WriteData(0x00);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f04f 0100 	mov.w	r1, #0
 8010da4:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_AREA);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f04f 0143 	mov.w	r1, #67	; 0x43
 8010db6:	4798      	blx	r3

	//text home address
	WriteData(GLCD_TEXT_HOME & 0xFF);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f04f 0100 	mov.w	r1, #0
 8010dc8:	4798      	blx	r3
	WriteData(GLCD_TEXT_HOME >> 8);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f04f 0100 	mov.w	r1, #0
 8010dda:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_HOME_ADDRESS);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f04f 0140 	mov.w	r1, #64	; 0x40
 8010dec:	4798      	blx	r3

	//text line length
	WriteData(GLCD_TEXT_AREA);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f04f 011e 	mov.w	r1, #30
 8010dfe:	4798      	blx	r3
	WriteData(0x00);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f04f 0100 	mov.w	r1, #0
 8010e10:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_AREA);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f04f 0141 	mov.w	r1, #65	; 0x41
 8010e22:	4798      	blx	r3

	//write offset register  (no effect)
	WriteData(GLCD_OFFSET_REGISTER);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f04f 0102 	mov.w	r1, #2
 8010e34:	4798      	blx	r3
	WriteData(0x00);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f04f 0100 	mov.w	r1, #0
 8010e46:	4798      	blx	r3
	WriteCommand(T6963_SET_OFFSET_REGISTER);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f04f 0122 	mov.w	r1, #34	; 0x22
 8010e58:	4798      	blx	r3

	// display in XOR Mode
	WriteCommand(T6963_MODE_SET | 1);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f04f 0181 	mov.w	r1, #129	; 0x81
 8010e6a:	4798      	blx	r3

	//Graphic and Text mode
	WriteCommand(T6963_DISPLAY_MODE  | T6963_TEXT_DISPLAY_ON | T6963_GRAPHIC_DISPLAY_ON );
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f04f 019c 	mov.w	r1, #156	; 0x9c
 8010e7c:	4798      	blx	r3
}
 8010e7e:	f107 0708 	add.w	r7, r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop

08010e88 <_ZN13CT6963CDriver17SetAddressPointerEj>:
/**
  * @brief  set address pointer in T6963C
  * @param  address
  * @retval None
  */
void CT6963CDriver::SetAddressPointer(unsigned int address){
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
	address += 2; // display offset
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	f103 0302 	add.w	r3, r3, #2
 8010e98:	603b      	str	r3, [r7, #0]
	WriteData(address & 0xFF);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	683a      	ldr	r2, [r7, #0]
 8010ea6:	b2d2      	uxtb	r2, r2
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	4611      	mov	r1, r2
 8010eac:	4798      	blx	r3
	WriteData(address >> 8);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	683a      	ldr	r2, [r7, #0]
 8010eba:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8010ebe:	b2d2      	uxtb	r2, r2
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4798      	blx	r3
	WriteCommand(T6963_SET_ADDRESS_POINTER);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f04f 0124 	mov.w	r1, #36	; 0x24
 8010ed6:	4798      	blx	r3
}
 8010ed8:	f107 0708 	add.w	r7, r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <_ZN13CT6963CDriver8TextGoToEhh>:
  * @brief  sets address pointer to specific text address
  * @param  column and line
  * @retval None
  */
void CT6963CDriver::TextGoTo(unsigned char x, unsigned char y)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	4613      	mov	r3, r2
 8010eea:	460a      	mov	r2, r1
 8010eec:	70fa      	strb	r2, [r7, #3]
 8010eee:	70bb      	strb	r3, [r7, #2]
	unsigned int address;

	address = GLCD_TEXT_HOME +  x + (GLCD_TEXT_AREA * y);
 8010ef0:	78f9      	ldrb	r1, [r7, #3]
 8010ef2:	78ba      	ldrb	r2, [r7, #2]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010efa:	1a9b      	subs	r3, r3, r2
 8010efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f00:	18cb      	adds	r3, r1, r3
 8010f02:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	68f9      	ldr	r1, [r7, #12]
 8010f08:	f7ff ffbe 	bl	8010e88 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 8010f0c:	f107 0710 	add.w	r7, r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <_ZN13CT6963CDriver11GraphicGoToEhh>:
  * @brief  sets address pointer to specific pixel in graphics ram
  * @param  coordinates of the pixel byte
  * @retval None
  */
void CT6963CDriver::GraphicGoTo(unsigned char x, unsigned char y)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	4613      	mov	r3, r2
 8010f1e:	460a      	mov	r2, r1
 8010f20:	70fa      	strb	r2, [r7, #3]
 8010f22:	70bb      	strb	r3, [r7, #2]
	unsigned int address;
	address = GLCD_GRAPHIC_HOME + ((x) / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
 8010f24:	78fb      	ldrb	r3, [r7, #3]
 8010f26:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	78ba      	ldrb	r2, [r7, #2]
 8010f30:	4613      	mov	r3, r2
 8010f32:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010f36:	1a9b      	subs	r3, r3, r2
 8010f38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f3c:	18cb      	adds	r3, r1, r3
 8010f3e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8010f42:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	68f9      	ldr	r1, [r7, #12]
 8010f48:	f7ff ff9e 	bl	8010e88 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 8010f4c:	f107 0710 	add.w	r7, r7, #16
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <_ZN13CT6963CDriver5ClearEv>:
/**
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void CT6963CDriver::Clear(){
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8010f62:	f7ff ff91 	bl	8010e88 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 8010f66:	f04f 0300 	mov.w	r3, #0
 8010f6a:	60fb      	str	r3, [r7, #12]
 8010f6c:	e015      	b.n	8010f9a <_ZN13CT6963CDriver5ClearEv+0x46>
	{
		if(Inverse())
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff fe7f 	bl	8010c74 <_ZN11CGraphicLCD7InverseEv>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d005      	beq.n	8010f88 <_ZN13CT6963CDriver5ClearEv+0x34>
			WriteDisplayData(0xFF);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8010f82:	f000 f835 	bl	8010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>
 8010f86:	e004      	b.n	8010f92 <_ZN13CT6963CDriver5ClearEv+0x3e>
		else
			WriteDisplayData(0x00);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f04f 0100 	mov.w	r1, #0
 8010f8e:	f000 f82f 	bl	8010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>
void CT6963CDriver::Clear(){
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f103 0301 	add.w	r3, r3, #1
 8010f98:	60fb      	str	r3, [r7, #12]
 8010f9a:	68fa      	ldr	r2, [r7, #12]
 8010f9c:	f640 63ff 	movw	r3, #3839	; 0xeff
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	bf8c      	ite	hi
 8010fa4:	2300      	movhi	r3, #0
 8010fa6:	2301      	movls	r3, #1
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1df      	bne.n	8010f6e <_ZN13CT6963CDriver5ClearEv+0x1a>
			WriteDisplayData(0xFF);
		else
			WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f04f 0100 	mov.w	r1, #0
 8010fb4:	f7ff ff68 	bl	8010e88 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 8010fb8:	f04f 0300 	mov.w	r3, #0
 8010fbc:	60fb      	str	r3, [r7, #12]
 8010fbe:	e008      	b.n	8010fd2 <_ZN13CT6963CDriver5ClearEv+0x7e>
	{
			WriteDisplayData(0x00);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f04f 0100 	mov.w	r1, #0
 8010fc6:	f000 f813 	bl	8010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>
			WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f103 0301 	add.w	r3, r3, #1
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	f240 13df 	movw	r3, #479	; 0x1df
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	bf8c      	ite	hi
 8010fdc:	2300      	movhi	r3, #0
 8010fde:	2301      	movls	r3, #1
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1ec      	bne.n	8010fc0 <_ZN13CT6963CDriver5ClearEv+0x6c>
	{
			WriteDisplayData(0x00);
	}
}
 8010fe6:	f107 0710 	add.w	r7, r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop

08010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>:
  * @brief  writes incremental data to display ram
  * @param  data byte
  * @retval None
  */
void CT6963CDriver::WriteDisplayData(unsigned char x)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	70fb      	strb	r3, [r7, #3]
	WriteData(x);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	78fa      	ldrb	r2, [r7, #3]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	4611      	mov	r1, r2
 801100c:	4798      	blx	r3
	WriteCommand(T6963_DATA_WRITE_AND_INCREMENT);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 801101e:	4798      	blx	r3
}
 8011020:	f107 0708 	add.w	r7, r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <_ZN13CT6963CDriver9WriteCharEc>:
  * @brief  writes single ASCII char to display
  * @param  ASCII char
  * @retval None
  */
void CT6963CDriver::WriteChar(char charCode)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
	WriteDisplayData(charCode - 32);
 8011034:	78fb      	ldrb	r3, [r7, #3]
 8011036:	f1a3 0320 	sub.w	r3, r3, #32
 801103a:	b2db      	uxtb	r3, r3
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	4619      	mov	r1, r3
 8011040:	f7ff ffd6 	bl	8010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>
}
 8011044:	f107 0708 	add.w	r7, r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj>:
  * 		ground must be cleared
  * @param  null terminated string, font structure, x, y
  * @retval None
  */
void CT6963CDriver::WriteString(const char * str, const tFont &font,unsigned int x, unsigned int y)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b08c      	sub	sp, #48	; 0x30
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
 8011058:	603b      	str	r3, [r7, #0]
	unsigned int offset,width;
	unsigned int i,j,map,height,allwidth=0;
 801105a:	f04f 0300 	mov.w	r3, #0
 801105e:	623b      	str	r3, [r7, #32]

	// use internal Character generator
	if(font.glyph_height == 0){
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	2b00      	cmp	r3, #0
 8011066:	f040 80aa 	bne.w	80111be <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x172>
		TextGoTo(x/GLCD_FONT_WIDTH, y/8);
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8011070:	b2da      	uxtb	r2, r3
 8011072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011074:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8011078:	b2db      	uxtb	r3, r3
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	4611      	mov	r1, r2
 801107e:	461a      	mov	r2, r3
 8011080:	f7ff ff2e 	bl	8010ee0 <_ZN13CT6963CDriver8TextGoToEhh>

		while(*str)
 8011084:	e009      	b.n	801109a <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x4e>
		{
			WriteChar(*str++);
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	f102 0201 	add.w	r2, r2, #1
 8011090:	60ba      	str	r2, [r7, #8]
 8011092:	68f8      	ldr	r0, [r7, #12]
 8011094:	4619      	mov	r1, r3
 8011096:	f7ff ffc7 	bl	8011028 <_ZN13CT6963CDriver9WriteCharEc>

	// use internal Character generator
	if(font.glyph_height == 0){
		TextGoTo(x/GLCD_FONT_WIDTH, y/8);

		while(*str)
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	bf0c      	ite	eq
 80110a2:	2300      	moveq	r3, #0
 80110a4:	2301      	movne	r3, #1
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1ec      	bne.n	8011086 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x3a>
 80110ac:	e097      	b.n	80111de <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x192>
	// generate fonts
	else {
		while((map = *str++))
		{
			// get char position in font table
			map = font.mapping_table[map];
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	68da      	ldr	r2, [r3, #12]
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	18d3      	adds	r3, r2, r3
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	61fb      	str	r3, [r7, #28]
			// determine char width
			width = font.glyph_width;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	62fb      	str	r3, [r7, #44]	; 0x2c
			// font has no constant width
			if(width == 0)
 80110c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d105      	bne.n	80110d2 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x86>
				width = font.width_table[map];
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	691a      	ldr	r2, [r3, #16]
 80110ca:	69fb      	ldr	r3, [r7, #28]
 80110cc:	18d3      	adds	r3, r2, r3
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	62fb      	str	r3, [r7, #44]	; 0x2c

			// char data offset
			offset = font.offset_table[map];
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	695a      	ldr	r2, [r3, #20]
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80110dc:	18d3      	adds	r3, r2, r3
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	61bb      	str	r3, [r7, #24]
			// height is ever constant
			height = font.glyph_height;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	617b      	str	r3, [r7, #20]

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
 80110e8:	f04f 0300 	mov.w	r3, #0
 80110ec:	627b      	str	r3, [r7, #36]	; 0x24
 80110ee:	e050      	b.n	8011192 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x146>
			{   // step through every single point of a line of the char
				for(i=0 ; i<width  ; i++)
 80110f0:	f04f 0300 	mov.w	r3, #0
 80110f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80110f6:	e039      	b.n	801116c <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x120>
				{   //  the pixel needs to be set
					if( font.glyph_table[ offset+j+(i/8) ] & (1 << ( 7 - ( i % 8 ) ) ) )
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	689a      	ldr	r2, [r3, #8]
 80110fc:	69b9      	ldr	r1, [r7, #24]
 80110fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011100:	18c9      	adds	r1, r1, r3
 8011102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011104:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8011108:	18cb      	adds	r3, r1, r3
 801110a:	18d3      	adds	r3, r2, r3
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	461a      	mov	r2, r3
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	ea6f 0303 	mvn.w	r3, r3
 8011116:	f003 0307 	and.w	r3, r3, #7
 801111a:	fa42 f303 	asr.w	r3, r2, r3
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	b2db      	uxtb	r3, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	d01d      	beq.n	8011164 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x118>
						SetPixel( x+i+allwidth , y+j/ (((width-1)/8)+1)  );
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	b2da      	uxtb	r2, r3
 801112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112e:	b2db      	uxtb	r3, r3
 8011130:	18d3      	adds	r3, r2, r3
 8011132:	b2da      	uxtb	r2, r3
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	b2db      	uxtb	r3, r3
 8011138:	18d3      	adds	r3, r2, r3
 801113a:	b2da      	uxtb	r2, r3
 801113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011142:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8011146:	f103 0301 	add.w	r3, r3, #1
 801114a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801114c:	fbb1 f3f3 	udiv	r3, r1, r3
 8011150:	b2d9      	uxtb	r1, r3
 8011152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011154:	b2db      	uxtb	r3, r3
 8011156:	18cb      	adds	r3, r1, r3
 8011158:	b2db      	uxtb	r3, r3
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	4611      	mov	r1, r2
 801115e:	461a      	mov	r2, r3
 8011160:	f000 f842 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
			height = font.glyph_height;

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
			{   // step through every single point of a line of the char
				for(i=0 ; i<width  ; i++)
 8011164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011166:	f103 0301 	add.w	r3, r3, #1
 801116a:	62bb      	str	r3, [r7, #40]	; 0x28
 801116c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	429a      	cmp	r2, r3
 8011172:	bf2c      	ite	cs
 8011174:	2300      	movcs	r3, #0
 8011176:	2301      	movcc	r3, #1
 8011178:	b2db      	uxtb	r3, r3
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1bc      	bne.n	80110f8 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0xac>
			offset = font.offset_table[map];
			// height is ever constant
			height = font.glyph_height;

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
 801117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011180:	f103 33ff 	add.w	r3, r3, #4294967295
 8011184:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8011188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118a:	18d3      	adds	r3, r2, r3
 801118c:	f103 0301 	add.w	r3, r3, #1
 8011190:	627b      	str	r3, [r7, #36]	; 0x24
 8011192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011194:	f103 33ff 	add.w	r3, r3, #4294967295
 8011198:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 801119c:	f103 0301 	add.w	r3, r3, #1
 80111a0:	697a      	ldr	r2, [r7, #20]
 80111a2:	fb02 f203 	mul.w	r2, r2, r3
 80111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a8:	429a      	cmp	r2, r3
 80111aa:	bf94      	ite	ls
 80111ac:	2300      	movls	r3, #0
 80111ae:	2301      	movhi	r3, #1
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d19c      	bne.n	80110f0 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0xa4>
					if( font.glyph_table[ offset+j+(i/8) ] & (1 << ( 7 - ( i % 8 ) ) ) )
						SetPixel( x+i+allwidth , y+j/ (((width-1)/8)+1)  );
				}//End i
			}// End j
			//remember string width to set the next char directly net to the previous
			allwidth+=width;
 80111b6:	6a3a      	ldr	r2, [r7, #32]
 80111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ba:	18d3      	adds	r3, r2, r3
 80111bc:	623b      	str	r3, [r7, #32]
		}

	}
	// generate fonts
	else {
		while((map = *str++))
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	61fb      	str	r3, [r7, #28]
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	bf0c      	ite	eq
 80111ca:	2300      	moveq	r3, #0
 80111cc:	2301      	movne	r3, #1
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	f102 0201 	add.w	r2, r2, #1
 80111d6:	60ba      	str	r2, [r7, #8]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f47f af68 	bne.w	80110ae <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x62>
			allwidth+=width;
		}

	}

}
 80111de:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop

080111e8 <_ZN13CT6963CDriver8SetPixelEhh>:
  * @brief  sets a pixel in graphics ram
  * @param  coordinates from upper left corner
  * @retval None
  */
void CT6963CDriver::SetPixel(unsigned char x, unsigned char y)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	4613      	mov	r3, r2
 80111f2:	460a      	mov	r2, r1
 80111f4:	70fa      	strb	r2, [r7, #3]
 80111f6:	70bb      	strb	r3, [r7, #2]
	unsigned char tmp;

	// do nothing for pixel out of range
	if(x > (GLCD_PIXELS_PER_LINE-1) || y > (GLCD_NUMBER_OF_LINES-1))
 80111f8:	78fb      	ldrb	r3, [r7, #3]
 80111fa:	2bef      	cmp	r3, #239	; 0xef
 80111fc:	d832      	bhi.n	8011264 <_ZN13CT6963CDriver8SetPixelEhh+0x7c>
 80111fe:	78bb      	ldrb	r3, [r7, #2]
 8011200:	b25b      	sxtb	r3, r3
 8011202:	2b00      	cmp	r3, #0
 8011204:	db2e      	blt.n	8011264 <_ZN13CT6963CDriver8SetPixelEhh+0x7c>
		return;

	GraphicGoTo(x,y);
 8011206:	78fa      	ldrb	r2, [r7, #3]
 8011208:	78bb      	ldrb	r3, [r7, #2]
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	4611      	mov	r1, r2
 801120e:	461a      	mov	r2, r3
 8011210:	f7ff fe80 	bl	8010f14 <_ZN13CT6963CDriver11GraphicGoToEhh>


	tmp = (GLCD_FONT_WIDTH - 1) - (x % GLCD_FONT_WIDTH);
 8011214:	78fb      	ldrb	r3, [r7, #3]
 8011216:	ea6f 0303 	mvn.w	r3, r3
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 0307 	and.w	r3, r3, #7
 8011220:	73fb      	strb	r3, [r7, #15]

	if(Inverse())
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	f7ff fd25 	bl	8010c74 <_ZN11CGraphicLCD7InverseEv>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00c      	beq.n	801124a <_ZN13CT6963CDriver8SetPixelEhh+0x62>
		WriteCommand(T6963_BIT_RESET | tmp);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	7bfa      	ldrb	r2, [r7, #15]
 801123c:	f062 020f 	orn	r2, r2, #15
 8011240:	b2d2      	uxtb	r2, r2
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	4611      	mov	r1, r2
 8011246:	4798      	blx	r3
 8011248:	e00d      	b.n	8011266 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
	else
		WriteCommand(T6963_BIT_SET | tmp);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	7bfa      	ldrb	r2, [r7, #15]
 8011256:	f062 0207 	orn	r2, r2, #7
 801125a:	b2d2      	uxtb	r2, r2
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	4611      	mov	r1, r2
 8011260:	4798      	blx	r3
 8011262:	e000      	b.n	8011266 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
{
	unsigned char tmp;

	// do nothing for pixel out of range
	if(x > (GLCD_PIXELS_PER_LINE-1) || y > (GLCD_NUMBER_OF_LINES-1))
		return;
 8011264:	bf00      	nop

	if(Inverse())
		WriteCommand(T6963_BIT_RESET | tmp);
	else
		WriteCommand(T6963_BIT_SET | tmp);
}
 8011266:	f107 0710 	add.w	r7, r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop

08011270 <_ZN13CT6963CDriver4LineEjjjj>:
  * @retval None
  *
  * Copyright (c) Radoslaw Kwiecien, 2007r
  * http://en.radzio.dxp.pl/t6963/
  */
void CT6963CDriver::Line(unsigned int x1, unsigned int y1,unsigned int x2, unsigned int y2){
 8011270:	b580      	push	{r7, lr}
 8011272:	b08e      	sub	sp, #56	; 0x38
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
 801127c:	603b      	str	r3, [r7, #0]
	unsigned int CurrentX, CurrentY;
	int Xinc, Yinc,
	Dx, Dy, TwoDx, TwoDy,
	TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (x2-x1);
 801127e:	683a      	ldr	r2, [r7, #0]
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	1ad3      	subs	r3, r2, r3
 8011284:	627b      	str	r3, [r7, #36]	; 0x24
	Dy = (y2-y1);
 8011286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 801128e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	18d3      	adds	r3, r2, r3
 8011294:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8011296:	6a3a      	ldr	r2, [r7, #32]
 8011298:	6a3b      	ldr	r3, [r7, #32]
 801129a:	18d3      	adds	r3, r2, r3
 801129c:	61bb      	str	r3, [r7, #24]

	CurrentX = x1;
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentY = y1;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	633b      	str	r3, [r7, #48]	; 0x30

	Xinc = 1;
 80112a6:	f04f 0301 	mov.w	r3, #1
 80112aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	Yinc = 1;
 80112ac:	f04f 0301 	mov.w	r3, #1
 80112b0:	62bb      	str	r3, [r7, #40]	; 0x28

	if(Dx < 0)	// line from right to left
 80112b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	da0a      	bge.n	80112ce <_ZN13CT6963CDriver4LineEjjjj+0x5e>
	{
		Xinc = -1;
 80112b8:	f04f 33ff 	mov.w	r3, #4294967295
 80112bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		Dx = -Dx;
 80112be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c0:	f1c3 0300 	rsb	r3, r3, #0
 80112c4:	627b      	str	r3, [r7, #36]	; 0x24
		TwoDx = -TwoDx;
 80112c6:	69fb      	ldr	r3, [r7, #28]
 80112c8:	f1c3 0300 	rsb	r3, r3, #0
 80112cc:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) // line from bottom to top
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	da0a      	bge.n	80112ea <_ZN13CT6963CDriver4LineEjjjj+0x7a>
	{
		Yinc = -1;
 80112d4:	f04f 33ff 	mov.w	r3, #4294967295
 80112d8:	62bb      	str	r3, [r7, #40]	; 0x28
		Dy = -Dy;
 80112da:	6a3b      	ldr	r3, [r7, #32]
 80112dc:	f1c3 0300 	rsb	r3, r3, #0
 80112e0:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	f1c3 0300 	rsb	r3, r3, #0
 80112e8:	61bb      	str	r3, [r7, #24]
	}

	SetPixel(x1,y1); // starting point
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	4611      	mov	r1, r2
 80112f6:	461a      	mov	r2, r3
 80112f8:	f7ff ff76 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>

	if ((Dx != 0) || (Dy != 0)) // line is vertical or horizontal
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d102      	bne.n	8011308 <_ZN13CT6963CDriver4LineEjjjj+0x98>
 8011302:	6a3b      	ldr	r3, [r7, #32]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d056      	beq.n	80113b6 <_ZN13CT6963CDriver4LineEjjjj+0x146>
	{

		if (Dy <= Dx) // x is running var
 8011308:	6a3a      	ldr	r2, [r7, #32]
 801130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130c:	429a      	cmp	r2, r3
 801130e:	dc29      	bgt.n	8011364 <_ZN13CT6963CDriver4LineEjjjj+0xf4>
		{
			TwoDxAccumulatedError = 0;
 8011310:	f04f 0300 	mov.w	r3, #0
 8011314:	617b      	str	r3, [r7, #20]
			do
			{
				CurrentX += Xinc; // step X
 8011316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801131a:	18d3      	adds	r3, r2, r3
 801131c:	637b      	str	r3, [r7, #52]	; 0x34
				TwoDxAccumulatedError += TwoDy;
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	18d3      	adds	r3, r2, r3
 8011324:	617b      	str	r3, [r7, #20]
				if(TwoDxAccumulatedError > Dx)  // Increase Y
 8011326:	697a      	ldr	r2, [r7, #20]
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	429a      	cmp	r2, r3
 801132c:	dd07      	ble.n	801133e <_ZN13CT6963CDriver4LineEjjjj+0xce>
				{
					CurrentY += Yinc;
 801132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011332:	18d3      	adds	r3, r2, r3
 8011334:	633b      	str	r3, [r7, #48]	; 0x30
					TwoDxAccumulatedError -= TwoDx;
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	617b      	str	r3, [r7, #20]
				}
				SetPixel(CurrentX,CurrentY);
 801133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011340:	b2da      	uxtb	r2, r3
 8011342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011344:	b2db      	uxtb	r3, r3
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	4611      	mov	r1, r2
 801134a:	461a      	mov	r2, r3
 801134c:	f7ff ff4c 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	{

		if (Dy <= Dx) // x is running var
		{
			TwoDxAccumulatedError = 0;
			do
 8011350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	429a      	cmp	r2, r3
 8011356:	bf0c      	ite	eq
 8011358:	2300      	moveq	r3, #0
 801135a:	2301      	movne	r3, #1
 801135c:	b2db      	uxtb	r3, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	d1d9      	bne.n	8011316 <_ZN13CT6963CDriver4LineEjjjj+0xa6>
 8011362:	e028      	b.n	80113b6 <_ZN13CT6963CDriver4LineEjjjj+0x146>
				SetPixel(CurrentX,CurrentY);
			}while (CurrentX != x2); // line finished
		}
		else // y is running var
		{
			TwoDyAccumulatedError = 0;
 8011364:	f04f 0300 	mov.w	r3, #0
 8011368:	613b      	str	r3, [r7, #16]
			do
			{
				CurrentY += Yinc;
 801136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801136e:	18d3      	adds	r3, r2, r3
 8011370:	633b      	str	r3, [r7, #48]	; 0x30
				TwoDyAccumulatedError += TwoDx;
 8011372:	693a      	ldr	r2, [r7, #16]
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	18d3      	adds	r3, r2, r3
 8011378:	613b      	str	r3, [r7, #16]
				if(TwoDyAccumulatedError>Dy)
 801137a:	693a      	ldr	r2, [r7, #16]
 801137c:	6a3b      	ldr	r3, [r7, #32]
 801137e:	429a      	cmp	r2, r3
 8011380:	dd07      	ble.n	8011392 <_ZN13CT6963CDriver4LineEjjjj+0x122>
				{
					CurrentX += Xinc;
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011386:	18d3      	adds	r3, r2, r3
 8011388:	637b      	str	r3, [r7, #52]	; 0x34
					TwoDyAccumulatedError -= TwoDy;
 801138a:	693a      	ldr	r2, [r7, #16]
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	613b      	str	r3, [r7, #16]
				}
				SetPixel(CurrentX,CurrentY);
 8011392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011394:	b2da      	uxtb	r2, r3
 8011396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011398:	b2db      	uxtb	r3, r3
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	4611      	mov	r1, r2
 801139e:	461a      	mov	r2, r3
 80113a0:	f7ff ff22 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
			}while (CurrentX != x2); // line finished
		}
		else // y is running var
		{
			TwoDyAccumulatedError = 0;
			do
 80113a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113a8:	429a      	cmp	r2, r3
 80113aa:	bf0c      	ite	eq
 80113ac:	2300      	moveq	r3, #0
 80113ae:	2301      	movne	r3, #1
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1d9      	bne.n	801136a <_ZN13CT6963CDriver4LineEjjjj+0xfa>
				}
				SetPixel(CurrentX,CurrentY);
			}while (CurrentY != y2); // line finished
		}
	}
}
 80113b6:	f107 0738 	add.w	r7, r7, #56	; 0x38
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop

080113c0 <_ZN13CT6963CDriver6WindowEjjjj>:
/**
  * @brief  draw a window with upper left corner at (x,y) and specified width and height, edges round or square
  * @param  x1,y1,width,heigth, edge type enum
  * @retval None
  */
void CT6963CDriver::Window(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 80113c0:	b5b0      	push	{r4, r5, r7, lr}
 80113c2:	b088      	sub	sp, #32
 80113c4:	af02      	add	r7, sp, #8
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
	unsigned int i;

	Rectangle(x+3,y,width-4,4,true); // filled top bar
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f103 030c 	add.w	r3, r3, #12
 80113d6:	681c      	ldr	r4, [r3, #0]
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	f103 0203 	add.w	r2, r3, #3
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	f1a3 0304 	sub.w	r3, r3, #4
 80113e4:	f04f 0104 	mov.w	r1, #4
 80113e8:	9100      	str	r1, [sp, #0]
 80113ea:	f04f 0101 	mov.w	r1, #1
 80113ee:	9101      	str	r1, [sp, #4]
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	4611      	mov	r1, r2
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	47a0      	blx	r4
	Line(x,y+4,x,y+height-4);			// left border
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f103 0304 	add.w	r3, r3, #4
 8011400:	681c      	ldr	r4, [r3, #0]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f103 0304 	add.w	r3, r3, #4
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801140c:	188a      	adds	r2, r1, r2
 801140e:	f1a2 0204 	sub.w	r2, r2, #4
 8011412:	9200      	str	r2, [sp, #0]
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	461a      	mov	r2, r3
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	47a0      	blx	r4
	Line(x+width,y+4,x+width,y+height-4);// right border
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f103 0304 	add.w	r3, r3, #4
 8011426:	681c      	ldr	r4, [r3, #0]
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	18d1      	adds	r1, r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f103 0204 	add.w	r2, r3, #4
 8011434:	68b8      	ldr	r0, [r7, #8]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	18c3      	adds	r3, r0, r3
 801143a:	687d      	ldr	r5, [r7, #4]
 801143c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801143e:	1828      	adds	r0, r5, r0
 8011440:	f1a0 0004 	sub.w	r0, r0, #4
 8011444:	9000      	str	r0, [sp, #0]
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	47a0      	blx	r4
	Line(x+4,y+height,x+width-5,y+height);// bottom border
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f103 0304 	add.w	r3, r3, #4
 8011452:	681c      	ldr	r4, [r3, #0]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	f103 0104 	add.w	r1, r3, #4
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	18d2      	adds	r2, r2, r3
 8011460:	68b8      	ldr	r0, [r7, #8]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	18c3      	adds	r3, r0, r3
 8011466:	f1a3 0305 	sub.w	r3, r3, #5
 801146a:	687d      	ldr	r5, [r7, #4]
 801146c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801146e:	1828      	adds	r0, r5, r0
 8011470:	9000      	str	r0, [sp, #0]
 8011472:	68f8      	ldr	r0, [r7, #12]
 8011474:	47a0      	blx	r4

	for(i=1;i<3;i++){
 8011476:	f04f 0301 	mov.w	r3, #1
 801147a:	617b      	str	r3, [r7, #20]
 801147c:	e04b      	b.n	8011516 <_ZN13CT6963CDriver6WindowEjjjj+0x156>
		// upper left
		SetPixel(x+i,y+3);
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	b2da      	uxtb	r2, r3
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	b2db      	uxtb	r3, r3
 8011486:	18d3      	adds	r3, r2, r3
 8011488:	b2da      	uxtb	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	b2db      	uxtb	r3, r3
 801148e:	f103 0303 	add.w	r3, r3, #3
 8011492:	b2db      	uxtb	r3, r3
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	4611      	mov	r1, r2
 8011498:	461a      	mov	r2, r3
 801149a:	f7ff fea5 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+i,y+2);
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	18d3      	adds	r3, r2, r3
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	f103 0302 	add.w	r3, r3, #2
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	68f8      	ldr	r0, [r7, #12]
 80114b6:	4611      	mov	r1, r2
 80114b8:	461a      	mov	r2, r3
 80114ba:	f7ff fe95 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>

		// upper right
		SetPixel(x+width-i,y+3);
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	b2da      	uxtb	r2, r3
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	18d3      	adds	r3, r2, r3
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	f103 0303 	add.w	r3, r3, #3
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	4611      	mov	r1, r2
 80114e0:	461a      	mov	r2, r3
 80114e2:	f7ff fe81 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+width-i,y+2);
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	18d3      	adds	r3, r2, r3
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	f103 0302 	add.w	r3, r3, #2
 8011502:	b2db      	uxtb	r3, r3
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	4611      	mov	r1, r2
 8011508:	461a      	mov	r2, r3
 801150a:	f7ff fe6d 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	Rectangle(x+3,y,width-4,4,true); // filled top bar
	Line(x,y+4,x,y+height-4);			// left border
	Line(x+width,y+4,x+width,y+height-4);// right border
	Line(x+4,y+height,x+width-5,y+height);// bottom border

	for(i=1;i<3;i++){
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	f103 0301 	add.w	r3, r3, #1
 8011514:	617b      	str	r3, [r7, #20]
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	2b02      	cmp	r3, #2
 801151a:	bf8c      	ite	hi
 801151c:	2300      	movhi	r3, #0
 801151e:	2301      	movls	r3, #1
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1ab      	bne.n	801147e <_ZN13CT6963CDriver6WindowEjjjj+0xbe>
		SetPixel(x+width-i,y+3);
		SetPixel(x+width-i,y+2);
	}

	// upper left
	SetPixel(x+3,y+1);
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	b2db      	uxtb	r3, r3
 801152a:	f103 0303 	add.w	r3, r3, #3
 801152e:	b2da      	uxtb	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	f103 0301 	add.w	r3, r3, #1
 8011538:	b2db      	uxtb	r3, r3
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	4611      	mov	r1, r2
 801153e:	461a      	mov	r2, r3
 8011540:	f7ff fe52 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+1);
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	b2db      	uxtb	r3, r3
 8011548:	f103 0302 	add.w	r3, r3, #2
 801154c:	b2da      	uxtb	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	b2db      	uxtb	r3, r3
 8011552:	f103 0301 	add.w	r3, r3, #1
 8011556:	b2db      	uxtb	r3, r3
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	4611      	mov	r1, r2
 801155c:	461a      	mov	r2, r3
 801155e:	f7ff fe43 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>

	// upper right
	SetPixel(x+width-3,y+1);
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	b2da      	uxtb	r2, r3
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	b2db      	uxtb	r3, r3
 801156a:	18d3      	adds	r3, r2, r3
 801156c:	b2db      	uxtb	r3, r3
 801156e:	f1a3 0303 	sub.w	r3, r3, #3
 8011572:	b2da      	uxtb	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	b2db      	uxtb	r3, r3
 8011578:	f103 0301 	add.w	r3, r3, #1
 801157c:	b2db      	uxtb	r3, r3
 801157e:	68f8      	ldr	r0, [r7, #12]
 8011580:	4611      	mov	r1, r2
 8011582:	461a      	mov	r2, r3
 8011584:	f7ff fe30 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-2,y+1);
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	b2da      	uxtb	r2, r3
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	b2db      	uxtb	r3, r3
 8011590:	18d3      	adds	r3, r2, r3
 8011592:	b2db      	uxtb	r3, r3
 8011594:	f1a3 0302 	sub.w	r3, r3, #2
 8011598:	b2da      	uxtb	r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	b2db      	uxtb	r3, r3
 801159e:	f103 0301 	add.w	r3, r3, #1
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	4611      	mov	r1, r2
 80115a8:	461a      	mov	r2, r3
 80115aa:	f7ff fe1d 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>


	// bottom left
	SetPixel(x+1,y+height-2);
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	f103 0301 	add.w	r3, r3, #1
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	b2d9      	uxtb	r1, r3
 80115bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	18cb      	adds	r3, r1, r3
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	f1a3 0302 	sub.w	r3, r3, #2
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	4611      	mov	r1, r2
 80115ce:	461a      	mov	r2, r3
 80115d0:	f7ff fe0a 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+1,y+height-3);
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f103 0301 	add.w	r3, r3, #1
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	b2d9      	uxtb	r1, r3
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	18cb      	adds	r3, r1, r3
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	f1a3 0303 	sub.w	r3, r3, #3
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	68f8      	ldr	r0, [r7, #12]
 80115f2:	4611      	mov	r1, r2
 80115f4:	461a      	mov	r2, r3
 80115f6:	f7ff fdf7 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>

	// bottom left
	SetPixel(x+3,y+height-1);
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	f103 0303 	add.w	r3, r3, #3
 8011602:	b2da      	uxtb	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	b2d9      	uxtb	r1, r3
 8011608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160a:	b2db      	uxtb	r3, r3
 801160c:	18cb      	adds	r3, r1, r3
 801160e:	b2db      	uxtb	r3, r3
 8011610:	f103 33ff 	add.w	r3, r3, #4294967295
 8011614:	b2db      	uxtb	r3, r3
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	4611      	mov	r1, r2
 801161a:	461a      	mov	r2, r3
 801161c:	f7ff fde4 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+height-1);
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	b2db      	uxtb	r3, r3
 8011624:	f103 0302 	add.w	r3, r3, #2
 8011628:	b2da      	uxtb	r2, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	b2d9      	uxtb	r1, r3
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	b2db      	uxtb	r3, r3
 8011632:	18cb      	adds	r3, r1, r3
 8011634:	b2db      	uxtb	r3, r3
 8011636:	f103 33ff 	add.w	r3, r3, #4294967295
 801163a:	b2db      	uxtb	r3, r3
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	4611      	mov	r1, r2
 8011640:	461a      	mov	r2, r3
 8011642:	f7ff fdd1 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>


	// bottom right
	SetPixel(x+width-1,y+height-2);
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	b2da      	uxtb	r2, r3
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	b2db      	uxtb	r3, r3
 801164e:	18d3      	adds	r3, r2, r3
 8011650:	b2db      	uxtb	r3, r3
 8011652:	f103 33ff 	add.w	r3, r3, #4294967295
 8011656:	b2da      	uxtb	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	b2d9      	uxtb	r1, r3
 801165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165e:	b2db      	uxtb	r3, r3
 8011660:	18cb      	adds	r3, r1, r3
 8011662:	b2db      	uxtb	r3, r3
 8011664:	f1a3 0302 	sub.w	r3, r3, #2
 8011668:	b2db      	uxtb	r3, r3
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	4611      	mov	r1, r2
 801166e:	461a      	mov	r2, r3
 8011670:	f7ff fdba 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-1,y+height-3);
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	b2da      	uxtb	r2, r3
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	b2db      	uxtb	r3, r3
 801167c:	18d3      	adds	r3, r2, r3
 801167e:	b2db      	uxtb	r3, r3
 8011680:	f103 33ff 	add.w	r3, r3, #4294967295
 8011684:	b2da      	uxtb	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	b2d9      	uxtb	r1, r3
 801168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168c:	b2db      	uxtb	r3, r3
 801168e:	18cb      	adds	r3, r1, r3
 8011690:	b2db      	uxtb	r3, r3
 8011692:	f1a3 0303 	sub.w	r3, r3, #3
 8011696:	b2db      	uxtb	r3, r3
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	4611      	mov	r1, r2
 801169c:	461a      	mov	r2, r3
 801169e:	f7ff fda3 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>

	// bottom right
	SetPixel(x+width-2,y+height-1);
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	18d3      	adds	r3, r2, r3
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	f1a3 0302 	sub.w	r3, r3, #2
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	b2d9      	uxtb	r1, r3
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	18cb      	adds	r3, r1, r3
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	4611      	mov	r1, r2
 80116ca:	461a      	mov	r2, r3
 80116cc:	f7ff fd8c 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-3,y+height-1);
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	b2da      	uxtb	r2, r3
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	18d3      	adds	r3, r2, r3
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	f1a3 0303 	sub.w	r3, r3, #3
 80116e0:	b2da      	uxtb	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	b2d9      	uxtb	r1, r3
 80116e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	18cb      	adds	r3, r1, r3
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	4611      	mov	r1, r2
 80116f8:	461a      	mov	r2, r3
 80116fa:	f7ff fd75 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>



}
 80116fe:	f107 0718 	add.w	r7, r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	bdb0      	pop	{r4, r5, r7, pc}
 8011706:	bf00      	nop

08011708 <_ZN13CT6963CDriver9RectangleEjjjjb>:
/**
  * @brief  draw an rectangle with upper left corner at (x,y) and specified width and height
  * @param  x1,y1,width,heigth,  true for filled
  * @retval None
  */
void CT6963CDriver::Rectangle(unsigned int x,unsigned int y,unsigned int width,unsigned int height,  bool fill){
 8011708:	b580      	push	{r7, lr}
 801170a:	b086      	sub	sp, #24
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
 8011714:	603b      	str	r3, [r7, #0]
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
 8011716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801171a:	2b00      	cmp	r3, #0
 801171c:	d031      	beq.n	8011782 <_ZN13CT6963CDriver9RectangleEjjjjb+0x7a>
		//lines
		for (i=0;i<height;i++){
 801171e:	f04f 0300 	mov.w	r3, #0
 8011722:	75fb      	strb	r3, [r7, #23]
 8011724:	e023      	b.n	801176e <_ZN13CT6963CDriver9RectangleEjjjjb+0x66>
			// columns
			for (k=0;k<width;k++) {
 8011726:	f04f 0300 	mov.w	r3, #0
 801172a:	75bb      	strb	r3, [r7, #22]
 801172c:	e012      	b.n	8011754 <_ZN13CT6963CDriver9RectangleEjjjjb+0x4c>
				SetPixel(x+k,y+i);
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	b2da      	uxtb	r2, r3
 8011732:	7dbb      	ldrb	r3, [r7, #22]
 8011734:	18d3      	adds	r3, r2, r3
 8011736:	b2da      	uxtb	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	b2d9      	uxtb	r1, r3
 801173c:	7dfb      	ldrb	r3, [r7, #23]
 801173e:	18cb      	adds	r3, r1, r3
 8011740:	b2db      	uxtb	r3, r3
 8011742:	68f8      	ldr	r0, [r7, #12]
 8011744:	4611      	mov	r1, r2
 8011746:	461a      	mov	r2, r3
 8011748:	f7ff fd4e 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
			// columns
			for (k=0;k<width;k++) {
 801174c:	7dbb      	ldrb	r3, [r7, #22]
 801174e:	f103 0301 	add.w	r3, r3, #1
 8011752:	75bb      	strb	r3, [r7, #22]
 8011754:	7dba      	ldrb	r2, [r7, #22]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	429a      	cmp	r2, r3
 801175a:	bf2c      	ite	cs
 801175c:	2300      	movcs	r3, #0
 801175e:	2301      	movcc	r3, #1
 8011760:	b2db      	uxtb	r3, r3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1e3      	bne.n	801172e <_ZN13CT6963CDriver9RectangleEjjjjb+0x26>
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	f103 0301 	add.w	r3, r3, #1
 801176c:	75fb      	strb	r3, [r7, #23]
 801176e:	7dfa      	ldrb	r2, [r7, #23]
 8011770:	6a3b      	ldr	r3, [r7, #32]
 8011772:	429a      	cmp	r2, r3
 8011774:	bf2c      	ite	cs
 8011776:	2300      	movcs	r3, #0
 8011778:	2301      	movcc	r3, #1
 801177a:	b2db      	uxtb	r3, r3
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1d2      	bne.n	8011726 <_ZN13CT6963CDriver9RectangleEjjjjb+0x1e>
 8011780:	e05f      	b.n	8011842 <_ZN13CT6963CDriver9RectangleEjjjjb+0x13a>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 8011782:	f04f 0300 	mov.w	r3, #0
 8011786:	75fb      	strb	r3, [r7, #23]
 8011788:	e022      	b.n	80117d0 <_ZN13CT6963CDriver9RectangleEjjjjb+0xc8>
			SetPixel(x, y + i);
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	b2da      	uxtb	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	b2d9      	uxtb	r1, r3
 8011792:	7dfb      	ldrb	r3, [r7, #23]
 8011794:	18cb      	adds	r3, r1, r3
 8011796:	b2db      	uxtb	r3, r3
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	4611      	mov	r1, r2
 801179c:	461a      	mov	r2, r3
 801179e:	f7ff fd23 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + width - 1, y + i);
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	b2da      	uxtb	r2, r3
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	18d3      	adds	r3, r2, r3
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80117b2:	b2da      	uxtb	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	b2d9      	uxtb	r1, r3
 80117b8:	7dfb      	ldrb	r3, [r7, #23]
 80117ba:	18cb      	adds	r3, r1, r3
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	68f8      	ldr	r0, [r7, #12]
 80117c0:	4611      	mov	r1, r2
 80117c2:	461a      	mov	r2, r3
 80117c4:	f7ff fd10 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 80117c8:	7dfb      	ldrb	r3, [r7, #23]
 80117ca:	f103 0301 	add.w	r3, r3, #1
 80117ce:	75fb      	strb	r3, [r7, #23]
 80117d0:	7dfa      	ldrb	r2, [r7, #23]
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	bf2c      	ite	cs
 80117d8:	2300      	movcs	r3, #0
 80117da:	2301      	movcc	r3, #1
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1d3      	bne.n	801178a <_ZN13CT6963CDriver9RectangleEjjjjb+0x82>
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 80117e2:	f04f 0300 	mov.w	r3, #0
 80117e6:	75fb      	strb	r3, [r7, #23]
 80117e8:	e022      	b.n	8011830 <_ZN13CT6963CDriver9RectangleEjjjjb+0x128>
			SetPixel(x + i, y);
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	b2da      	uxtb	r2, r3
 80117ee:	7dfb      	ldrb	r3, [r7, #23]
 80117f0:	18d3      	adds	r3, r2, r3
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	4611      	mov	r1, r2
 80117fc:	461a      	mov	r2, r3
 80117fe:	f7ff fcf3 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + i, y + height - 1);
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	b2da      	uxtb	r2, r3
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	18d3      	adds	r3, r2, r3
 801180a:	b2da      	uxtb	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	b2d9      	uxtb	r1, r3
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	18cb      	adds	r3, r1, r3
 8011816:	b2db      	uxtb	r3, r3
 8011818:	f103 33ff 	add.w	r3, r3, #4294967295
 801181c:	b2db      	uxtb	r3, r3
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	4611      	mov	r1, r2
 8011822:	461a      	mov	r2, r3
 8011824:	f7ff fce0 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		for (i = 0; i < height; i++) {
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 8011828:	7dfb      	ldrb	r3, [r7, #23]
 801182a:	f103 0301 	add.w	r3, r3, #1
 801182e:	75fb      	strb	r3, [r7, #23]
 8011830:	7dfa      	ldrb	r2, [r7, #23]
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	429a      	cmp	r2, r3
 8011836:	bf2c      	ite	cs
 8011838:	2300      	movcs	r3, #0
 801183a:	2301      	movcc	r3, #1
 801183c:	b2db      	uxtb	r3, r3
 801183e:	2b00      	cmp	r3, #0
 8011840:	d1d3      	bne.n	80117ea <_ZN13CT6963CDriver9RectangleEjjjjb+0xe2>
			SetPixel(x + i, y);
			SetPixel(x + i, y + height - 1);
		}
	}
}
 8011842:	f107 0718 	add.w	r7, r7, #24
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop

0801184c <_ZN13CT6963CDriver11SectorClearEjjjj>:
/**
  * @brief  clear sector from upper left (x,y) with specified width and height
  * @param  x1,y1,width, height
  * @retval None
  */
void CT6963CDriver::SectorClear(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 801184c:	b590      	push	{r4, r7, lr}
 801184e:	b089      	sub	sp, #36	; 0x24
 8011850:	af02      	add	r7, sp, #8
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	60b9      	str	r1, [r7, #8]
 8011856:	607a      	str	r2, [r7, #4]
 8011858:	603b      	str	r3, [r7, #0]
	bool oldInverse;

	oldInverse = Inverse();
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	4618      	mov	r0, r3
 801185e:	f7ff fa09 	bl	8010c74 <_ZN11CGraphicLCD7InverseEv>
 8011862:	4603      	mov	r3, r0
 8011864:	75fb      	strb	r3, [r7, #23]
	Inverse(!oldInverse);
 8011866:	68fa      	ldr	r2, [r7, #12]
 8011868:	7dfb      	ldrb	r3, [r7, #23]
 801186a:	f083 0301 	eor.w	r3, r3, #1
 801186e:	b2db      	uxtb	r3, r3
 8011870:	4610      	mov	r0, r2
 8011872:	4619      	mov	r1, r3
 8011874:	f7ff fa0a 	bl	8010c8c <_ZN11CGraphicLCD7InverseEb>

	Rectangle(x,y,width,height,true);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f103 030c 	add.w	r3, r3, #12
 8011880:	681c      	ldr	r4, [r3, #0]
 8011882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011884:	9300      	str	r3, [sp, #0]
 8011886:	f04f 0301 	mov.w	r3, #1
 801188a:	9301      	str	r3, [sp, #4]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	68b9      	ldr	r1, [r7, #8]
 8011890:	687a      	ldr	r2, [r7, #4]
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	47a0      	blx	r4

	Inverse(oldInverse);
 8011896:	68fa      	ldr	r2, [r7, #12]
 8011898:	7dfb      	ldrb	r3, [r7, #23]
 801189a:	4610      	mov	r0, r2
 801189c:	4619      	mov	r1, r3
 801189e:	f7ff f9f5 	bl	8010c8c <_ZN11CGraphicLCD7InverseEb>
}
 80118a2:	f107 071c 	add.w	r7, r7, #28
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd90      	pop	{r4, r7, pc}
 80118aa:	bf00      	nop

080118ac <_ZN13CT6963CDriver6CircleEhhh>:
  * @brief  draw a circle with center at (cx,cy) and specified radius
  * @param  x1,y1,width,
  * @retval None
  */
void CT6963CDriver::Circle(unsigned char cx, unsigned char cy ,unsigned char radius)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	70f9      	strb	r1, [r7, #3]
 80118b6:	70ba      	strb	r2, [r7, #2]
 80118b8:	707b      	strb	r3, [r7, #1]
	int x, y, xchange, ychange, radiusError;
	x = radius;
 80118ba:	787b      	ldrb	r3, [r7, #1]
 80118bc:	61fb      	str	r3, [r7, #28]
	y = 0;
 80118be:	f04f 0300 	mov.w	r3, #0
 80118c2:	61bb      	str	r3, [r7, #24]
	xchange = 1 - 2 * radius;
 80118c4:	787a      	ldrb	r2, [r7, #1]
 80118c6:	4613      	mov	r3, r2
 80118c8:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80118cc:	1a9b      	subs	r3, r3, r2
 80118ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118d2:	f103 0301 	add.w	r3, r3, #1
 80118d6:	617b      	str	r3, [r7, #20]
	ychange = 1;
 80118d8:	f04f 0301 	mov.w	r3, #1
 80118dc:	613b      	str	r3, [r7, #16]
	radiusError = 0;
 80118de:	f04f 0300 	mov.w	r3, #0
 80118e2:	60fb      	str	r3, [r7, #12]
	while(x >= y)
 80118e4:	e096      	b.n	8011a14 <_ZN13CT6963CDriver6CircleEhhh+0x168>
	{
		SetPixel(cx+x, cy+y);
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	78fb      	ldrb	r3, [r7, #3]
 80118ec:	18d3      	adds	r3, r2, r3
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	b2d9      	uxtb	r1, r3
 80118f4:	78bb      	ldrb	r3, [r7, #2]
 80118f6:	18cb      	adds	r3, r1, r3
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	4611      	mov	r1, r2
 80118fe:	461a      	mov	r2, r3
 8011900:	f7ff fc72 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy+y );
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	b2db      	uxtb	r3, r3
 8011908:	78fa      	ldrb	r2, [r7, #3]
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	b2da      	uxtb	r2, r3
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	b2d9      	uxtb	r1, r3
 8011912:	78bb      	ldrb	r3, [r7, #2]
 8011914:	18cb      	adds	r3, r1, r3
 8011916:	b2db      	uxtb	r3, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	4611      	mov	r1, r2
 801191c:	461a      	mov	r2, r3
 801191e:	f7ff fc63 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy-y );
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	b2db      	uxtb	r3, r3
 8011926:	78fa      	ldrb	r2, [r7, #3]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	b2da      	uxtb	r2, r3
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	b2db      	uxtb	r3, r3
 8011930:	78b9      	ldrb	r1, [r7, #2]
 8011932:	1acb      	subs	r3, r1, r3
 8011934:	b2db      	uxtb	r3, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	4611      	mov	r1, r2
 801193a:	461a      	mov	r2, r3
 801193c:	f7ff fc54 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+x, cy-y );
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	b2da      	uxtb	r2, r3
 8011944:	78fb      	ldrb	r3, [r7, #3]
 8011946:	18d3      	adds	r3, r2, r3
 8011948:	b2da      	uxtb	r2, r3
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	b2db      	uxtb	r3, r3
 801194e:	78b9      	ldrb	r1, [r7, #2]
 8011950:	1acb      	subs	r3, r1, r3
 8011952:	b2db      	uxtb	r3, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	4611      	mov	r1, r2
 8011958:	461a      	mov	r2, r3
 801195a:	f7ff fc45 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy+x );
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	b2da      	uxtb	r2, r3
 8011962:	78fb      	ldrb	r3, [r7, #3]
 8011964:	18d3      	adds	r3, r2, r3
 8011966:	b2da      	uxtb	r2, r3
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	b2d9      	uxtb	r1, r3
 801196c:	78bb      	ldrb	r3, [r7, #2]
 801196e:	18cb      	adds	r3, r1, r3
 8011970:	b2db      	uxtb	r3, r3
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	4611      	mov	r1, r2
 8011976:	461a      	mov	r2, r3
 8011978:	f7ff fc36 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy+x );
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	b2db      	uxtb	r3, r3
 8011980:	78fa      	ldrb	r2, [r7, #3]
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	b2da      	uxtb	r2, r3
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	b2d9      	uxtb	r1, r3
 801198a:	78bb      	ldrb	r3, [r7, #2]
 801198c:	18cb      	adds	r3, r1, r3
 801198e:	b2db      	uxtb	r3, r3
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	4611      	mov	r1, r2
 8011994:	461a      	mov	r2, r3
 8011996:	f7ff fc27 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy-x );
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	b2db      	uxtb	r3, r3
 801199e:	78fa      	ldrb	r2, [r7, #3]
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	78b9      	ldrb	r1, [r7, #2]
 80119aa:	1acb      	subs	r3, r1, r3
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	4611      	mov	r1, r2
 80119b2:	461a      	mov	r2, r3
 80119b4:	f7ff fc18 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy-x );
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	b2da      	uxtb	r2, r3
 80119bc:	78fb      	ldrb	r3, [r7, #3]
 80119be:	18d3      	adds	r3, r2, r3
 80119c0:	b2da      	uxtb	r2, r3
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	78b9      	ldrb	r1, [r7, #2]
 80119c8:	1acb      	subs	r3, r1, r3
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	4611      	mov	r1, r2
 80119d0:	461a      	mov	r2, r3
 80119d2:	f7ff fc09 	bl	80111e8 <_ZN13CT6963CDriver8SetPixelEhh>
		y++;
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	f103 0301 	add.w	r3, r3, #1
 80119dc:	61bb      	str	r3, [r7, #24]
		radiusError += ychange;
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	18d3      	adds	r3, r2, r3
 80119e4:	60fb      	str	r3, [r7, #12]
		ychange += 2;
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	f103 0302 	add.w	r3, r3, #2
 80119ec:	613b      	str	r3, [r7, #16]
		if ( 2*radiusError + xchange > 0 )
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	18d3      	adds	r3, r2, r3
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	dd0b      	ble.n	8011a14 <_ZN13CT6963CDriver6CircleEhhh+0x168>
		{
			x--;
 80119fc:	69fb      	ldr	r3, [r7, #28]
 80119fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a02:	61fb      	str	r3, [r7, #28]
			radiusError += xchange;
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	18d3      	adds	r3, r2, r3
 8011a0a:	60fb      	str	r3, [r7, #12]
			xchange += 2;
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	f103 0302 	add.w	r3, r3, #2
 8011a12:	617b      	str	r3, [r7, #20]
	x = radius;
	y = 0;
	xchange = 1 - 2 * radius;
	ychange = 1;
	radiusError = 0;
	while(x >= y)
 8011a14:	69fa      	ldr	r2, [r7, #28]
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	bfb4      	ite	lt
 8011a1c:	2300      	movlt	r3, #0
 8011a1e:	2301      	movge	r3, #1
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f47f af5f 	bne.w	80118e6 <_ZN13CT6963CDriver6CircleEhhh+0x3a>
			x--;
			radiusError += xchange;
			xchange += 2;
		}
	}
}
 8011a28:	f107 0720 	add.w	r7, r7, #32
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZN13CT6963CDriver6BitmapEPhhhhh>:
  * @brief  writes a bitmap to graphics ram
  * @param  coordinates, width and heigth
  * @retval None
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b086      	sub	sp, #24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	71fa      	strb	r2, [r7, #7]
 8011a3c:	71bb      	strb	r3, [r7, #6]
	unsigned char i, j;

	for(j = 0; j < height; j++)
 8011a3e:	f04f 0300 	mov.w	r3, #0
 8011a42:	75bb      	strb	r3, [r7, #22]
 8011a44:	e04f      	b.n	8011ae6 <_ZN13CT6963CDriver6BitmapEPhhhhh+0xb6>
	{
		GraphicGoTo(x, y + j);
 8011a46:	79ba      	ldrb	r2, [r7, #6]
 8011a48:	7dbb      	ldrb	r3, [r7, #22]
 8011a4a:	18d3      	adds	r3, r2, r3
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	79fa      	ldrb	r2, [r7, #7]
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	4611      	mov	r1, r2
 8011a54:	461a      	mov	r2, r3
 8011a56:	f7ff fa5d 	bl	8010f14 <_ZN13CT6963CDriver11GraphicGoToEhh>
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 8011a5a:	f04f 0300 	mov.w	r3, #0
 8011a5e:	75fb      	strb	r3, [r7, #23]
 8011a60:	e030      	b.n	8011ac4 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x94>
		{
			if(Inverse()){
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7ff f905 	bl	8010c74 <_ZN11CGraphicLCD7InverseEv>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d015      	beq.n	8011a9c <_ZN13CT6963CDriver6BitmapEPhhhhh+0x6c>
				WriteDisplayData(!bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 8011a70:	7df9      	ldrb	r1, [r7, #23]
 8011a72:	7dba      	ldrb	r2, [r7, #22]
 8011a74:	4613      	mov	r3, r2
 8011a76:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011a7a:	1a9b      	subs	r3, r3, r2
 8011a7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a80:	18cb      	adds	r3, r1, r3
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	18d3      	adds	r3, r2, r3
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	bf14      	ite	ne
 8011a8c:	2300      	movne	r3, #0
 8011a8e:	2301      	moveq	r3, #1
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	4619      	mov	r1, r3
 8011a96:	f7ff faab 	bl	8010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>
 8011a9a:	e00f      	b.n	8011abc <_ZN13CT6963CDriver6BitmapEPhhhhh+0x8c>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 8011a9c:	7df9      	ldrb	r1, [r7, #23]
 8011a9e:	7dba      	ldrb	r2, [r7, #22]
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011aa6:	1a9b      	subs	r3, r3, r2
 8011aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011aac:	18cb      	adds	r3, r1, r3
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	18d3      	adds	r3, r2, r3
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	f7ff fa9a 	bl	8010ff0 <_ZN13CT6963CDriver16WriteDisplayDataEh>
	unsigned char i, j;

	for(j = 0; j < height; j++)
	{
		GraphicGoTo(x, y + j);
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	f103 0301 	add.w	r3, r3, #1
 8011ac2:	75fb      	strb	r3, [r7, #23]
 8011ac4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ac8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	7dfa      	ldrb	r2, [r7, #23]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	bf2c      	ite	cs
 8011ad4:	2300      	movcs	r3, #0
 8011ad6:	2301      	movcc	r3, #1
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1c1      	bne.n	8011a62 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x32>
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
	unsigned char i, j;

	for(j = 0; j < height; j++)
 8011ade:	7dbb      	ldrb	r3, [r7, #22]
 8011ae0:	f103 0301 	add.w	r3, r3, #1
 8011ae4:	75bb      	strb	r3, [r7, #22]
 8011ae6:	7dba      	ldrb	r2, [r7, #22]
 8011ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011aec:	429a      	cmp	r2, r3
 8011aee:	bf2c      	ite	cs
 8011af0:	2300      	movcs	r3, #0
 8011af2:	2301      	movcc	r3, #1
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1a5      	bne.n	8011a46 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x16>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
			}
		}
	}
}
 8011afa:	f107 0718 	add.w	r7, r7, #24
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop

08011b04 <_ZN21CT6963_GPIO_InterfaceC1Ev>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/



CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7ff f8ca 	bl	8010ca8 <_ZN13CT6963CDriverC1Ev>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	4a04      	ldr	r2, [pc, #16]	; (8011b28 <_ZN21CT6963_GPIO_InterfaceC1Ev+0x24>)
 8011b18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f107 0708 	add.w	r7, r7, #8
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	0801a9d0 	.word	0x0801a9d0

08011b2c <_ZN21CT6963_GPIO_InterfaceD1Ev>:

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	4a0a      	ldr	r2, [pc, #40]	; (8011b60 <_ZN21CT6963_GPIO_InterfaceD1Ev+0x34>)
 8011b38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff f8c8 	bl	8010cd0 <_ZN13CT6963CDriverD1Ev>
 8011b40:	f04f 0300 	mov.w	r3, #0
 8011b44:	f003 0301 	and.w	r3, r3, #1
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d002      	beq.n	8011b54 <_ZN21CT6963_GPIO_InterfaceD1Ev+0x28>
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f006 fd7e 	bl	8018650 <_ZdlPv>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f107 0708 	add.w	r7, r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	0801a9d0 	.word	0x0801a9d0

08011b64 <_ZN21CT6963_GPIO_InterfaceD0Ev>:
CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
	// TODO Auto-generated constructor stub

}

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f7ff ffdd 	bl	8011b2c <_ZN21CT6963_GPIO_InterfaceD1Ev>
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f006 fd6c 	bl	8018650 <_ZdlPv>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f107 0708 	add.w	r7, r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <_Z11CheckStatusv>:
  * @brief  reads T6963C status byte
  * @param  None
  * @retval true for display ready
  */
bool CheckStatus(void)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0

	uint16_t tmp;
	GLCD_DATA_INPUT;
 8011b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011b96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011b9a:	6812      	ldr	r2, [r2, #0]
 8011b9c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8011ba0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8011ba4:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 8011ba6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011baa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011bae:	f04f 0120 	mov.w	r1, #32
 8011bb2:	f7fc fd77 	bl	800e6a4 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8011bb6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011bba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011bbe:	f04f 0102 	mov.w	r1, #2
 8011bc2:	f7fc fd6f 	bl	800e6a4 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8011bc6:	f04f 0002 	mov.w	r0, #2
 8011bca:	f006 fcd5 	bl	8018578 <delay_us>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 8011bce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011bd2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011bd6:	f7fc fd49 	bl	800e66c <GPIO_ReadInputData>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011be0:	80fb      	strh	r3, [r7, #6]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8011be2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011be6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011bea:	f04f 0102 	mov.w	r1, #2
 8011bee:	f7fc fd4b 	bl	800e688 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 8011bf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011bf6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011bfa:	f04f 0120 	mov.w	r1, #32
 8011bfe:	f7fc fd43 	bl	800e688 <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8011c02:	f04f 0001 	mov.w	r0, #1
 8011c06:	f006 fcb7 	bl	8018578 <delay_us>

	GLCD_DATA_OUTPUT;
 8011c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011c16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011c1a:	6812      	ldr	r2, [r2, #0]
 8011c1c:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8011c20:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 8011c24:	601a      	str	r2, [r3, #0]

	return ((tmp&0x03)==0x03);
 8011c26:	88fb      	ldrh	r3, [r7, #6]
 8011c28:	f003 0303 	and.w	r3, r3, #3
 8011c2c:	2b03      	cmp	r3, #3
 8011c2e:	bf14      	ite	ne
 8011c30:	2300      	movne	r3, #0
 8011c32:	2301      	moveq	r3, #1
 8011c34:	b2db      	uxtb	r3, r3
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	f107 0708 	add.w	r7, r7, #8
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <_ZN21CT6963_GPIO_Interface12HardwareInitEv>:
/**
  * @brief  initialize Hardware to drive the display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::HardwareInit(void){
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStructure;
	// activate Clock for Io Ports used
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8011c48:	f04f 0002 	mov.w	r0, #2
 8011c4c:	f04f 0101 	mov.w	r1, #1
 8011c50:	f7fd f8ee 	bl	800ee30 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC , ENABLE);
 8011c54:	f04f 0004 	mov.w	r0, #4
 8011c58:	f04f 0101 	mov.w	r1, #1
 8011c5c:	f7fd f8e8 	bl	800ee30 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE , ENABLE);
 8011c60:	f04f 0010 	mov.w	r0, #16
 8011c64:	f04f 0101 	mov.w	r1, #1
 8011c68:	f7fd f8e2 	bl	800ee30 <RCC_AHB1PeriphClockCmd>

	// all pins as pp outputs with no pull
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8011c6c:	f04f 0301 	mov.w	r3, #1
 8011c70:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8011c72:	f04f 0300 	mov.w	r3, #0
 8011c76:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8011c78:	f04f 0300 	mov.w	r3, #0
 8011c7c:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8011c7e:	f04f 0301 	mov.w	r3, #1
 8011c82:	737b      	strb	r3, [r7, #13]

	//Control pins CD and RD
	GPIO_InitStructure.GPIO_Pin = GLCD_CD | GLCD_RD;
 8011c84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c88:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_CD_RD,&GPIO_InitStructure);
 8011c8a:	f107 0308 	add.w	r3, r7, #8
 8011c8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011c92:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011c96:	4619      	mov	r1, r3
 8011c98:	f7fc fc20 	bl	800e4dc <GPIO_Init>
	//Control pins WR, CE and RST
	GPIO_InitStructure.GPIO_Pin = GLCD_WR | GLCD_CE | GLCD_RESET;
 8011c9c:	f640 0303 	movw	r3, #2051	; 0x803
 8011ca0:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_WR_CE,&GPIO_InitStructure);
 8011ca2:	f107 0308 	add.w	r3, r7, #8
 8011ca6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011caa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011cae:	4619      	mov	r1, r3
 8011cb0:	f7fc fc14 	bl	800e4dc <GPIO_Init>

	// data pins are high byte
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8011cb4:	f04f 0302 	mov.w	r3, #2
 8011cb8:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Pin = GLCD_DATA_PORT_MASK;
 8011cba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8011cbe:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_DATA_PORT,&GPIO_InitStructure);
 8011cc0:	f107 0308 	add.w	r3, r7, #8
 8011cc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011cc8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011ccc:	4619      	mov	r1, r3
 8011cce:	f7fc fc05 	bl	800e4dc <GPIO_Init>

	//Set all Control pins to high level
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD | GLCD_RD);	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR | GLCD_CE );
 8011cd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011cd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011cda:	f04f 0130 	mov.w	r1, #48	; 0x30
 8011cde:	f7fc fcd3 	bl	800e688 <GPIO_SetBits>
 8011ce2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011ce6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011cea:	f04f 0103 	mov.w	r1, #3
 8011cee:	f7fc fccb 	bl	800e688 <GPIO_SetBits>

	init_us_timer(); //delay timer init
 8011cf2:	f006 fc6f 	bl	80185d4 <init_us_timer>

}
 8011cf6:	f107 0710 	add.w	r7, r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop

08011d00 <_ZN21CT6963_GPIO_Interface5ResetEv>:
/**
  * @brief  Reset the Display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::Reset(void){
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 8011d08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011d0c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011d10:	f640 0102 	movw	r1, #2050	; 0x802
 8011d14:	f7fc fcc6 	bl	800e6a4 <GPIO_ResetBits>

	vTaskDelay(20);  // sleep 20 ms
 8011d18:	f04f 0014 	mov.w	r0, #20
 8011d1c:	f000 fe6a 	bl	80129f4 <vTaskDelay>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 8011d20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011d24:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011d28:	f640 0102 	movw	r1, #2050	; 0x802
 8011d2c:	f7fc fcac 	bl	800e688 <GPIO_SetBits>

}
 8011d30:	f107 0708 	add.w	r7, r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZN21CT6963_GPIO_Interface12WriteCommandEh>:
/**
  * @brief  writes a command
  * @param  command
  * @retval None
  */
void CT6963_GPIO_Interface::WriteCommand(const unsigned char command){
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	460b      	mov	r3, r1
 8011d42:	70fb      	strb	r3, [r7, #3]

	while(!CheckStatus());
 8011d44:	bf00      	nop
 8011d46:	f7ff ff1d 	bl	8011b84 <_Z11CheckStatusv>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	f083 0301 	eor.w	r3, r3, #1
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1f7      	bne.n	8011d46 <_ZN21CT6963_GPIO_Interface12WriteCommandEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 8011d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011d5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011d62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011d66:	6952      	ldr	r2, [r2, #20]
 8011d68:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8011d6c:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= (command << (GLCD_DATA_OFFSET)); // lowbyte will stay as is in this write
 8011d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011d7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011d7e:	6952      	ldr	r2, [r2, #20]
 8011d80:	4611      	mov	r1, r2
 8011d82:	78fa      	ldrb	r2, [r7, #3]
 8011d84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8011d88:	430a      	orrs	r2, r1
 8011d8a:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8011d8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011d90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011d94:	f04f 0101 	mov.w	r1, #1
 8011d98:	f7fc fc84 	bl	800e6a4 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8011d9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011da0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011da4:	f04f 0102 	mov.w	r1, #2
 8011da8:	f7fc fc7c 	bl	800e6a4 <GPIO_ResetBits>

	delay_us(c_iDelayFore);   // time for display to read the data
 8011dac:	f04f 0002 	mov.w	r0, #2
 8011db0:	f006 fbe2 	bl	8018578 <delay_us>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8011db4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011db8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011dbc:	f04f 0102 	mov.w	r1, #2
 8011dc0:	f7fc fc62 	bl	800e688 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8011dc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011dc8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011dcc:	f04f 0101 	mov.w	r1, #1
 8011dd0:	f7fc fc5a 	bl	800e688 <GPIO_SetBits>


	delay_us(c_iDelayAfter);
 8011dd4:	f04f 0001 	mov.w	r0, #1
 8011dd8:	f006 fbce 	bl	8018578 <delay_us>
}
 8011ddc:	f107 0708 	add.w	r7, r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <_ZN21CT6963_GPIO_Interface9WriteDataEh>:
/**
  * @brief  writes a data
  * @param  data
  * @retval None
  */
void CT6963_GPIO_Interface::WriteData(const unsigned char data){
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	460b      	mov	r3, r1
 8011dee:	70fb      	strb	r3, [r7, #3]
	while(!CheckStatus());
 8011df0:	bf00      	nop
 8011df2:	f7ff fec7 	bl	8011b84 <_Z11CheckStatusv>
 8011df6:	4603      	mov	r3, r0
 8011df8:	f083 0301 	eor.w	r3, r3, #1
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1f7      	bne.n	8011df2 <_ZN21CT6963_GPIO_Interface9WriteDataEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 8011e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011e0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011e0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011e12:	6952      	ldr	r2, [r2, #20]
 8011e14:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8011e18:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= ((uint16_t)data << GLCD_DATA_OFFSET); // lowbyte will stay as is in this write
 8011e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011e26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011e2a:	6952      	ldr	r2, [r2, #20]
 8011e2c:	4611      	mov	r1, r2
 8011e2e:	78fa      	ldrb	r2, [r7, #3]
 8011e30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8011e34:	430a      	orrs	r2, r1
 8011e36:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 8011e38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011e3c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011e40:	f04f 0110 	mov.w	r1, #16
 8011e44:	f7fc fc2e 	bl	800e6a4 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8011e48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011e4c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011e50:	f04f 0101 	mov.w	r1, #1
 8011e54:	f7fc fc26 	bl	800e6a4 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8011e58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011e5c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011e60:	f04f 0102 	mov.w	r1, #2
 8011e64:	f7fc fc1e 	bl	800e6a4 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8011e68:	f04f 0002 	mov.w	r0, #2
 8011e6c:	f006 fb84 	bl	8018578 <delay_us>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8011e70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011e74:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011e78:	f04f 0102 	mov.w	r1, #2
 8011e7c:	f7fc fc04 	bl	800e688 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 8011e80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011e84:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011e88:	f04f 0110 	mov.w	r1, #16
 8011e8c:	f7fc fbfc 	bl	800e688 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8011e90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011e94:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011e98:	f04f 0101 	mov.w	r1, #1
 8011e9c:	f7fc fbf4 	bl	800e688 <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8011ea0:	f04f 0001 	mov.w	r0, #1
 8011ea4:	f006 fb68 	bl	8018578 <delay_us>
}
 8011ea8:	f107 0708 	add.w	r7, r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <_ZN21CT6963_GPIO_Interface8ReadDataEv>:
/**
  * @brief  reads data from display
  * @param  None
  * @retval data from display
  */
unsigned char CT6963_GPIO_Interface::ReadData(){
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	while(!CheckStatus());
 8011eb8:	bf00      	nop
 8011eba:	f7ff fe63 	bl	8011b84 <_Z11CheckStatusv>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	f083 0301 	eor.w	r3, r3, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d1f7      	bne.n	8011eba <_ZN21CT6963_GPIO_Interface8ReadDataEv+0xa>

	GLCD_DATA_INPUT;
 8011eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ece:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011ed6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011eda:	6812      	ldr	r2, [r2, #0]
 8011edc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8011ee0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8011ee4:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD );
 8011ee6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011eea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011eee:	f04f 0120 	mov.w	r1, #32
 8011ef2:	f7fc fbd7 	bl	800e6a4 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD );
 8011ef6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011efa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011efe:	f04f 0110 	mov.w	r1, #16
 8011f02:	f7fc fbcf 	bl	800e6a4 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 8011f06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011f0a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011f0e:	f04f 0102 	mov.w	r1, #2
 8011f12:	f7fc fbc7 	bl	800e6a4 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8011f16:	f04f 0002 	mov.w	r0, #2
 8011f1a:	f006 fb2d 	bl	8018578 <delay_us>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 8011f1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011f22:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011f26:	f7fc fba1 	bl	800e66c <GPIO_ReadInputData>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011f30:	81fb      	strh	r3, [r7, #14]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 8011f32:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011f36:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011f3a:	f04f 0102 	mov.w	r1, #2
 8011f3e:	f7fc fba3 	bl	800e688 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD );
 8011f42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011f46:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011f4a:	f04f 0110 	mov.w	r1, #16
 8011f4e:	f7fc fb9b 	bl	800e688 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD );
 8011f52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011f56:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011f5a:	f04f 0120 	mov.w	r1, #32
 8011f5e:	f7fc fb93 	bl	800e688 <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8011f62:	f04f 0001 	mov.w	r0, #1
 8011f66:	f006 fb07 	bl	8018578 <delay_us>

	GLCD_DATA_OUTPUT;
 8011f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011f76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011f7a:	6812      	ldr	r2, [r2, #0]
 8011f7c:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8011f80:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 8011f84:	601a      	str	r2, [r3, #0]
	return (unsigned char)tmp;
 8011f86:	89fb      	ldrh	r3, [r7, #14]
 8011f88:	b2db      	uxtb	r3, r3
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f107 0710 	add.w	r7, r7, #16
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <_ZN5CTask13EnterCriticalEv>:
    inline static void Yeld() { taskYIELD(); }

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void EnterCritical() { taskENTER_CRITICAL(); }
 8011f94:	b580      	push	{r7, lr}
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	f000 fa9e 	bl	80124d8 <vPortEnterCritical>
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop

08011fa0 <_ZN5CTask12ExitCriticalEv>:

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	f000 faae 	bl	8012504 <vPortExitCritical>
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop

08011fac <_ZN12AManagedTask12HardwareInitEv>:
	 * The framework calls this function before the scheduler start. The default implementation simply return true.
	 * Override this method to perform task specific hardware initialization that does not use FreeRTOS API.
	 *
	 * @return true if success, false otherwise.
	 */
	virtual bool HardwareInit() { return true; }
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	f04f 0301 	mov.w	r3, #1
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f107 070c 	add.w	r7, r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bc80      	pop	{r7}
 8011fc2:	4770      	bx	lr

08011fc4 <_ZN9CFreeRTOS15SuspendAllTasksEv>:
	static void EndScheduler() { vTaskEndScheduler(); }

	/**
	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
	 */
	static void SuspendAllTasks() { vTaskSuspendAll(); }
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	f000 fd80 	bl	8012acc <vTaskSuspendAll>
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop

08011fd0 <_ZN9CFreeRTOS14ResumeAllTasksEv>:

	/**
	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
	 */
	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	f000 fd8c 	bl	8012af0 <xTaskResumeAll>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	4618      	mov	r0, r3
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop

08011fe0 <_ZN12AManagedTaskC1Ev>:
#include "AManagedTask.h"
#include "CFreeRTOS.h"

AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;

AManagedTask::AManagedTask() {
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4618      	mov	r0, r3
 8011fec:	f000 f938 	bl	8012260 <_ZN5CTaskC1Ev>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	4a08      	ldr	r2, [pc, #32]	; (8012014 <_ZN12AManagedTaskC1Ev+0x34>)
 8011ff4:	601a      	str	r2, [r3, #0]
	m_pNextManagedTask = NULL;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f04f 0200 	mov.w	r2, #0
 8011ffc:	609a      	str	r2, [r3, #8]
	AddToManagedTask(this);
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	6879      	ldr	r1, [r7, #4]
 8012002:	f000 f87b 	bl	80120fc <_ZN12AManagedTask16AddToManagedTaskEPS_>
}
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	4618      	mov	r0, r3
 801200a:	f107 0708 	add.w	r7, r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	0801e348 	.word	0x0801e348

08012018 <_ZN12AManagedTaskD1Ev>:

AManagedTask::~AManagedTask() {
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	4a0c      	ldr	r2, [pc, #48]	; (8012054 <_ZN12AManagedTaskD1Ev+0x3c>)
 8012024:	601a      	str	r2, [r3, #0]
	RemoveFromManagedTask(this);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	6879      	ldr	r1, [r7, #4]
 801202a:	f000 f88f 	bl	801214c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>
}
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 f92e 	bl	8012290 <_ZN5CTaskD1Ev>
 8012034:	f04f 0300 	mov.w	r3, #0
 8012038:	f003 0301 	and.w	r3, r3, #1
 801203c:	b2db      	uxtb	r3, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	d002      	beq.n	8012048 <_ZN12AManagedTaskD1Ev+0x30>
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f006 fb04 	bl	8018650 <_ZdlPv>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	4618      	mov	r0, r3
 801204c:	f107 0708 	add.w	r7, r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	0801e348 	.word	0x0801e348

08012058 <_ZN12AManagedTaskD0Ev>:
AManagedTask::AManagedTask() {
	m_pNextManagedTask = NULL;
	AddToManagedTask(this);
}

AManagedTask::~AManagedTask() {
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
	RemoveFromManagedTask(this);
}
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f7ff ffd9 	bl	8012018 <_ZN12AManagedTaskD1Ev>
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f006 faf2 	bl	8018650 <_ZdlPv>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	4618      	mov	r0, r3
 8012070:	f107 0708 	add.w	r7, r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <_ZN12AManagedTask6CreateEPKctm>:

portBASE_TYPE AManagedTask::Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) {
 8012078:	b590      	push	{r4, r7, lr}
 801207a:	b087      	sub	sp, #28
 801207c:	af02      	add	r7, sp, #8
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	60b9      	str	r1, [r7, #8]
 8012082:	603b      	str	r3, [r7, #0]
 8012084:	4613      	mov	r3, r2
 8012086:	80fb      	strh	r3, [r7, #6]
	return OnCreate(pcName, usStackDepth, uxPriority) &&
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f103 031c 	add.w	r3, r3, #28
 8012090:	681c      	ldr	r4, [r3, #0]
 8012092:	88fb      	ldrh	r3, [r7, #6]
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	68b9      	ldr	r1, [r7, #8]
 8012098:	461a      	mov	r2, r3
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	47a0      	blx	r4
 801209e:	4603      	mov	r3, r0
			CTask::Create(AManagedTask::taskControlFunc, pcName, usStackDepth, this, uxPriority);
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d013      	beq.n	80120cc <_ZN12AManagedTask6CreateEPKctm+0x54>
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	88fb      	ldrh	r3, [r7, #6]
 80120a8:	68f9      	ldr	r1, [r7, #12]
 80120aa:	9100      	str	r1, [sp, #0]
 80120ac:	6839      	ldr	r1, [r7, #0]
 80120ae:	9101      	str	r1, [sp, #4]
 80120b0:	4610      	mov	r0, r2
 80120b2:	f242 01dd 	movw	r1, #8413	; 0x20dd
 80120b6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	f000 f944 	bl	8012348 <_ZN5CTask6CreateEPFvPvEPKctS0_m>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d002      	beq.n	80120cc <_ZN12AManagedTask6CreateEPKctm+0x54>
 80120c6:	f04f 0301 	mov.w	r3, #1
 80120ca:	e001      	b.n	80120d0 <_ZN12AManagedTask6CreateEPKctm+0x58>
 80120cc:	f04f 0300 	mov.w	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	f107 0714 	add.w	r7, r7, #20
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd90      	pop	{r4, r7, pc}
 80120da:	bf00      	nop

080120dc <_ZN12AManagedTask15taskControlFuncEPv>:

void AManagedTask::taskControlFunc(void *pParams) {
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
	static_cast<AManagedTask *>(pParams)->Run();
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f103 0318 	add.w	r3, r3, #24
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	4798      	blx	r3
}
 80120f2:	f107 0708 	add.w	r7, r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop

080120fc <_ZN12AManagedTask16AddToManagedTaskEPS_>:

void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
	EnterCritical();
 8012106:	f7ff ff45 	bl	8011f94 <_ZN5CTask13EnterCriticalEv>
	// is the first element?
	if (s_pManagedTaskListHead == NULL) {
 801210a:	f640 1378 	movw	r3, #2424	; 0x978
 801210e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d106      	bne.n	8012126 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x2a>
		s_pManagedTaskListHead = this;
 8012118:	f640 1378 	movw	r3, #2424	; 0x978
 801211c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	e00c      	b.n	8012140 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x44>
	}
	else {
		// add the task to the head of the managed task list.
		m_pNextManagedTask = s_pManagedTaskListHead;
 8012126:	f640 1378 	movw	r3, #2424	; 0x978
 801212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	609a      	str	r2, [r3, #8]
		s_pManagedTaskListHead = this;
 8012134:	f640 1378 	movw	r3, #2424	; 0x978
 8012138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	601a      	str	r2, [r3, #0]
	}
	ExitCritical();
 8012140:	f7ff ff2e 	bl	8011fa0 <_ZN5CTask12ExitCriticalEv>
}
 8012144:	f107 0708 	add.w	r7, r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>:

void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
	// search for the task to remove in the managed task list
	// is it the first element?
	EnterCritical();
 8012156:	f7ff ff1d 	bl	8011f94 <_ZN5CTask13EnterCriticalEv>
	if (pTaskToRemove == s_pManagedTaskListHead) {
 801215a:	f640 1378 	movw	r3, #2424	; 0x978
 801215e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	429a      	cmp	r2, r3
 8012168:	d109      	bne.n	801217e <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x32>
		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	689a      	ldr	r2, [r3, #8]
 801216e:	f640 1378 	movw	r3, #2424	; 0x978
 8012172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012176:	601a      	str	r2, [r3, #0]
		ExitCritical();
 8012178:	f7ff ff12 	bl	8011fa0 <_ZN5CTask12ExitCriticalEv>
 801217c:	e025      	b.n	80121ca <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7e>
	}
	else {
		ExitCritical();
 801217e:	f7ff ff0f 	bl	8011fa0 <_ZN5CTask12ExitCriticalEv>
		CFreeRTOS::SuspendAllTasks();
 8012182:	f7ff ff1f 	bl	8011fc4 <_ZN9CFreeRTOS15SuspendAllTasksEv>
		AManagedTask *pTask = s_pManagedTaskListHead;
 8012186:	f640 1378 	movw	r3, #2424	; 0x978
 801218a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	60fb      	str	r3, [r7, #12]
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8012192:	e002      	b.n	801219a <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x4e>
			pTask = pTask->m_pNextManagedTask;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	60fb      	str	r3, [r7, #12]
	}
	else {
		ExitCritical();
		CFreeRTOS::SuspendAllTasks();
		AManagedTask *pTask = s_pManagedTaskListHead;
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d007      	beq.n	80121b0 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	689a      	ldr	r2, [r3, #8]
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d002      	beq.n	80121b0 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 80121aa:	f04f 0301 	mov.w	r3, #1
 80121ae:	e001      	b.n	80121b4 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x68>
 80121b0:	f04f 0300 	mov.w	r3, #0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1ed      	bne.n	8012194 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x48>
			pTask = pTask->m_pNextManagedTask;
		}
		if (pTask != NULL) { // Check to be sure that the task is in the list
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d003      	beq.n	80121c6 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7a>
			// remove the thask from the list
			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	689a      	ldr	r2, [r3, #8]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	609a      	str	r2, [r3, #8]
		}
		CFreeRTOS::ResumeAllTasks();
 80121c6:	f7ff ff03 	bl	8011fd0 <_ZN9CFreeRTOS14ResumeAllTasksEv>
	}
}
 80121ca:	f107 0710 	add.w	r7, r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop

080121d4 <_ZN12AManagedTask27InitHardwareForManagedTasksEv>:

bool AManagedTask::InitHardwareForManagedTasks() {
 80121d4:	b590      	push	{r4, r7, lr}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
	bool bRes = true;
 80121da:	f04f 0301 	mov.w	r3, #1
 80121de:	71fb      	strb	r3, [r7, #7]
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 80121e0:	f640 1378 	movw	r3, #2424	; 0x978
 80121e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	603b      	str	r3, [r7, #0]
 80121ec:	e011      	b.n	8012212 <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x3e>
		bRes &= pTask->HardwareInit();
 80121ee:	79fc      	ldrb	r4, [r7, #7]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f103 0314 	add.w	r3, r3, #20
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	6838      	ldr	r0, [r7, #0]
 80121fc:	4798      	blx	r3
 80121fe:	4603      	mov	r3, r0
 8012200:	4023      	ands	r3, r4
 8012202:	2b00      	cmp	r3, #0
 8012204:	bf0c      	ite	eq
 8012206:	2300      	moveq	r3, #0
 8012208:	2301      	movne	r3, #1
 801220a:	71fb      	strb	r3, [r7, #7]
	}
}

bool AManagedTask::InitHardwareForManagedTasks() {
	bool bRes = true;
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	689b      	ldr	r3, [r3, #8]
 8012210:	603b      	str	r3, [r7, #0]
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	bf0c      	ite	eq
 8012218:	2300      	moveq	r3, #0
 801221a:	2301      	movne	r3, #1
 801221c:	b2db      	uxtb	r3, r3
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1e5      	bne.n	80121ee <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x1a>
		bRes &= pTask->HardwareInit();

	return bRes;
 8012222:	79fb      	ldrb	r3, [r7, #7]
}
 8012224:	4618      	mov	r0, r3
 8012226:	f107 070c 	add.w	r7, r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	bd90      	pop	{r4, r7, pc}
 801222e:	bf00      	nop

08012230 <_ZN12IFreeRTOSObjC1Ev>:
#ifndef IFREERTOSPROTOCOL_H_
#define IFREERTOSPROTOCOL_H_

typedef void *xGenericHandle;

class IFreeRTOSObj {
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	4a04      	ldr	r2, [pc, #16]	; (801224c <_ZN12IFreeRTOSObjC1Ev+0x1c>)
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4618      	mov	r0, r3
 8012242:	f107 070c 	add.w	r7, r7, #12
 8012246:	46bd      	mov	sp, r7
 8012248:	bc80      	pop	{r7}
 801224a:	4770      	bx	lr
 801224c:	0801e370 	.word	0x0801e370

08012250 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>:

CFreeRTOS::~CFreeRTOS() {
	// TODO Auto-generated destructor stub
}

bool CFreeRTOS::InitHardwareForManagedTasks() {
 8012250:	b580      	push	{r7, lr}
 8012252:	af00      	add	r7, sp, #0
	return AManagedTask::InitHardwareForManagedTasks();
 8012254:	f7ff ffbe 	bl	80121d4 <_ZN12AManagedTask27InitHardwareForManagedTasksEv>
 8012258:	4603      	mov	r3, r0
}
 801225a:	4618      	mov	r0, r3
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop

08012260 <_ZN5CTaskC1Ev>:

#include "CTask.h"
#include <assert.h>


CTask::CTask() {
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	4618      	mov	r0, r3
 801226c:	f7ff ffe0 	bl	8012230 <_ZN12IFreeRTOSObjC1Ev>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4a06      	ldr	r2, [pc, #24]	; (801228c <_ZN5CTaskC1Ev+0x2c>)
 8012274:	601a      	str	r2, [r3, #0]
	m_handleTask = NULL;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f04f 0200 	mov.w	r2, #0
 801227c:	605a      	str	r2, [r3, #4]
}
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4618      	mov	r0, r3
 8012282:	f107 0708 	add.w	r7, r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	0801e388 	.word	0x0801e388

08012290 <_ZN5CTaskD1Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4a0d      	ldr	r2, [pc, #52]	; (80122d0 <_ZN5CTaskD1Ev+0x40>)
 801229c:	601a      	str	r2, [r3, #0]
	if (IsValid())
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7fe fa6e 	bl	8010780 <_ZNK5CTask7IsValidEv>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d002      	beq.n	80122b0 <_ZN5CTaskD1Ev+0x20>
		Delete();
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 f87a 	bl	80123a4 <_ZN5CTask6DeleteEv>
}
 80122b0:	f04f 0300 	mov.w	r3, #0
 80122b4:	f003 0301 	and.w	r3, r3, #1
 80122b8:	b2db      	uxtb	r3, r3
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <_ZN5CTaskD1Ev+0x34>
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f006 f9c6 	bl	8018650 <_ZdlPv>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	4618      	mov	r0, r3
 80122c8:	f107 0708 	add.w	r7, r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	0801e388 	.word	0x0801e388

080122d4 <_ZN5CTaskD0Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff ffd7 	bl	8012290 <_ZN5CTaskD1Ev>
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f006 f9b4 	bl	8018650 <_ZdlPv>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	4618      	mov	r0, r3
 80122ec:	f107 0708 	add.w	r7, r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <_ZN5CTask6AttachEPv>:

void CTask::Attach(xGenericHandle handle) {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d10f      	bne.n	8012324 <_ZN5CTask6AttachEPv+0x30>
 8012304:	f649 0088 	movw	r0, #39048	; 0x9888
 8012308:	f6c0 0001 	movt	r0, #2049	; 0x801
 801230c:	f04f 011b 	mov.w	r1, #27
 8012310:	f24e 32a0 	movw	r2, #58272	; 0xe3a0
 8012314:	f6c0 0201 	movt	r2, #2049	; 0x801
 8012318:	f649 03a8 	movw	r3, #39080	; 0x98a8
 801231c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8012320:	f7f4 fba8 	bl	8006a74 <__assert_func>

	if (IsValid()) {
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	4798      	blx	r3
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d002      	beq.n	801233a <_ZN5CTask6AttachEPv+0x46>
		Delete();
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f835 	bl	80123a4 <_ZN5CTask6DeleteEv>
	}
	m_handleTask = handle;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	683a      	ldr	r2, [r7, #0]
 801233e:	605a      	str	r2, [r3, #4]
}
 8012340:	f107 0708 	add.w	r7, r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <_ZN5CTask6CreateEPFvPvEPKctS0_m>:

portBASE_TYPE CTask::Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b08a      	sub	sp, #40	; 0x28
 801234c:	af04      	add	r7, sp, #16
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE res;
	xTaskHandle handle;
	res = xTaskCreate(pvTaskCode, (const signed char*)pcName, usStackDepth, pvParameters, uxPriority, &handle);
 8012356:	887b      	ldrh	r3, [r7, #2]
 8012358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801235a:	9200      	str	r2, [sp, #0]
 801235c:	f107 0210 	add.w	r2, r7, #16
 8012360:	9201      	str	r2, [sp, #4]
 8012362:	f04f 0200 	mov.w	r2, #0
 8012366:	9202      	str	r2, [sp, #8]
 8012368:	f04f 0200 	mov.w	r2, #0
 801236c:	9203      	str	r2, [sp, #12]
 801236e:	68b8      	ldr	r0, [r7, #8]
 8012370:	6879      	ldr	r1, [r7, #4]
 8012372:	461a      	mov	r2, r3
 8012374:	6a3b      	ldr	r3, [r7, #32]
 8012376:	f000 fa07 	bl	8012788 <xTaskGenericCreate>
 801237a:	4603      	mov	r3, r0
 801237c:	617b      	str	r3, [r7, #20]
	if (res == pdTRUE)
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	2b01      	cmp	r3, #1
 8012382:	d108      	bne.n	8012396 <_ZN5CTask6CreateEPFvPvEPKctS0_m+0x4e>
		Attach(handle);
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f103 0304 	add.w	r3, r3, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	693a      	ldr	r2, [r7, #16]
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	4611      	mov	r1, r2
 8012394:	4798      	blx	r3

	return res;
 8012396:	697b      	ldr	r3, [r7, #20]
}
 8012398:	4618      	mov	r0, r3
 801239a:	f107 0718 	add.w	r7, r7, #24
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop

080123a4 <_ZN5CTask6DeleteEv>:

	return res;
}


void CTask::Delete() {
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
	if (m_handleTask != NULL) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d008      	beq.n	80123c6 <_ZN5CTask6DeleteEv+0x22>
#if ( INCLUDE_vTaskDelete == 1 )
		vTaskDelete(m_handleTask);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f000 fabb 	bl	8012934 <vTaskDelete>
#else
		vTaskSuspend(m_handleTask);
#endif
		m_handleTask = NULL;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f04f 0200 	mov.w	r2, #0
 80123c4:	605a      	str	r2, [r3, #4]
	}
}
 80123c6:	f107 0708 	add.w	r7, r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop

080123d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80123d0:	b480      	push	{r7}
 80123d2:	b085      	sub	sp, #20
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f1a3 0304 	sub.w	r3, r3, #4
 80123e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80123ea:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f1a3 0304 	sub.w	r3, r3, #4
 80123f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	f1a3 0304 	sub.w	r3, r3, #4
 8012400:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f04f 0200 	mov.w	r2, #0
 8012408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f1a3 0314 	sub.w	r3, r3, #20
 8012410:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 801241e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f06f 0202 	mvn.w	r2, #2
 8012426:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 8012428:	68fb      	ldr	r3, [r7, #12]
}
 801242a:	4618      	mov	r0, r3
 801242c:	f107 0714 	add.w	r7, r7, #20
 8012430:	46bd      	mov	sp, r7
 8012432:	bc80      	pop	{r7}
 8012434:	4770      	bx	lr
 8012436:	bf00      	nop

08012438 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012438:	4b06      	ldr	r3, [pc, #24]	; (8012454 <pxCurrentTCBConst2>)
 801243a:	6819      	ldr	r1, [r3, #0]
 801243c:	6808      	ldr	r0, [r1, #0]
 801243e:	f850 eb04 	ldr.w	lr, [r0], #4
 8012442:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012446:	f380 8809 	msr	PSP, r0
 801244a:	f04f 0000 	mov.w	r0, #0
 801244e:	f380 8811 	msr	BASEPRI, r0
 8012452:	4770      	bx	lr

08012454 <pxCurrentTCBConst2>:
 8012454:	2000097c 	.word	0x2000097c

08012458 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 8012458:	4803      	ldr	r0, [pc, #12]	; (8012468 <vPortStartFirstTask+0x10>)
 801245a:	6800      	ldr	r0, [r0, #0]
 801245c:	6800      	ldr	r0, [r0, #0]
 801245e:	f380 8808 	msr	MSP, r0
 8012462:	b662      	cpsie	i
 8012464:	df00      	svc	0
 8012466:	bf00      	nop
 8012468:	e000ed08 	.word	0xe000ed08

0801246c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 801246c:	b580      	push	{r7, lr}
 801246e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8012470:	f64e 5320 	movw	r3, #60704	; 0xed20
 8012474:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8012478:	f64e 5220 	movw	r2, #60704	; 0xed20
 801247c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8012480:	6812      	ldr	r2, [r2, #0]
 8012482:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8012486:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8012488:	f64e 5320 	movw	r3, #60704	; 0xed20
 801248c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8012490:	f64e 5220 	movw	r2, #60704	; 0xed20
 8012494:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8012498:	6812      	ldr	r2, [r2, #0]
 801249a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801249e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80124a0:	f000 f894 	bl	80125cc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80124a4:	f640 1308 	movw	r3, #2312	; 0x908
 80124a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124ac:	f04f 0200 	mov.w	r2, #0
 80124b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80124b2:	f7ff ffd1 	bl	8012458 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80124b6:	f04f 0300 	mov.w	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop

080124c0 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 80124c0:	b480      	push	{r7}
 80124c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80124c4:	f64e 5304 	movw	r3, #60676	; 0xed04
 80124c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80124cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124d0:	601a      	str	r2, [r3, #0]
}
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bc80      	pop	{r7}
 80124d6:	4770      	bx	lr

080124d8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80124d8:	b480      	push	{r7}
 80124da:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80124dc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80124e0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80124e4:	f640 1308 	movw	r3, #2312	; 0x908
 80124e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f103 0201 	add.w	r2, r3, #1
 80124f2:	f640 1308 	movw	r3, #2312	; 0x908
 80124f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124fa:	601a      	str	r2, [r3, #0]
}
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bc80      	pop	{r7}
 8012500:	4770      	bx	lr
 8012502:	bf00      	nop

08012504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012504:	b480      	push	{r7}
 8012506:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8012508:	f640 1308 	movw	r3, #2312	; 0x908
 801250c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f103 32ff 	add.w	r2, r3, #4294967295
 8012516:	f640 1308 	movw	r3, #2312	; 0x908
 801251a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801251e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8012520:	f640 1308 	movw	r3, #2312	; 0x908
 8012524:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d103      	bne.n	8012536 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 801252e:	f04f 0000 	mov.w	r0, #0
 8012532:	f380 8811 	msr	BASEPRI, r0
	}
}
 8012536:	46bd      	mov	sp, r7
 8012538:	bc80      	pop	{r7}
 801253a:	4770      	bx	lr

0801253c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801253c:	f3ef 8009 	mrs	r0, PSP
 8012540:	4b13      	ldr	r3, [pc, #76]	; (8012590 <pxCurrentTCBConst>)
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012548:	f01e 0f10 	tst.w	lr, #16
 801254c:	bf08      	it	eq
 801254e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012552:	f840 ed04 	str.w	lr, [r0, #-4]!
 8012556:	6010      	str	r0, [r2, #0]
 8012558:	e92d 4008 	stmdb	sp!, {r3, lr}
 801255c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8012560:	f380 8811 	msr	BASEPRI, r0
 8012564:	f000 fc4a 	bl	8012dfc <vTaskSwitchContext>
 8012568:	f04f 0000 	mov.w	r0, #0
 801256c:	f380 8811 	msr	BASEPRI, r0
 8012570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012574:	6819      	ldr	r1, [r3, #0]
 8012576:	6808      	ldr	r0, [r1, #0]
 8012578:	f850 eb04 	ldr.w	lr, [r0], #4
 801257c:	f01e 0f10 	tst.w	lr, #16
 8012580:	bf08      	it	eq
 8012582:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801258a:	f380 8809 	msr	PSP, r0
 801258e:	4770      	bx	lr

08012590 <pxCurrentTCBConst>:
 8012590:	2000097c 	.word	0x2000097c

08012594 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801259a:	f64e 5304 	movw	r3, #60676	; 0xed04
 801259e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80125a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125a6:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80125a8:	f04f 0300 	mov.w	r3, #0
 80125ac:	607b      	str	r3, [r7, #4]
 80125ae:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80125b2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80125b6:	f000 fb45 	bl	8012c44 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80125ba:	f04f 0000 	mov.w	r0, #0
 80125be:	f380 8811 	msr	BASEPRI, r0
}
 80125c2:	f107 0708 	add.w	r7, r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop

080125cc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80125cc:	b480      	push	{r7}
 80125ce:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80125d0:	f24e 0314 	movw	r3, #57364	; 0xe014
 80125d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80125d8:	f640 1214 	movw	r2, #2324	; 0x914
 80125dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80125e0:	6811      	ldr	r1, [r2, #0]
 80125e2:	f248 521f 	movw	r2, #34079	; 0x851f
 80125e6:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 80125ea:	fba2 0201 	umull	r0, r2, r2, r1
 80125ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80125f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80125f6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80125f8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80125fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8012600:	f04f 0207 	mov.w	r2, #7
 8012604:	601a      	str	r2, [r3, #0]
}
 8012606:	46bd      	mov	sp, r7
 8012608:	bc80      	pop	{r7}
 801260a:	4770      	bx	lr

0801260c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f103 0208 	add.w	r2, r3, #8
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f04f 32ff 	mov.w	r2, #4294967295
 8012624:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f103 0208 	add.w	r2, r3, #8
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f103 0208 	add.w	r2, r3, #8
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f04f 0200 	mov.w	r2, #0
 8012640:	601a      	str	r2, [r3, #0]
}
 8012642:	f107 070c 	add.w	r7, r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	bc80      	pop	{r7}
 801264a:	4770      	bx	lr

0801264c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f04f 0200 	mov.w	r2, #0
 801265a:	611a      	str	r2, [r3, #16]
}
 801265c:	f107 070c 	add.w	r7, r7, #12
 8012660:	46bd      	mov	sp, r7
 8012662:	bc80      	pop	{r7}
 8012664:	4770      	bx	lr
 8012666:	bf00      	nop

08012668 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8012668:	b480      	push	{r7}
 801266a:	b085      	sub	sp, #20
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	461a      	mov	r2, r3
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	685a      	ldr	r2, [r3, #4]
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	683a      	ldr	r2, [r7, #0]
 8012690:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	683a      	ldr	r2, [r7, #0]
 801269c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f103 0201 	add.w	r2, r3, #1
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	601a      	str	r2, [r3, #0]
}
 80126b0:	f107 0714 	add.w	r7, r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bc80      	pop	{r7}
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop

080126bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126d2:	d103      	bne.n	80126dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	691b      	ldr	r3, [r3, #16]
 80126d8:	60fb      	str	r3, [r7, #12]
 80126da:	e00e      	b.n	80126fa <vListInsert+0x3e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f103 0308 	add.w	r3, r3, #8
 80126e2:	60fb      	str	r3, [r7, #12]
 80126e4:	e002      	b.n	80126ec <vListInsert+0x30>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	461a      	mov	r2, r3
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d9f5      	bls.n	80126e6 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	461a      	mov	r2, r3
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	68fa      	ldr	r2, [r7, #12]
 8012710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	683a      	ldr	r2, [r7, #0]
 8012716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	f103 0201 	add.w	r2, r3, #1
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	601a      	str	r2, [r3, #0]
}
 801272a:	f107 0714 	add.w	r7, r7, #20
 801272e:	46bd      	mov	sp, r7
 8012730:	bc80      	pop	{r7}
 8012732:	4770      	bx	lr

08012734 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	6892      	ldr	r2, [r2, #8]
 8012744:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	6852      	ldr	r2, [r2, #4]
 801274e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	691b      	ldr	r3, [r3, #16]
 8012754:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	685a      	ldr	r2, [r3, #4]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	429a      	cmp	r2, r3
 801275e:	d103      	bne.n	8012768 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	689a      	ldr	r2, [r3, #8]
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f04f 0200 	mov.w	r2, #0
 801276e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	f103 32ff 	add.w	r2, r3, #4294967295
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	601a      	str	r2, [r3, #0]
}
 801277c:	f107 0714 	add.w	r7, r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	bc80      	pop	{r7}
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop

08012788 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08a      	sub	sp, #40	; 0x28
 801278c:	af02      	add	r7, sp, #8
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	603b      	str	r3, [r7, #0]
 8012794:	4613      	mov	r3, r2
 8012796:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8012798:	88fb      	ldrh	r3, [r7, #6]
 801279a:	4618      	mov	r0, r3
 801279c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801279e:	f000 fd07 	bl	80131b0 <prvAllocateTCBAndStack>
 80127a2:	4603      	mov	r3, r0
 80127a4:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 80a5 	beq.w	80128f8 <xTaskGenericCreate+0x170>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127b2:	88fb      	ldrh	r3, [r7, #6]
 80127b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80127b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80127bc:	18d3      	adds	r3, r2, r3
 80127be:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	f023 0307 	bic.w	r3, r3, #7
 80127c6:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 80127c8:	88fb      	ldrh	r3, [r7, #6]
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	69b8      	ldr	r0, [r7, #24]
 80127ce:	68b9      	ldr	r1, [r7, #8]
 80127d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127d4:	f000 fbc4 	bl	8012f60 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127d8:	6978      	ldr	r0, [r7, #20]
 80127da:	68f9      	ldr	r1, [r7, #12]
 80127dc:	683a      	ldr	r2, [r7, #0]
 80127de:	f7ff fdf7 	bl	80123d0 <pxPortInitialiseStack>
 80127e2:	4602      	mov	r2, r0
 80127e4:	69bb      	ldr	r3, [r7, #24]
 80127e6:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d002      	beq.n	80127f4 <xTaskGenericCreate+0x6c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80127ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f0:	69ba      	ldr	r2, [r7, #24]
 80127f2:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80127f4:	f7ff fe70 	bl	80124d8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80127f8:	f640 2358 	movw	r3, #2648	; 0xa58
 80127fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	f103 0201 	add.w	r2, r3, #1
 8012806:	f640 2358 	movw	r3, #2648	; 0xa58
 801280a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801280e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8012810:	f640 137c 	movw	r3, #2428	; 0x97c
 8012814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d10f      	bne.n	801283e <xTaskGenericCreate+0xb6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 801281e:	f640 137c 	movw	r3, #2428	; 0x97c
 8012822:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012826:	69ba      	ldr	r2, [r7, #24]
 8012828:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 801282a:	f640 2358 	movw	r3, #2648	; 0xa58
 801282e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d118      	bne.n	801286a <xTaskGenericCreate+0xe2>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8012838:	f000 fbd6 	bl	8012fe8 <prvInitialiseTaskLists>
 801283c:	e015      	b.n	801286a <xTaskGenericCreate+0xe2>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 801283e:	f640 2368 	movw	r3, #2664	; 0xa68
 8012842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d10e      	bne.n	801286a <xTaskGenericCreate+0xe2>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 801284c:	f640 137c 	movw	r3, #2428	; 0x97c
 8012850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801285a:	429a      	cmp	r2, r3
 801285c:	d805      	bhi.n	801286a <xTaskGenericCreate+0xe2>
					{
						pxCurrentTCB = pxNewTCB;
 801285e:	f640 137c 	movw	r3, #2428	; 0x97c
 8012862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012866:	69ba      	ldr	r2, [r7, #24]
 8012868:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801286e:	f640 2360 	movw	r3, #2656	; 0xa60
 8012872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	429a      	cmp	r2, r3
 801287a:	d906      	bls.n	801288a <xTaskGenericCreate+0x102>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012880:	f640 2360 	movw	r3, #2656	; 0xa60
 8012884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012888:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 801288a:	f640 237c 	movw	r3, #2684	; 0xa7c
 801288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f103 0201 	add.w	r2, r3, #1
 8012898:	f640 237c 	movw	r3, #2684	; 0xa7c
 801289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128a0:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128a6:	f640 2364 	movw	r3, #2660	; 0xa64
 80128aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d906      	bls.n	80128c2 <xTaskGenericCreate+0x13a>
 80128b4:	69bb      	ldr	r3, [r7, #24]
 80128b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b8:	f640 2364 	movw	r3, #2660	; 0xa64
 80128bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c6:	4613      	mov	r3, r2
 80128c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80128cc:	189b      	adds	r3, r3, r2
 80128ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80128d2:	461a      	mov	r2, r3
 80128d4:	f640 1380 	movw	r3, #2432	; 0x980
 80128d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128dc:	18d2      	adds	r2, r2, r3
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	f103 0304 	add.w	r3, r3, #4
 80128e4:	4610      	mov	r0, r2
 80128e6:	4619      	mov	r1, r3
 80128e8:	f7ff febe 	bl	8012668 <vListInsertEnd>

			xReturn = pdPASS;
 80128ec:	f04f 0301 	mov.w	r3, #1
 80128f0:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80128f2:	f7ff fe07 	bl	8012504 <vPortExitCritical>
 80128f6:	e002      	b.n	80128fe <xTaskGenericCreate+0x176>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80128f8:	f04f 33ff 	mov.w	r3, #4294967295
 80128fc:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d111      	bne.n	8012928 <xTaskGenericCreate+0x1a0>
	{
		if( xSchedulerRunning != pdFALSE )
 8012904:	f640 2368 	movw	r3, #2664	; 0xa68
 8012908:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00a      	beq.n	8012928 <xTaskGenericCreate+0x1a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8012912:	f640 137c 	movw	r3, #2428	; 0x97c
 8012916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012920:	429a      	cmp	r2, r3
 8012922:	d201      	bcs.n	8012928 <xTaskGenericCreate+0x1a0>
			{
				portYIELD_WITHIN_API();
 8012924:	f7ff fdcc 	bl	80124c0 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8012928:	69fb      	ldr	r3, [r7, #28]
}
 801292a:	4618      	mov	r0, r3
 801292c:	f107 0720 	add.w	r7, r7, #32
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 801293c:	f7ff fdcc 	bl	80124d8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 8012940:	f640 137c 	movw	r3, #2428	; 0x97c
 8012944:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	429a      	cmp	r2, r3
 801294e:	d102      	bne.n	8012956 <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
 8012950:	f04f 0300 	mov.w	r3, #0
 8012954:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d105      	bne.n	8012968 <vTaskDelete+0x34>
 801295c:	f640 137c 	movw	r3, #2428	; 0x97c
 8012960:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	e000      	b.n	801296a <vTaskDelete+0x36>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f103 0304 	add.w	r3, r3, #4
 8012972:	4618      	mov	r0, r3
 8012974:	f7ff fede 	bl	8012734 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801297c:	2b00      	cmp	r3, #0
 801297e:	d005      	beq.n	801298c <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f103 0318 	add.w	r3, r3, #24
 8012986:	4618      	mov	r0, r3
 8012988:	f7ff fed4 	bl	8012734 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	f103 0304 	add.w	r3, r3, #4
 8012992:	f640 2028 	movw	r0, #2600	; 0xa28
 8012996:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801299a:	4619      	mov	r1, r3
 801299c:	f7ff fe64 	bl	8012668 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80129a0:	f640 233c 	movw	r3, #2620	; 0xa3c
 80129a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f103 0201 	add.w	r2, r3, #1
 80129ae:	f640 233c 	movw	r3, #2620	; 0xa3c
 80129b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129b6:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80129b8:	f640 237c 	movw	r3, #2684	; 0xa7c
 80129bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f103 0201 	add.w	r2, r3, #1
 80129c6:	f640 237c 	movw	r3, #2684	; 0xa7c
 80129ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129ce:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80129d0:	f7ff fd98 	bl	8012504 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 80129d4:	f640 2368 	movw	r3, #2664	; 0xa68
 80129d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d004      	beq.n	80129ec <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d101      	bne.n	80129ec <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
 80129e8:	f7ff fd6a 	bl	80124c0 <vPortYieldFromISR>
			}
		}
	}
 80129ec:	f107 0710 	add.w	r7, r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80129fc:	f04f 0300 	mov.w	r3, #0
 8012a00:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d01a      	beq.n	8012a3e <vTaskDelay+0x4a>
		{
			vTaskSuspendAll();
 8012a08:	f000 f860 	bl	8012acc <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8012a0c:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	18d3      	adds	r3, r2, r3
 8012a1a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8012a1c:	f640 137c 	movw	r3, #2428	; 0x97c
 8012a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f103 0304 	add.w	r3, r3, #4
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7ff fe82 	bl	8012734 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8012a30:	68b8      	ldr	r0, [r7, #8]
 8012a32:	f000 fb77 	bl	8013124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012a36:	f000 f85b 	bl	8012af0 <xTaskResumeAll>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <vTaskDelay+0x54>
		{
			portYIELD_WITHIN_API();
 8012a44:	f7ff fd3c 	bl	80124c0 <vPortYieldFromISR>
		}
	}
 8012a48:	f107 0710 	add.w	r7, r7, #16
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b086      	sub	sp, #24
 8012a54:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8012a56:	f04f 0300 	mov.w	r3, #0
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	f640 2354 	movw	r3, #2644	; 0xa54
 8012a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a64:	9301      	str	r3, [sp, #4]
 8012a66:	f04f 0300 	mov.w	r3, #0
 8012a6a:	9302      	str	r3, [sp, #8]
 8012a6c:	f04f 0300 	mov.w	r3, #0
 8012a70:	9303      	str	r3, [sp, #12]
 8012a72:	f642 703d 	movw	r0, #12093	; 0x2f3d
 8012a76:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012a7a:	f649 01b8 	movw	r1, #39096	; 0x98b8
 8012a7e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8012a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a86:	f04f 0300 	mov.w	r3, #0
 8012a8a:	f7ff fe7d 	bl	8012788 <xTaskGenericCreate>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	607b      	str	r3, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d115      	bne.n	8012ac4 <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8012a98:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8012a9c:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8012aa0:	f640 2368 	movw	r3, #2664	; 0xa68
 8012aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012aa8:	f04f 0201 	mov.w	r2, #1
 8012aac:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8012aae:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ab6:	f04f 0200 	mov.w	r2, #0
 8012aba:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012abc:	f005 fd8a 	bl	80185d4 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ac0:	f7ff fcd4 	bl	801246c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8012ac4:	f107 0708 	add.w	r7, r7, #8
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012acc:	b480      	push	{r7}
 8012ace:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8012ad0:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f103 0201 	add.w	r2, r3, #1
 8012ade:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ae6:	601a      	str	r2, [r3, #0]
}
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bc80      	pop	{r7}
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop

08012af0 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8012af0:	b590      	push	{r4, r7, lr}
 8012af2:	b083      	sub	sp, #12
 8012af4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8012af6:	f04f 0300 	mov.w	r3, #0
 8012afa:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012afc:	f7ff fcec 	bl	80124d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012b00:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8012b0e:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b16:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8012b18:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f040 8086 	bne.w	8012c34 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8012b28:	f640 2358 	movw	r3, #2648	; 0xa58
 8012b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d07e      	beq.n	8012c34 <xTaskResumeAll+0x144>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8012b36:	f04f 0300 	mov.w	r3, #0
 8012b3a:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8012b3c:	e03d      	b.n	8012bba <xTaskResumeAll+0xca>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8012b3e:	f640 2314 	movw	r3, #2580	; 0xa14
 8012b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
 8012b4c:	f104 0318 	add.w	r3, r4, #24
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff fdef 	bl	8012734 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8012b56:	f104 0304 	add.w	r3, r4, #4
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7ff fdea 	bl	8012734 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8012b60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b62:	f640 2364 	movw	r3, #2660	; 0xa64
 8012b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d905      	bls.n	8012b7c <xTaskResumeAll+0x8c>
 8012b70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b72:	f640 2364 	movw	r3, #2660	; 0xa64
 8012b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b7a:	601a      	str	r2, [r3, #0]
 8012b7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b7e:	4613      	mov	r3, r2
 8012b80:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012b84:	189b      	adds	r3, r3, r2
 8012b86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f640 1380 	movw	r3, #2432	; 0x980
 8012b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b94:	18d2      	adds	r2, r2, r3
 8012b96:	f104 0304 	add.w	r3, r4, #4
 8012b9a:	4610      	mov	r0, r2
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	f7ff fd63 	bl	8012668 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012ba4:	f640 137c 	movw	r3, #2428	; 0x97c
 8012ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d302      	bcc.n	8012bba <xTaskResumeAll+0xca>
					{
						xYieldRequired = pdTRUE;
 8012bb4:	f04f 0301 	mov.w	r3, #1
 8012bb8:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8012bba:	f640 2314 	movw	r3, #2580	; 0xa14
 8012bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d1ba      	bne.n	8012b3e <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8012bc8:	f640 2370 	movw	r3, #2672	; 0xa70
 8012bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d018      	beq.n	8012c08 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8012bd6:	e00d      	b.n	8012bf4 <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
 8012bd8:	f000 f834 	bl	8012c44 <vTaskIncrementTick>
						--uxMissedTicks;
 8012bdc:	f640 2370 	movw	r3, #2672	; 0xa70
 8012be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f103 32ff 	add.w	r2, r3, #4294967295
 8012bea:	f640 2370 	movw	r3, #2672	; 0xa70
 8012bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bf2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8012bf4:	f640 2370 	movw	r3, #2672	; 0xa70
 8012bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d1ea      	bne.n	8012bd8 <xTaskResumeAll+0xe8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8012c02:	f04f 0301 	mov.w	r3, #1
 8012c06:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d006      	beq.n	8012c1c <xTaskResumeAll+0x12c>
 8012c0e:	f640 2374 	movw	r3, #2676	; 0xa74
 8012c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d10b      	bne.n	8012c34 <xTaskResumeAll+0x144>
				{
					xAlreadyYielded = pdTRUE;
 8012c1c:	f04f 0301 	mov.w	r3, #1
 8012c20:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8012c22:	f640 2374 	movw	r3, #2676	; 0xa74
 8012c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c2a:	f04f 0200 	mov.w	r2, #0
 8012c2e:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8012c30:	f7ff fc46 	bl	80124c0 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8012c34:	f7ff fc66 	bl	8012504 <vPortExitCritical>

	return xAlreadyYielded;
 8012c38:	687b      	ldr	r3, [r7, #4]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f107 070c 	add.w	r7, r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd90      	pop	{r4, r7, pc}

08012c44 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8012c4a:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	f040 80c0 	bne.w	8012dda <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8012c5a:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f103 0201 	add.w	r2, r3, #1
 8012c68:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c70:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8012c72:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d140      	bne.n	8012d02 <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8012c80:	f640 230c 	movw	r3, #2572	; 0xa0c
 8012c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8012c8c:	f640 2310 	movw	r3, #2576	; 0xa10
 8012c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	f640 230c 	movw	r3, #2572	; 0xa0c
 8012c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c9e:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8012ca0:	f640 2310 	movw	r3, #2576	; 0xa10
 8012ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ca8:	68fa      	ldr	r2, [r7, #12]
 8012caa:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8012cac:	f640 2378 	movw	r3, #2680	; 0xa78
 8012cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	f103 0201 	add.w	r2, r3, #1
 8012cba:	f640 2378 	movw	r3, #2680	; 0xa78
 8012cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cc2:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012cc4:	f640 230c 	movw	r3, #2572	; 0xa0c
 8012cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d107      	bne.n	8012ce4 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8012cd4:	f640 130c 	movw	r3, #2316	; 0x90c
 8012cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce0:	601a      	str	r2, [r3, #0]
 8012ce2:	e00e      	b.n	8012d02 <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012ce4:	f640 230c 	movw	r3, #2572	; 0xa0c
 8012ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	685a      	ldr	r2, [r3, #4]
 8012cf8:	f640 130c 	movw	r3, #2316	; 0x90c
 8012cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d00:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8012d02:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	f640 130c 	movw	r3, #2316	; 0x90c
 8012d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d36b      	bcc.n	8012df2 <vTaskIncrementTick+0x1ae>
 8012d1a:	f640 230c 	movw	r3, #2572	; 0xa0c
 8012d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d107      	bne.n	8012d3a <vTaskIncrementTick+0xf6>
 8012d2a:	f640 130c 	movw	r3, #2316	; 0x90c
 8012d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295
 8012d36:	601a      	str	r2, [r3, #0]
 8012d38:	e05b      	b.n	8012df2 <vTaskIncrementTick+0x1ae>
 8012d3a:	f640 230c 	movw	r3, #2572	; 0xa0c
 8012d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	60bb      	str	r3, [r7, #8]
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	607b      	str	r3, [r7, #4]
 8012d50:	f640 235c 	movw	r3, #2652	; 0xa5c
 8012d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d206      	bcs.n	8012d6e <vTaskIncrementTick+0x12a>
 8012d60:	f640 130c 	movw	r3, #2316	; 0x90c
 8012d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	601a      	str	r2, [r3, #0]
 8012d6c:	e041      	b.n	8012df2 <vTaskIncrementTick+0x1ae>
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	f103 0304 	add.w	r3, r3, #4
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7ff fcdd 	bl	8012734 <vListRemove>
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d005      	beq.n	8012d8e <vTaskIncrementTick+0x14a>
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	f103 0318 	add.w	r3, r3, #24
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7ff fcd3 	bl	8012734 <vListRemove>
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d92:	f640 2364 	movw	r3, #2660	; 0xa64
 8012d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d906      	bls.n	8012dae <vTaskIncrementTick+0x16a>
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012da4:	f640 2364 	movw	r3, #2660	; 0xa64
 8012da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012dac:	601a      	str	r2, [r3, #0]
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db2:	4613      	mov	r3, r2
 8012db4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012db8:	189b      	adds	r3, r3, r2
 8012dba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	f640 1380 	movw	r3, #2432	; 0x980
 8012dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012dc8:	18d2      	adds	r2, r2, r3
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	f103 0304 	add.w	r3, r3, #4
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	f7ff fc48 	bl	8012668 <vListInsertEnd>
 8012dd8:	e79f      	b.n	8012d1a <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 8012dda:	f640 2370 	movw	r3, #2672	; 0xa70
 8012dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f103 0201 	add.w	r2, r3, #1
 8012de8:	f640 2370 	movw	r3, #2672	; 0xa70
 8012dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012df0:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8012df2:	f107 0710 	add.w	r7, r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop

08012dfc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8012e02:	f640 236c 	movw	r3, #2668	; 0xa6c
 8012e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d007      	beq.n	8012e20 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8012e10:	f640 2374 	movw	r3, #2676	; 0xa74
 8012e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e18:	f04f 0201 	mov.w	r2, #1
 8012e1c:	601a      	str	r2, [r3, #0]
 8012e1e:	e089      	b.n	8012f34 <vTaskSwitchContext+0x138>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8012e20:	f005 fb64 	bl	80184ec <get_us_time>
 8012e24:	4602      	mov	r2, r0
 8012e26:	460b      	mov	r3, r1
 8012e28:	4613      	mov	r3, r2
 8012e2a:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8012e2c:	f640 137c 	movw	r3, #2428	; 0x97c
 8012e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8012e38:	f640 2380 	movw	r3, #2688	; 0xa80
 8012e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	1ac3      	subs	r3, r0, r3
 8012e46:	18cb      	adds	r3, r1, r3
 8012e48:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8012e4a:	f640 2380 	movw	r3, #2688	; 0xa80
 8012e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8012e56:	f640 137c 	movw	r3, #2428	; 0x97c
 8012e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	f640 137c 	movw	r3, #2428	; 0x97c
 8012e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d81d      	bhi.n	8012eae <vTaskSwitchContext+0xb2>
 8012e72:	f640 137c 	movw	r3, #2428	; 0x97c
 8012e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e7a:	681a      	ldr	r2, [r3, #0]
 8012e7c:	f640 137c 	movw	r3, #2428	; 0x97c
 8012e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8012e8a:	4610      	mov	r0, r2
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	f005 f80f 	bl	8017eb0 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8012e92:	e00c      	b.n	8012eae <vTaskSwitchContext+0xb2>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8012e94:	f640 2364 	movw	r3, #2660	; 0xa64
 8012e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f103 32ff 	add.w	r2, r3, #4294967295
 8012ea2:	f640 2364 	movw	r3, #2660	; 0xa64
 8012ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012eaa:	601a      	str	r2, [r3, #0]
 8012eac:	e000      	b.n	8012eb0 <vTaskSwitchContext+0xb4>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8012eae:	bf00      	nop
 8012eb0:	f640 2364 	movw	r3, #2660	; 0xa64
 8012eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	4613      	mov	r3, r2
 8012ebc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012ec0:	189b      	adds	r3, r3, r2
 8012ec2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f640 1380 	movw	r3, #2432	; 0x980
 8012ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ed0:	18d3      	adds	r3, r2, r3
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d0dd      	beq.n	8012e94 <vTaskSwitchContext+0x98>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8012ed8:	f640 2364 	movw	r3, #2660	; 0xa64
 8012edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012ee8:	189b      	adds	r3, r3, r2
 8012eea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012eee:	461a      	mov	r2, r3
 8012ef0:	f640 1380 	movw	r3, #2432	; 0x980
 8012ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ef8:	18d3      	adds	r3, r2, r3
 8012efa:	603b      	str	r3, [r7, #0]
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	461a      	mov	r2, r3
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	605a      	str	r2, [r3, #4]
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	685a      	ldr	r2, [r3, #4]
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	f103 0308 	add.w	r3, r3, #8
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d105      	bne.n	8012f22 <vTaskSwitchContext+0x126>
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	605a      	str	r2, [r3, #4]
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	f640 137c 	movw	r3, #2428	; 0x97c
 8012f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f32:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
 8012f34:	f107 0708 	add.w	r7, r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	e000      	b.n	8012f48 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8012f46:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8012f48:	f000 f8a0 	bl	801308c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8012f4c:	f640 1380 	movw	r3, #2432	; 0x980
 8012f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	2b01      	cmp	r3, #1
 8012f58:	d9f5      	bls.n	8012f46 <prvIdleTask+0xa>
			{
				taskYIELD();
 8012f5a:	f7ff fab1 	bl	80124c0 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8012f5e:	e7f2      	b.n	8012f46 <prvIdleTask+0xa>

08012f60 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8012f74:	4618      	mov	r0, r3
 8012f76:	68b9      	ldr	r1, [r7, #8]
 8012f78:	f04f 0210 	mov.w	r2, #16
 8012f7c:	f7f5 f98e 	bl	800829c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f04f 0200 	mov.w	r2, #0
 8012f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2b04      	cmp	r3, #4
 8012f8e:	d902      	bls.n	8012f96 <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8012f90:	f04f 0304 	mov.w	r3, #4
 8012f94:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f103 0304 	add.w	r3, r3, #4
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7ff fb4f 	bl	801264c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f103 0318 	add.w	r3, r3, #24
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7ff fb49 	bl	801264c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	68fa      	ldr	r2, [r7, #12]
 8012fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f1c3 0205 	rsb	r2, r3, #5
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	f04f 0200 	mov.w	r2, #0
 8012fd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8012fe0:	f107 0710 	add.w	r7, r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8012fee:	f04f 0300 	mov.w	r3, #0
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	e013      	b.n	801301e <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012ffe:	189b      	adds	r3, r3, r2
 8013000:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013004:	461a      	mov	r2, r3
 8013006:	f640 1380 	movw	r3, #2432	; 0x980
 801300a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801300e:	18d3      	adds	r3, r2, r3
 8013010:	4618      	mov	r0, r3
 8013012:	f7ff fafb 	bl	801260c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f103 0301 	add.w	r3, r3, #1
 801301c:	607b      	str	r3, [r7, #4]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2b04      	cmp	r3, #4
 8013022:	d9e8      	bls.n	8012ff6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8013024:	f640 10e4 	movw	r0, #2532	; 0x9e4
 8013028:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801302c:	f7ff faee 	bl	801260c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8013030:	f640 10f8 	movw	r0, #2552	; 0x9f8
 8013034:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013038:	f7ff fae8 	bl	801260c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 801303c:	f640 2014 	movw	r0, #2580	; 0xa14
 8013040:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013044:	f7ff fae2 	bl	801260c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8013048:	f640 2028 	movw	r0, #2600	; 0xa28
 801304c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8013050:	f7ff fadc 	bl	801260c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8013054:	f640 2040 	movw	r0, #2624	; 0xa40
 8013058:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801305c:	f7ff fad6 	bl	801260c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013060:	f640 230c 	movw	r3, #2572	; 0xa0c
 8013064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013068:	f640 12e4 	movw	r2, #2532	; 0x9e4
 801306c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013070:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013072:	f640 2310 	movw	r3, #2576	; 0xa10
 8013076:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801307a:	f640 12f8 	movw	r2, #2552	; 0x9f8
 801307e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8013082:	601a      	str	r2, [r3, #0]
}
 8013084:	f107 0708 	add.w	r7, r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8013092:	f640 233c 	movw	r3, #2620	; 0xa3c
 8013096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d03c      	beq.n	801311a <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 80130a0:	f7ff fd14 	bl	8012acc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80130a4:	f640 2328 	movw	r3, #2600	; 0xa28
 80130a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	bf14      	ite	ne
 80130b2:	2300      	movne	r3, #0
 80130b4:	2301      	moveq	r3, #1
 80130b6:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80130b8:	f7ff fd1a 	bl	8012af0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d12b      	bne.n	801311a <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80130c2:	f7ff fa09 	bl	80124d8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80130c6:	f640 2328 	movw	r3, #2600	; 0xa28
 80130ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	f103 0304 	add.w	r3, r3, #4
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff fb2a 	bl	8012734 <vListRemove>
					--uxCurrentNumberOfTasks;
 80130e0:	f640 2358 	movw	r3, #2648	; 0xa58
 80130e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80130ee:	f640 2358 	movw	r3, #2648	; 0xa58
 80130f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130f6:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80130f8:	f640 233c 	movw	r3, #2620	; 0xa3c
 80130fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f103 32ff 	add.w	r2, r3, #4294967295
 8013106:	f640 233c 	movw	r3, #2620	; 0xa3c
 801310a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801310e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8013110:	f7ff f9f8 	bl	8012504 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8013114:	6838      	ldr	r0, [r7, #0]
 8013116:	f000 f885 	bl	8013224 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 801311a:	f107 0708 	add.w	r7, r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop

08013124 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 801312c:	f640 137c 	movw	r3, #2428	; 0x97c
 8013130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 801313a:	f640 235c 	movw	r3, #2652	; 0xa5c
 801313e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	429a      	cmp	r2, r3
 8013148:	d210      	bcs.n	801316c <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 801314a:	f640 2310 	movw	r3, #2576	; 0xa10
 801314e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	f640 137c 	movw	r3, #2428	; 0x97c
 8013158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f103 0304 	add.w	r3, r3, #4
 8013162:	4610      	mov	r0, r2
 8013164:	4619      	mov	r1, r3
 8013166:	f7ff faa9 	bl	80126bc <vListInsert>
 801316a:	e01d      	b.n	80131a8 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 801316c:	f640 230c 	movw	r3, #2572	; 0xa0c
 8013170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	f640 137c 	movw	r3, #2428	; 0x97c
 801317a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f103 0304 	add.w	r3, r3, #4
 8013184:	4610      	mov	r0, r2
 8013186:	4619      	mov	r1, r3
 8013188:	f7ff fa98 	bl	80126bc <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 801318c:	f640 130c 	movw	r3, #2316	; 0x90c
 8013190:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	687a      	ldr	r2, [r7, #4]
 8013198:	429a      	cmp	r2, r3
 801319a:	d205      	bcs.n	80131a8 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 801319c:	f640 130c 	movw	r3, #2316	; 0x90c
 80131a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80131a8:	f107 0708 	add.w	r7, r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	4603      	mov	r3, r0
 80131b8:	6039      	str	r1, [r7, #0]
 80131ba:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80131bc:	f04f 0050 	mov.w	r0, #80	; 0x50
 80131c0:	f7f3 ff0a 	bl	8006fd8 <malloc>
 80131c4:	4603      	mov	r3, r0
 80131c6:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d023      	beq.n	8013216 <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d107      	bne.n	80131e4 <prvAllocateTCBAndStack+0x34>
 80131d4:	88fb      	ldrh	r3, [r7, #6]
 80131d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f3 fefc 	bl	8006fd8 <malloc>
 80131e0:	4603      	mov	r3, r0
 80131e2:	e000      	b.n	80131e6 <prvAllocateTCBAndStack+0x36>
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	68fa      	ldr	r2, [r7, #12]
 80131e8:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80131f2:	68f8      	ldr	r0, [r7, #12]
 80131f4:	f7f3 fef8 	bl	8006fe8 <free>
			pxNewTCB = NULL;
 80131f8:	f04f 0300 	mov.w	r3, #0
 80131fc:	60fb      	str	r3, [r7, #12]
 80131fe:	e00a      	b.n	8013216 <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013204:	88fb      	ldrh	r3, [r7, #6]
 8013206:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801320a:	4610      	mov	r0, r2
 801320c:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8013210:	461a      	mov	r2, r3
 8013212:	f7f4 fabd 	bl	8007790 <memset>
		}
	}

	return pxNewTCB;
 8013216:	68fb      	ldr	r3, [r7, #12]
}
 8013218:	4618      	mov	r0, r3
 801321a:	f107 0710 	add.w	r7, r7, #16
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop

08013224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013230:	4618      	mov	r0, r3
 8013232:	f7f3 fed9 	bl	8006fe8 <free>
		vPortFree( pxTCB );
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7f3 fed6 	bl	8006fe8 <free>
	}
 801323c:	f107 0708 	add.w	r7, r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <disk_initialize>:
/* Initialize a Drive                                                    */

DSTATUS disk_initialize (
                         BYTE drv				/* Physical drive nmuber (0..) */
                           )
{ 
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	4603      	mov	r3, r0
 801324c:	71fb      	strb	r3, [r7, #7]
NVIC_InitTypeDef NVIC_InitStructure;
SD_Error Status;

	switch (drv)
 801324e:	79fb      	ldrb	r3, [r7, #7]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d12d      	bne.n	80132b0 <disk_initialize+0x6c>
	{
	case SDIO_DRIVE:

		// SDIO Interrupt ENABLE
		NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
 8013254:	f04f 0331 	mov.w	r3, #49	; 0x31
 8013258:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 801325a:	f04f 0300 	mov.w	r3, #0
 801325e:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8013260:	f04f 0300 	mov.w	r3, #0
 8013264:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8013266:	f04f 0301 	mov.w	r3, #1
 801326a:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 801326c:	f107 0308 	add.w	r3, r7, #8
 8013270:	4618      	mov	r0, r3
 8013272:	f7fa fdb9 	bl	800dde8 <NVIC_Init>
		// DMA2 STREAMx Interrupt ENABLE
		NVIC_InitStructure.NVIC_IRQChannel = SD_SDIO_DMA_IRQn;
 8013276:	f04f 033b 	mov.w	r3, #59	; 0x3b
 801327a:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 801327c:	f04f 0301 	mov.w	r3, #1
 8013280:	727b      	strb	r3, [r7, #9]
		NVIC_Init(&NVIC_InitStructure);
 8013282:	f107 0308 	add.w	r3, r7, #8
 8013286:	4618      	mov	r0, r3
 8013288:	f7fa fdae 	bl	800dde8 <NVIC_Init>


		/*-------------------------- SD Init ----------------------------- */
		Status = SD_Init();
 801328c:	f002 fb8e 	bl	80159ac <SD_Init>
 8013290:	4603      	mov	r3, r0
 8013292:	73fb      	strb	r3, [r7, #15]


		if (Status == SD_OK)
 8013294:	7bfb      	ldrb	r3, [r7, #15]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d107      	bne.n	80132aa <disk_initialize+0x66>
		{
			//SD Card initialized ok.
			/*----------------- Read CSD/CID MSD registers ------------------*/
			Status = SD_GetCardInfo(&SDCardInfo);
 801329a:	f247 5054 	movw	r0, #30036	; 0x7554
 801329e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80132a2:	f002 ff5d 	bl	8016160 <SD_GetCardInfo>
 80132a6:	4603      	mov	r3, r0
 80132a8:	73fb      	strb	r3, [r7, #15]
		}


		if (Status == SD_OK);
			return 0x00;
 80132aa:	f04f 0300 	mov.w	r3, #0
 80132ae:	e001      	b.n	80132b4 <disk_initialize+0x70>

		break;
	}
	return STA_NOINIT;
 80132b0:	f04f 0301 	mov.w	r3, #1
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	f107 0710 	add.w	r7, r7, #16
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop

080132c0 <disk_status>:
/* Return Disk Status                                                    */

DSTATUS disk_status (
                     BYTE drv		/* Physical drive nmuber (0..) */
                       )
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	4603      	mov	r3, r0
 80132c8:	71fb      	strb	r3, [r7, #7]
  switch (drv) 
 80132ca:	79fb      	ldrb	r3, [r7, #7]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d110      	bne.n	80132f2 <disk_status+0x32>
  {
    case SDIO_DRIVE:
    {
      SD_Error status = SD_GetCardInfo(&SDCardInfo);
 80132d0:	f247 5054 	movw	r0, #30036	; 0x7554
 80132d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80132d8:	f002 ff42 	bl	8016160 <SD_GetCardInfo>
 80132dc:	4603      	mov	r3, r0
 80132de:	73fb      	strb	r3, [r7, #15]
      
      if (status != SD_OK)
 80132e0:	7bfb      	ldrb	r3, [r7, #15]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d002      	beq.n	80132ec <disk_status+0x2c>
        return STA_NOINIT;
 80132e6:	f04f 0301 	mov.w	r3, #1
 80132ea:	e004      	b.n	80132f6 <disk_status+0x36>
      else
        return 0x00;
 80132ec:	f04f 0300 	mov.w	r3, #0
 80132f0:	e001      	b.n	80132f6 <disk_status+0x36>
    }
  }
  
  return STA_NOINIT;
 80132f2:	f04f 0301 	mov.w	r3, #1
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	f107 0710 	add.w	r7, r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <disk_read>:
                   BYTE drv,		/* Physical drive nmuber (0..) */
                   BYTE *buff,		/* Data buffer to store read data */
                   DWORD sector,	/* Sector address (LBA) */
                   BYTE count		/* Number of sectors to read (1..255) */
                     )
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b086      	sub	sp, #24
 8013304:	af00      	add	r7, sp, #0
 8013306:	60b9      	str	r1, [r7, #8]
 8013308:	607a      	str	r2, [r7, #4]
 801330a:	4602      	mov	r2, r0
 801330c:	73fa      	strb	r2, [r7, #15]
 801330e:	73bb      	strb	r3, [r7, #14]
	SD_Error status = SD_OK;
 8013310:	f04f 0300 	mov.w	r3, #0
 8013314:	75fb      	strb	r3, [r7, #23]

	switch (drv)
 8013316:	7bfb      	ldrb	r3, [r7, #15]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d11e      	bne.n	801335a <disk_read+0x5a>
	{
	case SDIO_DRIVE:
		status = SD_ReadMultiBlocks((uint8_t*)buff,sector*512,512,count);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	ea4f 2243 	mov.w	r2, r3, lsl #9
 8013322:	7bbb      	ldrb	r3, [r7, #14]
 8013324:	68b8      	ldr	r0, [r7, #8]
 8013326:	4611      	mov	r1, r2
 8013328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801332c:	f003 fb7c 	bl	8016a28 <SD_ReadMultiBlocks>
 8013330:	4603      	mov	r3, r0
 8013332:	75fb      	strb	r3, [r7, #23]

		/* Check if the Transfer is finished */
		status = SD_WaitReadOperation();
 8013334:	f003 fc5e 	bl	8016bf4 <SD_WaitReadOperation>
 8013338:	4603      	mov	r3, r0
 801333a:	75fb      	strb	r3, [r7, #23]

		/* Wait until end of DMA transfer */
		while(SD_GetStatus() != SD_TRANSFER_OK);
 801333c:	bf00      	nop
 801333e:	f002 fbaf 	bl	8015aa0 <SD_GetStatus>
 8013342:	4603      	mov	r3, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1fa      	bne.n	801333e <disk_read+0x3e>

		if (status == SD_OK){
 8013348:	7dfb      	ldrb	r3, [r7, #23]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d102      	bne.n	8013354 <disk_read+0x54>
			return RES_OK;
 801334e:	f04f 0300 	mov.w	r3, #0
 8013352:	e004      	b.n	801335e <disk_read+0x5e>
		}  else {
			return RES_ERROR;
 8013354:	f04f 0301 	mov.w	r3, #1
 8013358:	e001      	b.n	801335e <disk_read+0x5e>
		}
		break;
	}
  return RES_PARERR;
 801335a:	f04f 0304 	mov.w	r3, #4
}
 801335e:	4618      	mov	r0, r3
 8013360:	f107 0718 	add.w	r7, r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <disk_write>:
                    BYTE drv,			/* Physical drive nmuber (0..) */
                    const BYTE *buff,	/* Data to be written */
                    DWORD sector,		/* Sector address (LBA) */
                    BYTE count			/* Number of sectors to write (1..255) */
                      )
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b086      	sub	sp, #24
 801336c:	af00      	add	r7, sp, #0
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
 8013372:	4602      	mov	r2, r0
 8013374:	73fa      	strb	r2, [r7, #15]
 8013376:	73bb      	strb	r3, [r7, #14]
	SD_Error status = SD_OK;
 8013378:	f04f 0300 	mov.w	r3, #0
 801337c:	75fb      	strb	r3, [r7, #23]
	switch (drv)
 801337e:	7bfb      	ldrb	r3, [r7, #15]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d11e      	bne.n	80133c2 <disk_write+0x5a>
	{
	case SDIO_DRIVE:
		status = SD_WriteMultiBlocks((uint8_t*)(buff),sector*512,512,count);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	ea4f 2243 	mov.w	r2, r3, lsl #9
 801338a:	7bbb      	ldrb	r3, [r7, #14]
 801338c:	68b8      	ldr	r0, [r7, #8]
 801338e:	4611      	mov	r1, r2
 8013390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013394:	f003 fc9e 	bl	8016cd4 <SD_WriteMultiBlocks>
 8013398:	4603      	mov	r3, r0
 801339a:	75fb      	strb	r3, [r7, #23]

		/* Check if the Transfer is finished */
		status = SD_WaitWriteOperation();
 801339c:	f003 fdec 	bl	8016f78 <SD_WaitWriteOperation>
 80133a0:	4603      	mov	r3, r0
 80133a2:	75fb      	strb	r3, [r7, #23]

		/* Wait until end of DMA transfer */
		while(SD_GetStatus() != SD_TRANSFER_OK);
 80133a4:	bf00      	nop
 80133a6:	f002 fb7b 	bl	8015aa0 <SD_GetStatus>
 80133aa:	4603      	mov	r3, r0
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d1fa      	bne.n	80133a6 <disk_write+0x3e>

		if (status == SD_OK){
 80133b0:	7dfb      	ldrb	r3, [r7, #23]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d102      	bne.n	80133bc <disk_write+0x54>
			return RES_OK;
 80133b6:	f04f 0300 	mov.w	r3, #0
 80133ba:	e004      	b.n	80133c6 <disk_write+0x5e>
		}  else {
			return RES_ERROR;
 80133bc:	f04f 0301 	mov.w	r3, #1
 80133c0:	e001      	b.n	80133c6 <disk_write+0x5e>
		}
		break;
	}
	return RES_PARERR;
 80133c2:	f04f 0304 	mov.w	r3, #4
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	f107 0718 	add.w	r7, r7, #24
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <disk_ioctl>:
DRESULT disk_ioctl (
                    BYTE drv,		/* Physical drive nmuber (0..) */
                    BYTE ctrl,		/* Control code */
                    void *buff		/* Buffer to send/receive control data */
                      )
{
 80133d0:	b480      	push	{r7}
 80133d2:	b083      	sub	sp, #12
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	460b      	mov	r3, r1
 80133d8:	603a      	str	r2, [r7, #0]
 80133da:	4602      	mov	r2, r0
 80133dc:	71fa      	strb	r2, [r7, #7]
 80133de:	71bb      	strb	r3, [r7, #6]
  switch (drv) 
 80133e0:	79fb      	ldrb	r3, [r7, #7]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d12c      	bne.n	8013440 <disk_ioctl+0x70>
  {
    case SDIO_DRIVE:
    {      
      switch (ctrl)
 80133e6:	79bb      	ldrb	r3, [r7, #6]
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	d828      	bhi.n	801343e <disk_ioctl+0x6e>
 80133ec:	a201      	add	r2, pc, #4	; (adr r2, 80133f4 <disk_ioctl+0x24>)
 80133ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f2:	bf00      	nop
 80133f4:	08013405 	.word	0x08013405
 80133f8:	08013419 	.word	0x08013419
 80133fc:	0801340b 	.word	0x0801340b
 8013400:	08013431 	.word	0x08013431
      {
        case CTRL_SYNC:
          // no synchronization to do since not buffering in this module
          return RES_OK;
 8013404:	f04f 0300 	mov.w	r3, #0
 8013408:	e01c      	b.n	8013444 <disk_ioctl+0x74>
        case GET_SECTOR_SIZE:
          *(WORD*)buff = 512;
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013410:	801a      	strh	r2, [r3, #0]
          return RES_OK;
 8013412:	f04f 0300 	mov.w	r3, #0
 8013416:	e015      	b.n	8013444 <disk_ioctl+0x74>
        case GET_SECTOR_COUNT:
          *(DWORD*)buff = SDCardInfo.CardCapacity / 512;
 8013418:	f247 5354 	movw	r3, #30036	; 0x7554
 801341c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013422:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	601a      	str	r2, [r3, #0]
          return RES_OK;
 801342a:	f04f 0300 	mov.w	r3, #0
 801342e:	e009      	b.n	8013444 <disk_ioctl+0x74>
        case GET_BLOCK_SIZE:
          *(DWORD*)buff = 512;
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013436:	601a      	str	r2, [r3, #0]
          return RES_OK;
 8013438:	f04f 0300 	mov.w	r3, #0
 801343c:	e002      	b.n	8013444 <disk_ioctl+0x74>
          break;
      }
      break;
 801343e:	bf00      	nop
    }
  }
  return RES_PARERR;
 8013440:	f04f 0304 	mov.w	r3, #4
}
 8013444:	4618      	mov	r0, r3
 8013446:	f107 070c 	add.w	r7, r7, #12
 801344a:	46bd      	mov	sp, r7
 801344c:	bc80      	pop	{r7}
 801344e:	4770      	bx	lr

08013450 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
 8013450:	b480      	push	{r7}
 8013452:	b087      	sub	sp, #28
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
	char *d = (char*)dst;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	617b      	str	r3, [r7, #20]
	const char *s = (const char *)src;
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	613b      	str	r3, [r7, #16]
	while (cnt--) *d++ = *s++;
 8013464:	e00b      	b.n	801347e <mem_cpy+0x2e>
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	781a      	ldrb	r2, [r3, #0]
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	701a      	strb	r2, [r3, #0]
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	f103 0301 	add.w	r3, r3, #1
 8013474:	617b      	str	r3, [r7, #20]
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	f103 0301 	add.w	r3, r3, #1
 801347c:	613b      	str	r3, [r7, #16]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2b00      	cmp	r3, #0
 8013482:	bf0c      	ite	eq
 8013484:	2300      	moveq	r3, #0
 8013486:	2301      	movne	r3, #1
 8013488:	b2db      	uxtb	r3, r3
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	f102 32ff 	add.w	r2, r2, #4294967295
 8013490:	607a      	str	r2, [r7, #4]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d1e7      	bne.n	8013466 <mem_cpy+0x16>
}
 8013496:	f107 071c 	add.w	r7, r7, #28
 801349a:	46bd      	mov	sp, r7
 801349c:	bc80      	pop	{r7}
 801349e:	4770      	bx	lr

080134a0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
 80134a0:	b480      	push	{r7}
 80134a2:	b087      	sub	sp, #28
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	607a      	str	r2, [r7, #4]
	char *d = (char*)dst;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	617b      	str	r3, [r7, #20]
	while (cnt--) *d++ = (char)val;
 80134b0:	e007      	b.n	80134c2 <mem_set+0x22>
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	701a      	strb	r2, [r3, #0]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f103 0301 	add.w	r3, r3, #1
 80134c0:	617b      	str	r3, [r7, #20]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	bf0c      	ite	eq
 80134c8:	2300      	moveq	r3, #0
 80134ca:	2301      	movne	r3, #1
 80134cc:	b2db      	uxtb	r3, r3
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80134d4:	607a      	str	r2, [r7, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d1eb      	bne.n	80134b2 <mem_set+0x12>
}
 80134da:	f107 071c 	add.w	r7, r7, #28
 80134de:	46bd      	mov	sp, r7
 80134e0:	bc80      	pop	{r7}
 80134e2:	4770      	bx	lr

080134e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
 80134e4:	b480      	push	{r7}
 80134e6:	b089      	sub	sp, #36	; 0x24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
	const char *d = (const char *)dst, *s = (const char *)src;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	61fb      	str	r3, [r7, #28]
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80134f8:	f04f 0300 	mov.w	r3, #0
 80134fc:	617b      	str	r3, [r7, #20]
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80134fe:	bf00      	nop
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	bf0c      	ite	eq
 8013506:	2300      	moveq	r3, #0
 8013508:	2301      	movne	r3, #1
 801350a:	b2db      	uxtb	r3, r3
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013512:	607a      	str	r2, [r7, #4]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d016      	beq.n	8013546 <mem_cmp+0x62>
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	461a      	mov	r2, r3
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	1ad3      	subs	r3, r2, r3
 8013524:	617b      	str	r3, [r7, #20]
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	2b00      	cmp	r3, #0
 801352a:	bf14      	ite	ne
 801352c:	2300      	movne	r3, #0
 801352e:	2301      	moveq	r3, #1
 8013530:	b2db      	uxtb	r3, r3
 8013532:	69fa      	ldr	r2, [r7, #28]
 8013534:	f102 0201 	add.w	r2, r2, #1
 8013538:	61fa      	str	r2, [r7, #28]
 801353a:	69ba      	ldr	r2, [r7, #24]
 801353c:	f102 0201 	add.w	r2, r2, #1
 8013540:	61ba      	str	r2, [r7, #24]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1dc      	bne.n	8013500 <mem_cmp+0x1c>
	return r;
 8013546:	697b      	ldr	r3, [r7, #20]
}
 8013548:	4618      	mov	r0, r3
 801354a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 801354e:	46bd      	mov	sp, r7
 8013550:	bc80      	pop	{r7}
 8013552:	4770      	bx	lr

08013554 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8013554:	b480      	push	{r7}
 8013556:	b083      	sub	sp, #12
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801355e:	e003      	b.n	8013568 <chk_chr+0x14>
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f103 0301 	add.w	r3, r3, #1
 8013566:	607b      	str	r3, [r7, #4]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d005      	beq.n	801357c <chk_chr+0x28>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	461a      	mov	r2, r3
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	429a      	cmp	r2, r3
 801357a:	d1f1      	bne.n	8013560 <chk_chr+0xc>
	return *str;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	781b      	ldrb	r3, [r3, #0]
}
 8013580:	4618      	mov	r0, r3
 8013582:	f107 070c 	add.w	r7, r7, #12
 8013586:	46bd      	mov	sp, r7
 8013588:	bc80      	pop	{r7}
 801358a:	4770      	bx	lr

0801358c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801359a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 801359c:	68fa      	ldr	r2, [r7, #12]
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d055      	beq.n	8013650 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	791b      	ldrb	r3, [r3, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d039      	beq.n	8013620 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	785a      	ldrb	r2, [r3, #1]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80135b6:	4610      	mov	r0, r2
 80135b8:	4619      	mov	r1, r3
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	f04f 0301 	mov.w	r3, #1
 80135c0:	f7ff fed2 	bl	8013368 <disk_write>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d002      	beq.n	80135d0 <move_window+0x44>
				return FR_DISK_ERR;
 80135ca:	f04f 0301 	mov.w	r3, #1
 80135ce:	e041      	b.n	8013654 <move_window+0xc8>
			fs->wflag = 0;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f04f 0200 	mov.w	r2, #0
 80135d6:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	69db      	ldr	r3, [r3, #28]
 80135e0:	18d2      	adds	r2, r2, r3
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d91b      	bls.n	8013620 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	78db      	ldrb	r3, [r3, #3]
 80135ec:	72fb      	strb	r3, [r7, #11]
 80135ee:	e014      	b.n	801361a <move_window+0x8e>
					wsect += fs->sects_fat;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	69db      	ldr	r3, [r3, #28]
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	18d3      	adds	r3, r2, r3
 80135f8:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drive, fs->win, wsect, 1);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	785a      	ldrb	r2, [r3, #1]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8013604:	4610      	mov	r0, r2
 8013606:	4619      	mov	r1, r3
 8013608:	68fa      	ldr	r2, [r7, #12]
 801360a:	f04f 0301 	mov.w	r3, #1
 801360e:	f7ff feab 	bl	8013368 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8013612:	7afb      	ldrb	r3, [r7, #11]
 8013614:	f103 33ff 	add.w	r3, r3, #4294967295
 8013618:	72fb      	strb	r3, [r7, #11]
 801361a:	7afb      	ldrb	r3, [r7, #11]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d8e7      	bhi.n	80135f0 <move_window+0x64>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d014      	beq.n	8013650 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	785a      	ldrb	r2, [r3, #1]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8013630:	4610      	mov	r0, r2
 8013632:	4619      	mov	r1, r3
 8013634:	683a      	ldr	r2, [r7, #0]
 8013636:	f04f 0301 	mov.w	r3, #1
 801363a:	f7ff fe61 	bl	8013300 <disk_read>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	d002      	beq.n	801364a <move_window+0xbe>
				return FR_DISK_ERR;
 8013644:	f04f 0301 	mov.w	r3, #1
 8013648:	e004      	b.n	8013654 <move_window+0xc8>
			fs->winsect = sector;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	683a      	ldr	r2, [r7, #0]
 801364e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}

	return FR_OK;
 8013650:	f04f 0300 	mov.w	r3, #0
}
 8013654:	4618      	mov	r0, r3
 8013656:	f107 0710 	add.w	r7, r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
 801365e:	bf00      	nop

08013660 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f04f 0100 	mov.w	r1, #0
 801366e:	f7ff ff8d 	bl	801358c <move_window>
 8013672:	4603      	mov	r3, r0
 8013674:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013676:	7bfb      	ldrb	r3, [r7, #15]
 8013678:	2b00      	cmp	r3, #0
 801367a:	f040 80ab 	bne.w	80137d4 <sync+0x174>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	2b03      	cmp	r3, #3
 8013684:	f040 8097 	bne.w	80137b6 <sync+0x156>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	7a9b      	ldrb	r3, [r3, #10]
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 8092 	beq.w	80137b6 <sync+0x156>
			fs->winsect = 0;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f04f 0200 	mov.w	r2, #0
 8013698:	631a      	str	r2, [r3, #48]	; 0x30
			mem_set(fs->win, 0, 512);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80136a0:	4618      	mov	r0, r3
 80136a2:	f04f 0100 	mov.w	r1, #0
 80136a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136aa:	f7ff fef9 	bl	80134a0 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f04f 0255 	mov.w	r2, #85	; 0x55
 80136b4:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 80136be:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f04f 0252 	mov.w	r2, #82	; 0x52
 80136c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f04f 0252 	mov.w	r2, #82	; 0x52
 80136d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f04f 0261 	mov.w	r2, #97	; 0x61
 80136dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f04f 0241 	mov.w	r2, #65	; 0x41
 80136e6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f04f 0272 	mov.w	r2, #114	; 0x72
 80136f0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f04f 0272 	mov.w	r2, #114	; 0x72
 80136fa:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f04f 0241 	mov.w	r2, #65	; 0x41
 8013704:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f04f 0261 	mov.w	r2, #97	; 0x61
 801370e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	b2da      	uxtb	r2, r3
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	b29b      	uxth	r3, r3
 8013724:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8013728:	b29b      	uxth	r3, r3
 801372a:	b2da      	uxtb	r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	691b      	ldr	r3, [r3, #16]
 8013736:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801373a:	b2da      	uxtb	r2, r3
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	691b      	ldr	r3, [r3, #16]
 8013746:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801374a:	b2da      	uxtb	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	b2da      	uxtb	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	b29b      	uxth	r3, r3
 8013764:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8013768:	b29b      	uxth	r3, r3
 801376a:	b2da      	uxtb	r2, r3
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	68db      	ldr	r3, [r3, #12]
 8013776:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801377a:	b2da      	uxtb	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	68db      	ldr	r3, [r3, #12]
 8013786:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801378a:	b2da      	uxtb	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	7859      	ldrb	r1, [r3, #1]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	695b      	ldr	r3, [r3, #20]
 80137a0:	4608      	mov	r0, r1
 80137a2:	4611      	mov	r1, r2
 80137a4:	461a      	mov	r2, r3
 80137a6:	f04f 0301 	mov.w	r3, #1
 80137aa:	f7ff fddd 	bl	8013368 <disk_write>
			fs->fsi_flag = 0;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f04f 0200 	mov.w	r2, #0
 80137b4:	729a      	strb	r2, [r3, #10]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	785b      	ldrb	r3, [r3, #1]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f04f 0100 	mov.w	r1, #0
 80137c0:	f04f 0200 	mov.w	r2, #0
 80137c4:	f7ff fe04 	bl	80133d0 <disk_ioctl>
 80137c8:	4603      	mov	r3, r0
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d002      	beq.n	80137d4 <sync+0x174>
			res = FR_DISK_ERR;
 80137ce:	f04f 0301 	mov.w	r3, #1
 80137d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	f107 0710 	add.w	r7, r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b086      	sub	sp, #24
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d904      	bls.n	80137fa <get_fat+0x1a>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6a1a      	ldr	r2, [r3, #32]
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d802      	bhi.n	8013800 <get_fat+0x20>
		return 1;
 80137fa:	f04f 0301 	mov.w	r3, #1
 80137fe:	e0e3      	b.n	80139c8 <get_fat+0x1e8>

	fsect = fs->fatbase;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013804:	617b      	str	r3, [r7, #20]
	switch (fs->fs_type) {
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	2b02      	cmp	r3, #2
 801380c:	d052      	beq.n	80138b4 <get_fat+0xd4>
 801380e:	2b03      	cmp	r3, #3
 8013810:	d07f      	beq.n	8013912 <get_fat+0x132>
 8013812:	2b01      	cmp	r3, #1
 8013814:	f040 80d6 	bne.w	80139c4 <get_fat+0x1e4>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	613b      	str	r3, [r7, #16]
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013822:	693a      	ldr	r2, [r7, #16]
 8013824:	18d3      	adds	r3, r2, r3
 8013826:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	ea4f 2253 	mov.w	r2, r3, lsr #9
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	18d3      	adds	r3, r2, r3
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	4619      	mov	r1, r3
 8013836:	f7ff fea9 	bl	801358c <move_window>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	f040 80ba 	bne.w	80139b6 <get_fat+0x1d6>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013848:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	18d3      	adds	r3, r2, r3
 8013850:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013854:	60fb      	str	r3, [r7, #12]
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	f103 0301 	add.w	r3, r3, #1
 801385c:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	18d3      	adds	r3, r2, r3
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	4619      	mov	r1, r3
 801386c:	f7ff fe8e 	bl	801358c <move_window>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	f040 80a1 	bne.w	80139ba <get_fat+0x1da>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801387e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	18d3      	adds	r3, r2, r3
 8013886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801388a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801388e:	68fa      	ldr	r2, [r7, #12]
 8013890:	4313      	orrs	r3, r2
 8013892:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	f003 0301 	and.w	r3, r3, #1
 801389a:	b2db      	uxtb	r3, r3
 801389c:	2b00      	cmp	r3, #0
 801389e:	d003      	beq.n	80138a8 <get_fat+0xc8>
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80138a6:	e004      	b.n	80138b2 <get_fat+0xd2>
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80138ae:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80138b2:	e089      	b.n	80139c8 <get_fat+0x1e8>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	ea4f 2213 	mov.w	r2, r3, lsr #8
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	18d3      	adds	r3, r2, r3
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	4619      	mov	r1, r3
 80138c2:	f7ff fe63 	bl	801358c <move_window>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d178      	bne.n	80139be <get_fat+0x1de>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	b29b      	uxth	r3, r3
 80138d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80138da:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80138de:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80138e2:	f103 0301 	add.w	r3, r3, #1
 80138e6:	18d3      	adds	r3, r2, r3
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80138ee:	b29a      	uxth	r2, r3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80138fe:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013902:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013906:	18cb      	adds	r3, r1, r3
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	4313      	orrs	r3, r2
 801390c:	b29b      	uxth	r3, r3
 801390e:	b29b      	uxth	r3, r3
 8013910:	e05a      	b.n	80139c8 <get_fat+0x1e8>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	ea4f 12d3 	mov.w	r2, r3, lsr #7
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	18d3      	adds	r3, r2, r3
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	4619      	mov	r1, r3
 8013920:	f7ff fe34 	bl	801358c <move_window>
 8013924:	4603      	mov	r3, r0
 8013926:	2b00      	cmp	r3, #0
 8013928:	d14b      	bne.n	80139c2 <get_fat+0x1e2>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	b29b      	uxth	r3, r3
 8013934:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013938:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801393c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013940:	f103 0303 	add.w	r3, r3, #3
 8013944:	18d3      	adds	r3, r2, r3
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	b29b      	uxth	r3, r3
 8013956:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801395a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801395e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013962:	f103 0302 	add.w	r3, r3, #2
 8013966:	18cb      	adds	r3, r1, r3
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801396e:	431a      	orrs	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	b29b      	uxth	r3, r3
 801397a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801397e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013982:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013986:	f103 0301 	add.w	r3, r3, #1
 801398a:	18cb      	adds	r3, r1, r3
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8013992:	431a      	orrs	r2, r3
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	b29b      	uxth	r3, r3
 801399e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80139a2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80139a6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80139aa:	18cb      	adds	r3, r1, r3
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	4313      	orrs	r3, r2
 80139b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80139b4:	e008      	b.n	80139c8 <get_fat+0x1e8>

	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 80139b6:	bf00      	nop
 80139b8:	e004      	b.n	80139c4 <get_fat+0x1e4>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 80139ba:	bf00      	nop
 80139bc:	e002      	b.n	80139c4 <get_fat+0x1e4>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 80139be:	bf00      	nop
 80139c0:	e000      	b.n	80139c4 <get_fat+0x1e4>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 80139c2:	bf00      	nop
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 80139c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	f107 0718 	add.w	r7, r7, #24
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop

080139d4 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b088      	sub	sp, #32
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d904      	bls.n	80139f0 <put_fat+0x1c>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	6a1a      	ldr	r2, [r3, #32]
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d803      	bhi.n	80139f8 <put_fat+0x24>
		res = FR_INT_ERR;
 80139f0:	f04f 0302 	mov.w	r3, #2
 80139f4:	77fb      	strb	r3, [r7, #31]
 80139f6:	e121      	b.n	8013c3c <put_fat+0x268>

	} else {
		fsect = fs->fatbase;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139fc:	61bb      	str	r3, [r7, #24]
		switch (fs->fs_type) {
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	2b02      	cmp	r3, #2
 8013a04:	d07e      	beq.n	8013b04 <put_fat+0x130>
 8013a06:	2b03      	cmp	r3, #3
 8013a08:	f000 80b0 	beq.w	8013b6c <put_fat+0x198>
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	f040 8106 	bne.w	8013c1e <put_fat+0x24a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	617b      	str	r3, [r7, #20]
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013a1c:	697a      	ldr	r2, [r7, #20]
 8013a1e:	18d3      	adds	r3, r2, r3
 8013a20:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8013a28:	69bb      	ldr	r3, [r7, #24]
 8013a2a:	18d3      	adds	r3, r2, r3
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	4619      	mov	r1, r3
 8013a30:	f7ff fdac 	bl	801358c <move_window>
 8013a34:	4603      	mov	r3, r0
 8013a36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a38:	7ffb      	ldrb	r3, [r7, #31]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f040 80f3 	bne.w	8013c26 <put_fat+0x252>
			p = &fs->win[bc & (SS(fs) - 1)];
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013a4c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013a50:	18d3      	adds	r3, r2, r3
 8013a52:	613b      	str	r3, [r7, #16]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	f003 0301 	and.w	r3, r3, #1
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d00e      	beq.n	8013a7e <put_fat+0xaa>
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	f003 030f 	and.w	r3, r3, #15
 8013a6a:	b2da      	uxtb	r2, r3
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	4313      	orrs	r3, r2
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	e001      	b.n	8013a82 <put_fat+0xae>
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	693a      	ldr	r2, [r7, #16]
 8013a84:	7013      	strb	r3, [r2, #0]
			bc++;
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	f103 0301 	add.w	r3, r3, #1
 8013a8c:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f04f 0201 	mov.w	r2, #1
 8013a94:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	18d3      	adds	r3, r2, r3
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	f7ff fd72 	bl	801358c <move_window>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013aac:	7ffb      	ldrb	r3, [r7, #31]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f040 80bb 	bne.w	8013c2a <put_fat+0x256>
			p = &fs->win[bc & (SS(fs) - 1)];
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013ac0:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013ac4:	18d3      	adds	r3, r2, r3
 8013ac6:	613b      	str	r3, [r7, #16]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	f003 0301 	and.w	r3, r3, #1
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d004      	beq.n	8013ade <put_fat+0x10a>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8013ada:	b2db      	uxtb	r3, r3
 8013adc:	e00f      	b.n	8013afe <put_fat+0x12a>
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	f023 030f 	bic.w	r3, r3, #15
 8013ae8:	b2da      	uxtb	r2, r3
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	f003 030f 	and.w	r3, r3, #15
 8013af6:	b2db      	uxtb	r3, r3
 8013af8:	4313      	orrs	r3, r2
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	693a      	ldr	r2, [r7, #16]
 8013b00:	7013      	strb	r3, [r2, #0]
			break;
 8013b02:	e097      	b.n	8013c34 <put_fat+0x260>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	18d3      	adds	r3, r2, r3
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	4619      	mov	r1, r3
 8013b12:	f7ff fd3b 	bl	801358c <move_window>
 8013b16:	4603      	mov	r3, r0
 8013b18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b1a:	7ffb      	ldrb	r3, [r7, #31]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f040 8086 	bne.w	8013c2e <put_fat+0x25a>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013b30:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013b34:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013b38:	18d3      	adds	r3, r2, r3
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	b2d2      	uxtb	r2, r2
 8013b3e:	701a      	strb	r2, [r3, #0]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013b4e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013b52:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013b56:	f103 0301 	add.w	r3, r3, #1
 8013b5a:	18d3      	adds	r3, r2, r3
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	b292      	uxth	r2, r2
 8013b60:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8013b64:	b292      	uxth	r2, r2
 8013b66:	b2d2      	uxtb	r2, r2
 8013b68:	701a      	strb	r2, [r3, #0]
			break;
 8013b6a:	e063      	b.n	8013c34 <put_fat+0x260>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	ea4f 12d3 	mov.w	r2, r3, lsr #7
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	18d3      	adds	r3, r2, r3
 8013b76:	68f8      	ldr	r0, [r7, #12]
 8013b78:	4619      	mov	r1, r3
 8013b7a:	f7ff fd07 	bl	801358c <move_window>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b82:	7ffb      	ldrb	r3, [r7, #31]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d154      	bne.n	8013c32 <put_fat+0x25e>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013b96:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013b9a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013b9e:	18d3      	adds	r3, r2, r3
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	b2d2      	uxtb	r2, r2
 8013ba4:	701a      	strb	r2, [r3, #0]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013bb4:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013bb8:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013bbc:	f103 0301 	add.w	r3, r3, #1
 8013bc0:	18d3      	adds	r3, r2, r3
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	b292      	uxth	r2, r2
 8013bc6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	b2d2      	uxtb	r2, r2
 8013bce:	701a      	strb	r2, [r3, #0]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013bde:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013be2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013be6:	f103 0302 	add.w	r3, r3, #2
 8013bea:	18d3      	adds	r3, r2, r3
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8013bf2:	b2d2      	uxtb	r2, r2
 8013bf4:	701a      	strb	r2, [r3, #0]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013c04:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8013c08:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8013c0c:	f103 0303 	add.w	r3, r3, #3
 8013c10:	18d3      	adds	r3, r2, r3
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8013c18:	b2d2      	uxtb	r2, r2
 8013c1a:	701a      	strb	r2, [r3, #0]
			break;
 8013c1c:	e00a      	b.n	8013c34 <put_fat+0x260>

		default :
			res = FR_INT_ERR;
 8013c1e:	f04f 0302 	mov.w	r3, #2
 8013c22:	77fb      	strb	r3, [r7, #31]
			break;
 8013c24:	e006      	b.n	8013c34 <put_fat+0x260>
		fsect = fs->fatbase;
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
 8013c26:	bf00      	nop
 8013c28:	e004      	b.n	8013c34 <put_fat+0x260>
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
 8013c2a:	bf00      	nop
 8013c2c:	e002      	b.n	8013c34 <put_fat+0x260>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
 8013c2e:	bf00      	nop
 8013c30:	e000      	b.n	8013c34 <put_fat+0x260>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
 8013c32:	bf00      	nop

		default :
			res = FR_INT_ERR;
			break;
		}
		fs->wflag = 1;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f04f 0201 	mov.w	r2, #1
 8013c3a:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8013c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f107 0720 	add.w	r7, r7, #32
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d904      	bls.n	8013c62 <remove_chain+0x1a>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6a1a      	ldr	r2, [r3, #32]
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d803      	bhi.n	8013c6a <remove_chain+0x22>
		res = FR_INT_ERR;
 8013c62:	f04f 0302 	mov.w	r3, #2
 8013c66:	73fb      	strb	r3, [r7, #15]
 8013c68:	e040      	b.n	8013cec <remove_chain+0xa4>

	} else {
		res = FR_OK;
 8013c6a:	f04f 0300 	mov.w	r3, #0
 8013c6e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->max_clust) {			/* Not a last link? */
 8013c70:	e033      	b.n	8013cda <remove_chain+0x92>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	6839      	ldr	r1, [r7, #0]
 8013c76:	f7ff fdb3 	bl	80137e0 <get_fat>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d030      	beq.n	8013ce6 <remove_chain+0x9e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d103      	bne.n	8013c92 <remove_chain+0x4a>
 8013c8a:	f04f 0302 	mov.w	r3, #2
 8013c8e:	73fb      	strb	r3, [r7, #15]
 8013c90:	e02c      	b.n	8013cec <remove_chain+0xa4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c98:	d103      	bne.n	8013ca2 <remove_chain+0x5a>
 8013c9a:	f04f 0301 	mov.w	r3, #1
 8013c9e:	73fb      	strb	r3, [r7, #15]
 8013ca0:	e024      	b.n	8013cec <remove_chain+0xa4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	6839      	ldr	r1, [r7, #0]
 8013ca6:	f04f 0200 	mov.w	r2, #0
 8013caa:	f7ff fe93 	bl	80139d4 <put_fat>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8013cb2:	7bfb      	ldrb	r3, [r7, #15]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d118      	bne.n	8013cea <remove_chain+0xa2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	691b      	ldr	r3, [r3, #16]
 8013cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cc0:	d009      	beq.n	8013cd6 <remove_chain+0x8e>
				fs->free_clust++;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	691b      	ldr	r3, [r3, #16]
 8013cc6:	f103 0201 	add.w	r2, r3, #1
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f04f 0201 	mov.w	r2, #1
 8013cd4:	729a      	strb	r2, [r3, #10]
			}
			clst = nxt;	/* Next cluster */
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6a1a      	ldr	r2, [r3, #32]
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d8c6      	bhi.n	8013c72 <remove_chain+0x2a>
 8013ce4:	e002      	b.n	8013cec <remove_chain+0xa4>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8013ce6:	bf00      	nop
 8013ce8:	e000      	b.n	8013cec <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
 8013cea:	bf00      	nop
			}
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
 8013cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f107 0710 	add.w	r7, r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6a1b      	ldr	r3, [r3, #32]
 8013d06:	60fb      	str	r3, [r7, #12]
	if (clst == 0) {		/* Create new chain */
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10d      	bne.n	8013d2a <create_chain+0x32>
		scl = fs->last_clust;			/* Get suggested start point */
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	613b      	str	r3, [r7, #16]
		if (scl == 0 || scl >= mcl) scl = 1;
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d003      	beq.n	8013d22 <create_chain+0x2a>
 8013d1a:	693a      	ldr	r2, [r7, #16]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d317      	bcc.n	8013d52 <create_chain+0x5a>
 8013d22:	f04f 0301 	mov.w	r3, #1
 8013d26:	613b      	str	r3, [r7, #16]
 8013d28:	e013      	b.n	8013d52 <create_chain+0x5a>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	6839      	ldr	r1, [r7, #0]
 8013d2e:	f7ff fd57 	bl	80137e0 <get_fat>
 8013d32:	4603      	mov	r3, r0
 8013d34:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d802      	bhi.n	8013d42 <create_chain+0x4a>
 8013d3c:	f04f 0301 	mov.w	r3, #1
 8013d40:	e064      	b.n	8013e0c <create_chain+0x114>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 8013d42:	68ba      	ldr	r2, [r7, #8]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d201      	bcs.n	8013d4e <create_chain+0x56>
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	e05e      	b.n	8013e0c <create_chain+0x114>
		scl = clst;
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	617b      	str	r3, [r7, #20]
 8013d56:	e000      	b.n	8013d5a <create_chain+0x62>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}
 8013d58:	bf00      	nop
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	f103 0301 	add.w	r3, r3, #1
 8013d60:	617b      	str	r3, [r7, #20]
		if (ncl >= mcl) {				/* Wrap around */
 8013d62:	697a      	ldr	r2, [r7, #20]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d309      	bcc.n	8013d7e <create_chain+0x86>
			ncl = 2;
 8013d6a:	f04f 0302 	mov.w	r3, #2
 8013d6e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free custer */
 8013d70:	697a      	ldr	r2, [r7, #20]
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d902      	bls.n	8013d7e <create_chain+0x86>
 8013d78:	f04f 0300 	mov.w	r3, #0
 8013d7c:	e046      	b.n	8013e0c <create_chain+0x114>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	6979      	ldr	r1, [r7, #20]
 8013d82:	f7ff fd2d 	bl	80137e0 <get_fat>
 8013d86:	4603      	mov	r3, r0
 8013d88:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d00f      	beq.n	8013db0 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d96:	d002      	beq.n	8013d9e <create_chain+0xa6>
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d101      	bne.n	8013da2 <create_chain+0xaa>
			return cs;
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	e034      	b.n	8013e0c <create_chain+0x114>
		if (ncl == scl) return 0;		/* No free custer */
 8013da2:	697a      	ldr	r2, [r7, #20]
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d1d6      	bne.n	8013d58 <create_chain+0x60>
 8013daa:	f04f 0300 	mov.w	r3, #0
 8013dae:	e02d      	b.n	8013e0c <create_chain+0x114>
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
 8013db0:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	6979      	ldr	r1, [r7, #20]
 8013db6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8013dba:	f7ff fe0b 	bl	80139d4 <put_fat>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d002      	beq.n	8013dca <create_chain+0xd2>
		return 0xFFFFFFFF;
 8013dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8013dc8:	e020      	b.n	8013e0c <create_chain+0x114>
	if (clst != 0) {					/* Link it to the previous one if needed */
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00a      	beq.n	8013de6 <create_chain+0xee>
		if (put_fat(fs, clst, ncl))
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	6839      	ldr	r1, [r7, #0]
 8013dd4:	697a      	ldr	r2, [r7, #20]
 8013dd6:	f7ff fdfd 	bl	80139d4 <put_fat>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <create_chain+0xee>
			return 0xFFFFFFFF;
 8013de0:	f04f 33ff 	mov.w	r3, #4294967295
 8013de4:	e012      	b.n	8013e0c <create_chain+0x114>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	697a      	ldr	r2, [r7, #20]
 8013dea:	60da      	str	r2, [r3, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	691b      	ldr	r3, [r3, #16]
 8013df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013df4:	d009      	beq.n	8013e0a <create_chain+0x112>
		fs->free_clust--;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	691b      	ldr	r3, [r3, #16]
 8013dfa:	f103 32ff 	add.w	r2, r3, #4294967295
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 1;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f04f 0201 	mov.w	r2, #1
 8013e08:	729a      	strb	r2, [r3, #10]
	}

	return ncl;		/* Return new cluster number */
 8013e0a:	697b      	ldr	r3, [r7, #20]
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f107 0718 	add.w	r7, r7, #24
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop

08013e18 <clust2sect>:
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	f1a3 0302 	sub.w	r3, r3, #2
 8013e28:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6a1b      	ldr	r3, [r3, #32]
 8013e2e:	f1a3 0202 	sub.w	r2, r3, #2
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d802      	bhi.n	8013e3e <clust2sect+0x26>
 8013e38:	f04f 0300 	mov.w	r3, #0
 8013e3c:	e007      	b.n	8013e4e <clust2sect+0x36>
	return clst * fs->csize + fs->database;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	789b      	ldrb	r3, [r3, #2]
 8013e42:	683a      	ldr	r2, [r7, #0]
 8013e44:	fb02 f203 	mul.w	r2, r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e4c:	18d3      	adds	r3, r2, r3
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f107 070c 	add.w	r7, r7, #12
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bc80      	pop	{r7}
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop

08013e5c <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	460b      	mov	r3, r1
 8013e66:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	887a      	ldrh	r2, [r7, #2]
 8013e6c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	689b      	ldr	r3, [r3, #8]
 8013e72:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d005      	beq.n	8013e86 <dir_seek+0x2a>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	6a1a      	ldr	r2, [r3, #32]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d802      	bhi.n	8013e8c <dir_seek+0x30>
		return FR_INT_ERR;
 8013e86:	f04f 0302 	mov.w	r3, #2
 8013e8a:	e06e      	b.n	8013f6a <dir_seek+0x10e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d108      	bne.n	8013ea4 <dir_seek+0x48>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	2b03      	cmp	r3, #3
 8013e9a:	d103      	bne.n	8013ea4 <dir_seek+0x48>
		clst = dj->fs->dirbase;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ea2:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table */
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d116      	bne.n	8013ed8 <dir_seek+0x7c>
		dj->clust = clst;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	68fa      	ldr	r2, [r7, #12]
 8013eae:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	891b      	ldrh	r3, [r3, #8]
 8013eb6:	887a      	ldrh	r2, [r7, #2]
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d302      	bcc.n	8013ec2 <dir_seek+0x66>
			return FR_INT_ERR;
 8013ebc:	f04f 0302 	mov.w	r3, #2
 8013ec0:	e053      	b.n	8013f6a <dir_seek+0x10e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ec8:	887b      	ldrh	r3, [r7, #2]
 8013eca:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	18d2      	adds	r2, r2, r3
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	611a      	str	r2, [r3, #16]
 8013ed6:	e03a      	b.n	8013f4e <dir_seek+0xf2>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	789b      	ldrb	r3, [r3, #2]
 8013ede:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013ee2:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8013ee4:	e01e      	b.n	8013f24 <dir_seek+0xc8>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	4618      	mov	r0, r3
 8013eec:	68f9      	ldr	r1, [r7, #12]
 8013eee:	f7ff fc77 	bl	80137e0 <get_fat>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013efc:	d102      	bne.n	8013f04 <dir_seek+0xa8>
 8013efe:	f04f 0301 	mov.w	r3, #1
 8013f02:	e032      	b.n	8013f6a <dir_seek+0x10e>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	d905      	bls.n	8013f16 <dir_seek+0xba>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	6a1a      	ldr	r2, [r3, #32]
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d802      	bhi.n	8013f1c <dir_seek+0xc0>
				return FR_INT_ERR;
 8013f16:	f04f 0302 	mov.w	r3, #2
 8013f1a:	e026      	b.n	8013f6a <dir_seek+0x10e>
			idx -= ic;
 8013f1c:	887a      	ldrh	r2, [r7, #2]
 8013f1e:	897b      	ldrh	r3, [r7, #10]
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8013f24:	887a      	ldrh	r2, [r7, #2]
 8013f26:	897b      	ldrh	r3, [r7, #10]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d2dc      	bcs.n	8013ee6 <dir_seek+0x8a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	68fa      	ldr	r2, [r7, #12]
 8013f30:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	4618      	mov	r0, r3
 8013f38:	68f9      	ldr	r1, [r7, #12]
 8013f3a:	f7ff ff6d 	bl	8013e18 <clust2sect>
 8013f3e:	4602      	mov	r2, r0
 8013f40:	887b      	ldrh	r3, [r7, #2]
 8013f42:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	18d2      	adds	r2, r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013f56:	887b      	ldrh	r3, [r7, #2]
 8013f58:	f003 030f 	and.w	r3, r3, #15
 8013f5c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8013f60:	18d2      	adds	r2, r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8013f66:	f04f 0300 	mov.w	r3, #0
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f107 0710 	add.w	r7, r7, #16
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 8013f74:	b590      	push	{r4, r7, lr}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	70fb      	strb	r3, [r7, #3]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	88db      	ldrh	r3, [r3, #6]
 8013f84:	f103 0301 	add.w	r3, r3, #1
 8013f88:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8013f8a:	893b      	ldrh	r3, [r7, #8]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d003      	beq.n	8013f98 <dir_next+0x24>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	691b      	ldr	r3, [r3, #16]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d102      	bne.n	8013f9e <dir_next+0x2a>
		return FR_NO_FILE;
 8013f98:	f04f 0304 	mov.w	r3, #4
 8013f9c:	e0d6      	b.n	801414c <dir_next+0x1d8>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8013f9e:	893b      	ldrh	r3, [r7, #8]
 8013fa0:	f003 030f 	and.w	r3, r3, #15
 8013fa4:	b29b      	uxth	r3, r3
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f040 80bf 	bne.w	801412a <dir_next+0x1b6>
		dj->sect++;					/* Next sector */
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	691b      	ldr	r3, [r3, #16]
 8013fb0:	f103 0201 	add.w	r2, r3, #1
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	68db      	ldr	r3, [r3, #12]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d109      	bne.n	8013fd4 <dir_next+0x60>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	891b      	ldrh	r3, [r3, #8]
 8013fc6:	893a      	ldrh	r2, [r7, #8]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	f0c0 80ae 	bcc.w	801412a <dir_next+0x1b6>
				return FR_NO_FILE;
 8013fce:	f04f 0304 	mov.w	r3, #4
 8013fd2:	e0bb      	b.n	801414c <dir_next+0x1d8>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8013fd4:	893b      	ldrh	r3, [r7, #8]
 8013fd6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	461a      	mov	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	789b      	ldrb	r3, [r3, #2]
 8013fe4:	f103 33ff 	add.w	r3, r3, #4294967295
 8013fe8:	4013      	ands	r3, r2
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f040 809d 	bne.w	801412a <dir_next+0x1b6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	4610      	mov	r0, r2
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	f7ff fbf0 	bl	80137e0 <get_fat>
 8014000:	4603      	mov	r3, r0
 8014002:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2b01      	cmp	r3, #1
 8014008:	d802      	bhi.n	8014010 <dir_next+0x9c>
 801400a:	f04f 0302 	mov.w	r3, #2
 801400e:	e09d      	b.n	801414c <dir_next+0x1d8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014016:	d102      	bne.n	801401e <dir_next+0xaa>
 8014018:	f04f 0301 	mov.w	r3, #1
 801401c:	e096      	b.n	801414c <dir_next+0x1d8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	6a1a      	ldr	r2, [r3, #32]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	429a      	cmp	r2, r3
 8014028:	d873      	bhi.n	8014112 <dir_next+0x19e>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 801402a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d102      	bne.n	8014038 <dir_next+0xc4>
 8014032:	f04f 0304 	mov.w	r3, #4
 8014036:	e089      	b.n	801414c <dir_next+0x1d8>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	4610      	mov	r0, r2
 8014042:	4619      	mov	r1, r3
 8014044:	f7ff fe58 	bl	8013cf8 <create_chain>
 8014048:	4603      	mov	r3, r0
 801404a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d102      	bne.n	8014058 <dir_next+0xe4>
 8014052:	f04f 0307 	mov.w	r3, #7
 8014056:	e079      	b.n	801414c <dir_next+0x1d8>
					if (clst == 1) return FR_INT_ERR;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2b01      	cmp	r3, #1
 801405c:	d102      	bne.n	8014064 <dir_next+0xf0>
 801405e:	f04f 0302 	mov.w	r3, #2
 8014062:	e073      	b.n	801414c <dir_next+0x1d8>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406a:	d102      	bne.n	8014072 <dir_next+0xfe>
 801406c:	f04f 0301 	mov.w	r3, #1
 8014070:	e06c      	b.n	801414c <dir_next+0x1d8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4618      	mov	r0, r3
 8014078:	f04f 0100 	mov.w	r1, #0
 801407c:	f7ff fa86 	bl	801358c <move_window>
 8014080:	4603      	mov	r3, r0
 8014082:	2b00      	cmp	r3, #0
 8014084:	d002      	beq.n	801408c <dir_next+0x118>
 8014086:	f04f 0301 	mov.w	r3, #1
 801408a:	e05f      	b.n	801414c <dir_next+0x1d8>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014094:	4618      	mov	r0, r3
 8014096:	f04f 0100 	mov.w	r1, #0
 801409a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801409e:	f7ff f9ff 	bl	80134a0 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681c      	ldr	r4, [r3, #0]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	4618      	mov	r0, r3
 80140ac:	68f9      	ldr	r1, [r7, #12]
 80140ae:	f7ff feb3 	bl	8013e18 <clust2sect>
 80140b2:	4603      	mov	r3, r0
 80140b4:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80140b6:	f04f 0300 	mov.w	r3, #0
 80140ba:	72fb      	strb	r3, [r7, #11]
 80140bc:	e01b      	b.n	80140f6 <dir_next+0x182>
						dj->fs->wflag = 1;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	f04f 0201 	mov.w	r2, #1
 80140c6:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4618      	mov	r0, r3
 80140ce:	f04f 0100 	mov.w	r1, #0
 80140d2:	f7ff fa5b 	bl	801358c <move_window>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d002      	beq.n	80140e2 <dir_next+0x16e>
 80140dc:	f04f 0301 	mov.w	r3, #1
 80140e0:	e034      	b.n	801414c <dir_next+0x1d8>
						dj->fs->winsect++;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80140e8:	f102 0201 	add.w	r2, r2, #1
 80140ec:	631a      	str	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80140ee:	7afb      	ldrb	r3, [r7, #11]
 80140f0:	f103 0301 	add.w	r3, r3, #1
 80140f4:	72fb      	strb	r3, [r7, #11]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	789b      	ldrb	r3, [r3, #2]
 80140fc:	7afa      	ldrb	r2, [r7, #11]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d3dd      	bcc.n	80140be <dir_next+0x14a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	6812      	ldr	r2, [r2, #0]
 801410a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801410c:	7afa      	ldrb	r2, [r7, #11]
 801410e:	1a8a      	subs	r2, r1, r2
 8014110:	631a      	str	r2, [r3, #48]	; 0x30
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	68fa      	ldr	r2, [r7, #12]
 8014116:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4618      	mov	r0, r3
 801411e:	68f9      	ldr	r1, [r7, #12]
 8014120:	f7ff fe7a 	bl	8013e18 <clust2sect>
 8014124:	4602      	mov	r2, r0
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	893a      	ldrh	r2, [r7, #8]
 801412e:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014138:	893b      	ldrh	r3, [r7, #8]
 801413a:	f003 030f 	and.w	r3, r3, #15
 801413e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8014142:	18d2      	adds	r2, r2, r3
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8014148:	f04f 0300 	mov.w	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	f107 0714 	add.w	r7, r7, #20
 8014152:	46bd      	mov	sp, r7
 8014154:	bd90      	pop	{r4, r7, pc}
 8014156:	bf00      	nop

08014158 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f04f 0100 	mov.w	r1, #0
 8014166:	f7ff fe79 	bl	8013e5c <dir_seek>
 801416a:	4603      	mov	r3, r0
 801416c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801416e:	7dfb      	ldrb	r3, [r7, #23]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d001      	beq.n	8014178 <dir_find+0x20>
 8014174:	7dfb      	ldrb	r3, [r7, #23]
 8014176:	e03b      	b.n	80141f0 <dir_find+0x98>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	691b      	ldr	r3, [r3, #16]
 8014180:	4610      	mov	r0, r2
 8014182:	4619      	mov	r1, r3
 8014184:	f7ff fa02 	bl	801358c <move_window>
 8014188:	4603      	mov	r3, r0
 801418a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801418c:	7dfb      	ldrb	r3, [r7, #23]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d12a      	bne.n	80141e8 <dir_find+0x90>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	695b      	ldr	r3, [r3, #20]
 8014196:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801419e:	7bfb      	ldrb	r3, [r7, #15]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d103      	bne.n	80141ac <dir_find+0x54>
 80141a4:	f04f 0304 	mov.w	r3, #4
 80141a8:	75fb      	strb	r3, [r7, #23]
 80141aa:	e020      	b.n	80141ee <dir_find+0x96>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	f103 030b 	add.w	r3, r3, #11
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	f003 0308 	and.w	r3, r3, #8
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d10a      	bne.n	80141d2 <dir_find+0x7a>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	699b      	ldr	r3, [r3, #24]
 80141c0:	6938      	ldr	r0, [r7, #16]
 80141c2:	4619      	mov	r1, r3
 80141c4:	f04f 020b 	mov.w	r2, #11
 80141c8:	f7ff f98c 	bl	80134e4 <mem_cmp>
 80141cc:	4603      	mov	r3, r0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d00c      	beq.n	80141ec <dir_find+0x94>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f04f 0100 	mov.w	r1, #0
 80141d8:	f7ff fecc 	bl	8013f74 <dir_next>
 80141dc:	4603      	mov	r3, r0
 80141de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80141e0:	7dfb      	ldrb	r3, [r7, #23]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d0c8      	beq.n	8014178 <dir_find+0x20>
 80141e6:	e002      	b.n	80141ee <dir_find+0x96>
#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
 80141e8:	bf00      	nop
 80141ea:	e000      	b.n	80141ee <dir_find+0x96>
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
 80141ec:	bf00      	nop
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
	} while (res == FR_OK);

	return res;
 80141ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	f107 0718 	add.w	r7, r7, #24
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop

080141fc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f04f 0100 	mov.w	r1, #0
 801420a:	f7ff fe27 	bl	8013e5c <dir_seek>
 801420e:	4603      	mov	r3, r0
 8014210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014212:	7bfb      	ldrb	r3, [r7, #15]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d122      	bne.n	801425e <dir_register+0x62>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	691b      	ldr	r3, [r3, #16]
 8014220:	4610      	mov	r0, r2
 8014222:	4619      	mov	r1, r3
 8014224:	f7ff f9b2 	bl	801358c <move_window>
 8014228:	4603      	mov	r3, r0
 801422a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801422c:	7bfb      	ldrb	r3, [r7, #15]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d114      	bne.n	801425c <dir_register+0x60>
			c = *dj->dir;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	695b      	ldr	r3, [r3, #20]
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 801423a:	7bbb      	ldrb	r3, [r7, #14]
 801423c:	2be5      	cmp	r3, #229	; 0xe5
 801423e:	d00e      	beq.n	801425e <dir_register+0x62>
 8014240:	7bbb      	ldrb	r3, [r7, #14]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00b      	beq.n	801425e <dir_register+0x62>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f04f 0101 	mov.w	r1, #1
 801424c:	f7ff fe92 	bl	8013f74 <dir_next>
 8014250:	4603      	mov	r3, r0
 8014252:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8014254:	7bfb      	ldrb	r3, [r7, #15]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d0de      	beq.n	8014218 <dir_register+0x1c>
 801425a:	e000      	b.n	801425e <dir_register+0x62>
#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
 801425c:	bf00      	nop
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 801425e:	7bfb      	ldrb	r3, [r7, #15]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d12f      	bne.n	80142c4 <dir_register+0xc8>
		res = move_window(dj->fs, dj->sect);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	691b      	ldr	r3, [r3, #16]
 801426c:	4610      	mov	r0, r2
 801426e:	4619      	mov	r1, r3
 8014270:	f7ff f98c 	bl	801358c <move_window>
 8014274:	4603      	mov	r3, r0
 8014276:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014278:	7bfb      	ldrb	r3, [r7, #15]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d122      	bne.n	80142c4 <dir_register+0xc8>
			dir = dj->dir;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	695b      	ldr	r3, [r3, #20]
 8014282:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8014284:	68b8      	ldr	r0, [r7, #8]
 8014286:	f04f 0100 	mov.w	r1, #0
 801428a:	f04f 0220 	mov.w	r2, #32
 801428e:	f7ff f907 	bl	80134a0 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	699b      	ldr	r3, [r3, #24]
 8014296:	68b8      	ldr	r0, [r7, #8]
 8014298:	4619      	mov	r1, r3
 801429a:	f04f 020b 	mov.w	r2, #11
 801429e:	f7ff f8d7 	bl	8013450 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	f103 030c 	add.w	r3, r3, #12
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	6992      	ldr	r2, [r2, #24]
 80142ac:	f102 020b 	add.w	r2, r2, #11
 80142b0:	7812      	ldrb	r2, [r2, #0]
 80142b2:	f002 0218 	and.w	r2, r2, #24
 80142b6:	b2d2      	uxtb	r2, r2
 80142b8:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	f04f 0201 	mov.w	r2, #1
 80142c2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80142c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	f107 0710 	add.w	r7, r7, #16
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b088      	sub	sp, #32
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	699b      	ldr	r3, [r3, #24]
 80142de:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 80142e0:	68f8      	ldr	r0, [r7, #12]
 80142e2:	f04f 0120 	mov.w	r1, #32
 80142e6:	f04f 020b 	mov.w	r2, #11
 80142ea:	f7ff f8d9 	bl	80134a0 <mem_set>
	si = i = b = 0; ni = 8;
 80142ee:	f04f 0300 	mov.w	r3, #0
 80142f2:	77fb      	strb	r3, [r7, #31]
 80142f4:	f04f 0300 	mov.w	r3, #0
 80142f8:	613b      	str	r3, [r7, #16]
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	617b      	str	r3, [r7, #20]
 80142fe:	f04f 0308 	mov.w	r3, #8
 8014302:	61bb      	str	r3, [r7, #24]
	p = *path;
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	60bb      	str	r3, [r7, #8]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	68ba      	ldr	r2, [r7, #8]
 801430e:	18d3      	adds	r3, r2, r3
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	2b2e      	cmp	r3, #46	; 0x2e
 8014314:	d138      	bne.n	8014388 <create_name+0xb8>
		for (;;) {
			c = p[si++];
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	68ba      	ldr	r2, [r7, #8]
 801431a:	18d3      	adds	r3, r2, r3
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	77bb      	strb	r3, [r7, #30]
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	f103 0301 	add.w	r3, r3, #1
 8014326:	617b      	str	r3, [r7, #20]
			if (c != '.' || si >= 3) break;
 8014328:	7fbb      	ldrb	r3, [r7, #30]
 801432a:	2b2e      	cmp	r3, #46	; 0x2e
 801432c:	d10c      	bne.n	8014348 <create_name+0x78>
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	2b02      	cmp	r3, #2
 8014332:	dc09      	bgt.n	8014348 <create_name+0x78>
			sfn[i++] = c;
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	68fa      	ldr	r2, [r7, #12]
 8014338:	18d3      	adds	r3, r2, r3
 801433a:	7fba      	ldrb	r2, [r7, #30]
 801433c:	701a      	strb	r2, [r3, #0]
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	f103 0301 	add.w	r3, r3, #1
 8014344:	613b      	str	r3, [r7, #16]
		}
 8014346:	e7e6      	b.n	8014316 <create_name+0x46>
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
 8014348:	7fbb      	ldrb	r3, [r7, #30]
 801434a:	2b2f      	cmp	r3, #47	; 0x2f
 801434c:	d008      	beq.n	8014360 <create_name+0x90>
 801434e:	7fbb      	ldrb	r3, [r7, #30]
 8014350:	2b5c      	cmp	r3, #92	; 0x5c
 8014352:	d005      	beq.n	8014360 <create_name+0x90>
 8014354:	7fbb      	ldrb	r3, [r7, #30]
 8014356:	2b1f      	cmp	r3, #31
 8014358:	d902      	bls.n	8014360 <create_name+0x90>
 801435a:	f04f 0306 	mov.w	r3, #6
 801435e:	e0b9      	b.n	80144d4 <create_name+0x204>
		*path = &p[si];									/* Rerurn pointer to the next segment */
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	68ba      	ldr	r2, [r7, #8]
 8014364:	18d2      	adds	r2, r2, r3
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	601a      	str	r2, [r3, #0]
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	f103 020b 	add.w	r2, r3, #11
 8014370:	7fbb      	ldrb	r3, [r7, #30]
 8014372:	2b1f      	cmp	r3, #31
 8014374:	d802      	bhi.n	801437c <create_name+0xac>
 8014376:	f04f 0324 	mov.w	r3, #36	; 0x24
 801437a:	e001      	b.n	8014380 <create_name+0xb0>
 801437c:	f04f 0320 	mov.w	r3, #32
 8014380:	7013      	strb	r3, [r2, #0]
		return FR_OK;
 8014382:	f04f 0300 	mov.w	r3, #0
 8014386:	e0a5      	b.n	80144d4 <create_name+0x204>
	}
#endif
	for (;;) {
		c = p[si++];
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	68ba      	ldr	r2, [r7, #8]
 801438c:	18d3      	adds	r3, r2, r3
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	77bb      	strb	r3, [r7, #30]
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	f103 0301 	add.w	r3, r3, #1
 8014398:	617b      	str	r3, [r7, #20]
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 801439a:	7fbb      	ldrb	r3, [r7, #30]
 801439c:	2b1f      	cmp	r3, #31
 801439e:	d95d      	bls.n	801445c <create_name+0x18c>
 80143a0:	7fbb      	ldrb	r3, [r7, #30]
 80143a2:	2b2f      	cmp	r3, #47	; 0x2f
 80143a4:	d05a      	beq.n	801445c <create_name+0x18c>
 80143a6:	7fbb      	ldrb	r3, [r7, #30]
 80143a8:	2b5c      	cmp	r3, #92	; 0x5c
 80143aa:	d057      	beq.n	801445c <create_name+0x18c>
		if (c == '.' || i >= ni) {
 80143ac:	7fbb      	ldrb	r3, [r7, #30]
 80143ae:	2b2e      	cmp	r3, #46	; 0x2e
 80143b0:	d003      	beq.n	80143ba <create_name+0xea>
 80143b2:	693a      	ldr	r2, [r7, #16]
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	db14      	blt.n	80143e4 <create_name+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80143ba:	69bb      	ldr	r3, [r7, #24]
 80143bc:	2b08      	cmp	r3, #8
 80143be:	d102      	bne.n	80143c6 <create_name+0xf6>
 80143c0:	7fbb      	ldrb	r3, [r7, #30]
 80143c2:	2b2e      	cmp	r3, #46	; 0x2e
 80143c4:	d002      	beq.n	80143cc <create_name+0xfc>
 80143c6:	f04f 0306 	mov.w	r3, #6
 80143ca:	e083      	b.n	80144d4 <create_name+0x204>
			i = 8; ni = 11;
 80143cc:	f04f 0308 	mov.w	r3, #8
 80143d0:	613b      	str	r3, [r7, #16]
 80143d2:	f04f 030b 	mov.w	r3, #11
 80143d6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80143d8:	7ffb      	ldrb	r3, [r7, #31]
 80143da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80143de:	77fb      	strb	r3, [r7, #31]
 80143e0:	bf00      	nop
					b |= 1; c -= 0x20;
				}
			}
			sfn[i++] = c;
		}
	}
 80143e2:	e7d1      	b.n	8014388 <create_name+0xb8>
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
 80143e4:	7fbb      	ldrb	r3, [r7, #30]
 80143e6:	b25b      	sxtb	r3, r3
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	da06      	bge.n	80143fa <create_name+0x12a>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
 80143ec:	7ffb      	ldrb	r3, [r7, #31]
 80143ee:	f043 0303 	orr.w	r3, r3, #3
 80143f2:	77fb      	strb	r3, [r7, #31]
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
 80143f4:	f04f 0306 	mov.w	r3, #6
 80143f8:	e06c      	b.n	80144d4 <create_name+0x204>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
 80143fa:	7fbb      	ldrb	r3, [r7, #30]
 80143fc:	f649 102c 	movw	r0, #39212	; 0x992c
 8014400:	f6c0 0001 	movt	r0, #2049	; 0x801
 8014404:	4619      	mov	r1, r3
 8014406:	f7ff f8a5 	bl	8013554 <chk_chr>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d002      	beq.n	8014416 <create_name+0x146>
				return FR_INVALID_NAME;
 8014410:	f04f 0306 	mov.w	r3, #6
 8014414:	e05e      	b.n	80144d4 <create_name+0x204>
			if (IsUpper(c)) {
 8014416:	7fbb      	ldrb	r3, [r7, #30]
 8014418:	2b40      	cmp	r3, #64	; 0x40
 801441a:	d907      	bls.n	801442c <create_name+0x15c>
 801441c:	7fbb      	ldrb	r3, [r7, #30]
 801441e:	2b5a      	cmp	r3, #90	; 0x5a
 8014420:	d804      	bhi.n	801442c <create_name+0x15c>
				b |= 2;
 8014422:	7ffb      	ldrb	r3, [r7, #31]
 8014424:	f043 0302 	orr.w	r3, r3, #2
 8014428:	77fb      	strb	r3, [r7, #31]
 801442a:	e00d      	b.n	8014448 <create_name+0x178>
			} else {
				if (IsLower(c)) {
 801442c:	7fbb      	ldrb	r3, [r7, #30]
 801442e:	2b60      	cmp	r3, #96	; 0x60
 8014430:	d90a      	bls.n	8014448 <create_name+0x178>
 8014432:	7fbb      	ldrb	r3, [r7, #30]
 8014434:	2b7a      	cmp	r3, #122	; 0x7a
 8014436:	d807      	bhi.n	8014448 <create_name+0x178>
					b |= 1; c -= 0x20;
 8014438:	7ffb      	ldrb	r3, [r7, #31]
 801443a:	f043 0301 	orr.w	r3, r3, #1
 801443e:	77fb      	strb	r3, [r7, #31]
 8014440:	7fbb      	ldrb	r3, [r7, #30]
 8014442:	f1a3 0320 	sub.w	r3, r3, #32
 8014446:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	68fa      	ldr	r2, [r7, #12]
 801444c:	18d3      	adds	r3, r2, r3
 801444e:	7fba      	ldrb	r2, [r7, #30]
 8014450:	701a      	strb	r2, [r3, #0]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	f103 0301 	add.w	r3, r3, #1
 8014458:	613b      	str	r3, [r7, #16]
		}
	}
 801445a:	e795      	b.n	8014388 <create_name+0xb8>
	*path = &p[si];						/* Rerurn pointer to the next segment */
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	18d2      	adds	r2, r2, r3
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	601a      	str	r2, [r3, #0]
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8014466:	7fbb      	ldrb	r3, [r7, #30]
 8014468:	2b1f      	cmp	r3, #31
 801446a:	d802      	bhi.n	8014472 <create_name+0x1a2>
 801446c:	f04f 0304 	mov.w	r3, #4
 8014470:	e001      	b.n	8014476 <create_name+0x1a6>
 8014472:	f04f 0300 	mov.w	r3, #0
 8014476:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d102      	bne.n	8014484 <create_name+0x1b4>
 801447e:	f04f 0306 	mov.w	r3, #6
 8014482:	e027      	b.n	80144d4 <create_name+0x204>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	2be5      	cmp	r3, #229	; 0xe5
 801448a:	d103      	bne.n	8014494 <create_name+0x1c4>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f04f 0205 	mov.w	r2, #5
 8014492:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	2b08      	cmp	r3, #8
 8014498:	d103      	bne.n	80144a2 <create_name+0x1d2>
 801449a:	7ffb      	ldrb	r3, [r7, #31]
 801449c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80144a0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80144a2:	7ffb      	ldrb	r3, [r7, #31]
 80144a4:	f003 0303 	and.w	r3, r3, #3
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d103      	bne.n	80144b4 <create_name+0x1e4>
 80144ac:	7fbb      	ldrb	r3, [r7, #30]
 80144ae:	f043 0310 	orr.w	r3, r3, #16
 80144b2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80144b4:	7ffb      	ldrb	r3, [r7, #31]
 80144b6:	f003 030c 	and.w	r3, r3, #12
 80144ba:	2b04      	cmp	r3, #4
 80144bc:	d103      	bne.n	80144c6 <create_name+0x1f6>
 80144be:	7fbb      	ldrb	r3, [r7, #30]
 80144c0:	f043 0308 	orr.w	r3, r3, #8
 80144c4:	77bb      	strb	r3, [r7, #30]

	sfn[11] = c;		/* Store NT flag, File name is created */
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	f103 030b 	add.w	r3, r3, #11
 80144cc:	7fba      	ldrb	r2, [r7, #30]
 80144ce:	701a      	strb	r2, [r3, #0]
#endif

	return FR_OK;
 80144d0:	f04f 0300 	mov.w	r3, #0
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	f107 0720 	add.w	r7, r7, #32
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
 80144de:	bf00      	nop

080144e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	2b2f      	cmp	r3, #47	; 0x2f
 80144f0:	d003      	beq.n	80144fa <follow_path+0x1a>
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	781b      	ldrb	r3, [r3, #0]
 80144f6:	2b5c      	cmp	r3, #92	; 0x5c
 80144f8:	d108      	bne.n	801450c <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	f103 0301 	add.w	r3, r3, #1
 8014500:	603b      	str	r3, [r7, #0]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f04f 0200 	mov.w	r2, #0
 8014508:	609a      	str	r2, [r3, #8]
 801450a:	e004      	b.n	8014516 <follow_path+0x36>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	699a      	ldr	r2, [r3, #24]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	2b1f      	cmp	r3, #31
 801451c:	d80b      	bhi.n	8014536 <follow_path+0x56>
		res = dir_seek(dj, 0);
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f04f 0100 	mov.w	r1, #0
 8014524:	f7ff fc9a 	bl	8013e5c <dir_seek>
 8014528:	4603      	mov	r3, r0
 801452a:	73fb      	strb	r3, [r7, #15]
		dj->dir = NULL;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f04f 0200 	mov.w	r2, #0
 8014532:	615a      	str	r2, [r3, #20]
 8014534:	e05c      	b.n	80145f0 <follow_path+0x110>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8014536:	463b      	mov	r3, r7
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	4619      	mov	r1, r3
 801453c:	f7ff fec8 	bl	80142d0 <create_name>
 8014540:	4603      	mov	r3, r0
 8014542:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8014544:	7bfb      	ldrb	r3, [r7, #15]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d14d      	bne.n	80145e6 <follow_path+0x106>
			res = dir_find(dj);				/* Find it */
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f7ff fe04 	bl	8014158 <dir_find>
 8014550:	4603      	mov	r3, r0
 8014552:	73fb      	strb	r3, [r7, #15]
			last = *(dj->fn+11) & NS_LAST;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	699b      	ldr	r3, [r3, #24]
 8014558:	f103 030b 	add.w	r3, r3, #11
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	f003 0304 	and.w	r3, r3, #4
 8014562:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Could not find the object */
 8014564:	7bfb      	ldrb	r3, [r7, #15]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d009      	beq.n	801457e <follow_path+0x9e>
				if (res == FR_NO_FILE && !last)
 801456a:	7bfb      	ldrb	r3, [r7, #15]
 801456c:	2b04      	cmp	r3, #4
 801456e:	d13c      	bne.n	80145ea <follow_path+0x10a>
 8014570:	7bbb      	ldrb	r3, [r7, #14]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d139      	bne.n	80145ea <follow_path+0x10a>
					res = FR_NO_PATH;
 8014576:	f04f 0305 	mov.w	r3, #5
 801457a:	73fb      	strb	r3, [r7, #15]
				break;
 801457c:	e035      	b.n	80145ea <follow_path+0x10a>
			}
			if (last) break;				/* Last segment match. Function completed. */
 801457e:	7bbb      	ldrb	r3, [r7, #14]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d134      	bne.n	80145ee <follow_path+0x10e>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	695b      	ldr	r3, [r3, #20]
 8014588:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	f103 030b 	add.w	r3, r3, #11
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	f003 0310 	and.w	r3, r3, #16
 8014596:	2b00      	cmp	r3, #0
 8014598:	d103      	bne.n	80145a2 <follow_path+0xc2>
				res = FR_NO_PATH; break;
 801459a:	f04f 0305 	mov.w	r3, #5
 801459e:	73fb      	strb	r3, [r7, #15]
 80145a0:	e026      	b.n	80145f0 <follow_path+0x110>
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	f103 0315 	add.w	r3, r3, #21
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80145ae:	b29a      	uxth	r2, r3
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	f103 0314 	add.w	r3, r3, #20
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	4313      	orrs	r3, r2
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	b29b      	uxth	r3, r3
 80145be:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	f103 031b 	add.w	r3, r3, #27
 80145c8:	781b      	ldrb	r3, [r3, #0]
 80145ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80145ce:	b299      	uxth	r1, r3
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	f103 031a 	add.w	r3, r3, #26
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	430b      	orrs	r3, r1
 80145da:	b29b      	uxth	r3, r3
 80145dc:	b29b      	uxth	r3, r3
 80145de:	431a      	orrs	r2, r3
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	609a      	str	r2, [r3, #8]
		}
 80145e4:	e7a7      	b.n	8014536 <follow_path+0x56>
		dj->dir = NULL;

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
 80145e6:	bf00      	nop
 80145e8:	e002      	b.n	80145f0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
 80145ea:	bf00      	nop
 80145ec:	e000      	b.n	80145f0 <follow_path+0x110>
			}
			if (last) break;				/* Last segment match. Function completed. */
 80145ee:	bf00      	nop
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
 80145f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	f107 0710 	add.w	r7, r7, #16
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b082      	sub	sp, #8
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	785a      	ldrb	r2, [r3, #1]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014610:	4610      	mov	r0, r2
 8014612:	4619      	mov	r1, r3
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	f04f 0301 	mov.w	r3, #1
 801461a:	f7fe fe71 	bl	8013300 <disk_read>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d002      	beq.n	801462a <check_fs+0x2e>
		return 3;
 8014624:	f04f 0303 	mov.w	r3, #3
 8014628:	e041      	b.n	80146ae <check_fs+0xb2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 8014630:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014634:	b29a      	uxth	r2, r3
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 801463c:	4313      	orrs	r3, r2
 801463e:	b29b      	uxth	r3, r3
 8014640:	b21a      	sxth	r2, r3
 8014642:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014646:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 801464a:	429a      	cmp	r2, r3
 801464c:	d002      	beq.n	8014654 <check_fs+0x58>
		return 2;
 801464e:	f04f 0302 	mov.w	r3, #2
 8014652:	e02c      	b.n	80146ae <check_fs+0xb2>

	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801465a:	4618      	mov	r0, r3
 801465c:	f24e 31cc 	movw	r1, #58316	; 0xe3cc
 8014660:	f6c0 0101 	movt	r1, #2049	; 0x801
 8014664:	f04f 0203 	mov.w	r2, #3
 8014668:	f7fe ff3c 	bl	80134e4 <mem_cmp>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d102      	bne.n	8014678 <check_fs+0x7c>
		return 0;
 8014672:	f04f 0300 	mov.w	r3, #0
 8014676:	e01a      	b.n	80146ae <check_fs+0xb2>
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f103 0386 	add.w	r3, r3, #134	; 0x86
 801467e:	4618      	mov	r0, r3
 8014680:	f24e 31cc 	movw	r1, #58316	; 0xe3cc
 8014684:	f6c0 0101 	movt	r1, #2049	; 0x801
 8014688:	f04f 0203 	mov.w	r2, #3
 801468c:	f7fe ff2a 	bl	80134e4 <mem_cmp>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d109      	bne.n	80146aa <check_fs+0xae>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801469c:	b2db      	uxtb	r3, r3
 801469e:	b25b      	sxtb	r3, r3
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	db02      	blt.n	80146aa <check_fs+0xae>
		return 0;
 80146a4:	f04f 0300 	mov.w	r3, #0
 80146a8:	e001      	b.n	80146ae <check_fs+0xb2>

	return 1;
 80146aa:	f04f 0301 	mov.w	r3, #1
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	f107 0708 	add.w	r7, r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b090      	sub	sp, #64	; 0x40
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	4613      	mov	r3, r2
 80146c4:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	62bb      	str	r3, [r7, #40]	; 0x28
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
 80146cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80146d4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 80146d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d8:	2b09      	cmp	r3, #9
 80146da:	d80d      	bhi.n	80146f8 <auto_mount+0x40>
 80146dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146de:	f103 0301 	add.w	r3, r3, #1
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	2b3a      	cmp	r3, #58	; 0x3a
 80146e6:	d107      	bne.n	80146f8 <auto_mount+0x40>
		p += 2; *path = p;			/* Return pointer to the path name */
 80146e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ea:	f103 0302 	add.w	r3, r3, #2
 80146ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146f4:	601a      	str	r2, [r3, #0]
 80146f6:	e005      	b.n	8014704 <auto_mount+0x4c>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
 80146f8:	f640 238a 	movw	r3, #2698	; 0xa8a
 80146fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	63bb      	str	r3, [r7, #56]	; 0x38
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 8014704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014706:	2b00      	cmp	r3, #0
 8014708:	d002      	beq.n	8014710 <auto_mount+0x58>
		return FR_INVALID_DRIVE;
 801470a:	f04f 030b 	mov.w	r3, #11
 801470e:	e25d      	b.n	8014bcc <auto_mount+0x514>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 8014710:	f640 2384 	movw	r3, #2692	; 0xa84
 8014714:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801471a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471e:	627b      	str	r3, [r7, #36]	; 0x24
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014724:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 8014726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014728:	2b00      	cmp	r3, #0
 801472a:	d102      	bne.n	8014732 <auto_mount+0x7a>
 801472c:	f04f 030c 	mov.w	r3, #12
 8014730:	e24c      	b.n	8014bcc <auto_mount+0x514>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d01c      	beq.n	8014774 <auto_mount+0xbc>
		stat = disk_status(fs->drive);
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	785b      	ldrb	r3, [r3, #1]
 801473e:	4618      	mov	r0, r3
 8014740:	f7fe fdbe 	bl	80132c0 <disk_status>
 8014744:	4603      	mov	r3, r0
 8014746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 801474a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801474e:	f003 0301 	and.w	r3, r3, #1
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10e      	bne.n	8014774 <auto_mount+0xbc>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 8014756:	79fb      	ldrb	r3, [r7, #7]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d008      	beq.n	801476e <auto_mount+0xb6>
 801475c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014760:	f003 0304 	and.w	r3, r3, #4
 8014764:	2b00      	cmp	r3, #0
 8014766:	d002      	beq.n	801476e <auto_mount+0xb6>
				return FR_WRITE_PROTECTED;
 8014768:	f04f 030a 	mov.w	r3, #10
 801476c:	e22e      	b.n	8014bcc <auto_mount+0x514>
#endif
			return FR_OK;			/* The file system object is valid */
 801476e:	f04f 0300 	mov.w	r3, #0
 8014772:	e22b      	b.n	8014bcc <auto_mount+0x514>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
 8014774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014776:	f04f 0200 	mov.w	r2, #0
 801477a:	701a      	strb	r2, [r3, #0]
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 801477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801477e:	b2da      	uxtb	r2, r3
 8014780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014782:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 8014784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014786:	785b      	ldrb	r3, [r3, #1]
 8014788:	4618      	mov	r0, r3
 801478a:	f7fe fd5b 	bl	8013244 <disk_initialize>
 801478e:	4603      	mov	r3, r0
 8014790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 8014794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014798:	f003 0301 	and.w	r3, r3, #1
 801479c:	b2db      	uxtb	r3, r3
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d002      	beq.n	80147a8 <auto_mount+0xf0>
		return FR_NOT_READY;
 80147a2:	f04f 0303 	mov.w	r3, #3
 80147a6:	e211      	b.n	8014bcc <auto_mount+0x514>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80147a8:	79fb      	ldrb	r3, [r7, #7]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d008      	beq.n	80147c0 <auto_mount+0x108>
 80147ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147b2:	f003 0304 	and.w	r3, r3, #4
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d002      	beq.n	80147c0 <auto_mount+0x108>
		return FR_WRITE_PROTECTED;
 80147ba:	f04f 030a 	mov.w	r3, #10
 80147be:	e205      	b.n	8014bcc <auto_mount+0x514>
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 80147c0:	f04f 0300 	mov.w	r3, #0
 80147c4:	637b      	str	r3, [r7, #52]	; 0x34
 80147c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80147ca:	f7ff ff17 	bl	80145fc <check_fs>
 80147ce:	4603      	mov	r3, r0
 80147d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 80147d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d12a      	bne.n	8014832 <auto_mount+0x17a>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 80147dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147de:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 80147e2:	61fb      	str	r3, [r7, #28]
		if (tbl[4]) {									/* Is the partition existing? */
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	f103 0304 	add.w	r3, r3, #4
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d020      	beq.n	8014832 <auto_mount+0x17a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	f103 030b 	add.w	r3, r3, #11
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	ea4f 6203 	mov.w	r2, r3, lsl #24
 80147fc:	69fb      	ldr	r3, [r7, #28]
 80147fe:	f103 030a 	add.w	r3, r3, #10
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014808:	431a      	orrs	r2, r3
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	f103 0309 	add.w	r3, r3, #9
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014816:	431a      	orrs	r2, r3
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	f103 0308 	add.w	r3, r3, #8
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	4313      	orrs	r3, r2
 8014822:	637b      	str	r3, [r7, #52]	; 0x34
			fmt = check_fs(fs, bsect);					/* Check the partition */
 8014824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014826:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014828:	f7ff fee8 	bl	80145fc <check_fs>
 801482c:	4603      	mov	r3, r0
 801482e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8014832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014836:	2b03      	cmp	r3, #3
 8014838:	d102      	bne.n	8014840 <auto_mount+0x188>
 801483a:	f04f 0301 	mov.w	r3, #1
 801483e:	e1c5      	b.n	8014bcc <auto_mount+0x514>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 8014840:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014844:	2b00      	cmp	r3, #0
 8014846:	d10e      	bne.n	8014866 <auto_mount+0x1ae>
 8014848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801484e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014852:	b29a      	uxth	r2, r3
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801485a:	4313      	orrs	r3, r2
 801485c:	b29b      	uxth	r3, r3
 801485e:	b21b      	sxth	r3, r3
 8014860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014864:	d002      	beq.n	801486c <auto_mount+0x1b4>
		return FR_NO_FILESYSTEM;
 8014866:	f04f 030d 	mov.w	r3, #13
 801486a:	e1af      	b.n	8014bcc <auto_mount+0x514>

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 801486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8014872:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014876:	b29a      	uxth	r2, r3
 8014878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801487e:	4313      	orrs	r3, r2
 8014880:	b29b      	uxth	r3, r3
 8014882:	b29b      	uxth	r3, r3
 8014884:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 8014886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014888:	2b00      	cmp	r3, #0
 801488a:	d115      	bne.n	80148b8 <auto_mount+0x200>
 801488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8014892:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 801489c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80148a0:	431a      	orrs	r2, r3
 80148a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80148a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80148ac:	431a      	orrs	r2, r3
 80148ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80148b4:	4313      	orrs	r3, r2
 80148b6:	633b      	str	r3, [r7, #48]	; 0x30
	fs->sects_fat = fsize;
 80148b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148bc:	61da      	str	r2, [r3, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80148be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	70da      	strb	r2, [r3, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 80148c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ca:	78db      	ldrb	r3, [r3, #3]
 80148cc:	461a      	mov	r2, r3
 80148ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d0:	fb02 f303 	mul.w	r3, r2, r3
 80148d4:	633b      	str	r3, [r7, #48]	; 0x30
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 80148d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80148dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148e8:	4313      	orrs	r3, r2
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	461a      	mov	r2, r3
 80148f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148f2:	18d2      	adds	r2, r2, r3
 80148f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f6:	625a      	str	r2, [r3, #36]	; 0x24
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80148f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80148fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014900:	709a      	strb	r2, [r3, #2]
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8014902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014904:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014908:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801490c:	b29a      	uxth	r2, r3
 801490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014914:	4313      	orrs	r3, r2
 8014916:	b29b      	uxth	r3, r3
 8014918:	b29a      	uxth	r2, r3
 801491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491c:	811a      	strh	r2, [r3, #8]
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 801491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014920:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014924:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014928:	b29a      	uxth	r2, r3
 801492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8014930:	4313      	orrs	r3, r2
 8014932:	b29b      	uxth	r3, r3
 8014934:	b29b      	uxth	r3, r3
 8014936:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8014938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493a:	2b00      	cmp	r3, #0
 801493c:	d115      	bne.n	801496a <auto_mount+0x2b2>
 801493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014940:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8014944:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801494e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014952:	431a      	orrs	r2, r3
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801495a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801495e:	431a      	orrs	r2, r3
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014962:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014966:	4313      	orrs	r3, r2
 8014968:	62fb      	str	r3, [r7, #44]	; 0x2c
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 801496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014970:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014974:	b29a      	uxth	r2, r3
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014978:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801497c:	4313      	orrs	r3, r2
 801497e:	b29b      	uxth	r3, r3
 8014980:	b29b      	uxth	r3, r3
 8014982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014984:	1ad2      	subs	r2, r2, r3
 8014986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014988:	1ad2      	subs	r2, r2, r3
 801498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498c:	891b      	ldrh	r3, [r3, #8]
 801498e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8014992:	b29b      	uxth	r3, r3
 8014994:	1ad2      	subs	r2, r2, r3
		) / fs->csize + 2;
 8014996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014998:	789b      	ldrb	r3, [r3, #2]
 801499a:	fbb2 f3f3 	udiv	r3, r2, r3
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 801499e:	f103 0302 	add.w	r3, r3, #2
 80149a2:	61bb      	str	r3, [r7, #24]
 80149a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a6:	69ba      	ldr	r2, [r7, #24]
 80149a8:	621a      	str	r2, [r3, #32]
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
 80149aa:	f04f 0301 	mov.w	r3, #1
 80149ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 80149b2:	69ba      	ldr	r2, [r7, #24]
 80149b4:	f640 73f6 	movw	r3, #4086	; 0xff6
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d903      	bls.n	80149c4 <auto_mount+0x30c>
 80149bc:	f04f 0302 	mov.w	r3, #2
 80149c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 80149c4:	69ba      	ldr	r2, [r7, #24]
 80149c6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d903      	bls.n	80149d6 <auto_mount+0x31e>
 80149ce:	f04f 0303 	mov.w	r3, #3
 80149d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (fmt == FS_FAT32)
 80149d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80149da:	2b03      	cmp	r3, #3
 80149dc:	d117      	bne.n	8014a0e <auto_mount+0x356>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 80149de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e0:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80149e4:	ea4f 6203 	mov.w	r2, r3, lsl #24
 80149e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80149ee:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80149f2:	431a      	orrs	r2, r3
 80149f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80149fa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80149fe:	431a      	orrs	r2, r3
 8014a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a02:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8014a06:	431a      	orrs	r2, r3
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8014a0c:	e005      	b.n	8014a1a <auto_mount+0x362>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a14:	18d2      	adds	r2, r2, r3
 8014a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a18:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 8014a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a20:	18d2      	adds	r2, r2, r3
 8014a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a24:	891b      	ldrh	r3, [r3, #8]
 8014a26:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	18d2      	adds	r2, r2, r3
 8014a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a30:	62da      	str	r2, [r3, #44]	; 0x2c

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	f04f 32ff 	mov.w	r2, #4294967295
 8014a38:	611a      	str	r2, [r3, #16]
	fs->wflag = 0;
 8014a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3c:	f04f 0200 	mov.w	r2, #0
 8014a40:	711a      	strb	r2, [r3, #4]
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 8014a42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014a46:	2b03      	cmp	r3, #3
 8014a48:	f040 809c 	bne.w	8014b84 <auto_mount+0x4cc>
	 	fs->fsi_flag = 0;
 8014a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4e:	f04f 0200 	mov.w	r2, #0
 8014a52:	729a      	strb	r2, [r3, #10]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8014a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a56:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8014a5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014a5e:	b29a      	uxth	r2, r3
 8014a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8014a66:	4313      	orrs	r3, r2
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a70:	18d2      	adds	r2, r2, r3
 8014a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a74:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8014a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a78:	7859      	ldrb	r1, [r3, #1]
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a82:	695b      	ldr	r3, [r3, #20]
 8014a84:	4608      	mov	r0, r1
 8014a86:	4611      	mov	r1, r2
 8014a88:	461a      	mov	r2, r3
 8014a8a:	f04f 0301 	mov.w	r3, #1
 8014a8e:	f7fe fc37 	bl	8013300 <disk_read>
 8014a92:	4603      	mov	r3, r0
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d175      	bne.n	8014b84 <auto_mount+0x4cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8014a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a9a:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 8014a9e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014aa2:	b29a      	uxth	r2, r3
 8014aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa6:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	b29b      	uxth	r3, r3
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8014aae:	b21a      	sxth	r2, r3
 8014ab0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014ab4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d163      	bne.n	8014b84 <auto_mount+0x4cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8014abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8014ac2:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014acc:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014ad0:	431a      	orrs	r2, r3
 8014ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014ad8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014adc:	431a      	orrs	r2, r3
 8014ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014ae4:	431a      	orrs	r2, r3
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8014ae6:	f245 2352 	movw	r3, #21074	; 0x5252
 8014aea:	f2c4 1361 	movt	r3, #16737	; 0x4161
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d148      	bne.n	8014b84 <auto_mount+0x4cc>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8014af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8014af8:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afe:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8014b02:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014b06:	431a      	orrs	r2, r3
 8014b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0a:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 8014b0e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014b12:	431a      	orrs	r2, r3
 8014b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b16:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8014b1a:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8014b1c:	f247 2372 	movw	r3, #29298	; 0x7272
 8014b20:	f2c6 1341 	movt	r3, #24897	; 0x6141
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d12d      	bne.n	8014b84 <auto_mount+0x4cc>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8014b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2a:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 8014b2e:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b34:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8014b38:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014b3c:	431a      	orrs	r2, r3
 8014b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b40:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 8014b44:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014b48:	431a      	orrs	r2, r3
 8014b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8014b50:	431a      	orrs	r2, r3
 8014b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b54:	60da      	str	r2, [r3, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8014b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b58:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8014b5c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b62:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8014b66:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014b6a:	431a      	orrs	r2, r3
 8014b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8014b72:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014b76:	431a      	orrs	r2, r3
 8014b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014b7e:	431a      	orrs	r2, r3
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014b8a:	701a      	strb	r2, [r3, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	f04f 0200 	mov.w	r2, #0
 8014b92:	631a      	str	r2, [r3, #48]	; 0x30
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b96:	f04f 0200 	mov.w	r2, #0
 8014b9a:	619a      	str	r2, [r3, #24]
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 8014b9c:	f640 2388 	movw	r3, #2696	; 0xa88
 8014ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014ba4:	881b      	ldrh	r3, [r3, #0]
 8014ba6:	f103 0301 	add.w	r3, r3, #1
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	f640 2388 	movw	r3, #2696	; 0xa88
 8014bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014bb4:	801a      	strh	r2, [r3, #0]
 8014bb6:	f640 2388 	movw	r3, #2696	; 0xa88
 8014bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014bbe:	881a      	ldrh	r2, [r3, #0]
 8014bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc2:	80da      	strh	r2, [r3, #6]
	res = FR_OK;
 8014bc4:	f04f 0300 	mov.w	r3, #0
 8014bc8:	75fb      	strb	r3, [r7, #23]

	return res;
 8014bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop

08014bd8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b082      	sub	sp, #8
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	460b      	mov	r3, r1
 8014be2:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d008      	beq.n	8014bfc <validate+0x24>
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d004      	beq.n	8014bfc <validate+0x24>
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	88db      	ldrh	r3, [r3, #6]
 8014bf6:	887a      	ldrh	r2, [r7, #2]
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d002      	beq.n	8014c02 <validate+0x2a>
		return FR_INVALID_OBJECT;
 8014bfc:	f04f 0309 	mov.w	r3, #9
 8014c00:	e00f      	b.n	8014c22 <validate+0x4a>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	785b      	ldrb	r3, [r3, #1]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7fe fb5a 	bl	80132c0 <disk_status>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	f003 0301 	and.w	r3, r3, #1
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d002      	beq.n	8014c1e <validate+0x46>
		return FR_NOT_READY;
 8014c18:	f04f 0303 	mov.w	r3, #3
 8014c1c:	e001      	b.n	8014c22 <validate+0x4a>

	return FR_OK;
 8014c1e:	f04f 0300 	mov.w	r3, #0
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	f107 0708 	add.w	r7, r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b085      	sub	sp, #20
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	4603      	mov	r3, r0
 8014c34:	6039      	str	r1, [r7, #0]
 8014c36:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 8014c38:	79fb      	ldrb	r3, [r7, #7]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d002      	beq.n	8014c44 <f_mount+0x18>
		return FR_INVALID_DRIVE;
 8014c3e:	f04f 030b 	mov.w	r3, #11
 8014c42:	e01f      	b.n	8014c84 <f_mount+0x58>
	rfs = FatFs[vol];				/* Get current fs object */
 8014c44:	79fa      	ldrb	r2, [r7, #7]
 8014c46:	f640 2384 	movw	r3, #2692	; 0xa84
 8014c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c52:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d003      	beq.n	8014c62 <f_mount+0x36>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f04f 0200 	mov.w	r2, #0
 8014c60:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d003      	beq.n	8014c70 <f_mount+0x44>
		fs->fs_type = 0;			/* Clear new fs object */
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	f04f 0200 	mov.w	r2, #0
 8014c6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 8014c70:	79fa      	ldrb	r2, [r7, #7]
 8014c72:	f640 2384 	movw	r3, #2692	; 0xa84
 8014c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014c7a:	6839      	ldr	r1, [r7, #0]
 8014c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
 8014c80:	f04f 0300 	mov.w	r3, #0
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	f107 0714 	add.w	r7, r7, #20
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bc80      	pop	{r7}
 8014c8e:	4770      	bx	lr

08014c90 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/*Access mode and file open mode flags, mcg changed name to modearg */
)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b092      	sub	sp, #72	; 0x48
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	71fb      	strb	r3, [r7, #7]
	BYTE *dir;
//        BYTE mode; //mcg

//      mode = modearg; //mcg using local var to try ad prevent hard fault exception that occurred when using mode arg directly

	fp->fs = NULL;		/* Clear file object */
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	f04f 0200 	mov.w	r2, #0
 8014ca4:	601a      	str	r2, [r3, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 8014ca6:	79fb      	ldrb	r3, [r7, #7]
 8014ca8:	f003 031f 	and.w	r3, r3, #31
 8014cac:	71fb      	strb	r3, [r7, #7]
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 8014cae:	79fb      	ldrb	r3, [r7, #7]
 8014cb0:	f003 031e 	and.w	r3, r3, #30
 8014cb4:	b2db      	uxtb	r3, r3
 8014cb6:	f107 0108 	add.w	r1, r7, #8
 8014cba:	f107 021c 	add.w	r2, r7, #28
 8014cbe:	4608      	mov	r0, r1
 8014cc0:	4611      	mov	r1, r2
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	f7ff fcf8 	bl	80146b8 <auto_mount>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8014cce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d002      	beq.n	8014cdc <f_open+0x4c>
 8014cd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014cda:	e185      	b.n	8014fe8 <f_open+0x358>
	INITBUF(dj, sfn, lfn);
 8014cdc:	f107 0310 	add.w	r3, r7, #16
 8014ce0:	637b      	str	r3, [r7, #52]	; 0x34
	res = follow_path(&dj, path);	/* Follow the file path */
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	f107 021c 	add.w	r2, r7, #28
 8014ce8:	4610      	mov	r0, r2
 8014cea:	4619      	mov	r1, r3
 8014cec:	f7ff fbf8 	bl	80144e0 <follow_path>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014cf6:	79fb      	ldrb	r3, [r7, #7]
 8014cf8:	f003 031c 	and.w	r3, r3, #28
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 80f0 	beq.w	8014ee2 <f_open+0x252>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 8014d02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d019      	beq.n	8014d3e <f_open+0xae>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 8014d0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d0e:	2b04      	cmp	r3, #4
 8014d10:	d107      	bne.n	8014d22 <f_open+0x92>
				res = dir_register(&dj);
 8014d12:	f107 031c 	add.w	r3, r7, #28
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff fa70 	bl	80141fc <dir_register>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8014d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d002      	beq.n	8014d30 <f_open+0xa0>
 8014d2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d2e:	e15b      	b.n	8014fe8 <f_open+0x358>
			mode |= FA_CREATE_ALWAYS;
 8014d30:	79fb      	ldrb	r3, [r7, #7]
 8014d32:	f043 0308 	orr.w	r3, r3, #8
 8014d36:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;			/* Created entry (SFN entry) */
 8014d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8014d3c:	e099      	b.n	8014e72 <f_open+0x1e2>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 8014d3e:	79fb      	ldrb	r3, [r7, #7]
 8014d40:	f003 0304 	and.w	r3, r3, #4
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d002      	beq.n	8014d4e <f_open+0xbe>
				LEAVE_FF(dj.fs, FR_EXIST);
 8014d48:	f04f 0308 	mov.w	r3, #8
 8014d4c:	e14c      	b.n	8014fe8 <f_open+0x358>
			dir = dj.dir;
 8014d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d50:	643b      	str	r3, [r7, #64]	; 0x40
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 8014d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d007      	beq.n	8014d68 <f_open+0xd8>
 8014d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d5a:	f103 030b 	add.w	r3, r3, #11
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	f003 0311 	and.w	r3, r3, #17
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <f_open+0xde>
				LEAVE_FF(dj.fs, FR_DENIED);
 8014d68:	f04f 0307 	mov.w	r3, #7
 8014d6c:	e13c      	b.n	8014fe8 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 8014d6e:	79fb      	ldrb	r3, [r7, #7]
 8014d70:	f003 0308 	and.w	r3, r3, #8
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d07c      	beq.n	8014e72 <f_open+0x1e2>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 8014d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d7a:	f103 0315 	add.w	r3, r3, #21
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014d84:	b29a      	uxth	r2, r3
 8014d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d88:	f103 0314 	add.w	r3, r3, #20
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8014d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d9a:	f103 031b 	add.w	r3, r3, #27
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014da4:	b299      	uxth	r1, r3
 8014da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014da8:	f103 031a 	add.w	r3, r3, #26
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	430b      	orrs	r3, r1
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	4313      	orrs	r3, r2
 8014db6:	63fb      	str	r3, [r7, #60]	; 0x3c
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 8014db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dba:	f103 0314 	add.w	r3, r3, #20
 8014dbe:	f04f 0200 	mov.w	r2, #0
 8014dc2:	701a      	strb	r2, [r3, #0]
 8014dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dc6:	f103 0315 	add.w	r3, r3, #21
 8014dca:	f04f 0200 	mov.w	r2, #0
 8014dce:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusLO, 0);
 8014dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dd2:	f103 031a 	add.w	r3, r3, #26
 8014dd6:	f04f 0200 	mov.w	r2, #0
 8014dda:	701a      	strb	r2, [r3, #0]
 8014ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dde:	f103 031b 	add.w	r3, r3, #27
 8014de2:	f04f 0200 	mov.w	r2, #0
 8014de6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 8014de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dea:	f103 031c 	add.w	r3, r3, #28
 8014dee:	f04f 0200 	mov.w	r2, #0
 8014df2:	701a      	strb	r2, [r3, #0]
 8014df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014df6:	f103 031d 	add.w	r3, r3, #29
 8014dfa:	f04f 0200 	mov.w	r2, #0
 8014dfe:	701a      	strb	r2, [r3, #0]
 8014e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e02:	f103 031e 	add.w	r3, r3, #30
 8014e06:	f04f 0200 	mov.w	r2, #0
 8014e0a:	701a      	strb	r2, [r3, #0]
 8014e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e0e:	f103 031f 	add.w	r3, r3, #31
 8014e12:	f04f 0200 	mov.w	r2, #0
 8014e16:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	f04f 0201 	mov.w	r2, #1
 8014e1e:	711a      	strb	r2, [r3, #4]
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e24:	63bb      	str	r3, [r7, #56]	; 0x38
				if (cl) {
 8014e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d013      	beq.n	8014e54 <f_open+0x1c4>
					res = remove_chain(dj.fs, cl);
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	4618      	mov	r0, r3
 8014e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014e32:	f7fe ff09 	bl	8013c48 <remove_chain>
 8014e36:	4603      	mov	r3, r0
 8014e38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (res) LEAVE_FF(dj.fs, res);
 8014e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d002      	beq.n	8014e4a <f_open+0x1ba>
 8014e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e48:	e0ce      	b.n	8014fe8 <f_open+0x358>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8014e52:	60da      	str	r2, [r3, #12]
				}
				res = move_window(dj.fs, ps);
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	4618      	mov	r0, r3
 8014e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e5a:	f7fe fb97 	bl	801358c <move_window>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8014e64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d002      	beq.n	8014e72 <f_open+0x1e2>
 8014e6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e70:	e0ba      	b.n	8014fe8 <f_open+0x358>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 8014e72:	79fb      	ldrb	r3, [r7, #7]
 8014e74:	f003 0308 	and.w	r3, r3, #8
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d05a      	beq.n	8014f32 <f_open+0x2a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8014e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e7e:	f103 030b 	add.w	r3, r3, #11
 8014e82:	f04f 0200 	mov.w	r2, #0
 8014e86:	701a      	strb	r2, [r3, #0]
			ps = get_fattime();
 8014e88:	f000 fc12 	bl	80156b0 <get_fattime>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 8014e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e92:	f103 030e 	add.w	r3, r3, #14
 8014e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e98:	b2d2      	uxtb	r2, r2
 8014e9a:	701a      	strb	r2, [r3, #0]
 8014e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e9e:	f103 030f 	add.w	r3, r3, #15
 8014ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ea4:	b292      	uxth	r2, r2
 8014ea6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8014eaa:	b292      	uxth	r2, r2
 8014eac:	b2d2      	uxtb	r2, r2
 8014eae:	701a      	strb	r2, [r3, #0]
 8014eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eb2:	f103 0310 	add.w	r3, r3, #16
 8014eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014eb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8014ebc:	b2d2      	uxtb	r2, r2
 8014ebe:	701a      	strb	r2, [r3, #0]
 8014ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ec2:	f103 0311 	add.w	r3, r3, #17
 8014ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ec8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8014ecc:	b2d2      	uxtb	r2, r2
 8014ece:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	f04f 0201 	mov.w	r2, #1
 8014ed6:	711a      	strb	r2, [r3, #4]
			mode |= FA__WRITTEN;				/* Set file changed flag */
 8014ed8:	79fb      	ldrb	r3, [r7, #7]
 8014eda:	f043 0320 	orr.w	r3, r3, #32
 8014ede:	71fb      	strb	r3, [r7, #7]
 8014ee0:	e027      	b.n	8014f32 <f_open+0x2a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 8014ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d002      	beq.n	8014ef0 <f_open+0x260>
 8014eea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014eee:	e07b      	b.n	8014fe8 <f_open+0x358>
		dir = dj.dir;
 8014ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef2:	643b      	str	r3, [r7, #64]	; 0x40
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 8014ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d007      	beq.n	8014f0a <f_open+0x27a>
 8014efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014efc:	f103 030b 	add.w	r3, r3, #11
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	f003 0310 	and.w	r3, r3, #16
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d002      	beq.n	8014f10 <f_open+0x280>
			LEAVE_FF(dj.fs, FR_NO_FILE);
 8014f0a:	f04f 0304 	mov.w	r3, #4
 8014f0e:	e06b      	b.n	8014fe8 <f_open+0x358>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8014f10:	79fb      	ldrb	r3, [r7, #7]
 8014f12:	f003 0302 	and.w	r3, r3, #2
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d00b      	beq.n	8014f32 <f_open+0x2a2>
 8014f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f1c:	f103 030b 	add.w	r3, r3, #11
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	f003 0301 	and.w	r3, r3, #1
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <f_open+0x2a2>
			LEAVE_FF(dj.fs, FR_DENIED);
 8014f2c:	f04f 0307 	mov.w	r3, #7
 8014f30:	e05a      	b.n	8014fe8 <f_open+0x358>
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8014f32:	69fb      	ldr	r3, [r7, #28]
 8014f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	61da      	str	r2, [r3, #28]
	fp->dir_ptr = dj.dir;
 8014f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	621a      	str	r2, [r3, #32]
#endif
	fp->flag = mode;					/* File access mode */
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	79fa      	ldrb	r2, [r7, #7]
 8014f44:	719a      	strb	r2, [r3, #6]
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8014f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f48:	f103 0315 	add.w	r3, r3, #21
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f56:	f103 0314 	add.w	r3, r3, #20
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	4313      	orrs	r3, r2
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8014f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f68:	f103 031b 	add.w	r3, r3, #27
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014f72:	b299      	uxth	r1, r3
 8014f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f76:	f103 031a 	add.w	r3, r3, #26
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	430b      	orrs	r3, r1
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	431a      	orrs	r2, r3
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	611a      	str	r2, [r3, #16]
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8014f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f8a:	f103 031f 	add.w	r3, r3, #31
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8014f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f96:	f103 031e 	add.w	r3, r3, #30
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8014fa0:	431a      	orrs	r2, r3
 8014fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fa4:	f103 031d 	add.w	r3, r3, #29
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8014fae:	431a      	orrs	r2, r3
 8014fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fb2:	f103 031c 	add.w	r3, r3, #28
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	431a      	orrs	r2, r3
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	60da      	str	r2, [r3, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f04f 0200 	mov.w	r2, #0
 8014fc4:	609a      	str	r2, [r3, #8]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8014fcc:	71da      	strb	r2, [r3, #7]
	fp->dsect = 0;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f04f 0200 	mov.w	r2, #0
 8014fd4:	619a      	str	r2, [r3, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8014fd6:	69fa      	ldr	r2, [r7, #28]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	601a      	str	r2, [r3, #0]
 8014fdc:	69fb      	ldr	r3, [r7, #28]
 8014fde:	88da      	ldrh	r2, [r3, #6]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	809a      	strh	r2, [r3, #4]

	LEAVE_FF(dj.fs, FR_OK);
 8014fe4:	f04f 0300 	mov.w	r3, #0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop

08014ff4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b08c      	sub	sp, #48	; 0x30
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	607a      	str	r2, [r7, #4]
 8015000:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	f04f 0200 	mov.w	r2, #0
 801500c:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	889b      	ldrh	r3, [r3, #4]
 8015016:	4610      	mov	r0, r2
 8015018:	4619      	mov	r1, r3
 801501a:	f7ff fddd 	bl	8014bd8 <validate>
 801501e:	4603      	mov	r3, r0
 8015020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8015024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015028:	2b00      	cmp	r3, #0
 801502a:	d002      	beq.n	8015032 <f_read+0x3e>
 801502c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015030:	e164      	b.n	80152fc <f_read+0x308>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	799b      	ldrb	r3, [r3, #6]
 8015036:	b2db      	uxtb	r3, r3
 8015038:	b25b      	sxtb	r3, r3
 801503a:	2b00      	cmp	r3, #0
 801503c:	da02      	bge.n	8015044 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801503e:	f04f 0302 	mov.w	r3, #2
 8015042:	e15b      	b.n	80152fc <f_read+0x308>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	799b      	ldrb	r3, [r3, #6]
 8015048:	f003 0301 	and.w	r3, r3, #1
 801504c:	2b00      	cmp	r3, #0
 801504e:	d102      	bne.n	8015056 <f_read+0x62>
		LEAVE_FF(fp->fs, FR_DENIED);
 8015050:	f04f 0307 	mov.w	r3, #7
 8015054:	e152      	b.n	80152fc <f_read+0x308>
	remain = fp->fsize - fp->fptr;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	68da      	ldr	r2, [r3, #12]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	689b      	ldr	r3, [r3, #8]
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	61fb      	str	r3, [r7, #28]
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	69fb      	ldr	r3, [r7, #28]
 8015066:	429a      	cmp	r2, r3
 8015068:	f240 8142 	bls.w	80152f0 <f_read+0x2fc>
 801506c:	69fb      	ldr	r3, [r7, #28]
 801506e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;									/* Repeat until all data transferred */
 8015070:	e13e      	b.n	80152f0 <f_read+0x2fc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	689b      	ldr	r3, [r3, #8]
 8015076:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801507a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801507e:	2b00      	cmp	r3, #0
 8015080:	f040 8103 	bne.w	801528a <f_read+0x296>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	79da      	ldrb	r2, [r3, #7]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	789b      	ldrb	r3, [r3, #2]
 801508e:	429a      	cmp	r2, r3
 8015090:	d332      	bcc.n	80150f8 <f_read+0x104>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	689b      	ldr	r3, [r3, #8]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 8015096:	2b00      	cmp	r3, #0
 8015098:	d102      	bne.n	80150a0 <f_read+0xac>
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	691b      	ldr	r3, [r3, #16]
 801509e:	e008      	b.n	80150b2 <f_read+0xbe>
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	681a      	ldr	r2, [r3, #0]
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	695b      	ldr	r3, [r3, #20]
 80150a8:	4610      	mov	r0, r2
 80150aa:	4619      	mov	r1, r3
 80150ac:	f7fe fb98 	bl	80137e0 <get_fat>
 80150b0:	4603      	mov	r3, r0

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 80150b2:	61bb      	str	r3, [r7, #24]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	2b01      	cmp	r3, #1
 80150b8:	d809      	bhi.n	80150ce <f_read+0xda>
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	799b      	ldrb	r3, [r3, #6]
 80150be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80150c2:	b2da      	uxtb	r2, r3
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	719a      	strb	r2, [r3, #6]
 80150c8:	f04f 0302 	mov.w	r3, #2
 80150cc:	e116      	b.n	80152fc <f_read+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150d4:	d109      	bne.n	80150ea <f_read+0xf6>
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	799b      	ldrb	r3, [r3, #6]
 80150da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80150de:	b2da      	uxtb	r2, r3
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	719a      	strb	r2, [r3, #6]
 80150e4:	f04f 0301 	mov.w	r3, #1
 80150e8:	e108      	b.n	80152fc <f_read+0x308>
				fp->curr_clust = clst;				/* Update current cluster */
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	69ba      	ldr	r2, [r7, #24]
 80150ee:	615a      	str	r2, [r3, #20]
				fp->csect = 0;						/* Reset sector offset in the cluster */
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f04f 0200 	mov.w	r2, #0
 80150f6:	71da      	strb	r2, [r3, #7]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	695b      	ldr	r3, [r3, #20]
 8015100:	4610      	mov	r0, r2
 8015102:	4619      	mov	r1, r3
 8015104:	f7fe fe88 	bl	8013e18 <clust2sect>
 8015108:	4603      	mov	r3, r0
 801510a:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d109      	bne.n	8015126 <f_read+0x132>
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	799b      	ldrb	r3, [r3, #6]
 8015116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801511a:	b2da      	uxtb	r2, r3
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	719a      	strb	r2, [r3, #6]
 8015120:	f04f 0302 	mov.w	r3, #2
 8015124:	e0ea      	b.n	80152fc <f_read+0x308>
			sect += fp->csect;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	79db      	ldrb	r3, [r3, #7]
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	18d3      	adds	r3, r2, r3
 801512e:	617b      	str	r3, [r7, #20]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8015136:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {								/* Read maximum contiguous sectors directly */
 8015138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513a:	2b00      	cmp	r3, #0
 801513c:	d053      	beq.n	80151e6 <f_read+0x1f2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	79db      	ldrb	r3, [r3, #7]
 8015142:	461a      	mov	r2, r3
 8015144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015146:	18d2      	adds	r2, r2, r3
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	789b      	ldrb	r3, [r3, #2]
 801514e:	429a      	cmp	r2, r3
 8015150:	d907      	bls.n	8015162 <f_read+0x16e>
					cc = fp->fs->csize - fp->csect;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	789b      	ldrb	r3, [r3, #2]
 8015158:	461a      	mov	r2, r3
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	79db      	ldrb	r3, [r3, #7]
 801515e:	1ad3      	subs	r3, r2, r3
 8015160:	62bb      	str	r3, [r7, #40]	; 0x28
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	785a      	ldrb	r2, [r3, #1]
 8015168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516a:	b2db      	uxtb	r3, r3
 801516c:	4610      	mov	r0, r2
 801516e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015170:	697a      	ldr	r2, [r7, #20]
 8015172:	f7fe f8c5 	bl	8013300 <disk_read>
 8015176:	4603      	mov	r3, r0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d009      	beq.n	8015190 <f_read+0x19c>
					ABORT(fp->fs, FR_DISK_ERR);
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	799b      	ldrb	r3, [r3, #6]
 8015180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015184:	b2da      	uxtb	r2, r3
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	719a      	strb	r2, [r3, #6]
 801518a:	f04f 0301 	mov.w	r3, #1
 801518e:	e0b5      	b.n	80152fc <f_read+0x308>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	799b      	ldrb	r3, [r3, #6]
 8015194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015198:	2b00      	cmp	r3, #0
 801519a:	d017      	beq.n	80151cc <f_read+0x1d8>
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	699a      	ldr	r2, [r3, #24]
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	1ad2      	subs	r2, r2, r3
 80151a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d210      	bcs.n	80151cc <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	699a      	ldr	r2, [r3, #24]
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	1ad3      	subs	r3, r2, r3
 80151b2:	ea4f 2343 	mov.w	r3, r3, lsl #9
 80151b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151b8:	18d2      	adds	r2, r2, r3
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80151c0:	4610      	mov	r0, r2
 80151c2:	4619      	mov	r1, r3
 80151c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80151c8:	f7fe f942 	bl	8013450 <mem_cpy>
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	79da      	ldrb	r2, [r3, #7]
 80151d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	18d3      	adds	r3, r2, r3
 80151d6:	b2da      	uxtb	r2, r3
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	71da      	strb	r2, [r3, #7]
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 80151dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151de:	ea4f 2343 	mov.w	r3, r3, lsl #9
 80151e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80151e4:	e070      	b.n	80152c8 <f_read+0x2d4>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	799b      	ldrb	r3, [r3, #6]
 80151ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d022      	beq.n	8015238 <f_read+0x244>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	7859      	ldrb	r1, [r3, #1]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	4608      	mov	r0, r1
 8015204:	4611      	mov	r1, r2
 8015206:	461a      	mov	r2, r3
 8015208:	f04f 0301 	mov.w	r3, #1
 801520c:	f7fe f8ac 	bl	8013368 <disk_write>
 8015210:	4603      	mov	r3, r0
 8015212:	2b00      	cmp	r3, #0
 8015214:	d009      	beq.n	801522a <f_read+0x236>
					ABORT(fp->fs, FR_DISK_ERR);
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	799b      	ldrb	r3, [r3, #6]
 801521a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801521e:	b2da      	uxtb	r2, r3
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	719a      	strb	r2, [r3, #6]
 8015224:	f04f 0301 	mov.w	r3, #1
 8015228:	e068      	b.n	80152fc <f_read+0x308>
				fp->flag &= ~FA__DIRTY;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	799b      	ldrb	r3, [r3, #6]
 801522e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015232:	b2da      	uxtb	r2, r3
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	699a      	ldr	r2, [r3, #24]
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	429a      	cmp	r2, r3
 8015240:	d019      	beq.n	8015276 <f_read+0x282>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	785a      	ldrb	r2, [r3, #1]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801524e:	4610      	mov	r0, r2
 8015250:	4619      	mov	r1, r3
 8015252:	697a      	ldr	r2, [r7, #20]
 8015254:	f04f 0301 	mov.w	r3, #1
 8015258:	f7fe f852 	bl	8013300 <disk_read>
 801525c:	4603      	mov	r3, r0
 801525e:	2b00      	cmp	r3, #0
 8015260:	d009      	beq.n	8015276 <f_read+0x282>
					ABORT(fp->fs, FR_DISK_ERR);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	799b      	ldrb	r3, [r3, #6]
 8015266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801526a:	b2da      	uxtb	r2, r3
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	719a      	strb	r2, [r3, #6]
 8015270:	f04f 0301 	mov.w	r3, #1
 8015274:	e042      	b.n	80152fc <f_read+0x308>
			}
#endif
			fp->dsect = sect;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	697a      	ldr	r2, [r7, #20]
 801527a:	619a      	str	r2, [r3, #24]
			fp->csect++;							/* Next sector address in the cluster */
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	79db      	ldrb	r3, [r3, #7]
 8015280:	f103 0301 	add.w	r3, r3, #1
 8015284:	b2da      	uxtb	r2, r3
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	71da      	strb	r2, [r3, #7]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	689b      	ldr	r3, [r3, #8]
 801528e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8015292:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8015296:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801529a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;
 801529c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d901      	bls.n	80152a8 <f_read+0x2b4>
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	689b      	ldr	r3, [r3, #8]
 80152b2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80152b6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80152ba:	18d2      	adds	r2, r2, r3
 80152bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152c0:	4611      	mov	r1, r2
 80152c2:	461a      	mov	r2, r3
 80152c4:	f7fe f8c4 	bl	8013450 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80152c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152cc:	18d3      	adds	r3, r2, r3
 80152ce:	627b      	str	r3, [r7, #36]	; 0x24
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	689a      	ldr	r2, [r3, #8]
 80152d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d6:	18d2      	adds	r2, r2, r3
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	609a      	str	r2, [r3, #8]
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e2:	18d2      	adds	r2, r2, r3
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	601a      	str	r2, [r3, #0]
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ec:	1ad3      	subs	r3, r2, r3
 80152ee:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	f47f aebd 	bne.w	8015072 <f_read+0x7e>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80152f8:	f04f 0300 	mov.w	r3, #0
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop

08015308 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b086      	sub	sp, #24
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	889b      	ldrh	r3, [r3, #4]
 8015318:	4610      	mov	r0, r2
 801531a:	4619      	mov	r1, r3
 801531c:	f7ff fc5c 	bl	8014bd8 <validate>
 8015320:	4603      	mov	r3, r0
 8015322:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015324:	7dfb      	ldrb	r3, [r7, #23]
 8015326:	2b00      	cmp	r3, #0
 8015328:	f040 80c8 	bne.w	80154bc <f_sync+0x1b4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	799b      	ldrb	r3, [r3, #6]
 8015330:	f003 0320 	and.w	r3, r3, #32
 8015334:	2b00      	cmp	r3, #0
 8015336:	f000 80c1 	beq.w	80154bc <f_sync+0x1b4>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	799b      	ldrb	r3, [r3, #6]
 801533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015342:	2b00      	cmp	r3, #0
 8015344:	d01b      	beq.n	801537e <f_sync+0x76>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	7859      	ldrb	r1, [r3, #1]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	699b      	ldr	r3, [r3, #24]
 8015356:	4608      	mov	r0, r1
 8015358:	4611      	mov	r1, r2
 801535a:	461a      	mov	r2, r3
 801535c:	f04f 0301 	mov.w	r3, #1
 8015360:	f7fe f802 	bl	8013368 <disk_write>
 8015364:	4603      	mov	r3, r0
 8015366:	2b00      	cmp	r3, #0
 8015368:	d002      	beq.n	8015370 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801536a:	f04f 0301 	mov.w	r3, #1
 801536e:	e0a6      	b.n	80154be <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	799b      	ldrb	r3, [r3, #6]
 8015374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015378:	b2da      	uxtb	r2, r3
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	69db      	ldr	r3, [r3, #28]
 8015386:	4610      	mov	r0, r2
 8015388:	4619      	mov	r1, r3
 801538a:	f7fe f8ff 	bl	801358c <move_window>
 801538e:	4603      	mov	r3, r0
 8015390:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8015392:	7dfb      	ldrb	r3, [r7, #23]
 8015394:	2b00      	cmp	r3, #0
 8015396:	f040 8091 	bne.w	80154bc <f_sync+0x1b4>
				dir = fp->dir_ptr;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6a1b      	ldr	r3, [r3, #32]
 801539e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	f103 030b 	add.w	r3, r3, #11
 80153a6:	693a      	ldr	r2, [r7, #16]
 80153a8:	f102 020b 	add.w	r2, r2, #11
 80153ac:	7812      	ldrb	r2, [r2, #0]
 80153ae:	f042 0220 	orr.w	r2, r2, #32
 80153b2:	b2d2      	uxtb	r2, r2
 80153b4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	f103 031c 	add.w	r3, r3, #28
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	68d2      	ldr	r2, [r2, #12]
 80153c0:	b2d2      	uxtb	r2, r2
 80153c2:	701a      	strb	r2, [r3, #0]
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	f103 031d 	add.w	r3, r3, #29
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	68d2      	ldr	r2, [r2, #12]
 80153ce:	b292      	uxth	r2, r2
 80153d0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80153d4:	b292      	uxth	r2, r2
 80153d6:	b2d2      	uxtb	r2, r2
 80153d8:	701a      	strb	r2, [r3, #0]
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	f103 031e 	add.w	r3, r3, #30
 80153e0:	687a      	ldr	r2, [r7, #4]
 80153e2:	68d2      	ldr	r2, [r2, #12]
 80153e4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80153e8:	b2d2      	uxtb	r2, r2
 80153ea:	701a      	strb	r2, [r3, #0]
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	f103 031f 	add.w	r3, r3, #31
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	68d2      	ldr	r2, [r2, #12]
 80153f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80153fa:	b2d2      	uxtb	r2, r2
 80153fc:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	f103 031a 	add.w	r3, r3, #26
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	6912      	ldr	r2, [r2, #16]
 8015408:	b2d2      	uxtb	r2, r2
 801540a:	701a      	strb	r2, [r3, #0]
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	f103 031b 	add.w	r3, r3, #27
 8015412:	687a      	ldr	r2, [r7, #4]
 8015414:	6912      	ldr	r2, [r2, #16]
 8015416:	b292      	uxth	r2, r2
 8015418:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801541c:	b292      	uxth	r2, r2
 801541e:	b2d2      	uxtb	r2, r2
 8015420:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	f103 0314 	add.w	r3, r3, #20
 8015428:	687a      	ldr	r2, [r7, #4]
 801542a:	6912      	ldr	r2, [r2, #16]
 801542c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015430:	b2d2      	uxtb	r2, r2
 8015432:	701a      	strb	r2, [r3, #0]
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	f103 0315 	add.w	r3, r3, #21
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	6912      	ldr	r2, [r2, #16]
 801543e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015442:	b292      	uxth	r2, r2
 8015444:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8015448:	b292      	uxth	r2, r2
 801544a:	b2d2      	uxtb	r2, r2
 801544c:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();			/* Updated time */
 801544e:	f000 f92f 	bl	80156b0 <get_fattime>
 8015452:	4603      	mov	r3, r0
 8015454:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	f103 0316 	add.w	r3, r3, #22
 801545c:	68fa      	ldr	r2, [r7, #12]
 801545e:	b2d2      	uxtb	r2, r2
 8015460:	701a      	strb	r2, [r3, #0]
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	f103 0317 	add.w	r3, r3, #23
 8015468:	68fa      	ldr	r2, [r7, #12]
 801546a:	b292      	uxth	r2, r2
 801546c:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8015470:	b292      	uxth	r2, r2
 8015472:	b2d2      	uxtb	r2, r2
 8015474:	701a      	strb	r2, [r3, #0]
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	f103 0318 	add.w	r3, r3, #24
 801547c:	68fa      	ldr	r2, [r7, #12]
 801547e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	f103 0319 	add.w	r3, r3, #25
 801548c:	68fa      	ldr	r2, [r7, #12]
 801548e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8015492:	b2d2      	uxtb	r2, r2
 8015494:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	799b      	ldrb	r3, [r3, #6]
 801549a:	f023 0320 	bic.w	r3, r3, #32
 801549e:	b2da      	uxtb	r2, r3
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f04f 0201 	mov.w	r2, #1
 80154ac:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fe f8d4 	bl	8013660 <sync>
 80154b8:	4603      	mov	r3, r0
 80154ba:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80154bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80154be:	4618      	mov	r0, r3
 80154c0:	f107 0718 	add.w	r7, r7, #24
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <_ZN12CFileHandlerC1Ev>:

    return uiBytesRead;
}


CFileHandler::CFileHandler() {
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	4618      	mov	r0, r3
 80154d4:	f7fc fd84 	bl	8011fe0 <_ZN12AManagedTaskC1Ev>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4a08      	ldr	r2, [pc, #32]	; (80154fc <_ZN12CFileHandlerC1Ev+0x34>)
 80154dc:	601a      	str	r2, [r3, #0]
	Status = SD_OK;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f04f 0200 	mov.w	r2, #0
 80154e4:	731a      	strb	r2, [r3, #12]
	fsresult = FR_OK;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f04f 0200 	mov.w	r2, #0
 80154ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	4618      	mov	r0, r3
 80154f4:	f107 0708 	add.w	r7, r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	0801e3d8 	.word	0x0801e3d8

08015500 <_ZN12CFileHandlerD1Ev>:

CFileHandler::~CFileHandler() {
 8015500:	b580      	push	{r7, lr}
 8015502:	b082      	sub	sp, #8
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	4a0a      	ldr	r2, [pc, #40]	; (8015534 <_ZN12CFileHandlerD1Ev+0x34>)
 801550c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f7fc fd82 	bl	8012018 <_ZN12AManagedTaskD1Ev>
 8015514:	f04f 0300 	mov.w	r3, #0
 8015518:	f003 0301 	and.w	r3, r3, #1
 801551c:	b2db      	uxtb	r3, r3
 801551e:	2b00      	cmp	r3, #0
 8015520:	d002      	beq.n	8015528 <_ZN12CFileHandlerD1Ev+0x28>
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f003 f894 	bl	8018650 <_ZdlPv>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4618      	mov	r0, r3
 801552c:	f107 0708 	add.w	r7, r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}
 8015534:	0801e3d8 	.word	0x0801e3d8

08015538 <_ZN12CFileHandlerD0Ev>:
CFileHandler::CFileHandler() {
	Status = SD_OK;
	fsresult = FR_OK;
}

CFileHandler::~CFileHandler() {
 8015538:	b580      	push	{r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f7ff ffdd 	bl	8015500 <_ZN12CFileHandlerD1Ev>
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f003 f882 	bl	8018650 <_ZdlPv>
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	4618      	mov	r0, r3
 8015550:	f107 0708 	add.w	r7, r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <_ZN12CFileHandler12HardwareInitEv>:
  * @brief  HardwareInit called before Scheduler starts
  * 		SD Card interface will be initialized
  * @param  None
  * @retval true on succsess
  */
bool CFileHandler::HardwareInit(){
 8015558:	b480      	push	{r7}
 801555a:	b083      	sub	sp, #12
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
	return true;
 8015560:	f04f 0301 	mov.w	r3, #1
}
 8015564:	4618      	mov	r0, r3
 8015566:	f107 070c 	add.w	r7, r7, #12
 801556a:	46bd      	mov	sp, r7
 801556c:	bc80      	pop	{r7}
 801556e:	4770      	bx	lr

08015570 <_ZN12CFileHandler3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CFileHandler::Run(){
 8015570:	b590      	push	{r4, r7, lr}
 8015572:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8015576:	b085      	sub	sp, #20
 8015578:	af00      	add	r7, sp, #0
 801557a:	f107 0310 	add.w	r3, r7, #16
 801557e:	f1a3 030c 	sub.w	r3, r3, #12
 8015582:	6018      	str	r0, [r3, #0]

	uint8_t uiReadBuffer[BUFFER_SIZE];
	unsigned int uiBytesRead=0;
 8015584:	f04f 0300 	mov.w	r3, #0
 8015588:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801558c:	f102 0208 	add.w	r2, r2, #8
 8015590:	6013      	str	r3, [r2, #0]
	HMP3Decoder mp3Decoder;

	/*-----------------------------------------------------------------------------
	Initialize the MP3decoder structure
	-----------------------------------------------------------------------------*/
	mp3Decoder = MP3InitDecoder();
 8015592:	f7fb fb23 	bl	8010bdc <MP3InitDecoder>
 8015596:	4603      	mov	r3, r0
 8015598:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801559c:	f102 020c 	add.w	r2, r2, #12
 80155a0:	6013      	str	r3, [r2, #0]
	if(mp3Decoder == 0) {
 80155a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80155a6:	f102 020c 	add.w	r2, r2, #12
 80155aa:	6813      	ldr	r3, [r2, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d100      	bne.n	80155b2 <_ZN12CFileHandler3RunEv+0x42>
		// memory allocation failed, 28k heap required
		while(1);
 80155b0:	e7fe      	b.n	80155b0 <_ZN12CFileHandler3RunEv+0x40>
	}

	/*-----------------------------------------------------------------------------
	Initialize the audio dac and codec
	-----------------------------------------------------------------------------*/
	EVAL_AUDIO_Init(OUTPUT_DEVICE_AUTO,100,44100);
 80155b2:	f04f 0004 	mov.w	r0, #4
 80155b6:	f04f 0164 	mov.w	r1, #100	; 0x64
 80155ba:	f64a 4244 	movw	r2, #44100	; 0xac44
 80155be:	f7fa f8fb 	bl	800f7b8 <EVAL_AUDIO_Init>
	structure with a logical drive number.  Mounting must be done before any file
	operations.  Mounting does not write anything to the SD card, it simply
	initializes and associates the file structure.  The file system structure
	members are not filled in until the first file operation after f_mount.
	-----------------------------------------------------------------------------*/
	fsresult = f_mount(0, &myfs);
 80155c2:	f107 0310 	add.w	r3, r7, #16
 80155c6:	f1a3 030c 	sub.w	r3, r3, #12
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80155d0:	f04f 0000 	mov.w	r0, #0
 80155d4:	4619      	mov	r1, r3
 80155d6:	f7ff fb29 	bl	8014c2c <f_mount>
 80155da:	4603      	mov	r3, r0
 80155dc:	461a      	mov	r2, r3
 80155de:	f107 0310 	add.w	r3, r7, #16
 80155e2:	f1a3 030c 	sub.w	r3, r3, #12
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	if (fsresult != FR_OK){
 80155ec:	f107 0310 	add.w	r3, r7, #16
 80155f0:	f1a3 030c 	sub.w	r3, r3, #12
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d000      	beq.n	8015600 <_ZN12CFileHandler3RunEv+0x90>
		//FAT file system mounting failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning.
		while(1);
 80155fe:	e7fe      	b.n	80155fe <_ZN12CFileHandler3RunEv+0x8e>
	}

	/*-----------------------------------------------------------------------------
	Open a file and read first buffer
	-----------------------------------------------------------------------------*/
	fsresult = f_open(&myfile, "A-Team.mp3", FA_OPEN_EXISTING | FA_READ);  //open file for read
 8015600:	f107 0310 	add.w	r3, r7, #16
 8015604:	f1a3 030c 	sub.w	r3, r3, #12
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801560e:	4618      	mov	r0, r3
 8015610:	f649 1160 	movw	r1, #39264	; 0x9960
 8015614:	f6c0 0101 	movt	r1, #2049	; 0x801
 8015618:	f04f 0201 	mov.w	r2, #1
 801561c:	f7ff fb38 	bl	8014c90 <f_open>
 8015620:	4603      	mov	r3, r0
 8015622:	461a      	mov	r2, r3
 8015624:	f107 0310 	add.w	r3, r7, #16
 8015628:	f1a3 030c 	sub.w	r3, r3, #12
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	if (fsresult != FR_OK){
 8015632:	f107 0310 	add.w	r3, r7, #16
 8015636:	f1a3 030c 	sub.w	r3, r3, #12
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8015640:	2b00      	cmp	r3, #0
 8015642:	d000      	beq.n	8015646 <_ZN12CFileHandler3RunEv+0xd6>
		//File open failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning
		while(1);
 8015644:	e7fe      	b.n	8015644 <_ZN12CFileHandler3RunEv+0xd4>
	}
	f_sync(&myfile);   // minimize critical section, see Appnote from fatfs
 8015646:	f107 0310 	add.w	r3, r7, #16
 801564a:	f1a3 030c 	sub.w	r3, r3, #12
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015654:	4618      	mov	r0, r3
 8015656:	f7ff fe57 	bl	8015308 <f_sync>

	/*-----------------------------------------------------------------------------
	read buffer out of file
	-----------------------------------------------------------------------------*/
	fsresult = f_read(&myfile,uiReadBuffer,BUFFER_SIZE,&uiBytesRead);
 801565a:	f107 0310 	add.w	r3, r7, #16
 801565e:	f1a3 030c 	sub.w	r3, r3, #12
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f503 7226 	add.w	r2, r3, #664	; 0x298
 8015668:	f107 0310 	add.w	r3, r7, #16
 801566c:	f1a3 0308 	sub.w	r3, r3, #8
 8015670:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8015674:	f104 0408 	add.w	r4, r4, #8
 8015678:	4610      	mov	r0, r2
 801567a:	4619      	mov	r1, r3
 801567c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015680:	4623      	mov	r3, r4
 8015682:	f7ff fcb7 	bl	8014ff4 <f_read>
 8015686:	4603      	mov	r3, r0
 8015688:	461a      	mov	r2, r3
 801568a:	f107 0310 	add.w	r3, r7, #16
 801568e:	f1a3 030c 	sub.w	r3, r3, #12
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	if (fsresult != FR_OK){
 8015698:	f107 0310 	add.w	r3, r7, #16
 801569c:	f1a3 030c 	sub.w	r3, r3, #12
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d000      	beq.n	80156ac <_ZN12CFileHandler3RunEv+0x13c>
		//File read failed. FRESULT Error code: %d.  See FATfs/ff.h for FRESULT code meaning
		while(1);
 80156aa:	e7fe      	b.n	80156aa <_ZN12CFileHandler3RunEv+0x13a>




	/* Infinite loop */
	while (1)
 80156ac:	e7fe      	b.n	80156ac <_ZN12CFileHandler3RunEv+0x13c>
 80156ae:	bf00      	nop

080156b0 <get_fattime>:
 * 			bit 4:0
 * 				 Second / 2 (0..29)
 *
 */
DWORD get_fattime (void)
{
 80156b0:	b480      	push	{r7}
 80156b2:	af00      	add	r7, sp, #0


  return 0;
 80156b4:	f04f 0300 	mov.w	r3, #0
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bc80      	pop	{r7}
 80156be:	4770      	bx	lr

080156c0 <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 80156c6:	f04f 000c 	mov.w	r0, #12
 80156ca:	f04f 0101 	mov.w	r1, #1
 80156ce:	f7f9 fbaf 	bl	800ee30 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 80156d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80156d6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80156da:	f04f 0108 	mov.w	r1, #8
 80156de:	f04f 020c 	mov.w	r2, #12
 80156e2:	f7f9 f805 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
 80156e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80156ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80156ee:	f04f 0109 	mov.w	r1, #9
 80156f2:	f04f 020c 	mov.w	r2, #12
 80156f6:	f7f8 fffb 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
 80156fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80156fe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015702:	f04f 010a 	mov.w	r1, #10
 8015706:	f04f 020c 	mov.w	r2, #12
 801570a:	f7f8 fff1 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
 801570e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015712:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015716:	f04f 010b 	mov.w	r1, #11
 801571a:	f04f 020c 	mov.w	r2, #12
 801571e:	f7f8 ffe7 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
 8015722:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015726:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801572a:	f04f 010c 	mov.w	r1, #12
 801572e:	f04f 020c 	mov.w	r2, #12
 8015732:	f7f8 ffdd 	bl	800e6f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 8015736:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801573a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801573e:	f04f 0102 	mov.w	r1, #2
 8015742:	f04f 020c 	mov.w	r2, #12
 8015746:	f7f8 ffd3 	bl	800e6f0 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 801574a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 801574e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8015750:	f04f 0301 	mov.w	r3, #1
 8015754:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015756:	f04f 0302 	mov.w	r3, #2
 801575a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801575c:	f04f 0300 	mov.w	r3, #0
 8015760:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8015762:	f04f 0301 	mov.w	r3, #1
 8015766:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8015768:	463b      	mov	r3, r7
 801576a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801576e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015772:	4619      	mov	r1, r3
 8015774:	f7f8 feb2 	bl	800e4dc <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8015778:	f04f 0304 	mov.w	r3, #4
 801577c:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 801577e:	463b      	mov	r3, r7
 8015780:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8015784:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015788:	4619      	mov	r1, r3
 801578a:	f7f8 fea7 	bl	800e4dc <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 801578e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015792:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8015794:	f04f 0300 	mov.w	r3, #0
 8015798:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 801579a:	463b      	mov	r3, r7
 801579c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80157a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80157a4:	4619      	mov	r1, r3
 80157a6:	f7f8 fe99 	bl	800e4dc <GPIO_Init>

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 80157aa:	f04f 0380 	mov.w	r3, #128	; 0x80
 80157ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80157b0:	f04f 0300 	mov.w	r3, #0
 80157b4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80157b6:	f04f 0301 	mov.w	r3, #1
 80157ba:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 80157bc:	463b      	mov	r3, r7
 80157be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80157c2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80157c6:	4619      	mov	r1, r3
 80157c8:	f7f8 fe88 	bl	800e4dc <GPIO_Init>

  /* Enable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
 80157cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80157d0:	f04f 0101 	mov.w	r1, #1
 80157d4:	f7f9 fb84 	bl	800eee0 <RCC_APB2PeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
 80157d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80157dc:	f04f 0101 	mov.w	r1, #1
 80157e0:	f7f9 fb26 	bl	800ee30 <RCC_AHB1PeriphClockCmd>
}
 80157e4:	f107 0708 	add.w	r7, r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b092      	sub	sp, #72	; 0x48
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 80157f6:	f246 4058 	movw	r0, #25688	; 0x6458
 80157fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80157fe:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8015802:	f7f8 fdfd 	bl	800e400 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8015806:	f246 4058 	movw	r0, #25688	; 0x6458
 801580a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801580e:	f04f 0100 	mov.w	r1, #0
 8015812:	f7f8 fd5f 	bl	800e2d4 <DMA_Cmd>

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8015816:	f246 4058 	movw	r0, #25688	; 0x6458
 801581a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801581e:	f7f8 fbdf 	bl	800dfe0 <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8015822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015826:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8015828:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 801582c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8015830:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8015836:	f04f 0340 	mov.w	r3, #64	; 0x40
 801583a:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 801583c:	f04f 0300 	mov.w	r3, #0
 8015840:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8015842:	f04f 0300 	mov.w	r3, #0
 8015846:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8015848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801584c:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 801584e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015852:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8015854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015858:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801585a:	f04f 0300 	mov.w	r3, #0
 801585e:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8015860:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015864:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8015866:	f04f 0304 	mov.w	r3, #4
 801586a:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 801586c:	f04f 0303 	mov.w	r3, #3
 8015870:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8015872:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015876:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8015878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801587c:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 801587e:	f107 030c 	add.w	r3, r7, #12
 8015882:	f246 4058 	movw	r0, #25688	; 0x6458
 8015886:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801588a:	4619      	mov	r1, r3
 801588c:	f7f8 fcca 	bl	800e224 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8015890:	f246 4058 	movw	r0, #25688	; 0x6458
 8015894:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015898:	f04f 0110 	mov.w	r1, #16
 801589c:	f04f 0201 	mov.w	r2, #1
 80158a0:	f7f8 fde0 	bl	800e464 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 80158a4:	f246 4058 	movw	r0, #25688	; 0x6458
 80158a8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80158ac:	f04f 0120 	mov.w	r1, #32
 80158b0:	f7f8 fd2c 	bl	800e30c <DMA_FlowControllerConfig>

  /* DMA2 Stream3  or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 80158b4:	f246 4058 	movw	r0, #25688	; 0x6458
 80158b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80158bc:	f04f 0101 	mov.w	r1, #1
 80158c0:	f7f8 fd08 	bl	800e2d4 <DMA_Cmd>

}
 80158c4:	f107 0748 	add.w	r7, r7, #72	; 0x48
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b092      	sub	sp, #72	; 0x48
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 80158d6:	f246 4058 	movw	r0, #25688	; 0x6458
 80158da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80158de:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 80158e2:	f7f8 fd8d 	bl	800e400 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 80158e6:	f246 4058 	movw	r0, #25688	; 0x6458
 80158ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80158ee:	f04f 0100 	mov.w	r1, #0
 80158f2:	f7f8 fcef 	bl	800e2d4 <DMA_Cmd>

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 80158f6:	f246 4058 	movw	r0, #25688	; 0x6458
 80158fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80158fe:	f7f8 fb6f 	bl	800dfe0 <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8015902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015906:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8015908:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 801590c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8015910:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8015916:	f04f 0300 	mov.w	r3, #0
 801591a:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 801591c:	f04f 0300 	mov.w	r3, #0
 8015920:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8015922:	f04f 0300 	mov.w	r3, #0
 8015926:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8015928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801592c:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 801592e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015932:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8015934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015938:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801593a:	f04f 0300 	mov.w	r3, #0
 801593e:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8015940:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015944:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8015946:	f04f 0304 	mov.w	r3, #4
 801594a:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 801594c:	f04f 0303 	mov.w	r3, #3
 8015950:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8015952:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015956:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8015958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801595c:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 801595e:	f107 030c 	add.w	r3, r7, #12
 8015962:	f246 4058 	movw	r0, #25688	; 0x6458
 8015966:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801596a:	4619      	mov	r1, r3
 801596c:	f7f8 fc5a 	bl	800e224 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8015970:	f246 4058 	movw	r0, #25688	; 0x6458
 8015974:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015978:	f04f 0110 	mov.w	r1, #16
 801597c:	f04f 0201 	mov.w	r2, #1
 8015980:	f7f8 fd70 	bl	800e464 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8015984:	f246 4058 	movw	r0, #25688	; 0x6458
 8015988:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801598c:	f04f 0120 	mov.w	r1, #32
 8015990:	f7f8 fcbc 	bl	800e30c <DMA_FlowControllerConfig>

  /* DMA2 Stream3 or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8015994:	f246 4058 	movw	r0, #25688	; 0x6458
 8015998:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801599c:	f04f 0101 	mov.w	r1, #1
 80159a0:	f7f8 fc98 	bl	800e2d4 <DMA_Cmd>
}
 80159a4:	f107 0748 	add.w	r7, r7, #72	; 0x48
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <SD_Init>:
  *         transfer).
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_Init(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b082      	sub	sp, #8
 80159b0:	af00      	add	r7, sp, #0
  __IO SD_Error errorstatus = SD_OK;
 80159b2:	f04f 0300 	mov.w	r3, #0
 80159b6:	71fb      	strb	r3, [r7, #7]
  
  /* SDIO Peripheral Low Level Init */
  SD_LowLevel_Init();
 80159b8:	f7ff fe82 	bl	80156c0 <SD_LowLevel_Init>

  SDIO_DeInit();
 80159bc:	f7f9 fb14 	bl	800efe8 <SDIO_DeInit>

  errorstatus = SD_PowerON();
 80159c0:	f000 f8ce 	bl	8015b60 <SD_PowerON>
 80159c4:	4603      	mov	r3, r0
 80159c6:	71fb      	strb	r3, [r7, #7]

  if (errorstatus != SD_OK)
 80159c8:	79fb      	ldrb	r3, [r7, #7]
 80159ca:	b2db      	uxtb	r3, r3
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d002      	beq.n	80159d6 <SD_Init+0x2a>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
 80159d0:	79fb      	ldrb	r3, [r7, #7]
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	e05f      	b.n	8015a96 <SD_Init+0xea>
  }

  errorstatus = SD_InitializeCards();
 80159d6:	f000 fa89 	bl	8015eec <SD_InitializeCards>
 80159da:	4603      	mov	r3, r0
 80159dc:	71fb      	strb	r3, [r7, #7]

  if (errorstatus != SD_OK)
 80159de:	79fb      	ldrb	r3, [r7, #7]
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d002      	beq.n	80159ec <SD_Init+0x40>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
 80159e6:	79fb      	ldrb	r3, [r7, #7]
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	e054      	b.n	8015a96 <SD_Init+0xea>
  }

  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_TRANSFER_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 80159ec:	f247 53b8 	movw	r3, #30136	; 0x75b8
 80159f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80159f4:	f04f 0276 	mov.w	r2, #118	; 0x76
 80159f8:	751a      	strb	r2, [r3, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 80159fa:	f247 53b8 	movw	r3, #30136	; 0x75b8
 80159fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a02:	f04f 0200 	mov.w	r2, #0
 8015a06:	601a      	str	r2, [r3, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8015a08:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a10:	f04f 0200 	mov.w	r2, #0
 8015a14:	605a      	str	r2, [r3, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8015a16:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a1e:	f04f 0200 	mov.w	r2, #0
 8015a22:	609a      	str	r2, [r3, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8015a24:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a2c:	f04f 0200 	mov.w	r2, #0
 8015a30:	60da      	str	r2, [r3, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8015a32:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a3a:	f04f 0200 	mov.w	r2, #0
 8015a3e:	611a      	str	r2, [r3, #16]
  SDIO_Init(&SDIO_InitStructure);
 8015a40:	f247 50b8 	movw	r0, #30136	; 0x75b8
 8015a44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a48:	f7f9 fade 	bl	800f008 <SDIO_Init>

  /*----------------- Read CSD/CID MSD registers ------------------*/
  errorstatus = SD_GetCardInfo(&SDCardInfo);
 8015a4c:	f247 5054 	movw	r0, #30036	; 0x7554
 8015a50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015a54:	f000 fb84 	bl	8016160 <SD_GetCardInfo>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	71fb      	strb	r3, [r7, #7]

  if (errorstatus == SD_OK)
 8015a5c:	79fb      	ldrb	r3, [r7, #7]
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d10c      	bne.n	8015a7e <SD_Init+0xd2>
  {
    /*----------------- Select Card --------------------------------*/
    errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
 8015a64:	f247 5354 	movw	r3, #30036	; 0x7554
 8015a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015a6c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015a70:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8015a74:	4618      	mov	r0, r3
 8015a76:	f000 ff9b 	bl	80169b0 <SD_SelectDeselect>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	71fb      	strb	r3, [r7, #7]
  }

  if (errorstatus == SD_OK)
 8015a7e:	79fb      	ldrb	r3, [r7, #7]
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d105      	bne.n	8015a92 <SD_Init+0xe6>
  {
    errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_1b);
 8015a86:	f04f 0000 	mov.w	r0, #0
 8015a8a:	f000 fee3 	bl	8016854 <SD_EnableWideBusOperation>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	71fb      	strb	r3, [r7, #7]
  }  

  return(errorstatus);
 8015a92:	79fb      	ldrb	r3, [r7, #7]
 8015a94:	b2db      	uxtb	r3, r3
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	f107 0708 	add.w	r7, r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <SD_GetStatus>:
  *   This value can be: 
  *        - SD_TRANSFER_OK: No data transfer is acting
  *        - SD_TRANSFER_BUSY: Data transfer is acting
  */
SDTransferState SD_GetStatus(void)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b082      	sub	sp, #8
 8015aa4:	af00      	add	r7, sp, #0
  SDCardState cardstate =  SD_CARD_TRANSFER;
 8015aa6:	f04f 0304 	mov.w	r3, #4
 8015aaa:	71fb      	strb	r3, [r7, #7]

  cardstate = SD_GetState();
 8015aac:	f000 f816 	bl	8015adc <SD_GetState>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	71fb      	strb	r3, [r7, #7]
  
  if (cardstate == SD_CARD_TRANSFER)
 8015ab4:	79fb      	ldrb	r3, [r7, #7]
 8015ab6:	2b04      	cmp	r3, #4
 8015ab8:	d102      	bne.n	8015ac0 <SD_GetStatus+0x20>
  {
    return(SD_TRANSFER_OK);
 8015aba:	f04f 0300 	mov.w	r3, #0
 8015abe:	e007      	b.n	8015ad0 <SD_GetStatus+0x30>
  }
  else if(cardstate == SD_CARD_ERROR)
 8015ac0:	79fb      	ldrb	r3, [r7, #7]
 8015ac2:	2bff      	cmp	r3, #255	; 0xff
 8015ac4:	d102      	bne.n	8015acc <SD_GetStatus+0x2c>
  {
    return (SD_TRANSFER_ERROR);
 8015ac6:	f04f 0302 	mov.w	r3, #2
 8015aca:	e001      	b.n	8015ad0 <SD_GetStatus+0x30>
  }
  else
  {
    return(SD_TRANSFER_BUSY);
 8015acc:	f04f 0301 	mov.w	r3, #1
  }
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f107 0708 	add.w	r7, r7, #8
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop

08015adc <SD_GetState>:
  * @brief  Returns the current card's state.
  * @param  None
  * @retval SDCardState: SD Card Error or SD Card Current State.
  */
SDCardState SD_GetState(void)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
  uint32_t resp1 = 0;
 8015ae2:	f04f 0300 	mov.w	r3, #0
 8015ae6:	607b      	str	r3, [r7, #4]
  
  if(SD_Detect()== SD_PRESENT)
 8015ae8:	f000 f81e 	bl	8015b28 <SD_Detect>
 8015aec:	4603      	mov	r3, r0
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d112      	bne.n	8015b18 <SD_GetState+0x3c>
  {
    if (SD_SendStatus(&resp1) != SD_OK)
 8015af2:	f107 0304 	add.w	r3, r7, #4
 8015af6:	4618      	mov	r0, r3
 8015af8:	f001 faea 	bl	80170d0 <SD_SendStatus>
 8015afc:	4603      	mov	r3, r0
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d002      	beq.n	8015b08 <SD_GetState+0x2c>
    {
      return SD_CARD_ERROR;
 8015b02:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8015b06:	e009      	b.n	8015b1c <SD_GetState+0x40>
    }
    else
    {
      return (SDCardState)((resp1 >> 9) & 0x0F);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	f003 030f 	and.w	r3, r3, #15
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	e001      	b.n	8015b1c <SD_GetState+0x40>
    }
  }
  else
  {
    return SD_CARD_ERROR;
 8015b18:	f04f 03ff 	mov.w	r3, #255	; 0xff
  }
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f107 0708 	add.w	r7, r7, #8
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop

08015b28 <SD_Detect>:
 * @brief  Detect if SD card is correctly plugged in the memory slot.
 * @param  None
 * @retval Return if SD is detected or not
 */
uint8_t SD_Detect(void)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015b2e:	f04f 0301 	mov.w	r3, #1
 8015b32:	71fb      	strb	r3, [r7, #7]

  /*!< Check GPIO to detect SD */
  if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
 8015b34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015b38:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015b3c:	f04f 0180 	mov.w	r1, #128	; 0x80
 8015b40:	f7f8 fd76 	bl	800e630 <GPIO_ReadInputDataBit>
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d002      	beq.n	8015b50 <SD_Detect+0x28>
  {
    status = SD_NOT_PRESENT;
 8015b4a:	f04f 0300 	mov.w	r3, #0
 8015b4e:	71fb      	strb	r3, [r7, #7]
  }
  return status;
 8015b50:	79fb      	ldrb	r3, [r7, #7]
 8015b52:	b2db      	uxtb	r3, r3
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	f107 0708 	add.w	r7, r7, #8
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd80      	pop	{r7, pc}
 8015b5e:	bf00      	nop

08015b60 <SD_PowerON>:
  *   clock controls.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_PowerON(void)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b086      	sub	sp, #24
 8015b64:	af00      	add	r7, sp, #0
  __IO SD_Error errorstatus = SD_OK;
 8015b66:	f04f 0300 	mov.w	r3, #0
 8015b6a:	71fb      	strb	r3, [r7, #7]
  uint32_t response = 0, count = 0, validvoltage = 0;
 8015b6c:	f04f 0300 	mov.w	r3, #0
 8015b70:	617b      	str	r3, [r7, #20]
 8015b72:	f04f 0300 	mov.w	r3, #0
 8015b76:	613b      	str	r3, [r7, #16]
 8015b78:	f04f 0300 	mov.w	r3, #0
 8015b7c:	60fb      	str	r3, [r7, #12]
  uint32_t SDType = SD_STD_CAPACITY;
 8015b7e:	f04f 0300 	mov.w	r3, #0
 8015b82:	60bb      	str	r3, [r7, #8]
  /*!< Power ON Sequence -----------------------------------------------------*/
  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  /*!< SDIO_CK for initialization should not exceed 400 KHz */  
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
 8015b84:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015b8c:	f04f 0276 	mov.w	r2, #118	; 0x76
 8015b90:	751a      	strb	r2, [r3, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8015b92:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015b9a:	f04f 0200 	mov.w	r2, #0
 8015b9e:	601a      	str	r2, [r3, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8015ba0:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ba8:	f04f 0200 	mov.w	r2, #0
 8015bac:	605a      	str	r2, [r3, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8015bae:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015bb6:	f04f 0200 	mov.w	r2, #0
 8015bba:	609a      	str	r2, [r3, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8015bbc:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015bc4:	f04f 0200 	mov.w	r2, #0
 8015bc8:	60da      	str	r2, [r3, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8015bca:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8015bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015bd2:	f04f 0200 	mov.w	r2, #0
 8015bd6:	611a      	str	r2, [r3, #16]
  SDIO_Init(&SDIO_InitStructure);
 8015bd8:	f247 50b8 	movw	r0, #30136	; 0x75b8
 8015bdc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015be0:	f7f9 fa12 	bl	800f008 <SDIO_Init>

  /*!< Set Power State to ON */
  SDIO_SetPowerState(SDIO_PowerState_ON);
 8015be4:	f04f 0003 	mov.w	r0, #3
 8015be8:	f7f9 fa52 	bl	800f090 <SDIO_SetPowerState>

  /*!< Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);
 8015bec:	f04f 0001 	mov.w	r0, #1
 8015bf0:	f7f9 fa3e 	bl	800f070 <SDIO_ClockCmd>

  /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
  /*!< No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8015bf4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015bfc:	f04f 0200 	mov.w	r2, #0
 8015c00:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
 8015c02:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c0a:	f04f 0200 	mov.w	r2, #0
 8015c0e:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 8015c10:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c18:	f04f 0200 	mov.w	r2, #0
 8015c1c:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015c1e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c26:	f04f 0200 	mov.w	r2, #0
 8015c2a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015c2c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015c38:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015c3a:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015c3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015c42:	f7f9 fa43 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdError();
 8015c46:	f001 fb3d 	bl	80172c4 <CmdError>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	71fb      	strb	r3, [r7, #7]

  if (errorstatus != SD_OK)
 8015c4e:	79fb      	ldrb	r3, [r7, #7]
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d002      	beq.n	8015c5c <SD_PowerON+0xfc>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
 8015c56:	79fb      	ldrb	r3, [r7, #7]
 8015c58:	b2db      	uxtb	r3, r3
 8015c5a:	e142      	b.n	8015ee2 <SD_PowerON+0x382>
  /*!< Send CMD8 to verify SD card interface operating condition */
  /*!< Argument: - [31:12]: Reserved (shall be set to '0')
               - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
               - [7:0]: Check Pattern (recommended 0xAA) */
  /*!< CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 8015c5c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c64:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015c68:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
 8015c6a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c72:	f04f 0208 	mov.w	r2, #8
 8015c76:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8015c78:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c80:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015c84:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015c86:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c8e:	f04f 0200 	mov.w	r2, #0
 8015c92:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015c94:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ca0:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015ca2:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015ca6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015caa:	f7f9 fa0f 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp7Error();
 8015cae:	f001 fb33 	bl	8017318 <CmdResp7Error>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	71fb      	strb	r3, [r7, #7]

  if (errorstatus == SD_OK)
 8015cb6:	79fb      	ldrb	r3, [r7, #7]
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d10a      	bne.n	8015cd4 <SD_PowerON+0x174>
  {
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
 8015cbe:	f640 238c 	movw	r3, #2700	; 0xa8c
 8015cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015cc6:	f04f 0201 	mov.w	r2, #1
 8015cca:	601a      	str	r2, [r3, #0]
    SDType = SD_HIGH_CAPACITY;
 8015ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015cd0:	60bb      	str	r3, [r7, #8]
 8015cd2:	e02e      	b.n	8015d32 <SD_PowerON+0x1d2>
  }
  else
  {
    /*!< CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8015cd4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015cdc:	f04f 0200 	mov.w	r2, #0
 8015ce0:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8015ce2:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015cea:	f04f 0237 	mov.w	r2, #55	; 0x37
 8015cee:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8015cf0:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015cf8:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015cfc:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015cfe:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d06:	f04f 0200 	mov.w	r2, #0
 8015d0a:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015d0c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015d18:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015d1a:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015d1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d22:	f7f9 f9d3 	bl	800f0cc <SDIO_SendCommand>
    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8015d26:	f04f 0037 	mov.w	r0, #55	; 0x37
 8015d2a:	f001 fb3d 	bl	80173a8 <CmdResp1Error>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	71fb      	strb	r3, [r7, #7]
  }
  /*!< CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8015d32:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d3a:	f04f 0200 	mov.w	r2, #0
 8015d3e:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8015d40:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d48:	f04f 0237 	mov.w	r2, #55	; 0x37
 8015d4c:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8015d4e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d56:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015d5a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015d5c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d64:	f04f 0200 	mov.w	r2, #0
 8015d68:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015d6a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015d76:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015d78:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015d7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015d80:	f7f9 f9a4 	bl	800f0cc <SDIO_SendCommand>
  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8015d84:	f04f 0037 	mov.w	r0, #55	; 0x37
 8015d88:	f001 fb0e 	bl	80173a8 <CmdResp1Error>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	71fb      	strb	r3, [r7, #7]

  /*!< If errorstatus is Command TimeOut, it is a MMC card */
  /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if (errorstatus == SD_OK)
 8015d90:	79fb      	ldrb	r3, [r7, #7]
 8015d92:	b2db      	uxtb	r3, r3
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	f040 80a2 	bne.w	8015ede <SD_PowerON+0x37e>
  {
    /*!< SD CARD */
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8015d9a:	e07e      	b.n	8015e9a <SD_PowerON+0x33a>
    {

      /*!< SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8015d9c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015da4:	f04f 0200 	mov.w	r2, #0
 8015da8:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8015daa:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015db2:	f04f 0237 	mov.w	r2, #55	; 0x37
 8015db6:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8015db8:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015dc0:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015dc4:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015dc6:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015dce:	f04f 0200 	mov.w	r2, #0
 8015dd2:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015dd4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015de0:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015de2:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015de6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015dea:	f7f9 f96f 	bl	800f0cc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8015dee:	f04f 0037 	mov.w	r0, #55	; 0x37
 8015df2:	f001 fad9 	bl	80173a8 <CmdResp1Error>
 8015df6:	4603      	mov	r3, r0
 8015df8:	71fb      	strb	r3, [r7, #7]

      if (errorstatus != SD_OK)
 8015dfa:	79fb      	ldrb	r3, [r7, #7]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d002      	beq.n	8015e08 <SD_PowerON+0x2a8>
      {
        return(errorstatus);
 8015e02:	79fb      	ldrb	r3, [r7, #7]
 8015e04:	b2db      	uxtb	r3, r3
 8015e06:	e06c      	b.n	8015ee2 <SD_PowerON+0x382>
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015e0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015e12:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e1a:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
 8015e1c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e24:	f04f 0229 	mov.w	r2, #41	; 0x29
 8015e28:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8015e2a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e32:	f04f 0240 	mov.w	r2, #64	; 0x40
 8015e36:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015e38:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e40:	f04f 0200 	mov.w	r2, #0
 8015e44:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015e46:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015e52:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015e54:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015e58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015e5c:	f7f9 f936 	bl	800f0cc <SDIO_SendCommand>

      errorstatus = CmdResp3Error();
 8015e60:	f001 fb94 	bl	801758c <CmdResp3Error>
 8015e64:	4603      	mov	r3, r0
 8015e66:	71fb      	strb	r3, [r7, #7]
      if (errorstatus != SD_OK)
 8015e68:	79fb      	ldrb	r3, [r7, #7]
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d002      	beq.n	8015e76 <SD_PowerON+0x316>
      {
        return(errorstatus);
 8015e70:	79fb      	ldrb	r3, [r7, #7]
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	e035      	b.n	8015ee2 <SD_PowerON+0x382>
      }

      response = SDIO_GetResponse(SDIO_RESP1);
 8015e76:	f04f 0000 	mov.w	r0, #0
 8015e7a:	f7f9 f967 	bl	800f14c <SDIO_GetResponse>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	617b      	str	r3, [r7, #20]
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8015e88:	2b01      	cmp	r3, #1
 8015e8a:	bf14      	ite	ne
 8015e8c:	2300      	movne	r3, #0
 8015e8e:	2301      	moveq	r3, #1
 8015e90:	60fb      	str	r3, [r7, #12]
      count++;
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	f103 0301 	add.w	r3, r3, #1
 8015e98:	613b      	str	r3, [r7, #16]
     or SD card 1.x */
  if (errorstatus == SD_OK)
  {
    /*!< SD CARD */
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d105      	bne.n	8015eac <SD_PowerON+0x34c>
 8015ea0:	693a      	ldr	r2, [r7, #16]
 8015ea2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	f67f af78 	bls.w	8015d9c <SD_PowerON+0x23c>

      response = SDIO_GetResponse(SDIO_RESP1);
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      count++;
    }
    if (count >= SD_MAX_VOLT_TRIAL)
 8015eac:	693a      	ldr	r2, [r7, #16]
 8015eae:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d905      	bls.n	8015ec2 <SD_PowerON+0x362>
    {
      errorstatus = SD_INVALID_VOLTRANGE;
 8015eb6:	f04f 031b 	mov.w	r3, #27
 8015eba:	71fb      	strb	r3, [r7, #7]
      return(errorstatus);
 8015ebc:	79fb      	ldrb	r3, [r7, #7]
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	e00f      	b.n	8015ee2 <SD_PowerON+0x382>
    }

    if (response &= SD_HIGH_CAPACITY)
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015ec8:	617b      	str	r3, [r7, #20]
 8015eca:	697b      	ldr	r3, [r7, #20]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d006      	beq.n	8015ede <SD_PowerON+0x37e>
    {
      CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8015ed0:	f640 238c 	movw	r3, #2700	; 0xa8c
 8015ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ed8:	f04f 0202 	mov.w	r2, #2
 8015edc:	601a      	str	r2, [r3, #0]
    }

  }/*!< else MMC Card */

  return(errorstatus);
 8015ede:	79fb      	ldrb	r3, [r7, #7]
 8015ee0:	b2db      	uxtb	r3, r3
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f107 0718 	add.w	r7, r7, #24
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}

08015eec <SD_InitializeCards>:
  *         into standby state.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_InitializeCards(void)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8015ef2:	f04f 0300 	mov.w	r3, #0
 8015ef6:	71fb      	strb	r3, [r7, #7]
  uint16_t rca = 0x01;
 8015ef8:	f04f 0301 	mov.w	r3, #1
 8015efc:	80bb      	strh	r3, [r7, #4]

  if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 8015efe:	f7f9 f8d7 	bl	800f0b0 <SDIO_GetPowerState>
 8015f02:	4603      	mov	r3, r0
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d104      	bne.n	8015f12 <SD_InitializeCards+0x26>
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
 8015f08:	f04f 0325 	mov.w	r3, #37	; 0x25
 8015f0c:	71fb      	strb	r3, [r7, #7]
    return(errorstatus);
 8015f0e:	79fb      	ldrb	r3, [r7, #7]
 8015f10:	e121      	b.n	8016156 <SD_InitializeCards+0x26a>
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8015f12:	f640 238c 	movw	r3, #2700	; 0xa8c
 8015f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	2b04      	cmp	r3, #4
 8015f1e:	d059      	beq.n	8015fd4 <SD_InitializeCards+0xe8>
  {
    /*!< Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8015f20:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f28:	f04f 0200 	mov.w	r2, #0
 8015f2c:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
 8015f2e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f36:	f04f 0202 	mov.w	r2, #2
 8015f3a:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 8015f3c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f44:	f04f 02c0 	mov.w	r2, #192	; 0xc0
 8015f48:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8015f4a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f52:	f04f 0200 	mov.w	r2, #0
 8015f56:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8015f58:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8015f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015f64:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8015f66:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8015f6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8015f6e:	f7f9 f8ad 	bl	800f0cc <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 8015f72:	f001 fb3b 	bl	80175ec <CmdResp2Error>
 8015f76:	4603      	mov	r3, r0
 8015f78:	71fb      	strb	r3, [r7, #7]

    if (SD_OK != errorstatus)
 8015f7a:	79fb      	ldrb	r3, [r7, #7]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d001      	beq.n	8015f84 <SD_InitializeCards+0x98>
    {
      return(errorstatus);
 8015f80:	79fb      	ldrb	r3, [r7, #7]
 8015f82:	e0e8      	b.n	8016156 <SD_InitializeCards+0x26a>
    }

    CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 8015f84:	f04f 0000 	mov.w	r0, #0
 8015f88:	f7f9 f8e0 	bl	800f14c <SDIO_GetResponse>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8015f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f96:	601a      	str	r2, [r3, #0]
    CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 8015f98:	f04f 0004 	mov.w	r0, #4
 8015f9c:	f7f9 f8d6 	bl	800f14c <SDIO_GetResponse>
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8015fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015faa:	605a      	str	r2, [r3, #4]
    CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 8015fac:	f04f 0008 	mov.w	r0, #8
 8015fb0:	f7f9 f8cc 	bl	800f14c <SDIO_GetResponse>
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8015fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fbe:	609a      	str	r2, [r3, #8]
    CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 8015fc0:	f04f 000c 	mov.w	r0, #12
 8015fc4:	f7f9 f8c2 	bl	800f14c <SDIO_GetResponse>
 8015fc8:	4602      	mov	r2, r0
 8015fca:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8015fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fd2:	60da      	str	r2, [r3, #12]
  }
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
 8015fd4:	f640 238c 	movw	r3, #2700	; 0xa8c
 8015fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d014      	beq.n	801600c <SD_InitializeCards+0x120>
 8015fe2:	f640 238c 	movw	r3, #2700	; 0xa8c
 8015fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	2b01      	cmp	r3, #1
 8015fee:	d00d      	beq.n	801600c <SD_InitializeCards+0x120>
 8015ff0:	f640 238c 	movw	r3, #2700	; 0xa8c
 8015ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b06      	cmp	r3, #6
 8015ffc:	d006      	beq.n	801600c <SD_InitializeCards+0x120>
      ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8015ffe:	f640 238c 	movw	r3, #2700	; 0xa8c
 8016002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	2b02      	cmp	r3, #2
 801600a:	d136      	bne.n	801607a <SD_InitializeCards+0x18e>
  {
    /*!< Send CMD3 SET_REL_ADDR with argument 0 */
    /*!< SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 801600c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016014:	f04f 0200 	mov.w	r2, #0
 8016018:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
 801601a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801601e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016022:	f04f 0203 	mov.w	r2, #3
 8016026:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016028:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801602c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016030:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016034:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016036:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801603e:	f04f 0200 	mov.w	r2, #0
 8016042:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016044:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801604c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016050:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016052:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016056:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801605a:	f7f9 f837 	bl	800f0cc <SDIO_SendCommand>

    errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
 801605e:	f107 0304 	add.w	r3, r7, #4
 8016062:	f04f 0003 	mov.w	r0, #3
 8016066:	4619      	mov	r1, r3
 8016068:	f001 fb00 	bl	801766c <CmdResp6Error>
 801606c:	4603      	mov	r3, r0
 801606e:	71fb      	strb	r3, [r7, #7]

    if (SD_OK != errorstatus)
 8016070:	79fb      	ldrb	r3, [r7, #7]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d001      	beq.n	801607a <SD_InitializeCards+0x18e>
    {
      return(errorstatus);
 8016076:	79fb      	ldrb	r3, [r7, #7]
 8016078:	e06d      	b.n	8016156 <SD_InitializeCards+0x26a>
    }
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 801607a:	f640 238c 	movw	r3, #2700	; 0xa8c
 801607e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b04      	cmp	r3, #4
 8016086:	d062      	beq.n	801614e <SD_InitializeCards+0x262>
  {
    RCA = rca;
 8016088:	88bb      	ldrh	r3, [r7, #4]
 801608a:	461a      	mov	r2, r3
 801608c:	f640 23b0 	movw	r3, #2736	; 0xab0
 8016090:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016094:	601a      	str	r2, [r3, #0]

    /*!< Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 8016096:	88bb      	ldrh	r3, [r7, #4]
 8016098:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801609c:	461a      	mov	r2, r3
 801609e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80160a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80160a6:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
 80160a8:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80160ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80160b0:	f04f 0209 	mov.w	r2, #9
 80160b4:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 80160b6:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80160ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80160be:	f04f 02c0 	mov.w	r2, #192	; 0xc0
 80160c2:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80160c4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80160c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80160cc:	f04f 0200 	mov.w	r2, #0
 80160d0:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80160d2:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80160d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80160da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160de:	611a      	str	r2, [r3, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 80160e0:	f247 50a4 	movw	r0, #30116	; 0x75a4
 80160e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80160e8:	f7f8 fff0 	bl	800f0cc <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 80160ec:	f001 fa7e 	bl	80175ec <CmdResp2Error>
 80160f0:	4603      	mov	r3, r0
 80160f2:	71fb      	strb	r3, [r7, #7]

    if (SD_OK != errorstatus)
 80160f4:	79fb      	ldrb	r3, [r7, #7]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d001      	beq.n	80160fe <SD_InitializeCards+0x212>
    {
      return(errorstatus);
 80160fa:	79fb      	ldrb	r3, [r7, #7]
 80160fc:	e02b      	b.n	8016156 <SD_InitializeCards+0x26a>
    }

    CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 80160fe:	f04f 0000 	mov.w	r0, #0
 8016102:	f7f9 f823 	bl	800f14c <SDIO_GetResponse>
 8016106:	4602      	mov	r2, r0
 8016108:	f640 2390 	movw	r3, #2704	; 0xa90
 801610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016110:	601a      	str	r2, [r3, #0]
    CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 8016112:	f04f 0004 	mov.w	r0, #4
 8016116:	f7f9 f819 	bl	800f14c <SDIO_GetResponse>
 801611a:	4602      	mov	r2, r0
 801611c:	f640 2390 	movw	r3, #2704	; 0xa90
 8016120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016124:	605a      	str	r2, [r3, #4]
    CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 8016126:	f04f 0008 	mov.w	r0, #8
 801612a:	f7f9 f80f 	bl	800f14c <SDIO_GetResponse>
 801612e:	4602      	mov	r2, r0
 8016130:	f640 2390 	movw	r3, #2704	; 0xa90
 8016134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016138:	609a      	str	r2, [r3, #8]
    CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 801613a:	f04f 000c 	mov.w	r0, #12
 801613e:	f7f9 f805 	bl	800f14c <SDIO_GetResponse>
 8016142:	4602      	mov	r2, r0
 8016144:	f640 2390 	movw	r3, #2704	; 0xa90
 8016148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801614c:	60da      	str	r2, [r3, #12]
  }

  errorstatus = SD_OK; /*!< All cards get intialized */
 801614e:	f04f 0300 	mov.w	r3, #0
 8016152:	71fb      	strb	r3, [r7, #7]

  return(errorstatus);
 8016154:	79fb      	ldrb	r3, [r7, #7]
}
 8016156:	4618      	mov	r0, r3
 8016158:	f107 0708 	add.w	r7, r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}

08016160 <SD_GetCardInfo>:
  * @param  cardinfo: pointer to a SD_CardInfo structure that contains all SD card 
  *         information.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
 8016160:	b480      	push	{r7}
 8016162:	b085      	sub	sp, #20
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 8016168:	f04f 0300 	mov.w	r3, #0
 801616c:	73bb      	strb	r3, [r7, #14]
  uint8_t tmp = 0;
 801616e:	f04f 0300 	mov.w	r3, #0
 8016172:	73fb      	strb	r3, [r7, #15]

  cardinfo->CardType = (uint8_t)CardType;
 8016174:	f640 238c 	movw	r3, #2700	; 0xa8c
 8016178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	b2da      	uxtb	r2, r3
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  cardinfo->RCA = (uint16_t)RCA;
 8016186:	f640 23b0 	movw	r3, #2736	; 0xab0
 801618a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	b29a      	uxth	r2, r3
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /*!< Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8016198:	f640 2390 	movw	r3, #2704	; 0xa90
 801619c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80161a6:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 80161a8:	7bfb      	ldrb	r3, [r7, #15]
 80161aa:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80161ae:	b2da      	uxtb	r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	701a      	strb	r2, [r3, #0]
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 80161b4:	7bfb      	ldrb	r3, [r7, #15]
 80161b6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80161ba:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80161be:	b2da      	uxtb	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	705a      	strb	r2, [r3, #1]
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 80161c4:	7bfb      	ldrb	r3, [r7, #15]
 80161c6:	f003 0303 	and.w	r3, r3, #3
 80161ca:	b2da      	uxtb	r2, r3
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	709a      	strb	r2, [r3, #2]

  /*!< Byte 1 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 80161d0:	f640 2390 	movw	r3, #2704	; 0xa90
 80161d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80161de:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80161e2:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.TAAC = tmp;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	7bfa      	ldrb	r2, [r7, #15]
 80161e8:	70da      	strb	r2, [r3, #3]

  /*!< Byte 2 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 80161ea:	f640 2390 	movw	r3, #2704	; 0xa90
 80161ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80161f8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80161fc:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.NSAC = tmp;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	7bfa      	ldrb	r2, [r7, #15]
 8016202:	711a      	strb	r2, [r3, #4]

  /*!< Byte 3 */
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 8016204:	f640 2390 	movw	r3, #2704	; 0xa90
 8016208:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.MaxBusClkFrec = tmp;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	7bfa      	ldrb	r2, [r7, #15]
 8016214:	715a      	strb	r2, [r3, #5]

  /*!< Byte 4 */
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 8016216:	f640 2390 	movw	r3, #2704	; 0xa90
 801621a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801621e:	685b      	ldr	r3, [r3, #4]
 8016220:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8016224:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CardComdClasses = tmp << 4;
 8016226:	7bfb      	ldrb	r3, [r7, #15]
 8016228:	b29b      	uxth	r3, r3
 801622a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801622e:	b29a      	uxth	r2, r3
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	80da      	strh	r2, [r3, #6]

  /*!< Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
 8016234:	f640 2390 	movw	r3, #2704	; 0xa90
 8016238:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016242:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8016246:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	88db      	ldrh	r3, [r3, #6]
 801624c:	b29a      	uxth	r2, r3
 801624e:	7bfb      	ldrb	r3, [r7, #15]
 8016250:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8016254:	b2db      	uxtb	r3, r3
 8016256:	4313      	orrs	r3, r2
 8016258:	b29a      	uxth	r2, r3
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	80da      	strh	r2, [r3, #6]
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 801625e:	7bfb      	ldrb	r3, [r7, #15]
 8016260:	f003 030f 	and.w	r3, r3, #15
 8016264:	b2da      	uxtb	r2, r3
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	721a      	strb	r2, [r3, #8]

  /*!< Byte 6 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 801626a:	f640 2390 	movw	r3, #2704	; 0xa90
 801626e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016278:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801627c:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 801627e:	7bfb      	ldrb	r3, [r7, #15]
 8016280:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8016284:	b2da      	uxtb	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	725a      	strb	r2, [r3, #9]
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 801628a:	7bfb      	ldrb	r3, [r7, #15]
 801628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016290:	ea4f 13a3 	mov.w	r3, r3, asr #6
 8016294:	b2da      	uxtb	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	729a      	strb	r2, [r3, #10]
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 801629a:	7bfb      	ldrb	r3, [r7, #15]
 801629c:	f003 0320 	and.w	r3, r3, #32
 80162a0:	ea4f 1363 	mov.w	r3, r3, asr #5
 80162a4:	b2da      	uxtb	r2, r3
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	72da      	strb	r2, [r3, #11]
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 80162aa:	7bfb      	ldrb	r3, [r7, #15]
 80162ac:	f003 0310 	and.w	r3, r3, #16
 80162b0:	ea4f 1323 	mov.w	r3, r3, asr #4
 80162b4:	b2da      	uxtb	r2, r3
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	731a      	strb	r2, [r3, #12]
  cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f04f 0200 	mov.w	r2, #0
 80162c0:	735a      	strb	r2, [r3, #13]

  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 80162c2:	f640 238c 	movw	r3, #2700	; 0xa8c
 80162c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d007      	beq.n	80162e0 <SD_GetCardInfo+0x180>
 80162d0:	f640 238c 	movw	r3, #2700	; 0xa8c
 80162d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2b01      	cmp	r3, #1
 80162dc:	f040 8091 	bne.w	8016402 <SD_GetCardInfo+0x2a2>
  {
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 80162e0:	7bfb      	ldrb	r3, [r7, #15]
 80162e2:	f003 0303 	and.w	r3, r3, #3
 80162e6:	ea4f 2383 	mov.w	r3, r3, lsl #10
 80162ea:	461a      	mov	r2, r3
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	611a      	str	r2, [r3, #16]

    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 80162f0:	f640 2390 	movw	r3, #2704	; 0xa90
 80162f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	691b      	ldr	r3, [r3, #16]
 8016300:	461a      	mov	r2, r3
 8016302:	7bfb      	ldrb	r3, [r7, #15]
 8016304:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016308:	431a      	orrs	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	611a      	str	r2, [r3, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 801630e:	f640 2390 	movw	r3, #2704	; 0xa90
 8016312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016316:	689b      	ldr	r3, [r3, #8]
 8016318:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801631c:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	691b      	ldr	r3, [r3, #16]
 8016322:	461a      	mov	r2, r3
 8016324:	7bfb      	ldrb	r3, [r7, #15]
 8016326:	ea4f 1393 	mov.w	r3, r3, lsr #6
 801632a:	b2db      	uxtb	r3, r3
 801632c:	431a      	orrs	r2, r3
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	611a      	str	r2, [r3, #16]

    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8016332:	7bfb      	ldrb	r3, [r7, #15]
 8016334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016338:	ea4f 03e3 	mov.w	r3, r3, asr #3
 801633c:	b2da      	uxtb	r2, r3
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	751a      	strb	r2, [r3, #20]
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8016342:	7bfb      	ldrb	r3, [r7, #15]
 8016344:	f003 0307 	and.w	r3, r3, #7
 8016348:	b2da      	uxtb	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	755a      	strb	r2, [r3, #21]

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 801634e:	f640 2390 	movw	r3, #2704	; 0xa90
 8016352:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016356:	689b      	ldr	r3, [r3, #8]
 8016358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801635c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8016360:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8016362:	7bfb      	ldrb	r3, [r7, #15]
 8016364:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8016368:	b2da      	uxtb	r2, r3
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	759a      	strb	r2, [r3, #22]
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 801636e:	7bfb      	ldrb	r3, [r7, #15]
 8016370:	f003 031c 	and.w	r3, r3, #28
 8016374:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8016378:	b2da      	uxtb	r2, r3
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	75da      	strb	r2, [r3, #23]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 801637e:	7bfb      	ldrb	r3, [r7, #15]
 8016380:	f003 0303 	and.w	r3, r3, #3
 8016384:	b2db      	uxtb	r3, r3
 8016386:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801638a:	b2da      	uxtb	r2, r3
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	761a      	strb	r2, [r3, #24]
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8016390:	f640 2390 	movw	r3, #2704	; 0xa90
 8016394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016398:	689b      	ldr	r3, [r3, #8]
 801639a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801639e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80163a2:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	7e1b      	ldrb	r3, [r3, #24]
 80163a8:	b2da      	uxtb	r2, r3
 80163aa:	7bfb      	ldrb	r3, [r7, #15]
 80163ac:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	4313      	orrs	r3, r2
 80163b4:	b2da      	uxtb	r2, r3
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	761a      	strb	r2, [r3, #24]
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	f103 0201 	add.w	r2, r3, #1
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	645a      	str	r2, [r3, #68]	; 0x44
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	7e1b      	ldrb	r3, [r3, #24]
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	f103 0302 	add.w	r3, r3, #2
 80163d4:	fa02 f203 	lsl.w	r2, r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	645a      	str	r2, [r3, #68]	; 0x44
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	7a1b      	ldrb	r3, [r3, #8]
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	f04f 0201 	mov.w	r2, #1
 80163e6:	fa02 f303 	lsl.w	r3, r2, r3
 80163ea:	461a      	mov	r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	649a      	str	r2, [r3, #72]	; 0x48
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163f4:	687a      	ldr	r2, [r7, #4]
 80163f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80163f8:	fb02 f203 	mul.w	r2, r2, r3
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	645a      	str	r2, [r3, #68]	; 0x44
 8016400:	e04c      	b.n	801649c <SD_GetCardInfo+0x33c>
  }
  else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8016402:	f640 238c 	movw	r3, #2700	; 0xa8c
 8016406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b02      	cmp	r3, #2
 801640e:	d145      	bne.n	801649c <SD_GetCardInfo+0x33c>
  {
    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 8016410:	f640 2390 	movw	r3, #2704	; 0xa90
 8016414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	73fb      	strb	r3, [r7, #15]
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 801641c:	7bfb      	ldrb	r3, [r7, #15]
 801641e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016422:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8016426:	461a      	mov	r2, r3
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	611a      	str	r2, [r3, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 801642c:	f640 2390 	movw	r3, #2704	; 0xa90
 8016430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016434:	689b      	ldr	r3, [r3, #8]
 8016436:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801643a:	73fb      	strb	r3, [r7, #15]

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	691b      	ldr	r3, [r3, #16]
 8016440:	461a      	mov	r2, r3
 8016442:	7bfb      	ldrb	r3, [r7, #15]
 8016444:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8016448:	431a      	orrs	r2, r3
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	611a      	str	r2, [r3, #16]

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 801644e:	f640 2390 	movw	r3, #2704	; 0xa90
 8016452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016456:	689b      	ldr	r3, [r3, #8]
 8016458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801645c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8016460:	73fb      	strb	r3, [r7, #15]

    cardinfo->SD_csd.DeviceSize |= (tmp);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	691b      	ldr	r3, [r3, #16]
 8016466:	461a      	mov	r2, r3
 8016468:	7bfb      	ldrb	r3, [r7, #15]
 801646a:	431a      	orrs	r2, r3
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	611a      	str	r2, [r3, #16]

    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8016470:	f640 2390 	movw	r3, #2704	; 0xa90
 8016474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016478:	689b      	ldr	r3, [r3, #8]
 801647a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801647e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8016482:	73fb      	strb	r3, [r7, #15]
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	691b      	ldr	r3, [r3, #16]
 8016488:	f103 0301 	add.w	r3, r3, #1
 801648c:	ea4f 42c3 	mov.w	r2, r3, lsl #19
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	645a      	str	r2, [r3, #68]	; 0x44
    cardinfo->CardBlockSize = 512;    
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f44f 7200 	mov.w	r2, #512	; 0x200
 801649a:	649a      	str	r2, [r3, #72]	; 0x48
  }


  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 801649c:	7bfb      	ldrb	r3, [r7, #15]
 801649e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164a2:	ea4f 13a3 	mov.w	r3, r3, asr #6
 80164a6:	b2da      	uxtb	r2, r3
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	765a      	strb	r2, [r3, #25]
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
 80164ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80164b8:	b2da      	uxtb	r2, r3
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	769a      	strb	r2, [r3, #26]

  /*!< Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 80164be:	f640 2390 	movw	r3, #2704	; 0xa90
 80164c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164c6:	689b      	ldr	r3, [r3, #8]
 80164c8:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	7e9b      	ldrb	r3, [r3, #26]
 80164ce:	b2da      	uxtb	r2, r3
 80164d0:	7bfb      	ldrb	r3, [r7, #15]
 80164d2:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	4313      	orrs	r3, r2
 80164da:	b2da      	uxtb	r2, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	769a      	strb	r2, [r3, #26]
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 80164e0:	7bfb      	ldrb	r3, [r7, #15]
 80164e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164e6:	b2da      	uxtb	r2, r3
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	76da      	strb	r2, [r3, #27]

  /*!< Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 80164ec:	f640 2390 	movw	r3, #2704	; 0xa90
 80164f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80164f4:	68db      	ldr	r3, [r3, #12]
 80164f6:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80164fa:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 80164fc:	7bfb      	ldrb	r3, [r7, #15]
 80164fe:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8016502:	b2da      	uxtb	r2, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	771a      	strb	r2, [r3, #28]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 8016508:	7bfb      	ldrb	r3, [r7, #15]
 801650a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801650e:	ea4f 1363 	mov.w	r3, r3, asr #5
 8016512:	b2da      	uxtb	r2, r3
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	775a      	strb	r2, [r3, #29]
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8016518:	7bfb      	ldrb	r3, [r7, #15]
 801651a:	f003 031c 	and.w	r3, r3, #28
 801651e:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8016522:	b2da      	uxtb	r2, r3
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	779a      	strb	r2, [r3, #30]
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8016528:	7bfb      	ldrb	r3, [r7, #15]
 801652a:	f003 0303 	and.w	r3, r3, #3
 801652e:	b2db      	uxtb	r3, r3
 8016530:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016534:	b2da      	uxtb	r2, r3
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	77da      	strb	r2, [r3, #31]

  /*!< Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
 801653a:	f640 2390 	movw	r3, #2704	; 0xa90
 801653e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016548:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801654c:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	7fdb      	ldrb	r3, [r3, #31]
 8016552:	b2da      	uxtb	r2, r3
 8016554:	7bfb      	ldrb	r3, [r7, #15]
 8016556:	ea4f 1393 	mov.w	r3, r3, lsr #6
 801655a:	b2db      	uxtb	r3, r3
 801655c:	4313      	orrs	r3, r2
 801655e:	b2da      	uxtb	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	77da      	strb	r2, [r3, #31]
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8016564:	7bfb      	ldrb	r3, [r7, #15]
 8016566:	f003 0320 	and.w	r3, r3, #32
 801656a:	ea4f 1363 	mov.w	r3, r3, asr #5
 801656e:	b2da      	uxtb	r2, r3
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f883 2020 	strb.w	r2, [r3, #32]
  cardinfo->SD_csd.Reserved3 = 0;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f04f 0200 	mov.w	r2, #0
 801657c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8016580:	7bfb      	ldrb	r3, [r7, #15]
 8016582:	f003 0301 	and.w	r3, r3, #1
 8016586:	b2da      	uxtb	r2, r3
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  /*!< Byte 14 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
 801658e:	f640 2390 	movw	r3, #2704	; 0xa90
 8016592:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016596:	68db      	ldr	r3, [r3, #12]
 8016598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801659c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80165a0:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80165a2:	7bfb      	ldrb	r3, [r7, #15]
 80165a4:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80165a8:	b2da      	uxtb	r2, r3
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 80165b0:	7bfb      	ldrb	r3, [r7, #15]
 80165b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165b6:	ea4f 13a3 	mov.w	r3, r3, asr #6
 80165ba:	b2da      	uxtb	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 80165c2:	7bfb      	ldrb	r3, [r7, #15]
 80165c4:	f003 0320 	and.w	r3, r3, #32
 80165c8:	ea4f 1363 	mov.w	r3, r3, asr #5
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 80165d4:	7bfb      	ldrb	r3, [r7, #15]
 80165d6:	f003 0310 	and.w	r3, r3, #16
 80165da:	ea4f 1323 	mov.w	r3, r3, asr #4
 80165de:	b2da      	uxtb	r2, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 80165e6:	7bfb      	ldrb	r3, [r7, #15]
 80165e8:	f003 030c 	and.w	r3, r3, #12
 80165ec:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80165f0:	b2da      	uxtb	r2, r3
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 80165f8:	7bfb      	ldrb	r3, [r7, #15]
 80165fa:	f003 0303 	and.w	r3, r3, #3
 80165fe:	b2da      	uxtb	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /*!< Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
 8016606:	f640 2390 	movw	r3, #2704	; 0xa90
 801660a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8016612:	7bfb      	ldrb	r3, [r7, #15]
 8016614:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016618:	b2da      	uxtb	r2, r3
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  cardinfo->SD_csd.Reserved4 = 1;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f04f 0201 	mov.w	r2, #1
 8016626:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a


  /*!< Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 801662a:	f640 23a0 	movw	r3, #2720	; 0xaa0
 801662e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8016638:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ManufacturerID = tmp;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	7bfa      	ldrb	r2, [r7, #15]
 801663e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /*!< Byte 1 */
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
 8016642:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016650:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8016654:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 8016656:	7bfb      	ldrb	r3, [r7, #15]
 8016658:	b29b      	uxth	r3, r3
 801665a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801665e:	b29a      	uxth	r2, r3
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	85da      	strh	r2, [r3, #46]	; 0x2e

  /*!< Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
 8016664:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016672:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8016676:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801667c:	b29a      	uxth	r2, r3
 801667e:	7bfb      	ldrb	r3, [r7, #15]
 8016680:	b29b      	uxth	r3, r3
 8016682:	4313      	orrs	r3, r2
 8016684:	b29a      	uxth	r2, r3
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	85da      	strh	r2, [r3, #46]	; 0x2e

  /*!< Byte 3 */
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
 801668a:	f640 23a0 	movw	r3, #2720	; 0xaa0
 801668e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 8016696:	7bfb      	ldrb	r3, [r7, #15]
 8016698:	ea4f 6303 	mov.w	r3, r3, lsl #24
 801669c:	461a      	mov	r2, r3
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 80166a2:	f640 23a0 	movw	r3, #2720	; 0xaa0
 80166a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80166b0:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166b6:	461a      	mov	r2, r3
 80166b8:	7bfb      	ldrb	r3, [r7, #15]
 80166ba:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80166be:	431a      	orrs	r2, r3
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
 80166c4:	f640 23a0 	movw	r3, #2720	; 0xaa0
 80166c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80166d2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80166d6:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166dc:	461a      	mov	r2, r3
 80166de:	7bfb      	ldrb	r3, [r7, #15]
 80166e0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80166e4:	431a      	orrs	r2, r3
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
 80166ea:	f640 23a0 	movw	r3, #2720	; 0xaa0
 80166ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80166f2:	685b      	ldr	r3, [r3, #4]
 80166f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80166f8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80166fc:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName1 |= tmp;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016702:	461a      	mov	r2, r3
 8016704:	7bfb      	ldrb	r3, [r7, #15]
 8016706:	431a      	orrs	r2, r3
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 801670c:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016710:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdName2 = tmp;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	7bfa      	ldrb	r2, [r7, #15]
 801671c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /*!< Byte 8 */
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 8016720:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016724:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016728:	689b      	ldr	r3, [r3, #8]
 801672a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 801672e:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdRev = tmp;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	7bfa      	ldrb	r2, [r7, #15]
 8016734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*!< Byte 9 */
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 8016738:	f640 23a0 	movw	r3, #2720	; 0xaa0
 801673c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016740:	689b      	ldr	r3, [r3, #8]
 8016742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016746:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801674a:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN = tmp << 24;
 801674c:	7bfb      	ldrb	r3, [r7, #15]
 801674e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8016752:	461a      	mov	r2, r3
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 10 */
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
 8016758:	f640 23a0 	movw	r3, #2720	; 0xaa0
 801675c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016760:	689b      	ldr	r3, [r3, #8]
 8016762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016766:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801676a:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016770:	461a      	mov	r2, r3
 8016772:	7bfb      	ldrb	r3, [r7, #15]
 8016774:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8016778:	431a      	orrs	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 11 */
  tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
 801677e:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016786:	689b      	ldr	r3, [r3, #8]
 8016788:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678e:	461a      	mov	r2, r3
 8016790:	7bfb      	ldrb	r3, [r7, #15]
 8016792:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8016796:	431a      	orrs	r2, r3
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 801679c:	f640 23a0 	movw	r3, #2720	; 0xaa0
 80167a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80167a4:	68db      	ldr	r3, [r3, #12]
 80167a6:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80167aa:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ProdSN |= tmp;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167b0:	461a      	mov	r2, r3
 80167b2:	7bfb      	ldrb	r3, [r7, #15]
 80167b4:	431a      	orrs	r2, r3
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
 80167ba:	f640 23a0 	movw	r3, #2720	; 0xaa0
 80167be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80167c2:	68db      	ldr	r3, [r3, #12]
 80167c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80167c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80167cc:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80167d4:	b2da      	uxtb	r2, r3
 80167d6:	7bfb      	ldrb	r3, [r7, #15]
 80167d8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	4313      	orrs	r3, r2
 80167e0:	b2da      	uxtb	r2, r3
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 80167e8:	7bfb      	ldrb	r3, [r7, #15]
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	f003 030f 	and.w	r3, r3, #15
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80167f6:	b29a      	uxth	r2, r3
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*!< Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
 80167fc:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016800:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016804:	68db      	ldr	r3, [r3, #12]
 8016806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801680a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801680e:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.ManufactDate |= tmp;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016814:	b29a      	uxth	r2, r3
 8016816:	7bfb      	ldrb	r3, [r7, #15]
 8016818:	b29b      	uxth	r3, r3
 801681a:	4313      	orrs	r3, r2
 801681c:	b29a      	uxth	r2, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*!< Byte 15 */
  tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
 8016822:	f640 23a0 	movw	r3, #2720	; 0xaa0
 8016826:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801682a:	68db      	ldr	r3, [r3, #12]
 801682c:	73fb      	strb	r3, [r7, #15]
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 801682e:	7bfb      	ldrb	r3, [r7, #15]
 8016830:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016834:	b2da      	uxtb	r2, r3
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  cardinfo->SD_cid.Reserved2 = 1;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f04f 0201 	mov.w	r2, #1
 8016842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  
  return(errorstatus);
 8016846:	7bbb      	ldrb	r3, [r7, #14]
}
 8016848:	4618      	mov	r0, r3
 801684a:	f107 0714 	add.w	r7, r7, #20
 801684e:	46bd      	mov	sp, r7
 8016850:	bc80      	pop	{r7}
 8016852:	4770      	bx	lr

08016854 <SD_EnableWideBusOperation>:
  *     @arg SDIO_BusWide_4b: 4-bit data transfer
  *     @arg SDIO_BusWide_1b: 1-bit data transfer
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 801685c:	f04f 0300 	mov.w	r3, #0
 8016860:	73fb      	strb	r3, [r7, #15]

  /*!< MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8016862:	f640 238c 	movw	r3, #2700	; 0xa8c
 8016866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	2b03      	cmp	r3, #3
 801686e:	d104      	bne.n	801687a <SD_EnableWideBusOperation+0x26>
  {
    errorstatus = SD_UNSUPPORTED_FEATURE;
 8016870:	f04f 0327 	mov.w	r3, #39	; 0x27
 8016874:	73fb      	strb	r3, [r7, #15]
    return(errorstatus);
 8016876:	7bfb      	ldrb	r3, [r7, #15]
 8016878:	e095      	b.n	80169a6 <SD_EnableWideBusOperation+0x152>
  }
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 801687a:	f640 238c 	movw	r3, #2700	; 0xa8c
 801687e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d00d      	beq.n	80168a4 <SD_EnableWideBusOperation+0x50>
 8016888:	f640 238c 	movw	r3, #2700	; 0xa8c
 801688c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	2b01      	cmp	r3, #1
 8016894:	d006      	beq.n	80168a4 <SD_EnableWideBusOperation+0x50>
 8016896:	f640 238c 	movw	r3, #2700	; 0xa8c
 801689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	2b02      	cmp	r3, #2
 80168a2:	d17f      	bne.n	80169a4 <SD_EnableWideBusOperation+0x150>
  {
    if (SDIO_BusWide_8b == WideMode)
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80168aa:	d104      	bne.n	80168b6 <SD_EnableWideBusOperation+0x62>
    {
      errorstatus = SD_UNSUPPORTED_FEATURE;
 80168ac:	f04f 0327 	mov.w	r3, #39	; 0x27
 80168b0:	73fb      	strb	r3, [r7, #15]
      return(errorstatus);
 80168b2:	7bfb      	ldrb	r3, [r7, #15]
 80168b4:	e077      	b.n	80169a6 <SD_EnableWideBusOperation+0x152>
    }
    else if (SDIO_BusWide_4b == WideMode)
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80168bc:	d139      	bne.n	8016932 <SD_EnableWideBusOperation+0xde>
    {
      errorstatus = SDEnWideBus(ENABLE);
 80168be:	f04f 0001 	mov.w	r0, #1
 80168c2:	f000 ff4b 	bl	801775c <SDEnWideBus>
 80168c6:	4603      	mov	r3, r0
 80168c8:	73fb      	strb	r3, [r7, #15]

      if (SD_OK == errorstatus)
 80168ca:	7bfb      	ldrb	r3, [r7, #15]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d169      	bne.n	80169a4 <SD_EnableWideBusOperation+0x150>
      {
        /*!< Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 80168d0:	f247 53b8 	movw	r3, #30136	; 0x75b8
 80168d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80168d8:	f04f 0276 	mov.w	r2, #118	; 0x76
 80168dc:	751a      	strb	r2, [r3, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 80168de:	f247 53b8 	movw	r3, #30136	; 0x75b8
 80168e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80168e6:	f04f 0200 	mov.w	r2, #0
 80168ea:	601a      	str	r2, [r3, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 80168ec:	f247 53b8 	movw	r3, #30136	; 0x75b8
 80168f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80168f4:	f04f 0200 	mov.w	r2, #0
 80168f8:	605a      	str	r2, [r3, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80168fa:	f247 53b8 	movw	r3, #30136	; 0x75b8
 80168fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016902:	f04f 0200 	mov.w	r2, #0
 8016906:	609a      	str	r2, [r3, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 8016908:	f247 53b8 	movw	r3, #30136	; 0x75b8
 801690c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016914:	60da      	str	r2, [r3, #12]
        SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8016916:	f247 53b8 	movw	r3, #30136	; 0x75b8
 801691a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801691e:	f04f 0200 	mov.w	r2, #0
 8016922:	611a      	str	r2, [r3, #16]
        SDIO_Init(&SDIO_InitStructure);
 8016924:	f247 50b8 	movw	r0, #30136	; 0x75b8
 8016928:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801692c:	f7f8 fb6c 	bl	800f008 <SDIO_Init>
 8016930:	e038      	b.n	80169a4 <SD_EnableWideBusOperation+0x150>
      }
    }
    else
    {
      errorstatus = SDEnWideBus(DISABLE);
 8016932:	f04f 0000 	mov.w	r0, #0
 8016936:	f000 ff11 	bl	801775c <SDEnWideBus>
 801693a:	4603      	mov	r3, r0
 801693c:	73fb      	strb	r3, [r7, #15]

      if (SD_OK == errorstatus)
 801693e:	7bfb      	ldrb	r3, [r7, #15]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d12f      	bne.n	80169a4 <SD_EnableWideBusOperation+0x150>
      {
        /*!< Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 8016944:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8016948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801694c:	f04f 0276 	mov.w	r2, #118	; 0x76
 8016950:	751a      	strb	r2, [r3, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8016952:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8016956:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801695a:	f04f 0200 	mov.w	r2, #0
 801695e:	601a      	str	r2, [r3, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8016960:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8016964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016968:	f04f 0200 	mov.w	r2, #0
 801696c:	605a      	str	r2, [r3, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 801696e:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8016972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016976:	f04f 0200 	mov.w	r2, #0
 801697a:	609a      	str	r2, [r3, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 801697c:	f247 53b8 	movw	r3, #30136	; 0x75b8
 8016980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016984:	f04f 0200 	mov.w	r2, #0
 8016988:	60da      	str	r2, [r3, #12]
        SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 801698a:	f247 53b8 	movw	r3, #30136	; 0x75b8
 801698e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016992:	f04f 0200 	mov.w	r2, #0
 8016996:	611a      	str	r2, [r3, #16]
        SDIO_Init(&SDIO_InitStructure);
 8016998:	f247 50b8 	movw	r0, #30136	; 0x75b8
 801699c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80169a0:	f7f8 fb32 	bl	800f008 <SDIO_Init>
      }
    }
  }

  return(errorstatus);
 80169a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	f107 0710 	add.w	r7, r7, #16
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <SD_SelectDeselect>:
  * @brief  Selects od Deselects the corresponding card.
  * @param  addr: Address of the Card to be selected.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_SelectDeselect(uint32_t addr)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 80169b8:	f04f 0300 	mov.w	r3, #0
 80169bc:	73fb      	strb	r3, [r7, #15]

  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
 80169be:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80169c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
 80169ca:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80169ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169d2:	f04f 0207 	mov.w	r2, #7
 80169d6:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80169d8:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80169dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169e0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80169e4:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80169e6:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80169ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169ee:	f04f 0200 	mov.w	r2, #0
 80169f2:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80169f4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80169f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016a00:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016a02:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016a06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016a0a:	f7f8 fb5f 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
 8016a0e:	f04f 0007 	mov.w	r0, #7
 8016a12:	f000 fcc9 	bl	80173a8 <CmdResp1Error>
 8016a16:	4603      	mov	r3, r0
 8016a18:	73fb      	strb	r3, [r7, #15]

  return(errorstatus);
 8016a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f107 0710 	add.w	r7, r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop

08016a28 <SD_ReadMultiBlocks>:
  * @param  BlockSize: the SD card Data block size. The Block size should be 512.
  * @param  NumberOfBlocks: number of blocks to be read.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b086      	sub	sp, #24
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	603b      	str	r3, [r7, #0]
 8016a34:	4613      	mov	r3, r2
 8016a36:	80fb      	strh	r3, [r7, #6]
  SD_Error errorstatus = SD_OK;
 8016a38:	f04f 0300 	mov.w	r3, #0
 8016a3c:	75fb      	strb	r3, [r7, #23]
  TransferError = SD_OK;
 8016a3e:	f640 23b8 	movw	r3, #2744	; 0xab8
 8016a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016a46:	f04f 0200 	mov.w	r2, #0
 8016a4a:	701a      	strb	r2, [r3, #0]
  TransferEnd = 0;
 8016a4c:	f640 23bc 	movw	r3, #2748	; 0xabc
 8016a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016a54:	f04f 0200 	mov.w	r2, #0
 8016a58:	601a      	str	r2, [r3, #0]
  StopCondition = 1;
 8016a5a:	f640 23b4 	movw	r3, #2740	; 0xab4
 8016a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016a62:	f04f 0201 	mov.w	r2, #1
 8016a66:	601a      	str	r2, [r3, #0]
	
  SDIO->DCTRL = 0x0;
 8016a68:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8016a6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8016a70:	f04f 0200 	mov.w	r2, #0
 8016a74:	62da      	str	r2, [r3, #44]	; 0x2c

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8016a76:	f640 238c 	movw	r3, #2700	; 0xa8c
 8016a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	2b02      	cmp	r3, #2
 8016a82:	d106      	bne.n	8016a92 <SD_ReadMultiBlocks+0x6a>
  {
    BlockSize = 512;
 8016a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a88:	80fb      	strh	r3, [r7, #6]
    ReadAddr /= 512;
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8016a90:	60bb      	str	r3, [r7, #8]
  }

  /*!< Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8016a92:	88fa      	ldrh	r2, [r7, #6]
 8016a94:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016a9c:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8016a9e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016aa6:	f04f 0210 	mov.w	r2, #16
 8016aaa:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016aac:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ab4:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016ab8:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016aba:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ac2:	f04f 0200 	mov.w	r2, #0
 8016ac6:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016ac8:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ad4:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016ad6:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016ada:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016ade:	f7f8 faf5 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 8016ae2:	f04f 0010 	mov.w	r0, #16
 8016ae6:	f000 fc5f 	bl	80173a8 <CmdResp1Error>
 8016aea:	4603      	mov	r3, r0
 8016aec:	75fb      	strb	r3, [r7, #23]

  if (SD_OK != errorstatus)
 8016aee:	7dfb      	ldrb	r3, [r7, #23]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d001      	beq.n	8016af8 <SD_ReadMultiBlocks+0xd0>
  {
    return(errorstatus);
 8016af4:	7dfb      	ldrb	r3, [r7, #23]
 8016af6:	e077      	b.n	8016be8 <SD_ReadMultiBlocks+0x1c0>
  }
    
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8016af8:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b00:	f04f 32ff 	mov.w	r2, #4294967295
 8016b04:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8016b06:	88fb      	ldrh	r3, [r7, #6]
 8016b08:	683a      	ldr	r2, [r7, #0]
 8016b0a:	fb02 f203 	mul.w	r2, r2, r3
 8016b0e:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b16:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8016b18:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b20:	f04f 0290 	mov.w	r2, #144	; 0x90
 8016b24:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8016b26:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b2e:	f04f 0202 	mov.w	r2, #2
 8016b32:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8016b34:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b3c:	f04f 0200 	mov.w	r2, #0
 8016b40:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8016b42:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b4a:	f04f 0201 	mov.w	r2, #1
 8016b4e:	615a      	str	r2, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8016b50:	f247 50d0 	movw	r0, #30160	; 0x75d0
 8016b54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016b58:	f7f8 fb0e 	bl	800f178 <SDIO_DataConfig>

  /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
 8016b5c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b64:	68ba      	ldr	r2, [r7, #8]
 8016b66:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8016b68:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b70:	f04f 0212 	mov.w	r2, #18
 8016b74:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016b76:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b7e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016b82:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016b84:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b8c:	f04f 0200 	mov.w	r2, #0
 8016b90:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016b92:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016b9e:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016ba0:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016ba4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016ba8:	f7f8 fa90 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
 8016bac:	f04f 0012 	mov.w	r0, #18
 8016bb0:	f000 fbfa 	bl	80173a8 <CmdResp1Error>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 8016bb8:	7dfb      	ldrb	r3, [r7, #23]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d001      	beq.n	8016bc2 <SD_ReadMultiBlocks+0x19a>
  {
    return(errorstatus);
 8016bbe:	7dfb      	ldrb	r3, [r7, #23]
 8016bc0:	e012      	b.n	8016be8 <SD_ReadMultiBlocks+0x1c0>
  }

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 8016bc2:	f240 302a 	movw	r0, #810	; 0x32a
 8016bc6:	f04f 0101 	mov.w	r1, #1
 8016bca:	f7f8 fb29 	bl	800f220 <SDIO_ITConfig>
  SDIO_DMACmd(ENABLE);
 8016bce:	f04f 0001 	mov.w	r0, #1
 8016bd2:	f7f8 fb15 	bl	800f200 <SDIO_DMACmd>
  SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));
 8016bd6:	88fb      	ldrh	r3, [r7, #6]
 8016bd8:	683a      	ldr	r2, [r7, #0]
 8016bda:	fb02 f303 	mul.w	r3, r2, r3
 8016bde:	68f8      	ldr	r0, [r7, #12]
 8016be0:	4619      	mov	r1, r3
 8016be2:	f7fe fe73 	bl	80158cc <SD_LowLevel_DMA_RxConfig>

  return(errorstatus);
 8016be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	f107 0718 	add.w	r7, r7, #24
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}
 8016bf2:	bf00      	nop

08016bf4 <SD_WaitReadOperation>:
  *         the DMA controller.
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitReadOperation(void)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8016bfa:	f04f 0300 	mov.w	r3, #0
 8016bfe:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
 8016c00:	f04f 33ff 	mov.w	r3, #4294967295
 8016c04:	603b      	str	r3, [r7, #0]
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8016c06:	e003      	b.n	8016c10 <SD_WaitReadOperation+0x1c>
  {
    timeout--;
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c0e:	603b      	str	r3, [r7, #0]
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8016c10:	f640 23c0 	movw	r3, #2752	; 0xac0
 8016c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d111      	bne.n	8016c42 <SD_WaitReadOperation+0x4e>
 8016c1e:	f640 23bc 	movw	r3, #2748	; 0xabc
 8016c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d10a      	bne.n	8016c42 <SD_WaitReadOperation+0x4e>
 8016c2c:	f640 23b8 	movw	r3, #2744	; 0xab8
 8016c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	b2db      	uxtb	r3, r3
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d102      	bne.n	8016c42 <SD_WaitReadOperation+0x4e>
 8016c3c:	683b      	ldr	r3, [r7, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d1e2      	bne.n	8016c08 <SD_WaitReadOperation+0x14>
  {
    timeout--;
  }
  
  DMAEndOfTransfer = 0x00;
 8016c42:	f640 23c0 	movw	r3, #2752	; 0xac0
 8016c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016c4a:	f04f 0200 	mov.w	r2, #0
 8016c4e:	601a      	str	r2, [r3, #0]

  timeout = SD_DATATIMEOUT;
 8016c50:	f04f 33ff 	mov.w	r3, #4294967295
 8016c54:	603b      	str	r3, [r7, #0]
  
  while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
 8016c56:	e003      	b.n	8016c60 <SD_WaitReadOperation+0x6c>
  {
    timeout--;  
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c5e:	603b      	str	r3, [r7, #0]
  
  DMAEndOfTransfer = 0x00;

  timeout = SD_DATATIMEOUT;
  
  while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
 8016c60:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8016c64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8016c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d002      	beq.n	8016c78 <SD_WaitReadOperation+0x84>
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d1ef      	bne.n	8016c58 <SD_WaitReadOperation+0x64>
  {
    timeout--;  
  }

  if (StopCondition == 1)
 8016c78:	f640 23b4 	movw	r3, #2740	; 0xab4
 8016c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d103      	bne.n	8016c8e <SD_WaitReadOperation+0x9a>
  {
    errorstatus = SD_StopTransfer();
 8016c86:	f000 f9e7 	bl	8017058 <SD_StopTransfer>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	71fb      	strb	r3, [r7, #7]
  }
  
  if ((timeout == 0) && (errorstatus == SD_OK))
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d105      	bne.n	8016ca0 <SD_WaitReadOperation+0xac>
 8016c94:	79fb      	ldrb	r3, [r7, #7]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d102      	bne.n	8016ca0 <SD_WaitReadOperation+0xac>
  {
    errorstatus = SD_DATA_TIMEOUT;
 8016c9a:	f04f 0304 	mov.w	r3, #4
 8016c9e:	71fb      	strb	r3, [r7, #7]
  }
  
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8016ca0:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8016ca4:	f7f8 fb08 	bl	800f2b8 <SDIO_ClearFlag>

  if (TransferError != SD_OK)
 8016ca8:	f640 23b8 	movw	r3, #2744	; 0xab8
 8016cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016cb0:	781b      	ldrb	r3, [r3, #0]
 8016cb2:	b2db      	uxtb	r3, r3
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d006      	beq.n	8016cc6 <SD_WaitReadOperation+0xd2>
  {
    return(TransferError);
 8016cb8:	f640 23b8 	movw	r3, #2744	; 0xab8
 8016cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	b2db      	uxtb	r3, r3
 8016cc4:	e000      	b.n	8016cc8 <SD_WaitReadOperation+0xd4>
  }
  else
  {
    return(errorstatus);  
 8016cc6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f107 0708 	add.w	r7, r7, #8
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}
 8016cd2:	bf00      	nop

08016cd4 <SD_WriteMultiBlocks>:
  * @param  BlockSize: the SD card Data block size. The Block size should be 512.
  * @param  NumberOfBlocks: number of blocks to be written.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b086      	sub	sp, #24
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	60f8      	str	r0, [r7, #12]
 8016cdc:	60b9      	str	r1, [r7, #8]
 8016cde:	603b      	str	r3, [r7, #0]
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	80fb      	strh	r3, [r7, #6]
  SD_Error errorstatus = SD_OK;
 8016ce4:	f04f 0300 	mov.w	r3, #0
 8016ce8:	75fb      	strb	r3, [r7, #23]

  TransferError = SD_OK;
 8016cea:	f640 23b8 	movw	r3, #2744	; 0xab8
 8016cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016cf2:	f04f 0200 	mov.w	r2, #0
 8016cf6:	701a      	strb	r2, [r3, #0]
  TransferEnd = 0;
 8016cf8:	f640 23bc 	movw	r3, #2748	; 0xabc
 8016cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d00:	f04f 0200 	mov.w	r2, #0
 8016d04:	601a      	str	r2, [r3, #0]
  StopCondition = 1;
 8016d06:	f640 23b4 	movw	r3, #2740	; 0xab4
 8016d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d0e:	f04f 0201 	mov.w	r2, #1
 8016d12:	601a      	str	r2, [r3, #0]
  
  SDIO->DCTRL = 0x0;
 8016d14:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8016d18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8016d1c:	f04f 0200 	mov.w	r2, #0
 8016d20:	62da      	str	r2, [r3, #44]	; 0x2c

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8016d22:	f640 238c 	movw	r3, #2700	; 0xa8c
 8016d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	2b02      	cmp	r3, #2
 8016d2e:	d106      	bne.n	8016d3e <SD_WriteMultiBlocks+0x6a>
  {
    BlockSize = 512;
 8016d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016d34:	80fb      	strh	r3, [r7, #6]
    WriteAddr /= 512;
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8016d3c:	60bb      	str	r3, [r7, #8]
  }

  /* Set Block Size for Card */ 
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8016d3e:	88fa      	ldrh	r2, [r7, #6]
 8016d40:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d48:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8016d4a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d52:	f04f 0210 	mov.w	r2, #16
 8016d56:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016d58:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d60:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016d64:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016d66:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d6e:	f04f 0200 	mov.w	r2, #0
 8016d72:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016d74:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016d80:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016d82:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016d86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016d8a:	f7f8 f99f 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 8016d8e:	f04f 0010 	mov.w	r0, #16
 8016d92:	f000 fb09 	bl	80173a8 <CmdResp1Error>
 8016d96:	4603      	mov	r3, r0
 8016d98:	75fb      	strb	r3, [r7, #23]

  if (SD_OK != errorstatus)
 8016d9a:	7dfb      	ldrb	r3, [r7, #23]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d001      	beq.n	8016da4 <SD_WriteMultiBlocks+0xd0>
  {
    return(errorstatus);
 8016da0:	7dfb      	ldrb	r3, [r7, #23]
 8016da2:	e0e3      	b.n	8016f6c <SD_WriteMultiBlocks+0x298>
  }
  
  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 8016da4:	f640 23b0 	movw	r3, #2736	; 0xab0
 8016da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8016db2:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016dba:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8016dbc:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016dc4:	f04f 0237 	mov.w	r2, #55	; 0x37
 8016dc8:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016dca:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016dd2:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016dd6:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016dd8:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016de0:	f04f 0200 	mov.w	r2, #0
 8016de4:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016de6:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016df2:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016df4:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016df8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016dfc:	f7f8 f966 	bl	800f0cc <SDIO_SendCommand>


  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8016e00:	f04f 0037 	mov.w	r0, #55	; 0x37
 8016e04:	f000 fad0 	bl	80173a8 <CmdResp1Error>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 8016e0c:	7dfb      	ldrb	r3, [r7, #23]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d001      	beq.n	8016e16 <SD_WriteMultiBlocks+0x142>
  {
    return(errorstatus);
 8016e12:	7dfb      	ldrb	r3, [r7, #23]
 8016e14:	e0aa      	b.n	8016f6c <SD_WriteMultiBlocks+0x298>
  }
  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
 8016e16:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e1e:	683a      	ldr	r2, [r7, #0]
 8016e20:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
 8016e22:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e2a:	f04f 0217 	mov.w	r2, #23
 8016e2e:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016e30:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e38:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016e3c:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016e3e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e46:	f04f 0200 	mov.w	r2, #0
 8016e4a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016e4c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016e58:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016e5a:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016e5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016e62:	f7f8 f933 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
 8016e66:	f04f 0017 	mov.w	r0, #23
 8016e6a:	f000 fa9d 	bl	80173a8 <CmdResp1Error>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 8016e72:	7dfb      	ldrb	r3, [r7, #23]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d001      	beq.n	8016e7c <SD_WriteMultiBlocks+0x1a8>
  {
    return(errorstatus);
 8016e78:	7dfb      	ldrb	r3, [r7, #23]
 8016e7a:	e077      	b.n	8016f6c <SD_WriteMultiBlocks+0x298>
  }


  /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
 8016e7c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e84:	68ba      	ldr	r2, [r7, #8]
 8016e86:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8016e88:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e90:	f04f 0219 	mov.w	r2, #25
 8016e94:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8016e96:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e9e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8016ea2:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8016ea4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016eac:	f04f 0200 	mov.w	r2, #0
 8016eb0:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8016eb2:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8016eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ebe:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8016ec0:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8016ec4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016ec8:	f7f8 f900 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
 8016ecc:	f04f 0019 	mov.w	r0, #25
 8016ed0:	f000 fa6a 	bl	80173a8 <CmdResp1Error>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	75fb      	strb	r3, [r7, #23]

  if (SD_OK != errorstatus)
 8016ed8:	7dfb      	ldrb	r3, [r7, #23]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d001      	beq.n	8016ee2 <SD_WriteMultiBlocks+0x20e>
  {
    return(errorstatus);
 8016ede:	7dfb      	ldrb	r3, [r7, #23]
 8016ee0:	e044      	b.n	8016f6c <SD_WriteMultiBlocks+0x298>
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8016ee2:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016eea:	f04f 32ff 	mov.w	r2, #4294967295
 8016eee:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8016ef0:	88fb      	ldrh	r3, [r7, #6]
 8016ef2:	683a      	ldr	r2, [r7, #0]
 8016ef4:	fb02 f203 	mul.w	r2, r2, r3
 8016ef8:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f00:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8016f02:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f0a:	f04f 0290 	mov.w	r2, #144	; 0x90
 8016f0e:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8016f10:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f18:	f04f 0200 	mov.w	r2, #0
 8016f1c:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8016f1e:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f26:	f04f 0200 	mov.w	r2, #0
 8016f2a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8016f2c:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8016f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f34:	f04f 0201 	mov.w	r2, #1
 8016f38:	615a      	str	r2, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8016f3a:	f247 50d0 	movw	r0, #30160	; 0x75d0
 8016f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016f42:	f7f8 f919 	bl	800f178 <SDIO_DataConfig>

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 8016f46:	f240 302a 	movw	r0, #810	; 0x32a
 8016f4a:	f04f 0101 	mov.w	r1, #1
 8016f4e:	f7f8 f967 	bl	800f220 <SDIO_ITConfig>
  SDIO_DMACmd(ENABLE);
 8016f52:	f04f 0001 	mov.w	r0, #1
 8016f56:	f7f8 f953 	bl	800f200 <SDIO_DMACmd>
  SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
 8016f5a:	88fb      	ldrh	r3, [r7, #6]
 8016f5c:	683a      	ldr	r2, [r7, #0]
 8016f5e:	fb02 f303 	mul.w	r3, r2, r3
 8016f62:	68f8      	ldr	r0, [r7, #12]
 8016f64:	4619      	mov	r1, r3
 8016f66:	f7fe fc41 	bl	80157ec <SD_LowLevel_DMA_TxConfig>

  return(errorstatus);
 8016f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f107 0718 	add.w	r7, r7, #24
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}
 8016f76:	bf00      	nop

08016f78 <SD_WaitWriteOperation>:
  *         card are already transferred by the DMA controller.        
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitWriteOperation(void)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b082      	sub	sp, #8
 8016f7c:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8016f7e:	f04f 0300 	mov.w	r3, #0
 8016f82:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
 8016f84:	f04f 33ff 	mov.w	r3, #4294967295
 8016f88:	603b      	str	r3, [r7, #0]
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8016f8a:	e003      	b.n	8016f94 <SD_WaitWriteOperation+0x1c>
  {
    timeout--;
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016f92:	603b      	str	r3, [r7, #0]
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
  
  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8016f94:	f640 23c0 	movw	r3, #2752	; 0xac0
 8016f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d111      	bne.n	8016fc6 <SD_WaitWriteOperation+0x4e>
 8016fa2:	f640 23bc 	movw	r3, #2748	; 0xabc
 8016fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d10a      	bne.n	8016fc6 <SD_WaitWriteOperation+0x4e>
 8016fb0:	f640 23b8 	movw	r3, #2744	; 0xab8
 8016fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	b2db      	uxtb	r3, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d102      	bne.n	8016fc6 <SD_WaitWriteOperation+0x4e>
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d1e2      	bne.n	8016f8c <SD_WaitWriteOperation+0x14>
  {
    timeout--;
  }
  
  DMAEndOfTransfer = 0x00;
 8016fc6:	f640 23c0 	movw	r3, #2752	; 0xac0
 8016fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016fce:	f04f 0200 	mov.w	r2, #0
 8016fd2:	601a      	str	r2, [r3, #0]

  timeout = SD_DATATIMEOUT;
 8016fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8016fd8:	603b      	str	r3, [r7, #0]
  
  while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
 8016fda:	e003      	b.n	8016fe4 <SD_WaitWriteOperation+0x6c>
  {
    timeout--;  
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	f103 33ff 	add.w	r3, r3, #4294967295
 8016fe2:	603b      	str	r3, [r7, #0]
  
  DMAEndOfTransfer = 0x00;

  timeout = SD_DATATIMEOUT;
  
  while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
 8016fe4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8016fe8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8016fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d002      	beq.n	8016ffc <SD_WaitWriteOperation+0x84>
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d1ef      	bne.n	8016fdc <SD_WaitWriteOperation+0x64>
  {
    timeout--;  
  }

  if (StopCondition == 1)
 8016ffc:	f640 23b4 	movw	r3, #2740	; 0xab4
 8017000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	2b01      	cmp	r3, #1
 8017008:	d103      	bne.n	8017012 <SD_WaitWriteOperation+0x9a>
  {
    errorstatus = SD_StopTransfer();
 801700a:	f000 f825 	bl	8017058 <SD_StopTransfer>
 801700e:	4603      	mov	r3, r0
 8017010:	71fb      	strb	r3, [r7, #7]
  }
  
  if ((timeout == 0) && (errorstatus == SD_OK))
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d105      	bne.n	8017024 <SD_WaitWriteOperation+0xac>
 8017018:	79fb      	ldrb	r3, [r7, #7]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d102      	bne.n	8017024 <SD_WaitWriteOperation+0xac>
  {
    errorstatus = SD_DATA_TIMEOUT;
 801701e:	f04f 0304 	mov.w	r3, #4
 8017022:	71fb      	strb	r3, [r7, #7]
  }
  
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8017024:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8017028:	f7f8 f946 	bl	800f2b8 <SDIO_ClearFlag>
  
  if (TransferError != SD_OK)
 801702c:	f640 23b8 	movw	r3, #2744	; 0xab8
 8017030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	b2db      	uxtb	r3, r3
 8017038:	2b00      	cmp	r3, #0
 801703a:	d006      	beq.n	801704a <SD_WaitWriteOperation+0xd2>
  {
    return(TransferError);
 801703c:	f640 23b8 	movw	r3, #2744	; 0xab8
 8017040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017044:	781b      	ldrb	r3, [r3, #0]
 8017046:	b2db      	uxtb	r3, r3
 8017048:	e000      	b.n	801704c <SD_WaitWriteOperation+0xd4>
  }
  else
  {
    return(errorstatus);
 801704a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 801704c:	4618      	mov	r0, r3
 801704e:	f107 0708 	add.w	r7, r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop

08017058 <SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_StopTransfer(void)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b082      	sub	sp, #8
 801705c:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 801705e:	f04f 0300 	mov.w	r3, #0
 8017062:	71fb      	strb	r3, [r7, #7]

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8017064:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801706c:	f04f 0200 	mov.w	r2, #0
 8017070:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
 8017072:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017076:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801707a:	f04f 020c 	mov.w	r2, #12
 801707e:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8017080:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017088:	f04f 0240 	mov.w	r2, #64	; 0x40
 801708c:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 801708e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017096:	f04f 0200 	mov.w	r2, #0
 801709a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 801709c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80170a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80170a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80170a8:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80170aa:	f247 50a4 	movw	r0, #30116	; 0x75a4
 80170ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80170b2:	f7f8 f80b 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
 80170b6:	f04f 000c 	mov.w	r0, #12
 80170ba:	f000 f975 	bl	80173a8 <CmdResp1Error>
 80170be:	4603      	mov	r3, r0
 80170c0:	71fb      	strb	r3, [r7, #7]

  return(errorstatus);
 80170c2:	79fb      	ldrb	r3, [r7, #7]
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	f107 0708 	add.w	r7, r7, #8
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop

080170d0 <SD_SendStatus>:
  * @param  pcardstatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register).
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_SendStatus(uint32_t *pcardstatus)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  SD_Error errorstatus = SD_OK;
 80170d8:	f04f 0300 	mov.w	r3, #0
 80170dc:	73fb      	strb	r3, [r7, #15]

  if (pcardstatus == NULL)
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d104      	bne.n	80170ee <SD_SendStatus+0x1e>
  {
    errorstatus = SD_INVALID_PARAMETER;
 80170e4:	f04f 0326 	mov.w	r3, #38	; 0x26
 80170e8:	73fb      	strb	r3, [r7, #15]
    return(errorstatus);
 80170ea:	7bfb      	ldrb	r3, [r7, #15]
 80170ec:	e040      	b.n	8017170 <SD_SendStatus+0xa0>
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80170ee:	f640 23b0 	movw	r3, #2736	; 0xab0
 80170f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80170fc:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017104:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
 8017106:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801710a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801710e:	f04f 020d 	mov.w	r2, #13
 8017112:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8017114:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801711c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8017120:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8017122:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017126:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801712a:	f04f 0200 	mov.w	r2, #0
 801712e:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8017130:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801713c:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 801713e:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017142:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017146:	f7f7 ffc1 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
 801714a:	f04f 000d 	mov.w	r0, #13
 801714e:	f000 f92b 	bl	80173a8 <CmdResp1Error>
 8017152:	4603      	mov	r3, r0
 8017154:	73fb      	strb	r3, [r7, #15]

  if (errorstatus != SD_OK)
 8017156:	7bfb      	ldrb	r3, [r7, #15]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d001      	beq.n	8017160 <SD_SendStatus+0x90>
  {
    return(errorstatus);
 801715c:	7bfb      	ldrb	r3, [r7, #15]
 801715e:	e007      	b.n	8017170 <SD_SendStatus+0xa0>
  }

  *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
 8017160:	f04f 0000 	mov.w	r0, #0
 8017164:	f7f7 fff2 	bl	800f14c <SDIO_GetResponse>
 8017168:	4602      	mov	r2, r0
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	601a      	str	r2, [r3, #0]

  return(errorstatus);
 801716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017170:	4618      	mov	r0, r3
 8017172:	f107 0710 	add.w	r7, r7, #16
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}
 801717a:	bf00      	nop

0801717c <SD_ProcessIRQSrc>:
  * @brief  Allows to process all the interrupts that are high.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_ProcessIRQSrc(void)
{ 
 801717c:	b580      	push	{r7, lr}
 801717e:	af00      	add	r7, sp, #0
  if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
 8017180:	f44f 7080 	mov.w	r0, #256	; 0x100
 8017184:	f7f8 f8a8 	bl	800f2d8 <SDIO_GetITStatus>
 8017188:	4603      	mov	r3, r0
 801718a:	2b00      	cmp	r3, #0
 801718c:	d012      	beq.n	80171b4 <SD_ProcessIRQSrc+0x38>
  {
    TransferError = SD_OK;
 801718e:	f640 23b8 	movw	r3, #2744	; 0xab8
 8017192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017196:	f04f 0200 	mov.w	r2, #0
 801719a:	701a      	strb	r2, [r3, #0]
    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
 801719c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80171a0:	f7f8 f8ba 	bl	800f318 <SDIO_ClearITPendingBit>
    TransferEnd = 1;
 80171a4:	f640 23bc 	movw	r3, #2748	; 0xabc
 80171a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80171ac:	f04f 0201 	mov.w	r2, #1
 80171b0:	601a      	str	r2, [r3, #0]
 80171b2:	e05d      	b.n	8017270 <SD_ProcessIRQSrc+0xf4>
  }  
  else if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
 80171b4:	f04f 0002 	mov.w	r0, #2
 80171b8:	f7f8 f88e 	bl	800f2d8 <SDIO_GetITStatus>
 80171bc:	4603      	mov	r3, r0
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d00b      	beq.n	80171da <SD_ProcessIRQSrc+0x5e>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
 80171c2:	f04f 0002 	mov.w	r0, #2
 80171c6:	f7f8 f8a7 	bl	800f318 <SDIO_ClearITPendingBit>
    TransferError = SD_DATA_CRC_FAIL;
 80171ca:	f640 23b8 	movw	r3, #2744	; 0xab8
 80171ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80171d2:	f04f 0202 	mov.w	r2, #2
 80171d6:	701a      	strb	r2, [r3, #0]
 80171d8:	e04a      	b.n	8017270 <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
 80171da:	f04f 0008 	mov.w	r0, #8
 80171de:	f7f8 f87b 	bl	800f2d8 <SDIO_GetITStatus>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d00b      	beq.n	8017200 <SD_ProcessIRQSrc+0x84>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
 80171e8:	f04f 0008 	mov.w	r0, #8
 80171ec:	f7f8 f894 	bl	800f318 <SDIO_ClearITPendingBit>
    TransferError = SD_DATA_TIMEOUT;
 80171f0:	f640 23b8 	movw	r3, #2744	; 0xab8
 80171f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80171f8:	f04f 0204 	mov.w	r2, #4
 80171fc:	701a      	strb	r2, [r3, #0]
 80171fe:	e037      	b.n	8017270 <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
 8017200:	f04f 0020 	mov.w	r0, #32
 8017204:	f7f8 f868 	bl	800f2d8 <SDIO_GetITStatus>
 8017208:	4603      	mov	r3, r0
 801720a:	2b00      	cmp	r3, #0
 801720c:	d00b      	beq.n	8017226 <SD_ProcessIRQSrc+0xaa>
  {
    SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
 801720e:	f04f 0020 	mov.w	r0, #32
 8017212:	f7f8 f881 	bl	800f318 <SDIO_ClearITPendingBit>
    TransferError = SD_RX_OVERRUN;
 8017216:	f640 23b8 	movw	r3, #2744	; 0xab8
 801721a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801721e:	f04f 0206 	mov.w	r2, #6
 8017222:	701a      	strb	r2, [r3, #0]
 8017224:	e024      	b.n	8017270 <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
 8017226:	f04f 0010 	mov.w	r0, #16
 801722a:	f7f8 f855 	bl	800f2d8 <SDIO_GetITStatus>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d00b      	beq.n	801724c <SD_ProcessIRQSrc+0xd0>
  {
    SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
 8017234:	f04f 0010 	mov.w	r0, #16
 8017238:	f7f8 f86e 	bl	800f318 <SDIO_ClearITPendingBit>
    TransferError = SD_TX_UNDERRUN;
 801723c:	f640 23b8 	movw	r3, #2744	; 0xab8
 8017240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017244:	f04f 0205 	mov.w	r2, #5
 8017248:	701a      	strb	r2, [r3, #0]
 801724a:	e011      	b.n	8017270 <SD_ProcessIRQSrc+0xf4>
  }
  else if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
 801724c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017250:	f7f8 f842 	bl	800f2d8 <SDIO_GetITStatus>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d00a      	beq.n	8017270 <SD_ProcessIRQSrc+0xf4>
  {
    SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
 801725a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801725e:	f7f8 f85b 	bl	800f318 <SDIO_ClearITPendingBit>
    TransferError = SD_START_BIT_ERR;
 8017262:	f640 23b8 	movw	r3, #2744	; 0xab8
 8017266:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801726a:	f04f 0207 	mov.w	r2, #7
 801726e:	701a      	strb	r2, [r3, #0]
  }

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 8017270:	f24c 303a 	movw	r0, #49978	; 0xc33a
 8017274:	f04f 0100 	mov.w	r1, #0
 8017278:	f7f7 ffd2 	bl	800f220 <SDIO_ITConfig>
                SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
  return(TransferError);
 801727c:	f640 23b8 	movw	r3, #2744	; 0xab8
 8017280:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	b2db      	uxtb	r3, r3
}
 8017288:	4618      	mov	r0, r3
 801728a:	bd80      	pop	{r7, pc}

0801728c <SD_ProcessDMAIRQ>:
  * @brief  This function waits until the SDIO DMA data transfer is finished. 
  * @param  None.
  * @retval None.
  */
void SD_ProcessDMAIRQ(void)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	af00      	add	r7, sp, #0
  if(DMA2->LISR & SD_SDIO_DMA_FLAG_TCIF)
 8017290:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8017294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00e      	beq.n	80172c0 <SD_ProcessDMAIRQ+0x34>
  {
    DMAEndOfTransfer = 0x01;
 80172a2:	f640 23c0 	movw	r3, #2752	; 0xac0
 80172a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80172aa:	f04f 0201 	mov.w	r2, #1
 80172ae:	601a      	str	r2, [r3, #0]
    DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF);
 80172b0:	f246 4058 	movw	r0, #25688	; 0x6458
 80172b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80172b8:	f04f 51c2 	mov.w	r1, #406847488	; 0x18400000
 80172bc:	f7f7 f8a0 	bl	800e400 <DMA_ClearFlag>
  }
}
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop

080172c4 <CmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdError(void)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b082      	sub	sp, #8
 80172c8:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 80172ca:	f04f 0300 	mov.w	r3, #0
 80172ce:	70fb      	strb	r3, [r7, #3]
  uint32_t timeout;

  timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
 80172d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80172d4:	607b      	str	r3, [r7, #4]

  while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 80172d6:	e003      	b.n	80172e0 <CmdError+0x1c>
  {
    timeout--;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f103 33ff 	add.w	r3, r3, #4294967295
 80172de:	607b      	str	r3, [r7, #4]
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */

  while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d006      	beq.n	80172f4 <CmdError+0x30>
 80172e6:	f04f 0080 	mov.w	r0, #128	; 0x80
 80172ea:	f7f7 ffc5 	bl	800f278 <SDIO_GetFlagStatus>
 80172ee:	4603      	mov	r3, r0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d0f1      	beq.n	80172d8 <CmdError+0x14>
  {
    timeout--;
  }

  if (timeout == 0)
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d104      	bne.n	8017304 <CmdError+0x40>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 80172fa:	f04f 0303 	mov.w	r3, #3
 80172fe:	70fb      	strb	r3, [r7, #3]
    return(errorstatus);
 8017300:	78fb      	ldrb	r3, [r7, #3]
 8017302:	e004      	b.n	801730e <CmdError+0x4a>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8017304:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8017308:	f7f7 ffd6 	bl	800f2b8 <SDIO_ClearFlag>

  return(errorstatus);
 801730c:	78fb      	ldrb	r3, [r7, #3]
}
 801730e:	4618      	mov	r0, r3
 8017310:	f107 0708 	add.w	r7, r7, #8
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <CmdResp7Error>:
  * @brief  Checks for error conditions for R7 response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp7Error(void)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 801731e:	f04f 0300 	mov.w	r3, #0
 8017322:	71fb      	strb	r3, [r7, #7]
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;
 8017324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017328:	60bb      	str	r3, [r7, #8]

  status = SDIO->STA;
 801732a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801732e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8017332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017334:	60fb      	str	r3, [r7, #12]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
 8017336:	e009      	b.n	801734c <CmdResp7Error+0x34>
  {
    timeout--;
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	f103 33ff 	add.w	r3, r3, #4294967295
 801733e:	60bb      	str	r3, [r7, #8]
    status = SDIO->STA;
 8017340:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8017344:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8017348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801734a:	60fb      	str	r3, [r7, #12]
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8017352:	2b00      	cmp	r3, #0
 8017354:	d102      	bne.n	801735c <CmdResp7Error+0x44>
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d1ed      	bne.n	8017338 <CmdResp7Error+0x20>
  {
    timeout--;
    status = SDIO->STA;
  }

  if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d004      	beq.n	801736c <CmdResp7Error+0x54>
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	f003 0304 	and.w	r3, r3, #4
 8017368:	2b00      	cmp	r3, #0
 801736a:	d008      	beq.n	801737e <CmdResp7Error+0x66>
  {
    /*!< Card is not V2.0 complient or card does not support the set voltage range */
    errorstatus = SD_CMD_RSP_TIMEOUT;
 801736c:	f04f 0303 	mov.w	r3, #3
 8017370:	71fb      	strb	r3, [r7, #7]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8017372:	f04f 0004 	mov.w	r0, #4
 8017376:	f7f7 ff9f 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 801737a:	79fb      	ldrb	r3, [r7, #7]
 801737c:	e00e      	b.n	801739c <CmdResp7Error+0x84>
  }

  if (status & SDIO_FLAG_CMDREND)
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017384:	2b00      	cmp	r3, #0
 8017386:	d008      	beq.n	801739a <CmdResp7Error+0x82>
  {
    /*!< Card is SD V2.0 compliant */
    errorstatus = SD_OK;
 8017388:	f04f 0300 	mov.w	r3, #0
 801738c:	71fb      	strb	r3, [r7, #7]
    SDIO_ClearFlag(SDIO_FLAG_CMDREND);
 801738e:	f04f 0040 	mov.w	r0, #64	; 0x40
 8017392:	f7f7 ff91 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 8017396:	79fb      	ldrb	r3, [r7, #7]
 8017398:	e000      	b.n	801739c <CmdResp7Error+0x84>
  }
  return(errorstatus);
 801739a:	79fb      	ldrb	r3, [r7, #7]
}
 801739c:	4618      	mov	r0, r3
 801739e:	f107 0710 	add.w	r7, r7, #16
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bd80      	pop	{r7, pc}
 80173a6:	bf00      	nop

080173a8 <CmdResp1Error>:
  * @brief  Checks for error conditions for R1 response.
  * @param  cmd: The sent command index.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp1Error(uint8_t cmd)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b086      	sub	sp, #24
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	4603      	mov	r3, r0
 80173b0:	71fb      	strb	r3, [r7, #7]
  SD_Error errorstatus = SD_OK;
 80173b2:	f04f 0300 	mov.w	r3, #0
 80173b6:	74fb      	strb	r3, [r7, #19]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;
 80173b8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80173bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80173c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173c2:	617b      	str	r3, [r7, #20]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 80173c4:	e005      	b.n	80173d2 <CmdResp1Error+0x2a>
  {
    status = SDIO->STA;
 80173c6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80173ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80173ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173d0:	617b      	str	r3, [r7, #20]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 80173d2:	697b      	ldr	r3, [r7, #20]
 80173d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d0f4      	beq.n	80173c6 <CmdResp1Error+0x1e>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	f003 0304 	and.w	r3, r3, #4
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d008      	beq.n	80173f8 <CmdResp1Error+0x50>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 80173e6:	f04f 0303 	mov.w	r3, #3
 80173ea:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 80173ec:	f04f 0004 	mov.w	r0, #4
 80173f0:	f7f7 ff62 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 80173f4:	7cfb      	ldrb	r3, [r7, #19]
 80173f6:	e0c4      	b.n	8017582 <CmdResp1Error+0x1da>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	f003 0301 	and.w	r3, r3, #1
 80173fe:	b2db      	uxtb	r3, r3
 8017400:	2b00      	cmp	r3, #0
 8017402:	d008      	beq.n	8017416 <CmdResp1Error+0x6e>
  {
    errorstatus = SD_CMD_CRC_FAIL;
 8017404:	f04f 0301 	mov.w	r3, #1
 8017408:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 801740a:	f04f 0001 	mov.w	r0, #1
 801740e:	f7f7 ff53 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 8017412:	7cfb      	ldrb	r3, [r7, #19]
 8017414:	e0b5      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 8017416:	f7f7 fe8d 	bl	800f134 <SDIO_GetCommandResponse>
 801741a:	4603      	mov	r3, r0
 801741c:	79fa      	ldrb	r2, [r7, #7]
 801741e:	429a      	cmp	r2, r3
 8017420:	d004      	beq.n	801742c <CmdResp1Error+0x84>
  {
    errorstatus = SD_ILLEGAL_CMD;
 8017422:	f04f 0310 	mov.w	r3, #16
 8017426:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8017428:	7cfb      	ldrb	r3, [r7, #19]
 801742a:	e0aa      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 801742c:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8017430:	f7f7 ff42 	bl	800f2b8 <SDIO_ClearFlag>

  /*!< We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8017434:	f04f 0000 	mov.w	r0, #0
 8017438:	f7f7 fe88 	bl	800f14c <SDIO_GetResponse>
 801743c:	4603      	mov	r3, r0
 801743e:	60fb      	str	r3, [r7, #12]

  if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8017440:	68fa      	ldr	r2, [r7, #12]
 8017442:	f24e 0308 	movw	r3, #57352	; 0xe008
 8017446:	f6cf 53ff 	movt	r3, #65023	; 0xfdff
 801744a:	4013      	ands	r3, r2
 801744c:	2b00      	cmp	r3, #0
 801744e:	d101      	bne.n	8017454 <CmdResp1Error+0xac>
  {
    return(errorstatus);
 8017450:	7cfb      	ldrb	r3, [r7, #19]
 8017452:	e096      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	2b00      	cmp	r3, #0
 8017458:	da02      	bge.n	8017460 <CmdResp1Error+0xb8>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 801745a:	f04f 031c 	mov.w	r3, #28
 801745e:	e090      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ADDR_MISALIGNED)
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017466:	2b00      	cmp	r3, #0
 8017468:	d002      	beq.n	8017470 <CmdResp1Error+0xc8>
  {
    return(SD_ADDR_MISALIGNED);
 801746a:	f04f 0309 	mov.w	r3, #9
 801746e:	e088      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017476:	2b00      	cmp	r3, #0
 8017478:	d002      	beq.n	8017480 <CmdResp1Error+0xd8>
  {
    return(SD_BLOCK_LEN_ERR);
 801747a:	f04f 030a 	mov.w	r3, #10
 801747e:	e080      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017486:	2b00      	cmp	r3, #0
 8017488:	d002      	beq.n	8017490 <CmdResp1Error+0xe8>
  {
    return(SD_ERASE_SEQ_ERR);
 801748a:	f04f 030b 	mov.w	r3, #11
 801748e:	e078      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017496:	2b00      	cmp	r3, #0
 8017498:	d002      	beq.n	80174a0 <CmdResp1Error+0xf8>
  {
    return(SD_BAD_ERASE_PARAM);
 801749a:	f04f 030c 	mov.w	r3, #12
 801749e:	e070      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d002      	beq.n	80174b0 <CmdResp1Error+0x108>
  {
    return(SD_WRITE_PROT_VIOLATION);
 80174aa:	f04f 030d 	mov.w	r3, #13
 80174ae:	e068      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d002      	beq.n	80174c0 <CmdResp1Error+0x118>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 80174ba:	f04f 030e 	mov.w	r3, #14
 80174be:	e060      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_COM_CRC_FAILED)
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d002      	beq.n	80174d0 <CmdResp1Error+0x128>
  {
    return(SD_COM_CRC_FAILED);
 80174ca:	f04f 030f 	mov.w	r3, #15
 80174ce:	e058      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ILLEGAL_CMD)
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d002      	beq.n	80174e0 <CmdResp1Error+0x138>
  {
    return(SD_ILLEGAL_CMD);
 80174da:	f04f 0310 	mov.w	r3, #16
 80174de:	e050      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CARD_ECC_FAILED)
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d002      	beq.n	80174f0 <CmdResp1Error+0x148>
  {
    return(SD_CARD_ECC_FAILED);
 80174ea:	f04f 0311 	mov.w	r3, #17
 80174ee:	e048      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CC_ERROR)
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d002      	beq.n	8017500 <CmdResp1Error+0x158>
  {
    return(SD_CC_ERROR);
 80174fa:	f04f 0312 	mov.w	r3, #18
 80174fe:	e040      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017506:	2b00      	cmp	r3, #0
 8017508:	d002      	beq.n	8017510 <CmdResp1Error+0x168>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 801750a:	f04f 0313 	mov.w	r3, #19
 801750e:	e038      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017516:	2b00      	cmp	r3, #0
 8017518:	d002      	beq.n	8017520 <CmdResp1Error+0x178>
  {
    return(SD_STREAM_READ_UNDERRUN);
 801751a:	f04f 0314 	mov.w	r3, #20
 801751e:	e030      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017526:	2b00      	cmp	r3, #0
 8017528:	d002      	beq.n	8017530 <CmdResp1Error+0x188>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 801752a:	f04f 0315 	mov.w	r3, #21
 801752e:	e028      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017536:	2b00      	cmp	r3, #0
 8017538:	d002      	beq.n	8017540 <CmdResp1Error+0x198>
  {
    return(SD_CID_CSD_OVERWRITE);
 801753a:	f04f 0316 	mov.w	r3, #22
 801753e:	e020      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_WP_ERASE_SKIP)
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017546:	2b00      	cmp	r3, #0
 8017548:	d002      	beq.n	8017550 <CmdResp1Error+0x1a8>
  {
    return(SD_WP_ERASE_SKIP);
 801754a:	f04f 0317 	mov.w	r3, #23
 801754e:	e018      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017556:	2b00      	cmp	r3, #0
 8017558:	d002      	beq.n	8017560 <CmdResp1Error+0x1b8>
  {
    return(SD_CARD_ECC_DISABLED);
 801755a:	f04f 0318 	mov.w	r3, #24
 801755e:	e010      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_ERASE_RESET)
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017566:	2b00      	cmp	r3, #0
 8017568:	d002      	beq.n	8017570 <CmdResp1Error+0x1c8>
  {
    return(SD_ERASE_RESET);
 801756a:	f04f 0319 	mov.w	r3, #25
 801756e:	e008      	b.n	8017582 <CmdResp1Error+0x1da>
  }

  if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f003 0308 	and.w	r3, r3, #8
 8017576:	2b00      	cmp	r3, #0
 8017578:	d002      	beq.n	8017580 <CmdResp1Error+0x1d8>
  {
    return(SD_AKE_SEQ_ERROR);
 801757a:	f04f 031a 	mov.w	r3, #26
 801757e:	e000      	b.n	8017582 <CmdResp1Error+0x1da>
  }
  return(errorstatus);
 8017580:	7cfb      	ldrb	r3, [r7, #19]
}
 8017582:	4618      	mov	r0, r3
 8017584:	f107 0718 	add.w	r7, r7, #24
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <CmdResp3Error>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp3Error(void)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 8017592:	f04f 0300 	mov.w	r3, #0
 8017596:	70fb      	strb	r3, [r7, #3]
  uint32_t status;

  status = SDIO->STA;
 8017598:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801759c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80175a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175a2:	607b      	str	r3, [r7, #4]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 80175a4:	e005      	b.n	80175b2 <CmdResp3Error+0x26>
  {
    status = SDIO->STA;
 80175a6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80175aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80175ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175b0:	607b      	str	r3, [r7, #4]
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d0f4      	beq.n	80175a6 <CmdResp3Error+0x1a>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	f003 0304 	and.w	r3, r3, #4
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d008      	beq.n	80175d8 <CmdResp3Error+0x4c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 80175c6:	f04f 0303 	mov.w	r3, #3
 80175ca:	70fb      	strb	r3, [r7, #3]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 80175cc:	f04f 0004 	mov.w	r0, #4
 80175d0:	f7f7 fe72 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 80175d4:	78fb      	ldrb	r3, [r7, #3]
 80175d6:	e004      	b.n	80175e2 <CmdResp3Error+0x56>
  }
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80175d8:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80175dc:	f7f7 fe6c 	bl	800f2b8 <SDIO_ClearFlag>
  return(errorstatus);
 80175e0:	78fb      	ldrb	r3, [r7, #3]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	f107 0708 	add.w	r7, r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}

080175ec <CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp2Error(void)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b082      	sub	sp, #8
 80175f0:	af00      	add	r7, sp, #0
  SD_Error errorstatus = SD_OK;
 80175f2:	f04f 0300 	mov.w	r3, #0
 80175f6:	70fb      	strb	r3, [r7, #3]
  uint32_t status;

  status = SDIO->STA;
 80175f8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80175fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8017600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017602:	607b      	str	r3, [r7, #4]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8017604:	e005      	b.n	8017612 <CmdResp2Error+0x26>
  {
    status = SDIO->STA;
 8017606:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801760a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017610:	607b      	str	r3, [r7, #4]
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8017618:	2b00      	cmp	r3, #0
 801761a:	d0f4      	beq.n	8017606 <CmdResp2Error+0x1a>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f003 0304 	and.w	r3, r3, #4
 8017622:	2b00      	cmp	r3, #0
 8017624:	d008      	beq.n	8017638 <CmdResp2Error+0x4c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 8017626:	f04f 0303 	mov.w	r3, #3
 801762a:	70fb      	strb	r3, [r7, #3]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 801762c:	f04f 0004 	mov.w	r0, #4
 8017630:	f7f7 fe42 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 8017634:	78fb      	ldrb	r3, [r7, #3]
 8017636:	e013      	b.n	8017660 <CmdResp2Error+0x74>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f003 0301 	and.w	r3, r3, #1
 801763e:	b2db      	uxtb	r3, r3
 8017640:	2b00      	cmp	r3, #0
 8017642:	d008      	beq.n	8017656 <CmdResp2Error+0x6a>
  {
    errorstatus = SD_CMD_CRC_FAIL;
 8017644:	f04f 0301 	mov.w	r3, #1
 8017648:	70fb      	strb	r3, [r7, #3]
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 801764a:	f04f 0001 	mov.w	r0, #1
 801764e:	f7f7 fe33 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 8017652:	78fb      	ldrb	r3, [r7, #3]
 8017654:	e004      	b.n	8017660 <CmdResp2Error+0x74>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8017656:	f240 50ff 	movw	r0, #1535	; 0x5ff
 801765a:	f7f7 fe2d 	bl	800f2b8 <SDIO_ClearFlag>

  return(errorstatus);
 801765e:	78fb      	ldrb	r3, [r7, #3]
}
 8017660:	4618      	mov	r0, r3
 8017662:	f107 0708 	add.w	r7, r7, #8
 8017666:	46bd      	mov	sp, r7
 8017668:	bd80      	pop	{r7, pc}
 801766a:	bf00      	nop

0801766c <CmdResp6Error>:
  * @param  prca: pointer to the variable that will contain the SD card relative 
  *         address RCA. 
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b086      	sub	sp, #24
 8017670:	af00      	add	r7, sp, #0
 8017672:	4603      	mov	r3, r0
 8017674:	6039      	str	r1, [r7, #0]
 8017676:	71fb      	strb	r3, [r7, #7]
  SD_Error errorstatus = SD_OK;
 8017678:	f04f 0300 	mov.w	r3, #0
 801767c:	74fb      	strb	r3, [r7, #19]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;
 801767e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8017682:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8017686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017688:	617b      	str	r3, [r7, #20]

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 801768a:	e005      	b.n	8017698 <CmdResp6Error+0x2c>
  {
    status = SDIO->STA;
 801768c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8017690:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8017694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017696:	617b      	str	r3, [r7, #20]
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d0f4      	beq.n	801768c <CmdResp6Error+0x20>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	f003 0304 	and.w	r3, r3, #4
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d008      	beq.n	80176be <CmdResp6Error+0x52>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
 80176ac:	f04f 0303 	mov.w	r3, #3
 80176b0:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 80176b2:	f04f 0004 	mov.w	r0, #4
 80176b6:	f7f7 fdff 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 80176ba:	7cfb      	ldrb	r3, [r7, #19]
 80176bc:	e049      	b.n	8017752 <CmdResp6Error+0xe6>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	f003 0301 	and.w	r3, r3, #1
 80176c4:	b2db      	uxtb	r3, r3
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d008      	beq.n	80176dc <CmdResp6Error+0x70>
  {
    errorstatus = SD_CMD_CRC_FAIL;
 80176ca:	f04f 0301 	mov.w	r3, #1
 80176ce:	74fb      	strb	r3, [r7, #19]
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 80176d0:	f04f 0001 	mov.w	r0, #1
 80176d4:	f7f7 fdf0 	bl	800f2b8 <SDIO_ClearFlag>
    return(errorstatus);
 80176d8:	7cfb      	ldrb	r3, [r7, #19]
 80176da:	e03a      	b.n	8017752 <CmdResp6Error+0xe6>
  }

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 80176dc:	f7f7 fd2a 	bl	800f134 <SDIO_GetCommandResponse>
 80176e0:	4603      	mov	r3, r0
 80176e2:	79fa      	ldrb	r2, [r7, #7]
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d004      	beq.n	80176f2 <CmdResp6Error+0x86>
  {
    errorstatus = SD_ILLEGAL_CMD;
 80176e8:	f04f 0310 	mov.w	r3, #16
 80176ec:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 80176ee:	7cfb      	ldrb	r3, [r7, #19]
 80176f0:	e02f      	b.n	8017752 <CmdResp6Error+0xe6>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80176f2:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80176f6:	f7f7 fddf 	bl	800f2b8 <SDIO_ClearFlag>

  /*!< We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 80176fa:	f04f 0000 	mov.w	r0, #0
 80176fe:	f7f7 fd25 	bl	800f14c <SDIO_GetResponse>
 8017702:	4603      	mov	r3, r0
 8017704:	60fb      	str	r3, [r7, #12]

  if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801770c:	2b00      	cmp	r3, #0
 801770e:	d107      	bne.n	8017720 <CmdResp6Error+0xb4>
  {
    *prca = (uint16_t) (response_r1 >> 16);
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8017716:	b29a      	uxth	r2, r3
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	801a      	strh	r2, [r3, #0]
    return(errorstatus);
 801771c:	7cfb      	ldrb	r3, [r7, #19]
 801771e:	e018      	b.n	8017752 <CmdResp6Error+0xe6>
  }

  if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017726:	2b00      	cmp	r3, #0
 8017728:	d002      	beq.n	8017730 <CmdResp6Error+0xc4>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 801772a:	f04f 0313 	mov.w	r3, #19
 801772e:	e010      	b.n	8017752 <CmdResp6Error+0xe6>
  }

  if (response_r1 & SD_R6_ILLEGAL_CMD)
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017736:	2b00      	cmp	r3, #0
 8017738:	d002      	beq.n	8017740 <CmdResp6Error+0xd4>
  {
    return(SD_ILLEGAL_CMD);
 801773a:	f04f 0310 	mov.w	r3, #16
 801773e:	e008      	b.n	8017752 <CmdResp6Error+0xe6>
  }

  if (response_r1 & SD_R6_COM_CRC_FAILED)
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017746:	2b00      	cmp	r3, #0
 8017748:	d002      	beq.n	8017750 <CmdResp6Error+0xe4>
  {
    return(SD_COM_CRC_FAILED);
 801774a:	f04f 030f 	mov.w	r3, #15
 801774e:	e000      	b.n	8017752 <CmdResp6Error+0xe6>
  }

  return(errorstatus);
 8017750:	7cfb      	ldrb	r3, [r7, #19]
}
 8017752:	4618      	mov	r0, r3
 8017754:	f107 0718 	add.w	r7, r7, #24
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}

0801775c <SDEnWideBus>:
  * @param  NewState: new state of the SDIO wide bus mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error SDEnWideBus(FunctionalState NewState)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b086      	sub	sp, #24
 8017760:	af00      	add	r7, sp, #0
 8017762:	4603      	mov	r3, r0
 8017764:	71fb      	strb	r3, [r7, #7]
  SD_Error errorstatus = SD_OK;
 8017766:	f04f 0300 	mov.w	r3, #0
 801776a:	75fb      	strb	r3, [r7, #23]

  uint32_t scr[2] = {0, 0};
 801776c:	f04f 0300 	mov.w	r3, #0
 8017770:	60fb      	str	r3, [r7, #12]
 8017772:	f04f 0300 	mov.w	r3, #0
 8017776:	613b      	str	r3, [r7, #16]

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 8017778:	f04f 0000 	mov.w	r0, #0
 801777c:	f7f7 fce6 	bl	800f14c <SDIO_GetResponse>
 8017780:	4603      	mov	r3, r0
 8017782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017786:	2b00      	cmp	r3, #0
 8017788:	d004      	beq.n	8017794 <SDEnWideBus+0x38>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
 801778a:	f04f 030e 	mov.w	r3, #14
 801778e:	75fb      	strb	r3, [r7, #23]
    return(errorstatus);
 8017790:	7dfb      	ldrb	r3, [r7, #23]
 8017792:	e106      	b.n	80179a2 <SDEnWideBus+0x246>
  }

  /*!< Get SCR Register */
  errorstatus = FindSCR(RCA, scr);
 8017794:	f640 23b0 	movw	r3, #2736	; 0xab0
 8017798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	b29a      	uxth	r2, r3
 80177a0:	f107 030c 	add.w	r3, r7, #12
 80177a4:	4610      	mov	r0, r2
 80177a6:	4619      	mov	r1, r3
 80177a8:	f000 f900 	bl	80179ac <FindSCR>
 80177ac:	4603      	mov	r3, r0
 80177ae:	75fb      	strb	r3, [r7, #23]

  if (errorstatus != SD_OK)
 80177b0:	7dfb      	ldrb	r3, [r7, #23]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d001      	beq.n	80177ba <SDEnWideBus+0x5e>
  {
    return(errorstatus);
 80177b6:	7dfb      	ldrb	r3, [r7, #23]
 80177b8:	e0f3      	b.n	80179a2 <SDEnWideBus+0x246>
  }

  /*!< If wide bus operation to be enabled */
  if (NewState == ENABLE)
 80177ba:	79fb      	ldrb	r3, [r7, #7]
 80177bc:	2b01      	cmp	r3, #1
 80177be:	d178      	bne.n	80178b2 <SDEnWideBus+0x156>
  {
    /*!< If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d06e      	beq.n	80178a8 <SDEnWideBus+0x14c>
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80177ca:	f640 23b0 	movw	r3, #2736	; 0xab0
 80177ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80177d8:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80177dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80177e0:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80177e2:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80177e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80177ea:	f04f 0237 	mov.w	r2, #55	; 0x37
 80177ee:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80177f0:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80177f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80177f8:	f04f 0240 	mov.w	r2, #64	; 0x40
 80177fc:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80177fe:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017806:	f04f 0200 	mov.w	r2, #0
 801780a:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 801780c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017818:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 801781a:	f247 50a4 	movw	r0, #30116	; 0x75a4
 801781e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017822:	f7f7 fc53 	bl	800f0cc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8017826:	f04f 0037 	mov.w	r0, #55	; 0x37
 801782a:	f7ff fdbd 	bl	80173a8 <CmdResp1Error>
 801782e:	4603      	mov	r3, r0
 8017830:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 8017832:	7dfb      	ldrb	r3, [r7, #23]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d001      	beq.n	801783c <SDEnWideBus+0xe0>
      {
        return(errorstatus);
 8017838:	7dfb      	ldrb	r3, [r7, #23]
 801783a:	e0b2      	b.n	80179a2 <SDEnWideBus+0x246>
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x2;
 801783c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017844:	f04f 0202 	mov.w	r2, #2
 8017848:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 801784a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801784e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017852:	f04f 0206 	mov.w	r2, #6
 8017856:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8017858:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801785c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017860:	f04f 0240 	mov.w	r2, #64	; 0x40
 8017864:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8017866:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801786a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801786e:	f04f 0200 	mov.w	r2, #0
 8017872:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8017874:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017878:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801787c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017880:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8017882:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017886:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801788a:	f7f7 fc1f 	bl	800f0cc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 801788e:	f04f 0006 	mov.w	r0, #6
 8017892:	f7ff fd89 	bl	80173a8 <CmdResp1Error>
 8017896:	4603      	mov	r3, r0
 8017898:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 801789a:	7dfb      	ldrb	r3, [r7, #23]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d001      	beq.n	80178a4 <SDEnWideBus+0x148>
      {
        return(errorstatus);
 80178a0:	7dfb      	ldrb	r3, [r7, #23]
 80178a2:	e07e      	b.n	80179a2 <SDEnWideBus+0x246>
      }
      return(errorstatus);
 80178a4:	7dfb      	ldrb	r3, [r7, #23]
 80178a6:	e07c      	b.n	80179a2 <SDEnWideBus+0x246>
    }
    else
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
 80178a8:	f04f 0325 	mov.w	r3, #37	; 0x25
 80178ac:	75fb      	strb	r3, [r7, #23]
      return(errorstatus);
 80178ae:	7dfb      	ldrb	r3, [r7, #23]
 80178b0:	e077      	b.n	80179a2 <SDEnWideBus+0x246>
    }
  }   /*!< If wide bus operation to be disabled */
  else
  {
    /*!< If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 80178b2:	693b      	ldr	r3, [r7, #16]
 80178b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d06e      	beq.n	801799a <SDEnWideBus+0x23e>
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80178bc:	f640 23b0 	movw	r3, #2736	; 0xab0
 80178c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80178ca:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80178ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178d2:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80178d4:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80178d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178dc:	f04f 0237 	mov.w	r2, #55	; 0x37
 80178e0:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80178e2:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80178e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178ea:	f04f 0240 	mov.w	r2, #64	; 0x40
 80178ee:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80178f0:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80178f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178f8:	f04f 0200 	mov.w	r2, #0
 80178fc:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80178fe:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801790a:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 801790c:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017910:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017914:	f7f7 fbda 	bl	800f0cc <SDIO_SendCommand>


      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8017918:	f04f 0037 	mov.w	r0, #55	; 0x37
 801791c:	f7ff fd44 	bl	80173a8 <CmdResp1Error>
 8017920:	4603      	mov	r3, r0
 8017922:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 8017924:	7dfb      	ldrb	r3, [r7, #23]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d001      	beq.n	801792e <SDEnWideBus+0x1d2>
      {
        return(errorstatus);
 801792a:	7dfb      	ldrb	r3, [r7, #23]
 801792c:	e039      	b.n	80179a2 <SDEnWideBus+0x246>
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 801792e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017936:	f04f 0200 	mov.w	r2, #0
 801793a:	601a      	str	r2, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 801793c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017944:	f04f 0206 	mov.w	r2, #6
 8017948:	605a      	str	r2, [r3, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 801794a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801794e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017952:	f04f 0240 	mov.w	r2, #64	; 0x40
 8017956:	609a      	str	r2, [r3, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8017958:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801795c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017960:	f04f 0200 	mov.w	r2, #0
 8017964:	60da      	str	r2, [r3, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8017966:	f247 53a4 	movw	r3, #30116	; 0x75a4
 801796a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801796e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017972:	611a      	str	r2, [r3, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8017974:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017978:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801797c:	f7f7 fba6 	bl	800f0cc <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 8017980:	f04f 0006 	mov.w	r0, #6
 8017984:	f7ff fd10 	bl	80173a8 <CmdResp1Error>
 8017988:	4603      	mov	r3, r0
 801798a:	75fb      	strb	r3, [r7, #23]

      if (errorstatus != SD_OK)
 801798c:	7dfb      	ldrb	r3, [r7, #23]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d001      	beq.n	8017996 <SDEnWideBus+0x23a>
      {
        return(errorstatus);
 8017992:	7dfb      	ldrb	r3, [r7, #23]
 8017994:	e005      	b.n	80179a2 <SDEnWideBus+0x246>
      }

      return(errorstatus);
 8017996:	7dfb      	ldrb	r3, [r7, #23]
 8017998:	e003      	b.n	80179a2 <SDEnWideBus+0x246>
    }
    else
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
 801799a:	f04f 0325 	mov.w	r3, #37	; 0x25
 801799e:	75fb      	strb	r3, [r7, #23]
      return(errorstatus);
 80179a0:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	f107 0718 	add.w	r7, r7, #24
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}

080179ac <FindSCR>:
  * @param  rca: selected card address.
  * @param  pscr: pointer to the buffer that will contain the SCR value.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
 80179ac:	b590      	push	{r4, r7, lr}
 80179ae:	b087      	sub	sp, #28
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	4603      	mov	r3, r0
 80179b4:	6039      	str	r1, [r7, #0]
 80179b6:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 80179b8:	f04f 0300 	mov.w	r3, #0
 80179bc:	617b      	str	r3, [r7, #20]
  SD_Error errorstatus = SD_OK;
 80179be:	f04f 0300 	mov.w	r3, #0
 80179c2:	74fb      	strb	r3, [r7, #19]
  uint32_t tempscr[2] = {0, 0};
 80179c4:	f04f 0300 	mov.w	r3, #0
 80179c8:	60bb      	str	r3, [r7, #8]
 80179ca:	f04f 0300 	mov.w	r3, #0
 80179ce:	60fb      	str	r3, [r7, #12]

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 80179d0:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80179d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179d8:	f04f 0208 	mov.w	r2, #8
 80179dc:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 80179de:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80179e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179e6:	f04f 0210 	mov.w	r2, #16
 80179ea:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80179ec:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80179f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179f4:	f04f 0240 	mov.w	r2, #64	; 0x40
 80179f8:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80179fa:	f247 53a4 	movw	r3, #30116	; 0x75a4
 80179fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a02:	f04f 0200 	mov.w	r2, #0
 8017a06:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8017a08:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017a14:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8017a16:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017a1e:	f7f7 fb55 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 8017a22:	f04f 0010 	mov.w	r0, #16
 8017a26:	f7ff fcbf 	bl	80173a8 <CmdResp1Error>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	74fb      	strb	r3, [r7, #19]

  if (errorstatus != SD_OK)
 8017a2e:	7cfb      	ldrb	r3, [r7, #19]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d001      	beq.n	8017a38 <FindSCR+0x8c>
  {
    return(errorstatus);
 8017a34:	7cfb      	ldrb	r3, [r7, #19]
 8017a36:	e12f      	b.n	8017c98 <FindSCR+0x2ec>
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8017a38:	f640 23b0 	movw	r3, #2736	; 0xab0
 8017a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8017a46:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a4e:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8017a50:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a58:	f04f 0237 	mov.w	r2, #55	; 0x37
 8017a5c:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8017a5e:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a66:	f04f 0240 	mov.w	r2, #64	; 0x40
 8017a6a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8017a6c:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a74:	f04f 0200 	mov.w	r2, #0
 8017a78:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8017a7a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017a86:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8017a88:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017a8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017a90:	f7f7 fb1c 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8017a94:	f04f 0037 	mov.w	r0, #55	; 0x37
 8017a98:	f7ff fc86 	bl	80173a8 <CmdResp1Error>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	74fb      	strb	r3, [r7, #19]

  if (errorstatus != SD_OK)
 8017aa0:	7cfb      	ldrb	r3, [r7, #19]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d001      	beq.n	8017aaa <FindSCR+0xfe>
  {
    return(errorstatus);
 8017aa6:	7cfb      	ldrb	r3, [r7, #19]
 8017aa8:	e0f6      	b.n	8017c98 <FindSCR+0x2ec>
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8017aaa:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8017aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8017ab6:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = 8;
 8017ab8:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8017abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ac0:	f04f 0208 	mov.w	r2, #8
 8017ac4:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 8017ac6:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8017aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ace:	f04f 0230 	mov.w	r2, #48	; 0x30
 8017ad2:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8017ad4:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8017ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017adc:	f04f 0202 	mov.w	r2, #2
 8017ae0:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8017ae2:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8017ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017aea:	f04f 0200 	mov.w	r2, #0
 8017aee:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8017af0:	f247 53d0 	movw	r3, #30160	; 0x75d0
 8017af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017af8:	f04f 0201 	mov.w	r2, #1
 8017afc:	615a      	str	r2, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8017afe:	f247 50d0 	movw	r0, #30160	; 0x75d0
 8017b02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017b06:	f7f7 fb37 	bl	800f178 <SDIO_DataConfig>


  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8017b0a:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b12:	f04f 0200 	mov.w	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
 8017b18:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b20:	f04f 0233 	mov.w	r2, #51	; 0x33
 8017b24:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8017b26:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b2e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8017b32:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8017b34:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b3c:	f04f 0200 	mov.w	r2, #0
 8017b40:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8017b42:	f247 53a4 	movw	r3, #30116	; 0x75a4
 8017b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017b4e:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8017b50:	f247 50a4 	movw	r0, #30116	; 0x75a4
 8017b54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017b58:	f7f7 fab8 	bl	800f0cc <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
 8017b5c:	f04f 0033 	mov.w	r0, #51	; 0x33
 8017b60:	f7ff fc22 	bl	80173a8 <CmdResp1Error>
 8017b64:	4603      	mov	r3, r0
 8017b66:	74fb      	strb	r3, [r7, #19]

  if (errorstatus != SD_OK)
 8017b68:	7cfb      	ldrb	r3, [r7, #19]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d017      	beq.n	8017b9e <FindSCR+0x1f2>
  {
    return(errorstatus);
 8017b6e:	7cfb      	ldrb	r3, [r7, #19]
 8017b70:	e092      	b.n	8017c98 <FindSCR+0x2ec>
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
  {
    if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 8017b72:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8017b76:	f7f7 fb7f 	bl	800f278 <SDIO_GetFlagStatus>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d00f      	beq.n	8017ba0 <FindSCR+0x1f4>
    {
      *(tempscr + index) = SDIO_ReadData();
 8017b80:	697b      	ldr	r3, [r7, #20]
 8017b82:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017b86:	f107 0208 	add.w	r2, r7, #8
 8017b8a:	18d4      	adds	r4, r2, r3
 8017b8c:	f7f7 fb2c 	bl	800f1e8 <SDIO_ReadData>
 8017b90:	4603      	mov	r3, r0
 8017b92:	6023      	str	r3, [r4, #0]
      index++;
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	f103 0301 	add.w	r3, r3, #1
 8017b9a:	617b      	str	r3, [r7, #20]
 8017b9c:	e000      	b.n	8017ba0 <FindSCR+0x1f4>
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 8017b9e:	bf00      	nop
 8017ba0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8017ba4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8017ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017baa:	461a      	mov	r2, r3
 8017bac:	f240 632a 	movw	r3, #1578	; 0x62a
 8017bb0:	4013      	ands	r3, r2
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d0dd      	beq.n	8017b72 <FindSCR+0x1c6>
      *(tempscr + index) = SDIO_ReadData();
      index++;
    }
  }

  if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 8017bb6:	f04f 0008 	mov.w	r0, #8
 8017bba:	f7f7 fb5d 	bl	800f278 <SDIO_GetFlagStatus>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d008      	beq.n	8017bd6 <FindSCR+0x22a>
  {
    SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8017bc4:	f04f 0008 	mov.w	r0, #8
 8017bc8:	f7f7 fb76 	bl	800f2b8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_TIMEOUT;
 8017bcc:	f04f 0304 	mov.w	r3, #4
 8017bd0:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8017bd2:	7cfb      	ldrb	r3, [r7, #19]
 8017bd4:	e060      	b.n	8017c98 <FindSCR+0x2ec>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 8017bd6:	f04f 0002 	mov.w	r0, #2
 8017bda:	f7f7 fb4d 	bl	800f278 <SDIO_GetFlagStatus>
 8017bde:	4603      	mov	r3, r0
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d008      	beq.n	8017bf6 <FindSCR+0x24a>
  {
    SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8017be4:	f04f 0002 	mov.w	r0, #2
 8017be8:	f7f7 fb66 	bl	800f2b8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_CRC_FAIL;
 8017bec:	f04f 0302 	mov.w	r3, #2
 8017bf0:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8017bf2:	7cfb      	ldrb	r3, [r7, #19]
 8017bf4:	e050      	b.n	8017c98 <FindSCR+0x2ec>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 8017bf6:	f04f 0020 	mov.w	r0, #32
 8017bfa:	f7f7 fb3d 	bl	800f278 <SDIO_GetFlagStatus>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d008      	beq.n	8017c16 <FindSCR+0x26a>
  {
    SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 8017c04:	f04f 0020 	mov.w	r0, #32
 8017c08:	f7f7 fb56 	bl	800f2b8 <SDIO_ClearFlag>
    errorstatus = SD_RX_OVERRUN;
 8017c0c:	f04f 0306 	mov.w	r3, #6
 8017c10:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8017c12:	7cfb      	ldrb	r3, [r7, #19]
 8017c14:	e040      	b.n	8017c98 <FindSCR+0x2ec>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 8017c16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017c1a:	f7f7 fb2d 	bl	800f278 <SDIO_GetFlagStatus>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d008      	beq.n	8017c36 <FindSCR+0x28a>
  {
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 8017c24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017c28:	f7f7 fb46 	bl	800f2b8 <SDIO_ClearFlag>
    errorstatus = SD_START_BIT_ERR;
 8017c2c:	f04f 0307 	mov.w	r3, #7
 8017c30:	74fb      	strb	r3, [r7, #19]
    return(errorstatus);
 8017c32:	7cfb      	ldrb	r3, [r7, #19]
 8017c34:	e030      	b.n	8017c98 <FindSCR+0x2ec>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8017c36:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8017c3a:	f7f7 fb3d 	bl	800f2b8 <SDIO_ClearFlag>

  *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	f103 0304 	add.w	r3, r3, #4
 8017c44:	68ba      	ldr	r2, [r7, #8]
 8017c46:	ea4f 6102 	mov.w	r1, r2, lsl #24
 8017c4a:	68ba      	ldr	r2, [r7, #8]
 8017c4c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017c50:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8017c54:	4311      	orrs	r1, r2
 8017c56:	68ba      	ldr	r2, [r7, #8]
 8017c58:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8017c5c:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8017c60:	4311      	orrs	r1, r2
 8017c62:	68ba      	ldr	r2, [r7, #8]
 8017c64:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8017c68:	430a      	orrs	r2, r1
 8017c6a:	601a      	str	r2, [r3, #0]

  *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017c78:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8017c7c:	431a      	orrs	r2, r3
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017c84:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8017c88:	431a      	orrs	r2, r3
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8017c90:	431a      	orrs	r2, r3
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	601a      	str	r2, [r3, #0]

  return(errorstatus);
 8017c96:	7cfb      	ldrb	r3, [r7, #19]
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f107 071c 	add.w	r7, r7, #28
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd90      	pop	{r4, r7, pc}
 8017ca2:	bf00      	nop

08017ca4 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	6039      	str	r1, [r7, #0]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f7fa f995 	bl	8011fe0 <_ZN12AManagedTaskC1Ev>
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	4a07      	ldr	r2, [pc, #28]	; (8017cd8 <_ZN24CLedHeartBeatSTM32F4DiscC1Em+0x34>)
 8017cba:	601a      	str	r2, [r3, #0]
	ledState = LED_Up;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f04f 0200 	mov.w	r2, #0
 8017cc2:	731a      	strb	r2, [r3, #12]
	ledRate = newRate;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	683a      	ldr	r2, [r7, #0]
 8017cc8:	611a      	str	r2, [r3, #16]
}
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f107 0708 	add.w	r7, r7, #8
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	0801e400 	.word	0x0801e400

08017cdc <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>:

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b082      	sub	sp, #8
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	4a0a      	ldr	r2, [pc, #40]	; (8017d10 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x34>)
 8017ce8:	601a      	str	r2, [r3, #0]
	// nothing to destroy
}
 8017cea:	6878      	ldr	r0, [r7, #4]
 8017cec:	f7fa f994 	bl	8012018 <_ZN12AManagedTaskD1Ev>
 8017cf0:	f04f 0300 	mov.w	r3, #0
 8017cf4:	f003 0301 	and.w	r3, r3, #1
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d002      	beq.n	8017d04 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x28>
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 fca6 	bl	8018650 <_ZdlPv>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	4618      	mov	r0, r3
 8017d08:	f107 0708 	add.w	r7, r7, #8
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}
 8017d10:	0801e400 	.word	0x0801e400

08017d14 <_ZN24CLedHeartBeatSTM32F4DiscD0Ev>:
CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
	ledState = LED_Up;
	ledRate = newRate;
}

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
	// nothing to destroy
}
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f7ff ffdd 	bl	8017cdc <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f000 fc94 	bl	8018650 <_ZdlPv>
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f107 0708 	add.w	r7, r7, #8
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on succsess
  */
bool CLedHeartBeatSTM32F4Disc::HardwareInit(){
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b082      	sub	sp, #8
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]

	STM_EVAL_LEDInit(LED3);
 8017d3c:	f04f 0001 	mov.w	r0, #1
 8017d40:	f7f7 fcd0 	bl	800f6e4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8017d44:	f04f 0000 	mov.w	r0, #0
 8017d48:	f7f7 fccc 	bl	800f6e4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8017d4c:	f04f 0002 	mov.w	r0, #2
 8017d50:	f7f7 fcc8 	bl	800f6e4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8017d54:	f04f 0003 	mov.w	r0, #3
 8017d58:	f7f7 fcc4 	bl	800f6e4 <STM_EVAL_LEDInit>
	return true;
 8017d5c:	f04f 0301 	mov.w	r3, #1
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	f107 0708 	add.w	r7, r7, #8
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop

08017d6c <_ZN24CLedHeartBeatSTM32F4Disc3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
	while(1){
		switch(ledState){
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	7b1b      	ldrb	r3, [r3, #12]
 8017d78:	2b03      	cmp	r3, #3
 8017d7a:	d85f      	bhi.n	8017e3c <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xd0>
 8017d7c:	a201      	add	r2, pc, #4	; (adr r2, 8017d84 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x18>)
 8017d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d82:	bf00      	nop
 8017d84:	08017d95 	.word	0x08017d95
 8017d88:	08017dbf 	.word	0x08017dbf
 8017d8c:	08017de9 	.word	0x08017de9
 8017d90:	08017e13 	.word	0x08017e13
		case LED_Up:
			STM_EVAL_LEDOn(LED3);
 8017d94:	f04f 0001 	mov.w	r0, #1
 8017d98:	f7f7 fcda 	bl	800f750 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 8017d9c:	f04f 0002 	mov.w	r0, #2
 8017da0:	f7f7 fcf0 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8017da4:	f04f 0003 	mov.w	r0, #3
 8017da8:	f7f7 fcec 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8017dac:	f04f 0000 	mov.w	r0, #0
 8017db0:	f7f7 fce8 	bl	800f784 <STM_EVAL_LEDOff>
			ledState = LED_Right;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f04f 0201 	mov.w	r2, #1
 8017dba:	731a      	strb	r2, [r3, #12]
			break;
 8017dbc:	e043      	b.n	8017e46 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Right:
			STM_EVAL_LEDOff(LED3);
 8017dbe:	f04f 0001 	mov.w	r0, #1
 8017dc2:	f7f7 fcdf 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED5);
 8017dc6:	f04f 0002 	mov.w	r0, #2
 8017dca:	f7f7 fcc1 	bl	800f750 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED6);
 8017dce:	f04f 0003 	mov.w	r0, #3
 8017dd2:	f7f7 fcd7 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8017dd6:	f04f 0000 	mov.w	r0, #0
 8017dda:	f7f7 fcd3 	bl	800f784 <STM_EVAL_LEDOff>
			ledState = LED_Down;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f04f 0202 	mov.w	r2, #2
 8017de4:	731a      	strb	r2, [r3, #12]
			break;
 8017de6:	e02e      	b.n	8017e46 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Down:
			STM_EVAL_LEDOff(LED3);
 8017de8:	f04f 0001 	mov.w	r0, #1
 8017dec:	f7f7 fcca 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8017df0:	f04f 0002 	mov.w	r0, #2
 8017df4:	f7f7 fcc6 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED6);
 8017df8:	f04f 0003 	mov.w	r0, #3
 8017dfc:	f7f7 fca8 	bl	800f750 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED4);
 8017e00:	f04f 0000 	mov.w	r0, #0
 8017e04:	f7f7 fcbe 	bl	800f784 <STM_EVAL_LEDOff>
			ledState = LED_Left;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f04f 0203 	mov.w	r2, #3
 8017e0e:	731a      	strb	r2, [r3, #12]
			break;
 8017e10:	e019      	b.n	8017e46 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Left:
			STM_EVAL_LEDOff(LED3);
 8017e12:	f04f 0001 	mov.w	r0, #1
 8017e16:	f7f7 fcb5 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8017e1a:	f04f 0002 	mov.w	r0, #2
 8017e1e:	f7f7 fcb1 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8017e22:	f04f 0003 	mov.w	r0, #3
 8017e26:	f7f7 fcad 	bl	800f784 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED4);
 8017e2a:	f04f 0000 	mov.w	r0, #0
 8017e2e:	f7f7 fc8f 	bl	800f750 <STM_EVAL_LEDOn>
			ledState = LED_Up;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f04f 0200 	mov.w	r2, #0
 8017e38:	731a      	strb	r2, [r3, #12]
			break;
 8017e3a:	e004      	b.n	8017e46 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		default:
			ledState = LED_Up;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f04f 0200 	mov.w	r2, #0
 8017e42:	731a      	strb	r2, [r3, #12]
			break;
 8017e44:	bf00      	nop
		}
		vTaskDelay(ledRate); // 500ms delay
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	691b      	ldr	r3, [r3, #16]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7fa fdd2 	bl	80129f4 <vTaskDelay>
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
	while(1){
 8017e50:	e790      	b.n	8017d74 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x8>
 8017e52:	bf00      	nop

08017e54 <_ZN9CFreeRTOS14StartSchedulerEv>:
	~CFreeRTOS();

	/**
	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function.
	 */
	static void StartScheduler() { vTaskStartScheduler(); }
 8017e54:	b580      	push	{r7, lr}
 8017e56:	af00      	add	r7, sp, #0
 8017e58:	f7fa fdfa 	bl	8012a50 <vTaskStartScheduler>
 8017e5c:	bd80      	pop	{r7, pc}
 8017e5e:	bf00      	nop

08017e60 <main>:
/**
  * @brief  main function
  * @param  None
  * @retval None
  */
int main(void){
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b082      	sub	sp, #8
 8017e64:	af00      	add	r7, sp, #0

	/**
	 * create Led Heartbeat task with minimal stack size and priority
	 * 1 higher than idle task
	 */
	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+5);
 8017e66:	f640 20c4 	movw	r0, #2756	; 0xac4
 8017e6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017e6e:	f649 116c 	movw	r1, #39276	; 0x996c
 8017e72:	f6c0 0101 	movt	r1, #2049	; 0x801
 8017e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017e7a:	f04f 0305 	mov.w	r3, #5
 8017e7e:	f7fa f8fb 	bl	8012078 <_ZN12AManagedTask6CreateEPKctm>
	//g_Menue.Create("Menue",configMINIMAL_STACK_SIZE * 2,tskIDLE_PRIORITY+3);
	g_FileHandler.Create("FileHandler",configMINIMAL_STACK_SIZE * 10,tskIDLE_PRIORITY+1);
 8017e82:	f640 20f0 	movw	r0, #2800	; 0xaf0
 8017e86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017e8a:	f649 117c 	movw	r1, #39292	; 0x997c
 8017e8e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8017e92:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8017e96:	f04f 0301 	mov.w	r3, #1
 8017e9a:	f7fa f8ed 	bl	8012078 <_ZN12AManagedTask6CreateEPKctm>

	/**
	 * Initialise the hardware for all Tasks and
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
 8017e9e:	f7fa f9d7 	bl	8012250 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>
	CFreeRTOS::StartScheduler();
 8017ea2:	f7ff ffd7 	bl	8017e54 <_ZN9CFreeRTOS14StartSchedulerEv>

	while(1){
		u++;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f103 0301 	add.w	r3, r3, #1
 8017eac:	607b      	str	r3, [r7, #4]
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
	CFreeRTOS::StartScheduler();

	while(1){
 8017eae:	e7fa      	b.n	8017ea6 <main+0x46>

08017eb0 <vApplicationStackOverflowHook>:
		configASSERT( 0 );  // Latch on any failure / error.
	}

	// A required FreeRTOS function. gets called on stack overflow
	// ----------------------------------------------------------------------------
	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 8017eb0:	b480      	push	{r7}
 8017eb2:	b083      	sub	sp, #12
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
 8017eb8:	6039      	str	r1, [r7, #0]
		/* TODO, implement your code here */
		while(1);
 8017eba:	e7fe      	b.n	8017eba <vApplicationStackOverflowHook+0xa>

08017ebc <EVAL_AUDIO_GetSampleCallBack>:
	}

	/* User Callbacks: user has to implement these functions in his code if
	  they are needed. -----------------------------------------------------------*/

	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8017ebc:	b480      	push	{r7}
 8017ebe:	af00      	add	r7, sp, #0
		return -1;
 8017ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bc80      	pop	{r7}
 8017eca:	4770      	bx	lr

08017ecc <EVAL_AUDIO_TransferComplete_CallBack>:
	/* This function is called when the requested data has been completely transferred.
	   In Normal mode (when  the define AUDIO_MAL_MODE_NORMAL is enabled) this function
	   is called at the end of the whole audio file.
	   In circular mode (when  the define AUDIO_MAL_MODE_CIRCULAR is enabled) this
	   function is called at the end of the current buffer transmission. */
	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	6039      	str	r1, [r7, #0]

	}
 8017ed6:	f107 070c 	add.w	r7, r7, #12
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bc80      	pop	{r7}
 8017ede:	4770      	bx	lr

08017ee0 <Codec_TIMEOUT_UserCallback>:
	   errors, busy devices ...) on the Codec control interface (I2C).
	   You can use the default timeout callback implementation by uncommenting the
	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_audio_codec.h file.
	   Typically the user implementation of this callback should reset I2C peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t Codec_TIMEOUT_UserCallback(void){
 8017ee0:	b480      	push	{r7}
 8017ee2:	af00      	add	r7, sp, #0
		return -1;
 8017ee4:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8017ee8:	4618      	mov	r0, r3
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bc80      	pop	{r7}
 8017eee:	4770      	bx	lr

08017ef0 <_Z41__static_initialization_and_destruction_0ii>:
	   Typically the user implementation of this callback should reset MEMS peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
		return -1;
	}
} // extern "C"
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
 8017ef8:	6039      	str	r1, [r7, #0]
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d15e      	bne.n	8017fbe <_Z41__static_initialization_and_destruction_0ii+0xce>
 8017f00:	683a      	ldr	r2, [r7, #0]
 8017f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d159      	bne.n	8017fbe <_Z41__static_initialization_and_destruction_0ii+0xce>

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 8017f0a:	f640 20c4 	movw	r0, #2756	; 0xac4
 8017f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f12:	f04f 0132 	mov.w	r1, #50	; 0x32
 8017f16:	f7ff fec5 	bl	8017ca4 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>
 8017f1a:	f647 43dd 	movw	r3, #31965	; 0x7cdd
 8017f1e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8017f22:	f640 20c4 	movw	r0, #2756	; 0xac4
 8017f26:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	f240 0200 	movw	r2, #0
 8017f30:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8017f34:	f000 fb86 	bl	8018644 <__aeabi_atexit>
CT6963_GPIO_Interface g_Display;
 8017f38:	f640 20d8 	movw	r0, #2776	; 0xad8
 8017f3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f40:	f7f9 fde0 	bl	8011b04 <_ZN21CT6963_GPIO_InterfaceC1Ev>
 8017f44:	f641 332d 	movw	r3, #6957	; 0x1b2d
 8017f48:	f6c0 0301 	movt	r3, #2049	; 0x801
 8017f4c:	f640 20d8 	movw	r0, #2776	; 0xad8
 8017f50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f54:	4619      	mov	r1, r3
 8017f56:	f240 0200 	movw	r2, #0
 8017f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8017f5e:	f000 fb71 	bl	8018644 <__aeabi_atexit>
CMenue	g_Menue(&g_Display);
 8017f62:	f640 20e0 	movw	r0, #2784	; 0xae0
 8017f66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f6a:	f640 21d8 	movw	r1, #2776	; 0xad8
 8017f6e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8017f72:	f7f8 fc39 	bl	80107e8 <_ZN6CMenueC1EP11CGraphicLCD>
 8017f76:	f640 0319 	movw	r3, #2073	; 0x819
 8017f7a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8017f7e:	f640 20e0 	movw	r0, #2784	; 0xae0
 8017f82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f86:	4619      	mov	r1, r3
 8017f88:	f240 0200 	movw	r2, #0
 8017f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8017f90:	f000 fb58 	bl	8018644 <__aeabi_atexit>
CFileHandler g_FileHandler;
 8017f94:	f640 20f0 	movw	r0, #2800	; 0xaf0
 8017f98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017f9c:	f7fd fa94 	bl	80154c8 <_ZN12CFileHandlerC1Ev>
 8017fa0:	f245 5301 	movw	r3, #21761	; 0x5501
 8017fa4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8017fa8:	f640 20f0 	movw	r0, #2800	; 0xaf0
 8017fac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	f240 0200 	movw	r2, #0
 8017fb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8017fba:	f000 fb43 	bl	8018644 <__aeabi_atexit>
	   Typically the user implementation of this callback should reset MEMS peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
		return -1;
	}
} // extern "C"
 8017fbe:	f107 0708 	add.w	r7, r7, #8
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop

08017fc8 <_GLOBAL__sub_I_g_LedTast>:
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	af00      	add	r7, sp, #0
 8017fcc:	f04f 0001 	mov.w	r0, #1
 8017fd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017fd4:	f7ff ff8c 	bl	8017ef0 <_Z41__static_initialization_and_destruction_0ii>
 8017fd8:	bd80      	pop	{r7, pc}
 8017fda:	bf00      	nop

08017fdc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8017fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8017fde:	e003      	b.n	8017fe8 <LoopCopyDataInit>

08017fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8017fe0:	4b0e      	ldr	r3, [pc, #56]	; (801801c <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 8017fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8017fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8017fe6:	3104      	adds	r1, #4

08017fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8017fe8:	480d      	ldr	r0, [pc, #52]	; (8018020 <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 8017fea:	4b0e      	ldr	r3, [pc, #56]	; (8018024 <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 8017fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8017fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8017ff0:	d3f6      	bcc.n	8017fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8017ff2:	4a0d      	ldr	r2, [pc, #52]	; (8018028 <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 8017ff4:	e002      	b.n	8017ffc <LoopFillZerobss>

08017ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8017ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8017ff8:	f842 3b04 	str.w	r3, [r2], #4

08017ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8017ffc:	4b0b      	ldr	r3, [pc, #44]	; (801802c <LoopFillZerobss+0x30>)
  cmp  r2, r3
 8017ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018000:	d3f9      	bcc.n	8017ff6 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8018002:	480b      	ldr	r0, [pc, #44]	; (8018030 <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 8018004:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8018006:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 801800a:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801800c:	f000 f934 	bl	8018278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018010:	f7ee ffbe 	bl	8006f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018014:	f7ff ff24 	bl	8017e60 <main>
  bx  lr    
 8018018:	4770      	bx	lr
 801801a:	0000      	.short	0x0000
 801801c:	0801ec28 	.word	0x0801ec28
 8018020:	20000000 	.word	0x20000000
 8018024:	20000920 	.word	0x20000920
 8018028:	20000920 	.word	0x20000920
 801802c:	200075ec 	.word	0x200075ec
 8018030:	e000ed88 	.word	0xe000ed88

08018034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018034:	e7fe      	b.n	8018034 <ADC_IRQHandler>
	...

08018038 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8018038:	b480      	push	{r7}
 801803a:	af00      	add	r7, sp, #0
}
 801803c:	46bd      	mov	sp, r7
 801803e:	bc80      	pop	{r7}
 8018040:	4770      	bx	lr
 8018042:	bf00      	nop

08018044 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8018044:	b480      	push	{r7}
 8018046:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {}
 8018048:	e7fe      	b.n	8018048 <HardFault_Handler+0x4>
 801804a:	bf00      	nop

0801804c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801804c:	b480      	push	{r7}
 801804e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {}
 8018050:	e7fe      	b.n	8018050 <MemManage_Handler+0x4>
 8018052:	bf00      	nop

08018054 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8018054:	b480      	push	{r7}
 8018056:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {}
 8018058:	e7fe      	b.n	8018058 <BusFault_Handler+0x4>
 801805a:	bf00      	nop

0801805c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801805c:	b480      	push	{r7}
 801805e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {}
 8018060:	e7fe      	b.n	8018060 <UsageFault_Handler+0x4>
 8018062:	bf00      	nop

08018064 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
 8018064:	b480      	push	{r7}
 8018066:	af00      	add	r7, sp, #0
 8018068:	46bd      	mov	sp, r7
 801806a:	bc80      	pop	{r7}
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop

08018070 <SDIO_IRQHandler>:
  * @brief  This function handles SDIO global interrupt request.
  * @param  None
  * @retval None
  */
void SDIO_IRQHandler(void)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	af00      	add	r7, sp, #0
  /* Process All SDIO Interrupt Sources */
  SD_ProcessIRQSrc();
 8018074:	f7ff f882 	bl	801717c <SD_ProcessIRQSrc>
}
 8018078:	bd80      	pop	{r7, pc}
 801807a:	bf00      	nop

0801807c <DMA2_Stream3_IRQHandler>:
  *         requests.
  * @param  None
  * @retval None
  */
void SD_SDIO_DMA_IRQHANDLER(void)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	af00      	add	r7, sp, #0
  /* Process DMA2 Stream3 or DMA2 Stream6 Interrupt Sources */
  SD_ProcessDMAIRQ();
 8018080:	f7ff f904 	bl	801728c <SD_ProcessDMAIRQ>
}
 8018084:	bd80      	pop	{r7, pc}
 8018086:	bf00      	nop

08018088 <_exit>:

size_t   __malloc_margin = 256;
char    *__brkval;

void _exit(int code)
{
 8018088:	b480      	push	{r7}
 801808a:	b083      	sub	sp, #12
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
    for (;;);
 8018090:	e7fe      	b.n	8018090 <_exit+0x8>
 8018092:	bf00      	nop

08018094 <_read_r>:
}


ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
{
 8018094:	b480      	push	{r7}
 8018096:	b085      	sub	sp, #20
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	607a      	str	r2, [r7, #4]
 80180a0:	603b      	str	r3, [r7, #0]
    //return uart_read_r(r, fd, ptr, len);
	/**
	 * printf mapping function
	 */
	return 0;
 80180a2:	f04f 0300 	mov.w	r3, #0
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	f107 0714 	add.w	r7, r7, #20
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bc80      	pop	{r7}
 80180b0:	4770      	bx	lr
 80180b2:	bf00      	nop

080180b4 <_write_r>:


ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 80180b4:	b480      	push	{r7}
 80180b6:	b085      	sub	sp, #20
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	60b9      	str	r1, [r7, #8]
 80180be:	607a      	str	r2, [r7, #4]
 80180c0:	603b      	str	r3, [r7, #0]
    //return uart_write_r(r, fd, ptr, len);
	/**
	 * printf maping function
	 */
	return 0;
 80180c2:	f04f 0300 	mov.w	r3, #0
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	f107 0714 	add.w	r7, r7, #20
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bc80      	pop	{r7}
 80180d0:	4770      	bx	lr
 80180d2:	bf00      	nop

080180d4 <_lseek_r>:


off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
{
 80180d4:	b480      	push	{r7}
 80180d6:	b085      	sub	sp, #20
 80180d8:	af00      	add	r7, sp, #0
 80180da:	60f8      	str	r0, [r7, #12]
 80180dc:	60b9      	str	r1, [r7, #8]
 80180de:	607a      	str	r2, [r7, #4]
 80180e0:	603b      	str	r3, [r7, #0]

    r->_errno = ENOSYS;
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	f04f 0258 	mov.w	r2, #88	; 0x58
 80180e8:	601a      	str	r2, [r3, #0]
    return -1;
 80180ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	f107 0714 	add.w	r7, r7, #20
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bc80      	pop	{r7}
 80180f8:	4770      	bx	lr
 80180fa:	bf00      	nop

080180fc <_close_r>:


int _close_r(struct _reent *r, int fd)
{
 80180fc:	b480      	push	{r7}
 80180fe:	b083      	sub	sp, #12
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
 8018104:	6039      	str	r1, [r7, #0]
    r->_errno = ENOSYS;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f04f 0258 	mov.w	r2, #88	; 0x58
 801810c:	601a      	str	r2, [r3, #0]
    return -1;
 801810e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018112:	4618      	mov	r0, r3
 8018114:	f107 070c 	add.w	r7, r7, #12
 8018118:	46bd      	mov	sp, r7
 801811a:	bc80      	pop	{r7}
 801811c:	4770      	bx	lr
 801811e:	bf00      	nop

08018120 <_fstat_r>:


int _fstat_r(struct _reent *r, int fd, struct stat *st)
{
 8018120:	b480      	push	{r7}
 8018122:	b085      	sub	sp, #20
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	607a      	str	r2, [r7, #4]
    if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	2b00      	cmp	r3, #0
 8018130:	db09      	blt.n	8018146 <_fstat_r+0x26>
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	2b02      	cmp	r3, #2
 8018136:	dc06      	bgt.n	8018146 <_fstat_r+0x26>
      st->st_mode = S_IFCHR;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801813e:	605a      	str	r2, [r3, #4]
      return 0;
 8018140:	f04f 0300 	mov.w	r3, #0
 8018144:	e005      	b.n	8018152 <_fstat_r+0x32>
    }

    r->_errno = ENOSYS;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	f04f 0258 	mov.w	r2, #88	; 0x58
 801814c:	601a      	str	r2, [r3, #0]
    return -1;
 801814e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018152:	4618      	mov	r0, r3
 8018154:	f107 0714 	add.w	r7, r7, #20
 8018158:	46bd      	mov	sp, r7
 801815a:	bc80      	pop	{r7}
 801815c:	4770      	bx	lr
 801815e:	bf00      	nop

08018160 <_isatty_r>:


int _isatty_r(struct _reent *r, int fd)
{
 8018160:	b480      	push	{r7}
 8018162:	b083      	sub	sp, #12
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
 8018168:	6039      	str	r1, [r7, #0]
    return 1;
 801816a:	f04f 0301 	mov.w	r3, #1
}
 801816e:	4618      	mov	r0, r3
 8018170:	f107 070c 	add.w	r7, r7, #12
 8018174:	46bd      	mov	sp, r7
 8018176:	bc80      	pop	{r7}
 8018178:	4770      	bx	lr
 801817a:	bf00      	nop

0801817c <_sbrk_r>:


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 801817c:	b490      	push	{r4, r7}
 801817e:	b084      	sub	sp, #16
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
 8018184:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 8018186:	f247 53e8 	movw	r3, #30184	; 0x75e8
 801818a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d108      	bne.n	80181a6 <_sbrk_r+0x2a>
        __brkval = &end;
 8018194:	f247 53e8 	movw	r3, #30184	; 0x75e8
 8018198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801819c:	f247 52ec 	movw	r2, #30188	; 0x75ec
 80181a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80181a4:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 80181a6:	f247 53e8 	movw	r3, #30184	; 0x75e8
 80181aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80181ae:	681a      	ldr	r2, [r3, #0]
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80181b4:	f3ef 8408 	mrs	r4, MSP
  return(result);
 80181b8:	4623      	mov	r3, r4
 80181ba:	4619      	mov	r1, r3
 80181bc:	f640 1310 	movw	r3, #2320	; 0x910
 80181c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	1acb      	subs	r3, r1, r3
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d906      	bls.n	80181da <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f04f 020c 	mov.w	r2, #12
 80181d2:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 80181d4:	f04f 33ff 	mov.w	r3, #4294967295
 80181d8:	e012      	b.n	8018200 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 80181da:	f247 53e8 	movw	r3, #30184	; 0x75e8
 80181de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 80181e6:	f247 53e8 	movw	r3, #30184	; 0x75e8
 80181ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	18d2      	adds	r2, r2, r3
 80181f4:	f247 53e8 	movw	r3, #30184	; 0x75e8
 80181f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80181fc:	601a      	str	r2, [r3, #0]

    return ret;
 80181fe:	68fb      	ldr	r3, [r7, #12]
}
 8018200:	4618      	mov	r0, r3
 8018202:	f107 0710 	add.w	r7, r7, #16
 8018206:	46bd      	mov	sp, r7
 8018208:	bc90      	pop	{r4, r7}
 801820a:	4770      	bx	lr

0801820c <_kill_r>:


int _kill_r(struct _reent *r, int pid, int signal)
{
 801820c:	b480      	push	{r7}
 801820e:	b085      	sub	sp, #20
 8018210:	af00      	add	r7, sp, #0
 8018212:	60f8      	str	r0, [r7, #12]
 8018214:	60b9      	str	r1, [r7, #8]
 8018216:	607a      	str	r2, [r7, #4]
    r->_errno = ENOSYS;
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	f04f 0258 	mov.w	r2, #88	; 0x58
 801821e:	601a      	str	r2, [r3, #0]
    return -1;
 8018220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018224:	4618      	mov	r0, r3
 8018226:	f107 0714 	add.w	r7, r7, #20
 801822a:	46bd      	mov	sp, r7
 801822c:	bc80      	pop	{r7}
 801822e:	4770      	bx	lr

08018230 <_getpid_r>:


int _getpid_r(struct _reent *r)
{
 8018230:	b480      	push	{r7}
 8018232:	b083      	sub	sp, #12
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
    r->_errno = ENOSYS;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f04f 0258 	mov.w	r2, #88	; 0x58
 801823e:	601a      	str	r2, [r3, #0]
    return -1;
 8018240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018244:	4618      	mov	r0, r3
 8018246:	f107 070c 	add.w	r7, r7, #12
 801824a:	46bd      	mov	sp, r7
 801824c:	bc80      	pop	{r7}
 801824e:	4770      	bx	lr

08018250 <__malloc_lock>:


void __malloc_lock(struct _reent *r)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 8018258:	f7fa f93e 	bl	80124d8 <vPortEnterCritical>
}
 801825c:	f107 0708 	add.w	r7, r7, #8
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b082      	sub	sp, #8
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 801826c:	f7fa f94a 	bl	8012504 <vPortExitCritical>
}
 8018270:	f107 0708 	add.w	r7, r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}

08018278 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801827c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018280:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018284:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018288:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801828c:	6812      	ldr	r2, [r2, #0]
 801828e:	f042 0201 	orr.w	r2, r2, #1
 8018292:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8018294:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018298:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801829c:	f04f 0200 	mov.w	r2, #0
 80182a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80182a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80182a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80182aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80182ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80182b2:	6812      	ldr	r2, [r2, #0]
 80182b4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80182b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80182bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80182be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80182c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80182c6:	f243 0210 	movw	r2, #12304	; 0x3010
 80182ca:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80182ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80182d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80182d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80182d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80182dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80182e0:	6812      	ldr	r2, [r2, #0]
 80182e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80182e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80182e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80182ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80182f0:	f04f 0200 	mov.w	r2, #0
 80182f4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80182f6:	f000 f809 	bl	801830c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80182fa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80182fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8018302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018306:	609a      	str	r2, [r3, #8]
#endif
}
 8018308:	bd80      	pop	{r7, pc}
 801830a:	bf00      	nop

0801830c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 801830c:	b480      	push	{r7}
 801830e:	b083      	sub	sp, #12
 8018310:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8018312:	f04f 0300 	mov.w	r3, #0
 8018316:	607b      	str	r3, [r7, #4]
 8018318:	f04f 0300 	mov.w	r3, #0
 801831c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801831e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018322:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018326:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801832a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801832e:	6812      	ldr	r2, [r2, #0]
 8018330:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018334:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8018336:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801833a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018344:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f103 0301 	add.w	r3, r3, #1
 801834c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d103      	bne.n	801835c <SetSysClock+0x50>
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801835a:	d1ec      	bne.n	8018336 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 801835c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018360:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801836a:	2b00      	cmp	r3, #0
 801836c:	d003      	beq.n	8018376 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 801836e:	f04f 0301 	mov.w	r3, #1
 8018372:	603b      	str	r3, [r7, #0]
 8018374:	e002      	b.n	801837c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8018376:	f04f 0300 	mov.w	r3, #0
 801837a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	2b01      	cmp	r3, #1
 8018380:	f040 8082 	bne.w	8018488 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8018384:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018388:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801838c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018390:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801839a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 801839c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80183a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80183a4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80183a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80183ac:	6812      	ldr	r2, [r2, #0]
 80183ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80183b2:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80183b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80183b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80183bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80183c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80183c4:	6892      	ldr	r2, [r2, #8]
 80183c6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80183c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80183cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80183d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80183d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80183d8:	6892      	ldr	r2, [r2, #8]
 80183da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80183de:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80183e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80183e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80183e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80183ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80183f0:	6892      	ldr	r2, [r2, #8]
 80183f2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80183f6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80183f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80183fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018400:	f245 4208 	movw	r2, #21512	; 0x5408
 8018404:	f2c0 7240 	movt	r2, #1856	; 0x740
 8018408:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 801840a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801840e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018412:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018416:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801841a:	6812      	ldr	r2, [r2, #0]
 801841c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8018420:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8018422:	bf00      	nop
 8018424:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018432:	2b00      	cmp	r3, #0
 8018434:	d0f6      	beq.n	8018424 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8018436:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801843a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801843e:	f240 6205 	movw	r2, #1541	; 0x605
 8018442:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8018444:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801844c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018454:	6892      	ldr	r2, [r2, #8]
 8018456:	f022 0203 	bic.w	r2, r2, #3
 801845a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 801845c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018460:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018464:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018468:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801846c:	6892      	ldr	r2, [r2, #8]
 801846e:	f042 0202 	orr.w	r2, r2, #2
 8018472:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8018474:	bf00      	nop
 8018476:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801847a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801847e:	689b      	ldr	r3, [r3, #8]
 8018480:	f003 030c 	and.w	r3, r3, #12
 8018484:	2b08      	cmp	r3, #8
 8018486:	d1f6      	bne.n	8018476 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8018488:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801848c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8018490:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018494:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8018498:	6892      	ldr	r2, [r2, #8]
 801849a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801849e:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80184a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80184a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184a8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80184ac:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80184b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80184b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80184b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80184c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80184c4:	6812      	ldr	r2, [r2, #0]
 80184c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80184ca:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80184cc:	bf00      	nop
 80184ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80184d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d0f6      	beq.n	80184ce <SetSysClock+0x1c2>
  {
  }
}
 80184e0:	f107 070c 	add.w	r7, r7, #12
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bc80      	pop	{r7}
 80184e8:	4770      	bx	lr
 80184ea:	bf00      	nop

080184ec <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b082      	sub	sp, #8
 80184f0:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 80184f2:	f7f9 fff1 	bl	80124d8 <vPortEnterCritical>

    int t = TIM7->CNT;
 80184f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80184fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80184fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018500:	607b      	str	r3, [r7, #4]
    if (t < t0)
 8018502:	f640 73ac 	movw	r3, #4012	; 0xfac
 8018506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801850a:	881b      	ldrh	r3, [r3, #0]
 801850c:	461a      	mov	r2, r3
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	429a      	cmp	r2, r3
 8018512:	dd03      	ble.n	801851c <get_us_time+0x30>
        t += 0x10000;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801851a:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 801851c:	f640 73ac 	movw	r3, #4012	; 0xfac
 8018520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018524:	881b      	ldrh	r3, [r3, #0]
 8018526:	687a      	ldr	r2, [r7, #4]
 8018528:	1ad1      	subs	r1, r2, r3
 801852a:	460a      	mov	r2, r1
 801852c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8018530:	f640 71b0 	movw	r1, #4016	; 0xfb0
 8018534:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8018538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801853c:	1880      	adds	r0, r0, r2
 801853e:	eb41 0103 	adc.w	r1, r1, r3
 8018542:	f640 73b0 	movw	r3, #4016	; 0xfb0
 8018546:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801854a:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	b29a      	uxth	r2, r3
 8018552:	f640 73ac 	movw	r3, #4012	; 0xfac
 8018556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801855a:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 801855c:	f7f9 ffd2 	bl	8012504 <vPortExitCritical>

    return tickcount;
 8018560:	f640 73b0 	movw	r3, #4016	; 0xfb0
 8018564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018568:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 801856c:	4610      	mov	r0, r2
 801856e:	4619      	mov	r1, r3
 8018570:	f107 0708 	add.w	r7, r7, #8
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}

08018578 <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 8018578:	b480      	push	{r7}
 801857a:	b085      	sub	sp, #20
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
    uint16_t  t0 = TIM7->CNT;
 8018580:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8018584:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801858a:	81fb      	strh	r3, [r7, #14]
    for (;;) {
        int  t = TIM7->CNT;
 801858c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8018590:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018596:	60bb      	str	r3, [r7, #8]
        if (t < t0)
 8018598:	89fa      	ldrh	r2, [r7, #14]
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	429a      	cmp	r2, r3
 801859e:	dd03      	ble.n	80185a8 <delay_us+0x30>
            t += 0x10000;
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80185a6:	60bb      	str	r3, [r7, #8]

        if (us < t - t0)
 80185a8:	89fb      	ldrh	r3, [r7, #14]
 80185aa:	68ba      	ldr	r2, [r7, #8]
 80185ac:	1ad3      	subs	r3, r2, r3
 80185ae:	461a      	mov	r2, r3
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d808      	bhi.n	80185c8 <delay_us+0x50>
            return;

        us -= t - t0;
 80185b6:	89fa      	ldrh	r2, [r7, #14]
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	1ad3      	subs	r3, r2, r3
 80185bc:	687a      	ldr	r2, [r7, #4]
 80185be:	18d3      	adds	r3, r2, r3
 80185c0:	607b      	str	r3, [r7, #4]
        t0  = t;
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	81fb      	strh	r3, [r7, #14]
    }
 80185c6:	e7e1      	b.n	801858c <delay_us+0x14>
        int  t = TIM7->CNT;
        if (t < t0)
            t += 0x10000;

        if (us < t - t0)
            return;
 80185c8:	bf00      	nop

        us -= t - t0;
        t0  = t;
    }
}
 80185ca:	f107 0714 	add.w	r7, r7, #20
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bc80      	pop	{r7}
 80185d2:	4770      	bx	lr

080185d4 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b084      	sub	sp, #16
 80185d8:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 80185da:	463b      	mov	r3, r7
 80185dc:	4618      	mov	r0, r3
 80185de:	f7f6 fb3f 	bl	800ec60 <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 80185e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80185e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80185ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80185ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80185f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80185f4:	f042 0220 	orr.w	r2, r2, #32
 80185f8:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 80185fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80185fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018602:	68f9      	ldr	r1, [r7, #12]
 8018604:	f64d 6283 	movw	r2, #56963	; 0xde83
 8018608:	f2c4 321b 	movt	r2, #17179	; 0x431b
 801860c:	fba2 0201 	umull	r0, r2, r2, r1
 8018610:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8018614:	b292      	uxth	r2, r2
 8018616:	f102 32ff 	add.w	r2, r2, #4294967295
 801861a:	b292      	uxth	r2, r2
 801861c:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 801861e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8018622:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801862a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 801862c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8018630:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018634:	f04f 0201 	mov.w	r2, #1
 8018638:	801a      	strh	r2, [r3, #0]
}
 801863a:	f107 0710 	add.w	r7, r7, #16
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}
 8018642:	bf00      	nop

08018644 <__aeabi_atexit>:
 8018644:	4603      	mov	r3, r0
 8018646:	4608      	mov	r0, r1
 8018648:	4619      	mov	r1, r3
 801864a:	f7ee ba37 	b.w	8006abc <__cxa_atexit>
 801864e:	bf00      	nop

08018650 <_ZdlPv>:
 8018650:	b108      	cbz	r0, 8018656 <_ZdlPv+0x6>
 8018652:	f7ee bcc9 	b.w	8006fe8 <free>
 8018656:	4770      	bx	lr

08018658 <__cxa_pure_virtual>:
 8018658:	f24e 4120 	movw	r1, #58400	; 0xe420
 801865c:	221b      	movs	r2, #27
 801865e:	b508      	push	{r3, lr}
 8018660:	f6c0 0101 	movt	r1, #2049	; 0x801
 8018664:	2002      	movs	r0, #2
 8018666:	f7f0 ffdb 	bl	8009620 <write>
 801866a:	f000 f815 	bl	8018698 <_ZSt9terminatev>
 801866e:	bf00      	nop

08018670 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018670:	b508      	push	{r3, lr}
 8018672:	4780      	blx	r0
 8018674:	f7ee f9f6 	bl	8006a64 <abort>
 8018678:	f000 fa5a 	bl	8018b30 <__cxa_begin_catch>
 801867c:	f7ee f9f2 	bl	8006a64 <abort>
 8018680:	460c      	mov	r4, r1
 8018682:	4605      	mov	r5, r0
 8018684:	f000 fa98 	bl	8018bb8 <__cxa_end_catch>
 8018688:	3401      	adds	r4, #1
 801868a:	d001      	beq.n	8018690 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 801868c:	f000 f8a6 	bl	80187dc <__cxa_end_cleanup>
 8018690:	4628      	mov	r0, r5
 8018692:	f000 f9bf 	bl	8018a14 <__cxa_call_unexpected>
 8018696:	bf00      	nop

08018698 <_ZSt9terminatev>:
 8018698:	b508      	push	{r3, lr}
 801869a:	f640 1318 	movw	r3, #2328	; 0x918
 801869e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80186a2:	6818      	ldr	r0, [r3, #0]
 80186a4:	f7ff ffe4 	bl	8018670 <_ZN10__cxxabiv111__terminateEPFvvE>

080186a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80186a8:	b508      	push	{r3, lr}
 80186aa:	4780      	blx	r0
 80186ac:	f7ff fff4 	bl	8018698 <_ZSt9terminatev>

080186b0 <_ZSt10unexpectedv>:
 80186b0:	b508      	push	{r3, lr}
 80186b2:	f640 131c 	movw	r3, #2332	; 0x91c
 80186b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4798      	blx	r3
 80186be:	f7ff ffeb 	bl	8018698 <_ZSt9terminatev>
 80186c2:	bf00      	nop

080186c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80186c4:	4b3e      	ldr	r3, [pc, #248]	; (80187c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 80186c6:	b570      	push	{r4, r5, r6, lr}
 80186c8:	b082      	sub	sp, #8
 80186ca:	781a      	ldrb	r2, [r3, #0]
 80186cc:	2a00      	cmp	r2, #0
 80186ce:	d135      	bne.n	801873c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 80186d0:	2401      	movs	r4, #1
 80186d2:	701c      	strb	r4, [r3, #0]
 80186d4:	f000 fe48 	bl	8019368 <__cxa_current_exception_type>
 80186d8:	2800      	cmp	r0, #0
 80186da:	d047      	beq.n	801876c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa8>
 80186dc:	6845      	ldr	r5, [r0, #4]
 80186de:	f04f 36ff 	mov.w	r6, #4294967295
 80186e2:	782b      	ldrb	r3, [r5, #0]
 80186e4:	2b2a      	cmp	r3, #42	; 0x2a
 80186e6:	ab02      	add	r3, sp, #8
 80186e8:	bf08      	it	eq
 80186ea:	192d      	addeq	r5, r5, r4
 80186ec:	2100      	movs	r1, #0
 80186ee:	460a      	mov	r2, r1
 80186f0:	f843 6d04 	str.w	r6, [r3, #-4]!
 80186f4:	4628      	mov	r0, r5
 80186f6:	4c33      	ldr	r4, [pc, #204]	; (80187c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 80186f8:	f7ed f954 	bl	80059a4 <__cxa_demangle>
 80186fc:	2101      	movs	r1, #1
 80186fe:	2230      	movs	r2, #48	; 0x30
 8018700:	6823      	ldr	r3, [r4, #0]
 8018702:	68db      	ldr	r3, [r3, #12]
 8018704:	4606      	mov	r6, r0
 8018706:	4830      	ldr	r0, [pc, #192]	; (80187c8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8018708:	f7ee fc2e 	bl	8006f68 <fwrite>
 801870c:	9b01      	ldr	r3, [sp, #4]
 801870e:	b17b      	cbz	r3, 8018730 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8018710:	6823      	ldr	r3, [r4, #0]
 8018712:	4628      	mov	r0, r5
 8018714:	68d9      	ldr	r1, [r3, #12]
 8018716:	f7ee fa4f 	bl	8006bb8 <fputs>
 801871a:	6823      	ldr	r3, [r4, #0]
 801871c:	2101      	movs	r1, #1
 801871e:	482b      	ldr	r0, [pc, #172]	; (80187cc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8018720:	2202      	movs	r2, #2
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	f7ee fc20 	bl	8006f68 <fwrite>
 8018728:	9b01      	ldr	r3, [sp, #4]
 801872a:	b18b      	cbz	r3, 8018750 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 801872c:	f000 fde4 	bl	80192f8 <__cxa_rethrow>
 8018730:	6823      	ldr	r3, [r4, #0]
 8018732:	4630      	mov	r0, r6
 8018734:	68d9      	ldr	r1, [r3, #12]
 8018736:	f7ee fa3f 	bl	8006bb8 <fputs>
 801873a:	e7ee      	b.n	801871a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 801873c:	4b21      	ldr	r3, [pc, #132]	; (80187c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801873e:	2101      	movs	r1, #1
 8018740:	221d      	movs	r2, #29
 8018742:	4823      	ldr	r0, [pc, #140]	; (80187d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	68db      	ldr	r3, [r3, #12]
 8018748:	f7ee fc0e 	bl	8006f68 <fwrite>
 801874c:	f7ee f98a 	bl	8006a64 <abort>
 8018750:	4630      	mov	r0, r6
 8018752:	f7ee fc49 	bl	8006fe8 <free>
 8018756:	f000 fdcf 	bl	80192f8 <__cxa_rethrow>
 801875a:	2901      	cmp	r1, #1
 801875c:	460e      	mov	r6, r1
 801875e:	d00f      	beq.n	8018780 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
 8018760:	f000 f9e6 	bl	8018b30 <__cxa_begin_catch>
 8018764:	f000 fa28 	bl	8018bb8 <__cxa_end_catch>
 8018768:	f7ee f97c 	bl	8006a64 <abort>
 801876c:	4b15      	ldr	r3, [pc, #84]	; (80187c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801876e:	4621      	mov	r1, r4
 8018770:	222d      	movs	r2, #45	; 0x2d
 8018772:	4818      	ldr	r0, [pc, #96]	; (80187d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	f7ee fbf6 	bl	8006f68 <fwrite>
 801877c:	f7ee f972 	bl	8006a64 <abort>
 8018780:	f000 f9d6 	bl	8018b30 <__cxa_begin_catch>
 8018784:	4603      	mov	r3, r0
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	689b      	ldr	r3, [r3, #8]
 801878a:	4798      	blx	r3
 801878c:	6823      	ldr	r3, [r4, #0]
 801878e:	4631      	mov	r1, r6
 8018790:	220b      	movs	r2, #11
 8018792:	68db      	ldr	r3, [r3, #12]
 8018794:	4605      	mov	r5, r0
 8018796:	4810      	ldr	r0, [pc, #64]	; (80187d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
 8018798:	f7ee fbe6 	bl	8006f68 <fwrite>
 801879c:	6823      	ldr	r3, [r4, #0]
 801879e:	4628      	mov	r0, r5
 80187a0:	68d9      	ldr	r1, [r3, #12]
 80187a2:	f7ee fa09 	bl	8006bb8 <fputs>
 80187a6:	6823      	ldr	r3, [r4, #0]
 80187a8:	200a      	movs	r0, #10
 80187aa:	68d9      	ldr	r1, [r3, #12]
 80187ac:	f7ee f9c8 	bl	8006b40 <fputc>
 80187b0:	f000 fa02 	bl	8018bb8 <__cxa_end_catch>
 80187b4:	e7d8      	b.n	8018768 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 80187b6:	f000 f9ff 	bl	8018bb8 <__cxa_end_catch>
 80187ba:	f000 f80f 	bl	80187dc <__cxa_end_cleanup>
 80187be:	bf00      	nop
 80187c0:	20000fb8 	.word	0x20000fb8
 80187c4:	20000008 	.word	0x20000008
 80187c8:	0801e45c 	.word	0x0801e45c
 80187cc:	0801e490 	.word	0x0801e490
 80187d0:	0801e43c 	.word	0x0801e43c
 80187d4:	0801e494 	.word	0x0801e494
 80187d8:	0801e4c4 	.word	0x0801e4c4

080187dc <__cxa_end_cleanup>:
 80187dc:	b41e      	push	{r1, r2, r3, r4}
 80187de:	f000 f8a9 	bl	8018934 <__gnu_end_cleanup>
 80187e2:	bc1e      	pop	{r1, r2, r3, r4}
 80187e4:	f7ed ff0c 	bl	8006600 <_Unwind_Resume>

080187e8 <__cxa_type_match>:
 80187e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ea:	461e      	mov	r6, r3
 80187ec:	7803      	ldrb	r3, [r0, #0]
 80187ee:	b083      	sub	sp, #12
 80187f0:	460d      	mov	r5, r1
 80187f2:	2b47      	cmp	r3, #71	; 0x47
 80187f4:	d02c      	beq.n	8018850 <__cxa_type_match+0x68>
 80187f6:	4c31      	ldr	r4, [pc, #196]	; (80188bc <__cxa_type_match+0xd4>)
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	4620      	mov	r0, r4
 80187fc:	6832      	ldr	r2, [r6, #0]
 80187fe:	689b      	ldr	r3, [r3, #8]
 8018800:	9201      	str	r2, [sp, #4]
 8018802:	4798      	blx	r3
 8018804:	b110      	cbz	r0, 801880c <__cxa_type_match+0x24>
 8018806:	9b01      	ldr	r3, [sp, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	9301      	str	r3, [sp, #4]
 801880c:	682f      	ldr	r7, [r5, #0]
 801880e:	4628      	mov	r0, r5
 8018810:	4621      	mov	r1, r4
 8018812:	aa01      	add	r2, sp, #4
 8018814:	2301      	movs	r3, #1
 8018816:	693f      	ldr	r7, [r7, #16]
 8018818:	47b8      	blx	r7
 801881a:	b1b8      	cbz	r0, 801884c <__cxa_type_match+0x64>
 801881c:	9b01      	ldr	r3, [sp, #4]
 801881e:	4a28      	ldr	r2, [pc, #160]	; (80188c0 <__cxa_type_match+0xd8>)
 8018820:	6033      	str	r3, [r6, #0]
 8018822:	6812      	ldr	r2, [r2, #0]
 8018824:	682b      	ldr	r3, [r5, #0]
 8018826:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801882a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801882e:	f000 fea1 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 8018832:	b150      	cbz	r0, 801884a <__cxa_type_match+0x62>
 8018834:	68eb      	ldr	r3, [r5, #12]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d03e      	beq.n	80188b8 <__cxa_type_match+0xd0>
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	4921      	ldr	r1, [pc, #132]	; (80188c4 <__cxa_type_match+0xdc>)
 801883e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018842:	f000 fe97 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 8018846:	2800      	cmp	r0, #0
 8018848:	d022      	beq.n	8018890 <__cxa_type_match+0xa8>
 801884a:	2001      	movs	r0, #1
 801884c:	b003      	add	sp, #12
 801884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018850:	7843      	ldrb	r3, [r0, #1]
 8018852:	2b4e      	cmp	r3, #78	; 0x4e
 8018854:	d1cf      	bne.n	80187f6 <__cxa_type_match+0xe>
 8018856:	7883      	ldrb	r3, [r0, #2]
 8018858:	2b55      	cmp	r3, #85	; 0x55
 801885a:	d1cc      	bne.n	80187f6 <__cxa_type_match+0xe>
 801885c:	78c3      	ldrb	r3, [r0, #3]
 801885e:	2b43      	cmp	r3, #67	; 0x43
 8018860:	d1c9      	bne.n	80187f6 <__cxa_type_match+0xe>
 8018862:	7903      	ldrb	r3, [r0, #4]
 8018864:	2b46      	cmp	r3, #70	; 0x46
 8018866:	d01c      	beq.n	80188a2 <__cxa_type_match+0xba>
 8018868:	7903      	ldrb	r3, [r0, #4]
 801886a:	2b43      	cmp	r3, #67	; 0x43
 801886c:	d1c3      	bne.n	80187f6 <__cxa_type_match+0xe>
 801886e:	7943      	ldrb	r3, [r0, #5]
 8018870:	2b2b      	cmp	r3, #43	; 0x2b
 8018872:	d1c0      	bne.n	80187f6 <__cxa_type_match+0xe>
 8018874:	7983      	ldrb	r3, [r0, #6]
 8018876:	2b2b      	cmp	r3, #43	; 0x2b
 8018878:	d1bd      	bne.n	80187f6 <__cxa_type_match+0xe>
 801887a:	79c3      	ldrb	r3, [r0, #7]
 801887c:	2b01      	cmp	r3, #1
 801887e:	d8ba      	bhi.n	80187f6 <__cxa_type_match+0xe>
 8018880:	bf0a      	itet	eq
 8018882:	f850 3c20 	ldreq.w	r3, [r0, #-32]
 8018886:	f850 4c20 	ldrne.w	r4, [r0, #-32]
 801888a:	f853 4c78 	ldreq.w	r4, [r3, #-120]
 801888e:	e7b3      	b.n	80187f8 <__cxa_type_match+0x10>
 8018890:	68e8      	ldr	r0, [r5, #12]
 8018892:	68e1      	ldr	r1, [r4, #12]
 8018894:	f000 fe6e 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 8018898:	2800      	cmp	r0, #0
 801889a:	bf0c      	ite	eq
 801889c:	2002      	moveq	r0, #2
 801889e:	2001      	movne	r0, #1
 80188a0:	e7d4      	b.n	801884c <__cxa_type_match+0x64>
 80188a2:	7943      	ldrb	r3, [r0, #5]
 80188a4:	2b4f      	cmp	r3, #79	; 0x4f
 80188a6:	d1df      	bne.n	8018868 <__cxa_type_match+0x80>
 80188a8:	7983      	ldrb	r3, [r0, #6]
 80188aa:	2b52      	cmp	r3, #82	; 0x52
 80188ac:	d1dc      	bne.n	8018868 <__cxa_type_match+0x80>
 80188ae:	79c3      	ldrb	r3, [r0, #7]
 80188b0:	4c05      	ldr	r4, [pc, #20]	; (80188c8 <__cxa_type_match+0xe0>)
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d0a0      	beq.n	80187f8 <__cxa_type_match+0x10>
 80188b6:	e7d7      	b.n	8018868 <__cxa_type_match+0x80>
 80188b8:	f000 f876 	bl	80189a8 <__cxa_bad_typeid>
 80188bc:	0801e554 	.word	0x0801e554
 80188c0:	0801e5b4 	.word	0x0801e5b4
 80188c4:	0801e5c4 	.word	0x0801e5c4
 80188c8:	0801e4e8 	.word	0x0801e4e8

080188cc <__cxa_begin_cleanup>:
 80188cc:	b510      	push	{r4, lr}
 80188ce:	4604      	mov	r4, r0
 80188d0:	f000 f9ec 	bl	8018cac <__cxa_get_globals>
 80188d4:	f1a4 0220 	sub.w	r2, r4, #32
 80188d8:	7823      	ldrb	r3, [r4, #0]
 80188da:	2b47      	cmp	r3, #71	; 0x47
 80188dc:	d005      	beq.n	80188ea <__cxa_begin_cleanup+0x1e>
 80188de:	6883      	ldr	r3, [r0, #8]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d124      	bne.n	801892e <__cxa_begin_cleanup+0x62>
 80188e4:	6082      	str	r2, [r0, #8]
 80188e6:	2001      	movs	r0, #1
 80188e8:	bd10      	pop	{r4, pc}
 80188ea:	7863      	ldrb	r3, [r4, #1]
 80188ec:	2b4e      	cmp	r3, #78	; 0x4e
 80188ee:	d1f6      	bne.n	80188de <__cxa_begin_cleanup+0x12>
 80188f0:	78a3      	ldrb	r3, [r4, #2]
 80188f2:	2b55      	cmp	r3, #85	; 0x55
 80188f4:	d1f3      	bne.n	80188de <__cxa_begin_cleanup+0x12>
 80188f6:	78e3      	ldrb	r3, [r4, #3]
 80188f8:	2b43      	cmp	r3, #67	; 0x43
 80188fa:	d1f0      	bne.n	80188de <__cxa_begin_cleanup+0x12>
 80188fc:	7923      	ldrb	r3, [r4, #4]
 80188fe:	2b43      	cmp	r3, #67	; 0x43
 8018900:	d1ed      	bne.n	80188de <__cxa_begin_cleanup+0x12>
 8018902:	7963      	ldrb	r3, [r4, #5]
 8018904:	2b2b      	cmp	r3, #43	; 0x2b
 8018906:	d1ea      	bne.n	80188de <__cxa_begin_cleanup+0x12>
 8018908:	79a3      	ldrb	r3, [r4, #6]
 801890a:	2b2b      	cmp	r3, #43	; 0x2b
 801890c:	d1e7      	bne.n	80188de <__cxa_begin_cleanup+0x12>
 801890e:	79e3      	ldrb	r3, [r4, #7]
 8018910:	2b01      	cmp	r3, #1
 8018912:	d8e4      	bhi.n	80188de <__cxa_begin_cleanup+0x12>
 8018914:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018918:	3301      	adds	r3, #1
 801891a:	f844 3c04 	str.w	r3, [r4, #-4]
 801891e:	2b01      	cmp	r3, #1
 8018920:	d1e1      	bne.n	80188e6 <__cxa_begin_cleanup+0x1a>
 8018922:	6883      	ldr	r3, [r0, #8]
 8018924:	f844 3c08 	str.w	r3, [r4, #-8]
 8018928:	6082      	str	r2, [r0, #8]
 801892a:	2001      	movs	r0, #1
 801892c:	bd10      	pop	{r4, pc}
 801892e:	f7ff feb3 	bl	8018698 <_ZSt9terminatev>
 8018932:	bf00      	nop

08018934 <__gnu_end_cleanup>:
 8018934:	b508      	push	{r3, lr}
 8018936:	f000 f9b9 	bl	8018cac <__cxa_get_globals>
 801893a:	6883      	ldr	r3, [r0, #8]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d030      	beq.n	80189a2 <__gnu_end_cleanup+0x6e>
 8018940:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018944:	2a47      	cmp	r2, #71	; 0x47
 8018946:	d004      	beq.n	8018952 <__gnu_end_cleanup+0x1e>
 8018948:	2200      	movs	r2, #0
 801894a:	6082      	str	r2, [r0, #8]
 801894c:	f103 0020 	add.w	r0, r3, #32
 8018950:	bd08      	pop	{r3, pc}
 8018952:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8018956:	2a4e      	cmp	r2, #78	; 0x4e
 8018958:	d1f6      	bne.n	8018948 <__gnu_end_cleanup+0x14>
 801895a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801895e:	2a55      	cmp	r2, #85	; 0x55
 8018960:	d1f2      	bne.n	8018948 <__gnu_end_cleanup+0x14>
 8018962:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018966:	2a43      	cmp	r2, #67	; 0x43
 8018968:	d1ee      	bne.n	8018948 <__gnu_end_cleanup+0x14>
 801896a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801896e:	2a43      	cmp	r2, #67	; 0x43
 8018970:	d1ea      	bne.n	8018948 <__gnu_end_cleanup+0x14>
 8018972:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8018976:	2a2b      	cmp	r2, #43	; 0x2b
 8018978:	d1e6      	bne.n	8018948 <__gnu_end_cleanup+0x14>
 801897a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801897e:	2a2b      	cmp	r2, #43	; 0x2b
 8018980:	d1e2      	bne.n	8018948 <__gnu_end_cleanup+0x14>
 8018982:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8018986:	2a01      	cmp	r2, #1
 8018988:	d8de      	bhi.n	8018948 <__gnu_end_cleanup+0x14>
 801898a:	69da      	ldr	r2, [r3, #28]
 801898c:	3a01      	subs	r2, #1
 801898e:	61da      	str	r2, [r3, #28]
 8018990:	2a00      	cmp	r2, #0
 8018992:	d1db      	bne.n	801894c <__gnu_end_cleanup+0x18>
 8018994:	699a      	ldr	r2, [r3, #24]
 8018996:	6082      	str	r2, [r0, #8]
 8018998:	2200      	movs	r2, #0
 801899a:	f103 0020 	add.w	r0, r3, #32
 801899e:	619a      	str	r2, [r3, #24]
 80189a0:	bd08      	pop	{r3, pc}
 80189a2:	f7ff fe79 	bl	8018698 <_ZSt9terminatev>
 80189a6:	bf00      	nop

080189a8 <__cxa_bad_typeid>:
 80189a8:	b508      	push	{r3, lr}
 80189aa:	2004      	movs	r0, #4
 80189ac:	f000 fe98 	bl	80196e0 <__cxa_allocate_exception>
 80189b0:	4b05      	ldr	r3, [pc, #20]	; (80189c8 <__cxa_bad_typeid+0x20>)
 80189b2:	f24e 7138 	movw	r1, #59192	; 0xe738
 80189b6:	f249 52bd 	movw	r2, #38333	; 0x95bd
 80189ba:	f6c0 0101 	movt	r1, #2049	; 0x801
 80189be:	f6c0 0201 	movt	r2, #2049	; 0x801
 80189c2:	6003      	str	r3, [r0, #0]
 80189c4:	f000 fc5c 	bl	8019280 <__cxa_throw>
 80189c8:	0801e728 	.word	0x0801e728

080189cc <__cxa_call_terminate>:
 80189cc:	b510      	push	{r4, lr}
 80189ce:	4604      	mov	r4, r0
 80189d0:	b120      	cbz	r0, 80189dc <__cxa_call_terminate+0x10>
 80189d2:	f000 f8ad 	bl	8018b30 <__cxa_begin_catch>
 80189d6:	7823      	ldrb	r3, [r4, #0]
 80189d8:	2b47      	cmp	r3, #71	; 0x47
 80189da:	d001      	beq.n	80189e0 <__cxa_call_terminate+0x14>
 80189dc:	f7ff fe5c 	bl	8018698 <_ZSt9terminatev>
 80189e0:	7863      	ldrb	r3, [r4, #1]
 80189e2:	2b4e      	cmp	r3, #78	; 0x4e
 80189e4:	d1fa      	bne.n	80189dc <__cxa_call_terminate+0x10>
 80189e6:	78a3      	ldrb	r3, [r4, #2]
 80189e8:	2b55      	cmp	r3, #85	; 0x55
 80189ea:	d1f7      	bne.n	80189dc <__cxa_call_terminate+0x10>
 80189ec:	78e3      	ldrb	r3, [r4, #3]
 80189ee:	2b43      	cmp	r3, #67	; 0x43
 80189f0:	d1f4      	bne.n	80189dc <__cxa_call_terminate+0x10>
 80189f2:	7923      	ldrb	r3, [r4, #4]
 80189f4:	2b43      	cmp	r3, #67	; 0x43
 80189f6:	d1f1      	bne.n	80189dc <__cxa_call_terminate+0x10>
 80189f8:	7963      	ldrb	r3, [r4, #5]
 80189fa:	2b2b      	cmp	r3, #43	; 0x2b
 80189fc:	d1ee      	bne.n	80189dc <__cxa_call_terminate+0x10>
 80189fe:	79a3      	ldrb	r3, [r4, #6]
 8018a00:	2b2b      	cmp	r3, #43	; 0x2b
 8018a02:	d1eb      	bne.n	80189dc <__cxa_call_terminate+0x10>
 8018a04:	79e3      	ldrb	r3, [r4, #7]
 8018a06:	2b01      	cmp	r3, #1
 8018a08:	d8e8      	bhi.n	80189dc <__cxa_call_terminate+0x10>
 8018a0a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8018a0e:	f7ff fe2f 	bl	8018670 <_ZN10__cxxabiv111__terminateEPFvvE>
 8018a12:	bf00      	nop

08018a14 <__cxa_call_unexpected>:
 8018a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a18:	b085      	sub	sp, #20
 8018a1a:	7803      	ldrb	r3, [r0, #0]
 8018a1c:	2b47      	cmp	r3, #71	; 0x47
 8018a1e:	d010      	beq.n	8018a42 <__cxa_call_unexpected+0x2e>
 8018a20:	2400      	movs	r4, #0
 8018a22:	f04f 0801 	mov.w	r8, #1
 8018a26:	46a1      	mov	r9, r4
 8018a28:	4625      	mov	r5, r4
 8018a2a:	4626      	mov	r6, r4
 8018a2c:	4627      	mov	r7, r4
 8018a2e:	f000 f87f 	bl	8018b30 <__cxa_begin_catch>
 8018a32:	f1b8 0f00 	cmp.w	r8, #0
 8018a36:	d001      	beq.n	8018a3c <__cxa_call_unexpected+0x28>
 8018a38:	f7ff fe3a 	bl	80186b0 <_ZSt10unexpectedv>
 8018a3c:	4648      	mov	r0, r9
 8018a3e:	f7ff fe33 	bl	80186a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8018a42:	7843      	ldrb	r3, [r0, #1]
 8018a44:	2b4e      	cmp	r3, #78	; 0x4e
 8018a46:	d1eb      	bne.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a48:	7883      	ldrb	r3, [r0, #2]
 8018a4a:	2b55      	cmp	r3, #85	; 0x55
 8018a4c:	d1e8      	bne.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a4e:	78c3      	ldrb	r3, [r0, #3]
 8018a50:	2b43      	cmp	r3, #67	; 0x43
 8018a52:	d1e5      	bne.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a54:	7903      	ldrb	r3, [r0, #4]
 8018a56:	2b43      	cmp	r3, #67	; 0x43
 8018a58:	d1e2      	bne.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a5a:	7943      	ldrb	r3, [r0, #5]
 8018a5c:	2b2b      	cmp	r3, #43	; 0x2b
 8018a5e:	d1df      	bne.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a60:	7983      	ldrb	r3, [r0, #6]
 8018a62:	2b2b      	cmp	r3, #43	; 0x2b
 8018a64:	d1dc      	bne.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a66:	79c3      	ldrb	r3, [r0, #7]
 8018a68:	2b01      	cmp	r3, #1
 8018a6a:	d8d9      	bhi.n	8018a20 <__cxa_call_unexpected+0xc>
 8018a6c:	f850 9c18 	ldr.w	r9, [r0, #-24]
 8018a70:	f04f 0800 	mov.w	r8, #0
 8018a74:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8018a78:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8018a7a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8018a7c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8018a7e:	e7d6      	b.n	8018a2e <__cxa_call_unexpected+0x1a>
 8018a80:	f000 f856 	bl	8018b30 <__cxa_begin_catch>
 8018a84:	f000 f90c 	bl	8018ca0 <__cxa_get_globals_fast>
 8018a88:	6803      	ldr	r3, [r0, #0]
 8018a8a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8018a8e:	2a01      	cmp	r2, #1
 8018a90:	bf18      	it	ne
 8018a92:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 8018a96:	d100      	bne.n	8018a9a <__cxa_call_unexpected+0x86>
 8018a98:	681a      	ldr	r2, [r3, #0]
 8018a9a:	f04f 0900 	mov.w	r9, #0
 8018a9e:	f10d 0a10 	add.w	sl, sp, #16
 8018aa2:	46a8      	mov	r8, r5
 8018aa4:	46cb      	mov	fp, r9
 8018aa6:	f026 0603 	bic.w	r6, r6, #3
 8018aaa:	3320      	adds	r3, #32
 8018aac:	9600      	str	r6, [sp, #0]
 8018aae:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8018ab2:	9301      	str	r3, [sp, #4]
 8018ab4:	455f      	cmp	r7, fp
 8018ab6:	dd1e      	ble.n	8018af6 <__cxa_call_unexpected+0xe2>
 8018ab8:	f8d8 5000 	ldr.w	r5, [r8]
 8018abc:	b105      	cbz	r5, 8018ac0 <__cxa_call_unexpected+0xac>
 8018abe:	4445      	add	r5, r8
 8018ac0:	9801      	ldr	r0, [sp, #4]
 8018ac2:	4629      	mov	r1, r5
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	4653      	mov	r3, sl
 8018ac8:	f7ff fe8e 	bl	80187e8 <__cxa_type_match>
 8018acc:	4602      	mov	r2, r0
 8018ace:	b9f0      	cbnz	r0, 8018b0e <__cxa_call_unexpected+0xfa>
 8018ad0:	682b      	ldr	r3, [r5, #0]
 8018ad2:	4628      	mov	r0, r5
 8018ad4:	4913      	ldr	r1, [pc, #76]	; (8018b24 <__cxa_call_unexpected+0x110>)
 8018ad6:	691e      	ldr	r6, [r3, #16]
 8018ad8:	2301      	movs	r3, #1
 8018ada:	47b0      	blx	r6
 8018adc:	9b00      	ldr	r3, [sp, #0]
 8018ade:	f10b 0b01 	add.w	fp, fp, #1
 8018ae2:	2800      	cmp	r0, #0
 8018ae4:	bf18      	it	ne
 8018ae6:	f04f 0901 	movne.w	r9, #1
 8018aea:	4498      	add	r8, r3
 8018aec:	e7e2      	b.n	8018ab4 <__cxa_call_unexpected+0xa0>
 8018aee:	f000 f81f 	bl	8018b30 <__cxa_begin_catch>
 8018af2:	f7ff fdd1 	bl	8018698 <_ZSt9terminatev>
 8018af6:	f1b9 0f00 	cmp.w	r9, #0
 8018afa:	d010      	beq.n	8018b1e <__cxa_call_unexpected+0x10a>
 8018afc:	2004      	movs	r0, #4
 8018afe:	f000 fdef 	bl	80196e0 <__cxa_allocate_exception>
 8018b02:	4b09      	ldr	r3, [pc, #36]	; (8018b28 <__cxa_call_unexpected+0x114>)
 8018b04:	4907      	ldr	r1, [pc, #28]	; (8018b24 <__cxa_call_unexpected+0x110>)
 8018b06:	4a09      	ldr	r2, [pc, #36]	; (8018b2c <__cxa_call_unexpected+0x118>)
 8018b08:	6003      	str	r3, [r0, #0]
 8018b0a:	f000 fbb9 	bl	8019280 <__cxa_throw>
 8018b0e:	f000 fbf3 	bl	80192f8 <__cxa_rethrow>
 8018b12:	f000 f851 	bl	8018bb8 <__cxa_end_catch>
 8018b16:	f000 f84f 	bl	8018bb8 <__cxa_end_catch>
 8018b1a:	f7ff fe5f 	bl	80187dc <__cxa_end_cleanup>
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f7ff fda6 	bl	8018670 <_ZN10__cxxabiv111__terminateEPFvvE>
 8018b24:	0801e5a8 	.word	0x0801e5a8
 8018b28:	0801e568 	.word	0x0801e568
 8018b2c:	08018c55 	.word	0x08018c55

08018b30 <__cxa_begin_catch>:
 8018b30:	b538      	push	{r3, r4, r5, lr}
 8018b32:	4605      	mov	r5, r0
 8018b34:	f000 f8ba 	bl	8018cac <__cxa_get_globals>
 8018b38:	f1a5 0320 	sub.w	r3, r5, #32
 8018b3c:	782a      	ldrb	r2, [r5, #0]
 8018b3e:	2a47      	cmp	r2, #71	; 0x47
 8018b40:	6804      	ldr	r4, [r0, #0]
 8018b42:	d004      	beq.n	8018b4e <__cxa_begin_catch+0x1e>
 8018b44:	2c00      	cmp	r4, #0
 8018b46:	d12f      	bne.n	8018ba8 <__cxa_begin_catch+0x78>
 8018b48:	6003      	str	r3, [r0, #0]
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	bd38      	pop	{r3, r4, r5, pc}
 8018b4e:	786a      	ldrb	r2, [r5, #1]
 8018b50:	2a4e      	cmp	r2, #78	; 0x4e
 8018b52:	d1f7      	bne.n	8018b44 <__cxa_begin_catch+0x14>
 8018b54:	78aa      	ldrb	r2, [r5, #2]
 8018b56:	2a55      	cmp	r2, #85	; 0x55
 8018b58:	d1f4      	bne.n	8018b44 <__cxa_begin_catch+0x14>
 8018b5a:	78ea      	ldrb	r2, [r5, #3]
 8018b5c:	2a43      	cmp	r2, #67	; 0x43
 8018b5e:	d1f1      	bne.n	8018b44 <__cxa_begin_catch+0x14>
 8018b60:	792a      	ldrb	r2, [r5, #4]
 8018b62:	2a43      	cmp	r2, #67	; 0x43
 8018b64:	d1ee      	bne.n	8018b44 <__cxa_begin_catch+0x14>
 8018b66:	796a      	ldrb	r2, [r5, #5]
 8018b68:	2a2b      	cmp	r2, #43	; 0x2b
 8018b6a:	d1eb      	bne.n	8018b44 <__cxa_begin_catch+0x14>
 8018b6c:	79aa      	ldrb	r2, [r5, #6]
 8018b6e:	2a2b      	cmp	r2, #43	; 0x2b
 8018b70:	d1e8      	bne.n	8018b44 <__cxa_begin_catch+0x14>
 8018b72:	79ea      	ldrb	r2, [r5, #7]
 8018b74:	2a01      	cmp	r2, #1
 8018b76:	d8e5      	bhi.n	8018b44 <__cxa_begin_catch+0x14>
 8018b78:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8018b7c:	2900      	cmp	r1, #0
 8018b7e:	db10      	blt.n	8018ba2 <__cxa_begin_catch+0x72>
 8018b80:	3101      	adds	r1, #1
 8018b82:	6842      	ldr	r2, [r0, #4]
 8018b84:	f845 1c0c 	str.w	r1, [r5, #-12]
 8018b88:	3a01      	subs	r2, #1
 8018b8a:	42a3      	cmp	r3, r4
 8018b8c:	6042      	str	r2, [r0, #4]
 8018b8e:	bf1c      	itt	ne
 8018b90:	f845 4c10 	strne.w	r4, [r5, #-16]
 8018b94:	6003      	strne	r3, [r0, #0]
 8018b96:	4628      	mov	r0, r5
 8018b98:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8018b9a:	f7ed fc59 	bl	8006450 <_Unwind_Complete>
 8018b9e:	4620      	mov	r0, r4
 8018ba0:	bd38      	pop	{r3, r4, r5, pc}
 8018ba2:	f1c1 0101 	rsb	r1, r1, #1
 8018ba6:	e7ec      	b.n	8018b82 <__cxa_begin_catch+0x52>
 8018ba8:	f7ff fd76 	bl	8018698 <_ZSt9terminatev>
 8018bac:	3101      	adds	r1, #1
 8018bae:	d001      	beq.n	8018bb4 <__cxa_begin_catch+0x84>
 8018bb0:	f7ff fe14 	bl	80187dc <__cxa_end_cleanup>
 8018bb4:	f7ff ff2e 	bl	8018a14 <__cxa_call_unexpected>

08018bb8 <__cxa_end_catch>:
 8018bb8:	b508      	push	{r3, lr}
 8018bba:	f000 f871 	bl	8018ca0 <__cxa_get_globals_fast>
 8018bbe:	6803      	ldr	r3, [r0, #0]
 8018bc0:	4602      	mov	r2, r0
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d03f      	beq.n	8018c46 <__cxa_end_catch+0x8e>
 8018bc6:	f893 1020 	ldrb.w	r1, [r3, #32]
 8018bca:	2947      	cmp	r1, #71	; 0x47
 8018bcc:	d007      	beq.n	8018bde <__cxa_end_catch+0x26>
 8018bce:	f103 0020 	add.w	r0, r3, #32
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	6013      	str	r3, [r2, #0]
 8018bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018bda:	f7ed bc3b 	b.w	8006454 <_Unwind_DeleteException>
 8018bde:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8018be2:	294e      	cmp	r1, #78	; 0x4e
 8018be4:	d1f3      	bne.n	8018bce <__cxa_end_catch+0x16>
 8018be6:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8018bea:	2955      	cmp	r1, #85	; 0x55
 8018bec:	d1ef      	bne.n	8018bce <__cxa_end_catch+0x16>
 8018bee:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8018bf2:	2943      	cmp	r1, #67	; 0x43
 8018bf4:	d1eb      	bne.n	8018bce <__cxa_end_catch+0x16>
 8018bf6:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8018bfa:	2943      	cmp	r1, #67	; 0x43
 8018bfc:	d1e7      	bne.n	8018bce <__cxa_end_catch+0x16>
 8018bfe:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8018c02:	292b      	cmp	r1, #43	; 0x2b
 8018c04:	d1e3      	bne.n	8018bce <__cxa_end_catch+0x16>
 8018c06:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8018c0a:	292b      	cmp	r1, #43	; 0x2b
 8018c0c:	d1df      	bne.n	8018bce <__cxa_end_catch+0x16>
 8018c0e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8018c12:	2901      	cmp	r1, #1
 8018c14:	d8db      	bhi.n	8018bce <__cxa_end_catch+0x16>
 8018c16:	6959      	ldr	r1, [r3, #20]
 8018c18:	2900      	cmp	r1, #0
 8018c1a:	db05      	blt.n	8018c28 <__cxa_end_catch+0x70>
 8018c1c:	3901      	subs	r1, #1
 8018c1e:	d008      	beq.n	8018c32 <__cxa_end_catch+0x7a>
 8018c20:	1c4a      	adds	r2, r1, #1
 8018c22:	d00e      	beq.n	8018c42 <__cxa_end_catch+0x8a>
 8018c24:	6159      	str	r1, [r3, #20]
 8018c26:	bd08      	pop	{r3, pc}
 8018c28:	3101      	adds	r1, #1
 8018c2a:	d1fb      	bne.n	8018c24 <__cxa_end_catch+0x6c>
 8018c2c:	6918      	ldr	r0, [r3, #16]
 8018c2e:	6010      	str	r0, [r2, #0]
 8018c30:	e7f8      	b.n	8018c24 <__cxa_end_catch+0x6c>
 8018c32:	6919      	ldr	r1, [r3, #16]
 8018c34:	f103 0020 	add.w	r0, r3, #32
 8018c38:	6011      	str	r1, [r2, #0]
 8018c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c3e:	f7ed bc09 	b.w	8006454 <_Unwind_DeleteException>
 8018c42:	f7ff fd29 	bl	8018698 <_ZSt9terminatev>
 8018c46:	bd08      	pop	{r3, pc}

08018c48 <_ZNSt9exceptionD1Ev>:
 8018c48:	4b01      	ldr	r3, [pc, #4]	; (8018c50 <_ZNSt9exceptionD1Ev+0x8>)
 8018c4a:	6003      	str	r3, [r0, #0]
 8018c4c:	4770      	bx	lr
 8018c4e:	bf00      	nop
 8018c50:	0801e4d8 	.word	0x0801e4d8

08018c54 <_ZNSt13bad_exceptionD1Ev>:
 8018c54:	4b01      	ldr	r3, [pc, #4]	; (8018c5c <_ZNSt13bad_exceptionD1Ev+0x8>)
 8018c56:	6003      	str	r3, [r0, #0]
 8018c58:	4770      	bx	lr
 8018c5a:	bf00      	nop
 8018c5c:	0801e4d8 	.word	0x0801e4d8

08018c60 <_ZNKSt9exception4whatEv>:
 8018c60:	f24e 500c 	movw	r0, #58636	; 0xe50c
 8018c64:	f6c0 0001 	movt	r0, #2049	; 0x801
 8018c68:	4770      	bx	lr
 8018c6a:	bf00      	nop

08018c6c <_ZNKSt13bad_exception4whatEv>:
 8018c6c:	f24e 501c 	movw	r0, #58652	; 0xe51c
 8018c70:	f6c0 0001 	movt	r0, #2049	; 0x801
 8018c74:	4770      	bx	lr
 8018c76:	bf00      	nop

08018c78 <_ZNSt13bad_exceptionD0Ev>:
 8018c78:	4b03      	ldr	r3, [pc, #12]	; (8018c88 <_ZNSt13bad_exceptionD0Ev+0x10>)
 8018c7a:	b510      	push	{r4, lr}
 8018c7c:	4604      	mov	r4, r0
 8018c7e:	6003      	str	r3, [r0, #0]
 8018c80:	f7ff fce6 	bl	8018650 <_ZdlPv>
 8018c84:	4620      	mov	r0, r4
 8018c86:	bd10      	pop	{r4, pc}
 8018c88:	0801e4d8 	.word	0x0801e4d8

08018c8c <_ZNSt9exceptionD0Ev>:
 8018c8c:	4b03      	ldr	r3, [pc, #12]	; (8018c9c <_ZNSt9exceptionD0Ev+0x10>)
 8018c8e:	b510      	push	{r4, lr}
 8018c90:	4604      	mov	r4, r0
 8018c92:	6003      	str	r3, [r0, #0]
 8018c94:	f7ff fcdc 	bl	8018650 <_ZdlPv>
 8018c98:	4620      	mov	r0, r4
 8018c9a:	bd10      	pop	{r4, pc}
 8018c9c:	0801e4d8 	.word	0x0801e4d8

08018ca0 <__cxa_get_globals_fast>:
 8018ca0:	f640 70bc 	movw	r0, #4028	; 0xfbc
 8018ca4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018ca8:	4770      	bx	lr
 8018caa:	bf00      	nop

08018cac <__cxa_get_globals>:
 8018cac:	f640 70bc 	movw	r0, #4028	; 0xfbc
 8018cb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018cb4:	4770      	bx	lr
 8018cb6:	bf00      	nop

08018cb8 <_ZL12read_sleb128PKhPl>:
 8018cb8:	2300      	movs	r3, #0
 8018cba:	b470      	push	{r4, r5, r6}
 8018cbc:	461a      	mov	r2, r3
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018cc4:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 8018cc8:	4620      	mov	r0, r4
 8018cca:	4096      	lsls	r6, r2
 8018ccc:	3207      	adds	r2, #7
 8018cce:	f015 0f80 	tst.w	r5, #128	; 0x80
 8018cd2:	ea43 0306 	orr.w	r3, r3, r6
 8018cd6:	d1f3      	bne.n	8018cc0 <_ZL12read_sleb128PKhPl+0x8>
 8018cd8:	2a1f      	cmp	r2, #31
 8018cda:	d807      	bhi.n	8018cec <_ZL12read_sleb128PKhPl+0x34>
 8018cdc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018ce0:	d004      	beq.n	8018cec <_ZL12read_sleb128PKhPl+0x34>
 8018ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8018ce6:	fa14 f202 	lsls.w	r2, r4, r2
 8018cea:	4313      	orrs	r3, r2
 8018cec:	600b      	str	r3, [r1, #0]
 8018cee:	bc70      	pop	{r4, r5, r6}
 8018cf0:	4770      	bx	lr
 8018cf2:	bf00      	nop

08018cf4 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8018cf4:	2850      	cmp	r0, #80	; 0x50
 8018cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cf8:	4604      	mov	r4, r0
 8018cfa:	b085      	sub	sp, #20
 8018cfc:	460d      	mov	r5, r1
 8018cfe:	d053      	beq.n	8018da8 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
 8018d00:	f000 010f 	and.w	r1, r0, #15
 8018d04:	290c      	cmp	r1, #12
 8018d06:	d837      	bhi.n	8018d78 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8018d08:	e8df f001 	tbb	[pc, r1]
 8018d0c:	07483807 	.word	0x07483807
 8018d10:	36363620 	.word	0x36363620
 8018d14:	07252c36 	.word	0x07252c36
 8018d18:	20          	.byte	0x20
 8018d19:	00          	.byte	0x00
 8018d1a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8018d1e:	1d10      	adds	r0, r2, #4
 8018d20:	7811      	ldrb	r1, [r2, #0]
 8018d22:	7897      	ldrb	r7, [r2, #2]
 8018d24:	78d6      	ldrb	r6, [r2, #3]
 8018d26:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8018d2a:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8018d2e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8018d32:	b141      	cbz	r1, 8018d46 <_ZL28read_encoded_value_with_basehjPKhPj+0x52>
 8018d34:	f004 0670 	and.w	r6, r4, #112	; 0x70
 8018d38:	2e10      	cmp	r6, #16
 8018d3a:	bf08      	it	eq
 8018d3c:	4615      	moveq	r5, r2
 8018d3e:	0622      	lsls	r2, r4, #24
 8018d40:	4429      	add	r1, r5
 8018d42:	bf48      	it	mi
 8018d44:	6809      	ldrmi	r1, [r1, #0]
 8018d46:	6019      	str	r1, [r3, #0]
 8018d48:	b005      	add	sp, #20
 8018d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d4c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8018d50:	f102 0008 	add.w	r0, r2, #8
 8018d54:	e7e4      	b.n	8018d20 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 8018d56:	7856      	ldrb	r6, [r2, #1]
 8018d58:	1c90      	adds	r0, r2, #2
 8018d5a:	7811      	ldrb	r1, [r2, #0]
 8018d5c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8018d60:	b209      	sxth	r1, r1
 8018d62:	e7e6      	b.n	8018d32 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8018d64:	4610      	mov	r0, r2
 8018d66:	a903      	add	r1, sp, #12
 8018d68:	9201      	str	r2, [sp, #4]
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	f7ff ffa4 	bl	8018cb8 <_ZL12read_sleb128PKhPl>
 8018d70:	9903      	ldr	r1, [sp, #12]
 8018d72:	9a01      	ldr	r2, [sp, #4]
 8018d74:	9b00      	ldr	r3, [sp, #0]
 8018d76:	e7dc      	b.n	8018d32 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8018d78:	f7ed fe74 	bl	8006a64 <abort>
 8018d7c:	2100      	movs	r1, #0
 8018d7e:	4610      	mov	r0, r2
 8018d80:	460e      	mov	r6, r1
 8018d82:	f810 7b01 	ldrb.w	r7, [r0], #1
 8018d86:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
 8018d8a:	fa0c fc06 	lsl.w	ip, ip, r6
 8018d8e:	3607      	adds	r6, #7
 8018d90:	f017 0f80 	tst.w	r7, #128	; 0x80
 8018d94:	ea41 010c 	orr.w	r1, r1, ip
 8018d98:	d1f3      	bne.n	8018d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x8e>
 8018d9a:	e7ca      	b.n	8018d32 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8018d9c:	7856      	ldrb	r6, [r2, #1]
 8018d9e:	1c90      	adds	r0, r2, #2
 8018da0:	7811      	ldrb	r1, [r2, #0]
 8018da2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8018da6:	e7c4      	b.n	8018d32 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8018da8:	1cd0      	adds	r0, r2, #3
 8018daa:	f020 0003 	bic.w	r0, r0, #3
 8018dae:	f850 1b04 	ldr.w	r1, [r0], #4
 8018db2:	e7c8      	b.n	8018d46 <_ZL28read_encoded_value_with_basehjPKhPj+0x52>

08018db4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8018db4:	28ff      	cmp	r0, #255	; 0xff
 8018db6:	b508      	push	{r3, lr}
 8018db8:	d00d      	beq.n	8018dd6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8018dba:	f000 0370 	and.w	r3, r0, #112	; 0x70
 8018dbe:	2b20      	cmp	r3, #32
 8018dc0:	d019      	beq.n	8018df6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
 8018dc2:	dd07      	ble.n	8018dd4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8018dc4:	2b40      	cmp	r3, #64	; 0x40
 8018dc6:	d011      	beq.n	8018dec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8018dc8:	2b50      	cmp	r3, #80	; 0x50
 8018dca:	d004      	beq.n	8018dd6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8018dcc:	2b30      	cmp	r3, #48	; 0x30
 8018dce:	d008      	beq.n	8018de2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8018dd0:	f7ed fe48 	bl	8006a64 <abort>
 8018dd4:	b90b      	cbnz	r3, 8018dda <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8018dd6:	2000      	movs	r0, #0
 8018dd8:	bd08      	pop	{r3, pc}
 8018dda:	2b10      	cmp	r3, #16
 8018ddc:	d0fb      	beq.n	8018dd6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8018dde:	f7ed fe41 	bl	8006a64 <abort>
 8018de2:	4608      	mov	r0, r1
 8018de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018de8:	f7ed be34 	b.w	8006a54 <_Unwind_GetDataRelBase>
 8018dec:	4608      	mov	r0, r1
 8018dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018df2:	f7ed be1f 	b.w	8006a34 <_Unwind_GetRegionStart>
 8018df6:	4608      	mov	r0, r1
 8018df8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018dfc:	f7ed be2e 	b.w	8006a5c <_Unwind_GetTextRelBase>

08018e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
 8018e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e02:	4605      	mov	r5, r0
 8018e04:	460e      	mov	r6, r1
 8018e06:	4614      	mov	r4, r2
 8018e08:	b10d      	cbz	r5, 8018e0e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
 8018e0a:	f7ed fe13 	bl	8006a34 <_Unwind_GetRegionStart>
 8018e0e:	6020      	str	r0, [r4, #0]
 8018e10:	f816 7b01 	ldrb.w	r7, [r6], #1
 8018e14:	2fff      	cmp	r7, #255	; 0xff
 8018e16:	bf08      	it	eq
 8018e18:	6060      	streq	r0, [r4, #4]
 8018e1a:	d00a      	beq.n	8018e32 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
 8018e1c:	4629      	mov	r1, r5
 8018e1e:	4638      	mov	r0, r7
 8018e20:	f7ff ffc8 	bl	8018db4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018e24:	4632      	mov	r2, r6
 8018e26:	1d23      	adds	r3, r4, #4
 8018e28:	4601      	mov	r1, r0
 8018e2a:	4638      	mov	r0, r7
 8018e2c:	f7ff ff62 	bl	8018cf4 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018e30:	4606      	mov	r6, r0
 8018e32:	f816 3b01 	ldrb.w	r3, [r6], #1
 8018e36:	2bff      	cmp	r3, #255	; 0xff
 8018e38:	7523      	strb	r3, [r4, #20]
 8018e3a:	d023      	beq.n	8018e84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x84>
 8018e3c:	2000      	movs	r0, #0
 8018e3e:	4602      	mov	r2, r0
 8018e40:	4633      	mov	r3, r6
 8018e42:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018e46:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8018e4a:	461e      	mov	r6, r3
 8018e4c:	4095      	lsls	r5, r2
 8018e4e:	3207      	adds	r2, #7
 8018e50:	0609      	lsls	r1, r1, #24
 8018e52:	ea40 0005 	orr.w	r0, r0, r5
 8018e56:	d4f3      	bmi.n	8018e40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
 8018e58:	1818      	adds	r0, r3, r0
 8018e5a:	60e0      	str	r0, [r4, #12]
 8018e5c:	2100      	movs	r1, #0
 8018e5e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8018e62:	460b      	mov	r3, r1
 8018e64:	7562      	strb	r2, [r4, #21]
 8018e66:	4630      	mov	r0, r6
 8018e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e6c:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 8018e70:	4606      	mov	r6, r0
 8018e72:	409d      	lsls	r5, r3
 8018e74:	3307      	adds	r3, #7
 8018e76:	0612      	lsls	r2, r2, #24
 8018e78:	ea41 0105 	orr.w	r1, r1, r5
 8018e7c:	d4f3      	bmi.n	8018e66 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
 8018e7e:	1841      	adds	r1, r0, r1
 8018e80:	6121      	str	r1, [r4, #16]
 8018e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e84:	2300      	movs	r3, #0
 8018e86:	60e3      	str	r3, [r4, #12]
 8018e88:	e7e8      	b.n	8018e5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
 8018e8a:	bf00      	nop

08018e8c <__gxx_personality_v0>:
 8018e8c:	f000 0303 	and.w	r3, r0, #3
 8018e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e94:	2400      	movs	r4, #0
 8018e96:	b093      	sub	sp, #76	; 0x4c
 8018e98:	2b01      	cmp	r3, #1
 8018e9a:	4688      	mov	r8, r1
 8018e9c:	4617      	mov	r7, r2
 8018e9e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018ea0:	f000 80b2 	beq.w	8019008 <__gxx_personality_v0+0x17c>
 8018ea4:	2b02      	cmp	r3, #2
 8018ea6:	f000 80a4 	beq.w	8018ff2 <__gxx_personality_v0+0x166>
 8018eaa:	f000 0608 	and.w	r6, r0, #8
 8018eae:	f04f 0a01 	mov.w	sl, #1
 8018eb2:	ad0e      	add	r5, sp, #56	; 0x38
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	f040 8085 	bne.w	8018fc4 <__gxx_personality_v0+0x138>
 8018eba:	2100      	movs	r1, #0
 8018ebc:	220c      	movs	r2, #12
 8018ebe:	460b      	mov	r3, r1
 8018ec0:	4638      	mov	r0, r7
 8018ec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018ec6:	ea46 0a0a 	orr.w	sl, r6, sl
 8018eca:	9500      	str	r5, [sp, #0]
 8018ecc:	f7ec ff86 	bl	8005ddc <_Unwind_VRS_Set>
 8018ed0:	4638      	mov	r0, r7
 8018ed2:	f7ed fdb5 	bl	8006a40 <_Unwind_GetLanguageSpecificData>
 8018ed6:	4681      	mov	r9, r0
 8018ed8:	2800      	cmp	r0, #0
 8018eda:	f000 808a 	beq.w	8018ff2 <__gxx_personality_v0+0x166>
 8018ede:	4601      	mov	r1, r0
 8018ee0:	aa05      	add	r2, sp, #20
 8018ee2:	4638      	mov	r0, r7
 8018ee4:	f7ff ff8c 	bl	8018e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 8018ee8:	4639      	mov	r1, r7
 8018eea:	4604      	mov	r4, r0
 8018eec:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8018ef0:	f7ff ff60 	bl	8018db4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018ef4:	2100      	movs	r1, #0
 8018ef6:	460b      	mov	r3, r1
 8018ef8:	220f      	movs	r2, #15
 8018efa:	9500      	str	r5, [sp, #0]
 8018efc:	4606      	mov	r6, r0
 8018efe:	4638      	mov	r0, r7
 8018f00:	9607      	str	r6, [sp, #28]
 8018f02:	f7ec ff45 	bl	8005d90 <_Unwind_VRS_Get>
 8018f06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f0a:	f026 0601 	bic.w	r6, r6, #1
 8018f0e:	3e01      	subs	r6, #1
 8018f10:	429c      	cmp	r4, r3
 8018f12:	d23a      	bcs.n	8018f8a <__gxx_personality_v0+0xfe>
 8018f14:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
 8018f18:	2100      	movs	r1, #0
 8018f1a:	4658      	mov	r0, fp
 8018f1c:	f7ff ff4a 	bl	8018db4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018f20:	4622      	mov	r2, r4
 8018f22:	ab0c      	add	r3, sp, #48	; 0x30
 8018f24:	4601      	mov	r1, r0
 8018f26:	4658      	mov	r0, fp
 8018f28:	f7ff fee4 	bl	8018cf4 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018f2c:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 8018f30:	2100      	movs	r1, #0
 8018f32:	4683      	mov	fp, r0
 8018f34:	4620      	mov	r0, r4
 8018f36:	f7ff ff3d 	bl	8018db4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018f3a:	465a      	mov	r2, fp
 8018f3c:	ab0d      	add	r3, sp, #52	; 0x34
 8018f3e:	4601      	mov	r1, r0
 8018f40:	4620      	mov	r0, r4
 8018f42:	f7ff fed7 	bl	8018cf4 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018f46:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 8018f4a:	2100      	movs	r1, #0
 8018f4c:	4683      	mov	fp, r0
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f7ff ff30 	bl	8018db4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018f54:	462b      	mov	r3, r5
 8018f56:	465a      	mov	r2, fp
 8018f58:	4601      	mov	r1, r0
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f7ff feca 	bl	8018cf4 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018f60:	2100      	movs	r1, #0
 8018f62:	460b      	mov	r3, r1
 8018f64:	4604      	mov	r4, r0
 8018f66:	f814 2b01 	ldrb.w	r2, [r4], #1
 8018f6a:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 8018f6e:	4098      	lsls	r0, r3
 8018f70:	3307      	adds	r3, #7
 8018f72:	4301      	orrs	r1, r0
 8018f74:	0610      	lsls	r0, r2, #24
 8018f76:	d4f6      	bmi.n	8018f66 <__gxx_personality_v0+0xda>
 8018f78:	9b05      	ldr	r3, [sp, #20]
 8018f7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f7c:	18d3      	adds	r3, r2, r3
 8018f7e:	429e      	cmp	r6, r3
 8018f80:	d222      	bcs.n	8018fc8 <__gxx_personality_v0+0x13c>
 8018f82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018f84:	4623      	mov	r3, r4
 8018f86:	429c      	cmp	r4, r3
 8018f88:	d3c4      	bcc.n	8018f14 <__gxx_personality_v0+0x88>
 8018f8a:	2400      	movs	r4, #0
 8018f8c:	2601      	movs	r6, #1
 8018f8e:	46a3      	mov	fp, r4
 8018f90:	f01a 0f01 	tst.w	sl, #1
 8018f94:	d061      	beq.n	801905a <__gxx_personality_v0+0x1ce>
 8018f96:	2e02      	cmp	r6, #2
 8018f98:	d02b      	beq.n	8018ff2 <__gxx_personality_v0+0x166>
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	4638      	mov	r0, r7
 8018f9e:	460b      	mov	r3, r1
 8018fa0:	220d      	movs	r2, #13
 8018fa2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018fa4:	9500      	str	r5, [sp, #0]
 8018fa6:	f7ec fef3 	bl	8005d90 <_Unwind_VRS_Get>
 8018faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fac:	2006      	movs	r0, #6
 8018fae:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
 8018fb2:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 8018fb6:	f8c8 3020 	str.w	r3, [r8, #32]
 8018fba:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
 8018fbe:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 8018fc2:	e01e      	b.n	8019002 <__gxx_personality_v0+0x176>
 8018fc4:	f7ed fd4e 	bl	8006a64 <abort>
 8018fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fca:	189b      	adds	r3, r3, r2
 8018fcc:	429e      	cmp	r6, r3
 8018fce:	d301      	bcc.n	8018fd4 <__gxx_personality_v0+0x148>
 8018fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fd2:	e79d      	b.n	8018f10 <__gxx_personality_v0+0x84>
 8018fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fd6:	469b      	mov	fp, r3
 8018fd8:	b113      	cbz	r3, 8018fe0 <__gxx_personality_v0+0x154>
 8018fda:	9a06      	ldr	r2, [sp, #24]
 8018fdc:	eb03 0b02 	add.w	fp, r3, r2
 8018fe0:	4608      	mov	r0, r1
 8018fe2:	b111      	cbz	r1, 8018fea <__gxx_personality_v0+0x15e>
 8018fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018fe6:	3901      	subs	r1, #1
 8018fe8:	1840      	adds	r0, r0, r1
 8018fea:	f1bb 0f00 	cmp.w	fp, #0
 8018fee:	f040 808c 	bne.w	801910a <__gxx_personality_v0+0x27e>
 8018ff2:	4640      	mov	r0, r8
 8018ff4:	4639      	mov	r1, r7
 8018ff6:	f7ed fd07 	bl	8006a08 <__gnu_unwind_frame>
 8018ffa:	2800      	cmp	r0, #0
 8018ffc:	bf0c      	ite	eq
 8018ffe:	2008      	moveq	r0, #8
 8019000:	2009      	movne	r0, #9
 8019002:	b013      	add	sp, #76	; 0x4c
 8019004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019008:	f010 0608 	ands.w	r6, r0, #8
 801900c:	bf18      	it	ne
 801900e:	ad0e      	addne	r5, sp, #56	; 0x38
 8019010:	d002      	beq.n	8019018 <__gxx_personality_v0+0x18c>
 8019012:	f04f 0a02 	mov.w	sl, #2
 8019016:	e750      	b.n	8018eba <__gxx_personality_v0+0x2e>
 8019018:	4610      	mov	r0, r2
 801901a:	4633      	mov	r3, r6
 801901c:	220d      	movs	r2, #13
 801901e:	4631      	mov	r1, r6
 8019020:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8019024:	ad0e      	add	r5, sp, #56	; 0x38
 8019026:	9500      	str	r5, [sp, #0]
 8019028:	f7ec feb2 	bl	8005d90 <_Unwind_VRS_Get>
 801902c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801902e:	429c      	cmp	r4, r3
 8019030:	d1ef      	bne.n	8019012 <__gxx_personality_v0+0x186>
 8019032:	f108 0428 	add.w	r4, r8, #40	; 0x28
 8019036:	4631      	mov	r1, r6
 8019038:	4633      	mov	r3, r6
 801903a:	4638      	mov	r0, r7
 801903c:	220c      	movs	r2, #12
 801903e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8019042:	9500      	str	r5, [sp, #0]
 8019044:	f7ec feca 	bl	8005ddc <_Unwind_VRS_Set>
 8019048:	e894 0a10 	ldmia.w	r4, {r4, r9, fp}
 801904c:	2603      	movs	r6, #3
 801904e:	f1bb 0f00 	cmp.w	fp, #0
 8019052:	d13a      	bne.n	80190ca <__gxx_personality_v0+0x23e>
 8019054:	4640      	mov	r0, r8
 8019056:	f7ff fcb9 	bl	80189cc <__cxa_call_terminate>
 801905a:	f01a 0f08 	tst.w	sl, #8
 801905e:	d032      	beq.n	80190c6 <__gxx_personality_v0+0x23a>
 8019060:	2e01      	cmp	r6, #1
 8019062:	f000 80e3 	beq.w	801922c <__gxx_personality_v0+0x3a0>
 8019066:	2c00      	cmp	r4, #0
 8019068:	f2c0 80e2 	blt.w	8019230 <__gxx_personality_v0+0x3a4>
 801906c:	2100      	movs	r1, #0
 801906e:	4638      	mov	r0, r7
 8019070:	460a      	mov	r2, r1
 8019072:	460b      	mov	r3, r1
 8019074:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8019078:	9500      	str	r5, [sp, #0]
 801907a:	f7ec feaf 	bl	8005ddc <_Unwind_VRS_Set>
 801907e:	2100      	movs	r1, #0
 8019080:	2201      	movs	r2, #1
 8019082:	460b      	mov	r3, r1
 8019084:	4638      	mov	r0, r7
 8019086:	940e      	str	r4, [sp, #56]	; 0x38
 8019088:	9500      	str	r5, [sp, #0]
 801908a:	f7ec fea7 	bl	8005ddc <_Unwind_VRS_Set>
 801908e:	2100      	movs	r1, #0
 8019090:	220f      	movs	r2, #15
 8019092:	460b      	mov	r3, r1
 8019094:	4638      	mov	r0, r7
 8019096:	9500      	str	r5, [sp, #0]
 8019098:	f7ec fe7a 	bl	8005d90 <_Unwind_VRS_Get>
 801909c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801909e:	2100      	movs	r1, #0
 80190a0:	220f      	movs	r2, #15
 80190a2:	4638      	mov	r0, r7
 80190a4:	f003 0301 	and.w	r3, r3, #1
 80190a8:	9500      	str	r5, [sp, #0]
 80190aa:	ea4b 0303 	orr.w	r3, fp, r3
 80190ae:	930e      	str	r3, [sp, #56]	; 0x38
 80190b0:	460b      	mov	r3, r1
 80190b2:	f7ec fe93 	bl	8005ddc <_Unwind_VRS_Set>
 80190b6:	2007      	movs	r0, #7
 80190b8:	2e02      	cmp	r6, #2
 80190ba:	d1a2      	bne.n	8019002 <__gxx_personality_v0+0x176>
 80190bc:	4640      	mov	r0, r8
 80190be:	f7ff fc05 	bl	80188cc <__cxa_begin_cleanup>
 80190c2:	2007      	movs	r0, #7
 80190c4:	e79d      	b.n	8019002 <__gxx_personality_v0+0x176>
 80190c6:	2e01      	cmp	r6, #1
 80190c8:	d0c4      	beq.n	8019054 <__gxx_personality_v0+0x1c8>
 80190ca:	2c00      	cmp	r4, #0
 80190cc:	dace      	bge.n	801906c <__gxx_personality_v0+0x1e0>
 80190ce:	aa05      	add	r2, sp, #20
 80190d0:	4638      	mov	r0, r7
 80190d2:	4649      	mov	r1, r9
 80190d4:	f7ff fe94 	bl	8018e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 80190d8:	9b08      	ldr	r3, [sp, #32]
 80190da:	43e2      	mvns	r2, r4
 80190dc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80190e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190e4:	b133      	cbz	r3, 80190f4 <__gxx_personality_v0+0x268>
 80190e6:	4602      	mov	r2, r0
 80190e8:	2300      	movs	r3, #0
 80190ea:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80190ee:	3301      	adds	r3, #1
 80190f0:	2900      	cmp	r1, #0
 80190f2:	d1fa      	bne.n	80190ea <__gxx_personality_v0+0x25e>
 80190f4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 80190f8:	2300      	movs	r3, #0
 80190fa:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 80190fe:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8019102:	2304      	movs	r3, #4
 8019104:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8019108:	e7b0      	b.n	801906c <__gxx_personality_v0+0x1e0>
 801910a:	2800      	cmp	r0, #0
 801910c:	f000 8089 	beq.w	8019222 <__gxx_personality_v0+0x396>
 8019110:	f01a 0208 	ands.w	r2, sl, #8
 8019114:	9203      	str	r2, [sp, #12]
 8019116:	d07a      	beq.n	801920e <__gxx_personality_v0+0x382>
 8019118:	2347      	movs	r3, #71	; 0x47
 801911a:	f888 3000 	strb.w	r3, [r8]
 801911e:	234e      	movs	r3, #78	; 0x4e
 8019120:	f888 3001 	strb.w	r3, [r8, #1]
 8019124:	2355      	movs	r3, #85	; 0x55
 8019126:	f888 3002 	strb.w	r3, [r8, #2]
 801912a:	2343      	movs	r3, #67	; 0x43
 801912c:	f888 3003 	strb.w	r3, [r8, #3]
 8019130:	2346      	movs	r3, #70	; 0x46
 8019132:	f888 3004 	strb.w	r3, [r8, #4]
 8019136:	234f      	movs	r3, #79	; 0x4f
 8019138:	f888 3005 	strb.w	r3, [r8, #5]
 801913c:	2352      	movs	r3, #82	; 0x52
 801913e:	f888 3006 	strb.w	r3, [r8, #6]
 8019142:	2300      	movs	r3, #0
 8019144:	f888 3007 	strb.w	r3, [r8, #7]
 8019148:	2300      	movs	r3, #0
 801914a:	9302      	str	r3, [sp, #8]
 801914c:	463b      	mov	r3, r7
 801914e:	4647      	mov	r7, r8
 8019150:	4698      	mov	r8, r3
 8019152:	a90f      	add	r1, sp, #60	; 0x3c
 8019154:	f7ff fdb0 	bl	8018cb8 <_ZL12read_sleb128PKhPl>
 8019158:	a910      	add	r1, sp, #64	; 0x40
 801915a:	4606      	mov	r6, r0
 801915c:	f7ff fdac 	bl	8018cb8 <_ZL12read_sleb128PKhPl>
 8019160:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019162:	2c00      	cmp	r4, #0
 8019164:	4623      	mov	r3, r4
 8019166:	d014      	beq.n	8019192 <__gxx_personality_v0+0x306>
 8019168:	dd1e      	ble.n	80191a8 <__gxx_personality_v0+0x31c>
 801916a:	9b08      	ldr	r3, [sp, #32]
 801916c:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8019170:	6819      	ldr	r1, [r3, #0]
 8019172:	b1a9      	cbz	r1, 80191a0 <__gxx_personality_v0+0x314>
 8019174:	18c9      	adds	r1, r1, r3
 8019176:	d013      	beq.n	80191a0 <__gxx_personality_v0+0x314>
 8019178:	b16f      	cbz	r7, 8019196 <__gxx_personality_v0+0x30a>
 801917a:	4638      	mov	r0, r7
 801917c:	2200      	movs	r2, #0
 801917e:	ab0b      	add	r3, sp, #44	; 0x2c
 8019180:	f7ff fb32 	bl	80187e8 <__cxa_type_match>
 8019184:	b138      	cbz	r0, 8019196 <__gxx_personality_v0+0x30a>
 8019186:	4643      	mov	r3, r8
 8019188:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801918a:	46b8      	mov	r8, r7
 801918c:	461f      	mov	r7, r3
 801918e:	2603      	movs	r6, #3
 8019190:	e6fe      	b.n	8018f90 <__gxx_personality_v0+0x104>
 8019192:	2301      	movs	r3, #1
 8019194:	9302      	str	r3, [sp, #8]
 8019196:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019198:	2c00      	cmp	r4, #0
 801919a:	d029      	beq.n	80191f0 <__gxx_personality_v0+0x364>
 801919c:	1930      	adds	r0, r6, r4
 801919e:	e7d8      	b.n	8019152 <__gxx_personality_v0+0x2c6>
 80191a0:	4643      	mov	r3, r8
 80191a2:	46b8      	mov	r8, r7
 80191a4:	461f      	mov	r7, r3
 80191a6:	e7f2      	b.n	801918e <__gxx_personality_v0+0x302>
 80191a8:	b1bf      	cbz	r7, 80191da <__gxx_personality_v0+0x34e>
 80191aa:	9a03      	ldr	r2, [sp, #12]
 80191ac:	b9aa      	cbnz	r2, 80191da <__gxx_personality_v0+0x34e>
 80191ae:	9a08      	ldr	r2, [sp, #32]
 80191b0:	43e1      	mvns	r1, r4
 80191b2:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 80191b6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80191ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80191bc:	9211      	str	r2, [sp, #68]	; 0x44
 80191be:	b919      	cbnz	r1, 80191c8 <__gxx_personality_v0+0x33c>
 80191c0:	e011      	b.n	80191e6 <__gxx_personality_v0+0x35a>
 80191c2:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80191c6:	b1e1      	cbz	r1, 8019202 <__gxx_personality_v0+0x376>
 80191c8:	1861      	adds	r1, r4, r1
 80191ca:	4638      	mov	r0, r7
 80191cc:	2200      	movs	r2, #0
 80191ce:	ab11      	add	r3, sp, #68	; 0x44
 80191d0:	f7ff fb0a 	bl	80187e8 <__cxa_type_match>
 80191d4:	2800      	cmp	r0, #0
 80191d6:	d0f4      	beq.n	80191c2 <__gxx_personality_v0+0x336>
 80191d8:	e7dd      	b.n	8019196 <__gxx_personality_v0+0x30a>
 80191da:	9a08      	ldr	r2, [sp, #32]
 80191dc:	43d9      	mvns	r1, r3
 80191de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80191e2:	2a00      	cmp	r2, #0
 80191e4:	d1d7      	bne.n	8019196 <__gxx_personality_v0+0x30a>
 80191e6:	4642      	mov	r2, r8
 80191e8:	461c      	mov	r4, r3
 80191ea:	46b8      	mov	r8, r7
 80191ec:	4617      	mov	r7, r2
 80191ee:	e7ce      	b.n	801918e <__gxx_personality_v0+0x302>
 80191f0:	9a02      	ldr	r2, [sp, #8]
 80191f2:	4643      	mov	r3, r8
 80191f4:	46b8      	mov	r8, r7
 80191f6:	461f      	mov	r7, r3
 80191f8:	2a00      	cmp	r2, #0
 80191fa:	f43f aefa 	beq.w	8018ff2 <__gxx_personality_v0+0x166>
 80191fe:	2602      	movs	r6, #2
 8019200:	e6c6      	b.n	8018f90 <__gxx_personality_v0+0x104>
 8019202:	4643      	mov	r3, r8
 8019204:	46b8      	mov	r8, r7
 8019206:	461f      	mov	r7, r3
 8019208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801920a:	461c      	mov	r4, r3
 801920c:	e7bf      	b.n	801918e <__gxx_personality_v0+0x302>
 801920e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8019212:	2b01      	cmp	r3, #1
 8019214:	bf14      	ite	ne
 8019216:	f108 0358 	addne.w	r3, r8, #88	; 0x58
 801921a:	f858 3c20 	ldreq.w	r3, [r8, #-32]
 801921e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019220:	e792      	b.n	8019148 <__gxx_personality_v0+0x2bc>
 8019222:	4604      	mov	r4, r0
 8019224:	2602      	movs	r6, #2
 8019226:	e6b3      	b.n	8018f90 <__gxx_personality_v0+0x104>
 8019228:	f7ff fc82 	bl	8018b30 <__cxa_begin_catch>
 801922c:	f7ff fa34 	bl	8018698 <_ZSt9terminatev>
 8019230:	f7ff fa3e 	bl	80186b0 <_ZSt10unexpectedv>

08019234 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8019234:	2801      	cmp	r0, #1
 8019236:	b510      	push	{r4, lr}
 8019238:	d81d      	bhi.n	8019276 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 801923a:	f04f 32ff 	mov.w	r2, #4294967295
 801923e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8019242:	f3bf 8f5f 	dmb	sy
 8019246:	e853 0f00 	ldrex	r0, [r3]
 801924a:	4410      	add	r0, r2
 801924c:	e843 0400 	strex	r4, r0, [r3]
 8019250:	f094 0f00 	teq	r4, #0
 8019254:	d1f7      	bne.n	8019246 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
 8019256:	f3bf 8f5f 	dmb	sy
 801925a:	b958      	cbnz	r0, 8019274 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x40>
 801925c:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8019260:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8019264:	b10b      	cbz	r3, 801926a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x36>
 8019266:	4620      	mov	r0, r4
 8019268:	4798      	blx	r3
 801926a:	4620      	mov	r0, r4
 801926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019270:	f000 ba68 	b.w	8019744 <__cxa_free_exception>
 8019274:	bd10      	pop	{r4, pc}
 8019276:	f851 0c14 	ldr.w	r0, [r1, #-20]
 801927a:	f7ff f9f9 	bl	8018670 <_ZN10__cxxabiv111__terminateEPFvvE>
 801927e:	bf00      	nop

08019280 <__cxa_throw>:
 8019280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019282:	f640 1318 	movw	r3, #2328	; 0x918
 8019286:	f640 141c 	movw	r4, #2332	; 0x91c
 801928a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801928e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8019292:	2743      	movs	r7, #67	; 0x43
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	262b      	movs	r6, #43	; 0x2b
 8019298:	6825      	ldr	r5, [r4, #0]
 801929a:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
 801929e:	f840 1c78 	str.w	r1, [r0, #-120]
 80192a2:	2101      	movs	r1, #1
 80192a4:	f840 3c6c 	str.w	r3, [r0, #-108]
 80192a8:	f249 2335 	movw	r3, #37429	; 0x9235
 80192ac:	f840 1c80 	str.w	r1, [r0, #-128]
 80192b0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80192b4:	f840 2c74 	str.w	r2, [r0, #-116]
 80192b8:	f840 3c50 	str.w	r3, [r0, #-80]
 80192bc:	2347      	movs	r3, #71	; 0x47
 80192be:	f840 5c70 	str.w	r5, [r0, #-112]
 80192c2:	f800 3c58 	strb.w	r3, [r0, #-88]
 80192c6:	234e      	movs	r3, #78	; 0x4e
 80192c8:	f800 7c55 	strb.w	r7, [r0, #-85]
 80192cc:	f800 3c57 	strb.w	r3, [r0, #-87]
 80192d0:	2355      	movs	r3, #85	; 0x55
 80192d2:	f800 7c54 	strb.w	r7, [r0, #-84]
 80192d6:	f800 3c56 	strb.w	r3, [r0, #-86]
 80192da:	2300      	movs	r3, #0
 80192dc:	f800 6c53 	strb.w	r6, [r0, #-83]
 80192e0:	f800 3c51 	strb.w	r3, [r0, #-81]
 80192e4:	f800 6c52 	strb.w	r6, [r0, #-82]
 80192e8:	4620      	mov	r0, r4
 80192ea:	f7ed f977 	bl	80065dc <_Unwind_RaiseException>
 80192ee:	4620      	mov	r0, r4
 80192f0:	f7ff fc1e 	bl	8018b30 <__cxa_begin_catch>
 80192f4:	f7ff f9d0 	bl	8018698 <_ZSt9terminatev>

080192f8 <__cxa_rethrow>:
 80192f8:	b510      	push	{r4, lr}
 80192fa:	f7ff fcd7 	bl	8018cac <__cxa_get_globals>
 80192fe:	6843      	ldr	r3, [r0, #4]
 8019300:	6804      	ldr	r4, [r0, #0]
 8019302:	3301      	adds	r3, #1
 8019304:	6043      	str	r3, [r0, #4]
 8019306:	b164      	cbz	r4, 8019322 <__cxa_rethrow+0x2a>
 8019308:	f894 3020 	ldrb.w	r3, [r4, #32]
 801930c:	2b47      	cmp	r3, #71	; 0x47
 801930e:	d00a      	beq.n	8019326 <__cxa_rethrow+0x2e>
 8019310:	2300      	movs	r3, #0
 8019312:	6003      	str	r3, [r0, #0]
 8019314:	3420      	adds	r4, #32
 8019316:	4620      	mov	r0, r4
 8019318:	f7ed f984 	bl	8006624 <_Unwind_Resume_or_Rethrow>
 801931c:	4620      	mov	r0, r4
 801931e:	f7ff fc07 	bl	8018b30 <__cxa_begin_catch>
 8019322:	f7ff f9b9 	bl	8018698 <_ZSt9terminatev>
 8019326:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801932a:	2b4e      	cmp	r3, #78	; 0x4e
 801932c:	d1f0      	bne.n	8019310 <__cxa_rethrow+0x18>
 801932e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8019332:	2b55      	cmp	r3, #85	; 0x55
 8019334:	d1ec      	bne.n	8019310 <__cxa_rethrow+0x18>
 8019336:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801933a:	2b43      	cmp	r3, #67	; 0x43
 801933c:	d1e8      	bne.n	8019310 <__cxa_rethrow+0x18>
 801933e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019342:	2b43      	cmp	r3, #67	; 0x43
 8019344:	d1e4      	bne.n	8019310 <__cxa_rethrow+0x18>
 8019346:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801934a:	2b2b      	cmp	r3, #43	; 0x2b
 801934c:	d1e0      	bne.n	8019310 <__cxa_rethrow+0x18>
 801934e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019352:	2b2b      	cmp	r3, #43	; 0x2b
 8019354:	d1dc      	bne.n	8019310 <__cxa_rethrow+0x18>
 8019356:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801935a:	2b01      	cmp	r3, #1
 801935c:	d8d8      	bhi.n	8019310 <__cxa_rethrow+0x18>
 801935e:	6963      	ldr	r3, [r4, #20]
 8019360:	425b      	negs	r3, r3
 8019362:	6163      	str	r3, [r4, #20]
 8019364:	e7d6      	b.n	8019314 <__cxa_rethrow+0x1c>
 8019366:	bf00      	nop

08019368 <__cxa_current_exception_type>:
 8019368:	b508      	push	{r3, lr}
 801936a:	f7ff fc9f 	bl	8018cac <__cxa_get_globals>
 801936e:	6800      	ldr	r0, [r0, #0]
 8019370:	b130      	cbz	r0, 8019380 <__cxa_current_exception_type+0x18>
 8019372:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8019376:	2b01      	cmp	r3, #1
 8019378:	bf04      	itt	eq
 801937a:	6800      	ldreq	r0, [r0, #0]
 801937c:	3878      	subeq	r0, #120	; 0x78
 801937e:	6800      	ldr	r0, [r0, #0]
 8019380:	bd08      	pop	{r3, pc}
 8019382:	bf00      	nop

08019384 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8019384:	4b03      	ldr	r3, [pc, #12]	; (8019394 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8019386:	b510      	push	{r4, lr}
 8019388:	4604      	mov	r4, r0
 801938a:	6003      	str	r3, [r0, #0]
 801938c:	f000 f8dc 	bl	8019548 <_ZNSt9type_infoD1Ev>
 8019390:	4620      	mov	r0, r4
 8019392:	bd10      	pop	{r4, pc}
 8019394:	0801e610 	.word	0x0801e610

08019398 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8019398:	4b05      	ldr	r3, [pc, #20]	; (80193b0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 801939a:	b510      	push	{r4, lr}
 801939c:	4604      	mov	r4, r0
 801939e:	6003      	str	r3, [r0, #0]
 80193a0:	f000 f8d2 	bl	8019548 <_ZNSt9type_infoD1Ev>
 80193a4:	4620      	mov	r0, r4
 80193a6:	f7ff f953 	bl	8018650 <_ZdlPv>
 80193aa:	4620      	mov	r0, r4
 80193ac:	bd10      	pop	{r4, pc}
 80193ae:	bf00      	nop
 80193b0:	0801e610 	.word	0x0801e610

080193b4 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 80193b4:	2001      	movs	r0, #1
 80193b6:	4770      	bx	lr

080193b8 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 80193b8:	4b03      	ldr	r3, [pc, #12]	; (80193c8 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 80193ba:	b510      	push	{r4, lr}
 80193bc:	4604      	mov	r4, r0
 80193be:	6003      	str	r3, [r0, #0]
 80193c0:	f000 f9e4 	bl	801978c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 80193c4:	4620      	mov	r0, r4
 80193c6:	bd10      	pop	{r4, pc}
 80193c8:	0801e660 	.word	0x0801e660

080193cc <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 80193cc:	4b05      	ldr	r3, [pc, #20]	; (80193e4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
 80193ce:	b510      	push	{r4, lr}
 80193d0:	4604      	mov	r4, r0
 80193d2:	6003      	str	r3, [r0, #0]
 80193d4:	f000 f9da 	bl	801978c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 80193d8:	4620      	mov	r0, r4
 80193da:	f7ff f939 	bl	8018650 <_ZdlPv>
 80193de:	4620      	mov	r0, r4
 80193e0:	bd10      	pop	{r4, pc}
 80193e2:	bf00      	nop
 80193e4:	0801e660 	.word	0x0801e660

080193e8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 80193e8:	2b01      	cmp	r3, #1
 80193ea:	b530      	push	{r4, r5, lr}
 80193ec:	4604      	mov	r4, r0
 80193ee:	b083      	sub	sp, #12
 80193f0:	460d      	mov	r5, r1
 80193f2:	d908      	bls.n	8019406 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
 80193f4:	68e4      	ldr	r4, [r4, #12]
 80193f6:	3302      	adds	r3, #2
 80193f8:	68e9      	ldr	r1, [r5, #12]
 80193fa:	4620      	mov	r0, r4
 80193fc:	6824      	ldr	r4, [r4, #0]
 80193fe:	6924      	ldr	r4, [r4, #16]
 8019400:	47a0      	blx	r4
 8019402:	b003      	add	sp, #12
 8019404:	bd30      	pop	{r4, r5, pc}
 8019406:	68c0      	ldr	r0, [r0, #12]
 8019408:	4908      	ldr	r1, [pc, #32]	; (801942c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
 801940a:	9201      	str	r2, [sp, #4]
 801940c:	9300      	str	r3, [sp, #0]
 801940e:	f000 f8b1 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 8019412:	9a01      	ldr	r2, [sp, #4]
 8019414:	9b00      	ldr	r3, [sp, #0]
 8019416:	2800      	cmp	r0, #0
 8019418:	d0ec      	beq.n	80193f4 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xc>
 801941a:	68eb      	ldr	r3, [r5, #12]
 801941c:	4618      	mov	r0, r3
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	68db      	ldr	r3, [r3, #12]
 8019422:	4798      	blx	r3
 8019424:	f080 0001 	eor.w	r0, r0, #1
 8019428:	b2c0      	uxtb	r0, r0
 801942a:	e7ea      	b.n	8019402 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 801942c:	0801e5c4 	.word	0x0801e5c4

08019430 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8019430:	4b03      	ldr	r3, [pc, #12]	; (8019440 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8019432:	b510      	push	{r4, lr}
 8019434:	4604      	mov	r4, r0
 8019436:	6003      	str	r3, [r0, #0]
 8019438:	f000 f908 	bl	801964c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801943c:	4620      	mov	r0, r4
 801943e:	bd10      	pop	{r4, pc}
 8019440:	0801e688 	.word	0x0801e688

08019444 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8019444:	4b05      	ldr	r3, [pc, #20]	; (801945c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8019446:	b510      	push	{r4, lr}
 8019448:	4604      	mov	r4, r0
 801944a:	6003      	str	r3, [r0, #0]
 801944c:	f000 f8fe 	bl	801964c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8019450:	4620      	mov	r0, r4
 8019452:	f7ff f8fd 	bl	8018650 <_ZdlPv>
 8019456:	4620      	mov	r0, r4
 8019458:	bd10      	pop	{r4, pc}
 801945a:	bf00      	nop
 801945c:	0801e688 	.word	0x0801e688

08019460 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8019460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019462:	4607      	mov	r7, r0
 8019464:	460e      	mov	r6, r1
 8019466:	4615      	mov	r5, r2
 8019468:	461c      	mov	r4, r3
 801946a:	f000 f8e1 	bl	8019630 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801946e:	b108      	cbz	r0, 8019474 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>
 8019470:	2001      	movs	r0, #1
 8019472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019474:	68bf      	ldr	r7, [r7, #8]
 8019476:	4623      	mov	r3, r4
 8019478:	4631      	mov	r1, r6
 801947a:	462a      	mov	r2, r5
 801947c:	4638      	mov	r0, r7
 801947e:	683c      	ldr	r4, [r7, #0]
 8019480:	69a4      	ldr	r4, [r4, #24]
 8019482:	47a0      	blx	r4
 8019484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019486:	bf00      	nop

08019488 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8019488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801948c:	b087      	sub	sp, #28
 801948e:	4689      	mov	r9, r1
 8019490:	4619      	mov	r1, r3
 8019492:	4698      	mov	r8, r3
 8019494:	4607      	mov	r7, r0
 8019496:	4692      	mov	sl, r2
 8019498:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801949a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801949e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80194a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80194a2:	f000 f867 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 80194a6:	4603      	mov	r3, r0
 80194a8:	b168      	cbz	r0, 80194c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e>
 80194aa:	f1b9 0f00 	cmp.w	r9, #0
 80194ae:	6025      	str	r5, [r4, #0]
 80194b0:	f884 a004 	strb.w	sl, [r4, #4]
 80194b4:	db18      	blt.n	80194e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x60>
 80194b6:	444d      	add	r5, r9
 80194b8:	2000      	movs	r0, #0
 80194ba:	42ae      	cmp	r6, r5
 80194bc:	bf14      	ite	ne
 80194be:	2601      	movne	r6, #1
 80194c0:	2606      	moveq	r6, #6
 80194c2:	71a6      	strb	r6, [r4, #6]
 80194c4:	e00d      	b.n	80194e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 80194c6:	42b5      	cmp	r5, r6
 80194c8:	d015      	beq.n	80194f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 80194ca:	68bf      	ldr	r7, [r7, #8]
 80194cc:	4649      	mov	r1, r9
 80194ce:	4652      	mov	r2, sl
 80194d0:	4643      	mov	r3, r8
 80194d2:	4638      	mov	r0, r7
 80194d4:	683f      	ldr	r7, [r7, #0]
 80194d6:	9602      	str	r6, [sp, #8]
 80194d8:	9403      	str	r4, [sp, #12]
 80194da:	e88d 0820 	stmia.w	sp, {r5, fp}
 80194de:	69fc      	ldr	r4, [r7, #28]
 80194e0:	47a0      	blx	r4
 80194e2:	b007      	add	sp, #28
 80194e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e8:	2000      	movs	r0, #0
 80194ea:	f119 0f02 	cmn.w	r9, #2
 80194ee:	d1f8      	bne.n	80194e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 80194f0:	2301      	movs	r3, #1
 80194f2:	71a3      	strb	r3, [r4, #6]
 80194f4:	e7f5      	b.n	80194e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 80194f6:	4638      	mov	r0, r7
 80194f8:	4659      	mov	r1, fp
 80194fa:	9305      	str	r3, [sp, #20]
 80194fc:	f000 f83a 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 8019500:	9b05      	ldr	r3, [sp, #20]
 8019502:	2800      	cmp	r0, #0
 8019504:	d0e1      	beq.n	80194ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8019506:	f884 a005 	strb.w	sl, [r4, #5]
 801950a:	4618      	mov	r0, r3
 801950c:	e7e9      	b.n	80194e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 801950e:	bf00      	nop

08019510 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8019510:	b570      	push	{r4, r5, r6, lr}
 8019512:	b084      	sub	sp, #16
 8019514:	4605      	mov	r5, r0
 8019516:	460e      	mov	r6, r1
 8019518:	9c08      	ldr	r4, [sp, #32]
 801951a:	4294      	cmp	r4, r2
 801951c:	d008      	beq.n	8019530 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 801951e:	68ad      	ldr	r5, [r5, #8]
 8019520:	4631      	mov	r1, r6
 8019522:	4628      	mov	r0, r5
 8019524:	682d      	ldr	r5, [r5, #0]
 8019526:	9400      	str	r4, [sp, #0]
 8019528:	6a2c      	ldr	r4, [r5, #32]
 801952a:	47a0      	blx	r4
 801952c:	b004      	add	sp, #16
 801952e:	bd70      	pop	{r4, r5, r6, pc}
 8019530:	4619      	mov	r1, r3
 8019532:	9203      	str	r2, [sp, #12]
 8019534:	9302      	str	r3, [sp, #8]
 8019536:	f000 f81d 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 801953a:	9a03      	ldr	r2, [sp, #12]
 801953c:	9b02      	ldr	r3, [sp, #8]
 801953e:	2800      	cmp	r0, #0
 8019540:	d0ed      	beq.n	801951e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8019542:	2006      	movs	r0, #6
 8019544:	e7f2      	b.n	801952c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8019546:	bf00      	nop

08019548 <_ZNSt9type_infoD1Ev>:
 8019548:	4b01      	ldr	r3, [pc, #4]	; (8019550 <_ZNSt9type_infoD1Ev+0x8>)
 801954a:	6003      	str	r3, [r0, #0]
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop
 8019550:	0801e708 	.word	0x0801e708

08019554 <_ZNKSt9type_info14__is_pointer_pEv>:
 8019554:	2000      	movs	r0, #0
 8019556:	4770      	bx	lr

08019558 <_ZNKSt9type_info15__is_function_pEv>:
 8019558:	2000      	movs	r0, #0
 801955a:	4770      	bx	lr

0801955c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801955c:	2000      	movs	r0, #0
 801955e:	4770      	bx	lr

08019560 <_ZNSt9type_infoD0Ev>:
 8019560:	4b03      	ldr	r3, [pc, #12]	; (8019570 <_ZNSt9type_infoD0Ev+0x10>)
 8019562:	b510      	push	{r4, lr}
 8019564:	4604      	mov	r4, r0
 8019566:	6003      	str	r3, [r0, #0]
 8019568:	f7ff f872 	bl	8018650 <_ZdlPv>
 801956c:	4620      	mov	r0, r4
 801956e:	bd10      	pop	{r4, pc}
 8019570:	0801e708 	.word	0x0801e708

08019574 <_ZNKSt9type_infoeqERKS_>:
 8019574:	4281      	cmp	r1, r0
 8019576:	b508      	push	{r3, lr}
 8019578:	d016      	beq.n	80195a8 <_ZNKSt9type_infoeqERKS_+0x34>
 801957a:	6840      	ldr	r0, [r0, #4]
 801957c:	7803      	ldrb	r3, [r0, #0]
 801957e:	2b2a      	cmp	r3, #42	; 0x2a
 8019580:	d00b      	beq.n	801959a <_ZNKSt9type_infoeqERKS_+0x26>
 8019582:	6849      	ldr	r1, [r1, #4]
 8019584:	780b      	ldrb	r3, [r1, #0]
 8019586:	2b2a      	cmp	r3, #42	; 0x2a
 8019588:	bf08      	it	eq
 801958a:	3101      	addeq	r1, #1
 801958c:	f7ee fcb6 	bl	8007efc <strcmp>
 8019590:	f1d0 0001 	rsbs	r0, r0, #1
 8019594:	bf38      	it	cc
 8019596:	2000      	movcc	r0, #0
 8019598:	bd08      	pop	{r3, pc}
 801959a:	7843      	ldrb	r3, [r0, #1]
 801959c:	2b2a      	cmp	r3, #42	; 0x2a
 801959e:	d101      	bne.n	80195a4 <_ZNKSt9type_infoeqERKS_+0x30>
 80195a0:	2000      	movs	r0, #0
 80195a2:	bd08      	pop	{r3, pc}
 80195a4:	3001      	adds	r0, #1
 80195a6:	e7ec      	b.n	8019582 <_ZNKSt9type_infoeqERKS_+0xe>
 80195a8:	2001      	movs	r0, #1
 80195aa:	bd08      	pop	{r3, pc}

080195ac <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 80195ac:	f7ff bfe2 	b.w	8019574 <_ZNKSt9type_infoeqERKS_>

080195b0 <_ZNKSt10bad_typeid4whatEv>:
 80195b0:	f24e 7044 	movw	r0, #59204	; 0xe744
 80195b4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80195b8:	4770      	bx	lr
 80195ba:	bf00      	nop

080195bc <_ZNSt10bad_typeidD1Ev>:
 80195bc:	4b03      	ldr	r3, [pc, #12]	; (80195cc <_ZNSt10bad_typeidD1Ev+0x10>)
 80195be:	b510      	push	{r4, lr}
 80195c0:	4604      	mov	r4, r0
 80195c2:	6003      	str	r3, [r0, #0]
 80195c4:	f7ff fb40 	bl	8018c48 <_ZNSt9exceptionD1Ev>
 80195c8:	4620      	mov	r0, r4
 80195ca:	bd10      	pop	{r4, pc}
 80195cc:	0801e728 	.word	0x0801e728

080195d0 <_ZNSt10bad_typeidD0Ev>:
 80195d0:	4b05      	ldr	r3, [pc, #20]	; (80195e8 <_ZNSt10bad_typeidD0Ev+0x18>)
 80195d2:	b510      	push	{r4, lr}
 80195d4:	4604      	mov	r4, r0
 80195d6:	6003      	str	r3, [r0, #0]
 80195d8:	f7ff fb36 	bl	8018c48 <_ZNSt9exceptionD1Ev>
 80195dc:	4620      	mov	r0, r4
 80195de:	f7ff f837 	bl	8018650 <_ZdlPv>
 80195e2:	4620      	mov	r0, r4
 80195e4:	bd10      	pop	{r4, pc}
 80195e6:	bf00      	nop
 80195e8:	0801e728 	.word	0x0801e728

080195ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80195ec:	b570      	push	{r4, r5, r6, lr}
 80195ee:	b084      	sub	sp, #16
 80195f0:	6806      	ldr	r6, [r0, #0]
 80195f2:	2400      	movs	r4, #0
 80195f4:	2310      	movs	r3, #16
 80195f6:	4615      	mov	r5, r2
 80195f8:	9302      	str	r3, [sp, #8]
 80195fa:	466b      	mov	r3, sp
 80195fc:	6812      	ldr	r2, [r2, #0]
 80195fe:	9400      	str	r4, [sp, #0]
 8019600:	f88d 4004 	strb.w	r4, [sp, #4]
 8019604:	9403      	str	r4, [sp, #12]
 8019606:	69b6      	ldr	r6, [r6, #24]
 8019608:	47b0      	blx	r6
 801960a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801960e:	f003 0306 	and.w	r3, r3, #6
 8019612:	2b06      	cmp	r3, #6
 8019614:	bf18      	it	ne
 8019616:	4620      	movne	r0, r4
 8019618:	d102      	bne.n	8019620 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x34>
 801961a:	9b00      	ldr	r3, [sp, #0]
 801961c:	2001      	movs	r0, #1
 801961e:	602b      	str	r3, [r5, #0]
 8019620:	b004      	add	sp, #16
 8019622:	bd70      	pop	{r4, r5, r6, pc}

08019624 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8019624:	9800      	ldr	r0, [sp, #0]
 8019626:	4290      	cmp	r0, r2
 8019628:	bf14      	ite	ne
 801962a:	2001      	movne	r0, #1
 801962c:	2006      	moveq	r0, #6
 801962e:	4770      	bx	lr

08019630 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8019630:	b538      	push	{r3, r4, r5, lr}
 8019632:	4614      	mov	r4, r2
 8019634:	461d      	mov	r5, r3
 8019636:	f7ff ff9d 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 801963a:	b128      	cbz	r0, 8019648 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x18>
 801963c:	2001      	movs	r0, #1
 801963e:	2308      	movs	r3, #8
 8019640:	602c      	str	r4, [r5, #0]
 8019642:	60eb      	str	r3, [r5, #12]
 8019644:	2306      	movs	r3, #6
 8019646:	712b      	strb	r3, [r5, #4]
 8019648:	bd38      	pop	{r3, r4, r5, pc}
 801964a:	bf00      	nop

0801964c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801964c:	4b03      	ldr	r3, [pc, #12]	; (801965c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801964e:	b510      	push	{r4, lr}
 8019650:	4604      	mov	r4, r0
 8019652:	6003      	str	r3, [r0, #0]
 8019654:	f7ff ff78 	bl	8019548 <_ZNSt9type_infoD1Ev>
 8019658:	4620      	mov	r0, r4
 801965a:	bd10      	pop	{r4, pc}
 801965c:	0801e770 	.word	0x0801e770

08019660 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8019660:	4b05      	ldr	r3, [pc, #20]	; (8019678 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8019662:	b510      	push	{r4, lr}
 8019664:	4604      	mov	r4, r0
 8019666:	6003      	str	r3, [r0, #0]
 8019668:	f7ff ff6e 	bl	8019548 <_ZNSt9type_infoD1Ev>
 801966c:	4620      	mov	r0, r4
 801966e:	f7fe ffef 	bl	8018650 <_ZdlPv>
 8019672:	4620      	mov	r0, r4
 8019674:	bd10      	pop	{r4, pc}
 8019676:	bf00      	nop
 8019678:	0801e770 	.word	0x0801e770

0801967c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801967c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801967e:	b083      	sub	sp, #12
 8019680:	4616      	mov	r6, r2
 8019682:	4605      	mov	r5, r0
 8019684:	9c08      	ldr	r4, [sp, #32]
 8019686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019688:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801968a:	4294      	cmp	r4, r2
 801968c:	d00b      	beq.n	80196a6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 801968e:	4628      	mov	r0, r5
 8019690:	4619      	mov	r1, r3
 8019692:	f7ff ff6f 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 8019696:	b118      	cbz	r0, 80196a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8019698:	2301      	movs	r3, #1
 801969a:	603c      	str	r4, [r7, #0]
 801969c:	713e      	strb	r6, [r7, #4]
 801969e:	71bb      	strb	r3, [r7, #6]
 80196a0:	2000      	movs	r0, #0
 80196a2:	b003      	add	sp, #12
 80196a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196a8:	9301      	str	r3, [sp, #4]
 80196aa:	f7ff ff63 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 80196ae:	9b01      	ldr	r3, [sp, #4]
 80196b0:	2800      	cmp	r0, #0
 80196b2:	d0ec      	beq.n	801968e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
 80196b4:	717e      	strb	r6, [r7, #5]
 80196b6:	e7f3      	b.n	80196a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>

080196b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80196b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ba:	4605      	mov	r5, r0
 80196bc:	460c      	mov	r4, r1
 80196be:	4616      	mov	r6, r2
 80196c0:	461f      	mov	r7, r3
 80196c2:	f7ff ff57 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 80196c6:	b948      	cbnz	r0, 80196dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x24>
 80196c8:	2f03      	cmp	r7, #3
 80196ca:	d900      	bls.n	80196ce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80196cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	4620      	mov	r0, r4
 80196d2:	4629      	mov	r1, r5
 80196d4:	4632      	mov	r2, r6
 80196d6:	695b      	ldr	r3, [r3, #20]
 80196d8:	4798      	blx	r3
 80196da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196dc:	2001      	movs	r0, #1
 80196de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080196e0 <__cxa_allocate_exception>:
 80196e0:	b538      	push	{r3, r4, r5, lr}
 80196e2:	f100 0580 	add.w	r5, r0, #128	; 0x80
 80196e6:	4628      	mov	r0, r5
 80196e8:	f7ed fc76 	bl	8006fd8 <malloc>
 80196ec:	4604      	mov	r4, r0
 80196ee:	b168      	cbz	r0, 801970c <__cxa_allocate_exception+0x2c>
 80196f0:	f7ff fadc 	bl	8018cac <__cxa_get_globals>
 80196f4:	2100      	movs	r1, #0
 80196f6:	2280      	movs	r2, #128	; 0x80
 80196f8:	4603      	mov	r3, r0
 80196fa:	4620      	mov	r0, r4
 80196fc:	685d      	ldr	r5, [r3, #4]
 80196fe:	3501      	adds	r5, #1
 8019700:	605d      	str	r5, [r3, #4]
 8019702:	f7ee f845 	bl	8007790 <memset>
 8019706:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801970a:	bd38      	pop	{r3, r4, r5, pc}
 801970c:	4a0b      	ldr	r2, [pc, #44]	; (801973c <__cxa_allocate_exception+0x5c>)
 801970e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8019712:	6811      	ldr	r1, [r2, #0]
 8019714:	bf98      	it	ls
 8019716:	460b      	movls	r3, r1
 8019718:	d805      	bhi.n	8019726 <__cxa_allocate_exception+0x46>
 801971a:	07d8      	lsls	r0, r3, #31
 801971c:	d505      	bpl.n	801972a <__cxa_allocate_exception+0x4a>
 801971e:	3401      	adds	r4, #1
 8019720:	085b      	lsrs	r3, r3, #1
 8019722:	2c04      	cmp	r4, #4
 8019724:	d1f9      	bne.n	801971a <__cxa_allocate_exception+0x3a>
 8019726:	f7fe ffb7 	bl	8018698 <_ZSt9terminatev>
 801972a:	2301      	movs	r3, #1
 801972c:	4804      	ldr	r0, [pc, #16]	; (8019740 <__cxa_allocate_exception+0x60>)
 801972e:	40a3      	lsls	r3, r4
 8019730:	eb00 2444 	add.w	r4, r0, r4, lsl #9
 8019734:	4319      	orrs	r1, r3
 8019736:	6011      	str	r1, [r2, #0]
 8019738:	e7da      	b.n	80196f0 <__cxa_allocate_exception+0x10>
 801973a:	bf00      	nop
 801973c:	20000fc8 	.word	0x20000fc8
 8019740:	20000fd0 	.word	0x20000fd0

08019744 <__cxa_free_exception>:
 8019744:	4b0a      	ldr	r3, [pc, #40]	; (8019770 <__cxa_free_exception+0x2c>)
 8019746:	4298      	cmp	r0, r3
 8019748:	d30e      	bcc.n	8019768 <__cxa_free_exception+0x24>
 801974a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 801974e:	4290      	cmp	r0, r2
 8019750:	d20a      	bcs.n	8019768 <__cxa_free_exception+0x24>
 8019752:	4a08      	ldr	r2, [pc, #32]	; (8019774 <__cxa_free_exception+0x30>)
 8019754:	1ac3      	subs	r3, r0, r3
 8019756:	2001      	movs	r0, #1
 8019758:	0a5b      	lsrs	r3, r3, #9
 801975a:	6811      	ldr	r1, [r2, #0]
 801975c:	fa10 f303 	lsls.w	r3, r0, r3
 8019760:	ea21 0303 	bic.w	r3, r1, r3
 8019764:	6013      	str	r3, [r2, #0]
 8019766:	4770      	bx	lr
 8019768:	3880      	subs	r0, #128	; 0x80
 801976a:	f7ed bc3d 	b.w	8006fe8 <free>
 801976e:	bf00      	nop
 8019770:	20000fd0 	.word	0x20000fd0
 8019774:	20000fc8 	.word	0x20000fc8

08019778 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 8019778:	b510      	push	{r4, lr}
 801977a:	3302      	adds	r3, #2
 801977c:	68c4      	ldr	r4, [r0, #12]
 801977e:	68c9      	ldr	r1, [r1, #12]
 8019780:	4620      	mov	r0, r4
 8019782:	6824      	ldr	r4, [r4, #0]
 8019784:	6924      	ldr	r4, [r4, #16]
 8019786:	47a0      	blx	r4
 8019788:	bd10      	pop	{r4, pc}
 801978a:	bf00      	nop

0801978c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 801978c:	4b03      	ldr	r3, [pc, #12]	; (801979c <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 801978e:	b510      	push	{r4, lr}
 8019790:	4604      	mov	r4, r0
 8019792:	6003      	str	r3, [r0, #0]
 8019794:	f7ff fed8 	bl	8019548 <_ZNSt9type_infoD1Ev>
 8019798:	4620      	mov	r0, r4
 801979a:	bd10      	pop	{r4, pc}
 801979c:	0801e800 	.word	0x0801e800

080197a0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 80197a0:	4b05      	ldr	r3, [pc, #20]	; (80197b8 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
 80197a2:	b510      	push	{r4, lr}
 80197a4:	4604      	mov	r4, r0
 80197a6:	6003      	str	r3, [r0, #0]
 80197a8:	f7ff fece 	bl	8019548 <_ZNSt9type_infoD1Ev>
 80197ac:	4620      	mov	r0, r4
 80197ae:	f7fe ff4f 	bl	8018650 <_ZdlPv>
 80197b2:	4620      	mov	r0, r4
 80197b4:	bd10      	pop	{r4, pc}
 80197b6:	bf00      	nop
 80197b8:	0801e800 	.word	0x0801e800

080197bc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 80197bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197c0:	4605      	mov	r5, r0
 80197c2:	460c      	mov	r4, r1
 80197c4:	4617      	mov	r7, r2
 80197c6:	461e      	mov	r6, r3
 80197c8:	f7ff fed4 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 80197cc:	4680      	mov	r8, r0
 80197ce:	2800      	cmp	r0, #0
 80197d0:	d125      	bne.n	801981e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x62>
 80197d2:	682b      	ldr	r3, [r5, #0]
 80197d4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80197d8:	2c00      	cmp	r4, #0
 80197da:	d023      	beq.n	8019824 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x68>
 80197dc:	6823      	ldr	r3, [r4, #0]
 80197de:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80197e2:	f7ff fec7 	bl	8019574 <_ZNKSt9type_infoeqERKS_>
 80197e6:	b1a8      	cbz	r0, 8019814 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 80197e8:	f016 0001 	ands.w	r0, r6, #1
 80197ec:	d015      	beq.n	801981a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 80197ee:	68ab      	ldr	r3, [r5, #8]
 80197f0:	68a2      	ldr	r2, [r4, #8]
 80197f2:	439a      	bics	r2, r3
 80197f4:	d110      	bne.n	8019818 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
 80197f6:	f8d5 e000 	ldr.w	lr, [r5]
 80197fa:	07db      	lsls	r3, r3, #31
 80197fc:	bf58      	it	pl
 80197fe:	f026 0601 	bicpl.w	r6, r6, #1
 8019802:	4621      	mov	r1, r4
 8019804:	4628      	mov	r0, r5
 8019806:	463a      	mov	r2, r7
 8019808:	4633      	mov	r3, r6
 801980a:	f8de 4018 	ldr.w	r4, [lr, #24]
 801980e:	47a0      	blx	r4
 8019810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019818:	4640      	mov	r0, r8
 801981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801981e:	2001      	movs	r0, #1
 8019820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019824:	f7ff f8c0 	bl	80189a8 <__cxa_bad_typeid>
 8019828:	72746e49 	.word	0x72746e49
 801982c:	6375646f 	.word	0x6375646f
 8019830:	20676e69 	.word	0x20676e69
 8019834:	6a6f7250 	.word	0x6a6f7250
 8019838:	3a746365 	.word	0x3a746365
 801983c:	00000000 	.word	0x00000000
 8019840:	6e756854 	.word	0x6e756854
 8019844:	43726564 	.word	0x43726564
 8019848:	72657972 	.word	0x72657972
 801984c:	00000000 	.word	0x00000000
 8019850:	313a3132 	.word	0x313a3132
 8019854:	00000034 	.word	0x00000034
 8019858:	202e7246 	.word	0x202e7246
 801985c:	302e3432 	.word	0x302e3432
 8019860:	32312e32 	.word	0x32312e32
 8019864:	00000000 	.word	0x00000000
 8019868:	65766544 	.word	0x65766544
 801986c:	6d706f6c 	.word	0x6d706f6c
 8019870:	20746e65 	.word	0x20746e65
 8019874:	70206e69 	.word	0x70206e69
 8019878:	72676f72 	.word	0x72676f72
 801987c:	00737365 	.word	0x00737365
 8019880:	75323025 	.word	0x75323025
 8019884:	00000000 	.word	0x00000000
 8019888:	462f2e2e 	.word	0x462f2e2e
 801988c:	52656572 	.word	0x52656572
 8019890:	5f534f54 	.word	0x5f534f54
 8019894:	532f4345 	.word	0x532f4345
 8019898:	6372756f 	.word	0x6372756f
 801989c:	54432f65 	.word	0x54432f65
 80198a0:	2e6b7361 	.word	0x2e6b7361
 80198a4:	00707063 	.word	0x00707063
 80198a8:	646e6168 	.word	0x646e6168
 80198ac:	2120656c 	.word	0x2120656c
 80198b0:	554e203d 	.word	0x554e203d
 80198b4:	00004c4c 	.word	0x00004c4c
 80198b8:	454c4449 	.word	0x454c4449
 80198bc:	00000000 	.word	0x00000000
 80198c0:	00000a0d 	.word	0x00000a0d
 80198c4:	20207525 	.word	0x20207525
 80198c8:	20206325 	.word	0x20206325
 80198cc:	36312d25 	.word	0x36312d25
 80198d0:	20202073 	.word	0x20202073
 80198d4:	20202020 	.word	0x20202020
 80198d8:	30202020 	.word	0x30202020
 80198dc:	30202020 	.word	0x30202020
 80198e0:	20202525 	.word	0x20202525
 80198e4:	0d753525 	.word	0x0d753525
 80198e8:	0000000a 	.word	0x0000000a
 80198ec:	20207525 	.word	0x20207525
 80198f0:	20206325 	.word	0x20206325
 80198f4:	36312d25 	.word	0x36312d25
 80198f8:	31252073 	.word	0x31252073
 80198fc:	25207530 	.word	0x25207530
 8019900:	25257533 	.word	0x25257533
 8019904:	35252020 	.word	0x35252020
 8019908:	000a0d75 	.word	0x000a0d75
 801990c:	20207525 	.word	0x20207525
 8019910:	20206325 	.word	0x20206325
 8019914:	36312d25 	.word	0x36312d25
 8019918:	31252073 	.word	0x31252073
 801991c:	20207530 	.word	0x20207530
 8019920:	2525313c 	.word	0x2525313c
 8019924:	35252020 	.word	0x35252020
 8019928:	000a0d75 	.word	0x000a0d75
 801992c:	2b2a2220 	.word	0x2b2a2220
 8019930:	5d3d5b2c 	.word	0x5d3d5b2c
 8019934:	00007f7c 	.word	0x00007f7c
 8019938:	4e204f4e 	.word	0x4e204f4e
 801993c:	20454d41 	.word	0x20454d41
 8019940:	46202020 	.word	0x46202020
 8019944:	20205441 	.word	0x20205441
 8019948:	00202020 	.word	0x00202020
 801994c:	4e204f4e 	.word	0x4e204f4e
 8019950:	20454d41 	.word	0x20454d41
 8019954:	46202020 	.word	0x46202020
 8019958:	32335441 	.word	0x32335441
 801995c:	00202020 	.word	0x00202020
 8019960:	65542d41 	.word	0x65542d41
 8019964:	6d2e6d61 	.word	0x6d2e6d61
 8019968:	00003370 	.word	0x00003370
 801996c:	2064654c 	.word	0x2064654c
 8019970:	72616548 	.word	0x72616548
 8019974:	61656274 	.word	0x61656274
 8019978:	00000074 	.word	0x00000074
 801997c:	656c6946 	.word	0x656c6946
 8019980:	646e6148 	.word	0x646e6148
 8019984:	0072656c 	.word	0x0072656c
 8019988:	6e676973 	.word	0x6e676973
 801998c:	63206465 	.word	0x63206465
 8019990:	00726168 	.word	0x00726168
 8019994:	6c6f6f62 	.word	0x6c6f6f62
 8019998:	00000000 	.word	0x00000000
 801999c:	6c6f6f62 	.word	0x6c6f6f62
 80199a0:	006e6165 	.word	0x006e6165
 80199a4:	72616863 	.word	0x72616863
 80199a8:	00000000 	.word	0x00000000
 80199ac:	65747962 	.word	0x65747962
 80199b0:	00000000 	.word	0x00000000
 80199b4:	62756f64 	.word	0x62756f64
 80199b8:	0000656c 	.word	0x0000656c
 80199bc:	676e6f6c 	.word	0x676e6f6c
 80199c0:	756f6420 	.word	0x756f6420
 80199c4:	00656c62 	.word	0x00656c62
 80199c8:	616f6c66 	.word	0x616f6c66
 80199cc:	00000074 	.word	0x00000074
 80199d0:	6c665f5f 	.word	0x6c665f5f
 80199d4:	3174616f 	.word	0x3174616f
 80199d8:	00003832 	.word	0x00003832
 80199dc:	69736e75 	.word	0x69736e75
 80199e0:	64656e67 	.word	0x64656e67
 80199e4:	61686320 	.word	0x61686320
 80199e8:	00000072 	.word	0x00000072
 80199ec:	00746e69 	.word	0x00746e69
 80199f0:	69736e75 	.word	0x69736e75
 80199f4:	64656e67 	.word	0x64656e67
 80199f8:	746e6920 	.word	0x746e6920
 80199fc:	00000000 	.word	0x00000000
 8019a00:	69736e75 	.word	0x69736e75
 8019a04:	64656e67 	.word	0x64656e67
 8019a08:	00000000 	.word	0x00000000
 8019a0c:	676e6f6c 	.word	0x676e6f6c
 8019a10:	00000000 	.word	0x00000000
 8019a14:	69736e75 	.word	0x69736e75
 8019a18:	64656e67 	.word	0x64656e67
 8019a1c:	6e6f6c20 	.word	0x6e6f6c20
 8019a20:	00000067 	.word	0x00000067
 8019a24:	6e695f5f 	.word	0x6e695f5f
 8019a28:	38323174 	.word	0x38323174
 8019a2c:	00000000 	.word	0x00000000
 8019a30:	69736e75 	.word	0x69736e75
 8019a34:	64656e67 	.word	0x64656e67
 8019a38:	695f5f20 	.word	0x695f5f20
 8019a3c:	3231746e 	.word	0x3231746e
 8019a40:	00000038 	.word	0x00000038
 8019a44:	726f6873 	.word	0x726f6873
 8019a48:	00000074 	.word	0x00000074
 8019a4c:	69736e75 	.word	0x69736e75
 8019a50:	64656e67 	.word	0x64656e67
 8019a54:	6f687320 	.word	0x6f687320
 8019a58:	00007472 	.word	0x00007472
 8019a5c:	64696f76 	.word	0x64696f76
 8019a60:	00000000 	.word	0x00000000
 8019a64:	61686377 	.word	0x61686377
 8019a68:	00745f72 	.word	0x00745f72
 8019a6c:	676e6f6c 	.word	0x676e6f6c
 8019a70:	6e6f6c20 	.word	0x6e6f6c20
 8019a74:	00000067 	.word	0x00000067
 8019a78:	69736e75 	.word	0x69736e75
 8019a7c:	64656e67 	.word	0x64656e67
 8019a80:	6e6f6c20 	.word	0x6e6f6c20
 8019a84:	6f6c2067 	.word	0x6f6c2067
 8019a88:	0000676e 	.word	0x0000676e
 8019a8c:	002e2e2e 	.word	0x002e2e2e
 8019a90:	69636564 	.word	0x69636564
 8019a94:	336c616d 	.word	0x336c616d
 8019a98:	00000032 	.word	0x00000032
 8019a9c:	69636564 	.word	0x69636564
 8019aa0:	366c616d 	.word	0x366c616d
 8019aa4:	00000034 	.word	0x00000034
 8019aa8:	69636564 	.word	0x69636564
 8019aac:	316c616d 	.word	0x316c616d
 8019ab0:	00003832 	.word	0x00003832
 8019ab4:	666c6168 	.word	0x666c6168
 8019ab8:	00000000 	.word	0x00000000
 8019abc:	72616863 	.word	0x72616863
 8019ac0:	745f3631 	.word	0x745f3631
 8019ac4:	00000000 	.word	0x00000000
 8019ac8:	72616863 	.word	0x72616863
 8019acc:	745f3233 	.word	0x745f3233
 8019ad0:	00000000 	.word	0x00000000
 8019ad4:	6c636564 	.word	0x6c636564
 8019ad8:	65707974 	.word	0x65707974
 8019adc:	6c756e28 	.word	0x6c756e28
 8019ae0:	7274706c 	.word	0x7274706c
 8019ae4:	00000029 	.word	0x00000029

08019ae8 <cplus_demangle_builtin_types>:
 8019ae8:	08019988 0000000b 08019988 0000000b     ................
 8019af8:	00000000 08019994 00000004 0801999c     ................
 8019b08:	00000007 00000007 080199a4 00000004     ................
 8019b18:	080199ac 00000004 00000000 080199b4     ................
 8019b28:	00000006 080199b4 00000006 00000008     ................
 8019b38:	080199bc 0000000b 080199bc 0000000b     ................
 8019b48:	00000008 080199c8 00000005 080199c8     ................
 8019b58:	00000005 00000008 080199d0 0000000a     ................
 8019b68:	080199d0 0000000a 00000008 080199dc     ................
 8019b78:	0000000d 080199dc 0000000d 00000000     ................
 8019b88:	080199ec 00000003 080199ec 00000003     ................
 8019b98:	00000001 080199f0 0000000c 08019a00     ................
 8019ba8:	00000008 00000002 00000000 00000000     ................
	...
 8019bc4:	08019a0c 00000004 08019a0c 00000004     ................
 8019bd4:	00000003 08019a14 0000000d 08019a14     ................
 8019be4:	0000000d 00000004 08019a24 00000008     ........$.......
 8019bf4:	08019a24 00000008 00000000 08019a30     $...........0...
 8019c04:	00000011 08019a30 00000011 00000000     ....0...........
	...
 8019c50:	08019a44 00000005 08019a44 00000005     D.......D.......
 8019c60:	00000000 08019a4c 0000000e 08019a4c     ....L.......L...
 8019c70:	0000000e 00000000 00000000 00000000     ................
	...
 8019c8c:	08019a5c 00000004 08019a5c 00000004     \.......\.......
 8019c9c:	00000009 08019a64 00000007 080199a4     ....d...........
 8019cac:	00000004 00000000 08019a6c 00000009     ........l.......
 8019cbc:	08019a0c 00000004 00000005 08019a78     ............x...
 8019ccc:	00000012 08019a78 00000012 00000006     ....x...........
 8019cdc:	08019a8c 00000003 08019a8c 00000003     ................
 8019cec:	00000000 08019a90 00000009 08019a90     ................
 8019cfc:	00000009 00000000 08019a9c 00000009     ................
 8019d0c:	08019a9c 00000009 00000000 08019aa8     ................
 8019d1c:	0000000a 08019aa8 0000000a 00000000     ................
 8019d2c:	08019ab4 00000004 08019ab4 00000004     ................
 8019d3c:	00000008 08019abc 00000008 08019abc     ................
 8019d4c:	00000008 00000000 08019ac8 00000008     ................
 8019d5c:	08019ac8 00000008 00000000 08019ad4     ................
 8019d6c:	00000011 08019ad4 00000011 00000000     ................
 8019d7c:	00647473 4f4c475f 5f4c4142 00000000     std._GLOBAL_....
 8019d8c:	6f6e6128 6f6d796e 6e207375 73656d61     (anonymous names
 8019d9c:	65636170 00000029 00004e61 00003d26     pace)...aN..&=..
 8019dac:	00005361 0000003d 00006161 00002626     aS..=...aa..&&..
 8019dbc:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
 8019dcc:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
 8019ddc:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
 8019dec:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
 8019dfc:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
 8019e0c:	00007464 0000002e 00007664 0000002f     dt......dv../...
 8019e1c:	00004f65 00003d5e 00006f65 0000005e     eO..^=..eo..^...
 8019e2c:	00007165 00003d3d 00006567 00003d3e     eq..==..ge..>=..
 8019e3c:	00007467 0000003e 00007869 00005d5b     gt..>...ix..[]..
 8019e4c:	0000536c 003d3c3c 0000656c 00003d3c     lS..<<=.le..<=..
 8019e5c:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
 8019e6c:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
 8019e7c:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
 8019e8c:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
 8019e9c:	0000656e 00003d21 0000676e 0000746e     ne..!=..ng..nt..
 8019eac:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
 8019ebc:	00003d7c 00006f6f 00007c7c 0000726f     |=..oo..||..or..
 8019ecc:	0000007c 00004c70 00003d2b 00006c70     |...pL..+=..pl..
 8019edc:	0000002b 00006d70 002a3e2d 00007070     +...pm..->*.pp..
 8019eec:	00002b2b 00007370 00007470 00003e2d     ++..ps..pt..->..
 8019efc:	00007571 0000003f 00004d72 00003d25     qu..?...rM..%=..
 8019f0c:	00005372 003d3e3e 00006d72 00000025     rS..>>=.rm..%...
 8019f1c:	00007372 00003e3e 00007473 657a6973     rs..>>..st..size
 8019f2c:	0020666f 00007a73 00007461 67696c61     of .sz..at..alig
 8019f3c:	20666f6e 00000000 00007a61              nof ....az..

08019f48 <cplus_demangle_operators>:
 8019f48:	08019da4 08019da8 00000002 00000002     ................
 8019f58:	08019dac 08019db0 00000001 00000002     ................
 8019f68:	08019db4 08019db8 00000002 00000002     ................
 8019f78:	08019dbc 08019dc0 00000001 00000001     ................
 8019f88:	08019dc4 08019dc0 00000001 00000002     ................
 8019f98:	08019dc8 08019dcc 00000002 00000002     ................
 8019fa8:	08019dd0 08019dd4 00000001 00000002     ................
 8019fb8:	08019dd8 08019ddc 00000001 00000001     ................
 8019fc8:	08019de0 08019de4 00000002 00000002     ................
 8019fd8:	08019de8 08019dec 00000008 00000001     ................
 8019fe8:	08019df8 08019dfc 00000001 00000001     ................
 8019ff8:	08019e00 08019e04 00000006 00000001     ................
 801a008:	08019e0c 08019e10 00000001 00000002     ................
 801a018:	08019e14 08019e18 00000001 00000002     ................
 801a028:	08019e1c 08019e20 00000002 00000002     .... ...........
 801a038:	08019e24 08019e28 00000001 00000002     $...(...........
 801a048:	08019e2c 08019e30 00000002 00000002     ,...0...........
 801a058:	08019e34 08019e38 00000002 00000002     4...8...........
 801a068:	08019e3c 08019e40 00000001 00000002     <...@...........
 801a078:	08019e44 08019e48 00000002 00000002     D...H...........
 801a088:	08019e4c 08019e50 00000003 00000002     L...P...........
 801a098:	08019e54 08019e58 00000002 00000002     T...X...........
 801a0a8:	08019e5c 08019e60 00000002 00000002     \...`...........
 801a0b8:	08019e64 08019e68 00000001 00000002     d...h...........
 801a0c8:	08019e6c 08019e70 00000002 00000002     l...p...........
 801a0d8:	08019e74 08019e78 00000002 00000002     t...x...........
 801a0e8:	08019e7c 08019e80 00000001 00000002     |...............
 801a0f8:	08019e84 08019dfc 00000001 00000002     ................
 801a108:	08019e88 08019e8c 00000002 00000001     ................
 801a118:	08019e90 08019e94 00000005 00000001     ................
 801a128:	08019e9c 08019ea0 00000002 00000002     ................
 801a138:	08019ea4 08019e80 00000001 00000001     ................
 801a148:	08019ea8 08019eac 00000001 00000001     ................
 801a158:	08019eb0 08019eb4 00000003 00000001     ................
 801a168:	08019eb8 08019ebc 00000002 00000002     ................
 801a178:	08019ec0 08019ec4 00000002 00000002     ................
 801a188:	08019ec8 08019ecc 00000001 00000002     ................
 801a198:	08019ed0 08019ed4 00000002 00000002     ................
 801a1a8:	08019ed8 08019edc 00000001 00000002     ................
 801a1b8:	08019ee0 08019ee4 00000003 00000002     ................
 801a1c8:	08019ee8 08019eec 00000002 00000001     ................
 801a1d8:	08019ef0 08019edc 00000001 00000001     ................
 801a1e8:	08019ef4 08019ef8 00000002 00000002     ................
 801a1f8:	08019efc 08019f00 00000001 00000003     ................
 801a208:	08019f04 08019f08 00000002 00000002     ................
 801a218:	08019f0c 08019f10 00000003 00000002     ................
 801a228:	08019f14 08019f18 00000001 00000002     ................
 801a238:	08019f1c 08019f20 00000002 00000002     .... ...........
 801a248:	08019f24 08019f28 00000007 00000001     $...(...........
 801a258:	08019f30 08019f28 00000007 00000001     0...(...........
 801a268:	08019f34 08019f38 00000008 00000001     4...8...........
 801a278:	08019f44 08019f38 00000008 00000001     D...8...........
	...
 801a298:	69727473 6c20676e 72657469 00006c61     string literal..
 801a2a8:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
 801a2b8:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
 801a2c8:	7361623a 735f6369 6e697274 00000067     :basic_string...
 801a2d8:	69736162 74735f63 676e6972 00000000     basic_string....
 801a2e8:	3a647473 7274733a 00676e69 3a647473     std::string.std:
 801a2f8:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
 801a308:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
 801a318:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
 801a328:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
 801a338:	00003e20 3a647473 7473693a 6d616572      >..std::istream
 801a348:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
 801a358:	65727473 633c6d61 2c726168 64747320     stream<char, std
 801a368:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
 801a378:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
 801a388:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
 801a398:	6d616572 00000000 3a647473 7361623a     ream....std::bas
 801a3a8:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
 801a3b8:	64747320 68633a3a 745f7261 74696172      std::char_trait
 801a3c8:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
 801a3d8:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
 801a3e8:	736f693a 61657274 0000006d 3a647473     :iostream...std:
 801a3f8:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
 801a408:	72616863 7473202c 633a3a64 5f726168     char, std::char_
 801a418:	69617274 633c7374 3e726168 00003e20     traits<char> >..
 801a428:	69736162 6f695f63 65727473 00006d61     basic_iostream..

0801a438 <standard_subs>:
 801a438:	00000074 08019d7c 00000003 08019d7c     t...|.......|...
 801a448:	00000003 00000000 00000000 00000061     ............a...
 801a458:	0801a2a8 0000000e 0801a2a8 0000000e     ................
 801a468:	0801a2b8 00000009 00000062 0801a2c4     ........b.......
 801a478:	00000011 0801a2c4 00000011 0801a2d8     ................
 801a488:	0000000c 00000073 0801a2e8 0000000b     ....s...........
 801a498:	0801a2f4 00000046 0801a2d8 0000000c     ....F...........
 801a4a8:	00000069 0801a33c 0000000c 0801a34c     i...<.......L...
 801a4b8:	00000031 0801a380 0000000d 0000006f     1...........o...
 801a4c8:	0801a390 0000000c 0801a3a0 00000031     ............1...
 801a4d8:	0801a3d4 0000000d 00000064 0801a3e4     ........d.......
 801a4e8:	0000000d 0801a3f4 00000032 0801a428     ........2...(...
 801a4f8:	0000000e 00646c25 00003a3a 7272414a     ....%ld.::..JArr
 801a508:	00007961 62617476 6620656c 0020726f     ay..vtable for .
 801a518:	20545456 20726f66 00000000 736e6f63     VTT for ....cons
 801a528:	63757274 6e6f6974 61747620 20656c62     truction vtable 
 801a538:	20726f66 00000000 2d6e692d 00000000     for ....-in-....
 801a548:	65707974 6f666e69 726f6620 00000020     typeinfo for ...
 801a558:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
 801a568:	00002072 65707974 6f666e69 206e6620     r ..typeinfo fn 
 801a578:	20726f66 00000000 2d6e6f6e 74726976     for ....non-virt
 801a588:	206c6175 6e756874 6f74206b 00000020     ual thunk to ...
 801a598:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
 801a5a8:	00000020 61766f63 6e616972 65722074      ...covariant re
 801a5b8:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
 801a5c8:	6176616a 616c4320 66207373 0020726f     java Class for .
 801a5d8:	72617567 61762064 62616972 6620656c     guard variable f
 801a5e8:	0020726f 65666572 636e6572 65742065     or .reference te
 801a5f8:	726f706d 20797261 20726f66 00000000     mporary for ....
 801a608:	64646968 61206e65 7361696c 726f6620     hidden alias for
 801a618:	00000020 7461535f 00000020 6363415f      ..._Sat ..._Acc
 801a628:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
 801a638:	7265706f 726f7461 00000000 7265706f     operator....oper
 801a648:	726f7461 00000020 00203a20 00006c75     ator ... : .ul..
 801a658:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
 801a668:	65757274 00000000 6176616a 73657220     true....java res
 801a678:	6372756f 00002065 6c636564 65707974     ource ..decltype
 801a688:	00002820 7261707b 0000236d 626f6c67      (..{parm#..glob
 801a698:	63206c61 74736e6f 74637572 2073726f     al constructors 
 801a6a8:	6579656b 6f742064 00000020 626f6c67     keyed to ...glob
 801a6b8:	64206c61 72747365 6f746375 6b207372     al destructors k
 801a6c8:	64657965 206f7420 00000000 6d616c7b     eyed to ....{lam
 801a6d8:	28616462 00000000 00002329 6e6e757b     bda(....)#..{unn
 801a6e8:	64656d61 70797420 00002365 6c635b20     amed type#.. [cl
 801a6f8:	20656e6f 00000000 6665647b 746c7561     one ....{default
 801a708:	67726120 00000023 003a3a7d 73657220      arg#...}::. res
 801a718:	63697274 00000074 6c6f7620 6c697461     trict... volatil
 801a728:	00000065 6e6f6320 00007473 706d6f63     e... const..comp
 801a738:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
 801a748:	00002079 002a3a3a 765f5f20 6f746365     y ..::*. __vecto
 801a758:	00002872 00002820                       r(.. (..

0801a760 <_global_impure_ptr>:
 801a760:	20000010                                ... 

0801a764 <blanks.3927>:
 801a764:	20202020 20202020 20202020 20202020                     

0801a774 <zeroes.3928>:
 801a774:	30303030 30303030 30303030 30303030     0000000000000000

0801a784 <blanks.3885>:
 801a784:	20202020 20202020 20202020 20202020                     

0801a794 <zeroes.3886>:
 801a794:	30303030 30303030 30303030 30303030     0000000000000000
 801a7a4:	00000000                                ....

0801a7a8 <p05.2449>:
 801a7a8:	00000005 00000019 0000007d 00000000     ........}.......

0801a7b8 <__mprec_tens>:
 801a7b8:	00000000 3ff00000 00000000 40240000     .......?......$@
 801a7c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 801a7d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 801a7e8:	00000000 412e8480 00000000 416312d0     .......A......cA
 801a7f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 801a808:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 801a818:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 801a828:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 801a838:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 801a848:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 801a858:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 801a868:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 801a878:	79d99db4 44ea7843                       ...yCx.D

0801a880 <__mprec_tinytens>:
 801a880:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 801a890:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 801a8a0:	64ac6f43 0ac80628                       Co.d(...

0801a8a8 <__mprec_bigtens>:
 801a8a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 801a8b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 801a8c8:	7f73bf3c 75154fdd                       <.s..O.u

0801a8d0 <blanks.3871>:
 801a8d0:	20202020 20202020 20202020 20202020                     

0801a8e0 <zeroes.3872>:
 801a8e0:	30303030 30303030 30303030 30303030     0000000000000000

0801a8f0 <GPIO_PIN>:
 801a8f0:	20001000 80004000                       ... .@..

0801a8f8 <GPIO_CLK>:
 801a8f8:	00000008 00000008 00000008 00000008     ................

0801a908 <_ZTV6CMenue>:
	...
 801a910:	08010781 080122f5 080107a5 08010819     ....."..........
 801a920:	08010851 08010871 08010889 080107c9     Q...q...........

0801a930 <_ZL12c_FontNative>:
	...

0801a948 <_ZTV11CGraphicLCD>:
	...
 801a950:	08018659 08018659 08018659 08018659     Y...Y...Y...Y...
 801a960:	08018659 08018659 08018659 08018659     Y...Y...Y...Y...
 801a970:	08018659 08010c21 08010c55 00000000     Y...!...U.......

0801a980 <_ZTV13CT6963CDriver>:
	...
 801a988:	08010f55 08011271 080113c1 08011709     U...q...........
 801a998:	0801184d 080118ad 0801104d 08011a31     M.......M...1...
 801a9a8:	08010d29 08010cd1 08010d09 08018659     )...........Y...
 801a9b8:	08018659 08018659 08018659 08018659     Y...Y...Y...Y...

0801a9c8 <_ZTV21CT6963_GPIO_Interface>:
	...
 801a9d0:	08010f55 08011271 080113c1 08011709     U...q...........
 801a9e0:	0801184d 080118ad 0801104d 08011a31     M.......M...1...
 801a9f0:	08010d29 08011b2d 08011b65 08011c41     )...-...e...A...
 801aa00:	08011d01 08011d39 08011de5 08011eb1     ....9...........

0801aa10 <c_FontSansSerif12>:
 801aa10:	00000000 00000012 0801aa28 0801b568     ........(...h...
 801aa20:	0801b668 0801b6c4                       h.......

0801aa28 <_ZL35Microsoft_Sans_Serif__12_char_table>:
	...
 801aa3c:	001c0000 00220022 00410041 00410041     ....".".A.A.A.A.
 801aa4c:	00410041 00220022 0000001c 00000000     A.A.".".........
 801aa5c:	00000000 10107010 10101010 10101010     .....p..........
	...
 801aa74:	0022001c 00010041 00020001 00080004     ..".A...........
 801aa84:	00200010 007f0040 00000000 00000000     .. .@...........
 801aa94:	00000000 0022001c 00010041 000c0002     ......".A.......
 801aaa4:	00010002 00410001 001c0022 00000000     ......A.".......
	...
 801aabc:	00060002 000a0006 00120012 00420022     ............".B.
 801aacc:	0002007f 00020002 00000000 00000000     ................
 801aadc:	00000000 0040007f 00400040 0062005c     ......@.@.@.\.b.
 801aaec:	00010001 00410001 001c0022 00000000     ......A.".......
	...
 801ab04:	0022001c 00400041 0062005c 00410041     ..".A.@.\.b.A.A.
 801ab14:	00410041 001c0022 00000000 00000000     A.A."...........
 801ab24:	00000000 0001007f 00020001 00020002     ................
 801ab34:	00040004 00080004 00080008 00000000     ................
	...
 801ab4c:	0022001c 00410041 001c0022 00410022     ..".A.A."...".A.
 801ab5c:	00410041 001c0022 00000000 00000000     A.A."...........
 801ab6c:	00000000 0022001c 00410041 00410041     ......".A.A.A.A.
 801ab7c:	001d0023 00410001 001c0022 00000000     #.....A.".......
	...
 801ab94:	00020002 00050005 80088008 c01f4010     .............@..
 801aba4:	20202020 10401040 00000000 00000000         @.@.........
 801abb4:	00000000 0041007e 80408040 007e0041     ....~.A.@.@.A.~.
 801abc4:	80400041 80408040 007e0041 00000000     A.@.@.@.A.~.....
	...
 801abdc:	c030000f 20404020 00400040 00400040     ..0. @@ @.@.@.@.
 801abec:	40202040 000fc030 00000000 00000000     @  @0...........
 801abfc:	00000000 8041007e 40408040 40404040     ....~.A.@.@@@@@@
 801ac0c:	40404040 80404040 007e8041 00000000     @@@@@@@.A.~.....
	...
 801ac24:	0040807f 00400040 007f0040 00400040     ..@.@.@.@...@.@.
 801ac34:	00400040 807f0040 00000000 00000000     @.@.@...........
 801ac44:	00000000 0040807f 00400040 007f0040     ......@.@.@.@...
 801ac54:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
	...
 801ac6c:	c030000f 20404020 00400040 2040e041     ..0. @@ @.@.A.@ 
 801ac7c:	60202040 200fe030 00000000 00000000     @  `0.. ........
 801ac8c:	00000000 80408040 80408040 807f8040     ....@.@.@.@.@...
 801ac9c:	80408040 80408040 80408040 00000000     @.@.@.@.@.@.....
 801acac:	00000000 40400000 40404040 40404040     ......@@@@@@@@@@
 801acbc:	00004040 00000000 02020202 02020202     @@..............
 801accc:	3c424242 00000000 00000000 00420041     BBB<........A.B.
 801acdc:	00480044 00600050 00480050 00420044     D.H.P.`.P.H.D.B.
 801acec:	80400041 00000000 00000000 00000000     A.@.............
 801acfc:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 801ad0c:	00400040 007f0040 00000000 00000000     @.@.@...........
 801ad1c:	00000000 40404040 c060c060 40514051     ....@@@@`.`.Q@Q@
 801ad2c:	404a404a 40444044 40404040 00000000     J@J@D@D@@@@@....
	...
 801ad44:	00610041 00510061 00490051 00450049     A.a.a.Q.Q.I.I.E.
 801ad54:	00430045 00410043 00000000 00000000     E.C.C.A.........
 801ad64:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 801ad74:	20402040 40202040 000fc030 00000000     @ @ @  @0.......
	...
 801ad8c:	0041007e 80408040 00418040 0040007e     ~.A.@.@.@.A.~.@.
 801ad9c:	00400040 00400040 00000000 00000000     @.@.@.@.........
 801adac:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 801adbc:	20402040 40212042 400fc030 00002000     @ @ B !@0..@. ..
	...
 801add4:	0041007e 80408040 00418040 0041007e     ~.A.@.@.@.A.~.A.
 801ade4:	80408040 40408040 00000000 00000000     @.@.@.@@........
 801adf4:	00000000 8020001f 00404040 001f0020     ...... .@@@. ...
 801ae04:	40008000 40404000 001f8020 00000000     ...@.@@@ .......
	...
 801ae1c:	0004c07f 00040004 00040004 00040004     ................
 801ae2c:	00040004 00040004 00000000 00000000     ................
 801ae3c:	00000000 80408040 80408040 80408040     ....@.@.@.@.@.@.
 801ae4c:	80408040 80408040 001e0021 00000000     @.@.@.@.!.......
	...
 801ae64:	10401040 20202020 40104010 80088008     @.@.    .@.@....
 801ae74:	00050005 00020002 00000000 00000000     ................
 801ae84:	00000000 01400000 00814000 20008220     ......@..@.. .. 
 801ae94:	42210082 00441100 0a004411 280a0028     ..!B..D..D..(..(
 801aea4:	00100400 04001004 00000010 00000000     ................
	...
 801aebc:	10400000 40102020 00058008 00020002     ..@.  .@........
 801aecc:	80080005 20204010 00001040 00000000     .....@  @.......
 801aedc:	00000000 10400000 40102020 00058008     ......@.  .@....
 801aeec:	00020002 00020002 00020002 00000002     ................
	...
 801af04:	807f0000 00018000 00020002 00080004     ................
 801af14:	00100010 00400020 0000807f 00000000     .... .@.........
	...
 801af30:	0041003e 00010001 0041003f 00410041     >.A.....?.A.A.A.
 801af40:	0000803e 00000000 00000000 00400000     >.............@.
 801af50:	00400040 0062005c 00410041 00410041     @.@.\.b.A.A.A.A.
 801af60:	00620041 0000005c 00000000 00000000     A.b.\...........
	...
 801af78:	0022001c 00400041 00400040 00220041     ..".A.@.@.@.A.".
 801af88:	0000001c 00000000 00000000 00010000     ................
 801af98:	00010001 0023001d 00410041 00410041     ......#.A.A.A.A.
 801afa8:	00230041 0000001d 00000000 00000000     A.#.............
	...
 801afc0:	0022001c 00410041 0040007f 00220041     ..".A.A...@.A.".
 801afd0:	0000001c 00000000 00000000 7c10100c     ...............|
 801afe0:	10101010 10101010 00000000 00000000     ................
 801aff0:	00000000 001d0000 00410023 00410041     ........#.A.A.A.
 801b000:	00410041 001d0023 00010001 003c0002     A.A.#.........<.
 801b010:	00000000 00400040 005c0040 00410062     ....@.@.@.\.b.A.
 801b020:	00410041 00410041 00410041 00000000     A.A.A.A.A.A.....
 801b030:	00000000 00400000 40404000 40404040     ......@..@@@@@@@
 801b040:	00004040 00000000 20000020 20202020     @@...... ..     
 801b050:	20202020 40202020 00000000 00400040            @....@.@.
 801b060:	00420040 00480044 00700050 00440048     @.B.D.H.P.p.H.D.
 801b070:	00410042 00000000 00000000 40400000     B.A...........@@
 801b080:	40404040 40404040 00004040 00000000     @@@@@@@@@@......
	...
 801b098:	2065c058 10421042 10421042 10421042     X.e B.B.B.B.B.B.
 801b0a8:	00001042 00000000 00000000 00000000     B...............
 801b0b8:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 801b0c8:	00410041 00000041 00000000 00000000     A.A.A...........
	...
 801b0e0:	0022001c 00410041 00410041 00220041     ..".A.A.A.A.A.".
 801b0f0:	0000001c 00000000 00000000 00000000     ................
 801b100:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 801b110:	00620041 0040005c 00400040 00000040     A.b.\.@.@.@.@...
	...
 801b128:	0023001d 00410041 00410041 00230041     ..#.A.A.A.A.A.#.
 801b138:	0001001d 00010001 00000001 58000000     ...............X
 801b148:	40404060 40404040 00000000 00000000     `@@@@@@@........
 801b158:	40423c00 02023c40 00003c42 00000000     .<B@@<..B<......
 801b168:	7c101010 10101010 08101010 00000000     ...|............
	...
 801b180:	00410000 00410041 00410041 00410041     ..A.A.A.A.A.A.A.
 801b190:	001d0023 00000000 00000000 00000000     #...............
 801b1a0:	00000000 00410000 00220041 00140022     ......A.A."."...
 801b1b0:	00080014 00080008 00000000 00000000     ................
	...
 801b1c8:	10420000 10421042 20252025 c018a028     ..B.B.B.% % (...
 801b1d8:	40104010 00000000 00000000 00000000     .@.@............
 801b1e8:	00000000 00410000 00220022 00080014     ......A.".".....
 801b1f8:	00220014 00410022 00000000 00000000     ..".".A.........
	...
 801b210:	00410000 00220041 00140022 00080014     ..A.A.".".......
 801b220:	00080008 00100010 00600010 00000000     ..........`.....
 801b230:	04027e00 20101008 00007e40 00000000     .~..... @~......
	...
 801b248:	40000000 00000000 00000000 00000000     ...@............
 801b258:	00000000 20202000 00000040 00000000     .....   @.......
 801b268:	00000020 20000000 00402020 00000000      ......   @.....
 801b278:	00400000 00000000 00004000 00000000     ..@......@......
 801b288:	00000000 78000000 00000000 00000000     .......x........
	...
 801b2b8:	0000c07f 00000000 00000000 00080000     ................
 801b2c8:	00080008 0008007f 00080008 00000000     ................
	...
 801b2e0:	54100000 00282838 00000000 00000000     ...T8((.........
 801b2f0:	00000000 80080000 80088008 0011c03f     ............?...
 801b300:	00110011 807f0011 00220022 00000022     ........"."."...
	...
 801b31c:	00000022 0022001c 00410041 00410041     ".....".A.A.A.A.
 801b32c:	00220041 0000001c 00000000 00000000     A.".............
 801b33c:	00000000 00000012 0041003e 00010001     ........>.A.....
 801b34c:	0041003f 00410041 0000803e 00000000     ?.A.A.A.>.......
	...
 801b364:	00000022 00410041 00410041 00410041     "...A.A.A.A.A.A.
 801b374:	00230041 0000001d 00000000 00090000     A.#.............
 801b384:	000f0000 4020c030 20402040 20402040     ....0. @@ @ @ @ 
 801b394:	20402040 c0304020 0000000f 00000000     @ @  @0.........
 801b3a4:	80080000 00020000 00050002 80080005     ................
 801b3b4:	40108008 2020c01f 10402020 00001040     ...@..    @.@...
 801b3c4:	00000000 00120000 80400000 80408040     ..........@.@.@.
 801b3d4:	80408040 80408040 80408040 00218040     @.@.@.@.@.@.@.!.
 801b3e4:	0000001e 00000000 00000000 001c0000     ................
 801b3f4:	00410022 00010001 00040002 00080008     ".A.............
 801b404:	00000000 00000008 00000000 00000000     ................
 801b414:	40404040 40404040 40000040 00000000     @@@@@@@@@..@....
 801b424:	48300000 00003048 00000000 00000000     ..0HH0..........
 801b434:	00000000 00442810 00000000 00000000     .....(D.........
 801b444:	00000000 08080000 10101010 20202020     ............    
 801b454:	00004040 00000000 20202010 40404040     @@.......   @@@@
 801b464:	40404040 10202020 20400000 10102020     @@@@   ...@   ..
 801b474:	10101010 20201010 00004020 001c0000     ......   @......
 801b484:	00220022 00140022 00240018 40412042     ".".".....$.B A@
 801b494:	40218040 0000201e 00000000 00000000     @.!@. ..........
 801b4a4:	20380000 40444044 00458044 70020039     ..8 D@D@D.E.9..p
 801b4b4:	88048802 88088808 00007010 00000000     .........p......
 801b4c4:	00000000 001c0008 0049002a 00280048     ........*.I.H.(.
 801b4d4:	000a001c 00090009 002a0049 0008001c     ........I.*.....
	...
 801b4ec:	e0030000 0410180c 2226e421 22482244     ........!.&"D"H"
 801b4fc:	42484248 cc484448 00207027 e0071018     HBHBHDH.'p .....
 801b50c:	00000000 40404040 40404040 40404040     ....@@@@@@@@@@@@
 801b51c:	40404040 00000000 00000000 00030000     @@@@............
 801b52c:	0030000c 00300040 0003000c 00000000     ..0.@.0.........
	...
 801b54c:	00600000 00060018 00060001 00600018     ..`...........`.
	...

0801b568 <_ZL38Microsoft_Sans_Serif__12_mapping_table>:
	...
 801b588:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 801b598:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 801b5a8:	0d0c0b58 11100f0e 15141312 19181716     X...............
 801b5b8:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 801b5c8:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 801b5d8:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 801b618:	00000050 00000000 00000000 00000000     P...............
 801b628:	00000000 0000004c 00000000 00000000     ....L...........
 801b638:	00000000 004b0000 00000000 0000004d     ......K.....M...
 801b648:	00000000 00000049 00000000 00000000     ....I...........
 801b658:	00000000 00480000 00000000 0000004a     ......H.....J...

0801b668 <_ZL36Microsoft_Sans_Serif__12_width_table>:
 801b668:	09050905 09090909 0d090909 0a0b0c0a     ................
 801b678:	030a0c0a 0b090a08 0c0a0c09 0a0b0b0b     ................
 801b688:	0d0d110d 09090a0a 09070909 09040309     ................
 801b698:	09090d03 08060909 0d090907 03080909     ................
 801b6a8:	06030404 0b07090b 0c090a09 03090a0d     ................
 801b6b8:	05060706 090e0c05 09090310              ............

0801b6c4 <_ZL37Microsoft_Sans_Serif__12_offset_table>:
 801b6c4:	00000000 00000012 00000036 00000048     ........6...H...
 801b6d4:	0000006c 00000090 000000b4 000000d8     l...............
 801b6e4:	000000fc 00000120 00000144 00000168     .... ...D...h...
 801b6f4:	0000018c 000001b0 000001d4 000001f8     ................
 801b704:	0000021c 00000240 00000264 00000288     ....@...d.......
 801b714:	0000029a 000002ac 000002d0 000002f4     ................
 801b724:	00000318 0000033c 00000360 00000384     ....<...`.......
 801b734:	000003a8 000003cc 000003f0 00000414     ................
 801b744:	00000438 0000045c 00000492 000004b6     8...\...........
 801b754:	000004da 000004fe 00000522 00000546     ........"...F...
 801b764:	0000056a 0000058e 000005b2 000005c4     j...............
 801b774:	000005e8 0000060c 0000061e 00000630     ............0...
 801b784:	00000654 00000666 0000068a 000006ae     T...f...........
 801b794:	000006d2 000006f6 0000071a 0000072c     ............,...
 801b7a4:	0000073e 00000750 00000774 00000798     >...P...t.......
 801b7b4:	000007bc 000007e0 00000804 00000816     ................
 801b7c4:	00000828 0000083a 0000084c 0000085e     (...:...L...^...
 801b7d4:	00000870 00000894 000008b8 000008ca     p...............
 801b7e4:	000008ee 00000912 00000936 0000095a     ........6...Z...
 801b7f4:	0000097e 000009a2 000009c6 000009ea     ~...............
 801b804:	000009fc 00000a0e 00000a20 00000a32     ........ ...2...
 801b814:	00000a44 00000a56 00000a7a 00000a9e     D...V...z.......
 801b824:	00000ac2 00000ae6 00000af8 00000b1c     ................

0801b834 <c_FontSansSerif26>:
 801b834:	00000000 00000028 0801b84c 0801e074     ....(...L...t...
 801b844:	0801e174 0801e1d0                       t.......

0801b84c <_ZL35Microsoft_Sans_Serif__26_char_table>:
	...
 801b8b0:	00f80700 1f00fc0f 3f3f00fe 000f3c00     ..........??.<..
 801b8c0:	78800f7c 07788007 80077880 70800778     |..x..x..x..x..p
 801b8d0:	03708003 80037080 70800370 07788003     ..p..p..p..p..x.
 801b8e0:	80077880 78800778 0f7c8007 000f3c80     .x..x..x..|..<..
 801b8f0:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 801b920:	c0010000 c003c001 c01fc007 c07fc07f     ................
 801b930:	c001c07d c001c001 c001c001 c001c001     }...............
 801b940:	c001c001 c001c001 c001c001 c001c001     ................
 801b950:	c001c001 00000000 00000000 00000000     ................
	...
 801b978:	00fe0300 1f00ff0f 9f1f80ff c0073ec0     .............>..
 801b988:	38c0033c 0100c001 c00300c0 00c00300     <..8............
 801b998:	0700c003 000f0080 00003e00 f800007c     .........>..|...
 801b9a8:	00f00300 0f00e007 001f0080 00003e00     .............>..
 801b9b8:	7f00003c ff7fc0ff c0ff7fc0 00000000     <...............
	...
 801b9f0:	00f80700 3f00fc1f 3f3e00fe 000f7800     .......?..>?.x..
 801ba00:	70000778 0f000007 000f0000 01007e00     x..p.........~..
 801ba10:	fc0100fc 00fe0100 00003f00 0700800f     .........?......
 801ba20:	80030080 70800300 07788007 800f7c80     .......p..x..|..
 801ba30:	3f003f3f fe1f00ff 00f80700 00000000     ??.?............
	...
 801ba68:	001c0000 00003c00 7c00007c 00fc0000     .....<..|..|....
 801ba78:	0100fc01 9c0300dc 009c0700 0e001c07     ................
 801ba88:	1c1e001c 001c1c00 78001c38 1c70001c     ........8..x..p.
 801ba98:	80ff7f00 7f80ff7f 1c0080ff 001c0000     ................
 801baa8:	00001c00 1c00001c 001c0000 00000000     ................
	...
 801bae0:	00ff1f00 3f00ff3f 003c00ff 00003c00     ....?..?..<..<..
 801baf0:	3c00003c 003c0000 00f83f00 3f00fe3f     <..<..<..?..?..?
 801bb00:	3f3f00ff 800f3c00 00800700 03008007     ..??.<..........
 801bb10:	80030080 70800300 07788007 800f7c80     .......p..x..|..
 801bb20:	3f003f3f fc1f00fe 00f80700 00000000     ??.?............
	...
 801bb58:	00fc0300 1f00fe0f 9f1f00ff 80073e80     .............>..
 801bb68:	7c80073c 00780000 00007800 7f00f87b     <..|..x..x..{...
 801bb78:	ff7f00fe 003f7f00 78800f7c 07708007     ......?.|..x..p.
 801bb88:	80037880 78800378 077c8007 800f3c80     .x..x..x..|..<..
 801bb98:	1f003f3f fe0f00ff 00f80700 00000000     ??..............
	...
 801bbd0:	80ff7f00 7f80ff7f 070080ff 000f0080     ................
 801bbe0:	00000f00 1e00000f 001e0000 00003c00     .............<..
 801bbf0:	7800003c 00780000 00007800 f00000f0     <..x..x..x......
 801bc00:	00e00100 0300e001 c00300c0 00c00300     ................
 801bc10:	07008007 000f0080 00000f00 00000000     ................
	...
 801bc48:	00f80700 1f00fc0f 3f3f00fe 000f3c00     ..........??.<..
 801bc58:	38000f3c 0f3c0007 000f3c00 1f001f3e     <..8..<..<..>...
 801bc68:	fc0f00fe 00f80700 3f00fe1f 1f7e00ff     ...........?..~.
 801bc78:	80077880 70800778 07788003 80077880     .x..x..p..x..x..
 801bc88:	3f803f7f fe1f00ff 00f80700 00000000     .?.?............
	...
 801bcc0:	00f80700 3f00fc1f 3f3f00fe 000f7c00     .......?..??.|..
 801bcd0:	78800f78 07708007 80077080 78800378     x..x..p..p..x..x
 801bce0:	0f7c8007 803f3f80 1f80ff3f f70780ff     ..|..??.?.......
 801bcf0:	80070080 00800700 0f78800f 001f7800     ..........x..x..
 801bd00:	3f007e7e fc1f00fe 00f00f00 00000000     ~~.?............
	...
 801bd40:	00003e00 00007e00 00007e00 00007f00     .>...~...~......
 801bd50:	0000f700 0080e700 0080e700 0080e301     ................
 801bd60:	00c0c301 00c0c103 00e0c103 00e08103     ................
 801bd70:	00e08007 00f08007 00f00007 00f8ff0f     ................
 801bd80:	00f8ff0f 00f8ff1f 003c001e 003c001e     ..........<...<.
 801bd90:	001e003c 001e003c 001e0038 000f0078     <...<...8...x...
 801bda0:	000f0078 00000000 00000000 00000000     x...............
	...
 801bdd8:	00fe7f00 7f00ff7f 1f7080ff c00370c0     ..........p..p..
 801bde8:	70c00370 0370c001 c00370c0 7f801f70     p..p..p..p..p...
 801bdf8:	ff7f00ff 80ff7f00 70c00f70 0170e003     ........p..p..p.
 801be08:	e00070e0 70e00070 0170e000 e00370e0     .p..p..p..p..p..
 801be18:	7fc00f70 ff7fc0ff 00fe7f80 00000000     p...............
	...
 801be50:	80ff0100 0fe0ff03 e31ff0ff f8001ff8     ................
 801be60:	3c3c003e 00783c00 0000781c 78000078     >.<<.<x..x..x..x
 801be70:	00700000 00007000 78000070 00780000     ..p..p..p..x..x.
 801be80:	00007800 3c1c0078 003e3c00 f8001f3c     .x..x..<.<>.<...
 801be90:	0ff8e31f ff03f0ff 80ff01e0 00000000     ................
	...
 801bec8:	00fc7f00 7f80ff7f 1f70c0ff f00370e0     ..........p..p..
 801bed8:	70f00070 0070f000 78007078 70780070     p..p..p.xp.xp.xp
 801bee8:	00703800 38007038 70380070 00707800     .8p.8p.8p.8p.xp.
 801bef8:	78007078 70780070 0170f000 f00370f0     xp.xp.xp..p..p..
 801bf08:	7fe01f70 ff7fc0ff 00fc7f80 00000000     p...............
	...
 801bf40:	c0ff7f00 7fc0ff7f 0070c0ff 00007000     ..........p..p..
 801bf50:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 801bf60:	ff7f0000 80ff7f80 7080ff7f 00700000     ...........p..p.
 801bf70:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801bf80:	7f000070 ff7fe0ff e0ff7fe0 00000000     p...............
	...
 801bfb8:	80ff7f00 7f80ff7f 007080ff 00007000     ..........p..p..
 801bfc8:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 801bfd8:	fe7f0000 00fe7f00 7000fe7f 00700000     ...........p..p.
 801bfe8:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801bff8:	70000070 00700000 00007000 00000000     p..p..p..p......
	...
 801c038:	00c0ff00 00f0ff03 00fcff07 00fee10f     ................
 801c048:	003e801f 001f003e 000f003c 0007007c     ..>.>...<...|...
 801c058:	00000078 00000078 00000078 00000070     x...x...x...p...
 801c068:	00ff0370 00ff0370 00ff0378 00070078     p...p...x...x...
 801c078:	00070078 00070078 000f003c 000f003e     x...x...<...>...
 801c088:	003f001f 00ffe10f 00ffff07 00f7ff03     ..?.............
 801c098:	00c7ff00 00000000 00000000 00000000     ................
	...
 801c0d0:	70007000 70700070 00707000 70007070     .p.pp.pp.pp.pp.p
 801c0e0:	70700070 00707000 70007070 7f700070     p.pp.pp.pp.pp.p.
 801c0f0:	ff7ff0ff f0ff7ff0 70700070 00707000     ........p.pp.pp.
 801c100:	70007070 70700070 00707000 70007070     pp.pp.pp.pp.pp.p
 801c110:	70700070 00707000 70007070 00000000     p.pp.pp.pp.p....
	...
 801c138:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801c148:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 801c168:	0e000000 0e000e00 0e000e00 0e000e00     ................
 801c178:	0e000e00 0e000e00 0e000e00 0e000e00     ................
 801c188:	0e000e00 0e700e70 1e781e78 fc3f7e7e     ....p.p.x.x.~~?.
 801c198:	f00ff81f 00000000 00000000 00000000     ................
	...
 801c1c0:	f8007000 70e00170 0770c003 000f7080     .p..p..p..p..p..
 801c1d0:	70001e70 7870003c 00f07000 7300e071     p..p<.px.p..q..s
 801c1e0:	f07700e0 00f07f00 7c00787e 3e78003c     ..w.....~x.|<.x>
 801c1f0:	001e7800 70000f70 0770800f c00370c0     .x..p..p..p..p..
 801c200:	70e00170 0070f001 780070f0 00000000     p..p..p..p.x....
	...
 801c238:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801c248:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 801c258:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
 801c268:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801c278:	7f000070 ff7f00ff 00ff7f00 00000000     p...............
	...
 801c2b8:	001f007c 003f007e 003f007e 003f007e     |...~.?.~.?.~.?.
 801c2c8:	007f007f 007f007f 007f007f 00f78077     ............w...
 801c2d8:	00f78077 00f78077 00e7c173 00e7c173     w...w...s...s...
 801c2e8:	00e7c173 00c7e371 00c7e371 00c7e371     s...q...q...q...
 801c2f8:	0087f770 0087f770 0087f770 00077f70     p...p...p...p...
 801c308:	00077f70 00077f70 00073e70 00073e70     p...p...p>..p>..
 801c318:	00073e70 00000000 00000000 00000000     p>..............
	...
 801c350:	70007800 7c70007c 007e7000 70007f70     .x.p|.p|.p~.p..p
 801c360:	7f70007f c0777080 70c07370 7170e073     ..p..pw.ps.ps.pq
 801c370:	f07070e0 70f87070 70707870 3e70703c     .pp.pp.ppxpp<pp>
 801c380:	701e7070 70701f70 0770f00f f00770f0     pp.pp.pp..p..p..
 801c390:	70f00370 0170f001 f00070f0 00000000     p..p..p..p......
	...
 801c3d0:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 801c3e0:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 801c3f0:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 801c400:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 801c410:	000f0078 000f0078 001e003c 003e003e     x...x...<...>.>.
 801c420:	007c001f 00f8e30f 00f0ff07 00e0ff03     ..|.............
 801c430:	0080ff00 00000000 00000000 00000000     ................
	...
 801c468:	00ff7f00 7f80ff7f 0f70c0ff e00170e0     ..........p..p..
 801c478:	70e00170 0070e000 e00070e0 70e00170     p..p..p..p..p..p
 801c488:	0f70e003 c0ff7fc0 7f80ff7f 007000fe     ..p...........p.
 801c498:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801c4a8:	70000070 00700000 00007000 00000000     p..p..p..p......
	...
 801c4e8:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 801c4f8:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 801c508:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 801c518:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 801c528:	000f0078 001f0178 00de033c 00fe073e     x...x...<...>...
 801c538:	00fc031f 00f8e30f 00fcff07 00feff03     ................
 801c548:	009fff00 000f0000 00060000 00000000     ................
	...
 801c580:	80ff7f00 7fc0ff7f 0770e0ff f00070f0     ..........p..p..
 801c590:	70f00070 00707000 f0007070 70f00070     p..p.pp.pp..p..p
 801c5a0:	ff7fe007 c0ff7fe0 7000ff7f 0770801f     ...........p..p.
 801c5b0:	c00370c0 70e00170 0070e001 f00070e0     .p..p..p..p..p..
 801c5c0:	70f00070 00707800 78007078 00000000     p..p.xp.xp.x....
	...
 801c5f8:	00fe0300 1f00ff0f 8f3f80ff e0033cc0     ..........?..<..
 801c608:	38e0013c 003ce001 00003ee0 1f00803f     <..8..<..>..?...
 801c618:	ff0f00f8 c0ff0300 00e07f00 0100f007     ................
 801c628:	f00000f0 78700070 00787000 f0017ef0     ....p.px.px..~..
 801c638:	1fe0873f ff0fe0ff 00ff03c0 00000000     ?...............
	...
 801c670:	f0ff7f00 7ff0ff7f 7000f0ff 00700000     ...........p..p.
 801c680:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801c690:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 801c6a0:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
 801c6b0:	00007000 70000070 00700000 00000000     .p..p..p..p.....
	...
 801c6e8:	70007000 70700070 00707000 70007070     .p.pp.pp.pp.pp.p
 801c6f8:	70700070 00707000 70007070 70700070     p.pp.pp.pp.pp.pp
 801c708:	00707000 70007070 70700070 00707000     .pp.pp.pp.pp.pp.
 801c718:	f0007870 78f00078 0078f000 f0017cf0     px..x..x..x..|..
 801c728:	1fe08f3f ff0fc0ff 00ff0780 00000000     ?...............
	...
 801c768:	000f0078 000f0078 001e003c 001e003c     x...x...<...<...
 801c778:	001e003c 003c001e 003c001e 0038000e     <.....<...<...8.
 801c788:	0078000f 0078000f 00700007 00f08007     ..x...x...p.....
 801c798:	00f08007 00e0c103 00e0c103 00c0c101     ................
 801c7a8:	00c0e301 00c0e301 0080e300 0080f700     ................
 801c7b8:	00007700 00007f00 00007f00 00003e00     .w...........>..
 801c7c8:	00003e00 00000000 00000000 00000000     .>..............
	...
 801c80c:	78000000 c003e000 03f00178 f00178c0     ...x....x....x..
 801c81c:	0138c003 3c8003f0 8007f803 07b8033c     ..8....<....<...
 801c82c:	b8033c80 071c8007 1e0007bc 000f1c07     .<..............
 801c83c:	0f1c071e 1e0f0e00 0e0e000e 0f000e0e     ................
 801c84c:	001e0e0e 1e0f1e0f 071c0700 1c07001c     ................
 801c85c:	07001c07 003c079c b803b803 03b80300     ......<.........
 801c86c:	f80300b8 0300f803 00f803f8 f001f001     ................
 801c87c:	01f00100 f00100f0 0000f001 00e000e0     ................
	...
 801c8d0:	001e003c 003c001e 007c001f 00f8800f     <.....<...|.....
 801c8e0:	00f08007 00e0c103 00e0e303 00c0e301     ................
 801c8f0:	0080f700 00007f00 00007f00 00003e00     .............>..
 801c900:	00003e00 00007f00 0080ff00 0080f700     .>..............
 801c910:	00c0e301 00e0c103 00f0c107 00f08007     ................
 801c920:	0078000f 007c001f 003e003e 001e003c     ..x...|.>.>.<...
 801c930:	000f0078 00000000 00000000 00000000     x...............
	...
 801c970:	000f0078 001e003c 003e003e 003c001e     x...<...>.>...<.
 801c980:	0078000f 00f8800f 00f08007 00e0c103     ..x.............
 801c990:	00e0e303 00c0e301 0080f700 0080ff00     ................
 801c9a0:	00007f00 00003e00 00001c00 00001c00     .....>..........
 801c9b0:	00001c00 00001c00 00001c00 00001c00     ................
 801c9c0:	00001c00 00001c00 00001c00 00001c00     ................
 801c9d0:	00001c00 00000000 00000000 00000000     ................
	...
 801ca08:	c0ff3f00 3fc0ff3f 0300c0ff c00700c0     .?..?..?........
 801ca18:	00800f00 1e00000f 003e0000 00007c00     ..........>..|..
 801ca28:	f8000078 00f00100 0300e003 c00700c0     x...............
 801ca38:	00800f00 1e00000f 003e0000 00007c00     ..........>..|..
 801ca48:	7f000078 ff7fc0ff c0ff7fc0 00000000     x...............
	...
 801ca90:	07000000 fe1f00f8 00ff1f00 3c001f3f     ............?..<
 801caa0:	0738000f 00070000 1f00ff07 ff3f00ff     ..8...........?.
 801cab0:	00877f00 7800077c 0f700007 001f7800     ....|..x..p..x..
 801cac0:	7f007f7c ff3f00ff 00f71f00 00000000     |.....?.........
	...
 801caf8:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801cb08:	73000070 fc7f00f8 00fe7f00 7c003e7f     p..s.........>.|
 801cb18:	0f78001f 000f7000 70000f70 07700007     ..x..p..p..p..p.
 801cb28:	00077000 70000f70 0f70000f 001e7800     .p..p..p..p..x..
 801cb38:	7f003e7e f87f00fc 00f07f00 00000000     ~>..............
	...
 801cb80:	07000000 fe0f00fc 00ff1f00 3c801f3f     ............?..<
 801cb90:	03788007 00007880 70000078 00700000     ..x..x..x..p..p.
 801cba0:	00007000 78000078 03780000 80073c80     .p..x..x..x..<..
 801cbb0:	1f801f3f fe0f00ff 00fc0700 00000000     ?...............
	...
 801cbe8:	00070000 00000700 07000007 00070000     ................
 801cbf8:	07000700 ff0f00f7 00ff1f00 3c003f3e     ............>?.<
 801cc08:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 801cc18:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 801cc28:	3f007f3e ff1f00ff 00f70f00 00000000     >..?............
	...
 801cc70:	07000000 fc0f00f8 00fe1f00 3c003f3f     ............??.<
 801cc80:	0778000f 80077880 7f800778 ff7f80ff     ..x..x..x.......
 801cc90:	80ff7f80 78000070 03780000 80073c80     ....p..x..x..<..
 801cca0:	1f801f3f fe0f00ff 00fc0700 00000000     ?...............
	...
 801ccd0:	e0070000 e00fe00f 000e000f c07f000e     ................
 801cce0:	c07fc07f 000e000e 000e000e 000e000e     ................
 801ccf0:	000e000e 000e000e 000e000e 000e000e     ................
 801cd00:	000e000e 00000000 00000000 00000000     ................
	...
 801cd38:	07000000 ff0f00ff 00ff1f00 3c003f3e     ............>?.<
 801cd48:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 801cd58:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 801cd68:	3f007f3e ff1f00ff 00e70f00 00000f00     >..?............
 801cd78:	0f3c000f 003e3e00 1f00fe3f f80f00fc     ..<..>>.?.......
	...
 801cd98:	00700000 00700070 00700070 f8730070     ..p.p.p.p.p.p.s.
 801cda8:	fe7ffc7f 1e7c3e7f 0e701e78 0e700e70     .....>|.x.p.p.p.
 801cdb8:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 801cdc8:	0e700e70 00000000 00000000 00000000     p.p.............
	...
 801cde0:	70000000 00007070 70707000 70707070     ...ppp...ppppppp
 801cdf0:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 801ce10:	00070000 00070007 00000000 00070000     ................
 801ce20:	00070007 00070007 00070007 00070007     ................
 801ce30:	00070007 00070007 00070007 00070007     ................
 801ce40:	00070007 00070007 004f000f 007e007f     ..........O...~.
 801ce50:	0000007c 00000000 00000000 00000000     |...............
	...
 801ce68:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 801ce78:	70000070 7c70003e 00f87000 7100f071     p..p>.p|.p..q..q
 801ce88:	c07300e0 00807700 7f00807f c07f00c0     ..s..w..........
 801ce98:	00e07900 7000f079 787000f0 007c7000     .y..y..p..px.p|.
 801cea8:	70003c70 1f70001e 000f7000 00000000     p<.p..p..p......
	...
 801ced0:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801cee0:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 801cf28:	007ff873 80fffc7f c0ffff7f c0e73f7f     s............?..
 801cf38:	c0831f7c c0031f78 c0010e70 c0010e70     |...x...p...p...
 801cf48:	c0010e70 c0010e70 c0010e70 c0010e70     p...p...p...p...
 801cf58:	c0010e70 c0010e70 c0010e70 c0010e70     p...p...p...p...
 801cf68:	c0010e70 c0010e70 c0010e70 00000000     p...p...p.......
	...
 801cfac:	f8730000 fe7ffc7f 1e7c3e7f 0e701e78     ..s......>|.x.p.
 801cfbc:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 801cfcc:	0e700e70 0e700e70 00000000 00000000     p.p.p.p.........
	...
 801d008:	07000000 fc0f00f8 00fe1f00 7c003f3f     ............??.|
 801d018:	0778800f 80077880 70800778 03708003     ..x..x..x..p..p.
 801d028:	80037080 78800778 07788007 800f7c80     .p..x..x..x..|..
 801d038:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 801d080:	77000000 fc7f00f8 00fe7f00 7c003e7f     ...w.........>.|
 801d090:	0f78001f 000f7000 70000f70 07700007     ..x..p..p..p..p.
 801d0a0:	00077000 70000f70 0f70000f 001e7800     .p..p..p..p..x..
 801d0b0:	7f003e7e f87f00fc 00f07700 70000070     ~>.......w..p..p
 801d0c0:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
	...
 801d0f8:	07000000 ff0f00ff 00ff1f00 3c003f3e     ............>?.<
 801d108:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 801d118:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 801d128:	3f007f3e ff1f00ff 00e70f00 00000700     >..?............
 801d138:	07000007 00070000 00000700 07000007     ................
	...
 801d164:	c0730000 c07fc07f 0078007e 00700078     ..s.....~.x.x.p.
 801d174:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 801d184:	00700070 00700070 00000000 00000000     p.p.p.p.........
	...
 801d1c0:	0f000000 fc3f00f8 00fe7f00 78003e7e     ......?.....~>.x
 801d1d0:	0078001e 00007c00 3f00c07f fe1f00f8     ..x..|.....?....
 801d1e0:	00ff0300 00003f00 0770000f 000f7800     .....?....p..x..
 801d1f0:	3f003f7e fc1f00fe 00f80f00 00000000     ~?.?............
	...
 801d224:	001c001c 001c001c 807f001c 807f807f     ................
 801d234:	001c001c 001c001c 001c001c 001c001c     ................
 801d244:	001c001c 001c001c 801f001e 800f801f     ................
	...
 801d27c:	0e700000 0e700e70 0e700e70 0e700e70     ..p.p.p.p.p.p.p.
 801d28c:	0e700e70 0e700e70 0e700e70 3e781e78     p.p.p.p.p.p.x.x>
 801d29c:	fe7ffe7c ce1ffe3f 00000000 00000000     |...?...........
	...
 801d2d8:	78000000 0378c003 800338c0 3c80073c     ...x..x..8..<..<
 801d2e8:	071c8007 000f1e00 0e000f1e 1e0f000e     ................
 801d2f8:	001e0f00 07001c07 b80300bc 00f80300     ................
 801d308:	0100f803 f00100f0 00f00100 00000000     ................
	...
 801d360:	80071e78 80071e78 80073f78 00073f38     x...x...x?..8?..
 801d370:	00073f38 000f3f3c 008f7f3c 008e7f1c     8?..<?..<.......
 801d380:	008e731c 009e731e 00def30e 00dcf30e     .s...s..........
 801d390:	00dce10e 00fce10f 00f8e107 00f8e107     ................
 801d3a0:	00f8c007 00f8c007 00f0c003 00000000     ................
	...
 801d3f0:	3c000000 0f3e8007 000f1e80 07001e0f     ...<..>.........
 801d400:	bc0700bc 00f80300 0100f001 f00100f0     ................
 801d410:	00f80300 0700f803 1e0f00bc 001e0f00     ................
 801d420:	3c000f1e 077c8007 c00378c0 00000000     ...<..|..x......
	...
 801d468:	78000000 0378c003 800338c0 3c80073c     ...x..x..8..<..<
 801d478:	071c8007 000f1e00 0e000f1e 1e0f000e     ................
 801d488:	001e0f00 07001c07 b80300bc 00f80300     ................
 801d498:	0100f803 f00100f0 00f00100 0100e001     ................
 801d4a8:	c00300e0 00c02f00 3f00803f 003e0000     ...../..?..?..>.
	...
 801d4e0:	3f000000 ff3f00ff 00ff3f00 00001f00     ...?..?..?......
 801d4f0:	3c00001e 00780000 0100f800 e00300f0     ...<..x.........
 801d500:	00c00700 0f00800f 001e0000 00003c00     .............<..
 801d510:	7f00007c ff7f80ff 80ff7f80 00000000     |...............
	...
 801d550:	70707070 00000000 00000000 00000000     pppp............
	...
 801d578:	70707070 60707030 00000000 00000000     pppp0pp`........
	...
 801d590:	70700000 00007070 00000000 00000000     ..pppp..........
 801d5a0:	70707070 60707030 00000000 00000000     pppp0pp`........
	...
 801d5b8:	70700000 00007070 00000000 00000000     ..pppp..........
 801d5c8:	70707070 00000000 00000000 00000000     pppp............
	...
 801d5fc:	e07f0000 e07fe07f 00000000 00000000     ................
	...
 801d690:	7ff0ff7f 0000f0ff 00000000 00000000     ................
	...
 801d6bc:	00e00000 0000e000 e00000e0 00e00000     ................
 801d6cc:	0000e000 ff7f00e0 c0ff7fc0 00c0ff7f     ................
 801d6dc:	e00000e0 00e00000 0000e000 e00000e0     ................
 801d6ec:	00e00000 00000000 00000000 00000000     ................
	...
 801d720:	00070000 00070007 f07f7077 800ff07f     ........wp......
 801d730:	c01dc01f c018e03d 00000000 00000000     ....=...........
	...
 801d778:	00cf0100 0300cf03 cf0300cf 00ce0300     ................
 801d788:	07009e03 ff3f009e 80ff3f80 0f80ff3f     ......?..?..?...
 801d798:	3c0f003c 003c0f00 0f003c0f 781e0038     <..<..<..<..8..x
 801d7a8:	00ff7f00 7f00ff7f 781e00ff 00f01c00     ...........x....
 801d7b8:	3c00f03c f03c00f0 00f03c00 00000000     <..<..<..<......
	...
 801d7f0:	001c0700 07001c07 1c07001c 00000000     ................
 801d800:	07000000 fc0f00f8 00fe1f00 7c003f3f     ............??.|
 801d810:	0778800f 80077880 70800778 03708003     ..x..x..x..p..p.
 801d820:	80037080 78800778 07788007 800f7c80     .p..x..x..x..|..
 801d830:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 801d868:	001c0700 07001c07 1c07001c 00000000     ................
 801d878:	07000000 fe1f00f8 00ff1f00 3c001f3f     ............?..<
 801d888:	0738000f 00070000 1f00ff07 ff3f00ff     ..8...........?.
 801d898:	00877f00 7800077c 0f700007 001f7800     ....|..x..p..x..
 801d8a8:	7f007f7c ff3f00ff 00f71f00 00000000     |.....?.........
	...
 801d8d8:	380e0000 380e380e 0000380e 0e700000     ...8.8.8.8....p.
 801d8e8:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 801d8f8:	0e700e70 0e700e70 3e781e78 fe7ffe7c     p.p.p.p.x.x>|...
 801d908:	ce1ffe3f 00000000 00000000 00000000     ?...............
	...
 801d920:	0080e300 0080e300 0080e300 0080e300     ................
	...
 801d938:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 801d948:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 801d958:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 801d968:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 801d978:	000f0078 000f0078 001e003c 003e003e     x...x...<...>.>.
 801d988:	007c001f 00f8e30f 00f0ff07 00e0ff03     ..|.............
 801d998:	0080ff00 00000000 00000000 00000000     ................
	...
 801d9c0:	0080e300 0080e300 0080e300 0080e300     ................
	...
 801d9d8:	00003e00 00007e00 00007e00 00007f00     .>...~...~......
 801d9e8:	0000f700 0080e700 0080e700 0080e301     ................
 801d9f8:	00c0c301 00c0c103 00e0c103 00e08103     ................
 801da08:	00e08007 00f08007 00f00007 00f8ff0f     ................
 801da18:	00f8ff0f 00f8ff1f 003c001e 003c001e     ..........<...<.
 801da28:	001e003c 001e003c 001e0038 000f0078     <...<...8...x...
 801da38:	000f0078 00000000 00000000 00000000     x...............
	...
 801da5c:	03000000 8e03008e 008e0300 00008e03     ................
 801da6c:	00000000 70007000 70700070 00707000     .....p.pp.pp.pp.
 801da7c:	70007070 70700070 00707000 70007070     pp.pp.pp.pp.pp.p
 801da8c:	70700070 00707000 70007070 70700070     p.pp.pp.pp.pp.pp
 801da9c:	00707000 f0007870 78f00078 0078f000     .pp.px..x..x..x.
 801daac:	f0017cf0 1fe08f3f ff0fc0ff 00ff0780     .|..?...........
	...
 801dae8:	00f80700 3f00fc1f 3f3e00fe 000f7c00     .......?..>?.|..
 801daf8:	78000f78 07000007 000f0000 00001f00     x..x............
 801db08:	7c00003e 00f80000 0100f001 e00100e0     >..|............
 801db18:	00c00100 0000c001 00000000 00000000     ................
 801db28:	0100c001 c00100c0 00c00100 00000000     ................
	...
 801db50:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801db60:	70707070 00000070 70707070 00000000     ppppp...pppp....
	...
 801db80:	001f0000 c07b803f c060c071 c07bc071     ....?.{.q.`.q.{.
 801db90:	001f803f 00000000 00000000 00000000     ?...............
	...
 801dbd0:	c0030000 e007c003 f00ff00f 781e781e     .............x.x
 801dbe0:	3c3c3c3c 1e781e78 00000000 00000000     <<<<x.x.........
	...
 801dc20:	e0000000 e000e000 c001c001 8003c001     ................
 801dc30:	80038003 00070007 00060007 000e000e     ................
 801dc40:	001c000e 001c001c 00380038 00700038     ........8.8.8.p.
 801dc50:	00700070 00000000 00000000 00000000     p.p.............
	...
 801dc70:	80030000 00078007 000e000e 001c001e     ................
 801dc80:	003c003c 00780038 00780078 00700078     <.<.8.x.x.x.x.p.
 801dc90:	00700070 00780070 00780078 00380078     p.p.p.x.x.x.x.8.
 801dca0:	003c003c 001e001c 000e000e 80070007     <.<.............
 801dcb0:	00008003 00000000 00000000 00000000     ................
 801dcc0:	00700000 00380078 001c001c 000e001e     ..p.x.8.........
 801dcd0:	000f000f 80070007 80078007 80038007     ................
 801dce0:	80038003 80078003 80078007 00078007     ................
 801dcf0:	000f000f 001e000e 001c001c 00780038     ............8.x.
 801dd00:	00000070 00000000 00000000 00000000     p...............
	...
 801dd18:	00f80300 0f00fc07 be0f00fe 001e0f00     ................
 801dd28:	0f000e0e 1e0f000e 00be0700 0300fc07     ................
 801dd38:	f00f00f8 00f01f00 3ce0f83f 3f78e07c     ........?..<|.x?
 801dd48:	e01f78e0 78e01f70 0778e00f e0077cc0     .x..p..x..x..|..
 801dd58:	3fe03f3e fe1ff0ff 60f807f0 00000000     >?.?.......`....
	...
 801dd98:	000ec01f 001ee03f 001ce03d 0038f078     ....?...=...x.8.
 801dda8:	0038f078 00707070 00f07070 00e07070     x.8.ppp.pp..pp..
 801ddb8:	00c0f178 00c0f178 0080e33d 0080e33f     x...x...=...?...
 801ddc8:	c01fc71f e03f0e00 e03d0e00 f0781c00     ......?...=...x.
 801ddd8:	f0781c00 70703800 70707800 70707000     ..x..8pp.xpp.ppp
 801dde8:	f078e000 f078e000 e03dc001 e03fc003     ..x...x...=...?.
 801ddf8:	c01f8003 00000000 00000000 00000000     ................
	...
 801de28:	0000c000 c00000c0 00f80700 1f00fe0f     ................
 801de38:	ff3f00fe 00cf3c00 3800c73c c03800c0     ..?..<..<..8..8.
 801de48:	00c03c00 1f00c03e fc0f00e0 00fe0700     .<..>...........
 801de58:	0000ff01 c70080df 80c70080 7880c370     ............p..x
 801de68:	c77880c3 80c77c80 3f00ff3f fe1f00ff     ..x..|..?..?....
 801de78:	00f80700 0000c000 c00000c0 00000000     ................
	...
 801deb8:	0000fe0f c0ff7f00 1fff0000 f00100e0     ................
 801dec8:	0300f001 007800e0 3c008007 00000f00     ......x....<....
 801ded8:	071e001e 1e009eff 008fff1f 8fff3f3c     ............<?..
 801dee8:	3f7e3c00 f878008f 7800070f 00070ff0     .<~?..x....x....
 801def8:	070ff078 0fe07900 e0710007 71000f0e     x....y....q....q
 801df08:	000f1ee0 0f1ec071 1ec07100 e079001f     ....q....q....y.
 801df18:	79001e3e 003e7ce0 fcfef979 ffff7800     >..y.|>.y....x..
 801df28:	7f3c00f8 3c00f0df 00c09f3f 0000001e     ..<....<?.......
 801df38:	00000f00 c00f0000 07000000 000000e0     ................
 801df48:	c007ff01 ff7f0000 1f0000c0 000080ff     ................
	...
 801df60:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 801df70:	70707070 70707070 70707070 70707070     pppppppppppppppp
 801df80:	00707070 00000000 00000000 00000000     ppp.............
	...
 801dfa4:	00030000 00000f00 ff00003f 00fc0300     ........?.......
 801dfb4:	7f00f01f 007e00c0 00007c00 7f00007e     ......~..|..~...
 801dfc4:	f01f00c0 00fc0300 0000ff00 0f00003f     ............?...
 801dfd4:	00030000 00000000 00000000 00000000     ................
	...
 801e01c:	00006000 7e000078 807f0000 00e01f00     .`..x..~........
 801e02c:	0100fc07 3f0000ff 001f0000 01003f00     .......?.....?..
 801e03c:	fc0700ff 00e01f00 7e00807f 00780000     ...........~..x.
 801e04c:	00006000 00000000 00000000 00000000     .`..............
	...

0801e074 <_ZL38Microsoft_Sans_Serif__26_mapping_table>:
	...
 801e094:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 801e0a4:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 801e0b4:	0d0c0b58 11100f0e 15141312 19181716     X...............
 801e0c4:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 801e0d4:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 801e0e4:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 801e124:	00000050 00000000 00000000 00000000     P...............
 801e134:	00000000 0000004c 00000000 00000000     ....L...........
 801e144:	00000000 004b0000 00000000 0000004d     ......K.....M...
 801e154:	00000000 00000049 00000000 00000000     ....I...........
 801e164:	00000000 00480000 00000000 0000004a     ......H.....J...

0801e174 <_ZL36Microsoft_Sans_Serif__26_width_table>:
 801e174:	130b120b 12121212 19121212 14161714     ................
 801e184:	05151912 19111610 19141915 15151516     ................
 801e194:	19192319 12111113 110c1211 11090510     .#..............
 801e1a4:	12101b05 110b1111 1a13100a 05121313     ................
 801e1b4:	0c050505 120d1315 19101112 05111519     ................
 801e1c4:	0a0c100b 121d150a 11110521              ........!...

0801e1d0 <_ZL37Microsoft_Sans_Serif__26_offset_table>:
 801e1d0:	00000000 00000050 000000c8 00000118     ....P...........
 801e1e0:	00000190 00000208 00000280 000002f8     ................
 801e1f0:	00000370 000003e8 00000460 000004d8     p.......`.......
 801e200:	00000578 000005f0 00000668 000006e0     x.......h.......
 801e210:	00000758 000007d0 00000870 000008e8     X.......p.......
 801e220:	00000910 00000960 000009d8 00000a50     ....`.......P...
 801e230:	00000af0 00000b68 00000c08 00000c80     ....h...........
 801e240:	00000d20 00000d98 00000e10 00000e88      ...............
 801e250:	00000f00 00000fa0 00001068 00001108     ........h.......
 801e260:	000011a8 00001220 00001298 00001310     .... ...........
 801e270:	00001388 00001400 00001478 000014c8     ........x.......
 801e280:	00001540 00001590 000015b8 00001608     @...............
 801e290:	00001680 000016a8 00001748 00001798     ........H.......
 801e2a0:	00001810 00001888 00001900 00001950     ............P...
 801e2b0:	000019c8 00001a18 00001a68 00001ae0     ........h.......
 801e2c0:	00001b80 00001bf8 00001c70 00001ce8     ........p.......
 801e2d0:	00001d10 00001d38 00001d60 00001d88     ....8...`.......
 801e2e0:	00001dd8 00001e50 00001ec8 00001f18     ....P...........
 801e2f0:	00001f90 00002008 00002080 000020d0     ..... ... ... ..
 801e300:	00002170 00002210 00002288 00002300     p!..."..."...#..
 801e310:	00002328 00002378 000023c8 00002418     (#..x#...#...$..
 801e320:	00002468 000024b8 00002530 000025d0     h$...$..0%...%..
 801e330:	00002648 00002710 00002738 000027b0     H&...'..8'...'..

0801e340 <_ZTV12AManagedTask>:
	...
 801e348:	08010781 080122f5 080107a5 08012019     ....."....... ..
 801e358:	08012059 08011fad 08018659 080107c9     Y ......Y.......

0801e368 <_ZTV12IFreeRTOSObj>:
	...
 801e370:	08018659 08018659 08018659 00000000     Y...Y...Y.......

0801e380 <_ZTV5CTask>:
	...
 801e388:	08010781 080122f5 080107a5 08012291     ....."......."..
 801e398:	080122d5 00000000                       ."......

0801e3a0 <_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__>:
 801e3a0:	74726976 206c6175 64696f76 61544320     virtual void CTa
 801e3b0:	3a3a6b73 61747441 78286863 656e6547     sk::Attach(xGene
 801e3c0:	48636972 6c646e61 00002965              ricHandle)..

0801e3cc <fatstr.1639>:
 801e3cc:	00544146                                FAT.

0801e3d0 <_ZTV12CFileHandler>:
	...
 801e3d8:	08010781 080122f5 080107a5 08015501     .....".......U..
 801e3e8:	08015539 08015559 08015571 080107c9     9U..YU..qU......

0801e3f8 <_ZTV24CLedHeartBeatSTM32F4Disc>:
	...
 801e400:	08010781 080122f5 080107a5 08017cdd     .....".......|..
 801e410:	08017d15 08017d35 08017d6d 080107c9     .}..5}..m}......
 801e420:	65727570 72697620 6c617574 74656d20     pure virtual met
 801e430:	20646f68 6c6c6163 000a6465 6d726574     hod called..term
 801e440:	74616e69 61632065 64656c6c 63657220     inate called rec
 801e450:	69737275 796c6576 0000000a 6d726574     ursively....term
 801e460:	74616e69 61632065 64656c6c 74666120     inate called aft
 801e470:	74207265 776f7268 20676e69 69206e61     er throwing an i
 801e480:	6174736e 2065636e 2720666f 00000000     nstance of '....
 801e490:	00000a27 6d726574 74616e69 61632065     '...terminate ca
 801e4a0:	64656c6c 74697720 74756f68 206e6120     lled without an 
 801e4b0:	69746361 65206576 70656378 6e6f6974     active exception
 801e4c0:	0000000a 68772020 29287461 0020203a     ....  what():  .

0801e4d0 <_ZTVSt9exception>:
 801e4d0:	00000000 0801e4f0 08018c49 08018c8d     ........I.......
 801e4e0:	08018c61 00000000                       a.......

0801e4e8 <_ZTIN10__cxxabiv115__forced_unwindE>:
 801e4e8:	0801e770 0801e588                       p.......

0801e4f0 <_ZTISt9exception>:
 801e4f0:	0801e770 0801e578                       p...x...

0801e4f8 <_ZTSSt13bad_exception>:
 801e4f8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
 801e508:	0000006e 3a647473 6378653a 69747065     n...std::excepti
 801e518:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
 801e528:	69747065 00006e6f                       eption..

0801e530 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
 801e530:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 801e540:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
 801e550:	00456e6f                                onE.

0801e554 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
 801e554:	0801e770 0801e530 00000000              p...0.......

0801e560 <_ZTVSt13bad_exception>:
 801e560:	00000000 0801e5a8 08018c55 08018c79     ........U...y...
 801e570:	08018c6d 00000000                       m.......

0801e578 <_ZTSSt9exception>:
 801e578:	65397453 70656378 6e6f6974 00000000     St9exception....

0801e588 <_ZTSN10__cxxabiv115__forced_unwindE>:
 801e588:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
 801e598:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0801e5a8 <_ZTISt13bad_exception>:
 801e5a8:	0801e688 0801e4f8 0801e4f0              ............

0801e5b4 <_ZTIPv>:
 801e5b4:	0801e660 0801e5cc 00000000 0801e5c4     `...............

0801e5c4 <_ZTIv>:
 801e5c4:	0801e610 0801e5d0                       ........

0801e5cc <_ZTSPv>:
 801e5cc:	00007650                                Pv..

0801e5d0 <_ZTSv>:
 801e5d0:	00000076                                v...

0801e5d4 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
 801e5d4:	0801e688 0801e5e0 0801e6e4              ............

0801e5e0 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
 801e5e0:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
 801e5f0:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
 801e600:	6e695f65 00456f66                       e_infoE.

0801e608 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
 801e608:	00000000 0801e5d4 08019385 08019399     ................
 801e618:	08019555 08019559 080195ad 0801955d     U...Y.......]...

0801e628 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
 801e628:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 801e638:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
 801e648:	00456f66                                foE.

0801e64c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
 801e64c:	0801e688 0801e628 0801e7c8              ....(.......

0801e658 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
 801e658:	00000000 0801e64c 080193b9 080193cd     ....L...........
 801e668:	080193b5 08019559 080197bd 0801955d     ....Y.......]...
 801e678:	080193e9 00000000                       ........

0801e680 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 801e680:	00000000 0801e6b0 08019431 08019445     ........1...E...
 801e690:	08019555 08019559 080196b9 080195ed     U...Y...........
 801e6a0:	08019461 08019489 08019511 00000000     a...............

0801e6b0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 801e6b0:	0801e688 0801e6bc 0801e798              ............

0801e6bc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 801e6bc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 801e6cc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 801e6dc:	456f666e 00000000                       nfoE....

0801e6e4 <_ZTISt9type_info>:
 801e6e4:	0801e770 0801e6ec                       p.......

0801e6ec <_ZTSSt9type_info>:
 801e6ec:	74397453 5f657079 6f666e69 00000000     St9type_info....
 801e6fc:	00000000                                ....

0801e700 <_ZTVSt9type_info>:
 801e700:	00000000 0801e6e4 08019549 08019561     ........I...a...
 801e710:	08019555 08019559 080195ad 0801955d     U...Y.......]...

0801e720 <_ZTVSt10bad_typeid>:
 801e720:	00000000 0801e738 080195bd 080195d1     ....8...........
 801e730:	080195b1 00000000                       ........

0801e738 <_ZTISt10bad_typeid>:
 801e738:	0801e688 0801e754 0801e4f0 3a647473     ....T.......std:
 801e748:	6461623a 7079745f 00646965              :bad_typeid.

0801e754 <_ZTSSt10bad_typeid>:
 801e754:	30317453 5f646162 65707974 00006469     St10bad_typeid..
 801e764:	00000000                                ....

0801e768 <_ZTVN10__cxxabiv117__class_type_infoE>:
 801e768:	00000000 0801e798 0801964d 08019661     ........M...a...
 801e778:	08019555 08019559 080196b9 080195ed     U...Y...........
 801e788:	08019631 0801967d 08019625 00000000     1...}...%.......

0801e798 <_ZTIN10__cxxabiv117__class_type_infoE>:
 801e798:	0801e688 0801e7a4 0801e6e4              ............

0801e7a4 <_ZTSN10__cxxabiv117__class_type_infoE>:
 801e7a4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 801e7b4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 801e7c4:	00000045                                E...

0801e7c8 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
 801e7c8:	0801e688 0801e7d4 0801e6e4              ............

0801e7d4 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
 801e7d4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 801e7e4:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
 801e7f4:	00000045                                E...

0801e7f8 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
 801e7f8:	00000000 0801e7c8 0801978d 080197a1     ................
 801e808:	08019555 08019559 080197bd 0801955d     U...Y.......]...
 801e818:	08019779 00000000 7566202c 6974636e     y......., functi
 801e828:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
 801e838:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
 801e848:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
 801e858:	25732564 00000a73 00000043 00464e49     d%s%s...C...INF.
 801e868:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
 801e878:	37363534 42413938 46454443 00000000     456789ABCDEF....
 801e888:	33323130 37363534 62613938 66656463     0123456789abcdef
 801e898:	00000000 6c756e28 0000296c 00000030     ....(null)..0...
 801e8a8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 801e8b8:	49534f50 00000058 0000002e              POSIX.......

0801e8c4 <_init>:
 801e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8c6:	bf00      	nop
 801e8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8ca:	bc08      	pop	{r3}
 801e8cc:	469e      	mov	lr, r3
 801e8ce:	4770      	bx	lr

0801e8d0 <_fini>:
 801e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8d2:	bf00      	nop
 801e8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8d6:	bc08      	pop	{r3}
 801e8d8:	469e      	mov	lr, r3
 801e8da:	4770      	bx	lr
