   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"CLedHeartBeatSTM32F4Disc.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZNK5CTask7IsValidEv,"axG",%progbits,_ZNK5CTask7IsValidEv,comdat
  19              		.align	2
  20              		.weak	_ZNK5CTask7IsValidEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZNK5CTask7IsValidEv:
  25              	.LFB132:
  26              		.file 1 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS_EC\\Source/CTask.h"
   1:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** /**
   2:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * @file CTask.h
   3:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * @class CTask
   4:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * @ingroup FreeRTOS_Wrapper
   5:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *
   6:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * The CTask class wraps a native FreeRTOS task handle (xTaskHandle). To create a task instance
   7:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * an object of this class and then call its CTask::Create method like showed in the following samp
   8:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * \code
   9:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * CTask g_aTask // global task declaration.
  10:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *
  11:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * void main()
  12:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * {
  13:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * 	g_aTask.Create(task_control_func, "Led2", configMINIMAL_STACK_SIZE, mainFLASH_TASK_PRIORITY);
  14:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *
  15:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * 	CFreeRTOS::StartScheduler();
  16:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * }
  17:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * \endcode
  18:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *
  19:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * Usually the application subclass this class to create an application specific task object.
  20:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * See the CHelloWorld class for an example.
  21:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *
  22:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * \sa <a href="http://www.freertos.org/taskandcr.html">task documentation</a> in the FreeRTOS web 
  23:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *
  24:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * @date Jul 5, 2010
  25:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  * @author Stefano Oliveri (STF12.net)
  26:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  *         E-Mail: software@stf12.net
  27:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****  */
  28:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  29:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #ifndef CTASK_H_
  30:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #define CTASK_H_
  31:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  32:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #include "FreeRTOS.h"
  33:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #include "task.h"
  34:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #include "IFreeRTOSProtocol.h"
  35:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  36:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** class CTask: public IFreeRTOSObj {
  37:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  38:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  39:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  40:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  41:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	xTaskHandle m_handleTask;
  42:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  43:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** public:
  44:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  45:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  46:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Call the Create method to allocate a task handle and attach it to the object.
  47:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  48:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	CTask();
  49:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  50:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  51:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Create a CTask instance and attach it to a valid handle.
  52:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 *
  53:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * @param handleTask a valid task handle.
  54:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  55:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	CTask(xTaskHandle handleTask);
  56:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  57:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  58:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Delete the native FreeRTOS task.
  59:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  60:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	virtual ~CTask();
  61:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  62:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  63:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Retrieve the native FreeRTOS task handle attached to this object.
  64:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 *
  65:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * @return the native FreeRTOS task handle attached to this object.
  66:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  67:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	inline operator xTaskHandle() const { return m_handleTask; }
  68:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  69:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	// FreeRTOS API Wrappers
  70:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  71:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  72:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Create a FreeRTOS task and attach its handle to the receiver object.
  73:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 *
  74:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00125.html">xTaskCreate</a> FreeRTOS API function.
  75:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  76:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	portBASE_TYPE Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usS
  77:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  78:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  79:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * Create a Memory Protection Unit (MPU) restricted task and attach its handle to the receiver obj
  80:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 *
  81:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * \sa <a href="http://www.freertos.org/xTaskCreateRestricted.html">xTaskCreateRestricted</a> Free
  82:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  83:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	portBASE_TYPE CreateRestricted(xTaskParameters *pxTaskDefinition);
  84:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  85:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  86:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00126.html">vTaskDelete</a>  FreeRTOS API function.
  87:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  88:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	void Delete();
  89:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  90:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  91:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00127.html">vTaskDelay</a>  FreeRTOS API function.
  92:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  93:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	inline static void Delay(portTickType xTicksToDelay);
  94:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
  95:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	/**
  96:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 * \sa <a href="http://www.freertos.org/vtaskdelayuntil.html">vTaskDelayUntil</a>  FreeRTOS API fu
  97:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	 */
  98:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);
  99:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 100:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 101:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskYIELD">taskYIELD</a>  FreeRTOS API func
 102:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 103:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void Yeld() { taskYIELD(); }
 104:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 105:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 106:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a> 
 107:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 108:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void EnterCritical() { taskENTER_CRITICAL(); }
 109:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 110:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 111:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  F
 112:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 113:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 114:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 115:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 116:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskDISABLE_INTERRUPTS">taskDISABLE_INTERRU
 117:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 118:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void DisableInterrupt() { taskDISABLE_INTERRUPTS(); }
 119:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 120:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 121:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENABLE_INTERRUPTS">taskENABLE_INTERRUPT
 122:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 123:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void EnableInterrupt() { taskENABLE_INTERRUPTS(); }
 124:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 125:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 126:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetCurrentTaskHandle">xTaskGetCurrentT
 127:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 128:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static xTaskHandle GetCurrentTaskHandle();
 129:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 130:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 131:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetTickCount">xTaskGetTickCount</a>  F
 132:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 133:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static portTickType GetTickCount();
 134:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 135:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 136:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetSchedulerState">xTaskGetSchedulerSt
 137:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 138:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static portBASE_TYPE GetSchedulerState();
 139:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 140:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 141:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#usTaskGetNumberOfTasks">uxTaskGetNumberOfTa
 142:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 143:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static unsigned portBASE_TYPE GetNumberOfTasks();
 144:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 145:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 146:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskList">vTaskList</a>  FreeRTOS API func
 147:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 148:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void GetTaskList(portCHAR *pcWriteBuffer);
 149:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 150:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 151:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskGetRunTimeStats">vTaskGetRunTimeStats<
 152:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 153:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline static void GetRunTimeStats(portCHAR *pcWriteBuffer);
 154:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 155:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 156:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00128.html">uxTaskPriorityGet</a>  FreeRTOS API functi
 157:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 158:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline unsigned portBASE_TYPE PriorityGet() const;
 159:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 160:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 161:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00129.html">vTaskPrioritySet</a>  FreeRTOS API functio
 162:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 163:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline void PrioritySet(unsigned portBASE_TYPE uxNewPriority);
 164:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 165:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 166:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00130.html">vTaskSuspend</a>  FreeRTOS API function.
 167:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 168:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline void Suspend();
 169:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 170:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 171:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/a00131.html">vTaskResume</a>  FreeRTOS API function.
 172:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 173:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline void Resume();
 174:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 175:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 176:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/taskresumefromisr.html">xTaskResumeFromISR</a>  FreeRTO
 177:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 178:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline portBASE_TYPE ResumeFromISR();
 179:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 180:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 181:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskSetApplicationTag.html">vTaskSetApplicationTaskTag
 182:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 183:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline void SetApplicationTag(pdTASK_HOOK_CODE pxTagValue);
 184:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 185:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 186:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/xTaskCallApplicationTaskHook.html">xTaskCallApplication
 187:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 188:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline portBASE_TYPE CallApplicationTaskHook(void *pvParameter);
 189:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 190:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     /**
 191:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskAllocateMPURegions.html">vTaskAllocateMPURegions</
 192:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****      */
 193:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     inline void AllocateMPURegions(const xMemoryRegion * const xRegions);
 194:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 195:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h ****     // FreeRTOS class extension.
 196:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	inline bool IsValid() const;
 197:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	void Attach(xGenericHandle handle);
 198:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	inline xGenericHandle Detach();
 199:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** };
 200:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 201:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** // inline method
 202:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** ////////////////
 203:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 204:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 205:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::Delay(portTickType xTicksToDelay) {
 206:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_vTaskDelay == 1 )
 207:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskDelay(xTicksToDelay);
 208:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 209:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 210:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 211:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 212:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement) {
 213:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 214:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
 215:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 216:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 217:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 218:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 219:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** xTaskHandle CTask::GetCurrentTaskHandle() {
 220:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return xTaskGetCurrentTaskHandle();
 221:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 222:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 223:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 224:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** portTickType CTask::GetTickCount() {
 225:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return xTaskGetTickCount();
 226:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 227:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 228:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 229:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** portBASE_TYPE CTask::GetSchedulerState() {
 230:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 231:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return xTaskGetSchedulerState();
 232:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #else
 233:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return 0;
 234:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 235:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 236:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 237:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 238:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** unsigned portBASE_TYPE CTask::GetNumberOfTasks() {
 239:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return uxTaskGetNumberOfTasks();
 240:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 241:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 242:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 243:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::GetTaskList(portCHAR *pcWriteBuffer) {
 244:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( configUSE_TRACE_FACILITY == 1 )
 245:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskList((signed portCHAR*)pcWriteBuffer);
 246:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 247:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 248:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 249:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 250:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::GetRunTimeStats(portCHAR *pcWriteBuffer) {
 251:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if (configGENERATE_RUN_TIME_STATS == 1)
 252:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskGetRunTimeStats((signed portCHAR*)pcWriteBuffer);
 253:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 254:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 255:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 256:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 257:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** unsigned portBASE_TYPE CTask::PriorityGet() const {
 258:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 259:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return uxTaskPriorityGet(m_handleTask);
 260:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #else
 261:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return -1;
 262:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 263:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 264:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 265:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 266:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::PrioritySet(unsigned portBASE_TYPE uxNewPriority) {
 267:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 268:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskPrioritySet(m_handleTask, uxNewPriority);
 269:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 270:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 271:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 272:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 273:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::Suspend() {
 274:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 275:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskSuspend(m_handleTask);
 276:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 277:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 278:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 279:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 280:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::Resume() {
 281:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 282:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskResume(m_handleTask);
 283:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 284:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 285:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 286:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 287:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** portBASE_TYPE CTask::ResumeFromISR() {
 288:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 289:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return xTaskResumeFromISR(m_handleTask);
 290:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #else
 291:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return pdFALSE;
 292:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 293:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 294:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 295:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 296:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::SetApplicationTag(pdTASK_HOOK_CODE pxTagValue) {
 297:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 298:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskSetApplicationTaskTag(m_handleTask, pxTagValue);
 299:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 300:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 301:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 302:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 303:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** portBASE_TYPE CTask::CallApplicationTaskHook(void *pvParameter) {
 304:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 305:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return xTaskCallApplicationTaskHook(m_handleTask, pvParameter);
 306:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #else
 307:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return 0;
 308:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 309:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 310:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 311:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 312:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** void CTask::AllocateMPURegions(const xMemoryRegion * const xRegions) {
 313:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #if ( portUSING_MPU_WRAPPERS == 1 )
 314:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	vTaskAllocateMPURegions(m_handleTask, xRegions);
 315:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** #endif
 316:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
 317:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 318:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 319:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** bool CTask::IsValid() const{
  27              		.loc 1 319 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 320:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return m_handleTask != NULL;
  43              		.loc 1 320 0
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 5B68     		ldr	r3, [r3, #4]
  46 000c 002B     		cmp	r3, #0
  47 000e 0CBF     		ite	eq
  48 0010 0023     		moveq	r3, #0
  49 0012 0123     		movne	r3, #1
  50 0014 DBB2     		uxtb	r3, r3
 321:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
  51              		.loc 1 321 0
  52 0016 1846     		mov	r0, r3
  53 0018 07F10C07 		add	r7, r7, #12
  54 001c BD46     		mov	sp, r7
  55 001e 80BC     		pop	{r7}
  56 0020 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE132:
  60 0022 00BF     		.section	.text._ZN5CTask6DetachEv,"axG",%progbits,_ZN5CTask6DetachEv,comdat
  61              		.align	2
  62              		.weak	_ZN5CTask6DetachEv
  63              		.thumb
  64              		.thumb_func
  66              	_ZN5CTask6DetachEv:
  67              	.LFB133:
 322:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 
 323:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** inline
 324:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** xGenericHandle CTask::Detach() {
  68              		.loc 1 324 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 16
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73 0000 80B4     		push	{r7}
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 4
  76              		.cfi_offset 7, -4
  77 0002 85B0     		sub	sp, sp, #20
  78              	.LCFI4:
  79              		.cfi_def_cfa_offset 24
  80 0004 00AF     		add	r7, sp, #0
  81              	.LCFI5:
  82              		.cfi_def_cfa_register 7
  83 0006 7860     		str	r0, [r7, #4]
  84              	.LBB2:
 325:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	xTaskHandle res = m_handleTask;
  85              		.loc 1 325 0
  86 0008 7B68     		ldr	r3, [r7, #4]
  87 000a 5B68     		ldr	r3, [r3, #4]
  88 000c FB60     		str	r3, [r7, #12]
 326:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	m_handleTask = NULL;
  89              		.loc 1 326 0
  90 000e 7B68     		ldr	r3, [r7, #4]
  91 0010 4FF00002 		mov	r2, #0
  92 0014 5A60     		str	r2, [r3, #4]
 327:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** 	return res;
  93              		.loc 1 327 0
  94 0016 FB68     		ldr	r3, [r7, #12]
  95              	.LBE2:
 328:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CTask.h **** }
  96              		.loc 1 328 0
  97 0018 1846     		mov	r0, r3
  98 001a 07F11407 		add	r7, r7, #20
  99 001e BD46     		mov	sp, r7
 100 0020 80BC     		pop	{r7}
 101 0022 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE133:
 105              		.section	.text._ZN12AManagedTask8OnCreateEPKctm,"axG",%progbits,_ZN12AManagedTask8OnCreateEPKctm,c
 106              		.align	2
 107              		.weak	_ZN12AManagedTask8OnCreateEPKctm
 108              		.thumb
 109              		.thumb_func
 111              	_ZN12AManagedTask8OnCreateEPKctm:
 112              	.LFB135:
 113              		.file 2 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS_EC\\Source/AManagedTask.h"
   1:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** /**
   2:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @file AManagedTask.h
   3:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @class AManagedTask
   4:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *
   5:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * This class extend the CTask in order to provide a more structured and simple to use framework fo
   6:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * FreeRTOS programming. All AManagedTask derived objects are grouped in linked list. Please note t
   7:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * this data structure can be modified in a next release. The framework manage these task objects
   8:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * by calling their methods during the application life cycle.
   9:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *
  10:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * The application extend this abstract class to create a managed task and provide its control loop
  11:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * \code
  12:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * class CMyPipe: public AManagedTask
  13:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * {
  14:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *   // Task private variables.
  15:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *
  16:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * public:
  17:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *   void Run() {  task control loop  };
  18:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * }
  19:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * \endcode
  20:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *
  21:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @date Aug 3, 2010
  22:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @author Stefano Oliveri
  23:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  *         E-Mail: software@stf12.net
  24:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  */
  25:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  26:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** /**
  27:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @defgroup FreeRTOS_Managed FreeRTOS Managed Class Extension
  28:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @ingroup FreeRTOS_CPP_EXT
  29:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * The FreeRTOS Managed Class Extension are a set of class that provide a structured and
  30:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * managed framework to develop a FreeRTOS application.
  31:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  * @{
  32:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h ****  */
  33:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  34:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** #ifndef AMANAGEDTASK_H_
  35:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** #define AMANAGEDTASK_H_
  36:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  37:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** #include "CTask.h"
  38:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  39:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** class AManagedTask: public CTask {
  40:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	friend class CFreeRTOS;
  41:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  42:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  43:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Specifies the head of the linked list used to group all application managed task.
  44:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  45:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	static AManagedTask *s_pManagedTaskListHead;
  46:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  47:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  48:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Specifies the next managed task in the list or NULL if this is the last managed task.
  49:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  50:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	AManagedTask *m_pNextManagedTask;
  51:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  52:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** public:
  53:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  54:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  55:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Default constructor.
  56:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  57:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	AManagedTask();
  58:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  59:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  60:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Destructor.
  61:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  62:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	virtual ~AManagedTask();
  63:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  64:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  65:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Create the FreeRTOS task attached to this object.
  66:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 *
  67:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @param pcName name of the task. Need only for debug purpose.
  68:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @param usStackDepth size in word of the task stack.
  69:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @param uxPriority task priority. Valid value ar between taskIDLE_PRIORITY and configMAX_PRIORIT
  70:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 *
  71:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @sa CTask::Create
  72:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  73:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	portBASE_TYPE Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned port
  74:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  75:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  76:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * The framework calls this function before the scheduler start. The default implementation simply
  77:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Override this method to perform task specific hardware initialization that does not use FreeRTO
  78:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 *
  79:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @return true if success, false otherwise.
  80:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  81:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	virtual bool HardwareInit() { return true; }
  82:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  83:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  84:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * Task control loop.
  85:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  86:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	virtual void Run() =0;
  87:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 
  88:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	/**
  89:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * The framework calls this function before the task is created to give a chance to a managed task
  90:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * own initialization code and stop the task creation process if needed.
  91:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 *
  92:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @param pcName specifies the task name.
  93:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @param usStackDepth specifies the task stack depth.
  94:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @param uxPriority specifies the task priority.
  95:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 *
  96:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation pr
  97:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 * is stopped and no FreeRTOS resource are allocated.
  98:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	 */
  99:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\AManagedTask.h **** 	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, uns
 114              		.loc 2 99 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0000 80B4     		push	{r7}
 120              	.LCFI6:
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 0002 85B0     		sub	sp, sp, #20
 124              	.LCFI7:
 125              		.cfi_def_cfa_offset 24
 126 0004 00AF     		add	r7, sp, #0
 127              	.LCFI8:
 128              		.cfi_def_cfa_register 7
 129 0006 F860     		str	r0, [r7, #12]
 130 0008 B960     		str	r1, [r7, #8]
 131 000a 3B60     		str	r3, [r7, #0]
 132 000c 1346     		mov	r3, r2	@ movhi
 133 000e FB80     		strh	r3, [r7, #6]	@ movhi
 134              		.loc 2 99 0
 135 0010 4FF00103 		mov	r3, #1
 136 0014 1846     		mov	r0, r3
 137 0016 07F11407 		add	r7, r7, #20
 138 001a BD46     		mov	sp, r7
 139 001c 80BC     		pop	{r7}
 140 001e 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE135:
 144              		.section	.text._ZN24CLedHeartBeatSTM32F4DiscC2Em,"ax",%progbits
 145              		.align	2
 146              		.global	_ZN24CLedHeartBeatSTM32F4DiscC2Em
 147              		.thumb
 148              		.thumb_func
 150              	_ZN24CLedHeartBeatSTM32F4DiscC2Em:
 151              	.LFB137:
 152              		.file 3 "../CLedHeartBeatSTM32F4Disc.cpp"
   1:../CLedHeartBeatSTM32F4Disc.cpp **** /**
   2:../CLedHeartBeatSTM32F4Disc.cpp ****   ******************************************************************************
   3:../CLedHeartBeatSTM32F4Disc.cpp ****   * @file      	CLedHeartBeatSTM32F4Disc.cpp
   4:../CLedHeartBeatSTM32F4Disc.cpp ****   * @author    	Tecnologic86
   5:../CLedHeartBeatSTM32F4Disc.cpp ****   * @version   	V0.0.0
   6:../CLedHeartBeatSTM32F4Disc.cpp ****   * @date      	14.02.12
   7:../CLedHeartBeatSTM32F4Disc.cpp ****   * @brief		Class for Led blinking on STM32F4Discovery Board
   8:../CLedHeartBeatSTM32F4Disc.cpp ****   ******************************************************************************
   9:../CLedHeartBeatSTM32F4Disc.cpp ****   */
  10:../CLedHeartBeatSTM32F4Disc.cpp **** 
  11:../CLedHeartBeatSTM32F4Disc.cpp **** /* Includes ------------------------------------------------------------------*/
  12:../CLedHeartBeatSTM32F4Disc.cpp **** #include "CLedHeartBeatSTM32F4Disc.h"
  13:../CLedHeartBeatSTM32F4Disc.cpp **** #include "stm32f4xx.h"
  14:../CLedHeartBeatSTM32F4Disc.cpp **** #include "stm32f4_discovery.h"
  15:../CLedHeartBeatSTM32F4Disc.cpp **** /* Private typedef -----------------------------------------------------------*/
  16:../CLedHeartBeatSTM32F4Disc.cpp **** /* Private define ------------------------------------------------------------*/
  17:../CLedHeartBeatSTM32F4Disc.cpp **** /* Private macro -------------------------------------------------------------*/
  18:../CLedHeartBeatSTM32F4Disc.cpp **** /* Private variables ---------------------------------------------------------*/
  19:../CLedHeartBeatSTM32F4Disc.cpp **** /* Private function prototypes -----------------------------------------------*/
  20:../CLedHeartBeatSTM32F4Disc.cpp **** /* Private functions ---------------------------------------------------------*/
  21:../CLedHeartBeatSTM32F4Disc.cpp **** 
  22:../CLedHeartBeatSTM32F4Disc.cpp **** 
  23:../CLedHeartBeatSTM32F4Disc.cpp **** CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
 153              		.loc 3 23 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 8
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157 0000 80B5     		push	{r7, lr}
 158              	.LCFI9:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 14, -4
 161              		.cfi_offset 7, -8
 162 0002 82B0     		sub	sp, sp, #8
 163              	.LCFI10:
 164              		.cfi_def_cfa_offset 16
 165 0004 00AF     		add	r7, sp, #0
 166              	.LCFI11:
 167              		.cfi_def_cfa_register 7
 168 0006 7860     		str	r0, [r7, #4]
 169 0008 3960     		str	r1, [r7, #0]
 170              	.LBB3:
 171              		.loc 3 23 0
 172 000a 7B68     		ldr	r3, [r7, #4]
 173 000c 1846     		mov	r0, r3
 174 000e FFF7FEFF 		bl	_ZN12AManagedTaskC2Ev
 175 0012 7B68     		ldr	r3, [r7, #4]
 176 0014 074A     		ldr	r2, .L6
 177 0016 1A60     		str	r2, [r3, #0]
  24:../CLedHeartBeatSTM32F4Disc.cpp **** 	ledState = LED_Up;
 178              		.loc 3 24 0
 179 0018 7B68     		ldr	r3, [r7, #4]
 180 001a 4FF00002 		mov	r2, #0
 181 001e 1A73     		strb	r2, [r3, #12]
  25:../CLedHeartBeatSTM32F4Disc.cpp **** 	ledRate = newRate;
 182              		.loc 3 25 0
 183 0020 7B68     		ldr	r3, [r7, #4]
 184 0022 3A68     		ldr	r2, [r7, #0]
 185 0024 1A61     		str	r2, [r3, #16]
 186              	.LBE3:
  26:../CLedHeartBeatSTM32F4Disc.cpp **** }
 187              		.loc 3 26 0
 188 0026 7B68     		ldr	r3, [r7, #4]
 189 0028 1846     		mov	r0, r3
 190 002a 07F10807 		add	r7, r7, #8
 191 002e BD46     		mov	sp, r7
 192 0030 80BD     		pop	{r7, pc}
 193              	.L7:
 194 0032 00BF     		.align	2
 195              	.L6:
 196 0034 08000000 		.word	_ZTV24CLedHeartBeatSTM32F4Disc+8
 197              		.cfi_endproc
 198              	.LFE137:
 200              		.section	.text._ZN24CLedHeartBeatSTM32F4DiscD2Ev,"ax",%progbits
 201              		.align	2
 202              		.global	_ZN24CLedHeartBeatSTM32F4DiscD2Ev
 203              		.thumb
 204              		.thumb_func
 206              	_ZN24CLedHeartBeatSTM32F4DiscD2Ev:
 207              	.LFB140:
  27:../CLedHeartBeatSTM32F4Disc.cpp **** 
  28:../CLedHeartBeatSTM32F4Disc.cpp **** CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 208              		.loc 3 28 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI12:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 14, -4
 216              		.cfi_offset 7, -8
 217 0002 82B0     		sub	sp, sp, #8
 218              	.LCFI13:
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI14:
 222              		.cfi_def_cfa_register 7
 223 0006 7860     		str	r0, [r7, #4]
 224              	.LBB4:
 225              		.loc 3 28 0
 226 0008 7B68     		ldr	r3, [r7, #4]
 227 000a 0A4A     		ldr	r2, .L11
 228 000c 1A60     		str	r2, [r3, #0]
  29:../CLedHeartBeatSTM32F4Disc.cpp **** 	// nothing to destroy
  30:../CLedHeartBeatSTM32F4Disc.cpp **** }
 229              		.loc 3 30 0
 230 000e 7868     		ldr	r0, [r7, #4]
 231 0010 FFF7FEFF 		bl	_ZN12AManagedTaskD2Ev
 232              	.LBE4:
 233 0014 4FF00003 		mov	r3, #0
 234 0018 03F00103 		and	r3, r3, #1
 235 001c DBB2     		uxtb	r3, r3
 236 001e 002B     		cmp	r3, #0
 237 0020 02D0     		beq	.L10
 238              		.loc 3 30 0 is_stmt 0 discriminator 2
 239 0022 7868     		ldr	r0, [r7, #4]
 240 0024 FFF7FEFF 		bl	_ZdlPv
 241              	.L10:
 242              		.loc 3 30 0 discriminator 3
 243 0028 7B68     		ldr	r3, [r7, #4]
 244 002a 1846     		mov	r0, r3
 245 002c 07F10807 		add	r7, r7, #8
 246 0030 BD46     		mov	sp, r7
 247 0032 80BD     		pop	{r7, pc}
 248              	.L12:
 249              		.align	2
 250              	.L11:
 251 0034 08000000 		.word	_ZTV24CLedHeartBeatSTM32F4Disc+8
 252              		.cfi_endproc
 253              	.LFE140:
 255              		.section	.text._ZN24CLedHeartBeatSTM32F4DiscD0Ev,"ax",%progbits
 256              		.align	2
 257              		.global	_ZN24CLedHeartBeatSTM32F4DiscD0Ev
 258              		.thumb
 259              		.thumb_func
 261              	_ZN24CLedHeartBeatSTM32F4DiscD0Ev:
 262              	.LFB142:
  28:../CLedHeartBeatSTM32F4Disc.cpp **** CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 263              		.loc 3 28 0 is_stmt 1
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 8
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI15:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 14, -4
 271              		.cfi_offset 7, -8
 272 0002 82B0     		sub	sp, sp, #8
 273              	.LCFI16:
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI17:
 277              		.cfi_def_cfa_register 7
 278 0006 7860     		str	r0, [r7, #4]
 279              		.loc 3 30 0
 280 0008 7868     		ldr	r0, [r7, #4]
 281 000a FFF7FEFF 		bl	_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 282 000e 7868     		ldr	r0, [r7, #4]
 283 0010 FFF7FEFF 		bl	_ZdlPv
 284 0014 7B68     		ldr	r3, [r7, #4]
 285 0016 1846     		mov	r0, r3
 286 0018 07F10807 		add	r7, r7, #8
 287 001c BD46     		mov	sp, r7
 288 001e 80BD     		pop	{r7, pc}
 289              		.cfi_endproc
 290              	.LFE142:
 292              		.section	.text._ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv,"ax",%progbits
 293              		.align	2
 294              		.global	_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv
 295              		.thumb
 296              		.thumb_func
 298              	_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv:
 299              	.LFB143:
  31:../CLedHeartBeatSTM32F4Disc.cpp **** 
  32:../CLedHeartBeatSTM32F4Disc.cpp **** /**
  33:../CLedHeartBeatSTM32F4Disc.cpp ****   * @brief  HardwareInit called before Scheduler starts
  34:../CLedHeartBeatSTM32F4Disc.cpp ****   * @param  None
  35:../CLedHeartBeatSTM32F4Disc.cpp ****   * @retval true on succsess
  36:../CLedHeartBeatSTM32F4Disc.cpp ****   */
  37:../CLedHeartBeatSTM32F4Disc.cpp **** bool CLedHeartBeatSTM32F4Disc::HardwareInit(){
 300              		.loc 3 37 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 8
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304 0000 80B5     		push	{r7, lr}
 305              	.LCFI18:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 14, -4
 308              		.cfi_offset 7, -8
 309 0002 82B0     		sub	sp, sp, #8
 310              	.LCFI19:
 311              		.cfi_def_cfa_offset 16
 312 0004 00AF     		add	r7, sp, #0
 313              	.LCFI20:
 314              		.cfi_def_cfa_register 7
 315 0006 7860     		str	r0, [r7, #4]
  38:../CLedHeartBeatSTM32F4Disc.cpp **** 
  39:../CLedHeartBeatSTM32F4Disc.cpp **** 	STM_EVAL_LEDInit(LED3);
 316              		.loc 3 39 0
 317 0008 4FF00100 		mov	r0, #1
 318 000c FFF7FEFF 		bl	STM_EVAL_LEDInit
  40:../CLedHeartBeatSTM32F4Disc.cpp **** 	STM_EVAL_LEDInit(LED4);
 319              		.loc 3 40 0
 320 0010 4FF00000 		mov	r0, #0
 321 0014 FFF7FEFF 		bl	STM_EVAL_LEDInit
  41:../CLedHeartBeatSTM32F4Disc.cpp **** 	STM_EVAL_LEDInit(LED5);
 322              		.loc 3 41 0
 323 0018 4FF00200 		mov	r0, #2
 324 001c FFF7FEFF 		bl	STM_EVAL_LEDInit
  42:../CLedHeartBeatSTM32F4Disc.cpp **** 	STM_EVAL_LEDInit(LED6);
 325              		.loc 3 42 0
 326 0020 4FF00300 		mov	r0, #3
 327 0024 FFF7FEFF 		bl	STM_EVAL_LEDInit
  43:../CLedHeartBeatSTM32F4Disc.cpp **** 	return true;
 328              		.loc 3 43 0
 329 0028 4FF00103 		mov	r3, #1
  44:../CLedHeartBeatSTM32F4Disc.cpp **** }
 330              		.loc 3 44 0
 331 002c 1846     		mov	r0, r3
 332 002e 07F10807 		add	r7, r7, #8
 333 0032 BD46     		mov	sp, r7
 334 0034 80BD     		pop	{r7, pc}
 335              		.cfi_endproc
 336              	.LFE143:
 338 0036 00BF     		.section	.text._ZN24CLedHeartBeatSTM32F4Disc3RunEv,"ax",%progbits
 339              		.align	2
 340              		.global	_ZN24CLedHeartBeatSTM32F4Disc3RunEv
 341              		.thumb
 342              		.thumb_func
 344              	_ZN24CLedHeartBeatSTM32F4Disc3RunEv:
 345              	.LFB144:
  45:../CLedHeartBeatSTM32F4Disc.cpp **** 
  46:../CLedHeartBeatSTM32F4Disc.cpp **** /**
  47:../CLedHeartBeatSTM32F4Disc.cpp ****   * @brief  task function for Led Heartbeat
  48:../CLedHeartBeatSTM32F4Disc.cpp ****   * @param  None
  49:../CLedHeartBeatSTM32F4Disc.cpp ****   * @retval None
  50:../CLedHeartBeatSTM32F4Disc.cpp ****   */
  51:../CLedHeartBeatSTM32F4Disc.cpp **** void CLedHeartBeatSTM32F4Disc::Run(){
 346              		.loc 3 51 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 8
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              	.LCFI21:
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 14, -4
 354              		.cfi_offset 7, -8
 355 0002 82B0     		sub	sp, sp, #8
 356              	.LCFI22:
 357              		.cfi_def_cfa_offset 16
 358 0004 00AF     		add	r7, sp, #0
 359              	.LCFI23:
 360              		.cfi_def_cfa_register 7
 361 0006 7860     		str	r0, [r7, #4]
 362              	.L24:
  52:../CLedHeartBeatSTM32F4Disc.cpp **** 	while(1){
  53:../CLedHeartBeatSTM32F4Disc.cpp **** 		switch(ledState){
 363              		.loc 3 53 0
 364 0008 7B68     		ldr	r3, [r7, #4]
 365 000a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 366 000c 032B     		cmp	r3, #3
 367 000e 5FD8     		bhi	.L17
 368 0010 01A2     		adr	r2, .L22
 369 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 370 0016 00BF     		.align	2
 371              	.L22:
 372 0018 29000000 		.word	.L18+1
 373 001c 53000000 		.word	.L19+1
 374 0020 7D000000 		.word	.L20+1
 375 0024 A7000000 		.word	.L21+1
 376              	.L18:
  54:../CLedHeartBeatSTM32F4Disc.cpp **** 		case LED_Up:
  55:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOn(LED3);
 377              		.loc 3 55 0
 378 0028 4FF00100 		mov	r0, #1
 379 002c FFF7FEFF 		bl	STM_EVAL_LEDOn
  56:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED5);
 380              		.loc 3 56 0
 381 0030 4FF00200 		mov	r0, #2
 382 0034 FFF7FEFF 		bl	STM_EVAL_LEDOff
  57:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED6);
 383              		.loc 3 57 0
 384 0038 4FF00300 		mov	r0, #3
 385 003c FFF7FEFF 		bl	STM_EVAL_LEDOff
  58:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED4);
 386              		.loc 3 58 0
 387 0040 4FF00000 		mov	r0, #0
 388 0044 FFF7FEFF 		bl	STM_EVAL_LEDOff
  59:../CLedHeartBeatSTM32F4Disc.cpp **** 			ledState = LED_Right;
 389              		.loc 3 59 0
 390 0048 7B68     		ldr	r3, [r7, #4]
 391 004a 4FF00102 		mov	r2, #1
 392 004e 1A73     		strb	r2, [r3, #12]
  60:../CLedHeartBeatSTM32F4Disc.cpp **** 			break;
 393              		.loc 3 60 0
 394 0050 43E0     		b	.L23
 395              	.L19:
  61:../CLedHeartBeatSTM32F4Disc.cpp **** 		case LED_Right:
  62:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED3);
 396              		.loc 3 62 0
 397 0052 4FF00100 		mov	r0, #1
 398 0056 FFF7FEFF 		bl	STM_EVAL_LEDOff
  63:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOn(LED5);
 399              		.loc 3 63 0
 400 005a 4FF00200 		mov	r0, #2
 401 005e FFF7FEFF 		bl	STM_EVAL_LEDOn
  64:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED6);
 402              		.loc 3 64 0
 403 0062 4FF00300 		mov	r0, #3
 404 0066 FFF7FEFF 		bl	STM_EVAL_LEDOff
  65:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED4);
 405              		.loc 3 65 0
 406 006a 4FF00000 		mov	r0, #0
 407 006e FFF7FEFF 		bl	STM_EVAL_LEDOff
  66:../CLedHeartBeatSTM32F4Disc.cpp **** 			ledState = LED_Down;
 408              		.loc 3 66 0
 409 0072 7B68     		ldr	r3, [r7, #4]
 410 0074 4FF00202 		mov	r2, #2
 411 0078 1A73     		strb	r2, [r3, #12]
  67:../CLedHeartBeatSTM32F4Disc.cpp **** 			break;
 412              		.loc 3 67 0
 413 007a 2EE0     		b	.L23
 414              	.L20:
  68:../CLedHeartBeatSTM32F4Disc.cpp **** 		case LED_Down:
  69:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED3);
 415              		.loc 3 69 0
 416 007c 4FF00100 		mov	r0, #1
 417 0080 FFF7FEFF 		bl	STM_EVAL_LEDOff
  70:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED5);
 418              		.loc 3 70 0
 419 0084 4FF00200 		mov	r0, #2
 420 0088 FFF7FEFF 		bl	STM_EVAL_LEDOff
  71:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOn(LED6);
 421              		.loc 3 71 0
 422 008c 4FF00300 		mov	r0, #3
 423 0090 FFF7FEFF 		bl	STM_EVAL_LEDOn
  72:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED4);
 424              		.loc 3 72 0
 425 0094 4FF00000 		mov	r0, #0
 426 0098 FFF7FEFF 		bl	STM_EVAL_LEDOff
  73:../CLedHeartBeatSTM32F4Disc.cpp **** 			ledState = LED_Left;
 427              		.loc 3 73 0
 428 009c 7B68     		ldr	r3, [r7, #4]
 429 009e 4FF00302 		mov	r2, #3
 430 00a2 1A73     		strb	r2, [r3, #12]
  74:../CLedHeartBeatSTM32F4Disc.cpp **** 			break;
 431              		.loc 3 74 0
 432 00a4 19E0     		b	.L23
 433              	.L21:
  75:../CLedHeartBeatSTM32F4Disc.cpp **** 		case LED_Left:
  76:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED3);
 434              		.loc 3 76 0
 435 00a6 4FF00100 		mov	r0, #1
 436 00aa FFF7FEFF 		bl	STM_EVAL_LEDOff
  77:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED5);
 437              		.loc 3 77 0
 438 00ae 4FF00200 		mov	r0, #2
 439 00b2 FFF7FEFF 		bl	STM_EVAL_LEDOff
  78:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOff(LED6);
 440              		.loc 3 78 0
 441 00b6 4FF00300 		mov	r0, #3
 442 00ba FFF7FEFF 		bl	STM_EVAL_LEDOff
  79:../CLedHeartBeatSTM32F4Disc.cpp **** 			STM_EVAL_LEDOn(LED4);
 443              		.loc 3 79 0
 444 00be 4FF00000 		mov	r0, #0
 445 00c2 FFF7FEFF 		bl	STM_EVAL_LEDOn
  80:../CLedHeartBeatSTM32F4Disc.cpp **** 			ledState = LED_Up;
 446              		.loc 3 80 0
 447 00c6 7B68     		ldr	r3, [r7, #4]
 448 00c8 4FF00002 		mov	r2, #0
 449 00cc 1A73     		strb	r2, [r3, #12]
  81:../CLedHeartBeatSTM32F4Disc.cpp **** 			break;
 450              		.loc 3 81 0
 451 00ce 04E0     		b	.L23
 452              	.L17:
  82:../CLedHeartBeatSTM32F4Disc.cpp **** 		default:
  83:../CLedHeartBeatSTM32F4Disc.cpp **** 			ledState = LED_Up;
 453              		.loc 3 83 0
 454 00d0 7B68     		ldr	r3, [r7, #4]
 455 00d2 4FF00002 		mov	r2, #0
 456 00d6 1A73     		strb	r2, [r3, #12]
  84:../CLedHeartBeatSTM32F4Disc.cpp **** 			break;
 457              		.loc 3 84 0
 458 00d8 00BF     		nop
 459              	.L23:
  85:../CLedHeartBeatSTM32F4Disc.cpp **** 		}
  86:../CLedHeartBeatSTM32F4Disc.cpp **** 		vTaskDelay(ledRate); // 500ms delay
 460              		.loc 3 86 0
 461 00da 7B68     		ldr	r3, [r7, #4]
 462 00dc 1B69     		ldr	r3, [r3, #16]
 463 00de 1846     		mov	r0, r3
 464 00e0 FFF7FEFF 		bl	vTaskDelay
  52:../CLedHeartBeatSTM32F4Disc.cpp **** 	while(1){
 465              		.loc 3 52 0
 466 00e4 90E7     		b	.L24
 467              		.cfi_endproc
 468              	.LFE144:
 470              		.global	_ZTV24CLedHeartBeatSTM32F4Disc
 471 00e6 00BF     		.section	.rodata._ZTV24CLedHeartBeatSTM32F4Disc,"a",%progbits
 472              		.align	3
 475              	_ZTV24CLedHeartBeatSTM32F4Disc:
 476 0000 00000000 		.word	0
 477 0004 00000000 		.word	0
 478 0008 00000000 		.word	_ZNK5CTask7IsValidEv
 479 000c 00000000 		.word	_ZN5CTask6AttachEPv
 480 0010 00000000 		.word	_ZN5CTask6DetachEv
 481 0014 00000000 		.word	_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 482 0018 00000000 		.word	_ZN24CLedHeartBeatSTM32F4DiscD0Ev
 483 001c 00000000 		.word	_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv
 484 0020 00000000 		.word	_ZN24CLedHeartBeatSTM32F4Disc3RunEv
 485 0024 00000000 		.word	_ZN12AManagedTask8OnCreateEPKctm
 486              		.global	_ZN24CLedHeartBeatSTM32F4DiscC1Em
 487              		.thumb_set _ZN24CLedHeartBeatSTM32F4DiscC1Em,_ZN24CLedHeartBeatSTM32F4DiscC2Em
 488              		.global	_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 489              		.thumb_set _ZN24CLedHeartBeatSTM32F4DiscD1Ev,_ZN24CLedHeartBeatSTM32F4DiscD2Ev
 490              		.text
 491              	.Letext0:
 492              		.file 4 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 493              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source/portable
 494              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 495              		.file 7 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS_EC\\Source/IFreeRTOSProtocol.h"
 496              		.file 8 "../CLedHeartBeatSTM32F4Disc.h"
 497              		.file 9 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4-Discovery/stm32f4_discovery.h"
 498              		.file 10 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CLedHeartBeatSTM32F4Disc.cpp
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:19     .text._ZNK5CTask7IsValidEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:24     .text._ZNK5CTask7IsValidEv:00000000 _ZNK5CTask7IsValidEv
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:61     .text._ZN5CTask6DetachEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:66     .text._ZN5CTask6DetachEv:00000000 _ZN5CTask6DetachEv
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:106    .text._ZN12AManagedTask8OnCreateEPKctm:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:111    .text._ZN12AManagedTask8OnCreateEPKctm:00000000 _ZN12AManagedTask8OnCreateEPKctm
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:145    .text._ZN24CLedHeartBeatSTM32F4DiscC2Em:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:150    .text._ZN24CLedHeartBeatSTM32F4DiscC2Em:00000000 _ZN24CLedHeartBeatSTM32F4DiscC2Em
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:196    .text._ZN24CLedHeartBeatSTM32F4DiscC2Em:00000034 $d
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:475    .rodata._ZTV24CLedHeartBeatSTM32F4Disc:00000000 _ZTV24CLedHeartBeatSTM32F4Disc
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:201    .text._ZN24CLedHeartBeatSTM32F4DiscD2Ev:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:206    .text._ZN24CLedHeartBeatSTM32F4DiscD2Ev:00000000 _ZN24CLedHeartBeatSTM32F4DiscD2Ev
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:251    .text._ZN24CLedHeartBeatSTM32F4DiscD2Ev:00000034 $d
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:256    .text._ZN24CLedHeartBeatSTM32F4DiscD0Ev:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:261    .text._ZN24CLedHeartBeatSTM32F4DiscD0Ev:00000000 _ZN24CLedHeartBeatSTM32F4DiscD0Ev
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:206    .text._ZN24CLedHeartBeatSTM32F4DiscD2Ev:00000000 _ZN24CLedHeartBeatSTM32F4DiscD1Ev
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:293    .text._ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:298    .text._ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv:00000000 _ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:339    .text._ZN24CLedHeartBeatSTM32F4Disc3RunEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:344    .text._ZN24CLedHeartBeatSTM32F4Disc3RunEv:00000000 _ZN24CLedHeartBeatSTM32F4Disc3RunEv
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:372    .text._ZN24CLedHeartBeatSTM32F4Disc3RunEv:00000018 $d
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:378    .text._ZN24CLedHeartBeatSTM32F4Disc3RunEv:00000028 $t
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:472    .rodata._ZTV24CLedHeartBeatSTM32F4Disc:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccESAfQ5.s:150    .text._ZN24CLedHeartBeatSTM32F4DiscC2Em:00000000 _ZN24CLedHeartBeatSTM32F4DiscC1Em
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN12AManagedTaskC2Ev
_ZN12AManagedTaskD2Ev
_ZdlPv
STM_EVAL_LEDInit
STM_EVAL_LEDOn
STM_EVAL_LEDOff
vTaskDelay
_ZN5CTask6AttachEPv
