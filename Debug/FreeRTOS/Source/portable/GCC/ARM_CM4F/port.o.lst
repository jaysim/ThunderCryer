   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ulKernelPriority
  19              		.section	.rodata.ulKernelPriority,"a",%progbits
  20              		.align	2
  23              	ulKernelPriority:
  24 0000 FF000000 		.word	255
  25              		.section	.data.uxCriticalNesting,"aw",%progbits
  26              		.align	2
  29              	uxCriticalNesting:
  30 0000 AAAAAAAA 		.word	-1431655766
  31              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  32              		.align	2
  33              		.global	pxPortInitialiseStack
  34              		.thumb
  35              		.thumb_func
  37              	pxPortInitialiseStack:
  38              	.LFB110:
  39              		.file 1 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Cortex M4F Port contributed by Thomas Kindler <mail_cm4@t-kindler.de>
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     contact details.
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     critical systems.
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     licensing and training services.
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** defined.  The value should also ensure backward compatibility.
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN		( 0xFFFFFFFD )
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  40              		.loc 1 116 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 16
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44              		@ link register save eliminated.
  45 0000 80B4     		push	{r7}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 4
  48              		.cfi_offset 7, -4
  49 0002 85B0     		sub	sp, sp, #20
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 24
  52 0004 00AF     		add	r7, sp, #0
  53              	.LCFI2:
  54              		.cfi_def_cfa_register 7
  55 0006 F860     		str	r0, [r7, #12]
  56 0008 B960     		str	r1, [r7, #8]
  57 000a 7A60     		str	r2, [r7, #4]
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  58              		.loc 1 119 0
  59 000c FB68     		ldr	r3, [r7, #12]
  60 000e A3F10403 		sub	r3, r3, #4
  61 0012 FB60     		str	r3, [r7, #12]
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  62              		.loc 1 120 0
  63 0014 FB68     		ldr	r3, [r7, #12]
  64 0016 4FF08072 		mov	r2, #16777216
  65 001a 1A60     		str	r2, [r3, #0]
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  66              		.loc 1 121 0
  67 001c FB68     		ldr	r3, [r7, #12]
  68 001e A3F10403 		sub	r3, r3, #4
  69 0022 FB60     		str	r3, [r7, #12]
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  70              		.loc 1 122 0
  71 0024 BA68     		ldr	r2, [r7, #8]
  72 0026 FB68     		ldr	r3, [r7, #12]
  73 0028 1A60     		str	r2, [r3, #0]
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  74              		.loc 1 123 0
  75 002a FB68     		ldr	r3, [r7, #12]
  76 002c A3F10403 		sub	r3, r3, #4
  77 0030 FB60     		str	r3, [r7, #12]
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
  78              		.loc 1 124 0
  79 0032 FB68     		ldr	r3, [r7, #12]
  80 0034 4FF00002 		mov	r2, #0
  81 0038 1A60     		str	r2, [r3, #0]
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  82              		.loc 1 125 0
  83 003a FB68     		ldr	r3, [r7, #12]
  84 003c A3F11403 		sub	r3, r3, #20
  85 0040 FB60     		str	r3, [r7, #12]
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  86              		.loc 1 126 0
  87 0042 7A68     		ldr	r2, [r7, #4]
  88 0044 FB68     		ldr	r3, [r7, #12]
  89 0046 1A60     		str	r2, [r3, #0]
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  90              		.loc 1 127 0
  91 0048 FB68     		ldr	r3, [r7, #12]
  92 004a A3F12403 		sub	r3, r3, #36
  93 004e FB60     		str	r3, [r7, #12]
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
  94              		.loc 1 128 0
  95 0050 FB68     		ldr	r3, [r7, #12]
  96 0052 6FF00202 		mvn	r2, #2
  97 0056 1A60     		str	r2, [r3, #0]
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
  98              		.loc 1 129 0
  99 0058 FB68     		ldr	r3, [r7, #12]
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 100              		.loc 1 130 0
 101 005a 1846     		mov	r0, r3
 102 005c 07F11407 		add	r7, r7, #20
 103 0060 BD46     		mov	sp, r7
 104 0062 80BC     		pop	{r7}
 105 0064 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE110:
 109 0066 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 110              		.align	2
 111              		.global	SVC_Handler
 112              		.thumb
 113              		.thumb_func
 115              	SVC_Handler:
 116              	.LFB111:
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 117              		.loc 1 134 0
 118              		.cfi_startproc
 119              		@ Naked Function: prologue and epilogue provided by programmer.
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 122              		.loc 1 135 0
 123              	@ 135 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 124 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 125 0002 1968     		ldr r1, [r3]					
 126 0004 0868     		ldr r0, [r1]					
 127 0006 50F804EB 		ldmia r0!, {r14}				
 128 000a B0E8F00F 		ldmia r0!, {r4-r11}				
 129 000e 80F30988 		msr psp, r0						
 130 0012 4FF00000 		mov r0, #0 						
 131 0016 80F31188 		msr	basepri, r0					
 132 001a 7047     		bx r14							
 133              										
 134              		.align 2						
 135 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 136              	
 137              	@ 0 "" 2
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r14}				\n" /* Pop the EXC_RETURN value */
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 138              		.loc 1 149 0
 139              		.thumb
 140              		.cfi_endproc
 141              	.LFE111:
 143              		.section	.text.vPortStartFirstTask,"ax",%progbits
 144              		.align	2
 145              		.global	vPortStartFirstTask
 146              		.thumb
 147              		.thumb_func
 149              	vPortStartFirstTask:
 150              	.LFB112:
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void )
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 151              		.loc 1 153 0
 152              		.cfi_startproc
 153              		@ Naked Function: prologue and epilogue provided by programmer.
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 156              		.loc 1 154 0
 157              	@ 154 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 158 0000 0348     		 ldr r0, =0xE000ED08 	
 159 0002 0068     	 ldr r0, [r0] 			
 160 0004 0068     	 ldr r0, [r0] 			
 161 0006 80F30888 	 msr msp, r0			
 162 000a 62B6     	 cpsie i				
 163 000c 00DF     	 svc 0					
 164 000e 00BF     	 nop					
 165              	
 166              	@ 0 "" 2
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 167              		.loc 1 163 0
 168              		.thumb
 169              		.cfi_endproc
 170              	.LFE112:
 172              		.section	.text.xPortStartScheduler,"ax",%progbits
 173              		.align	2
 174              		.global	xPortStartScheduler
 175              		.thumb
 176              		.thumb_func
 178              	xPortStartScheduler:
 179              	.LFB113:
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 180              		.loc 1 170 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 1, uses_anonymous_args = 0
 184 0000 80B5     		push	{r7, lr}
 185              	.LCFI3:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 14, -4
 188              		.cfi_offset 7, -8
 189 0002 00AF     		add	r7, sp, #0
 190              	.LCFI4:
 191              		.cfi_def_cfa_register 7
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 192              		.loc 1 172 0
 193 0004 4EF62053 		movw	r3, #60704
 194 0008 CEF20003 		movt	r3, 57344
 195 000c 4EF62052 		movw	r2, #60704
 196 0010 CEF20002 		movt	r2, 57344
 197 0014 1268     		ldr	r2, [r2, #0]
 198 0016 42F47F02 		orr	r2, r2, #16711680
 199 001a 1A60     		str	r2, [r3, #0]
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 200              		.loc 1 173 0
 201 001c 4EF62053 		movw	r3, #60704
 202 0020 CEF20003 		movt	r3, 57344
 203 0024 4EF62052 		movw	r2, #60704
 204 0028 CEF20002 		movt	r2, 57344
 205 002c 1268     		ldr	r2, [r2, #0]
 206 002e 42F07F42 		orr	r2, r2, #-16777216
 207 0032 1A60     		str	r2, [r3, #0]
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 208              		.loc 1 177 0
 209 0034 FFF7FEFF 		bl	prvSetupTimerInterrupt
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 210              		.loc 1 180 0
 211 0038 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 212 003c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 213 0040 4FF00002 		mov	r2, #0
 214 0044 1A60     		str	r2, [r3, #0]
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 215              		.loc 1 183 0
 216 0046 FFF7FEFF 		bl	vPortStartFirstTask
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 217              		.loc 1 186 0
 218 004a 4FF00003 		mov	r3, #0
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 219              		.loc 1 187 0
 220 004e 1846     		mov	r0, r3
 221 0050 80BD     		pop	{r7, pc}
 222              		.cfi_endproc
 223              	.LFE113:
 225 0052 00BF     		.section	.text.vPortEndScheduler,"ax",%progbits
 226              		.align	2
 227              		.global	vPortEndScheduler
 228              		.thumb
 229              		.thumb_func
 231              	vPortEndScheduler:
 232              	.LFB114:
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 233              		.loc 1 191 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 0000 80B4     		push	{r7}
 239              	.LCFI5:
 240              		.cfi_def_cfa_offset 4
 241              		.cfi_offset 7, -4
 242 0002 00AF     		add	r7, sp, #0
 243              	.LCFI6:
 244              		.cfi_def_cfa_register 7
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 245              		.loc 1 194 0
 246 0004 BD46     		mov	sp, r7
 247 0006 80BC     		pop	{r7}
 248 0008 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE114:
 252 000a 00BF     		.section	.text.vPortYieldFromISR,"ax",%progbits
 253              		.align	2
 254              		.global	vPortYieldFromISR
 255              		.thumb
 256              		.thumb_func
 258              	vPortYieldFromISR:
 259              	.LFB115:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 260              		.loc 1 198 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265 0000 80B4     		push	{r7}
 266              	.LCFI7:
 267              		.cfi_def_cfa_offset 4
 268              		.cfi_offset 7, -4
 269 0002 00AF     		add	r7, sp, #0
 270              	.LCFI8:
 271              		.cfi_def_cfa_register 7
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 272              		.loc 1 200 0
 273 0004 4EF60453 		movw	r3, #60676
 274 0008 CEF20003 		movt	r3, 57344
 275 000c 4FF08052 		mov	r2, #268435456
 276 0010 1A60     		str	r2, [r3, #0]
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 277              		.loc 1 201 0
 278 0012 BD46     		mov	sp, r7
 279 0014 80BC     		pop	{r7}
 280 0016 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE115:
 284              		.section	.text.vPortEnterCritical,"ax",%progbits
 285              		.align	2
 286              		.global	vPortEnterCritical
 287              		.thumb
 288              		.thumb_func
 290              	vPortEnterCritical:
 291              	.LFB116:
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 292              		.loc 1 205 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 1, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297 0000 80B4     		push	{r7}
 298              	.LCFI9:
 299              		.cfi_def_cfa_offset 4
 300              		.cfi_offset 7, -4
 301 0002 00AF     		add	r7, sp, #0
 302              	.LCFI10:
 303              		.cfi_def_cfa_register 7
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 304              		.loc 1 206 0
 305              	@ 206 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 306 0004 4FF0BF00 			mov r0, #191								
 307 0008 80F31188 		msr basepri, r0							
 308              	
 309              	@ 0 "" 2
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 310              		.loc 1 207 0
 311              		.thumb
 312 000c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 313 0010 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 314 0014 1B68     		ldr	r3, [r3, #0]
 315 0016 03F10102 		add	r2, r3, #1
 316 001a 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 317 001e C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 318 0022 1A60     		str	r2, [r3, #0]
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 319              		.loc 1 208 0
 320 0024 BD46     		mov	sp, r7
 321 0026 80BC     		pop	{r7}
 322 0028 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE116:
 326 002a 00BF     		.section	.text.vPortExitCritical,"ax",%progbits
 327              		.align	2
 328              		.global	vPortExitCritical
 329              		.thumb
 330              		.thumb_func
 332              	vPortExitCritical:
 333              	.LFB117:
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 334              		.loc 1 212 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              	.LCFI11:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0002 00AF     		add	r7, sp, #0
 344              	.LCFI12:
 345              		.cfi_def_cfa_register 7
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 346              		.loc 1 213 0
 347 0004 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 348 0008 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 349 000c 1B68     		ldr	r3, [r3, #0]
 350 000e 03F1FF32 		add	r2, r3, #-1
 351 0012 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 352 0016 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 353 001a 1A60     		str	r2, [r3, #0]
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 354              		.loc 1 214 0
 355 001c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 356 0020 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 357 0024 1B68     		ldr	r3, [r3, #0]
 358 0026 002B     		cmp	r3, #0
 359 0028 03D1     		bne	.L8
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 360              		.loc 1 216 0
 361              	@ 216 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 362 002a 4FF00000 			mov r0, #0					
 363 002e 80F31188 		msr basepri, r0				
 364              	
 365              	@ 0 "" 2
 366              		.thumb
 367              	.L8:
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 368              		.loc 1 218 0
 369 0032 BD46     		mov	sp, r7
 370 0034 80BC     		pop	{r7}
 371 0036 7047     		bx	lr
 372              		.cfi_endproc
 373              	.LFE117:
 375              		.section	.text.PendSV_Handler,"ax",%progbits
 376              		.align	2
 377              		.global	PendSV_Handler
 378              		.thumb
 379              		.thumb_func
 381              	PendSV_Handler:
 382              	.LFB118:
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 383              		.loc 1 222 0
 384              		.cfi_startproc
 385              		@ Naked Function: prologue and epilogue provided by programmer.
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 388              		.loc 1 225 0
 389              	@ 225 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 390 0000 EFF30980 			mrs r0, psp							
 391              											
 392 0004 134B     		ldr	r3, pxCurrentTCBConst			
 393 0006 1A68     		ldr	r2, [r3]						
 394              											
 395 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 396 000c 1EF0100F 		tst r14, #0x10						
 397 0010 08BF     		it eq								
 398 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 399 0016 40F804ED 		stmdb r0!, {r14}					
 400 001a 1060     		str r0, [r2]						
 401              											
 402 001c 2DE90840 		stmdb sp!, {r3, r14}				
 403 0020 4FF0BF00 		mov r0, #191							
 404 0024 80F31188 		msr basepri, r0						
 405 0028 FFF7FEFF 		bl vTaskSwitchContext				
 406 002c 4FF00000 		mov r0, #0							
 407 0030 80F31188 		msr basepri, r0						
 408 0034 BDE80840 		ldmia sp!, {r3, r14}				
 409              											
 410 0038 1968     		ldr r1, [r3]						
 411 003a 0868     		ldr r0, [r1]						
 412 003c 50F804EB 		ldmia r0!, {r14}					
 413 0040 1EF0100F 		tst r14, #0x10						
 414 0044 08BF     		it eq								
 415 0046 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 416 004a B0E8F00F 		ldmia r0!, {r4-r11}					
 417 004e 80F30988 		msr psp, r0							
 418 0052 7047     		bx r14								
 419              											
 420              		.align 2							
 421 0054 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 422              	
 423              	@ 0 "" 2
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 230:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 231:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 232:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 233:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 234:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 235:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"	/* Save the high FPU registers (will also trigger a lazy-save) */
 236:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r14}					\n"	/* Save the EXC_RETURN value */
 237:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 238:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 239:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 240:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0							\n"
 241:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 242:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 243:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 244:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 245:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 246:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 247:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n"
 248:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 249:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r14}					\n"	/* Pop the EXC_RETURN value */
 250:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 251:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 252:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"	/* Pop the high FPU registers.*/
 253:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 254:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 255:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 256:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 257:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 258:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 259:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 260:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 424              		.loc 1 261 0
 425              		.thumb
 426              		.cfi_endproc
 427              	.LFE118:
 429              		.section	.text.SysTick_Handler,"ax",%progbits
 430              		.align	2
 431              		.global	SysTick_Handler
 432              		.thumb
 433              		.thumb_func
 435              	SysTick_Handler:
 436              	.LFB119:
 262:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 263:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 264:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 265:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 437              		.loc 1 265 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 8
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441 0000 80B5     		push	{r7, lr}
 442              	.LCFI13:
 443              		.cfi_def_cfa_offset 8
 444              		.cfi_offset 14, -4
 445              		.cfi_offset 7, -8
 446 0002 82B0     		sub	sp, sp, #8
 447              	.LCFI14:
 448              		.cfi_def_cfa_offset 16
 449 0004 00AF     		add	r7, sp, #0
 450              	.LCFI15:
 451              		.cfi_def_cfa_register 7
 266:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     unsigned long ulDummy;
 267:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 268:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 269:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_PREEMPTION == 1
 270:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 452              		.loc 1 270 0
 453 0006 4EF60453 		movw	r3, #60676
 454 000a CEF20003 		movt	r3, 57344
 455 000e 4FF08052 		mov	r2, #268435456
 456 0012 1A60     		str	r2, [r3, #0]
 271:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 272:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 273:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 457              		.loc 1 273 0
 458 0014 4FF00003 		mov	r3, #0
 459 0018 7B60     		str	r3, [r7, #4]
 460              	@ 273 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 461 001a 4FF0BF00 			mov r0, #191								
 462 001e 80F31188 		msr basepri, r0							
 463              	
 464              	@ 0 "" 2
 274:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 275:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 465              		.loc 1 275 0
 466              		.thumb
 467 0022 FFF7FEFF 		bl	vTaskIncrementTick
 276:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 277:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 468              		.loc 1 277 0
 469              	@ 277 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 470 0026 4FF00000 			mov r0, #0					
 471 002a 80F31188 		msr basepri, r0				
 472              	
 473              	@ 0 "" 2
 278:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 474              		.loc 1 278 0
 475              		.thumb
 476 002e 07F10807 		add	r7, r7, #8
 477 0032 BD46     		mov	sp, r7
 478 0034 80BD     		pop	{r7, pc}
 479              		.cfi_endproc
 480              	.LFE119:
 482 0036 00BF     		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
 483              		.align	2
 484              		.thumb
 485              		.thumb_func
 487              	prvSetupTimerInterrupt:
 488              	.LFB120:
 279:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 280:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 281:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 282:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 283:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 284:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 285:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 286:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 489              		.loc 1 286 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 0000 80B4     		push	{r7}
 495              	.LCFI16:
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 0002 00AF     		add	r7, sp, #0
 499              	.LCFI17:
 500              		.cfi_def_cfa_register 7
 287:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 501              		.loc 1 288 0
 502 0004 4EF21403 		movw	r3, #57364
 503 0008 CEF20003 		movt	r3, 57344
 504 000c 40F20002 		movw	r2, #:lower16:SystemCoreClock
 505 0010 C0F20002 		movt	r2, #:upper16:SystemCoreClock
 506 0014 1168     		ldr	r1, [r2, #0]
 507 0016 48F21F52 		movw	r2, #34079
 508 001a C5F2EB12 		movt	r2, 20971
 509 001e A2FB0102 		umull	r0, r2, r2, r1
 510 0022 4FEA5212 		lsr	r2, r2, #5
 511 0026 02F1FF32 		add	r2, r2, #-1
 512 002a 1A60     		str	r2, [r3, #0]
 289:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 513              		.loc 1 289 0
 514 002c 4EF21003 		movw	r3, #57360
 515 0030 CEF20003 		movt	r3, 57344
 516 0034 4FF00702 		mov	r2, #7
 517 0038 1A60     		str	r2, [r3, #0]
 290:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 518              		.loc 1 290 0
 519 003a BD46     		mov	sp, r7
 520 003c 80BC     		pop	{r7}
 521 003e 7047     		bx	lr
 522              		.cfi_endproc
 523              	.LFE120:
 525              		.text
 526              	.Letext0:
 527              		.file 2 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/projdefs.h"
 528              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 529              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source/portable
 530              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
 531              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/system_stm32f
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:23     .rodata.ulKernelPriority:00000000 ulKernelPriority
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:20     .rodata.ulKernelPriority:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:26     .data.uxCriticalNesting:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:29     .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:32     .text.pxPortInitialiseStack:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:37     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:110    .text.SVC_Handler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:115    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:135    .text.SVC_Handler:0000001c pxCurrentTCBConst2
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:135    .text.SVC_Handler:0000001c $d
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:144    .text.vPortStartFirstTask:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:149    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:173    .text.xPortStartScheduler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:178    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:487    .text.prvSetupTimerInterrupt:00000000 prvSetupTimerInterrupt
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:226    .text.vPortEndScheduler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:231    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:253    .text.vPortYieldFromISR:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:258    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:285    .text.vPortEnterCritical:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:290    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:327    .text.vPortExitCritical:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:332    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:376    .text.PendSV_Handler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:381    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:421    .text.PendSV_Handler:00000054 pxCurrentTCBConst
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:421    .text.PendSV_Handler:00000054 $d
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:430    .text.SysTick_Handler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:435    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:483    .text.prvSetupTimerInterrupt:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cceSfdYz.s:172    .text.vPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
SystemCoreClock
