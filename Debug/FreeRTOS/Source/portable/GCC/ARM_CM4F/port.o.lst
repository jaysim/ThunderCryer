   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ulKernelPriority
  19              		.section	.rodata.ulKernelPriority,"a",%progbits
  20              		.align	2
  23              	ulKernelPriority:
  24 0000 FF000000 		.word	255
  25              		.section	.data.uxCriticalNesting,"aw",%progbits
  26              		.align	2
  29              	uxCriticalNesting:
  30 0000 AAAAAAAA 		.word	-1431655766
  31              		.text
  32              		.align	2
  33              		.global	pxPortInitialiseStack
  34              		.thumb
  35              		.thumb_func
  37              	pxPortInitialiseStack:
  38              	.LFB110:
  39              		.file 1 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Cortex M4F Port contributed by Thomas Kindler <mail_cm4@t-kindler.de>
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     contact details.
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     critical systems.
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     licensing and training services.
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** defined.  The value should also ensure backward compatibility.
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN		( 0xFFFFFFFD )
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  40              		.loc 1 116 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 16
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44              		@ link register save eliminated.
  45 0000 80B4     		push	{r7}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 4
  48              		.cfi_offset 7, -4
  49 0002 85B0     		sub	sp, sp, #20
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 24
  52 0004 00AF     		add	r7, sp, #0
  53              	.LCFI2:
  54              		.cfi_def_cfa_register 7
  55 0006 F860     		str	r0, [r7, #12]
  56 0008 B960     		str	r1, [r7, #8]
  57 000a 7A60     		str	r2, [r7, #4]
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  58              		.loc 1 119 0
  59 000c FB68     		ldr	r3, [r7, #12]
  60 000e A3F10403 		sub	r3, r3, #4
  61 0012 FB60     		str	r3, [r7, #12]
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  62              		.loc 1 120 0
  63 0014 FB68     		ldr	r3, [r7, #12]
  64 0016 4FF08072 		mov	r2, #16777216
  65 001a 1A60     		str	r2, [r3, #0]
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  66              		.loc 1 121 0
  67 001c FB68     		ldr	r3, [r7, #12]
  68 001e A3F10403 		sub	r3, r3, #4
  69 0022 FB60     		str	r3, [r7, #12]
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  70              		.loc 1 122 0
  71 0024 BA68     		ldr	r2, [r7, #8]
  72 0026 FB68     		ldr	r3, [r7, #12]
  73 0028 1A60     		str	r2, [r3, #0]
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  74              		.loc 1 123 0
  75 002a FB68     		ldr	r3, [r7, #12]
  76 002c A3F10403 		sub	r3, r3, #4
  77 0030 FB60     		str	r3, [r7, #12]
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
  78              		.loc 1 124 0
  79 0032 FB68     		ldr	r3, [r7, #12]
  80 0034 4FF00002 		mov	r2, #0
  81 0038 1A60     		str	r2, [r3, #0]
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  82              		.loc 1 125 0
  83 003a FB68     		ldr	r3, [r7, #12]
  84 003c A3F11403 		sub	r3, r3, #20
  85 0040 FB60     		str	r3, [r7, #12]
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  86              		.loc 1 126 0
  87 0042 7A68     		ldr	r2, [r7, #4]
  88 0044 FB68     		ldr	r3, [r7, #12]
  89 0046 1A60     		str	r2, [r3, #0]
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  90              		.loc 1 127 0
  91 0048 FB68     		ldr	r3, [r7, #12]
  92 004a A3F12403 		sub	r3, r3, #36
  93 004e FB60     		str	r3, [r7, #12]
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
  94              		.loc 1 128 0
  95 0050 FB68     		ldr	r3, [r7, #12]
  96 0052 6FF00202 		mvn	r2, #2
  97 0056 1A60     		str	r2, [r3, #0]
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
  98              		.loc 1 129 0
  99 0058 FB68     		ldr	r3, [r7, #12]
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 100              		.loc 1 130 0
 101 005a 1846     		mov	r0, r3
 102 005c 07F11407 		add	r7, r7, #20
 103 0060 BD46     		mov	sp, r7
 104 0062 80BC     		pop	{r7}
 105 0064 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE110:
 109 0066 00BF     		.align	2
 110              		.global	SVC_Handler
 111              		.thumb
 112              		.thumb_func
 114              	SVC_Handler:
 115              	.LFB111:
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 116              		.loc 1 134 0
 117              		.cfi_startproc
 118              		@ Naked Function: prologue and epilogue provided by programmer.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 121              		.loc 1 135 0
 122              	@ 135 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 123 0068 064B     			ldr	r3, pxCurrentTCBConst2		
 124 006a 1968     		ldr r1, [r3]					
 125 006c 0868     		ldr r0, [r1]					
 126 006e 50F804EB 		ldmia r0!, {r14}				
 127 0072 B0E8F00F 		ldmia r0!, {r4-r11}				
 128 0076 80F30988 		msr psp, r0						
 129 007a 4FF00000 		mov r0, #0 						
 130 007e 80F31188 		msr	basepri, r0					
 131 0082 7047     		bx r14							
 132              										
 133              		.align 2						
 134 0084 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 135              	
 136              	@ 0 "" 2
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r14}				\n" /* Pop the EXC_RETURN value */
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 137              		.loc 1 149 0
 138              		.thumb
 139              		.cfi_endproc
 140              	.LFE111:
 142              		.align	2
 143              		.global	vPortStartFirstTask
 144              		.thumb
 145              		.thumb_func
 147              	vPortStartFirstTask:
 148              	.LFB112:
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void )
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 149              		.loc 1 153 0
 150              		.cfi_startproc
 151              		@ Naked Function: prologue and epilogue provided by programmer.
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 154              		.loc 1 154 0
 155              	@ 154 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 156 0088 6E48     		 ldr r0, =0xE000ED08 	
 157 008a 0068     	 ldr r0, [r0] 			
 158 008c 0068     	 ldr r0, [r0] 			
 159 008e 80F30888 	 msr msp, r0			
 160 0092 62B6     	 cpsie i				
 161 0094 00DF     	 svc 0					
 162 0096 00BF     	 nop					
 163              	
 164              	@ 0 "" 2
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 165              		.loc 1 163 0
 166              		.thumb
 167              		.cfi_endproc
 168              	.LFE112:
 170              		.align	2
 171              		.global	xPortStartScheduler
 172              		.thumb
 173              		.thumb_func
 175              	xPortStartScheduler:
 176              	.LFB113:
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 177              		.loc 1 170 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0098 80B5     		push	{r7, lr}
 182              	.LCFI3:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 14, -4
 185              		.cfi_offset 7, -8
 186 009a 00AF     		add	r7, sp, #0
 187              	.LCFI4:
 188              		.cfi_def_cfa_register 7
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 189              		.loc 1 172 0
 190 009c 4EF62053 		movw	r3, #60704
 191 00a0 CEF20003 		movt	r3, 57344
 192 00a4 4EF62052 		movw	r2, #60704
 193 00a8 CEF20002 		movt	r2, 57344
 194 00ac 1268     		ldr	r2, [r2, #0]
 195 00ae 42F47F02 		orr	r2, r2, #16711680
 196 00b2 1A60     		str	r2, [r3, #0]
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 197              		.loc 1 173 0
 198 00b4 4EF62053 		movw	r3, #60704
 199 00b8 CEF20003 		movt	r3, 57344
 200 00bc 4EF62052 		movw	r2, #60704
 201 00c0 CEF20002 		movt	r2, 57344
 202 00c4 1268     		ldr	r2, [r2, #0]
 203 00c6 42F07F42 		orr	r2, r2, #-16777216
 204 00ca 1A60     		str	r2, [r3, #0]
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 205              		.loc 1 177 0
 206 00cc 00F09AF8 		bl	prvSetupTimerInterrupt
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 207              		.loc 1 180 0
 208 00d0 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 209 00d4 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 210 00d8 4FF00002 		mov	r2, #0
 211 00dc 1A60     		str	r2, [r3, #0]
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 212              		.loc 1 183 0
 213 00de FFF7FEFF 		bl	vPortStartFirstTask
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 214              		.loc 1 186 0
 215 00e2 4FF00003 		mov	r3, #0
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 216              		.loc 1 187 0
 217 00e6 1846     		mov	r0, r3
 218 00e8 80BD     		pop	{r7, pc}
 219              		.cfi_endproc
 220              	.LFE113:
 222 00ea 00BF     		.align	2
 223              		.global	vPortEndScheduler
 224              		.thumb
 225              		.thumb_func
 227              	vPortEndScheduler:
 228              	.LFB114:
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 229              		.loc 1 191 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234 00ec 80B4     		push	{r7}
 235              	.LCFI5:
 236              		.cfi_def_cfa_offset 4
 237              		.cfi_offset 7, -4
 238 00ee 00AF     		add	r7, sp, #0
 239              	.LCFI6:
 240              		.cfi_def_cfa_register 7
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 241              		.loc 1 194 0
 242 00f0 BD46     		mov	sp, r7
 243 00f2 80BC     		pop	{r7}
 244 00f4 7047     		bx	lr
 245              		.cfi_endproc
 246              	.LFE114:
 248 00f6 00BF     		.align	2
 249              		.global	vPortYieldFromISR
 250              		.thumb
 251              		.thumb_func
 253              	vPortYieldFromISR:
 254              	.LFB115:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 255              		.loc 1 198 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 1, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 260 00f8 80B4     		push	{r7}
 261              	.LCFI7:
 262              		.cfi_def_cfa_offset 4
 263              		.cfi_offset 7, -4
 264 00fa 00AF     		add	r7, sp, #0
 265              	.LCFI8:
 266              		.cfi_def_cfa_register 7
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 267              		.loc 1 200 0
 268 00fc 4EF60453 		movw	r3, #60676
 269 0100 CEF20003 		movt	r3, 57344
 270 0104 4FF08052 		mov	r2, #268435456
 271 0108 1A60     		str	r2, [r3, #0]
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 272              		.loc 1 201 0
 273 010a BD46     		mov	sp, r7
 274 010c 80BC     		pop	{r7}
 275 010e 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE115:
 279              		.align	2
 280              		.global	vPortEnterCritical
 281              		.thumb
 282              		.thumb_func
 284              	vPortEnterCritical:
 285              	.LFB116:
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 286              		.loc 1 205 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 291 0110 80B4     		push	{r7}
 292              	.LCFI9:
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 0112 00AF     		add	r7, sp, #0
 296              	.LCFI10:
 297              		.cfi_def_cfa_register 7
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 298              		.loc 1 206 0
 299              	@ 206 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 300 0114 4FF0BF00 			mov r0, #191								
 301 0118 80F31188 		msr basepri, r0							
 302              	
 303              	@ 0 "" 2
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 304              		.loc 1 207 0
 305              		.thumb
 306 011c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 307 0120 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 308 0124 1B68     		ldr	r3, [r3, #0]
 309 0126 03F10102 		add	r2, r3, #1
 310 012a 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 311 012e C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 312 0132 1A60     		str	r2, [r3, #0]
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 313              		.loc 1 208 0
 314 0134 BD46     		mov	sp, r7
 315 0136 80BC     		pop	{r7}
 316 0138 7047     		bx	lr
 317              		.cfi_endproc
 318              	.LFE116:
 320 013a 00BF     		.align	2
 321              		.global	vPortExitCritical
 322              		.thumb
 323              		.thumb_func
 325              	vPortExitCritical:
 326              	.LFB117:
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 327              		.loc 1 212 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 013c 80B4     		push	{r7}
 333              	.LCFI11:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 7, -4
 336 013e 00AF     		add	r7, sp, #0
 337              	.LCFI12:
 338              		.cfi_def_cfa_register 7
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 339              		.loc 1 213 0
 340 0140 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 341 0144 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 342 0148 1B68     		ldr	r3, [r3, #0]
 343 014a 03F1FF32 		add	r2, r3, #-1
 344 014e 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 345 0152 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 346 0156 1A60     		str	r2, [r3, #0]
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 347              		.loc 1 214 0
 348 0158 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 349 015c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 350 0160 1B68     		ldr	r3, [r3, #0]
 351 0162 002B     		cmp	r3, #0
 352 0164 03D1     		bne	.L8
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 353              		.loc 1 216 0
 354              	@ 216 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 355 0166 4FF00000 			mov r0, #0					
 356 016a 80F31188 		msr basepri, r0				
 357              	
 358              	@ 0 "" 2
 359              		.thumb
 360              	.L8:
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 361              		.loc 1 218 0
 362 016e BD46     		mov	sp, r7
 363 0170 80BC     		pop	{r7}
 364 0172 7047     		bx	lr
 365              		.cfi_endproc
 366              	.LFE117:
 368              		.align	2
 369              		.global	PendSV_Handler
 370              		.thumb
 371              		.thumb_func
 373              	PendSV_Handler:
 374              	.LFB118:
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 375              		.loc 1 222 0
 376              		.cfi_startproc
 377              		@ Naked Function: prologue and epilogue provided by programmer.
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 380              		.loc 1 225 0
 381              	@ 225 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 382 0174 EFF30980 			mrs r0, psp							
 383              											
 384 0178 134B     		ldr	r3, pxCurrentTCBConst			
 385 017a 1A68     		ldr	r2, [r3]						
 386              											
 387 017c 20E9F00F 		stmdb r0!, {r4-r11}					
 388 0180 1EF0100F 		tst r14, #0x10						
 389 0184 08BF     		it eq								
 390 0186 20ED108A 		vstmdbeq r0!, {s16-s31}				
 391 018a 40F804ED 		stmdb r0!, {r14}					
 392 018e 1060     		str r0, [r2]						
 393              											
 394 0190 2DE90840 		stmdb sp!, {r3, r14}				
 395 0194 4FF0BF00 		mov r0, #191							
 396 0198 80F31188 		msr basepri, r0						
 397 019c FFF7FEFF 		bl vTaskSwitchContext				
 398 01a0 4FF00000 		mov r0, #0							
 399 01a4 80F31188 		msr basepri, r0						
 400 01a8 BDE80840 		ldmia sp!, {r3, r14}				
 401              											
 402 01ac 1968     		ldr r1, [r3]						
 403 01ae 0868     		ldr r0, [r1]						
 404 01b0 50F804EB 		ldmia r0!, {r14}					
 405 01b4 1EF0100F 		tst r14, #0x10						
 406 01b8 08BF     		it eq								
 407 01ba B0EC108A 		vldmiaeq r0!, {s16-s31}				
 408 01be B0E8F00F 		ldmia r0!, {r4-r11}					
 409 01c2 80F30988 		msr psp, r0							
 410 01c6 7047     		bx r14								
 411              											
 412              		.align 2							
 413 01c8 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 414              	
 415              	@ 0 "" 2
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 230:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 231:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 232:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 233:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 234:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 235:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"	/* Save the high FPU registers (will also trigger a lazy-save) */
 236:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r14}					\n"	/* Save the EXC_RETURN value */
 237:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 238:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 239:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 240:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0							\n"
 241:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 242:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 243:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 244:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 245:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 246:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 247:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n"
 248:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 249:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r14}					\n"	/* Pop the EXC_RETURN value */
 250:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 251:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 252:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"	/* Pop the high FPU registers.*/
 253:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 254:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 255:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 256:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 257:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 258:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 259:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 260:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 416              		.loc 1 261 0
 417              		.thumb
 418              		.cfi_endproc
 419              	.LFE118:
 421              		.align	2
 422              		.global	SysTick_Handler
 423              		.thumb
 424              		.thumb_func
 426              	SysTick_Handler:
 427              	.LFB119:
 262:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 263:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 264:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 265:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 428              		.loc 1 265 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 8
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432 01cc 80B5     		push	{r7, lr}
 433              	.LCFI13:
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 14, -4
 436              		.cfi_offset 7, -8
 437 01ce 82B0     		sub	sp, sp, #8
 438              	.LCFI14:
 439              		.cfi_def_cfa_offset 16
 440 01d0 00AF     		add	r7, sp, #0
 441              	.LCFI15:
 442              		.cfi_def_cfa_register 7
 266:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     unsigned long ulDummy;
 267:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 268:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 269:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_PREEMPTION == 1
 270:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 443              		.loc 1 270 0
 444 01d2 4EF60453 		movw	r3, #60676
 445 01d6 CEF20003 		movt	r3, 57344
 446 01da 4FF08052 		mov	r2, #268435456
 447 01de 1A60     		str	r2, [r3, #0]
 271:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 272:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 273:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 448              		.loc 1 273 0
 449 01e0 4FF00003 		mov	r3, #0
 450 01e4 7B60     		str	r3, [r7, #4]
 451              	@ 273 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 452 01e6 4FF0BF00 			mov r0, #191								
 453 01ea 80F31188 		msr basepri, r0							
 454              	
 455              	@ 0 "" 2
 274:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 275:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 456              		.loc 1 275 0
 457              		.thumb
 458 01ee FFF7FEFF 		bl	vTaskIncrementTick
 276:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 277:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 459              		.loc 1 277 0
 460              	@ 277 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 461 01f2 4FF00000 			mov r0, #0					
 462 01f6 80F31188 		msr basepri, r0				
 463              	
 464              	@ 0 "" 2
 278:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 465              		.loc 1 278 0
 466              		.thumb
 467 01fa 07F10807 		add	r7, r7, #8
 468 01fe BD46     		mov	sp, r7
 469 0200 80BD     		pop	{r7, pc}
 470              		.cfi_endproc
 471              	.LFE119:
 473 0202 00BF     		.align	2
 474              		.thumb
 475              		.thumb_func
 477              	prvSetupTimerInterrupt:
 478              	.LFB120:
 279:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 280:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 281:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 282:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 283:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 284:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 285:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 286:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 479              		.loc 1 286 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0204 80B4     		push	{r7}
 485              	.LCFI16:
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 7, -4
 488 0206 00AF     		add	r7, sp, #0
 489              	.LCFI17:
 490              		.cfi_def_cfa_register 7
 287:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 491              		.loc 1 288 0
 492 0208 4EF21403 		movw	r3, #57364
 493 020c CEF20003 		movt	r3, 57344
 494 0210 40F20002 		movw	r2, #:lower16:SystemCoreClock
 495 0214 C0F20002 		movt	r2, #:upper16:SystemCoreClock
 496 0218 1168     		ldr	r1, [r2, #0]
 497 021a 48F21F52 		movw	r2, #34079
 498 021e C5F2EB12 		movt	r2, 20971
 499 0222 A2FB0102 		umull	r0, r2, r2, r1
 500 0226 4FEA5212 		lsr	r2, r2, #5
 501 022a 02F1FF32 		add	r2, r2, #-1
 502 022e 1A60     		str	r2, [r3, #0]
 289:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 503              		.loc 1 289 0
 504 0230 4EF21003 		movw	r3, #57360
 505 0234 CEF20003 		movt	r3, 57344
 506 0238 4FF00702 		mov	r2, #7
 507 023c 1A60     		str	r2, [r3, #0]
 290:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 508              		.loc 1 290 0
 509 023e BD46     		mov	sp, r7
 510 0240 80BC     		pop	{r7}
 511 0242 7047     		bx	lr
 512              		.cfi_endproc
 513              	.LFE120:
 515              	.Letext0:
 516              		.file 2 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 517              		.file 3 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 518              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 519              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
 520              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
  C:\Temp\cc1P1wdF.s:23     .rodata.ulKernelPriority:00000000 ulKernelPriority
  C:\Temp\cc1P1wdF.s:20     .rodata.ulKernelPriority:00000000 $d
  C:\Temp\cc1P1wdF.s:26     .data.uxCriticalNesting:00000000 $d
  C:\Temp\cc1P1wdF.s:29     .data.uxCriticalNesting:00000000 uxCriticalNesting
  C:\Temp\cc1P1wdF.s:32     .text:00000000 $t
  C:\Temp\cc1P1wdF.s:37     .text:00000000 pxPortInitialiseStack
  C:\Temp\cc1P1wdF.s:114    .text:00000068 SVC_Handler
  C:\Temp\cc1P1wdF.s:134    .text:00000084 pxCurrentTCBConst2
  C:\Temp\cc1P1wdF.s:134    .text:00000084 $d
  C:\Temp\cc1P1wdF.s:142    .text:00000088 $t
  C:\Temp\cc1P1wdF.s:147    .text:00000088 vPortStartFirstTask
  C:\Temp\cc1P1wdF.s:175    .text:00000098 xPortStartScheduler
  C:\Temp\cc1P1wdF.s:477    .text:00000204 prvSetupTimerInterrupt
  C:\Temp\cc1P1wdF.s:227    .text:000000ec vPortEndScheduler
  C:\Temp\cc1P1wdF.s:253    .text:000000f8 vPortYieldFromISR
  C:\Temp\cc1P1wdF.s:284    .text:00000110 vPortEnterCritical
  C:\Temp\cc1P1wdF.s:325    .text:0000013c vPortExitCritical
  C:\Temp\cc1P1wdF.s:373    .text:00000174 PendSV_Handler
  C:\Temp\cc1P1wdF.s:413    .text:000001c8 pxCurrentTCBConst
  C:\Temp\cc1P1wdF.s:413    .text:000001c8 $d
  C:\Temp\cc1P1wdF.s:421    .text:000001cc $t
  C:\Temp\cc1P1wdF.s:426    .text:000001cc SysTick_Handler
  C:\Temp\cc1P1wdF.s:521    .text:00000244 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
SystemCoreClock
