   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  19              		.align	1
  20              		.global	pxPortInitialiseStack
  21              		.thumb
  22              		.thumb_func
  24              	pxPortInitialiseStack:
  25              	.LFB110:
  26              		.file 1 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Cortex M4F Port contributed by Thomas Kindler <mail_cm4@t-kindler.de>
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     contact details.
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     critical systems.
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     licensing and training services.
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** defined.  The value should also ensure backward compatibility.
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN		( 0xFFFFFFFD )
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  27              		.loc 1 116 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  33              		.loc 1 120 0
  34 0000 4FF08073 		mov	r3, #16777216
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  35              		.loc 1 122 0
  36 0004 00E90A00 		stmdb	r0, {r1, r3}
  37              	.LVL1:
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
  38              		.loc 1 124 0
  39 0008 0023     		movs	r3, #0
  40 000a 40F80C3C 		str	r3, [r0, #-12]
  41              	.LVL2:
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
  42              		.loc 1 128 0
  43 000e 6FF00203 		mvn	r3, #2
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  44              		.loc 1 126 0
  45 0012 40F8202C 		str	r2, [r0, #-32]
  46              	.LVL3:
  47              		.loc 1 128 0
  48 0016 40F8443D 		str	r3, [r0, #-68]!
  49              	.LVL4:
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
  50              		.loc 1 130 0
  51 001a 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE110:
  55              		.section	.text.SVC_Handler,"ax",%progbits
  56              		.align	1
  57              		.global	SVC_Handler
  58              		.thumb
  59              		.thumb_func
  61              	SVC_Handler:
  62              	.LFB111:
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  63              		.loc 1 134 0
  64              		.cfi_startproc
  65              		@ Naked Function: prologue and epilogue provided by programmer.
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
  68              		.loc 1 135 0
  69              	@ 135 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
  70 0000 064B     			ldr	r3, pxCurrentTCBConst2		
  71 0002 1968     		ldr r1, [r3]					
  72 0004 0868     		ldr r0, [r1]					
  73 0006 50F804EB 		ldmia r0!, {r14}				
  74 000a B0E8F00F 		ldmia r0!, {r4-r11}				
  75 000e 80F30988 		msr psp, r0						
  76 0012 4FF00000 		mov r0, #0 						
  77 0016 80F31188 		msr	basepri, r0					
  78 001a 7047     		bx r14							
  79              										
  80              		.align 2						
  81 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
  82              	
  83              	@ 0 "" 2
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r14}				\n" /* Pop the EXC_RETURN value */
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
  84              		.loc 1 149 0
  85              		.thumb
  86              		.cfi_endproc
  87              	.LFE111:
  89              		.section	.text.vPortStartFirstTask,"ax",%progbits
  90              		.align	1
  91              		.global	vPortStartFirstTask
  92              		.thumb
  93              		.thumb_func
  95              	vPortStartFirstTask:
  96              	.LFB112:
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void )
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  97              		.loc 1 153 0
  98              		.cfi_startproc
  99              		@ Naked Function: prologue and epilogue provided by programmer.
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 102              		.loc 1 154 0
 103              	@ 154 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 104 0000 0348     		 ldr r0, =0xE000ED08 	
 105 0002 0068     	 ldr r0, [r0] 			
 106 0004 0068     	 ldr r0, [r0] 			
 107 0006 80F30888 	 msr msp, r0			
 108 000a 62B6     	 cpsie i				
 109 000c 00DF     	 svc 0					
 110 000e 00BF     	 nop					
 111              	
 112              	@ 0 "" 2
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 113              		.loc 1 163 0
 114              		.thumb
 115              		.cfi_endproc
 116              	.LFE112:
 118              		.section	.text.xPortStartScheduler,"ax",%progbits
 119              		.align	1
 120              		.global	xPortStartScheduler
 121              		.thumb
 122              		.thumb_func
 124              	xPortStartScheduler:
 125              	.LFB113:
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 126              		.loc 1 170 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 130              		.loc 1 172 0
 131 0000 0E4B     		ldr	r3, .L5
 132 0002 1A68     		ldr	r2, [r3, #0]
 133 0004 42F47F02 		orr	r2, r2, #16711680
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 134              		.loc 1 170 0
 135 0008 10B5     		push	{r4, lr}
 136              	.LCFI0:
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 14, -4
 139              		.cfi_offset 4, -8
 140              		.loc 1 172 0
 141 000a 1A60     		str	r2, [r3, #0]
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 142              		.loc 1 173 0
 143 000c 1A68     		ldr	r2, [r3, #0]
 144 000e 42F07F42 		orr	r2, r2, #-16777216
 145 0012 1A60     		str	r2, [r3, #0]
 146              	.LBB4:
 147              	.LBB5:
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 230:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 231:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 232:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 233:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 234:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 235:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"	/* Save the high FPU registers (will also trigger a lazy-save) */
 236:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r14}					\n"	/* Save the EXC_RETURN value */
 237:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 238:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 239:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 240:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0							\n"
 241:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 242:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 243:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 244:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 245:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 246:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 247:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n"
 248:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 249:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r14}					\n"	/* Pop the EXC_RETURN value */
 250:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 251:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 252:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"	/* Pop the high FPU registers.*/
 253:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 254:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 255:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 256:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 257:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 258:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 259:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 260:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 262:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 263:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 264:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 265:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 266:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     unsigned long ulDummy;
 267:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 268:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 269:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_PREEMPTION == 1
 270:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 271:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 272:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 273:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 274:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 275:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 276:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 277:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 278:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 279:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 280:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 281:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 282:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 283:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 284:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 285:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 286:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 287:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 148              		.loc 1 288 0
 149 0014 0A4B     		ldr	r3, .L5+4
 150 0016 1A68     		ldr	r2, [r3, #0]
 151 0018 4FF47A73 		mov	r3, #1000
 152 001c B2FBF3F2 		udiv	r2, r2, r3
 153 0020 084B     		ldr	r3, .L5+8
 154 0022 013A     		subs	r2, r2, #1
 155 0024 1A60     		str	r2, [r3, #0]
 289:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 156              		.loc 1 289 0
 157 0026 0722     		movs	r2, #7
 158 0028 43F8042C 		str	r2, [r3, #-4]
 159              	.LBE5:
 160              	.LBE4:
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 161              		.loc 1 180 0
 162 002c 064B     		ldr	r3, .L5+12
 163 002e 0024     		movs	r4, #0
 164 0030 1C60     		str	r4, [r3, #0]
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 165              		.loc 1 183 0
 166 0032 FFF7FEFF 		bl	vPortStartFirstTask
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 167              		.loc 1 187 0
 168 0036 2046     		mov	r0, r4
 169 0038 10BD     		pop	{r4, pc}
 170              	.L6:
 171 003a 00BF     		.align	2
 172              	.L5:
 173 003c 20ED00E0 		.word	-536810208
 174 0040 00000000 		.word	SystemCoreClock
 175 0044 14E000E0 		.word	-536813548
 176 0048 00000000 		.word	.LANCHOR0
 177              		.cfi_endproc
 178              	.LFE113:
 180              		.section	.text.vPortEndScheduler,"ax",%progbits
 181              		.align	1
 182              		.global	vPortEndScheduler
 183              		.thumb
 184              		.thumb_func
 186              	vPortEndScheduler:
 187              	.LFB114:
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 188              		.loc 1 191 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 193              		.loc 1 194 0
 194 0000 7047     		bx	lr
 195              		.cfi_endproc
 196              	.LFE114:
 198              		.section	.text.vPortYieldFromISR,"ax",%progbits
 199              		.align	1
 200              		.global	vPortYieldFromISR
 201              		.thumb
 202              		.thumb_func
 204              	vPortYieldFromISR:
 205              	.LFB115:
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 206              		.loc 1 198 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 211              		.loc 1 200 0
 212 0000 024B     		ldr	r3, .L9
 213 0002 4FF08052 		mov	r2, #268435456
 214 0006 1A60     		str	r2, [r3, #0]
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 215              		.loc 1 201 0
 216 0008 7047     		bx	lr
 217              	.L10:
 218 000a 00BF     		.align	2
 219              	.L9:
 220 000c 04ED00E0 		.word	-536810236
 221              		.cfi_endproc
 222              	.LFE115:
 224              		.section	.text.vPortEnterCritical,"ax",%progbits
 225              		.align	1
 226              		.global	vPortEnterCritical
 227              		.thumb
 228              		.thumb_func
 230              	vPortEnterCritical:
 231              	.LFB116:
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 232              		.loc 1 205 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 237              		.loc 1 206 0
 238              	@ 206 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 239 0000 4FF0BF00 			mov r0, #191								
 240 0004 80F31188 		msr basepri, r0							
 241              	
 242              	@ 0 "" 2
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 243              		.loc 1 207 0
 244              		.thumb
 245 0008 024B     		ldr	r3, .L12
 246 000a 1A68     		ldr	r2, [r3, #0]
 247 000c 0132     		adds	r2, r2, #1
 248 000e 1A60     		str	r2, [r3, #0]
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 249              		.loc 1 208 0
 250 0010 7047     		bx	lr
 251              	.L13:
 252 0012 00BF     		.align	2
 253              	.L12:
 254 0014 00000000 		.word	.LANCHOR0
 255              		.cfi_endproc
 256              	.LFE116:
 258              		.section	.text.vPortExitCritical,"ax",%progbits
 259              		.align	1
 260              		.global	vPortExitCritical
 261              		.thumb
 262              		.thumb_func
 264              	vPortExitCritical:
 265              	.LFB117:
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 266              		.loc 1 212 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 271              		.loc 1 213 0
 272 0000 044A     		ldr	r2, .L16
 273 0002 1368     		ldr	r3, [r2, #0]
 274 0004 013B     		subs	r3, r3, #1
 275 0006 1360     		str	r3, [r2, #0]
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 276              		.loc 1 214 0
 277 0008 1BB9     		cbnz	r3, .L14
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 278              		.loc 1 216 0
 279              	@ 216 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 280 000a 4FF00000 			mov r0, #0					
 281 000e 80F31188 		msr basepri, r0				
 282              	
 283              	@ 0 "" 2
 284              		.thumb
 285              	.L14:
 286 0012 7047     		bx	lr
 287              	.L17:
 288              		.align	2
 289              	.L16:
 290 0014 00000000 		.word	.LANCHOR0
 291              		.cfi_endproc
 292              	.LFE117:
 294              		.section	.text.PendSV_Handler,"ax",%progbits
 295              		.align	1
 296              		.global	PendSV_Handler
 297              		.thumb
 298              		.thumb_func
 300              	PendSV_Handler:
 301              	.LFB118:
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 302              		.loc 1 222 0
 303              		.cfi_startproc
 304              		@ Naked Function: prologue and epilogue provided by programmer.
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 307              		.loc 1 225 0
 308              	@ 225 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 309 0000 EFF30980 			mrs r0, psp							
 310              											
 311 0004 134B     		ldr	r3, pxCurrentTCBConst			
 312 0006 1A68     		ldr	r2, [r3]						
 313              											
 314 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 315 000c 1EF0100F 		tst r14, #0x10						
 316 0010 08BF     		it eq								
 317 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 318 0016 40F804ED 		stmdb r0!, {r14}					
 319 001a 1060     		str r0, [r2]						
 320              											
 321 001c 2DE90840 		stmdb sp!, {r3, r14}				
 322 0020 4FF0BF00 		mov r0, #191							
 323 0024 80F31188 		msr basepri, r0						
 324 0028 FFF7FEFF 		bl vTaskSwitchContext				
 325 002c 4FF00000 		mov r0, #0							
 326 0030 80F31188 		msr basepri, r0						
 327 0034 BDE80840 		ldmia sp!, {r3, r14}				
 328              											
 329 0038 1968     		ldr r1, [r3]						
 330 003a 0868     		ldr r0, [r1]						
 331 003c 50F804EB 		ldmia r0!, {r14}					
 332 0040 1EF0100F 		tst r14, #0x10						
 333 0044 08BF     		it eq								
 334 0046 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 335 004a B0E8F00F 		ldmia r0!, {r4-r11}					
 336 004e 80F30988 		msr psp, r0							
 337 0052 7047     		bx r14								
 338              											
 339              		.align 2							
 340 0054 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 341              	
 342              	@ 0 "" 2
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 343              		.loc 1 261 0
 344              		.thumb
 345              		.cfi_endproc
 346              	.LFE118:
 348              		.section	.text.SysTick_Handler,"ax",%progbits
 349              		.align	1
 350              		.global	SysTick_Handler
 351              		.thumb
 352              		.thumb_func
 354              	SysTick_Handler:
 355              	.LFB119:
 265:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 356              		.loc 1 265 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360 0000 08B5     		push	{r3, lr}
 361              	.LCFI1:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 14, -4
 364              		.cfi_offset 3, -8
 270:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 365              		.loc 1 270 0
 366 0002 074B     		ldr	r3, .L20
 367 0004 4FF08052 		mov	r2, #268435456
 368 0008 1A60     		str	r2, [r3, #0]
 369              	.LVL5:
 273:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 370              		.loc 1 273 0
 371              	@ 273 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 372 000a 4FF0BF00 			mov r0, #191								
 373 000e 80F31188 		msr basepri, r0							
 374              	
 375              	@ 0 "" 2
 275:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 376              		.loc 1 275 0
 377              		.thumb
 378 0012 FFF7FEFF 		bl	vTaskIncrementTick
 277:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 379              		.loc 1 277 0
 380              	@ 277 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 381 0016 4FF00000 			mov r0, #0					
 382 001a 80F31188 		msr basepri, r0				
 383              	
 384              	@ 0 "" 2
 278:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 385              		.loc 1 278 0
 386              		.thumb
 387 001e 08BD     		pop	{r3, pc}
 388              	.L21:
 389              		.align	2
 390              	.L20:
 391 0020 04ED00E0 		.word	-536810236
 392              		.cfi_endproc
 393              	.LFE119:
 395              		.global	ulKernelPriority
 396              		.section	.rodata
 397              		.align	2
 400              	ulKernelPriority:
 401 0000 FF000000 		.word	255
 402              		.data
 403              		.align	2
 404              		.set	.LANCHOR0,. + 0
 407              	uxCriticalNesting:
 408 0000 AAAAAAAA 		.word	-1431655766
 409              		.text
 410              	.Letext0:
 411              		.file 2 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\FreeRTOS\\Source\\include/projdefs.h"
 412              		.file 3 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 413              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\FreeRTOS\\Source\\include/../../Source/por
 414              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
 415              		.file 6 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/system_s
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
  C:\Temp\cchDjp4Z.s:19     .text.pxPortInitialiseStack:00000000 $t
  C:\Temp\cchDjp4Z.s:24     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
  C:\Temp\cchDjp4Z.s:56     .text.SVC_Handler:00000000 $t
  C:\Temp\cchDjp4Z.s:61     .text.SVC_Handler:00000000 SVC_Handler
  C:\Temp\cchDjp4Z.s:81     .text.SVC_Handler:0000001c pxCurrentTCBConst2
  C:\Temp\cchDjp4Z.s:81     .text.SVC_Handler:0000001c $d
  C:\Temp\cchDjp4Z.s:90     .text.vPortStartFirstTask:00000000 $t
  C:\Temp\cchDjp4Z.s:95     .text.vPortStartFirstTask:00000000 vPortStartFirstTask
  C:\Temp\cchDjp4Z.s:119    .text.xPortStartScheduler:00000000 $t
  C:\Temp\cchDjp4Z.s:124    .text.xPortStartScheduler:00000000 xPortStartScheduler
  C:\Temp\cchDjp4Z.s:173    .text.xPortStartScheduler:0000003c $d
  C:\Temp\cchDjp4Z.s:181    .text.vPortEndScheduler:00000000 $t
  C:\Temp\cchDjp4Z.s:186    .text.vPortEndScheduler:00000000 vPortEndScheduler
  C:\Temp\cchDjp4Z.s:199    .text.vPortYieldFromISR:00000000 $t
  C:\Temp\cchDjp4Z.s:204    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
  C:\Temp\cchDjp4Z.s:220    .text.vPortYieldFromISR:0000000c $d
  C:\Temp\cchDjp4Z.s:225    .text.vPortEnterCritical:00000000 $t
  C:\Temp\cchDjp4Z.s:230    .text.vPortEnterCritical:00000000 vPortEnterCritical
  C:\Temp\cchDjp4Z.s:254    .text.vPortEnterCritical:00000014 $d
  C:\Temp\cchDjp4Z.s:259    .text.vPortExitCritical:00000000 $t
  C:\Temp\cchDjp4Z.s:264    .text.vPortExitCritical:00000000 vPortExitCritical
  C:\Temp\cchDjp4Z.s:290    .text.vPortExitCritical:00000014 $d
  C:\Temp\cchDjp4Z.s:295    .text.PendSV_Handler:00000000 $t
  C:\Temp\cchDjp4Z.s:300    .text.PendSV_Handler:00000000 PendSV_Handler
  C:\Temp\cchDjp4Z.s:340    .text.PendSV_Handler:00000054 pxCurrentTCBConst
  C:\Temp\cchDjp4Z.s:340    .text.PendSV_Handler:00000054 $d
  C:\Temp\cchDjp4Z.s:349    .text.SysTick_Handler:00000000 $t
  C:\Temp\cchDjp4Z.s:354    .text.SysTick_Handler:00000000 SysTick_Handler
  C:\Temp\cchDjp4Z.s:391    .text.SysTick_Handler:00000020 $d
  C:\Temp\cchDjp4Z.s:400    .rodata:00000000 ulKernelPriority
  C:\Temp\cchDjp4Z.s:397    .rodata:00000000 $d
  C:\Temp\cchDjp4Z.s:403    .data:00000000 $d
  C:\Temp\cchDjp4Z.s:407    .data:00000000 uxCriticalNesting
  C:\Temp\cchDjp4Z.s:118    .text.vPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
SystemCoreClock
vTaskSwitchContext
vTaskIncrementTick
