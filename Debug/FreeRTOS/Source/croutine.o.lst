   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"croutine.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	pxReadyCoRoutineLists:
  21 0000 00000000 		.space	40
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.align	2
  23              	xDelayedCoRoutineList1:
  24 0028 00000000 		.space	20
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.align	2
  26              	xDelayedCoRoutineList2:
  27 003c 00000000 		.space	20
  27      00000000 
  27      00000000 
  27      00000000 
  27      00000000 
  28              		.align	2
  29              	pxDelayedCoRoutineList:
  30 0050 00000000 		.space	4
  31              		.align	2
  32              	pxOverflowDelayedCoRoutineList:
  33 0054 00000000 		.space	4
  34              		.align	2
  35              	xPendingReadyCoRoutineList:
  36 0058 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.global	pxCurrentCoRoutine
  38              		.align	2
  41              	pxCurrentCoRoutine:
  42 006c 00000000 		.space	4
  43              		.align	2
  44              	uxTopCoRoutineReadyPriority:
  45 0070 00000000 		.space	4
  46              		.align	2
  47              	xCoRoutineTickCount:
  48 0074 00000000 		.space	4
  49              		.align	2
  50              	xLastTickCount:
  51 0078 00000000 		.space	4
  52              		.align	2
  53              	xPassedTicks:
  54 007c 00000000 		.space	4
  55              		.text
  56              		.align	2
  57              		.global	xCoRoutineCreate
  58              		.thumb
  59              		.thumb_func
  61              	xCoRoutineCreate:
  62              	.LFB110:
  63              		.file 1 "../FreeRTOS/Source/croutine.c"
   1:../FreeRTOS/Source/croutine.c **** /*
   2:../FreeRTOS/Source/croutine.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/croutine.c **** 
   4:../FreeRTOS/Source/croutine.c **** 
   5:../FreeRTOS/Source/croutine.c ****     ***************************************************************************
   6:../FreeRTOS/Source/croutine.c ****      *                                                                       *
   7:../FreeRTOS/Source/croutine.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/croutine.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/croutine.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  11:../FreeRTOS/Source/croutine.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/croutine.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/croutine.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/croutine.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/croutine.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/croutine.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  18:../FreeRTOS/Source/croutine.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  20:../FreeRTOS/Source/croutine.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  22:../FreeRTOS/Source/croutine.c ****     ***************************************************************************
  23:../FreeRTOS/Source/croutine.c **** 
  24:../FreeRTOS/Source/croutine.c **** 
  25:../FreeRTOS/Source/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/croutine.c **** 
  27:../FreeRTOS/Source/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/croutine.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/croutine.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/croutine.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/croutine.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/croutine.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/croutine.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/croutine.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/croutine.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/croutine.c **** 
  42:../FreeRTOS/Source/croutine.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/croutine.c **** 
  44:../FreeRTOS/Source/croutine.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/croutine.c ****     contact details.
  46:../FreeRTOS/Source/croutine.c **** 
  47:../FreeRTOS/Source/croutine.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/croutine.c ****     critical systems.
  49:../FreeRTOS/Source/croutine.c **** 
  50:../FreeRTOS/Source/croutine.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/croutine.c ****     licensing and training services.
  52:../FreeRTOS/Source/croutine.c **** */
  53:../FreeRTOS/Source/croutine.c **** 
  54:../FreeRTOS/Source/croutine.c **** #include "FreeRTOS.h"
  55:../FreeRTOS/Source/croutine.c **** #include "task.h"
  56:../FreeRTOS/Source/croutine.c **** #include "croutine.h"
  57:../FreeRTOS/Source/croutine.c **** 
  58:../FreeRTOS/Source/croutine.c **** /*
  59:../FreeRTOS/Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  60:../FreeRTOS/Source/croutine.c ****  * than file scope.
  61:../FreeRTOS/Source/croutine.c ****  */
  62:../FreeRTOS/Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  63:../FreeRTOS/Source/croutine.c **** 	#define static
  64:../FreeRTOS/Source/croutine.c **** #endif
  65:../FreeRTOS/Source/croutine.c **** 
  66:../FreeRTOS/Source/croutine.c **** 
  67:../FreeRTOS/Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  68:../FreeRTOS/Source/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  69:../FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  70:../FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  71:../FreeRTOS/Source/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  72:../FreeRTOS/Source/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  73:../FreeRTOS/Source/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  74:../FreeRTOS/Source/croutine.c **** 
  75:../FreeRTOS/Source/croutine.c **** /* Other file private variables. --------------------------------*/
  76:../FreeRTOS/Source/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  77:../FreeRTOS/Source/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  78:../FreeRTOS/Source/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  79:../FreeRTOS/Source/croutine.c **** 
  80:../FreeRTOS/Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  81:../FreeRTOS/Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  82:../FreeRTOS/Source/croutine.c **** 
  83:../FreeRTOS/Source/croutine.c **** /*
  84:../FreeRTOS/Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  85:../FreeRTOS/Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  86:../FreeRTOS/Source/croutine.c ****  *
  87:../FreeRTOS/Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  88:../FreeRTOS/Source/croutine.c ****  * used from within an ISR.
  89:../FreeRTOS/Source/croutine.c ****  */
  90:../FreeRTOS/Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  91:../FreeRTOS/Source/croutine.c **** {																													\
  92:../FreeRTOS/Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  93:../FreeRTOS/Source/croutine.c **** 	{																												\
  94:../FreeRTOS/Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  95:../FreeRTOS/Source/croutine.c **** 	}																												\
  96:../FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
  97:../FreeRTOS/Source/croutine.c **** }	
  98:../FreeRTOS/Source/croutine.c **** 
  99:../FreeRTOS/Source/croutine.c **** /*
 100:../FreeRTOS/Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 101:../FreeRTOS/Source/croutine.c ****  * automatically upon the creation of the first co-routine.
 102:../FreeRTOS/Source/croutine.c ****  */
 103:../FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 104:../FreeRTOS/Source/croutine.c **** 
 105:../FreeRTOS/Source/croutine.c **** /*
 106:../FreeRTOS/Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 107:../FreeRTOS/Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 108:../FreeRTOS/Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 109:../FreeRTOS/Source/croutine.c ****  * list by the co-routine scheduler.
 110:../FreeRTOS/Source/croutine.c ****  */
 111:../FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void );
 112:../FreeRTOS/Source/croutine.c **** 
 113:../FreeRTOS/Source/croutine.c **** /*
 114:../FreeRTOS/Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 115:../FreeRTOS/Source/croutine.c ****  * see if any require waking.
 116:../FreeRTOS/Source/croutine.c ****  *
 117:../FreeRTOS/Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 118:../FreeRTOS/Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 119:../FreeRTOS/Source/croutine.c ****  * we need not look any further down the list.
 120:../FreeRTOS/Source/croutine.c ****  */
 121:../FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void );
 122:../FreeRTOS/Source/croutine.c **** 
 123:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 124:../FreeRTOS/Source/croutine.c **** 
 125:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 126:../FreeRTOS/Source/croutine.c **** {
  64              		.loc 1 126 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 24
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68 0000 80B5     		push	{r7, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 14, -4
  72              		.cfi_offset 7, -8
  73 0002 86B0     		sub	sp, sp, #24
  74              	.LCFI1:
  75              		.cfi_def_cfa_offset 32
  76 0004 00AF     		add	r7, sp, #0
  77              	.LCFI2:
  78              		.cfi_def_cfa_register 7
  79 0006 F860     		str	r0, [r7, #12]
  80 0008 B960     		str	r1, [r7, #8]
  81 000a 7A60     		str	r2, [r7, #4]
 127:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 128:../FreeRTOS/Source/croutine.c **** corCRCB *pxCoRoutine;
 129:../FreeRTOS/Source/croutine.c **** 
 130:../FreeRTOS/Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 131:../FreeRTOS/Source/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
  82              		.loc 1 131 0
  83 000c 4FF03800 		mov	r0, #56
  84 0010 FFF7FEFF 		bl	malloc
  85 0014 0346     		mov	r3, r0
  86 0016 3B61     		str	r3, [r7, #16]
 132:../FreeRTOS/Source/croutine.c **** 	if( pxCoRoutine )
  87              		.loc 1 132 0
  88 0018 3B69     		ldr	r3, [r7, #16]
  89 001a 002B     		cmp	r3, #0
  90 001c 61D0     		beq	.L2
 133:../FreeRTOS/Source/croutine.c **** 	{
 134:../FreeRTOS/Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 135:../FreeRTOS/Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 136:../FreeRTOS/Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
  91              		.loc 1 136 0
  92 001e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
  93 0022 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
  94 0026 1B68     		ldr	r3, [r3, #0]
  95 0028 002B     		cmp	r3, #0
  96 002a 07D1     		bne	.L3
 137:../FreeRTOS/Source/croutine.c **** 		{
 138:../FreeRTOS/Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
  97              		.loc 1 138 0
  98 002c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
  99 0030 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 100 0034 3A69     		ldr	r2, [r7, #16]
 101 0036 1A60     		str	r2, [r3, #0]
 139:../FreeRTOS/Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 102              		.loc 1 139 0
 103 0038 00F036FA 		bl	prvInitialiseCoRoutineLists
 104              	.L3:
 140:../FreeRTOS/Source/croutine.c **** 		}
 141:../FreeRTOS/Source/croutine.c **** 
 142:../FreeRTOS/Source/croutine.c **** 		/* Check the priority is within limits. */
 143:../FreeRTOS/Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 105              		.loc 1 143 0
 106 003c BB68     		ldr	r3, [r7, #8]
 107 003e 012B     		cmp	r3, #1
 108 0040 02D9     		bls	.L4
 144:../FreeRTOS/Source/croutine.c **** 		{
 145:../FreeRTOS/Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 109              		.loc 1 145 0
 110 0042 4FF00103 		mov	r3, #1
 111 0046 BB60     		str	r3, [r7, #8]
 112              	.L4:
 146:../FreeRTOS/Source/croutine.c **** 		}
 147:../FreeRTOS/Source/croutine.c **** 
 148:../FreeRTOS/Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 149:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 113              		.loc 1 149 0
 114 0048 3B69     		ldr	r3, [r7, #16]
 115 004a 4FF00002 		mov	r2, #0
 116 004e 9A86     		strh	r2, [r3, #52]	@ movhi
 150:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 117              		.loc 1 150 0
 118 0050 3B69     		ldr	r3, [r7, #16]
 119 0052 BA68     		ldr	r2, [r7, #8]
 120 0054 DA62     		str	r2, [r3, #44]
 151:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 121              		.loc 1 151 0
 122 0056 3B69     		ldr	r3, [r7, #16]
 123 0058 7A68     		ldr	r2, [r7, #4]
 124 005a 1A63     		str	r2, [r3, #48]
 152:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 125              		.loc 1 152 0
 126 005c 3B69     		ldr	r3, [r7, #16]
 127 005e FA68     		ldr	r2, [r7, #12]
 128 0060 1A60     		str	r2, [r3, #0]
 153:../FreeRTOS/Source/croutine.c **** 
 154:../FreeRTOS/Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 155:../FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 129              		.loc 1 155 0
 130 0062 3B69     		ldr	r3, [r7, #16]
 131 0064 03F10403 		add	r3, r3, #4
 132 0068 1846     		mov	r0, r3
 133 006a FFF7FEFF 		bl	vListInitialiseItem
 156:../FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 134              		.loc 1 156 0
 135 006e 3B69     		ldr	r3, [r7, #16]
 136 0070 03F11803 		add	r3, r3, #24
 137 0074 1846     		mov	r0, r3
 138 0076 FFF7FEFF 		bl	vListInitialiseItem
 157:../FreeRTOS/Source/croutine.c **** 
 158:../FreeRTOS/Source/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 159:../FreeRTOS/Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 160:../FreeRTOS/Source/croutine.c **** 		in a list. */
 161:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 139              		.loc 1 161 0
 140 007a 3B69     		ldr	r3, [r7, #16]
 141 007c 3A69     		ldr	r2, [r7, #16]
 142 007e 1A61     		str	r2, [r3, #16]
 162:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 143              		.loc 1 162 0
 144 0080 3B69     		ldr	r3, [r7, #16]
 145 0082 3A69     		ldr	r2, [r7, #16]
 146 0084 5A62     		str	r2, [r3, #36]
 163:../FreeRTOS/Source/croutine.c **** 	
 164:../FreeRTOS/Source/croutine.c **** 		/* Event lists are always in priority order. */
 165:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 147              		.loc 1 165 0
 148 0086 BB68     		ldr	r3, [r7, #8]
 149 0088 C3F10502 		rsb	r2, r3, #5
 150 008c 3B69     		ldr	r3, [r7, #16]
 151 008e 9A61     		str	r2, [r3, #24]
 166:../FreeRTOS/Source/croutine.c **** 		
 167:../FreeRTOS/Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 168:../FreeRTOS/Source/croutine.c **** 		list at the correct priority. */
 169:../FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 152              		.loc 1 169 0
 153 0090 3B69     		ldr	r3, [r7, #16]
 154 0092 DA6A     		ldr	r2, [r3, #44]
 155 0094 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 156 0098 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 157 009c 1B68     		ldr	r3, [r3, #0]
 158 009e 9A42     		cmp	r2, r3
 159 00a0 06D9     		bls	.L5
 160              		.loc 1 169 0 is_stmt 0 discriminator 1
 161 00a2 3B69     		ldr	r3, [r7, #16]
 162 00a4 DA6A     		ldr	r2, [r3, #44]
 163 00a6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 164 00aa C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 165 00ae 1A60     		str	r2, [r3, #0]
 166              	.L5:
 167              		.loc 1 169 0 discriminator 2
 168 00b0 3B69     		ldr	r3, [r7, #16]
 169 00b2 DA6A     		ldr	r2, [r3, #44]
 170 00b4 1346     		mov	r3, r2
 171 00b6 4FEA8303 		lsl	r3, r3, #2
 172 00ba 9B18     		adds	r3, r3, r2
 173 00bc 4FEA8303 		lsl	r3, r3, #2
 174 00c0 1A46     		mov	r2, r3
 175 00c2 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 176 00c6 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 177 00ca D218     		adds	r2, r2, r3
 178 00cc 3B69     		ldr	r3, [r7, #16]
 179 00ce 03F10403 		add	r3, r3, #4
 180 00d2 1046     		mov	r0, r2
 181 00d4 1946     		mov	r1, r3
 182 00d6 FFF7FEFF 		bl	vListInsertEnd
 170:../FreeRTOS/Source/croutine.c **** 
 171:../FreeRTOS/Source/croutine.c **** 		xReturn = pdPASS;
 183              		.loc 1 171 0 is_stmt 1 discriminator 2
 184 00da 4FF00103 		mov	r3, #1
 185 00de 7B61     		str	r3, [r7, #20]
 186 00e0 02E0     		b	.L6
 187              	.L2:
 172:../FreeRTOS/Source/croutine.c **** 	}
 173:../FreeRTOS/Source/croutine.c **** 	else
 174:../FreeRTOS/Source/croutine.c **** 	{		
 175:../FreeRTOS/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 188              		.loc 1 175 0
 189 00e2 4FF0FF33 		mov	r3, #-1
 190 00e6 7B61     		str	r3, [r7, #20]
 191              	.L6:
 176:../FreeRTOS/Source/croutine.c **** 	}
 177:../FreeRTOS/Source/croutine.c **** 	
 178:../FreeRTOS/Source/croutine.c **** 	return xReturn;	
 192              		.loc 1 178 0
 193 00e8 7B69     		ldr	r3, [r7, #20]
 179:../FreeRTOS/Source/croutine.c **** }
 194              		.loc 1 179 0
 195 00ea 1846     		mov	r0, r3
 196 00ec 07F11807 		add	r7, r7, #24
 197 00f0 BD46     		mov	sp, r7
 198 00f2 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE110:
 202              		.align	2
 203              		.global	vCoRoutineAddToDelayedList
 204              		.thumb
 205              		.thumb_func
 207              	vCoRoutineAddToDelayedList:
 208              	.LFB111:
 180:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 181:../FreeRTOS/Source/croutine.c **** 
 182:../FreeRTOS/Source/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 183:../FreeRTOS/Source/croutine.c **** {
 209              		.loc 1 183 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 16
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 00f4 80B5     		push	{r7, lr}
 214              	.LCFI3:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 14, -4
 217              		.cfi_offset 7, -8
 218 00f6 84B0     		sub	sp, sp, #16
 219              	.LCFI4:
 220              		.cfi_def_cfa_offset 24
 221 00f8 00AF     		add	r7, sp, #0
 222              	.LCFI5:
 223              		.cfi_def_cfa_register 7
 224 00fa 7860     		str	r0, [r7, #4]
 225 00fc 3960     		str	r1, [r7, #0]
 184:../FreeRTOS/Source/croutine.c **** portTickType xTimeToWake;
 185:../FreeRTOS/Source/croutine.c **** 
 186:../FreeRTOS/Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 187:../FreeRTOS/Source/croutine.c **** 	not a problem. */
 188:../FreeRTOS/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 226              		.loc 1 188 0
 227 00fe 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 228 0102 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 229 0106 1A68     		ldr	r2, [r3, #0]
 230 0108 7B68     		ldr	r3, [r7, #4]
 231 010a D318     		adds	r3, r2, r3
 232 010c FB60     		str	r3, [r7, #12]
 189:../FreeRTOS/Source/croutine.c **** 
 190:../FreeRTOS/Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 191:../FreeRTOS/Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 192:../FreeRTOS/Source/croutine.c **** 	both lists. */
 193:../FreeRTOS/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 233              		.loc 1 193 0
 234 010e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 235 0112 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 236 0116 1B68     		ldr	r3, [r3, #0]
 237 0118 03F10403 		add	r3, r3, #4
 238 011c 1846     		mov	r0, r3
 239 011e FFF7FEFF 		bl	vListRemove
 194:../FreeRTOS/Source/croutine.c **** 
 195:../FreeRTOS/Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 196:../FreeRTOS/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 240              		.loc 1 196 0
 241 0122 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 242 0126 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 243 012a 1B68     		ldr	r3, [r3, #0]
 244 012c FA68     		ldr	r2, [r7, #12]
 245 012e 5A60     		str	r2, [r3, #4]
 197:../FreeRTOS/Source/croutine.c **** 
 198:../FreeRTOS/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 246              		.loc 1 198 0
 247 0130 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 248 0134 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 249 0138 1B68     		ldr	r3, [r3, #0]
 250 013a FA68     		ldr	r2, [r7, #12]
 251 013c 9A42     		cmp	r2, r3
 252 013e 10D2     		bcs	.L8
 199:../FreeRTOS/Source/croutine.c **** 	{
 200:../FreeRTOS/Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 201:../FreeRTOS/Source/croutine.c **** 		overflow list. */
 202:../FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 253              		.loc 1 202 0
 254 0140 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 255 0144 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 256 0148 1A68     		ldr	r2, [r3, #0]
 257 014a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 258 014e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 259 0152 1B68     		ldr	r3, [r3, #0]
 260 0154 03F10403 		add	r3, r3, #4
 261 0158 1046     		mov	r0, r2
 262 015a 1946     		mov	r1, r3
 263 015c FFF7FEFF 		bl	vListInsert
 264 0160 0FE0     		b	.L9
 265              	.L8:
 203:../FreeRTOS/Source/croutine.c **** 	}
 204:../FreeRTOS/Source/croutine.c **** 	else
 205:../FreeRTOS/Source/croutine.c **** 	{
 206:../FreeRTOS/Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 207:../FreeRTOS/Source/croutine.c **** 		current block list. */
 208:../FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 266              		.loc 1 208 0
 267 0162 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 268 0166 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 269 016a 1A68     		ldr	r2, [r3, #0]
 270 016c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 271 0170 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 272 0174 1B68     		ldr	r3, [r3, #0]
 273 0176 03F10403 		add	r3, r3, #4
 274 017a 1046     		mov	r0, r2
 275 017c 1946     		mov	r1, r3
 276 017e FFF7FEFF 		bl	vListInsert
 277              	.L9:
 209:../FreeRTOS/Source/croutine.c **** 	}
 210:../FreeRTOS/Source/croutine.c **** 
 211:../FreeRTOS/Source/croutine.c **** 	if( pxEventList )
 278              		.loc 1 211 0
 279 0182 3B68     		ldr	r3, [r7, #0]
 280 0184 002B     		cmp	r3, #0
 281 0186 0AD0     		beq	.L7
 212:../FreeRTOS/Source/croutine.c **** 	{
 213:../FreeRTOS/Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 214:../FreeRTOS/Source/croutine.c **** 		function must be called with interrupts disabled. */
 215:../FreeRTOS/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 282              		.loc 1 215 0
 283 0188 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 284 018c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 285 0190 1B68     		ldr	r3, [r3, #0]
 286 0192 03F11803 		add	r3, r3, #24
 287 0196 3868     		ldr	r0, [r7, #0]
 288 0198 1946     		mov	r1, r3
 289 019a FFF7FEFF 		bl	vListInsert
 290              	.L7:
 216:../FreeRTOS/Source/croutine.c **** 	}
 217:../FreeRTOS/Source/croutine.c **** }
 291              		.loc 1 217 0
 292 019e 07F11007 		add	r7, r7, #16
 293 01a2 BD46     		mov	sp, r7
 294 01a4 80BD     		pop	{r7, pc}
 295              		.cfi_endproc
 296              	.LFE111:
 298 01a6 00BF     		.align	2
 299              		.thumb
 300              		.thumb_func
 302              	prvCheckPendingReadyList:
 303              	.LFB112:
 218:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 219:../FreeRTOS/Source/croutine.c **** 
 220:../FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void )
 221:../FreeRTOS/Source/croutine.c **** {
 304              		.loc 1 221 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 8
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308 01a8 80B5     		push	{r7, lr}
 309              	.LCFI6:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 14, -4
 312              		.cfi_offset 7, -8
 313 01aa 82B0     		sub	sp, sp, #8
 314              	.LCFI7:
 315              		.cfi_def_cfa_offset 16
 316 01ac 00AF     		add	r7, sp, #0
 317              	.LCFI8:
 318              		.cfi_def_cfa_register 7
 222:../FreeRTOS/Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 223:../FreeRTOS/Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 224:../FreeRTOS/Source/croutine.c **** 	the	ready lists itself. */
 225:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 319              		.loc 1 225 0
 320 01ae 3FE0     		b	.L12
 321              	.L14:
 322              	.LBB2:
 226:../FreeRTOS/Source/croutine.c **** 	{
 227:../FreeRTOS/Source/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 228:../FreeRTOS/Source/croutine.c **** 
 229:../FreeRTOS/Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 230:../FreeRTOS/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 323              		.loc 1 230 0
 324              	@ 230 "../FreeRTOS/Source/croutine.c" 1
 325 01b0 4FF0BF00 			mov r0, #191								
 326 01b4 80F31188 		msr basepri, r0							
 327              	
 328              	@ 0 "" 2
 231:../FreeRTOS/Source/croutine.c **** 		{	
 232:../FreeRTOS/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 329              		.loc 1 232 0
 330              		.thumb
 331 01b8 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 332 01bc C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 333 01c0 DB68     		ldr	r3, [r3, #12]
 334 01c2 DB68     		ldr	r3, [r3, #12]
 335 01c4 7B60     		str	r3, [r7, #4]
 233:../FreeRTOS/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 336              		.loc 1 233 0
 337 01c6 7B68     		ldr	r3, [r7, #4]
 338 01c8 03F11803 		add	r3, r3, #24
 339 01cc 1846     		mov	r0, r3
 340 01ce FFF7FEFF 		bl	vListRemove
 234:../FreeRTOS/Source/croutine.c **** 		}
 235:../FreeRTOS/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 341              		.loc 1 235 0
 342              	@ 235 "../FreeRTOS/Source/croutine.c" 1
 343 01d2 4FF00000 			mov r0, #0					
 344 01d6 80F31188 		msr basepri, r0				
 345              	
 346              	@ 0 "" 2
 236:../FreeRTOS/Source/croutine.c **** 
 237:../FreeRTOS/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 347              		.loc 1 237 0
 348              		.thumb
 349 01da 7B68     		ldr	r3, [r7, #4]
 350 01dc 03F10403 		add	r3, r3, #4
 351 01e0 1846     		mov	r0, r3
 352 01e2 FFF7FEFF 		bl	vListRemove
 238:../FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 353              		.loc 1 238 0
 354 01e6 7B68     		ldr	r3, [r7, #4]
 355 01e8 DA6A     		ldr	r2, [r3, #44]
 356 01ea 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 357 01ee C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 358 01f2 1B68     		ldr	r3, [r3, #0]
 359 01f4 9A42     		cmp	r2, r3
 360 01f6 06D9     		bls	.L13
 361              		.loc 1 238 0 is_stmt 0 discriminator 1
 362 01f8 7B68     		ldr	r3, [r7, #4]
 363 01fa DA6A     		ldr	r2, [r3, #44]
 364 01fc 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 365 0200 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 366 0204 1A60     		str	r2, [r3, #0]
 367              	.L13:
 368              		.loc 1 238 0 discriminator 2
 369 0206 7B68     		ldr	r3, [r7, #4]
 370 0208 DA6A     		ldr	r2, [r3, #44]
 371 020a 1346     		mov	r3, r2
 372 020c 4FEA8303 		lsl	r3, r3, #2
 373 0210 9B18     		adds	r3, r3, r2
 374 0212 4FEA8303 		lsl	r3, r3, #2
 375 0216 1A46     		mov	r2, r3
 376 0218 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 377 021c C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 378 0220 D218     		adds	r2, r2, r3
 379 0222 7B68     		ldr	r3, [r7, #4]
 380 0224 03F10403 		add	r3, r3, #4
 381 0228 1046     		mov	r0, r2
 382 022a 1946     		mov	r1, r3
 383 022c FFF7FEFF 		bl	vListInsertEnd
 384              	.L12:
 385              	.LBE2:
 225:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 386              		.loc 1 225 0 is_stmt 1 discriminator 1
 387 0230 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 388 0234 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 389 0238 1B68     		ldr	r3, [r3, #0]
 390 023a 002B     		cmp	r3, #0
 391 023c B8D1     		bne	.L14
 239:../FreeRTOS/Source/croutine.c **** 	}
 240:../FreeRTOS/Source/croutine.c **** }
 392              		.loc 1 240 0
 393 023e 07F10807 		add	r7, r7, #8
 394 0242 BD46     		mov	sp, r7
 395 0244 80BD     		pop	{r7, pc}
 396              		.cfi_endproc
 397              	.LFE112:
 399 0246 00BF     		.align	2
 400              		.thumb
 401              		.thumb_func
 403              	prvCheckDelayedList:
 404              	.LFB113:
 241:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 242:../FreeRTOS/Source/croutine.c **** 
 243:../FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void )
 244:../FreeRTOS/Source/croutine.c **** {
 405              		.loc 1 244 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 8
 408              		@ frame_needed = 1, uses_anonymous_args = 0
 409 0248 80B5     		push	{r7, lr}
 410              	.LCFI9:
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 14, -4
 413              		.cfi_offset 7, -8
 414 024a 82B0     		sub	sp, sp, #8
 415              	.LCFI10:
 416              		.cfi_def_cfa_offset 16
 417 024c 00AF     		add	r7, sp, #0
 418              	.LCFI11:
 419              		.cfi_def_cfa_register 7
 245:../FreeRTOS/Source/croutine.c **** corCRCB *pxCRCB;
 246:../FreeRTOS/Source/croutine.c **** 
 247:../FreeRTOS/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 420              		.loc 1 247 0
 421 024e FFF7FEFF 		bl	xTaskGetTickCount
 422 0252 0246     		mov	r2, r0
 423 0254 40F20003 		movw	r3, #:lower16:xLastTickCount
 424 0258 C0F20003 		movt	r3, #:upper16:xLastTickCount
 425 025c 1B68     		ldr	r3, [r3, #0]
 426 025e D21A     		subs	r2, r2, r3
 427 0260 40F20003 		movw	r3, #:lower16:xPassedTicks
 428 0264 C0F20003 		movt	r3, #:upper16:xPassedTicks
 429 0268 1A60     		str	r2, [r3, #0]
 248:../FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 430              		.loc 1 248 0
 431 026a 8FE0     		b	.L16
 432              	.L23:
 249:../FreeRTOS/Source/croutine.c **** 	{
 250:../FreeRTOS/Source/croutine.c **** 		xCoRoutineTickCount++;
 433              		.loc 1 250 0
 434 026c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 435 0270 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 436 0274 1B68     		ldr	r3, [r3, #0]
 437 0276 03F10102 		add	r2, r3, #1
 438 027a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 439 027e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 440 0282 1A60     		str	r2, [r3, #0]
 251:../FreeRTOS/Source/croutine.c **** 		xPassedTicks--;
 441              		.loc 1 251 0
 442 0284 40F20003 		movw	r3, #:lower16:xPassedTicks
 443 0288 C0F20003 		movt	r3, #:upper16:xPassedTicks
 444 028c 1B68     		ldr	r3, [r3, #0]
 445 028e 03F1FF32 		add	r2, r3, #-1
 446 0292 40F20003 		movw	r3, #:lower16:xPassedTicks
 447 0296 C0F20003 		movt	r3, #:upper16:xPassedTicks
 448 029a 1A60     		str	r2, [r3, #0]
 252:../FreeRTOS/Source/croutine.c **** 
 253:../FreeRTOS/Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 254:../FreeRTOS/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 449              		.loc 1 254 0
 450 029c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 451 02a0 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 452 02a4 1B68     		ldr	r3, [r3, #0]
 453 02a6 002B     		cmp	r3, #0
 454 02a8 65D1     		bne	.L24
 455              	.LBB3:
 255:../FreeRTOS/Source/croutine.c **** 		{
 256:../FreeRTOS/Source/croutine.c **** 			xList * pxTemp;
 257:../FreeRTOS/Source/croutine.c **** 
 258:../FreeRTOS/Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 259:../FreeRTOS/Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 260:../FreeRTOS/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 456              		.loc 1 260 0
 457 02aa 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 458 02ae C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 459 02b2 1B68     		ldr	r3, [r3, #0]
 460 02b4 7B60     		str	r3, [r7, #4]
 261:../FreeRTOS/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 461              		.loc 1 261 0
 462 02b6 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 463 02ba C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 464 02be 1A68     		ldr	r2, [r3, #0]
 465 02c0 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 466 02c4 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 467 02c8 1A60     		str	r2, [r3, #0]
 262:../FreeRTOS/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 468              		.loc 1 262 0
 469 02ca 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 470 02ce C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 471 02d2 7A68     		ldr	r2, [r7, #4]
 472 02d4 1A60     		str	r2, [r3, #0]
 473              	.LBE3:
 263:../FreeRTOS/Source/croutine.c **** 		}
 264:../FreeRTOS/Source/croutine.c **** 
 265:../FreeRTOS/Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 474              		.loc 1 266 0
 475 02d6 4EE0     		b	.L24
 476              	.L22:
 267:../FreeRTOS/Source/croutine.c **** 		{
 268:../FreeRTOS/Source/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 477              		.loc 1 268 0
 478 02d8 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 479 02dc C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 480 02e0 1B68     		ldr	r3, [r3, #0]
 481 02e2 DB68     		ldr	r3, [r3, #12]
 482 02e4 DB68     		ldr	r3, [r3, #12]
 483 02e6 3B60     		str	r3, [r7, #0]
 269:../FreeRTOS/Source/croutine.c **** 
 270:../FreeRTOS/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 484              		.loc 1 270 0
 485 02e8 3B68     		ldr	r3, [r7, #0]
 486 02ea 5A68     		ldr	r2, [r3, #4]
 487 02ec 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 488 02f0 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 489 02f4 1B68     		ldr	r3, [r3, #0]
 490 02f6 9A42     		cmp	r2, r3
 491 02f8 47D8     		bhi	.L25
 492              	.L19:
 271:../FreeRTOS/Source/croutine.c **** 			{			
 272:../FreeRTOS/Source/croutine.c **** 				/* Timeout not yet expired. */																			
 273:../FreeRTOS/Source/croutine.c **** 				break;																				
 274:../FreeRTOS/Source/croutine.c **** 			}																						
 275:../FreeRTOS/Source/croutine.c **** 
 276:../FreeRTOS/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 493              		.loc 1 276 0
 494              	@ 276 "../FreeRTOS/Source/croutine.c" 1
 495 02fa 4FF0BF00 			mov r0, #191								
 496 02fe 80F31188 		msr basepri, r0							
 497              	
 498              	@ 0 "" 2
 277:../FreeRTOS/Source/croutine.c **** 			{
 278:../FreeRTOS/Source/croutine.c **** 				/* The event could have occurred just before this critical
 279:../FreeRTOS/Source/croutine.c **** 				section.  If this is the case then the generic list item will
 280:../FreeRTOS/Source/croutine.c **** 				have been moved to the pending ready list and the following
 281:../FreeRTOS/Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 282:../FreeRTOS/Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 283:../FreeRTOS/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 499              		.loc 1 283 0
 500              		.thumb
 501 0302 3B68     		ldr	r3, [r7, #0]
 502 0304 03F10403 		add	r3, r3, #4
 503 0308 1846     		mov	r0, r3
 504 030a FFF7FEFF 		bl	vListRemove
 284:../FreeRTOS/Source/croutine.c **** 
 285:../FreeRTOS/Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 286:../FreeRTOS/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 505              		.loc 1 286 0
 506 030e 3B68     		ldr	r3, [r7, #0]
 507 0310 9B6A     		ldr	r3, [r3, #40]
 508 0312 002B     		cmp	r3, #0
 509 0314 05D0     		beq	.L20
 287:../FreeRTOS/Source/croutine.c **** 				{															
 288:../FreeRTOS/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 510              		.loc 1 288 0
 511 0316 3B68     		ldr	r3, [r7, #0]
 512 0318 03F11803 		add	r3, r3, #24
 513 031c 1846     		mov	r0, r3
 514 031e FFF7FEFF 		bl	vListRemove
 515              	.L20:
 289:../FreeRTOS/Source/croutine.c **** 				}
 290:../FreeRTOS/Source/croutine.c **** 			}
 291:../FreeRTOS/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 516              		.loc 1 291 0
 517              	@ 291 "../FreeRTOS/Source/croutine.c" 1
 518 0322 4FF00000 			mov r0, #0					
 519 0326 80F31188 		msr basepri, r0				
 520              	
 521              	@ 0 "" 2
 292:../FreeRTOS/Source/croutine.c **** 
 293:../FreeRTOS/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 522              		.loc 1 293 0
 523              		.thumb
 524 032a 3B68     		ldr	r3, [r7, #0]
 525 032c DA6A     		ldr	r2, [r3, #44]
 526 032e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 527 0332 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 528 0336 1B68     		ldr	r3, [r3, #0]
 529 0338 9A42     		cmp	r2, r3
 530 033a 06D9     		bls	.L21
 531              		.loc 1 293 0 is_stmt 0 discriminator 1
 532 033c 3B68     		ldr	r3, [r7, #0]
 533 033e DA6A     		ldr	r2, [r3, #44]
 534 0340 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 535 0344 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 536 0348 1A60     		str	r2, [r3, #0]
 537              	.L21:
 538              		.loc 1 293 0 discriminator 2
 539 034a 3B68     		ldr	r3, [r7, #0]
 540 034c DA6A     		ldr	r2, [r3, #44]
 541 034e 1346     		mov	r3, r2
 542 0350 4FEA8303 		lsl	r3, r3, #2
 543 0354 9B18     		adds	r3, r3, r2
 544 0356 4FEA8303 		lsl	r3, r3, #2
 545 035a 1A46     		mov	r2, r3
 546 035c 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 547 0360 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 548 0364 D218     		adds	r2, r2, r3
 549 0366 3B68     		ldr	r3, [r7, #0]
 550 0368 03F10403 		add	r3, r3, #4
 551 036c 1046     		mov	r0, r2
 552 036e 1946     		mov	r1, r3
 553 0370 FFF7FEFF 		bl	vListInsertEnd
 554 0374 00E0     		b	.L18
 555              	.L24:
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 556              		.loc 1 266 0 is_stmt 1
 557 0376 00BF     		nop
 558              	.L18:
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 559              		.loc 1 266 0 is_stmt 0 discriminator 1
 560 0378 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 561 037c C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 562 0380 1B68     		ldr	r3, [r3, #0]
 563 0382 1B68     		ldr	r3, [r3, #0]
 564 0384 002B     		cmp	r3, #0
 565 0386 A7D1     		bne	.L22
 566 0388 00E0     		b	.L16
 567              	.L25:
 273:../FreeRTOS/Source/croutine.c **** 				break;																				
 568              		.loc 1 273 0 is_stmt 1
 569 038a 00BF     		nop
 570              	.L16:
 248:../FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 571              		.loc 1 248 0 discriminator 1
 572 038c 40F20003 		movw	r3, #:lower16:xPassedTicks
 573 0390 C0F20003 		movt	r3, #:upper16:xPassedTicks
 574 0394 1B68     		ldr	r3, [r3, #0]
 575 0396 002B     		cmp	r3, #0
 576 0398 7FF468AF 		bne	.L23
 294:../FreeRTOS/Source/croutine.c **** 		}																									
 295:../FreeRTOS/Source/croutine.c **** 	}
 296:../FreeRTOS/Source/croutine.c **** 
 297:../FreeRTOS/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 577              		.loc 1 297 0
 578 039c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 579 03a0 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 580 03a4 1A68     		ldr	r2, [r3, #0]
 581 03a6 40F20003 		movw	r3, #:lower16:xLastTickCount
 582 03aa C0F20003 		movt	r3, #:upper16:xLastTickCount
 583 03ae 1A60     		str	r2, [r3, #0]
 298:../FreeRTOS/Source/croutine.c **** }
 584              		.loc 1 298 0
 585 03b0 07F10807 		add	r7, r7, #8
 586 03b4 BD46     		mov	sp, r7
 587 03b6 80BD     		pop	{r7, pc}
 588              		.cfi_endproc
 589              	.LFE113:
 591              		.align	2
 592              		.global	vCoRoutineSchedule
 593              		.thumb
 594              		.thumb_func
 596              	vCoRoutineSchedule:
 597              	.LFB114:
 299:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 300:../FreeRTOS/Source/croutine.c **** 
 301:../FreeRTOS/Source/croutine.c **** void vCoRoutineSchedule( void )
 302:../FreeRTOS/Source/croutine.c **** {
 598              		.loc 1 302 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 8
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 03b8 80B5     		push	{r7, lr}
 603              	.LCFI12:
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 14, -4
 606              		.cfi_offset 7, -8
 607 03ba 82B0     		sub	sp, sp, #8
 608              	.LCFI13:
 609              		.cfi_def_cfa_offset 16
 610 03bc 00AF     		add	r7, sp, #0
 611              	.LCFI14:
 612              		.cfi_def_cfa_register 7
 303:../FreeRTOS/Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 304:../FreeRTOS/Source/croutine.c **** 	prvCheckPendingReadyList();
 613              		.loc 1 304 0
 614 03be FFF7F3FE 		bl	prvCheckPendingReadyList
 305:../FreeRTOS/Source/croutine.c **** 
 306:../FreeRTOS/Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 307:../FreeRTOS/Source/croutine.c **** 	prvCheckDelayedList();
 615              		.loc 1 307 0
 616 03c2 FFF741FF 		bl	prvCheckDelayedList
 308:../FreeRTOS/Source/croutine.c **** 
 309:../FreeRTOS/Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 310:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 617              		.loc 1 310 0
 618 03c6 12E0     		b	.L27
 619              	.L30:
 311:../FreeRTOS/Source/croutine.c **** 	{
 312:../FreeRTOS/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 620              		.loc 1 312 0
 621 03c8 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 622 03cc C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 623 03d0 1B68     		ldr	r3, [r3, #0]
 624 03d2 002B     		cmp	r3, #0
 625 03d4 63D0     		beq	.L32
 626              	.L28:
 313:../FreeRTOS/Source/croutine.c **** 		{
 314:../FreeRTOS/Source/croutine.c **** 			/* No more co-routines to check. */
 315:../FreeRTOS/Source/croutine.c **** 			return;
 316:../FreeRTOS/Source/croutine.c **** 		}
 317:../FreeRTOS/Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 627              		.loc 1 317 0
 628 03d6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 629 03da C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 630 03de 1B68     		ldr	r3, [r3, #0]
 631 03e0 03F1FF32 		add	r2, r3, #-1
 632 03e4 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 633 03e8 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 634 03ec 1A60     		str	r2, [r3, #0]
 635              	.L27:
 310:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 636              		.loc 1 310 0 discriminator 1
 637 03ee 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 638 03f2 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 639 03f6 1A68     		ldr	r2, [r3, #0]
 640 03f8 1346     		mov	r3, r2
 641 03fa 4FEA8303 		lsl	r3, r3, #2
 642 03fe 9B18     		adds	r3, r3, r2
 643 0400 4FEA8303 		lsl	r3, r3, #2
 644 0404 1A46     		mov	r2, r3
 645 0406 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 646 040a C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 647 040e D318     		adds	r3, r2, r3
 648 0410 1B68     		ldr	r3, [r3, #0]
 649 0412 002B     		cmp	r3, #0
 650 0414 D8D0     		beq	.L30
 651              	.LBB4:
 318:../FreeRTOS/Source/croutine.c **** 	}
 319:../FreeRTOS/Source/croutine.c **** 
 320:../FreeRTOS/Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 321:../FreeRTOS/Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 322:../FreeRTOS/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 652              		.loc 1 322 0
 653 0416 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 654 041a C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 655 041e 1A68     		ldr	r2, [r3, #0]
 656 0420 1346     		mov	r3, r2
 657 0422 4FEA8303 		lsl	r3, r3, #2
 658 0426 9B18     		adds	r3, r3, r2
 659 0428 4FEA8303 		lsl	r3, r3, #2
 660 042c 1A46     		mov	r2, r3
 661 042e 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 662 0432 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 663 0436 D318     		adds	r3, r2, r3
 664 0438 7B60     		str	r3, [r7, #4]
 665 043a 7B68     		ldr	r3, [r7, #4]
 666 043c 5B68     		ldr	r3, [r3, #4]
 667 043e 5B68     		ldr	r3, [r3, #4]
 668 0440 1A46     		mov	r2, r3
 669 0442 7B68     		ldr	r3, [r7, #4]
 670 0444 5A60     		str	r2, [r3, #4]
 671 0446 7B68     		ldr	r3, [r7, #4]
 672 0448 5A68     		ldr	r2, [r3, #4]
 673 044a 7B68     		ldr	r3, [r7, #4]
 674 044c 03F10803 		add	r3, r3, #8
 675 0450 9A42     		cmp	r2, r3
 676 0452 05D1     		bne	.L31
 677              		.loc 1 322 0 is_stmt 0 discriminator 1
 678 0454 7B68     		ldr	r3, [r7, #4]
 679 0456 5B68     		ldr	r3, [r3, #4]
 680 0458 5B68     		ldr	r3, [r3, #4]
 681 045a 1A46     		mov	r2, r3
 682 045c 7B68     		ldr	r3, [r7, #4]
 683 045e 5A60     		str	r2, [r3, #4]
 684              	.L31:
 685              		.loc 1 322 0 discriminator 2
 686 0460 7B68     		ldr	r3, [r7, #4]
 687 0462 5B68     		ldr	r3, [r3, #4]
 688 0464 DB68     		ldr	r3, [r3, #12]
 689 0466 1A46     		mov	r2, r3
 690 0468 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 691 046c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 692 0470 1A60     		str	r2, [r3, #0]
 693              	.LBE4:
 323:../FreeRTOS/Source/croutine.c **** 
 324:../FreeRTOS/Source/croutine.c **** 	/* Call the co-routine. */
 325:../FreeRTOS/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 694              		.loc 1 325 0 is_stmt 1 discriminator 2
 695 0472 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 696 0476 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 697 047a 1B68     		ldr	r3, [r3, #0]
 698 047c 1A68     		ldr	r2, [r3, #0]
 699 047e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 700 0482 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 701 0486 1968     		ldr	r1, [r3, #0]
 702 0488 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 703 048c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 704 0490 1B68     		ldr	r3, [r3, #0]
 705 0492 1B6B     		ldr	r3, [r3, #48]
 706 0494 0846     		mov	r0, r1
 707 0496 1946     		mov	r1, r3
 708 0498 9047     		blx	r2
 326:../FreeRTOS/Source/croutine.c **** 
 327:../FreeRTOS/Source/croutine.c **** 	return;
 709              		.loc 1 327 0 discriminator 2
 710 049a 00BF     		nop
 711 049c 00E0     		b	.L26
 712              	.L32:
 315:../FreeRTOS/Source/croutine.c **** 			return;
 713              		.loc 1 315 0
 714 049e 00BF     		nop
 715              	.L26:
 328:../FreeRTOS/Source/croutine.c **** }
 716              		.loc 1 328 0
 717 04a0 07F10807 		add	r7, r7, #8
 718 04a4 BD46     		mov	sp, r7
 719 04a6 80BD     		pop	{r7, pc}
 720              		.cfi_endproc
 721              	.LFE114:
 723              		.align	2
 724              		.thumb
 725              		.thumb_func
 727              	prvInitialiseCoRoutineLists:
 728              	.LFB115:
 329:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 330:../FreeRTOS/Source/croutine.c **** 
 331:../FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 332:../FreeRTOS/Source/croutine.c **** {
 729              		.loc 1 332 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 8
 732              		@ frame_needed = 1, uses_anonymous_args = 0
 733 04a8 80B5     		push	{r7, lr}
 734              	.LCFI15:
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 14, -4
 737              		.cfi_offset 7, -8
 738 04aa 82B0     		sub	sp, sp, #8
 739              	.LCFI16:
 740              		.cfi_def_cfa_offset 16
 741 04ac 00AF     		add	r7, sp, #0
 742              	.LCFI17:
 743              		.cfi_def_cfa_register 7
 333:../FreeRTOS/Source/croutine.c **** unsigned portBASE_TYPE uxPriority;
 334:../FreeRTOS/Source/croutine.c **** 
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 744              		.loc 1 335 0
 745 04ae 4FF00003 		mov	r3, #0
 746 04b2 7B60     		str	r3, [r7, #4]
 747 04b4 13E0     		b	.L34
 748              	.L35:
 336:../FreeRTOS/Source/croutine.c **** 	{
 337:../FreeRTOS/Source/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 749              		.loc 1 337 0 discriminator 2
 750 04b6 7A68     		ldr	r2, [r7, #4]
 751 04b8 1346     		mov	r3, r2
 752 04ba 4FEA8303 		lsl	r3, r3, #2
 753 04be 9B18     		adds	r3, r3, r2
 754 04c0 4FEA8303 		lsl	r3, r3, #2
 755 04c4 1A46     		mov	r2, r3
 756 04c6 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 757 04ca C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 758 04ce D318     		adds	r3, r2, r3
 759 04d0 1846     		mov	r0, r3
 760 04d2 FFF7FEFF 		bl	vListInitialise
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 761              		.loc 1 335 0 discriminator 2
 762 04d6 7B68     		ldr	r3, [r7, #4]
 763 04d8 03F10103 		add	r3, r3, #1
 764 04dc 7B60     		str	r3, [r7, #4]
 765              	.L34:
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 766              		.loc 1 335 0 is_stmt 0 discriminator 1
 767 04de 7B68     		ldr	r3, [r7, #4]
 768 04e0 012B     		cmp	r3, #1
 769 04e2 E8D9     		bls	.L35
 338:../FreeRTOS/Source/croutine.c **** 	}
 339:../FreeRTOS/Source/croutine.c **** 
 340:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 770              		.loc 1 340 0 is_stmt 1
 771 04e4 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList1
 772 04e8 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList1
 773 04ec FFF7FEFF 		bl	vListInitialise
 341:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 774              		.loc 1 341 0
 775 04f0 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList2
 776 04f4 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList2
 777 04f8 FFF7FEFF 		bl	vListInitialise
 342:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 778              		.loc 1 342 0
 779 04fc 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 780 0500 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 781 0504 FFF7FEFF 		bl	vListInitialise
 343:../FreeRTOS/Source/croutine.c **** 
 344:../FreeRTOS/Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 345:../FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 346:../FreeRTOS/Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 782              		.loc 1 346 0
 783 0508 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 784 050c C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 785 0510 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList1
 786 0514 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList1
 787 0518 1A60     		str	r2, [r3, #0]
 347:../FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 788              		.loc 1 347 0
 789 051a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 790 051e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 791 0522 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList2
 792 0526 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList2
 793 052a 1A60     		str	r2, [r3, #0]
 348:../FreeRTOS/Source/croutine.c **** }
 794              		.loc 1 348 0
 795 052c 07F10807 		add	r7, r7, #8
 796 0530 BD46     		mov	sp, r7
 797 0532 80BD     		pop	{r7, pc}
 798              		.cfi_endproc
 799              	.LFE115:
 801              		.align	2
 802              		.global	xCoRoutineRemoveFromEventList
 803              		.thumb
 804              		.thumb_func
 806              	xCoRoutineRemoveFromEventList:
 807              	.LFB116:
 349:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 350:../FreeRTOS/Source/croutine.c **** 
 351:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 352:../FreeRTOS/Source/croutine.c **** {
 808              		.loc 1 352 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 16
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812 0534 80B5     		push	{r7, lr}
 813              	.LCFI18:
 814              		.cfi_def_cfa_offset 8
 815              		.cfi_offset 14, -4
 816              		.cfi_offset 7, -8
 817 0536 84B0     		sub	sp, sp, #16
 818              	.LCFI19:
 819              		.cfi_def_cfa_offset 24
 820 0538 00AF     		add	r7, sp, #0
 821              	.LCFI20:
 822              		.cfi_def_cfa_register 7
 823 053a 7860     		str	r0, [r7, #4]
 353:../FreeRTOS/Source/croutine.c **** corCRCB *pxUnblockedCRCB;
 354:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 355:../FreeRTOS/Source/croutine.c **** 
 356:../FreeRTOS/Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 357:../FreeRTOS/Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 358:../FreeRTOS/Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 359:../FreeRTOS/Source/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 824              		.loc 1 359 0
 825 053c 7B68     		ldr	r3, [r7, #4]
 826 053e DB68     		ldr	r3, [r3, #12]
 827 0540 DB68     		ldr	r3, [r3, #12]
 828 0542 BB60     		str	r3, [r7, #8]
 360:../FreeRTOS/Source/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 829              		.loc 1 360 0
 830 0544 BB68     		ldr	r3, [r7, #8]
 831 0546 03F11803 		add	r3, r3, #24
 832 054a 1846     		mov	r0, r3
 833 054c FFF7FEFF 		bl	vListRemove
 361:../FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 834              		.loc 1 361 0
 835 0550 BB68     		ldr	r3, [r7, #8]
 836 0552 03F11803 		add	r3, r3, #24
 837 0556 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 838 055a C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 839 055e 1946     		mov	r1, r3
 840 0560 FFF7FEFF 		bl	vListInsertEnd
 362:../FreeRTOS/Source/croutine.c **** 
 363:../FreeRTOS/Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 841              		.loc 1 363 0
 842 0564 BB68     		ldr	r3, [r7, #8]
 843 0566 DA6A     		ldr	r2, [r3, #44]
 844 0568 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 845 056c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 846 0570 1B68     		ldr	r3, [r3, #0]
 847 0572 DB6A     		ldr	r3, [r3, #44]
 848 0574 9A42     		cmp	r2, r3
 849 0576 03D3     		bcc	.L37
 364:../FreeRTOS/Source/croutine.c **** 	{
 365:../FreeRTOS/Source/croutine.c **** 		xReturn = pdTRUE;
 850              		.loc 1 365 0
 851 0578 4FF00103 		mov	r3, #1
 852 057c FB60     		str	r3, [r7, #12]
 853 057e 02E0     		b	.L38
 854              	.L37:
 366:../FreeRTOS/Source/croutine.c **** 	}
 367:../FreeRTOS/Source/croutine.c **** 	else
 368:../FreeRTOS/Source/croutine.c **** 	{
 369:../FreeRTOS/Source/croutine.c **** 		xReturn = pdFALSE;
 855              		.loc 1 369 0
 856 0580 4FF00003 		mov	r3, #0
 857 0584 FB60     		str	r3, [r7, #12]
 858              	.L38:
 370:../FreeRTOS/Source/croutine.c **** 	}
 371:../FreeRTOS/Source/croutine.c **** 
 372:../FreeRTOS/Source/croutine.c **** 	return xReturn;
 859              		.loc 1 372 0
 860 0586 FB68     		ldr	r3, [r7, #12]
 373:../FreeRTOS/Source/croutine.c **** }
 861              		.loc 1 373 0
 862 0588 1846     		mov	r0, r3
 863 058a 07F11007 		add	r7, r7, #16
 864 058e BD46     		mov	sp, r7
 865 0590 80BD     		pop	{r7, pc}
 866              		.cfi_endproc
 867              	.LFE116:
 869              	.Letext0:
 870              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 871              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source
 872              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/list.h"
 873              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/croutine.h"
 874              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:19     .bss:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:20     .bss:00000000 pxReadyCoRoutineLists
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:23     .bss:00000028 xDelayedCoRoutineList1
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:26     .bss:0000003c xDelayedCoRoutineList2
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:29     .bss:00000050 pxDelayedCoRoutineList
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:32     .bss:00000054 pxOverflowDelayedCoRoutineList
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:35     .bss:00000058 xPendingReadyCoRoutineList
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:41     .bss:0000006c pxCurrentCoRoutine
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:44     .bss:00000070 uxTopCoRoutineReadyPriority
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:47     .bss:00000074 xCoRoutineTickCount
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:50     .bss:00000078 xLastTickCount
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:53     .bss:0000007c xPassedTicks
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:56     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:61     .text:00000000 xCoRoutineCreate
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:727    .text:000004a8 prvInitialiseCoRoutineLists
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:207    .text:000000f4 vCoRoutineAddToDelayedList
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:302    .text:000001a8 prvCheckPendingReadyList
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:403    .text:00000248 prvCheckDelayedList
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:596    .text:000003b8 vCoRoutineSchedule
C:\Users\Alex\AppData\Local\Temp\ccuRoqAG.s:806    .text:00000534 xCoRoutineRemoveFromEventList
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
malloc
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
vListInitialise
