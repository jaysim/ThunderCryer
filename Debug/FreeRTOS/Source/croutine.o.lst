   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"croutine.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.pxReadyCoRoutineLists,"aw",%nobits
  19              		.align	2
  22              	pxReadyCoRoutineLists:
  23 0000 00000000 		.space	40
  23      00000000 
  23      00000000 
  23      00000000 
  23      00000000 
  24              		.section	.bss.xDelayedCoRoutineList1,"aw",%nobits
  25              		.align	2
  28              	xDelayedCoRoutineList1:
  29 0000 00000000 		.space	20
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedCoRoutineList2,"aw",%nobits
  31              		.align	2
  34              	xDelayedCoRoutineList2:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.pxDelayedCoRoutineList,"aw",%nobits
  37              		.align	2
  40              	pxDelayedCoRoutineList:
  41 0000 00000000 		.space	4
  42              		.section	.bss.pxOverflowDelayedCoRoutineList,"aw",%nobits
  43              		.align	2
  46              	pxOverflowDelayedCoRoutineList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.xPendingReadyCoRoutineList,"aw",%nobits
  49              		.align	2
  52              	xPendingReadyCoRoutineList:
  53 0000 00000000 		.space	20
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	pxCurrentCoRoutine
  55              		.section	.bss.pxCurrentCoRoutine,"aw",%nobits
  56              		.align	2
  59              	pxCurrentCoRoutine:
  60 0000 00000000 		.space	4
  61              		.section	.bss.uxTopCoRoutineReadyPriority,"aw",%nobits
  62              		.align	2
  65              	uxTopCoRoutineReadyPriority:
  66 0000 00000000 		.space	4
  67              		.section	.bss.xCoRoutineTickCount,"aw",%nobits
  68              		.align	2
  71              	xCoRoutineTickCount:
  72 0000 00000000 		.space	4
  73              		.section	.bss.xLastTickCount,"aw",%nobits
  74              		.align	2
  77              	xLastTickCount:
  78 0000 00000000 		.space	4
  79              		.section	.bss.xPassedTicks,"aw",%nobits
  80              		.align	2
  83              	xPassedTicks:
  84 0000 00000000 		.space	4
  85              		.section	.text.xCoRoutineCreate,"ax",%progbits
  86              		.align	2
  87              		.global	xCoRoutineCreate
  88              		.thumb
  89              		.thumb_func
  91              	xCoRoutineCreate:
  92              	.LFB110:
  93              		.file 1 "../FreeRTOS/Source/croutine.c"
   1:../FreeRTOS/Source/croutine.c **** /*
   2:../FreeRTOS/Source/croutine.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/croutine.c **** 
   4:../FreeRTOS/Source/croutine.c **** 
   5:../FreeRTOS/Source/croutine.c ****     ***************************************************************************
   6:../FreeRTOS/Source/croutine.c ****      *                                                                       *
   7:../FreeRTOS/Source/croutine.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/croutine.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/croutine.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  11:../FreeRTOS/Source/croutine.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/croutine.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/croutine.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/croutine.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/croutine.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/croutine.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  18:../FreeRTOS/Source/croutine.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  20:../FreeRTOS/Source/croutine.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  22:../FreeRTOS/Source/croutine.c ****     ***************************************************************************
  23:../FreeRTOS/Source/croutine.c **** 
  24:../FreeRTOS/Source/croutine.c **** 
  25:../FreeRTOS/Source/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/croutine.c **** 
  27:../FreeRTOS/Source/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/croutine.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/croutine.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/croutine.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/croutine.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/croutine.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/croutine.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/croutine.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/croutine.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/croutine.c **** 
  42:../FreeRTOS/Source/croutine.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/croutine.c **** 
  44:../FreeRTOS/Source/croutine.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/croutine.c ****     contact details.
  46:../FreeRTOS/Source/croutine.c **** 
  47:../FreeRTOS/Source/croutine.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/croutine.c ****     critical systems.
  49:../FreeRTOS/Source/croutine.c **** 
  50:../FreeRTOS/Source/croutine.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/croutine.c ****     licensing and training services.
  52:../FreeRTOS/Source/croutine.c **** */
  53:../FreeRTOS/Source/croutine.c **** 
  54:../FreeRTOS/Source/croutine.c **** #include "FreeRTOS.h"
  55:../FreeRTOS/Source/croutine.c **** #include "task.h"
  56:../FreeRTOS/Source/croutine.c **** #include "croutine.h"
  57:../FreeRTOS/Source/croutine.c **** 
  58:../FreeRTOS/Source/croutine.c **** /*
  59:../FreeRTOS/Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  60:../FreeRTOS/Source/croutine.c ****  * than file scope.
  61:../FreeRTOS/Source/croutine.c ****  */
  62:../FreeRTOS/Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  63:../FreeRTOS/Source/croutine.c **** 	#define static
  64:../FreeRTOS/Source/croutine.c **** #endif
  65:../FreeRTOS/Source/croutine.c **** 
  66:../FreeRTOS/Source/croutine.c **** 
  67:../FreeRTOS/Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  68:../FreeRTOS/Source/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  69:../FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  70:../FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  71:../FreeRTOS/Source/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  72:../FreeRTOS/Source/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  73:../FreeRTOS/Source/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  74:../FreeRTOS/Source/croutine.c **** 
  75:../FreeRTOS/Source/croutine.c **** /* Other file private variables. --------------------------------*/
  76:../FreeRTOS/Source/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  77:../FreeRTOS/Source/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  78:../FreeRTOS/Source/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  79:../FreeRTOS/Source/croutine.c **** 
  80:../FreeRTOS/Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  81:../FreeRTOS/Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  82:../FreeRTOS/Source/croutine.c **** 
  83:../FreeRTOS/Source/croutine.c **** /*
  84:../FreeRTOS/Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  85:../FreeRTOS/Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  86:../FreeRTOS/Source/croutine.c ****  *
  87:../FreeRTOS/Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  88:../FreeRTOS/Source/croutine.c ****  * used from within an ISR.
  89:../FreeRTOS/Source/croutine.c ****  */
  90:../FreeRTOS/Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  91:../FreeRTOS/Source/croutine.c **** {																													\
  92:../FreeRTOS/Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  93:../FreeRTOS/Source/croutine.c **** 	{																												\
  94:../FreeRTOS/Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  95:../FreeRTOS/Source/croutine.c **** 	}																												\
  96:../FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
  97:../FreeRTOS/Source/croutine.c **** }	
  98:../FreeRTOS/Source/croutine.c **** 
  99:../FreeRTOS/Source/croutine.c **** /*
 100:../FreeRTOS/Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 101:../FreeRTOS/Source/croutine.c ****  * automatically upon the creation of the first co-routine.
 102:../FreeRTOS/Source/croutine.c ****  */
 103:../FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 104:../FreeRTOS/Source/croutine.c **** 
 105:../FreeRTOS/Source/croutine.c **** /*
 106:../FreeRTOS/Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 107:../FreeRTOS/Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 108:../FreeRTOS/Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 109:../FreeRTOS/Source/croutine.c ****  * list by the co-routine scheduler.
 110:../FreeRTOS/Source/croutine.c ****  */
 111:../FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void );
 112:../FreeRTOS/Source/croutine.c **** 
 113:../FreeRTOS/Source/croutine.c **** /*
 114:../FreeRTOS/Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 115:../FreeRTOS/Source/croutine.c ****  * see if any require waking.
 116:../FreeRTOS/Source/croutine.c ****  *
 117:../FreeRTOS/Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 118:../FreeRTOS/Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 119:../FreeRTOS/Source/croutine.c ****  * we need not look any further down the list.
 120:../FreeRTOS/Source/croutine.c ****  */
 121:../FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void );
 122:../FreeRTOS/Source/croutine.c **** 
 123:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 124:../FreeRTOS/Source/croutine.c **** 
 125:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 126:../FreeRTOS/Source/croutine.c **** {
  94              		.loc 1 126 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 24
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98 0000 80B5     		push	{r7, lr}
  99              	.LCFI0:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 14, -4
 102              		.cfi_offset 7, -8
 103 0002 86B0     		sub	sp, sp, #24
 104              	.LCFI1:
 105              		.cfi_def_cfa_offset 32
 106 0004 00AF     		add	r7, sp, #0
 107              	.LCFI2:
 108              		.cfi_def_cfa_register 7
 109 0006 F860     		str	r0, [r7, #12]
 110 0008 B960     		str	r1, [r7, #8]
 111 000a 7A60     		str	r2, [r7, #4]
 127:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 128:../FreeRTOS/Source/croutine.c **** corCRCB *pxCoRoutine;
 129:../FreeRTOS/Source/croutine.c **** 
 130:../FreeRTOS/Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 131:../FreeRTOS/Source/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
 112              		.loc 1 131 0
 113 000c 4FF03800 		mov	r0, #56
 114 0010 FFF7FEFF 		bl	malloc
 115 0014 0346     		mov	r3, r0
 116 0016 3B61     		str	r3, [r7, #16]
 132:../FreeRTOS/Source/croutine.c **** 	if( pxCoRoutine )
 117              		.loc 1 132 0
 118 0018 3B69     		ldr	r3, [r7, #16]
 119 001a 002B     		cmp	r3, #0
 120 001c 61D0     		beq	.L2
 133:../FreeRTOS/Source/croutine.c **** 	{
 134:../FreeRTOS/Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 135:../FreeRTOS/Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 136:../FreeRTOS/Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
 121              		.loc 1 136 0
 122 001e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 123 0022 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 124 0026 1B68     		ldr	r3, [r3, #0]
 125 0028 002B     		cmp	r3, #0
 126 002a 07D1     		bne	.L3
 137:../FreeRTOS/Source/croutine.c **** 		{
 138:../FreeRTOS/Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
 127              		.loc 1 138 0
 128 002c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 129 0030 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 130 0034 3A69     		ldr	r2, [r7, #16]
 131 0036 1A60     		str	r2, [r3, #0]
 139:../FreeRTOS/Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 132              		.loc 1 139 0
 133 0038 FFF7FEFF 		bl	prvInitialiseCoRoutineLists
 134              	.L3:
 140:../FreeRTOS/Source/croutine.c **** 		}
 141:../FreeRTOS/Source/croutine.c **** 
 142:../FreeRTOS/Source/croutine.c **** 		/* Check the priority is within limits. */
 143:../FreeRTOS/Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 135              		.loc 1 143 0
 136 003c BB68     		ldr	r3, [r7, #8]
 137 003e 012B     		cmp	r3, #1
 138 0040 02D9     		bls	.L4
 144:../FreeRTOS/Source/croutine.c **** 		{
 145:../FreeRTOS/Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 139              		.loc 1 145 0
 140 0042 4FF00103 		mov	r3, #1
 141 0046 BB60     		str	r3, [r7, #8]
 142              	.L4:
 146:../FreeRTOS/Source/croutine.c **** 		}
 147:../FreeRTOS/Source/croutine.c **** 
 148:../FreeRTOS/Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 149:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 143              		.loc 1 149 0
 144 0048 3B69     		ldr	r3, [r7, #16]
 145 004a 4FF00002 		mov	r2, #0
 146 004e 9A86     		strh	r2, [r3, #52]	@ movhi
 150:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 147              		.loc 1 150 0
 148 0050 3B69     		ldr	r3, [r7, #16]
 149 0052 BA68     		ldr	r2, [r7, #8]
 150 0054 DA62     		str	r2, [r3, #44]
 151:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 151              		.loc 1 151 0
 152 0056 3B69     		ldr	r3, [r7, #16]
 153 0058 7A68     		ldr	r2, [r7, #4]
 154 005a 1A63     		str	r2, [r3, #48]
 152:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 155              		.loc 1 152 0
 156 005c 3B69     		ldr	r3, [r7, #16]
 157 005e FA68     		ldr	r2, [r7, #12]
 158 0060 1A60     		str	r2, [r3, #0]
 153:../FreeRTOS/Source/croutine.c **** 
 154:../FreeRTOS/Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 155:../FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 159              		.loc 1 155 0
 160 0062 3B69     		ldr	r3, [r7, #16]
 161 0064 03F10403 		add	r3, r3, #4
 162 0068 1846     		mov	r0, r3
 163 006a FFF7FEFF 		bl	vListInitialiseItem
 156:../FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 164              		.loc 1 156 0
 165 006e 3B69     		ldr	r3, [r7, #16]
 166 0070 03F11803 		add	r3, r3, #24
 167 0074 1846     		mov	r0, r3
 168 0076 FFF7FEFF 		bl	vListInitialiseItem
 157:../FreeRTOS/Source/croutine.c **** 
 158:../FreeRTOS/Source/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 159:../FreeRTOS/Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 160:../FreeRTOS/Source/croutine.c **** 		in a list. */
 161:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 169              		.loc 1 161 0
 170 007a 3B69     		ldr	r3, [r7, #16]
 171 007c 3A69     		ldr	r2, [r7, #16]
 172 007e 1A61     		str	r2, [r3, #16]
 162:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 173              		.loc 1 162 0
 174 0080 3B69     		ldr	r3, [r7, #16]
 175 0082 3A69     		ldr	r2, [r7, #16]
 176 0084 5A62     		str	r2, [r3, #36]
 163:../FreeRTOS/Source/croutine.c **** 	
 164:../FreeRTOS/Source/croutine.c **** 		/* Event lists are always in priority order. */
 165:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 177              		.loc 1 165 0
 178 0086 BB68     		ldr	r3, [r7, #8]
 179 0088 C3F10502 		rsb	r2, r3, #5
 180 008c 3B69     		ldr	r3, [r7, #16]
 181 008e 9A61     		str	r2, [r3, #24]
 166:../FreeRTOS/Source/croutine.c **** 		
 167:../FreeRTOS/Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 168:../FreeRTOS/Source/croutine.c **** 		list at the correct priority. */
 169:../FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 182              		.loc 1 169 0
 183 0090 3B69     		ldr	r3, [r7, #16]
 184 0092 DA6A     		ldr	r2, [r3, #44]
 185 0094 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 186 0098 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 187 009c 1B68     		ldr	r3, [r3, #0]
 188 009e 9A42     		cmp	r2, r3
 189 00a0 06D9     		bls	.L5
 190              		.loc 1 169 0 is_stmt 0 discriminator 1
 191 00a2 3B69     		ldr	r3, [r7, #16]
 192 00a4 DA6A     		ldr	r2, [r3, #44]
 193 00a6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 194 00aa C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 195 00ae 1A60     		str	r2, [r3, #0]
 196              	.L5:
 197              		.loc 1 169 0 discriminator 2
 198 00b0 3B69     		ldr	r3, [r7, #16]
 199 00b2 DA6A     		ldr	r2, [r3, #44]
 200 00b4 1346     		mov	r3, r2
 201 00b6 4FEA8303 		lsl	r3, r3, #2
 202 00ba 9B18     		adds	r3, r3, r2
 203 00bc 4FEA8303 		lsl	r3, r3, #2
 204 00c0 1A46     		mov	r2, r3
 205 00c2 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 206 00c6 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 207 00ca D218     		adds	r2, r2, r3
 208 00cc 3B69     		ldr	r3, [r7, #16]
 209 00ce 03F10403 		add	r3, r3, #4
 210 00d2 1046     		mov	r0, r2
 211 00d4 1946     		mov	r1, r3
 212 00d6 FFF7FEFF 		bl	vListInsertEnd
 170:../FreeRTOS/Source/croutine.c **** 
 171:../FreeRTOS/Source/croutine.c **** 		xReturn = pdPASS;
 213              		.loc 1 171 0 is_stmt 1 discriminator 2
 214 00da 4FF00103 		mov	r3, #1
 215 00de 7B61     		str	r3, [r7, #20]
 216 00e0 02E0     		b	.L6
 217              	.L2:
 172:../FreeRTOS/Source/croutine.c **** 	}
 173:../FreeRTOS/Source/croutine.c **** 	else
 174:../FreeRTOS/Source/croutine.c **** 	{		
 175:../FreeRTOS/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 218              		.loc 1 175 0
 219 00e2 4FF0FF33 		mov	r3, #-1
 220 00e6 7B61     		str	r3, [r7, #20]
 221              	.L6:
 176:../FreeRTOS/Source/croutine.c **** 	}
 177:../FreeRTOS/Source/croutine.c **** 	
 178:../FreeRTOS/Source/croutine.c **** 	return xReturn;	
 222              		.loc 1 178 0
 223 00e8 7B69     		ldr	r3, [r7, #20]
 179:../FreeRTOS/Source/croutine.c **** }
 224              		.loc 1 179 0
 225 00ea 1846     		mov	r0, r3
 226 00ec 07F11807 		add	r7, r7, #24
 227 00f0 BD46     		mov	sp, r7
 228 00f2 80BD     		pop	{r7, pc}
 229              		.cfi_endproc
 230              	.LFE110:
 232              		.section	.text.vCoRoutineAddToDelayedList,"ax",%progbits
 233              		.align	2
 234              		.global	vCoRoutineAddToDelayedList
 235              		.thumb
 236              		.thumb_func
 238              	vCoRoutineAddToDelayedList:
 239              	.LFB111:
 180:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 181:../FreeRTOS/Source/croutine.c **** 
 182:../FreeRTOS/Source/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 183:../FreeRTOS/Source/croutine.c **** {
 240              		.loc 1 183 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 16
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 0000 80B5     		push	{r7, lr}
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 14, -4
 248              		.cfi_offset 7, -8
 249 0002 84B0     		sub	sp, sp, #16
 250              	.LCFI4:
 251              		.cfi_def_cfa_offset 24
 252 0004 00AF     		add	r7, sp, #0
 253              	.LCFI5:
 254              		.cfi_def_cfa_register 7
 255 0006 7860     		str	r0, [r7, #4]
 256 0008 3960     		str	r1, [r7, #0]
 184:../FreeRTOS/Source/croutine.c **** portTickType xTimeToWake;
 185:../FreeRTOS/Source/croutine.c **** 
 186:../FreeRTOS/Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 187:../FreeRTOS/Source/croutine.c **** 	not a problem. */
 188:../FreeRTOS/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 257              		.loc 1 188 0
 258 000a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 259 000e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 260 0012 1A68     		ldr	r2, [r3, #0]
 261 0014 7B68     		ldr	r3, [r7, #4]
 262 0016 D318     		adds	r3, r2, r3
 263 0018 FB60     		str	r3, [r7, #12]
 189:../FreeRTOS/Source/croutine.c **** 
 190:../FreeRTOS/Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 191:../FreeRTOS/Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 192:../FreeRTOS/Source/croutine.c **** 	both lists. */
 193:../FreeRTOS/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 264              		.loc 1 193 0
 265 001a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 266 001e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 267 0022 1B68     		ldr	r3, [r3, #0]
 268 0024 03F10403 		add	r3, r3, #4
 269 0028 1846     		mov	r0, r3
 270 002a FFF7FEFF 		bl	vListRemove
 194:../FreeRTOS/Source/croutine.c **** 
 195:../FreeRTOS/Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 196:../FreeRTOS/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 271              		.loc 1 196 0
 272 002e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 273 0032 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 274 0036 1B68     		ldr	r3, [r3, #0]
 275 0038 FA68     		ldr	r2, [r7, #12]
 276 003a 5A60     		str	r2, [r3, #4]
 197:../FreeRTOS/Source/croutine.c **** 
 198:../FreeRTOS/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 277              		.loc 1 198 0
 278 003c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 279 0040 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 280 0044 1B68     		ldr	r3, [r3, #0]
 281 0046 FA68     		ldr	r2, [r7, #12]
 282 0048 9A42     		cmp	r2, r3
 283 004a 10D2     		bcs	.L8
 199:../FreeRTOS/Source/croutine.c **** 	{
 200:../FreeRTOS/Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 201:../FreeRTOS/Source/croutine.c **** 		overflow list. */
 202:../FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 284              		.loc 1 202 0
 285 004c 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 286 0050 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 287 0054 1A68     		ldr	r2, [r3, #0]
 288 0056 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 289 005a C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 290 005e 1B68     		ldr	r3, [r3, #0]
 291 0060 03F10403 		add	r3, r3, #4
 292 0064 1046     		mov	r0, r2
 293 0066 1946     		mov	r1, r3
 294 0068 FFF7FEFF 		bl	vListInsert
 295 006c 0FE0     		b	.L9
 296              	.L8:
 203:../FreeRTOS/Source/croutine.c **** 	}
 204:../FreeRTOS/Source/croutine.c **** 	else
 205:../FreeRTOS/Source/croutine.c **** 	{
 206:../FreeRTOS/Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 207:../FreeRTOS/Source/croutine.c **** 		current block list. */
 208:../FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 297              		.loc 1 208 0
 298 006e 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 299 0072 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 300 0076 1A68     		ldr	r2, [r3, #0]
 301 0078 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 302 007c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 303 0080 1B68     		ldr	r3, [r3, #0]
 304 0082 03F10403 		add	r3, r3, #4
 305 0086 1046     		mov	r0, r2
 306 0088 1946     		mov	r1, r3
 307 008a FFF7FEFF 		bl	vListInsert
 308              	.L9:
 209:../FreeRTOS/Source/croutine.c **** 	}
 210:../FreeRTOS/Source/croutine.c **** 
 211:../FreeRTOS/Source/croutine.c **** 	if( pxEventList )
 309              		.loc 1 211 0
 310 008e 3B68     		ldr	r3, [r7, #0]
 311 0090 002B     		cmp	r3, #0
 312 0092 0AD0     		beq	.L7
 212:../FreeRTOS/Source/croutine.c **** 	{
 213:../FreeRTOS/Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 214:../FreeRTOS/Source/croutine.c **** 		function must be called with interrupts disabled. */
 215:../FreeRTOS/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 313              		.loc 1 215 0
 314 0094 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 315 0098 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 316 009c 1B68     		ldr	r3, [r3, #0]
 317 009e 03F11803 		add	r3, r3, #24
 318 00a2 3868     		ldr	r0, [r7, #0]
 319 00a4 1946     		mov	r1, r3
 320 00a6 FFF7FEFF 		bl	vListInsert
 321              	.L7:
 216:../FreeRTOS/Source/croutine.c **** 	}
 217:../FreeRTOS/Source/croutine.c **** }
 322              		.loc 1 217 0
 323 00aa 07F11007 		add	r7, r7, #16
 324 00ae BD46     		mov	sp, r7
 325 00b0 80BD     		pop	{r7, pc}
 326              		.cfi_endproc
 327              	.LFE111:
 329 00b2 00BF     		.section	.text.prvCheckPendingReadyList,"ax",%progbits
 330              		.align	2
 331              		.thumb
 332              		.thumb_func
 334              	prvCheckPendingReadyList:
 335              	.LFB112:
 218:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 219:../FreeRTOS/Source/croutine.c **** 
 220:../FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void )
 221:../FreeRTOS/Source/croutine.c **** {
 336              		.loc 1 221 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340 0000 80B5     		push	{r7, lr}
 341              	.LCFI6:
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 14, -4
 344              		.cfi_offset 7, -8
 345 0002 82B0     		sub	sp, sp, #8
 346              	.LCFI7:
 347              		.cfi_def_cfa_offset 16
 348 0004 00AF     		add	r7, sp, #0
 349              	.LCFI8:
 350              		.cfi_def_cfa_register 7
 222:../FreeRTOS/Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 223:../FreeRTOS/Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 224:../FreeRTOS/Source/croutine.c **** 	the	ready lists itself. */
 225:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 351              		.loc 1 225 0
 352 0006 3FE0     		b	.L12
 353              	.L14:
 354              	.LBB2:
 226:../FreeRTOS/Source/croutine.c **** 	{
 227:../FreeRTOS/Source/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 228:../FreeRTOS/Source/croutine.c **** 
 229:../FreeRTOS/Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 230:../FreeRTOS/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 355              		.loc 1 230 0
 356              	@ 230 "../FreeRTOS/Source/croutine.c" 1
 357 0008 4FF0BF00 			mov r0, #191								
 358 000c 80F31188 		msr basepri, r0							
 359              	
 360              	@ 0 "" 2
 231:../FreeRTOS/Source/croutine.c **** 		{	
 232:../FreeRTOS/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 361              		.loc 1 232 0
 362              		.thumb
 363 0010 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 364 0014 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 365 0018 DB68     		ldr	r3, [r3, #12]
 366 001a DB68     		ldr	r3, [r3, #12]
 367 001c 7B60     		str	r3, [r7, #4]
 233:../FreeRTOS/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 368              		.loc 1 233 0
 369 001e 7B68     		ldr	r3, [r7, #4]
 370 0020 03F11803 		add	r3, r3, #24
 371 0024 1846     		mov	r0, r3
 372 0026 FFF7FEFF 		bl	vListRemove
 234:../FreeRTOS/Source/croutine.c **** 		}
 235:../FreeRTOS/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 373              		.loc 1 235 0
 374              	@ 235 "../FreeRTOS/Source/croutine.c" 1
 375 002a 4FF00000 			mov r0, #0					
 376 002e 80F31188 		msr basepri, r0				
 377              	
 378              	@ 0 "" 2
 236:../FreeRTOS/Source/croutine.c **** 
 237:../FreeRTOS/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 379              		.loc 1 237 0
 380              		.thumb
 381 0032 7B68     		ldr	r3, [r7, #4]
 382 0034 03F10403 		add	r3, r3, #4
 383 0038 1846     		mov	r0, r3
 384 003a FFF7FEFF 		bl	vListRemove
 238:../FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 385              		.loc 1 238 0
 386 003e 7B68     		ldr	r3, [r7, #4]
 387 0040 DA6A     		ldr	r2, [r3, #44]
 388 0042 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 389 0046 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 390 004a 1B68     		ldr	r3, [r3, #0]
 391 004c 9A42     		cmp	r2, r3
 392 004e 06D9     		bls	.L13
 393              		.loc 1 238 0 is_stmt 0 discriminator 1
 394 0050 7B68     		ldr	r3, [r7, #4]
 395 0052 DA6A     		ldr	r2, [r3, #44]
 396 0054 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 397 0058 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 398 005c 1A60     		str	r2, [r3, #0]
 399              	.L13:
 400              		.loc 1 238 0 discriminator 2
 401 005e 7B68     		ldr	r3, [r7, #4]
 402 0060 DA6A     		ldr	r2, [r3, #44]
 403 0062 1346     		mov	r3, r2
 404 0064 4FEA8303 		lsl	r3, r3, #2
 405 0068 9B18     		adds	r3, r3, r2
 406 006a 4FEA8303 		lsl	r3, r3, #2
 407 006e 1A46     		mov	r2, r3
 408 0070 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 409 0074 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 410 0078 D218     		adds	r2, r2, r3
 411 007a 7B68     		ldr	r3, [r7, #4]
 412 007c 03F10403 		add	r3, r3, #4
 413 0080 1046     		mov	r0, r2
 414 0082 1946     		mov	r1, r3
 415 0084 FFF7FEFF 		bl	vListInsertEnd
 416              	.L12:
 417              	.LBE2:
 225:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 418              		.loc 1 225 0 is_stmt 1 discriminator 1
 419 0088 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 420 008c C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 421 0090 1B68     		ldr	r3, [r3, #0]
 422 0092 002B     		cmp	r3, #0
 423 0094 B8D1     		bne	.L14
 239:../FreeRTOS/Source/croutine.c **** 	}
 240:../FreeRTOS/Source/croutine.c **** }
 424              		.loc 1 240 0
 425 0096 07F10807 		add	r7, r7, #8
 426 009a BD46     		mov	sp, r7
 427 009c 80BD     		pop	{r7, pc}
 428              		.cfi_endproc
 429              	.LFE112:
 431 009e 00BF     		.section	.text.prvCheckDelayedList,"ax",%progbits
 432              		.align	2
 433              		.thumb
 434              		.thumb_func
 436              	prvCheckDelayedList:
 437              	.LFB113:
 241:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 242:../FreeRTOS/Source/croutine.c **** 
 243:../FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void )
 244:../FreeRTOS/Source/croutine.c **** {
 438              		.loc 1 244 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 8
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442 0000 80B5     		push	{r7, lr}
 443              	.LCFI9:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 14, -4
 446              		.cfi_offset 7, -8
 447 0002 82B0     		sub	sp, sp, #8
 448              	.LCFI10:
 449              		.cfi_def_cfa_offset 16
 450 0004 00AF     		add	r7, sp, #0
 451              	.LCFI11:
 452              		.cfi_def_cfa_register 7
 245:../FreeRTOS/Source/croutine.c **** corCRCB *pxCRCB;
 246:../FreeRTOS/Source/croutine.c **** 
 247:../FreeRTOS/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 453              		.loc 1 247 0
 454 0006 FFF7FEFF 		bl	xTaskGetTickCount
 455 000a 0246     		mov	r2, r0
 456 000c 40F20003 		movw	r3, #:lower16:xLastTickCount
 457 0010 C0F20003 		movt	r3, #:upper16:xLastTickCount
 458 0014 1B68     		ldr	r3, [r3, #0]
 459 0016 D21A     		subs	r2, r2, r3
 460 0018 40F20003 		movw	r3, #:lower16:xPassedTicks
 461 001c C0F20003 		movt	r3, #:upper16:xPassedTicks
 462 0020 1A60     		str	r2, [r3, #0]
 248:../FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 463              		.loc 1 248 0
 464 0022 8FE0     		b	.L16
 465              	.L23:
 249:../FreeRTOS/Source/croutine.c **** 	{
 250:../FreeRTOS/Source/croutine.c **** 		xCoRoutineTickCount++;
 466              		.loc 1 250 0
 467 0024 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 468 0028 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 469 002c 1B68     		ldr	r3, [r3, #0]
 470 002e 03F10102 		add	r2, r3, #1
 471 0032 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 472 0036 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 473 003a 1A60     		str	r2, [r3, #0]
 251:../FreeRTOS/Source/croutine.c **** 		xPassedTicks--;
 474              		.loc 1 251 0
 475 003c 40F20003 		movw	r3, #:lower16:xPassedTicks
 476 0040 C0F20003 		movt	r3, #:upper16:xPassedTicks
 477 0044 1B68     		ldr	r3, [r3, #0]
 478 0046 03F1FF32 		add	r2, r3, #-1
 479 004a 40F20003 		movw	r3, #:lower16:xPassedTicks
 480 004e C0F20003 		movt	r3, #:upper16:xPassedTicks
 481 0052 1A60     		str	r2, [r3, #0]
 252:../FreeRTOS/Source/croutine.c **** 
 253:../FreeRTOS/Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 254:../FreeRTOS/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 482              		.loc 1 254 0
 483 0054 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 484 0058 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 485 005c 1B68     		ldr	r3, [r3, #0]
 486 005e 002B     		cmp	r3, #0
 487 0060 65D1     		bne	.L24
 488              	.LBB3:
 255:../FreeRTOS/Source/croutine.c **** 		{
 256:../FreeRTOS/Source/croutine.c **** 			xList * pxTemp;
 257:../FreeRTOS/Source/croutine.c **** 
 258:../FreeRTOS/Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 259:../FreeRTOS/Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 260:../FreeRTOS/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 489              		.loc 1 260 0
 490 0062 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 491 0066 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 492 006a 1B68     		ldr	r3, [r3, #0]
 493 006c 7B60     		str	r3, [r7, #4]
 261:../FreeRTOS/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 494              		.loc 1 261 0
 495 006e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 496 0072 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 497 0076 1A68     		ldr	r2, [r3, #0]
 498 0078 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 499 007c C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 500 0080 1A60     		str	r2, [r3, #0]
 262:../FreeRTOS/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 501              		.loc 1 262 0
 502 0082 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 503 0086 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 504 008a 7A68     		ldr	r2, [r7, #4]
 505 008c 1A60     		str	r2, [r3, #0]
 506              	.LBE3:
 263:../FreeRTOS/Source/croutine.c **** 		}
 264:../FreeRTOS/Source/croutine.c **** 
 265:../FreeRTOS/Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 507              		.loc 1 266 0
 508 008e 4EE0     		b	.L24
 509              	.L22:
 267:../FreeRTOS/Source/croutine.c **** 		{
 268:../FreeRTOS/Source/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 510              		.loc 1 268 0
 511 0090 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 512 0094 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 513 0098 1B68     		ldr	r3, [r3, #0]
 514 009a DB68     		ldr	r3, [r3, #12]
 515 009c DB68     		ldr	r3, [r3, #12]
 516 009e 3B60     		str	r3, [r7, #0]
 269:../FreeRTOS/Source/croutine.c **** 
 270:../FreeRTOS/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 517              		.loc 1 270 0
 518 00a0 3B68     		ldr	r3, [r7, #0]
 519 00a2 5A68     		ldr	r2, [r3, #4]
 520 00a4 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 521 00a8 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 522 00ac 1B68     		ldr	r3, [r3, #0]
 523 00ae 9A42     		cmp	r2, r3
 524 00b0 47D8     		bhi	.L25
 525              	.L19:
 271:../FreeRTOS/Source/croutine.c **** 			{			
 272:../FreeRTOS/Source/croutine.c **** 				/* Timeout not yet expired. */																			
 273:../FreeRTOS/Source/croutine.c **** 				break;																				
 274:../FreeRTOS/Source/croutine.c **** 			}																						
 275:../FreeRTOS/Source/croutine.c **** 
 276:../FreeRTOS/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 526              		.loc 1 276 0
 527              	@ 276 "../FreeRTOS/Source/croutine.c" 1
 528 00b2 4FF0BF00 			mov r0, #191								
 529 00b6 80F31188 		msr basepri, r0							
 530              	
 531              	@ 0 "" 2
 277:../FreeRTOS/Source/croutine.c **** 			{
 278:../FreeRTOS/Source/croutine.c **** 				/* The event could have occurred just before this critical
 279:../FreeRTOS/Source/croutine.c **** 				section.  If this is the case then the generic list item will
 280:../FreeRTOS/Source/croutine.c **** 				have been moved to the pending ready list and the following
 281:../FreeRTOS/Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 282:../FreeRTOS/Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 283:../FreeRTOS/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 532              		.loc 1 283 0
 533              		.thumb
 534 00ba 3B68     		ldr	r3, [r7, #0]
 535 00bc 03F10403 		add	r3, r3, #4
 536 00c0 1846     		mov	r0, r3
 537 00c2 FFF7FEFF 		bl	vListRemove
 284:../FreeRTOS/Source/croutine.c **** 
 285:../FreeRTOS/Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 286:../FreeRTOS/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 538              		.loc 1 286 0
 539 00c6 3B68     		ldr	r3, [r7, #0]
 540 00c8 9B6A     		ldr	r3, [r3, #40]
 541 00ca 002B     		cmp	r3, #0
 542 00cc 05D0     		beq	.L20
 287:../FreeRTOS/Source/croutine.c **** 				{															
 288:../FreeRTOS/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 543              		.loc 1 288 0
 544 00ce 3B68     		ldr	r3, [r7, #0]
 545 00d0 03F11803 		add	r3, r3, #24
 546 00d4 1846     		mov	r0, r3
 547 00d6 FFF7FEFF 		bl	vListRemove
 548              	.L20:
 289:../FreeRTOS/Source/croutine.c **** 				}
 290:../FreeRTOS/Source/croutine.c **** 			}
 291:../FreeRTOS/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 549              		.loc 1 291 0
 550              	@ 291 "../FreeRTOS/Source/croutine.c" 1
 551 00da 4FF00000 			mov r0, #0					
 552 00de 80F31188 		msr basepri, r0				
 553              	
 554              	@ 0 "" 2
 292:../FreeRTOS/Source/croutine.c **** 
 293:../FreeRTOS/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 555              		.loc 1 293 0
 556              		.thumb
 557 00e2 3B68     		ldr	r3, [r7, #0]
 558 00e4 DA6A     		ldr	r2, [r3, #44]
 559 00e6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 560 00ea C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 561 00ee 1B68     		ldr	r3, [r3, #0]
 562 00f0 9A42     		cmp	r2, r3
 563 00f2 06D9     		bls	.L21
 564              		.loc 1 293 0 is_stmt 0 discriminator 1
 565 00f4 3B68     		ldr	r3, [r7, #0]
 566 00f6 DA6A     		ldr	r2, [r3, #44]
 567 00f8 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 568 00fc C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 569 0100 1A60     		str	r2, [r3, #0]
 570              	.L21:
 571              		.loc 1 293 0 discriminator 2
 572 0102 3B68     		ldr	r3, [r7, #0]
 573 0104 DA6A     		ldr	r2, [r3, #44]
 574 0106 1346     		mov	r3, r2
 575 0108 4FEA8303 		lsl	r3, r3, #2
 576 010c 9B18     		adds	r3, r3, r2
 577 010e 4FEA8303 		lsl	r3, r3, #2
 578 0112 1A46     		mov	r2, r3
 579 0114 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 580 0118 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 581 011c D218     		adds	r2, r2, r3
 582 011e 3B68     		ldr	r3, [r7, #0]
 583 0120 03F10403 		add	r3, r3, #4
 584 0124 1046     		mov	r0, r2
 585 0126 1946     		mov	r1, r3
 586 0128 FFF7FEFF 		bl	vListInsertEnd
 587 012c 00E0     		b	.L18
 588              	.L24:
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 589              		.loc 1 266 0 is_stmt 1
 590 012e 00BF     		nop
 591              	.L18:
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 592              		.loc 1 266 0 is_stmt 0 discriminator 1
 593 0130 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 594 0134 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 595 0138 1B68     		ldr	r3, [r3, #0]
 596 013a 1B68     		ldr	r3, [r3, #0]
 597 013c 002B     		cmp	r3, #0
 598 013e A7D1     		bne	.L22
 599 0140 00E0     		b	.L16
 600              	.L25:
 273:../FreeRTOS/Source/croutine.c **** 				break;																				
 601              		.loc 1 273 0 is_stmt 1
 602 0142 00BF     		nop
 603              	.L16:
 248:../FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 604              		.loc 1 248 0 discriminator 1
 605 0144 40F20003 		movw	r3, #:lower16:xPassedTicks
 606 0148 C0F20003 		movt	r3, #:upper16:xPassedTicks
 607 014c 1B68     		ldr	r3, [r3, #0]
 608 014e 002B     		cmp	r3, #0
 609 0150 7FF468AF 		bne	.L23
 294:../FreeRTOS/Source/croutine.c **** 		}																									
 295:../FreeRTOS/Source/croutine.c **** 	}
 296:../FreeRTOS/Source/croutine.c **** 
 297:../FreeRTOS/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 610              		.loc 1 297 0
 611 0154 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 612 0158 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 613 015c 1A68     		ldr	r2, [r3, #0]
 614 015e 40F20003 		movw	r3, #:lower16:xLastTickCount
 615 0162 C0F20003 		movt	r3, #:upper16:xLastTickCount
 616 0166 1A60     		str	r2, [r3, #0]
 298:../FreeRTOS/Source/croutine.c **** }
 617              		.loc 1 298 0
 618 0168 07F10807 		add	r7, r7, #8
 619 016c BD46     		mov	sp, r7
 620 016e 80BD     		pop	{r7, pc}
 621              		.cfi_endproc
 622              	.LFE113:
 624              		.section	.text.vCoRoutineSchedule,"ax",%progbits
 625              		.align	2
 626              		.global	vCoRoutineSchedule
 627              		.thumb
 628              		.thumb_func
 630              	vCoRoutineSchedule:
 631              	.LFB114:
 299:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 300:../FreeRTOS/Source/croutine.c **** 
 301:../FreeRTOS/Source/croutine.c **** void vCoRoutineSchedule( void )
 302:../FreeRTOS/Source/croutine.c **** {
 632              		.loc 1 302 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 8
 635              		@ frame_needed = 1, uses_anonymous_args = 0
 636 0000 80B5     		push	{r7, lr}
 637              	.LCFI12:
 638              		.cfi_def_cfa_offset 8
 639              		.cfi_offset 14, -4
 640              		.cfi_offset 7, -8
 641 0002 82B0     		sub	sp, sp, #8
 642              	.LCFI13:
 643              		.cfi_def_cfa_offset 16
 644 0004 00AF     		add	r7, sp, #0
 645              	.LCFI14:
 646              		.cfi_def_cfa_register 7
 303:../FreeRTOS/Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 304:../FreeRTOS/Source/croutine.c **** 	prvCheckPendingReadyList();
 647              		.loc 1 304 0
 648 0006 FFF7FEFF 		bl	prvCheckPendingReadyList
 305:../FreeRTOS/Source/croutine.c **** 
 306:../FreeRTOS/Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 307:../FreeRTOS/Source/croutine.c **** 	prvCheckDelayedList();
 649              		.loc 1 307 0
 650 000a FFF7FEFF 		bl	prvCheckDelayedList
 308:../FreeRTOS/Source/croutine.c **** 
 309:../FreeRTOS/Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 310:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 651              		.loc 1 310 0
 652 000e 12E0     		b	.L27
 653              	.L30:
 311:../FreeRTOS/Source/croutine.c **** 	{
 312:../FreeRTOS/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 654              		.loc 1 312 0
 655 0010 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 656 0014 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 657 0018 1B68     		ldr	r3, [r3, #0]
 658 001a 002B     		cmp	r3, #0
 659 001c 63D0     		beq	.L32
 660              	.L28:
 313:../FreeRTOS/Source/croutine.c **** 		{
 314:../FreeRTOS/Source/croutine.c **** 			/* No more co-routines to check. */
 315:../FreeRTOS/Source/croutine.c **** 			return;
 316:../FreeRTOS/Source/croutine.c **** 		}
 317:../FreeRTOS/Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 661              		.loc 1 317 0
 662 001e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 663 0022 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 664 0026 1B68     		ldr	r3, [r3, #0]
 665 0028 03F1FF32 		add	r2, r3, #-1
 666 002c 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 667 0030 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 668 0034 1A60     		str	r2, [r3, #0]
 669              	.L27:
 310:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 670              		.loc 1 310 0 discriminator 1
 671 0036 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 672 003a C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 673 003e 1A68     		ldr	r2, [r3, #0]
 674 0040 1346     		mov	r3, r2
 675 0042 4FEA8303 		lsl	r3, r3, #2
 676 0046 9B18     		adds	r3, r3, r2
 677 0048 4FEA8303 		lsl	r3, r3, #2
 678 004c 1A46     		mov	r2, r3
 679 004e 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 680 0052 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 681 0056 D318     		adds	r3, r2, r3
 682 0058 1B68     		ldr	r3, [r3, #0]
 683 005a 002B     		cmp	r3, #0
 684 005c D8D0     		beq	.L30
 685              	.LBB4:
 318:../FreeRTOS/Source/croutine.c **** 	}
 319:../FreeRTOS/Source/croutine.c **** 
 320:../FreeRTOS/Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 321:../FreeRTOS/Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 322:../FreeRTOS/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 686              		.loc 1 322 0
 687 005e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 688 0062 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 689 0066 1A68     		ldr	r2, [r3, #0]
 690 0068 1346     		mov	r3, r2
 691 006a 4FEA8303 		lsl	r3, r3, #2
 692 006e 9B18     		adds	r3, r3, r2
 693 0070 4FEA8303 		lsl	r3, r3, #2
 694 0074 1A46     		mov	r2, r3
 695 0076 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 696 007a C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 697 007e D318     		adds	r3, r2, r3
 698 0080 7B60     		str	r3, [r7, #4]
 699 0082 7B68     		ldr	r3, [r7, #4]
 700 0084 5B68     		ldr	r3, [r3, #4]
 701 0086 5B68     		ldr	r3, [r3, #4]
 702 0088 1A46     		mov	r2, r3
 703 008a 7B68     		ldr	r3, [r7, #4]
 704 008c 5A60     		str	r2, [r3, #4]
 705 008e 7B68     		ldr	r3, [r7, #4]
 706 0090 5A68     		ldr	r2, [r3, #4]
 707 0092 7B68     		ldr	r3, [r7, #4]
 708 0094 03F10803 		add	r3, r3, #8
 709 0098 9A42     		cmp	r2, r3
 710 009a 05D1     		bne	.L31
 711              		.loc 1 322 0 is_stmt 0 discriminator 1
 712 009c 7B68     		ldr	r3, [r7, #4]
 713 009e 5B68     		ldr	r3, [r3, #4]
 714 00a0 5B68     		ldr	r3, [r3, #4]
 715 00a2 1A46     		mov	r2, r3
 716 00a4 7B68     		ldr	r3, [r7, #4]
 717 00a6 5A60     		str	r2, [r3, #4]
 718              	.L31:
 719              		.loc 1 322 0 discriminator 2
 720 00a8 7B68     		ldr	r3, [r7, #4]
 721 00aa 5B68     		ldr	r3, [r3, #4]
 722 00ac DB68     		ldr	r3, [r3, #12]
 723 00ae 1A46     		mov	r2, r3
 724 00b0 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 725 00b4 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 726 00b8 1A60     		str	r2, [r3, #0]
 727              	.LBE4:
 323:../FreeRTOS/Source/croutine.c **** 
 324:../FreeRTOS/Source/croutine.c **** 	/* Call the co-routine. */
 325:../FreeRTOS/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 728              		.loc 1 325 0 is_stmt 1 discriminator 2
 729 00ba 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 730 00be C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 731 00c2 1B68     		ldr	r3, [r3, #0]
 732 00c4 1A68     		ldr	r2, [r3, #0]
 733 00c6 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 734 00ca C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 735 00ce 1968     		ldr	r1, [r3, #0]
 736 00d0 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 737 00d4 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 738 00d8 1B68     		ldr	r3, [r3, #0]
 739 00da 1B6B     		ldr	r3, [r3, #48]
 740 00dc 0846     		mov	r0, r1
 741 00de 1946     		mov	r1, r3
 742 00e0 9047     		blx	r2
 326:../FreeRTOS/Source/croutine.c **** 
 327:../FreeRTOS/Source/croutine.c **** 	return;
 743              		.loc 1 327 0 discriminator 2
 744 00e2 00BF     		nop
 745 00e4 00E0     		b	.L26
 746              	.L32:
 315:../FreeRTOS/Source/croutine.c **** 			return;
 747              		.loc 1 315 0
 748 00e6 00BF     		nop
 749              	.L26:
 328:../FreeRTOS/Source/croutine.c **** }
 750              		.loc 1 328 0
 751 00e8 07F10807 		add	r7, r7, #8
 752 00ec BD46     		mov	sp, r7
 753 00ee 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE114:
 757              		.section	.text.prvInitialiseCoRoutineLists,"ax",%progbits
 758              		.align	2
 759              		.thumb
 760              		.thumb_func
 762              	prvInitialiseCoRoutineLists:
 763              	.LFB115:
 329:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 330:../FreeRTOS/Source/croutine.c **** 
 331:../FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 332:../FreeRTOS/Source/croutine.c **** {
 764              		.loc 1 332 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 8
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0000 80B5     		push	{r7, lr}
 769              	.LCFI15:
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 14, -4
 772              		.cfi_offset 7, -8
 773 0002 82B0     		sub	sp, sp, #8
 774              	.LCFI16:
 775              		.cfi_def_cfa_offset 16
 776 0004 00AF     		add	r7, sp, #0
 777              	.LCFI17:
 778              		.cfi_def_cfa_register 7
 333:../FreeRTOS/Source/croutine.c **** unsigned portBASE_TYPE uxPriority;
 334:../FreeRTOS/Source/croutine.c **** 
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 779              		.loc 1 335 0
 780 0006 4FF00003 		mov	r3, #0
 781 000a 7B60     		str	r3, [r7, #4]
 782 000c 13E0     		b	.L34
 783              	.L35:
 336:../FreeRTOS/Source/croutine.c **** 	{
 337:../FreeRTOS/Source/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 784              		.loc 1 337 0 discriminator 2
 785 000e 7A68     		ldr	r2, [r7, #4]
 786 0010 1346     		mov	r3, r2
 787 0012 4FEA8303 		lsl	r3, r3, #2
 788 0016 9B18     		adds	r3, r3, r2
 789 0018 4FEA8303 		lsl	r3, r3, #2
 790 001c 1A46     		mov	r2, r3
 791 001e 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 792 0022 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 793 0026 D318     		adds	r3, r2, r3
 794 0028 1846     		mov	r0, r3
 795 002a FFF7FEFF 		bl	vListInitialise
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 796              		.loc 1 335 0 discriminator 2
 797 002e 7B68     		ldr	r3, [r7, #4]
 798 0030 03F10103 		add	r3, r3, #1
 799 0034 7B60     		str	r3, [r7, #4]
 800              	.L34:
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 801              		.loc 1 335 0 is_stmt 0 discriminator 1
 802 0036 7B68     		ldr	r3, [r7, #4]
 803 0038 012B     		cmp	r3, #1
 804 003a E8D9     		bls	.L35
 338:../FreeRTOS/Source/croutine.c **** 	}
 339:../FreeRTOS/Source/croutine.c **** 
 340:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 805              		.loc 1 340 0 is_stmt 1
 806 003c 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList1
 807 0040 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList1
 808 0044 FFF7FEFF 		bl	vListInitialise
 341:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 809              		.loc 1 341 0
 810 0048 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList2
 811 004c C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList2
 812 0050 FFF7FEFF 		bl	vListInitialise
 342:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 813              		.loc 1 342 0
 814 0054 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 815 0058 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 816 005c FFF7FEFF 		bl	vListInitialise
 343:../FreeRTOS/Source/croutine.c **** 
 344:../FreeRTOS/Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 345:../FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 346:../FreeRTOS/Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 817              		.loc 1 346 0
 818 0060 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 819 0064 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 820 0068 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList1
 821 006c C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList1
 822 0070 1A60     		str	r2, [r3, #0]
 347:../FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 823              		.loc 1 347 0
 824 0072 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 825 0076 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 826 007a 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList2
 827 007e C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList2
 828 0082 1A60     		str	r2, [r3, #0]
 348:../FreeRTOS/Source/croutine.c **** }
 829              		.loc 1 348 0
 830 0084 07F10807 		add	r7, r7, #8
 831 0088 BD46     		mov	sp, r7
 832 008a 80BD     		pop	{r7, pc}
 833              		.cfi_endproc
 834              	.LFE115:
 836              		.section	.text.xCoRoutineRemoveFromEventList,"ax",%progbits
 837              		.align	2
 838              		.global	xCoRoutineRemoveFromEventList
 839              		.thumb
 840              		.thumb_func
 842              	xCoRoutineRemoveFromEventList:
 843              	.LFB116:
 349:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 350:../FreeRTOS/Source/croutine.c **** 
 351:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 352:../FreeRTOS/Source/croutine.c **** {
 844              		.loc 1 352 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 16
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848 0000 80B5     		push	{r7, lr}
 849              	.LCFI18:
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 14, -4
 852              		.cfi_offset 7, -8
 853 0002 84B0     		sub	sp, sp, #16
 854              	.LCFI19:
 855              		.cfi_def_cfa_offset 24
 856 0004 00AF     		add	r7, sp, #0
 857              	.LCFI20:
 858              		.cfi_def_cfa_register 7
 859 0006 7860     		str	r0, [r7, #4]
 353:../FreeRTOS/Source/croutine.c **** corCRCB *pxUnblockedCRCB;
 354:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 355:../FreeRTOS/Source/croutine.c **** 
 356:../FreeRTOS/Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 357:../FreeRTOS/Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 358:../FreeRTOS/Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 359:../FreeRTOS/Source/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 860              		.loc 1 359 0
 861 0008 7B68     		ldr	r3, [r7, #4]
 862 000a DB68     		ldr	r3, [r3, #12]
 863 000c DB68     		ldr	r3, [r3, #12]
 864 000e BB60     		str	r3, [r7, #8]
 360:../FreeRTOS/Source/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 865              		.loc 1 360 0
 866 0010 BB68     		ldr	r3, [r7, #8]
 867 0012 03F11803 		add	r3, r3, #24
 868 0016 1846     		mov	r0, r3
 869 0018 FFF7FEFF 		bl	vListRemove
 361:../FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 870              		.loc 1 361 0
 871 001c BB68     		ldr	r3, [r7, #8]
 872 001e 03F11803 		add	r3, r3, #24
 873 0022 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 874 0026 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 875 002a 1946     		mov	r1, r3
 876 002c FFF7FEFF 		bl	vListInsertEnd
 362:../FreeRTOS/Source/croutine.c **** 
 363:../FreeRTOS/Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 877              		.loc 1 363 0
 878 0030 BB68     		ldr	r3, [r7, #8]
 879 0032 DA6A     		ldr	r2, [r3, #44]
 880 0034 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 881 0038 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 882 003c 1B68     		ldr	r3, [r3, #0]
 883 003e DB6A     		ldr	r3, [r3, #44]
 884 0040 9A42     		cmp	r2, r3
 885 0042 03D3     		bcc	.L37
 364:../FreeRTOS/Source/croutine.c **** 	{
 365:../FreeRTOS/Source/croutine.c **** 		xReturn = pdTRUE;
 886              		.loc 1 365 0
 887 0044 4FF00103 		mov	r3, #1
 888 0048 FB60     		str	r3, [r7, #12]
 889 004a 02E0     		b	.L38
 890              	.L37:
 366:../FreeRTOS/Source/croutine.c **** 	}
 367:../FreeRTOS/Source/croutine.c **** 	else
 368:../FreeRTOS/Source/croutine.c **** 	{
 369:../FreeRTOS/Source/croutine.c **** 		xReturn = pdFALSE;
 891              		.loc 1 369 0
 892 004c 4FF00003 		mov	r3, #0
 893 0050 FB60     		str	r3, [r7, #12]
 894              	.L38:
 370:../FreeRTOS/Source/croutine.c **** 	}
 371:../FreeRTOS/Source/croutine.c **** 
 372:../FreeRTOS/Source/croutine.c **** 	return xReturn;
 895              		.loc 1 372 0
 896 0052 FB68     		ldr	r3, [r7, #12]
 373:../FreeRTOS/Source/croutine.c **** }
 897              		.loc 1 373 0
 898 0054 1846     		mov	r0, r3
 899 0056 07F11007 		add	r7, r7, #16
 900 005a BD46     		mov	sp, r7
 901 005c 80BD     		pop	{r7, pc}
 902              		.cfi_endproc
 903              	.LFE116:
 905 005e 00BF     		.text
 906              	.Letext0:
 907              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 908              		.file 3 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source/portable
 909              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/list.h"
 910              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/croutine.h"
 911              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:19     .bss.pxReadyCoRoutineLists:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:22     .bss.pxReadyCoRoutineLists:00000000 pxReadyCoRoutineLists
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:25     .bss.xDelayedCoRoutineList1:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:28     .bss.xDelayedCoRoutineList1:00000000 xDelayedCoRoutineList1
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:31     .bss.xDelayedCoRoutineList2:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:34     .bss.xDelayedCoRoutineList2:00000000 xDelayedCoRoutineList2
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:37     .bss.pxDelayedCoRoutineList:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:40     .bss.pxDelayedCoRoutineList:00000000 pxDelayedCoRoutineList
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:43     .bss.pxOverflowDelayedCoRoutineList:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:46     .bss.pxOverflowDelayedCoRoutineList:00000000 pxOverflowDelayedCoRoutineList
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:49     .bss.xPendingReadyCoRoutineList:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:52     .bss.xPendingReadyCoRoutineList:00000000 xPendingReadyCoRoutineList
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:59     .bss.pxCurrentCoRoutine:00000000 pxCurrentCoRoutine
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:56     .bss.pxCurrentCoRoutine:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:62     .bss.uxTopCoRoutineReadyPriority:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:65     .bss.uxTopCoRoutineReadyPriority:00000000 uxTopCoRoutineReadyPriority
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:68     .bss.xCoRoutineTickCount:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:71     .bss.xCoRoutineTickCount:00000000 xCoRoutineTickCount
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:74     .bss.xLastTickCount:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:77     .bss.xLastTickCount:00000000 xLastTickCount
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:80     .bss.xPassedTicks:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:83     .bss.xPassedTicks:00000000 xPassedTicks
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:86     .text.xCoRoutineCreate:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:91     .text.xCoRoutineCreate:00000000 xCoRoutineCreate
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:762    .text.prvInitialiseCoRoutineLists:00000000 prvInitialiseCoRoutineLists
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:233    .text.vCoRoutineAddToDelayedList:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:238    .text.vCoRoutineAddToDelayedList:00000000 vCoRoutineAddToDelayedList
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:330    .text.prvCheckPendingReadyList:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:334    .text.prvCheckPendingReadyList:00000000 prvCheckPendingReadyList
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:432    .text.prvCheckDelayedList:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:436    .text.prvCheckDelayedList:00000000 prvCheckDelayedList
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:625    .text.vCoRoutineSchedule:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:630    .text.vCoRoutineSchedule:00000000 vCoRoutineSchedule
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:758    .text.prvInitialiseCoRoutineLists:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:837    .text.xCoRoutineRemoveFromEventList:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccUTvjqv.s:842    .text.xCoRoutineRemoveFromEventList:00000000 xCoRoutineRemoveFromEventList
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
malloc
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
vListInitialise
