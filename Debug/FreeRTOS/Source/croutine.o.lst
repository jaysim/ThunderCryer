   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"croutine.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.pxReadyCoRoutineLists,"aw",%nobits
  20              		.align	2
  23              	pxReadyCoRoutineLists:
  24 0000 00000000 		.space	40
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.bss.xDelayedCoRoutineList1,"aw",%nobits
  26              		.align	2
  29              	xDelayedCoRoutineList1:
  30 0000 00000000 		.space	20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xDelayedCoRoutineList2,"aw",%nobits
  32              		.align	2
  35              	xDelayedCoRoutineList2:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.pxDelayedCoRoutineList,"aw",%nobits
  38              		.align	2
  41              	pxDelayedCoRoutineList:
  42 0000 00000000 		.space	4
  43              		.section	.bss.pxOverflowDelayedCoRoutineList,"aw",%nobits
  44              		.align	2
  47              	pxOverflowDelayedCoRoutineList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xPendingReadyCoRoutineList,"aw",%nobits
  50              		.align	2
  53              	xPendingReadyCoRoutineList:
  54 0000 00000000 		.space	20
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              		.global	pxCurrentCoRoutine
  56              		.section	.bss.pxCurrentCoRoutine,"aw",%nobits
  57              		.align	2
  60              	pxCurrentCoRoutine:
  61 0000 00000000 		.space	4
  62              		.section	.bss.uxTopCoRoutineReadyPriority,"aw",%nobits
  63              		.align	2
  66              	uxTopCoRoutineReadyPriority:
  67 0000 00000000 		.space	4
  68              		.section	.bss.xCoRoutineTickCount,"aw",%nobits
  69              		.align	2
  72              	xCoRoutineTickCount:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xLastTickCount,"aw",%nobits
  75              		.align	2
  78              	xLastTickCount:
  79 0000 00000000 		.space	4
  80              		.section	.bss.xPassedTicks,"aw",%nobits
  81              		.align	2
  84              	xPassedTicks:
  85 0000 00000000 		.space	4
  86              		.text
  87              		.align	2
  88              		.global	xCoRoutineCreate
  89              		.thumb
  90              		.thumb_func
  92              	xCoRoutineCreate:
  93              	.LFB110:
  94              		.file 1 "../FreeRTOS/Source/croutine.c"
   1:../FreeRTOS/Source/croutine.c **** /*
   2:../FreeRTOS/Source/croutine.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/croutine.c **** 
   4:../FreeRTOS/Source/croutine.c **** 
   5:../FreeRTOS/Source/croutine.c ****     ***************************************************************************
   6:../FreeRTOS/Source/croutine.c ****      *                                                                       *
   7:../FreeRTOS/Source/croutine.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/croutine.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/croutine.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  11:../FreeRTOS/Source/croutine.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/croutine.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/croutine.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/croutine.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/croutine.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/croutine.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  18:../FreeRTOS/Source/croutine.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  20:../FreeRTOS/Source/croutine.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/croutine.c ****      *                                                                       *
  22:../FreeRTOS/Source/croutine.c ****     ***************************************************************************
  23:../FreeRTOS/Source/croutine.c **** 
  24:../FreeRTOS/Source/croutine.c **** 
  25:../FreeRTOS/Source/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/croutine.c **** 
  27:../FreeRTOS/Source/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/croutine.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/croutine.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/croutine.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/croutine.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/croutine.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/croutine.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/croutine.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/croutine.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/croutine.c **** 
  42:../FreeRTOS/Source/croutine.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/croutine.c **** 
  44:../FreeRTOS/Source/croutine.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/croutine.c ****     contact details.
  46:../FreeRTOS/Source/croutine.c **** 
  47:../FreeRTOS/Source/croutine.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/croutine.c ****     critical systems.
  49:../FreeRTOS/Source/croutine.c **** 
  50:../FreeRTOS/Source/croutine.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/croutine.c ****     licensing and training services.
  52:../FreeRTOS/Source/croutine.c **** */
  53:../FreeRTOS/Source/croutine.c **** 
  54:../FreeRTOS/Source/croutine.c **** #include "FreeRTOS.h"
  55:../FreeRTOS/Source/croutine.c **** #include "task.h"
  56:../FreeRTOS/Source/croutine.c **** #include "croutine.h"
  57:../FreeRTOS/Source/croutine.c **** 
  58:../FreeRTOS/Source/croutine.c **** /*
  59:../FreeRTOS/Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  60:../FreeRTOS/Source/croutine.c ****  * than file scope.
  61:../FreeRTOS/Source/croutine.c ****  */
  62:../FreeRTOS/Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  63:../FreeRTOS/Source/croutine.c **** 	#define static
  64:../FreeRTOS/Source/croutine.c **** #endif
  65:../FreeRTOS/Source/croutine.c **** 
  66:../FreeRTOS/Source/croutine.c **** 
  67:../FreeRTOS/Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  68:../FreeRTOS/Source/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  69:../FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  70:../FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  71:../FreeRTOS/Source/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  72:../FreeRTOS/Source/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  73:../FreeRTOS/Source/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  74:../FreeRTOS/Source/croutine.c **** 
  75:../FreeRTOS/Source/croutine.c **** /* Other file private variables. --------------------------------*/
  76:../FreeRTOS/Source/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  77:../FreeRTOS/Source/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  78:../FreeRTOS/Source/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  79:../FreeRTOS/Source/croutine.c **** 
  80:../FreeRTOS/Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  81:../FreeRTOS/Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  82:../FreeRTOS/Source/croutine.c **** 
  83:../FreeRTOS/Source/croutine.c **** /*
  84:../FreeRTOS/Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  85:../FreeRTOS/Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  86:../FreeRTOS/Source/croutine.c ****  *
  87:../FreeRTOS/Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  88:../FreeRTOS/Source/croutine.c ****  * used from within an ISR.
  89:../FreeRTOS/Source/croutine.c ****  */
  90:../FreeRTOS/Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  91:../FreeRTOS/Source/croutine.c **** {																													\
  92:../FreeRTOS/Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  93:../FreeRTOS/Source/croutine.c **** 	{																												\
  94:../FreeRTOS/Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  95:../FreeRTOS/Source/croutine.c **** 	}																												\
  96:../FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
  97:../FreeRTOS/Source/croutine.c **** }	
  98:../FreeRTOS/Source/croutine.c **** 
  99:../FreeRTOS/Source/croutine.c **** /*
 100:../FreeRTOS/Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 101:../FreeRTOS/Source/croutine.c ****  * automatically upon the creation of the first co-routine.
 102:../FreeRTOS/Source/croutine.c ****  */
 103:../FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 104:../FreeRTOS/Source/croutine.c **** 
 105:../FreeRTOS/Source/croutine.c **** /*
 106:../FreeRTOS/Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 107:../FreeRTOS/Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 108:../FreeRTOS/Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 109:../FreeRTOS/Source/croutine.c ****  * list by the co-routine scheduler.
 110:../FreeRTOS/Source/croutine.c ****  */
 111:../FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void );
 112:../FreeRTOS/Source/croutine.c **** 
 113:../FreeRTOS/Source/croutine.c **** /*
 114:../FreeRTOS/Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 115:../FreeRTOS/Source/croutine.c ****  * see if any require waking.
 116:../FreeRTOS/Source/croutine.c ****  *
 117:../FreeRTOS/Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 118:../FreeRTOS/Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 119:../FreeRTOS/Source/croutine.c ****  * we need not look any further down the list.
 120:../FreeRTOS/Source/croutine.c ****  */
 121:../FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void );
 122:../FreeRTOS/Source/croutine.c **** 
 123:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 124:../FreeRTOS/Source/croutine.c **** 
 125:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 126:../FreeRTOS/Source/croutine.c **** {
  95              		.loc 1 126 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 24
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 14, -4
 103              		.cfi_offset 7, -8
 104 0002 86B0     		sub	sp, sp, #24
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 32
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI2:
 109              		.cfi_def_cfa_register 7
 110 0006 F860     		str	r0, [r7, #12]
 111 0008 B960     		str	r1, [r7, #8]
 112 000a 7A60     		str	r2, [r7, #4]
 127:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 128:../FreeRTOS/Source/croutine.c **** corCRCB *pxCoRoutine;
 129:../FreeRTOS/Source/croutine.c **** 
 130:../FreeRTOS/Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 131:../FreeRTOS/Source/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
 113              		.loc 1 131 0
 114 000c 4FF03800 		mov	r0, #56
 115 0010 FFF7FEFF 		bl	malloc
 116 0014 0346     		mov	r3, r0
 117 0016 3B61     		str	r3, [r7, #16]
 132:../FreeRTOS/Source/croutine.c **** 	if( pxCoRoutine )
 118              		.loc 1 132 0
 119 0018 3B69     		ldr	r3, [r7, #16]
 120 001a 002B     		cmp	r3, #0
 121 001c 61D0     		beq	.L2
 133:../FreeRTOS/Source/croutine.c **** 	{
 134:../FreeRTOS/Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 135:../FreeRTOS/Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 136:../FreeRTOS/Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
 122              		.loc 1 136 0
 123 001e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 124 0022 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 125 0026 1B68     		ldr	r3, [r3, #0]
 126 0028 002B     		cmp	r3, #0
 127 002a 07D1     		bne	.L3
 137:../FreeRTOS/Source/croutine.c **** 		{
 138:../FreeRTOS/Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
 128              		.loc 1 138 0
 129 002c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 130 0030 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 131 0034 3A69     		ldr	r2, [r7, #16]
 132 0036 1A60     		str	r2, [r3, #0]
 139:../FreeRTOS/Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 133              		.loc 1 139 0
 134 0038 00F036FA 		bl	prvInitialiseCoRoutineLists
 135              	.L3:
 140:../FreeRTOS/Source/croutine.c **** 		}
 141:../FreeRTOS/Source/croutine.c **** 
 142:../FreeRTOS/Source/croutine.c **** 		/* Check the priority is within limits. */
 143:../FreeRTOS/Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 136              		.loc 1 143 0
 137 003c BB68     		ldr	r3, [r7, #8]
 138 003e 012B     		cmp	r3, #1
 139 0040 02D9     		bls	.L4
 144:../FreeRTOS/Source/croutine.c **** 		{
 145:../FreeRTOS/Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 140              		.loc 1 145 0
 141 0042 4FF00103 		mov	r3, #1
 142 0046 BB60     		str	r3, [r7, #8]
 143              	.L4:
 146:../FreeRTOS/Source/croutine.c **** 		}
 147:../FreeRTOS/Source/croutine.c **** 
 148:../FreeRTOS/Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 149:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 144              		.loc 1 149 0
 145 0048 3B69     		ldr	r3, [r7, #16]
 146 004a 4FF00002 		mov	r2, #0
 147 004e 9A86     		strh	r2, [r3, #52]	@ movhi
 150:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 148              		.loc 1 150 0
 149 0050 3B69     		ldr	r3, [r7, #16]
 150 0052 BA68     		ldr	r2, [r7, #8]
 151 0054 DA62     		str	r2, [r3, #44]
 151:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 152              		.loc 1 151 0
 153 0056 3B69     		ldr	r3, [r7, #16]
 154 0058 7A68     		ldr	r2, [r7, #4]
 155 005a 1A63     		str	r2, [r3, #48]
 152:../FreeRTOS/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 156              		.loc 1 152 0
 157 005c 3B69     		ldr	r3, [r7, #16]
 158 005e FA68     		ldr	r2, [r7, #12]
 159 0060 1A60     		str	r2, [r3, #0]
 153:../FreeRTOS/Source/croutine.c **** 
 154:../FreeRTOS/Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 155:../FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 160              		.loc 1 155 0
 161 0062 3B69     		ldr	r3, [r7, #16]
 162 0064 03F10403 		add	r3, r3, #4
 163 0068 1846     		mov	r0, r3
 164 006a FFF7FEFF 		bl	vListInitialiseItem
 156:../FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 165              		.loc 1 156 0
 166 006e 3B69     		ldr	r3, [r7, #16]
 167 0070 03F11803 		add	r3, r3, #24
 168 0074 1846     		mov	r0, r3
 169 0076 FFF7FEFF 		bl	vListInitialiseItem
 157:../FreeRTOS/Source/croutine.c **** 
 158:../FreeRTOS/Source/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 159:../FreeRTOS/Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 160:../FreeRTOS/Source/croutine.c **** 		in a list. */
 161:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 170              		.loc 1 161 0
 171 007a 3B69     		ldr	r3, [r7, #16]
 172 007c 3A69     		ldr	r2, [r7, #16]
 173 007e 1A61     		str	r2, [r3, #16]
 162:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 174              		.loc 1 162 0
 175 0080 3B69     		ldr	r3, [r7, #16]
 176 0082 3A69     		ldr	r2, [r7, #16]
 177 0084 5A62     		str	r2, [r3, #36]
 163:../FreeRTOS/Source/croutine.c **** 	
 164:../FreeRTOS/Source/croutine.c **** 		/* Event lists are always in priority order. */
 165:../FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 178              		.loc 1 165 0
 179 0086 BB68     		ldr	r3, [r7, #8]
 180 0088 C3F10A02 		rsb	r2, r3, #10
 181 008c 3B69     		ldr	r3, [r7, #16]
 182 008e 9A61     		str	r2, [r3, #24]
 166:../FreeRTOS/Source/croutine.c **** 		
 167:../FreeRTOS/Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 168:../FreeRTOS/Source/croutine.c **** 		list at the correct priority. */
 169:../FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 183              		.loc 1 169 0
 184 0090 3B69     		ldr	r3, [r7, #16]
 185 0092 DA6A     		ldr	r2, [r3, #44]
 186 0094 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 187 0098 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 188 009c 1B68     		ldr	r3, [r3, #0]
 189 009e 9A42     		cmp	r2, r3
 190 00a0 06D9     		bls	.L5
 191              		.loc 1 169 0 is_stmt 0 discriminator 1
 192 00a2 3B69     		ldr	r3, [r7, #16]
 193 00a4 DA6A     		ldr	r2, [r3, #44]
 194 00a6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 195 00aa C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 196 00ae 1A60     		str	r2, [r3, #0]
 197              	.L5:
 198              		.loc 1 169 0 discriminator 2
 199 00b0 3B69     		ldr	r3, [r7, #16]
 200 00b2 DA6A     		ldr	r2, [r3, #44]
 201 00b4 1346     		mov	r3, r2
 202 00b6 4FEA8303 		lsl	r3, r3, #2
 203 00ba 9B18     		adds	r3, r3, r2
 204 00bc 4FEA8303 		lsl	r3, r3, #2
 205 00c0 1A46     		mov	r2, r3
 206 00c2 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 207 00c6 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 208 00ca D218     		adds	r2, r2, r3
 209 00cc 3B69     		ldr	r3, [r7, #16]
 210 00ce 03F10403 		add	r3, r3, #4
 211 00d2 1046     		mov	r0, r2
 212 00d4 1946     		mov	r1, r3
 213 00d6 FFF7FEFF 		bl	vListInsertEnd
 170:../FreeRTOS/Source/croutine.c **** 
 171:../FreeRTOS/Source/croutine.c **** 		xReturn = pdPASS;
 214              		.loc 1 171 0 is_stmt 1 discriminator 2
 215 00da 4FF00103 		mov	r3, #1
 216 00de 7B61     		str	r3, [r7, #20]
 217 00e0 02E0     		b	.L6
 218              	.L2:
 172:../FreeRTOS/Source/croutine.c **** 	}
 173:../FreeRTOS/Source/croutine.c **** 	else
 174:../FreeRTOS/Source/croutine.c **** 	{		
 175:../FreeRTOS/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 219              		.loc 1 175 0
 220 00e2 4FF0FF33 		mov	r3, #-1
 221 00e6 7B61     		str	r3, [r7, #20]
 222              	.L6:
 176:../FreeRTOS/Source/croutine.c **** 	}
 177:../FreeRTOS/Source/croutine.c **** 	
 178:../FreeRTOS/Source/croutine.c **** 	return xReturn;	
 223              		.loc 1 178 0
 224 00e8 7B69     		ldr	r3, [r7, #20]
 179:../FreeRTOS/Source/croutine.c **** }
 225              		.loc 1 179 0
 226 00ea 1846     		mov	r0, r3
 227 00ec 07F11807 		add	r7, r7, #24
 228 00f0 BD46     		mov	sp, r7
 229 00f2 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE110:
 233              		.align	2
 234              		.global	vCoRoutineAddToDelayedList
 235              		.thumb
 236              		.thumb_func
 238              	vCoRoutineAddToDelayedList:
 239              	.LFB111:
 180:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 181:../FreeRTOS/Source/croutine.c **** 
 182:../FreeRTOS/Source/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 183:../FreeRTOS/Source/croutine.c **** {
 240              		.loc 1 183 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 16
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 00f4 80B5     		push	{r7, lr}
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 14, -4
 248              		.cfi_offset 7, -8
 249 00f6 84B0     		sub	sp, sp, #16
 250              	.LCFI4:
 251              		.cfi_def_cfa_offset 24
 252 00f8 00AF     		add	r7, sp, #0
 253              	.LCFI5:
 254              		.cfi_def_cfa_register 7
 255 00fa 7860     		str	r0, [r7, #4]
 256 00fc 3960     		str	r1, [r7, #0]
 184:../FreeRTOS/Source/croutine.c **** portTickType xTimeToWake;
 185:../FreeRTOS/Source/croutine.c **** 
 186:../FreeRTOS/Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 187:../FreeRTOS/Source/croutine.c **** 	not a problem. */
 188:../FreeRTOS/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 257              		.loc 1 188 0
 258 00fe 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 259 0102 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 260 0106 1A68     		ldr	r2, [r3, #0]
 261 0108 7B68     		ldr	r3, [r7, #4]
 262 010a D318     		adds	r3, r2, r3
 263 010c FB60     		str	r3, [r7, #12]
 189:../FreeRTOS/Source/croutine.c **** 
 190:../FreeRTOS/Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 191:../FreeRTOS/Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 192:../FreeRTOS/Source/croutine.c **** 	both lists. */
 193:../FreeRTOS/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 264              		.loc 1 193 0
 265 010e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 266 0112 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 267 0116 1B68     		ldr	r3, [r3, #0]
 268 0118 03F10403 		add	r3, r3, #4
 269 011c 1846     		mov	r0, r3
 270 011e FFF7FEFF 		bl	vListRemove
 194:../FreeRTOS/Source/croutine.c **** 
 195:../FreeRTOS/Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 196:../FreeRTOS/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 271              		.loc 1 196 0
 272 0122 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 273 0126 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 274 012a 1B68     		ldr	r3, [r3, #0]
 275 012c FA68     		ldr	r2, [r7, #12]
 276 012e 5A60     		str	r2, [r3, #4]
 197:../FreeRTOS/Source/croutine.c **** 
 198:../FreeRTOS/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 277              		.loc 1 198 0
 278 0130 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 279 0134 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 280 0138 1B68     		ldr	r3, [r3, #0]
 281 013a FA68     		ldr	r2, [r7, #12]
 282 013c 9A42     		cmp	r2, r3
 283 013e 10D2     		bcs	.L8
 199:../FreeRTOS/Source/croutine.c **** 	{
 200:../FreeRTOS/Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 201:../FreeRTOS/Source/croutine.c **** 		overflow list. */
 202:../FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 284              		.loc 1 202 0
 285 0140 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 286 0144 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 287 0148 1A68     		ldr	r2, [r3, #0]
 288 014a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 289 014e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 290 0152 1B68     		ldr	r3, [r3, #0]
 291 0154 03F10403 		add	r3, r3, #4
 292 0158 1046     		mov	r0, r2
 293 015a 1946     		mov	r1, r3
 294 015c FFF7FEFF 		bl	vListInsert
 295 0160 0FE0     		b	.L9
 296              	.L8:
 203:../FreeRTOS/Source/croutine.c **** 	}
 204:../FreeRTOS/Source/croutine.c **** 	else
 205:../FreeRTOS/Source/croutine.c **** 	{
 206:../FreeRTOS/Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 207:../FreeRTOS/Source/croutine.c **** 		current block list. */
 208:../FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 297              		.loc 1 208 0
 298 0162 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 299 0166 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 300 016a 1A68     		ldr	r2, [r3, #0]
 301 016c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 302 0170 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 303 0174 1B68     		ldr	r3, [r3, #0]
 304 0176 03F10403 		add	r3, r3, #4
 305 017a 1046     		mov	r0, r2
 306 017c 1946     		mov	r1, r3
 307 017e FFF7FEFF 		bl	vListInsert
 308              	.L9:
 209:../FreeRTOS/Source/croutine.c **** 	}
 210:../FreeRTOS/Source/croutine.c **** 
 211:../FreeRTOS/Source/croutine.c **** 	if( pxEventList )
 309              		.loc 1 211 0
 310 0182 3B68     		ldr	r3, [r7, #0]
 311 0184 002B     		cmp	r3, #0
 312 0186 0AD0     		beq	.L7
 212:../FreeRTOS/Source/croutine.c **** 	{
 213:../FreeRTOS/Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 214:../FreeRTOS/Source/croutine.c **** 		function must be called with interrupts disabled. */
 215:../FreeRTOS/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 313              		.loc 1 215 0
 314 0188 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 315 018c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 316 0190 1B68     		ldr	r3, [r3, #0]
 317 0192 03F11803 		add	r3, r3, #24
 318 0196 3868     		ldr	r0, [r7, #0]
 319 0198 1946     		mov	r1, r3
 320 019a FFF7FEFF 		bl	vListInsert
 321              	.L7:
 216:../FreeRTOS/Source/croutine.c **** 	}
 217:../FreeRTOS/Source/croutine.c **** }
 322              		.loc 1 217 0
 323 019e 07F11007 		add	r7, r7, #16
 324 01a2 BD46     		mov	sp, r7
 325 01a4 80BD     		pop	{r7, pc}
 326              		.cfi_endproc
 327              	.LFE111:
 329 01a6 00BF     		.align	2
 330              		.thumb
 331              		.thumb_func
 333              	prvCheckPendingReadyList:
 334              	.LFB112:
 218:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 219:../FreeRTOS/Source/croutine.c **** 
 220:../FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void )
 221:../FreeRTOS/Source/croutine.c **** {
 335              		.loc 1 221 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 8
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339 01a8 80B5     		push	{r7, lr}
 340              	.LCFI6:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 14, -4
 343              		.cfi_offset 7, -8
 344 01aa 82B0     		sub	sp, sp, #8
 345              	.LCFI7:
 346              		.cfi_def_cfa_offset 16
 347 01ac 00AF     		add	r7, sp, #0
 348              	.LCFI8:
 349              		.cfi_def_cfa_register 7
 222:../FreeRTOS/Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 223:../FreeRTOS/Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 224:../FreeRTOS/Source/croutine.c **** 	the	ready lists itself. */
 225:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 350              		.loc 1 225 0
 351 01ae 3FE0     		b	.L12
 352              	.L14:
 353              	.LBB2:
 226:../FreeRTOS/Source/croutine.c **** 	{
 227:../FreeRTOS/Source/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 228:../FreeRTOS/Source/croutine.c **** 
 229:../FreeRTOS/Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 230:../FreeRTOS/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 354              		.loc 1 230 0
 355              	@ 230 "../FreeRTOS/Source/croutine.c" 1
 356 01b0 4FF0BF00 			mov r0, #191								
 357 01b4 80F31188 		msr basepri, r0							
 358              	
 359              	@ 0 "" 2
 231:../FreeRTOS/Source/croutine.c **** 		{	
 232:../FreeRTOS/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 360              		.loc 1 232 0
 361              		.thumb
 362 01b8 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 363 01bc C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 364 01c0 DB68     		ldr	r3, [r3, #12]
 365 01c2 DB68     		ldr	r3, [r3, #12]
 366 01c4 7B60     		str	r3, [r7, #4]
 233:../FreeRTOS/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 367              		.loc 1 233 0
 368 01c6 7B68     		ldr	r3, [r7, #4]
 369 01c8 03F11803 		add	r3, r3, #24
 370 01cc 1846     		mov	r0, r3
 371 01ce FFF7FEFF 		bl	vListRemove
 234:../FreeRTOS/Source/croutine.c **** 		}
 235:../FreeRTOS/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 372              		.loc 1 235 0
 373              	@ 235 "../FreeRTOS/Source/croutine.c" 1
 374 01d2 4FF00000 			mov r0, #0					
 375 01d6 80F31188 		msr basepri, r0				
 376              	
 377              	@ 0 "" 2
 236:../FreeRTOS/Source/croutine.c **** 
 237:../FreeRTOS/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 378              		.loc 1 237 0
 379              		.thumb
 380 01da 7B68     		ldr	r3, [r7, #4]
 381 01dc 03F10403 		add	r3, r3, #4
 382 01e0 1846     		mov	r0, r3
 383 01e2 FFF7FEFF 		bl	vListRemove
 238:../FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 384              		.loc 1 238 0
 385 01e6 7B68     		ldr	r3, [r7, #4]
 386 01e8 DA6A     		ldr	r2, [r3, #44]
 387 01ea 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 388 01ee C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 389 01f2 1B68     		ldr	r3, [r3, #0]
 390 01f4 9A42     		cmp	r2, r3
 391 01f6 06D9     		bls	.L13
 392              		.loc 1 238 0 is_stmt 0 discriminator 1
 393 01f8 7B68     		ldr	r3, [r7, #4]
 394 01fa DA6A     		ldr	r2, [r3, #44]
 395 01fc 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 396 0200 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 397 0204 1A60     		str	r2, [r3, #0]
 398              	.L13:
 399              		.loc 1 238 0 discriminator 2
 400 0206 7B68     		ldr	r3, [r7, #4]
 401 0208 DA6A     		ldr	r2, [r3, #44]
 402 020a 1346     		mov	r3, r2
 403 020c 4FEA8303 		lsl	r3, r3, #2
 404 0210 9B18     		adds	r3, r3, r2
 405 0212 4FEA8303 		lsl	r3, r3, #2
 406 0216 1A46     		mov	r2, r3
 407 0218 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 408 021c C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 409 0220 D218     		adds	r2, r2, r3
 410 0222 7B68     		ldr	r3, [r7, #4]
 411 0224 03F10403 		add	r3, r3, #4
 412 0228 1046     		mov	r0, r2
 413 022a 1946     		mov	r1, r3
 414 022c FFF7FEFF 		bl	vListInsertEnd
 415              	.L12:
 416              	.LBE2:
 225:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 417              		.loc 1 225 0 is_stmt 1 discriminator 1
 418 0230 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 419 0234 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 420 0238 1B68     		ldr	r3, [r3, #0]
 421 023a 002B     		cmp	r3, #0
 422 023c B8D1     		bne	.L14
 239:../FreeRTOS/Source/croutine.c **** 	}
 240:../FreeRTOS/Source/croutine.c **** }
 423              		.loc 1 240 0
 424 023e 07F10807 		add	r7, r7, #8
 425 0242 BD46     		mov	sp, r7
 426 0244 80BD     		pop	{r7, pc}
 427              		.cfi_endproc
 428              	.LFE112:
 430 0246 00BF     		.align	2
 431              		.thumb
 432              		.thumb_func
 434              	prvCheckDelayedList:
 435              	.LFB113:
 241:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 242:../FreeRTOS/Source/croutine.c **** 
 243:../FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void )
 244:../FreeRTOS/Source/croutine.c **** {
 436              		.loc 1 244 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 0248 80B5     		push	{r7, lr}
 441              	.LCFI9:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 14, -4
 444              		.cfi_offset 7, -8
 445 024a 82B0     		sub	sp, sp, #8
 446              	.LCFI10:
 447              		.cfi_def_cfa_offset 16
 448 024c 00AF     		add	r7, sp, #0
 449              	.LCFI11:
 450              		.cfi_def_cfa_register 7
 245:../FreeRTOS/Source/croutine.c **** corCRCB *pxCRCB;
 246:../FreeRTOS/Source/croutine.c **** 
 247:../FreeRTOS/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 451              		.loc 1 247 0
 452 024e FFF7FEFF 		bl	xTaskGetTickCount
 453 0252 0246     		mov	r2, r0
 454 0254 40F20003 		movw	r3, #:lower16:xLastTickCount
 455 0258 C0F20003 		movt	r3, #:upper16:xLastTickCount
 456 025c 1B68     		ldr	r3, [r3, #0]
 457 025e D21A     		subs	r2, r2, r3
 458 0260 40F20003 		movw	r3, #:lower16:xPassedTicks
 459 0264 C0F20003 		movt	r3, #:upper16:xPassedTicks
 460 0268 1A60     		str	r2, [r3, #0]
 248:../FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 461              		.loc 1 248 0
 462 026a 8FE0     		b	.L16
 463              	.L23:
 249:../FreeRTOS/Source/croutine.c **** 	{
 250:../FreeRTOS/Source/croutine.c **** 		xCoRoutineTickCount++;
 464              		.loc 1 250 0
 465 026c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 466 0270 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 467 0274 1B68     		ldr	r3, [r3, #0]
 468 0276 03F10102 		add	r2, r3, #1
 469 027a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 470 027e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 471 0282 1A60     		str	r2, [r3, #0]
 251:../FreeRTOS/Source/croutine.c **** 		xPassedTicks--;
 472              		.loc 1 251 0
 473 0284 40F20003 		movw	r3, #:lower16:xPassedTicks
 474 0288 C0F20003 		movt	r3, #:upper16:xPassedTicks
 475 028c 1B68     		ldr	r3, [r3, #0]
 476 028e 03F1FF32 		add	r2, r3, #-1
 477 0292 40F20003 		movw	r3, #:lower16:xPassedTicks
 478 0296 C0F20003 		movt	r3, #:upper16:xPassedTicks
 479 029a 1A60     		str	r2, [r3, #0]
 252:../FreeRTOS/Source/croutine.c **** 
 253:../FreeRTOS/Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 254:../FreeRTOS/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 480              		.loc 1 254 0
 481 029c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 482 02a0 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 483 02a4 1B68     		ldr	r3, [r3, #0]
 484 02a6 002B     		cmp	r3, #0
 485 02a8 65D1     		bne	.L24
 486              	.LBB3:
 255:../FreeRTOS/Source/croutine.c **** 		{
 256:../FreeRTOS/Source/croutine.c **** 			xList * pxTemp;
 257:../FreeRTOS/Source/croutine.c **** 
 258:../FreeRTOS/Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 259:../FreeRTOS/Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 260:../FreeRTOS/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 487              		.loc 1 260 0
 488 02aa 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 489 02ae C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 490 02b2 1B68     		ldr	r3, [r3, #0]
 491 02b4 7B60     		str	r3, [r7, #4]
 261:../FreeRTOS/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 492              		.loc 1 261 0
 493 02b6 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 494 02ba C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 495 02be 1A68     		ldr	r2, [r3, #0]
 496 02c0 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 497 02c4 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 498 02c8 1A60     		str	r2, [r3, #0]
 262:../FreeRTOS/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 499              		.loc 1 262 0
 500 02ca 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 501 02ce C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 502 02d2 7A68     		ldr	r2, [r7, #4]
 503 02d4 1A60     		str	r2, [r3, #0]
 504              	.LBE3:
 263:../FreeRTOS/Source/croutine.c **** 		}
 264:../FreeRTOS/Source/croutine.c **** 
 265:../FreeRTOS/Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 505              		.loc 1 266 0
 506 02d6 4EE0     		b	.L24
 507              	.L22:
 267:../FreeRTOS/Source/croutine.c **** 		{
 268:../FreeRTOS/Source/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 508              		.loc 1 268 0
 509 02d8 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 510 02dc C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 511 02e0 1B68     		ldr	r3, [r3, #0]
 512 02e2 DB68     		ldr	r3, [r3, #12]
 513 02e4 DB68     		ldr	r3, [r3, #12]
 514 02e6 3B60     		str	r3, [r7, #0]
 269:../FreeRTOS/Source/croutine.c **** 
 270:../FreeRTOS/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 515              		.loc 1 270 0
 516 02e8 3B68     		ldr	r3, [r7, #0]
 517 02ea 5A68     		ldr	r2, [r3, #4]
 518 02ec 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 519 02f0 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 520 02f4 1B68     		ldr	r3, [r3, #0]
 521 02f6 9A42     		cmp	r2, r3
 522 02f8 47D8     		bhi	.L25
 523              	.L19:
 271:../FreeRTOS/Source/croutine.c **** 			{			
 272:../FreeRTOS/Source/croutine.c **** 				/* Timeout not yet expired. */																			
 273:../FreeRTOS/Source/croutine.c **** 				break;																				
 274:../FreeRTOS/Source/croutine.c **** 			}																						
 275:../FreeRTOS/Source/croutine.c **** 
 276:../FreeRTOS/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 524              		.loc 1 276 0
 525              	@ 276 "../FreeRTOS/Source/croutine.c" 1
 526 02fa 4FF0BF00 			mov r0, #191								
 527 02fe 80F31188 		msr basepri, r0							
 528              	
 529              	@ 0 "" 2
 277:../FreeRTOS/Source/croutine.c **** 			{
 278:../FreeRTOS/Source/croutine.c **** 				/* The event could have occurred just before this critical
 279:../FreeRTOS/Source/croutine.c **** 				section.  If this is the case then the generic list item will
 280:../FreeRTOS/Source/croutine.c **** 				have been moved to the pending ready list and the following
 281:../FreeRTOS/Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 282:../FreeRTOS/Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 283:../FreeRTOS/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 530              		.loc 1 283 0
 531              		.thumb
 532 0302 3B68     		ldr	r3, [r7, #0]
 533 0304 03F10403 		add	r3, r3, #4
 534 0308 1846     		mov	r0, r3
 535 030a FFF7FEFF 		bl	vListRemove
 284:../FreeRTOS/Source/croutine.c **** 
 285:../FreeRTOS/Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 286:../FreeRTOS/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 536              		.loc 1 286 0
 537 030e 3B68     		ldr	r3, [r7, #0]
 538 0310 9B6A     		ldr	r3, [r3, #40]
 539 0312 002B     		cmp	r3, #0
 540 0314 05D0     		beq	.L20
 287:../FreeRTOS/Source/croutine.c **** 				{															
 288:../FreeRTOS/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 541              		.loc 1 288 0
 542 0316 3B68     		ldr	r3, [r7, #0]
 543 0318 03F11803 		add	r3, r3, #24
 544 031c 1846     		mov	r0, r3
 545 031e FFF7FEFF 		bl	vListRemove
 546              	.L20:
 289:../FreeRTOS/Source/croutine.c **** 				}
 290:../FreeRTOS/Source/croutine.c **** 			}
 291:../FreeRTOS/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 547              		.loc 1 291 0
 548              	@ 291 "../FreeRTOS/Source/croutine.c" 1
 549 0322 4FF00000 			mov r0, #0					
 550 0326 80F31188 		msr basepri, r0				
 551              	
 552              	@ 0 "" 2
 292:../FreeRTOS/Source/croutine.c **** 
 293:../FreeRTOS/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 553              		.loc 1 293 0
 554              		.thumb
 555 032a 3B68     		ldr	r3, [r7, #0]
 556 032c DA6A     		ldr	r2, [r3, #44]
 557 032e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 558 0332 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 559 0336 1B68     		ldr	r3, [r3, #0]
 560 0338 9A42     		cmp	r2, r3
 561 033a 06D9     		bls	.L21
 562              		.loc 1 293 0 is_stmt 0 discriminator 1
 563 033c 3B68     		ldr	r3, [r7, #0]
 564 033e DA6A     		ldr	r2, [r3, #44]
 565 0340 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 566 0344 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 567 0348 1A60     		str	r2, [r3, #0]
 568              	.L21:
 569              		.loc 1 293 0 discriminator 2
 570 034a 3B68     		ldr	r3, [r7, #0]
 571 034c DA6A     		ldr	r2, [r3, #44]
 572 034e 1346     		mov	r3, r2
 573 0350 4FEA8303 		lsl	r3, r3, #2
 574 0354 9B18     		adds	r3, r3, r2
 575 0356 4FEA8303 		lsl	r3, r3, #2
 576 035a 1A46     		mov	r2, r3
 577 035c 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 578 0360 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 579 0364 D218     		adds	r2, r2, r3
 580 0366 3B68     		ldr	r3, [r7, #0]
 581 0368 03F10403 		add	r3, r3, #4
 582 036c 1046     		mov	r0, r2
 583 036e 1946     		mov	r1, r3
 584 0370 FFF7FEFF 		bl	vListInsertEnd
 585 0374 00E0     		b	.L18
 586              	.L24:
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 587              		.loc 1 266 0 is_stmt 1
 588 0376 00BF     		nop
 589              	.L18:
 266:../FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 590              		.loc 1 266 0 is_stmt 0 discriminator 1
 591 0378 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 592 037c C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 593 0380 1B68     		ldr	r3, [r3, #0]
 594 0382 1B68     		ldr	r3, [r3, #0]
 595 0384 002B     		cmp	r3, #0
 596 0386 A7D1     		bne	.L22
 597 0388 00E0     		b	.L16
 598              	.L25:
 273:../FreeRTOS/Source/croutine.c **** 				break;																				
 599              		.loc 1 273 0 is_stmt 1
 600 038a 00BF     		nop
 601              	.L16:
 248:../FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 602              		.loc 1 248 0 discriminator 1
 603 038c 40F20003 		movw	r3, #:lower16:xPassedTicks
 604 0390 C0F20003 		movt	r3, #:upper16:xPassedTicks
 605 0394 1B68     		ldr	r3, [r3, #0]
 606 0396 002B     		cmp	r3, #0
 607 0398 7FF468AF 		bne	.L23
 294:../FreeRTOS/Source/croutine.c **** 		}																									
 295:../FreeRTOS/Source/croutine.c **** 	}
 296:../FreeRTOS/Source/croutine.c **** 
 297:../FreeRTOS/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 608              		.loc 1 297 0
 609 039c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 610 03a0 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 611 03a4 1A68     		ldr	r2, [r3, #0]
 612 03a6 40F20003 		movw	r3, #:lower16:xLastTickCount
 613 03aa C0F20003 		movt	r3, #:upper16:xLastTickCount
 614 03ae 1A60     		str	r2, [r3, #0]
 298:../FreeRTOS/Source/croutine.c **** }
 615              		.loc 1 298 0
 616 03b0 07F10807 		add	r7, r7, #8
 617 03b4 BD46     		mov	sp, r7
 618 03b6 80BD     		pop	{r7, pc}
 619              		.cfi_endproc
 620              	.LFE113:
 622              		.align	2
 623              		.global	vCoRoutineSchedule
 624              		.thumb
 625              		.thumb_func
 627              	vCoRoutineSchedule:
 628              	.LFB114:
 299:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 300:../FreeRTOS/Source/croutine.c **** 
 301:../FreeRTOS/Source/croutine.c **** void vCoRoutineSchedule( void )
 302:../FreeRTOS/Source/croutine.c **** {
 629              		.loc 1 302 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633 03b8 80B5     		push	{r7, lr}
 634              	.LCFI12:
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 14, -4
 637              		.cfi_offset 7, -8
 638 03ba 82B0     		sub	sp, sp, #8
 639              	.LCFI13:
 640              		.cfi_def_cfa_offset 16
 641 03bc 00AF     		add	r7, sp, #0
 642              	.LCFI14:
 643              		.cfi_def_cfa_register 7
 303:../FreeRTOS/Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 304:../FreeRTOS/Source/croutine.c **** 	prvCheckPendingReadyList();
 644              		.loc 1 304 0
 645 03be FFF7F3FE 		bl	prvCheckPendingReadyList
 305:../FreeRTOS/Source/croutine.c **** 
 306:../FreeRTOS/Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 307:../FreeRTOS/Source/croutine.c **** 	prvCheckDelayedList();
 646              		.loc 1 307 0
 647 03c2 FFF741FF 		bl	prvCheckDelayedList
 308:../FreeRTOS/Source/croutine.c **** 
 309:../FreeRTOS/Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 310:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 648              		.loc 1 310 0
 649 03c6 12E0     		b	.L27
 650              	.L30:
 311:../FreeRTOS/Source/croutine.c **** 	{
 312:../FreeRTOS/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 651              		.loc 1 312 0
 652 03c8 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 653 03cc C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 654 03d0 1B68     		ldr	r3, [r3, #0]
 655 03d2 002B     		cmp	r3, #0
 656 03d4 63D0     		beq	.L32
 657              	.L28:
 313:../FreeRTOS/Source/croutine.c **** 		{
 314:../FreeRTOS/Source/croutine.c **** 			/* No more co-routines to check. */
 315:../FreeRTOS/Source/croutine.c **** 			return;
 316:../FreeRTOS/Source/croutine.c **** 		}
 317:../FreeRTOS/Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 658              		.loc 1 317 0
 659 03d6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 660 03da C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 661 03de 1B68     		ldr	r3, [r3, #0]
 662 03e0 03F1FF32 		add	r2, r3, #-1
 663 03e4 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 664 03e8 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 665 03ec 1A60     		str	r2, [r3, #0]
 666              	.L27:
 310:../FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 667              		.loc 1 310 0 discriminator 1
 668 03ee 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 669 03f2 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 670 03f6 1A68     		ldr	r2, [r3, #0]
 671 03f8 1346     		mov	r3, r2
 672 03fa 4FEA8303 		lsl	r3, r3, #2
 673 03fe 9B18     		adds	r3, r3, r2
 674 0400 4FEA8303 		lsl	r3, r3, #2
 675 0404 1A46     		mov	r2, r3
 676 0406 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 677 040a C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 678 040e D318     		adds	r3, r2, r3
 679 0410 1B68     		ldr	r3, [r3, #0]
 680 0412 002B     		cmp	r3, #0
 681 0414 D8D0     		beq	.L30
 682              	.LBB4:
 318:../FreeRTOS/Source/croutine.c **** 	}
 319:../FreeRTOS/Source/croutine.c **** 
 320:../FreeRTOS/Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 321:../FreeRTOS/Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 322:../FreeRTOS/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 683              		.loc 1 322 0
 684 0416 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 685 041a C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 686 041e 1A68     		ldr	r2, [r3, #0]
 687 0420 1346     		mov	r3, r2
 688 0422 4FEA8303 		lsl	r3, r3, #2
 689 0426 9B18     		adds	r3, r3, r2
 690 0428 4FEA8303 		lsl	r3, r3, #2
 691 042c 1A46     		mov	r2, r3
 692 042e 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 693 0432 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 694 0436 D318     		adds	r3, r2, r3
 695 0438 7B60     		str	r3, [r7, #4]
 696 043a 7B68     		ldr	r3, [r7, #4]
 697 043c 5B68     		ldr	r3, [r3, #4]
 698 043e 5B68     		ldr	r3, [r3, #4]
 699 0440 1A46     		mov	r2, r3
 700 0442 7B68     		ldr	r3, [r7, #4]
 701 0444 5A60     		str	r2, [r3, #4]
 702 0446 7B68     		ldr	r3, [r7, #4]
 703 0448 5A68     		ldr	r2, [r3, #4]
 704 044a 7B68     		ldr	r3, [r7, #4]
 705 044c 03F10803 		add	r3, r3, #8
 706 0450 9A42     		cmp	r2, r3
 707 0452 05D1     		bne	.L31
 708              		.loc 1 322 0 is_stmt 0 discriminator 1
 709 0454 7B68     		ldr	r3, [r7, #4]
 710 0456 5B68     		ldr	r3, [r3, #4]
 711 0458 5B68     		ldr	r3, [r3, #4]
 712 045a 1A46     		mov	r2, r3
 713 045c 7B68     		ldr	r3, [r7, #4]
 714 045e 5A60     		str	r2, [r3, #4]
 715              	.L31:
 716              		.loc 1 322 0 discriminator 2
 717 0460 7B68     		ldr	r3, [r7, #4]
 718 0462 5B68     		ldr	r3, [r3, #4]
 719 0464 DB68     		ldr	r3, [r3, #12]
 720 0466 1A46     		mov	r2, r3
 721 0468 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 722 046c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 723 0470 1A60     		str	r2, [r3, #0]
 724              	.LBE4:
 323:../FreeRTOS/Source/croutine.c **** 
 324:../FreeRTOS/Source/croutine.c **** 	/* Call the co-routine. */
 325:../FreeRTOS/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 725              		.loc 1 325 0 is_stmt 1 discriminator 2
 726 0472 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 727 0476 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 728 047a 1B68     		ldr	r3, [r3, #0]
 729 047c 1A68     		ldr	r2, [r3, #0]
 730 047e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 731 0482 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 732 0486 1968     		ldr	r1, [r3, #0]
 733 0488 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 734 048c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 735 0490 1B68     		ldr	r3, [r3, #0]
 736 0492 1B6B     		ldr	r3, [r3, #48]
 737 0494 0846     		mov	r0, r1
 738 0496 1946     		mov	r1, r3
 739 0498 9047     		blx	r2
 326:../FreeRTOS/Source/croutine.c **** 
 327:../FreeRTOS/Source/croutine.c **** 	return;
 740              		.loc 1 327 0 discriminator 2
 741 049a 00BF     		nop
 742 049c 00E0     		b	.L26
 743              	.L32:
 315:../FreeRTOS/Source/croutine.c **** 			return;
 744              		.loc 1 315 0
 745 049e 00BF     		nop
 746              	.L26:
 328:../FreeRTOS/Source/croutine.c **** }
 747              		.loc 1 328 0
 748 04a0 07F10807 		add	r7, r7, #8
 749 04a4 BD46     		mov	sp, r7
 750 04a6 80BD     		pop	{r7, pc}
 751              		.cfi_endproc
 752              	.LFE114:
 754              		.align	2
 755              		.thumb
 756              		.thumb_func
 758              	prvInitialiseCoRoutineLists:
 759              	.LFB115:
 329:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 330:../FreeRTOS/Source/croutine.c **** 
 331:../FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 332:../FreeRTOS/Source/croutine.c **** {
 760              		.loc 1 332 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 8
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764 04a8 80B5     		push	{r7, lr}
 765              	.LCFI15:
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 14, -4
 768              		.cfi_offset 7, -8
 769 04aa 82B0     		sub	sp, sp, #8
 770              	.LCFI16:
 771              		.cfi_def_cfa_offset 16
 772 04ac 00AF     		add	r7, sp, #0
 773              	.LCFI17:
 774              		.cfi_def_cfa_register 7
 333:../FreeRTOS/Source/croutine.c **** unsigned portBASE_TYPE uxPriority;
 334:../FreeRTOS/Source/croutine.c **** 
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 775              		.loc 1 335 0
 776 04ae 4FF00003 		mov	r3, #0
 777 04b2 7B60     		str	r3, [r7, #4]
 778 04b4 13E0     		b	.L34
 779              	.L35:
 336:../FreeRTOS/Source/croutine.c **** 	{
 337:../FreeRTOS/Source/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 780              		.loc 1 337 0 discriminator 2
 781 04b6 7A68     		ldr	r2, [r7, #4]
 782 04b8 1346     		mov	r3, r2
 783 04ba 4FEA8303 		lsl	r3, r3, #2
 784 04be 9B18     		adds	r3, r3, r2
 785 04c0 4FEA8303 		lsl	r3, r3, #2
 786 04c4 1A46     		mov	r2, r3
 787 04c6 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 788 04ca C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 789 04ce D318     		adds	r3, r2, r3
 790 04d0 1846     		mov	r0, r3
 791 04d2 FFF7FEFF 		bl	vListInitialise
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 792              		.loc 1 335 0 discriminator 2
 793 04d6 7B68     		ldr	r3, [r7, #4]
 794 04d8 03F10103 		add	r3, r3, #1
 795 04dc 7B60     		str	r3, [r7, #4]
 796              	.L34:
 335:../FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 797              		.loc 1 335 0 is_stmt 0 discriminator 1
 798 04de 7B68     		ldr	r3, [r7, #4]
 799 04e0 012B     		cmp	r3, #1
 800 04e2 E8D9     		bls	.L35
 338:../FreeRTOS/Source/croutine.c **** 	}
 339:../FreeRTOS/Source/croutine.c **** 
 340:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 801              		.loc 1 340 0 is_stmt 1
 802 04e4 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList1
 803 04e8 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList1
 804 04ec FFF7FEFF 		bl	vListInitialise
 341:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 805              		.loc 1 341 0
 806 04f0 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList2
 807 04f4 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList2
 808 04f8 FFF7FEFF 		bl	vListInitialise
 342:../FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 809              		.loc 1 342 0
 810 04fc 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 811 0500 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 812 0504 FFF7FEFF 		bl	vListInitialise
 343:../FreeRTOS/Source/croutine.c **** 
 344:../FreeRTOS/Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 345:../FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 346:../FreeRTOS/Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 813              		.loc 1 346 0
 814 0508 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 815 050c C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 816 0510 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList1
 817 0514 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList1
 818 0518 1A60     		str	r2, [r3, #0]
 347:../FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 819              		.loc 1 347 0
 820 051a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 821 051e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 822 0522 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList2
 823 0526 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList2
 824 052a 1A60     		str	r2, [r3, #0]
 348:../FreeRTOS/Source/croutine.c **** }
 825              		.loc 1 348 0
 826 052c 07F10807 		add	r7, r7, #8
 827 0530 BD46     		mov	sp, r7
 828 0532 80BD     		pop	{r7, pc}
 829              		.cfi_endproc
 830              	.LFE115:
 832              		.align	2
 833              		.global	xCoRoutineRemoveFromEventList
 834              		.thumb
 835              		.thumb_func
 837              	xCoRoutineRemoveFromEventList:
 838              	.LFB116:
 349:../FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 350:../FreeRTOS/Source/croutine.c **** 
 351:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 352:../FreeRTOS/Source/croutine.c **** {
 839              		.loc 1 352 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 16
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0534 80B5     		push	{r7, lr}
 844              	.LCFI18:
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 14, -4
 847              		.cfi_offset 7, -8
 848 0536 84B0     		sub	sp, sp, #16
 849              	.LCFI19:
 850              		.cfi_def_cfa_offset 24
 851 0538 00AF     		add	r7, sp, #0
 852              	.LCFI20:
 853              		.cfi_def_cfa_register 7
 854 053a 7860     		str	r0, [r7, #4]
 353:../FreeRTOS/Source/croutine.c **** corCRCB *pxUnblockedCRCB;
 354:../FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 355:../FreeRTOS/Source/croutine.c **** 
 356:../FreeRTOS/Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 357:../FreeRTOS/Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 358:../FreeRTOS/Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 359:../FreeRTOS/Source/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 855              		.loc 1 359 0
 856 053c 7B68     		ldr	r3, [r7, #4]
 857 053e DB68     		ldr	r3, [r3, #12]
 858 0540 DB68     		ldr	r3, [r3, #12]
 859 0542 BB60     		str	r3, [r7, #8]
 360:../FreeRTOS/Source/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 860              		.loc 1 360 0
 861 0544 BB68     		ldr	r3, [r7, #8]
 862 0546 03F11803 		add	r3, r3, #24
 863 054a 1846     		mov	r0, r3
 864 054c FFF7FEFF 		bl	vListRemove
 361:../FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 865              		.loc 1 361 0
 866 0550 BB68     		ldr	r3, [r7, #8]
 867 0552 03F11803 		add	r3, r3, #24
 868 0556 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 869 055a C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 870 055e 1946     		mov	r1, r3
 871 0560 FFF7FEFF 		bl	vListInsertEnd
 362:../FreeRTOS/Source/croutine.c **** 
 363:../FreeRTOS/Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 872              		.loc 1 363 0
 873 0564 BB68     		ldr	r3, [r7, #8]
 874 0566 DA6A     		ldr	r2, [r3, #44]
 875 0568 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 876 056c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 877 0570 1B68     		ldr	r3, [r3, #0]
 878 0572 DB6A     		ldr	r3, [r3, #44]
 879 0574 9A42     		cmp	r2, r3
 880 0576 03D3     		bcc	.L37
 364:../FreeRTOS/Source/croutine.c **** 	{
 365:../FreeRTOS/Source/croutine.c **** 		xReturn = pdTRUE;
 881              		.loc 1 365 0
 882 0578 4FF00103 		mov	r3, #1
 883 057c FB60     		str	r3, [r7, #12]
 884 057e 02E0     		b	.L38
 885              	.L37:
 366:../FreeRTOS/Source/croutine.c **** 	}
 367:../FreeRTOS/Source/croutine.c **** 	else
 368:../FreeRTOS/Source/croutine.c **** 	{
 369:../FreeRTOS/Source/croutine.c **** 		xReturn = pdFALSE;
 886              		.loc 1 369 0
 887 0580 4FF00003 		mov	r3, #0
 888 0584 FB60     		str	r3, [r7, #12]
 889              	.L38:
 370:../FreeRTOS/Source/croutine.c **** 	}
 371:../FreeRTOS/Source/croutine.c **** 
 372:../FreeRTOS/Source/croutine.c **** 	return xReturn;
 890              		.loc 1 372 0
 891 0586 FB68     		ldr	r3, [r7, #12]
 373:../FreeRTOS/Source/croutine.c **** }
 892              		.loc 1 373 0
 893 0588 1846     		mov	r0, r3
 894 058a 07F11007 		add	r7, r7, #16
 895 058e BD46     		mov	sp, r7
 896 0590 80BD     		pop	{r7, pc}
 897              		.cfi_endproc
 898              	.LFE116:
 900              	.Letext0:
 901              		.file 2 "d:\\elektronik\\ides\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib
 902              		.file 3 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../So
 903              		.file 4 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/list.h"
 904              		.file 5 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/croutine
 905              		.file 6 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
  C:\TEMP\ccGlNyXk.s:20     .bss.pxReadyCoRoutineLists:00000000 $d
  C:\TEMP\ccGlNyXk.s:23     .bss.pxReadyCoRoutineLists:00000000 pxReadyCoRoutineLists
  C:\TEMP\ccGlNyXk.s:26     .bss.xDelayedCoRoutineList1:00000000 $d
  C:\TEMP\ccGlNyXk.s:29     .bss.xDelayedCoRoutineList1:00000000 xDelayedCoRoutineList1
  C:\TEMP\ccGlNyXk.s:32     .bss.xDelayedCoRoutineList2:00000000 $d
  C:\TEMP\ccGlNyXk.s:35     .bss.xDelayedCoRoutineList2:00000000 xDelayedCoRoutineList2
  C:\TEMP\ccGlNyXk.s:38     .bss.pxDelayedCoRoutineList:00000000 $d
  C:\TEMP\ccGlNyXk.s:41     .bss.pxDelayedCoRoutineList:00000000 pxDelayedCoRoutineList
  C:\TEMP\ccGlNyXk.s:44     .bss.pxOverflowDelayedCoRoutineList:00000000 $d
  C:\TEMP\ccGlNyXk.s:47     .bss.pxOverflowDelayedCoRoutineList:00000000 pxOverflowDelayedCoRoutineList
  C:\TEMP\ccGlNyXk.s:50     .bss.xPendingReadyCoRoutineList:00000000 $d
  C:\TEMP\ccGlNyXk.s:53     .bss.xPendingReadyCoRoutineList:00000000 xPendingReadyCoRoutineList
  C:\TEMP\ccGlNyXk.s:60     .bss.pxCurrentCoRoutine:00000000 pxCurrentCoRoutine
  C:\TEMP\ccGlNyXk.s:57     .bss.pxCurrentCoRoutine:00000000 $d
  C:\TEMP\ccGlNyXk.s:63     .bss.uxTopCoRoutineReadyPriority:00000000 $d
  C:\TEMP\ccGlNyXk.s:66     .bss.uxTopCoRoutineReadyPriority:00000000 uxTopCoRoutineReadyPriority
  C:\TEMP\ccGlNyXk.s:69     .bss.xCoRoutineTickCount:00000000 $d
  C:\TEMP\ccGlNyXk.s:72     .bss.xCoRoutineTickCount:00000000 xCoRoutineTickCount
  C:\TEMP\ccGlNyXk.s:75     .bss.xLastTickCount:00000000 $d
  C:\TEMP\ccGlNyXk.s:78     .bss.xLastTickCount:00000000 xLastTickCount
  C:\TEMP\ccGlNyXk.s:81     .bss.xPassedTicks:00000000 $d
  C:\TEMP\ccGlNyXk.s:84     .bss.xPassedTicks:00000000 xPassedTicks
  C:\TEMP\ccGlNyXk.s:87     .text:00000000 $t
  C:\TEMP\ccGlNyXk.s:92     .text:00000000 xCoRoutineCreate
  C:\TEMP\ccGlNyXk.s:758    .text:000004a8 prvInitialiseCoRoutineLists
  C:\TEMP\ccGlNyXk.s:238    .text:000000f4 vCoRoutineAddToDelayedList
  C:\TEMP\ccGlNyXk.s:333    .text:000001a8 prvCheckPendingReadyList
  C:\TEMP\ccGlNyXk.s:434    .text:00000248 prvCheckDelayedList
  C:\TEMP\ccGlNyXk.s:627    .text:000003b8 vCoRoutineSchedule
  C:\TEMP\ccGlNyXk.s:837    .text:00000534 xCoRoutineRemoveFromEventList
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
malloc
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
vListInitialise
