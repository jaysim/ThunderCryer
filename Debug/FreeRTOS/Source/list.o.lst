   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"list.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vListInitialise,"ax",%progbits
  19              		.align	1
  20              		.global	vListInitialise
  21              		.thumb
  22              		.thumb_func
  24              	vListInitialise:
  25              	.LFB110:
  26              		.file 1 "../FreeRTOS/Source/list.c"
   1:../FreeRTOS/Source/list.c **** /*
   2:../FreeRTOS/Source/list.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/list.c **** 
   4:../FreeRTOS/Source/list.c **** 
   5:../FreeRTOS/Source/list.c ****     ***************************************************************************
   6:../FreeRTOS/Source/list.c ****      *                                                                       *
   7:../FreeRTOS/Source/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/list.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/list.c ****      *                                                                       *
  11:../FreeRTOS/Source/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/list.c ****      *                                                                       *
  18:../FreeRTOS/Source/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/list.c ****      *                                                                       *
  20:../FreeRTOS/Source/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/list.c ****      *                                                                       *
  22:../FreeRTOS/Source/list.c ****     ***************************************************************************
  23:../FreeRTOS/Source/list.c **** 
  24:../FreeRTOS/Source/list.c **** 
  25:../FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/list.c **** 
  27:../FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/list.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/list.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/list.c **** 
  42:../FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/list.c **** 
  44:../FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/list.c ****     contact details.
  46:../FreeRTOS/Source/list.c **** 
  47:../FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/list.c ****     critical systems.
  49:../FreeRTOS/Source/list.c **** 
  50:../FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/list.c ****     licensing and training services.
  52:../FreeRTOS/Source/list.c **** */
  53:../FreeRTOS/Source/list.c **** 
  54:../FreeRTOS/Source/list.c **** 
  55:../FreeRTOS/Source/list.c **** #include <stdlib.h>
  56:../FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  57:../FreeRTOS/Source/list.c **** #include "list.h"
  58:../FreeRTOS/Source/list.c **** 
  59:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  60:../FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  61:../FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  62:../FreeRTOS/Source/list.c **** 
  63:../FreeRTOS/Source/list.c **** void vListInitialise( xList *pxList )
  64:../FreeRTOS/Source/list.c **** {
  27              		.loc 1 64 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  65:../FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:../FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:../FreeRTOS/Source/list.c **** 	as the only list entry. */
  68:../FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  33              		.loc 1 68 0
  34 0000 00F10803 		add	r3, r0, #8
  69:../FreeRTOS/Source/list.c **** 
  70:../FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  71:../FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  72:../FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  35              		.loc 1 72 0
  36 0004 4FF0FF32 		mov	r2, #-1
  37 0008 8260     		str	r2, [r0, #8]
  68:../FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  38              		.loc 1 68 0
  39 000a 4360     		str	r3, [r0, #4]
  73:../FreeRTOS/Source/list.c **** 
  74:../FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:../FreeRTOS/Source/list.c **** 	when the list is empty. */
  76:../FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40              		.loc 1 76 0
  41 000c C360     		str	r3, [r0, #12]
  77:../FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  42              		.loc 1 77 0
  43 000e 0361     		str	r3, [r0, #16]
  78:../FreeRTOS/Source/list.c **** 
  79:../FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  44              		.loc 1 79 0
  45 0010 0023     		movs	r3, #0
  46 0012 0360     		str	r3, [r0, #0]
  80:../FreeRTOS/Source/list.c **** }
  47              		.loc 1 80 0
  48 0014 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE110:
  52              		.section	.text.vListInitialiseItem,"ax",%progbits
  53              		.align	1
  54              		.global	vListInitialiseItem
  55              		.thumb
  56              		.thumb_func
  58              	vListInitialiseItem:
  59              	.LFB111:
  81:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  82:../FreeRTOS/Source/list.c **** 
  83:../FreeRTOS/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:../FreeRTOS/Source/list.c **** {
  60              		.loc 1 84 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65              	.LVL1:
  85:../FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:../FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
  66              		.loc 1 86 0
  67 0000 0023     		movs	r3, #0
  68 0002 0361     		str	r3, [r0, #16]
  87:../FreeRTOS/Source/list.c **** }
  69              		.loc 1 87 0
  70 0004 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE111:
  74              		.section	.text.vListInsertEnd,"ax",%progbits
  75              		.align	1
  76              		.global	vListInsertEnd
  77              		.thumb
  78              		.thumb_func
  80              	vListInsertEnd:
  81              	.LFB112:
  88:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  89:../FreeRTOS/Source/list.c **** 
  90:../FreeRTOS/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:../FreeRTOS/Source/list.c **** {
  82              		.loc 1 91 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL2:
  92:../FreeRTOS/Source/list.c **** volatile xListItem * pxIndex;
  93:../FreeRTOS/Source/list.c **** 
  94:../FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:../FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  96:../FreeRTOS/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:../FreeRTOS/Source/list.c **** 	the pxIndex member. */
  98:../FreeRTOS/Source/list.c **** 	pxIndex = pxList->pxIndex;
  88              		.loc 1 98 0
  89 0000 4368     		ldr	r3, [r0, #4]
  90              	.LVL3:
  99:../FreeRTOS/Source/list.c **** 
 100:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
  91              		.loc 1 100 0
  92 0002 5A68     		ldr	r2, [r3, #4]
 101:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
  93              		.loc 1 101 0
  94 0004 8B60     		str	r3, [r1, #8]
 100:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
  95              		.loc 1 100 0
  96 0006 4A60     		str	r2, [r1, #4]
 102:../FreeRTOS/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  97              		.loc 1 102 0
  98 0008 5A68     		ldr	r2, [r3, #4]
  99 000a 9160     		str	r1, [r2, #8]
 103:../FreeRTOS/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 100              		.loc 1 103 0
 101 000c 5960     		str	r1, [r3, #4]
 104:../FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 102              		.loc 1 104 0
 103 000e 4160     		str	r1, [r0, #4]
 105:../FreeRTOS/Source/list.c **** 
 106:../FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 107:../FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 104              		.loc 1 107 0
 105 0010 0861     		str	r0, [r1, #16]
 108:../FreeRTOS/Source/list.c **** 
 109:../FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 106              		.loc 1 109 0
 107 0012 0368     		ldr	r3, [r0, #0]
 108 0014 0133     		adds	r3, r3, #1
 109 0016 0360     		str	r3, [r0, #0]
 110:../FreeRTOS/Source/list.c **** }
 110              		.loc 1 110 0
 111 0018 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE112:
 115              		.section	.text.vListInsert,"ax",%progbits
 116              		.align	1
 117              		.global	vListInsert
 118              		.thumb
 119              		.thumb_func
 121              	vListInsert:
 122              	.LFB113:
 111:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 112:../FreeRTOS/Source/list.c **** 
 113:../FreeRTOS/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:../FreeRTOS/Source/list.c **** {
 123              		.loc 1 114 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              	.LVL4:
 115:../FreeRTOS/Source/list.c **** volatile xListItem *pxIterator;
 116:../FreeRTOS/Source/list.c **** portTickType xValueOfInsertion;
 117:../FreeRTOS/Source/list.c **** 
 118:../FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:../FreeRTOS/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 128              		.loc 1 119 0
 129 0000 0A68     		ldr	r2, [r1, #0]
 130              	.LVL5:
 120:../FreeRTOS/Source/list.c **** 
 121:../FreeRTOS/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 122:../FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:../FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:../FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:../FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:../FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 127:../FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 128:../FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 131              		.loc 1 128 0
 132 0002 531C     		adds	r3, r2, #1
 114:../FreeRTOS/Source/list.c **** {
 133              		.loc 1 114 0
 134 0004 10B5     		push	{r4, lr}
 135              	.LCFI0:
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 14, -4
 138              		.cfi_offset 4, -8
 129:../FreeRTOS/Source/list.c **** 	{
 130:../FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 139              		.loc 1 130 0
 140 0006 0CBF     		ite	eq
 141 0008 0369     		ldreq	r3, [r0, #16]
 131:../FreeRTOS/Source/list.c **** 	}
 132:../FreeRTOS/Source/list.c **** 	else
 133:../FreeRTOS/Source/list.c **** 	{
 134:../FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 135:../FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 136:../FreeRTOS/Source/list.c **** 			1) Stack overflow -
 137:../FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:../FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:../FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 140:../FreeRTOS/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:../FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:../FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:../FreeRTOS/Source/list.c **** 			   the scheduler is suspended.
 144:../FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:../FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:../FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:../FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:../FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:../FreeRTOS/Source/list.c **** 		
 150:../FreeRTOS/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 142              		.loc 1 150 0
 143 000a 00F10803 		addne	r3, r0, #8
 128:../FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 144              		.loc 1 128 0
 145 000e 01D1     		bne	.L7
 146 0010 04E0     		b	.L6
 147              	.LVL6:
 148              	.L8:
 149              		.loc 1 150 0 discriminator 2
 150 0012 5B68     		ldr	r3, [r3, #4]
 151              	.LVL7:
 152              	.L7:
 153              		.loc 1 150 0 is_stmt 0 discriminator 1
 154 0014 5C68     		ldr	r4, [r3, #4]
 155 0016 2468     		ldr	r4, [r4, #0]
 156 0018 9442     		cmp	r4, r2
 157 001a FAD9     		bls	.L8
 158              	.LVL8:
 159              	.L6:
 151:../FreeRTOS/Source/list.c **** 		{
 152:../FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:../FreeRTOS/Source/list.c **** 			wanted insertion position. */
 154:../FreeRTOS/Source/list.c **** 		}
 155:../FreeRTOS/Source/list.c **** 	}
 156:../FreeRTOS/Source/list.c **** 
 157:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 160              		.loc 1 157 0 is_stmt 1
 161 001c 5A68     		ldr	r2, [r3, #4]
 158:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 159:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 160:../FreeRTOS/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 161:../FreeRTOS/Source/list.c **** 
 162:../FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:../FreeRTOS/Source/list.c **** 	item later. */
 164:../FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 162              		.loc 1 164 0
 163 001e 0861     		str	r0, [r1, #16]
 158:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 164              		.loc 1 158 0
 165 0020 9160     		str	r1, [r2, #8]
 157:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 166              		.loc 1 157 0
 167 0022 4A60     		str	r2, [r1, #4]
 159:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 168              		.loc 1 159 0
 169 0024 8B60     		str	r3, [r1, #8]
 160:../FreeRTOS/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 170              		.loc 1 160 0
 171 0026 5960     		str	r1, [r3, #4]
 165:../FreeRTOS/Source/list.c **** 
 166:../FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 172              		.loc 1 166 0
 173 0028 0368     		ldr	r3, [r0, #0]
 174              	.LVL9:
 175 002a 0133     		adds	r3, r3, #1
 176 002c 0360     		str	r3, [r0, #0]
 167:../FreeRTOS/Source/list.c **** }
 177              		.loc 1 167 0
 178 002e 10BD     		pop	{r4, pc}
 179              		.cfi_endproc
 180              	.LFE113:
 182              		.section	.text.vListRemove,"ax",%progbits
 183              		.align	1
 184              		.global	vListRemove
 185              		.thumb
 186              		.thumb_func
 188              	vListRemove:
 189              	.LFB114:
 168:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:../FreeRTOS/Source/list.c **** 
 170:../FreeRTOS/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:../FreeRTOS/Source/list.c **** {
 190              		.loc 1 171 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195              	.LVL10:
 172:../FreeRTOS/Source/list.c **** xList * pxList;
 173:../FreeRTOS/Source/list.c **** 
 174:../FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 196              		.loc 1 174 0
 197 0000 4368     		ldr	r3, [r0, #4]
 198 0002 8268     		ldr	r2, [r0, #8]
 199 0004 9A60     		str	r2, [r3, #8]
 175:../FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 200              		.loc 1 175 0
 201 0006 8268     		ldr	r2, [r0, #8]
 202 0008 5360     		str	r3, [r2, #4]
 176:../FreeRTOS/Source/list.c **** 	
 177:../FreeRTOS/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:../FreeRTOS/Source/list.c **** 	item. */
 179:../FreeRTOS/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 203              		.loc 1 179 0
 204 000a 0369     		ldr	r3, [r0, #16]
 205              	.LVL11:
 180:../FreeRTOS/Source/list.c **** 
 181:../FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:../FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 206              		.loc 1 182 0
 207 000c 5968     		ldr	r1, [r3, #4]
 208 000e 8142     		cmp	r1, r0
 183:../FreeRTOS/Source/list.c **** 	{
 184:../FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 209              		.loc 1 184 0
 210 0010 08BF     		it	eq
 211 0012 5A60     		streq	r2, [r3, #4]
 185:../FreeRTOS/Source/list.c **** 	}
 186:../FreeRTOS/Source/list.c **** 
 187:../FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 212              		.loc 1 187 0
 213 0014 0022     		movs	r2, #0
 214 0016 0261     		str	r2, [r0, #16]
 188:../FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 215              		.loc 1 188 0
 216 0018 1A68     		ldr	r2, [r3, #0]
 217 001a 013A     		subs	r2, r2, #1
 218 001c 1A60     		str	r2, [r3, #0]
 189:../FreeRTOS/Source/list.c **** }
 219              		.loc 1 189 0
 220 001e 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE114:
 224              		.text
 225              	.Letext0:
 226              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 227              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\FreeRTOS\\Source\\include/../../Source/por
 228              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\FreeRTOS\\Source\\include/list.h"
 229              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
  C:\Temp\cc1McFL1.s:19     .text.vListInitialise:00000000 $t
  C:\Temp\cc1McFL1.s:24     .text.vListInitialise:00000000 vListInitialise
  C:\Temp\cc1McFL1.s:53     .text.vListInitialiseItem:00000000 $t
  C:\Temp\cc1McFL1.s:58     .text.vListInitialiseItem:00000000 vListInitialiseItem
  C:\Temp\cc1McFL1.s:75     .text.vListInsertEnd:00000000 $t
  C:\Temp\cc1McFL1.s:80     .text.vListInsertEnd:00000000 vListInsertEnd
  C:\Temp\cc1McFL1.s:116    .text.vListInsert:00000000 $t
  C:\Temp\cc1McFL1.s:121    .text.vListInsert:00000000 vListInsert
  C:\Temp\cc1McFL1.s:183    .text.vListRemove:00000000 $t
  C:\Temp\cc1McFL1.s:188    .text.vListRemove:00000000 vListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
