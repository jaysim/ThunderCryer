   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"list.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	vListInitialise
  20              		.thumb
  21              		.thumb_func
  23              	vListInitialise:
  24              	.LFB110:
  25              		.file 1 "../FreeRTOS/Source/list.c"
   1:../FreeRTOS/Source/list.c **** /*
   2:../FreeRTOS/Source/list.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/list.c **** 
   4:../FreeRTOS/Source/list.c **** 
   5:../FreeRTOS/Source/list.c ****     ***************************************************************************
   6:../FreeRTOS/Source/list.c ****      *                                                                       *
   7:../FreeRTOS/Source/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/list.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/list.c ****      *                                                                       *
  11:../FreeRTOS/Source/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/list.c ****      *                                                                       *
  18:../FreeRTOS/Source/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/list.c ****      *                                                                       *
  20:../FreeRTOS/Source/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/list.c ****      *                                                                       *
  22:../FreeRTOS/Source/list.c ****     ***************************************************************************
  23:../FreeRTOS/Source/list.c **** 
  24:../FreeRTOS/Source/list.c **** 
  25:../FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/list.c **** 
  27:../FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/list.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/list.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/list.c **** 
  42:../FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/list.c **** 
  44:../FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/list.c ****     contact details.
  46:../FreeRTOS/Source/list.c **** 
  47:../FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/list.c ****     critical systems.
  49:../FreeRTOS/Source/list.c **** 
  50:../FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/list.c ****     licensing and training services.
  52:../FreeRTOS/Source/list.c **** */
  53:../FreeRTOS/Source/list.c **** 
  54:../FreeRTOS/Source/list.c **** 
  55:../FreeRTOS/Source/list.c **** #include <stdlib.h>
  56:../FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  57:../FreeRTOS/Source/list.c **** #include "list.h"
  58:../FreeRTOS/Source/list.c **** 
  59:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  60:../FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  61:../FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  62:../FreeRTOS/Source/list.c **** 
  63:../FreeRTOS/Source/list.c **** void vListInitialise( xList *pxList )
  64:../FreeRTOS/Source/list.c **** {
  26              		.loc 1 64 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  65:../FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:../FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:../FreeRTOS/Source/list.c **** 	as the only list entry. */
  68:../FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  42              		.loc 1 68 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 03F10802 		add	r2, r3, #8
  45 000e 7B68     		ldr	r3, [r7, #4]
  46 0010 5A60     		str	r2, [r3, #4]
  69:../FreeRTOS/Source/list.c **** 
  70:../FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  71:../FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  72:../FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  47              		.loc 1 72 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 4FF0FF32 		mov	r2, #-1
  50 0018 9A60     		str	r2, [r3, #8]
  73:../FreeRTOS/Source/list.c **** 
  74:../FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:../FreeRTOS/Source/list.c **** 	when the list is empty. */
  76:../FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  51              		.loc 1 76 0
  52 001a 7B68     		ldr	r3, [r7, #4]
  53 001c 03F10802 		add	r2, r3, #8
  54 0020 7B68     		ldr	r3, [r7, #4]
  55 0022 DA60     		str	r2, [r3, #12]
  77:../FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  56              		.loc 1 77 0
  57 0024 7B68     		ldr	r3, [r7, #4]
  58 0026 03F10802 		add	r2, r3, #8
  59 002a 7B68     		ldr	r3, [r7, #4]
  60 002c 1A61     		str	r2, [r3, #16]
  78:../FreeRTOS/Source/list.c **** 
  79:../FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  61              		.loc 1 79 0
  62 002e 7B68     		ldr	r3, [r7, #4]
  63 0030 4FF00002 		mov	r2, #0
  64 0034 1A60     		str	r2, [r3, #0]
  80:../FreeRTOS/Source/list.c **** }
  65              		.loc 1 80 0
  66 0036 07F10C07 		add	r7, r7, #12
  67 003a BD46     		mov	sp, r7
  68 003c 80BC     		pop	{r7}
  69 003e 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE110:
  73              		.align	2
  74              		.global	vListInitialiseItem
  75              		.thumb
  76              		.thumb_func
  78              	vListInitialiseItem:
  79              	.LFB111:
  81:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  82:../FreeRTOS/Source/list.c **** 
  83:../FreeRTOS/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:../FreeRTOS/Source/list.c **** {
  80              		.loc 1 84 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85 0040 80B4     		push	{r7}
  86              	.LCFI3:
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 7, -4
  89 0042 83B0     		sub	sp, sp, #12
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 16
  92 0044 00AF     		add	r7, sp, #0
  93              	.LCFI5:
  94              		.cfi_def_cfa_register 7
  95 0046 7860     		str	r0, [r7, #4]
  85:../FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:../FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
  96              		.loc 1 86 0
  97 0048 7B68     		ldr	r3, [r7, #4]
  98 004a 4FF00002 		mov	r2, #0
  99 004e 1A61     		str	r2, [r3, #16]
  87:../FreeRTOS/Source/list.c **** }
 100              		.loc 1 87 0
 101 0050 07F10C07 		add	r7, r7, #12
 102 0054 BD46     		mov	sp, r7
 103 0056 80BC     		pop	{r7}
 104 0058 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE111:
 108 005a 00BF     		.align	2
 109              		.global	vListInsertEnd
 110              		.thumb
 111              		.thumb_func
 113              	vListInsertEnd:
 114              	.LFB112:
  88:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  89:../FreeRTOS/Source/list.c **** 
  90:../FreeRTOS/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:../FreeRTOS/Source/list.c **** {
 115              		.loc 1 91 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 16
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 005c 80B4     		push	{r7}
 121              	.LCFI6:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 005e 85B0     		sub	sp, sp, #20
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 24
 127 0060 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0062 7860     		str	r0, [r7, #4]
 131 0064 3960     		str	r1, [r7, #0]
  92:../FreeRTOS/Source/list.c **** volatile xListItem * pxIndex;
  93:../FreeRTOS/Source/list.c **** 
  94:../FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:../FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  96:../FreeRTOS/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:../FreeRTOS/Source/list.c **** 	the pxIndex member. */
  98:../FreeRTOS/Source/list.c **** 	pxIndex = pxList->pxIndex;
 132              		.loc 1 98 0
 133 0066 7B68     		ldr	r3, [r7, #4]
 134 0068 5B68     		ldr	r3, [r3, #4]
 135 006a FB60     		str	r3, [r7, #12]
  99:../FreeRTOS/Source/list.c **** 
 100:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 136              		.loc 1 100 0
 137 006c FB68     		ldr	r3, [r7, #12]
 138 006e 5B68     		ldr	r3, [r3, #4]
 139 0070 1A46     		mov	r2, r3
 140 0072 3B68     		ldr	r3, [r7, #0]
 141 0074 5A60     		str	r2, [r3, #4]
 101:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 142              		.loc 1 101 0
 143 0076 7B68     		ldr	r3, [r7, #4]
 144 0078 5A68     		ldr	r2, [r3, #4]
 145 007a 3B68     		ldr	r3, [r7, #0]
 146 007c 9A60     		str	r2, [r3, #8]
 102:../FreeRTOS/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 147              		.loc 1 102 0
 148 007e FB68     		ldr	r3, [r7, #12]
 149 0080 5B68     		ldr	r3, [r3, #4]
 150 0082 3A68     		ldr	r2, [r7, #0]
 151 0084 9A60     		str	r2, [r3, #8]
 103:../FreeRTOS/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 152              		.loc 1 103 0
 153 0086 FB68     		ldr	r3, [r7, #12]
 154 0088 3A68     		ldr	r2, [r7, #0]
 155 008a 5A60     		str	r2, [r3, #4]
 104:../FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 156              		.loc 1 104 0
 157 008c 7B68     		ldr	r3, [r7, #4]
 158 008e 3A68     		ldr	r2, [r7, #0]
 159 0090 5A60     		str	r2, [r3, #4]
 105:../FreeRTOS/Source/list.c **** 
 106:../FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 107:../FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 160              		.loc 1 107 0
 161 0092 3B68     		ldr	r3, [r7, #0]
 162 0094 7A68     		ldr	r2, [r7, #4]
 163 0096 1A61     		str	r2, [r3, #16]
 108:../FreeRTOS/Source/list.c **** 
 109:../FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 164              		.loc 1 109 0
 165 0098 7B68     		ldr	r3, [r7, #4]
 166 009a 1B68     		ldr	r3, [r3, #0]
 167 009c 03F10102 		add	r2, r3, #1
 168 00a0 7B68     		ldr	r3, [r7, #4]
 169 00a2 1A60     		str	r2, [r3, #0]
 110:../FreeRTOS/Source/list.c **** }
 170              		.loc 1 110 0
 171 00a4 07F11407 		add	r7, r7, #20
 172 00a8 BD46     		mov	sp, r7
 173 00aa 80BC     		pop	{r7}
 174 00ac 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE112:
 178 00ae 00BF     		.align	2
 179              		.global	vListInsert
 180              		.thumb
 181              		.thumb_func
 183              	vListInsert:
 184              	.LFB113:
 111:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 112:../FreeRTOS/Source/list.c **** 
 113:../FreeRTOS/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:../FreeRTOS/Source/list.c **** {
 185              		.loc 1 114 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 16
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190 00b0 80B4     		push	{r7}
 191              	.LCFI9:
 192              		.cfi_def_cfa_offset 4
 193              		.cfi_offset 7, -4
 194 00b2 85B0     		sub	sp, sp, #20
 195              	.LCFI10:
 196              		.cfi_def_cfa_offset 24
 197 00b4 00AF     		add	r7, sp, #0
 198              	.LCFI11:
 199              		.cfi_def_cfa_register 7
 200 00b6 7860     		str	r0, [r7, #4]
 201 00b8 3960     		str	r1, [r7, #0]
 115:../FreeRTOS/Source/list.c **** volatile xListItem *pxIterator;
 116:../FreeRTOS/Source/list.c **** portTickType xValueOfInsertion;
 117:../FreeRTOS/Source/list.c **** 
 118:../FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:../FreeRTOS/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 202              		.loc 1 119 0
 203 00ba 3B68     		ldr	r3, [r7, #0]
 204 00bc 1B68     		ldr	r3, [r3, #0]
 205 00be BB60     		str	r3, [r7, #8]
 120:../FreeRTOS/Source/list.c **** 
 121:../FreeRTOS/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 122:../FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:../FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:../FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:../FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:../FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 127:../FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 128:../FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 206              		.loc 1 128 0
 207 00c0 BB68     		ldr	r3, [r7, #8]
 208 00c2 B3F1FF3F 		cmp	r3, #-1
 209 00c6 03D1     		bne	.L5
 129:../FreeRTOS/Source/list.c **** 	{
 130:../FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 210              		.loc 1 130 0
 211 00c8 7B68     		ldr	r3, [r7, #4]
 212 00ca 1B69     		ldr	r3, [r3, #16]
 213 00cc FB60     		str	r3, [r7, #12]
 214 00ce 0EE0     		b	.L6
 215              	.L5:
 131:../FreeRTOS/Source/list.c **** 	}
 132:../FreeRTOS/Source/list.c **** 	else
 133:../FreeRTOS/Source/list.c **** 	{
 134:../FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 135:../FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 136:../FreeRTOS/Source/list.c **** 			1) Stack overflow -
 137:../FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:../FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:../FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 140:../FreeRTOS/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:../FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:../FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:../FreeRTOS/Source/list.c **** 			   the scheduler is suspended.
 144:../FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:../FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:../FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:../FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:../FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:../FreeRTOS/Source/list.c **** 		
 150:../FreeRTOS/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 216              		.loc 1 150 0
 217 00d0 7B68     		ldr	r3, [r7, #4]
 218 00d2 03F10803 		add	r3, r3, #8
 219 00d6 FB60     		str	r3, [r7, #12]
 220 00d8 02E0     		b	.L7
 221              	.L8:
 222              		.loc 1 150 0 is_stmt 0 discriminator 2
 223 00da FB68     		ldr	r3, [r7, #12]
 224 00dc 5B68     		ldr	r3, [r3, #4]
 225 00de FB60     		str	r3, [r7, #12]
 226              	.L7:
 227              		.loc 1 150 0 discriminator 1
 228 00e0 FB68     		ldr	r3, [r7, #12]
 229 00e2 5B68     		ldr	r3, [r3, #4]
 230 00e4 1B68     		ldr	r3, [r3, #0]
 231 00e6 1A46     		mov	r2, r3
 232 00e8 BB68     		ldr	r3, [r7, #8]
 233 00ea 9A42     		cmp	r2, r3
 234 00ec F5D9     		bls	.L8
 235              	.L6:
 151:../FreeRTOS/Source/list.c **** 		{
 152:../FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:../FreeRTOS/Source/list.c **** 			wanted insertion position. */
 154:../FreeRTOS/Source/list.c **** 		}
 155:../FreeRTOS/Source/list.c **** 	}
 156:../FreeRTOS/Source/list.c **** 
 157:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 236              		.loc 1 157 0 is_stmt 1
 237 00ee FB68     		ldr	r3, [r7, #12]
 238 00f0 5B68     		ldr	r3, [r3, #4]
 239 00f2 1A46     		mov	r2, r3
 240 00f4 3B68     		ldr	r3, [r7, #0]
 241 00f6 5A60     		str	r2, [r3, #4]
 158:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 242              		.loc 1 158 0
 243 00f8 3B68     		ldr	r3, [r7, #0]
 244 00fa 5B68     		ldr	r3, [r3, #4]
 245 00fc 3A68     		ldr	r2, [r7, #0]
 246 00fe 9A60     		str	r2, [r3, #8]
 159:../FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 247              		.loc 1 159 0
 248 0100 3B68     		ldr	r3, [r7, #0]
 249 0102 FA68     		ldr	r2, [r7, #12]
 250 0104 9A60     		str	r2, [r3, #8]
 160:../FreeRTOS/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 251              		.loc 1 160 0
 252 0106 FB68     		ldr	r3, [r7, #12]
 253 0108 3A68     		ldr	r2, [r7, #0]
 254 010a 5A60     		str	r2, [r3, #4]
 161:../FreeRTOS/Source/list.c **** 
 162:../FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:../FreeRTOS/Source/list.c **** 	item later. */
 164:../FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 255              		.loc 1 164 0
 256 010c 3B68     		ldr	r3, [r7, #0]
 257 010e 7A68     		ldr	r2, [r7, #4]
 258 0110 1A61     		str	r2, [r3, #16]
 165:../FreeRTOS/Source/list.c **** 
 166:../FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 259              		.loc 1 166 0
 260 0112 7B68     		ldr	r3, [r7, #4]
 261 0114 1B68     		ldr	r3, [r3, #0]
 262 0116 03F10102 		add	r2, r3, #1
 263 011a 7B68     		ldr	r3, [r7, #4]
 264 011c 1A60     		str	r2, [r3, #0]
 167:../FreeRTOS/Source/list.c **** }
 265              		.loc 1 167 0
 266 011e 07F11407 		add	r7, r7, #20
 267 0122 BD46     		mov	sp, r7
 268 0124 80BC     		pop	{r7}
 269 0126 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE113:
 273              		.align	2
 274              		.global	vListRemove
 275              		.thumb
 276              		.thumb_func
 278              	vListRemove:
 279              	.LFB114:
 168:../FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:../FreeRTOS/Source/list.c **** 
 170:../FreeRTOS/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:../FreeRTOS/Source/list.c **** {
 280              		.loc 1 171 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 16
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285 0128 80B4     		push	{r7}
 286              	.LCFI12:
 287              		.cfi_def_cfa_offset 4
 288              		.cfi_offset 7, -4
 289 012a 85B0     		sub	sp, sp, #20
 290              	.LCFI13:
 291              		.cfi_def_cfa_offset 24
 292 012c 00AF     		add	r7, sp, #0
 293              	.LCFI14:
 294              		.cfi_def_cfa_register 7
 295 012e 7860     		str	r0, [r7, #4]
 172:../FreeRTOS/Source/list.c **** xList * pxList;
 173:../FreeRTOS/Source/list.c **** 
 174:../FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 296              		.loc 1 174 0
 297 0130 7B68     		ldr	r3, [r7, #4]
 298 0132 5B68     		ldr	r3, [r3, #4]
 299 0134 7A68     		ldr	r2, [r7, #4]
 300 0136 9268     		ldr	r2, [r2, #8]
 301 0138 9A60     		str	r2, [r3, #8]
 175:../FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 302              		.loc 1 175 0
 303 013a 7B68     		ldr	r3, [r7, #4]
 304 013c 9B68     		ldr	r3, [r3, #8]
 305 013e 7A68     		ldr	r2, [r7, #4]
 306 0140 5268     		ldr	r2, [r2, #4]
 307 0142 5A60     		str	r2, [r3, #4]
 176:../FreeRTOS/Source/list.c **** 	
 177:../FreeRTOS/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:../FreeRTOS/Source/list.c **** 	item. */
 179:../FreeRTOS/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 308              		.loc 1 179 0
 309 0144 7B68     		ldr	r3, [r7, #4]
 310 0146 1B69     		ldr	r3, [r3, #16]
 311 0148 FB60     		str	r3, [r7, #12]
 180:../FreeRTOS/Source/list.c **** 
 181:../FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:../FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 312              		.loc 1 182 0
 313 014a FB68     		ldr	r3, [r7, #12]
 314 014c 5A68     		ldr	r2, [r3, #4]
 315 014e 7B68     		ldr	r3, [r7, #4]
 316 0150 9A42     		cmp	r2, r3
 317 0152 03D1     		bne	.L10
 183:../FreeRTOS/Source/list.c **** 	{
 184:../FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 318              		.loc 1 184 0
 319 0154 7B68     		ldr	r3, [r7, #4]
 320 0156 9A68     		ldr	r2, [r3, #8]
 321 0158 FB68     		ldr	r3, [r7, #12]
 322 015a 5A60     		str	r2, [r3, #4]
 323              	.L10:
 185:../FreeRTOS/Source/list.c **** 	}
 186:../FreeRTOS/Source/list.c **** 
 187:../FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 324              		.loc 1 187 0
 325 015c 7B68     		ldr	r3, [r7, #4]
 326 015e 4FF00002 		mov	r2, #0
 327 0162 1A61     		str	r2, [r3, #16]
 188:../FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 328              		.loc 1 188 0
 329 0164 FB68     		ldr	r3, [r7, #12]
 330 0166 1B68     		ldr	r3, [r3, #0]
 331 0168 03F1FF32 		add	r2, r3, #-1
 332 016c FB68     		ldr	r3, [r7, #12]
 333 016e 1A60     		str	r2, [r3, #0]
 189:../FreeRTOS/Source/list.c **** }
 334              		.loc 1 189 0
 335 0170 07F11407 		add	r7, r7, #20
 336 0174 BD46     		mov	sp, r7
 337 0176 80BC     		pop	{r7}
 338 0178 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE114:
 342              	.Letext0:
 343              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 344              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 345              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 346              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
  C:\Temp\ccIBv3lN.s:18     .text:00000000 $t
  C:\Temp\ccIBv3lN.s:23     .text:00000000 vListInitialise
  C:\Temp\ccIBv3lN.s:78     .text:00000040 vListInitialiseItem
  C:\Temp\ccIBv3lN.s:113    .text:0000005c vListInsertEnd
  C:\Temp\ccIBv3lN.s:183    .text:000000b0 vListInsert
  C:\Temp\ccIBv3lN.s:278    .text:00000128 vListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
