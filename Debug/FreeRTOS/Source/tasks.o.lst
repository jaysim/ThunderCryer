   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	pxCurrentTCB
  19              		.section	.bss.pxCurrentTCB,"aw",%nobits
  20              		.align	2
  23              	pxCurrentTCB:
  24 0000 00000000 		.space	4
  25              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  26              		.align	2
  29              	pxReadyTasksLists:
  30 0000 00000000 		.space	100
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  32              		.align	2
  35              	xDelayedTaskList1:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  38              		.align	2
  41              	xDelayedTaskList2:
  42 0000 00000000 		.space	20
  42      00000000 
  42      00000000 
  42      00000000 
  42      00000000 
  43              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  44              		.align	2
  47              	pxDelayedTaskList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  50              		.align	2
  53              	pxOverflowDelayedTaskList:
  54 0000 00000000 		.space	4
  55              		.section	.bss.xPendingReadyList,"aw",%nobits
  56              		.align	2
  59              	xPendingReadyList:
  60 0000 00000000 		.space	20
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  62              		.align	2
  65              	xTasksWaitingTermination:
  66 0000 00000000 		.space	20
  66      00000000 
  66      00000000 
  66      00000000 
  66      00000000 
  67              		.section	.bss.uxTasksDeleted,"aw",%nobits
  68              		.align	2
  71              	uxTasksDeleted:
  72 0000 00000000 		.space	4
  73              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  74              		.align	2
  77              	xSuspendedTaskList:
  78 0000 00000000 		.space	20
  78      00000000 
  78      00000000 
  78      00000000 
  78      00000000 
  79              		.section	.bss.xIdleTaskHandle,"aw",%nobits
  80              		.align	2
  83              	xIdleTaskHandle:
  84 0000 00000000 		.space	4
  85              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  86              		.align	2
  89              	uxCurrentNumberOfTasks:
  90 0000 00000000 		.space	4
  91              		.section	.bss.xTickCount,"aw",%nobits
  92              		.align	2
  95              	xTickCount:
  96 0000 00000000 		.space	4
  97              		.section	.bss.uxTopUsedPriority,"aw",%nobits
  98              		.align	2
 101              	uxTopUsedPriority:
 102 0000 00000000 		.space	4
 103              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 104              		.align	2
 107              	uxTopReadyPriority:
 108 0000 00000000 		.space	4
 109              		.section	.bss.xSchedulerRunning,"aw",%nobits
 110              		.align	2
 113              	xSchedulerRunning:
 114 0000 00000000 		.space	4
 115              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 116              		.align	2
 119              	uxSchedulerSuspended:
 120 0000 00000000 		.space	4
 121              		.section	.bss.uxMissedTicks,"aw",%nobits
 122              		.align	2
 125              	uxMissedTicks:
 126 0000 00000000 		.space	4
 127              		.section	.bss.xMissedYield,"aw",%nobits
 128              		.align	2
 131              	xMissedYield:
 132 0000 00000000 		.space	4
 133              		.section	.bss.xNumOfOverflows,"aw",%nobits
 134              		.align	2
 137              	xNumOfOverflows:
 138 0000 00000000 		.space	4
 139              		.section	.bss.uxTaskNumber,"aw",%nobits
 140              		.align	2
 143              	uxTaskNumber:
 144 0000 00000000 		.space	4
 145              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 146              		.align	2
 149              	xNextTaskUnblockTime:
 150 0000 FFFFFFFF 		.word	-1
 151              		.section	.bss.pcStatsString,"aw",%nobits
 152              		.align	2
 155              	pcStatsString:
 156 0000 00000000 		.space	50
 156      00000000 
 156      00000000 
 156      00000000 
 156      00000000 
 157 0032 0000     		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 158              		.align	2
 161              	ulTaskSwitchedInTime:
 162 0000 00000000 		.space	4
 163              		.section	.text.xTaskGenericCreate,"ax",%progbits
 164              		.align	2
 165              		.global	xTaskGenericCreate
 166              		.thumb
 167              		.thumb_func
 169              	xTaskGenericCreate:
 170              	.LFB110:
 171              		.file 1 "../FreeRTOS/Source/tasks.c"
   1:../FreeRTOS/Source/tasks.c **** /*
   2:../FreeRTOS/Source/tasks.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/tasks.c **** 	
   4:../FreeRTOS/Source/tasks.c **** 
   5:../FreeRTOS/Source/tasks.c ****     ***************************************************************************
   6:../FreeRTOS/Source/tasks.c ****      *                                                                       *
   7:../FreeRTOS/Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/tasks.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  11:../FreeRTOS/Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  18:../FreeRTOS/Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  20:../FreeRTOS/Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  22:../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  23:../FreeRTOS/Source/tasks.c **** 
  24:../FreeRTOS/Source/tasks.c **** 
  25:../FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/tasks.c **** 
  27:../FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/tasks.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/tasks.c **** 
  42:../FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/tasks.c **** 
  44:../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/tasks.c ****     contact details.
  46:../FreeRTOS/Source/tasks.c **** 
  47:../FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/tasks.c ****     critical systems.
  49:../FreeRTOS/Source/tasks.c **** 
  50:../FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/tasks.c ****     licensing and training services.
  52:../FreeRTOS/Source/tasks.c **** */
  53:../FreeRTOS/Source/tasks.c **** 
  54:../FreeRTOS/Source/tasks.c **** 
  55:../FreeRTOS/Source/tasks.c **** #include <stdio.h>
  56:../FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  57:../FreeRTOS/Source/tasks.c **** #include <string.h>
  58:../FreeRTOS/Source/tasks.c **** 
  59:../FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:../FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:../FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  62:../FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:../FreeRTOS/Source/tasks.c **** 
  64:../FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  65:../FreeRTOS/Source/tasks.c **** #include "task.h"
  66:../FreeRTOS/Source/tasks.c **** #include "timers.h"
  67:../FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  68:../FreeRTOS/Source/tasks.c **** 
  69:../FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  70:../FreeRTOS/Source/tasks.c **** 
  71:../FreeRTOS/Source/tasks.c **** /*
  72:../FreeRTOS/Source/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  73:../FreeRTOS/Source/tasks.c ****  */
  74:../FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  75:../FreeRTOS/Source/tasks.c **** 
  76:../FreeRTOS/Source/tasks.c **** /*
  77:../FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  78:../FreeRTOS/Source/tasks.c ****  * and stores the context of the task.
  79:../FreeRTOS/Source/tasks.c ****  */
  80:../FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
  81:../FreeRTOS/Source/tasks.c **** {
  82:../FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  83:../FreeRTOS/Source/tasks.c **** 
  84:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  85:../FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  86:../FreeRTOS/Source/tasks.c **** 	#endif	
  87:../FreeRTOS/Source/tasks.c **** 	
  88:../FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  89:../FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  90:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  91:../FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  92:../FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  93:../FreeRTOS/Source/tasks.c **** 
  94:../FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  95:../FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  96:../FreeRTOS/Source/tasks.c **** 	#endif
  97:../FreeRTOS/Source/tasks.c **** 
  98:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
  99:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 100:../FreeRTOS/Source/tasks.c **** 	#endif
 101:../FreeRTOS/Source/tasks.c **** 
 102:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 103:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 104:../FreeRTOS/Source/tasks.c **** 	#endif
 105:../FreeRTOS/Source/tasks.c **** 
 106:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 107:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 108:../FreeRTOS/Source/tasks.c **** 	#endif
 109:../FreeRTOS/Source/tasks.c **** 
 110:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 111:../FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 112:../FreeRTOS/Source/tasks.c **** 	#endif
 113:../FreeRTOS/Source/tasks.c **** 
 114:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 115:../FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 116:../FreeRTOS/Source/tasks.c **** 	#endif
 117:../FreeRTOS/Source/tasks.c **** 
 118:../FreeRTOS/Source/tasks.c **** } tskTCB;
 119:../FreeRTOS/Source/tasks.c **** 
 120:../FreeRTOS/Source/tasks.c **** 
 121:../FreeRTOS/Source/tasks.c **** /*
 122:../FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 123:../FreeRTOS/Source/tasks.c ****  * than file scope.
 124:../FreeRTOS/Source/tasks.c ****  */
 125:../FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 126:../FreeRTOS/Source/tasks.c **** 	#define static
 127:../FreeRTOS/Source/tasks.c **** #endif
 128:../FreeRTOS/Source/tasks.c **** 
 129:../FreeRTOS/Source/tasks.c **** /*lint -e956 */
 130:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 131:../FreeRTOS/Source/tasks.c **** 
 132:../FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 133:../FreeRTOS/Source/tasks.c **** 
 134:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 135:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 136:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 137:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 138:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 139:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 140:../FreeRTOS/Source/tasks.c **** 
 141:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 142:../FreeRTOS/Source/tasks.c **** 
 143:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 144:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 145:../FreeRTOS/Source/tasks.c **** 
 146:../FreeRTOS/Source/tasks.c **** #endif
 147:../FreeRTOS/Source/tasks.c **** 
 148:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 149:../FreeRTOS/Source/tasks.c **** 
 150:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 151:../FreeRTOS/Source/tasks.c **** 
 152:../FreeRTOS/Source/tasks.c **** #endif
 153:../FreeRTOS/Source/tasks.c **** 
 154:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 155:../FreeRTOS/Source/tasks.c **** 	
 156:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;
 157:../FreeRTOS/Source/tasks.c **** 	
 158:../FreeRTOS/Source/tasks.c **** #endif
 159:../FreeRTOS/Source/tasks.c **** 
 160:../FreeRTOS/Source/tasks.c **** /* File private variables. --------------------------------*/
 161:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 162:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 163:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 164:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 165:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 166:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 167:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 168:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 169:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 170:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 171:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
 172:../FreeRTOS/Source/tasks.c **** 
 173:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 174:../FreeRTOS/Source/tasks.c **** 
 175:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 176:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 177:../FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 178:../FreeRTOS/Source/tasks.c **** 
 179:../FreeRTOS/Source/tasks.c **** #endif
 180:../FreeRTOS/Source/tasks.c **** 
 181:../FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 182:../FreeRTOS/Source/tasks.c **** 
 183:../FreeRTOS/Source/tasks.c **** /*
 184:../FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 185:../FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 186:../FreeRTOS/Source/tasks.c ****  */
 187:../FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 188:../FreeRTOS/Source/tasks.c **** 
 189:../FreeRTOS/Source/tasks.c **** /*
 190:../FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 191:../FreeRTOS/Source/tasks.c ****  */
 192:../FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 193:../FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 194:../FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 195:../FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 196:../FreeRTOS/Source/tasks.c **** 
 197:../FreeRTOS/Source/tasks.c **** /*
 198:../FreeRTOS/Source/tasks.c ****  * Macros and private variables used by the trace facility.
 199:../FreeRTOS/Source/tasks.c ****  */
 200:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 201:../FreeRTOS/Source/tasks.c **** 
 202:../FreeRTOS/Source/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 203:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 204:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 205:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 206:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 207:../FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255U;
 208:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 209:../FreeRTOS/Source/tasks.c **** 
 210:../FreeRTOS/Source/tasks.c **** #endif
 211:../FreeRTOS/Source/tasks.c **** 
 212:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:../FreeRTOS/Source/tasks.c **** 
 214:../FreeRTOS/Source/tasks.c **** /*
 215:../FreeRTOS/Source/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 216:../FreeRTOS/Source/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 217:../FreeRTOS/Source/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 218:../FreeRTOS/Source/tasks.c ****  * it if not using the facility.
 219:../FreeRTOS/Source/tasks.c ****  */
 220:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 221:../FreeRTOS/Source/tasks.c **** 
 222:../FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 223:../FreeRTOS/Source/tasks.c **** 	{																								\
 224:../FreeRTOS/Source/tasks.c **** 		if( xTracing != pdFALSE )																	\
 225:../FreeRTOS/Source/tasks.c **** 		{																							\
 226:../FreeRTOS/Source/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 227:../FreeRTOS/Source/tasks.c **** 			{																						\
 228:../FreeRTOS/Source/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 229:../FreeRTOS/Source/tasks.c **** 				{																					\
 230:../FreeRTOS/Source/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 231:../FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;				\
 232:../FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 233:../FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;			\
 234:../FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 235:../FreeRTOS/Source/tasks.c **** 				}																					\
 236:../FreeRTOS/Source/tasks.c **** 				else																				\
 237:../FreeRTOS/Source/tasks.c **** 				{																					\
 238:../FreeRTOS/Source/tasks.c **** 					xTracing = pdFALSE;																\
 239:../FreeRTOS/Source/tasks.c **** 				}																					\
 240:../FreeRTOS/Source/tasks.c **** 			}																						\
 241:../FreeRTOS/Source/tasks.c **** 		}																							\
 242:../FreeRTOS/Source/tasks.c **** 	}
 243:../FreeRTOS/Source/tasks.c **** 
 244:../FreeRTOS/Source/tasks.c **** #else
 245:../FreeRTOS/Source/tasks.c **** 
 246:../FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()
 247:../FreeRTOS/Source/tasks.c **** 
 248:../FreeRTOS/Source/tasks.c **** #endif
 249:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 250:../FreeRTOS/Source/tasks.c **** 
 251:../FreeRTOS/Source/tasks.c **** /*
 252:../FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 253:../FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 254:../FreeRTOS/Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 255:../FreeRTOS/Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 256:../FreeRTOS/Source/tasks.c ****  * executing task has been rescheduled.
 257:../FreeRTOS/Source/tasks.c ****  */
 258:../FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																					\
 259:../FreeRTOS/Source/tasks.c **** 	if( ( pxTCB )->uxPriority > uxTopReadyPriority )																	\
 260:../FreeRTOS/Source/tasks.c **** 	{																													\
 261:../FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = ( pxTCB )->uxPriority;																		\
 262:../FreeRTOS/Source/tasks.c **** 	}																													\
 263:../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 264:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:../FreeRTOS/Source/tasks.c **** 
 266:../FreeRTOS/Source/tasks.c **** /*
 267:../FreeRTOS/Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 268:../FreeRTOS/Source/tasks.c ****  * any require waking.
 269:../FreeRTOS/Source/tasks.c ****  *
 270:../FreeRTOS/Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 271:../FreeRTOS/Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 272:../FreeRTOS/Source/tasks.c ****  * any further down the list.
 273:../FreeRTOS/Source/tasks.c ****  */
 274:../FreeRTOS/Source/tasks.c **** #define prvCheckDelayedTasks()															\
 275:../FreeRTOS/Source/tasks.c **** {																						\
 276:../FreeRTOS/Source/tasks.c **** portTickType xItemValue;																\
 277:../FreeRTOS/Source/tasks.c **** 																						\
 278:../FreeRTOS/Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 279:../FreeRTOS/Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 280:../FreeRTOS/Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 281:../FreeRTOS/Source/tasks.c **** 	{																					\
 282:../FreeRTOS/Source/tasks.c **** 		for( ;; )																		\
 283:../FreeRTOS/Source/tasks.c **** 		{																				\
 284:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 285:../FreeRTOS/Source/tasks.c **** 			{																			\
 286:../FreeRTOS/Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 287:../FreeRTOS/Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 288:../FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 289:../FreeRTOS/Source/tasks.c **** 				time through. */														\
 290:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 291:../FreeRTOS/Source/tasks.c **** 				break;																	\
 292:../FreeRTOS/Source/tasks.c **** 			}																			\
 293:../FreeRTOS/Source/tasks.c **** 			else																		\
 294:../FreeRTOS/Source/tasks.c **** 			{																			\
 295:../FreeRTOS/Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 296:../FreeRTOS/Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 297:../FreeRTOS/Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 298:../FreeRTOS/Source/tasks.c **** 				the Blocked state. */													\
 299:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 300:../FreeRTOS/Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 301:../FreeRTOS/Source/tasks.c **** 																						\
 302:../FreeRTOS/Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 303:../FreeRTOS/Source/tasks.c **** 				{																		\
 304:../FreeRTOS/Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 305:../FreeRTOS/Source/tasks.c **** 					value is the time at which the task at the head of the				\
 306:../FreeRTOS/Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 307:../FreeRTOS/Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 308:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 309:../FreeRTOS/Source/tasks.c **** 					break;																\
 310:../FreeRTOS/Source/tasks.c **** 				}																		\
 311:../FreeRTOS/Source/tasks.c **** 																						\
 312:../FreeRTOS/Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 313:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );							\
 314:../FreeRTOS/Source/tasks.c **** 																						\
 315:../FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 316:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 317:../FreeRTOS/Source/tasks.c **** 				{																		\
 318:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );							\
 319:../FreeRTOS/Source/tasks.c **** 				}																		\
 320:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 321:../FreeRTOS/Source/tasks.c **** 			}																			\
 322:../FreeRTOS/Source/tasks.c **** 		}																				\
 323:../FreeRTOS/Source/tasks.c **** 	}																					\
 324:../FreeRTOS/Source/tasks.c **** }
 325:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 326:../FreeRTOS/Source/tasks.c **** 
 327:../FreeRTOS/Source/tasks.c **** /*
 328:../FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 329:../FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 330:../FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 331:../FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 332:../FreeRTOS/Source/tasks.c ****  */
 333:../FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 334:../FreeRTOS/Source/tasks.c **** 
 335:../FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 336:../FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
 337:../FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 338:../FreeRTOS/Source/tasks.c **** 		
 339:../FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 340:../FreeRTOS/Source/tasks.c **** 
 341:../FreeRTOS/Source/tasks.c **** /*
 342:../FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 343:../FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 344:../FreeRTOS/Source/tasks.c ****  */
 345:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 346:../FreeRTOS/Source/tasks.c **** 
 347:../FreeRTOS/Source/tasks.c **** /*
 348:../FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 349:../FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 350:../FreeRTOS/Source/tasks.c ****  */
 351:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 352:../FreeRTOS/Source/tasks.c **** 
 353:../FreeRTOS/Source/tasks.c **** /*
 354:../FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 355:../FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 356:../FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 357:../FreeRTOS/Source/tasks.c ****  *
 358:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 359:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 360:../FreeRTOS/Source/tasks.c ****  *
 361:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 362:../FreeRTOS/Source/tasks.c ****  *
 363:../FreeRTOS/Source/tasks.c ****  */
 364:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 365:../FreeRTOS/Source/tasks.c **** 
 366:../FreeRTOS/Source/tasks.c **** /*
 367:../FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 368:../FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 369:../FreeRTOS/Source/tasks.c ****  *
 370:../FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 371:../FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 372:../FreeRTOS/Source/tasks.c ****  */
 373:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 374:../FreeRTOS/Source/tasks.c **** 
 375:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 376:../FreeRTOS/Source/tasks.c **** 
 377:../FreeRTOS/Source/tasks.c **** #endif
 378:../FreeRTOS/Source/tasks.c **** 
 379:../FreeRTOS/Source/tasks.c **** /*
 380:../FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 381:../FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 382:../FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 383:../FreeRTOS/Source/tasks.c ****  */
 384:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 385:../FreeRTOS/Source/tasks.c **** 
 386:../FreeRTOS/Source/tasks.c **** /*
 387:../FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 388:../FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 389:../FreeRTOS/Source/tasks.c ****  */
 390:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 391:../FreeRTOS/Source/tasks.c **** 
 392:../FreeRTOS/Source/tasks.c **** /*
 393:../FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 394:../FreeRTOS/Source/tasks.c ****  * allocation was successful.
 395:../FreeRTOS/Source/tasks.c ****  */
 396:../FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 397:../FreeRTOS/Source/tasks.c **** 
 398:../FreeRTOS/Source/tasks.c **** /*
 399:../FreeRTOS/Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 400:../FreeRTOS/Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 401:../FreeRTOS/Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 402:../FreeRTOS/Source/tasks.c ****  * within just that list.
 403:../FreeRTOS/Source/tasks.c ****  *
 404:../FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 405:../FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 406:../FreeRTOS/Source/tasks.c ****  */
 407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 408:../FreeRTOS/Source/tasks.c **** 
 409:../FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 410:../FreeRTOS/Source/tasks.c **** 
 411:../FreeRTOS/Source/tasks.c **** #endif
 412:../FreeRTOS/Source/tasks.c **** 
 413:../FreeRTOS/Source/tasks.c **** /*
 414:../FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 415:../FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 416:../FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 417:../FreeRTOS/Source/tasks.c ****  */
 418:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 419:../FreeRTOS/Source/tasks.c **** 
 420:../FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 421:../FreeRTOS/Source/tasks.c **** 
 422:../FreeRTOS/Source/tasks.c **** #endif
 423:../FreeRTOS/Source/tasks.c **** 
 424:../FreeRTOS/Source/tasks.c **** 
 425:../FreeRTOS/Source/tasks.c **** /*lint +e956 */
 426:../FreeRTOS/Source/tasks.c **** 
 427:../FreeRTOS/Source/tasks.c **** 
 428:../FreeRTOS/Source/tasks.c **** 
 429:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 430:../FreeRTOS/Source/tasks.c ****  * TASK CREATION API documented in task.h
 431:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 432:../FreeRTOS/Source/tasks.c **** 
 433:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 434:../FreeRTOS/Source/tasks.c **** {
 172              		.loc 1 434 0
 173              		.cfi_startproc
 174              		@ args = 16, pretend = 0, frame = 32
 175              		@ frame_needed = 1, uses_anonymous_args = 0
 176 0000 80B5     		push	{r7, lr}
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 14, -4
 180              		.cfi_offset 7, -8
 181 0002 8AB0     		sub	sp, sp, #40
 182              	.LCFI1:
 183              		.cfi_def_cfa_offset 48
 184 0004 02AF     		add	r7, sp, #8
 185              	.LCFI2:
 186              		.cfi_def_cfa 7, 40
 187 0006 F860     		str	r0, [r7, #12]
 188 0008 B960     		str	r1, [r7, #8]
 189 000a 3B60     		str	r3, [r7, #0]
 190 000c 1346     		mov	r3, r2	@ movhi
 191 000e FB80     		strh	r3, [r7, #6]	@ movhi
 435:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 436:../FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 437:../FreeRTOS/Source/tasks.c **** 
 438:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 439:../FreeRTOS/Source/tasks.c **** 	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 440:../FreeRTOS/Source/tasks.c **** 
 441:../FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 442:../FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 443:../FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 192              		.loc 1 443 0
 193 0010 FB88     		ldrh	r3, [r7, #6]
 194 0012 1846     		mov	r0, r3
 195 0014 396B     		ldr	r1, [r7, #48]
 196 0016 FFF7FEFF 		bl	prvAllocateTCBAndStack
 197 001a 0346     		mov	r3, r0
 198 001c BB61     		str	r3, [r7, #24]
 444:../FreeRTOS/Source/tasks.c **** 
 445:../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 199              		.loc 1 445 0
 200 001e BB69     		ldr	r3, [r7, #24]
 201 0020 002B     		cmp	r3, #0
 202 0022 00F0A580 		beq	.L2
 203              	.LBB2:
 446:../FreeRTOS/Source/tasks.c **** 	{
 447:../FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 448:../FreeRTOS/Source/tasks.c **** 
 449:../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 450:../FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 451:../FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 452:../FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 453:../FreeRTOS/Source/tasks.c **** 			{
 454:../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 455:../FreeRTOS/Source/tasks.c **** 			}
 456:../FreeRTOS/Source/tasks.c **** 			else
 457:../FreeRTOS/Source/tasks.c **** 			{
 458:../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 459:../FreeRTOS/Source/tasks.c **** 			}
 460:../FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 461:../FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 462:../FreeRTOS/Source/tasks.c **** 
 463:../FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 464:../FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 465:../FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 466:../FreeRTOS/Source/tasks.c **** 		required by the port. */
 467:../FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 468:../FreeRTOS/Source/tasks.c **** 		{
 469:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 204              		.loc 1 469 0
 205 0026 BB69     		ldr	r3, [r7, #24]
 206 0028 1A6B     		ldr	r2, [r3, #48]
 207 002a FB88     		ldrh	r3, [r7, #6]
 208 002c 03F1FF33 		add	r3, r3, #-1
 209 0030 4FEA8303 		lsl	r3, r3, #2
 210 0034 D318     		adds	r3, r2, r3
 211 0036 7B61     		str	r3, [r7, #20]
 470:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 212              		.loc 1 470 0
 213 0038 7B69     		ldr	r3, [r7, #20]
 214 003a 23F00703 		bic	r3, r3, #7
 215 003e 7B61     		str	r3, [r7, #20]
 471:../FreeRTOS/Source/tasks.c **** 
 472:../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 473:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 474:../FreeRTOS/Source/tasks.c **** 		}
 475:../FreeRTOS/Source/tasks.c **** 		#else
 476:../FreeRTOS/Source/tasks.c **** 		{
 477:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 478:../FreeRTOS/Source/tasks.c **** 			
 479:../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 480:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 481:../FreeRTOS/Source/tasks.c **** 
 482:../FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 483:../FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 484:../FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 485:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 486:../FreeRTOS/Source/tasks.c **** 		}
 487:../FreeRTOS/Source/tasks.c **** 		#endif
 488:../FreeRTOS/Source/tasks.c **** 
 489:../FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 490:../FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 216              		.loc 1 490 0
 217 0040 FB88     		ldrh	r3, [r7, #6]
 218 0042 0093     		str	r3, [sp, #0]
 219 0044 B869     		ldr	r0, [r7, #24]
 220 0046 B968     		ldr	r1, [r7, #8]
 221 0048 BA6A     		ldr	r2, [r7, #40]
 222 004a 7B6B     		ldr	r3, [r7, #52]
 223 004c FFF7FEFF 		bl	prvInitialiseTCBVariables
 491:../FreeRTOS/Source/tasks.c **** 
 492:../FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 493:../FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 494:../FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 495:../FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 496:../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 497:../FreeRTOS/Source/tasks.c **** 		{
 498:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 499:../FreeRTOS/Source/tasks.c **** 		}
 500:../FreeRTOS/Source/tasks.c **** 		#else
 501:../FreeRTOS/Source/tasks.c **** 		{
 502:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 224              		.loc 1 502 0
 225 0050 7869     		ldr	r0, [r7, #20]
 226 0052 F968     		ldr	r1, [r7, #12]
 227 0054 3A68     		ldr	r2, [r7, #0]
 228 0056 FFF7FEFF 		bl	pxPortInitialiseStack
 229 005a 0246     		mov	r2, r0
 230 005c BB69     		ldr	r3, [r7, #24]
 231 005e 1A60     		str	r2, [r3, #0]
 503:../FreeRTOS/Source/tasks.c **** 		}
 504:../FreeRTOS/Source/tasks.c **** 		#endif
 505:../FreeRTOS/Source/tasks.c **** 
 506:../FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 507:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT
 508:../FreeRTOS/Source/tasks.c **** 
 509:../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 232              		.loc 1 509 0
 233 0060 FB6A     		ldr	r3, [r7, #44]
 234 0062 002B     		cmp	r3, #0
 235 0064 02D0     		beq	.L3
 510:../FreeRTOS/Source/tasks.c **** 		{
 511:../FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 512:../FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 513:../FreeRTOS/Source/tasks.c **** 			required.*/
 514:../FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 236              		.loc 1 514 0
 237 0066 FB6A     		ldr	r3, [r7, #44]
 238 0068 BA69     		ldr	r2, [r7, #24]
 239 006a 1A60     		str	r2, [r3, #0]
 240              	.L3:
 515:../FreeRTOS/Source/tasks.c **** 		}
 516:../FreeRTOS/Source/tasks.c **** 		
 517:../FreeRTOS/Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 518:../FreeRTOS/Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 519:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 241              		.loc 1 519 0
 242 006c FFF7FEFF 		bl	vPortEnterCritical
 520:../FreeRTOS/Source/tasks.c **** 		{
 521:../FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 243              		.loc 1 521 0
 244 0070 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 245 0074 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 246 0078 1B68     		ldr	r3, [r3, #0]
 247 007a 03F10102 		add	r2, r3, #1
 248 007e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 249 0082 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 250 0086 1A60     		str	r2, [r3, #0]
 522:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 251              		.loc 1 522 0
 252 0088 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 253 008c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 254 0090 1B68     		ldr	r3, [r3, #0]
 255 0092 002B     		cmp	r3, #0
 256 0094 0FD1     		bne	.L4
 523:../FreeRTOS/Source/tasks.c **** 			{
 524:../FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 525:../FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 526:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 257              		.loc 1 526 0
 258 0096 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 259 009a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 260 009e BA69     		ldr	r2, [r7, #24]
 261 00a0 1A60     		str	r2, [r3, #0]
 527:../FreeRTOS/Source/tasks.c **** 
 528:../FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 262              		.loc 1 528 0
 263 00a2 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 264 00a6 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 265 00aa 1B68     		ldr	r3, [r3, #0]
 266 00ac 012B     		cmp	r3, #1
 267 00ae 18D1     		bne	.L5
 529:../FreeRTOS/Source/tasks.c **** 				{
 530:../FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 531:../FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 532:../FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 533:../FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 268              		.loc 1 533 0
 269 00b0 FFF7FEFF 		bl	prvInitialiseTaskLists
 270 00b4 15E0     		b	.L5
 271              	.L4:
 534:../FreeRTOS/Source/tasks.c **** 				}
 535:../FreeRTOS/Source/tasks.c **** 			}
 536:../FreeRTOS/Source/tasks.c **** 			else
 537:../FreeRTOS/Source/tasks.c **** 			{
 538:../FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 539:../FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 540:../FreeRTOS/Source/tasks.c **** 				so far. */
 541:../FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 272              		.loc 1 541 0
 273 00b6 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 274 00ba C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 275 00be 1B68     		ldr	r3, [r3, #0]
 276 00c0 002B     		cmp	r3, #0
 277 00c2 0ED1     		bne	.L5
 542:../FreeRTOS/Source/tasks.c **** 				{
 543:../FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 278              		.loc 1 543 0
 279 00c4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 280 00c8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 281 00cc 1B68     		ldr	r3, [r3, #0]
 282 00ce DA6A     		ldr	r2, [r3, #44]
 283 00d0 BB6A     		ldr	r3, [r7, #40]
 284 00d2 9A42     		cmp	r2, r3
 285 00d4 05D8     		bhi	.L5
 544:../FreeRTOS/Source/tasks.c **** 					{
 545:../FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 286              		.loc 1 545 0
 287 00d6 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 288 00da C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 289 00de BA69     		ldr	r2, [r7, #24]
 290 00e0 1A60     		str	r2, [r3, #0]
 291              	.L5:
 546:../FreeRTOS/Source/tasks.c **** 					}
 547:../FreeRTOS/Source/tasks.c **** 				}
 548:../FreeRTOS/Source/tasks.c **** 			}
 549:../FreeRTOS/Source/tasks.c **** 
 550:../FreeRTOS/Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 551:../FreeRTOS/Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 552:../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 292              		.loc 1 552 0
 293 00e2 BB69     		ldr	r3, [r7, #24]
 294 00e4 DA6A     		ldr	r2, [r3, #44]
 295 00e6 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 296 00ea C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 297 00ee 1B68     		ldr	r3, [r3, #0]
 298 00f0 9A42     		cmp	r2, r3
 299 00f2 06D9     		bls	.L6
 553:../FreeRTOS/Source/tasks.c **** 			{
 554:../FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 300              		.loc 1 554 0
 301 00f4 BB69     		ldr	r3, [r7, #24]
 302 00f6 DA6A     		ldr	r2, [r3, #44]
 303 00f8 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 304 00fc C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 305 0100 1A60     		str	r2, [r3, #0]
 306              	.L6:
 555:../FreeRTOS/Source/tasks.c **** 			}
 556:../FreeRTOS/Source/tasks.c **** 
 557:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 558:../FreeRTOS/Source/tasks.c **** 			{
 559:../FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 560:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 561:../FreeRTOS/Source/tasks.c **** 			}
 562:../FreeRTOS/Source/tasks.c **** 			#endif
 563:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 307              		.loc 1 563 0
 308 0102 40F20003 		movw	r3, #:lower16:uxTaskNumber
 309 0106 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 310 010a 1B68     		ldr	r3, [r3, #0]
 311 010c 03F10102 		add	r2, r3, #1
 312 0110 40F20003 		movw	r3, #:lower16:uxTaskNumber
 313 0114 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 314 0118 1A60     		str	r2, [r3, #0]
 564:../FreeRTOS/Source/tasks.c **** 
 565:../FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 315              		.loc 1 565 0
 316 011a BB69     		ldr	r3, [r7, #24]
 317 011c DA6A     		ldr	r2, [r3, #44]
 318 011e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 319 0122 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 320 0126 1B68     		ldr	r3, [r3, #0]
 321 0128 9A42     		cmp	r2, r3
 322 012a 06D9     		bls	.L7
 323              		.loc 1 565 0 is_stmt 0 discriminator 1
 324 012c BB69     		ldr	r3, [r7, #24]
 325 012e DA6A     		ldr	r2, [r3, #44]
 326 0130 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 327 0134 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 328 0138 1A60     		str	r2, [r3, #0]
 329              	.L7:
 330              		.loc 1 565 0 discriminator 2
 331 013a BB69     		ldr	r3, [r7, #24]
 332 013c DA6A     		ldr	r2, [r3, #44]
 333 013e 1346     		mov	r3, r2
 334 0140 4FEA8303 		lsl	r3, r3, #2
 335 0144 9B18     		adds	r3, r3, r2
 336 0146 4FEA8303 		lsl	r3, r3, #2
 337 014a 1A46     		mov	r2, r3
 338 014c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 339 0150 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 340 0154 D218     		adds	r2, r2, r3
 341 0156 BB69     		ldr	r3, [r7, #24]
 342 0158 03F10403 		add	r3, r3, #4
 343 015c 1046     		mov	r0, r2
 344 015e 1946     		mov	r1, r3
 345 0160 FFF7FEFF 		bl	vListInsertEnd
 566:../FreeRTOS/Source/tasks.c **** 
 567:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 346              		.loc 1 567 0 is_stmt 1 discriminator 2
 347 0164 4FF00103 		mov	r3, #1
 348 0168 FB61     		str	r3, [r7, #28]
 568:../FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 569:../FreeRTOS/Source/tasks.c **** 		}
 570:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 349              		.loc 1 570 0 discriminator 2
 350 016a FFF7FEFF 		bl	vPortExitCritical
 351 016e 02E0     		b	.L8
 352              	.L2:
 353              	.LBE2:
 571:../FreeRTOS/Source/tasks.c **** 	}
 572:../FreeRTOS/Source/tasks.c **** 	else
 573:../FreeRTOS/Source/tasks.c **** 	{
 574:../FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 354              		.loc 1 574 0
 355 0170 4FF0FF33 		mov	r3, #-1
 356 0174 FB61     		str	r3, [r7, #28]
 357              	.L8:
 575:../FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 576:../FreeRTOS/Source/tasks.c **** 	}
 577:../FreeRTOS/Source/tasks.c **** 
 578:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 358              		.loc 1 578 0
 359 0176 FB69     		ldr	r3, [r7, #28]
 360 0178 012B     		cmp	r3, #1
 361 017a 11D1     		bne	.L9
 579:../FreeRTOS/Source/tasks.c **** 	{
 580:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 362              		.loc 1 580 0
 363 017c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 364 0180 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 365 0184 1B68     		ldr	r3, [r3, #0]
 366 0186 002B     		cmp	r3, #0
 367 0188 0AD0     		beq	.L9
 581:../FreeRTOS/Source/tasks.c **** 		{
 582:../FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 583:../FreeRTOS/Source/tasks.c **** 			then it should run now. */
 584:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 368              		.loc 1 584 0
 369 018a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 370 018e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 371 0192 1B68     		ldr	r3, [r3, #0]
 372 0194 DA6A     		ldr	r2, [r3, #44]
 373 0196 BB6A     		ldr	r3, [r7, #40]
 374 0198 9A42     		cmp	r2, r3
 375 019a 01D2     		bcs	.L9
 585:../FreeRTOS/Source/tasks.c **** 			{
 586:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 376              		.loc 1 586 0
 377 019c FFF7FEFF 		bl	vPortYieldFromISR
 378              	.L9:
 587:../FreeRTOS/Source/tasks.c **** 			}
 588:../FreeRTOS/Source/tasks.c **** 		}
 589:../FreeRTOS/Source/tasks.c **** 	}
 590:../FreeRTOS/Source/tasks.c **** 
 591:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 379              		.loc 1 591 0
 380 01a0 FB69     		ldr	r3, [r7, #28]
 592:../FreeRTOS/Source/tasks.c **** }
 381              		.loc 1 592 0
 382 01a2 1846     		mov	r0, r3
 383 01a4 07F12007 		add	r7, r7, #32
 384 01a8 BD46     		mov	sp, r7
 385 01aa 80BD     		pop	{r7, pc}
 386              		.cfi_endproc
 387              	.LFE110:
 389              		.section	.text.vTaskDelete,"ax",%progbits
 390              		.align	2
 391              		.global	vTaskDelete
 392              		.thumb
 393              		.thumb_func
 395              	vTaskDelete:
 396              	.LFB111:
 593:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:../FreeRTOS/Source/tasks.c **** 
 595:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 596:../FreeRTOS/Source/tasks.c **** 
 597:../FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 598:../FreeRTOS/Source/tasks.c **** 	{
 397              		.loc 1 598 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 16
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              	.LCFI3:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 14, -4
 405              		.cfi_offset 7, -8
 406 0002 84B0     		sub	sp, sp, #16
 407              	.LCFI4:
 408              		.cfi_def_cfa_offset 24
 409 0004 00AF     		add	r7, sp, #0
 410              	.LCFI5:
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
 599:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 600:../FreeRTOS/Source/tasks.c **** 
 601:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 413              		.loc 1 601 0
 414 0008 FFF7FEFF 		bl	vPortEnterCritical
 602:../FreeRTOS/Source/tasks.c **** 		{
 603:../FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 604:../FreeRTOS/Source/tasks.c **** 			deleted. */
 605:../FreeRTOS/Source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 415              		.loc 1 605 0
 416 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 417 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 418 0014 1B68     		ldr	r3, [r3, #0]
 419 0016 7A68     		ldr	r2, [r7, #4]
 420 0018 9A42     		cmp	r2, r3
 421 001a 02D1     		bne	.L11
 606:../FreeRTOS/Source/tasks.c **** 			{
 607:../FreeRTOS/Source/tasks.c **** 				pxTaskToDelete = NULL;
 422              		.loc 1 607 0
 423 001c 4FF00003 		mov	r3, #0
 424 0020 7B60     		str	r3, [r7, #4]
 425              	.L11:
 608:../FreeRTOS/Source/tasks.c **** 			}
 609:../FreeRTOS/Source/tasks.c **** 
 610:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 611:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 426              		.loc 1 611 0
 427 0022 7B68     		ldr	r3, [r7, #4]
 428 0024 002B     		cmp	r3, #0
 429 0026 05D1     		bne	.L12
 430              		.loc 1 611 0 is_stmt 0 discriminator 1
 431 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 432 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 433 0030 1B68     		ldr	r3, [r3, #0]
 434 0032 00E0     		b	.L13
 435              	.L12:
 436              		.loc 1 611 0 discriminator 2
 437 0034 7B68     		ldr	r3, [r7, #4]
 438              	.L13:
 439              		.loc 1 611 0 discriminator 3
 440 0036 FB60     		str	r3, [r7, #12]
 612:../FreeRTOS/Source/tasks.c **** 
 613:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 614:../FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 615:../FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 616:../FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 617:../FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 441              		.loc 1 617 0 is_stmt 1 discriminator 3
 442 0038 FB68     		ldr	r3, [r7, #12]
 443 003a 03F10403 		add	r3, r3, #4
 444 003e 1846     		mov	r0, r3
 445 0040 FFF7FEFF 		bl	vListRemove
 618:../FreeRTOS/Source/tasks.c **** 
 619:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 620:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 446              		.loc 1 620 0 discriminator 3
 447 0044 FB68     		ldr	r3, [r7, #12]
 448 0046 9B6A     		ldr	r3, [r3, #40]
 449 0048 002B     		cmp	r3, #0
 450 004a 05D0     		beq	.L14
 621:../FreeRTOS/Source/tasks.c **** 			{
 622:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 451              		.loc 1 622 0
 452 004c FB68     		ldr	r3, [r7, #12]
 453 004e 03F11803 		add	r3, r3, #24
 454 0052 1846     		mov	r0, r3
 455 0054 FFF7FEFF 		bl	vListRemove
 456              	.L14:
 623:../FreeRTOS/Source/tasks.c **** 			}
 624:../FreeRTOS/Source/tasks.c **** 
 625:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 457              		.loc 1 625 0
 458 0058 FB68     		ldr	r3, [r7, #12]
 459 005a 03F10403 		add	r3, r3, #4
 460 005e 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 461 0062 C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 462 0066 1946     		mov	r1, r3
 463 0068 FFF7FEFF 		bl	vListInsertEnd
 626:../FreeRTOS/Source/tasks.c **** 
 627:../FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 628:../FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 629:../FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 630:../FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 464              		.loc 1 630 0
 465 006c 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 466 0070 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 467 0074 1B68     		ldr	r3, [r3, #0]
 468 0076 03F10102 		add	r2, r3, #1
 469 007a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 470 007e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 471 0082 1A60     		str	r2, [r3, #0]
 631:../FreeRTOS/Source/tasks.c **** 
 632:../FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 633:../FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 634:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 472              		.loc 1 634 0
 473 0084 40F20003 		movw	r3, #:lower16:uxTaskNumber
 474 0088 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 475 008c 1B68     		ldr	r3, [r3, #0]
 476 008e 03F10102 		add	r2, r3, #1
 477 0092 40F20003 		movw	r3, #:lower16:uxTaskNumber
 478 0096 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 479 009a 1A60     		str	r2, [r3, #0]
 635:../FreeRTOS/Source/tasks.c **** 
 636:../FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 637:../FreeRTOS/Source/tasks.c **** 		}
 638:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 480              		.loc 1 638 0
 481 009c FFF7FEFF 		bl	vPortExitCritical
 639:../FreeRTOS/Source/tasks.c **** 
 640:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 641:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 482              		.loc 1 641 0
 483 00a0 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 484 00a4 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 485 00a8 1B68     		ldr	r3, [r3, #0]
 486 00aa 002B     		cmp	r3, #0
 487 00ac 04D0     		beq	.L10
 642:../FreeRTOS/Source/tasks.c **** 		{
 643:../FreeRTOS/Source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 488              		.loc 1 643 0
 489 00ae 7B68     		ldr	r3, [r7, #4]
 490 00b0 002B     		cmp	r3, #0
 491 00b2 01D1     		bne	.L10
 644:../FreeRTOS/Source/tasks.c **** 			{
 645:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 492              		.loc 1 645 0
 493 00b4 FFF7FEFF 		bl	vPortYieldFromISR
 494              	.L10:
 646:../FreeRTOS/Source/tasks.c **** 			}
 647:../FreeRTOS/Source/tasks.c **** 		}
 648:../FreeRTOS/Source/tasks.c **** 	}
 495              		.loc 1 648 0
 496 00b8 07F11007 		add	r7, r7, #16
 497 00bc BD46     		mov	sp, r7
 498 00be 80BD     		pop	{r7, pc}
 499              		.cfi_endproc
 500              	.LFE111:
 502              		.section	.text.vTaskDelayUntil,"ax",%progbits
 503              		.align	2
 504              		.global	vTaskDelayUntil
 505              		.thumb
 506              		.thumb_func
 508              	vTaskDelayUntil:
 509              	.LFB112:
 649:../FreeRTOS/Source/tasks.c **** 
 650:../FreeRTOS/Source/tasks.c **** #endif
 651:../FreeRTOS/Source/tasks.c **** 
 652:../FreeRTOS/Source/tasks.c **** 
 653:../FreeRTOS/Source/tasks.c **** 
 654:../FreeRTOS/Source/tasks.c **** 
 655:../FreeRTOS/Source/tasks.c **** 
 656:../FreeRTOS/Source/tasks.c **** 
 657:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 658:../FreeRTOS/Source/tasks.c ****  * TASK CONTROL API documented in task.h
 659:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 660:../FreeRTOS/Source/tasks.c **** 
 661:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 662:../FreeRTOS/Source/tasks.c **** 
 663:../FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 664:../FreeRTOS/Source/tasks.c **** 	{
 510              		.loc 1 664 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 24
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514 0000 80B5     		push	{r7, lr}
 515              	.LCFI6:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 14, -4
 518              		.cfi_offset 7, -8
 519 0002 86B0     		sub	sp, sp, #24
 520              	.LCFI7:
 521              		.cfi_def_cfa_offset 32
 522 0004 00AF     		add	r7, sp, #0
 523              	.LCFI8:
 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 526 0008 3960     		str	r1, [r7, #0]
 665:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 666:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 527              		.loc 1 666 0
 528 000a 4FF00003 		mov	r3, #0
 529 000e 7B61     		str	r3, [r7, #20]
 667:../FreeRTOS/Source/tasks.c **** 
 668:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 669:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 670:../FreeRTOS/Source/tasks.c **** 
 671:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 530              		.loc 1 671 0
 531 0010 FFF7FEFF 		bl	vTaskSuspendAll
 672:../FreeRTOS/Source/tasks.c **** 		{
 673:../FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 674:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 532              		.loc 1 674 0
 533 0014 7B68     		ldr	r3, [r7, #4]
 534 0016 1A68     		ldr	r2, [r3, #0]
 535 0018 3B68     		ldr	r3, [r7, #0]
 536 001a D318     		adds	r3, r2, r3
 537 001c 3B61     		str	r3, [r7, #16]
 675:../FreeRTOS/Source/tasks.c **** 
 676:../FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 538              		.loc 1 676 0
 539 001e 7B68     		ldr	r3, [r7, #4]
 540 0020 1A68     		ldr	r2, [r3, #0]
 541 0022 40F20003 		movw	r3, #:lower16:xTickCount
 542 0026 C0F20003 		movt	r3, #:upper16:xTickCount
 543 002a 1B68     		ldr	r3, [r3, #0]
 544 002c 9A42     		cmp	r2, r3
 545 002e 10D9     		bls	.L17
 677:../FreeRTOS/Source/tasks.c **** 			{
 678:../FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 679:../FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 680:../FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 681:../FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 682:../FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 683:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 546              		.loc 1 683 0
 547 0030 7B68     		ldr	r3, [r7, #4]
 548 0032 1A68     		ldr	r2, [r3, #0]
 549 0034 3B69     		ldr	r3, [r7, #16]
 550 0036 9A42     		cmp	r2, r3
 551 0038 1BD9     		bls	.L18
 552              		.loc 1 683 0 is_stmt 0 discriminator 1
 553 003a 40F20003 		movw	r3, #:lower16:xTickCount
 554 003e C0F20003 		movt	r3, #:upper16:xTickCount
 555 0042 1B68     		ldr	r3, [r3, #0]
 556 0044 3A69     		ldr	r2, [r7, #16]
 557 0046 9A42     		cmp	r2, r3
 558 0048 13D9     		bls	.L18
 684:../FreeRTOS/Source/tasks.c **** 				{
 685:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 559              		.loc 1 685 0 is_stmt 1
 560 004a 4FF00103 		mov	r3, #1
 561 004e 7B61     		str	r3, [r7, #20]
 562 0050 0FE0     		b	.L18
 563              	.L17:
 686:../FreeRTOS/Source/tasks.c **** 				}
 687:../FreeRTOS/Source/tasks.c **** 			}
 688:../FreeRTOS/Source/tasks.c **** 			else
 689:../FreeRTOS/Source/tasks.c **** 			{
 690:../FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 691:../FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 692:../FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 693:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 564              		.loc 1 693 0
 565 0052 7B68     		ldr	r3, [r7, #4]
 566 0054 1A68     		ldr	r2, [r3, #0]
 567 0056 3B69     		ldr	r3, [r7, #16]
 568 0058 9A42     		cmp	r2, r3
 569 005a 07D8     		bhi	.L19
 570              		.loc 1 693 0 is_stmt 0 discriminator 1
 571 005c 40F20003 		movw	r3, #:lower16:xTickCount
 572 0060 C0F20003 		movt	r3, #:upper16:xTickCount
 573 0064 1B68     		ldr	r3, [r3, #0]
 574 0066 3A69     		ldr	r2, [r7, #16]
 575 0068 9A42     		cmp	r2, r3
 576 006a 02D9     		bls	.L18
 577              	.L19:
 694:../FreeRTOS/Source/tasks.c **** 				{
 695:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 578              		.loc 1 695 0 is_stmt 1
 579 006c 4FF00103 		mov	r3, #1
 580 0070 7B61     		str	r3, [r7, #20]
 581              	.L18:
 696:../FreeRTOS/Source/tasks.c **** 				}
 697:../FreeRTOS/Source/tasks.c **** 			}
 698:../FreeRTOS/Source/tasks.c **** 
 699:../FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 700:../FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 582              		.loc 1 700 0
 583 0072 7B68     		ldr	r3, [r7, #4]
 584 0074 3A69     		ldr	r2, [r7, #16]
 585 0076 1A60     		str	r2, [r3, #0]
 701:../FreeRTOS/Source/tasks.c **** 
 702:../FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 586              		.loc 1 702 0
 587 0078 7B69     		ldr	r3, [r7, #20]
 588 007a 002B     		cmp	r3, #0
 589 007c 0CD0     		beq	.L20
 703:../FreeRTOS/Source/tasks.c **** 			{
 704:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 705:../FreeRTOS/Source/tasks.c **** 
 706:../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 707:../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 708:../FreeRTOS/Source/tasks.c **** 				both lists. */
 709:../FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 590              		.loc 1 709 0
 591 007e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 592 0082 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 593 0086 1B68     		ldr	r3, [r3, #0]
 594 0088 03F10403 		add	r3, r3, #4
 595 008c 1846     		mov	r0, r3
 596 008e FFF7FEFF 		bl	vListRemove
 710:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 597              		.loc 1 710 0
 598 0092 3869     		ldr	r0, [r7, #16]
 599 0094 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 600              	.L20:
 711:../FreeRTOS/Source/tasks.c **** 			}
 712:../FreeRTOS/Source/tasks.c **** 		}
 713:../FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 601              		.loc 1 713 0
 602 0098 FFF7FEFF 		bl	xTaskResumeAll
 603 009c 0346     		mov	r3, r0
 604 009e FB60     		str	r3, [r7, #12]
 714:../FreeRTOS/Source/tasks.c **** 
 715:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 716:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 717:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 605              		.loc 1 717 0
 606 00a0 FB68     		ldr	r3, [r7, #12]
 607 00a2 002B     		cmp	r3, #0
 608 00a4 01D1     		bne	.L16
 718:../FreeRTOS/Source/tasks.c **** 		{
 719:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 609              		.loc 1 719 0
 610 00a6 FFF7FEFF 		bl	vPortYieldFromISR
 611              	.L16:
 720:../FreeRTOS/Source/tasks.c **** 		}
 721:../FreeRTOS/Source/tasks.c **** 	}
 612              		.loc 1 721 0
 613 00aa 07F11807 		add	r7, r7, #24
 614 00ae BD46     		mov	sp, r7
 615 00b0 80BD     		pop	{r7, pc}
 616              		.cfi_endproc
 617              	.LFE112:
 619 00b2 00BF     		.section	.text.vTaskDelay,"ax",%progbits
 620              		.align	2
 621              		.global	vTaskDelay
 622              		.thumb
 623              		.thumb_func
 625              	vTaskDelay:
 626              	.LFB113:
 722:../FreeRTOS/Source/tasks.c **** 
 723:../FreeRTOS/Source/tasks.c **** #endif
 724:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 725:../FreeRTOS/Source/tasks.c **** 
 726:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 727:../FreeRTOS/Source/tasks.c **** 
 728:../FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 729:../FreeRTOS/Source/tasks.c **** 	{
 627              		.loc 1 729 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 16
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 0000 80B5     		push	{r7, lr}
 632              	.LCFI9:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 14, -4
 635              		.cfi_offset 7, -8
 636 0002 84B0     		sub	sp, sp, #16
 637              	.LCFI10:
 638              		.cfi_def_cfa_offset 24
 639 0004 00AF     		add	r7, sp, #0
 640              	.LCFI11:
 641              		.cfi_def_cfa_register 7
 642 0006 7860     		str	r0, [r7, #4]
 730:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 731:../FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 643              		.loc 1 731 0
 644 0008 4FF00003 		mov	r3, #0
 645 000c FB60     		str	r3, [r7, #12]
 732:../FreeRTOS/Source/tasks.c **** 
 733:../FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 734:../FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 646              		.loc 1 734 0
 647 000e 7B68     		ldr	r3, [r7, #4]
 648 0010 002B     		cmp	r3, #0
 649 0012 1AD0     		beq	.L23
 735:../FreeRTOS/Source/tasks.c **** 		{
 736:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 650              		.loc 1 736 0
 651 0014 FFF7FEFF 		bl	vTaskSuspendAll
 737:../FreeRTOS/Source/tasks.c **** 			{
 738:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 739:../FreeRTOS/Source/tasks.c **** 
 740:../FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 741:../FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 742:../FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 743:../FreeRTOS/Source/tasks.c **** 				is resumed.
 744:../FreeRTOS/Source/tasks.c **** 
 745:../FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 746:../FreeRTOS/Source/tasks.c **** 				executing task. */
 747:../FreeRTOS/Source/tasks.c **** 
 748:../FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 749:../FreeRTOS/Source/tasks.c **** 				not a problem. */
 750:../FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 652              		.loc 1 750 0
 653 0018 40F20003 		movw	r3, #:lower16:xTickCount
 654 001c C0F20003 		movt	r3, #:upper16:xTickCount
 655 0020 1A68     		ldr	r2, [r3, #0]
 656 0022 7B68     		ldr	r3, [r7, #4]
 657 0024 D318     		adds	r3, r2, r3
 658 0026 BB60     		str	r3, [r7, #8]
 751:../FreeRTOS/Source/tasks.c **** 
 752:../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 753:../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 754:../FreeRTOS/Source/tasks.c **** 				both lists. */
 755:../FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 659              		.loc 1 755 0
 660 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 661 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 662 0030 1B68     		ldr	r3, [r3, #0]
 663 0032 03F10403 		add	r3, r3, #4
 664 0036 1846     		mov	r0, r3
 665 0038 FFF7FEFF 		bl	vListRemove
 756:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 666              		.loc 1 756 0
 667 003c B868     		ldr	r0, [r7, #8]
 668 003e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 757:../FreeRTOS/Source/tasks.c **** 			}
 758:../FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 669              		.loc 1 758 0
 670 0042 FFF7FEFF 		bl	xTaskResumeAll
 671 0046 0346     		mov	r3, r0
 672 0048 FB60     		str	r3, [r7, #12]
 673              	.L23:
 759:../FreeRTOS/Source/tasks.c **** 		}
 760:../FreeRTOS/Source/tasks.c **** 
 761:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 762:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 763:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 674              		.loc 1 763 0
 675 004a FB68     		ldr	r3, [r7, #12]
 676 004c 002B     		cmp	r3, #0
 677 004e 01D1     		bne	.L22
 764:../FreeRTOS/Source/tasks.c **** 		{
 765:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 678              		.loc 1 765 0
 679 0050 FFF7FEFF 		bl	vPortYieldFromISR
 680              	.L22:
 766:../FreeRTOS/Source/tasks.c **** 		}
 767:../FreeRTOS/Source/tasks.c **** 	}
 681              		.loc 1 767 0
 682 0054 07F11007 		add	r7, r7, #16
 683 0058 BD46     		mov	sp, r7
 684 005a 80BD     		pop	{r7, pc}
 685              		.cfi_endproc
 686              	.LFE113:
 688              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 689              		.align	2
 690              		.global	uxTaskPriorityGet
 691              		.thumb
 692              		.thumb_func
 694              	uxTaskPriorityGet:
 695              	.LFB114:
 768:../FreeRTOS/Source/tasks.c **** 
 769:../FreeRTOS/Source/tasks.c **** #endif
 770:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 771:../FreeRTOS/Source/tasks.c **** 
 772:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 773:../FreeRTOS/Source/tasks.c **** 
 774:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 775:../FreeRTOS/Source/tasks.c **** 	{
 696              		.loc 1 775 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 16
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700 0000 80B5     		push	{r7, lr}
 701              	.LCFI12:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 14, -4
 704              		.cfi_offset 7, -8
 705 0002 84B0     		sub	sp, sp, #16
 706              	.LCFI13:
 707              		.cfi_def_cfa_offset 24
 708 0004 00AF     		add	r7, sp, #0
 709              	.LCFI14:
 710              		.cfi_def_cfa_register 7
 711 0006 7860     		str	r0, [r7, #4]
 776:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 777:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 778:../FreeRTOS/Source/tasks.c **** 
 779:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 712              		.loc 1 779 0
 713 0008 FFF7FEFF 		bl	vPortEnterCritical
 780:../FreeRTOS/Source/tasks.c **** 		{
 781:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 782:../FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 783:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 714              		.loc 1 783 0
 715 000c 7B68     		ldr	r3, [r7, #4]
 716 000e 002B     		cmp	r3, #0
 717 0010 05D1     		bne	.L26
 718              		.loc 1 783 0 is_stmt 0 discriminator 1
 719 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 720 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 721 001a 1B68     		ldr	r3, [r3, #0]
 722 001c 00E0     		b	.L27
 723              	.L26:
 724              		.loc 1 783 0 discriminator 2
 725 001e 7B68     		ldr	r3, [r7, #4]
 726              	.L27:
 727              		.loc 1 783 0 discriminator 3
 728 0020 FB60     		str	r3, [r7, #12]
 784:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 729              		.loc 1 784 0 is_stmt 1 discriminator 3
 730 0022 FB68     		ldr	r3, [r7, #12]
 731 0024 DB6A     		ldr	r3, [r3, #44]
 732 0026 BB60     		str	r3, [r7, #8]
 785:../FreeRTOS/Source/tasks.c **** 		}
 786:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 733              		.loc 1 786 0 discriminator 3
 734 0028 FFF7FEFF 		bl	vPortExitCritical
 787:../FreeRTOS/Source/tasks.c **** 
 788:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 735              		.loc 1 788 0 discriminator 3
 736 002c BB68     		ldr	r3, [r7, #8]
 789:../FreeRTOS/Source/tasks.c **** 	}
 737              		.loc 1 789 0 discriminator 3
 738 002e 1846     		mov	r0, r3
 739 0030 07F11007 		add	r7, r7, #16
 740 0034 BD46     		mov	sp, r7
 741 0036 80BD     		pop	{r7, pc}
 742              		.cfi_endproc
 743              	.LFE114:
 745              		.section	.text.vTaskPrioritySet,"ax",%progbits
 746              		.align	2
 747              		.global	vTaskPrioritySet
 748              		.thumb
 749              		.thumb_func
 751              	vTaskPrioritySet:
 752              	.LFB115:
 790:../FreeRTOS/Source/tasks.c **** 
 791:../FreeRTOS/Source/tasks.c **** #endif
 792:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 793:../FreeRTOS/Source/tasks.c **** 
 794:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 795:../FreeRTOS/Source/tasks.c **** 
 796:../FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 797:../FreeRTOS/Source/tasks.c **** 	{
 753              		.loc 1 797 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 24
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757 0000 80B5     		push	{r7, lr}
 758              	.LCFI15:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 14, -4
 761              		.cfi_offset 7, -8
 762 0002 86B0     		sub	sp, sp, #24
 763              	.LCFI16:
 764              		.cfi_def_cfa_offset 32
 765 0004 00AF     		add	r7, sp, #0
 766              	.LCFI17:
 767              		.cfi_def_cfa_register 7
 768 0006 7860     		str	r0, [r7, #4]
 769 0008 3960     		str	r1, [r7, #0]
 798:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 799:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority;
 800:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 770              		.loc 1 800 0
 771 000a 4FF00003 		mov	r3, #0
 772 000e 7B61     		str	r3, [r7, #20]
 801:../FreeRTOS/Source/tasks.c **** 
 802:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 803:../FreeRTOS/Source/tasks.c **** 
 804:../FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 805:../FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 773              		.loc 1 805 0
 774 0010 3B68     		ldr	r3, [r7, #0]
 775 0012 042B     		cmp	r3, #4
 776 0014 02D9     		bls	.L29
 806:../FreeRTOS/Source/tasks.c **** 		{
 807:../FreeRTOS/Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 777              		.loc 1 807 0
 778 0016 4FF00403 		mov	r3, #4
 779 001a 3B60     		str	r3, [r7, #0]
 780              	.L29:
 808:../FreeRTOS/Source/tasks.c **** 		}
 809:../FreeRTOS/Source/tasks.c **** 
 810:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 781              		.loc 1 810 0
 782 001c FFF7FEFF 		bl	vPortEnterCritical
 811:../FreeRTOS/Source/tasks.c **** 		{
 812:../FreeRTOS/Source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 783              		.loc 1 812 0
 784 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 785 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 786 0028 1B68     		ldr	r3, [r3, #0]
 787 002a 7A68     		ldr	r2, [r7, #4]
 788 002c 9A42     		cmp	r2, r3
 789 002e 02D1     		bne	.L30
 813:../FreeRTOS/Source/tasks.c **** 			{
 814:../FreeRTOS/Source/tasks.c **** 				pxTask = NULL;
 790              		.loc 1 814 0
 791 0030 4FF00003 		mov	r3, #0
 792 0034 7B60     		str	r3, [r7, #4]
 793              	.L30:
 815:../FreeRTOS/Source/tasks.c **** 			}
 816:../FreeRTOS/Source/tasks.c **** 
 817:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 818:../FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 819:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 794              		.loc 1 819 0
 795 0036 7B68     		ldr	r3, [r7, #4]
 796 0038 002B     		cmp	r3, #0
 797 003a 05D1     		bne	.L31
 798              		.loc 1 819 0 is_stmt 0 discriminator 1
 799 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 800 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 801 0044 1B68     		ldr	r3, [r3, #0]
 802 0046 00E0     		b	.L32
 803              	.L31:
 804              		.loc 1 819 0 discriminator 2
 805 0048 7B68     		ldr	r3, [r7, #4]
 806              	.L32:
 807              		.loc 1 819 0 discriminator 3
 808 004a 3B61     		str	r3, [r7, #16]
 820:../FreeRTOS/Source/tasks.c **** 
 821:../FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 822:../FreeRTOS/Source/tasks.c **** 
 823:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 824:../FreeRTOS/Source/tasks.c **** 			{
 825:../FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 809              		.loc 1 825 0 is_stmt 1 discriminator 3
 810 004c 3B69     		ldr	r3, [r7, #16]
 811 004e 5B6C     		ldr	r3, [r3, #68]
 812 0050 FB60     		str	r3, [r7, #12]
 826:../FreeRTOS/Source/tasks.c **** 			}
 827:../FreeRTOS/Source/tasks.c **** 			#else
 828:../FreeRTOS/Source/tasks.c **** 			{
 829:../FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 830:../FreeRTOS/Source/tasks.c **** 			}
 831:../FreeRTOS/Source/tasks.c **** 			#endif
 832:../FreeRTOS/Source/tasks.c **** 
 833:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 813              		.loc 1 833 0 discriminator 3
 814 0052 FA68     		ldr	r2, [r7, #12]
 815 0054 3B68     		ldr	r3, [r7, #0]
 816 0056 9A42     		cmp	r2, r3
 817 0058 62D0     		beq	.L33
 834:../FreeRTOS/Source/tasks.c **** 			{
 835:../FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 836:../FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 837:../FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 818              		.loc 1 837 0
 819 005a 3A68     		ldr	r2, [r7, #0]
 820 005c FB68     		ldr	r3, [r7, #12]
 821 005e 9A42     		cmp	r2, r3
 822 0060 06D9     		bls	.L34
 838:../FreeRTOS/Source/tasks.c **** 				{
 839:../FreeRTOS/Source/tasks.c **** 					if( pxTask != NULL )
 823              		.loc 1 839 0
 824 0062 7B68     		ldr	r3, [r7, #4]
 825 0064 002B     		cmp	r3, #0
 826 0066 09D0     		beq	.L35
 840:../FreeRTOS/Source/tasks.c **** 					{
 841:../FreeRTOS/Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 842:../FreeRTOS/Source/tasks.c **** 						were raising the priority of the currently running task
 843:../FreeRTOS/Source/tasks.c **** 						there would be no need to switch as it must have already
 844:../FreeRTOS/Source/tasks.c **** 						been the highest priority task. */
 845:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 827              		.loc 1 845 0
 828 0068 4FF00103 		mov	r3, #1
 829 006c 7B61     		str	r3, [r7, #20]
 830 006e 05E0     		b	.L35
 831              	.L34:
 846:../FreeRTOS/Source/tasks.c **** 					}
 847:../FreeRTOS/Source/tasks.c **** 				}
 848:../FreeRTOS/Source/tasks.c **** 				else if( pxTask == NULL )
 832              		.loc 1 848 0
 833 0070 7B68     		ldr	r3, [r7, #4]
 834 0072 002B     		cmp	r3, #0
 835 0074 02D1     		bne	.L35
 849:../FreeRTOS/Source/tasks.c **** 				{
 850:../FreeRTOS/Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 851:../FreeRTOS/Source/tasks.c **** 					task of higher priority that is ready to execute. */
 852:../FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 836              		.loc 1 852 0
 837 0076 4FF00103 		mov	r3, #1
 838 007a 7B61     		str	r3, [r7, #20]
 839              	.L35:
 853:../FreeRTOS/Source/tasks.c **** 				}
 854:../FreeRTOS/Source/tasks.c **** 
 855:../FreeRTOS/Source/tasks.c **** 
 856:../FreeRTOS/Source/tasks.c **** 
 857:../FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 858:../FreeRTOS/Source/tasks.c **** 				{
 859:../FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 860:../FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 861:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 840              		.loc 1 861 0
 841 007c 3B69     		ldr	r3, [r7, #16]
 842 007e 5A6C     		ldr	r2, [r3, #68]
 843 0080 3B69     		ldr	r3, [r7, #16]
 844 0082 DB6A     		ldr	r3, [r3, #44]
 845 0084 9A42     		cmp	r2, r3
 846 0086 02D1     		bne	.L36
 862:../FreeRTOS/Source/tasks.c **** 					{
 863:../FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 847              		.loc 1 863 0
 848 0088 3B69     		ldr	r3, [r7, #16]
 849 008a 3A68     		ldr	r2, [r7, #0]
 850 008c DA62     		str	r2, [r3, #44]
 851              	.L36:
 864:../FreeRTOS/Source/tasks.c **** 					}
 865:../FreeRTOS/Source/tasks.c **** 
 866:../FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
 867:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 852              		.loc 1 867 0
 853 008e 3B69     		ldr	r3, [r7, #16]
 854 0090 3A68     		ldr	r2, [r7, #0]
 855 0092 5A64     		str	r2, [r3, #68]
 868:../FreeRTOS/Source/tasks.c **** 				}
 869:../FreeRTOS/Source/tasks.c **** 				#else
 870:../FreeRTOS/Source/tasks.c **** 				{
 871:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 872:../FreeRTOS/Source/tasks.c **** 				}
 873:../FreeRTOS/Source/tasks.c **** 				#endif
 874:../FreeRTOS/Source/tasks.c **** 
 875:../FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 856              		.loc 1 875 0
 857 0094 3B68     		ldr	r3, [r7, #0]
 858 0096 C3F10502 		rsb	r2, r3, #5
 859 009a 3B69     		ldr	r3, [r7, #16]
 860 009c 9A61     		str	r2, [r3, #24]
 876:../FreeRTOS/Source/tasks.c **** 
 877:../FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 878:../FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
 879:../FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 880:../FreeRTOS/Source/tasks.c **** 				in the queue appropriate to its new priority. */
 881:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 861              		.loc 1 881 0
 862 009e 3B69     		ldr	r3, [r7, #16]
 863 00a0 5969     		ldr	r1, [r3, #20]
 864 00a2 FA68     		ldr	r2, [r7, #12]
 865 00a4 1346     		mov	r3, r2
 866 00a6 4FEA8303 		lsl	r3, r3, #2
 867 00aa 9B18     		adds	r3, r3, r2
 868 00ac 4FEA8303 		lsl	r3, r3, #2
 869 00b0 1A46     		mov	r2, r3
 870 00b2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 871 00b6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 872 00ba D318     		adds	r3, r2, r3
 873 00bc 9942     		cmp	r1, r3
 874 00be 2AD1     		bne	.L37
 882:../FreeRTOS/Source/tasks.c **** 				{
 883:../FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 884:../FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 885:../FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
 886:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 875              		.loc 1 886 0
 876 00c0 3B69     		ldr	r3, [r7, #16]
 877 00c2 03F10403 		add	r3, r3, #4
 878 00c6 1846     		mov	r0, r3
 879 00c8 FFF7FEFF 		bl	vListRemove
 887:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 880              		.loc 1 887 0
 881 00cc 3B69     		ldr	r3, [r7, #16]
 882 00ce DA6A     		ldr	r2, [r3, #44]
 883 00d0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 884 00d4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 885 00d8 1B68     		ldr	r3, [r3, #0]
 886 00da 9A42     		cmp	r2, r3
 887 00dc 06D9     		bls	.L38
 888              		.loc 1 887 0 is_stmt 0 discriminator 1
 889 00de 3B69     		ldr	r3, [r7, #16]
 890 00e0 DA6A     		ldr	r2, [r3, #44]
 891 00e2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 892 00e6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 893 00ea 1A60     		str	r2, [r3, #0]
 894              	.L38:
 895              		.loc 1 887 0 discriminator 2
 896 00ec 3B69     		ldr	r3, [r7, #16]
 897 00ee DA6A     		ldr	r2, [r3, #44]
 898 00f0 1346     		mov	r3, r2
 899 00f2 4FEA8303 		lsl	r3, r3, #2
 900 00f6 9B18     		adds	r3, r3, r2
 901 00f8 4FEA8303 		lsl	r3, r3, #2
 902 00fc 1A46     		mov	r2, r3
 903 00fe 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 904 0102 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 905 0106 D218     		adds	r2, r2, r3
 906 0108 3B69     		ldr	r3, [r7, #16]
 907 010a 03F10403 		add	r3, r3, #4
 908 010e 1046     		mov	r0, r2
 909 0110 1946     		mov	r1, r3
 910 0112 FFF7FEFF 		bl	vListInsertEnd
 911              	.L37:
 888:../FreeRTOS/Source/tasks.c **** 				}
 889:../FreeRTOS/Source/tasks.c **** 
 890:../FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 912              		.loc 1 890 0 is_stmt 1
 913 0116 7B69     		ldr	r3, [r7, #20]
 914 0118 012B     		cmp	r3, #1
 915 011a 01D1     		bne	.L33
 891:../FreeRTOS/Source/tasks.c **** 				{
 892:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 916              		.loc 1 892 0
 917 011c FFF7FEFF 		bl	vPortYieldFromISR
 918              	.L33:
 893:../FreeRTOS/Source/tasks.c **** 				}
 894:../FreeRTOS/Source/tasks.c **** 			}
 895:../FreeRTOS/Source/tasks.c **** 		}
 896:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 919              		.loc 1 896 0
 920 0120 FFF7FEFF 		bl	vPortExitCritical
 897:../FreeRTOS/Source/tasks.c **** 	}
 921              		.loc 1 897 0
 922 0124 07F11807 		add	r7, r7, #24
 923 0128 BD46     		mov	sp, r7
 924 012a 80BD     		pop	{r7, pc}
 925              		.cfi_endproc
 926              	.LFE115:
 928              		.section	.text.vTaskSuspend,"ax",%progbits
 929              		.align	2
 930              		.global	vTaskSuspend
 931              		.thumb
 932              		.thumb_func
 934              	vTaskSuspend:
 935              	.LFB116:
 898:../FreeRTOS/Source/tasks.c **** 
 899:../FreeRTOS/Source/tasks.c **** #endif
 900:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 901:../FreeRTOS/Source/tasks.c **** 
 902:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 903:../FreeRTOS/Source/tasks.c **** 
 904:../FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 905:../FreeRTOS/Source/tasks.c **** 	{
 936              		.loc 1 905 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 16
 939              		@ frame_needed = 1, uses_anonymous_args = 0
 940 0000 80B5     		push	{r7, lr}
 941              	.LCFI18:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 14, -4
 944              		.cfi_offset 7, -8
 945 0002 84B0     		sub	sp, sp, #16
 946              	.LCFI19:
 947              		.cfi_def_cfa_offset 24
 948 0004 00AF     		add	r7, sp, #0
 949              	.LCFI20:
 950              		.cfi_def_cfa_register 7
 951 0006 7860     		str	r0, [r7, #4]
 906:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 907:../FreeRTOS/Source/tasks.c **** 
 908:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 952              		.loc 1 908 0
 953 0008 FFF7FEFF 		bl	vPortEnterCritical
 909:../FreeRTOS/Source/tasks.c **** 		{
 910:../FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 911:../FreeRTOS/Source/tasks.c **** 			suspended. */
 912:../FreeRTOS/Source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 954              		.loc 1 912 0
 955 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 956 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 957 0014 1B68     		ldr	r3, [r3, #0]
 958 0016 7A68     		ldr	r2, [r7, #4]
 959 0018 9A42     		cmp	r2, r3
 960 001a 02D1     		bne	.L40
 913:../FreeRTOS/Source/tasks.c **** 			{
 914:../FreeRTOS/Source/tasks.c **** 				pxTaskToSuspend = NULL;
 961              		.loc 1 914 0
 962 001c 4FF00003 		mov	r3, #0
 963 0020 7B60     		str	r3, [r7, #4]
 964              	.L40:
 915:../FreeRTOS/Source/tasks.c **** 			}
 916:../FreeRTOS/Source/tasks.c **** 
 917:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 918:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 965              		.loc 1 918 0
 966 0022 7B68     		ldr	r3, [r7, #4]
 967 0024 002B     		cmp	r3, #0
 968 0026 05D1     		bne	.L41
 969              		.loc 1 918 0 is_stmt 0 discriminator 1
 970 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 971 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 972 0030 1B68     		ldr	r3, [r3, #0]
 973 0032 00E0     		b	.L42
 974              	.L41:
 975              		.loc 1 918 0 discriminator 2
 976 0034 7B68     		ldr	r3, [r7, #4]
 977              	.L42:
 978              		.loc 1 918 0 discriminator 3
 979 0036 FB60     		str	r3, [r7, #12]
 919:../FreeRTOS/Source/tasks.c **** 
 920:../FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 921:../FreeRTOS/Source/tasks.c **** 
 922:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 923:../FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 980              		.loc 1 923 0 is_stmt 1 discriminator 3
 981 0038 FB68     		ldr	r3, [r7, #12]
 982 003a 03F10403 		add	r3, r3, #4
 983 003e 1846     		mov	r0, r3
 984 0040 FFF7FEFF 		bl	vListRemove
 924:../FreeRTOS/Source/tasks.c **** 
 925:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 926:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 985              		.loc 1 926 0 discriminator 3
 986 0044 FB68     		ldr	r3, [r7, #12]
 987 0046 9B6A     		ldr	r3, [r3, #40]
 988 0048 002B     		cmp	r3, #0
 989 004a 05D0     		beq	.L43
 927:../FreeRTOS/Source/tasks.c **** 			{
 928:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 990              		.loc 1 928 0
 991 004c FB68     		ldr	r3, [r7, #12]
 992 004e 03F11803 		add	r3, r3, #24
 993 0052 1846     		mov	r0, r3
 994 0054 FFF7FEFF 		bl	vListRemove
 995              	.L43:
 929:../FreeRTOS/Source/tasks.c **** 			}
 930:../FreeRTOS/Source/tasks.c **** 
 931:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 996              		.loc 1 931 0
 997 0058 FB68     		ldr	r3, [r7, #12]
 998 005a 03F10403 		add	r3, r3, #4
 999 005e 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 1000 0062 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 1001 0066 1946     		mov	r1, r3
 1002 0068 FFF7FEFF 		bl	vListInsertEnd
 932:../FreeRTOS/Source/tasks.c **** 		}
 933:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1003              		.loc 1 933 0
 1004 006c FFF7FEFF 		bl	vPortExitCritical
 934:../FreeRTOS/Source/tasks.c **** 
 935:../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 1005              		.loc 1 935 0
 1006 0070 7B68     		ldr	r3, [r7, #4]
 1007 0072 002B     		cmp	r3, #0
 1008 0074 20D1     		bne	.L39
 936:../FreeRTOS/Source/tasks.c **** 		{
 937:../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1009              		.loc 1 937 0
 1010 0076 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1011 007a C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1012 007e 1B68     		ldr	r3, [r3, #0]
 1013 0080 002B     		cmp	r3, #0
 1014 0082 02D0     		beq	.L45
 938:../FreeRTOS/Source/tasks.c **** 			{
 939:../FreeRTOS/Source/tasks.c **** 				/* We have just suspended the current task. */
 940:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1015              		.loc 1 940 0
 1016 0084 FFF7FEFF 		bl	vPortYieldFromISR
 1017 0088 16E0     		b	.L39
 1018              	.L45:
 941:../FreeRTOS/Source/tasks.c **** 			}
 942:../FreeRTOS/Source/tasks.c **** 			else
 943:../FreeRTOS/Source/tasks.c **** 			{
 944:../FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
 945:../FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
 946:../FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
 947:../FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1019              		.loc 1 947 0
 1020 008a 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1021 008e C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1022 0092 1B68     		ldr	r3, [r3, #0]
 1023 0094 1A46     		mov	r2, r3
 1024 0096 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1025 009a C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1026 009e 1B68     		ldr	r3, [r3, #0]
 1027 00a0 9A42     		cmp	r2, r3
 1028 00a2 07D1     		bne	.L46
 948:../FreeRTOS/Source/tasks.c **** 				{
 949:../FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
 950:../FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
 951:../FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
 952:../FreeRTOS/Source/tasks.c **** 					is. */
 953:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1029              		.loc 1 953 0
 1030 00a4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1031 00a8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1032 00ac 4FF00002 		mov	r2, #0
 1033 00b0 1A60     		str	r2, [r3, #0]
 1034 00b2 01E0     		b	.L39
 1035              	.L46:
 954:../FreeRTOS/Source/tasks.c **** 				}
 955:../FreeRTOS/Source/tasks.c **** 				else
 956:../FreeRTOS/Source/tasks.c **** 				{
 957:../FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1036              		.loc 1 957 0
 1037 00b4 FFF7FEFF 		bl	vTaskSwitchContext
 1038              	.L39:
 958:../FreeRTOS/Source/tasks.c **** 				}
 959:../FreeRTOS/Source/tasks.c **** 			}
 960:../FreeRTOS/Source/tasks.c **** 		}
 961:../FreeRTOS/Source/tasks.c **** 	}
 1039              		.loc 1 961 0
 1040 00b8 07F11007 		add	r7, r7, #16
 1041 00bc BD46     		mov	sp, r7
 1042 00be 80BD     		pop	{r7, pc}
 1043              		.cfi_endproc
 1044              	.LFE116:
 1046              		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 1047              		.align	2
 1048              		.global	xTaskIsTaskSuspended
 1049              		.thumb
 1050              		.thumb_func
 1052              	xTaskIsTaskSuspended:
 1053              	.LFB117:
 962:../FreeRTOS/Source/tasks.c **** 
 963:../FreeRTOS/Source/tasks.c **** #endif
 964:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 965:../FreeRTOS/Source/tasks.c **** 
 966:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 967:../FreeRTOS/Source/tasks.c **** 
 968:../FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 969:../FreeRTOS/Source/tasks.c **** 	{
 1054              		.loc 1 969 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 16
 1057              		@ frame_needed = 1, uses_anonymous_args = 0
 1058              		@ link register save eliminated.
 1059 0000 80B4     		push	{r7}
 1060              	.LCFI21:
 1061              		.cfi_def_cfa_offset 4
 1062              		.cfi_offset 7, -4
 1063 0002 85B0     		sub	sp, sp, #20
 1064              	.LCFI22:
 1065              		.cfi_def_cfa_offset 24
 1066 0004 00AF     		add	r7, sp, #0
 1067              	.LCFI23:
 1068              		.cfi_def_cfa_register 7
 1069 0006 7860     		str	r0, [r7, #4]
 970:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 1070              		.loc 1 970 0
 1071 0008 4FF00003 		mov	r3, #0
 1072 000c FB60     		str	r3, [r7, #12]
 971:../FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 1073              		.loc 1 971 0
 1074 000e 7B68     		ldr	r3, [r7, #4]
 1075 0010 BB60     		str	r3, [r7, #8]
 972:../FreeRTOS/Source/tasks.c **** 
 973:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
 974:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 975:../FreeRTOS/Source/tasks.c **** 
 976:../FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 977:../FreeRTOS/Source/tasks.c **** 		suspended list? */
 978:../FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1076              		.loc 1 978 0
 1077 0012 BB68     		ldr	r3, [r7, #8]
 1078 0014 5A69     		ldr	r2, [r3, #20]
 1079 0016 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1080 001a C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1081 001e 9A42     		cmp	r2, r3
 1082 0020 0ED1     		bne	.L48
 979:../FreeRTOS/Source/tasks.c **** 		{
 980:../FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 981:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 1083              		.loc 1 981 0
 1084 0022 BB68     		ldr	r3, [r7, #8]
 1085 0024 9A6A     		ldr	r2, [r3, #40]
 1086 0026 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1087 002a C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1088 002e 9A42     		cmp	r2, r3
 1089 0030 06D0     		beq	.L48
 982:../FreeRTOS/Source/tasks.c **** 			{
 983:../FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
 984:../FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 985:../FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
 986:../FreeRTOS/Source/tasks.c **** 				specified. */
 987:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 1090              		.loc 1 987 0
 1091 0032 BB68     		ldr	r3, [r7, #8]
 1092 0034 9B6A     		ldr	r3, [r3, #40]
 1093 0036 002B     		cmp	r3, #0
 1094 0038 02D1     		bne	.L48
 988:../FreeRTOS/Source/tasks.c **** 				{
 989:../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1095              		.loc 1 989 0
 1096 003a 4FF00103 		mov	r3, #1
 1097 003e FB60     		str	r3, [r7, #12]
 1098              	.L48:
 990:../FreeRTOS/Source/tasks.c **** 				}
 991:../FreeRTOS/Source/tasks.c **** 			}
 992:../FreeRTOS/Source/tasks.c **** 		}
 993:../FreeRTOS/Source/tasks.c **** 
 994:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 1099              		.loc 1 994 0
 1100 0040 FB68     		ldr	r3, [r7, #12]
 995:../FreeRTOS/Source/tasks.c **** 	}
 1101              		.loc 1 995 0
 1102 0042 1846     		mov	r0, r3
 1103 0044 07F11407 		add	r7, r7, #20
 1104 0048 BD46     		mov	sp, r7
 1105 004a 80BC     		pop	{r7}
 1106 004c 7047     		bx	lr
 1107              		.cfi_endproc
 1108              	.LFE117:
 1110 004e 00BF     		.section	.text.vTaskResume,"ax",%progbits
 1111              		.align	2
 1112              		.global	vTaskResume
 1113              		.thumb
 1114              		.thumb_func
 1116              	vTaskResume:
 1117              	.LFB118:
 996:../FreeRTOS/Source/tasks.c **** 
 997:../FreeRTOS/Source/tasks.c **** #endif
 998:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 999:../FreeRTOS/Source/tasks.c **** 
1000:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1001:../FreeRTOS/Source/tasks.c **** 
1002:../FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1003:../FreeRTOS/Source/tasks.c **** 	{
 1118              		.loc 1 1003 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 16
 1121              		@ frame_needed = 1, uses_anonymous_args = 0
 1122 0000 80B5     		push	{r7, lr}
 1123              	.LCFI24:
 1124              		.cfi_def_cfa_offset 8
 1125              		.cfi_offset 14, -4
 1126              		.cfi_offset 7, -8
 1127 0002 84B0     		sub	sp, sp, #16
 1128              	.LCFI25:
 1129              		.cfi_def_cfa_offset 24
 1130 0004 00AF     		add	r7, sp, #0
 1131              	.LCFI26:
 1132              		.cfi_def_cfa_register 7
 1133 0006 7860     		str	r0, [r7, #4]
1004:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1005:../FreeRTOS/Source/tasks.c **** 
1006:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1007:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1008:../FreeRTOS/Source/tasks.c **** 
1009:../FreeRTOS/Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1010:../FreeRTOS/Source/tasks.c **** 		it in the ready list. */
1011:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1134              		.loc 1 1011 0
 1135 0008 7B68     		ldr	r3, [r7, #4]
 1136 000a FB60     		str	r3, [r7, #12]
1012:../FreeRTOS/Source/tasks.c **** 
1013:../FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1014:../FreeRTOS/Source/tasks.c **** 		currently executing task. */
1015:../FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1137              		.loc 1 1015 0
 1138 000c FB68     		ldr	r3, [r7, #12]
 1139 000e 002B     		cmp	r3, #0
 1140 0010 48D0     		beq	.L49
 1141              		.loc 1 1015 0 is_stmt 0 discriminator 1
 1142 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1143 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1144 001a 1B68     		ldr	r3, [r3, #0]
 1145 001c FA68     		ldr	r2, [r7, #12]
 1146 001e 9A42     		cmp	r2, r3
 1147 0020 40D0     		beq	.L49
1016:../FreeRTOS/Source/tasks.c **** 		{
1017:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1148              		.loc 1 1017 0 is_stmt 1
 1149 0022 FFF7FEFF 		bl	vPortEnterCritical
1018:../FreeRTOS/Source/tasks.c **** 			{
1019:../FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1150              		.loc 1 1019 0
 1151 0026 F868     		ldr	r0, [r7, #12]
 1152 0028 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1153 002c 0346     		mov	r3, r0
 1154 002e 012B     		cmp	r3, #1
 1155 0030 36D1     		bne	.L51
1020:../FreeRTOS/Source/tasks.c **** 				{
1021:../FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1022:../FreeRTOS/Source/tasks.c **** 
1023:../FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1024:../FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1025:../FreeRTOS/Source/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 1156              		.loc 1 1025 0
 1157 0032 FB68     		ldr	r3, [r7, #12]
 1158 0034 03F10403 		add	r3, r3, #4
 1159 0038 1846     		mov	r0, r3
 1160 003a FFF7FEFF 		bl	vListRemove
1026:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1161              		.loc 1 1026 0
 1162 003e FB68     		ldr	r3, [r7, #12]
 1163 0040 DA6A     		ldr	r2, [r3, #44]
 1164 0042 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1165 0046 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1166 004a 1B68     		ldr	r3, [r3, #0]
 1167 004c 9A42     		cmp	r2, r3
 1168 004e 06D9     		bls	.L52
 1169              		.loc 1 1026 0 is_stmt 0 discriminator 1
 1170 0050 FB68     		ldr	r3, [r7, #12]
 1171 0052 DA6A     		ldr	r2, [r3, #44]
 1172 0054 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1173 0058 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1174 005c 1A60     		str	r2, [r3, #0]
 1175              	.L52:
 1176              		.loc 1 1026 0 discriminator 2
 1177 005e FB68     		ldr	r3, [r7, #12]
 1178 0060 DA6A     		ldr	r2, [r3, #44]
 1179 0062 1346     		mov	r3, r2
 1180 0064 4FEA8303 		lsl	r3, r3, #2
 1181 0068 9B18     		adds	r3, r3, r2
 1182 006a 4FEA8303 		lsl	r3, r3, #2
 1183 006e 1A46     		mov	r2, r3
 1184 0070 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1185 0074 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1186 0078 D218     		adds	r2, r2, r3
 1187 007a FB68     		ldr	r3, [r7, #12]
 1188 007c 03F10403 		add	r3, r3, #4
 1189 0080 1046     		mov	r0, r2
 1190 0082 1946     		mov	r1, r3
 1191 0084 FFF7FEFF 		bl	vListInsertEnd
1027:../FreeRTOS/Source/tasks.c **** 
1028:../FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1029:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1192              		.loc 1 1029 0 is_stmt 1 discriminator 2
 1193 0088 FB68     		ldr	r3, [r7, #12]
 1194 008a DA6A     		ldr	r2, [r3, #44]
 1195 008c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1196 0090 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1197 0094 1B68     		ldr	r3, [r3, #0]
 1198 0096 DB6A     		ldr	r3, [r3, #44]
 1199 0098 9A42     		cmp	r2, r3
 1200 009a 01D3     		bcc	.L51
1030:../FreeRTOS/Source/tasks.c **** 					{
1031:../FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1032:../FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1033:../FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 1201              		.loc 1 1033 0
 1202 009c FFF7FEFF 		bl	vPortYieldFromISR
 1203              	.L51:
1034:../FreeRTOS/Source/tasks.c **** 					}
1035:../FreeRTOS/Source/tasks.c **** 				}
1036:../FreeRTOS/Source/tasks.c **** 			}
1037:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1204              		.loc 1 1037 0
 1205 00a0 FFF7FEFF 		bl	vPortExitCritical
 1206              	.L49:
1038:../FreeRTOS/Source/tasks.c **** 		}
1039:../FreeRTOS/Source/tasks.c **** 	}
 1207              		.loc 1 1039 0
 1208 00a4 07F11007 		add	r7, r7, #16
 1209 00a8 BD46     		mov	sp, r7
 1210 00aa 80BD     		pop	{r7, pc}
 1211              		.cfi_endproc
 1212              	.LFE118:
 1214              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1215              		.align	2
 1216              		.global	xTaskResumeFromISR
 1217              		.thumb
 1218              		.thumb_func
 1220              	xTaskResumeFromISR:
 1221              	.LFB119:
1040:../FreeRTOS/Source/tasks.c **** 
1041:../FreeRTOS/Source/tasks.c **** #endif
1042:../FreeRTOS/Source/tasks.c **** 
1043:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1044:../FreeRTOS/Source/tasks.c **** 
1045:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1046:../FreeRTOS/Source/tasks.c **** 
1047:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1048:../FreeRTOS/Source/tasks.c **** 	{
 1222              		.loc 1 1048 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 16
 1225              		@ frame_needed = 1, uses_anonymous_args = 0
 1226 0000 80B5     		push	{r7, lr}
 1227              	.LCFI27:
 1228              		.cfi_def_cfa_offset 8
 1229              		.cfi_offset 14, -4
 1230              		.cfi_offset 7, -8
 1231 0002 84B0     		sub	sp, sp, #16
 1232              	.LCFI28:
 1233              		.cfi_def_cfa_offset 24
 1234 0004 00AF     		add	r7, sp, #0
 1235              	.LCFI29:
 1236              		.cfi_def_cfa_register 7
 1237 0006 7860     		str	r0, [r7, #4]
1049:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1238              		.loc 1 1049 0
 1239 0008 4FF00003 		mov	r3, #0
 1240 000c FB60     		str	r3, [r7, #12]
1050:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1051:../FreeRTOS/Source/tasks.c **** 
1052:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1053:../FreeRTOS/Source/tasks.c **** 
1054:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1241              		.loc 1 1054 0
 1242 000e 7B68     		ldr	r3, [r7, #4]
 1243 0010 BB60     		str	r3, [r7, #8]
1055:../FreeRTOS/Source/tasks.c **** 
1056:../FreeRTOS/Source/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1244              		.loc 1 1056 0
 1245 0012 B868     		ldr	r0, [r7, #8]
 1246 0014 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1247 0018 0346     		mov	r3, r0
 1248 001a 012B     		cmp	r3, #1
 1249 001c 49D1     		bne	.L54
1057:../FreeRTOS/Source/tasks.c **** 		{
1058:../FreeRTOS/Source/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
1059:../FreeRTOS/Source/tasks.c **** 
1060:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1250              		.loc 1 1060 0
 1251 001e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1252 0022 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1253 0026 1B68     		ldr	r3, [r3, #0]
 1254 0028 002B     		cmp	r3, #0
 1255 002a 38D1     		bne	.L55
1061:../FreeRTOS/Source/tasks.c **** 			{
1062:../FreeRTOS/Source/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1256              		.loc 1 1062 0
 1257 002c BB68     		ldr	r3, [r7, #8]
 1258 002e DA6A     		ldr	r2, [r3, #44]
 1259 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1260 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1261 0038 1B68     		ldr	r3, [r3, #0]
 1262 003a DB6A     		ldr	r3, [r3, #44]
 1263 003c 9A42     		cmp	r2, r3
 1264 003e 34BF     		ite	cc
 1265 0040 0023     		movcc	r3, #0
 1266 0042 0123     		movcs	r3, #1
 1267 0044 FB60     		str	r3, [r7, #12]
1063:../FreeRTOS/Source/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 1268              		.loc 1 1063 0
 1269 0046 BB68     		ldr	r3, [r7, #8]
 1270 0048 03F10403 		add	r3, r3, #4
 1271 004c 1846     		mov	r0, r3
 1272 004e FFF7FEFF 		bl	vListRemove
1064:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 1273              		.loc 1 1064 0
 1274 0052 BB68     		ldr	r3, [r7, #8]
 1275 0054 DA6A     		ldr	r2, [r3, #44]
 1276 0056 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1277 005a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1278 005e 1B68     		ldr	r3, [r3, #0]
 1279 0060 9A42     		cmp	r2, r3
 1280 0062 06D9     		bls	.L56
 1281              		.loc 1 1064 0 is_stmt 0 discriminator 1
 1282 0064 BB68     		ldr	r3, [r7, #8]
 1283 0066 DA6A     		ldr	r2, [r3, #44]
 1284 0068 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1285 006c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1286 0070 1A60     		str	r2, [r3, #0]
 1287              	.L56:
 1288              		.loc 1 1064 0 discriminator 2
 1289 0072 BB68     		ldr	r3, [r7, #8]
 1290 0074 DA6A     		ldr	r2, [r3, #44]
 1291 0076 1346     		mov	r3, r2
 1292 0078 4FEA8303 		lsl	r3, r3, #2
 1293 007c 9B18     		adds	r3, r3, r2
 1294 007e 4FEA8303 		lsl	r3, r3, #2
 1295 0082 1A46     		mov	r2, r3
 1296 0084 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1297 0088 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1298 008c D218     		adds	r2, r2, r3
 1299 008e BB68     		ldr	r3, [r7, #8]
 1300 0090 03F10403 		add	r3, r3, #4
 1301 0094 1046     		mov	r0, r2
 1302 0096 1946     		mov	r1, r3
 1303 0098 FFF7FEFF 		bl	vListInsertEnd
 1304 009c 09E0     		b	.L54
 1305              	.L55:
1065:../FreeRTOS/Source/tasks.c **** 			}
1066:../FreeRTOS/Source/tasks.c **** 			else
1067:../FreeRTOS/Source/tasks.c **** 			{
1068:../FreeRTOS/Source/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1069:../FreeRTOS/Source/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1070:../FreeRTOS/Source/tasks.c **** 				yield will be performed if necessary. */
1071:../FreeRTOS/Source/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1306              		.loc 1 1071 0 is_stmt 1
 1307 009e BB68     		ldr	r3, [r7, #8]
 1308 00a0 03F11803 		add	r3, r3, #24
 1309 00a4 40F20000 		movw	r0, #:lower16:xPendingReadyList
 1310 00a8 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 1311 00ac 1946     		mov	r1, r3
 1312 00ae FFF7FEFF 		bl	vListInsertEnd
 1313              	.L54:
1072:../FreeRTOS/Source/tasks.c **** 			}
1073:../FreeRTOS/Source/tasks.c **** 		}
1074:../FreeRTOS/Source/tasks.c **** 
1075:../FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1314              		.loc 1 1075 0
 1315 00b2 FB68     		ldr	r3, [r7, #12]
1076:../FreeRTOS/Source/tasks.c **** 	}
 1316              		.loc 1 1076 0
 1317 00b4 1846     		mov	r0, r3
 1318 00b6 07F11007 		add	r7, r7, #16
 1319 00ba BD46     		mov	sp, r7
 1320 00bc 80BD     		pop	{r7, pc}
 1321              		.cfi_endproc
 1322              	.LFE119:
 1324 00be 00BF     		.section	.rodata
 1325              		.align	2
 1326              	.LC0:
 1327 0000 49444C45 		.ascii	"IDLE\000"
 1327      00
 1328              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1329              		.align	2
 1330              		.global	vTaskStartScheduler
 1331              		.thumb
 1332              		.thumb_func
 1334              	vTaskStartScheduler:
 1335              	.LFB120:
1077:../FreeRTOS/Source/tasks.c **** 
1078:../FreeRTOS/Source/tasks.c **** #endif
1079:../FreeRTOS/Source/tasks.c **** 
1080:../FreeRTOS/Source/tasks.c **** 
1081:../FreeRTOS/Source/tasks.c **** 
1082:../FreeRTOS/Source/tasks.c **** 
1083:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1084:../FreeRTOS/Source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1085:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1086:../FreeRTOS/Source/tasks.c **** 
1087:../FreeRTOS/Source/tasks.c **** 
1088:../FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1089:../FreeRTOS/Source/tasks.c **** {
 1336              		.loc 1 1089 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 8
 1339              		@ frame_needed = 1, uses_anonymous_args = 0
 1340 0000 80B5     		push	{r7, lr}
 1341              	.LCFI30:
 1342              		.cfi_def_cfa_offset 8
 1343              		.cfi_offset 14, -4
 1344              		.cfi_offset 7, -8
 1345 0002 86B0     		sub	sp, sp, #24
 1346              	.LCFI31:
 1347              		.cfi_def_cfa_offset 32
 1348 0004 04AF     		add	r7, sp, #16
 1349              	.LCFI32:
 1350              		.cfi_def_cfa 7, 16
1090:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1091:../FreeRTOS/Source/tasks.c **** 
1092:../FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1093:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1094:../FreeRTOS/Source/tasks.c **** 	{
1095:../FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1096:../FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1097:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 1351              		.loc 1 1097 0
 1352 0006 4FF00003 		mov	r3, #0
 1353 000a 0093     		str	r3, [sp, #0]
 1354 000c 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1355 0010 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1356 0014 0193     		str	r3, [sp, #4]
 1357 0016 4FF00003 		mov	r3, #0
 1358 001a 0293     		str	r3, [sp, #8]
 1359 001c 4FF00003 		mov	r3, #0
 1360 0020 0393     		str	r3, [sp, #12]
 1361 0022 40F20000 		movw	r0, #:lower16:prvIdleTask
 1362 0026 C0F20000 		movt	r0, #:upper16:prvIdleTask
 1363 002a 40F20001 		movw	r1, #:lower16:.LC0
 1364 002e C0F20001 		movt	r1, #:upper16:.LC0
 1365 0032 4FF48072 		mov	r2, #256
 1366 0036 4FF00003 		mov	r3, #0
 1367 003a FFF7FEFF 		bl	xTaskGenericCreate
 1368 003e 0346     		mov	r3, r0
 1369 0040 7B60     		str	r3, [r7, #4]
1098:../FreeRTOS/Source/tasks.c **** 	}
1099:../FreeRTOS/Source/tasks.c **** 	#else
1100:../FreeRTOS/Source/tasks.c **** 	{
1101:../FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1102:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1103:../FreeRTOS/Source/tasks.c **** 	}
1104:../FreeRTOS/Source/tasks.c **** 	#endif
1105:../FreeRTOS/Source/tasks.c **** 
1106:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1107:../FreeRTOS/Source/tasks.c **** 	{
1108:../FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1109:../FreeRTOS/Source/tasks.c **** 		{
1110:../FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1111:../FreeRTOS/Source/tasks.c **** 		}
1112:../FreeRTOS/Source/tasks.c **** 	}
1113:../FreeRTOS/Source/tasks.c **** 	#endif
1114:../FreeRTOS/Source/tasks.c **** 
1115:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 1370              		.loc 1 1115 0
 1371 0042 7B68     		ldr	r3, [r7, #4]
 1372 0044 012B     		cmp	r3, #1
 1373 0046 15D1     		bne	.L57
1116:../FreeRTOS/Source/tasks.c **** 	{
1117:../FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1118:../FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1119:../FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1120:../FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1121:../FreeRTOS/Source/tasks.c **** 		starts to run.
1122:../FreeRTOS/Source/tasks.c **** 
1123:../FreeRTOS/Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1124:../FreeRTOS/Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1125:../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1374              		.loc 1 1125 0
 1375              	@ 1125 "../FreeRTOS/Source/tasks.c" 1
 1376 0048 4FF0BF00 			mov r0, #191								
 1377 004c 80F31188 		msr basepri, r0							
 1378              	
 1379              	@ 0 "" 2
1126:../FreeRTOS/Source/tasks.c **** 
1127:../FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1380              		.loc 1 1127 0
 1381              		.thumb
 1382 0050 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1383 0054 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1384 0058 4FF00102 		mov	r2, #1
 1385 005c 1A60     		str	r2, [r3, #0]
1128:../FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 1386              		.loc 1 1128 0
 1387 005e 40F20003 		movw	r3, #:lower16:xTickCount
 1388 0062 C0F20003 		movt	r3, #:upper16:xTickCount
 1389 0066 4FF00002 		mov	r2, #0
 1390 006a 1A60     		str	r2, [r3, #0]
1129:../FreeRTOS/Source/tasks.c **** 
1130:../FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1131:../FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1132:../FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1133:../FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 1391              		.loc 1 1133 0
 1392 006c FFF7FEFF 		bl	init_us_timer
1134:../FreeRTOS/Source/tasks.c **** 		
1135:../FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1136:../FreeRTOS/Source/tasks.c **** 		portable interface. */
1137:../FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1393              		.loc 1 1137 0
 1394 0070 FFF7FEFF 		bl	xPortStartScheduler
 1395              	.L57:
1138:../FreeRTOS/Source/tasks.c **** 		{
1139:../FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1140:../FreeRTOS/Source/tasks.c **** 			function will not return. */
1141:../FreeRTOS/Source/tasks.c **** 		}
1142:../FreeRTOS/Source/tasks.c **** 		else
1143:../FreeRTOS/Source/tasks.c **** 		{
1144:../FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1145:../FreeRTOS/Source/tasks.c **** 		}
1146:../FreeRTOS/Source/tasks.c **** 	}
1147:../FreeRTOS/Source/tasks.c **** 
1148:../FreeRTOS/Source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1149:../FreeRTOS/Source/tasks.c **** 	configASSERT( xReturn );
1150:../FreeRTOS/Source/tasks.c **** }
 1396              		.loc 1 1150 0
 1397 0074 07F10807 		add	r7, r7, #8
 1398 0078 BD46     		mov	sp, r7
 1399 007a 80BD     		pop	{r7, pc}
 1400              		.cfi_endproc
 1401              	.LFE120:
 1403              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1404              		.align	2
 1405              		.global	vTaskEndScheduler
 1406              		.thumb
 1407              		.thumb_func
 1409              	vTaskEndScheduler:
 1410              	.LFB121:
1151:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1152:../FreeRTOS/Source/tasks.c **** 
1153:../FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1154:../FreeRTOS/Source/tasks.c **** {
 1411              		.loc 1 1154 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 1, uses_anonymous_args = 0
 1415 0000 80B5     		push	{r7, lr}
 1416              	.LCFI33:
 1417              		.cfi_def_cfa_offset 8
 1418              		.cfi_offset 14, -4
 1419              		.cfi_offset 7, -8
 1420 0002 00AF     		add	r7, sp, #0
 1421              	.LCFI34:
 1422              		.cfi_def_cfa_register 7
1155:../FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1156:../FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1157:../FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1158:../FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1423              		.loc 1 1158 0
 1424              	@ 1158 "../FreeRTOS/Source/tasks.c" 1
 1425 0004 4FF0BF00 			mov r0, #191								
 1426 0008 80F31188 		msr basepri, r0							
 1427              	
 1428              	@ 0 "" 2
1159:../FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1429              		.loc 1 1159 0
 1430              		.thumb
 1431 000c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1432 0010 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1433 0014 4FF00002 		mov	r2, #0
 1434 0018 1A60     		str	r2, [r3, #0]
1160:../FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1435              		.loc 1 1160 0
 1436 001a FFF7FEFF 		bl	vPortEndScheduler
1161:../FreeRTOS/Source/tasks.c **** }
 1437              		.loc 1 1161 0
 1438 001e 80BD     		pop	{r7, pc}
 1439              		.cfi_endproc
 1440              	.LFE121:
 1442              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1443              		.align	2
 1444              		.global	vTaskSuspendAll
 1445              		.thumb
 1446              		.thumb_func
 1448              	vTaskSuspendAll:
 1449              	.LFB122:
1162:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1163:../FreeRTOS/Source/tasks.c **** 
1164:../FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1165:../FreeRTOS/Source/tasks.c **** {
 1450              		.loc 1 1165 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
 1455 0000 80B4     		push	{r7}
 1456              	.LCFI35:
 1457              		.cfi_def_cfa_offset 4
 1458              		.cfi_offset 7, -4
 1459 0002 00AF     		add	r7, sp, #0
 1460              	.LCFI36:
 1461              		.cfi_def_cfa_register 7
1166:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1167:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1168:../FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1462              		.loc 1 1168 0
 1463 0004 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1464 0008 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1465 000c 1B68     		ldr	r3, [r3, #0]
 1466 000e 03F10102 		add	r2, r3, #1
 1467 0012 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1468 0016 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1469 001a 1A60     		str	r2, [r3, #0]
1169:../FreeRTOS/Source/tasks.c **** }
 1470              		.loc 1 1169 0
 1471 001c BD46     		mov	sp, r7
 1472 001e 80BC     		pop	{r7}
 1473 0020 7047     		bx	lr
 1474              		.cfi_endproc
 1475              	.LFE122:
 1477 0022 00BF     		.section	.text.xTaskResumeAll,"ax",%progbits
 1478              		.align	2
 1479              		.global	xTaskResumeAll
 1480              		.thumb
 1481              		.thumb_func
 1483              	xTaskResumeAll:
 1484              	.LFB123:
1170:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1171:../FreeRTOS/Source/tasks.c **** 
1172:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1173:../FreeRTOS/Source/tasks.c **** {
 1485              		.loc 1 1173 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 8
 1488              		@ frame_needed = 1, uses_anonymous_args = 0
 1489 0000 90B5     		push	{r4, r7, lr}
 1490              	.LCFI37:
 1491              		.cfi_def_cfa_offset 12
 1492              		.cfi_offset 14, -4
 1493              		.cfi_offset 7, -8
 1494              		.cfi_offset 4, -12
 1495 0002 83B0     		sub	sp, sp, #12
 1496              	.LCFI38:
 1497              		.cfi_def_cfa_offset 24
 1498 0004 00AF     		add	r7, sp, #0
 1499              	.LCFI39:
 1500              		.cfi_def_cfa_register 7
1174:../FreeRTOS/Source/tasks.c **** register tskTCB *pxTCB;
1175:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1501              		.loc 1 1175 0
 1502 0006 4FF00003 		mov	r3, #0
 1503 000a 7B60     		str	r3, [r7, #4]
1176:../FreeRTOS/Source/tasks.c **** 
1177:../FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1178:../FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1179:../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1180:../FreeRTOS/Source/tasks.c **** 
1181:../FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1182:../FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1183:../FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1184:../FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1185:../FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1186:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1504              		.loc 1 1186 0
 1505 000c FFF7FEFF 		bl	vPortEnterCritical
1187:../FreeRTOS/Source/tasks.c **** 	{
1188:../FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1506              		.loc 1 1188 0
 1507 0010 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1508 0014 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1509 0018 1B68     		ldr	r3, [r3, #0]
 1510 001a 03F1FF32 		add	r2, r3, #-1
 1511 001e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1512 0022 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1513 0026 1A60     		str	r2, [r3, #0]
1189:../FreeRTOS/Source/tasks.c **** 
1190:../FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1514              		.loc 1 1190 0
 1515 0028 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1516 002c C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1517 0030 1B68     		ldr	r3, [r3, #0]
 1518 0032 002B     		cmp	r3, #0
 1519 0034 40F08680 		bne	.L62
1191:../FreeRTOS/Source/tasks.c **** 		{
1192:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1520              		.loc 1 1192 0
 1521 0038 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1522 003c C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1523 0040 1B68     		ldr	r3, [r3, #0]
 1524 0042 002B     		cmp	r3, #0
 1525 0044 7ED0     		beq	.L62
 1526              	.LBB3:
1193:../FreeRTOS/Source/tasks.c **** 			{
1194:../FreeRTOS/Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1527              		.loc 1 1194 0
 1528 0046 4FF00003 		mov	r3, #0
 1529 004a 3B60     		str	r3, [r7, #0]
1195:../FreeRTOS/Source/tasks.c **** 
1196:../FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1197:../FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1198:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1530              		.loc 1 1198 0
 1531 004c 3DE0     		b	.L63
 1532              	.L65:
1199:../FreeRTOS/Source/tasks.c **** 				{
1200:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1533              		.loc 1 1200 0
 1534 004e 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1535 0052 C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1536 0056 DB68     		ldr	r3, [r3, #12]
 1537 0058 DB68     		ldr	r3, [r3, #12]
 1538 005a 1C46     		mov	r4, r3
1201:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 1539              		.loc 1 1201 0
 1540 005c 04F11803 		add	r3, r4, #24
 1541 0060 1846     		mov	r0, r3
 1542 0062 FFF7FEFF 		bl	vListRemove
1202:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1543              		.loc 1 1202 0
 1544 0066 04F10403 		add	r3, r4, #4
 1545 006a 1846     		mov	r0, r3
 1546 006c FFF7FEFF 		bl	vListRemove
1203:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1547              		.loc 1 1203 0
 1548 0070 E26A     		ldr	r2, [r4, #44]
 1549 0072 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1550 0076 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1551 007a 1B68     		ldr	r3, [r3, #0]
 1552 007c 9A42     		cmp	r2, r3
 1553 007e 05D9     		bls	.L64
 1554              		.loc 1 1203 0 is_stmt 0 discriminator 1
 1555 0080 E26A     		ldr	r2, [r4, #44]
 1556 0082 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1557 0086 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1558 008a 1A60     		str	r2, [r3, #0]
 1559              	.L64:
 1560              		.loc 1 1203 0 discriminator 2
 1561 008c E26A     		ldr	r2, [r4, #44]
 1562 008e 1346     		mov	r3, r2
 1563 0090 4FEA8303 		lsl	r3, r3, #2
 1564 0094 9B18     		adds	r3, r3, r2
 1565 0096 4FEA8303 		lsl	r3, r3, #2
 1566 009a 1A46     		mov	r2, r3
 1567 009c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1568 00a0 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1569 00a4 D218     		adds	r2, r2, r3
 1570 00a6 04F10403 		add	r3, r4, #4
 1571 00aa 1046     		mov	r0, r2
 1572 00ac 1946     		mov	r1, r3
 1573 00ae FFF7FEFF 		bl	vListInsertEnd
1204:../FreeRTOS/Source/tasks.c **** 
1205:../FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1206:../FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1207:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1574              		.loc 1 1207 0 is_stmt 1 discriminator 2
 1575 00b2 E26A     		ldr	r2, [r4, #44]
 1576 00b4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1577 00b8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1578 00bc 1B68     		ldr	r3, [r3, #0]
 1579 00be DB6A     		ldr	r3, [r3, #44]
 1580 00c0 9A42     		cmp	r2, r3
 1581 00c2 02D3     		bcc	.L63
1208:../FreeRTOS/Source/tasks.c **** 					{
1209:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1582              		.loc 1 1209 0
 1583 00c4 4FF00103 		mov	r3, #1
 1584 00c8 3B60     		str	r3, [r7, #0]
 1585              	.L63:
1198:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1586              		.loc 1 1198 0 discriminator 1
 1587 00ca 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1588 00ce C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1589 00d2 1B68     		ldr	r3, [r3, #0]
 1590 00d4 002B     		cmp	r3, #0
 1591 00d6 BAD1     		bne	.L65
1210:../FreeRTOS/Source/tasks.c **** 					}
1211:../FreeRTOS/Source/tasks.c **** 				}
1212:../FreeRTOS/Source/tasks.c **** 
1213:../FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1214:../FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1215:../FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1216:../FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1592              		.loc 1 1216 0
 1593 00d8 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1594 00dc C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1595 00e0 1B68     		ldr	r3, [r3, #0]
 1596 00e2 002B     		cmp	r3, #0
 1597 00e4 18D0     		beq	.L66
1217:../FreeRTOS/Source/tasks.c **** 				{
1218:../FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1598              		.loc 1 1218 0
 1599 00e6 0DE0     		b	.L67
 1600              	.L68:
1219:../FreeRTOS/Source/tasks.c **** 					{
1220:../FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
 1601              		.loc 1 1220 0
 1602 00e8 FFF7FEFF 		bl	vTaskIncrementTick
1221:../FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
 1603              		.loc 1 1221 0
 1604 00ec 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1605 00f0 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1606 00f4 1B68     		ldr	r3, [r3, #0]
 1607 00f6 03F1FF32 		add	r2, r3, #-1
 1608 00fa 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1609 00fe C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1610 0102 1A60     		str	r2, [r3, #0]
 1611              	.L67:
1218:../FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1612              		.loc 1 1218 0 discriminator 1
 1613 0104 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1614 0108 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1615 010c 1B68     		ldr	r3, [r3, #0]
 1616 010e 002B     		cmp	r3, #0
 1617 0110 EAD1     		bne	.L68
1222:../FreeRTOS/Source/tasks.c **** 					}
1223:../FreeRTOS/Source/tasks.c **** 
1224:../FreeRTOS/Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1225:../FreeRTOS/Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1226:../FreeRTOS/Source/tasks.c **** 					the task actually running. */
1227:../FreeRTOS/Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1228:../FreeRTOS/Source/tasks.c **** 					{
1229:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1618              		.loc 1 1229 0
 1619 0112 4FF00103 		mov	r3, #1
 1620 0116 3B60     		str	r3, [r7, #0]
 1621              	.L66:
1230:../FreeRTOS/Source/tasks.c **** 					}
1231:../FreeRTOS/Source/tasks.c **** 					#endif
1232:../FreeRTOS/Source/tasks.c **** 				}
1233:../FreeRTOS/Source/tasks.c **** 
1234:../FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1622              		.loc 1 1234 0
 1623 0118 3B68     		ldr	r3, [r7, #0]
 1624 011a 012B     		cmp	r3, #1
 1625 011c 06D0     		beq	.L69
 1626              		.loc 1 1234 0 is_stmt 0 discriminator 1
 1627 011e 40F20003 		movw	r3, #:lower16:xMissedYield
 1628 0122 C0F20003 		movt	r3, #:upper16:xMissedYield
 1629 0126 1B68     		ldr	r3, [r3, #0]
 1630 0128 012B     		cmp	r3, #1
 1631 012a 0BD1     		bne	.L62
 1632              	.L69:
1235:../FreeRTOS/Source/tasks.c **** 				{
1236:../FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1633              		.loc 1 1236 0 is_stmt 1
 1634 012c 4FF00103 		mov	r3, #1
 1635 0130 7B60     		str	r3, [r7, #4]
1237:../FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
 1636              		.loc 1 1237 0
 1637 0132 40F20003 		movw	r3, #:lower16:xMissedYield
 1638 0136 C0F20003 		movt	r3, #:upper16:xMissedYield
 1639 013a 4FF00002 		mov	r2, #0
 1640 013e 1A60     		str	r2, [r3, #0]
1238:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1641              		.loc 1 1238 0
 1642 0140 FFF7FEFF 		bl	vPortYieldFromISR
 1643              	.L62:
 1644              	.LBE3:
1239:../FreeRTOS/Source/tasks.c **** 				}
1240:../FreeRTOS/Source/tasks.c **** 			}
1241:../FreeRTOS/Source/tasks.c **** 		}
1242:../FreeRTOS/Source/tasks.c **** 	}
1243:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1645              		.loc 1 1243 0
 1646 0144 FFF7FEFF 		bl	vPortExitCritical
1244:../FreeRTOS/Source/tasks.c **** 
1245:../FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 1647              		.loc 1 1245 0
 1648 0148 7B68     		ldr	r3, [r7, #4]
1246:../FreeRTOS/Source/tasks.c **** }
 1649              		.loc 1 1246 0
 1650 014a 1846     		mov	r0, r3
 1651 014c 07F10C07 		add	r7, r7, #12
 1652 0150 BD46     		mov	sp, r7
 1653 0152 90BD     		pop	{r4, r7, pc}
 1654              		.cfi_endproc
 1655              	.LFE123:
 1657              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1658              		.align	2
 1659              		.global	xTaskGetTickCount
 1660              		.thumb
 1661              		.thumb_func
 1663              	xTaskGetTickCount:
 1664              	.LFB124:
1247:../FreeRTOS/Source/tasks.c **** 
1248:../FreeRTOS/Source/tasks.c **** 
1249:../FreeRTOS/Source/tasks.c **** 
1250:../FreeRTOS/Source/tasks.c **** 
1251:../FreeRTOS/Source/tasks.c **** 
1252:../FreeRTOS/Source/tasks.c **** 
1253:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1254:../FreeRTOS/Source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1255:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1256:../FreeRTOS/Source/tasks.c **** 
1257:../FreeRTOS/Source/tasks.c **** 
1258:../FreeRTOS/Source/tasks.c **** 
1259:../FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1260:../FreeRTOS/Source/tasks.c **** {
 1665              		.loc 1 1260 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 8
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669 0000 80B5     		push	{r7, lr}
 1670              	.LCFI40:
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 14, -4
 1673              		.cfi_offset 7, -8
 1674 0002 82B0     		sub	sp, sp, #8
 1675              	.LCFI41:
 1676              		.cfi_def_cfa_offset 16
 1677 0004 00AF     		add	r7, sp, #0
 1678              	.LCFI42:
 1679              		.cfi_def_cfa_register 7
1261:../FreeRTOS/Source/tasks.c **** portTickType xTicks;
1262:../FreeRTOS/Source/tasks.c **** 
1263:../FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1264:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1680              		.loc 1 1264 0
 1681 0006 FFF7FEFF 		bl	vPortEnterCritical
1265:../FreeRTOS/Source/tasks.c **** 	{
1266:../FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1682              		.loc 1 1266 0
 1683 000a 40F20003 		movw	r3, #:lower16:xTickCount
 1684 000e C0F20003 		movt	r3, #:upper16:xTickCount
 1685 0012 1B68     		ldr	r3, [r3, #0]
 1686 0014 7B60     		str	r3, [r7, #4]
1267:../FreeRTOS/Source/tasks.c **** 	}
1268:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1687              		.loc 1 1268 0
 1688 0016 FFF7FEFF 		bl	vPortExitCritical
1269:../FreeRTOS/Source/tasks.c **** 
1270:../FreeRTOS/Source/tasks.c **** 	return xTicks;
 1689              		.loc 1 1270 0
 1690 001a 7B68     		ldr	r3, [r7, #4]
1271:../FreeRTOS/Source/tasks.c **** }
 1691              		.loc 1 1271 0
 1692 001c 1846     		mov	r0, r3
 1693 001e 07F10807 		add	r7, r7, #8
 1694 0022 BD46     		mov	sp, r7
 1695 0024 80BD     		pop	{r7, pc}
 1696              		.cfi_endproc
 1697              	.LFE124:
 1699 0026 00BF     		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1700              		.align	2
 1701              		.global	xTaskGetTickCountFromISR
 1702              		.thumb
 1703              		.thumb_func
 1705              	xTaskGetTickCountFromISR:
 1706              	.LFB125:
1272:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1273:../FreeRTOS/Source/tasks.c **** 
1274:../FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1275:../FreeRTOS/Source/tasks.c **** {
 1707              		.loc 1 1275 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 8
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
 1712 0000 80B4     		push	{r7}
 1713              	.LCFI43:
 1714              		.cfi_def_cfa_offset 4
 1715              		.cfi_offset 7, -4
 1716 0002 83B0     		sub	sp, sp, #12
 1717              	.LCFI44:
 1718              		.cfi_def_cfa_offset 16
 1719 0004 00AF     		add	r7, sp, #0
 1720              	.LCFI45:
 1721              		.cfi_def_cfa_register 7
1276:../FreeRTOS/Source/tasks.c **** portTickType xReturn;
1277:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1278:../FreeRTOS/Source/tasks.c **** 
1279:../FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1722              		.loc 1 1279 0
 1723 0006 4FF00003 		mov	r3, #0
 1724 000a 7B60     		str	r3, [r7, #4]
 1725              	@ 1279 "../FreeRTOS/Source/tasks.c" 1
 1726 000c 4FF0BF00 			mov r0, #191								
 1727 0010 80F31188 		msr basepri, r0							
 1728              	
 1729              	@ 0 "" 2
1280:../FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1730              		.loc 1 1280 0
 1731              		.thumb
 1732 0014 40F20003 		movw	r3, #:lower16:xTickCount
 1733 0018 C0F20003 		movt	r3, #:upper16:xTickCount
 1734 001c 1B68     		ldr	r3, [r3, #0]
 1735 001e 3B60     		str	r3, [r7, #0]
1281:../FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1736              		.loc 1 1281 0
 1737              	@ 1281 "../FreeRTOS/Source/tasks.c" 1
 1738 0020 4FF00000 			mov r0, #0					
 1739 0024 80F31188 		msr basepri, r0				
 1740              	
 1741              	@ 0 "" 2
1282:../FreeRTOS/Source/tasks.c **** 
1283:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 1742              		.loc 1 1283 0
 1743              		.thumb
 1744 0028 3B68     		ldr	r3, [r7, #0]
1284:../FreeRTOS/Source/tasks.c **** }
 1745              		.loc 1 1284 0
 1746 002a 1846     		mov	r0, r3
 1747 002c 07F10C07 		add	r7, r7, #12
 1748 0030 BD46     		mov	sp, r7
 1749 0032 80BC     		pop	{r7}
 1750 0034 7047     		bx	lr
 1751              		.cfi_endproc
 1752              	.LFE125:
 1754 0036 00BF     		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1755              		.align	2
 1756              		.global	uxTaskGetNumberOfTasks
 1757              		.thumb
 1758              		.thumb_func
 1760              	uxTaskGetNumberOfTasks:
 1761              	.LFB126:
1285:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1286:../FreeRTOS/Source/tasks.c **** 
1287:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1288:../FreeRTOS/Source/tasks.c **** {
 1762              		.loc 1 1288 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767 0000 80B4     		push	{r7}
 1768              	.LCFI46:
 1769              		.cfi_def_cfa_offset 4
 1770              		.cfi_offset 7, -4
 1771 0002 00AF     		add	r7, sp, #0
 1772              	.LCFI47:
 1773              		.cfi_def_cfa_register 7
1289:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1290:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1291:../FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1774              		.loc 1 1291 0
 1775 0004 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1776 0008 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1777 000c 1B68     		ldr	r3, [r3, #0]
1292:../FreeRTOS/Source/tasks.c **** }
 1778              		.loc 1 1292 0
 1779 000e 1846     		mov	r0, r3
 1780 0010 BD46     		mov	sp, r7
 1781 0012 80BC     		pop	{r7}
 1782 0014 7047     		bx	lr
 1783              		.cfi_endproc
 1784              	.LFE126:
 1786 0016 00BF     		.section	.rodata
 1787 0005 000000   		.align	2
 1788              	.LC1:
 1789 0008 0D0A00   		.ascii	"\015\012\000"
 1790              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 1791              		.align	2
 1792              		.global	vTaskGetRunTimeStats
 1793              		.thumb
 1794              		.thumb_func
 1796              	vTaskGetRunTimeStats:
 1797              	.LFB127:
1293:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1294:../FreeRTOS/Source/tasks.c **** 
1295:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1296:../FreeRTOS/Source/tasks.c **** 
1297:../FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1298:../FreeRTOS/Source/tasks.c **** 	{
1299:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1300:../FreeRTOS/Source/tasks.c **** 
1301:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1302:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1303:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1304:../FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1305:../FreeRTOS/Source/tasks.c **** 	}
1306:../FreeRTOS/Source/tasks.c **** 
1307:../FreeRTOS/Source/tasks.c **** #endif
1308:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1309:../FreeRTOS/Source/tasks.c **** 
1310:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1311:../FreeRTOS/Source/tasks.c **** 
1312:../FreeRTOS/Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1313:../FreeRTOS/Source/tasks.c **** 	{
1314:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1315:../FreeRTOS/Source/tasks.c **** 
1316:../FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1317:../FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1318:../FreeRTOS/Source/tasks.c **** 
1319:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1320:../FreeRTOS/Source/tasks.c **** 		{
1321:../FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1322:../FreeRTOS/Source/tasks.c **** 			report the task name, state and stack high water mark. */
1323:../FreeRTOS/Source/tasks.c **** 
1324:../FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1325:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1326:../FreeRTOS/Source/tasks.c **** 
1327:../FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1328:../FreeRTOS/Source/tasks.c **** 
1329:../FreeRTOS/Source/tasks.c **** 			do
1330:../FreeRTOS/Source/tasks.c **** 			{
1331:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
1332:../FreeRTOS/Source/tasks.c **** 
1333:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1334:../FreeRTOS/Source/tasks.c **** 				{
1335:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1336:../FreeRTOS/Source/tasks.c **** 				}
1337:../FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1338:../FreeRTOS/Source/tasks.c **** 
1339:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1340:../FreeRTOS/Source/tasks.c **** 			{
1341:../FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1342:../FreeRTOS/Source/tasks.c **** 			}
1343:../FreeRTOS/Source/tasks.c **** 
1344:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1345:../FreeRTOS/Source/tasks.c **** 			{
1346:../FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1347:../FreeRTOS/Source/tasks.c **** 			}
1348:../FreeRTOS/Source/tasks.c **** 
1349:../FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1350:../FreeRTOS/Source/tasks.c **** 			{
1351:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1352:../FreeRTOS/Source/tasks.c **** 				{
1353:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1354:../FreeRTOS/Source/tasks.c **** 				}
1355:../FreeRTOS/Source/tasks.c **** 			}
1356:../FreeRTOS/Source/tasks.c **** 			#endif
1357:../FreeRTOS/Source/tasks.c **** 
1358:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1359:../FreeRTOS/Source/tasks.c **** 			{
1360:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1361:../FreeRTOS/Source/tasks.c **** 				{
1362:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1363:../FreeRTOS/Source/tasks.c **** 				}
1364:../FreeRTOS/Source/tasks.c **** 			}
1365:../FreeRTOS/Source/tasks.c **** 			#endif
1366:../FreeRTOS/Source/tasks.c **** 		}
1367:../FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1368:../FreeRTOS/Source/tasks.c **** 	}
1369:../FreeRTOS/Source/tasks.c **** 
1370:../FreeRTOS/Source/tasks.c **** #endif
1371:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1372:../FreeRTOS/Source/tasks.c **** 
1373:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1374:../FreeRTOS/Source/tasks.c **** 
1375:../FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1376:../FreeRTOS/Source/tasks.c **** 	{
 1798              		.loc 1 1376 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 16
 1801              		@ frame_needed = 1, uses_anonymous_args = 0
 1802 0000 90B5     		push	{r4, r7, lr}
 1803              	.LCFI48:
 1804              		.cfi_def_cfa_offset 12
 1805              		.cfi_offset 14, -4
 1806              		.cfi_offset 7, -8
 1807              		.cfi_offset 4, -12
 1808 0002 85B0     		sub	sp, sp, #20
 1809              	.LCFI49:
 1810              		.cfi_def_cfa_offset 32
 1811 0004 00AF     		add	r7, sp, #0
 1812              	.LCFI50:
 1813              		.cfi_def_cfa_register 7
 1814 0006 7860     		str	r0, [r7, #4]
1377:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1378:../FreeRTOS/Source/tasks.c **** 	unsigned long ulTotalRunTime;
1379:../FreeRTOS/Source/tasks.c **** 
1380:../FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1381:../FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1382:../FreeRTOS/Source/tasks.c **** 
1383:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1815              		.loc 1 1383 0
 1816 0008 FFF7FEFF 		bl	vTaskSuspendAll
1384:../FreeRTOS/Source/tasks.c **** 		{
1385:../FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1386:../FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1387:../FreeRTOS/Source/tasks.c **** 			#else
1388:../FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 1817              		.loc 1 1388 0
 1818 000c FFF7FEFF 		bl	get_us_time
 1819 0010 0246     		mov	r2, r0
 1820 0012 0B46     		mov	r3, r1
 1821 0014 1346     		mov	r3, r2
 1822 0016 BB60     		str	r3, [r7, #8]
1389:../FreeRTOS/Source/tasks.c **** 			#endif
1390:../FreeRTOS/Source/tasks.c **** 
1391:../FreeRTOS/Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1392:../FreeRTOS/Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1393:../FreeRTOS/Source/tasks.c **** 			ulTotalRunTime /= 100UL;
 1823              		.loc 1 1393 0
 1824 0018 BA68     		ldr	r2, [r7, #8]
 1825 001a 48F21F53 		movw	r3, #34079
 1826 001e C5F2EB13 		movt	r3, 20971
 1827 0022 A3FB0213 		umull	r1, r3, r3, r2
 1828 0026 4FEA5313 		lsr	r3, r3, #5
 1829 002a BB60     		str	r3, [r7, #8]
1394:../FreeRTOS/Source/tasks.c **** 			
1395:../FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1396:../FreeRTOS/Source/tasks.c **** 			generating a table of run timer percentages in the provided
1397:../FreeRTOS/Source/tasks.c **** 			buffer. */
1398:../FreeRTOS/Source/tasks.c **** 
1399:../FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
 1830              		.loc 1 1399 0
 1831 002c 7B68     		ldr	r3, [r7, #4]
 1832 002e 4FF00002 		mov	r2, #0
 1833 0032 1A70     		strb	r2, [r3, #0]
1400:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 1834              		.loc 1 1400 0
 1835 0034 7C68     		ldr	r4, [r7, #4]
 1836 0036 2046     		mov	r0, r4
 1837 0038 FFF7FEFF 		bl	strlen
 1838 003c 0346     		mov	r3, r0
 1839 003e E218     		adds	r2, r4, r3
 1840 0040 40F20003 		movw	r3, #:lower16:.LC1
 1841 0044 C0F20003 		movt	r3, #:upper16:.LC1
 1842 0048 1146     		mov	r1, r2
 1843 004a 1A46     		mov	r2, r3
 1844 004c 4FF00303 		mov	r3, #3
 1845 0050 0846     		mov	r0, r1
 1846 0052 1146     		mov	r1, r2
 1847 0054 1A46     		mov	r2, r3
 1848 0056 FFF7FEFF 		bl	memcpy
1401:../FreeRTOS/Source/tasks.c **** 
1402:../FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 1849              		.loc 1 1402 0
 1850 005a 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 1851 005e C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 1852 0062 1B68     		ldr	r3, [r3, #0]
 1853 0064 03F10103 		add	r3, r3, #1
 1854 0068 FB60     		str	r3, [r7, #12]
 1855              	.L75:
1403:../FreeRTOS/Source/tasks.c **** 
1404:../FreeRTOS/Source/tasks.c **** 			do
1405:../FreeRTOS/Source/tasks.c **** 			{
1406:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
 1856              		.loc 1 1406 0
 1857 006a FB68     		ldr	r3, [r7, #12]
 1858 006c 03F1FF33 		add	r3, r3, #-1
 1859 0070 FB60     		str	r3, [r7, #12]
1407:../FreeRTOS/Source/tasks.c **** 
1408:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 1860              		.loc 1 1408 0
 1861 0072 FA68     		ldr	r2, [r7, #12]
 1862 0074 1346     		mov	r3, r2
 1863 0076 4FEA8303 		lsl	r3, r3, #2
 1864 007a 9B18     		adds	r3, r3, r2
 1865 007c 4FEA8303 		lsl	r3, r3, #2
 1866 0080 1A46     		mov	r2, r3
 1867 0082 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1868 0086 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1869 008a D318     		adds	r3, r2, r3
 1870 008c 1B68     		ldr	r3, [r3, #0]
 1871 008e 002B     		cmp	r3, #0
 1872 0090 13D0     		beq	.L74
1409:../FreeRTOS/Source/tasks.c **** 				{
1410:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
 1873              		.loc 1 1410 0
 1874 0092 FA68     		ldr	r2, [r7, #12]
 1875 0094 1346     		mov	r3, r2
 1876 0096 4FEA8303 		lsl	r3, r3, #2
 1877 009a 9B18     		adds	r3, r3, r2
 1878 009c 4FEA8303 		lsl	r3, r3, #2
 1879 00a0 1A46     		mov	r2, r3
 1880 00a2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1881 00a6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1882 00aa D318     		adds	r3, r2, r3
 1883 00ac 7868     		ldr	r0, [r7, #4]
 1884 00ae 1946     		mov	r1, r3
 1885 00b0 BA68     		ldr	r2, [r7, #8]
 1886 00b2 4FF05203 		mov	r3, #82
 1887 00b6 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1888              	.L74:
1411:../FreeRTOS/Source/tasks.c **** 				}
1412:../FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 1889              		.loc 1 1412 0
 1890 00ba FB68     		ldr	r3, [r7, #12]
 1891 00bc 002B     		cmp	r3, #0
 1892 00be D4D1     		bne	.L75
1413:../FreeRTOS/Source/tasks.c **** 
1414:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 1893              		.loc 1 1414 0
 1894 00c0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1895 00c4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1896 00c8 1B68     		ldr	r3, [r3, #0]
 1897 00ca 1B68     		ldr	r3, [r3, #0]
 1898 00cc 002B     		cmp	r3, #0
 1899 00ce 0BD0     		beq	.L76
1415:../FreeRTOS/Source/tasks.c **** 			{
1416:../FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
 1900              		.loc 1 1416 0
 1901 00d0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1902 00d4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1903 00d8 1B68     		ldr	r3, [r3, #0]
 1904 00da 7868     		ldr	r0, [r7, #4]
 1905 00dc 1946     		mov	r1, r3
 1906 00de BA68     		ldr	r2, [r7, #8]
 1907 00e0 4FF04203 		mov	r3, #66
 1908 00e4 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1909              	.L76:
1417:../FreeRTOS/Source/tasks.c **** 			}
1418:../FreeRTOS/Source/tasks.c **** 
1419:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 1910              		.loc 1 1419 0
 1911 00e8 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1912 00ec C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1913 00f0 1B68     		ldr	r3, [r3, #0]
 1914 00f2 1B68     		ldr	r3, [r3, #0]
 1915 00f4 002B     		cmp	r3, #0
 1916 00f6 0BD0     		beq	.L77
1420:../FreeRTOS/Source/tasks.c **** 			{
1421:../FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
 1917              		.loc 1 1421 0
 1918 00f8 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1919 00fc C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1920 0100 1B68     		ldr	r3, [r3, #0]
 1921 0102 7868     		ldr	r0, [r7, #4]
 1922 0104 1946     		mov	r1, r3
 1923 0106 BA68     		ldr	r2, [r7, #8]
 1924 0108 4FF04203 		mov	r3, #66
 1925 010c FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1926              	.L77:
1422:../FreeRTOS/Source/tasks.c **** 			}
1423:../FreeRTOS/Source/tasks.c **** 
1424:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1425:../FreeRTOS/Source/tasks.c **** 			{
1426:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 1927              		.loc 1 1426 0
 1928 0110 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 1929 0114 C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 1930 0118 1B68     		ldr	r3, [r3, #0]
 1931 011a 002B     		cmp	r3, #0
 1932 011c 09D0     		beq	.L78
1427:../FreeRTOS/Source/tasks.c **** 				{
1428:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
 1933              		.loc 1 1428 0
 1934 011e 7868     		ldr	r0, [r7, #4]
 1935 0120 40F20001 		movw	r1, #:lower16:xTasksWaitingTermination
 1936 0124 C0F20001 		movt	r1, #:upper16:xTasksWaitingTermination
 1937 0128 BA68     		ldr	r2, [r7, #8]
 1938 012a 4FF04403 		mov	r3, #68
 1939 012e FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1940              	.L78:
1429:../FreeRTOS/Source/tasks.c **** 				}
1430:../FreeRTOS/Source/tasks.c **** 			}
1431:../FreeRTOS/Source/tasks.c **** 			#endif
1432:../FreeRTOS/Source/tasks.c **** 
1433:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1434:../FreeRTOS/Source/tasks.c **** 			{
1435:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 1941              		.loc 1 1435 0
 1942 0132 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1943 0136 C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1944 013a 1B68     		ldr	r3, [r3, #0]
 1945 013c 002B     		cmp	r3, #0
 1946 013e 09D0     		beq	.L79
1436:../FreeRTOS/Source/tasks.c **** 				{
1437:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tsk
 1947              		.loc 1 1437 0
 1948 0140 7868     		ldr	r0, [r7, #4]
 1949 0142 40F20001 		movw	r1, #:lower16:xSuspendedTaskList
 1950 0146 C0F20001 		movt	r1, #:upper16:xSuspendedTaskList
 1951 014a BA68     		ldr	r2, [r7, #8]
 1952 014c 4FF05303 		mov	r3, #83
 1953 0150 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1954              	.L79:
1438:../FreeRTOS/Source/tasks.c **** 				}
1439:../FreeRTOS/Source/tasks.c **** 			}
1440:../FreeRTOS/Source/tasks.c **** 			#endif
1441:../FreeRTOS/Source/tasks.c **** 		}
1442:../FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
 1955              		.loc 1 1442 0
 1956 0154 FFF7FEFF 		bl	xTaskResumeAll
1443:../FreeRTOS/Source/tasks.c **** 	}
 1957              		.loc 1 1443 0
 1958 0158 07F11407 		add	r7, r7, #20
 1959 015c BD46     		mov	sp, r7
 1960 015e 90BD     		pop	{r4, r7, pc}
 1961              		.cfi_endproc
 1962              	.LFE127:
 1964              		.section	.text.xTaskGetIdleTaskHandle,"ax",%progbits
 1965              		.align	2
 1966              		.global	xTaskGetIdleTaskHandle
 1967              		.thumb
 1968              		.thumb_func
 1970              	xTaskGetIdleTaskHandle:
 1971              	.LFB128:
1444:../FreeRTOS/Source/tasks.c **** 
1445:../FreeRTOS/Source/tasks.c **** #endif
1446:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1447:../FreeRTOS/Source/tasks.c **** 
1448:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1449:../FreeRTOS/Source/tasks.c **** 
1450:../FreeRTOS/Source/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1451:../FreeRTOS/Source/tasks.c **** 	{
1452:../FreeRTOS/Source/tasks.c **** 		configASSERT( pcBuffer );
1453:../FreeRTOS/Source/tasks.c **** 		configASSERT( ulBufferSize );
1454:../FreeRTOS/Source/tasks.c **** 
1455:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1456:../FreeRTOS/Source/tasks.c **** 		{
1457:../FreeRTOS/Source/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
1458:../FreeRTOS/Source/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1459:../FreeRTOS/Source/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1460:../FreeRTOS/Source/tasks.c **** 			xTracing = pdTRUE;
1461:../FreeRTOS/Source/tasks.c **** 		}
1462:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1463:../FreeRTOS/Source/tasks.c **** 	}
1464:../FreeRTOS/Source/tasks.c **** 
1465:../FreeRTOS/Source/tasks.c **** #endif
1466:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1467:../FreeRTOS/Source/tasks.c **** 
1468:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1469:../FreeRTOS/Source/tasks.c **** 
1470:../FreeRTOS/Source/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1471:../FreeRTOS/Source/tasks.c **** 	{
1472:../FreeRTOS/Source/tasks.c **** 	unsigned long ulBufferLength;
1473:../FreeRTOS/Source/tasks.c **** 
1474:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1475:../FreeRTOS/Source/tasks.c **** 			xTracing = pdFALSE;
1476:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1477:../FreeRTOS/Source/tasks.c **** 
1478:../FreeRTOS/Source/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
1479:../FreeRTOS/Source/tasks.c **** 
1480:../FreeRTOS/Source/tasks.c **** 		return ulBufferLength;
1481:../FreeRTOS/Source/tasks.c **** 	}
1482:../FreeRTOS/Source/tasks.c **** 
1483:../FreeRTOS/Source/tasks.c **** #endif
1484:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1485:../FreeRTOS/Source/tasks.c **** 
1486:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1487:../FreeRTOS/Source/tasks.c **** 
1488:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1489:../FreeRTOS/Source/tasks.c **** 	{
 1972              		.loc 1 1489 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
 1977 0000 80B4     		push	{r7}
 1978              	.LCFI51:
 1979              		.cfi_def_cfa_offset 4
 1980              		.cfi_offset 7, -4
 1981 0002 00AF     		add	r7, sp, #0
 1982              	.LCFI52:
 1983              		.cfi_def_cfa_register 7
1490:../FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1491:../FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1492:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1493:../FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
 1984              		.loc 1 1493 0
 1985 0004 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1986 0008 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1987 000c 1B68     		ldr	r3, [r3, #0]
1494:../FreeRTOS/Source/tasks.c **** 	}
 1988              		.loc 1 1494 0
 1989 000e 1846     		mov	r0, r3
 1990 0010 BD46     		mov	sp, r7
 1991 0012 80BC     		pop	{r7}
 1992 0014 7047     		bx	lr
 1993              		.cfi_endproc
 1994              	.LFE128:
 1996 0016 00BF     		.section	.text.vTaskIncrementTick,"ax",%progbits
 1997              		.align	2
 1998              		.global	vTaskIncrementTick
 1999              		.thumb
 2000              		.thumb_func
 2002              	vTaskIncrementTick:
 2003              	.LFB129:
1495:../FreeRTOS/Source/tasks.c **** 	
1496:../FreeRTOS/Source/tasks.c **** #endif
1497:../FreeRTOS/Source/tasks.c **** 
1498:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1499:../FreeRTOS/Source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1500:../FreeRTOS/Source/tasks.c ****  * documented in task.h
1501:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1502:../FreeRTOS/Source/tasks.c **** 
1503:../FreeRTOS/Source/tasks.c **** void vTaskIncrementTick( void )
1504:../FreeRTOS/Source/tasks.c **** {
 2004              		.loc 1 1504 0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 16
 2007              		@ frame_needed = 1, uses_anonymous_args = 0
 2008 0000 80B5     		push	{r7, lr}
 2009              	.LCFI53:
 2010              		.cfi_def_cfa_offset 8
 2011              		.cfi_offset 14, -4
 2012              		.cfi_offset 7, -8
 2013 0002 84B0     		sub	sp, sp, #16
 2014              	.LCFI54:
 2015              		.cfi_def_cfa_offset 24
 2016 0004 00AF     		add	r7, sp, #0
 2017              	.LCFI55:
 2018              		.cfi_def_cfa_register 7
1505:../FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1506:../FreeRTOS/Source/tasks.c **** 
1507:../FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1508:../FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1509:../FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1510:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2019              		.loc 1 1510 0
 2020 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2021 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2022 000e 1B68     		ldr	r3, [r3, #0]
 2023 0010 002B     		cmp	r3, #0
 2024 0012 40F0C080 		bne	.L82
1511:../FreeRTOS/Source/tasks.c **** 	{
1512:../FreeRTOS/Source/tasks.c **** 		++xTickCount;
 2025              		.loc 1 1512 0
 2026 0016 40F20003 		movw	r3, #:lower16:xTickCount
 2027 001a C0F20003 		movt	r3, #:upper16:xTickCount
 2028 001e 1B68     		ldr	r3, [r3, #0]
 2029 0020 03F10102 		add	r2, r3, #1
 2030 0024 40F20003 		movw	r3, #:lower16:xTickCount
 2031 0028 C0F20003 		movt	r3, #:upper16:xTickCount
 2032 002c 1A60     		str	r2, [r3, #0]
1513:../FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 2033              		.loc 1 1513 0
 2034 002e 40F20003 		movw	r3, #:lower16:xTickCount
 2035 0032 C0F20003 		movt	r3, #:upper16:xTickCount
 2036 0036 1B68     		ldr	r3, [r3, #0]
 2037 0038 002B     		cmp	r3, #0
 2038 003a 40D1     		bne	.L83
 2039              	.LBB4:
1514:../FreeRTOS/Source/tasks.c **** 		{
1515:../FreeRTOS/Source/tasks.c **** 			xList *pxTemp;
1516:../FreeRTOS/Source/tasks.c **** 
1517:../FreeRTOS/Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1518:../FreeRTOS/Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1519:../FreeRTOS/Source/tasks.c **** 			an error! */
1520:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1521:../FreeRTOS/Source/tasks.c **** 			
1522:../FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 2040              		.loc 1 1522 0
 2041 003c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2042 0040 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2043 0044 1B68     		ldr	r3, [r3, #0]
 2044 0046 FB60     		str	r3, [r7, #12]
1523:../FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 2045              		.loc 1 1523 0
 2046 0048 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2047 004c C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2048 0050 1A68     		ldr	r2, [r3, #0]
 2049 0052 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2050 0056 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2051 005a 1A60     		str	r2, [r3, #0]
1524:../FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 2052              		.loc 1 1524 0
 2053 005c 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2054 0060 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2055 0064 FA68     		ldr	r2, [r7, #12]
 2056 0066 1A60     		str	r2, [r3, #0]
1525:../FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
 2057              		.loc 1 1525 0
 2058 0068 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2059 006c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2060 0070 1B68     		ldr	r3, [r3, #0]
 2061 0072 03F10102 		add	r2, r3, #1
 2062 0076 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2063 007a C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2064 007e 1A60     		str	r2, [r3, #0]
1526:../FreeRTOS/Source/tasks.c **** 	
1527:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2065              		.loc 1 1527 0
 2066 0080 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2067 0084 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2068 0088 1B68     		ldr	r3, [r3, #0]
 2069 008a 1B68     		ldr	r3, [r3, #0]
 2070 008c 002B     		cmp	r3, #0
 2071 008e 07D1     		bne	.L84
1528:../FreeRTOS/Source/tasks.c **** 			{
1529:../FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1530:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1531:../FreeRTOS/Source/tasks.c **** 				extremely unlikely that the	
1532:../FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1533:../FreeRTOS/Source/tasks.c **** 				there is an item in the delayed list. */
1534:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 2072              		.loc 1 1534 0
 2073 0090 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2074 0094 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2075 0098 4FF0FF32 		mov	r2, #-1
 2076 009c 1A60     		str	r2, [r3, #0]
 2077 009e 0EE0     		b	.L83
 2078              	.L84:
1535:../FreeRTOS/Source/tasks.c **** 			}
1536:../FreeRTOS/Source/tasks.c **** 			else
1537:../FreeRTOS/Source/tasks.c **** 			{
1538:../FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1539:../FreeRTOS/Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1540:../FreeRTOS/Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1541:../FreeRTOS/Source/tasks.c **** 				from the Blocked state. */
1542:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2079              		.loc 1 1542 0
 2080 00a0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2081 00a4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2082 00a8 1B68     		ldr	r3, [r3, #0]
 2083 00aa DB68     		ldr	r3, [r3, #12]
 2084 00ac DB68     		ldr	r3, [r3, #12]
 2085 00ae BB60     		str	r3, [r7, #8]
1543:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2086              		.loc 1 1543 0
 2087 00b0 BB68     		ldr	r3, [r7, #8]
 2088 00b2 5A68     		ldr	r2, [r3, #4]
 2089 00b4 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2090 00b8 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2091 00bc 1A60     		str	r2, [r3, #0]
 2092              	.L83:
 2093              	.LBE4:
 2094              	.LBB5:
1544:../FreeRTOS/Source/tasks.c **** 			}
1545:../FreeRTOS/Source/tasks.c **** 		}
1546:../FreeRTOS/Source/tasks.c **** 
1547:../FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1548:../FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 2095              		.loc 1 1548 0
 2096 00be 40F20003 		movw	r3, #:lower16:xTickCount
 2097 00c2 C0F20003 		movt	r3, #:upper16:xTickCount
 2098 00c6 1A68     		ldr	r2, [r3, #0]
 2099 00c8 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2100 00cc C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2101 00d0 1B68     		ldr	r3, [r3, #0]
 2102 00d2 9A42     		cmp	r2, r3
 2103 00d4 6BD3     		bcc	.L81
 2104              	.L90:
 2105              		.loc 1 1548 0 is_stmt 0 discriminator 1
 2106 00d6 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2107 00da C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2108 00de 1B68     		ldr	r3, [r3, #0]
 2109 00e0 1B68     		ldr	r3, [r3, #0]
 2110 00e2 002B     		cmp	r3, #0
 2111 00e4 07D1     		bne	.L86
 2112              		.loc 1 1548 0 discriminator 2
 2113 00e6 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2114 00ea C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2115 00ee 4FF0FF32 		mov	r2, #-1
 2116 00f2 1A60     		str	r2, [r3, #0]
 2117 00f4 5BE0     		b	.L81
 2118              	.L86:
 2119              		.loc 1 1548 0 discriminator 3
 2120 00f6 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2121 00fa C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2122 00fe 1B68     		ldr	r3, [r3, #0]
 2123 0100 DB68     		ldr	r3, [r3, #12]
 2124 0102 DB68     		ldr	r3, [r3, #12]
 2125 0104 BB60     		str	r3, [r7, #8]
 2126 0106 BB68     		ldr	r3, [r7, #8]
 2127 0108 5B68     		ldr	r3, [r3, #4]
 2128 010a 7B60     		str	r3, [r7, #4]
 2129 010c 40F20003 		movw	r3, #:lower16:xTickCount
 2130 0110 C0F20003 		movt	r3, #:upper16:xTickCount
 2131 0114 1A68     		ldr	r2, [r3, #0]
 2132 0116 7B68     		ldr	r3, [r7, #4]
 2133 0118 9A42     		cmp	r2, r3
 2134 011a 06D2     		bcs	.L87
 2135              		.loc 1 1548 0 discriminator 4
 2136 011c 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2137 0120 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2138 0124 7A68     		ldr	r2, [r7, #4]
 2139 0126 1A60     		str	r2, [r3, #0]
 2140 0128 41E0     		b	.L81
 2141              	.L87:
 2142              		.loc 1 1548 0 discriminator 5
 2143 012a BB68     		ldr	r3, [r7, #8]
 2144 012c 03F10403 		add	r3, r3, #4
 2145 0130 1846     		mov	r0, r3
 2146 0132 FFF7FEFF 		bl	vListRemove
 2147 0136 BB68     		ldr	r3, [r7, #8]
 2148 0138 9B6A     		ldr	r3, [r3, #40]
 2149 013a 002B     		cmp	r3, #0
 2150 013c 05D0     		beq	.L88
 2151              		.loc 1 1548 0 discriminator 6
 2152 013e BB68     		ldr	r3, [r7, #8]
 2153 0140 03F11803 		add	r3, r3, #24
 2154 0144 1846     		mov	r0, r3
 2155 0146 FFF7FEFF 		bl	vListRemove
 2156              	.L88:
 2157              		.loc 1 1548 0 discriminator 7
 2158 014a BB68     		ldr	r3, [r7, #8]
 2159 014c DA6A     		ldr	r2, [r3, #44]
 2160 014e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2161 0152 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2162 0156 1B68     		ldr	r3, [r3, #0]
 2163 0158 9A42     		cmp	r2, r3
 2164 015a 06D9     		bls	.L89
 2165              		.loc 1 1548 0 discriminator 8
 2166 015c BB68     		ldr	r3, [r7, #8]
 2167 015e DA6A     		ldr	r2, [r3, #44]
 2168 0160 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2169 0164 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2170 0168 1A60     		str	r2, [r3, #0]
 2171              	.L89:
 2172              		.loc 1 1548 0 discriminator 9
 2173 016a BB68     		ldr	r3, [r7, #8]
 2174 016c DA6A     		ldr	r2, [r3, #44]
 2175 016e 1346     		mov	r3, r2
 2176 0170 4FEA8303 		lsl	r3, r3, #2
 2177 0174 9B18     		adds	r3, r3, r2
 2178 0176 4FEA8303 		lsl	r3, r3, #2
 2179 017a 1A46     		mov	r2, r3
 2180 017c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2181 0180 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2182 0184 D218     		adds	r2, r2, r3
 2183 0186 BB68     		ldr	r3, [r7, #8]
 2184 0188 03F10403 		add	r3, r3, #4
 2185 018c 1046     		mov	r0, r2
 2186 018e 1946     		mov	r1, r3
 2187 0190 FFF7FEFF 		bl	vListInsertEnd
 2188 0194 9FE7     		b	.L90
 2189              	.L82:
 2190              	.LBE5:
1549:../FreeRTOS/Source/tasks.c **** 	}
1550:../FreeRTOS/Source/tasks.c **** 	else
1551:../FreeRTOS/Source/tasks.c **** 	{
1552:../FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
 2191              		.loc 1 1552 0 is_stmt 1
 2192 0196 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2193 019a C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2194 019e 1B68     		ldr	r3, [r3, #0]
 2195 01a0 03F10102 		add	r2, r3, #1
 2196 01a4 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2197 01a8 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2198 01ac 1A60     		str	r2, [r3, #0]
 2199              	.L81:
1553:../FreeRTOS/Source/tasks.c **** 
1554:../FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1555:../FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1556:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1557:../FreeRTOS/Source/tasks.c **** 		{
1558:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1559:../FreeRTOS/Source/tasks.c **** 		}
1560:../FreeRTOS/Source/tasks.c **** 		#endif
1561:../FreeRTOS/Source/tasks.c **** 	}
1562:../FreeRTOS/Source/tasks.c **** 
1563:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1564:../FreeRTOS/Source/tasks.c **** 	{
1565:../FreeRTOS/Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1566:../FreeRTOS/Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1567:../FreeRTOS/Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1568:../FreeRTOS/Source/tasks.c **** 		{
1569:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1570:../FreeRTOS/Source/tasks.c **** 		}
1571:../FreeRTOS/Source/tasks.c **** 	}
1572:../FreeRTOS/Source/tasks.c **** 	#endif
1573:../FreeRTOS/Source/tasks.c **** 
1574:../FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1575:../FreeRTOS/Source/tasks.c **** }
 2200              		.loc 1 1575 0
 2201 01ae 07F11007 		add	r7, r7, #16
 2202 01b2 BD46     		mov	sp, r7
 2203 01b4 80BD     		pop	{r7, pc}
 2204              		.cfi_endproc
 2205              	.LFE129:
 2207 01b6 00BF     		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 2208              		.align	2
 2209              		.global	vTaskSetApplicationTaskTag
 2210              		.thumb
 2211              		.thumb_func
 2213              	vTaskSetApplicationTaskTag:
 2214              	.LFB130:
1576:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1577:../FreeRTOS/Source/tasks.c **** 
1578:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1579:../FreeRTOS/Source/tasks.c **** 
1580:../FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1581:../FreeRTOS/Source/tasks.c **** 	{
 2215              		.loc 1 1581 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 16
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0000 80B5     		push	{r7, lr}
 2220              	.LCFI56:
 2221              		.cfi_def_cfa_offset 8
 2222              		.cfi_offset 14, -4
 2223              		.cfi_offset 7, -8
 2224 0002 84B0     		sub	sp, sp, #16
 2225              	.LCFI57:
 2226              		.cfi_def_cfa_offset 24
 2227 0004 00AF     		add	r7, sp, #0
 2228              	.LCFI58:
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
 2231 0008 3960     		str	r1, [r7, #0]
1582:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1583:../FreeRTOS/Source/tasks.c **** 
1584:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1585:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2232              		.loc 1 1585 0
 2233 000a 7B68     		ldr	r3, [r7, #4]
 2234 000c 002B     		cmp	r3, #0
 2235 000e 06D1     		bne	.L93
1586:../FreeRTOS/Source/tasks.c **** 		{
1587:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2236              		.loc 1 1587 0
 2237 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2238 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2239 0018 1B68     		ldr	r3, [r3, #0]
 2240 001a FB60     		str	r3, [r7, #12]
 2241 001c 01E0     		b	.L94
 2242              	.L93:
1588:../FreeRTOS/Source/tasks.c **** 		}
1589:../FreeRTOS/Source/tasks.c **** 		else
1590:../FreeRTOS/Source/tasks.c **** 		{
1591:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2243              		.loc 1 1591 0
 2244 001e 7B68     		ldr	r3, [r7, #4]
 2245 0020 FB60     		str	r3, [r7, #12]
 2246              	.L94:
1592:../FreeRTOS/Source/tasks.c **** 		}
1593:../FreeRTOS/Source/tasks.c **** 
1594:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1595:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1596:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2247              		.loc 1 1596 0
 2248 0022 FFF7FEFF 		bl	vPortEnterCritical
1597:../FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2249              		.loc 1 1597 0
 2250 0026 FB68     		ldr	r3, [r7, #12]
 2251 0028 3A68     		ldr	r2, [r7, #0]
 2252 002a 9A64     		str	r2, [r3, #72]
1598:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2253              		.loc 1 1598 0
 2254 002c FFF7FEFF 		bl	vPortExitCritical
1599:../FreeRTOS/Source/tasks.c **** 	}
 2255              		.loc 1 1599 0
 2256 0030 07F11007 		add	r7, r7, #16
 2257 0034 BD46     		mov	sp, r7
 2258 0036 80BD     		pop	{r7, pc}
 2259              		.cfi_endproc
 2260              	.LFE130:
 2262              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2263              		.align	2
 2264              		.global	xTaskGetApplicationTaskTag
 2265              		.thumb
 2266              		.thumb_func
 2268              	xTaskGetApplicationTaskTag:
 2269              	.LFB131:
1600:../FreeRTOS/Source/tasks.c **** 
1601:../FreeRTOS/Source/tasks.c **** #endif
1602:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1603:../FreeRTOS/Source/tasks.c **** 
1604:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1605:../FreeRTOS/Source/tasks.c **** 
1606:../FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1607:../FreeRTOS/Source/tasks.c **** 	{
 2270              		.loc 1 1607 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 16
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274 0000 80B5     		push	{r7, lr}
 2275              	.LCFI59:
 2276              		.cfi_def_cfa_offset 8
 2277              		.cfi_offset 14, -4
 2278              		.cfi_offset 7, -8
 2279 0002 84B0     		sub	sp, sp, #16
 2280              	.LCFI60:
 2281              		.cfi_def_cfa_offset 24
 2282 0004 00AF     		add	r7, sp, #0
 2283              	.LCFI61:
 2284              		.cfi_def_cfa_register 7
 2285 0006 7860     		str	r0, [r7, #4]
1608:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1609:../FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1610:../FreeRTOS/Source/tasks.c **** 
1611:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1612:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2286              		.loc 1 1612 0
 2287 0008 7B68     		ldr	r3, [r7, #4]
 2288 000a 002B     		cmp	r3, #0
 2289 000c 06D1     		bne	.L96
1613:../FreeRTOS/Source/tasks.c **** 		{
1614:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2290              		.loc 1 1614 0
 2291 000e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2292 0012 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2293 0016 1B68     		ldr	r3, [r3, #0]
 2294 0018 FB60     		str	r3, [r7, #12]
 2295 001a 01E0     		b	.L97
 2296              	.L96:
1615:../FreeRTOS/Source/tasks.c **** 		}
1616:../FreeRTOS/Source/tasks.c **** 		else
1617:../FreeRTOS/Source/tasks.c **** 		{
1618:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2297              		.loc 1 1618 0
 2298 001c 7B68     		ldr	r3, [r7, #4]
 2299 001e FB60     		str	r3, [r7, #12]
 2300              	.L97:
1619:../FreeRTOS/Source/tasks.c **** 		}
1620:../FreeRTOS/Source/tasks.c **** 
1621:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1622:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1623:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2301              		.loc 1 1623 0
 2302 0020 FFF7FEFF 		bl	vPortEnterCritical
1624:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
 2303              		.loc 1 1624 0
 2304 0024 FB68     		ldr	r3, [r7, #12]
 2305 0026 9B6C     		ldr	r3, [r3, #72]
 2306 0028 BB60     		str	r3, [r7, #8]
1625:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2307              		.loc 1 1625 0
 2308 002a FFF7FEFF 		bl	vPortExitCritical
1626:../FreeRTOS/Source/tasks.c **** 
1627:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 2309              		.loc 1 1627 0
 2310 002e BB68     		ldr	r3, [r7, #8]
1628:../FreeRTOS/Source/tasks.c **** 	}
 2311              		.loc 1 1628 0
 2312 0030 1846     		mov	r0, r3
 2313 0032 07F11007 		add	r7, r7, #16
 2314 0036 BD46     		mov	sp, r7
 2315 0038 80BD     		pop	{r7, pc}
 2316              		.cfi_endproc
 2317              	.LFE131:
 2319 003a 00BF     		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2320              		.align	2
 2321              		.global	xTaskCallApplicationTaskHook
 2322              		.thumb
 2323              		.thumb_func
 2325              	xTaskCallApplicationTaskHook:
 2326              	.LFB132:
1629:../FreeRTOS/Source/tasks.c **** 
1630:../FreeRTOS/Source/tasks.c **** #endif
1631:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1632:../FreeRTOS/Source/tasks.c **** 
1633:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1634:../FreeRTOS/Source/tasks.c **** 
1635:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1636:../FreeRTOS/Source/tasks.c **** 	{
 2327              		.loc 1 1636 0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 16
 2330              		@ frame_needed = 1, uses_anonymous_args = 0
 2331 0000 80B5     		push	{r7, lr}
 2332              	.LCFI62:
 2333              		.cfi_def_cfa_offset 8
 2334              		.cfi_offset 14, -4
 2335              		.cfi_offset 7, -8
 2336 0002 84B0     		sub	sp, sp, #16
 2337              	.LCFI63:
 2338              		.cfi_def_cfa_offset 24
 2339 0004 00AF     		add	r7, sp, #0
 2340              	.LCFI64:
 2341              		.cfi_def_cfa_register 7
 2342 0006 7860     		str	r0, [r7, #4]
 2343 0008 3960     		str	r1, [r7, #0]
1637:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1638:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1639:../FreeRTOS/Source/tasks.c **** 
1640:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1641:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2344              		.loc 1 1641 0
 2345 000a 7B68     		ldr	r3, [r7, #4]
 2346 000c 002B     		cmp	r3, #0
 2347 000e 06D1     		bne	.L99
1642:../FreeRTOS/Source/tasks.c **** 		{
1643:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2348              		.loc 1 1643 0
 2349 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2350 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2351 0018 1B68     		ldr	r3, [r3, #0]
 2352 001a FB60     		str	r3, [r7, #12]
 2353 001c 01E0     		b	.L100
 2354              	.L99:
1644:../FreeRTOS/Source/tasks.c **** 		}
1645:../FreeRTOS/Source/tasks.c **** 		else
1646:../FreeRTOS/Source/tasks.c **** 		{
1647:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2355              		.loc 1 1647 0
 2356 001e 7B68     		ldr	r3, [r7, #4]
 2357 0020 FB60     		str	r3, [r7, #12]
 2358              	.L100:
1648:../FreeRTOS/Source/tasks.c **** 		}
1649:../FreeRTOS/Source/tasks.c **** 
1650:../FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 2359              		.loc 1 1650 0
 2360 0022 FB68     		ldr	r3, [r7, #12]
 2361 0024 9B6C     		ldr	r3, [r3, #72]
 2362 0026 002B     		cmp	r3, #0
 2363 0028 06D0     		beq	.L101
1651:../FreeRTOS/Source/tasks.c **** 		{
1652:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 2364              		.loc 1 1652 0
 2365 002a FB68     		ldr	r3, [r7, #12]
 2366 002c 9B6C     		ldr	r3, [r3, #72]
 2367 002e 3868     		ldr	r0, [r7, #0]
 2368 0030 9847     		blx	r3
 2369 0032 0346     		mov	r3, r0
 2370 0034 BB60     		str	r3, [r7, #8]
 2371 0036 02E0     		b	.L102
 2372              	.L101:
1653:../FreeRTOS/Source/tasks.c **** 		}
1654:../FreeRTOS/Source/tasks.c **** 		else
1655:../FreeRTOS/Source/tasks.c **** 		{
1656:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2373              		.loc 1 1656 0
 2374 0038 4FF00003 		mov	r3, #0
 2375 003c BB60     		str	r3, [r7, #8]
 2376              	.L102:
1657:../FreeRTOS/Source/tasks.c **** 		}
1658:../FreeRTOS/Source/tasks.c **** 
1659:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 2377              		.loc 1 1659 0
 2378 003e BB68     		ldr	r3, [r7, #8]
1660:../FreeRTOS/Source/tasks.c **** 	}
 2379              		.loc 1 1660 0
 2380 0040 1846     		mov	r0, r3
 2381 0042 07F11007 		add	r7, r7, #16
 2382 0046 BD46     		mov	sp, r7
 2383 0048 80BD     		pop	{r7, pc}
 2384              		.cfi_endproc
 2385              	.LFE132:
 2387 004a 00BF     		.section	.text.vTaskSwitchContext,"ax",%progbits
 2388              		.align	2
 2389              		.global	vTaskSwitchContext
 2390              		.thumb
 2391              		.thumb_func
 2393              	vTaskSwitchContext:
 2394              	.LFB133:
1661:../FreeRTOS/Source/tasks.c **** 
1662:../FreeRTOS/Source/tasks.c **** #endif
1663:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1664:../FreeRTOS/Source/tasks.c **** 
1665:../FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1666:../FreeRTOS/Source/tasks.c **** {
 2395              		.loc 1 1666 0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 8
 2398              		@ frame_needed = 1, uses_anonymous_args = 0
 2399 0000 80B5     		push	{r7, lr}
 2400              	.LCFI65:
 2401              		.cfi_def_cfa_offset 8
 2402              		.cfi_offset 14, -4
 2403              		.cfi_offset 7, -8
 2404 0002 82B0     		sub	sp, sp, #8
 2405              	.LCFI66:
 2406              		.cfi_def_cfa_offset 16
 2407 0004 00AF     		add	r7, sp, #0
 2408              	.LCFI67:
 2409              		.cfi_def_cfa_register 7
1667:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 2410              		.loc 1 1667 0
 2411 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2412 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2413 000e 1B68     		ldr	r3, [r3, #0]
 2414 0010 002B     		cmp	r3, #0
 2415 0012 07D0     		beq	.L104
1668:../FreeRTOS/Source/tasks.c **** 	{
1669:../FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1670:../FreeRTOS/Source/tasks.c **** 		switch. */
1671:../FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
 2416              		.loc 1 1671 0
 2417 0014 40F20003 		movw	r3, #:lower16:xMissedYield
 2418 0018 C0F20003 		movt	r3, #:upper16:xMissedYield
 2419 001c 4FF00102 		mov	r2, #1
 2420 0020 1A60     		str	r2, [r3, #0]
 2421 0022 89E0     		b	.L103
 2422              	.L104:
 2423              	.LBB6:
1672:../FreeRTOS/Source/tasks.c **** 	}
1673:../FreeRTOS/Source/tasks.c **** 	else
1674:../FreeRTOS/Source/tasks.c **** 	{
1675:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1676:../FreeRTOS/Source/tasks.c **** 	
1677:../FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1678:../FreeRTOS/Source/tasks.c **** 		{
1679:../FreeRTOS/Source/tasks.c **** 			unsigned long ulTempCounter;
1680:../FreeRTOS/Source/tasks.c **** 			
1681:../FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1682:../FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1683:../FreeRTOS/Source/tasks.c **** 				#else
1684:../FreeRTOS/Source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 2424              		.loc 1 1684 0
 2425 0024 FFF7FEFF 		bl	get_us_time
 2426 0028 0246     		mov	r2, r0
 2427 002a 0B46     		mov	r3, r1
 2428 002c 1346     		mov	r3, r2
 2429 002e 7B60     		str	r3, [r7, #4]
1685:../FreeRTOS/Source/tasks.c **** 				#endif
1686:../FreeRTOS/Source/tasks.c **** 	
1687:../FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1688:../FreeRTOS/Source/tasks.c **** 				time so far.  The time the task started running was stored in
1689:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1690:../FreeRTOS/Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1691:../FreeRTOS/Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1692:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 2430              		.loc 1 1692 0
 2431 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2432 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2433 0038 1A68     		ldr	r2, [r3, #0]
 2434 003a D16C     		ldr	r1, [r2, #76]
 2435 003c 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2436 0040 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2437 0044 1B68     		ldr	r3, [r3, #0]
 2438 0046 7868     		ldr	r0, [r7, #4]
 2439 0048 C31A     		subs	r3, r0, r3
 2440 004a CB18     		adds	r3, r1, r3
 2441 004c D364     		str	r3, [r2, #76]
1693:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
 2442              		.loc 1 1693 0
 2443 004e 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2444 0052 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2445 0056 7A68     		ldr	r2, [r7, #4]
 2446 0058 1A60     		str	r2, [r3, #0]
 2447              	.LBE6:
1694:../FreeRTOS/Source/tasks.c **** 		}
1695:../FreeRTOS/Source/tasks.c **** 		#endif
1696:../FreeRTOS/Source/tasks.c **** 	
1697:../FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 2448              		.loc 1 1697 0
 2449 005a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2450 005e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2451 0062 1B68     		ldr	r3, [r3, #0]
 2452 0064 1A68     		ldr	r2, [r3, #0]
 2453 0066 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2454 006a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2455 006e 1B68     		ldr	r3, [r3, #0]
 2456 0070 1B6B     		ldr	r3, [r3, #48]
 2457 0072 9A42     		cmp	r2, r3
 2458 0074 1DD8     		bhi	.L110
 2459              		.loc 1 1697 0 is_stmt 0 discriminator 1
 2460 0076 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2461 007a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2462 007e 1A68     		ldr	r2, [r3, #0]
 2463 0080 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2464 0084 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2465 0088 1B68     		ldr	r3, [r3, #0]
 2466 008a 03F13403 		add	r3, r3, #52
 2467 008e 1046     		mov	r0, r2
 2468 0090 1946     		mov	r1, r3
 2469 0092 FFF7FEFF 		bl	vApplicationStackOverflowHook
1698:../FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1699:../FreeRTOS/Source/tasks.c **** 	
1700:../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2470              		.loc 1 1701 0 is_stmt 1 discriminator 1
 2471 0096 0CE0     		b	.L110
 2472              	.L108:
1702:../FreeRTOS/Source/tasks.c **** 		{
1703:../FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );
1704:../FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;
 2473              		.loc 1 1704 0
 2474 0098 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2475 009c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2476 00a0 1B68     		ldr	r3, [r3, #0]
 2477 00a2 03F1FF32 		add	r2, r3, #-1
 2478 00a6 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2479 00aa C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2480 00ae 1A60     		str	r2, [r3, #0]
 2481 00b0 00E0     		b	.L107
 2482              	.L110:
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2483              		.loc 1 1701 0
 2484 00b2 00BF     		nop
 2485              	.L107:
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2486              		.loc 1 1701 0 is_stmt 0 discriminator 1
 2487 00b4 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2488 00b8 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2489 00bc 1A68     		ldr	r2, [r3, #0]
 2490 00be 1346     		mov	r3, r2
 2491 00c0 4FEA8303 		lsl	r3, r3, #2
 2492 00c4 9B18     		adds	r3, r3, r2
 2493 00c6 4FEA8303 		lsl	r3, r3, #2
 2494 00ca 1A46     		mov	r2, r3
 2495 00cc 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2496 00d0 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2497 00d4 D318     		adds	r3, r2, r3
 2498 00d6 1B68     		ldr	r3, [r3, #0]
 2499 00d8 002B     		cmp	r3, #0
 2500 00da DDD0     		beq	.L108
 2501              	.LBB7:
1705:../FreeRTOS/Source/tasks.c **** 		}
1706:../FreeRTOS/Source/tasks.c **** 	
1707:../FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1708:../FreeRTOS/Source/tasks.c **** 		same priority get an equal share of the processor time. */
1709:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 2502              		.loc 1 1709 0 is_stmt 1
 2503 00dc 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2504 00e0 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2505 00e4 1A68     		ldr	r2, [r3, #0]
 2506 00e6 1346     		mov	r3, r2
 2507 00e8 4FEA8303 		lsl	r3, r3, #2
 2508 00ec 9B18     		adds	r3, r3, r2
 2509 00ee 4FEA8303 		lsl	r3, r3, #2
 2510 00f2 1A46     		mov	r2, r3
 2511 00f4 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2512 00f8 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2513 00fc D318     		adds	r3, r2, r3
 2514 00fe 3B60     		str	r3, [r7, #0]
 2515 0100 3B68     		ldr	r3, [r7, #0]
 2516 0102 5B68     		ldr	r3, [r3, #4]
 2517 0104 5B68     		ldr	r3, [r3, #4]
 2518 0106 1A46     		mov	r2, r3
 2519 0108 3B68     		ldr	r3, [r7, #0]
 2520 010a 5A60     		str	r2, [r3, #4]
 2521 010c 3B68     		ldr	r3, [r7, #0]
 2522 010e 5A68     		ldr	r2, [r3, #4]
 2523 0110 3B68     		ldr	r3, [r7, #0]
 2524 0112 03F10803 		add	r3, r3, #8
 2525 0116 9A42     		cmp	r2, r3
 2526 0118 05D1     		bne	.L109
 2527              		.loc 1 1709 0 is_stmt 0 discriminator 1
 2528 011a 3B68     		ldr	r3, [r7, #0]
 2529 011c 5B68     		ldr	r3, [r3, #4]
 2530 011e 5B68     		ldr	r3, [r3, #4]
 2531 0120 1A46     		mov	r2, r3
 2532 0122 3B68     		ldr	r3, [r7, #0]
 2533 0124 5A60     		str	r2, [r3, #4]
 2534              	.L109:
 2535              		.loc 1 1709 0 discriminator 2
 2536 0126 3B68     		ldr	r3, [r7, #0]
 2537 0128 5B68     		ldr	r3, [r3, #4]
 2538 012a DB68     		ldr	r3, [r3, #12]
 2539 012c 1A46     		mov	r2, r3
 2540 012e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2541 0132 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2542 0136 1A60     		str	r2, [r3, #0]
 2543              	.L103:
 2544              	.LBE7:
1710:../FreeRTOS/Source/tasks.c **** 	
1711:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
1712:../FreeRTOS/Source/tasks.c **** 		vWriteTraceToBuffer();
1713:../FreeRTOS/Source/tasks.c **** 	}
1714:../FreeRTOS/Source/tasks.c **** }
 2545              		.loc 1 1714 0 is_stmt 1
 2546 0138 07F10807 		add	r7, r7, #8
 2547 013c BD46     		mov	sp, r7
 2548 013e 80BD     		pop	{r7, pc}
 2549              		.cfi_endproc
 2550              	.LFE133:
 2552              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2553              		.align	2
 2554              		.global	vTaskPlaceOnEventList
 2555              		.thumb
 2556              		.thumb_func
 2558              	vTaskPlaceOnEventList:
 2559              	.LFB134:
1715:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1716:../FreeRTOS/Source/tasks.c **** 
1717:../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1718:../FreeRTOS/Source/tasks.c **** {
 2560              		.loc 1 1718 0
 2561              		.cfi_startproc
 2562              		@ args = 0, pretend = 0, frame = 16
 2563              		@ frame_needed = 1, uses_anonymous_args = 0
 2564 0000 80B5     		push	{r7, lr}
 2565              	.LCFI68:
 2566              		.cfi_def_cfa_offset 8
 2567              		.cfi_offset 14, -4
 2568              		.cfi_offset 7, -8
 2569 0002 84B0     		sub	sp, sp, #16
 2570              	.LCFI69:
 2571              		.cfi_def_cfa_offset 24
 2572 0004 00AF     		add	r7, sp, #0
 2573              	.LCFI70:
 2574              		.cfi_def_cfa_register 7
 2575 0006 7860     		str	r0, [r7, #4]
 2576 0008 3960     		str	r1, [r7, #0]
1719:../FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1720:../FreeRTOS/Source/tasks.c **** 
1721:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1722:../FreeRTOS/Source/tasks.c **** 
1723:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1724:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1725:../FreeRTOS/Source/tasks.c **** 
1726:../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1727:../FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1728:../FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1729:../FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2577              		.loc 1 1729 0
 2578 000a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2579 000e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2580 0012 1B68     		ldr	r3, [r3, #0]
 2581 0014 03F11803 		add	r3, r3, #24
 2582 0018 7868     		ldr	r0, [r7, #4]
 2583 001a 1946     		mov	r1, r3
 2584 001c FFF7FEFF 		bl	vListInsert
1730:../FreeRTOS/Source/tasks.c **** 
1731:../FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1732:../FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1733:../FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1734:../FreeRTOS/Source/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2585              		.loc 1 1734 0
 2586 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2587 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2588 0028 1B68     		ldr	r3, [r3, #0]
 2589 002a 03F10403 		add	r3, r3, #4
 2590 002e 1846     		mov	r0, r3
 2591 0030 FFF7FEFF 		bl	vListRemove
1735:../FreeRTOS/Source/tasks.c **** 
1736:../FreeRTOS/Source/tasks.c **** 
1737:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1738:../FreeRTOS/Source/tasks.c **** 	{
1739:../FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2592              		.loc 1 1739 0
 2593 0034 3B68     		ldr	r3, [r7, #0]
 2594 0036 B3F1FF3F 		cmp	r3, #-1
 2595 003a 0ED1     		bne	.L112
1740:../FreeRTOS/Source/tasks.c **** 		{
1741:../FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1742:../FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1743:../FreeRTOS/Source/tasks.c **** 			indefinitely. */
1744:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2596              		.loc 1 1744 0
 2597 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2598 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2599 0044 1B68     		ldr	r3, [r3, #0]
 2600 0046 03F10403 		add	r3, r3, #4
 2601 004a 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 2602 004e C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 2603 0052 1946     		mov	r1, r3
 2604 0054 FFF7FEFF 		bl	vListInsertEnd
 2605 0058 0AE0     		b	.L111
 2606              	.L112:
1745:../FreeRTOS/Source/tasks.c **** 		}
1746:../FreeRTOS/Source/tasks.c **** 		else
1747:../FreeRTOS/Source/tasks.c **** 		{
1748:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1749:../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1750:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2607              		.loc 1 1750 0
 2608 005a 40F20003 		movw	r3, #:lower16:xTickCount
 2609 005e C0F20003 		movt	r3, #:upper16:xTickCount
 2610 0062 1A68     		ldr	r2, [r3, #0]
 2611 0064 3B68     		ldr	r3, [r7, #0]
 2612 0066 D318     		adds	r3, r2, r3
 2613 0068 FB60     		str	r3, [r7, #12]
1751:../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2614              		.loc 1 1751 0
 2615 006a F868     		ldr	r0, [r7, #12]
 2616 006c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2617              	.L111:
1752:../FreeRTOS/Source/tasks.c **** 		}
1753:../FreeRTOS/Source/tasks.c **** 	}
1754:../FreeRTOS/Source/tasks.c **** 	#else
1755:../FreeRTOS/Source/tasks.c **** 	{
1756:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1757:../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1758:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1759:../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1760:../FreeRTOS/Source/tasks.c **** 	}
1761:../FreeRTOS/Source/tasks.c **** 	#endif
1762:../FreeRTOS/Source/tasks.c **** }
 2618              		.loc 1 1762 0
 2619 0070 07F11007 		add	r7, r7, #16
 2620 0074 BD46     		mov	sp, r7
 2621 0076 80BD     		pop	{r7, pc}
 2622              		.cfi_endproc
 2623              	.LFE134:
 2625              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2626              		.align	2
 2627              		.global	xTaskRemoveFromEventList
 2628              		.thumb
 2629              		.thumb_func
 2631              	xTaskRemoveFromEventList:
 2632              	.LFB135:
1763:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1764:../FreeRTOS/Source/tasks.c **** 
1765:../FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1766:../FreeRTOS/Source/tasks.c **** 
1767:../FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1768:../FreeRTOS/Source/tasks.c **** 	{
1769:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1770:../FreeRTOS/Source/tasks.c **** 
1771:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1772:../FreeRTOS/Source/tasks.c **** 
1773:../FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1774:../FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1775:../FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1776:../FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1777:../FreeRTOS/Source/tasks.c **** 
1778:../FreeRTOS/Source/tasks.c **** 	
1779:../FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1780:../FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1781:../FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1782:../FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1783:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1784:../FreeRTOS/Source/tasks.c **** 
1785:../FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1786:../FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1787:../FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1788:../FreeRTOS/Source/tasks.c **** 		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
1789:../FreeRTOS/Source/tasks.c **** 
1790:../FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1791:../FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1792:../FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1793:../FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1794:../FreeRTOS/Source/tasks.c **** 	}
1795:../FreeRTOS/Source/tasks.c **** 	
1796:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1797:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:../FreeRTOS/Source/tasks.c **** 
1799:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1800:../FreeRTOS/Source/tasks.c **** {
 2633              		.loc 1 1800 0
 2634              		.cfi_startproc
 2635              		@ args = 0, pretend = 0, frame = 16
 2636              		@ frame_needed = 1, uses_anonymous_args = 0
 2637 0000 80B5     		push	{r7, lr}
 2638              	.LCFI71:
 2639              		.cfi_def_cfa_offset 8
 2640              		.cfi_offset 14, -4
 2641              		.cfi_offset 7, -8
 2642 0002 84B0     		sub	sp, sp, #16
 2643              	.LCFI72:
 2644              		.cfi_def_cfa_offset 24
 2645 0004 00AF     		add	r7, sp, #0
 2646              	.LCFI73:
 2647              		.cfi_def_cfa_register 7
 2648 0006 7860     		str	r0, [r7, #4]
1801:../FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1802:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1803:../FreeRTOS/Source/tasks.c **** 
1804:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1805:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1806:../FreeRTOS/Source/tasks.c **** 
1807:../FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1808:../FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1809:../FreeRTOS/Source/tasks.c **** 	it to the ready list.
1810:../FreeRTOS/Source/tasks.c **** 
1811:../FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1812:../FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1813:../FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1814:../FreeRTOS/Source/tasks.c **** 	
1815:../FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1816:../FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1817:../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2649              		.loc 1 1817 0
 2650 0008 7B68     		ldr	r3, [r7, #4]
 2651 000a DB68     		ldr	r3, [r3, #12]
 2652 000c DB68     		ldr	r3, [r3, #12]
 2653 000e BB60     		str	r3, [r7, #8]
1818:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1819:../FreeRTOS/Source/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2654              		.loc 1 1819 0
 2655 0010 BB68     		ldr	r3, [r7, #8]
 2656 0012 03F11803 		add	r3, r3, #24
 2657 0016 1846     		mov	r0, r3
 2658 0018 FFF7FEFF 		bl	vListRemove
1820:../FreeRTOS/Source/tasks.c **** 
1821:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2659              		.loc 1 1821 0
 2660 001c 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2661 0020 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2662 0024 1B68     		ldr	r3, [r3, #0]
 2663 0026 002B     		cmp	r3, #0
 2664 0028 2BD1     		bne	.L115
1822:../FreeRTOS/Source/tasks.c **** 	{
1823:../FreeRTOS/Source/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2665              		.loc 1 1823 0
 2666 002a BB68     		ldr	r3, [r7, #8]
 2667 002c 03F10403 		add	r3, r3, #4
 2668 0030 1846     		mov	r0, r3
 2669 0032 FFF7FEFF 		bl	vListRemove
1824:../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2670              		.loc 1 1824 0
 2671 0036 BB68     		ldr	r3, [r7, #8]
 2672 0038 DA6A     		ldr	r2, [r3, #44]
 2673 003a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2674 003e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2675 0042 1B68     		ldr	r3, [r3, #0]
 2676 0044 9A42     		cmp	r2, r3
 2677 0046 06D9     		bls	.L116
 2678              		.loc 1 1824 0 is_stmt 0 discriminator 1
 2679 0048 BB68     		ldr	r3, [r7, #8]
 2680 004a DA6A     		ldr	r2, [r3, #44]
 2681 004c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2682 0050 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2683 0054 1A60     		str	r2, [r3, #0]
 2684              	.L116:
 2685              		.loc 1 1824 0 discriminator 2
 2686 0056 BB68     		ldr	r3, [r7, #8]
 2687 0058 DA6A     		ldr	r2, [r3, #44]
 2688 005a 1346     		mov	r3, r2
 2689 005c 4FEA8303 		lsl	r3, r3, #2
 2690 0060 9B18     		adds	r3, r3, r2
 2691 0062 4FEA8303 		lsl	r3, r3, #2
 2692 0066 1A46     		mov	r2, r3
 2693 0068 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2694 006c C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2695 0070 D218     		adds	r2, r2, r3
 2696 0072 BB68     		ldr	r3, [r7, #8]
 2697 0074 03F10403 		add	r3, r3, #4
 2698 0078 1046     		mov	r0, r2
 2699 007a 1946     		mov	r1, r3
 2700 007c FFF7FEFF 		bl	vListInsertEnd
 2701 0080 09E0     		b	.L117
 2702              	.L115:
1825:../FreeRTOS/Source/tasks.c **** 	}
1826:../FreeRTOS/Source/tasks.c **** 	else
1827:../FreeRTOS/Source/tasks.c **** 	{
1828:../FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1829:../FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1830:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2703              		.loc 1 1830 0 is_stmt 1
 2704 0082 BB68     		ldr	r3, [r7, #8]
 2705 0084 03F11803 		add	r3, r3, #24
 2706 0088 40F20000 		movw	r0, #:lower16:xPendingReadyList
 2707 008c C0F20000 		movt	r0, #:upper16:xPendingReadyList
 2708 0090 1946     		mov	r1, r3
 2709 0092 FFF7FEFF 		bl	vListInsertEnd
 2710              	.L117:
1831:../FreeRTOS/Source/tasks.c **** 	}
1832:../FreeRTOS/Source/tasks.c **** 
1833:../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2711              		.loc 1 1833 0
 2712 0096 BB68     		ldr	r3, [r7, #8]
 2713 0098 DA6A     		ldr	r2, [r3, #44]
 2714 009a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2715 009e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2716 00a2 1B68     		ldr	r3, [r3, #0]
 2717 00a4 DB6A     		ldr	r3, [r3, #44]
 2718 00a6 9A42     		cmp	r2, r3
 2719 00a8 03D3     		bcc	.L118
1834:../FreeRTOS/Source/tasks.c **** 	{
1835:../FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1836:../FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1837:../FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
1838:../FreeRTOS/Source/tasks.c **** 		switch now. */
1839:../FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 2720              		.loc 1 1839 0
 2721 00aa 4FF00103 		mov	r3, #1
 2722 00ae FB60     		str	r3, [r7, #12]
 2723 00b0 02E0     		b	.L119
 2724              	.L118:
1840:../FreeRTOS/Source/tasks.c **** 	}
1841:../FreeRTOS/Source/tasks.c **** 	else
1842:../FreeRTOS/Source/tasks.c **** 	{
1843:../FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 2725              		.loc 1 1843 0
 2726 00b2 4FF00003 		mov	r3, #0
 2727 00b6 FB60     		str	r3, [r7, #12]
 2728              	.L119:
1844:../FreeRTOS/Source/tasks.c **** 	}
1845:../FreeRTOS/Source/tasks.c **** 
1846:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2729              		.loc 1 1846 0
 2730 00b8 FB68     		ldr	r3, [r7, #12]
1847:../FreeRTOS/Source/tasks.c **** }
 2731              		.loc 1 1847 0
 2732 00ba 1846     		mov	r0, r3
 2733 00bc 07F11007 		add	r7, r7, #16
 2734 00c0 BD46     		mov	sp, r7
 2735 00c2 80BD     		pop	{r7, pc}
 2736              		.cfi_endproc
 2737              	.LFE135:
 2739              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2740              		.align	2
 2741              		.global	vTaskSetTimeOutState
 2742              		.thumb
 2743              		.thumb_func
 2745              	vTaskSetTimeOutState:
 2746              	.LFB136:
1848:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1849:../FreeRTOS/Source/tasks.c **** 
1850:../FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1851:../FreeRTOS/Source/tasks.c **** {
 2747              		.loc 1 1851 0
 2748              		.cfi_startproc
 2749              		@ args = 0, pretend = 0, frame = 8
 2750              		@ frame_needed = 1, uses_anonymous_args = 0
 2751              		@ link register save eliminated.
 2752 0000 80B4     		push	{r7}
 2753              	.LCFI74:
 2754              		.cfi_def_cfa_offset 4
 2755              		.cfi_offset 7, -4
 2756 0002 83B0     		sub	sp, sp, #12
 2757              	.LCFI75:
 2758              		.cfi_def_cfa_offset 16
 2759 0004 00AF     		add	r7, sp, #0
 2760              	.LCFI76:
 2761              		.cfi_def_cfa_register 7
 2762 0006 7860     		str	r0, [r7, #4]
1852:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1853:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2763              		.loc 1 1853 0
 2764 0008 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2765 000c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2766 0010 1A68     		ldr	r2, [r3, #0]
 2767 0012 7B68     		ldr	r3, [r7, #4]
 2768 0014 1A60     		str	r2, [r3, #0]
1854:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2769              		.loc 1 1854 0
 2770 0016 40F20003 		movw	r3, #:lower16:xTickCount
 2771 001a C0F20003 		movt	r3, #:upper16:xTickCount
 2772 001e 1A68     		ldr	r2, [r3, #0]
 2773 0020 7B68     		ldr	r3, [r7, #4]
 2774 0022 5A60     		str	r2, [r3, #4]
1855:../FreeRTOS/Source/tasks.c **** }
 2775              		.loc 1 1855 0
 2776 0024 07F10C07 		add	r7, r7, #12
 2777 0028 BD46     		mov	sp, r7
 2778 002a 80BC     		pop	{r7}
 2779 002c 7047     		bx	lr
 2780              		.cfi_endproc
 2781              	.LFE136:
 2783 002e 00BF     		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2784              		.align	2
 2785              		.global	xTaskCheckForTimeOut
 2786              		.thumb
 2787              		.thumb_func
 2789              	xTaskCheckForTimeOut:
 2790              	.LFB137:
1856:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1857:../FreeRTOS/Source/tasks.c **** 
1858:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1859:../FreeRTOS/Source/tasks.c **** {
 2791              		.loc 1 1859 0
 2792              		.cfi_startproc
 2793              		@ args = 0, pretend = 0, frame = 16
 2794              		@ frame_needed = 1, uses_anonymous_args = 0
 2795 0000 80B5     		push	{r7, lr}
 2796              	.LCFI77:
 2797              		.cfi_def_cfa_offset 8
 2798              		.cfi_offset 14, -4
 2799              		.cfi_offset 7, -8
 2800 0002 84B0     		sub	sp, sp, #16
 2801              	.LCFI78:
 2802              		.cfi_def_cfa_offset 24
 2803 0004 00AF     		add	r7, sp, #0
 2804              	.LCFI79:
 2805              		.cfi_def_cfa_register 7
 2806 0006 7860     		str	r0, [r7, #4]
 2807 0008 3960     		str	r1, [r7, #0]
1860:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1861:../FreeRTOS/Source/tasks.c **** 
1862:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1863:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
1864:../FreeRTOS/Source/tasks.c **** 
1865:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2808              		.loc 1 1865 0
 2809 000a FFF7FEFF 		bl	vPortEnterCritical
1866:../FreeRTOS/Source/tasks.c **** 	{
1867:../FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1868:../FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1869:../FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1870:../FreeRTOS/Source/tasks.c **** 			therefore never time out. */
1871:../FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2810              		.loc 1 1871 0
 2811 000e 3B68     		ldr	r3, [r7, #0]
 2812 0010 1B68     		ldr	r3, [r3, #0]
 2813 0012 B3F1FF3F 		cmp	r3, #-1
 2814 0016 03D1     		bne	.L122
1872:../FreeRTOS/Source/tasks.c **** 			{
1873:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2815              		.loc 1 1873 0
 2816 0018 4FF00003 		mov	r3, #0
 2817 001c FB60     		str	r3, [r7, #12]
 2818 001e 38E0     		b	.L123
 2819              	.L122:
1874:../FreeRTOS/Source/tasks.c **** 			}
1875:../FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1876:../FreeRTOS/Source/tasks.c **** 		#endif
1877:../FreeRTOS/Source/tasks.c **** 
1878:../FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2820              		.loc 1 1878 0
 2821 0020 7B68     		ldr	r3, [r7, #4]
 2822 0022 1A68     		ldr	r2, [r3, #0]
 2823 0024 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2824 0028 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2825 002c 1B68     		ldr	r3, [r3, #0]
 2826 002e 9A42     		cmp	r2, r3
 2827 0030 0CD0     		beq	.L124
 2828              		.loc 1 1878 0 is_stmt 0 discriminator 1
 2829 0032 7B68     		ldr	r3, [r7, #4]
 2830 0034 5A68     		ldr	r2, [r3, #4]
 2831 0036 40F20003 		movw	r3, #:lower16:xTickCount
 2832 003a C0F20003 		movt	r3, #:upper16:xTickCount
 2833 003e 1B68     		ldr	r3, [r3, #0]
 2834 0040 9A42     		cmp	r2, r3
 2835 0042 03D8     		bhi	.L124
1879:../FreeRTOS/Source/tasks.c **** 		{
1880:../FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1881:../FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1882:../FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1883:../FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1884:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2836              		.loc 1 1884 0 is_stmt 1
 2837 0044 4FF00103 		mov	r3, #1
 2838 0048 FB60     		str	r3, [r7, #12]
 2839 004a 22E0     		b	.L123
 2840              	.L124:
1885:../FreeRTOS/Source/tasks.c **** 		}
1886:../FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2841              		.loc 1 1886 0
 2842 004c 40F20003 		movw	r3, #:lower16:xTickCount
 2843 0050 C0F20003 		movt	r3, #:upper16:xTickCount
 2844 0054 1A68     		ldr	r2, [r3, #0]
 2845 0056 7B68     		ldr	r3, [r7, #4]
 2846 0058 5B68     		ldr	r3, [r3, #4]
 2847 005a D21A     		subs	r2, r2, r3
 2848 005c 3B68     		ldr	r3, [r7, #0]
 2849 005e 1B68     		ldr	r3, [r3, #0]
 2850 0060 9A42     		cmp	r2, r3
 2851 0062 13D2     		bcs	.L125
1887:../FreeRTOS/Source/tasks.c **** 		{
1888:../FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1889:../FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2852              		.loc 1 1889 0
 2853 0064 3B68     		ldr	r3, [r7, #0]
 2854 0066 1A68     		ldr	r2, [r3, #0]
 2855 0068 7B68     		ldr	r3, [r7, #4]
 2856 006a 5968     		ldr	r1, [r3, #4]
 2857 006c 40F20003 		movw	r3, #:lower16:xTickCount
 2858 0070 C0F20003 		movt	r3, #:upper16:xTickCount
 2859 0074 1B68     		ldr	r3, [r3, #0]
 2860 0076 CB1A     		subs	r3, r1, r3
 2861 0078 D218     		adds	r2, r2, r3
 2862 007a 3B68     		ldr	r3, [r7, #0]
 2863 007c 1A60     		str	r2, [r3, #0]
1890:../FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2864              		.loc 1 1890 0
 2865 007e 7868     		ldr	r0, [r7, #4]
 2866 0080 FFF7FEFF 		bl	vTaskSetTimeOutState
1891:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2867              		.loc 1 1891 0
 2868 0084 4FF00003 		mov	r3, #0
 2869 0088 FB60     		str	r3, [r7, #12]
 2870 008a 02E0     		b	.L123
 2871              	.L125:
1892:../FreeRTOS/Source/tasks.c **** 		}
1893:../FreeRTOS/Source/tasks.c **** 		else
1894:../FreeRTOS/Source/tasks.c **** 		{
1895:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2872              		.loc 1 1895 0
 2873 008c 4FF00103 		mov	r3, #1
 2874 0090 FB60     		str	r3, [r7, #12]
 2875              	.L123:
1896:../FreeRTOS/Source/tasks.c **** 		}
1897:../FreeRTOS/Source/tasks.c **** 	}
1898:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2876              		.loc 1 1898 0
 2877 0092 FFF7FEFF 		bl	vPortExitCritical
1899:../FreeRTOS/Source/tasks.c **** 
1900:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2878              		.loc 1 1900 0
 2879 0096 FB68     		ldr	r3, [r7, #12]
1901:../FreeRTOS/Source/tasks.c **** }
 2880              		.loc 1 1901 0
 2881 0098 1846     		mov	r0, r3
 2882 009a 07F11007 		add	r7, r7, #16
 2883 009e BD46     		mov	sp, r7
 2884 00a0 80BD     		pop	{r7, pc}
 2885              		.cfi_endproc
 2886              	.LFE137:
 2888 00a2 00BF     		.section	.text.vTaskMissedYield,"ax",%progbits
 2889              		.align	2
 2890              		.global	vTaskMissedYield
 2891              		.thumb
 2892              		.thumb_func
 2894              	vTaskMissedYield:
 2895              	.LFB138:
1902:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1903:../FreeRTOS/Source/tasks.c **** 
1904:../FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
1905:../FreeRTOS/Source/tasks.c **** {
 2896              		.loc 1 1905 0
 2897              		.cfi_startproc
 2898              		@ args = 0, pretend = 0, frame = 0
 2899              		@ frame_needed = 1, uses_anonymous_args = 0
 2900              		@ link register save eliminated.
 2901 0000 80B4     		push	{r7}
 2902              	.LCFI80:
 2903              		.cfi_def_cfa_offset 4
 2904              		.cfi_offset 7, -4
 2905 0002 00AF     		add	r7, sp, #0
 2906              	.LCFI81:
 2907              		.cfi_def_cfa_register 7
1906:../FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
 2908              		.loc 1 1906 0
 2909 0004 40F20003 		movw	r3, #:lower16:xMissedYield
 2910 0008 C0F20003 		movt	r3, #:upper16:xMissedYield
 2911 000c 4FF00102 		mov	r2, #1
 2912 0010 1A60     		str	r2, [r3, #0]
1907:../FreeRTOS/Source/tasks.c **** }
 2913              		.loc 1 1907 0
 2914 0012 BD46     		mov	sp, r7
 2915 0014 80BC     		pop	{r7}
 2916 0016 7047     		bx	lr
 2917              		.cfi_endproc
 2918              	.LFE138:
 2920              		.section	.text.prvIdleTask,"ax",%progbits
 2921              		.align	2
 2922              		.thumb
 2923              		.thumb_func
 2925              	prvIdleTask:
 2926              	.LFB139:
1908:../FreeRTOS/Source/tasks.c **** 
1909:../FreeRTOS/Source/tasks.c **** /*
1910:../FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
1911:../FreeRTOS/Source/tasks.c ****  * The Idle task.
1912:../FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
1913:../FreeRTOS/Source/tasks.c ****  *
1914:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1915:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1916:../FreeRTOS/Source/tasks.c ****  *
1917:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
1918:../FreeRTOS/Source/tasks.c ****  *
1919:../FreeRTOS/Source/tasks.c ****  */
1920:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1921:../FreeRTOS/Source/tasks.c **** {
 2927              		.loc 1 1921 0
 2928              		.cfi_startproc
 2929              		@ args = 0, pretend = 0, frame = 8
 2930              		@ frame_needed = 1, uses_anonymous_args = 0
 2931 0000 80B5     		push	{r7, lr}
 2932              	.LCFI82:
 2933              		.cfi_def_cfa_offset 8
 2934              		.cfi_offset 14, -4
 2935              		.cfi_offset 7, -8
 2936 0002 82B0     		sub	sp, sp, #8
 2937              	.LCFI83:
 2938              		.cfi_def_cfa_offset 16
 2939 0004 00AF     		add	r7, sp, #0
 2940              	.LCFI84:
 2941              		.cfi_def_cfa_register 7
 2942 0006 7860     		str	r0, [r7, #4]
 2943 0008 00E0     		b	.L129
 2944              	.L130:
1922:../FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
1923:../FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
1924:../FreeRTOS/Source/tasks.c **** 
1925:../FreeRTOS/Source/tasks.c **** 	for( ;; )
1926:../FreeRTOS/Source/tasks.c **** 	{
1927:../FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
1928:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
1929:../FreeRTOS/Source/tasks.c **** 
1930:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1931:../FreeRTOS/Source/tasks.c **** 		{
1932:../FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1933:../FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
1934:../FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
1935:../FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
1936:../FreeRTOS/Source/tasks.c **** 			taskYIELD();
1937:../FreeRTOS/Source/tasks.c **** 		}
1938:../FreeRTOS/Source/tasks.c **** 		#endif
1939:../FreeRTOS/Source/tasks.c **** 
1940:../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1941:../FreeRTOS/Source/tasks.c **** 		{
1942:../FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
1943:../FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1944:../FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
1945:../FreeRTOS/Source/tasks.c **** 			timeslice.
1946:../FreeRTOS/Source/tasks.c **** 
1947:../FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
1948:../FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1949:../FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
1950:../FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
1951:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
1952:../FreeRTOS/Source/tasks.c **** 			{
1953:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
1954:../FreeRTOS/Source/tasks.c **** 			}
1955:../FreeRTOS/Source/tasks.c **** 		}
1956:../FreeRTOS/Source/tasks.c **** 		#endif
1957:../FreeRTOS/Source/tasks.c **** 
1958:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1959:../FreeRTOS/Source/tasks.c **** 		{
1960:../FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
1961:../FreeRTOS/Source/tasks.c **** 
1962:../FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1963:../FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
1964:../FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
1965:../FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1966:../FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1967:../FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
1968:../FreeRTOS/Source/tasks.c **** 		}
1969:../FreeRTOS/Source/tasks.c **** 		#endif
1970:../FreeRTOS/Source/tasks.c **** 	}
 2945              		.loc 1 1970 0
 2946 000a 00BF     		nop
 2947              	.L129:
1928:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 2948              		.loc 1 1928 0
 2949 000c FFF7FEFF 		bl	prvCheckTasksWaitingTermination
1951:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2950              		.loc 1 1951 0
 2951 0010 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2952 0014 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2953 0018 1B68     		ldr	r3, [r3, #0]
 2954 001a 012B     		cmp	r3, #1
 2955 001c F5D9     		bls	.L130
1953:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
 2956              		.loc 1 1953 0
 2957 001e FFF7FEFF 		bl	vPortYieldFromISR
 2958              		.loc 1 1970 0
 2959 0022 F2E7     		b	.L130
 2960              		.cfi_endproc
 2961              	.LFE139:
 2963              		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 2964              		.align	2
 2965              		.thumb
 2966              		.thumb_func
 2968              	prvInitialiseTCBVariables:
 2969              	.LFB140:
1971:../FreeRTOS/Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1972:../FreeRTOS/Source/tasks.c **** 
1973:../FreeRTOS/Source/tasks.c **** 
1974:../FreeRTOS/Source/tasks.c **** 
1975:../FreeRTOS/Source/tasks.c **** 
1976:../FreeRTOS/Source/tasks.c **** 
1977:../FreeRTOS/Source/tasks.c **** 
1978:../FreeRTOS/Source/tasks.c **** 
1979:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1980:../FreeRTOS/Source/tasks.c ****  * File private functions documented at the top of the file.
1981:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1982:../FreeRTOS/Source/tasks.c **** 
1983:../FreeRTOS/Source/tasks.c **** 
1984:../FreeRTOS/Source/tasks.c **** 
1985:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1986:../FreeRTOS/Source/tasks.c **** {
 2970              		.loc 1 1986 0
 2971              		.cfi_startproc
 2972              		@ args = 4, pretend = 0, frame = 16
 2973              		@ frame_needed = 1, uses_anonymous_args = 0
 2974 0000 80B5     		push	{r7, lr}
 2975              	.LCFI85:
 2976              		.cfi_def_cfa_offset 8
 2977              		.cfi_offset 14, -4
 2978              		.cfi_offset 7, -8
 2979 0002 84B0     		sub	sp, sp, #16
 2980              	.LCFI86:
 2981              		.cfi_def_cfa_offset 24
 2982 0004 00AF     		add	r7, sp, #0
 2983              	.LCFI87:
 2984              		.cfi_def_cfa_register 7
 2985 0006 F860     		str	r0, [r7, #12]
 2986 0008 B960     		str	r1, [r7, #8]
 2987 000a 7A60     		str	r2, [r7, #4]
 2988 000c 3B60     		str	r3, [r7, #0]
1987:../FreeRTOS/Source/tasks.c **** 	/* Store the function name in the TCB. */
1988:../FreeRTOS/Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1989:../FreeRTOS/Source/tasks.c **** 	{
1990:../FreeRTOS/Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1991:../FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 2989              		.loc 1 1991 0
 2990 000e FB68     		ldr	r3, [r7, #12]
 2991 0010 03F13403 		add	r3, r3, #52
 2992 0014 1846     		mov	r0, r3
 2993 0016 B968     		ldr	r1, [r7, #8]
 2994 0018 4FF01002 		mov	r2, #16
 2995 001c FFF7FEFF 		bl	strncpy
1992:../FreeRTOS/Source/tasks.c **** 	}
1993:../FreeRTOS/Source/tasks.c **** 	#endif
1994:../FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 2996              		.loc 1 1994 0
 2997 0020 FB68     		ldr	r3, [r7, #12]
 2998 0022 4FF00002 		mov	r2, #0
 2999 0026 83F84320 		strb	r2, [r3, #67]
1995:../FreeRTOS/Source/tasks.c **** 
1996:../FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1997:../FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
1998:../FreeRTOS/Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 3000              		.loc 1 1998 0
 3001 002a 7B68     		ldr	r3, [r7, #4]
 3002 002c 042B     		cmp	r3, #4
 3003 002e 02D9     		bls	.L132
1999:../FreeRTOS/Source/tasks.c **** 	{
2000:../FreeRTOS/Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 3004              		.loc 1 2000 0
 3005 0030 4FF00403 		mov	r3, #4
 3006 0034 7B60     		str	r3, [r7, #4]
 3007              	.L132:
2001:../FreeRTOS/Source/tasks.c **** 	}
2002:../FreeRTOS/Source/tasks.c **** 
2003:../FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3008              		.loc 1 2003 0
 3009 0036 FB68     		ldr	r3, [r7, #12]
 3010 0038 7A68     		ldr	r2, [r7, #4]
 3011 003a DA62     		str	r2, [r3, #44]
2004:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2005:../FreeRTOS/Source/tasks.c **** 	{
2006:../FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 3012              		.loc 1 2006 0
 3013 003c FB68     		ldr	r3, [r7, #12]
 3014 003e 7A68     		ldr	r2, [r7, #4]
 3015 0040 5A64     		str	r2, [r3, #68]
2007:../FreeRTOS/Source/tasks.c **** 	}
2008:../FreeRTOS/Source/tasks.c **** 	#endif
2009:../FreeRTOS/Source/tasks.c **** 
2010:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3016              		.loc 1 2010 0
 3017 0042 FB68     		ldr	r3, [r7, #12]
 3018 0044 03F10403 		add	r3, r3, #4
 3019 0048 1846     		mov	r0, r3
 3020 004a FFF7FEFF 		bl	vListInitialiseItem
2011:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3021              		.loc 1 2011 0
 3022 004e FB68     		ldr	r3, [r7, #12]
 3023 0050 03F11803 		add	r3, r3, #24
 3024 0054 1846     		mov	r0, r3
 3025 0056 FFF7FEFF 		bl	vListInitialiseItem
2012:../FreeRTOS/Source/tasks.c **** 
2013:../FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2014:../FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2015:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3026              		.loc 1 2015 0
 3027 005a FB68     		ldr	r3, [r7, #12]
 3028 005c FA68     		ldr	r2, [r7, #12]
 3029 005e 1A61     		str	r2, [r3, #16]
2016:../FreeRTOS/Source/tasks.c **** 
2017:../FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2018:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 3030              		.loc 1 2018 0
 3031 0060 7B68     		ldr	r3, [r7, #4]
 3032 0062 C3F10502 		rsb	r2, r3, #5
 3033 0066 FB68     		ldr	r3, [r7, #12]
 3034 0068 9A61     		str	r2, [r3, #24]
2019:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3035              		.loc 1 2019 0
 3036 006a FB68     		ldr	r3, [r7, #12]
 3037 006c FA68     		ldr	r2, [r7, #12]
 3038 006e 5A62     		str	r2, [r3, #36]
2020:../FreeRTOS/Source/tasks.c **** 
2021:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2022:../FreeRTOS/Source/tasks.c **** 	{
2023:../FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2024:../FreeRTOS/Source/tasks.c **** 	}
2025:../FreeRTOS/Source/tasks.c **** 	#endif
2026:../FreeRTOS/Source/tasks.c **** 
2027:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2028:../FreeRTOS/Source/tasks.c **** 	{
2029:../FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
 3039              		.loc 1 2029 0
 3040 0070 FB68     		ldr	r3, [r7, #12]
 3041 0072 4FF00002 		mov	r2, #0
 3042 0076 9A64     		str	r2, [r3, #72]
2030:../FreeRTOS/Source/tasks.c **** 	}
2031:../FreeRTOS/Source/tasks.c **** 	#endif
2032:../FreeRTOS/Source/tasks.c **** 
2033:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2034:../FreeRTOS/Source/tasks.c **** 	{
2035:../FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
 3043              		.loc 1 2035 0
 3044 0078 FB68     		ldr	r3, [r7, #12]
 3045 007a 4FF00002 		mov	r2, #0
 3046 007e DA64     		str	r2, [r3, #76]
2036:../FreeRTOS/Source/tasks.c **** 	}
2037:../FreeRTOS/Source/tasks.c **** 	#endif
2038:../FreeRTOS/Source/tasks.c **** 
2039:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2040:../FreeRTOS/Source/tasks.c **** 	{
2041:../FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2042:../FreeRTOS/Source/tasks.c **** 	}
2043:../FreeRTOS/Source/tasks.c **** 	#else
2044:../FreeRTOS/Source/tasks.c **** 	{
2045:../FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2046:../FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2047:../FreeRTOS/Source/tasks.c **** 	}
2048:../FreeRTOS/Source/tasks.c **** 	#endif
2049:../FreeRTOS/Source/tasks.c **** }
 3047              		.loc 1 2049 0
 3048 0080 07F11007 		add	r7, r7, #16
 3049 0084 BD46     		mov	sp, r7
 3050 0086 80BD     		pop	{r7, pc}
 3051              		.cfi_endproc
 3052              	.LFE140:
 3054              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3055              		.align	2
 3056              		.thumb
 3057              		.thumb_func
 3059              	prvInitialiseTaskLists:
 3060              	.LFB141:
2050:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2051:../FreeRTOS/Source/tasks.c **** 
2052:../FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2053:../FreeRTOS/Source/tasks.c **** 
2054:../FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2055:../FreeRTOS/Source/tasks.c **** 	{
2056:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2057:../FreeRTOS/Source/tasks.c **** 	
2058:../FreeRTOS/Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2059:../FreeRTOS/Source/tasks.c **** 		{
2060:../FreeRTOS/Source/tasks.c **** 			xTaskToModify = NULL;
2061:../FreeRTOS/Source/tasks.c **** 		}
2062:../FreeRTOS/Source/tasks.c **** 
2063:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2064:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2065:../FreeRTOS/Source/tasks.c **** 
2066:../FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2067:../FreeRTOS/Source/tasks.c **** 	}
2068:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
2069:../FreeRTOS/Source/tasks.c **** #endif
2070:../FreeRTOS/Source/tasks.c **** 
2071:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2072:../FreeRTOS/Source/tasks.c **** {
 3061              		.loc 1 2072 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 8
 3064              		@ frame_needed = 1, uses_anonymous_args = 0
 3065 0000 80B5     		push	{r7, lr}
 3066              	.LCFI88:
 3067              		.cfi_def_cfa_offset 8
 3068              		.cfi_offset 14, -4
 3069              		.cfi_offset 7, -8
 3070 0002 82B0     		sub	sp, sp, #8
 3071              	.LCFI89:
 3072              		.cfi_def_cfa_offset 16
 3073 0004 00AF     		add	r7, sp, #0
 3074              	.LCFI90:
 3075              		.cfi_def_cfa_register 7
2073:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2074:../FreeRTOS/Source/tasks.c **** 
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3076              		.loc 1 2075 0
 3077 0006 4FF00003 		mov	r3, #0
 3078 000a 7B60     		str	r3, [r7, #4]
 3079 000c 13E0     		b	.L134
 3080              	.L135:
2076:../FreeRTOS/Source/tasks.c **** 	{
2077:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 3081              		.loc 1 2077 0 discriminator 2
 3082 000e 7A68     		ldr	r2, [r7, #4]
 3083 0010 1346     		mov	r3, r2
 3084 0012 4FEA8303 		lsl	r3, r3, #2
 3085 0016 9B18     		adds	r3, r3, r2
 3086 0018 4FEA8303 		lsl	r3, r3, #2
 3087 001c 1A46     		mov	r2, r3
 3088 001e 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3089 0022 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3090 0026 D318     		adds	r3, r2, r3
 3091 0028 1846     		mov	r0, r3
 3092 002a FFF7FEFF 		bl	vListInitialise
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3093              		.loc 1 2075 0 discriminator 2
 3094 002e 7B68     		ldr	r3, [r7, #4]
 3095 0030 03F10103 		add	r3, r3, #1
 3096 0034 7B60     		str	r3, [r7, #4]
 3097              	.L134:
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3098              		.loc 1 2075 0 is_stmt 0 discriminator 1
 3099 0036 7B68     		ldr	r3, [r7, #4]
 3100 0038 042B     		cmp	r3, #4
 3101 003a E8D9     		bls	.L135
2078:../FreeRTOS/Source/tasks.c **** 	}
2079:../FreeRTOS/Source/tasks.c **** 
2080:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 3102              		.loc 1 2080 0 is_stmt 1
 3103 003c 40F20000 		movw	r0, #:lower16:xDelayedTaskList1
 3104 0040 C0F20000 		movt	r0, #:upper16:xDelayedTaskList1
 3105 0044 FFF7FEFF 		bl	vListInitialise
2081:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 3106              		.loc 1 2081 0
 3107 0048 40F20000 		movw	r0, #:lower16:xDelayedTaskList2
 3108 004c C0F20000 		movt	r0, #:upper16:xDelayedTaskList2
 3109 0050 FFF7FEFF 		bl	vListInitialise
2082:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 3110              		.loc 1 2082 0
 3111 0054 40F20000 		movw	r0, #:lower16:xPendingReadyList
 3112 0058 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 3113 005c FFF7FEFF 		bl	vListInitialise
2083:../FreeRTOS/Source/tasks.c **** 
2084:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2085:../FreeRTOS/Source/tasks.c **** 	{
2086:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 3114              		.loc 1 2086 0
 3115 0060 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 3116 0064 C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 3117 0068 FFF7FEFF 		bl	vListInitialise
2087:../FreeRTOS/Source/tasks.c **** 	}
2088:../FreeRTOS/Source/tasks.c **** 	#endif
2089:../FreeRTOS/Source/tasks.c **** 
2090:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2091:../FreeRTOS/Source/tasks.c **** 	{
2092:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 3118              		.loc 1 2092 0
 3119 006c 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 3120 0070 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 3121 0074 FFF7FEFF 		bl	vListInitialise
2093:../FreeRTOS/Source/tasks.c **** 	}
2094:../FreeRTOS/Source/tasks.c **** 	#endif
2095:../FreeRTOS/Source/tasks.c **** 
2096:../FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2097:../FreeRTOS/Source/tasks.c **** 	using list2. */
2098:../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3122              		.loc 1 2098 0
 3123 0078 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3124 007c C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3125 0080 40F20002 		movw	r2, #:lower16:xDelayedTaskList1
 3126 0084 C0F20002 		movt	r2, #:upper16:xDelayedTaskList1
 3127 0088 1A60     		str	r2, [r3, #0]
2099:../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3128              		.loc 1 2099 0
 3129 008a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3130 008e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3131 0092 40F20002 		movw	r2, #:lower16:xDelayedTaskList2
 3132 0096 C0F20002 		movt	r2, #:upper16:xDelayedTaskList2
 3133 009a 1A60     		str	r2, [r3, #0]
2100:../FreeRTOS/Source/tasks.c **** }
 3134              		.loc 1 2100 0
 3135 009c 07F10807 		add	r7, r7, #8
 3136 00a0 BD46     		mov	sp, r7
 3137 00a2 80BD     		pop	{r7, pc}
 3138              		.cfi_endproc
 3139              	.LFE141:
 3141              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3142              		.align	2
 3143              		.thumb
 3144              		.thumb_func
 3146              	prvCheckTasksWaitingTermination:
 3147              	.LFB142:
2101:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2102:../FreeRTOS/Source/tasks.c **** 
2103:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2104:../FreeRTOS/Source/tasks.c **** {
 3148              		.loc 1 2104 0
 3149              		.cfi_startproc
 3150              		@ args = 0, pretend = 0, frame = 8
 3151              		@ frame_needed = 1, uses_anonymous_args = 0
 3152 0000 80B5     		push	{r7, lr}
 3153              	.LCFI91:
 3154              		.cfi_def_cfa_offset 8
 3155              		.cfi_offset 14, -4
 3156              		.cfi_offset 7, -8
 3157 0002 82B0     		sub	sp, sp, #8
 3158              	.LCFI92:
 3159              		.cfi_def_cfa_offset 16
 3160 0004 00AF     		add	r7, sp, #0
 3161              	.LCFI93:
 3162              		.cfi_def_cfa_register 7
 3163              	.LBB8:
2105:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2106:../FreeRTOS/Source/tasks.c **** 	{
2107:../FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2108:../FreeRTOS/Source/tasks.c **** 
2109:../FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2110:../FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2111:../FreeRTOS/Source/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 3164              		.loc 1 2111 0
 3165 0006 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3166 000a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3167 000e 1B68     		ldr	r3, [r3, #0]
 3168 0010 002B     		cmp	r3, #0
 3169 0012 3CD0     		beq	.L136
2112:../FreeRTOS/Source/tasks.c **** 		{
2113:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3170              		.loc 1 2113 0
 3171 0014 FFF7FEFF 		bl	vTaskSuspendAll
2114:../FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3172              		.loc 1 2114 0
 3173 0018 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3174 001c C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3175 0020 1B68     		ldr	r3, [r3, #0]
 3176 0022 002B     		cmp	r3, #0
 3177 0024 14BF     		ite	ne
 3178 0026 0023     		movne	r3, #0
 3179 0028 0123     		moveq	r3, #1
 3180 002a 7B60     		str	r3, [r7, #4]
2115:../FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
 3181              		.loc 1 2115 0
 3182 002c FFF7FEFF 		bl	xTaskResumeAll
2116:../FreeRTOS/Source/tasks.c **** 
2117:../FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3183              		.loc 1 2117 0
 3184 0030 7B68     		ldr	r3, [r7, #4]
 3185 0032 002B     		cmp	r3, #0
 3186 0034 2BD1     		bne	.L136
 3187              	.LBB9:
2118:../FreeRTOS/Source/tasks.c **** 			{
2119:../FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2120:../FreeRTOS/Source/tasks.c **** 
2121:../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 3188              		.loc 1 2121 0
 3189 0036 FFF7FEFF 		bl	vPortEnterCritical
2122:../FreeRTOS/Source/tasks.c **** 				{
2123:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 3190              		.loc 1 2123 0
 3191 003a 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3192 003e C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3193 0042 DB68     		ldr	r3, [r3, #12]
 3194 0044 DB68     		ldr	r3, [r3, #12]
 3195 0046 3B60     		str	r3, [r7, #0]
2124:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 3196              		.loc 1 2124 0
 3197 0048 3B68     		ldr	r3, [r7, #0]
 3198 004a 03F10403 		add	r3, r3, #4
 3199 004e 1846     		mov	r0, r3
 3200 0050 FFF7FEFF 		bl	vListRemove
2125:../FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3201              		.loc 1 2125 0
 3202 0054 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3203 0058 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3204 005c 1B68     		ldr	r3, [r3, #0]
 3205 005e 03F1FF32 		add	r2, r3, #-1
 3206 0062 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3207 0066 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3208 006a 1A60     		str	r2, [r3, #0]
2126:../FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 3209              		.loc 1 2126 0
 3210 006c 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3211 0070 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3212 0074 1B68     		ldr	r3, [r3, #0]
 3213 0076 03F1FF32 		add	r2, r3, #-1
 3214 007a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3215 007e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3216 0082 1A60     		str	r2, [r3, #0]
2127:../FreeRTOS/Source/tasks.c **** 				}
2128:../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 3217              		.loc 1 2128 0
 3218 0084 FFF7FEFF 		bl	vPortExitCritical
2129:../FreeRTOS/Source/tasks.c **** 
2130:../FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 3219              		.loc 1 2130 0
 3220 0088 3868     		ldr	r0, [r7, #0]
 3221 008a FFF7FEFF 		bl	prvDeleteTCB
 3222              	.L136:
 3223              	.LBE9:
 3224              	.LBE8:
2131:../FreeRTOS/Source/tasks.c **** 			}
2132:../FreeRTOS/Source/tasks.c **** 		}
2133:../FreeRTOS/Source/tasks.c **** 	}
2134:../FreeRTOS/Source/tasks.c **** 	#endif
2135:../FreeRTOS/Source/tasks.c **** }
 3225              		.loc 1 2135 0
 3226 008e 07F10807 		add	r7, r7, #8
 3227 0092 BD46     		mov	sp, r7
 3228 0094 80BD     		pop	{r7, pc}
 3229              		.cfi_endproc
 3230              	.LFE142:
 3232 0096 00BF     		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3233              		.align	2
 3234              		.thumb
 3235              		.thumb_func
 3237              	prvAddCurrentTaskToDelayedList:
 3238              	.LFB143:
2136:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2137:../FreeRTOS/Source/tasks.c **** 
2138:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2139:../FreeRTOS/Source/tasks.c **** {
 3239              		.loc 1 2139 0
 3240              		.cfi_startproc
 3241              		@ args = 0, pretend = 0, frame = 8
 3242              		@ frame_needed = 1, uses_anonymous_args = 0
 3243 0000 80B5     		push	{r7, lr}
 3244              	.LCFI94:
 3245              		.cfi_def_cfa_offset 8
 3246              		.cfi_offset 14, -4
 3247              		.cfi_offset 7, -8
 3248 0002 82B0     		sub	sp, sp, #8
 3249              	.LCFI95:
 3250              		.cfi_def_cfa_offset 16
 3251 0004 00AF     		add	r7, sp, #0
 3252              	.LCFI96:
 3253              		.cfi_def_cfa_register 7
 3254 0006 7860     		str	r0, [r7, #4]
2140:../FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2141:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3255              		.loc 1 2141 0
 3256 0008 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3257 000c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3258 0010 1B68     		ldr	r3, [r3, #0]
 3259 0012 7A68     		ldr	r2, [r7, #4]
 3260 0014 5A60     		str	r2, [r3, #4]
2142:../FreeRTOS/Source/tasks.c **** 
2143:../FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 3261              		.loc 1 2143 0
 3262 0016 40F20003 		movw	r3, #:lower16:xTickCount
 3263 001a C0F20003 		movt	r3, #:upper16:xTickCount
 3264 001e 1B68     		ldr	r3, [r3, #0]
 3265 0020 7A68     		ldr	r2, [r7, #4]
 3266 0022 9A42     		cmp	r2, r3
 3267 0024 10D2     		bcs	.L139
2144:../FreeRTOS/Source/tasks.c **** 	{
2145:../FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2146:../FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
 3268              		.loc 1 2146 0
 3269 0026 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3270 002a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3271 002e 1A68     		ldr	r2, [r3, #0]
 3272 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3273 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3274 0038 1B68     		ldr	r3, [r3, #0]
 3275 003a 03F10403 		add	r3, r3, #4
 3276 003e 1046     		mov	r0, r2
 3277 0040 1946     		mov	r1, r3
 3278 0042 FFF7FEFF 		bl	vListInsert
 3279 0046 1DE0     		b	.L138
 3280              	.L139:
2147:../FreeRTOS/Source/tasks.c **** 	}
2148:../FreeRTOS/Source/tasks.c **** 	else
2149:../FreeRTOS/Source/tasks.c **** 	{
2150:../FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2151:../FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
 3281              		.loc 1 2151 0
 3282 0048 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3283 004c C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3284 0050 1A68     		ldr	r2, [r3, #0]
 3285 0052 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3286 0056 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3287 005a 1B68     		ldr	r3, [r3, #0]
 3288 005c 03F10403 		add	r3, r3, #4
 3289 0060 1046     		mov	r0, r2
 3290 0062 1946     		mov	r1, r3
 3291 0064 FFF7FEFF 		bl	vListInsert
2152:../FreeRTOS/Source/tasks.c **** 
2153:../FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2154:../FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2155:../FreeRTOS/Source/tasks.c **** 		too. */
2156:../FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3292              		.loc 1 2156 0
 3293 0068 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3294 006c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3295 0070 1B68     		ldr	r3, [r3, #0]
 3296 0072 7A68     		ldr	r2, [r7, #4]
 3297 0074 9A42     		cmp	r2, r3
 3298 0076 05D2     		bcs	.L138
2157:../FreeRTOS/Source/tasks.c **** 		{
2158:../FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3299              		.loc 1 2158 0
 3300 0078 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3301 007c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3302 0080 7A68     		ldr	r2, [r7, #4]
 3303 0082 1A60     		str	r2, [r3, #0]
 3304              	.L138:
2159:../FreeRTOS/Source/tasks.c **** 		}
2160:../FreeRTOS/Source/tasks.c **** 	}
2161:../FreeRTOS/Source/tasks.c **** }
 3305              		.loc 1 2161 0
 3306 0084 07F10807 		add	r7, r7, #8
 3307 0088 BD46     		mov	sp, r7
 3308 008a 80BD     		pop	{r7, pc}
 3309              		.cfi_endproc
 3310              	.LFE143:
 3312              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3313              		.align	2
 3314              		.thumb
 3315              		.thumb_func
 3317              	prvAllocateTCBAndStack:
 3318              	.LFB144:
2162:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2163:../FreeRTOS/Source/tasks.c **** 
2164:../FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2165:../FreeRTOS/Source/tasks.c **** {
 3319              		.loc 1 2165 0
 3320              		.cfi_startproc
 3321              		@ args = 0, pretend = 0, frame = 16
 3322              		@ frame_needed = 1, uses_anonymous_args = 0
 3323 0000 80B5     		push	{r7, lr}
 3324              	.LCFI97:
 3325              		.cfi_def_cfa_offset 8
 3326              		.cfi_offset 14, -4
 3327              		.cfi_offset 7, -8
 3328 0002 84B0     		sub	sp, sp, #16
 3329              	.LCFI98:
 3330              		.cfi_def_cfa_offset 24
 3331 0004 00AF     		add	r7, sp, #0
 3332              	.LCFI99:
 3333              		.cfi_def_cfa_register 7
 3334 0006 0346     		mov	r3, r0
 3335 0008 3960     		str	r1, [r7, #0]
 3336 000a FB80     		strh	r3, [r7, #6]	@ movhi
2166:../FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2167:../FreeRTOS/Source/tasks.c **** 
2168:../FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2169:../FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2170:../FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 3337              		.loc 1 2170 0
 3338 000c 4FF05000 		mov	r0, #80
 3339 0010 FFF7FEFF 		bl	malloc
 3340 0014 0346     		mov	r3, r0
 3341 0016 FB60     		str	r3, [r7, #12]
2171:../FreeRTOS/Source/tasks.c **** 
2172:../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 3342              		.loc 1 2172 0
 3343 0018 FB68     		ldr	r3, [r7, #12]
 3344 001a 002B     		cmp	r3, #0
 3345 001c 23D0     		beq	.L142
2173:../FreeRTOS/Source/tasks.c **** 	{
2174:../FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2175:../FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2176:../FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2177:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 3346              		.loc 1 2177 0
 3347 001e 3B68     		ldr	r3, [r7, #0]
 3348 0020 002B     		cmp	r3, #0
 3349 0022 07D1     		bne	.L143
 3350              		.loc 1 2177 0 is_stmt 0 discriminator 1
 3351 0024 FB88     		ldrh	r3, [r7, #6]
 3352 0026 4FEA8303 		lsl	r3, r3, #2
 3353 002a 1846     		mov	r0, r3
 3354 002c FFF7FEFF 		bl	malloc
 3355 0030 0346     		mov	r3, r0
 3356 0032 00E0     		b	.L144
 3357              	.L143:
 3358              		.loc 1 2177 0 discriminator 2
 3359 0034 3B68     		ldr	r3, [r7, #0]
 3360              	.L144:
 3361              		.loc 1 2177 0 discriminator 3
 3362 0036 FA68     		ldr	r2, [r7, #12]
 3363 0038 1363     		str	r3, [r2, #48]
2178:../FreeRTOS/Source/tasks.c **** 
2179:../FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3364              		.loc 1 2179 0 is_stmt 1 discriminator 3
 3365 003a FB68     		ldr	r3, [r7, #12]
 3366 003c 1B6B     		ldr	r3, [r3, #48]
 3367 003e 002B     		cmp	r3, #0
 3368 0040 06D1     		bne	.L145
2180:../FreeRTOS/Source/tasks.c **** 		{
2181:../FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2182:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 3369              		.loc 1 2182 0
 3370 0042 F868     		ldr	r0, [r7, #12]
 3371 0044 FFF7FEFF 		bl	free
2183:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
 3372              		.loc 1 2183 0
 3373 0048 4FF00003 		mov	r3, #0
 3374 004c FB60     		str	r3, [r7, #12]
 3375 004e 0AE0     		b	.L142
 3376              	.L145:
2184:../FreeRTOS/Source/tasks.c **** 		}
2185:../FreeRTOS/Source/tasks.c **** 		else
2186:../FreeRTOS/Source/tasks.c **** 		{
2187:../FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2188:../FreeRTOS/Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 3377              		.loc 1 2188 0
 3378 0050 FB68     		ldr	r3, [r7, #12]
 3379 0052 1A6B     		ldr	r2, [r3, #48]
 3380 0054 FB88     		ldrh	r3, [r7, #6]
 3381 0056 4FEA8303 		lsl	r3, r3, #2
 3382 005a 1046     		mov	r0, r2
 3383 005c 4FF0A501 		mov	r1, #165
 3384 0060 1A46     		mov	r2, r3
 3385 0062 FFF7FEFF 		bl	memset
 3386              	.L142:
2189:../FreeRTOS/Source/tasks.c **** 		}
2190:../FreeRTOS/Source/tasks.c **** 	}
2191:../FreeRTOS/Source/tasks.c **** 
2192:../FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
 3387              		.loc 1 2192 0
 3388 0066 FB68     		ldr	r3, [r7, #12]
2193:../FreeRTOS/Source/tasks.c **** }
 3389              		.loc 1 2193 0
 3390 0068 1846     		mov	r0, r3
 3391 006a 07F11007 		add	r7, r7, #16
 3392 006e BD46     		mov	sp, r7
 3393 0070 80BD     		pop	{r7, pc}
 3394              		.cfi_endproc
 3395              	.LFE144:
 3397 0072 00BF     		.section	.rodata
 3398 000b 00       		.align	2
 3399              	.LC2:
 3400 000c 25752020 		.ascii	"%u  %c  %-16s          0   0%%  %5u\015\012\000"
 3400      25632020 
 3400      252D3136 
 3400      73202020 
 3400      20202020 
 3401 0032 0000     		.align	2
 3402              	.LC3:
 3403 0034 25752020 		.ascii	"%u  %c  %-16s %10u %3u%%  %5u\015\012\000"
 3403      25632020 
 3403      252D3136 
 3403      73202531 
 3403      30752025 
 3404              		.align	2
 3405              	.LC4:
 3406 0054 25752020 		.ascii	"%u  %c  %-16s %10u  <1%%  %5u\015\012\000"
 3406      25632020 
 3406      252D3136 
 3406      73202531 
 3406      30752020 
 3407              		.section	.text.prvGenerateRunTimeStatsForTasksInList,"ax",%progbits
 3408              		.align	2
 3409              		.thumb
 3410              		.thumb_func
 3412              	prvGenerateRunTimeStatsForTasksInList:
 3413              	.LFB145:
2194:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2195:../FreeRTOS/Source/tasks.c **** 
2196:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2197:../FreeRTOS/Source/tasks.c **** 
2198:../FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2199:../FreeRTOS/Source/tasks.c **** 	{
2200:../FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2201:../FreeRTOS/Source/tasks.c **** 	unsigned short usStackRemaining;
2202:../FreeRTOS/Source/tasks.c **** 
2203:../FreeRTOS/Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2204:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2205:../FreeRTOS/Source/tasks.c **** 		do
2206:../FreeRTOS/Source/tasks.c **** 		{
2207:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2208:../FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2209:../FreeRTOS/Source/tasks.c **** 			{
2210:../FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2211:../FreeRTOS/Source/tasks.c **** 			}
2212:../FreeRTOS/Source/tasks.c **** 			#else
2213:../FreeRTOS/Source/tasks.c **** 			{
2214:../FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2215:../FreeRTOS/Source/tasks.c **** 			}
2216:../FreeRTOS/Source/tasks.c **** 			#endif			
2217:../FreeRTOS/Source/tasks.c **** 			
2218:../FreeRTOS/Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2219:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2220:../FreeRTOS/Source/tasks.c **** 
2221:../FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2222:../FreeRTOS/Source/tasks.c **** 	}
2223:../FreeRTOS/Source/tasks.c **** 
2224:../FreeRTOS/Source/tasks.c **** #endif
2225:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2226:../FreeRTOS/Source/tasks.c **** 
2227:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2228:../FreeRTOS/Source/tasks.c **** 
2229:../FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2230:../FreeRTOS/Source/tasks.c **** 	{
 3414              		.loc 1 2230 0
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 40
 3417              		@ frame_needed = 1, uses_anonymous_args = 0
 3418 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3419              	.LCFI100:
 3420              		.cfi_def_cfa_offset 24
 3421              		.cfi_offset 14, -4
 3422              		.cfi_offset 8, -8
 3423              		.cfi_offset 7, -12
 3424              		.cfi_offset 6, -16
 3425              		.cfi_offset 5, -20
 3426              		.cfi_offset 4, -24
 3427 0004 8EB0     		sub	sp, sp, #56
 3428              	.LCFI101:
 3429              		.cfi_def_cfa_offset 80
 3430 0006 04AF     		add	r7, sp, #16
 3431              	.LCFI102:
 3432              		.cfi_def_cfa 7, 64
 3433 0008 F860     		str	r0, [r7, #12]
 3434 000a B960     		str	r1, [r7, #8]
 3435 000c 7A60     		str	r2, [r7, #4]
 3436 000e FB70     		strb	r3, [r7, #3]
 3437              	.LBB10:
2231:../FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2232:../FreeRTOS/Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2233:../FreeRTOS/Source/tasks.c **** 
2234:../FreeRTOS/Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2235:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3438              		.loc 1 2235 0
 3439 0010 BB68     		ldr	r3, [r7, #8]
 3440 0012 7B62     		str	r3, [r7, #36]
 3441 0014 7B6A     		ldr	r3, [r7, #36]
 3442 0016 5B68     		ldr	r3, [r3, #4]
 3443 0018 5B68     		ldr	r3, [r3, #4]
 3444 001a 1A46     		mov	r2, r3
 3445 001c 7B6A     		ldr	r3, [r7, #36]
 3446 001e 5A60     		str	r2, [r3, #4]
 3447 0020 7B6A     		ldr	r3, [r7, #36]
 3448 0022 5A68     		ldr	r2, [r3, #4]
 3449 0024 7B6A     		ldr	r3, [r7, #36]
 3450 0026 03F10803 		add	r3, r3, #8
 3451 002a 9A42     		cmp	r2, r3
 3452 002c 05D1     		bne	.L147
 3453              		.loc 1 2235 0 is_stmt 0 discriminator 1
 3454 002e 7B6A     		ldr	r3, [r7, #36]
 3455 0030 5B68     		ldr	r3, [r3, #4]
 3456 0032 5B68     		ldr	r3, [r3, #4]
 3457 0034 1A46     		mov	r2, r3
 3458 0036 7B6A     		ldr	r3, [r7, #36]
 3459 0038 5A60     		str	r2, [r3, #4]
 3460              	.L147:
 3461              		.loc 1 2235 0 discriminator 2
 3462 003a 7B6A     		ldr	r3, [r7, #36]
 3463 003c 5B68     		ldr	r3, [r3, #4]
 3464 003e DB68     		ldr	r3, [r3, #12]
 3465 0040 3B62     		str	r3, [r7, #32]
 3466              	.L153:
 3467              	.LBE10:
 3468              	.LBB11:
2236:../FreeRTOS/Source/tasks.c **** 		do
2237:../FreeRTOS/Source/tasks.c **** 		{
2238:../FreeRTOS/Source/tasks.c **** 			/* Get next TCB in from the list. */
2239:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3469              		.loc 1 2239 0 is_stmt 1
 3470 0042 BB68     		ldr	r3, [r7, #8]
 3471 0044 FB61     		str	r3, [r7, #28]
 3472 0046 FB69     		ldr	r3, [r7, #28]
 3473 0048 5B68     		ldr	r3, [r3, #4]
 3474 004a 5B68     		ldr	r3, [r3, #4]
 3475 004c 1A46     		mov	r2, r3
 3476 004e FB69     		ldr	r3, [r7, #28]
 3477 0050 5A60     		str	r2, [r3, #4]
 3478 0052 FB69     		ldr	r3, [r7, #28]
 3479 0054 5A68     		ldr	r2, [r3, #4]
 3480 0056 FB69     		ldr	r3, [r7, #28]
 3481 0058 03F10803 		add	r3, r3, #8
 3482 005c 9A42     		cmp	r2, r3
 3483 005e 05D1     		bne	.L148
 3484              		.loc 1 2239 0 is_stmt 0 discriminator 1
 3485 0060 FB69     		ldr	r3, [r7, #28]
 3486 0062 5B68     		ldr	r3, [r3, #4]
 3487 0064 5B68     		ldr	r3, [r3, #4]
 3488 0066 1A46     		mov	r2, r3
 3489 0068 FB69     		ldr	r3, [r7, #28]
 3490 006a 5A60     		str	r2, [r3, #4]
 3491              	.L148:
 3492              		.loc 1 2239 0 discriminator 2
 3493 006c FB69     		ldr	r3, [r7, #28]
 3494 006e 5B68     		ldr	r3, [r3, #4]
 3495 0070 DB68     		ldr	r3, [r3, #12]
 3496 0072 BB61     		str	r3, [r7, #24]
 3497              	.LBE11:
2240:../FreeRTOS/Source/tasks.c **** 
2241:../FreeRTOS/Source/tasks.c **** 			/* Divide by zero check. */
2242:../FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > 0UL )
 3498              		.loc 1 2242 0 is_stmt 1 discriminator 2
 3499 0074 7B68     		ldr	r3, [r7, #4]
 3500 0076 002B     		cmp	r3, #0
 3501 0078 76D0     		beq	.L149
2243:../FreeRTOS/Source/tasks.c **** 			{
2244:../FreeRTOS/Source/tasks.c **** 				/* Has the task run at all? */
2245:../FreeRTOS/Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
 3502              		.loc 1 2245 0
 3503 007a BB69     		ldr	r3, [r7, #24]
 3504 007c DB6C     		ldr	r3, [r3, #76]
 3505 007e 002B     		cmp	r3, #0
 3506 0080 1CD1     		bne	.L150
2246:../FreeRTOS/Source/tasks.c **** 				{
2247:../FreeRTOS/Source/tasks.c **** 					/* The task has used no CPU time at all. */
2248:../FreeRTOS/Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) p
 3507              		.loc 1 2248 0
 3508 0082 BB69     		ldr	r3, [r7, #24]
 3509 0084 DB6A     		ldr	r3, [r3, #44]
 3510 0086 1D46     		mov	r5, r3
 3511 0088 97F90340 		ldrsb	r4, [r7, #3]
 3512 008c BB69     		ldr	r3, [r7, #24]
 3513 008e 03F13406 		add	r6, r3, #52
 3514 0092 BB69     		ldr	r3, [r7, #24]
 3515 0094 1B6B     		ldr	r3, [r3, #48]
 3516 0096 1846     		mov	r0, r3
 3517 0098 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3518 009c 0346     		mov	r3, r0
 3519 009e 0096     		str	r6, [sp, #0]
 3520 00a0 0193     		str	r3, [sp, #4]
 3521 00a2 40F20000 		movw	r0, #:lower16:pcStatsString
 3522 00a6 C0F20000 		movt	r0, #:upper16:pcStatsString
 3523 00aa 40F20001 		movw	r1, #:lower16:.LC2
 3524 00ae C0F20001 		movt	r1, #:upper16:.LC2
 3525 00b2 2A46     		mov	r2, r5
 3526 00b4 2346     		mov	r3, r4
 3527 00b6 FFF7FEFF 		bl	sprintf
 3528 00ba 4EE0     		b	.L151
 3529              	.L150:
2249:../FreeRTOS/Source/tasks.c **** 				}
2250:../FreeRTOS/Source/tasks.c **** 				else
2251:../FreeRTOS/Source/tasks.c **** 				{
2252:../FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2253:../FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2254:../FreeRTOS/Source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2255:../FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 3530              		.loc 1 2255 0
 3531 00bc BB69     		ldr	r3, [r7, #24]
 3532 00be DB6C     		ldr	r3, [r3, #76]
 3533 00c0 1A46     		mov	r2, r3
 3534 00c2 7B68     		ldr	r3, [r7, #4]
 3535 00c4 B2FBF3F3 		udiv	r3, r2, r3
 3536 00c8 7B61     		str	r3, [r7, #20]
2256:../FreeRTOS/Source/tasks.c **** 
2257:../FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
 3537              		.loc 1 2257 0
 3538 00ca 7B69     		ldr	r3, [r7, #20]
 3539 00cc 002B     		cmp	r3, #0
 3540 00ce 23D0     		beq	.L152
2258:../FreeRTOS/Source/tasks.c **** 					{
2259:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2260:../FreeRTOS/Source/tasks.c **** 						{
2261:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2262:../FreeRTOS/Source/tasks.c **** 						}
2263:../FreeRTOS/Source/tasks.c **** 						#else
2264:../FreeRTOS/Source/tasks.c **** 						{
2265:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2266:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2267:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNex
 3541              		.loc 1 2267 0
 3542 00d0 BB69     		ldr	r3, [r7, #24]
 3543 00d2 DB6A     		ldr	r3, [r3, #44]
 3544 00d4 1D46     		mov	r5, r3
 3545 00d6 97F90340 		ldrsb	r4, [r7, #3]
 3546 00da BB69     		ldr	r3, [r7, #24]
 3547 00dc 03F13408 		add	r8, r3, #52
 3548 00e0 BB69     		ldr	r3, [r7, #24]
 3549 00e2 DB6C     		ldr	r3, [r3, #76]
 3550 00e4 1E46     		mov	r6, r3
 3551 00e6 BB69     		ldr	r3, [r7, #24]
 3552 00e8 1B6B     		ldr	r3, [r3, #48]
 3553 00ea 1846     		mov	r0, r3
 3554 00ec FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3555 00f0 0346     		mov	r3, r0
 3556 00f2 CDF80080 		str	r8, [sp, #0]
 3557 00f6 0196     		str	r6, [sp, #4]
 3558 00f8 7A69     		ldr	r2, [r7, #20]
 3559 00fa 0292     		str	r2, [sp, #8]
 3560 00fc 0393     		str	r3, [sp, #12]
 3561 00fe 40F20000 		movw	r0, #:lower16:pcStatsString
 3562 0102 C0F20000 		movt	r0, #:upper16:pcStatsString
 3563 0106 40F20001 		movw	r1, #:lower16:.LC3
 3564 010a C0F20001 		movt	r1, #:upper16:.LC3
 3565 010e 2A46     		mov	r2, r5
 3566 0110 2346     		mov	r3, r4
 3567 0112 FFF7FEFF 		bl	sprintf
 3568 0116 20E0     		b	.L151
 3569              	.L152:
2268:../FreeRTOS/Source/tasks.c **** 						}
2269:../FreeRTOS/Source/tasks.c **** 						#endif
2270:../FreeRTOS/Source/tasks.c **** 					}
2271:../FreeRTOS/Source/tasks.c **** 					else
2272:../FreeRTOS/Source/tasks.c **** 					{
2273:../FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
2274:../FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
2275:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2276:../FreeRTOS/Source/tasks.c **** 						{
2277:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2278:../FreeRTOS/Source/tasks.c **** 						}
2279:../FreeRTOS/Source/tasks.c **** 						#else
2280:../FreeRTOS/Source/tasks.c **** 						{
2281:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2282:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2283:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNe
 3570              		.loc 1 2283 0
 3571 0118 BB69     		ldr	r3, [r7, #24]
 3572 011a DB6A     		ldr	r3, [r3, #44]
 3573 011c 1D46     		mov	r5, r3
 3574 011e 97F90340 		ldrsb	r4, [r7, #3]
 3575 0122 BB69     		ldr	r3, [r7, #24]
 3576 0124 03F13408 		add	r8, r3, #52
 3577 0128 BB69     		ldr	r3, [r7, #24]
 3578 012a DB6C     		ldr	r3, [r3, #76]
 3579 012c 1E46     		mov	r6, r3
 3580 012e BB69     		ldr	r3, [r7, #24]
 3581 0130 1B6B     		ldr	r3, [r3, #48]
 3582 0132 1846     		mov	r0, r3
 3583 0134 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3584 0138 0346     		mov	r3, r0
 3585 013a CDF80080 		str	r8, [sp, #0]
 3586 013e 0196     		str	r6, [sp, #4]
 3587 0140 0293     		str	r3, [sp, #8]
 3588 0142 40F20000 		movw	r0, #:lower16:pcStatsString
 3589 0146 C0F20000 		movt	r0, #:upper16:pcStatsString
 3590 014a 40F20001 		movw	r1, #:lower16:.LC4
 3591 014e C0F20001 		movt	r1, #:upper16:.LC4
 3592 0152 2A46     		mov	r2, r5
 3593 0154 2346     		mov	r3, r4
 3594 0156 FFF7FEFF 		bl	sprintf
 3595              	.L151:
2284:../FreeRTOS/Source/tasks.c **** 						}
2285:../FreeRTOS/Source/tasks.c **** 						#endif
2286:../FreeRTOS/Source/tasks.c **** 					}
2287:../FreeRTOS/Source/tasks.c **** 				}
2288:../FreeRTOS/Source/tasks.c **** 
2289:../FreeRTOS/Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 3596              		.loc 1 2289 0
 3597 015a F868     		ldr	r0, [r7, #12]
 3598 015c 40F20001 		movw	r1, #:lower16:pcStatsString
 3599 0160 C0F20001 		movt	r1, #:upper16:pcStatsString
 3600 0164 FFF7FEFF 		bl	strcat
 3601              	.L149:
2290:../FreeRTOS/Source/tasks.c **** 			}
2291:../FreeRTOS/Source/tasks.c **** 
2292:../FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
 3602              		.loc 1 2292 0
 3603 0168 BA69     		ldr	r2, [r7, #24]
 3604 016a 3B6A     		ldr	r3, [r7, #32]
 3605 016c 9A42     		cmp	r2, r3
 3606 016e 7FF468AF 		bne	.L153
2293:../FreeRTOS/Source/tasks.c **** 	}
 3607              		.loc 1 2293 0
 3608 0172 07F12807 		add	r7, r7, #40
 3609 0176 BD46     		mov	sp, r7
 3610 0178 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3611              		.cfi_endproc
 3612              	.LFE145:
 3614              		.section	.text.usTaskCheckFreeStackSpace,"ax",%progbits
 3615              		.align	2
 3616              		.thumb
 3617              		.thumb_func
 3619              	usTaskCheckFreeStackSpace:
 3620              	.LFB146:
2294:../FreeRTOS/Source/tasks.c **** 
2295:../FreeRTOS/Source/tasks.c **** #endif
2296:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2297:../FreeRTOS/Source/tasks.c **** 
2298:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2299:../FreeRTOS/Source/tasks.c **** 
2300:../FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2301:../FreeRTOS/Source/tasks.c **** 	{
 3621              		.loc 1 2301 0
 3622              		.cfi_startproc
 3623              		@ args = 0, pretend = 0, frame = 8
 3624              		@ frame_needed = 1, uses_anonymous_args = 0
 3625              		@ link register save eliminated.
 3626 0000 90B4     		push	{r4, r7}
 3627              	.LCFI103:
 3628              		.cfi_def_cfa_offset 8
 3629              		.cfi_offset 7, -4
 3630              		.cfi_offset 4, -8
 3631 0002 82B0     		sub	sp, sp, #8
 3632              	.LCFI104:
 3633              		.cfi_def_cfa_offset 16
 3634 0004 00AF     		add	r7, sp, #0
 3635              	.LCFI105:
 3636              		.cfi_def_cfa_register 7
 3637 0006 7860     		str	r0, [r7, #4]
2302:../FreeRTOS/Source/tasks.c **** 	register unsigned short usCount = 0U;
 3638              		.loc 1 2302 0
 3639 0008 4FF00004 		mov	r4, #0
2303:../FreeRTOS/Source/tasks.c **** 
2304:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3640              		.loc 1 2304 0
 3641 000c 06E0     		b	.L155
 3642              	.L156:
2305:../FreeRTOS/Source/tasks.c **** 		{
2306:../FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3643              		.loc 1 2306 0
 3644 000e 7B68     		ldr	r3, [r7, #4]
 3645 0010 03F10103 		add	r3, r3, #1
 3646 0014 7B60     		str	r3, [r7, #4]
2307:../FreeRTOS/Source/tasks.c **** 			usCount++;
 3647              		.loc 1 2307 0
 3648 0016 04F10103 		add	r3, r4, #1
 3649 001a 9CB2     		uxth	r4, r3
 3650              	.L155:
2304:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3651              		.loc 1 2304 0 discriminator 1
 3652 001c 7B68     		ldr	r3, [r7, #4]
 3653 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3654 0020 A52B     		cmp	r3, #165
 3655 0022 F4D0     		beq	.L156
2308:../FreeRTOS/Source/tasks.c **** 		}
2309:../FreeRTOS/Source/tasks.c **** 
2310:../FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 3656              		.loc 1 2310 0
 3657 0024 4FEA9403 		lsr	r3, r4, #2
 3658 0028 9CB2     		uxth	r4, r3
2311:../FreeRTOS/Source/tasks.c **** 
2312:../FreeRTOS/Source/tasks.c **** 		return usCount;
 3659              		.loc 1 2312 0
 3660 002a 2346     		mov	r3, r4
2313:../FreeRTOS/Source/tasks.c **** 	}
 3661              		.loc 1 2313 0
 3662 002c 1846     		mov	r0, r3
 3663 002e 07F10807 		add	r7, r7, #8
 3664 0032 BD46     		mov	sp, r7
 3665 0034 90BC     		pop	{r4, r7}
 3666 0036 7047     		bx	lr
 3667              		.cfi_endproc
 3668              	.LFE146:
 3670              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3671              		.align	2
 3672              		.global	uxTaskGetStackHighWaterMark
 3673              		.thumb
 3674              		.thumb_func
 3676              	uxTaskGetStackHighWaterMark:
 3677              	.LFB147:
2314:../FreeRTOS/Source/tasks.c **** 
2315:../FreeRTOS/Source/tasks.c **** #endif
2316:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2317:../FreeRTOS/Source/tasks.c **** 
2318:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2319:../FreeRTOS/Source/tasks.c **** 
2320:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2321:../FreeRTOS/Source/tasks.c **** 	{
 3678              		.loc 1 2321 0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 24
 3681              		@ frame_needed = 1, uses_anonymous_args = 0
 3682 0000 80B5     		push	{r7, lr}
 3683              	.LCFI106:
 3684              		.cfi_def_cfa_offset 8
 3685              		.cfi_offset 14, -4
 3686              		.cfi_offset 7, -8
 3687 0002 86B0     		sub	sp, sp, #24
 3688              	.LCFI107:
 3689              		.cfi_def_cfa_offset 32
 3690 0004 00AF     		add	r7, sp, #0
 3691              	.LCFI108:
 3692              		.cfi_def_cfa_register 7
 3693 0006 7860     		str	r0, [r7, #4]
2322:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2323:../FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2324:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2325:../FreeRTOS/Source/tasks.c **** 
2326:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3694              		.loc 1 2326 0
 3695 0008 7B68     		ldr	r3, [r7, #4]
 3696 000a 002B     		cmp	r3, #0
 3697 000c 05D1     		bne	.L158
 3698              		.loc 1 2326 0 is_stmt 0 discriminator 1
 3699 000e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3700 0012 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3701 0016 1B68     		ldr	r3, [r3, #0]
 3702 0018 00E0     		b	.L159
 3703              	.L158:
 3704              		.loc 1 2326 0 discriminator 2
 3705 001a 7B68     		ldr	r3, [r7, #4]
 3706              	.L159:
 3707              		.loc 1 2326 0 discriminator 3
 3708 001c 7B61     		str	r3, [r7, #20]
2327:../FreeRTOS/Source/tasks.c **** 
2328:../FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2329:../FreeRTOS/Source/tasks.c **** 		{
2330:../FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 3709              		.loc 1 2330 0 is_stmt 1 discriminator 3
 3710 001e 7B69     		ldr	r3, [r7, #20]
 3711 0020 1B6B     		ldr	r3, [r3, #48]
 3712 0022 3B61     		str	r3, [r7, #16]
2331:../FreeRTOS/Source/tasks.c **** 		}
2332:../FreeRTOS/Source/tasks.c **** 		#else
2333:../FreeRTOS/Source/tasks.c **** 		{
2334:../FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2335:../FreeRTOS/Source/tasks.c **** 		}
2336:../FreeRTOS/Source/tasks.c **** 		#endif
2337:../FreeRTOS/Source/tasks.c **** 
2338:../FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 3713              		.loc 1 2338 0 discriminator 3
 3714 0024 3869     		ldr	r0, [r7, #16]
 3715 0026 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3716 002a 0346     		mov	r3, r0
 3717 002c FB60     		str	r3, [r7, #12]
2339:../FreeRTOS/Source/tasks.c **** 
2340:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 3718              		.loc 1 2340 0 discriminator 3
 3719 002e FB68     		ldr	r3, [r7, #12]
2341:../FreeRTOS/Source/tasks.c **** 	}
 3720              		.loc 1 2341 0 discriminator 3
 3721 0030 1846     		mov	r0, r3
 3722 0032 07F11807 		add	r7, r7, #24
 3723 0036 BD46     		mov	sp, r7
 3724 0038 80BD     		pop	{r7, pc}
 3725              		.cfi_endproc
 3726              	.LFE147:
 3728 003a 00BF     		.section	.text.prvDeleteTCB,"ax",%progbits
 3729              		.align	2
 3730              		.thumb
 3731              		.thumb_func
 3733              	prvDeleteTCB:
 3734              	.LFB148:
2342:../FreeRTOS/Source/tasks.c **** 
2343:../FreeRTOS/Source/tasks.c **** #endif
2344:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2345:../FreeRTOS/Source/tasks.c **** 
2346:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2347:../FreeRTOS/Source/tasks.c **** 
2348:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2349:../FreeRTOS/Source/tasks.c **** 	{
 3735              		.loc 1 2349 0
 3736              		.cfi_startproc
 3737              		@ args = 0, pretend = 0, frame = 8
 3738              		@ frame_needed = 1, uses_anonymous_args = 0
 3739 0000 80B5     		push	{r7, lr}
 3740              	.LCFI109:
 3741              		.cfi_def_cfa_offset 8
 3742              		.cfi_offset 14, -4
 3743              		.cfi_offset 7, -8
 3744 0002 82B0     		sub	sp, sp, #8
 3745              	.LCFI110:
 3746              		.cfi_def_cfa_offset 16
 3747 0004 00AF     		add	r7, sp, #0
 3748              	.LCFI111:
 3749              		.cfi_def_cfa_register 7
 3750 0006 7860     		str	r0, [r7, #4]
2350:../FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2351:../FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2352:../FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 3751              		.loc 1 2352 0
 3752 0008 7B68     		ldr	r3, [r7, #4]
 3753 000a 1B6B     		ldr	r3, [r3, #48]
 3754 000c 1846     		mov	r0, r3
 3755 000e FFF7FEFF 		bl	free
2353:../FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 3756              		.loc 1 2353 0
 3757 0012 7868     		ldr	r0, [r7, #4]
 3758 0014 FFF7FEFF 		bl	free
2354:../FreeRTOS/Source/tasks.c **** 	}
 3759              		.loc 1 2354 0
 3760 0018 07F10807 		add	r7, r7, #8
 3761 001c BD46     		mov	sp, r7
 3762 001e 80BD     		pop	{r7, pc}
 3763              		.cfi_endproc
 3764              	.LFE148:
 3766              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3767              		.align	2
 3768              		.global	xTaskGetCurrentTaskHandle
 3769              		.thumb
 3770              		.thumb_func
 3772              	xTaskGetCurrentTaskHandle:
 3773              	.LFB149:
2355:../FreeRTOS/Source/tasks.c **** 
2356:../FreeRTOS/Source/tasks.c **** #endif
2357:../FreeRTOS/Source/tasks.c **** 
2358:../FreeRTOS/Source/tasks.c **** 
2359:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2360:../FreeRTOS/Source/tasks.c **** 
2361:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2362:../FreeRTOS/Source/tasks.c **** 
2363:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2364:../FreeRTOS/Source/tasks.c **** 	{
 3774              		.loc 1 2364 0
 3775              		.cfi_startproc
 3776              		@ args = 0, pretend = 0, frame = 8
 3777              		@ frame_needed = 1, uses_anonymous_args = 0
 3778              		@ link register save eliminated.
 3779 0000 80B4     		push	{r7}
 3780              	.LCFI112:
 3781              		.cfi_def_cfa_offset 4
 3782              		.cfi_offset 7, -4
 3783 0002 83B0     		sub	sp, sp, #12
 3784              	.LCFI113:
 3785              		.cfi_def_cfa_offset 16
 3786 0004 00AF     		add	r7, sp, #0
 3787              	.LCFI114:
 3788              		.cfi_def_cfa_register 7
2365:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2366:../FreeRTOS/Source/tasks.c **** 
2367:../FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2368:../FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2369:../FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2370:../FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3789              		.loc 1 2370 0
 3790 0006 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3791 000a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3792 000e 1B68     		ldr	r3, [r3, #0]
 3793 0010 7B60     		str	r3, [r7, #4]
2371:../FreeRTOS/Source/tasks.c **** 
2372:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 3794              		.loc 1 2372 0
 3795 0012 7B68     		ldr	r3, [r7, #4]
2373:../FreeRTOS/Source/tasks.c **** 	}
 3796              		.loc 1 2373 0
 3797 0014 1846     		mov	r0, r3
 3798 0016 07F10C07 		add	r7, r7, #12
 3799 001a BD46     		mov	sp, r7
 3800 001c 80BC     		pop	{r7}
 3801 001e 7047     		bx	lr
 3802              		.cfi_endproc
 3803              	.LFE149:
 3805              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3806              		.align	2
 3807              		.global	vTaskPriorityInherit
 3808              		.thumb
 3809              		.thumb_func
 3811              	vTaskPriorityInherit:
 3812              	.LFB150:
2374:../FreeRTOS/Source/tasks.c **** 
2375:../FreeRTOS/Source/tasks.c **** #endif
2376:../FreeRTOS/Source/tasks.c **** 
2377:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2378:../FreeRTOS/Source/tasks.c **** 
2379:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2380:../FreeRTOS/Source/tasks.c **** 
2381:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2382:../FreeRTOS/Source/tasks.c **** 	{
2383:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2384:../FreeRTOS/Source/tasks.c **** 
2385:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2386:../FreeRTOS/Source/tasks.c **** 		{
2387:../FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2388:../FreeRTOS/Source/tasks.c **** 		}
2389:../FreeRTOS/Source/tasks.c **** 		else
2390:../FreeRTOS/Source/tasks.c **** 		{
2391:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2392:../FreeRTOS/Source/tasks.c **** 			{
2393:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2394:../FreeRTOS/Source/tasks.c **** 			}
2395:../FreeRTOS/Source/tasks.c **** 			else
2396:../FreeRTOS/Source/tasks.c **** 			{
2397:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2398:../FreeRTOS/Source/tasks.c **** 			}
2399:../FreeRTOS/Source/tasks.c **** 		}
2400:../FreeRTOS/Source/tasks.c **** 
2401:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2402:../FreeRTOS/Source/tasks.c **** 	}
2403:../FreeRTOS/Source/tasks.c **** 
2404:../FreeRTOS/Source/tasks.c **** #endif
2405:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2406:../FreeRTOS/Source/tasks.c **** 
2407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2408:../FreeRTOS/Source/tasks.c **** 
2409:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2410:../FreeRTOS/Source/tasks.c **** 	{
 3813              		.loc 1 2410 0
 3814              		.cfi_startproc
 3815              		@ args = 0, pretend = 0, frame = 16
 3816              		@ frame_needed = 1, uses_anonymous_args = 0
 3817 0000 80B5     		push	{r7, lr}
 3818              	.LCFI115:
 3819              		.cfi_def_cfa_offset 8
 3820              		.cfi_offset 14, -4
 3821              		.cfi_offset 7, -8
 3822 0002 84B0     		sub	sp, sp, #16
 3823              	.LCFI116:
 3824              		.cfi_def_cfa_offset 24
 3825 0004 00AF     		add	r7, sp, #0
 3826              	.LCFI117:
 3827              		.cfi_def_cfa_register 7
 3828 0006 7860     		str	r0, [r7, #4]
2411:../FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3829              		.loc 1 2411 0
 3830 0008 7B68     		ldr	r3, [r7, #4]
 3831 000a FB60     		str	r3, [r7, #12]
2412:../FreeRTOS/Source/tasks.c **** 
2413:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxMutexHolder );
2414:../FreeRTOS/Source/tasks.c **** 
2415:../FreeRTOS/Source/tasks.c **** 		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3832              		.loc 1 2415 0
 3833 000c FB68     		ldr	r3, [r7, #12]
 3834 000e DA6A     		ldr	r2, [r3, #44]
 3835 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3836 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3837 0018 1B68     		ldr	r3, [r3, #0]
 3838 001a DB6A     		ldr	r3, [r3, #44]
 3839 001c 9A42     		cmp	r2, r3
 3840 001e 57D2     		bcs	.L162
2416:../FreeRTOS/Source/tasks.c **** 		{
2417:../FreeRTOS/Source/tasks.c **** 			/* Adjust the mutex holder state to account for its new priority. */
2418:../FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxC
 3841              		.loc 1 2418 0
 3842 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3843 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3844 0028 1B68     		ldr	r3, [r3, #0]
 3845 002a DB6A     		ldr	r3, [r3, #44]
 3846 002c C3F10502 		rsb	r2, r3, #5
 3847 0030 FB68     		ldr	r3, [r7, #12]
 3848 0032 9A61     		str	r2, [r3, #24]
2419:../FreeRTOS/Source/tasks.c **** 
2420:../FreeRTOS/Source/tasks.c **** 			/* If the task being modified is in the ready state it will need to
2421:../FreeRTOS/Source/tasks.c **** 			be moved in to a new list. */
2422:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericList
 3849              		.loc 1 2422 0
 3850 0034 FB68     		ldr	r3, [r7, #12]
 3851 0036 5969     		ldr	r1, [r3, #20]
 3852 0038 FB68     		ldr	r3, [r7, #12]
 3853 003a DA6A     		ldr	r2, [r3, #44]
 3854 003c 1346     		mov	r3, r2
 3855 003e 4FEA8303 		lsl	r3, r3, #2
 3856 0042 9B18     		adds	r3, r3, r2
 3857 0044 4FEA8303 		lsl	r3, r3, #2
 3858 0048 1A46     		mov	r2, r3
 3859 004a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3860 004e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3861 0052 D318     		adds	r3, r2, r3
 3862 0054 9942     		cmp	r1, r3
 3863 0056 33D1     		bne	.L164
2423:../FreeRTOS/Source/tasks.c **** 			{
2424:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3864              		.loc 1 2424 0
 3865 0058 FB68     		ldr	r3, [r7, #12]
 3866 005a 03F10403 		add	r3, r3, #4
 3867 005e 1846     		mov	r0, r3
 3868 0060 FFF7FEFF 		bl	vListRemove
2425:../FreeRTOS/Source/tasks.c **** 
2426:../FreeRTOS/Source/tasks.c **** 				/* Inherit the priority before being moved into the new list. */
2427:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3869              		.loc 1 2427 0
 3870 0064 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3871 0068 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3872 006c 1B68     		ldr	r3, [r3, #0]
 3873 006e DA6A     		ldr	r2, [r3, #44]
 3874 0070 FB68     		ldr	r3, [r7, #12]
 3875 0072 DA62     		str	r2, [r3, #44]
2428:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3876              		.loc 1 2428 0
 3877 0074 FB68     		ldr	r3, [r7, #12]
 3878 0076 DA6A     		ldr	r2, [r3, #44]
 3879 0078 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3880 007c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3881 0080 1B68     		ldr	r3, [r3, #0]
 3882 0082 9A42     		cmp	r2, r3
 3883 0084 06D9     		bls	.L165
 3884              		.loc 1 2428 0 is_stmt 0 discriminator 1
 3885 0086 FB68     		ldr	r3, [r7, #12]
 3886 0088 DA6A     		ldr	r2, [r3, #44]
 3887 008a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3888 008e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3889 0092 1A60     		str	r2, [r3, #0]
 3890              	.L165:
 3891              		.loc 1 2428 0 discriminator 2
 3892 0094 FB68     		ldr	r3, [r7, #12]
 3893 0096 DA6A     		ldr	r2, [r3, #44]
 3894 0098 1346     		mov	r3, r2
 3895 009a 4FEA8303 		lsl	r3, r3, #2
 3896 009e 9B18     		adds	r3, r3, r2
 3897 00a0 4FEA8303 		lsl	r3, r3, #2
 3898 00a4 1A46     		mov	r2, r3
 3899 00a6 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3900 00aa C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3901 00ae D218     		adds	r2, r2, r3
 3902 00b0 FB68     		ldr	r3, [r7, #12]
 3903 00b2 03F10403 		add	r3, r3, #4
 3904 00b6 1046     		mov	r0, r2
 3905 00b8 1946     		mov	r1, r3
 3906 00ba FFF7FEFF 		bl	vListInsertEnd
 3907 00be 07E0     		b	.L162
 3908              	.L164:
2429:../FreeRTOS/Source/tasks.c **** 			}
2430:../FreeRTOS/Source/tasks.c **** 			else
2431:../FreeRTOS/Source/tasks.c **** 			{
2432:../FreeRTOS/Source/tasks.c **** 				/* Just inherit the priority. */
2433:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3909              		.loc 1 2433 0 is_stmt 1
 3910 00c0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3911 00c4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3912 00c8 1B68     		ldr	r3, [r3, #0]
 3913 00ca DA6A     		ldr	r2, [r3, #44]
 3914 00cc FB68     		ldr	r3, [r7, #12]
 3915 00ce DA62     		str	r2, [r3, #44]
 3916              	.L162:
2434:../FreeRTOS/Source/tasks.c **** 			}
2435:../FreeRTOS/Source/tasks.c **** 		}
2436:../FreeRTOS/Source/tasks.c **** 	}
 3917              		.loc 1 2436 0
 3918 00d0 07F11007 		add	r7, r7, #16
 3919 00d4 BD46     		mov	sp, r7
 3920 00d6 80BD     		pop	{r7, pc}
 3921              		.cfi_endproc
 3922              	.LFE150:
 3924              		.section	.text.vTaskPriorityDisinherit,"ax",%progbits
 3925              		.align	2
 3926              		.global	vTaskPriorityDisinherit
 3927              		.thumb
 3928              		.thumb_func
 3930              	vTaskPriorityDisinherit:
 3931              	.LFB151:
2437:../FreeRTOS/Source/tasks.c **** 
2438:../FreeRTOS/Source/tasks.c **** #endif
2439:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2440:../FreeRTOS/Source/tasks.c **** 
2441:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2442:../FreeRTOS/Source/tasks.c **** 
2443:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2444:../FreeRTOS/Source/tasks.c **** 	{
 3932              		.loc 1 2444 0
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 16
 3935              		@ frame_needed = 1, uses_anonymous_args = 0
 3936 0000 80B5     		push	{r7, lr}
 3937              	.LCFI118:
 3938              		.cfi_def_cfa_offset 8
 3939              		.cfi_offset 14, -4
 3940              		.cfi_offset 7, -8
 3941 0002 84B0     		sub	sp, sp, #16
 3942              	.LCFI119:
 3943              		.cfi_def_cfa_offset 24
 3944 0004 00AF     		add	r7, sp, #0
 3945              	.LCFI120:
 3946              		.cfi_def_cfa_register 7
 3947 0006 7860     		str	r0, [r7, #4]
2445:../FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3948              		.loc 1 2445 0
 3949 0008 7B68     		ldr	r3, [r7, #4]
 3950 000a FB60     		str	r3, [r7, #12]
2446:../FreeRTOS/Source/tasks.c **** 
2447:../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3951              		.loc 1 2447 0
 3952 000c 7B68     		ldr	r3, [r7, #4]
 3953 000e 002B     		cmp	r3, #0
 3954 0010 3AD0     		beq	.L166
2448:../FreeRTOS/Source/tasks.c **** 		{
2449:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3955              		.loc 1 2449 0
 3956 0012 FB68     		ldr	r3, [r7, #12]
 3957 0014 DA6A     		ldr	r2, [r3, #44]
 3958 0016 FB68     		ldr	r3, [r7, #12]
 3959 0018 5B6C     		ldr	r3, [r3, #68]
 3960 001a 9A42     		cmp	r2, r3
 3961 001c 34D0     		beq	.L166
2450:../FreeRTOS/Source/tasks.c **** 			{
2451:../FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2452:../FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2453:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3962              		.loc 1 2453 0
 3963 001e FB68     		ldr	r3, [r7, #12]
 3964 0020 03F10403 		add	r3, r3, #4
 3965 0024 1846     		mov	r0, r3
 3966 0026 FFF7FEFF 		bl	vListRemove
2454:../FreeRTOS/Source/tasks.c **** 
2455:../FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding ourselves into the new
2456:../FreeRTOS/Source/tasks.c **** 				ready list. */
2457:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 3967              		.loc 1 2457 0
 3968 002a FB68     		ldr	r3, [r7, #12]
 3969 002c 5A6C     		ldr	r2, [r3, #68]
 3970 002e FB68     		ldr	r3, [r7, #12]
 3971 0030 DA62     		str	r2, [r3, #44]
2458:../FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3972              		.loc 1 2458 0
 3973 0032 FB68     		ldr	r3, [r7, #12]
 3974 0034 DB6A     		ldr	r3, [r3, #44]
 3975 0036 C3F10502 		rsb	r2, r3, #5
 3976 003a FB68     		ldr	r3, [r7, #12]
 3977 003c 9A61     		str	r2, [r3, #24]
2459:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3978              		.loc 1 2459 0
 3979 003e FB68     		ldr	r3, [r7, #12]
 3980 0040 DA6A     		ldr	r2, [r3, #44]
 3981 0042 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3982 0046 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3983 004a 1B68     		ldr	r3, [r3, #0]
 3984 004c 9A42     		cmp	r2, r3
 3985 004e 06D9     		bls	.L168
 3986              		.loc 1 2459 0 is_stmt 0 discriminator 1
 3987 0050 FB68     		ldr	r3, [r7, #12]
 3988 0052 DA6A     		ldr	r2, [r3, #44]
 3989 0054 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3990 0058 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3991 005c 1A60     		str	r2, [r3, #0]
 3992              	.L168:
 3993              		.loc 1 2459 0 discriminator 2
 3994 005e FB68     		ldr	r3, [r7, #12]
 3995 0060 DA6A     		ldr	r2, [r3, #44]
 3996 0062 1346     		mov	r3, r2
 3997 0064 4FEA8303 		lsl	r3, r3, #2
 3998 0068 9B18     		adds	r3, r3, r2
 3999 006a 4FEA8303 		lsl	r3, r3, #2
 4000 006e 1A46     		mov	r2, r3
 4001 0070 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 4002 0074 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4003 0078 D218     		adds	r2, r2, r3
 4004 007a FB68     		ldr	r3, [r7, #12]
 4005 007c 03F10403 		add	r3, r3, #4
 4006 0080 1046     		mov	r0, r2
 4007 0082 1946     		mov	r1, r3
 4008 0084 FFF7FEFF 		bl	vListInsertEnd
 4009              	.L166:
2460:../FreeRTOS/Source/tasks.c **** 			}
2461:../FreeRTOS/Source/tasks.c **** 		}
2462:../FreeRTOS/Source/tasks.c **** 	}
 4010              		.loc 1 2462 0 is_stmt 1
 4011 0088 07F11007 		add	r7, r7, #16
 4012 008c BD46     		mov	sp, r7
 4013 008e 80BD     		pop	{r7, pc}
 4014              		.cfi_endproc
 4015              	.LFE151:
 4017              		.text
 4018              	.Letext0:
 4019              		.file 2 "d:\\elektronik\\ides\\eclipse\\yagarto\\bin\\../lib/gcc/arm-none-eabi/4.6.2/include/stdde
 4020              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 4021              		.file 4 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 4022              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 4023              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 4024              		.file 7 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 4025              		.file 8 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 4026              		.file 9 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
  C:\Temp\cclTB4Wq.s:23     .bss.pxCurrentTCB:00000000 pxCurrentTCB
  C:\Temp\cclTB4Wq.s:20     .bss.pxCurrentTCB:00000000 $d
  C:\Temp\cclTB4Wq.s:26     .bss.pxReadyTasksLists:00000000 $d
  C:\Temp\cclTB4Wq.s:29     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
  C:\Temp\cclTB4Wq.s:32     .bss.xDelayedTaskList1:00000000 $d
  C:\Temp\cclTB4Wq.s:35     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
  C:\Temp\cclTB4Wq.s:38     .bss.xDelayedTaskList2:00000000 $d
  C:\Temp\cclTB4Wq.s:41     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
  C:\Temp\cclTB4Wq.s:44     .bss.pxDelayedTaskList:00000000 $d
  C:\Temp\cclTB4Wq.s:47     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
  C:\Temp\cclTB4Wq.s:50     .bss.pxOverflowDelayedTaskList:00000000 $d
  C:\Temp\cclTB4Wq.s:53     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
  C:\Temp\cclTB4Wq.s:56     .bss.xPendingReadyList:00000000 $d
  C:\Temp\cclTB4Wq.s:59     .bss.xPendingReadyList:00000000 xPendingReadyList
  C:\Temp\cclTB4Wq.s:62     .bss.xTasksWaitingTermination:00000000 $d
  C:\Temp\cclTB4Wq.s:65     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
  C:\Temp\cclTB4Wq.s:68     .bss.uxTasksDeleted:00000000 $d
  C:\Temp\cclTB4Wq.s:71     .bss.uxTasksDeleted:00000000 uxTasksDeleted
  C:\Temp\cclTB4Wq.s:74     .bss.xSuspendedTaskList:00000000 $d
  C:\Temp\cclTB4Wq.s:77     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
  C:\Temp\cclTB4Wq.s:80     .bss.xIdleTaskHandle:00000000 $d
  C:\Temp\cclTB4Wq.s:83     .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
  C:\Temp\cclTB4Wq.s:86     .bss.uxCurrentNumberOfTasks:00000000 $d
  C:\Temp\cclTB4Wq.s:89     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
  C:\Temp\cclTB4Wq.s:92     .bss.xTickCount:00000000 $d
  C:\Temp\cclTB4Wq.s:95     .bss.xTickCount:00000000 xTickCount
  C:\Temp\cclTB4Wq.s:98     .bss.uxTopUsedPriority:00000000 $d
  C:\Temp\cclTB4Wq.s:101    .bss.uxTopUsedPriority:00000000 uxTopUsedPriority
  C:\Temp\cclTB4Wq.s:104    .bss.uxTopReadyPriority:00000000 $d
  C:\Temp\cclTB4Wq.s:107    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
  C:\Temp\cclTB4Wq.s:110    .bss.xSchedulerRunning:00000000 $d
  C:\Temp\cclTB4Wq.s:113    .bss.xSchedulerRunning:00000000 xSchedulerRunning
  C:\Temp\cclTB4Wq.s:116    .bss.uxSchedulerSuspended:00000000 $d
  C:\Temp\cclTB4Wq.s:119    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
  C:\Temp\cclTB4Wq.s:122    .bss.uxMissedTicks:00000000 $d
  C:\Temp\cclTB4Wq.s:125    .bss.uxMissedTicks:00000000 uxMissedTicks
  C:\Temp\cclTB4Wq.s:128    .bss.xMissedYield:00000000 $d
  C:\Temp\cclTB4Wq.s:131    .bss.xMissedYield:00000000 xMissedYield
  C:\Temp\cclTB4Wq.s:134    .bss.xNumOfOverflows:00000000 $d
  C:\Temp\cclTB4Wq.s:137    .bss.xNumOfOverflows:00000000 xNumOfOverflows
  C:\Temp\cclTB4Wq.s:140    .bss.uxTaskNumber:00000000 $d
  C:\Temp\cclTB4Wq.s:143    .bss.uxTaskNumber:00000000 uxTaskNumber
  C:\Temp\cclTB4Wq.s:146    .data.xNextTaskUnblockTime:00000000 $d
  C:\Temp\cclTB4Wq.s:149    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
  C:\Temp\cclTB4Wq.s:152    .bss.pcStatsString:00000000 $d
  C:\Temp\cclTB4Wq.s:155    .bss.pcStatsString:00000000 pcStatsString
  C:\Temp\cclTB4Wq.s:158    .bss.ulTaskSwitchedInTime:00000000 $d
  C:\Temp\cclTB4Wq.s:161    .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
  C:\Temp\cclTB4Wq.s:164    .text.xTaskGenericCreate:00000000 $t
  C:\Temp\cclTB4Wq.s:169    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
  C:\Temp\cclTB4Wq.s:3317   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
  C:\Temp\cclTB4Wq.s:2968   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
  C:\Temp\cclTB4Wq.s:3059   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
  C:\Temp\cclTB4Wq.s:390    .text.vTaskDelete:00000000 $t
  C:\Temp\cclTB4Wq.s:395    .text.vTaskDelete:00000000 vTaskDelete
  C:\Temp\cclTB4Wq.s:503    .text.vTaskDelayUntil:00000000 $t
  C:\Temp\cclTB4Wq.s:508    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
  C:\Temp\cclTB4Wq.s:1448   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
  C:\Temp\cclTB4Wq.s:3237   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
  C:\Temp\cclTB4Wq.s:1483   .text.xTaskResumeAll:00000000 xTaskResumeAll
  C:\Temp\cclTB4Wq.s:620    .text.vTaskDelay:00000000 $t
  C:\Temp\cclTB4Wq.s:625    .text.vTaskDelay:00000000 vTaskDelay
  C:\Temp\cclTB4Wq.s:689    .text.uxTaskPriorityGet:00000000 $t
  C:\Temp\cclTB4Wq.s:694    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
  C:\Temp\cclTB4Wq.s:746    .text.vTaskPrioritySet:00000000 $t
  C:\Temp\cclTB4Wq.s:751    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
  C:\Temp\cclTB4Wq.s:929    .text.vTaskSuspend:00000000 $t
  C:\Temp\cclTB4Wq.s:934    .text.vTaskSuspend:00000000 vTaskSuspend
  C:\Temp\cclTB4Wq.s:2393   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
  C:\Temp\cclTB4Wq.s:1047   .text.xTaskIsTaskSuspended:00000000 $t
  C:\Temp\cclTB4Wq.s:1052   .text.xTaskIsTaskSuspended:00000000 xTaskIsTaskSuspended
  C:\Temp\cclTB4Wq.s:1111   .text.vTaskResume:00000000 $t
  C:\Temp\cclTB4Wq.s:1116   .text.vTaskResume:00000000 vTaskResume
  C:\Temp\cclTB4Wq.s:1215   .text.xTaskResumeFromISR:00000000 $t
  C:\Temp\cclTB4Wq.s:1220   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
  C:\Temp\cclTB4Wq.s:1325   .rodata:00000000 $d
  C:\Temp\cclTB4Wq.s:1326   .rodata:00000000 .LC0
  C:\Temp\cclTB4Wq.s:1329   .text.vTaskStartScheduler:00000000 $t
  C:\Temp\cclTB4Wq.s:1334   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
  C:\Temp\cclTB4Wq.s:2925   .text.prvIdleTask:00000000 prvIdleTask
  C:\Temp\cclTB4Wq.s:1404   .text.vTaskEndScheduler:00000000 $t
  C:\Temp\cclTB4Wq.s:1409   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
  C:\Temp\cclTB4Wq.s:1443   .text.vTaskSuspendAll:00000000 $t
  C:\Temp\cclTB4Wq.s:1478   .text.xTaskResumeAll:00000000 $t
  C:\Temp\cclTB4Wq.s:2002   .text.vTaskIncrementTick:00000000 vTaskIncrementTick
  C:\Temp\cclTB4Wq.s:1658   .text.xTaskGetTickCount:00000000 $t
  C:\Temp\cclTB4Wq.s:1663   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
  C:\Temp\cclTB4Wq.s:1700   .text.xTaskGetTickCountFromISR:00000000 $t
  C:\Temp\cclTB4Wq.s:1705   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
  C:\Temp\cclTB4Wq.s:1755   .text.uxTaskGetNumberOfTasks:00000000 $t
  C:\Temp\cclTB4Wq.s:1760   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
  C:\Temp\cclTB4Wq.s:1788   .rodata:00000008 .LC1
  C:\Temp\cclTB4Wq.s:1791   .text.vTaskGetRunTimeStats:00000000 $t
  C:\Temp\cclTB4Wq.s:1796   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
  C:\Temp\cclTB4Wq.s:3412   .text.prvGenerateRunTimeStatsForTasksInList:00000000 prvGenerateRunTimeStatsForTasksInList
  C:\Temp\cclTB4Wq.s:1965   .text.xTaskGetIdleTaskHandle:00000000 $t
  C:\Temp\cclTB4Wq.s:1970   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
  C:\Temp\cclTB4Wq.s:1997   .text.vTaskIncrementTick:00000000 $t
  C:\Temp\cclTB4Wq.s:2208   .text.vTaskSetApplicationTaskTag:00000000 $t
  C:\Temp\cclTB4Wq.s:2213   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
  C:\Temp\cclTB4Wq.s:2263   .text.xTaskGetApplicationTaskTag:00000000 $t
  C:\Temp\cclTB4Wq.s:2268   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
  C:\Temp\cclTB4Wq.s:2320   .text.xTaskCallApplicationTaskHook:00000000 $t
  C:\Temp\cclTB4Wq.s:2325   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
  C:\Temp\cclTB4Wq.s:2388   .text.vTaskSwitchContext:00000000 $t
  C:\Temp\cclTB4Wq.s:2553   .text.vTaskPlaceOnEventList:00000000 $t
  C:\Temp\cclTB4Wq.s:2558   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
  C:\Temp\cclTB4Wq.s:2626   .text.xTaskRemoveFromEventList:00000000 $t
  C:\Temp\cclTB4Wq.s:2631   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
  C:\Temp\cclTB4Wq.s:2740   .text.vTaskSetTimeOutState:00000000 $t
  C:\Temp\cclTB4Wq.s:2745   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
  C:\Temp\cclTB4Wq.s:2784   .text.xTaskCheckForTimeOut:00000000 $t
  C:\Temp\cclTB4Wq.s:2789   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
  C:\Temp\cclTB4Wq.s:2889   .text.vTaskMissedYield:00000000 $t
  C:\Temp\cclTB4Wq.s:2894   .text.vTaskMissedYield:00000000 vTaskMissedYield
  C:\Temp\cclTB4Wq.s:2921   .text.prvIdleTask:00000000 $t
  C:\Temp\cclTB4Wq.s:3146   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
  C:\Temp\cclTB4Wq.s:2964   .text.prvInitialiseTCBVariables:00000000 $t
  C:\Temp\cclTB4Wq.s:3055   .text.prvInitialiseTaskLists:00000000 $t
  C:\Temp\cclTB4Wq.s:3142   .text.prvCheckTasksWaitingTermination:00000000 $t
  C:\Temp\cclTB4Wq.s:3733   .text.prvDeleteTCB:00000000 prvDeleteTCB
  C:\Temp\cclTB4Wq.s:3233   .text.prvAddCurrentTaskToDelayedList:00000000 $t
  C:\Temp\cclTB4Wq.s:3313   .text.prvAllocateTCBAndStack:00000000 $t
  C:\Temp\cclTB4Wq.s:3399   .rodata:0000000c .LC2
  C:\Temp\cclTB4Wq.s:3402   .rodata:00000034 .LC3
  C:\Temp\cclTB4Wq.s:3405   .rodata:00000054 .LC4
  C:\Temp\cclTB4Wq.s:3408   .text.prvGenerateRunTimeStatsForTasksInList:00000000 $t
  C:\Temp\cclTB4Wq.s:3619   .text.usTaskCheckFreeStackSpace:00000000 usTaskCheckFreeStackSpace
  C:\Temp\cclTB4Wq.s:3615   .text.usTaskCheckFreeStackSpace:00000000 $t
  C:\Temp\cclTB4Wq.s:3671   .text.uxTaskGetStackHighWaterMark:00000000 $t
  C:\Temp\cclTB4Wq.s:3676   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
  C:\Temp\cclTB4Wq.s:3729   .text.prvDeleteTCB:00000000 $t
  C:\Temp\cclTB4Wq.s:3767   .text.xTaskGetCurrentTaskHandle:00000000 $t
  C:\Temp\cclTB4Wq.s:3772   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
  C:\Temp\cclTB4Wq.s:3806   .text.vTaskPriorityInherit:00000000 $t
  C:\Temp\cclTB4Wq.s:3811   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
  C:\Temp\cclTB4Wq.s:3925   .text.vTaskPriorityDisinherit:00000000 $t
  C:\Temp\cclTB4Wq.s:3930   .text.vTaskPriorityDisinherit:00000000 vTaskPriorityDisinherit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
init_us_timer
xPortStartScheduler
vPortEndScheduler
get_us_time
strlen
memcpy
vApplicationStackOverflowHook
vListInsert
strncpy
vListInitialiseItem
vListInitialise
malloc
free
memset
sprintf
strcat
