   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	pxCurrentTCB
  19              		.bss
  20              		.align	2
  23              	pxCurrentTCB:
  24 0000 00000000 		.space	4
  25              		.align	2
  26              	pxReadyTasksLists:
  27 0004 00000000 		.space	100
  27      00000000 
  27      00000000 
  27      00000000 
  27      00000000 
  28              		.align	2
  29              	xDelayedTaskList1:
  30 0068 00000000 		.space	20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.align	2
  32              	xDelayedTaskList2:
  33 007c 00000000 		.space	20
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.align	2
  35              	pxDelayedTaskList:
  36 0090 00000000 		.space	4
  37              		.align	2
  38              	pxOverflowDelayedTaskList:
  39 0094 00000000 		.space	4
  40              		.align	2
  41              	xPendingReadyList:
  42 0098 00000000 		.space	20
  42      00000000 
  42      00000000 
  42      00000000 
  42      00000000 
  43              		.align	2
  44              	xTasksWaitingTermination:
  45 00ac 00000000 		.space	20
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.align	2
  47              	uxTasksDeleted:
  48 00c0 00000000 		.space	4
  49              		.align	2
  50              	xSuspendedTaskList:
  51 00c4 00000000 		.space	20
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.align	2
  53              	xIdleTaskHandle:
  54 00d8 00000000 		.space	4
  55              		.align	2
  56              	uxCurrentNumberOfTasks:
  57 00dc 00000000 		.space	4
  58              		.align	2
  59              	xTickCount:
  60 00e0 00000000 		.space	4
  61              		.align	2
  62              	uxTopUsedPriority:
  63 00e4 00000000 		.space	4
  64              		.align	2
  65              	uxTopReadyPriority:
  66 00e8 00000000 		.space	4
  67              		.align	2
  68              	xSchedulerRunning:
  69 00ec 00000000 		.space	4
  70              		.align	2
  71              	uxSchedulerSuspended:
  72 00f0 00000000 		.space	4
  73              		.align	2
  74              	uxMissedTicks:
  75 00f4 00000000 		.space	4
  76              		.align	2
  77              	xMissedYield:
  78 00f8 00000000 		.space	4
  79              		.align	2
  80              	xNumOfOverflows:
  81 00fc 00000000 		.space	4
  82              		.align	2
  83              	uxTaskNumber:
  84 0100 00000000 		.space	4
  85              		.data
  86              		.align	2
  89              	xNextTaskUnblockTime:
  90 0000 FFFFFFFF 		.word	-1
  91              		.bss
  92              		.align	2
  93              	pcStatsString:
  94 0104 00000000 		.space	50
  94      00000000 
  94      00000000 
  94      00000000 
  94      00000000 
  95 0136 0000     		.align	2
  96              	ulTaskSwitchedInTime:
  97 0138 00000000 		.space	4
  98              		.text
  99              		.align	2
 100              		.global	xTaskGenericCreate
 101              		.thumb
 102              		.thumb_func
 104              	xTaskGenericCreate:
 105              	.LFB110:
 106              		.file 1 "../FreeRTOS/Source/tasks.c"
   1:../FreeRTOS/Source/tasks.c **** /*
   2:../FreeRTOS/Source/tasks.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/tasks.c **** 	
   4:../FreeRTOS/Source/tasks.c **** 
   5:../FreeRTOS/Source/tasks.c ****     ***************************************************************************
   6:../FreeRTOS/Source/tasks.c ****      *                                                                       *
   7:../FreeRTOS/Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/tasks.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  11:../FreeRTOS/Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  18:../FreeRTOS/Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  20:../FreeRTOS/Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  22:../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  23:../FreeRTOS/Source/tasks.c **** 
  24:../FreeRTOS/Source/tasks.c **** 
  25:../FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/tasks.c **** 
  27:../FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/tasks.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/tasks.c **** 
  42:../FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/tasks.c **** 
  44:../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/tasks.c ****     contact details.
  46:../FreeRTOS/Source/tasks.c **** 
  47:../FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/tasks.c ****     critical systems.
  49:../FreeRTOS/Source/tasks.c **** 
  50:../FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/tasks.c ****     licensing and training services.
  52:../FreeRTOS/Source/tasks.c **** */
  53:../FreeRTOS/Source/tasks.c **** 
  54:../FreeRTOS/Source/tasks.c **** 
  55:../FreeRTOS/Source/tasks.c **** #include <stdio.h>
  56:../FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  57:../FreeRTOS/Source/tasks.c **** #include <string.h>
  58:../FreeRTOS/Source/tasks.c **** 
  59:../FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:../FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:../FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  62:../FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:../FreeRTOS/Source/tasks.c **** 
  64:../FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  65:../FreeRTOS/Source/tasks.c **** #include "task.h"
  66:../FreeRTOS/Source/tasks.c **** #include "timers.h"
  67:../FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  68:../FreeRTOS/Source/tasks.c **** 
  69:../FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  70:../FreeRTOS/Source/tasks.c **** 
  71:../FreeRTOS/Source/tasks.c **** /*
  72:../FreeRTOS/Source/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  73:../FreeRTOS/Source/tasks.c ****  */
  74:../FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  75:../FreeRTOS/Source/tasks.c **** 
  76:../FreeRTOS/Source/tasks.c **** /*
  77:../FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  78:../FreeRTOS/Source/tasks.c ****  * and stores the context of the task.
  79:../FreeRTOS/Source/tasks.c ****  */
  80:../FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
  81:../FreeRTOS/Source/tasks.c **** {
  82:../FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  83:../FreeRTOS/Source/tasks.c **** 
  84:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  85:../FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  86:../FreeRTOS/Source/tasks.c **** 	#endif	
  87:../FreeRTOS/Source/tasks.c **** 	
  88:../FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  89:../FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  90:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  91:../FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  92:../FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  93:../FreeRTOS/Source/tasks.c **** 
  94:../FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  95:../FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  96:../FreeRTOS/Source/tasks.c **** 	#endif
  97:../FreeRTOS/Source/tasks.c **** 
  98:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
  99:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 100:../FreeRTOS/Source/tasks.c **** 	#endif
 101:../FreeRTOS/Source/tasks.c **** 
 102:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 103:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 104:../FreeRTOS/Source/tasks.c **** 	#endif
 105:../FreeRTOS/Source/tasks.c **** 
 106:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 107:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 108:../FreeRTOS/Source/tasks.c **** 	#endif
 109:../FreeRTOS/Source/tasks.c **** 
 110:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 111:../FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 112:../FreeRTOS/Source/tasks.c **** 	#endif
 113:../FreeRTOS/Source/tasks.c **** 
 114:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 115:../FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 116:../FreeRTOS/Source/tasks.c **** 	#endif
 117:../FreeRTOS/Source/tasks.c **** 
 118:../FreeRTOS/Source/tasks.c **** } tskTCB;
 119:../FreeRTOS/Source/tasks.c **** 
 120:../FreeRTOS/Source/tasks.c **** 
 121:../FreeRTOS/Source/tasks.c **** /*
 122:../FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 123:../FreeRTOS/Source/tasks.c ****  * than file scope.
 124:../FreeRTOS/Source/tasks.c ****  */
 125:../FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 126:../FreeRTOS/Source/tasks.c **** 	#define static
 127:../FreeRTOS/Source/tasks.c **** #endif
 128:../FreeRTOS/Source/tasks.c **** 
 129:../FreeRTOS/Source/tasks.c **** /*lint -e956 */
 130:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 131:../FreeRTOS/Source/tasks.c **** 
 132:../FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 133:../FreeRTOS/Source/tasks.c **** 
 134:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 135:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 136:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 137:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 138:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 139:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 140:../FreeRTOS/Source/tasks.c **** 
 141:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 142:../FreeRTOS/Source/tasks.c **** 
 143:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 144:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 145:../FreeRTOS/Source/tasks.c **** 
 146:../FreeRTOS/Source/tasks.c **** #endif
 147:../FreeRTOS/Source/tasks.c **** 
 148:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 149:../FreeRTOS/Source/tasks.c **** 
 150:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 151:../FreeRTOS/Source/tasks.c **** 
 152:../FreeRTOS/Source/tasks.c **** #endif
 153:../FreeRTOS/Source/tasks.c **** 
 154:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 155:../FreeRTOS/Source/tasks.c **** 	
 156:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;
 157:../FreeRTOS/Source/tasks.c **** 	
 158:../FreeRTOS/Source/tasks.c **** #endif
 159:../FreeRTOS/Source/tasks.c **** 
 160:../FreeRTOS/Source/tasks.c **** /* File private variables. --------------------------------*/
 161:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 162:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 163:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 164:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 165:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 166:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 167:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 168:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 169:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 170:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 171:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
 172:../FreeRTOS/Source/tasks.c **** 
 173:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 174:../FreeRTOS/Source/tasks.c **** 
 175:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 176:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 177:../FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 178:../FreeRTOS/Source/tasks.c **** 
 179:../FreeRTOS/Source/tasks.c **** #endif
 180:../FreeRTOS/Source/tasks.c **** 
 181:../FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 182:../FreeRTOS/Source/tasks.c **** 
 183:../FreeRTOS/Source/tasks.c **** /*
 184:../FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 185:../FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 186:../FreeRTOS/Source/tasks.c ****  */
 187:../FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 188:../FreeRTOS/Source/tasks.c **** 
 189:../FreeRTOS/Source/tasks.c **** /*
 190:../FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 191:../FreeRTOS/Source/tasks.c ****  */
 192:../FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 193:../FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 194:../FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 195:../FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 196:../FreeRTOS/Source/tasks.c **** 
 197:../FreeRTOS/Source/tasks.c **** /*
 198:../FreeRTOS/Source/tasks.c ****  * Macros and private variables used by the trace facility.
 199:../FreeRTOS/Source/tasks.c ****  */
 200:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 201:../FreeRTOS/Source/tasks.c **** 
 202:../FreeRTOS/Source/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 203:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 204:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 205:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 206:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 207:../FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255U;
 208:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 209:../FreeRTOS/Source/tasks.c **** 
 210:../FreeRTOS/Source/tasks.c **** #endif
 211:../FreeRTOS/Source/tasks.c **** 
 212:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:../FreeRTOS/Source/tasks.c **** 
 214:../FreeRTOS/Source/tasks.c **** /*
 215:../FreeRTOS/Source/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 216:../FreeRTOS/Source/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 217:../FreeRTOS/Source/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 218:../FreeRTOS/Source/tasks.c ****  * it if not using the facility.
 219:../FreeRTOS/Source/tasks.c ****  */
 220:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 221:../FreeRTOS/Source/tasks.c **** 
 222:../FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 223:../FreeRTOS/Source/tasks.c **** 	{																								\
 224:../FreeRTOS/Source/tasks.c **** 		if( xTracing != pdFALSE )																	\
 225:../FreeRTOS/Source/tasks.c **** 		{																							\
 226:../FreeRTOS/Source/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 227:../FreeRTOS/Source/tasks.c **** 			{																						\
 228:../FreeRTOS/Source/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 229:../FreeRTOS/Source/tasks.c **** 				{																					\
 230:../FreeRTOS/Source/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 231:../FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;				\
 232:../FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 233:../FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;			\
 234:../FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 235:../FreeRTOS/Source/tasks.c **** 				}																					\
 236:../FreeRTOS/Source/tasks.c **** 				else																				\
 237:../FreeRTOS/Source/tasks.c **** 				{																					\
 238:../FreeRTOS/Source/tasks.c **** 					xTracing = pdFALSE;																\
 239:../FreeRTOS/Source/tasks.c **** 				}																					\
 240:../FreeRTOS/Source/tasks.c **** 			}																						\
 241:../FreeRTOS/Source/tasks.c **** 		}																							\
 242:../FreeRTOS/Source/tasks.c **** 	}
 243:../FreeRTOS/Source/tasks.c **** 
 244:../FreeRTOS/Source/tasks.c **** #else
 245:../FreeRTOS/Source/tasks.c **** 
 246:../FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()
 247:../FreeRTOS/Source/tasks.c **** 
 248:../FreeRTOS/Source/tasks.c **** #endif
 249:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 250:../FreeRTOS/Source/tasks.c **** 
 251:../FreeRTOS/Source/tasks.c **** /*
 252:../FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 253:../FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 254:../FreeRTOS/Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 255:../FreeRTOS/Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 256:../FreeRTOS/Source/tasks.c ****  * executing task has been rescheduled.
 257:../FreeRTOS/Source/tasks.c ****  */
 258:../FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																					\
 259:../FreeRTOS/Source/tasks.c **** 	if( ( pxTCB )->uxPriority > uxTopReadyPriority )																	\
 260:../FreeRTOS/Source/tasks.c **** 	{																													\
 261:../FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = ( pxTCB )->uxPriority;																		\
 262:../FreeRTOS/Source/tasks.c **** 	}																													\
 263:../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 264:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:../FreeRTOS/Source/tasks.c **** 
 266:../FreeRTOS/Source/tasks.c **** /*
 267:../FreeRTOS/Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 268:../FreeRTOS/Source/tasks.c ****  * any require waking.
 269:../FreeRTOS/Source/tasks.c ****  *
 270:../FreeRTOS/Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 271:../FreeRTOS/Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 272:../FreeRTOS/Source/tasks.c ****  * any further down the list.
 273:../FreeRTOS/Source/tasks.c ****  */
 274:../FreeRTOS/Source/tasks.c **** #define prvCheckDelayedTasks()															\
 275:../FreeRTOS/Source/tasks.c **** {																						\
 276:../FreeRTOS/Source/tasks.c **** portTickType xItemValue;																\
 277:../FreeRTOS/Source/tasks.c **** 																						\
 278:../FreeRTOS/Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 279:../FreeRTOS/Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 280:../FreeRTOS/Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 281:../FreeRTOS/Source/tasks.c **** 	{																					\
 282:../FreeRTOS/Source/tasks.c **** 		for( ;; )																		\
 283:../FreeRTOS/Source/tasks.c **** 		{																				\
 284:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 285:../FreeRTOS/Source/tasks.c **** 			{																			\
 286:../FreeRTOS/Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 287:../FreeRTOS/Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 288:../FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 289:../FreeRTOS/Source/tasks.c **** 				time through. */														\
 290:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 291:../FreeRTOS/Source/tasks.c **** 				break;																	\
 292:../FreeRTOS/Source/tasks.c **** 			}																			\
 293:../FreeRTOS/Source/tasks.c **** 			else																		\
 294:../FreeRTOS/Source/tasks.c **** 			{																			\
 295:../FreeRTOS/Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 296:../FreeRTOS/Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 297:../FreeRTOS/Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 298:../FreeRTOS/Source/tasks.c **** 				the Blocked state. */													\
 299:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 300:../FreeRTOS/Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 301:../FreeRTOS/Source/tasks.c **** 																						\
 302:../FreeRTOS/Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 303:../FreeRTOS/Source/tasks.c **** 				{																		\
 304:../FreeRTOS/Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 305:../FreeRTOS/Source/tasks.c **** 					value is the time at which the task at the head of the				\
 306:../FreeRTOS/Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 307:../FreeRTOS/Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 308:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 309:../FreeRTOS/Source/tasks.c **** 					break;																\
 310:../FreeRTOS/Source/tasks.c **** 				}																		\
 311:../FreeRTOS/Source/tasks.c **** 																						\
 312:../FreeRTOS/Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 313:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );							\
 314:../FreeRTOS/Source/tasks.c **** 																						\
 315:../FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 316:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 317:../FreeRTOS/Source/tasks.c **** 				{																		\
 318:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );							\
 319:../FreeRTOS/Source/tasks.c **** 				}																		\
 320:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 321:../FreeRTOS/Source/tasks.c **** 			}																			\
 322:../FreeRTOS/Source/tasks.c **** 		}																				\
 323:../FreeRTOS/Source/tasks.c **** 	}																					\
 324:../FreeRTOS/Source/tasks.c **** }
 325:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 326:../FreeRTOS/Source/tasks.c **** 
 327:../FreeRTOS/Source/tasks.c **** /*
 328:../FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 329:../FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 330:../FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 331:../FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 332:../FreeRTOS/Source/tasks.c ****  */
 333:../FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 334:../FreeRTOS/Source/tasks.c **** 
 335:../FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 336:../FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
 337:../FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 338:../FreeRTOS/Source/tasks.c **** 		
 339:../FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 340:../FreeRTOS/Source/tasks.c **** 
 341:../FreeRTOS/Source/tasks.c **** /*
 342:../FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 343:../FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 344:../FreeRTOS/Source/tasks.c ****  */
 345:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 346:../FreeRTOS/Source/tasks.c **** 
 347:../FreeRTOS/Source/tasks.c **** /*
 348:../FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 349:../FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 350:../FreeRTOS/Source/tasks.c ****  */
 351:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 352:../FreeRTOS/Source/tasks.c **** 
 353:../FreeRTOS/Source/tasks.c **** /*
 354:../FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 355:../FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 356:../FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 357:../FreeRTOS/Source/tasks.c ****  *
 358:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 359:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 360:../FreeRTOS/Source/tasks.c ****  *
 361:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 362:../FreeRTOS/Source/tasks.c ****  *
 363:../FreeRTOS/Source/tasks.c ****  */
 364:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 365:../FreeRTOS/Source/tasks.c **** 
 366:../FreeRTOS/Source/tasks.c **** /*
 367:../FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 368:../FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 369:../FreeRTOS/Source/tasks.c ****  *
 370:../FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 371:../FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 372:../FreeRTOS/Source/tasks.c ****  */
 373:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 374:../FreeRTOS/Source/tasks.c **** 
 375:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 376:../FreeRTOS/Source/tasks.c **** 
 377:../FreeRTOS/Source/tasks.c **** #endif
 378:../FreeRTOS/Source/tasks.c **** 
 379:../FreeRTOS/Source/tasks.c **** /*
 380:../FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 381:../FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 382:../FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 383:../FreeRTOS/Source/tasks.c ****  */
 384:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 385:../FreeRTOS/Source/tasks.c **** 
 386:../FreeRTOS/Source/tasks.c **** /*
 387:../FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 388:../FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 389:../FreeRTOS/Source/tasks.c ****  */
 390:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 391:../FreeRTOS/Source/tasks.c **** 
 392:../FreeRTOS/Source/tasks.c **** /*
 393:../FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 394:../FreeRTOS/Source/tasks.c ****  * allocation was successful.
 395:../FreeRTOS/Source/tasks.c ****  */
 396:../FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 397:../FreeRTOS/Source/tasks.c **** 
 398:../FreeRTOS/Source/tasks.c **** /*
 399:../FreeRTOS/Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 400:../FreeRTOS/Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 401:../FreeRTOS/Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 402:../FreeRTOS/Source/tasks.c ****  * within just that list.
 403:../FreeRTOS/Source/tasks.c ****  *
 404:../FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 405:../FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 406:../FreeRTOS/Source/tasks.c ****  */
 407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 408:../FreeRTOS/Source/tasks.c **** 
 409:../FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 410:../FreeRTOS/Source/tasks.c **** 
 411:../FreeRTOS/Source/tasks.c **** #endif
 412:../FreeRTOS/Source/tasks.c **** 
 413:../FreeRTOS/Source/tasks.c **** /*
 414:../FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 415:../FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 416:../FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 417:../FreeRTOS/Source/tasks.c ****  */
 418:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 419:../FreeRTOS/Source/tasks.c **** 
 420:../FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 421:../FreeRTOS/Source/tasks.c **** 
 422:../FreeRTOS/Source/tasks.c **** #endif
 423:../FreeRTOS/Source/tasks.c **** 
 424:../FreeRTOS/Source/tasks.c **** 
 425:../FreeRTOS/Source/tasks.c **** /*lint +e956 */
 426:../FreeRTOS/Source/tasks.c **** 
 427:../FreeRTOS/Source/tasks.c **** 
 428:../FreeRTOS/Source/tasks.c **** 
 429:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 430:../FreeRTOS/Source/tasks.c ****  * TASK CREATION API documented in task.h
 431:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 432:../FreeRTOS/Source/tasks.c **** 
 433:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 434:../FreeRTOS/Source/tasks.c **** {
 107              		.loc 1 434 0
 108              		.cfi_startproc
 109              		@ args = 16, pretend = 0, frame = 32
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 80B5     		push	{r7, lr}
 112              	.LCFI0:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 14, -4
 115              		.cfi_offset 7, -8
 116 0002 8AB0     		sub	sp, sp, #40
 117              	.LCFI1:
 118              		.cfi_def_cfa_offset 48
 119 0004 02AF     		add	r7, sp, #8
 120              	.LCFI2:
 121              		.cfi_def_cfa 7, 40
 122 0006 F860     		str	r0, [r7, #12]
 123 0008 B960     		str	r1, [r7, #8]
 124 000a 3B60     		str	r3, [r7, #0]
 125 000c 1346     		mov	r3, r2	@ movhi
 126 000e FB80     		strh	r3, [r7, #6]	@ movhi
 435:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 436:../FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 437:../FreeRTOS/Source/tasks.c **** 
 438:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 439:../FreeRTOS/Source/tasks.c **** 	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 440:../FreeRTOS/Source/tasks.c **** 
 441:../FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 442:../FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 443:../FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 127              		.loc 1 443 0
 128 0010 FB88     		ldrh	r3, [r7, #6]
 129 0012 1846     		mov	r0, r3
 130 0014 396B     		ldr	r1, [r7, #48]
 131 0016 01F0CDF9 		bl	prvAllocateTCBAndStack
 132 001a 0346     		mov	r3, r0
 133 001c BB61     		str	r3, [r7, #24]
 444:../FreeRTOS/Source/tasks.c **** 
 445:../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 134              		.loc 1 445 0
 135 001e BB69     		ldr	r3, [r7, #24]
 136 0020 002B     		cmp	r3, #0
 137 0022 00F0A580 		beq	.L2
 138              	.LBB2:
 446:../FreeRTOS/Source/tasks.c **** 	{
 447:../FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 448:../FreeRTOS/Source/tasks.c **** 
 449:../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 450:../FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 451:../FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 452:../FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 453:../FreeRTOS/Source/tasks.c **** 			{
 454:../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 455:../FreeRTOS/Source/tasks.c **** 			}
 456:../FreeRTOS/Source/tasks.c **** 			else
 457:../FreeRTOS/Source/tasks.c **** 			{
 458:../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 459:../FreeRTOS/Source/tasks.c **** 			}
 460:../FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 461:../FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 462:../FreeRTOS/Source/tasks.c **** 
 463:../FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 464:../FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 465:../FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 466:../FreeRTOS/Source/tasks.c **** 		required by the port. */
 467:../FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 468:../FreeRTOS/Source/tasks.c **** 		{
 469:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 139              		.loc 1 469 0
 140 0026 BB69     		ldr	r3, [r7, #24]
 141 0028 1A6B     		ldr	r2, [r3, #48]
 142 002a FB88     		ldrh	r3, [r7, #6]
 143 002c 03F1FF33 		add	r3, r3, #-1
 144 0030 4FEA8303 		lsl	r3, r3, #2
 145 0034 D318     		adds	r3, r2, r3
 146 0036 7B61     		str	r3, [r7, #20]
 470:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 147              		.loc 1 470 0
 148 0038 7B69     		ldr	r3, [r7, #20]
 149 003a 23F00703 		bic	r3, r3, #7
 150 003e 7B61     		str	r3, [r7, #20]
 471:../FreeRTOS/Source/tasks.c **** 
 472:../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 473:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 474:../FreeRTOS/Source/tasks.c **** 		}
 475:../FreeRTOS/Source/tasks.c **** 		#else
 476:../FreeRTOS/Source/tasks.c **** 		{
 477:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 478:../FreeRTOS/Source/tasks.c **** 			
 479:../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 480:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 481:../FreeRTOS/Source/tasks.c **** 
 482:../FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 483:../FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 484:../FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 485:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 486:../FreeRTOS/Source/tasks.c **** 		}
 487:../FreeRTOS/Source/tasks.c **** 		#endif
 488:../FreeRTOS/Source/tasks.c **** 
 489:../FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 490:../FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 151              		.loc 1 490 0
 152 0040 FB88     		ldrh	r3, [r7, #6]
 153 0042 0093     		str	r3, [sp, #0]
 154 0044 B869     		ldr	r0, [r7, #24]
 155 0046 B968     		ldr	r1, [r7, #8]
 156 0048 BA6A     		ldr	r2, [r7, #40]
 157 004a 7B6B     		ldr	r3, [r7, #52]
 158 004c 01F08AF8 		bl	prvInitialiseTCBVariables
 491:../FreeRTOS/Source/tasks.c **** 
 492:../FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 493:../FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 494:../FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 495:../FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 496:../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 497:../FreeRTOS/Source/tasks.c **** 		{
 498:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 499:../FreeRTOS/Source/tasks.c **** 		}
 500:../FreeRTOS/Source/tasks.c **** 		#else
 501:../FreeRTOS/Source/tasks.c **** 		{
 502:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 159              		.loc 1 502 0
 160 0050 7869     		ldr	r0, [r7, #20]
 161 0052 F968     		ldr	r1, [r7, #12]
 162 0054 3A68     		ldr	r2, [r7, #0]
 163 0056 FFF7FEFF 		bl	pxPortInitialiseStack
 164 005a 0246     		mov	r2, r0
 165 005c BB69     		ldr	r3, [r7, #24]
 166 005e 1A60     		str	r2, [r3, #0]
 503:../FreeRTOS/Source/tasks.c **** 		}
 504:../FreeRTOS/Source/tasks.c **** 		#endif
 505:../FreeRTOS/Source/tasks.c **** 
 506:../FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 507:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT
 508:../FreeRTOS/Source/tasks.c **** 
 509:../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 167              		.loc 1 509 0
 168 0060 FB6A     		ldr	r3, [r7, #44]
 169 0062 002B     		cmp	r3, #0
 170 0064 02D0     		beq	.L3
 510:../FreeRTOS/Source/tasks.c **** 		{
 511:../FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 512:../FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 513:../FreeRTOS/Source/tasks.c **** 			required.*/
 514:../FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 171              		.loc 1 514 0
 172 0066 FB6A     		ldr	r3, [r7, #44]
 173 0068 BA69     		ldr	r2, [r7, #24]
 174 006a 1A60     		str	r2, [r3, #0]
 175              	.L3:
 515:../FreeRTOS/Source/tasks.c **** 		}
 516:../FreeRTOS/Source/tasks.c **** 		
 517:../FreeRTOS/Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 518:../FreeRTOS/Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 519:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 176              		.loc 1 519 0
 177 006c FFF7FEFF 		bl	vPortEnterCritical
 520:../FreeRTOS/Source/tasks.c **** 		{
 521:../FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 178              		.loc 1 521 0
 179 0070 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 180 0074 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 181 0078 1B68     		ldr	r3, [r3, #0]
 182 007a 03F10102 		add	r2, r3, #1
 183 007e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 184 0082 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 185 0086 1A60     		str	r2, [r3, #0]
 522:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 186              		.loc 1 522 0
 187 0088 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 188 008c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 189 0090 1B68     		ldr	r3, [r3, #0]
 190 0092 002B     		cmp	r3, #0
 191 0094 0FD1     		bne	.L4
 523:../FreeRTOS/Source/tasks.c **** 			{
 524:../FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 525:../FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 526:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 192              		.loc 1 526 0
 193 0096 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 194 009a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 195 009e BA69     		ldr	r2, [r7, #24]
 196 00a0 1A60     		str	r2, [r3, #0]
 527:../FreeRTOS/Source/tasks.c **** 
 528:../FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 197              		.loc 1 528 0
 198 00a2 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 199 00a6 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 200 00aa 1B68     		ldr	r3, [r3, #0]
 201 00ac 012B     		cmp	r3, #1
 202 00ae 18D1     		bne	.L5
 529:../FreeRTOS/Source/tasks.c **** 				{
 530:../FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 531:../FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 532:../FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 533:../FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 203              		.loc 1 533 0
 204 00b0 01F09CF8 		bl	prvInitialiseTaskLists
 205 00b4 15E0     		b	.L5
 206              	.L4:
 534:../FreeRTOS/Source/tasks.c **** 				}
 535:../FreeRTOS/Source/tasks.c **** 			}
 536:../FreeRTOS/Source/tasks.c **** 			else
 537:../FreeRTOS/Source/tasks.c **** 			{
 538:../FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 539:../FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 540:../FreeRTOS/Source/tasks.c **** 				so far. */
 541:../FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 207              		.loc 1 541 0
 208 00b6 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 209 00ba C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 210 00be 1B68     		ldr	r3, [r3, #0]
 211 00c0 002B     		cmp	r3, #0
 212 00c2 0ED1     		bne	.L5
 542:../FreeRTOS/Source/tasks.c **** 				{
 543:../FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 213              		.loc 1 543 0
 214 00c4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 215 00c8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 216 00cc 1B68     		ldr	r3, [r3, #0]
 217 00ce DA6A     		ldr	r2, [r3, #44]
 218 00d0 BB6A     		ldr	r3, [r7, #40]
 219 00d2 9A42     		cmp	r2, r3
 220 00d4 05D8     		bhi	.L5
 544:../FreeRTOS/Source/tasks.c **** 					{
 545:../FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 221              		.loc 1 545 0
 222 00d6 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 223 00da C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 224 00de BA69     		ldr	r2, [r7, #24]
 225 00e0 1A60     		str	r2, [r3, #0]
 226              	.L5:
 546:../FreeRTOS/Source/tasks.c **** 					}
 547:../FreeRTOS/Source/tasks.c **** 				}
 548:../FreeRTOS/Source/tasks.c **** 			}
 549:../FreeRTOS/Source/tasks.c **** 
 550:../FreeRTOS/Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 551:../FreeRTOS/Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 552:../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 227              		.loc 1 552 0
 228 00e2 BB69     		ldr	r3, [r7, #24]
 229 00e4 DA6A     		ldr	r2, [r3, #44]
 230 00e6 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 231 00ea C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 232 00ee 1B68     		ldr	r3, [r3, #0]
 233 00f0 9A42     		cmp	r2, r3
 234 00f2 06D9     		bls	.L6
 553:../FreeRTOS/Source/tasks.c **** 			{
 554:../FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 235              		.loc 1 554 0
 236 00f4 BB69     		ldr	r3, [r7, #24]
 237 00f6 DA6A     		ldr	r2, [r3, #44]
 238 00f8 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 239 00fc C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 240 0100 1A60     		str	r2, [r3, #0]
 241              	.L6:
 555:../FreeRTOS/Source/tasks.c **** 			}
 556:../FreeRTOS/Source/tasks.c **** 
 557:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 558:../FreeRTOS/Source/tasks.c **** 			{
 559:../FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 560:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 561:../FreeRTOS/Source/tasks.c **** 			}
 562:../FreeRTOS/Source/tasks.c **** 			#endif
 563:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 242              		.loc 1 563 0
 243 0102 40F20003 		movw	r3, #:lower16:uxTaskNumber
 244 0106 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 245 010a 1B68     		ldr	r3, [r3, #0]
 246 010c 03F10102 		add	r2, r3, #1
 247 0110 40F20003 		movw	r3, #:lower16:uxTaskNumber
 248 0114 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 249 0118 1A60     		str	r2, [r3, #0]
 564:../FreeRTOS/Source/tasks.c **** 
 565:../FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 250              		.loc 1 565 0
 251 011a BB69     		ldr	r3, [r7, #24]
 252 011c DA6A     		ldr	r2, [r3, #44]
 253 011e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 254 0122 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 255 0126 1B68     		ldr	r3, [r3, #0]
 256 0128 9A42     		cmp	r2, r3
 257 012a 06D9     		bls	.L7
 258              		.loc 1 565 0 is_stmt 0 discriminator 1
 259 012c BB69     		ldr	r3, [r7, #24]
 260 012e DA6A     		ldr	r2, [r3, #44]
 261 0130 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 262 0134 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 263 0138 1A60     		str	r2, [r3, #0]
 264              	.L7:
 265              		.loc 1 565 0 discriminator 2
 266 013a BB69     		ldr	r3, [r7, #24]
 267 013c DA6A     		ldr	r2, [r3, #44]
 268 013e 1346     		mov	r3, r2
 269 0140 4FEA8303 		lsl	r3, r3, #2
 270 0144 9B18     		adds	r3, r3, r2
 271 0146 4FEA8303 		lsl	r3, r3, #2
 272 014a 1A46     		mov	r2, r3
 273 014c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 274 0150 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 275 0154 D218     		adds	r2, r2, r3
 276 0156 BB69     		ldr	r3, [r7, #24]
 277 0158 03F10403 		add	r3, r3, #4
 278 015c 1046     		mov	r0, r2
 279 015e 1946     		mov	r1, r3
 280 0160 FFF7FEFF 		bl	vListInsertEnd
 566:../FreeRTOS/Source/tasks.c **** 
 567:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 281              		.loc 1 567 0 is_stmt 1 discriminator 2
 282 0164 4FF00103 		mov	r3, #1
 283 0168 FB61     		str	r3, [r7, #28]
 568:../FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 569:../FreeRTOS/Source/tasks.c **** 		}
 570:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 284              		.loc 1 570 0 discriminator 2
 285 016a FFF7FEFF 		bl	vPortExitCritical
 286 016e 02E0     		b	.L8
 287              	.L2:
 288              	.LBE2:
 571:../FreeRTOS/Source/tasks.c **** 	}
 572:../FreeRTOS/Source/tasks.c **** 	else
 573:../FreeRTOS/Source/tasks.c **** 	{
 574:../FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 289              		.loc 1 574 0
 290 0170 4FF0FF33 		mov	r3, #-1
 291 0174 FB61     		str	r3, [r7, #28]
 292              	.L8:
 575:../FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 576:../FreeRTOS/Source/tasks.c **** 	}
 577:../FreeRTOS/Source/tasks.c **** 
 578:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 293              		.loc 1 578 0
 294 0176 FB69     		ldr	r3, [r7, #28]
 295 0178 012B     		cmp	r3, #1
 296 017a 11D1     		bne	.L9
 579:../FreeRTOS/Source/tasks.c **** 	{
 580:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 297              		.loc 1 580 0
 298 017c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 299 0180 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 300 0184 1B68     		ldr	r3, [r3, #0]
 301 0186 002B     		cmp	r3, #0
 302 0188 0AD0     		beq	.L9
 581:../FreeRTOS/Source/tasks.c **** 		{
 582:../FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 583:../FreeRTOS/Source/tasks.c **** 			then it should run now. */
 584:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 303              		.loc 1 584 0
 304 018a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 305 018e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 306 0192 1B68     		ldr	r3, [r3, #0]
 307 0194 DA6A     		ldr	r2, [r3, #44]
 308 0196 BB6A     		ldr	r3, [r7, #40]
 309 0198 9A42     		cmp	r2, r3
 310 019a 01D2     		bcs	.L9
 585:../FreeRTOS/Source/tasks.c **** 			{
 586:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 311              		.loc 1 586 0
 312 019c FFF7FEFF 		bl	vPortYieldFromISR
 313              	.L9:
 587:../FreeRTOS/Source/tasks.c **** 			}
 588:../FreeRTOS/Source/tasks.c **** 		}
 589:../FreeRTOS/Source/tasks.c **** 	}
 590:../FreeRTOS/Source/tasks.c **** 
 591:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 314              		.loc 1 591 0
 315 01a0 FB69     		ldr	r3, [r7, #28]
 592:../FreeRTOS/Source/tasks.c **** }
 316              		.loc 1 592 0
 317 01a2 1846     		mov	r0, r3
 318 01a4 07F12007 		add	r7, r7, #32
 319 01a8 BD46     		mov	sp, r7
 320 01aa 80BD     		pop	{r7, pc}
 321              		.cfi_endproc
 322              	.LFE110:
 324              		.align	2
 325              		.global	vTaskDelete
 326              		.thumb
 327              		.thumb_func
 329              	vTaskDelete:
 330              	.LFB111:
 593:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:../FreeRTOS/Source/tasks.c **** 
 595:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 596:../FreeRTOS/Source/tasks.c **** 
 597:../FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 598:../FreeRTOS/Source/tasks.c **** 	{
 331              		.loc 1 598 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 16
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335 01ac 80B5     		push	{r7, lr}
 336              	.LCFI3:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 14, -4
 339              		.cfi_offset 7, -8
 340 01ae 84B0     		sub	sp, sp, #16
 341              	.LCFI4:
 342              		.cfi_def_cfa_offset 24
 343 01b0 00AF     		add	r7, sp, #0
 344              	.LCFI5:
 345              		.cfi_def_cfa_register 7
 346 01b2 7860     		str	r0, [r7, #4]
 599:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 600:../FreeRTOS/Source/tasks.c **** 
 601:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 347              		.loc 1 601 0
 348 01b4 FFF7FEFF 		bl	vPortEnterCritical
 602:../FreeRTOS/Source/tasks.c **** 		{
 603:../FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 604:../FreeRTOS/Source/tasks.c **** 			deleted. */
 605:../FreeRTOS/Source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 349              		.loc 1 605 0
 350 01b8 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 351 01bc C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 352 01c0 1B68     		ldr	r3, [r3, #0]
 353 01c2 7A68     		ldr	r2, [r7, #4]
 354 01c4 9A42     		cmp	r2, r3
 355 01c6 02D1     		bne	.L11
 606:../FreeRTOS/Source/tasks.c **** 			{
 607:../FreeRTOS/Source/tasks.c **** 				pxTaskToDelete = NULL;
 356              		.loc 1 607 0
 357 01c8 4FF00003 		mov	r3, #0
 358 01cc 7B60     		str	r3, [r7, #4]
 359              	.L11:
 608:../FreeRTOS/Source/tasks.c **** 			}
 609:../FreeRTOS/Source/tasks.c **** 
 610:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 611:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 360              		.loc 1 611 0
 361 01ce 7B68     		ldr	r3, [r7, #4]
 362 01d0 002B     		cmp	r3, #0
 363 01d2 05D1     		bne	.L12
 364              		.loc 1 611 0 is_stmt 0 discriminator 1
 365 01d4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 366 01d8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 367 01dc 1B68     		ldr	r3, [r3, #0]
 368 01de 00E0     		b	.L13
 369              	.L12:
 370              		.loc 1 611 0 discriminator 2
 371 01e0 7B68     		ldr	r3, [r7, #4]
 372              	.L13:
 373              		.loc 1 611 0 discriminator 3
 374 01e2 FB60     		str	r3, [r7, #12]
 612:../FreeRTOS/Source/tasks.c **** 
 613:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 614:../FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 615:../FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 616:../FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 617:../FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 375              		.loc 1 617 0 is_stmt 1 discriminator 3
 376 01e4 FB68     		ldr	r3, [r7, #12]
 377 01e6 03F10403 		add	r3, r3, #4
 378 01ea 1846     		mov	r0, r3
 379 01ec FFF7FEFF 		bl	vListRemove
 618:../FreeRTOS/Source/tasks.c **** 
 619:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 620:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 380              		.loc 1 620 0 discriminator 3
 381 01f0 FB68     		ldr	r3, [r7, #12]
 382 01f2 9B6A     		ldr	r3, [r3, #40]
 383 01f4 002B     		cmp	r3, #0
 384 01f6 05D0     		beq	.L14
 621:../FreeRTOS/Source/tasks.c **** 			{
 622:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 385              		.loc 1 622 0
 386 01f8 FB68     		ldr	r3, [r7, #12]
 387 01fa 03F11803 		add	r3, r3, #24
 388 01fe 1846     		mov	r0, r3
 389 0200 FFF7FEFF 		bl	vListRemove
 390              	.L14:
 623:../FreeRTOS/Source/tasks.c **** 			}
 624:../FreeRTOS/Source/tasks.c **** 
 625:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 391              		.loc 1 625 0
 392 0204 FB68     		ldr	r3, [r7, #12]
 393 0206 03F10403 		add	r3, r3, #4
 394 020a 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 395 020e C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 396 0212 1946     		mov	r1, r3
 397 0214 FFF7FEFF 		bl	vListInsertEnd
 626:../FreeRTOS/Source/tasks.c **** 
 627:../FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 628:../FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 629:../FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 630:../FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 398              		.loc 1 630 0
 399 0218 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 400 021c C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 401 0220 1B68     		ldr	r3, [r3, #0]
 402 0222 03F10102 		add	r2, r3, #1
 403 0226 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 404 022a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 405 022e 1A60     		str	r2, [r3, #0]
 631:../FreeRTOS/Source/tasks.c **** 
 632:../FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 633:../FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 634:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 406              		.loc 1 634 0
 407 0230 40F20003 		movw	r3, #:lower16:uxTaskNumber
 408 0234 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 409 0238 1B68     		ldr	r3, [r3, #0]
 410 023a 03F10102 		add	r2, r3, #1
 411 023e 40F20003 		movw	r3, #:lower16:uxTaskNumber
 412 0242 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 413 0246 1A60     		str	r2, [r3, #0]
 635:../FreeRTOS/Source/tasks.c **** 
 636:../FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 637:../FreeRTOS/Source/tasks.c **** 		}
 638:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 414              		.loc 1 638 0
 415 0248 FFF7FEFF 		bl	vPortExitCritical
 639:../FreeRTOS/Source/tasks.c **** 
 640:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 641:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 416              		.loc 1 641 0
 417 024c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 418 0250 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 419 0254 1B68     		ldr	r3, [r3, #0]
 420 0256 002B     		cmp	r3, #0
 421 0258 04D0     		beq	.L10
 642:../FreeRTOS/Source/tasks.c **** 		{
 643:../FreeRTOS/Source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 422              		.loc 1 643 0
 423 025a 7B68     		ldr	r3, [r7, #4]
 424 025c 002B     		cmp	r3, #0
 425 025e 01D1     		bne	.L10
 644:../FreeRTOS/Source/tasks.c **** 			{
 645:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 426              		.loc 1 645 0
 427 0260 FFF7FEFF 		bl	vPortYieldFromISR
 428              	.L10:
 646:../FreeRTOS/Source/tasks.c **** 			}
 647:../FreeRTOS/Source/tasks.c **** 		}
 648:../FreeRTOS/Source/tasks.c **** 	}
 429              		.loc 1 648 0
 430 0264 07F11007 		add	r7, r7, #16
 431 0268 BD46     		mov	sp, r7
 432 026a 80BD     		pop	{r7, pc}
 433              		.cfi_endproc
 434              	.LFE111:
 436              		.align	2
 437              		.global	vTaskDelayUntil
 438              		.thumb
 439              		.thumb_func
 441              	vTaskDelayUntil:
 442              	.LFB112:
 649:../FreeRTOS/Source/tasks.c **** 
 650:../FreeRTOS/Source/tasks.c **** #endif
 651:../FreeRTOS/Source/tasks.c **** 
 652:../FreeRTOS/Source/tasks.c **** 
 653:../FreeRTOS/Source/tasks.c **** 
 654:../FreeRTOS/Source/tasks.c **** 
 655:../FreeRTOS/Source/tasks.c **** 
 656:../FreeRTOS/Source/tasks.c **** 
 657:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 658:../FreeRTOS/Source/tasks.c ****  * TASK CONTROL API documented in task.h
 659:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 660:../FreeRTOS/Source/tasks.c **** 
 661:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 662:../FreeRTOS/Source/tasks.c **** 
 663:../FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 664:../FreeRTOS/Source/tasks.c **** 	{
 443              		.loc 1 664 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 24
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 026c 80B5     		push	{r7, lr}
 448              	.LCFI6:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 14, -4
 451              		.cfi_offset 7, -8
 452 026e 86B0     		sub	sp, sp, #24
 453              	.LCFI7:
 454              		.cfi_def_cfa_offset 32
 455 0270 00AF     		add	r7, sp, #0
 456              	.LCFI8:
 457              		.cfi_def_cfa_register 7
 458 0272 7860     		str	r0, [r7, #4]
 459 0274 3960     		str	r1, [r7, #0]
 665:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 666:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 460              		.loc 1 666 0
 461 0276 4FF00003 		mov	r3, #0
 462 027a 7B61     		str	r3, [r7, #20]
 667:../FreeRTOS/Source/tasks.c **** 
 668:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 669:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 670:../FreeRTOS/Source/tasks.c **** 
 671:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 463              		.loc 1 671 0
 464 027c FFF7FEFF 		bl	vTaskSuspendAll
 672:../FreeRTOS/Source/tasks.c **** 		{
 673:../FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 674:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 465              		.loc 1 674 0
 466 0280 7B68     		ldr	r3, [r7, #4]
 467 0282 1A68     		ldr	r2, [r3, #0]
 468 0284 3B68     		ldr	r3, [r7, #0]
 469 0286 D318     		adds	r3, r2, r3
 470 0288 3B61     		str	r3, [r7, #16]
 675:../FreeRTOS/Source/tasks.c **** 
 676:../FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 471              		.loc 1 676 0
 472 028a 7B68     		ldr	r3, [r7, #4]
 473 028c 1A68     		ldr	r2, [r3, #0]
 474 028e 40F20003 		movw	r3, #:lower16:xTickCount
 475 0292 C0F20003 		movt	r3, #:upper16:xTickCount
 476 0296 1B68     		ldr	r3, [r3, #0]
 477 0298 9A42     		cmp	r2, r3
 478 029a 10D9     		bls	.L17
 677:../FreeRTOS/Source/tasks.c **** 			{
 678:../FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 679:../FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 680:../FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 681:../FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 682:../FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 683:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 479              		.loc 1 683 0
 480 029c 7B68     		ldr	r3, [r7, #4]
 481 029e 1A68     		ldr	r2, [r3, #0]
 482 02a0 3B69     		ldr	r3, [r7, #16]
 483 02a2 9A42     		cmp	r2, r3
 484 02a4 1BD9     		bls	.L18
 485              		.loc 1 683 0 is_stmt 0 discriminator 1
 486 02a6 40F20003 		movw	r3, #:lower16:xTickCount
 487 02aa C0F20003 		movt	r3, #:upper16:xTickCount
 488 02ae 1B68     		ldr	r3, [r3, #0]
 489 02b0 3A69     		ldr	r2, [r7, #16]
 490 02b2 9A42     		cmp	r2, r3
 491 02b4 13D9     		bls	.L18
 684:../FreeRTOS/Source/tasks.c **** 				{
 685:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 492              		.loc 1 685 0 is_stmt 1
 493 02b6 4FF00103 		mov	r3, #1
 494 02ba 7B61     		str	r3, [r7, #20]
 495 02bc 0FE0     		b	.L18
 496              	.L17:
 686:../FreeRTOS/Source/tasks.c **** 				}
 687:../FreeRTOS/Source/tasks.c **** 			}
 688:../FreeRTOS/Source/tasks.c **** 			else
 689:../FreeRTOS/Source/tasks.c **** 			{
 690:../FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 691:../FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 692:../FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 693:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 497              		.loc 1 693 0
 498 02be 7B68     		ldr	r3, [r7, #4]
 499 02c0 1A68     		ldr	r2, [r3, #0]
 500 02c2 3B69     		ldr	r3, [r7, #16]
 501 02c4 9A42     		cmp	r2, r3
 502 02c6 07D8     		bhi	.L19
 503              		.loc 1 693 0 is_stmt 0 discriminator 1
 504 02c8 40F20003 		movw	r3, #:lower16:xTickCount
 505 02cc C0F20003 		movt	r3, #:upper16:xTickCount
 506 02d0 1B68     		ldr	r3, [r3, #0]
 507 02d2 3A69     		ldr	r2, [r7, #16]
 508 02d4 9A42     		cmp	r2, r3
 509 02d6 02D9     		bls	.L18
 510              	.L19:
 694:../FreeRTOS/Source/tasks.c **** 				{
 695:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 511              		.loc 1 695 0 is_stmt 1
 512 02d8 4FF00103 		mov	r3, #1
 513 02dc 7B61     		str	r3, [r7, #20]
 514              	.L18:
 696:../FreeRTOS/Source/tasks.c **** 				}
 697:../FreeRTOS/Source/tasks.c **** 			}
 698:../FreeRTOS/Source/tasks.c **** 
 699:../FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 700:../FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 515              		.loc 1 700 0
 516 02de 7B68     		ldr	r3, [r7, #4]
 517 02e0 3A69     		ldr	r2, [r7, #16]
 518 02e2 1A60     		str	r2, [r3, #0]
 701:../FreeRTOS/Source/tasks.c **** 
 702:../FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 519              		.loc 1 702 0
 520 02e4 7B69     		ldr	r3, [r7, #20]
 521 02e6 002B     		cmp	r3, #0
 522 02e8 0CD0     		beq	.L20
 703:../FreeRTOS/Source/tasks.c **** 			{
 704:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 705:../FreeRTOS/Source/tasks.c **** 
 706:../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 707:../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 708:../FreeRTOS/Source/tasks.c **** 				both lists. */
 709:../FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 523              		.loc 1 709 0
 524 02ea 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 525 02ee C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 526 02f2 1B68     		ldr	r3, [r3, #0]
 527 02f4 03F10403 		add	r3, r3, #4
 528 02f8 1846     		mov	r0, r3
 529 02fa FFF7FEFF 		bl	vListRemove
 710:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 530              		.loc 1 710 0
 531 02fe 3869     		ldr	r0, [r7, #16]
 532 0300 01F012F8 		bl	prvAddCurrentTaskToDelayedList
 533              	.L20:
 711:../FreeRTOS/Source/tasks.c **** 			}
 712:../FreeRTOS/Source/tasks.c **** 		}
 713:../FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 534              		.loc 1 713 0
 535 0304 FFF7FEFF 		bl	xTaskResumeAll
 536 0308 0346     		mov	r3, r0
 537 030a FB60     		str	r3, [r7, #12]
 714:../FreeRTOS/Source/tasks.c **** 
 715:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 716:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 717:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 538              		.loc 1 717 0
 539 030c FB68     		ldr	r3, [r7, #12]
 540 030e 002B     		cmp	r3, #0
 541 0310 01D1     		bne	.L16
 718:../FreeRTOS/Source/tasks.c **** 		{
 719:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 542              		.loc 1 719 0
 543 0312 FFF7FEFF 		bl	vPortYieldFromISR
 544              	.L16:
 720:../FreeRTOS/Source/tasks.c **** 		}
 721:../FreeRTOS/Source/tasks.c **** 	}
 545              		.loc 1 721 0
 546 0316 07F11807 		add	r7, r7, #24
 547 031a BD46     		mov	sp, r7
 548 031c 80BD     		pop	{r7, pc}
 549              		.cfi_endproc
 550              	.LFE112:
 552 031e 00BF     		.align	2
 553              		.global	vTaskDelay
 554              		.thumb
 555              		.thumb_func
 557              	vTaskDelay:
 558              	.LFB113:
 722:../FreeRTOS/Source/tasks.c **** 
 723:../FreeRTOS/Source/tasks.c **** #endif
 724:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 725:../FreeRTOS/Source/tasks.c **** 
 726:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 727:../FreeRTOS/Source/tasks.c **** 
 728:../FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 729:../FreeRTOS/Source/tasks.c **** 	{
 559              		.loc 1 729 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 16
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0320 80B5     		push	{r7, lr}
 564              	.LCFI9:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 14, -4
 567              		.cfi_offset 7, -8
 568 0322 84B0     		sub	sp, sp, #16
 569              	.LCFI10:
 570              		.cfi_def_cfa_offset 24
 571 0324 00AF     		add	r7, sp, #0
 572              	.LCFI11:
 573              		.cfi_def_cfa_register 7
 574 0326 7860     		str	r0, [r7, #4]
 730:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 731:../FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 575              		.loc 1 731 0
 576 0328 4FF00003 		mov	r3, #0
 577 032c FB60     		str	r3, [r7, #12]
 732:../FreeRTOS/Source/tasks.c **** 
 733:../FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 734:../FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 578              		.loc 1 734 0
 579 032e 7B68     		ldr	r3, [r7, #4]
 580 0330 002B     		cmp	r3, #0
 581 0332 1AD0     		beq	.L23
 735:../FreeRTOS/Source/tasks.c **** 		{
 736:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 582              		.loc 1 736 0
 583 0334 FFF7FEFF 		bl	vTaskSuspendAll
 737:../FreeRTOS/Source/tasks.c **** 			{
 738:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 739:../FreeRTOS/Source/tasks.c **** 
 740:../FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 741:../FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 742:../FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 743:../FreeRTOS/Source/tasks.c **** 				is resumed.
 744:../FreeRTOS/Source/tasks.c **** 
 745:../FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 746:../FreeRTOS/Source/tasks.c **** 				executing task. */
 747:../FreeRTOS/Source/tasks.c **** 
 748:../FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 749:../FreeRTOS/Source/tasks.c **** 				not a problem. */
 750:../FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 584              		.loc 1 750 0
 585 0338 40F20003 		movw	r3, #:lower16:xTickCount
 586 033c C0F20003 		movt	r3, #:upper16:xTickCount
 587 0340 1A68     		ldr	r2, [r3, #0]
 588 0342 7B68     		ldr	r3, [r7, #4]
 589 0344 D318     		adds	r3, r2, r3
 590 0346 BB60     		str	r3, [r7, #8]
 751:../FreeRTOS/Source/tasks.c **** 
 752:../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 753:../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 754:../FreeRTOS/Source/tasks.c **** 				both lists. */
 755:../FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 591              		.loc 1 755 0
 592 0348 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 593 034c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 594 0350 1B68     		ldr	r3, [r3, #0]
 595 0352 03F10403 		add	r3, r3, #4
 596 0356 1846     		mov	r0, r3
 597 0358 FFF7FEFF 		bl	vListRemove
 756:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 598              		.loc 1 756 0
 599 035c B868     		ldr	r0, [r7, #8]
 600 035e 00F0E3FF 		bl	prvAddCurrentTaskToDelayedList
 757:../FreeRTOS/Source/tasks.c **** 			}
 758:../FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 601              		.loc 1 758 0
 602 0362 FFF7FEFF 		bl	xTaskResumeAll
 603 0366 0346     		mov	r3, r0
 604 0368 FB60     		str	r3, [r7, #12]
 605              	.L23:
 759:../FreeRTOS/Source/tasks.c **** 		}
 760:../FreeRTOS/Source/tasks.c **** 
 761:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 762:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 763:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 606              		.loc 1 763 0
 607 036a FB68     		ldr	r3, [r7, #12]
 608 036c 002B     		cmp	r3, #0
 609 036e 01D1     		bne	.L22
 764:../FreeRTOS/Source/tasks.c **** 		{
 765:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 610              		.loc 1 765 0
 611 0370 FFF7FEFF 		bl	vPortYieldFromISR
 612              	.L22:
 766:../FreeRTOS/Source/tasks.c **** 		}
 767:../FreeRTOS/Source/tasks.c **** 	}
 613              		.loc 1 767 0
 614 0374 07F11007 		add	r7, r7, #16
 615 0378 BD46     		mov	sp, r7
 616 037a 80BD     		pop	{r7, pc}
 617              		.cfi_endproc
 618              	.LFE113:
 620              		.align	2
 621              		.global	uxTaskPriorityGet
 622              		.thumb
 623              		.thumb_func
 625              	uxTaskPriorityGet:
 626              	.LFB114:
 768:../FreeRTOS/Source/tasks.c **** 
 769:../FreeRTOS/Source/tasks.c **** #endif
 770:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 771:../FreeRTOS/Source/tasks.c **** 
 772:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 773:../FreeRTOS/Source/tasks.c **** 
 774:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 775:../FreeRTOS/Source/tasks.c **** 	{
 627              		.loc 1 775 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 16
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 037c 80B5     		push	{r7, lr}
 632              	.LCFI12:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 14, -4
 635              		.cfi_offset 7, -8
 636 037e 84B0     		sub	sp, sp, #16
 637              	.LCFI13:
 638              		.cfi_def_cfa_offset 24
 639 0380 00AF     		add	r7, sp, #0
 640              	.LCFI14:
 641              		.cfi_def_cfa_register 7
 642 0382 7860     		str	r0, [r7, #4]
 776:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 777:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 778:../FreeRTOS/Source/tasks.c **** 
 779:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 643              		.loc 1 779 0
 644 0384 FFF7FEFF 		bl	vPortEnterCritical
 780:../FreeRTOS/Source/tasks.c **** 		{
 781:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 782:../FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 783:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 645              		.loc 1 783 0
 646 0388 7B68     		ldr	r3, [r7, #4]
 647 038a 002B     		cmp	r3, #0
 648 038c 05D1     		bne	.L26
 649              		.loc 1 783 0 is_stmt 0 discriminator 1
 650 038e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 651 0392 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 652 0396 1B68     		ldr	r3, [r3, #0]
 653 0398 00E0     		b	.L27
 654              	.L26:
 655              		.loc 1 783 0 discriminator 2
 656 039a 7B68     		ldr	r3, [r7, #4]
 657              	.L27:
 658              		.loc 1 783 0 discriminator 3
 659 039c FB60     		str	r3, [r7, #12]
 784:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 660              		.loc 1 784 0 is_stmt 1 discriminator 3
 661 039e FB68     		ldr	r3, [r7, #12]
 662 03a0 DB6A     		ldr	r3, [r3, #44]
 663 03a2 BB60     		str	r3, [r7, #8]
 785:../FreeRTOS/Source/tasks.c **** 		}
 786:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 664              		.loc 1 786 0 discriminator 3
 665 03a4 FFF7FEFF 		bl	vPortExitCritical
 787:../FreeRTOS/Source/tasks.c **** 
 788:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 666              		.loc 1 788 0 discriminator 3
 667 03a8 BB68     		ldr	r3, [r7, #8]
 789:../FreeRTOS/Source/tasks.c **** 	}
 668              		.loc 1 789 0 discriminator 3
 669 03aa 1846     		mov	r0, r3
 670 03ac 07F11007 		add	r7, r7, #16
 671 03b0 BD46     		mov	sp, r7
 672 03b2 80BD     		pop	{r7, pc}
 673              		.cfi_endproc
 674              	.LFE114:
 676              		.align	2
 677              		.global	vTaskPrioritySet
 678              		.thumb
 679              		.thumb_func
 681              	vTaskPrioritySet:
 682              	.LFB115:
 790:../FreeRTOS/Source/tasks.c **** 
 791:../FreeRTOS/Source/tasks.c **** #endif
 792:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 793:../FreeRTOS/Source/tasks.c **** 
 794:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 795:../FreeRTOS/Source/tasks.c **** 
 796:../FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 797:../FreeRTOS/Source/tasks.c **** 	{
 683              		.loc 1 797 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 24
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687 03b4 80B5     		push	{r7, lr}
 688              	.LCFI15:
 689              		.cfi_def_cfa_offset 8
 690              		.cfi_offset 14, -4
 691              		.cfi_offset 7, -8
 692 03b6 86B0     		sub	sp, sp, #24
 693              	.LCFI16:
 694              		.cfi_def_cfa_offset 32
 695 03b8 00AF     		add	r7, sp, #0
 696              	.LCFI17:
 697              		.cfi_def_cfa_register 7
 698 03ba 7860     		str	r0, [r7, #4]
 699 03bc 3960     		str	r1, [r7, #0]
 798:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 799:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority;
 800:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 700              		.loc 1 800 0
 701 03be 4FF00003 		mov	r3, #0
 702 03c2 7B61     		str	r3, [r7, #20]
 801:../FreeRTOS/Source/tasks.c **** 
 802:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 803:../FreeRTOS/Source/tasks.c **** 
 804:../FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 805:../FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 703              		.loc 1 805 0
 704 03c4 3B68     		ldr	r3, [r7, #0]
 705 03c6 042B     		cmp	r3, #4
 706 03c8 02D9     		bls	.L29
 806:../FreeRTOS/Source/tasks.c **** 		{
 807:../FreeRTOS/Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 707              		.loc 1 807 0
 708 03ca 4FF00403 		mov	r3, #4
 709 03ce 3B60     		str	r3, [r7, #0]
 710              	.L29:
 808:../FreeRTOS/Source/tasks.c **** 		}
 809:../FreeRTOS/Source/tasks.c **** 
 810:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 711              		.loc 1 810 0
 712 03d0 FFF7FEFF 		bl	vPortEnterCritical
 811:../FreeRTOS/Source/tasks.c **** 		{
 812:../FreeRTOS/Source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 713              		.loc 1 812 0
 714 03d4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 715 03d8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 716 03dc 1B68     		ldr	r3, [r3, #0]
 717 03de 7A68     		ldr	r2, [r7, #4]
 718 03e0 9A42     		cmp	r2, r3
 719 03e2 02D1     		bne	.L30
 813:../FreeRTOS/Source/tasks.c **** 			{
 814:../FreeRTOS/Source/tasks.c **** 				pxTask = NULL;
 720              		.loc 1 814 0
 721 03e4 4FF00003 		mov	r3, #0
 722 03e8 7B60     		str	r3, [r7, #4]
 723              	.L30:
 815:../FreeRTOS/Source/tasks.c **** 			}
 816:../FreeRTOS/Source/tasks.c **** 
 817:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 818:../FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 819:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 724              		.loc 1 819 0
 725 03ea 7B68     		ldr	r3, [r7, #4]
 726 03ec 002B     		cmp	r3, #0
 727 03ee 05D1     		bne	.L31
 728              		.loc 1 819 0 is_stmt 0 discriminator 1
 729 03f0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 730 03f4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 731 03f8 1B68     		ldr	r3, [r3, #0]
 732 03fa 00E0     		b	.L32
 733              	.L31:
 734              		.loc 1 819 0 discriminator 2
 735 03fc 7B68     		ldr	r3, [r7, #4]
 736              	.L32:
 737              		.loc 1 819 0 discriminator 3
 738 03fe 3B61     		str	r3, [r7, #16]
 820:../FreeRTOS/Source/tasks.c **** 
 821:../FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 822:../FreeRTOS/Source/tasks.c **** 
 823:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 824:../FreeRTOS/Source/tasks.c **** 			{
 825:../FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 739              		.loc 1 825 0 is_stmt 1 discriminator 3
 740 0400 3B69     		ldr	r3, [r7, #16]
 741 0402 5B6C     		ldr	r3, [r3, #68]
 742 0404 FB60     		str	r3, [r7, #12]
 826:../FreeRTOS/Source/tasks.c **** 			}
 827:../FreeRTOS/Source/tasks.c **** 			#else
 828:../FreeRTOS/Source/tasks.c **** 			{
 829:../FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 830:../FreeRTOS/Source/tasks.c **** 			}
 831:../FreeRTOS/Source/tasks.c **** 			#endif
 832:../FreeRTOS/Source/tasks.c **** 
 833:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 743              		.loc 1 833 0 discriminator 3
 744 0406 FA68     		ldr	r2, [r7, #12]
 745 0408 3B68     		ldr	r3, [r7, #0]
 746 040a 9A42     		cmp	r2, r3
 747 040c 62D0     		beq	.L33
 834:../FreeRTOS/Source/tasks.c **** 			{
 835:../FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 836:../FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 837:../FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 748              		.loc 1 837 0
 749 040e 3A68     		ldr	r2, [r7, #0]
 750 0410 FB68     		ldr	r3, [r7, #12]
 751 0412 9A42     		cmp	r2, r3
 752 0414 06D9     		bls	.L34
 838:../FreeRTOS/Source/tasks.c **** 				{
 839:../FreeRTOS/Source/tasks.c **** 					if( pxTask != NULL )
 753              		.loc 1 839 0
 754 0416 7B68     		ldr	r3, [r7, #4]
 755 0418 002B     		cmp	r3, #0
 756 041a 09D0     		beq	.L35
 840:../FreeRTOS/Source/tasks.c **** 					{
 841:../FreeRTOS/Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 842:../FreeRTOS/Source/tasks.c **** 						were raising the priority of the currently running task
 843:../FreeRTOS/Source/tasks.c **** 						there would be no need to switch as it must have already
 844:../FreeRTOS/Source/tasks.c **** 						been the highest priority task. */
 845:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 757              		.loc 1 845 0
 758 041c 4FF00103 		mov	r3, #1
 759 0420 7B61     		str	r3, [r7, #20]
 760 0422 05E0     		b	.L35
 761              	.L34:
 846:../FreeRTOS/Source/tasks.c **** 					}
 847:../FreeRTOS/Source/tasks.c **** 				}
 848:../FreeRTOS/Source/tasks.c **** 				else if( pxTask == NULL )
 762              		.loc 1 848 0
 763 0424 7B68     		ldr	r3, [r7, #4]
 764 0426 002B     		cmp	r3, #0
 765 0428 02D1     		bne	.L35
 849:../FreeRTOS/Source/tasks.c **** 				{
 850:../FreeRTOS/Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 851:../FreeRTOS/Source/tasks.c **** 					task of higher priority that is ready to execute. */
 852:../FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 766              		.loc 1 852 0
 767 042a 4FF00103 		mov	r3, #1
 768 042e 7B61     		str	r3, [r7, #20]
 769              	.L35:
 853:../FreeRTOS/Source/tasks.c **** 				}
 854:../FreeRTOS/Source/tasks.c **** 
 855:../FreeRTOS/Source/tasks.c **** 
 856:../FreeRTOS/Source/tasks.c **** 
 857:../FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 858:../FreeRTOS/Source/tasks.c **** 				{
 859:../FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 860:../FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 861:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 770              		.loc 1 861 0
 771 0430 3B69     		ldr	r3, [r7, #16]
 772 0432 5A6C     		ldr	r2, [r3, #68]
 773 0434 3B69     		ldr	r3, [r7, #16]
 774 0436 DB6A     		ldr	r3, [r3, #44]
 775 0438 9A42     		cmp	r2, r3
 776 043a 02D1     		bne	.L36
 862:../FreeRTOS/Source/tasks.c **** 					{
 863:../FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 777              		.loc 1 863 0
 778 043c 3B69     		ldr	r3, [r7, #16]
 779 043e 3A68     		ldr	r2, [r7, #0]
 780 0440 DA62     		str	r2, [r3, #44]
 781              	.L36:
 864:../FreeRTOS/Source/tasks.c **** 					}
 865:../FreeRTOS/Source/tasks.c **** 
 866:../FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
 867:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 782              		.loc 1 867 0
 783 0442 3B69     		ldr	r3, [r7, #16]
 784 0444 3A68     		ldr	r2, [r7, #0]
 785 0446 5A64     		str	r2, [r3, #68]
 868:../FreeRTOS/Source/tasks.c **** 				}
 869:../FreeRTOS/Source/tasks.c **** 				#else
 870:../FreeRTOS/Source/tasks.c **** 				{
 871:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 872:../FreeRTOS/Source/tasks.c **** 				}
 873:../FreeRTOS/Source/tasks.c **** 				#endif
 874:../FreeRTOS/Source/tasks.c **** 
 875:../FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 786              		.loc 1 875 0
 787 0448 3B68     		ldr	r3, [r7, #0]
 788 044a C3F10502 		rsb	r2, r3, #5
 789 044e 3B69     		ldr	r3, [r7, #16]
 790 0450 9A61     		str	r2, [r3, #24]
 876:../FreeRTOS/Source/tasks.c **** 
 877:../FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 878:../FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
 879:../FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 880:../FreeRTOS/Source/tasks.c **** 				in the queue appropriate to its new priority. */
 881:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 791              		.loc 1 881 0
 792 0452 3B69     		ldr	r3, [r7, #16]
 793 0454 5969     		ldr	r1, [r3, #20]
 794 0456 FA68     		ldr	r2, [r7, #12]
 795 0458 1346     		mov	r3, r2
 796 045a 4FEA8303 		lsl	r3, r3, #2
 797 045e 9B18     		adds	r3, r3, r2
 798 0460 4FEA8303 		lsl	r3, r3, #2
 799 0464 1A46     		mov	r2, r3
 800 0466 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 801 046a C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 802 046e D318     		adds	r3, r2, r3
 803 0470 9942     		cmp	r1, r3
 804 0472 2AD1     		bne	.L37
 882:../FreeRTOS/Source/tasks.c **** 				{
 883:../FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 884:../FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 885:../FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
 886:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 805              		.loc 1 886 0
 806 0474 3B69     		ldr	r3, [r7, #16]
 807 0476 03F10403 		add	r3, r3, #4
 808 047a 1846     		mov	r0, r3
 809 047c FFF7FEFF 		bl	vListRemove
 887:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 810              		.loc 1 887 0
 811 0480 3B69     		ldr	r3, [r7, #16]
 812 0482 DA6A     		ldr	r2, [r3, #44]
 813 0484 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 814 0488 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 815 048c 1B68     		ldr	r3, [r3, #0]
 816 048e 9A42     		cmp	r2, r3
 817 0490 06D9     		bls	.L38
 818              		.loc 1 887 0 is_stmt 0 discriminator 1
 819 0492 3B69     		ldr	r3, [r7, #16]
 820 0494 DA6A     		ldr	r2, [r3, #44]
 821 0496 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 822 049a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 823 049e 1A60     		str	r2, [r3, #0]
 824              	.L38:
 825              		.loc 1 887 0 discriminator 2
 826 04a0 3B69     		ldr	r3, [r7, #16]
 827 04a2 DA6A     		ldr	r2, [r3, #44]
 828 04a4 1346     		mov	r3, r2
 829 04a6 4FEA8303 		lsl	r3, r3, #2
 830 04aa 9B18     		adds	r3, r3, r2
 831 04ac 4FEA8303 		lsl	r3, r3, #2
 832 04b0 1A46     		mov	r2, r3
 833 04b2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 834 04b6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 835 04ba D218     		adds	r2, r2, r3
 836 04bc 3B69     		ldr	r3, [r7, #16]
 837 04be 03F10403 		add	r3, r3, #4
 838 04c2 1046     		mov	r0, r2
 839 04c4 1946     		mov	r1, r3
 840 04c6 FFF7FEFF 		bl	vListInsertEnd
 841              	.L37:
 888:../FreeRTOS/Source/tasks.c **** 				}
 889:../FreeRTOS/Source/tasks.c **** 
 890:../FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 842              		.loc 1 890 0 is_stmt 1
 843 04ca 7B69     		ldr	r3, [r7, #20]
 844 04cc 012B     		cmp	r3, #1
 845 04ce 01D1     		bne	.L33
 891:../FreeRTOS/Source/tasks.c **** 				{
 892:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 846              		.loc 1 892 0
 847 04d0 FFF7FEFF 		bl	vPortYieldFromISR
 848              	.L33:
 893:../FreeRTOS/Source/tasks.c **** 				}
 894:../FreeRTOS/Source/tasks.c **** 			}
 895:../FreeRTOS/Source/tasks.c **** 		}
 896:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 849              		.loc 1 896 0
 850 04d4 FFF7FEFF 		bl	vPortExitCritical
 897:../FreeRTOS/Source/tasks.c **** 	}
 851              		.loc 1 897 0
 852 04d8 07F11807 		add	r7, r7, #24
 853 04dc BD46     		mov	sp, r7
 854 04de 80BD     		pop	{r7, pc}
 855              		.cfi_endproc
 856              	.LFE115:
 858              		.align	2
 859              		.global	vTaskSuspend
 860              		.thumb
 861              		.thumb_func
 863              	vTaskSuspend:
 864              	.LFB116:
 898:../FreeRTOS/Source/tasks.c **** 
 899:../FreeRTOS/Source/tasks.c **** #endif
 900:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 901:../FreeRTOS/Source/tasks.c **** 
 902:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 903:../FreeRTOS/Source/tasks.c **** 
 904:../FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 905:../FreeRTOS/Source/tasks.c **** 	{
 865              		.loc 1 905 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 16
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869 04e0 80B5     		push	{r7, lr}
 870              	.LCFI18:
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 14, -4
 873              		.cfi_offset 7, -8
 874 04e2 84B0     		sub	sp, sp, #16
 875              	.LCFI19:
 876              		.cfi_def_cfa_offset 24
 877 04e4 00AF     		add	r7, sp, #0
 878              	.LCFI20:
 879              		.cfi_def_cfa_register 7
 880 04e6 7860     		str	r0, [r7, #4]
 906:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 907:../FreeRTOS/Source/tasks.c **** 
 908:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 881              		.loc 1 908 0
 882 04e8 FFF7FEFF 		bl	vPortEnterCritical
 909:../FreeRTOS/Source/tasks.c **** 		{
 910:../FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 911:../FreeRTOS/Source/tasks.c **** 			suspended. */
 912:../FreeRTOS/Source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 883              		.loc 1 912 0
 884 04ec 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 885 04f0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 886 04f4 1B68     		ldr	r3, [r3, #0]
 887 04f6 7A68     		ldr	r2, [r7, #4]
 888 04f8 9A42     		cmp	r2, r3
 889 04fa 02D1     		bne	.L40
 913:../FreeRTOS/Source/tasks.c **** 			{
 914:../FreeRTOS/Source/tasks.c **** 				pxTaskToSuspend = NULL;
 890              		.loc 1 914 0
 891 04fc 4FF00003 		mov	r3, #0
 892 0500 7B60     		str	r3, [r7, #4]
 893              	.L40:
 915:../FreeRTOS/Source/tasks.c **** 			}
 916:../FreeRTOS/Source/tasks.c **** 
 917:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 918:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 894              		.loc 1 918 0
 895 0502 7B68     		ldr	r3, [r7, #4]
 896 0504 002B     		cmp	r3, #0
 897 0506 05D1     		bne	.L41
 898              		.loc 1 918 0 is_stmt 0 discriminator 1
 899 0508 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 900 050c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 901 0510 1B68     		ldr	r3, [r3, #0]
 902 0512 00E0     		b	.L42
 903              	.L41:
 904              		.loc 1 918 0 discriminator 2
 905 0514 7B68     		ldr	r3, [r7, #4]
 906              	.L42:
 907              		.loc 1 918 0 discriminator 3
 908 0516 FB60     		str	r3, [r7, #12]
 919:../FreeRTOS/Source/tasks.c **** 
 920:../FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 921:../FreeRTOS/Source/tasks.c **** 
 922:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 923:../FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 909              		.loc 1 923 0 is_stmt 1 discriminator 3
 910 0518 FB68     		ldr	r3, [r7, #12]
 911 051a 03F10403 		add	r3, r3, #4
 912 051e 1846     		mov	r0, r3
 913 0520 FFF7FEFF 		bl	vListRemove
 924:../FreeRTOS/Source/tasks.c **** 
 925:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 926:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 914              		.loc 1 926 0 discriminator 3
 915 0524 FB68     		ldr	r3, [r7, #12]
 916 0526 9B6A     		ldr	r3, [r3, #40]
 917 0528 002B     		cmp	r3, #0
 918 052a 05D0     		beq	.L43
 927:../FreeRTOS/Source/tasks.c **** 			{
 928:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 919              		.loc 1 928 0
 920 052c FB68     		ldr	r3, [r7, #12]
 921 052e 03F11803 		add	r3, r3, #24
 922 0532 1846     		mov	r0, r3
 923 0534 FFF7FEFF 		bl	vListRemove
 924              	.L43:
 929:../FreeRTOS/Source/tasks.c **** 			}
 930:../FreeRTOS/Source/tasks.c **** 
 931:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 925              		.loc 1 931 0
 926 0538 FB68     		ldr	r3, [r7, #12]
 927 053a 03F10403 		add	r3, r3, #4
 928 053e 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 929 0542 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 930 0546 1946     		mov	r1, r3
 931 0548 FFF7FEFF 		bl	vListInsertEnd
 932:../FreeRTOS/Source/tasks.c **** 		}
 933:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 932              		.loc 1 933 0
 933 054c FFF7FEFF 		bl	vPortExitCritical
 934:../FreeRTOS/Source/tasks.c **** 
 935:../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 934              		.loc 1 935 0
 935 0550 7B68     		ldr	r3, [r7, #4]
 936 0552 002B     		cmp	r3, #0
 937 0554 20D1     		bne	.L39
 936:../FreeRTOS/Source/tasks.c **** 		{
 937:../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 938              		.loc 1 937 0
 939 0556 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 940 055a C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 941 055e 1B68     		ldr	r3, [r3, #0]
 942 0560 002B     		cmp	r3, #0
 943 0562 02D0     		beq	.L45
 938:../FreeRTOS/Source/tasks.c **** 			{
 939:../FreeRTOS/Source/tasks.c **** 				/* We have just suspended the current task. */
 940:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 944              		.loc 1 940 0
 945 0564 FFF7FEFF 		bl	vPortYieldFromISR
 946 0568 16E0     		b	.L39
 947              	.L45:
 941:../FreeRTOS/Source/tasks.c **** 			}
 942:../FreeRTOS/Source/tasks.c **** 			else
 943:../FreeRTOS/Source/tasks.c **** 			{
 944:../FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
 945:../FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
 946:../FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
 947:../FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 948              		.loc 1 947 0
 949 056a 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 950 056e C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 951 0572 1B68     		ldr	r3, [r3, #0]
 952 0574 1A46     		mov	r2, r3
 953 0576 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 954 057a C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 955 057e 1B68     		ldr	r3, [r3, #0]
 956 0580 9A42     		cmp	r2, r3
 957 0582 07D1     		bne	.L46
 948:../FreeRTOS/Source/tasks.c **** 				{
 949:../FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
 950:../FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
 951:../FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
 952:../FreeRTOS/Source/tasks.c **** 					is. */
 953:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 958              		.loc 1 953 0
 959 0584 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 960 0588 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 961 058c 4FF00002 		mov	r2, #0
 962 0590 1A60     		str	r2, [r3, #0]
 963 0592 01E0     		b	.L39
 964              	.L46:
 954:../FreeRTOS/Source/tasks.c **** 				}
 955:../FreeRTOS/Source/tasks.c **** 				else
 956:../FreeRTOS/Source/tasks.c **** 				{
 957:../FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 965              		.loc 1 957 0
 966 0594 FFF7FEFF 		bl	vTaskSwitchContext
 967              	.L39:
 958:../FreeRTOS/Source/tasks.c **** 				}
 959:../FreeRTOS/Source/tasks.c **** 			}
 960:../FreeRTOS/Source/tasks.c **** 		}
 961:../FreeRTOS/Source/tasks.c **** 	}
 968              		.loc 1 961 0
 969 0598 07F11007 		add	r7, r7, #16
 970 059c BD46     		mov	sp, r7
 971 059e 80BD     		pop	{r7, pc}
 972              		.cfi_endproc
 973              	.LFE116:
 975              		.align	2
 976              		.global	xTaskIsTaskSuspended
 977              		.thumb
 978              		.thumb_func
 980              	xTaskIsTaskSuspended:
 981              	.LFB117:
 962:../FreeRTOS/Source/tasks.c **** 
 963:../FreeRTOS/Source/tasks.c **** #endif
 964:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 965:../FreeRTOS/Source/tasks.c **** 
 966:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 967:../FreeRTOS/Source/tasks.c **** 
 968:../FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 969:../FreeRTOS/Source/tasks.c **** 	{
 982              		.loc 1 969 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 16
 985              		@ frame_needed = 1, uses_anonymous_args = 0
 986              		@ link register save eliminated.
 987 05a0 80B4     		push	{r7}
 988              	.LCFI21:
 989              		.cfi_def_cfa_offset 4
 990              		.cfi_offset 7, -4
 991 05a2 85B0     		sub	sp, sp, #20
 992              	.LCFI22:
 993              		.cfi_def_cfa_offset 24
 994 05a4 00AF     		add	r7, sp, #0
 995              	.LCFI23:
 996              		.cfi_def_cfa_register 7
 997 05a6 7860     		str	r0, [r7, #4]
 970:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 998              		.loc 1 970 0
 999 05a8 4FF00003 		mov	r3, #0
 1000 05ac FB60     		str	r3, [r7, #12]
 971:../FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 1001              		.loc 1 971 0
 1002 05ae 7B68     		ldr	r3, [r7, #4]
 1003 05b0 BB60     		str	r3, [r7, #8]
 972:../FreeRTOS/Source/tasks.c **** 
 973:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
 974:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 975:../FreeRTOS/Source/tasks.c **** 
 976:../FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 977:../FreeRTOS/Source/tasks.c **** 		suspended list? */
 978:../FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1004              		.loc 1 978 0
 1005 05b2 BB68     		ldr	r3, [r7, #8]
 1006 05b4 5A69     		ldr	r2, [r3, #20]
 1007 05b6 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1008 05ba C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1009 05be 9A42     		cmp	r2, r3
 1010 05c0 0ED1     		bne	.L48
 979:../FreeRTOS/Source/tasks.c **** 		{
 980:../FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 981:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 1011              		.loc 1 981 0
 1012 05c2 BB68     		ldr	r3, [r7, #8]
 1013 05c4 9A6A     		ldr	r2, [r3, #40]
 1014 05c6 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1015 05ca C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1016 05ce 9A42     		cmp	r2, r3
 1017 05d0 06D0     		beq	.L48
 982:../FreeRTOS/Source/tasks.c **** 			{
 983:../FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
 984:../FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 985:../FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
 986:../FreeRTOS/Source/tasks.c **** 				specified. */
 987:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 1018              		.loc 1 987 0
 1019 05d2 BB68     		ldr	r3, [r7, #8]
 1020 05d4 9B6A     		ldr	r3, [r3, #40]
 1021 05d6 002B     		cmp	r3, #0
 1022 05d8 02D1     		bne	.L48
 988:../FreeRTOS/Source/tasks.c **** 				{
 989:../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1023              		.loc 1 989 0
 1024 05da 4FF00103 		mov	r3, #1
 1025 05de FB60     		str	r3, [r7, #12]
 1026              	.L48:
 990:../FreeRTOS/Source/tasks.c **** 				}
 991:../FreeRTOS/Source/tasks.c **** 			}
 992:../FreeRTOS/Source/tasks.c **** 		}
 993:../FreeRTOS/Source/tasks.c **** 
 994:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 1027              		.loc 1 994 0
 1028 05e0 FB68     		ldr	r3, [r7, #12]
 995:../FreeRTOS/Source/tasks.c **** 	}
 1029              		.loc 1 995 0
 1030 05e2 1846     		mov	r0, r3
 1031 05e4 07F11407 		add	r7, r7, #20
 1032 05e8 BD46     		mov	sp, r7
 1033 05ea 80BC     		pop	{r7}
 1034 05ec 7047     		bx	lr
 1035              		.cfi_endproc
 1036              	.LFE117:
 1038 05ee 00BF     		.align	2
 1039              		.global	vTaskResume
 1040              		.thumb
 1041              		.thumb_func
 1043              	vTaskResume:
 1044              	.LFB118:
 996:../FreeRTOS/Source/tasks.c **** 
 997:../FreeRTOS/Source/tasks.c **** #endif
 998:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 999:../FreeRTOS/Source/tasks.c **** 
1000:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1001:../FreeRTOS/Source/tasks.c **** 
1002:../FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1003:../FreeRTOS/Source/tasks.c **** 	{
 1045              		.loc 1 1003 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 16
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 05f0 80B5     		push	{r7, lr}
 1050              	.LCFI24:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 14, -4
 1053              		.cfi_offset 7, -8
 1054 05f2 84B0     		sub	sp, sp, #16
 1055              	.LCFI25:
 1056              		.cfi_def_cfa_offset 24
 1057 05f4 00AF     		add	r7, sp, #0
 1058              	.LCFI26:
 1059              		.cfi_def_cfa_register 7
 1060 05f6 7860     		str	r0, [r7, #4]
1004:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1005:../FreeRTOS/Source/tasks.c **** 
1006:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1007:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1008:../FreeRTOS/Source/tasks.c **** 
1009:../FreeRTOS/Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1010:../FreeRTOS/Source/tasks.c **** 		it in the ready list. */
1011:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1061              		.loc 1 1011 0
 1062 05f8 7B68     		ldr	r3, [r7, #4]
 1063 05fa FB60     		str	r3, [r7, #12]
1012:../FreeRTOS/Source/tasks.c **** 
1013:../FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1014:../FreeRTOS/Source/tasks.c **** 		currently executing task. */
1015:../FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1064              		.loc 1 1015 0
 1065 05fc FB68     		ldr	r3, [r7, #12]
 1066 05fe 002B     		cmp	r3, #0
 1067 0600 48D0     		beq	.L49
 1068              		.loc 1 1015 0 is_stmt 0 discriminator 1
 1069 0602 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1070 0606 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1071 060a 1B68     		ldr	r3, [r3, #0]
 1072 060c FA68     		ldr	r2, [r7, #12]
 1073 060e 9A42     		cmp	r2, r3
 1074 0610 40D0     		beq	.L49
1016:../FreeRTOS/Source/tasks.c **** 		{
1017:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1075              		.loc 1 1017 0 is_stmt 1
 1076 0612 FFF7FEFF 		bl	vPortEnterCritical
1018:../FreeRTOS/Source/tasks.c **** 			{
1019:../FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1077              		.loc 1 1019 0
 1078 0616 F868     		ldr	r0, [r7, #12]
 1079 0618 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1080 061c 0346     		mov	r3, r0
 1081 061e 012B     		cmp	r3, #1
 1082 0620 36D1     		bne	.L51
1020:../FreeRTOS/Source/tasks.c **** 				{
1021:../FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1022:../FreeRTOS/Source/tasks.c **** 
1023:../FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1024:../FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1025:../FreeRTOS/Source/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 1083              		.loc 1 1025 0
 1084 0622 FB68     		ldr	r3, [r7, #12]
 1085 0624 03F10403 		add	r3, r3, #4
 1086 0628 1846     		mov	r0, r3
 1087 062a FFF7FEFF 		bl	vListRemove
1026:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1088              		.loc 1 1026 0
 1089 062e FB68     		ldr	r3, [r7, #12]
 1090 0630 DA6A     		ldr	r2, [r3, #44]
 1091 0632 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1092 0636 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1093 063a 1B68     		ldr	r3, [r3, #0]
 1094 063c 9A42     		cmp	r2, r3
 1095 063e 06D9     		bls	.L52
 1096              		.loc 1 1026 0 is_stmt 0 discriminator 1
 1097 0640 FB68     		ldr	r3, [r7, #12]
 1098 0642 DA6A     		ldr	r2, [r3, #44]
 1099 0644 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1100 0648 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1101 064c 1A60     		str	r2, [r3, #0]
 1102              	.L52:
 1103              		.loc 1 1026 0 discriminator 2
 1104 064e FB68     		ldr	r3, [r7, #12]
 1105 0650 DA6A     		ldr	r2, [r3, #44]
 1106 0652 1346     		mov	r3, r2
 1107 0654 4FEA8303 		lsl	r3, r3, #2
 1108 0658 9B18     		adds	r3, r3, r2
 1109 065a 4FEA8303 		lsl	r3, r3, #2
 1110 065e 1A46     		mov	r2, r3
 1111 0660 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1112 0664 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1113 0668 D218     		adds	r2, r2, r3
 1114 066a FB68     		ldr	r3, [r7, #12]
 1115 066c 03F10403 		add	r3, r3, #4
 1116 0670 1046     		mov	r0, r2
 1117 0672 1946     		mov	r1, r3
 1118 0674 FFF7FEFF 		bl	vListInsertEnd
1027:../FreeRTOS/Source/tasks.c **** 
1028:../FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1029:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1119              		.loc 1 1029 0 is_stmt 1 discriminator 2
 1120 0678 FB68     		ldr	r3, [r7, #12]
 1121 067a DA6A     		ldr	r2, [r3, #44]
 1122 067c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1123 0680 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1124 0684 1B68     		ldr	r3, [r3, #0]
 1125 0686 DB6A     		ldr	r3, [r3, #44]
 1126 0688 9A42     		cmp	r2, r3
 1127 068a 01D3     		bcc	.L51
1030:../FreeRTOS/Source/tasks.c **** 					{
1031:../FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1032:../FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1033:../FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 1128              		.loc 1 1033 0
 1129 068c FFF7FEFF 		bl	vPortYieldFromISR
 1130              	.L51:
1034:../FreeRTOS/Source/tasks.c **** 					}
1035:../FreeRTOS/Source/tasks.c **** 				}
1036:../FreeRTOS/Source/tasks.c **** 			}
1037:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1131              		.loc 1 1037 0
 1132 0690 FFF7FEFF 		bl	vPortExitCritical
 1133              	.L49:
1038:../FreeRTOS/Source/tasks.c **** 		}
1039:../FreeRTOS/Source/tasks.c **** 	}
 1134              		.loc 1 1039 0
 1135 0694 07F11007 		add	r7, r7, #16
 1136 0698 BD46     		mov	sp, r7
 1137 069a 80BD     		pop	{r7, pc}
 1138              		.cfi_endproc
 1139              	.LFE118:
 1141              		.align	2
 1142              		.global	xTaskResumeFromISR
 1143              		.thumb
 1144              		.thumb_func
 1146              	xTaskResumeFromISR:
 1147              	.LFB119:
1040:../FreeRTOS/Source/tasks.c **** 
1041:../FreeRTOS/Source/tasks.c **** #endif
1042:../FreeRTOS/Source/tasks.c **** 
1043:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1044:../FreeRTOS/Source/tasks.c **** 
1045:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1046:../FreeRTOS/Source/tasks.c **** 
1047:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1048:../FreeRTOS/Source/tasks.c **** 	{
 1148              		.loc 1 1048 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 16
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152 069c 80B5     		push	{r7, lr}
 1153              	.LCFI27:
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 14, -4
 1156              		.cfi_offset 7, -8
 1157 069e 84B0     		sub	sp, sp, #16
 1158              	.LCFI28:
 1159              		.cfi_def_cfa_offset 24
 1160 06a0 00AF     		add	r7, sp, #0
 1161              	.LCFI29:
 1162              		.cfi_def_cfa_register 7
 1163 06a2 7860     		str	r0, [r7, #4]
1049:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1164              		.loc 1 1049 0
 1165 06a4 4FF00003 		mov	r3, #0
 1166 06a8 FB60     		str	r3, [r7, #12]
1050:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1051:../FreeRTOS/Source/tasks.c **** 
1052:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1053:../FreeRTOS/Source/tasks.c **** 
1054:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1167              		.loc 1 1054 0
 1168 06aa 7B68     		ldr	r3, [r7, #4]
 1169 06ac BB60     		str	r3, [r7, #8]
1055:../FreeRTOS/Source/tasks.c **** 
1056:../FreeRTOS/Source/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1170              		.loc 1 1056 0
 1171 06ae B868     		ldr	r0, [r7, #8]
 1172 06b0 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1173 06b4 0346     		mov	r3, r0
 1174 06b6 012B     		cmp	r3, #1
 1175 06b8 49D1     		bne	.L54
1057:../FreeRTOS/Source/tasks.c **** 		{
1058:../FreeRTOS/Source/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
1059:../FreeRTOS/Source/tasks.c **** 
1060:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1176              		.loc 1 1060 0
 1177 06ba 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1178 06be C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1179 06c2 1B68     		ldr	r3, [r3, #0]
 1180 06c4 002B     		cmp	r3, #0
 1181 06c6 38D1     		bne	.L55
1061:../FreeRTOS/Source/tasks.c **** 			{
1062:../FreeRTOS/Source/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1182              		.loc 1 1062 0
 1183 06c8 BB68     		ldr	r3, [r7, #8]
 1184 06ca DA6A     		ldr	r2, [r3, #44]
 1185 06cc 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1186 06d0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1187 06d4 1B68     		ldr	r3, [r3, #0]
 1188 06d6 DB6A     		ldr	r3, [r3, #44]
 1189 06d8 9A42     		cmp	r2, r3
 1190 06da 34BF     		ite	cc
 1191 06dc 0023     		movcc	r3, #0
 1192 06de 0123     		movcs	r3, #1
 1193 06e0 FB60     		str	r3, [r7, #12]
1063:../FreeRTOS/Source/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 1194              		.loc 1 1063 0
 1195 06e2 BB68     		ldr	r3, [r7, #8]
 1196 06e4 03F10403 		add	r3, r3, #4
 1197 06e8 1846     		mov	r0, r3
 1198 06ea FFF7FEFF 		bl	vListRemove
1064:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 1199              		.loc 1 1064 0
 1200 06ee BB68     		ldr	r3, [r7, #8]
 1201 06f0 DA6A     		ldr	r2, [r3, #44]
 1202 06f2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1203 06f6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1204 06fa 1B68     		ldr	r3, [r3, #0]
 1205 06fc 9A42     		cmp	r2, r3
 1206 06fe 06D9     		bls	.L56
 1207              		.loc 1 1064 0 is_stmt 0 discriminator 1
 1208 0700 BB68     		ldr	r3, [r7, #8]
 1209 0702 DA6A     		ldr	r2, [r3, #44]
 1210 0704 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1211 0708 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1212 070c 1A60     		str	r2, [r3, #0]
 1213              	.L56:
 1214              		.loc 1 1064 0 discriminator 2
 1215 070e BB68     		ldr	r3, [r7, #8]
 1216 0710 DA6A     		ldr	r2, [r3, #44]
 1217 0712 1346     		mov	r3, r2
 1218 0714 4FEA8303 		lsl	r3, r3, #2
 1219 0718 9B18     		adds	r3, r3, r2
 1220 071a 4FEA8303 		lsl	r3, r3, #2
 1221 071e 1A46     		mov	r2, r3
 1222 0720 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1223 0724 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1224 0728 D218     		adds	r2, r2, r3
 1225 072a BB68     		ldr	r3, [r7, #8]
 1226 072c 03F10403 		add	r3, r3, #4
 1227 0730 1046     		mov	r0, r2
 1228 0732 1946     		mov	r1, r3
 1229 0734 FFF7FEFF 		bl	vListInsertEnd
 1230 0738 09E0     		b	.L54
 1231              	.L55:
1065:../FreeRTOS/Source/tasks.c **** 			}
1066:../FreeRTOS/Source/tasks.c **** 			else
1067:../FreeRTOS/Source/tasks.c **** 			{
1068:../FreeRTOS/Source/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1069:../FreeRTOS/Source/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1070:../FreeRTOS/Source/tasks.c **** 				yield will be performed if necessary. */
1071:../FreeRTOS/Source/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1232              		.loc 1 1071 0 is_stmt 1
 1233 073a BB68     		ldr	r3, [r7, #8]
 1234 073c 03F11803 		add	r3, r3, #24
 1235 0740 40F20000 		movw	r0, #:lower16:xPendingReadyList
 1236 0744 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 1237 0748 1946     		mov	r1, r3
 1238 074a FFF7FEFF 		bl	vListInsertEnd
 1239              	.L54:
1072:../FreeRTOS/Source/tasks.c **** 			}
1073:../FreeRTOS/Source/tasks.c **** 		}
1074:../FreeRTOS/Source/tasks.c **** 
1075:../FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1240              		.loc 1 1075 0
 1241 074e FB68     		ldr	r3, [r7, #12]
1076:../FreeRTOS/Source/tasks.c **** 	}
 1242              		.loc 1 1076 0
 1243 0750 1846     		mov	r0, r3
 1244 0752 07F11007 		add	r7, r7, #16
 1245 0756 BD46     		mov	sp, r7
 1246 0758 80BD     		pop	{r7, pc}
 1247              		.cfi_endproc
 1248              	.LFE119:
 1250              		.section	.rodata
 1251              		.align	2
 1252              	.LC0:
 1253 0000 49444C45 		.ascii	"IDLE\000"
 1253      00
 1254              		.text
 1255 075a 00BF     		.align	2
 1256              		.global	vTaskStartScheduler
 1257              		.thumb
 1258              		.thumb_func
 1260              	vTaskStartScheduler:
 1261              	.LFB120:
1077:../FreeRTOS/Source/tasks.c **** 
1078:../FreeRTOS/Source/tasks.c **** #endif
1079:../FreeRTOS/Source/tasks.c **** 
1080:../FreeRTOS/Source/tasks.c **** 
1081:../FreeRTOS/Source/tasks.c **** 
1082:../FreeRTOS/Source/tasks.c **** 
1083:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1084:../FreeRTOS/Source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1085:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1086:../FreeRTOS/Source/tasks.c **** 
1087:../FreeRTOS/Source/tasks.c **** 
1088:../FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1089:../FreeRTOS/Source/tasks.c **** {
 1262              		.loc 1 1089 0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 8
 1265              		@ frame_needed = 1, uses_anonymous_args = 0
 1266 075c 80B5     		push	{r7, lr}
 1267              	.LCFI30:
 1268              		.cfi_def_cfa_offset 8
 1269              		.cfi_offset 14, -4
 1270              		.cfi_offset 7, -8
 1271 075e 86B0     		sub	sp, sp, #24
 1272              	.LCFI31:
 1273              		.cfi_def_cfa_offset 32
 1274 0760 04AF     		add	r7, sp, #16
 1275              	.LCFI32:
 1276              		.cfi_def_cfa 7, 16
1090:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1091:../FreeRTOS/Source/tasks.c **** 
1092:../FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1093:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1094:../FreeRTOS/Source/tasks.c **** 	{
1095:../FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1096:../FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1097:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 1277              		.loc 1 1097 0
 1278 0762 4FF00003 		mov	r3, #0
 1279 0766 0093     		str	r3, [sp, #0]
 1280 0768 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1281 076c C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1282 0770 0193     		str	r3, [sp, #4]
 1283 0772 4FF00003 		mov	r3, #0
 1284 0776 0293     		str	r3, [sp, #8]
 1285 0778 4FF00003 		mov	r3, #0
 1286 077c 0393     		str	r3, [sp, #12]
 1287 077e 40F20000 		movw	r0, #:lower16:prvIdleTask
 1288 0782 C0F20000 		movt	r0, #:upper16:prvIdleTask
 1289 0786 40F20001 		movw	r1, #:lower16:.LC0
 1290 078a C0F20001 		movt	r1, #:upper16:.LC0
 1291 078e 4FF48072 		mov	r2, #256
 1292 0792 4FF00003 		mov	r3, #0
 1293 0796 FFF7FEFF 		bl	xTaskGenericCreate
 1294 079a 0346     		mov	r3, r0
 1295 079c 7B60     		str	r3, [r7, #4]
1098:../FreeRTOS/Source/tasks.c **** 	}
1099:../FreeRTOS/Source/tasks.c **** 	#else
1100:../FreeRTOS/Source/tasks.c **** 	{
1101:../FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1102:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1103:../FreeRTOS/Source/tasks.c **** 	}
1104:../FreeRTOS/Source/tasks.c **** 	#endif
1105:../FreeRTOS/Source/tasks.c **** 
1106:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1107:../FreeRTOS/Source/tasks.c **** 	{
1108:../FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1109:../FreeRTOS/Source/tasks.c **** 		{
1110:../FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1111:../FreeRTOS/Source/tasks.c **** 		}
1112:../FreeRTOS/Source/tasks.c **** 	}
1113:../FreeRTOS/Source/tasks.c **** 	#endif
1114:../FreeRTOS/Source/tasks.c **** 
1115:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 1296              		.loc 1 1115 0
 1297 079e 7B68     		ldr	r3, [r7, #4]
 1298 07a0 012B     		cmp	r3, #1
 1299 07a2 15D1     		bne	.L57
1116:../FreeRTOS/Source/tasks.c **** 	{
1117:../FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1118:../FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1119:../FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1120:../FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1121:../FreeRTOS/Source/tasks.c **** 		starts to run.
1122:../FreeRTOS/Source/tasks.c **** 
1123:../FreeRTOS/Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1124:../FreeRTOS/Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1125:../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1300              		.loc 1 1125 0
 1301              	@ 1125 "../FreeRTOS/Source/tasks.c" 1
 1302 07a4 4FF0BF00 			mov r0, #191								
 1303 07a8 80F31188 		msr basepri, r0							
 1304              	
 1305              	@ 0 "" 2
1126:../FreeRTOS/Source/tasks.c **** 
1127:../FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1306              		.loc 1 1127 0
 1307              		.thumb
 1308 07ac 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1309 07b0 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1310 07b4 4FF00102 		mov	r2, #1
 1311 07b8 1A60     		str	r2, [r3, #0]
1128:../FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 1312              		.loc 1 1128 0
 1313 07ba 40F20003 		movw	r3, #:lower16:xTickCount
 1314 07be C0F20003 		movt	r3, #:upper16:xTickCount
 1315 07c2 4FF00002 		mov	r2, #0
 1316 07c6 1A60     		str	r2, [r3, #0]
1129:../FreeRTOS/Source/tasks.c **** 
1130:../FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1131:../FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1132:../FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1133:../FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 1317              		.loc 1 1133 0
 1318 07c8 FFF7FEFF 		bl	init_us_timer
1134:../FreeRTOS/Source/tasks.c **** 		
1135:../FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1136:../FreeRTOS/Source/tasks.c **** 		portable interface. */
1137:../FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1319              		.loc 1 1137 0
 1320 07cc FFF7FEFF 		bl	xPortStartScheduler
 1321              	.L57:
1138:../FreeRTOS/Source/tasks.c **** 		{
1139:../FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1140:../FreeRTOS/Source/tasks.c **** 			function will not return. */
1141:../FreeRTOS/Source/tasks.c **** 		}
1142:../FreeRTOS/Source/tasks.c **** 		else
1143:../FreeRTOS/Source/tasks.c **** 		{
1144:../FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1145:../FreeRTOS/Source/tasks.c **** 		}
1146:../FreeRTOS/Source/tasks.c **** 	}
1147:../FreeRTOS/Source/tasks.c **** 
1148:../FreeRTOS/Source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1149:../FreeRTOS/Source/tasks.c **** 	configASSERT( xReturn );
1150:../FreeRTOS/Source/tasks.c **** }
 1322              		.loc 1 1150 0
 1323 07d0 07F10807 		add	r7, r7, #8
 1324 07d4 BD46     		mov	sp, r7
 1325 07d6 80BD     		pop	{r7, pc}
 1326              		.cfi_endproc
 1327              	.LFE120:
 1329              		.align	2
 1330              		.global	vTaskEndScheduler
 1331              		.thumb
 1332              		.thumb_func
 1334              	vTaskEndScheduler:
 1335              	.LFB121:
1151:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1152:../FreeRTOS/Source/tasks.c **** 
1153:../FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1154:../FreeRTOS/Source/tasks.c **** {
 1336              		.loc 1 1154 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 1, uses_anonymous_args = 0
 1340 07d8 80B5     		push	{r7, lr}
 1341              	.LCFI33:
 1342              		.cfi_def_cfa_offset 8
 1343              		.cfi_offset 14, -4
 1344              		.cfi_offset 7, -8
 1345 07da 00AF     		add	r7, sp, #0
 1346              	.LCFI34:
 1347              		.cfi_def_cfa_register 7
1155:../FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1156:../FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1157:../FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1158:../FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1348              		.loc 1 1158 0
 1349              	@ 1158 "../FreeRTOS/Source/tasks.c" 1
 1350 07dc 4FF0BF00 			mov r0, #191								
 1351 07e0 80F31188 		msr basepri, r0							
 1352              	
 1353              	@ 0 "" 2
1159:../FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1354              		.loc 1 1159 0
 1355              		.thumb
 1356 07e4 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1357 07e8 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1358 07ec 4FF00002 		mov	r2, #0
 1359 07f0 1A60     		str	r2, [r3, #0]
1160:../FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1360              		.loc 1 1160 0
 1361 07f2 FFF7FEFF 		bl	vPortEndScheduler
1161:../FreeRTOS/Source/tasks.c **** }
 1362              		.loc 1 1161 0
 1363 07f6 80BD     		pop	{r7, pc}
 1364              		.cfi_endproc
 1365              	.LFE121:
 1367              		.align	2
 1368              		.global	vTaskSuspendAll
 1369              		.thumb
 1370              		.thumb_func
 1372              	vTaskSuspendAll:
 1373              	.LFB122:
1162:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1163:../FreeRTOS/Source/tasks.c **** 
1164:../FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1165:../FreeRTOS/Source/tasks.c **** {
 1374              		.loc 1 1165 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 1379 07f8 80B4     		push	{r7}
 1380              	.LCFI35:
 1381              		.cfi_def_cfa_offset 4
 1382              		.cfi_offset 7, -4
 1383 07fa 00AF     		add	r7, sp, #0
 1384              	.LCFI36:
 1385              		.cfi_def_cfa_register 7
1166:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1167:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1168:../FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1386              		.loc 1 1168 0
 1387 07fc 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1388 0800 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1389 0804 1B68     		ldr	r3, [r3, #0]
 1390 0806 03F10102 		add	r2, r3, #1
 1391 080a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1392 080e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1393 0812 1A60     		str	r2, [r3, #0]
1169:../FreeRTOS/Source/tasks.c **** }
 1394              		.loc 1 1169 0
 1395 0814 BD46     		mov	sp, r7
 1396 0816 80BC     		pop	{r7}
 1397 0818 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE122:
 1401 081a 00BF     		.align	2
 1402              		.global	xTaskResumeAll
 1403              		.thumb
 1404              		.thumb_func
 1406              	xTaskResumeAll:
 1407              	.LFB123:
1170:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1171:../FreeRTOS/Source/tasks.c **** 
1172:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1173:../FreeRTOS/Source/tasks.c **** {
 1408              		.loc 1 1173 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 8
 1411              		@ frame_needed = 1, uses_anonymous_args = 0
 1412 081c 90B5     		push	{r4, r7, lr}
 1413              	.LCFI37:
 1414              		.cfi_def_cfa_offset 12
 1415              		.cfi_offset 14, -4
 1416              		.cfi_offset 7, -8
 1417              		.cfi_offset 4, -12
 1418 081e 83B0     		sub	sp, sp, #12
 1419              	.LCFI38:
 1420              		.cfi_def_cfa_offset 24
 1421 0820 00AF     		add	r7, sp, #0
 1422              	.LCFI39:
 1423              		.cfi_def_cfa_register 7
1174:../FreeRTOS/Source/tasks.c **** register tskTCB *pxTCB;
1175:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1424              		.loc 1 1175 0
 1425 0822 4FF00003 		mov	r3, #0
 1426 0826 7B60     		str	r3, [r7, #4]
1176:../FreeRTOS/Source/tasks.c **** 
1177:../FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1178:../FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1179:../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1180:../FreeRTOS/Source/tasks.c **** 
1181:../FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1182:../FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1183:../FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1184:../FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1185:../FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1186:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1427              		.loc 1 1186 0
 1428 0828 FFF7FEFF 		bl	vPortEnterCritical
1187:../FreeRTOS/Source/tasks.c **** 	{
1188:../FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1429              		.loc 1 1188 0
 1430 082c 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1431 0830 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1432 0834 1B68     		ldr	r3, [r3, #0]
 1433 0836 03F1FF32 		add	r2, r3, #-1
 1434 083a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1435 083e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1436 0842 1A60     		str	r2, [r3, #0]
1189:../FreeRTOS/Source/tasks.c **** 
1190:../FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1437              		.loc 1 1190 0
 1438 0844 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1439 0848 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1440 084c 1B68     		ldr	r3, [r3, #0]
 1441 084e 002B     		cmp	r3, #0
 1442 0850 40F08680 		bne	.L62
1191:../FreeRTOS/Source/tasks.c **** 		{
1192:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1443              		.loc 1 1192 0
 1444 0854 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1445 0858 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1446 085c 1B68     		ldr	r3, [r3, #0]
 1447 085e 002B     		cmp	r3, #0
 1448 0860 7ED0     		beq	.L62
 1449              	.LBB3:
1193:../FreeRTOS/Source/tasks.c **** 			{
1194:../FreeRTOS/Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1450              		.loc 1 1194 0
 1451 0862 4FF00003 		mov	r3, #0
 1452 0866 3B60     		str	r3, [r7, #0]
1195:../FreeRTOS/Source/tasks.c **** 
1196:../FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1197:../FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1198:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1453              		.loc 1 1198 0
 1454 0868 3DE0     		b	.L63
 1455              	.L65:
1199:../FreeRTOS/Source/tasks.c **** 				{
1200:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1456              		.loc 1 1200 0
 1457 086a 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1458 086e C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1459 0872 DB68     		ldr	r3, [r3, #12]
 1460 0874 DB68     		ldr	r3, [r3, #12]
 1461 0876 1C46     		mov	r4, r3
1201:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 1462              		.loc 1 1201 0
 1463 0878 04F11803 		add	r3, r4, #24
 1464 087c 1846     		mov	r0, r3
 1465 087e FFF7FEFF 		bl	vListRemove
1202:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1466              		.loc 1 1202 0
 1467 0882 04F10403 		add	r3, r4, #4
 1468 0886 1846     		mov	r0, r3
 1469 0888 FFF7FEFF 		bl	vListRemove
1203:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1470              		.loc 1 1203 0
 1471 088c E26A     		ldr	r2, [r4, #44]
 1472 088e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1473 0892 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1474 0896 1B68     		ldr	r3, [r3, #0]
 1475 0898 9A42     		cmp	r2, r3
 1476 089a 05D9     		bls	.L64
 1477              		.loc 1 1203 0 is_stmt 0 discriminator 1
 1478 089c E26A     		ldr	r2, [r4, #44]
 1479 089e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1480 08a2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1481 08a6 1A60     		str	r2, [r3, #0]
 1482              	.L64:
 1483              		.loc 1 1203 0 discriminator 2
 1484 08a8 E26A     		ldr	r2, [r4, #44]
 1485 08aa 1346     		mov	r3, r2
 1486 08ac 4FEA8303 		lsl	r3, r3, #2
 1487 08b0 9B18     		adds	r3, r3, r2
 1488 08b2 4FEA8303 		lsl	r3, r3, #2
 1489 08b6 1A46     		mov	r2, r3
 1490 08b8 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1491 08bc C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1492 08c0 D218     		adds	r2, r2, r3
 1493 08c2 04F10403 		add	r3, r4, #4
 1494 08c6 1046     		mov	r0, r2
 1495 08c8 1946     		mov	r1, r3
 1496 08ca FFF7FEFF 		bl	vListInsertEnd
1204:../FreeRTOS/Source/tasks.c **** 
1205:../FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1206:../FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1207:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1497              		.loc 1 1207 0 is_stmt 1 discriminator 2
 1498 08ce E26A     		ldr	r2, [r4, #44]
 1499 08d0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1500 08d4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1501 08d8 1B68     		ldr	r3, [r3, #0]
 1502 08da DB6A     		ldr	r3, [r3, #44]
 1503 08dc 9A42     		cmp	r2, r3
 1504 08de 02D3     		bcc	.L63
1208:../FreeRTOS/Source/tasks.c **** 					{
1209:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1505              		.loc 1 1209 0
 1506 08e0 4FF00103 		mov	r3, #1
 1507 08e4 3B60     		str	r3, [r7, #0]
 1508              	.L63:
1198:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1509              		.loc 1 1198 0 discriminator 1
 1510 08e6 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1511 08ea C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1512 08ee 1B68     		ldr	r3, [r3, #0]
 1513 08f0 002B     		cmp	r3, #0
 1514 08f2 BAD1     		bne	.L65
1210:../FreeRTOS/Source/tasks.c **** 					}
1211:../FreeRTOS/Source/tasks.c **** 				}
1212:../FreeRTOS/Source/tasks.c **** 
1213:../FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1214:../FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1215:../FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1216:../FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1515              		.loc 1 1216 0
 1516 08f4 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1517 08f8 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1518 08fc 1B68     		ldr	r3, [r3, #0]
 1519 08fe 002B     		cmp	r3, #0
 1520 0900 18D0     		beq	.L66
1217:../FreeRTOS/Source/tasks.c **** 				{
1218:../FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1521              		.loc 1 1218 0
 1522 0902 0DE0     		b	.L67
 1523              	.L68:
1219:../FreeRTOS/Source/tasks.c **** 					{
1220:../FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
 1524              		.loc 1 1220 0
 1525 0904 FFF7FEFF 		bl	vTaskIncrementTick
1221:../FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
 1526              		.loc 1 1221 0
 1527 0908 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1528 090c C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1529 0910 1B68     		ldr	r3, [r3, #0]
 1530 0912 03F1FF32 		add	r2, r3, #-1
 1531 0916 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1532 091a C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1533 091e 1A60     		str	r2, [r3, #0]
 1534              	.L67:
1218:../FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1535              		.loc 1 1218 0 discriminator 1
 1536 0920 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1537 0924 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1538 0928 1B68     		ldr	r3, [r3, #0]
 1539 092a 002B     		cmp	r3, #0
 1540 092c EAD1     		bne	.L68
1222:../FreeRTOS/Source/tasks.c **** 					}
1223:../FreeRTOS/Source/tasks.c **** 
1224:../FreeRTOS/Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1225:../FreeRTOS/Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1226:../FreeRTOS/Source/tasks.c **** 					the task actually running. */
1227:../FreeRTOS/Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1228:../FreeRTOS/Source/tasks.c **** 					{
1229:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1541              		.loc 1 1229 0
 1542 092e 4FF00103 		mov	r3, #1
 1543 0932 3B60     		str	r3, [r7, #0]
 1544              	.L66:
1230:../FreeRTOS/Source/tasks.c **** 					}
1231:../FreeRTOS/Source/tasks.c **** 					#endif
1232:../FreeRTOS/Source/tasks.c **** 				}
1233:../FreeRTOS/Source/tasks.c **** 
1234:../FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1545              		.loc 1 1234 0
 1546 0934 3B68     		ldr	r3, [r7, #0]
 1547 0936 012B     		cmp	r3, #1
 1548 0938 06D0     		beq	.L69
 1549              		.loc 1 1234 0 is_stmt 0 discriminator 1
 1550 093a 40F20003 		movw	r3, #:lower16:xMissedYield
 1551 093e C0F20003 		movt	r3, #:upper16:xMissedYield
 1552 0942 1B68     		ldr	r3, [r3, #0]
 1553 0944 012B     		cmp	r3, #1
 1554 0946 0BD1     		bne	.L62
 1555              	.L69:
1235:../FreeRTOS/Source/tasks.c **** 				{
1236:../FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1556              		.loc 1 1236 0 is_stmt 1
 1557 0948 4FF00103 		mov	r3, #1
 1558 094c 7B60     		str	r3, [r7, #4]
1237:../FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
 1559              		.loc 1 1237 0
 1560 094e 40F20003 		movw	r3, #:lower16:xMissedYield
 1561 0952 C0F20003 		movt	r3, #:upper16:xMissedYield
 1562 0956 4FF00002 		mov	r2, #0
 1563 095a 1A60     		str	r2, [r3, #0]
1238:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1564              		.loc 1 1238 0
 1565 095c FFF7FEFF 		bl	vPortYieldFromISR
 1566              	.L62:
 1567              	.LBE3:
1239:../FreeRTOS/Source/tasks.c **** 				}
1240:../FreeRTOS/Source/tasks.c **** 			}
1241:../FreeRTOS/Source/tasks.c **** 		}
1242:../FreeRTOS/Source/tasks.c **** 	}
1243:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1568              		.loc 1 1243 0
 1569 0960 FFF7FEFF 		bl	vPortExitCritical
1244:../FreeRTOS/Source/tasks.c **** 
1245:../FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 1570              		.loc 1 1245 0
 1571 0964 7B68     		ldr	r3, [r7, #4]
1246:../FreeRTOS/Source/tasks.c **** }
 1572              		.loc 1 1246 0
 1573 0966 1846     		mov	r0, r3
 1574 0968 07F10C07 		add	r7, r7, #12
 1575 096c BD46     		mov	sp, r7
 1576 096e 90BD     		pop	{r4, r7, pc}
 1577              		.cfi_endproc
 1578              	.LFE123:
 1580              		.align	2
 1581              		.global	xTaskGetTickCount
 1582              		.thumb
 1583              		.thumb_func
 1585              	xTaskGetTickCount:
 1586              	.LFB124:
1247:../FreeRTOS/Source/tasks.c **** 
1248:../FreeRTOS/Source/tasks.c **** 
1249:../FreeRTOS/Source/tasks.c **** 
1250:../FreeRTOS/Source/tasks.c **** 
1251:../FreeRTOS/Source/tasks.c **** 
1252:../FreeRTOS/Source/tasks.c **** 
1253:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1254:../FreeRTOS/Source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1255:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1256:../FreeRTOS/Source/tasks.c **** 
1257:../FreeRTOS/Source/tasks.c **** 
1258:../FreeRTOS/Source/tasks.c **** 
1259:../FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1260:../FreeRTOS/Source/tasks.c **** {
 1587              		.loc 1 1260 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 8
 1590              		@ frame_needed = 1, uses_anonymous_args = 0
 1591 0970 80B5     		push	{r7, lr}
 1592              	.LCFI40:
 1593              		.cfi_def_cfa_offset 8
 1594              		.cfi_offset 14, -4
 1595              		.cfi_offset 7, -8
 1596 0972 82B0     		sub	sp, sp, #8
 1597              	.LCFI41:
 1598              		.cfi_def_cfa_offset 16
 1599 0974 00AF     		add	r7, sp, #0
 1600              	.LCFI42:
 1601              		.cfi_def_cfa_register 7
1261:../FreeRTOS/Source/tasks.c **** portTickType xTicks;
1262:../FreeRTOS/Source/tasks.c **** 
1263:../FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1264:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1602              		.loc 1 1264 0
 1603 0976 FFF7FEFF 		bl	vPortEnterCritical
1265:../FreeRTOS/Source/tasks.c **** 	{
1266:../FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1604              		.loc 1 1266 0
 1605 097a 40F20003 		movw	r3, #:lower16:xTickCount
 1606 097e C0F20003 		movt	r3, #:upper16:xTickCount
 1607 0982 1B68     		ldr	r3, [r3, #0]
 1608 0984 7B60     		str	r3, [r7, #4]
1267:../FreeRTOS/Source/tasks.c **** 	}
1268:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1609              		.loc 1 1268 0
 1610 0986 FFF7FEFF 		bl	vPortExitCritical
1269:../FreeRTOS/Source/tasks.c **** 
1270:../FreeRTOS/Source/tasks.c **** 	return xTicks;
 1611              		.loc 1 1270 0
 1612 098a 7B68     		ldr	r3, [r7, #4]
1271:../FreeRTOS/Source/tasks.c **** }
 1613              		.loc 1 1271 0
 1614 098c 1846     		mov	r0, r3
 1615 098e 07F10807 		add	r7, r7, #8
 1616 0992 BD46     		mov	sp, r7
 1617 0994 80BD     		pop	{r7, pc}
 1618              		.cfi_endproc
 1619              	.LFE124:
 1621 0996 00BF     		.align	2
 1622              		.global	xTaskGetTickCountFromISR
 1623              		.thumb
 1624              		.thumb_func
 1626              	xTaskGetTickCountFromISR:
 1627              	.LFB125:
1272:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1273:../FreeRTOS/Source/tasks.c **** 
1274:../FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1275:../FreeRTOS/Source/tasks.c **** {
 1628              		.loc 1 1275 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 8
 1631              		@ frame_needed = 1, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
 1633 0998 80B4     		push	{r7}
 1634              	.LCFI43:
 1635              		.cfi_def_cfa_offset 4
 1636              		.cfi_offset 7, -4
 1637 099a 83B0     		sub	sp, sp, #12
 1638              	.LCFI44:
 1639              		.cfi_def_cfa_offset 16
 1640 099c 00AF     		add	r7, sp, #0
 1641              	.LCFI45:
 1642              		.cfi_def_cfa_register 7
1276:../FreeRTOS/Source/tasks.c **** portTickType xReturn;
1277:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1278:../FreeRTOS/Source/tasks.c **** 
1279:../FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1643              		.loc 1 1279 0
 1644 099e 4FF00003 		mov	r3, #0
 1645 09a2 7B60     		str	r3, [r7, #4]
 1646              	@ 1279 "../FreeRTOS/Source/tasks.c" 1
 1647 09a4 4FF0BF00 			mov r0, #191								
 1648 09a8 80F31188 		msr basepri, r0							
 1649              	
 1650              	@ 0 "" 2
1280:../FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1651              		.loc 1 1280 0
 1652              		.thumb
 1653 09ac 40F20003 		movw	r3, #:lower16:xTickCount
 1654 09b0 C0F20003 		movt	r3, #:upper16:xTickCount
 1655 09b4 1B68     		ldr	r3, [r3, #0]
 1656 09b6 3B60     		str	r3, [r7, #0]
1281:../FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1657              		.loc 1 1281 0
 1658              	@ 1281 "../FreeRTOS/Source/tasks.c" 1
 1659 09b8 4FF00000 			mov r0, #0					
 1660 09bc 80F31188 		msr basepri, r0				
 1661              	
 1662              	@ 0 "" 2
1282:../FreeRTOS/Source/tasks.c **** 
1283:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 1663              		.loc 1 1283 0
 1664              		.thumb
 1665 09c0 3B68     		ldr	r3, [r7, #0]
1284:../FreeRTOS/Source/tasks.c **** }
 1666              		.loc 1 1284 0
 1667 09c2 1846     		mov	r0, r3
 1668 09c4 07F10C07 		add	r7, r7, #12
 1669 09c8 BD46     		mov	sp, r7
 1670 09ca 80BC     		pop	{r7}
 1671 09cc 7047     		bx	lr
 1672              		.cfi_endproc
 1673              	.LFE125:
 1675 09ce 00BF     		.align	2
 1676              		.global	uxTaskGetNumberOfTasks
 1677              		.thumb
 1678              		.thumb_func
 1680              	uxTaskGetNumberOfTasks:
 1681              	.LFB126:
1285:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1286:../FreeRTOS/Source/tasks.c **** 
1287:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1288:../FreeRTOS/Source/tasks.c **** {
 1682              		.loc 1 1288 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
 1687 09d0 80B4     		push	{r7}
 1688              	.LCFI46:
 1689              		.cfi_def_cfa_offset 4
 1690              		.cfi_offset 7, -4
 1691 09d2 00AF     		add	r7, sp, #0
 1692              	.LCFI47:
 1693              		.cfi_def_cfa_register 7
1289:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1290:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1291:../FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1694              		.loc 1 1291 0
 1695 09d4 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1696 09d8 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1697 09dc 1B68     		ldr	r3, [r3, #0]
1292:../FreeRTOS/Source/tasks.c **** }
 1698              		.loc 1 1292 0
 1699 09de 1846     		mov	r0, r3
 1700 09e0 BD46     		mov	sp, r7
 1701 09e2 80BC     		pop	{r7}
 1702 09e4 7047     		bx	lr
 1703              		.cfi_endproc
 1704              	.LFE126:
 1706              		.section	.rodata
 1707 0005 000000   		.align	2
 1708              	.LC1:
 1709 0008 0D0A00   		.ascii	"\015\012\000"
 1710              		.text
 1711 09e6 00BF     		.align	2
 1712              		.global	vTaskGetRunTimeStats
 1713              		.thumb
 1714              		.thumb_func
 1716              	vTaskGetRunTimeStats:
 1717              	.LFB127:
1293:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1294:../FreeRTOS/Source/tasks.c **** 
1295:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1296:../FreeRTOS/Source/tasks.c **** 
1297:../FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1298:../FreeRTOS/Source/tasks.c **** 	{
1299:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1300:../FreeRTOS/Source/tasks.c **** 
1301:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1302:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1303:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1304:../FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1305:../FreeRTOS/Source/tasks.c **** 	}
1306:../FreeRTOS/Source/tasks.c **** 
1307:../FreeRTOS/Source/tasks.c **** #endif
1308:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1309:../FreeRTOS/Source/tasks.c **** 
1310:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1311:../FreeRTOS/Source/tasks.c **** 
1312:../FreeRTOS/Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1313:../FreeRTOS/Source/tasks.c **** 	{
1314:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1315:../FreeRTOS/Source/tasks.c **** 
1316:../FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1317:../FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1318:../FreeRTOS/Source/tasks.c **** 
1319:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1320:../FreeRTOS/Source/tasks.c **** 		{
1321:../FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1322:../FreeRTOS/Source/tasks.c **** 			report the task name, state and stack high water mark. */
1323:../FreeRTOS/Source/tasks.c **** 
1324:../FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1325:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1326:../FreeRTOS/Source/tasks.c **** 
1327:../FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1328:../FreeRTOS/Source/tasks.c **** 
1329:../FreeRTOS/Source/tasks.c **** 			do
1330:../FreeRTOS/Source/tasks.c **** 			{
1331:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
1332:../FreeRTOS/Source/tasks.c **** 
1333:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1334:../FreeRTOS/Source/tasks.c **** 				{
1335:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1336:../FreeRTOS/Source/tasks.c **** 				}
1337:../FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1338:../FreeRTOS/Source/tasks.c **** 
1339:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1340:../FreeRTOS/Source/tasks.c **** 			{
1341:../FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1342:../FreeRTOS/Source/tasks.c **** 			}
1343:../FreeRTOS/Source/tasks.c **** 
1344:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1345:../FreeRTOS/Source/tasks.c **** 			{
1346:../FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1347:../FreeRTOS/Source/tasks.c **** 			}
1348:../FreeRTOS/Source/tasks.c **** 
1349:../FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1350:../FreeRTOS/Source/tasks.c **** 			{
1351:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1352:../FreeRTOS/Source/tasks.c **** 				{
1353:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1354:../FreeRTOS/Source/tasks.c **** 				}
1355:../FreeRTOS/Source/tasks.c **** 			}
1356:../FreeRTOS/Source/tasks.c **** 			#endif
1357:../FreeRTOS/Source/tasks.c **** 
1358:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1359:../FreeRTOS/Source/tasks.c **** 			{
1360:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1361:../FreeRTOS/Source/tasks.c **** 				{
1362:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1363:../FreeRTOS/Source/tasks.c **** 				}
1364:../FreeRTOS/Source/tasks.c **** 			}
1365:../FreeRTOS/Source/tasks.c **** 			#endif
1366:../FreeRTOS/Source/tasks.c **** 		}
1367:../FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1368:../FreeRTOS/Source/tasks.c **** 	}
1369:../FreeRTOS/Source/tasks.c **** 
1370:../FreeRTOS/Source/tasks.c **** #endif
1371:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1372:../FreeRTOS/Source/tasks.c **** 
1373:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1374:../FreeRTOS/Source/tasks.c **** 
1375:../FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1376:../FreeRTOS/Source/tasks.c **** 	{
 1718              		.loc 1 1376 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 16
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722 09e8 90B5     		push	{r4, r7, lr}
 1723              	.LCFI48:
 1724              		.cfi_def_cfa_offset 12
 1725              		.cfi_offset 14, -4
 1726              		.cfi_offset 7, -8
 1727              		.cfi_offset 4, -12
 1728 09ea 85B0     		sub	sp, sp, #20
 1729              	.LCFI49:
 1730              		.cfi_def_cfa_offset 32
 1731 09ec 00AF     		add	r7, sp, #0
 1732              	.LCFI50:
 1733              		.cfi_def_cfa_register 7
 1734 09ee 7860     		str	r0, [r7, #4]
1377:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1378:../FreeRTOS/Source/tasks.c **** 	unsigned long ulTotalRunTime;
1379:../FreeRTOS/Source/tasks.c **** 
1380:../FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1381:../FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1382:../FreeRTOS/Source/tasks.c **** 
1383:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1735              		.loc 1 1383 0
 1736 09f0 FFF7FEFF 		bl	vTaskSuspendAll
1384:../FreeRTOS/Source/tasks.c **** 		{
1385:../FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1386:../FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1387:../FreeRTOS/Source/tasks.c **** 			#else
1388:../FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 1737              		.loc 1 1388 0
 1738 09f4 FFF7FEFF 		bl	get_us_time
 1739 09f8 0246     		mov	r2, r0
 1740 09fa 0B46     		mov	r3, r1
 1741 09fc 1346     		mov	r3, r2
 1742 09fe BB60     		str	r3, [r7, #8]
1389:../FreeRTOS/Source/tasks.c **** 			#endif
1390:../FreeRTOS/Source/tasks.c **** 
1391:../FreeRTOS/Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1392:../FreeRTOS/Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1393:../FreeRTOS/Source/tasks.c **** 			ulTotalRunTime /= 100UL;
 1743              		.loc 1 1393 0
 1744 0a00 BA68     		ldr	r2, [r7, #8]
 1745 0a02 48F21F53 		movw	r3, #34079
 1746 0a06 C5F2EB13 		movt	r3, 20971
 1747 0a0a A3FB0213 		umull	r1, r3, r3, r2
 1748 0a0e 4FEA5313 		lsr	r3, r3, #5
 1749 0a12 BB60     		str	r3, [r7, #8]
1394:../FreeRTOS/Source/tasks.c **** 			
1395:../FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1396:../FreeRTOS/Source/tasks.c **** 			generating a table of run timer percentages in the provided
1397:../FreeRTOS/Source/tasks.c **** 			buffer. */
1398:../FreeRTOS/Source/tasks.c **** 
1399:../FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
 1750              		.loc 1 1399 0
 1751 0a14 7B68     		ldr	r3, [r7, #4]
 1752 0a16 4FF00002 		mov	r2, #0
 1753 0a1a 1A70     		strb	r2, [r3, #0]
1400:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 1754              		.loc 1 1400 0
 1755 0a1c 7C68     		ldr	r4, [r7, #4]
 1756 0a1e 2046     		mov	r0, r4
 1757 0a20 FFF7FEFF 		bl	strlen
 1758 0a24 0346     		mov	r3, r0
 1759 0a26 E218     		adds	r2, r4, r3
 1760 0a28 40F20003 		movw	r3, #:lower16:.LC1
 1761 0a2c C0F20003 		movt	r3, #:upper16:.LC1
 1762 0a30 1146     		mov	r1, r2
 1763 0a32 1A46     		mov	r2, r3
 1764 0a34 4FF00303 		mov	r3, #3
 1765 0a38 0846     		mov	r0, r1
 1766 0a3a 1146     		mov	r1, r2
 1767 0a3c 1A46     		mov	r2, r3
 1768 0a3e FFF7FEFF 		bl	memcpy
1401:../FreeRTOS/Source/tasks.c **** 
1402:../FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 1769              		.loc 1 1402 0
 1770 0a42 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 1771 0a46 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 1772 0a4a 1B68     		ldr	r3, [r3, #0]
 1773 0a4c 03F10103 		add	r3, r3, #1
 1774 0a50 FB60     		str	r3, [r7, #12]
 1775              	.L75:
1403:../FreeRTOS/Source/tasks.c **** 
1404:../FreeRTOS/Source/tasks.c **** 			do
1405:../FreeRTOS/Source/tasks.c **** 			{
1406:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
 1776              		.loc 1 1406 0
 1777 0a52 FB68     		ldr	r3, [r7, #12]
 1778 0a54 03F1FF33 		add	r3, r3, #-1
 1779 0a58 FB60     		str	r3, [r7, #12]
1407:../FreeRTOS/Source/tasks.c **** 
1408:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 1780              		.loc 1 1408 0
 1781 0a5a FA68     		ldr	r2, [r7, #12]
 1782 0a5c 1346     		mov	r3, r2
 1783 0a5e 4FEA8303 		lsl	r3, r3, #2
 1784 0a62 9B18     		adds	r3, r3, r2
 1785 0a64 4FEA8303 		lsl	r3, r3, #2
 1786 0a68 1A46     		mov	r2, r3
 1787 0a6a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1788 0a6e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1789 0a72 D318     		adds	r3, r2, r3
 1790 0a74 1B68     		ldr	r3, [r3, #0]
 1791 0a76 002B     		cmp	r3, #0
 1792 0a78 13D0     		beq	.L74
1409:../FreeRTOS/Source/tasks.c **** 				{
1410:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
 1793              		.loc 1 1410 0
 1794 0a7a FA68     		ldr	r2, [r7, #12]
 1795 0a7c 1346     		mov	r3, r2
 1796 0a7e 4FEA8303 		lsl	r3, r3, #2
 1797 0a82 9B18     		adds	r3, r3, r2
 1798 0a84 4FEA8303 		lsl	r3, r3, #2
 1799 0a88 1A46     		mov	r2, r3
 1800 0a8a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1801 0a8e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1802 0a92 D318     		adds	r3, r2, r3
 1803 0a94 7868     		ldr	r0, [r7, #4]
 1804 0a96 1946     		mov	r1, r3
 1805 0a98 BA68     		ldr	r2, [r7, #8]
 1806 0a9a 4FF05203 		mov	r3, #82
 1807 0a9e 00F0C3FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1808              	.L74:
1411:../FreeRTOS/Source/tasks.c **** 				}
1412:../FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 1809              		.loc 1 1412 0
 1810 0aa2 FB68     		ldr	r3, [r7, #12]
 1811 0aa4 002B     		cmp	r3, #0
 1812 0aa6 D4D1     		bne	.L75
1413:../FreeRTOS/Source/tasks.c **** 
1414:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 1813              		.loc 1 1414 0
 1814 0aa8 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1815 0aac C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1816 0ab0 1B68     		ldr	r3, [r3, #0]
 1817 0ab2 1B68     		ldr	r3, [r3, #0]
 1818 0ab4 002B     		cmp	r3, #0
 1819 0ab6 0BD0     		beq	.L76
1415:../FreeRTOS/Source/tasks.c **** 			{
1416:../FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
 1820              		.loc 1 1416 0
 1821 0ab8 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1822 0abc C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1823 0ac0 1B68     		ldr	r3, [r3, #0]
 1824 0ac2 7868     		ldr	r0, [r7, #4]
 1825 0ac4 1946     		mov	r1, r3
 1826 0ac6 BA68     		ldr	r2, [r7, #8]
 1827 0ac8 4FF04203 		mov	r3, #66
 1828 0acc 00F0ACFC 		bl	prvGenerateRunTimeStatsForTasksInList
 1829              	.L76:
1417:../FreeRTOS/Source/tasks.c **** 			}
1418:../FreeRTOS/Source/tasks.c **** 
1419:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 1830              		.loc 1 1419 0
 1831 0ad0 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1832 0ad4 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1833 0ad8 1B68     		ldr	r3, [r3, #0]
 1834 0ada 1B68     		ldr	r3, [r3, #0]
 1835 0adc 002B     		cmp	r3, #0
 1836 0ade 0BD0     		beq	.L77
1420:../FreeRTOS/Source/tasks.c **** 			{
1421:../FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
 1837              		.loc 1 1421 0
 1838 0ae0 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1839 0ae4 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1840 0ae8 1B68     		ldr	r3, [r3, #0]
 1841 0aea 7868     		ldr	r0, [r7, #4]
 1842 0aec 1946     		mov	r1, r3
 1843 0aee BA68     		ldr	r2, [r7, #8]
 1844 0af0 4FF04203 		mov	r3, #66
 1845 0af4 00F098FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1846              	.L77:
1422:../FreeRTOS/Source/tasks.c **** 			}
1423:../FreeRTOS/Source/tasks.c **** 
1424:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1425:../FreeRTOS/Source/tasks.c **** 			{
1426:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 1847              		.loc 1 1426 0
 1848 0af8 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 1849 0afc C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 1850 0b00 1B68     		ldr	r3, [r3, #0]
 1851 0b02 002B     		cmp	r3, #0
 1852 0b04 09D0     		beq	.L78
1427:../FreeRTOS/Source/tasks.c **** 				{
1428:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
 1853              		.loc 1 1428 0
 1854 0b06 7868     		ldr	r0, [r7, #4]
 1855 0b08 40F20001 		movw	r1, #:lower16:xTasksWaitingTermination
 1856 0b0c C0F20001 		movt	r1, #:upper16:xTasksWaitingTermination
 1857 0b10 BA68     		ldr	r2, [r7, #8]
 1858 0b12 4FF04403 		mov	r3, #68
 1859 0b16 00F087FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1860              	.L78:
1429:../FreeRTOS/Source/tasks.c **** 				}
1430:../FreeRTOS/Source/tasks.c **** 			}
1431:../FreeRTOS/Source/tasks.c **** 			#endif
1432:../FreeRTOS/Source/tasks.c **** 
1433:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1434:../FreeRTOS/Source/tasks.c **** 			{
1435:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 1861              		.loc 1 1435 0
 1862 0b1a 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1863 0b1e C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1864 0b22 1B68     		ldr	r3, [r3, #0]
 1865 0b24 002B     		cmp	r3, #0
 1866 0b26 09D0     		beq	.L79
1436:../FreeRTOS/Source/tasks.c **** 				{
1437:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tsk
 1867              		.loc 1 1437 0
 1868 0b28 7868     		ldr	r0, [r7, #4]
 1869 0b2a 40F20001 		movw	r1, #:lower16:xSuspendedTaskList
 1870 0b2e C0F20001 		movt	r1, #:upper16:xSuspendedTaskList
 1871 0b32 BA68     		ldr	r2, [r7, #8]
 1872 0b34 4FF05303 		mov	r3, #83
 1873 0b38 00F076FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1874              	.L79:
1438:../FreeRTOS/Source/tasks.c **** 				}
1439:../FreeRTOS/Source/tasks.c **** 			}
1440:../FreeRTOS/Source/tasks.c **** 			#endif
1441:../FreeRTOS/Source/tasks.c **** 		}
1442:../FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
 1875              		.loc 1 1442 0
 1876 0b3c FFF7FEFF 		bl	xTaskResumeAll
1443:../FreeRTOS/Source/tasks.c **** 	}
 1877              		.loc 1 1443 0
 1878 0b40 07F11407 		add	r7, r7, #20
 1879 0b44 BD46     		mov	sp, r7
 1880 0b46 90BD     		pop	{r4, r7, pc}
 1881              		.cfi_endproc
 1882              	.LFE127:
 1884              		.align	2
 1885              		.global	xTaskGetIdleTaskHandle
 1886              		.thumb
 1887              		.thumb_func
 1889              	xTaskGetIdleTaskHandle:
 1890              	.LFB128:
1444:../FreeRTOS/Source/tasks.c **** 
1445:../FreeRTOS/Source/tasks.c **** #endif
1446:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1447:../FreeRTOS/Source/tasks.c **** 
1448:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1449:../FreeRTOS/Source/tasks.c **** 
1450:../FreeRTOS/Source/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1451:../FreeRTOS/Source/tasks.c **** 	{
1452:../FreeRTOS/Source/tasks.c **** 		configASSERT( pcBuffer );
1453:../FreeRTOS/Source/tasks.c **** 		configASSERT( ulBufferSize );
1454:../FreeRTOS/Source/tasks.c **** 
1455:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1456:../FreeRTOS/Source/tasks.c **** 		{
1457:../FreeRTOS/Source/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
1458:../FreeRTOS/Source/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1459:../FreeRTOS/Source/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1460:../FreeRTOS/Source/tasks.c **** 			xTracing = pdTRUE;
1461:../FreeRTOS/Source/tasks.c **** 		}
1462:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1463:../FreeRTOS/Source/tasks.c **** 	}
1464:../FreeRTOS/Source/tasks.c **** 
1465:../FreeRTOS/Source/tasks.c **** #endif
1466:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1467:../FreeRTOS/Source/tasks.c **** 
1468:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1469:../FreeRTOS/Source/tasks.c **** 
1470:../FreeRTOS/Source/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1471:../FreeRTOS/Source/tasks.c **** 	{
1472:../FreeRTOS/Source/tasks.c **** 	unsigned long ulBufferLength;
1473:../FreeRTOS/Source/tasks.c **** 
1474:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1475:../FreeRTOS/Source/tasks.c **** 			xTracing = pdFALSE;
1476:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1477:../FreeRTOS/Source/tasks.c **** 
1478:../FreeRTOS/Source/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
1479:../FreeRTOS/Source/tasks.c **** 
1480:../FreeRTOS/Source/tasks.c **** 		return ulBufferLength;
1481:../FreeRTOS/Source/tasks.c **** 	}
1482:../FreeRTOS/Source/tasks.c **** 
1483:../FreeRTOS/Source/tasks.c **** #endif
1484:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1485:../FreeRTOS/Source/tasks.c **** 
1486:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1487:../FreeRTOS/Source/tasks.c **** 
1488:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1489:../FreeRTOS/Source/tasks.c **** 	{
 1891              		.loc 1 1489 0
 1892              		.cfi_startproc
 1893              		@ args = 0, pretend = 0, frame = 0
 1894              		@ frame_needed = 1, uses_anonymous_args = 0
 1895              		@ link register save eliminated.
 1896 0b48 80B4     		push	{r7}
 1897              	.LCFI51:
 1898              		.cfi_def_cfa_offset 4
 1899              		.cfi_offset 7, -4
 1900 0b4a 00AF     		add	r7, sp, #0
 1901              	.LCFI52:
 1902              		.cfi_def_cfa_register 7
1490:../FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1491:../FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1492:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1493:../FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
 1903              		.loc 1 1493 0
 1904 0b4c 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1905 0b50 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1906 0b54 1B68     		ldr	r3, [r3, #0]
1494:../FreeRTOS/Source/tasks.c **** 	}
 1907              		.loc 1 1494 0
 1908 0b56 1846     		mov	r0, r3
 1909 0b58 BD46     		mov	sp, r7
 1910 0b5a 80BC     		pop	{r7}
 1911 0b5c 7047     		bx	lr
 1912              		.cfi_endproc
 1913              	.LFE128:
 1915 0b5e 00BF     		.align	2
 1916              		.global	vTaskIncrementTick
 1917              		.thumb
 1918              		.thumb_func
 1920              	vTaskIncrementTick:
 1921              	.LFB129:
1495:../FreeRTOS/Source/tasks.c **** 	
1496:../FreeRTOS/Source/tasks.c **** #endif
1497:../FreeRTOS/Source/tasks.c **** 
1498:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1499:../FreeRTOS/Source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1500:../FreeRTOS/Source/tasks.c ****  * documented in task.h
1501:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1502:../FreeRTOS/Source/tasks.c **** 
1503:../FreeRTOS/Source/tasks.c **** void vTaskIncrementTick( void )
1504:../FreeRTOS/Source/tasks.c **** {
 1922              		.loc 1 1504 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 16
 1925              		@ frame_needed = 1, uses_anonymous_args = 0
 1926 0b60 80B5     		push	{r7, lr}
 1927              	.LCFI53:
 1928              		.cfi_def_cfa_offset 8
 1929              		.cfi_offset 14, -4
 1930              		.cfi_offset 7, -8
 1931 0b62 84B0     		sub	sp, sp, #16
 1932              	.LCFI54:
 1933              		.cfi_def_cfa_offset 24
 1934 0b64 00AF     		add	r7, sp, #0
 1935              	.LCFI55:
 1936              		.cfi_def_cfa_register 7
1505:../FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1506:../FreeRTOS/Source/tasks.c **** 
1507:../FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1508:../FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1509:../FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1510:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1937              		.loc 1 1510 0
 1938 0b66 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1939 0b6a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1940 0b6e 1B68     		ldr	r3, [r3, #0]
 1941 0b70 002B     		cmp	r3, #0
 1942 0b72 40F0C080 		bne	.L82
1511:../FreeRTOS/Source/tasks.c **** 	{
1512:../FreeRTOS/Source/tasks.c **** 		++xTickCount;
 1943              		.loc 1 1512 0
 1944 0b76 40F20003 		movw	r3, #:lower16:xTickCount
 1945 0b7a C0F20003 		movt	r3, #:upper16:xTickCount
 1946 0b7e 1B68     		ldr	r3, [r3, #0]
 1947 0b80 03F10102 		add	r2, r3, #1
 1948 0b84 40F20003 		movw	r3, #:lower16:xTickCount
 1949 0b88 C0F20003 		movt	r3, #:upper16:xTickCount
 1950 0b8c 1A60     		str	r2, [r3, #0]
1513:../FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 1951              		.loc 1 1513 0
 1952 0b8e 40F20003 		movw	r3, #:lower16:xTickCount
 1953 0b92 C0F20003 		movt	r3, #:upper16:xTickCount
 1954 0b96 1B68     		ldr	r3, [r3, #0]
 1955 0b98 002B     		cmp	r3, #0
 1956 0b9a 40D1     		bne	.L83
 1957              	.LBB4:
1514:../FreeRTOS/Source/tasks.c **** 		{
1515:../FreeRTOS/Source/tasks.c **** 			xList *pxTemp;
1516:../FreeRTOS/Source/tasks.c **** 
1517:../FreeRTOS/Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1518:../FreeRTOS/Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1519:../FreeRTOS/Source/tasks.c **** 			an error! */
1520:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1521:../FreeRTOS/Source/tasks.c **** 			
1522:../FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 1958              		.loc 1 1522 0
 1959 0b9c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1960 0ba0 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1961 0ba4 1B68     		ldr	r3, [r3, #0]
 1962 0ba6 FB60     		str	r3, [r7, #12]
1523:../FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1963              		.loc 1 1523 0
 1964 0ba8 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1965 0bac C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1966 0bb0 1A68     		ldr	r2, [r3, #0]
 1967 0bb2 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1968 0bb6 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1969 0bba 1A60     		str	r2, [r3, #0]
1524:../FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 1970              		.loc 1 1524 0
 1971 0bbc 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1972 0bc0 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1973 0bc4 FA68     		ldr	r2, [r7, #12]
 1974 0bc6 1A60     		str	r2, [r3, #0]
1525:../FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
 1975              		.loc 1 1525 0
 1976 0bc8 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 1977 0bcc C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 1978 0bd0 1B68     		ldr	r3, [r3, #0]
 1979 0bd2 03F10102 		add	r2, r3, #1
 1980 0bd6 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 1981 0bda C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 1982 0bde 1A60     		str	r2, [r3, #0]
1526:../FreeRTOS/Source/tasks.c **** 	
1527:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1983              		.loc 1 1527 0
 1984 0be0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1985 0be4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1986 0be8 1B68     		ldr	r3, [r3, #0]
 1987 0bea 1B68     		ldr	r3, [r3, #0]
 1988 0bec 002B     		cmp	r3, #0
 1989 0bee 07D1     		bne	.L84
1528:../FreeRTOS/Source/tasks.c **** 			{
1529:../FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1530:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1531:../FreeRTOS/Source/tasks.c **** 				extremely unlikely that the	
1532:../FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1533:../FreeRTOS/Source/tasks.c **** 				there is an item in the delayed list. */
1534:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 1990              		.loc 1 1534 0
 1991 0bf0 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 1992 0bf4 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 1993 0bf8 4FF0FF32 		mov	r2, #-1
 1994 0bfc 1A60     		str	r2, [r3, #0]
 1995 0bfe 0EE0     		b	.L83
 1996              	.L84:
1535:../FreeRTOS/Source/tasks.c **** 			}
1536:../FreeRTOS/Source/tasks.c **** 			else
1537:../FreeRTOS/Source/tasks.c **** 			{
1538:../FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1539:../FreeRTOS/Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1540:../FreeRTOS/Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1541:../FreeRTOS/Source/tasks.c **** 				from the Blocked state. */
1542:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 1997              		.loc 1 1542 0
 1998 0c00 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1999 0c04 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2000 0c08 1B68     		ldr	r3, [r3, #0]
 2001 0c0a DB68     		ldr	r3, [r3, #12]
 2002 0c0c DB68     		ldr	r3, [r3, #12]
 2003 0c0e BB60     		str	r3, [r7, #8]
1543:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2004              		.loc 1 1543 0
 2005 0c10 BB68     		ldr	r3, [r7, #8]
 2006 0c12 5A68     		ldr	r2, [r3, #4]
 2007 0c14 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2008 0c18 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2009 0c1c 1A60     		str	r2, [r3, #0]
 2010              	.L83:
 2011              	.LBE4:
 2012              	.LBB5:
1544:../FreeRTOS/Source/tasks.c **** 			}
1545:../FreeRTOS/Source/tasks.c **** 		}
1546:../FreeRTOS/Source/tasks.c **** 
1547:../FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1548:../FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 2013              		.loc 1 1548 0
 2014 0c1e 40F20003 		movw	r3, #:lower16:xTickCount
 2015 0c22 C0F20003 		movt	r3, #:upper16:xTickCount
 2016 0c26 1A68     		ldr	r2, [r3, #0]
 2017 0c28 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2018 0c2c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2019 0c30 1B68     		ldr	r3, [r3, #0]
 2020 0c32 9A42     		cmp	r2, r3
 2021 0c34 6BD3     		bcc	.L81
 2022              	.L90:
 2023              		.loc 1 1548 0 is_stmt 0 discriminator 1
 2024 0c36 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2025 0c3a C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2026 0c3e 1B68     		ldr	r3, [r3, #0]
 2027 0c40 1B68     		ldr	r3, [r3, #0]
 2028 0c42 002B     		cmp	r3, #0
 2029 0c44 07D1     		bne	.L86
 2030              		.loc 1 1548 0 discriminator 2
 2031 0c46 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2032 0c4a C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2033 0c4e 4FF0FF32 		mov	r2, #-1
 2034 0c52 1A60     		str	r2, [r3, #0]
 2035 0c54 5BE0     		b	.L81
 2036              	.L86:
 2037              		.loc 1 1548 0 discriminator 3
 2038 0c56 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2039 0c5a C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2040 0c5e 1B68     		ldr	r3, [r3, #0]
 2041 0c60 DB68     		ldr	r3, [r3, #12]
 2042 0c62 DB68     		ldr	r3, [r3, #12]
 2043 0c64 BB60     		str	r3, [r7, #8]
 2044 0c66 BB68     		ldr	r3, [r7, #8]
 2045 0c68 5B68     		ldr	r3, [r3, #4]
 2046 0c6a 7B60     		str	r3, [r7, #4]
 2047 0c6c 40F20003 		movw	r3, #:lower16:xTickCount
 2048 0c70 C0F20003 		movt	r3, #:upper16:xTickCount
 2049 0c74 1A68     		ldr	r2, [r3, #0]
 2050 0c76 7B68     		ldr	r3, [r7, #4]
 2051 0c78 9A42     		cmp	r2, r3
 2052 0c7a 06D2     		bcs	.L87
 2053              		.loc 1 1548 0 discriminator 4
 2054 0c7c 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2055 0c80 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2056 0c84 7A68     		ldr	r2, [r7, #4]
 2057 0c86 1A60     		str	r2, [r3, #0]
 2058 0c88 41E0     		b	.L81
 2059              	.L87:
 2060              		.loc 1 1548 0 discriminator 5
 2061 0c8a BB68     		ldr	r3, [r7, #8]
 2062 0c8c 03F10403 		add	r3, r3, #4
 2063 0c90 1846     		mov	r0, r3
 2064 0c92 FFF7FEFF 		bl	vListRemove
 2065 0c96 BB68     		ldr	r3, [r7, #8]
 2066 0c98 9B6A     		ldr	r3, [r3, #40]
 2067 0c9a 002B     		cmp	r3, #0
 2068 0c9c 05D0     		beq	.L88
 2069              		.loc 1 1548 0 discriminator 6
 2070 0c9e BB68     		ldr	r3, [r7, #8]
 2071 0ca0 03F11803 		add	r3, r3, #24
 2072 0ca4 1846     		mov	r0, r3
 2073 0ca6 FFF7FEFF 		bl	vListRemove
 2074              	.L88:
 2075              		.loc 1 1548 0 discriminator 7
 2076 0caa BB68     		ldr	r3, [r7, #8]
 2077 0cac DA6A     		ldr	r2, [r3, #44]
 2078 0cae 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2079 0cb2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2080 0cb6 1B68     		ldr	r3, [r3, #0]
 2081 0cb8 9A42     		cmp	r2, r3
 2082 0cba 06D9     		bls	.L89
 2083              		.loc 1 1548 0 discriminator 8
 2084 0cbc BB68     		ldr	r3, [r7, #8]
 2085 0cbe DA6A     		ldr	r2, [r3, #44]
 2086 0cc0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2087 0cc4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2088 0cc8 1A60     		str	r2, [r3, #0]
 2089              	.L89:
 2090              		.loc 1 1548 0 discriminator 9
 2091 0cca BB68     		ldr	r3, [r7, #8]
 2092 0ccc DA6A     		ldr	r2, [r3, #44]
 2093 0cce 1346     		mov	r3, r2
 2094 0cd0 4FEA8303 		lsl	r3, r3, #2
 2095 0cd4 9B18     		adds	r3, r3, r2
 2096 0cd6 4FEA8303 		lsl	r3, r3, #2
 2097 0cda 1A46     		mov	r2, r3
 2098 0cdc 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2099 0ce0 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2100 0ce4 D218     		adds	r2, r2, r3
 2101 0ce6 BB68     		ldr	r3, [r7, #8]
 2102 0ce8 03F10403 		add	r3, r3, #4
 2103 0cec 1046     		mov	r0, r2
 2104 0cee 1946     		mov	r1, r3
 2105 0cf0 FFF7FEFF 		bl	vListInsertEnd
 2106 0cf4 9FE7     		b	.L90
 2107              	.L82:
 2108              	.LBE5:
1549:../FreeRTOS/Source/tasks.c **** 	}
1550:../FreeRTOS/Source/tasks.c **** 	else
1551:../FreeRTOS/Source/tasks.c **** 	{
1552:../FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
 2109              		.loc 1 1552 0 is_stmt 1
 2110 0cf6 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2111 0cfa C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2112 0cfe 1B68     		ldr	r3, [r3, #0]
 2113 0d00 03F10102 		add	r2, r3, #1
 2114 0d04 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2115 0d08 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2116 0d0c 1A60     		str	r2, [r3, #0]
 2117              	.L81:
1553:../FreeRTOS/Source/tasks.c **** 
1554:../FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1555:../FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1556:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1557:../FreeRTOS/Source/tasks.c **** 		{
1558:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1559:../FreeRTOS/Source/tasks.c **** 		}
1560:../FreeRTOS/Source/tasks.c **** 		#endif
1561:../FreeRTOS/Source/tasks.c **** 	}
1562:../FreeRTOS/Source/tasks.c **** 
1563:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1564:../FreeRTOS/Source/tasks.c **** 	{
1565:../FreeRTOS/Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1566:../FreeRTOS/Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1567:../FreeRTOS/Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1568:../FreeRTOS/Source/tasks.c **** 		{
1569:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1570:../FreeRTOS/Source/tasks.c **** 		}
1571:../FreeRTOS/Source/tasks.c **** 	}
1572:../FreeRTOS/Source/tasks.c **** 	#endif
1573:../FreeRTOS/Source/tasks.c **** 
1574:../FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1575:../FreeRTOS/Source/tasks.c **** }
 2118              		.loc 1 1575 0
 2119 0d0e 07F11007 		add	r7, r7, #16
 2120 0d12 BD46     		mov	sp, r7
 2121 0d14 80BD     		pop	{r7, pc}
 2122              		.cfi_endproc
 2123              	.LFE129:
 2125 0d16 00BF     		.align	2
 2126              		.global	vTaskSetApplicationTaskTag
 2127              		.thumb
 2128              		.thumb_func
 2130              	vTaskSetApplicationTaskTag:
 2131              	.LFB130:
1576:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1577:../FreeRTOS/Source/tasks.c **** 
1578:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1579:../FreeRTOS/Source/tasks.c **** 
1580:../FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1581:../FreeRTOS/Source/tasks.c **** 	{
 2132              		.loc 1 1581 0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 16
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136 0d18 80B5     		push	{r7, lr}
 2137              	.LCFI56:
 2138              		.cfi_def_cfa_offset 8
 2139              		.cfi_offset 14, -4
 2140              		.cfi_offset 7, -8
 2141 0d1a 84B0     		sub	sp, sp, #16
 2142              	.LCFI57:
 2143              		.cfi_def_cfa_offset 24
 2144 0d1c 00AF     		add	r7, sp, #0
 2145              	.LCFI58:
 2146              		.cfi_def_cfa_register 7
 2147 0d1e 7860     		str	r0, [r7, #4]
 2148 0d20 3960     		str	r1, [r7, #0]
1582:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1583:../FreeRTOS/Source/tasks.c **** 
1584:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1585:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2149              		.loc 1 1585 0
 2150 0d22 7B68     		ldr	r3, [r7, #4]
 2151 0d24 002B     		cmp	r3, #0
 2152 0d26 06D1     		bne	.L93
1586:../FreeRTOS/Source/tasks.c **** 		{
1587:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2153              		.loc 1 1587 0
 2154 0d28 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2155 0d2c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2156 0d30 1B68     		ldr	r3, [r3, #0]
 2157 0d32 FB60     		str	r3, [r7, #12]
 2158 0d34 01E0     		b	.L94
 2159              	.L93:
1588:../FreeRTOS/Source/tasks.c **** 		}
1589:../FreeRTOS/Source/tasks.c **** 		else
1590:../FreeRTOS/Source/tasks.c **** 		{
1591:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2160              		.loc 1 1591 0
 2161 0d36 7B68     		ldr	r3, [r7, #4]
 2162 0d38 FB60     		str	r3, [r7, #12]
 2163              	.L94:
1592:../FreeRTOS/Source/tasks.c **** 		}
1593:../FreeRTOS/Source/tasks.c **** 
1594:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1595:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1596:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2164              		.loc 1 1596 0
 2165 0d3a FFF7FEFF 		bl	vPortEnterCritical
1597:../FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2166              		.loc 1 1597 0
 2167 0d3e FB68     		ldr	r3, [r7, #12]
 2168 0d40 3A68     		ldr	r2, [r7, #0]
 2169 0d42 9A64     		str	r2, [r3, #72]
1598:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2170              		.loc 1 1598 0
 2171 0d44 FFF7FEFF 		bl	vPortExitCritical
1599:../FreeRTOS/Source/tasks.c **** 	}
 2172              		.loc 1 1599 0
 2173 0d48 07F11007 		add	r7, r7, #16
 2174 0d4c BD46     		mov	sp, r7
 2175 0d4e 80BD     		pop	{r7, pc}
 2176              		.cfi_endproc
 2177              	.LFE130:
 2179              		.align	2
 2180              		.global	xTaskGetApplicationTaskTag
 2181              		.thumb
 2182              		.thumb_func
 2184              	xTaskGetApplicationTaskTag:
 2185              	.LFB131:
1600:../FreeRTOS/Source/tasks.c **** 
1601:../FreeRTOS/Source/tasks.c **** #endif
1602:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1603:../FreeRTOS/Source/tasks.c **** 
1604:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1605:../FreeRTOS/Source/tasks.c **** 
1606:../FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1607:../FreeRTOS/Source/tasks.c **** 	{
 2186              		.loc 1 1607 0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 16
 2189              		@ frame_needed = 1, uses_anonymous_args = 0
 2190 0d50 80B5     		push	{r7, lr}
 2191              	.LCFI59:
 2192              		.cfi_def_cfa_offset 8
 2193              		.cfi_offset 14, -4
 2194              		.cfi_offset 7, -8
 2195 0d52 84B0     		sub	sp, sp, #16
 2196              	.LCFI60:
 2197              		.cfi_def_cfa_offset 24
 2198 0d54 00AF     		add	r7, sp, #0
 2199              	.LCFI61:
 2200              		.cfi_def_cfa_register 7
 2201 0d56 7860     		str	r0, [r7, #4]
1608:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1609:../FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1610:../FreeRTOS/Source/tasks.c **** 
1611:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1612:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2202              		.loc 1 1612 0
 2203 0d58 7B68     		ldr	r3, [r7, #4]
 2204 0d5a 002B     		cmp	r3, #0
 2205 0d5c 06D1     		bne	.L96
1613:../FreeRTOS/Source/tasks.c **** 		{
1614:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2206              		.loc 1 1614 0
 2207 0d5e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2208 0d62 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2209 0d66 1B68     		ldr	r3, [r3, #0]
 2210 0d68 FB60     		str	r3, [r7, #12]
 2211 0d6a 01E0     		b	.L97
 2212              	.L96:
1615:../FreeRTOS/Source/tasks.c **** 		}
1616:../FreeRTOS/Source/tasks.c **** 		else
1617:../FreeRTOS/Source/tasks.c **** 		{
1618:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2213              		.loc 1 1618 0
 2214 0d6c 7B68     		ldr	r3, [r7, #4]
 2215 0d6e FB60     		str	r3, [r7, #12]
 2216              	.L97:
1619:../FreeRTOS/Source/tasks.c **** 		}
1620:../FreeRTOS/Source/tasks.c **** 
1621:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1622:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1623:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2217              		.loc 1 1623 0
 2218 0d70 FFF7FEFF 		bl	vPortEnterCritical
1624:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
 2219              		.loc 1 1624 0
 2220 0d74 FB68     		ldr	r3, [r7, #12]
 2221 0d76 9B6C     		ldr	r3, [r3, #72]
 2222 0d78 BB60     		str	r3, [r7, #8]
1625:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2223              		.loc 1 1625 0
 2224 0d7a FFF7FEFF 		bl	vPortExitCritical
1626:../FreeRTOS/Source/tasks.c **** 
1627:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 2225              		.loc 1 1627 0
 2226 0d7e BB68     		ldr	r3, [r7, #8]
1628:../FreeRTOS/Source/tasks.c **** 	}
 2227              		.loc 1 1628 0
 2228 0d80 1846     		mov	r0, r3
 2229 0d82 07F11007 		add	r7, r7, #16
 2230 0d86 BD46     		mov	sp, r7
 2231 0d88 80BD     		pop	{r7, pc}
 2232              		.cfi_endproc
 2233              	.LFE131:
 2235 0d8a 00BF     		.align	2
 2236              		.global	xTaskCallApplicationTaskHook
 2237              		.thumb
 2238              		.thumb_func
 2240              	xTaskCallApplicationTaskHook:
 2241              	.LFB132:
1629:../FreeRTOS/Source/tasks.c **** 
1630:../FreeRTOS/Source/tasks.c **** #endif
1631:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1632:../FreeRTOS/Source/tasks.c **** 
1633:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1634:../FreeRTOS/Source/tasks.c **** 
1635:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1636:../FreeRTOS/Source/tasks.c **** 	{
 2242              		.loc 1 1636 0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 16
 2245              		@ frame_needed = 1, uses_anonymous_args = 0
 2246 0d8c 80B5     		push	{r7, lr}
 2247              	.LCFI62:
 2248              		.cfi_def_cfa_offset 8
 2249              		.cfi_offset 14, -4
 2250              		.cfi_offset 7, -8
 2251 0d8e 84B0     		sub	sp, sp, #16
 2252              	.LCFI63:
 2253              		.cfi_def_cfa_offset 24
 2254 0d90 00AF     		add	r7, sp, #0
 2255              	.LCFI64:
 2256              		.cfi_def_cfa_register 7
 2257 0d92 7860     		str	r0, [r7, #4]
 2258 0d94 3960     		str	r1, [r7, #0]
1637:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1638:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1639:../FreeRTOS/Source/tasks.c **** 
1640:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1641:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2259              		.loc 1 1641 0
 2260 0d96 7B68     		ldr	r3, [r7, #4]
 2261 0d98 002B     		cmp	r3, #0
 2262 0d9a 06D1     		bne	.L99
1642:../FreeRTOS/Source/tasks.c **** 		{
1643:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2263              		.loc 1 1643 0
 2264 0d9c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2265 0da0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2266 0da4 1B68     		ldr	r3, [r3, #0]
 2267 0da6 FB60     		str	r3, [r7, #12]
 2268 0da8 01E0     		b	.L100
 2269              	.L99:
1644:../FreeRTOS/Source/tasks.c **** 		}
1645:../FreeRTOS/Source/tasks.c **** 		else
1646:../FreeRTOS/Source/tasks.c **** 		{
1647:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2270              		.loc 1 1647 0
 2271 0daa 7B68     		ldr	r3, [r7, #4]
 2272 0dac FB60     		str	r3, [r7, #12]
 2273              	.L100:
1648:../FreeRTOS/Source/tasks.c **** 		}
1649:../FreeRTOS/Source/tasks.c **** 
1650:../FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 2274              		.loc 1 1650 0
 2275 0dae FB68     		ldr	r3, [r7, #12]
 2276 0db0 9B6C     		ldr	r3, [r3, #72]
 2277 0db2 002B     		cmp	r3, #0
 2278 0db4 06D0     		beq	.L101
1651:../FreeRTOS/Source/tasks.c **** 		{
1652:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 2279              		.loc 1 1652 0
 2280 0db6 FB68     		ldr	r3, [r7, #12]
 2281 0db8 9B6C     		ldr	r3, [r3, #72]
 2282 0dba 3868     		ldr	r0, [r7, #0]
 2283 0dbc 9847     		blx	r3
 2284 0dbe 0346     		mov	r3, r0
 2285 0dc0 BB60     		str	r3, [r7, #8]
 2286 0dc2 02E0     		b	.L102
 2287              	.L101:
1653:../FreeRTOS/Source/tasks.c **** 		}
1654:../FreeRTOS/Source/tasks.c **** 		else
1655:../FreeRTOS/Source/tasks.c **** 		{
1656:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2288              		.loc 1 1656 0
 2289 0dc4 4FF00003 		mov	r3, #0
 2290 0dc8 BB60     		str	r3, [r7, #8]
 2291              	.L102:
1657:../FreeRTOS/Source/tasks.c **** 		}
1658:../FreeRTOS/Source/tasks.c **** 
1659:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 2292              		.loc 1 1659 0
 2293 0dca BB68     		ldr	r3, [r7, #8]
1660:../FreeRTOS/Source/tasks.c **** 	}
 2294              		.loc 1 1660 0
 2295 0dcc 1846     		mov	r0, r3
 2296 0dce 07F11007 		add	r7, r7, #16
 2297 0dd2 BD46     		mov	sp, r7
 2298 0dd4 80BD     		pop	{r7, pc}
 2299              		.cfi_endproc
 2300              	.LFE132:
 2302 0dd6 00BF     		.align	2
 2303              		.global	vTaskSwitchContext
 2304              		.thumb
 2305              		.thumb_func
 2307              	vTaskSwitchContext:
 2308              	.LFB133:
1661:../FreeRTOS/Source/tasks.c **** 
1662:../FreeRTOS/Source/tasks.c **** #endif
1663:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1664:../FreeRTOS/Source/tasks.c **** 
1665:../FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1666:../FreeRTOS/Source/tasks.c **** {
 2309              		.loc 1 1666 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 8
 2312              		@ frame_needed = 1, uses_anonymous_args = 0
 2313 0dd8 80B5     		push	{r7, lr}
 2314              	.LCFI65:
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 14, -4
 2317              		.cfi_offset 7, -8
 2318 0dda 82B0     		sub	sp, sp, #8
 2319              	.LCFI66:
 2320              		.cfi_def_cfa_offset 16
 2321 0ddc 00AF     		add	r7, sp, #0
 2322              	.LCFI67:
 2323              		.cfi_def_cfa_register 7
1667:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 2324              		.loc 1 1667 0
 2325 0dde 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2326 0de2 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2327 0de6 1B68     		ldr	r3, [r3, #0]
 2328 0de8 002B     		cmp	r3, #0
 2329 0dea 07D0     		beq	.L104
1668:../FreeRTOS/Source/tasks.c **** 	{
1669:../FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1670:../FreeRTOS/Source/tasks.c **** 		switch. */
1671:../FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
 2330              		.loc 1 1671 0
 2331 0dec 40F20003 		movw	r3, #:lower16:xMissedYield
 2332 0df0 C0F20003 		movt	r3, #:upper16:xMissedYield
 2333 0df4 4FF00102 		mov	r2, #1
 2334 0df8 1A60     		str	r2, [r3, #0]
 2335 0dfa 89E0     		b	.L103
 2336              	.L104:
 2337              	.LBB6:
1672:../FreeRTOS/Source/tasks.c **** 	}
1673:../FreeRTOS/Source/tasks.c **** 	else
1674:../FreeRTOS/Source/tasks.c **** 	{
1675:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1676:../FreeRTOS/Source/tasks.c **** 	
1677:../FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1678:../FreeRTOS/Source/tasks.c **** 		{
1679:../FreeRTOS/Source/tasks.c **** 			unsigned long ulTempCounter;
1680:../FreeRTOS/Source/tasks.c **** 			
1681:../FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1682:../FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1683:../FreeRTOS/Source/tasks.c **** 				#else
1684:../FreeRTOS/Source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 2338              		.loc 1 1684 0
 2339 0dfc FFF7FEFF 		bl	get_us_time
 2340 0e00 0246     		mov	r2, r0
 2341 0e02 0B46     		mov	r3, r1
 2342 0e04 1346     		mov	r3, r2
 2343 0e06 7B60     		str	r3, [r7, #4]
1685:../FreeRTOS/Source/tasks.c **** 				#endif
1686:../FreeRTOS/Source/tasks.c **** 	
1687:../FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1688:../FreeRTOS/Source/tasks.c **** 				time so far.  The time the task started running was stored in
1689:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1690:../FreeRTOS/Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1691:../FreeRTOS/Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1692:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 2344              		.loc 1 1692 0
 2345 0e08 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2346 0e0c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2347 0e10 1A68     		ldr	r2, [r3, #0]
 2348 0e12 D16C     		ldr	r1, [r2, #76]
 2349 0e14 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2350 0e18 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2351 0e1c 1B68     		ldr	r3, [r3, #0]
 2352 0e1e 7868     		ldr	r0, [r7, #4]
 2353 0e20 C31A     		subs	r3, r0, r3
 2354 0e22 CB18     		adds	r3, r1, r3
 2355 0e24 D364     		str	r3, [r2, #76]
1693:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
 2356              		.loc 1 1693 0
 2357 0e26 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2358 0e2a C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2359 0e2e 7A68     		ldr	r2, [r7, #4]
 2360 0e30 1A60     		str	r2, [r3, #0]
 2361              	.LBE6:
1694:../FreeRTOS/Source/tasks.c **** 		}
1695:../FreeRTOS/Source/tasks.c **** 		#endif
1696:../FreeRTOS/Source/tasks.c **** 	
1697:../FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 2362              		.loc 1 1697 0
 2363 0e32 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2364 0e36 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2365 0e3a 1B68     		ldr	r3, [r3, #0]
 2366 0e3c 1A68     		ldr	r2, [r3, #0]
 2367 0e3e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2368 0e42 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2369 0e46 1B68     		ldr	r3, [r3, #0]
 2370 0e48 1B6B     		ldr	r3, [r3, #48]
 2371 0e4a 9A42     		cmp	r2, r3
 2372 0e4c 1DD8     		bhi	.L110
 2373              		.loc 1 1697 0 is_stmt 0 discriminator 1
 2374 0e4e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2375 0e52 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2376 0e56 1A68     		ldr	r2, [r3, #0]
 2377 0e58 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2378 0e5c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2379 0e60 1B68     		ldr	r3, [r3, #0]
 2380 0e62 03F13403 		add	r3, r3, #52
 2381 0e66 1046     		mov	r0, r2
 2382 0e68 1946     		mov	r1, r3
 2383 0e6a FFF7FEFF 		bl	vApplicationStackOverflowHook
1698:../FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1699:../FreeRTOS/Source/tasks.c **** 	
1700:../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2384              		.loc 1 1701 0 is_stmt 1 discriminator 1
 2385 0e6e 0CE0     		b	.L110
 2386              	.L108:
1702:../FreeRTOS/Source/tasks.c **** 		{
1703:../FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );
1704:../FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;
 2387              		.loc 1 1704 0
 2388 0e70 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2389 0e74 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2390 0e78 1B68     		ldr	r3, [r3, #0]
 2391 0e7a 03F1FF32 		add	r2, r3, #-1
 2392 0e7e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2393 0e82 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2394 0e86 1A60     		str	r2, [r3, #0]
 2395 0e88 00E0     		b	.L107
 2396              	.L110:
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2397              		.loc 1 1701 0
 2398 0e8a 00BF     		nop
 2399              	.L107:
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2400              		.loc 1 1701 0 is_stmt 0 discriminator 1
 2401 0e8c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2402 0e90 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2403 0e94 1A68     		ldr	r2, [r3, #0]
 2404 0e96 1346     		mov	r3, r2
 2405 0e98 4FEA8303 		lsl	r3, r3, #2
 2406 0e9c 9B18     		adds	r3, r3, r2
 2407 0e9e 4FEA8303 		lsl	r3, r3, #2
 2408 0ea2 1A46     		mov	r2, r3
 2409 0ea4 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2410 0ea8 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2411 0eac D318     		adds	r3, r2, r3
 2412 0eae 1B68     		ldr	r3, [r3, #0]
 2413 0eb0 002B     		cmp	r3, #0
 2414 0eb2 DDD0     		beq	.L108
 2415              	.LBB7:
1705:../FreeRTOS/Source/tasks.c **** 		}
1706:../FreeRTOS/Source/tasks.c **** 	
1707:../FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1708:../FreeRTOS/Source/tasks.c **** 		same priority get an equal share of the processor time. */
1709:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 2416              		.loc 1 1709 0 is_stmt 1
 2417 0eb4 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2418 0eb8 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2419 0ebc 1A68     		ldr	r2, [r3, #0]
 2420 0ebe 1346     		mov	r3, r2
 2421 0ec0 4FEA8303 		lsl	r3, r3, #2
 2422 0ec4 9B18     		adds	r3, r3, r2
 2423 0ec6 4FEA8303 		lsl	r3, r3, #2
 2424 0eca 1A46     		mov	r2, r3
 2425 0ecc 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2426 0ed0 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2427 0ed4 D318     		adds	r3, r2, r3
 2428 0ed6 3B60     		str	r3, [r7, #0]
 2429 0ed8 3B68     		ldr	r3, [r7, #0]
 2430 0eda 5B68     		ldr	r3, [r3, #4]
 2431 0edc 5B68     		ldr	r3, [r3, #4]
 2432 0ede 1A46     		mov	r2, r3
 2433 0ee0 3B68     		ldr	r3, [r7, #0]
 2434 0ee2 5A60     		str	r2, [r3, #4]
 2435 0ee4 3B68     		ldr	r3, [r7, #0]
 2436 0ee6 5A68     		ldr	r2, [r3, #4]
 2437 0ee8 3B68     		ldr	r3, [r7, #0]
 2438 0eea 03F10803 		add	r3, r3, #8
 2439 0eee 9A42     		cmp	r2, r3
 2440 0ef0 05D1     		bne	.L109
 2441              		.loc 1 1709 0 is_stmt 0 discriminator 1
 2442 0ef2 3B68     		ldr	r3, [r7, #0]
 2443 0ef4 5B68     		ldr	r3, [r3, #4]
 2444 0ef6 5B68     		ldr	r3, [r3, #4]
 2445 0ef8 1A46     		mov	r2, r3
 2446 0efa 3B68     		ldr	r3, [r7, #0]
 2447 0efc 5A60     		str	r2, [r3, #4]
 2448              	.L109:
 2449              		.loc 1 1709 0 discriminator 2
 2450 0efe 3B68     		ldr	r3, [r7, #0]
 2451 0f00 5B68     		ldr	r3, [r3, #4]
 2452 0f02 DB68     		ldr	r3, [r3, #12]
 2453 0f04 1A46     		mov	r2, r3
 2454 0f06 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2455 0f0a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2456 0f0e 1A60     		str	r2, [r3, #0]
 2457              	.L103:
 2458              	.LBE7:
1710:../FreeRTOS/Source/tasks.c **** 	
1711:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
1712:../FreeRTOS/Source/tasks.c **** 		vWriteTraceToBuffer();
1713:../FreeRTOS/Source/tasks.c **** 	}
1714:../FreeRTOS/Source/tasks.c **** }
 2459              		.loc 1 1714 0 is_stmt 1
 2460 0f10 07F10807 		add	r7, r7, #8
 2461 0f14 BD46     		mov	sp, r7
 2462 0f16 80BD     		pop	{r7, pc}
 2463              		.cfi_endproc
 2464              	.LFE133:
 2466              		.align	2
 2467              		.global	vTaskPlaceOnEventList
 2468              		.thumb
 2469              		.thumb_func
 2471              	vTaskPlaceOnEventList:
 2472              	.LFB134:
1715:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1716:../FreeRTOS/Source/tasks.c **** 
1717:../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1718:../FreeRTOS/Source/tasks.c **** {
 2473              		.loc 1 1718 0
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 16
 2476              		@ frame_needed = 1, uses_anonymous_args = 0
 2477 0f18 80B5     		push	{r7, lr}
 2478              	.LCFI68:
 2479              		.cfi_def_cfa_offset 8
 2480              		.cfi_offset 14, -4
 2481              		.cfi_offset 7, -8
 2482 0f1a 84B0     		sub	sp, sp, #16
 2483              	.LCFI69:
 2484              		.cfi_def_cfa_offset 24
 2485 0f1c 00AF     		add	r7, sp, #0
 2486              	.LCFI70:
 2487              		.cfi_def_cfa_register 7
 2488 0f1e 7860     		str	r0, [r7, #4]
 2489 0f20 3960     		str	r1, [r7, #0]
1719:../FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1720:../FreeRTOS/Source/tasks.c **** 
1721:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1722:../FreeRTOS/Source/tasks.c **** 
1723:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1724:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1725:../FreeRTOS/Source/tasks.c **** 
1726:../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1727:../FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1728:../FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1729:../FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2490              		.loc 1 1729 0
 2491 0f22 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2492 0f26 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2493 0f2a 1B68     		ldr	r3, [r3, #0]
 2494 0f2c 03F11803 		add	r3, r3, #24
 2495 0f30 7868     		ldr	r0, [r7, #4]
 2496 0f32 1946     		mov	r1, r3
 2497 0f34 FFF7FEFF 		bl	vListInsert
1730:../FreeRTOS/Source/tasks.c **** 
1731:../FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1732:../FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1733:../FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1734:../FreeRTOS/Source/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2498              		.loc 1 1734 0
 2499 0f38 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2500 0f3c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2501 0f40 1B68     		ldr	r3, [r3, #0]
 2502 0f42 03F10403 		add	r3, r3, #4
 2503 0f46 1846     		mov	r0, r3
 2504 0f48 FFF7FEFF 		bl	vListRemove
1735:../FreeRTOS/Source/tasks.c **** 
1736:../FreeRTOS/Source/tasks.c **** 
1737:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1738:../FreeRTOS/Source/tasks.c **** 	{
1739:../FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2505              		.loc 1 1739 0
 2506 0f4c 3B68     		ldr	r3, [r7, #0]
 2507 0f4e B3F1FF3F 		cmp	r3, #-1
 2508 0f52 0ED1     		bne	.L112
1740:../FreeRTOS/Source/tasks.c **** 		{
1741:../FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1742:../FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1743:../FreeRTOS/Source/tasks.c **** 			indefinitely. */
1744:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2509              		.loc 1 1744 0
 2510 0f54 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2511 0f58 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2512 0f5c 1B68     		ldr	r3, [r3, #0]
 2513 0f5e 03F10403 		add	r3, r3, #4
 2514 0f62 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 2515 0f66 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 2516 0f6a 1946     		mov	r1, r3
 2517 0f6c FFF7FEFF 		bl	vListInsertEnd
 2518 0f70 0AE0     		b	.L111
 2519              	.L112:
1745:../FreeRTOS/Source/tasks.c **** 		}
1746:../FreeRTOS/Source/tasks.c **** 		else
1747:../FreeRTOS/Source/tasks.c **** 		{
1748:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1749:../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1750:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2520              		.loc 1 1750 0
 2521 0f72 40F20003 		movw	r3, #:lower16:xTickCount
 2522 0f76 C0F20003 		movt	r3, #:upper16:xTickCount
 2523 0f7a 1A68     		ldr	r2, [r3, #0]
 2524 0f7c 3B68     		ldr	r3, [r7, #0]
 2525 0f7e D318     		adds	r3, r2, r3
 2526 0f80 FB60     		str	r3, [r7, #12]
1751:../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2527              		.loc 1 1751 0
 2528 0f82 F868     		ldr	r0, [r7, #12]
 2529 0f84 00F0D0F9 		bl	prvAddCurrentTaskToDelayedList
 2530              	.L111:
1752:../FreeRTOS/Source/tasks.c **** 		}
1753:../FreeRTOS/Source/tasks.c **** 	}
1754:../FreeRTOS/Source/tasks.c **** 	#else
1755:../FreeRTOS/Source/tasks.c **** 	{
1756:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1757:../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1758:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1759:../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1760:../FreeRTOS/Source/tasks.c **** 	}
1761:../FreeRTOS/Source/tasks.c **** 	#endif
1762:../FreeRTOS/Source/tasks.c **** }
 2531              		.loc 1 1762 0
 2532 0f88 07F11007 		add	r7, r7, #16
 2533 0f8c BD46     		mov	sp, r7
 2534 0f8e 80BD     		pop	{r7, pc}
 2535              		.cfi_endproc
 2536              	.LFE134:
 2538              		.align	2
 2539              		.global	xTaskRemoveFromEventList
 2540              		.thumb
 2541              		.thumb_func
 2543              	xTaskRemoveFromEventList:
 2544              	.LFB135:
1763:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1764:../FreeRTOS/Source/tasks.c **** 
1765:../FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1766:../FreeRTOS/Source/tasks.c **** 
1767:../FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1768:../FreeRTOS/Source/tasks.c **** 	{
1769:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1770:../FreeRTOS/Source/tasks.c **** 
1771:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1772:../FreeRTOS/Source/tasks.c **** 
1773:../FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1774:../FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1775:../FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1776:../FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1777:../FreeRTOS/Source/tasks.c **** 
1778:../FreeRTOS/Source/tasks.c **** 	
1779:../FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1780:../FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1781:../FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1782:../FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1783:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1784:../FreeRTOS/Source/tasks.c **** 
1785:../FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1786:../FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1787:../FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1788:../FreeRTOS/Source/tasks.c **** 		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
1789:../FreeRTOS/Source/tasks.c **** 
1790:../FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1791:../FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1792:../FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1793:../FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1794:../FreeRTOS/Source/tasks.c **** 	}
1795:../FreeRTOS/Source/tasks.c **** 	
1796:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1797:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:../FreeRTOS/Source/tasks.c **** 
1799:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1800:../FreeRTOS/Source/tasks.c **** {
 2545              		.loc 1 1800 0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 16
 2548              		@ frame_needed = 1, uses_anonymous_args = 0
 2549 0f90 80B5     		push	{r7, lr}
 2550              	.LCFI71:
 2551              		.cfi_def_cfa_offset 8
 2552              		.cfi_offset 14, -4
 2553              		.cfi_offset 7, -8
 2554 0f92 84B0     		sub	sp, sp, #16
 2555              	.LCFI72:
 2556              		.cfi_def_cfa_offset 24
 2557 0f94 00AF     		add	r7, sp, #0
 2558              	.LCFI73:
 2559              		.cfi_def_cfa_register 7
 2560 0f96 7860     		str	r0, [r7, #4]
1801:../FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1802:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1803:../FreeRTOS/Source/tasks.c **** 
1804:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1805:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1806:../FreeRTOS/Source/tasks.c **** 
1807:../FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1808:../FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1809:../FreeRTOS/Source/tasks.c **** 	it to the ready list.
1810:../FreeRTOS/Source/tasks.c **** 
1811:../FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1812:../FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1813:../FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1814:../FreeRTOS/Source/tasks.c **** 	
1815:../FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1816:../FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1817:../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2561              		.loc 1 1817 0
 2562 0f98 7B68     		ldr	r3, [r7, #4]
 2563 0f9a DB68     		ldr	r3, [r3, #12]
 2564 0f9c DB68     		ldr	r3, [r3, #12]
 2565 0f9e BB60     		str	r3, [r7, #8]
1818:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1819:../FreeRTOS/Source/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2566              		.loc 1 1819 0
 2567 0fa0 BB68     		ldr	r3, [r7, #8]
 2568 0fa2 03F11803 		add	r3, r3, #24
 2569 0fa6 1846     		mov	r0, r3
 2570 0fa8 FFF7FEFF 		bl	vListRemove
1820:../FreeRTOS/Source/tasks.c **** 
1821:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2571              		.loc 1 1821 0
 2572 0fac 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2573 0fb0 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2574 0fb4 1B68     		ldr	r3, [r3, #0]
 2575 0fb6 002B     		cmp	r3, #0
 2576 0fb8 2BD1     		bne	.L115
1822:../FreeRTOS/Source/tasks.c **** 	{
1823:../FreeRTOS/Source/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2577              		.loc 1 1823 0
 2578 0fba BB68     		ldr	r3, [r7, #8]
 2579 0fbc 03F10403 		add	r3, r3, #4
 2580 0fc0 1846     		mov	r0, r3
 2581 0fc2 FFF7FEFF 		bl	vListRemove
1824:../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2582              		.loc 1 1824 0
 2583 0fc6 BB68     		ldr	r3, [r7, #8]
 2584 0fc8 DA6A     		ldr	r2, [r3, #44]
 2585 0fca 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2586 0fce C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2587 0fd2 1B68     		ldr	r3, [r3, #0]
 2588 0fd4 9A42     		cmp	r2, r3
 2589 0fd6 06D9     		bls	.L116
 2590              		.loc 1 1824 0 is_stmt 0 discriminator 1
 2591 0fd8 BB68     		ldr	r3, [r7, #8]
 2592 0fda DA6A     		ldr	r2, [r3, #44]
 2593 0fdc 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2594 0fe0 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2595 0fe4 1A60     		str	r2, [r3, #0]
 2596              	.L116:
 2597              		.loc 1 1824 0 discriminator 2
 2598 0fe6 BB68     		ldr	r3, [r7, #8]
 2599 0fe8 DA6A     		ldr	r2, [r3, #44]
 2600 0fea 1346     		mov	r3, r2
 2601 0fec 4FEA8303 		lsl	r3, r3, #2
 2602 0ff0 9B18     		adds	r3, r3, r2
 2603 0ff2 4FEA8303 		lsl	r3, r3, #2
 2604 0ff6 1A46     		mov	r2, r3
 2605 0ff8 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2606 0ffc C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2607 1000 D218     		adds	r2, r2, r3
 2608 1002 BB68     		ldr	r3, [r7, #8]
 2609 1004 03F10403 		add	r3, r3, #4
 2610 1008 1046     		mov	r0, r2
 2611 100a 1946     		mov	r1, r3
 2612 100c FFF7FEFF 		bl	vListInsertEnd
 2613 1010 09E0     		b	.L117
 2614              	.L115:
1825:../FreeRTOS/Source/tasks.c **** 	}
1826:../FreeRTOS/Source/tasks.c **** 	else
1827:../FreeRTOS/Source/tasks.c **** 	{
1828:../FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1829:../FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1830:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2615              		.loc 1 1830 0 is_stmt 1
 2616 1012 BB68     		ldr	r3, [r7, #8]
 2617 1014 03F11803 		add	r3, r3, #24
 2618 1018 40F20000 		movw	r0, #:lower16:xPendingReadyList
 2619 101c C0F20000 		movt	r0, #:upper16:xPendingReadyList
 2620 1020 1946     		mov	r1, r3
 2621 1022 FFF7FEFF 		bl	vListInsertEnd
 2622              	.L117:
1831:../FreeRTOS/Source/tasks.c **** 	}
1832:../FreeRTOS/Source/tasks.c **** 
1833:../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2623              		.loc 1 1833 0
 2624 1026 BB68     		ldr	r3, [r7, #8]
 2625 1028 DA6A     		ldr	r2, [r3, #44]
 2626 102a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2627 102e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2628 1032 1B68     		ldr	r3, [r3, #0]
 2629 1034 DB6A     		ldr	r3, [r3, #44]
 2630 1036 9A42     		cmp	r2, r3
 2631 1038 03D3     		bcc	.L118
1834:../FreeRTOS/Source/tasks.c **** 	{
1835:../FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1836:../FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1837:../FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
1838:../FreeRTOS/Source/tasks.c **** 		switch now. */
1839:../FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 2632              		.loc 1 1839 0
 2633 103a 4FF00103 		mov	r3, #1
 2634 103e FB60     		str	r3, [r7, #12]
 2635 1040 02E0     		b	.L119
 2636              	.L118:
1840:../FreeRTOS/Source/tasks.c **** 	}
1841:../FreeRTOS/Source/tasks.c **** 	else
1842:../FreeRTOS/Source/tasks.c **** 	{
1843:../FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 2637              		.loc 1 1843 0
 2638 1042 4FF00003 		mov	r3, #0
 2639 1046 FB60     		str	r3, [r7, #12]
 2640              	.L119:
1844:../FreeRTOS/Source/tasks.c **** 	}
1845:../FreeRTOS/Source/tasks.c **** 
1846:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2641              		.loc 1 1846 0
 2642 1048 FB68     		ldr	r3, [r7, #12]
1847:../FreeRTOS/Source/tasks.c **** }
 2643              		.loc 1 1847 0
 2644 104a 1846     		mov	r0, r3
 2645 104c 07F11007 		add	r7, r7, #16
 2646 1050 BD46     		mov	sp, r7
 2647 1052 80BD     		pop	{r7, pc}
 2648              		.cfi_endproc
 2649              	.LFE135:
 2651              		.align	2
 2652              		.global	vTaskSetTimeOutState
 2653              		.thumb
 2654              		.thumb_func
 2656              	vTaskSetTimeOutState:
 2657              	.LFB136:
1848:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1849:../FreeRTOS/Source/tasks.c **** 
1850:../FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1851:../FreeRTOS/Source/tasks.c **** {
 2658              		.loc 1 1851 0
 2659              		.cfi_startproc
 2660              		@ args = 0, pretend = 0, frame = 8
 2661              		@ frame_needed = 1, uses_anonymous_args = 0
 2662              		@ link register save eliminated.
 2663 1054 80B4     		push	{r7}
 2664              	.LCFI74:
 2665              		.cfi_def_cfa_offset 4
 2666              		.cfi_offset 7, -4
 2667 1056 83B0     		sub	sp, sp, #12
 2668              	.LCFI75:
 2669              		.cfi_def_cfa_offset 16
 2670 1058 00AF     		add	r7, sp, #0
 2671              	.LCFI76:
 2672              		.cfi_def_cfa_register 7
 2673 105a 7860     		str	r0, [r7, #4]
1852:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1853:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2674              		.loc 1 1853 0
 2675 105c 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2676 1060 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2677 1064 1A68     		ldr	r2, [r3, #0]
 2678 1066 7B68     		ldr	r3, [r7, #4]
 2679 1068 1A60     		str	r2, [r3, #0]
1854:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2680              		.loc 1 1854 0
 2681 106a 40F20003 		movw	r3, #:lower16:xTickCount
 2682 106e C0F20003 		movt	r3, #:upper16:xTickCount
 2683 1072 1A68     		ldr	r2, [r3, #0]
 2684 1074 7B68     		ldr	r3, [r7, #4]
 2685 1076 5A60     		str	r2, [r3, #4]
1855:../FreeRTOS/Source/tasks.c **** }
 2686              		.loc 1 1855 0
 2687 1078 07F10C07 		add	r7, r7, #12
 2688 107c BD46     		mov	sp, r7
 2689 107e 80BC     		pop	{r7}
 2690 1080 7047     		bx	lr
 2691              		.cfi_endproc
 2692              	.LFE136:
 2694 1082 00BF     		.align	2
 2695              		.global	xTaskCheckForTimeOut
 2696              		.thumb
 2697              		.thumb_func
 2699              	xTaskCheckForTimeOut:
 2700              	.LFB137:
1856:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1857:../FreeRTOS/Source/tasks.c **** 
1858:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1859:../FreeRTOS/Source/tasks.c **** {
 2701              		.loc 1 1859 0
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 16
 2704              		@ frame_needed = 1, uses_anonymous_args = 0
 2705 1084 80B5     		push	{r7, lr}
 2706              	.LCFI77:
 2707              		.cfi_def_cfa_offset 8
 2708              		.cfi_offset 14, -4
 2709              		.cfi_offset 7, -8
 2710 1086 84B0     		sub	sp, sp, #16
 2711              	.LCFI78:
 2712              		.cfi_def_cfa_offset 24
 2713 1088 00AF     		add	r7, sp, #0
 2714              	.LCFI79:
 2715              		.cfi_def_cfa_register 7
 2716 108a 7860     		str	r0, [r7, #4]
 2717 108c 3960     		str	r1, [r7, #0]
1860:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1861:../FreeRTOS/Source/tasks.c **** 
1862:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1863:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
1864:../FreeRTOS/Source/tasks.c **** 
1865:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2718              		.loc 1 1865 0
 2719 108e FFF7FEFF 		bl	vPortEnterCritical
1866:../FreeRTOS/Source/tasks.c **** 	{
1867:../FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1868:../FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1869:../FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1870:../FreeRTOS/Source/tasks.c **** 			therefore never time out. */
1871:../FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2720              		.loc 1 1871 0
 2721 1092 3B68     		ldr	r3, [r7, #0]
 2722 1094 1B68     		ldr	r3, [r3, #0]
 2723 1096 B3F1FF3F 		cmp	r3, #-1
 2724 109a 03D1     		bne	.L122
1872:../FreeRTOS/Source/tasks.c **** 			{
1873:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2725              		.loc 1 1873 0
 2726 109c 4FF00003 		mov	r3, #0
 2727 10a0 FB60     		str	r3, [r7, #12]
 2728 10a2 38E0     		b	.L123
 2729              	.L122:
1874:../FreeRTOS/Source/tasks.c **** 			}
1875:../FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1876:../FreeRTOS/Source/tasks.c **** 		#endif
1877:../FreeRTOS/Source/tasks.c **** 
1878:../FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2730              		.loc 1 1878 0
 2731 10a4 7B68     		ldr	r3, [r7, #4]
 2732 10a6 1A68     		ldr	r2, [r3, #0]
 2733 10a8 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2734 10ac C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2735 10b0 1B68     		ldr	r3, [r3, #0]
 2736 10b2 9A42     		cmp	r2, r3
 2737 10b4 0CD0     		beq	.L124
 2738              		.loc 1 1878 0 is_stmt 0 discriminator 1
 2739 10b6 7B68     		ldr	r3, [r7, #4]
 2740 10b8 5A68     		ldr	r2, [r3, #4]
 2741 10ba 40F20003 		movw	r3, #:lower16:xTickCount
 2742 10be C0F20003 		movt	r3, #:upper16:xTickCount
 2743 10c2 1B68     		ldr	r3, [r3, #0]
 2744 10c4 9A42     		cmp	r2, r3
 2745 10c6 03D8     		bhi	.L124
1879:../FreeRTOS/Source/tasks.c **** 		{
1880:../FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1881:../FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1882:../FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1883:../FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1884:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2746              		.loc 1 1884 0 is_stmt 1
 2747 10c8 4FF00103 		mov	r3, #1
 2748 10cc FB60     		str	r3, [r7, #12]
 2749 10ce 22E0     		b	.L123
 2750              	.L124:
1885:../FreeRTOS/Source/tasks.c **** 		}
1886:../FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2751              		.loc 1 1886 0
 2752 10d0 40F20003 		movw	r3, #:lower16:xTickCount
 2753 10d4 C0F20003 		movt	r3, #:upper16:xTickCount
 2754 10d8 1A68     		ldr	r2, [r3, #0]
 2755 10da 7B68     		ldr	r3, [r7, #4]
 2756 10dc 5B68     		ldr	r3, [r3, #4]
 2757 10de D21A     		subs	r2, r2, r3
 2758 10e0 3B68     		ldr	r3, [r7, #0]
 2759 10e2 1B68     		ldr	r3, [r3, #0]
 2760 10e4 9A42     		cmp	r2, r3
 2761 10e6 13D2     		bcs	.L125
1887:../FreeRTOS/Source/tasks.c **** 		{
1888:../FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1889:../FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2762              		.loc 1 1889 0
 2763 10e8 3B68     		ldr	r3, [r7, #0]
 2764 10ea 1A68     		ldr	r2, [r3, #0]
 2765 10ec 7B68     		ldr	r3, [r7, #4]
 2766 10ee 5968     		ldr	r1, [r3, #4]
 2767 10f0 40F20003 		movw	r3, #:lower16:xTickCount
 2768 10f4 C0F20003 		movt	r3, #:upper16:xTickCount
 2769 10f8 1B68     		ldr	r3, [r3, #0]
 2770 10fa CB1A     		subs	r3, r1, r3
 2771 10fc D218     		adds	r2, r2, r3
 2772 10fe 3B68     		ldr	r3, [r7, #0]
 2773 1100 1A60     		str	r2, [r3, #0]
1890:../FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2774              		.loc 1 1890 0
 2775 1102 7868     		ldr	r0, [r7, #4]
 2776 1104 FFF7FEFF 		bl	vTaskSetTimeOutState
1891:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2777              		.loc 1 1891 0
 2778 1108 4FF00003 		mov	r3, #0
 2779 110c FB60     		str	r3, [r7, #12]
 2780 110e 02E0     		b	.L123
 2781              	.L125:
1892:../FreeRTOS/Source/tasks.c **** 		}
1893:../FreeRTOS/Source/tasks.c **** 		else
1894:../FreeRTOS/Source/tasks.c **** 		{
1895:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2782              		.loc 1 1895 0
 2783 1110 4FF00103 		mov	r3, #1
 2784 1114 FB60     		str	r3, [r7, #12]
 2785              	.L123:
1896:../FreeRTOS/Source/tasks.c **** 		}
1897:../FreeRTOS/Source/tasks.c **** 	}
1898:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2786              		.loc 1 1898 0
 2787 1116 FFF7FEFF 		bl	vPortExitCritical
1899:../FreeRTOS/Source/tasks.c **** 
1900:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2788              		.loc 1 1900 0
 2789 111a FB68     		ldr	r3, [r7, #12]
1901:../FreeRTOS/Source/tasks.c **** }
 2790              		.loc 1 1901 0
 2791 111c 1846     		mov	r0, r3
 2792 111e 07F11007 		add	r7, r7, #16
 2793 1122 BD46     		mov	sp, r7
 2794 1124 80BD     		pop	{r7, pc}
 2795              		.cfi_endproc
 2796              	.LFE137:
 2798 1126 00BF     		.align	2
 2799              		.global	vTaskMissedYield
 2800              		.thumb
 2801              		.thumb_func
 2803              	vTaskMissedYield:
 2804              	.LFB138:
1902:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1903:../FreeRTOS/Source/tasks.c **** 
1904:../FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
1905:../FreeRTOS/Source/tasks.c **** {
 2805              		.loc 1 1905 0
 2806              		.cfi_startproc
 2807              		@ args = 0, pretend = 0, frame = 0
 2808              		@ frame_needed = 1, uses_anonymous_args = 0
 2809              		@ link register save eliminated.
 2810 1128 80B4     		push	{r7}
 2811              	.LCFI80:
 2812              		.cfi_def_cfa_offset 4
 2813              		.cfi_offset 7, -4
 2814 112a 00AF     		add	r7, sp, #0
 2815              	.LCFI81:
 2816              		.cfi_def_cfa_register 7
1906:../FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
 2817              		.loc 1 1906 0
 2818 112c 40F20003 		movw	r3, #:lower16:xMissedYield
 2819 1130 C0F20003 		movt	r3, #:upper16:xMissedYield
 2820 1134 4FF00102 		mov	r2, #1
 2821 1138 1A60     		str	r2, [r3, #0]
1907:../FreeRTOS/Source/tasks.c **** }
 2822              		.loc 1 1907 0
 2823 113a BD46     		mov	sp, r7
 2824 113c 80BC     		pop	{r7}
 2825 113e 7047     		bx	lr
 2826              		.cfi_endproc
 2827              	.LFE138:
 2829              		.align	2
 2830              		.thumb
 2831              		.thumb_func
 2833              	prvIdleTask:
 2834              	.LFB139:
1908:../FreeRTOS/Source/tasks.c **** 
1909:../FreeRTOS/Source/tasks.c **** /*
1910:../FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
1911:../FreeRTOS/Source/tasks.c ****  * The Idle task.
1912:../FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
1913:../FreeRTOS/Source/tasks.c ****  *
1914:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1915:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1916:../FreeRTOS/Source/tasks.c ****  *
1917:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
1918:../FreeRTOS/Source/tasks.c ****  *
1919:../FreeRTOS/Source/tasks.c ****  */
1920:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1921:../FreeRTOS/Source/tasks.c **** {
 2835              		.loc 1 1921 0
 2836              		.cfi_startproc
 2837              		@ args = 0, pretend = 0, frame = 8
 2838              		@ frame_needed = 1, uses_anonymous_args = 0
 2839 1140 80B5     		push	{r7, lr}
 2840              	.LCFI82:
 2841              		.cfi_def_cfa_offset 8
 2842              		.cfi_offset 14, -4
 2843              		.cfi_offset 7, -8
 2844 1142 82B0     		sub	sp, sp, #8
 2845              	.LCFI83:
 2846              		.cfi_def_cfa_offset 16
 2847 1144 00AF     		add	r7, sp, #0
 2848              	.LCFI84:
 2849              		.cfi_def_cfa_register 7
 2850 1146 7860     		str	r0, [r7, #4]
 2851 1148 00E0     		b	.L129
 2852              	.L130:
1922:../FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
1923:../FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
1924:../FreeRTOS/Source/tasks.c **** 
1925:../FreeRTOS/Source/tasks.c **** 	for( ;; )
1926:../FreeRTOS/Source/tasks.c **** 	{
1927:../FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
1928:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
1929:../FreeRTOS/Source/tasks.c **** 
1930:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1931:../FreeRTOS/Source/tasks.c **** 		{
1932:../FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1933:../FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
1934:../FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
1935:../FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
1936:../FreeRTOS/Source/tasks.c **** 			taskYIELD();
1937:../FreeRTOS/Source/tasks.c **** 		}
1938:../FreeRTOS/Source/tasks.c **** 		#endif
1939:../FreeRTOS/Source/tasks.c **** 
1940:../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1941:../FreeRTOS/Source/tasks.c **** 		{
1942:../FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
1943:../FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1944:../FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
1945:../FreeRTOS/Source/tasks.c **** 			timeslice.
1946:../FreeRTOS/Source/tasks.c **** 
1947:../FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
1948:../FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1949:../FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
1950:../FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
1951:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
1952:../FreeRTOS/Source/tasks.c **** 			{
1953:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
1954:../FreeRTOS/Source/tasks.c **** 			}
1955:../FreeRTOS/Source/tasks.c **** 		}
1956:../FreeRTOS/Source/tasks.c **** 		#endif
1957:../FreeRTOS/Source/tasks.c **** 
1958:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1959:../FreeRTOS/Source/tasks.c **** 		{
1960:../FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
1961:../FreeRTOS/Source/tasks.c **** 
1962:../FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1963:../FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
1964:../FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
1965:../FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1966:../FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1967:../FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
1968:../FreeRTOS/Source/tasks.c **** 		}
1969:../FreeRTOS/Source/tasks.c **** 		#endif
1970:../FreeRTOS/Source/tasks.c **** 	}
 2853              		.loc 1 1970 0
 2854 114a 00BF     		nop
 2855              	.L129:
1928:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 2856              		.loc 1 1928 0
 2857 114c 00F0A0F8 		bl	prvCheckTasksWaitingTermination
1951:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2858              		.loc 1 1951 0
 2859 1150 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2860 1154 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2861 1158 1B68     		ldr	r3, [r3, #0]
 2862 115a 012B     		cmp	r3, #1
 2863 115c F5D9     		bls	.L130
1953:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
 2864              		.loc 1 1953 0
 2865 115e FFF7FEFF 		bl	vPortYieldFromISR
 2866              		.loc 1 1970 0
 2867 1162 F2E7     		b	.L130
 2868              		.cfi_endproc
 2869              	.LFE139:
 2871              		.align	2
 2872              		.thumb
 2873              		.thumb_func
 2875              	prvInitialiseTCBVariables:
 2876              	.LFB140:
1971:../FreeRTOS/Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1972:../FreeRTOS/Source/tasks.c **** 
1973:../FreeRTOS/Source/tasks.c **** 
1974:../FreeRTOS/Source/tasks.c **** 
1975:../FreeRTOS/Source/tasks.c **** 
1976:../FreeRTOS/Source/tasks.c **** 
1977:../FreeRTOS/Source/tasks.c **** 
1978:../FreeRTOS/Source/tasks.c **** 
1979:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1980:../FreeRTOS/Source/tasks.c ****  * File private functions documented at the top of the file.
1981:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1982:../FreeRTOS/Source/tasks.c **** 
1983:../FreeRTOS/Source/tasks.c **** 
1984:../FreeRTOS/Source/tasks.c **** 
1985:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1986:../FreeRTOS/Source/tasks.c **** {
 2877              		.loc 1 1986 0
 2878              		.cfi_startproc
 2879              		@ args = 4, pretend = 0, frame = 16
 2880              		@ frame_needed = 1, uses_anonymous_args = 0
 2881 1164 80B5     		push	{r7, lr}
 2882              	.LCFI85:
 2883              		.cfi_def_cfa_offset 8
 2884              		.cfi_offset 14, -4
 2885              		.cfi_offset 7, -8
 2886 1166 84B0     		sub	sp, sp, #16
 2887              	.LCFI86:
 2888              		.cfi_def_cfa_offset 24
 2889 1168 00AF     		add	r7, sp, #0
 2890              	.LCFI87:
 2891              		.cfi_def_cfa_register 7
 2892 116a F860     		str	r0, [r7, #12]
 2893 116c B960     		str	r1, [r7, #8]
 2894 116e 7A60     		str	r2, [r7, #4]
 2895 1170 3B60     		str	r3, [r7, #0]
1987:../FreeRTOS/Source/tasks.c **** 	/* Store the function name in the TCB. */
1988:../FreeRTOS/Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1989:../FreeRTOS/Source/tasks.c **** 	{
1990:../FreeRTOS/Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1991:../FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 2896              		.loc 1 1991 0
 2897 1172 FB68     		ldr	r3, [r7, #12]
 2898 1174 03F13403 		add	r3, r3, #52
 2899 1178 1846     		mov	r0, r3
 2900 117a B968     		ldr	r1, [r7, #8]
 2901 117c 4FF01002 		mov	r2, #16
 2902 1180 FFF7FEFF 		bl	strncpy
1992:../FreeRTOS/Source/tasks.c **** 	}
1993:../FreeRTOS/Source/tasks.c **** 	#endif
1994:../FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 2903              		.loc 1 1994 0
 2904 1184 FB68     		ldr	r3, [r7, #12]
 2905 1186 4FF00002 		mov	r2, #0
 2906 118a 83F84320 		strb	r2, [r3, #67]
1995:../FreeRTOS/Source/tasks.c **** 
1996:../FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1997:../FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
1998:../FreeRTOS/Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 2907              		.loc 1 1998 0
 2908 118e 7B68     		ldr	r3, [r7, #4]
 2909 1190 042B     		cmp	r3, #4
 2910 1192 02D9     		bls	.L132
1999:../FreeRTOS/Source/tasks.c **** 	{
2000:../FreeRTOS/Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 2911              		.loc 1 2000 0
 2912 1194 4FF00403 		mov	r3, #4
 2913 1198 7B60     		str	r3, [r7, #4]
 2914              	.L132:
2001:../FreeRTOS/Source/tasks.c **** 	}
2002:../FreeRTOS/Source/tasks.c **** 
2003:../FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 2915              		.loc 1 2003 0
 2916 119a FB68     		ldr	r3, [r7, #12]
 2917 119c 7A68     		ldr	r2, [r7, #4]
 2918 119e DA62     		str	r2, [r3, #44]
2004:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2005:../FreeRTOS/Source/tasks.c **** 	{
2006:../FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 2919              		.loc 1 2006 0
 2920 11a0 FB68     		ldr	r3, [r7, #12]
 2921 11a2 7A68     		ldr	r2, [r7, #4]
 2922 11a4 5A64     		str	r2, [r3, #68]
2007:../FreeRTOS/Source/tasks.c **** 	}
2008:../FreeRTOS/Source/tasks.c **** 	#endif
2009:../FreeRTOS/Source/tasks.c **** 
2010:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 2923              		.loc 1 2010 0
 2924 11a6 FB68     		ldr	r3, [r7, #12]
 2925 11a8 03F10403 		add	r3, r3, #4
 2926 11ac 1846     		mov	r0, r3
 2927 11ae FFF7FEFF 		bl	vListInitialiseItem
2011:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 2928              		.loc 1 2011 0
 2929 11b2 FB68     		ldr	r3, [r7, #12]
 2930 11b4 03F11803 		add	r3, r3, #24
 2931 11b8 1846     		mov	r0, r3
 2932 11ba FFF7FEFF 		bl	vListInitialiseItem
2012:../FreeRTOS/Source/tasks.c **** 
2013:../FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2014:../FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2015:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 2933              		.loc 1 2015 0
 2934 11be FB68     		ldr	r3, [r7, #12]
 2935 11c0 FA68     		ldr	r2, [r7, #12]
 2936 11c2 1A61     		str	r2, [r3, #16]
2016:../FreeRTOS/Source/tasks.c **** 
2017:../FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2018:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 2937              		.loc 1 2018 0
 2938 11c4 7B68     		ldr	r3, [r7, #4]
 2939 11c6 C3F10502 		rsb	r2, r3, #5
 2940 11ca FB68     		ldr	r3, [r7, #12]
 2941 11cc 9A61     		str	r2, [r3, #24]
2019:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 2942              		.loc 1 2019 0
 2943 11ce FB68     		ldr	r3, [r7, #12]
 2944 11d0 FA68     		ldr	r2, [r7, #12]
 2945 11d2 5A62     		str	r2, [r3, #36]
2020:../FreeRTOS/Source/tasks.c **** 
2021:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2022:../FreeRTOS/Source/tasks.c **** 	{
2023:../FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2024:../FreeRTOS/Source/tasks.c **** 	}
2025:../FreeRTOS/Source/tasks.c **** 	#endif
2026:../FreeRTOS/Source/tasks.c **** 
2027:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2028:../FreeRTOS/Source/tasks.c **** 	{
2029:../FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
 2946              		.loc 1 2029 0
 2947 11d4 FB68     		ldr	r3, [r7, #12]
 2948 11d6 4FF00002 		mov	r2, #0
 2949 11da 9A64     		str	r2, [r3, #72]
2030:../FreeRTOS/Source/tasks.c **** 	}
2031:../FreeRTOS/Source/tasks.c **** 	#endif
2032:../FreeRTOS/Source/tasks.c **** 
2033:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2034:../FreeRTOS/Source/tasks.c **** 	{
2035:../FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
 2950              		.loc 1 2035 0
 2951 11dc FB68     		ldr	r3, [r7, #12]
 2952 11de 4FF00002 		mov	r2, #0
 2953 11e2 DA64     		str	r2, [r3, #76]
2036:../FreeRTOS/Source/tasks.c **** 	}
2037:../FreeRTOS/Source/tasks.c **** 	#endif
2038:../FreeRTOS/Source/tasks.c **** 
2039:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2040:../FreeRTOS/Source/tasks.c **** 	{
2041:../FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2042:../FreeRTOS/Source/tasks.c **** 	}
2043:../FreeRTOS/Source/tasks.c **** 	#else
2044:../FreeRTOS/Source/tasks.c **** 	{
2045:../FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2046:../FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2047:../FreeRTOS/Source/tasks.c **** 	}
2048:../FreeRTOS/Source/tasks.c **** 	#endif
2049:../FreeRTOS/Source/tasks.c **** }
 2954              		.loc 1 2049 0
 2955 11e4 07F11007 		add	r7, r7, #16
 2956 11e8 BD46     		mov	sp, r7
 2957 11ea 80BD     		pop	{r7, pc}
 2958              		.cfi_endproc
 2959              	.LFE140:
 2961              		.align	2
 2962              		.thumb
 2963              		.thumb_func
 2965              	prvInitialiseTaskLists:
 2966              	.LFB141:
2050:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2051:../FreeRTOS/Source/tasks.c **** 
2052:../FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2053:../FreeRTOS/Source/tasks.c **** 
2054:../FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2055:../FreeRTOS/Source/tasks.c **** 	{
2056:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2057:../FreeRTOS/Source/tasks.c **** 	
2058:../FreeRTOS/Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2059:../FreeRTOS/Source/tasks.c **** 		{
2060:../FreeRTOS/Source/tasks.c **** 			xTaskToModify = NULL;
2061:../FreeRTOS/Source/tasks.c **** 		}
2062:../FreeRTOS/Source/tasks.c **** 
2063:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2064:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2065:../FreeRTOS/Source/tasks.c **** 
2066:../FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2067:../FreeRTOS/Source/tasks.c **** 	}
2068:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
2069:../FreeRTOS/Source/tasks.c **** #endif
2070:../FreeRTOS/Source/tasks.c **** 
2071:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2072:../FreeRTOS/Source/tasks.c **** {
 2967              		.loc 1 2072 0
 2968              		.cfi_startproc
 2969              		@ args = 0, pretend = 0, frame = 8
 2970              		@ frame_needed = 1, uses_anonymous_args = 0
 2971 11ec 80B5     		push	{r7, lr}
 2972              	.LCFI88:
 2973              		.cfi_def_cfa_offset 8
 2974              		.cfi_offset 14, -4
 2975              		.cfi_offset 7, -8
 2976 11ee 82B0     		sub	sp, sp, #8
 2977              	.LCFI89:
 2978              		.cfi_def_cfa_offset 16
 2979 11f0 00AF     		add	r7, sp, #0
 2980              	.LCFI90:
 2981              		.cfi_def_cfa_register 7
2073:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2074:../FreeRTOS/Source/tasks.c **** 
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 2982              		.loc 1 2075 0
 2983 11f2 4FF00003 		mov	r3, #0
 2984 11f6 7B60     		str	r3, [r7, #4]
 2985 11f8 13E0     		b	.L134
 2986              	.L135:
2076:../FreeRTOS/Source/tasks.c **** 	{
2077:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 2987              		.loc 1 2077 0 discriminator 2
 2988 11fa 7A68     		ldr	r2, [r7, #4]
 2989 11fc 1346     		mov	r3, r2
 2990 11fe 4FEA8303 		lsl	r3, r3, #2
 2991 1202 9B18     		adds	r3, r3, r2
 2992 1204 4FEA8303 		lsl	r3, r3, #2
 2993 1208 1A46     		mov	r2, r3
 2994 120a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2995 120e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2996 1212 D318     		adds	r3, r2, r3
 2997 1214 1846     		mov	r0, r3
 2998 1216 FFF7FEFF 		bl	vListInitialise
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 2999              		.loc 1 2075 0 discriminator 2
 3000 121a 7B68     		ldr	r3, [r7, #4]
 3001 121c 03F10103 		add	r3, r3, #1
 3002 1220 7B60     		str	r3, [r7, #4]
 3003              	.L134:
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3004              		.loc 1 2075 0 is_stmt 0 discriminator 1
 3005 1222 7B68     		ldr	r3, [r7, #4]
 3006 1224 042B     		cmp	r3, #4
 3007 1226 E8D9     		bls	.L135
2078:../FreeRTOS/Source/tasks.c **** 	}
2079:../FreeRTOS/Source/tasks.c **** 
2080:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 3008              		.loc 1 2080 0 is_stmt 1
 3009 1228 40F20000 		movw	r0, #:lower16:xDelayedTaskList1
 3010 122c C0F20000 		movt	r0, #:upper16:xDelayedTaskList1
 3011 1230 FFF7FEFF 		bl	vListInitialise
2081:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 3012              		.loc 1 2081 0
 3013 1234 40F20000 		movw	r0, #:lower16:xDelayedTaskList2
 3014 1238 C0F20000 		movt	r0, #:upper16:xDelayedTaskList2
 3015 123c FFF7FEFF 		bl	vListInitialise
2082:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 3016              		.loc 1 2082 0
 3017 1240 40F20000 		movw	r0, #:lower16:xPendingReadyList
 3018 1244 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 3019 1248 FFF7FEFF 		bl	vListInitialise
2083:../FreeRTOS/Source/tasks.c **** 
2084:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2085:../FreeRTOS/Source/tasks.c **** 	{
2086:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 3020              		.loc 1 2086 0
 3021 124c 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 3022 1250 C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 3023 1254 FFF7FEFF 		bl	vListInitialise
2087:../FreeRTOS/Source/tasks.c **** 	}
2088:../FreeRTOS/Source/tasks.c **** 	#endif
2089:../FreeRTOS/Source/tasks.c **** 
2090:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2091:../FreeRTOS/Source/tasks.c **** 	{
2092:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 3024              		.loc 1 2092 0
 3025 1258 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 3026 125c C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 3027 1260 FFF7FEFF 		bl	vListInitialise
2093:../FreeRTOS/Source/tasks.c **** 	}
2094:../FreeRTOS/Source/tasks.c **** 	#endif
2095:../FreeRTOS/Source/tasks.c **** 
2096:../FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2097:../FreeRTOS/Source/tasks.c **** 	using list2. */
2098:../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3028              		.loc 1 2098 0
 3029 1264 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3030 1268 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3031 126c 40F20002 		movw	r2, #:lower16:xDelayedTaskList1
 3032 1270 C0F20002 		movt	r2, #:upper16:xDelayedTaskList1
 3033 1274 1A60     		str	r2, [r3, #0]
2099:../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3034              		.loc 1 2099 0
 3035 1276 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3036 127a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3037 127e 40F20002 		movw	r2, #:lower16:xDelayedTaskList2
 3038 1282 C0F20002 		movt	r2, #:upper16:xDelayedTaskList2
 3039 1286 1A60     		str	r2, [r3, #0]
2100:../FreeRTOS/Source/tasks.c **** }
 3040              		.loc 1 2100 0
 3041 1288 07F10807 		add	r7, r7, #8
 3042 128c BD46     		mov	sp, r7
 3043 128e 80BD     		pop	{r7, pc}
 3044              		.cfi_endproc
 3045              	.LFE141:
 3047              		.align	2
 3048              		.thumb
 3049              		.thumb_func
 3051              	prvCheckTasksWaitingTermination:
 3052              	.LFB142:
2101:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2102:../FreeRTOS/Source/tasks.c **** 
2103:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2104:../FreeRTOS/Source/tasks.c **** {
 3053              		.loc 1 2104 0
 3054              		.cfi_startproc
 3055              		@ args = 0, pretend = 0, frame = 8
 3056              		@ frame_needed = 1, uses_anonymous_args = 0
 3057 1290 80B5     		push	{r7, lr}
 3058              	.LCFI91:
 3059              		.cfi_def_cfa_offset 8
 3060              		.cfi_offset 14, -4
 3061              		.cfi_offset 7, -8
 3062 1292 82B0     		sub	sp, sp, #8
 3063              	.LCFI92:
 3064              		.cfi_def_cfa_offset 16
 3065 1294 00AF     		add	r7, sp, #0
 3066              	.LCFI93:
 3067              		.cfi_def_cfa_register 7
 3068              	.LBB8:
2105:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2106:../FreeRTOS/Source/tasks.c **** 	{
2107:../FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2108:../FreeRTOS/Source/tasks.c **** 
2109:../FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2110:../FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2111:../FreeRTOS/Source/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 3069              		.loc 1 2111 0
 3070 1296 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3071 129a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3072 129e 1B68     		ldr	r3, [r3, #0]
 3073 12a0 002B     		cmp	r3, #0
 3074 12a2 3CD0     		beq	.L136
2112:../FreeRTOS/Source/tasks.c **** 		{
2113:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3075              		.loc 1 2113 0
 3076 12a4 FFF7FEFF 		bl	vTaskSuspendAll
2114:../FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3077              		.loc 1 2114 0
 3078 12a8 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3079 12ac C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3080 12b0 1B68     		ldr	r3, [r3, #0]
 3081 12b2 002B     		cmp	r3, #0
 3082 12b4 14BF     		ite	ne
 3083 12b6 0023     		movne	r3, #0
 3084 12b8 0123     		moveq	r3, #1
 3085 12ba 7B60     		str	r3, [r7, #4]
2115:../FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
 3086              		.loc 1 2115 0
 3087 12bc FFF7FEFF 		bl	xTaskResumeAll
2116:../FreeRTOS/Source/tasks.c **** 
2117:../FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3088              		.loc 1 2117 0
 3089 12c0 7B68     		ldr	r3, [r7, #4]
 3090 12c2 002B     		cmp	r3, #0
 3091 12c4 2BD1     		bne	.L136
 3092              	.LBB9:
2118:../FreeRTOS/Source/tasks.c **** 			{
2119:../FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2120:../FreeRTOS/Source/tasks.c **** 
2121:../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 3093              		.loc 1 2121 0
 3094 12c6 FFF7FEFF 		bl	vPortEnterCritical
2122:../FreeRTOS/Source/tasks.c **** 				{
2123:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 3095              		.loc 1 2123 0
 3096 12ca 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3097 12ce C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3098 12d2 DB68     		ldr	r3, [r3, #12]
 3099 12d4 DB68     		ldr	r3, [r3, #12]
 3100 12d6 3B60     		str	r3, [r7, #0]
2124:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 3101              		.loc 1 2124 0
 3102 12d8 3B68     		ldr	r3, [r7, #0]
 3103 12da 03F10403 		add	r3, r3, #4
 3104 12de 1846     		mov	r0, r3
 3105 12e0 FFF7FEFF 		bl	vListRemove
2125:../FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3106              		.loc 1 2125 0
 3107 12e4 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3108 12e8 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3109 12ec 1B68     		ldr	r3, [r3, #0]
 3110 12ee 03F1FF32 		add	r2, r3, #-1
 3111 12f2 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3112 12f6 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3113 12fa 1A60     		str	r2, [r3, #0]
2126:../FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 3114              		.loc 1 2126 0
 3115 12fc 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3116 1300 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3117 1304 1B68     		ldr	r3, [r3, #0]
 3118 1306 03F1FF32 		add	r2, r3, #-1
 3119 130a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3120 130e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3121 1312 1A60     		str	r2, [r3, #0]
2127:../FreeRTOS/Source/tasks.c **** 				}
2128:../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 3122              		.loc 1 2128 0
 3123 1314 FFF7FEFF 		bl	vPortExitCritical
2129:../FreeRTOS/Source/tasks.c **** 
2130:../FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 3124              		.loc 1 2130 0
 3125 1318 3868     		ldr	r0, [r7, #0]
 3126 131a 00F07DF9 		bl	prvDeleteTCB
 3127              	.L136:
 3128              	.LBE9:
 3129              	.LBE8:
2131:../FreeRTOS/Source/tasks.c **** 			}
2132:../FreeRTOS/Source/tasks.c **** 		}
2133:../FreeRTOS/Source/tasks.c **** 	}
2134:../FreeRTOS/Source/tasks.c **** 	#endif
2135:../FreeRTOS/Source/tasks.c **** }
 3130              		.loc 1 2135 0
 3131 131e 07F10807 		add	r7, r7, #8
 3132 1322 BD46     		mov	sp, r7
 3133 1324 80BD     		pop	{r7, pc}
 3134              		.cfi_endproc
 3135              	.LFE142:
 3137 1326 00BF     		.align	2
 3138              		.thumb
 3139              		.thumb_func
 3141              	prvAddCurrentTaskToDelayedList:
 3142              	.LFB143:
2136:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2137:../FreeRTOS/Source/tasks.c **** 
2138:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2139:../FreeRTOS/Source/tasks.c **** {
 3143              		.loc 1 2139 0
 3144              		.cfi_startproc
 3145              		@ args = 0, pretend = 0, frame = 8
 3146              		@ frame_needed = 1, uses_anonymous_args = 0
 3147 1328 80B5     		push	{r7, lr}
 3148              	.LCFI94:
 3149              		.cfi_def_cfa_offset 8
 3150              		.cfi_offset 14, -4
 3151              		.cfi_offset 7, -8
 3152 132a 82B0     		sub	sp, sp, #8
 3153              	.LCFI95:
 3154              		.cfi_def_cfa_offset 16
 3155 132c 00AF     		add	r7, sp, #0
 3156              	.LCFI96:
 3157              		.cfi_def_cfa_register 7
 3158 132e 7860     		str	r0, [r7, #4]
2140:../FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2141:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3159              		.loc 1 2141 0
 3160 1330 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3161 1334 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3162 1338 1B68     		ldr	r3, [r3, #0]
 3163 133a 7A68     		ldr	r2, [r7, #4]
 3164 133c 5A60     		str	r2, [r3, #4]
2142:../FreeRTOS/Source/tasks.c **** 
2143:../FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 3165              		.loc 1 2143 0
 3166 133e 40F20003 		movw	r3, #:lower16:xTickCount
 3167 1342 C0F20003 		movt	r3, #:upper16:xTickCount
 3168 1346 1B68     		ldr	r3, [r3, #0]
 3169 1348 7A68     		ldr	r2, [r7, #4]
 3170 134a 9A42     		cmp	r2, r3
 3171 134c 10D2     		bcs	.L139
2144:../FreeRTOS/Source/tasks.c **** 	{
2145:../FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2146:../FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
 3172              		.loc 1 2146 0
 3173 134e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3174 1352 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3175 1356 1A68     		ldr	r2, [r3, #0]
 3176 1358 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3177 135c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3178 1360 1B68     		ldr	r3, [r3, #0]
 3179 1362 03F10403 		add	r3, r3, #4
 3180 1366 1046     		mov	r0, r2
 3181 1368 1946     		mov	r1, r3
 3182 136a FFF7FEFF 		bl	vListInsert
 3183 136e 1DE0     		b	.L138
 3184              	.L139:
2147:../FreeRTOS/Source/tasks.c **** 	}
2148:../FreeRTOS/Source/tasks.c **** 	else
2149:../FreeRTOS/Source/tasks.c **** 	{
2150:../FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2151:../FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
 3185              		.loc 1 2151 0
 3186 1370 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3187 1374 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3188 1378 1A68     		ldr	r2, [r3, #0]
 3189 137a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3190 137e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3191 1382 1B68     		ldr	r3, [r3, #0]
 3192 1384 03F10403 		add	r3, r3, #4
 3193 1388 1046     		mov	r0, r2
 3194 138a 1946     		mov	r1, r3
 3195 138c FFF7FEFF 		bl	vListInsert
2152:../FreeRTOS/Source/tasks.c **** 
2153:../FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2154:../FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2155:../FreeRTOS/Source/tasks.c **** 		too. */
2156:../FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3196              		.loc 1 2156 0
 3197 1390 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3198 1394 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3199 1398 1B68     		ldr	r3, [r3, #0]
 3200 139a 7A68     		ldr	r2, [r7, #4]
 3201 139c 9A42     		cmp	r2, r3
 3202 139e 05D2     		bcs	.L138
2157:../FreeRTOS/Source/tasks.c **** 		{
2158:../FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3203              		.loc 1 2158 0
 3204 13a0 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3205 13a4 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3206 13a8 7A68     		ldr	r2, [r7, #4]
 3207 13aa 1A60     		str	r2, [r3, #0]
 3208              	.L138:
2159:../FreeRTOS/Source/tasks.c **** 		}
2160:../FreeRTOS/Source/tasks.c **** 	}
2161:../FreeRTOS/Source/tasks.c **** }
 3209              		.loc 1 2161 0
 3210 13ac 07F10807 		add	r7, r7, #8
 3211 13b0 BD46     		mov	sp, r7
 3212 13b2 80BD     		pop	{r7, pc}
 3213              		.cfi_endproc
 3214              	.LFE143:
 3216              		.align	2
 3217              		.thumb
 3218              		.thumb_func
 3220              	prvAllocateTCBAndStack:
 3221              	.LFB144:
2162:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2163:../FreeRTOS/Source/tasks.c **** 
2164:../FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2165:../FreeRTOS/Source/tasks.c **** {
 3222              		.loc 1 2165 0
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 16
 3225              		@ frame_needed = 1, uses_anonymous_args = 0
 3226 13b4 80B5     		push	{r7, lr}
 3227              	.LCFI97:
 3228              		.cfi_def_cfa_offset 8
 3229              		.cfi_offset 14, -4
 3230              		.cfi_offset 7, -8
 3231 13b6 84B0     		sub	sp, sp, #16
 3232              	.LCFI98:
 3233              		.cfi_def_cfa_offset 24
 3234 13b8 00AF     		add	r7, sp, #0
 3235              	.LCFI99:
 3236              		.cfi_def_cfa_register 7
 3237 13ba 0346     		mov	r3, r0
 3238 13bc 3960     		str	r1, [r7, #0]
 3239 13be FB80     		strh	r3, [r7, #6]	@ movhi
2166:../FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2167:../FreeRTOS/Source/tasks.c **** 
2168:../FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2169:../FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2170:../FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 3240              		.loc 1 2170 0
 3241 13c0 4FF05000 		mov	r0, #80
 3242 13c4 FFF7FEFF 		bl	malloc
 3243 13c8 0346     		mov	r3, r0
 3244 13ca FB60     		str	r3, [r7, #12]
2171:../FreeRTOS/Source/tasks.c **** 
2172:../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 3245              		.loc 1 2172 0
 3246 13cc FB68     		ldr	r3, [r7, #12]
 3247 13ce 002B     		cmp	r3, #0
 3248 13d0 23D0     		beq	.L142
2173:../FreeRTOS/Source/tasks.c **** 	{
2174:../FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2175:../FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2176:../FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2177:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 3249              		.loc 1 2177 0
 3250 13d2 3B68     		ldr	r3, [r7, #0]
 3251 13d4 002B     		cmp	r3, #0
 3252 13d6 07D1     		bne	.L143
 3253              		.loc 1 2177 0 is_stmt 0 discriminator 1
 3254 13d8 FB88     		ldrh	r3, [r7, #6]
 3255 13da 4FEA8303 		lsl	r3, r3, #2
 3256 13de 1846     		mov	r0, r3
 3257 13e0 FFF7FEFF 		bl	malloc
 3258 13e4 0346     		mov	r3, r0
 3259 13e6 00E0     		b	.L144
 3260              	.L143:
 3261              		.loc 1 2177 0 discriminator 2
 3262 13e8 3B68     		ldr	r3, [r7, #0]
 3263              	.L144:
 3264              		.loc 1 2177 0 discriminator 3
 3265 13ea FA68     		ldr	r2, [r7, #12]
 3266 13ec 1363     		str	r3, [r2, #48]
2178:../FreeRTOS/Source/tasks.c **** 
2179:../FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3267              		.loc 1 2179 0 is_stmt 1 discriminator 3
 3268 13ee FB68     		ldr	r3, [r7, #12]
 3269 13f0 1B6B     		ldr	r3, [r3, #48]
 3270 13f2 002B     		cmp	r3, #0
 3271 13f4 06D1     		bne	.L145
2180:../FreeRTOS/Source/tasks.c **** 		{
2181:../FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2182:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 3272              		.loc 1 2182 0
 3273 13f6 F868     		ldr	r0, [r7, #12]
 3274 13f8 FFF7FEFF 		bl	free
2183:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
 3275              		.loc 1 2183 0
 3276 13fc 4FF00003 		mov	r3, #0
 3277 1400 FB60     		str	r3, [r7, #12]
 3278 1402 0AE0     		b	.L142
 3279              	.L145:
2184:../FreeRTOS/Source/tasks.c **** 		}
2185:../FreeRTOS/Source/tasks.c **** 		else
2186:../FreeRTOS/Source/tasks.c **** 		{
2187:../FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2188:../FreeRTOS/Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 3280              		.loc 1 2188 0
 3281 1404 FB68     		ldr	r3, [r7, #12]
 3282 1406 1A6B     		ldr	r2, [r3, #48]
 3283 1408 FB88     		ldrh	r3, [r7, #6]
 3284 140a 4FEA8303 		lsl	r3, r3, #2
 3285 140e 1046     		mov	r0, r2
 3286 1410 4FF0A501 		mov	r1, #165
 3287 1414 1A46     		mov	r2, r3
 3288 1416 FFF7FEFF 		bl	memset
 3289              	.L142:
2189:../FreeRTOS/Source/tasks.c **** 		}
2190:../FreeRTOS/Source/tasks.c **** 	}
2191:../FreeRTOS/Source/tasks.c **** 
2192:../FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
 3290              		.loc 1 2192 0
 3291 141a FB68     		ldr	r3, [r7, #12]
2193:../FreeRTOS/Source/tasks.c **** }
 3292              		.loc 1 2193 0
 3293 141c 1846     		mov	r0, r3
 3294 141e 07F11007 		add	r7, r7, #16
 3295 1422 BD46     		mov	sp, r7
 3296 1424 80BD     		pop	{r7, pc}
 3297              		.cfi_endproc
 3298              	.LFE144:
 3300              		.section	.rodata
 3301 000b 00       		.align	2
 3302              	.LC2:
 3303 000c 25752020 		.ascii	"%u  %c  %-16s          0   0%%  %5u\015\012\000"
 3303      25632020 
 3303      252D3136 
 3303      73202020 
 3303      20202020 
 3304 0032 0000     		.align	2
 3305              	.LC3:
 3306 0034 25752020 		.ascii	"%u  %c  %-16s %10u %3u%%  %5u\015\012\000"
 3306      25632020 
 3306      252D3136 
 3306      73202531 
 3306      30752025 
 3307              		.align	2
 3308              	.LC4:
 3309 0054 25752020 		.ascii	"%u  %c  %-16s %10u  <1%%  %5u\015\012\000"
 3309      25632020 
 3309      252D3136 
 3309      73202531 
 3309      30752020 
 3310              		.text
 3311 1426 00BF     		.align	2
 3312              		.thumb
 3313              		.thumb_func
 3315              	prvGenerateRunTimeStatsForTasksInList:
 3316              	.LFB145:
2194:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2195:../FreeRTOS/Source/tasks.c **** 
2196:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2197:../FreeRTOS/Source/tasks.c **** 
2198:../FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2199:../FreeRTOS/Source/tasks.c **** 	{
2200:../FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2201:../FreeRTOS/Source/tasks.c **** 	unsigned short usStackRemaining;
2202:../FreeRTOS/Source/tasks.c **** 
2203:../FreeRTOS/Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2204:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2205:../FreeRTOS/Source/tasks.c **** 		do
2206:../FreeRTOS/Source/tasks.c **** 		{
2207:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2208:../FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2209:../FreeRTOS/Source/tasks.c **** 			{
2210:../FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2211:../FreeRTOS/Source/tasks.c **** 			}
2212:../FreeRTOS/Source/tasks.c **** 			#else
2213:../FreeRTOS/Source/tasks.c **** 			{
2214:../FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2215:../FreeRTOS/Source/tasks.c **** 			}
2216:../FreeRTOS/Source/tasks.c **** 			#endif			
2217:../FreeRTOS/Source/tasks.c **** 			
2218:../FreeRTOS/Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2219:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2220:../FreeRTOS/Source/tasks.c **** 
2221:../FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2222:../FreeRTOS/Source/tasks.c **** 	}
2223:../FreeRTOS/Source/tasks.c **** 
2224:../FreeRTOS/Source/tasks.c **** #endif
2225:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2226:../FreeRTOS/Source/tasks.c **** 
2227:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2228:../FreeRTOS/Source/tasks.c **** 
2229:../FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2230:../FreeRTOS/Source/tasks.c **** 	{
 3317              		.loc 1 2230 0
 3318              		.cfi_startproc
 3319              		@ args = 0, pretend = 0, frame = 40
 3320              		@ frame_needed = 1, uses_anonymous_args = 0
 3321 1428 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3322              	.LCFI100:
 3323              		.cfi_def_cfa_offset 24
 3324              		.cfi_offset 14, -4
 3325              		.cfi_offset 8, -8
 3326              		.cfi_offset 7, -12
 3327              		.cfi_offset 6, -16
 3328              		.cfi_offset 5, -20
 3329              		.cfi_offset 4, -24
 3330 142c 8EB0     		sub	sp, sp, #56
 3331              	.LCFI101:
 3332              		.cfi_def_cfa_offset 80
 3333 142e 04AF     		add	r7, sp, #16
 3334              	.LCFI102:
 3335              		.cfi_def_cfa 7, 64
 3336 1430 F860     		str	r0, [r7, #12]
 3337 1432 B960     		str	r1, [r7, #8]
 3338 1434 7A60     		str	r2, [r7, #4]
 3339 1436 FB70     		strb	r3, [r7, #3]
 3340              	.LBB10:
2231:../FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2232:../FreeRTOS/Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2233:../FreeRTOS/Source/tasks.c **** 
2234:../FreeRTOS/Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2235:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3341              		.loc 1 2235 0
 3342 1438 BB68     		ldr	r3, [r7, #8]
 3343 143a 7B62     		str	r3, [r7, #36]
 3344 143c 7B6A     		ldr	r3, [r7, #36]
 3345 143e 5B68     		ldr	r3, [r3, #4]
 3346 1440 5B68     		ldr	r3, [r3, #4]
 3347 1442 1A46     		mov	r2, r3
 3348 1444 7B6A     		ldr	r3, [r7, #36]
 3349 1446 5A60     		str	r2, [r3, #4]
 3350 1448 7B6A     		ldr	r3, [r7, #36]
 3351 144a 5A68     		ldr	r2, [r3, #4]
 3352 144c 7B6A     		ldr	r3, [r7, #36]
 3353 144e 03F10803 		add	r3, r3, #8
 3354 1452 9A42     		cmp	r2, r3
 3355 1454 05D1     		bne	.L147
 3356              		.loc 1 2235 0 is_stmt 0 discriminator 1
 3357 1456 7B6A     		ldr	r3, [r7, #36]
 3358 1458 5B68     		ldr	r3, [r3, #4]
 3359 145a 5B68     		ldr	r3, [r3, #4]
 3360 145c 1A46     		mov	r2, r3
 3361 145e 7B6A     		ldr	r3, [r7, #36]
 3362 1460 5A60     		str	r2, [r3, #4]
 3363              	.L147:
 3364              		.loc 1 2235 0 discriminator 2
 3365 1462 7B6A     		ldr	r3, [r7, #36]
 3366 1464 5B68     		ldr	r3, [r3, #4]
 3367 1466 DB68     		ldr	r3, [r3, #12]
 3368 1468 3B62     		str	r3, [r7, #32]
 3369              	.L153:
 3370              	.LBE10:
 3371              	.LBB11:
2236:../FreeRTOS/Source/tasks.c **** 		do
2237:../FreeRTOS/Source/tasks.c **** 		{
2238:../FreeRTOS/Source/tasks.c **** 			/* Get next TCB in from the list. */
2239:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3372              		.loc 1 2239 0 is_stmt 1
 3373 146a BB68     		ldr	r3, [r7, #8]
 3374 146c FB61     		str	r3, [r7, #28]
 3375 146e FB69     		ldr	r3, [r7, #28]
 3376 1470 5B68     		ldr	r3, [r3, #4]
 3377 1472 5B68     		ldr	r3, [r3, #4]
 3378 1474 1A46     		mov	r2, r3
 3379 1476 FB69     		ldr	r3, [r7, #28]
 3380 1478 5A60     		str	r2, [r3, #4]
 3381 147a FB69     		ldr	r3, [r7, #28]
 3382 147c 5A68     		ldr	r2, [r3, #4]
 3383 147e FB69     		ldr	r3, [r7, #28]
 3384 1480 03F10803 		add	r3, r3, #8
 3385 1484 9A42     		cmp	r2, r3
 3386 1486 05D1     		bne	.L148
 3387              		.loc 1 2239 0 is_stmt 0 discriminator 1
 3388 1488 FB69     		ldr	r3, [r7, #28]
 3389 148a 5B68     		ldr	r3, [r3, #4]
 3390 148c 5B68     		ldr	r3, [r3, #4]
 3391 148e 1A46     		mov	r2, r3
 3392 1490 FB69     		ldr	r3, [r7, #28]
 3393 1492 5A60     		str	r2, [r3, #4]
 3394              	.L148:
 3395              		.loc 1 2239 0 discriminator 2
 3396 1494 FB69     		ldr	r3, [r7, #28]
 3397 1496 5B68     		ldr	r3, [r3, #4]
 3398 1498 DB68     		ldr	r3, [r3, #12]
 3399 149a BB61     		str	r3, [r7, #24]
 3400              	.LBE11:
2240:../FreeRTOS/Source/tasks.c **** 
2241:../FreeRTOS/Source/tasks.c **** 			/* Divide by zero check. */
2242:../FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > 0UL )
 3401              		.loc 1 2242 0 is_stmt 1 discriminator 2
 3402 149c 7B68     		ldr	r3, [r7, #4]
 3403 149e 002B     		cmp	r3, #0
 3404 14a0 76D0     		beq	.L149
2243:../FreeRTOS/Source/tasks.c **** 			{
2244:../FreeRTOS/Source/tasks.c **** 				/* Has the task run at all? */
2245:../FreeRTOS/Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
 3405              		.loc 1 2245 0
 3406 14a2 BB69     		ldr	r3, [r7, #24]
 3407 14a4 DB6C     		ldr	r3, [r3, #76]
 3408 14a6 002B     		cmp	r3, #0
 3409 14a8 1CD1     		bne	.L150
2246:../FreeRTOS/Source/tasks.c **** 				{
2247:../FreeRTOS/Source/tasks.c **** 					/* The task has used no CPU time at all. */
2248:../FreeRTOS/Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) p
 3410              		.loc 1 2248 0
 3411 14aa BB69     		ldr	r3, [r7, #24]
 3412 14ac DB6A     		ldr	r3, [r3, #44]
 3413 14ae 1D46     		mov	r5, r3
 3414 14b0 97F90340 		ldrsb	r4, [r7, #3]
 3415 14b4 BB69     		ldr	r3, [r7, #24]
 3416 14b6 03F13406 		add	r6, r3, #52
 3417 14ba BB69     		ldr	r3, [r7, #24]
 3418 14bc 1B6B     		ldr	r3, [r3, #48]
 3419 14be 1846     		mov	r0, r3
 3420 14c0 00F070F8 		bl	usTaskCheckFreeStackSpace
 3421 14c4 0346     		mov	r3, r0
 3422 14c6 0096     		str	r6, [sp, #0]
 3423 14c8 0193     		str	r3, [sp, #4]
 3424 14ca 40F20000 		movw	r0, #:lower16:pcStatsString
 3425 14ce C0F20000 		movt	r0, #:upper16:pcStatsString
 3426 14d2 40F20001 		movw	r1, #:lower16:.LC2
 3427 14d6 C0F20001 		movt	r1, #:upper16:.LC2
 3428 14da 2A46     		mov	r2, r5
 3429 14dc 2346     		mov	r3, r4
 3430 14de FFF7FEFF 		bl	sprintf
 3431 14e2 4EE0     		b	.L151
 3432              	.L150:
2249:../FreeRTOS/Source/tasks.c **** 				}
2250:../FreeRTOS/Source/tasks.c **** 				else
2251:../FreeRTOS/Source/tasks.c **** 				{
2252:../FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2253:../FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2254:../FreeRTOS/Source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2255:../FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 3433              		.loc 1 2255 0
 3434 14e4 BB69     		ldr	r3, [r7, #24]
 3435 14e6 DB6C     		ldr	r3, [r3, #76]
 3436 14e8 1A46     		mov	r2, r3
 3437 14ea 7B68     		ldr	r3, [r7, #4]
 3438 14ec B2FBF3F3 		udiv	r3, r2, r3
 3439 14f0 7B61     		str	r3, [r7, #20]
2256:../FreeRTOS/Source/tasks.c **** 
2257:../FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
 3440              		.loc 1 2257 0
 3441 14f2 7B69     		ldr	r3, [r7, #20]
 3442 14f4 002B     		cmp	r3, #0
 3443 14f6 23D0     		beq	.L152
2258:../FreeRTOS/Source/tasks.c **** 					{
2259:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2260:../FreeRTOS/Source/tasks.c **** 						{
2261:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2262:../FreeRTOS/Source/tasks.c **** 						}
2263:../FreeRTOS/Source/tasks.c **** 						#else
2264:../FreeRTOS/Source/tasks.c **** 						{
2265:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2266:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2267:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNex
 3444              		.loc 1 2267 0
 3445 14f8 BB69     		ldr	r3, [r7, #24]
 3446 14fa DB6A     		ldr	r3, [r3, #44]
 3447 14fc 1D46     		mov	r5, r3
 3448 14fe 97F90340 		ldrsb	r4, [r7, #3]
 3449 1502 BB69     		ldr	r3, [r7, #24]
 3450 1504 03F13408 		add	r8, r3, #52
 3451 1508 BB69     		ldr	r3, [r7, #24]
 3452 150a DB6C     		ldr	r3, [r3, #76]
 3453 150c 1E46     		mov	r6, r3
 3454 150e BB69     		ldr	r3, [r7, #24]
 3455 1510 1B6B     		ldr	r3, [r3, #48]
 3456 1512 1846     		mov	r0, r3
 3457 1514 00F046F8 		bl	usTaskCheckFreeStackSpace
 3458 1518 0346     		mov	r3, r0
 3459 151a CDF80080 		str	r8, [sp, #0]
 3460 151e 0196     		str	r6, [sp, #4]
 3461 1520 7A69     		ldr	r2, [r7, #20]
 3462 1522 0292     		str	r2, [sp, #8]
 3463 1524 0393     		str	r3, [sp, #12]
 3464 1526 40F20000 		movw	r0, #:lower16:pcStatsString
 3465 152a C0F20000 		movt	r0, #:upper16:pcStatsString
 3466 152e 40F20001 		movw	r1, #:lower16:.LC3
 3467 1532 C0F20001 		movt	r1, #:upper16:.LC3
 3468 1536 2A46     		mov	r2, r5
 3469 1538 2346     		mov	r3, r4
 3470 153a FFF7FEFF 		bl	sprintf
 3471 153e 20E0     		b	.L151
 3472              	.L152:
2268:../FreeRTOS/Source/tasks.c **** 						}
2269:../FreeRTOS/Source/tasks.c **** 						#endif
2270:../FreeRTOS/Source/tasks.c **** 					}
2271:../FreeRTOS/Source/tasks.c **** 					else
2272:../FreeRTOS/Source/tasks.c **** 					{
2273:../FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
2274:../FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
2275:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2276:../FreeRTOS/Source/tasks.c **** 						{
2277:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2278:../FreeRTOS/Source/tasks.c **** 						}
2279:../FreeRTOS/Source/tasks.c **** 						#else
2280:../FreeRTOS/Source/tasks.c **** 						{
2281:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2282:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2283:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNe
 3473              		.loc 1 2283 0
 3474 1540 BB69     		ldr	r3, [r7, #24]
 3475 1542 DB6A     		ldr	r3, [r3, #44]
 3476 1544 1D46     		mov	r5, r3
 3477 1546 97F90340 		ldrsb	r4, [r7, #3]
 3478 154a BB69     		ldr	r3, [r7, #24]
 3479 154c 03F13408 		add	r8, r3, #52
 3480 1550 BB69     		ldr	r3, [r7, #24]
 3481 1552 DB6C     		ldr	r3, [r3, #76]
 3482 1554 1E46     		mov	r6, r3
 3483 1556 BB69     		ldr	r3, [r7, #24]
 3484 1558 1B6B     		ldr	r3, [r3, #48]
 3485 155a 1846     		mov	r0, r3
 3486 155c 00F022F8 		bl	usTaskCheckFreeStackSpace
 3487 1560 0346     		mov	r3, r0
 3488 1562 CDF80080 		str	r8, [sp, #0]
 3489 1566 0196     		str	r6, [sp, #4]
 3490 1568 0293     		str	r3, [sp, #8]
 3491 156a 40F20000 		movw	r0, #:lower16:pcStatsString
 3492 156e C0F20000 		movt	r0, #:upper16:pcStatsString
 3493 1572 40F20001 		movw	r1, #:lower16:.LC4
 3494 1576 C0F20001 		movt	r1, #:upper16:.LC4
 3495 157a 2A46     		mov	r2, r5
 3496 157c 2346     		mov	r3, r4
 3497 157e FFF7FEFF 		bl	sprintf
 3498              	.L151:
2284:../FreeRTOS/Source/tasks.c **** 						}
2285:../FreeRTOS/Source/tasks.c **** 						#endif
2286:../FreeRTOS/Source/tasks.c **** 					}
2287:../FreeRTOS/Source/tasks.c **** 				}
2288:../FreeRTOS/Source/tasks.c **** 
2289:../FreeRTOS/Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 3499              		.loc 1 2289 0
 3500 1582 F868     		ldr	r0, [r7, #12]
 3501 1584 40F20001 		movw	r1, #:lower16:pcStatsString
 3502 1588 C0F20001 		movt	r1, #:upper16:pcStatsString
 3503 158c FFF7FEFF 		bl	strcat
 3504              	.L149:
2290:../FreeRTOS/Source/tasks.c **** 			}
2291:../FreeRTOS/Source/tasks.c **** 
2292:../FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
 3505              		.loc 1 2292 0
 3506 1590 BA69     		ldr	r2, [r7, #24]
 3507 1592 3B6A     		ldr	r3, [r7, #32]
 3508 1594 9A42     		cmp	r2, r3
 3509 1596 7FF468AF 		bne	.L153
2293:../FreeRTOS/Source/tasks.c **** 	}
 3510              		.loc 1 2293 0
 3511 159a 07F12807 		add	r7, r7, #40
 3512 159e BD46     		mov	sp, r7
 3513 15a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3514              		.cfi_endproc
 3515              	.LFE145:
 3517              		.align	2
 3518              		.thumb
 3519              		.thumb_func
 3521              	usTaskCheckFreeStackSpace:
 3522              	.LFB146:
2294:../FreeRTOS/Source/tasks.c **** 
2295:../FreeRTOS/Source/tasks.c **** #endif
2296:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2297:../FreeRTOS/Source/tasks.c **** 
2298:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2299:../FreeRTOS/Source/tasks.c **** 
2300:../FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2301:../FreeRTOS/Source/tasks.c **** 	{
 3523              		.loc 1 2301 0
 3524              		.cfi_startproc
 3525              		@ args = 0, pretend = 0, frame = 8
 3526              		@ frame_needed = 1, uses_anonymous_args = 0
 3527              		@ link register save eliminated.
 3528 15a4 90B4     		push	{r4, r7}
 3529              	.LCFI103:
 3530              		.cfi_def_cfa_offset 8
 3531              		.cfi_offset 7, -4
 3532              		.cfi_offset 4, -8
 3533 15a6 82B0     		sub	sp, sp, #8
 3534              	.LCFI104:
 3535              		.cfi_def_cfa_offset 16
 3536 15a8 00AF     		add	r7, sp, #0
 3537              	.LCFI105:
 3538              		.cfi_def_cfa_register 7
 3539 15aa 7860     		str	r0, [r7, #4]
2302:../FreeRTOS/Source/tasks.c **** 	register unsigned short usCount = 0U;
 3540              		.loc 1 2302 0
 3541 15ac 4FF00004 		mov	r4, #0
2303:../FreeRTOS/Source/tasks.c **** 
2304:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3542              		.loc 1 2304 0
 3543 15b0 06E0     		b	.L155
 3544              	.L156:
2305:../FreeRTOS/Source/tasks.c **** 		{
2306:../FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3545              		.loc 1 2306 0
 3546 15b2 7B68     		ldr	r3, [r7, #4]
 3547 15b4 03F10103 		add	r3, r3, #1
 3548 15b8 7B60     		str	r3, [r7, #4]
2307:../FreeRTOS/Source/tasks.c **** 			usCount++;
 3549              		.loc 1 2307 0
 3550 15ba 04F10103 		add	r3, r4, #1
 3551 15be 9CB2     		uxth	r4, r3
 3552              	.L155:
2304:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3553              		.loc 1 2304 0 discriminator 1
 3554 15c0 7B68     		ldr	r3, [r7, #4]
 3555 15c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3556 15c4 A52B     		cmp	r3, #165
 3557 15c6 F4D0     		beq	.L156
2308:../FreeRTOS/Source/tasks.c **** 		}
2309:../FreeRTOS/Source/tasks.c **** 
2310:../FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 3558              		.loc 1 2310 0
 3559 15c8 4FEA9403 		lsr	r3, r4, #2
 3560 15cc 9CB2     		uxth	r4, r3
2311:../FreeRTOS/Source/tasks.c **** 
2312:../FreeRTOS/Source/tasks.c **** 		return usCount;
 3561              		.loc 1 2312 0
 3562 15ce 2346     		mov	r3, r4
2313:../FreeRTOS/Source/tasks.c **** 	}
 3563              		.loc 1 2313 0
 3564 15d0 1846     		mov	r0, r3
 3565 15d2 07F10807 		add	r7, r7, #8
 3566 15d6 BD46     		mov	sp, r7
 3567 15d8 90BC     		pop	{r4, r7}
 3568 15da 7047     		bx	lr
 3569              		.cfi_endproc
 3570              	.LFE146:
 3572              		.align	2
 3573              		.global	uxTaskGetStackHighWaterMark
 3574              		.thumb
 3575              		.thumb_func
 3577              	uxTaskGetStackHighWaterMark:
 3578              	.LFB147:
2314:../FreeRTOS/Source/tasks.c **** 
2315:../FreeRTOS/Source/tasks.c **** #endif
2316:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2317:../FreeRTOS/Source/tasks.c **** 
2318:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2319:../FreeRTOS/Source/tasks.c **** 
2320:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2321:../FreeRTOS/Source/tasks.c **** 	{
 3579              		.loc 1 2321 0
 3580              		.cfi_startproc
 3581              		@ args = 0, pretend = 0, frame = 24
 3582              		@ frame_needed = 1, uses_anonymous_args = 0
 3583 15dc 80B5     		push	{r7, lr}
 3584              	.LCFI106:
 3585              		.cfi_def_cfa_offset 8
 3586              		.cfi_offset 14, -4
 3587              		.cfi_offset 7, -8
 3588 15de 86B0     		sub	sp, sp, #24
 3589              	.LCFI107:
 3590              		.cfi_def_cfa_offset 32
 3591 15e0 00AF     		add	r7, sp, #0
 3592              	.LCFI108:
 3593              		.cfi_def_cfa_register 7
 3594 15e2 7860     		str	r0, [r7, #4]
2322:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2323:../FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2324:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2325:../FreeRTOS/Source/tasks.c **** 
2326:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3595              		.loc 1 2326 0
 3596 15e4 7B68     		ldr	r3, [r7, #4]
 3597 15e6 002B     		cmp	r3, #0
 3598 15e8 05D1     		bne	.L158
 3599              		.loc 1 2326 0 is_stmt 0 discriminator 1
 3600 15ea 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3601 15ee C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3602 15f2 1B68     		ldr	r3, [r3, #0]
 3603 15f4 00E0     		b	.L159
 3604              	.L158:
 3605              		.loc 1 2326 0 discriminator 2
 3606 15f6 7B68     		ldr	r3, [r7, #4]
 3607              	.L159:
 3608              		.loc 1 2326 0 discriminator 3
 3609 15f8 7B61     		str	r3, [r7, #20]
2327:../FreeRTOS/Source/tasks.c **** 
2328:../FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2329:../FreeRTOS/Source/tasks.c **** 		{
2330:../FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 3610              		.loc 1 2330 0 is_stmt 1 discriminator 3
 3611 15fa 7B69     		ldr	r3, [r7, #20]
 3612 15fc 1B6B     		ldr	r3, [r3, #48]
 3613 15fe 3B61     		str	r3, [r7, #16]
2331:../FreeRTOS/Source/tasks.c **** 		}
2332:../FreeRTOS/Source/tasks.c **** 		#else
2333:../FreeRTOS/Source/tasks.c **** 		{
2334:../FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2335:../FreeRTOS/Source/tasks.c **** 		}
2336:../FreeRTOS/Source/tasks.c **** 		#endif
2337:../FreeRTOS/Source/tasks.c **** 
2338:../FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 3614              		.loc 1 2338 0 discriminator 3
 3615 1600 3869     		ldr	r0, [r7, #16]
 3616 1602 FFF7CFFF 		bl	usTaskCheckFreeStackSpace
 3617 1606 0346     		mov	r3, r0
 3618 1608 FB60     		str	r3, [r7, #12]
2339:../FreeRTOS/Source/tasks.c **** 
2340:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 3619              		.loc 1 2340 0 discriminator 3
 3620 160a FB68     		ldr	r3, [r7, #12]
2341:../FreeRTOS/Source/tasks.c **** 	}
 3621              		.loc 1 2341 0 discriminator 3
 3622 160c 1846     		mov	r0, r3
 3623 160e 07F11807 		add	r7, r7, #24
 3624 1612 BD46     		mov	sp, r7
 3625 1614 80BD     		pop	{r7, pc}
 3626              		.cfi_endproc
 3627              	.LFE147:
 3629 1616 00BF     		.align	2
 3630              		.thumb
 3631              		.thumb_func
 3633              	prvDeleteTCB:
 3634              	.LFB148:
2342:../FreeRTOS/Source/tasks.c **** 
2343:../FreeRTOS/Source/tasks.c **** #endif
2344:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2345:../FreeRTOS/Source/tasks.c **** 
2346:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2347:../FreeRTOS/Source/tasks.c **** 
2348:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2349:../FreeRTOS/Source/tasks.c **** 	{
 3635              		.loc 1 2349 0
 3636              		.cfi_startproc
 3637              		@ args = 0, pretend = 0, frame = 8
 3638              		@ frame_needed = 1, uses_anonymous_args = 0
 3639 1618 80B5     		push	{r7, lr}
 3640              	.LCFI109:
 3641              		.cfi_def_cfa_offset 8
 3642              		.cfi_offset 14, -4
 3643              		.cfi_offset 7, -8
 3644 161a 82B0     		sub	sp, sp, #8
 3645              	.LCFI110:
 3646              		.cfi_def_cfa_offset 16
 3647 161c 00AF     		add	r7, sp, #0
 3648              	.LCFI111:
 3649              		.cfi_def_cfa_register 7
 3650 161e 7860     		str	r0, [r7, #4]
2350:../FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2351:../FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2352:../FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 3651              		.loc 1 2352 0
 3652 1620 7B68     		ldr	r3, [r7, #4]
 3653 1622 1B6B     		ldr	r3, [r3, #48]
 3654 1624 1846     		mov	r0, r3
 3655 1626 FFF7FEFF 		bl	free
2353:../FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 3656              		.loc 1 2353 0
 3657 162a 7868     		ldr	r0, [r7, #4]
 3658 162c FFF7FEFF 		bl	free
2354:../FreeRTOS/Source/tasks.c **** 	}
 3659              		.loc 1 2354 0
 3660 1630 07F10807 		add	r7, r7, #8
 3661 1634 BD46     		mov	sp, r7
 3662 1636 80BD     		pop	{r7, pc}
 3663              		.cfi_endproc
 3664              	.LFE148:
 3666              		.align	2
 3667              		.global	xTaskGetCurrentTaskHandle
 3668              		.thumb
 3669              		.thumb_func
 3671              	xTaskGetCurrentTaskHandle:
 3672              	.LFB149:
2355:../FreeRTOS/Source/tasks.c **** 
2356:../FreeRTOS/Source/tasks.c **** #endif
2357:../FreeRTOS/Source/tasks.c **** 
2358:../FreeRTOS/Source/tasks.c **** 
2359:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2360:../FreeRTOS/Source/tasks.c **** 
2361:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2362:../FreeRTOS/Source/tasks.c **** 
2363:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2364:../FreeRTOS/Source/tasks.c **** 	{
 3673              		.loc 1 2364 0
 3674              		.cfi_startproc
 3675              		@ args = 0, pretend = 0, frame = 8
 3676              		@ frame_needed = 1, uses_anonymous_args = 0
 3677              		@ link register save eliminated.
 3678 1638 80B4     		push	{r7}
 3679              	.LCFI112:
 3680              		.cfi_def_cfa_offset 4
 3681              		.cfi_offset 7, -4
 3682 163a 83B0     		sub	sp, sp, #12
 3683              	.LCFI113:
 3684              		.cfi_def_cfa_offset 16
 3685 163c 00AF     		add	r7, sp, #0
 3686              	.LCFI114:
 3687              		.cfi_def_cfa_register 7
2365:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2366:../FreeRTOS/Source/tasks.c **** 
2367:../FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2368:../FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2369:../FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2370:../FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3688              		.loc 1 2370 0
 3689 163e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3690 1642 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3691 1646 1B68     		ldr	r3, [r3, #0]
 3692 1648 7B60     		str	r3, [r7, #4]
2371:../FreeRTOS/Source/tasks.c **** 
2372:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 3693              		.loc 1 2372 0
 3694 164a 7B68     		ldr	r3, [r7, #4]
2373:../FreeRTOS/Source/tasks.c **** 	}
 3695              		.loc 1 2373 0
 3696 164c 1846     		mov	r0, r3
 3697 164e 07F10C07 		add	r7, r7, #12
 3698 1652 BD46     		mov	sp, r7
 3699 1654 80BC     		pop	{r7}
 3700 1656 7047     		bx	lr
 3701              		.cfi_endproc
 3702              	.LFE149:
 3704              		.align	2
 3705              		.global	vTaskPriorityInherit
 3706              		.thumb
 3707              		.thumb_func
 3709              	vTaskPriorityInherit:
 3710              	.LFB150:
2374:../FreeRTOS/Source/tasks.c **** 
2375:../FreeRTOS/Source/tasks.c **** #endif
2376:../FreeRTOS/Source/tasks.c **** 
2377:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2378:../FreeRTOS/Source/tasks.c **** 
2379:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2380:../FreeRTOS/Source/tasks.c **** 
2381:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2382:../FreeRTOS/Source/tasks.c **** 	{
2383:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2384:../FreeRTOS/Source/tasks.c **** 
2385:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2386:../FreeRTOS/Source/tasks.c **** 		{
2387:../FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2388:../FreeRTOS/Source/tasks.c **** 		}
2389:../FreeRTOS/Source/tasks.c **** 		else
2390:../FreeRTOS/Source/tasks.c **** 		{
2391:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2392:../FreeRTOS/Source/tasks.c **** 			{
2393:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2394:../FreeRTOS/Source/tasks.c **** 			}
2395:../FreeRTOS/Source/tasks.c **** 			else
2396:../FreeRTOS/Source/tasks.c **** 			{
2397:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2398:../FreeRTOS/Source/tasks.c **** 			}
2399:../FreeRTOS/Source/tasks.c **** 		}
2400:../FreeRTOS/Source/tasks.c **** 
2401:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2402:../FreeRTOS/Source/tasks.c **** 	}
2403:../FreeRTOS/Source/tasks.c **** 
2404:../FreeRTOS/Source/tasks.c **** #endif
2405:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2406:../FreeRTOS/Source/tasks.c **** 
2407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2408:../FreeRTOS/Source/tasks.c **** 
2409:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2410:../FreeRTOS/Source/tasks.c **** 	{
 3711              		.loc 1 2410 0
 3712              		.cfi_startproc
 3713              		@ args = 0, pretend = 0, frame = 16
 3714              		@ frame_needed = 1, uses_anonymous_args = 0
 3715 1658 80B5     		push	{r7, lr}
 3716              	.LCFI115:
 3717              		.cfi_def_cfa_offset 8
 3718              		.cfi_offset 14, -4
 3719              		.cfi_offset 7, -8
 3720 165a 84B0     		sub	sp, sp, #16
 3721              	.LCFI116:
 3722              		.cfi_def_cfa_offset 24
 3723 165c 00AF     		add	r7, sp, #0
 3724              	.LCFI117:
 3725              		.cfi_def_cfa_register 7
 3726 165e 7860     		str	r0, [r7, #4]
2411:../FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3727              		.loc 1 2411 0
 3728 1660 7B68     		ldr	r3, [r7, #4]
 3729 1662 FB60     		str	r3, [r7, #12]
2412:../FreeRTOS/Source/tasks.c **** 
2413:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxMutexHolder );
2414:../FreeRTOS/Source/tasks.c **** 
2415:../FreeRTOS/Source/tasks.c **** 		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3730              		.loc 1 2415 0
 3731 1664 FB68     		ldr	r3, [r7, #12]
 3732 1666 DA6A     		ldr	r2, [r3, #44]
 3733 1668 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3734 166c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3735 1670 1B68     		ldr	r3, [r3, #0]
 3736 1672 DB6A     		ldr	r3, [r3, #44]
 3737 1674 9A42     		cmp	r2, r3
 3738 1676 57D2     		bcs	.L162
2416:../FreeRTOS/Source/tasks.c **** 		{
2417:../FreeRTOS/Source/tasks.c **** 			/* Adjust the mutex holder state to account for its new priority. */
2418:../FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxC
 3739              		.loc 1 2418 0
 3740 1678 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3741 167c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3742 1680 1B68     		ldr	r3, [r3, #0]
 3743 1682 DB6A     		ldr	r3, [r3, #44]
 3744 1684 C3F10502 		rsb	r2, r3, #5
 3745 1688 FB68     		ldr	r3, [r7, #12]
 3746 168a 9A61     		str	r2, [r3, #24]
2419:../FreeRTOS/Source/tasks.c **** 
2420:../FreeRTOS/Source/tasks.c **** 			/* If the task being modified is in the ready state it will need to
2421:../FreeRTOS/Source/tasks.c **** 			be moved in to a new list. */
2422:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericList
 3747              		.loc 1 2422 0
 3748 168c FB68     		ldr	r3, [r7, #12]
 3749 168e 5969     		ldr	r1, [r3, #20]
 3750 1690 FB68     		ldr	r3, [r7, #12]
 3751 1692 DA6A     		ldr	r2, [r3, #44]
 3752 1694 1346     		mov	r3, r2
 3753 1696 4FEA8303 		lsl	r3, r3, #2
 3754 169a 9B18     		adds	r3, r3, r2
 3755 169c 4FEA8303 		lsl	r3, r3, #2
 3756 16a0 1A46     		mov	r2, r3
 3757 16a2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3758 16a6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3759 16aa D318     		adds	r3, r2, r3
 3760 16ac 9942     		cmp	r1, r3
 3761 16ae 33D1     		bne	.L164
2423:../FreeRTOS/Source/tasks.c **** 			{
2424:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3762              		.loc 1 2424 0
 3763 16b0 FB68     		ldr	r3, [r7, #12]
 3764 16b2 03F10403 		add	r3, r3, #4
 3765 16b6 1846     		mov	r0, r3
 3766 16b8 FFF7FEFF 		bl	vListRemove
2425:../FreeRTOS/Source/tasks.c **** 
2426:../FreeRTOS/Source/tasks.c **** 				/* Inherit the priority before being moved into the new list. */
2427:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3767              		.loc 1 2427 0
 3768 16bc 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3769 16c0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3770 16c4 1B68     		ldr	r3, [r3, #0]
 3771 16c6 DA6A     		ldr	r2, [r3, #44]
 3772 16c8 FB68     		ldr	r3, [r7, #12]
 3773 16ca DA62     		str	r2, [r3, #44]
2428:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3774              		.loc 1 2428 0
 3775 16cc FB68     		ldr	r3, [r7, #12]
 3776 16ce DA6A     		ldr	r2, [r3, #44]
 3777 16d0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3778 16d4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3779 16d8 1B68     		ldr	r3, [r3, #0]
 3780 16da 9A42     		cmp	r2, r3
 3781 16dc 06D9     		bls	.L165
 3782              		.loc 1 2428 0 is_stmt 0 discriminator 1
 3783 16de FB68     		ldr	r3, [r7, #12]
 3784 16e0 DA6A     		ldr	r2, [r3, #44]
 3785 16e2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3786 16e6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3787 16ea 1A60     		str	r2, [r3, #0]
 3788              	.L165:
 3789              		.loc 1 2428 0 discriminator 2
 3790 16ec FB68     		ldr	r3, [r7, #12]
 3791 16ee DA6A     		ldr	r2, [r3, #44]
 3792 16f0 1346     		mov	r3, r2
 3793 16f2 4FEA8303 		lsl	r3, r3, #2
 3794 16f6 9B18     		adds	r3, r3, r2
 3795 16f8 4FEA8303 		lsl	r3, r3, #2
 3796 16fc 1A46     		mov	r2, r3
 3797 16fe 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3798 1702 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3799 1706 D218     		adds	r2, r2, r3
 3800 1708 FB68     		ldr	r3, [r7, #12]
 3801 170a 03F10403 		add	r3, r3, #4
 3802 170e 1046     		mov	r0, r2
 3803 1710 1946     		mov	r1, r3
 3804 1712 FFF7FEFF 		bl	vListInsertEnd
 3805 1716 07E0     		b	.L162
 3806              	.L164:
2429:../FreeRTOS/Source/tasks.c **** 			}
2430:../FreeRTOS/Source/tasks.c **** 			else
2431:../FreeRTOS/Source/tasks.c **** 			{
2432:../FreeRTOS/Source/tasks.c **** 				/* Just inherit the priority. */
2433:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3807              		.loc 1 2433 0 is_stmt 1
 3808 1718 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3809 171c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3810 1720 1B68     		ldr	r3, [r3, #0]
 3811 1722 DA6A     		ldr	r2, [r3, #44]
 3812 1724 FB68     		ldr	r3, [r7, #12]
 3813 1726 DA62     		str	r2, [r3, #44]
 3814              	.L162:
2434:../FreeRTOS/Source/tasks.c **** 			}
2435:../FreeRTOS/Source/tasks.c **** 		}
2436:../FreeRTOS/Source/tasks.c **** 	}
 3815              		.loc 1 2436 0
 3816 1728 07F11007 		add	r7, r7, #16
 3817 172c BD46     		mov	sp, r7
 3818 172e 80BD     		pop	{r7, pc}
 3819              		.cfi_endproc
 3820              	.LFE150:
 3822              		.align	2
 3823              		.global	vTaskPriorityDisinherit
 3824              		.thumb
 3825              		.thumb_func
 3827              	vTaskPriorityDisinherit:
 3828              	.LFB151:
2437:../FreeRTOS/Source/tasks.c **** 
2438:../FreeRTOS/Source/tasks.c **** #endif
2439:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2440:../FreeRTOS/Source/tasks.c **** 
2441:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2442:../FreeRTOS/Source/tasks.c **** 
2443:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2444:../FreeRTOS/Source/tasks.c **** 	{
 3829              		.loc 1 2444 0
 3830              		.cfi_startproc
 3831              		@ args = 0, pretend = 0, frame = 16
 3832              		@ frame_needed = 1, uses_anonymous_args = 0
 3833 1730 80B5     		push	{r7, lr}
 3834              	.LCFI118:
 3835              		.cfi_def_cfa_offset 8
 3836              		.cfi_offset 14, -4
 3837              		.cfi_offset 7, -8
 3838 1732 84B0     		sub	sp, sp, #16
 3839              	.LCFI119:
 3840              		.cfi_def_cfa_offset 24
 3841 1734 00AF     		add	r7, sp, #0
 3842              	.LCFI120:
 3843              		.cfi_def_cfa_register 7
 3844 1736 7860     		str	r0, [r7, #4]
2445:../FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3845              		.loc 1 2445 0
 3846 1738 7B68     		ldr	r3, [r7, #4]
 3847 173a FB60     		str	r3, [r7, #12]
2446:../FreeRTOS/Source/tasks.c **** 
2447:../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3848              		.loc 1 2447 0
 3849 173c 7B68     		ldr	r3, [r7, #4]
 3850 173e 002B     		cmp	r3, #0
 3851 1740 3AD0     		beq	.L166
2448:../FreeRTOS/Source/tasks.c **** 		{
2449:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3852              		.loc 1 2449 0
 3853 1742 FB68     		ldr	r3, [r7, #12]
 3854 1744 DA6A     		ldr	r2, [r3, #44]
 3855 1746 FB68     		ldr	r3, [r7, #12]
 3856 1748 5B6C     		ldr	r3, [r3, #68]
 3857 174a 9A42     		cmp	r2, r3
 3858 174c 34D0     		beq	.L166
2450:../FreeRTOS/Source/tasks.c **** 			{
2451:../FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2452:../FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2453:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3859              		.loc 1 2453 0
 3860 174e FB68     		ldr	r3, [r7, #12]
 3861 1750 03F10403 		add	r3, r3, #4
 3862 1754 1846     		mov	r0, r3
 3863 1756 FFF7FEFF 		bl	vListRemove
2454:../FreeRTOS/Source/tasks.c **** 
2455:../FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding ourselves into the new
2456:../FreeRTOS/Source/tasks.c **** 				ready list. */
2457:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 3864              		.loc 1 2457 0
 3865 175a FB68     		ldr	r3, [r7, #12]
 3866 175c 5A6C     		ldr	r2, [r3, #68]
 3867 175e FB68     		ldr	r3, [r7, #12]
 3868 1760 DA62     		str	r2, [r3, #44]
2458:../FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3869              		.loc 1 2458 0
 3870 1762 FB68     		ldr	r3, [r7, #12]
 3871 1764 DB6A     		ldr	r3, [r3, #44]
 3872 1766 C3F10502 		rsb	r2, r3, #5
 3873 176a FB68     		ldr	r3, [r7, #12]
 3874 176c 9A61     		str	r2, [r3, #24]
2459:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3875              		.loc 1 2459 0
 3876 176e FB68     		ldr	r3, [r7, #12]
 3877 1770 DA6A     		ldr	r2, [r3, #44]
 3878 1772 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3879 1776 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3880 177a 1B68     		ldr	r3, [r3, #0]
 3881 177c 9A42     		cmp	r2, r3
 3882 177e 06D9     		bls	.L168
 3883              		.loc 1 2459 0 is_stmt 0 discriminator 1
 3884 1780 FB68     		ldr	r3, [r7, #12]
 3885 1782 DA6A     		ldr	r2, [r3, #44]
 3886 1784 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3887 1788 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3888 178c 1A60     		str	r2, [r3, #0]
 3889              	.L168:
 3890              		.loc 1 2459 0 discriminator 2
 3891 178e FB68     		ldr	r3, [r7, #12]
 3892 1790 DA6A     		ldr	r2, [r3, #44]
 3893 1792 1346     		mov	r3, r2
 3894 1794 4FEA8303 		lsl	r3, r3, #2
 3895 1798 9B18     		adds	r3, r3, r2
 3896 179a 4FEA8303 		lsl	r3, r3, #2
 3897 179e 1A46     		mov	r2, r3
 3898 17a0 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3899 17a4 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3900 17a8 D218     		adds	r2, r2, r3
 3901 17aa FB68     		ldr	r3, [r7, #12]
 3902 17ac 03F10403 		add	r3, r3, #4
 3903 17b0 1046     		mov	r0, r2
 3904 17b2 1946     		mov	r1, r3
 3905 17b4 FFF7FEFF 		bl	vListInsertEnd
 3906              	.L166:
2460:../FreeRTOS/Source/tasks.c **** 			}
2461:../FreeRTOS/Source/tasks.c **** 		}
2462:../FreeRTOS/Source/tasks.c **** 	}
 3907              		.loc 1 2462 0 is_stmt 1
 3908 17b8 07F11007 		add	r7, r7, #16
 3909 17bc BD46     		mov	sp, r7
 3910 17be 80BD     		pop	{r7, pc}
 3911              		.cfi_endproc
 3912              	.LFE151:
 3914              	.Letext0:
 3915              		.file 2 "e:\\elektronik\\toolchain\\yagarto\\bin\\../lib/gcc/arm-none-eabi/4.6.2/include/stddef.h"
 3916              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/projdefs.h"
 3917              		.file 4 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 3918              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source
 3919              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/FreeRTOS.h"
 3920              		.file 7 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/list.h"
 3921              		.file 8 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 3922              		.file 9 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:23     .bss:00000000 pxCurrentTCB
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:20     .bss:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:26     .bss:00000004 pxReadyTasksLists
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:29     .bss:00000068 xDelayedTaskList1
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:32     .bss:0000007c xDelayedTaskList2
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:35     .bss:00000090 pxDelayedTaskList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:38     .bss:00000094 pxOverflowDelayedTaskList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:41     .bss:00000098 xPendingReadyList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:44     .bss:000000ac xTasksWaitingTermination
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:47     .bss:000000c0 uxTasksDeleted
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:50     .bss:000000c4 xSuspendedTaskList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:53     .bss:000000d8 xIdleTaskHandle
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:56     .bss:000000dc uxCurrentNumberOfTasks
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:59     .bss:000000e0 xTickCount
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:62     .bss:000000e4 uxTopUsedPriority
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:65     .bss:000000e8 uxTopReadyPriority
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:68     .bss:000000ec xSchedulerRunning
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:71     .bss:000000f0 uxSchedulerSuspended
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:74     .bss:000000f4 uxMissedTicks
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:77     .bss:000000f8 xMissedYield
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:80     .bss:000000fc xNumOfOverflows
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:83     .bss:00000100 uxTaskNumber
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:86     .data:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:89     .data:00000000 xNextTaskUnblockTime
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:93     .bss:00000104 pcStatsString
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:96     .bss:00000138 ulTaskSwitchedInTime
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:99     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:104    .text:00000000 xTaskGenericCreate
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3220   .text:000013b4 prvAllocateTCBAndStack
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2875   .text:00001164 prvInitialiseTCBVariables
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2965   .text:000011ec prvInitialiseTaskLists
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:329    .text:000001ac vTaskDelete
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:441    .text:0000026c vTaskDelayUntil
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1372   .text:000007f8 vTaskSuspendAll
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3141   .text:00001328 prvAddCurrentTaskToDelayedList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1406   .text:0000081c xTaskResumeAll
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:557    .text:00000320 vTaskDelay
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:625    .text:0000037c uxTaskPriorityGet
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:681    .text:000003b4 vTaskPrioritySet
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:863    .text:000004e0 vTaskSuspend
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2307   .text:00000dd8 vTaskSwitchContext
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:980    .text:000005a0 xTaskIsTaskSuspended
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1043   .text:000005f0 vTaskResume
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1146   .text:0000069c xTaskResumeFromISR
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1251   .rodata:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1252   .rodata:00000000 .LC0
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1260   .text:0000075c vTaskStartScheduler
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2833   .text:00001140 prvIdleTask
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1334   .text:000007d8 vTaskEndScheduler
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1920   .text:00000b60 vTaskIncrementTick
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1585   .text:00000970 xTaskGetTickCount
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1626   .text:00000998 xTaskGetTickCountFromISR
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1680   .text:000009d0 uxTaskGetNumberOfTasks
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1708   .rodata:00000008 .LC1
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1716   .text:000009e8 vTaskGetRunTimeStats
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3315   .text:00001428 prvGenerateRunTimeStatsForTasksInList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:1889   .text:00000b48 xTaskGetIdleTaskHandle
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2130   .text:00000d18 vTaskSetApplicationTaskTag
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2184   .text:00000d50 xTaskGetApplicationTaskTag
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2240   .text:00000d8c xTaskCallApplicationTaskHook
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2471   .text:00000f18 vTaskPlaceOnEventList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2543   .text:00000f90 xTaskRemoveFromEventList
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2656   .text:00001054 vTaskSetTimeOutState
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2699   .text:00001084 xTaskCheckForTimeOut
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:2803   .text:00001128 vTaskMissedYield
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3051   .text:00001290 prvCheckTasksWaitingTermination
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3633   .text:00001618 prvDeleteTCB
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3302   .rodata:0000000c .LC2
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3305   .rodata:00000034 .LC3
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3308   .rodata:00000054 .LC4
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3521   .text:000015a4 usTaskCheckFreeStackSpace
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3577   .text:000015dc uxTaskGetStackHighWaterMark
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3671   .text:00001638 xTaskGetCurrentTaskHandle
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3709   .text:00001658 vTaskPriorityInherit
C:\Users\Alex\AppData\Local\Temp\ccDJxbJf.s:3827   .text:00001730 vTaskPriorityDisinherit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
init_us_timer
xPortStartScheduler
vPortEndScheduler
get_us_time
strlen
memcpy
vApplicationStackOverflowHook
vListInsert
strncpy
vListInitialiseItem
vListInitialise
malloc
free
memset
sprintf
strcat
