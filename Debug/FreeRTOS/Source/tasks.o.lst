   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	pxCurrentTCB
  19              		.section	.bss.pxCurrentTCB,"aw",%nobits
  20              		.align	2
  23              	pxCurrentTCB:
  24 0000 00000000 		.space	4
  25              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  26              		.align	2
  29              	pxReadyTasksLists:
  30 0000 00000000 		.space	200
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  32              		.align	2
  35              	xDelayedTaskList1:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  38              		.align	2
  41              	xDelayedTaskList2:
  42 0000 00000000 		.space	20
  42      00000000 
  42      00000000 
  42      00000000 
  42      00000000 
  43              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  44              		.align	2
  47              	pxDelayedTaskList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  50              		.align	2
  53              	pxOverflowDelayedTaskList:
  54 0000 00000000 		.space	4
  55              		.section	.bss.xPendingReadyList,"aw",%nobits
  56              		.align	2
  59              	xPendingReadyList:
  60 0000 00000000 		.space	20
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  62              		.align	2
  65              	xTasksWaitingTermination:
  66 0000 00000000 		.space	20
  66      00000000 
  66      00000000 
  66      00000000 
  66      00000000 
  67              		.section	.bss.uxTasksDeleted,"aw",%nobits
  68              		.align	2
  71              	uxTasksDeleted:
  72 0000 00000000 		.space	4
  73              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  74              		.align	2
  77              	xSuspendedTaskList:
  78 0000 00000000 		.space	20
  78      00000000 
  78      00000000 
  78      00000000 
  78      00000000 
  79              		.section	.bss.xIdleTaskHandle,"aw",%nobits
  80              		.align	2
  83              	xIdleTaskHandle:
  84 0000 00000000 		.space	4
  85              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  86              		.align	2
  89              	uxCurrentNumberOfTasks:
  90 0000 00000000 		.space	4
  91              		.section	.bss.xTickCount,"aw",%nobits
  92              		.align	2
  95              	xTickCount:
  96 0000 00000000 		.space	4
  97              		.section	.bss.uxTopUsedPriority,"aw",%nobits
  98              		.align	2
 101              	uxTopUsedPriority:
 102 0000 00000000 		.space	4
 103              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 104              		.align	2
 107              	uxTopReadyPriority:
 108 0000 00000000 		.space	4
 109              		.section	.bss.xSchedulerRunning,"aw",%nobits
 110              		.align	2
 113              	xSchedulerRunning:
 114 0000 00000000 		.space	4
 115              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 116              		.align	2
 119              	uxSchedulerSuspended:
 120 0000 00000000 		.space	4
 121              		.section	.bss.uxMissedTicks,"aw",%nobits
 122              		.align	2
 125              	uxMissedTicks:
 126 0000 00000000 		.space	4
 127              		.section	.bss.xMissedYield,"aw",%nobits
 128              		.align	2
 131              	xMissedYield:
 132 0000 00000000 		.space	4
 133              		.section	.bss.xNumOfOverflows,"aw",%nobits
 134              		.align	2
 137              	xNumOfOverflows:
 138 0000 00000000 		.space	4
 139              		.section	.bss.uxTaskNumber,"aw",%nobits
 140              		.align	2
 143              	uxTaskNumber:
 144 0000 00000000 		.space	4
 145              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 146              		.align	2
 149              	xNextTaskUnblockTime:
 150 0000 FFFFFFFF 		.word	-1
 151              		.section	.bss.pcStatsString,"aw",%nobits
 152              		.align	2
 155              	pcStatsString:
 156 0000 00000000 		.space	50
 156      00000000 
 156      00000000 
 156      00000000 
 156      00000000 
 157 0032 0000     		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 158              		.align	2
 161              	ulTaskSwitchedInTime:
 162 0000 00000000 		.space	4
 163              		.text
 164              		.align	2
 165              		.global	xTaskGenericCreate
 166              		.thumb
 167              		.thumb_func
 169              	xTaskGenericCreate:
 170              	.LFB110:
 171              		.file 1 "../FreeRTOS/Source/tasks.c"
   1:../FreeRTOS/Source/tasks.c **** /*
   2:../FreeRTOS/Source/tasks.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/tasks.c **** 	
   4:../FreeRTOS/Source/tasks.c **** 
   5:../FreeRTOS/Source/tasks.c ****     ***************************************************************************
   6:../FreeRTOS/Source/tasks.c ****      *                                                                       *
   7:../FreeRTOS/Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/tasks.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  11:../FreeRTOS/Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  18:../FreeRTOS/Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  20:../FreeRTOS/Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/tasks.c ****      *                                                                       *
  22:../FreeRTOS/Source/tasks.c ****     ***************************************************************************
  23:../FreeRTOS/Source/tasks.c **** 
  24:../FreeRTOS/Source/tasks.c **** 
  25:../FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/tasks.c **** 
  27:../FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/tasks.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/tasks.c **** 
  42:../FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/tasks.c **** 
  44:../FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/tasks.c ****     contact details.
  46:../FreeRTOS/Source/tasks.c **** 
  47:../FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/tasks.c ****     critical systems.
  49:../FreeRTOS/Source/tasks.c **** 
  50:../FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/tasks.c ****     licensing and training services.
  52:../FreeRTOS/Source/tasks.c **** */
  53:../FreeRTOS/Source/tasks.c **** 
  54:../FreeRTOS/Source/tasks.c **** 
  55:../FreeRTOS/Source/tasks.c **** #include <stdio.h>
  56:../FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  57:../FreeRTOS/Source/tasks.c **** #include <string.h>
  58:../FreeRTOS/Source/tasks.c **** 
  59:../FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:../FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:../FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  62:../FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:../FreeRTOS/Source/tasks.c **** 
  64:../FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  65:../FreeRTOS/Source/tasks.c **** #include "task.h"
  66:../FreeRTOS/Source/tasks.c **** #include "timers.h"
  67:../FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  68:../FreeRTOS/Source/tasks.c **** 
  69:../FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  70:../FreeRTOS/Source/tasks.c **** 
  71:../FreeRTOS/Source/tasks.c **** /*
  72:../FreeRTOS/Source/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  73:../FreeRTOS/Source/tasks.c ****  */
  74:../FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  75:../FreeRTOS/Source/tasks.c **** 
  76:../FreeRTOS/Source/tasks.c **** /*
  77:../FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  78:../FreeRTOS/Source/tasks.c ****  * and stores the context of the task.
  79:../FreeRTOS/Source/tasks.c ****  */
  80:../FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
  81:../FreeRTOS/Source/tasks.c **** {
  82:../FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  83:../FreeRTOS/Source/tasks.c **** 
  84:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  85:../FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  86:../FreeRTOS/Source/tasks.c **** 	#endif	
  87:../FreeRTOS/Source/tasks.c **** 	
  88:../FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  89:../FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  90:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  91:../FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  92:../FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  93:../FreeRTOS/Source/tasks.c **** 
  94:../FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  95:../FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  96:../FreeRTOS/Source/tasks.c **** 	#endif
  97:../FreeRTOS/Source/tasks.c **** 
  98:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
  99:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 100:../FreeRTOS/Source/tasks.c **** 	#endif
 101:../FreeRTOS/Source/tasks.c **** 
 102:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 103:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 104:../FreeRTOS/Source/tasks.c **** 	#endif
 105:../FreeRTOS/Source/tasks.c **** 
 106:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 107:../FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 108:../FreeRTOS/Source/tasks.c **** 	#endif
 109:../FreeRTOS/Source/tasks.c **** 
 110:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 111:../FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 112:../FreeRTOS/Source/tasks.c **** 	#endif
 113:../FreeRTOS/Source/tasks.c **** 
 114:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 115:../FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 116:../FreeRTOS/Source/tasks.c **** 	#endif
 117:../FreeRTOS/Source/tasks.c **** 
 118:../FreeRTOS/Source/tasks.c **** } tskTCB;
 119:../FreeRTOS/Source/tasks.c **** 
 120:../FreeRTOS/Source/tasks.c **** 
 121:../FreeRTOS/Source/tasks.c **** /*
 122:../FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 123:../FreeRTOS/Source/tasks.c ****  * than file scope.
 124:../FreeRTOS/Source/tasks.c ****  */
 125:../FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 126:../FreeRTOS/Source/tasks.c **** 	#define static
 127:../FreeRTOS/Source/tasks.c **** #endif
 128:../FreeRTOS/Source/tasks.c **** 
 129:../FreeRTOS/Source/tasks.c **** /*lint -e956 */
 130:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 131:../FreeRTOS/Source/tasks.c **** 
 132:../FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 133:../FreeRTOS/Source/tasks.c **** 
 134:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 135:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 136:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 137:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 138:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 139:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 140:../FreeRTOS/Source/tasks.c **** 
 141:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 142:../FreeRTOS/Source/tasks.c **** 
 143:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 144:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 145:../FreeRTOS/Source/tasks.c **** 
 146:../FreeRTOS/Source/tasks.c **** #endif
 147:../FreeRTOS/Source/tasks.c **** 
 148:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 149:../FreeRTOS/Source/tasks.c **** 
 150:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 151:../FreeRTOS/Source/tasks.c **** 
 152:../FreeRTOS/Source/tasks.c **** #endif
 153:../FreeRTOS/Source/tasks.c **** 
 154:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 155:../FreeRTOS/Source/tasks.c **** 	
 156:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;
 157:../FreeRTOS/Source/tasks.c **** 	
 158:../FreeRTOS/Source/tasks.c **** #endif
 159:../FreeRTOS/Source/tasks.c **** 
 160:../FreeRTOS/Source/tasks.c **** /* File private variables. --------------------------------*/
 161:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 162:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 163:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 164:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 165:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 166:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 167:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 168:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 169:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 170:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 171:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
 172:../FreeRTOS/Source/tasks.c **** 
 173:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 174:../FreeRTOS/Source/tasks.c **** 
 175:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 176:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 177:../FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 178:../FreeRTOS/Source/tasks.c **** 
 179:../FreeRTOS/Source/tasks.c **** #endif
 180:../FreeRTOS/Source/tasks.c **** 
 181:../FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 182:../FreeRTOS/Source/tasks.c **** 
 183:../FreeRTOS/Source/tasks.c **** /*
 184:../FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 185:../FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 186:../FreeRTOS/Source/tasks.c ****  */
 187:../FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 188:../FreeRTOS/Source/tasks.c **** 
 189:../FreeRTOS/Source/tasks.c **** /*
 190:../FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 191:../FreeRTOS/Source/tasks.c ****  */
 192:../FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 193:../FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 194:../FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 195:../FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 196:../FreeRTOS/Source/tasks.c **** 
 197:../FreeRTOS/Source/tasks.c **** /*
 198:../FreeRTOS/Source/tasks.c ****  * Macros and private variables used by the trace facility.
 199:../FreeRTOS/Source/tasks.c ****  */
 200:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 201:../FreeRTOS/Source/tasks.c **** 
 202:../FreeRTOS/Source/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 203:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 204:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 205:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 206:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 207:../FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255U;
 208:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 209:../FreeRTOS/Source/tasks.c **** 
 210:../FreeRTOS/Source/tasks.c **** #endif
 211:../FreeRTOS/Source/tasks.c **** 
 212:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:../FreeRTOS/Source/tasks.c **** 
 214:../FreeRTOS/Source/tasks.c **** /*
 215:../FreeRTOS/Source/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 216:../FreeRTOS/Source/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 217:../FreeRTOS/Source/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 218:../FreeRTOS/Source/tasks.c ****  * it if not using the facility.
 219:../FreeRTOS/Source/tasks.c ****  */
 220:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 221:../FreeRTOS/Source/tasks.c **** 
 222:../FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 223:../FreeRTOS/Source/tasks.c **** 	{																								\
 224:../FreeRTOS/Source/tasks.c **** 		if( xTracing != pdFALSE )																	\
 225:../FreeRTOS/Source/tasks.c **** 		{																							\
 226:../FreeRTOS/Source/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 227:../FreeRTOS/Source/tasks.c **** 			{																						\
 228:../FreeRTOS/Source/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 229:../FreeRTOS/Source/tasks.c **** 				{																					\
 230:../FreeRTOS/Source/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 231:../FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;				\
 232:../FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 233:../FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;			\
 234:../FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 235:../FreeRTOS/Source/tasks.c **** 				}																					\
 236:../FreeRTOS/Source/tasks.c **** 				else																				\
 237:../FreeRTOS/Source/tasks.c **** 				{																					\
 238:../FreeRTOS/Source/tasks.c **** 					xTracing = pdFALSE;																\
 239:../FreeRTOS/Source/tasks.c **** 				}																					\
 240:../FreeRTOS/Source/tasks.c **** 			}																						\
 241:../FreeRTOS/Source/tasks.c **** 		}																							\
 242:../FreeRTOS/Source/tasks.c **** 	}
 243:../FreeRTOS/Source/tasks.c **** 
 244:../FreeRTOS/Source/tasks.c **** #else
 245:../FreeRTOS/Source/tasks.c **** 
 246:../FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()
 247:../FreeRTOS/Source/tasks.c **** 
 248:../FreeRTOS/Source/tasks.c **** #endif
 249:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 250:../FreeRTOS/Source/tasks.c **** 
 251:../FreeRTOS/Source/tasks.c **** /*
 252:../FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 253:../FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 254:../FreeRTOS/Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 255:../FreeRTOS/Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 256:../FreeRTOS/Source/tasks.c ****  * executing task has been rescheduled.
 257:../FreeRTOS/Source/tasks.c ****  */
 258:../FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																					\
 259:../FreeRTOS/Source/tasks.c **** 	if( ( pxTCB )->uxPriority > uxTopReadyPriority )																	\
 260:../FreeRTOS/Source/tasks.c **** 	{																													\
 261:../FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = ( pxTCB )->uxPriority;																		\
 262:../FreeRTOS/Source/tasks.c **** 	}																													\
 263:../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 264:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:../FreeRTOS/Source/tasks.c **** 
 266:../FreeRTOS/Source/tasks.c **** /*
 267:../FreeRTOS/Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 268:../FreeRTOS/Source/tasks.c ****  * any require waking.
 269:../FreeRTOS/Source/tasks.c ****  *
 270:../FreeRTOS/Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 271:../FreeRTOS/Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 272:../FreeRTOS/Source/tasks.c ****  * any further down the list.
 273:../FreeRTOS/Source/tasks.c ****  */
 274:../FreeRTOS/Source/tasks.c **** #define prvCheckDelayedTasks()															\
 275:../FreeRTOS/Source/tasks.c **** {																						\
 276:../FreeRTOS/Source/tasks.c **** portTickType xItemValue;																\
 277:../FreeRTOS/Source/tasks.c **** 																						\
 278:../FreeRTOS/Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 279:../FreeRTOS/Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 280:../FreeRTOS/Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 281:../FreeRTOS/Source/tasks.c **** 	{																					\
 282:../FreeRTOS/Source/tasks.c **** 		for( ;; )																		\
 283:../FreeRTOS/Source/tasks.c **** 		{																				\
 284:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 285:../FreeRTOS/Source/tasks.c **** 			{																			\
 286:../FreeRTOS/Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 287:../FreeRTOS/Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 288:../FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 289:../FreeRTOS/Source/tasks.c **** 				time through. */														\
 290:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 291:../FreeRTOS/Source/tasks.c **** 				break;																	\
 292:../FreeRTOS/Source/tasks.c **** 			}																			\
 293:../FreeRTOS/Source/tasks.c **** 			else																		\
 294:../FreeRTOS/Source/tasks.c **** 			{																			\
 295:../FreeRTOS/Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 296:../FreeRTOS/Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 297:../FreeRTOS/Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 298:../FreeRTOS/Source/tasks.c **** 				the Blocked state. */													\
 299:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 300:../FreeRTOS/Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 301:../FreeRTOS/Source/tasks.c **** 																						\
 302:../FreeRTOS/Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 303:../FreeRTOS/Source/tasks.c **** 				{																		\
 304:../FreeRTOS/Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 305:../FreeRTOS/Source/tasks.c **** 					value is the time at which the task at the head of the				\
 306:../FreeRTOS/Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 307:../FreeRTOS/Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 308:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 309:../FreeRTOS/Source/tasks.c **** 					break;																\
 310:../FreeRTOS/Source/tasks.c **** 				}																		\
 311:../FreeRTOS/Source/tasks.c **** 																						\
 312:../FreeRTOS/Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 313:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );							\
 314:../FreeRTOS/Source/tasks.c **** 																						\
 315:../FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 316:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 317:../FreeRTOS/Source/tasks.c **** 				{																		\
 318:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );							\
 319:../FreeRTOS/Source/tasks.c **** 				}																		\
 320:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 321:../FreeRTOS/Source/tasks.c **** 			}																			\
 322:../FreeRTOS/Source/tasks.c **** 		}																				\
 323:../FreeRTOS/Source/tasks.c **** 	}																					\
 324:../FreeRTOS/Source/tasks.c **** }
 325:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 326:../FreeRTOS/Source/tasks.c **** 
 327:../FreeRTOS/Source/tasks.c **** /*
 328:../FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 329:../FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 330:../FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 331:../FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 332:../FreeRTOS/Source/tasks.c ****  */
 333:../FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 334:../FreeRTOS/Source/tasks.c **** 
 335:../FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 336:../FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
 337:../FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 338:../FreeRTOS/Source/tasks.c **** 		
 339:../FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 340:../FreeRTOS/Source/tasks.c **** 
 341:../FreeRTOS/Source/tasks.c **** /*
 342:../FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 343:../FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 344:../FreeRTOS/Source/tasks.c ****  */
 345:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 346:../FreeRTOS/Source/tasks.c **** 
 347:../FreeRTOS/Source/tasks.c **** /*
 348:../FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 349:../FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 350:../FreeRTOS/Source/tasks.c ****  */
 351:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 352:../FreeRTOS/Source/tasks.c **** 
 353:../FreeRTOS/Source/tasks.c **** /*
 354:../FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 355:../FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 356:../FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 357:../FreeRTOS/Source/tasks.c ****  *
 358:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 359:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 360:../FreeRTOS/Source/tasks.c ****  *
 361:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 362:../FreeRTOS/Source/tasks.c ****  *
 363:../FreeRTOS/Source/tasks.c ****  */
 364:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 365:../FreeRTOS/Source/tasks.c **** 
 366:../FreeRTOS/Source/tasks.c **** /*
 367:../FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 368:../FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 369:../FreeRTOS/Source/tasks.c ****  *
 370:../FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 371:../FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 372:../FreeRTOS/Source/tasks.c ****  */
 373:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 374:../FreeRTOS/Source/tasks.c **** 
 375:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 376:../FreeRTOS/Source/tasks.c **** 
 377:../FreeRTOS/Source/tasks.c **** #endif
 378:../FreeRTOS/Source/tasks.c **** 
 379:../FreeRTOS/Source/tasks.c **** /*
 380:../FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 381:../FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 382:../FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 383:../FreeRTOS/Source/tasks.c ****  */
 384:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 385:../FreeRTOS/Source/tasks.c **** 
 386:../FreeRTOS/Source/tasks.c **** /*
 387:../FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 388:../FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 389:../FreeRTOS/Source/tasks.c ****  */
 390:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 391:../FreeRTOS/Source/tasks.c **** 
 392:../FreeRTOS/Source/tasks.c **** /*
 393:../FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 394:../FreeRTOS/Source/tasks.c ****  * allocation was successful.
 395:../FreeRTOS/Source/tasks.c ****  */
 396:../FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 397:../FreeRTOS/Source/tasks.c **** 
 398:../FreeRTOS/Source/tasks.c **** /*
 399:../FreeRTOS/Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 400:../FreeRTOS/Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 401:../FreeRTOS/Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 402:../FreeRTOS/Source/tasks.c ****  * within just that list.
 403:../FreeRTOS/Source/tasks.c ****  *
 404:../FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 405:../FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 406:../FreeRTOS/Source/tasks.c ****  */
 407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 408:../FreeRTOS/Source/tasks.c **** 
 409:../FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 410:../FreeRTOS/Source/tasks.c **** 
 411:../FreeRTOS/Source/tasks.c **** #endif
 412:../FreeRTOS/Source/tasks.c **** 
 413:../FreeRTOS/Source/tasks.c **** /*
 414:../FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 415:../FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 416:../FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 417:../FreeRTOS/Source/tasks.c ****  */
 418:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 419:../FreeRTOS/Source/tasks.c **** 
 420:../FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 421:../FreeRTOS/Source/tasks.c **** 
 422:../FreeRTOS/Source/tasks.c **** #endif
 423:../FreeRTOS/Source/tasks.c **** 
 424:../FreeRTOS/Source/tasks.c **** 
 425:../FreeRTOS/Source/tasks.c **** /*lint +e956 */
 426:../FreeRTOS/Source/tasks.c **** 
 427:../FreeRTOS/Source/tasks.c **** 
 428:../FreeRTOS/Source/tasks.c **** 
 429:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 430:../FreeRTOS/Source/tasks.c ****  * TASK CREATION API documented in task.h
 431:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 432:../FreeRTOS/Source/tasks.c **** 
 433:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 434:../FreeRTOS/Source/tasks.c **** {
 172              		.loc 1 434 0
 173              		.cfi_startproc
 174              		@ args = 16, pretend = 0, frame = 32
 175              		@ frame_needed = 1, uses_anonymous_args = 0
 176 0000 80B5     		push	{r7, lr}
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 14, -4
 180              		.cfi_offset 7, -8
 181 0002 8AB0     		sub	sp, sp, #40
 182              	.LCFI1:
 183              		.cfi_def_cfa_offset 48
 184 0004 02AF     		add	r7, sp, #8
 185              	.LCFI2:
 186              		.cfi_def_cfa 7, 40
 187 0006 F860     		str	r0, [r7, #12]
 188 0008 B960     		str	r1, [r7, #8]
 189 000a 3B60     		str	r3, [r7, #0]
 190 000c 1346     		mov	r3, r2	@ movhi
 191 000e FB80     		strh	r3, [r7, #6]	@ movhi
 435:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 436:../FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 437:../FreeRTOS/Source/tasks.c **** 
 438:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 439:../FreeRTOS/Source/tasks.c **** 	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 440:../FreeRTOS/Source/tasks.c **** 
 441:../FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 442:../FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 443:../FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 192              		.loc 1 443 0
 193 0010 FB88     		ldrh	r3, [r7, #6]
 194 0012 1846     		mov	r0, r3
 195 0014 396B     		ldr	r1, [r7, #48]
 196 0016 01F0CDF9 		bl	prvAllocateTCBAndStack
 197 001a 0346     		mov	r3, r0
 198 001c BB61     		str	r3, [r7, #24]
 444:../FreeRTOS/Source/tasks.c **** 
 445:../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 199              		.loc 1 445 0
 200 001e BB69     		ldr	r3, [r7, #24]
 201 0020 002B     		cmp	r3, #0
 202 0022 00F0A580 		beq	.L2
 203              	.LBB2:
 446:../FreeRTOS/Source/tasks.c **** 	{
 447:../FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 448:../FreeRTOS/Source/tasks.c **** 
 449:../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 450:../FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 451:../FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 452:../FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 453:../FreeRTOS/Source/tasks.c **** 			{
 454:../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 455:../FreeRTOS/Source/tasks.c **** 			}
 456:../FreeRTOS/Source/tasks.c **** 			else
 457:../FreeRTOS/Source/tasks.c **** 			{
 458:../FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 459:../FreeRTOS/Source/tasks.c **** 			}
 460:../FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 461:../FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 462:../FreeRTOS/Source/tasks.c **** 
 463:../FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 464:../FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 465:../FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 466:../FreeRTOS/Source/tasks.c **** 		required by the port. */
 467:../FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 468:../FreeRTOS/Source/tasks.c **** 		{
 469:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 204              		.loc 1 469 0
 205 0026 BB69     		ldr	r3, [r7, #24]
 206 0028 1A6B     		ldr	r2, [r3, #48]
 207 002a FB88     		ldrh	r3, [r7, #6]
 208 002c 03F1FF33 		add	r3, r3, #-1
 209 0030 4FEA8303 		lsl	r3, r3, #2
 210 0034 D318     		adds	r3, r2, r3
 211 0036 7B61     		str	r3, [r7, #20]
 470:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 212              		.loc 1 470 0
 213 0038 7B69     		ldr	r3, [r7, #20]
 214 003a 23F00703 		bic	r3, r3, #7
 215 003e 7B61     		str	r3, [r7, #20]
 471:../FreeRTOS/Source/tasks.c **** 
 472:../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 473:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 474:../FreeRTOS/Source/tasks.c **** 		}
 475:../FreeRTOS/Source/tasks.c **** 		#else
 476:../FreeRTOS/Source/tasks.c **** 		{
 477:../FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 478:../FreeRTOS/Source/tasks.c **** 			
 479:../FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 480:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 481:../FreeRTOS/Source/tasks.c **** 
 482:../FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 483:../FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 484:../FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 485:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 486:../FreeRTOS/Source/tasks.c **** 		}
 487:../FreeRTOS/Source/tasks.c **** 		#endif
 488:../FreeRTOS/Source/tasks.c **** 
 489:../FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 490:../FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 216              		.loc 1 490 0
 217 0040 FB88     		ldrh	r3, [r7, #6]
 218 0042 0093     		str	r3, [sp, #0]
 219 0044 B869     		ldr	r0, [r7, #24]
 220 0046 B968     		ldr	r1, [r7, #8]
 221 0048 BA6A     		ldr	r2, [r7, #40]
 222 004a 7B6B     		ldr	r3, [r7, #52]
 223 004c 01F08AF8 		bl	prvInitialiseTCBVariables
 491:../FreeRTOS/Source/tasks.c **** 
 492:../FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 493:../FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 494:../FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 495:../FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 496:../FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 497:../FreeRTOS/Source/tasks.c **** 		{
 498:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 499:../FreeRTOS/Source/tasks.c **** 		}
 500:../FreeRTOS/Source/tasks.c **** 		#else
 501:../FreeRTOS/Source/tasks.c **** 		{
 502:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 224              		.loc 1 502 0
 225 0050 7869     		ldr	r0, [r7, #20]
 226 0052 F968     		ldr	r1, [r7, #12]
 227 0054 3A68     		ldr	r2, [r7, #0]
 228 0056 FFF7FEFF 		bl	pxPortInitialiseStack
 229 005a 0246     		mov	r2, r0
 230 005c BB69     		ldr	r3, [r7, #24]
 231 005e 1A60     		str	r2, [r3, #0]
 503:../FreeRTOS/Source/tasks.c **** 		}
 504:../FreeRTOS/Source/tasks.c **** 		#endif
 505:../FreeRTOS/Source/tasks.c **** 
 506:../FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 507:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT
 508:../FreeRTOS/Source/tasks.c **** 
 509:../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 232              		.loc 1 509 0
 233 0060 FB6A     		ldr	r3, [r7, #44]
 234 0062 002B     		cmp	r3, #0
 235 0064 02D0     		beq	.L3
 510:../FreeRTOS/Source/tasks.c **** 		{
 511:../FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 512:../FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 513:../FreeRTOS/Source/tasks.c **** 			required.*/
 514:../FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 236              		.loc 1 514 0
 237 0066 FB6A     		ldr	r3, [r7, #44]
 238 0068 BA69     		ldr	r2, [r7, #24]
 239 006a 1A60     		str	r2, [r3, #0]
 240              	.L3:
 515:../FreeRTOS/Source/tasks.c **** 		}
 516:../FreeRTOS/Source/tasks.c **** 		
 517:../FreeRTOS/Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 518:../FreeRTOS/Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 519:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 241              		.loc 1 519 0
 242 006c FFF7FEFF 		bl	vPortEnterCritical
 520:../FreeRTOS/Source/tasks.c **** 		{
 521:../FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 243              		.loc 1 521 0
 244 0070 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 245 0074 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 246 0078 1B68     		ldr	r3, [r3, #0]
 247 007a 03F10102 		add	r2, r3, #1
 248 007e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 249 0082 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 250 0086 1A60     		str	r2, [r3, #0]
 522:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 251              		.loc 1 522 0
 252 0088 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 253 008c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 254 0090 1B68     		ldr	r3, [r3, #0]
 255 0092 002B     		cmp	r3, #0
 256 0094 0FD1     		bne	.L4
 523:../FreeRTOS/Source/tasks.c **** 			{
 524:../FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 525:../FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 526:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 257              		.loc 1 526 0
 258 0096 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 259 009a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 260 009e BA69     		ldr	r2, [r7, #24]
 261 00a0 1A60     		str	r2, [r3, #0]
 527:../FreeRTOS/Source/tasks.c **** 
 528:../FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 262              		.loc 1 528 0
 263 00a2 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 264 00a6 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 265 00aa 1B68     		ldr	r3, [r3, #0]
 266 00ac 012B     		cmp	r3, #1
 267 00ae 18D1     		bne	.L5
 529:../FreeRTOS/Source/tasks.c **** 				{
 530:../FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 531:../FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 532:../FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 533:../FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 268              		.loc 1 533 0
 269 00b0 01F09CF8 		bl	prvInitialiseTaskLists
 270 00b4 15E0     		b	.L5
 271              	.L4:
 534:../FreeRTOS/Source/tasks.c **** 				}
 535:../FreeRTOS/Source/tasks.c **** 			}
 536:../FreeRTOS/Source/tasks.c **** 			else
 537:../FreeRTOS/Source/tasks.c **** 			{
 538:../FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 539:../FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 540:../FreeRTOS/Source/tasks.c **** 				so far. */
 541:../FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 272              		.loc 1 541 0
 273 00b6 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 274 00ba C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 275 00be 1B68     		ldr	r3, [r3, #0]
 276 00c0 002B     		cmp	r3, #0
 277 00c2 0ED1     		bne	.L5
 542:../FreeRTOS/Source/tasks.c **** 				{
 543:../FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 278              		.loc 1 543 0
 279 00c4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 280 00c8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 281 00cc 1B68     		ldr	r3, [r3, #0]
 282 00ce DA6A     		ldr	r2, [r3, #44]
 283 00d0 BB6A     		ldr	r3, [r7, #40]
 284 00d2 9A42     		cmp	r2, r3
 285 00d4 05D8     		bhi	.L5
 544:../FreeRTOS/Source/tasks.c **** 					{
 545:../FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 286              		.loc 1 545 0
 287 00d6 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 288 00da C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 289 00de BA69     		ldr	r2, [r7, #24]
 290 00e0 1A60     		str	r2, [r3, #0]
 291              	.L5:
 546:../FreeRTOS/Source/tasks.c **** 					}
 547:../FreeRTOS/Source/tasks.c **** 				}
 548:../FreeRTOS/Source/tasks.c **** 			}
 549:../FreeRTOS/Source/tasks.c **** 
 550:../FreeRTOS/Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 551:../FreeRTOS/Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 552:../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 292              		.loc 1 552 0
 293 00e2 BB69     		ldr	r3, [r7, #24]
 294 00e4 DA6A     		ldr	r2, [r3, #44]
 295 00e6 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 296 00ea C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 297 00ee 1B68     		ldr	r3, [r3, #0]
 298 00f0 9A42     		cmp	r2, r3
 299 00f2 06D9     		bls	.L6
 553:../FreeRTOS/Source/tasks.c **** 			{
 554:../FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 300              		.loc 1 554 0
 301 00f4 BB69     		ldr	r3, [r7, #24]
 302 00f6 DA6A     		ldr	r2, [r3, #44]
 303 00f8 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 304 00fc C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 305 0100 1A60     		str	r2, [r3, #0]
 306              	.L6:
 555:../FreeRTOS/Source/tasks.c **** 			}
 556:../FreeRTOS/Source/tasks.c **** 
 557:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 558:../FreeRTOS/Source/tasks.c **** 			{
 559:../FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 560:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 561:../FreeRTOS/Source/tasks.c **** 			}
 562:../FreeRTOS/Source/tasks.c **** 			#endif
 563:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 307              		.loc 1 563 0
 308 0102 40F20003 		movw	r3, #:lower16:uxTaskNumber
 309 0106 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 310 010a 1B68     		ldr	r3, [r3, #0]
 311 010c 03F10102 		add	r2, r3, #1
 312 0110 40F20003 		movw	r3, #:lower16:uxTaskNumber
 313 0114 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 314 0118 1A60     		str	r2, [r3, #0]
 564:../FreeRTOS/Source/tasks.c **** 
 565:../FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 315              		.loc 1 565 0
 316 011a BB69     		ldr	r3, [r7, #24]
 317 011c DA6A     		ldr	r2, [r3, #44]
 318 011e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 319 0122 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 320 0126 1B68     		ldr	r3, [r3, #0]
 321 0128 9A42     		cmp	r2, r3
 322 012a 06D9     		bls	.L7
 323              		.loc 1 565 0 is_stmt 0 discriminator 1
 324 012c BB69     		ldr	r3, [r7, #24]
 325 012e DA6A     		ldr	r2, [r3, #44]
 326 0130 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 327 0134 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 328 0138 1A60     		str	r2, [r3, #0]
 329              	.L7:
 330              		.loc 1 565 0 discriminator 2
 331 013a BB69     		ldr	r3, [r7, #24]
 332 013c DA6A     		ldr	r2, [r3, #44]
 333 013e 1346     		mov	r3, r2
 334 0140 4FEA8303 		lsl	r3, r3, #2
 335 0144 9B18     		adds	r3, r3, r2
 336 0146 4FEA8303 		lsl	r3, r3, #2
 337 014a 1A46     		mov	r2, r3
 338 014c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 339 0150 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 340 0154 D218     		adds	r2, r2, r3
 341 0156 BB69     		ldr	r3, [r7, #24]
 342 0158 03F10403 		add	r3, r3, #4
 343 015c 1046     		mov	r0, r2
 344 015e 1946     		mov	r1, r3
 345 0160 FFF7FEFF 		bl	vListInsertEnd
 566:../FreeRTOS/Source/tasks.c **** 
 567:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 346              		.loc 1 567 0 is_stmt 1 discriminator 2
 347 0164 4FF00103 		mov	r3, #1
 348 0168 FB61     		str	r3, [r7, #28]
 568:../FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 569:../FreeRTOS/Source/tasks.c **** 		}
 570:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 349              		.loc 1 570 0 discriminator 2
 350 016a FFF7FEFF 		bl	vPortExitCritical
 351 016e 02E0     		b	.L8
 352              	.L2:
 353              	.LBE2:
 571:../FreeRTOS/Source/tasks.c **** 	}
 572:../FreeRTOS/Source/tasks.c **** 	else
 573:../FreeRTOS/Source/tasks.c **** 	{
 574:../FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 354              		.loc 1 574 0
 355 0170 4FF0FF33 		mov	r3, #-1
 356 0174 FB61     		str	r3, [r7, #28]
 357              	.L8:
 575:../FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 576:../FreeRTOS/Source/tasks.c **** 	}
 577:../FreeRTOS/Source/tasks.c **** 
 578:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 358              		.loc 1 578 0
 359 0176 FB69     		ldr	r3, [r7, #28]
 360 0178 012B     		cmp	r3, #1
 361 017a 11D1     		bne	.L9
 579:../FreeRTOS/Source/tasks.c **** 	{
 580:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 362              		.loc 1 580 0
 363 017c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 364 0180 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 365 0184 1B68     		ldr	r3, [r3, #0]
 366 0186 002B     		cmp	r3, #0
 367 0188 0AD0     		beq	.L9
 581:../FreeRTOS/Source/tasks.c **** 		{
 582:../FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 583:../FreeRTOS/Source/tasks.c **** 			then it should run now. */
 584:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 368              		.loc 1 584 0
 369 018a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 370 018e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 371 0192 1B68     		ldr	r3, [r3, #0]
 372 0194 DA6A     		ldr	r2, [r3, #44]
 373 0196 BB6A     		ldr	r3, [r7, #40]
 374 0198 9A42     		cmp	r2, r3
 375 019a 01D2     		bcs	.L9
 585:../FreeRTOS/Source/tasks.c **** 			{
 586:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 376              		.loc 1 586 0
 377 019c FFF7FEFF 		bl	vPortYieldFromISR
 378              	.L9:
 587:../FreeRTOS/Source/tasks.c **** 			}
 588:../FreeRTOS/Source/tasks.c **** 		}
 589:../FreeRTOS/Source/tasks.c **** 	}
 590:../FreeRTOS/Source/tasks.c **** 
 591:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 379              		.loc 1 591 0
 380 01a0 FB69     		ldr	r3, [r7, #28]
 592:../FreeRTOS/Source/tasks.c **** }
 381              		.loc 1 592 0
 382 01a2 1846     		mov	r0, r3
 383 01a4 07F12007 		add	r7, r7, #32
 384 01a8 BD46     		mov	sp, r7
 385 01aa 80BD     		pop	{r7, pc}
 386              		.cfi_endproc
 387              	.LFE110:
 389              		.align	2
 390              		.global	vTaskDelete
 391              		.thumb
 392              		.thumb_func
 394              	vTaskDelete:
 395              	.LFB111:
 593:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:../FreeRTOS/Source/tasks.c **** 
 595:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 596:../FreeRTOS/Source/tasks.c **** 
 597:../FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 598:../FreeRTOS/Source/tasks.c **** 	{
 396              		.loc 1 598 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 16
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400 01ac 80B5     		push	{r7, lr}
 401              	.LCFI3:
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 14, -4
 404              		.cfi_offset 7, -8
 405 01ae 84B0     		sub	sp, sp, #16
 406              	.LCFI4:
 407              		.cfi_def_cfa_offset 24
 408 01b0 00AF     		add	r7, sp, #0
 409              	.LCFI5:
 410              		.cfi_def_cfa_register 7
 411 01b2 7860     		str	r0, [r7, #4]
 599:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 600:../FreeRTOS/Source/tasks.c **** 
 601:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 412              		.loc 1 601 0
 413 01b4 FFF7FEFF 		bl	vPortEnterCritical
 602:../FreeRTOS/Source/tasks.c **** 		{
 603:../FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 604:../FreeRTOS/Source/tasks.c **** 			deleted. */
 605:../FreeRTOS/Source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 414              		.loc 1 605 0
 415 01b8 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 416 01bc C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 417 01c0 1B68     		ldr	r3, [r3, #0]
 418 01c2 7A68     		ldr	r2, [r7, #4]
 419 01c4 9A42     		cmp	r2, r3
 420 01c6 02D1     		bne	.L11
 606:../FreeRTOS/Source/tasks.c **** 			{
 607:../FreeRTOS/Source/tasks.c **** 				pxTaskToDelete = NULL;
 421              		.loc 1 607 0
 422 01c8 4FF00003 		mov	r3, #0
 423 01cc 7B60     		str	r3, [r7, #4]
 424              	.L11:
 608:../FreeRTOS/Source/tasks.c **** 			}
 609:../FreeRTOS/Source/tasks.c **** 
 610:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 611:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 425              		.loc 1 611 0
 426 01ce 7B68     		ldr	r3, [r7, #4]
 427 01d0 002B     		cmp	r3, #0
 428 01d2 05D1     		bne	.L12
 429              		.loc 1 611 0 is_stmt 0 discriminator 1
 430 01d4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 431 01d8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 432 01dc 1B68     		ldr	r3, [r3, #0]
 433 01de 00E0     		b	.L13
 434              	.L12:
 435              		.loc 1 611 0 discriminator 2
 436 01e0 7B68     		ldr	r3, [r7, #4]
 437              	.L13:
 438              		.loc 1 611 0 discriminator 3
 439 01e2 FB60     		str	r3, [r7, #12]
 612:../FreeRTOS/Source/tasks.c **** 
 613:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 614:../FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 615:../FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 616:../FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 617:../FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 440              		.loc 1 617 0 is_stmt 1 discriminator 3
 441 01e4 FB68     		ldr	r3, [r7, #12]
 442 01e6 03F10403 		add	r3, r3, #4
 443 01ea 1846     		mov	r0, r3
 444 01ec FFF7FEFF 		bl	vListRemove
 618:../FreeRTOS/Source/tasks.c **** 
 619:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 620:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 445              		.loc 1 620 0 discriminator 3
 446 01f0 FB68     		ldr	r3, [r7, #12]
 447 01f2 9B6A     		ldr	r3, [r3, #40]
 448 01f4 002B     		cmp	r3, #0
 449 01f6 05D0     		beq	.L14
 621:../FreeRTOS/Source/tasks.c **** 			{
 622:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 450              		.loc 1 622 0
 451 01f8 FB68     		ldr	r3, [r7, #12]
 452 01fa 03F11803 		add	r3, r3, #24
 453 01fe 1846     		mov	r0, r3
 454 0200 FFF7FEFF 		bl	vListRemove
 455              	.L14:
 623:../FreeRTOS/Source/tasks.c **** 			}
 624:../FreeRTOS/Source/tasks.c **** 
 625:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 456              		.loc 1 625 0
 457 0204 FB68     		ldr	r3, [r7, #12]
 458 0206 03F10403 		add	r3, r3, #4
 459 020a 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 460 020e C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 461 0212 1946     		mov	r1, r3
 462 0214 FFF7FEFF 		bl	vListInsertEnd
 626:../FreeRTOS/Source/tasks.c **** 
 627:../FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 628:../FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 629:../FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 630:../FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 463              		.loc 1 630 0
 464 0218 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 465 021c C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 466 0220 1B68     		ldr	r3, [r3, #0]
 467 0222 03F10102 		add	r2, r3, #1
 468 0226 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 469 022a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 470 022e 1A60     		str	r2, [r3, #0]
 631:../FreeRTOS/Source/tasks.c **** 
 632:../FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 633:../FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 634:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 471              		.loc 1 634 0
 472 0230 40F20003 		movw	r3, #:lower16:uxTaskNumber
 473 0234 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 474 0238 1B68     		ldr	r3, [r3, #0]
 475 023a 03F10102 		add	r2, r3, #1
 476 023e 40F20003 		movw	r3, #:lower16:uxTaskNumber
 477 0242 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 478 0246 1A60     		str	r2, [r3, #0]
 635:../FreeRTOS/Source/tasks.c **** 
 636:../FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 637:../FreeRTOS/Source/tasks.c **** 		}
 638:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 479              		.loc 1 638 0
 480 0248 FFF7FEFF 		bl	vPortExitCritical
 639:../FreeRTOS/Source/tasks.c **** 
 640:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 641:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 481              		.loc 1 641 0
 482 024c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 483 0250 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 484 0254 1B68     		ldr	r3, [r3, #0]
 485 0256 002B     		cmp	r3, #0
 486 0258 04D0     		beq	.L10
 642:../FreeRTOS/Source/tasks.c **** 		{
 643:../FreeRTOS/Source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 487              		.loc 1 643 0
 488 025a 7B68     		ldr	r3, [r7, #4]
 489 025c 002B     		cmp	r3, #0
 490 025e 01D1     		bne	.L10
 644:../FreeRTOS/Source/tasks.c **** 			{
 645:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 491              		.loc 1 645 0
 492 0260 FFF7FEFF 		bl	vPortYieldFromISR
 493              	.L10:
 646:../FreeRTOS/Source/tasks.c **** 			}
 647:../FreeRTOS/Source/tasks.c **** 		}
 648:../FreeRTOS/Source/tasks.c **** 	}
 494              		.loc 1 648 0
 495 0264 07F11007 		add	r7, r7, #16
 496 0268 BD46     		mov	sp, r7
 497 026a 80BD     		pop	{r7, pc}
 498              		.cfi_endproc
 499              	.LFE111:
 501              		.align	2
 502              		.global	vTaskDelayUntil
 503              		.thumb
 504              		.thumb_func
 506              	vTaskDelayUntil:
 507              	.LFB112:
 649:../FreeRTOS/Source/tasks.c **** 
 650:../FreeRTOS/Source/tasks.c **** #endif
 651:../FreeRTOS/Source/tasks.c **** 
 652:../FreeRTOS/Source/tasks.c **** 
 653:../FreeRTOS/Source/tasks.c **** 
 654:../FreeRTOS/Source/tasks.c **** 
 655:../FreeRTOS/Source/tasks.c **** 
 656:../FreeRTOS/Source/tasks.c **** 
 657:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 658:../FreeRTOS/Source/tasks.c ****  * TASK CONTROL API documented in task.h
 659:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 660:../FreeRTOS/Source/tasks.c **** 
 661:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 662:../FreeRTOS/Source/tasks.c **** 
 663:../FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 664:../FreeRTOS/Source/tasks.c **** 	{
 508              		.loc 1 664 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 24
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 026c 80B5     		push	{r7, lr}
 513              	.LCFI6:
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 14, -4
 516              		.cfi_offset 7, -8
 517 026e 86B0     		sub	sp, sp, #24
 518              	.LCFI7:
 519              		.cfi_def_cfa_offset 32
 520 0270 00AF     		add	r7, sp, #0
 521              	.LCFI8:
 522              		.cfi_def_cfa_register 7
 523 0272 7860     		str	r0, [r7, #4]
 524 0274 3960     		str	r1, [r7, #0]
 665:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 666:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 525              		.loc 1 666 0
 526 0276 4FF00003 		mov	r3, #0
 527 027a 7B61     		str	r3, [r7, #20]
 667:../FreeRTOS/Source/tasks.c **** 
 668:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 669:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 670:../FreeRTOS/Source/tasks.c **** 
 671:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 528              		.loc 1 671 0
 529 027c FFF7FEFF 		bl	vTaskSuspendAll
 672:../FreeRTOS/Source/tasks.c **** 		{
 673:../FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 674:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 530              		.loc 1 674 0
 531 0280 7B68     		ldr	r3, [r7, #4]
 532 0282 1A68     		ldr	r2, [r3, #0]
 533 0284 3B68     		ldr	r3, [r7, #0]
 534 0286 D318     		adds	r3, r2, r3
 535 0288 3B61     		str	r3, [r7, #16]
 675:../FreeRTOS/Source/tasks.c **** 
 676:../FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 536              		.loc 1 676 0
 537 028a 7B68     		ldr	r3, [r7, #4]
 538 028c 1A68     		ldr	r2, [r3, #0]
 539 028e 40F20003 		movw	r3, #:lower16:xTickCount
 540 0292 C0F20003 		movt	r3, #:upper16:xTickCount
 541 0296 1B68     		ldr	r3, [r3, #0]
 542 0298 9A42     		cmp	r2, r3
 543 029a 10D9     		bls	.L17
 677:../FreeRTOS/Source/tasks.c **** 			{
 678:../FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 679:../FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 680:../FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 681:../FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 682:../FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 683:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 544              		.loc 1 683 0
 545 029c 7B68     		ldr	r3, [r7, #4]
 546 029e 1A68     		ldr	r2, [r3, #0]
 547 02a0 3B69     		ldr	r3, [r7, #16]
 548 02a2 9A42     		cmp	r2, r3
 549 02a4 1BD9     		bls	.L18
 550              		.loc 1 683 0 is_stmt 0 discriminator 1
 551 02a6 40F20003 		movw	r3, #:lower16:xTickCount
 552 02aa C0F20003 		movt	r3, #:upper16:xTickCount
 553 02ae 1B68     		ldr	r3, [r3, #0]
 554 02b0 3A69     		ldr	r2, [r7, #16]
 555 02b2 9A42     		cmp	r2, r3
 556 02b4 13D9     		bls	.L18
 684:../FreeRTOS/Source/tasks.c **** 				{
 685:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 557              		.loc 1 685 0 is_stmt 1
 558 02b6 4FF00103 		mov	r3, #1
 559 02ba 7B61     		str	r3, [r7, #20]
 560 02bc 0FE0     		b	.L18
 561              	.L17:
 686:../FreeRTOS/Source/tasks.c **** 				}
 687:../FreeRTOS/Source/tasks.c **** 			}
 688:../FreeRTOS/Source/tasks.c **** 			else
 689:../FreeRTOS/Source/tasks.c **** 			{
 690:../FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 691:../FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 692:../FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 693:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 562              		.loc 1 693 0
 563 02be 7B68     		ldr	r3, [r7, #4]
 564 02c0 1A68     		ldr	r2, [r3, #0]
 565 02c2 3B69     		ldr	r3, [r7, #16]
 566 02c4 9A42     		cmp	r2, r3
 567 02c6 07D8     		bhi	.L19
 568              		.loc 1 693 0 is_stmt 0 discriminator 1
 569 02c8 40F20003 		movw	r3, #:lower16:xTickCount
 570 02cc C0F20003 		movt	r3, #:upper16:xTickCount
 571 02d0 1B68     		ldr	r3, [r3, #0]
 572 02d2 3A69     		ldr	r2, [r7, #16]
 573 02d4 9A42     		cmp	r2, r3
 574 02d6 02D9     		bls	.L18
 575              	.L19:
 694:../FreeRTOS/Source/tasks.c **** 				{
 695:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 576              		.loc 1 695 0 is_stmt 1
 577 02d8 4FF00103 		mov	r3, #1
 578 02dc 7B61     		str	r3, [r7, #20]
 579              	.L18:
 696:../FreeRTOS/Source/tasks.c **** 				}
 697:../FreeRTOS/Source/tasks.c **** 			}
 698:../FreeRTOS/Source/tasks.c **** 
 699:../FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 700:../FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 580              		.loc 1 700 0
 581 02de 7B68     		ldr	r3, [r7, #4]
 582 02e0 3A69     		ldr	r2, [r7, #16]
 583 02e2 1A60     		str	r2, [r3, #0]
 701:../FreeRTOS/Source/tasks.c **** 
 702:../FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 584              		.loc 1 702 0
 585 02e4 7B69     		ldr	r3, [r7, #20]
 586 02e6 002B     		cmp	r3, #0
 587 02e8 0CD0     		beq	.L20
 703:../FreeRTOS/Source/tasks.c **** 			{
 704:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 705:../FreeRTOS/Source/tasks.c **** 
 706:../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 707:../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 708:../FreeRTOS/Source/tasks.c **** 				both lists. */
 709:../FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 588              		.loc 1 709 0
 589 02ea 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 590 02ee C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 591 02f2 1B68     		ldr	r3, [r3, #0]
 592 02f4 03F10403 		add	r3, r3, #4
 593 02f8 1846     		mov	r0, r3
 594 02fa FFF7FEFF 		bl	vListRemove
 710:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 595              		.loc 1 710 0
 596 02fe 3869     		ldr	r0, [r7, #16]
 597 0300 01F012F8 		bl	prvAddCurrentTaskToDelayedList
 598              	.L20:
 711:../FreeRTOS/Source/tasks.c **** 			}
 712:../FreeRTOS/Source/tasks.c **** 		}
 713:../FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 599              		.loc 1 713 0
 600 0304 FFF7FEFF 		bl	xTaskResumeAll
 601 0308 0346     		mov	r3, r0
 602 030a FB60     		str	r3, [r7, #12]
 714:../FreeRTOS/Source/tasks.c **** 
 715:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 716:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 717:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 603              		.loc 1 717 0
 604 030c FB68     		ldr	r3, [r7, #12]
 605 030e 002B     		cmp	r3, #0
 606 0310 01D1     		bne	.L16
 718:../FreeRTOS/Source/tasks.c **** 		{
 719:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 607              		.loc 1 719 0
 608 0312 FFF7FEFF 		bl	vPortYieldFromISR
 609              	.L16:
 720:../FreeRTOS/Source/tasks.c **** 		}
 721:../FreeRTOS/Source/tasks.c **** 	}
 610              		.loc 1 721 0
 611 0316 07F11807 		add	r7, r7, #24
 612 031a BD46     		mov	sp, r7
 613 031c 80BD     		pop	{r7, pc}
 614              		.cfi_endproc
 615              	.LFE112:
 617 031e 00BF     		.align	2
 618              		.global	vTaskDelay
 619              		.thumb
 620              		.thumb_func
 622              	vTaskDelay:
 623              	.LFB113:
 722:../FreeRTOS/Source/tasks.c **** 
 723:../FreeRTOS/Source/tasks.c **** #endif
 724:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 725:../FreeRTOS/Source/tasks.c **** 
 726:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 727:../FreeRTOS/Source/tasks.c **** 
 728:../FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 729:../FreeRTOS/Source/tasks.c **** 	{
 624              		.loc 1 729 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 16
 627              		@ frame_needed = 1, uses_anonymous_args = 0
 628 0320 80B5     		push	{r7, lr}
 629              	.LCFI9:
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 14, -4
 632              		.cfi_offset 7, -8
 633 0322 84B0     		sub	sp, sp, #16
 634              	.LCFI10:
 635              		.cfi_def_cfa_offset 24
 636 0324 00AF     		add	r7, sp, #0
 637              	.LCFI11:
 638              		.cfi_def_cfa_register 7
 639 0326 7860     		str	r0, [r7, #4]
 730:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 731:../FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 640              		.loc 1 731 0
 641 0328 4FF00003 		mov	r3, #0
 642 032c FB60     		str	r3, [r7, #12]
 732:../FreeRTOS/Source/tasks.c **** 
 733:../FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 734:../FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 643              		.loc 1 734 0
 644 032e 7B68     		ldr	r3, [r7, #4]
 645 0330 002B     		cmp	r3, #0
 646 0332 1AD0     		beq	.L23
 735:../FreeRTOS/Source/tasks.c **** 		{
 736:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 647              		.loc 1 736 0
 648 0334 FFF7FEFF 		bl	vTaskSuspendAll
 737:../FreeRTOS/Source/tasks.c **** 			{
 738:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 739:../FreeRTOS/Source/tasks.c **** 
 740:../FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 741:../FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 742:../FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 743:../FreeRTOS/Source/tasks.c **** 				is resumed.
 744:../FreeRTOS/Source/tasks.c **** 
 745:../FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 746:../FreeRTOS/Source/tasks.c **** 				executing task. */
 747:../FreeRTOS/Source/tasks.c **** 
 748:../FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 749:../FreeRTOS/Source/tasks.c **** 				not a problem. */
 750:../FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 649              		.loc 1 750 0
 650 0338 40F20003 		movw	r3, #:lower16:xTickCount
 651 033c C0F20003 		movt	r3, #:upper16:xTickCount
 652 0340 1A68     		ldr	r2, [r3, #0]
 653 0342 7B68     		ldr	r3, [r7, #4]
 654 0344 D318     		adds	r3, r2, r3
 655 0346 BB60     		str	r3, [r7, #8]
 751:../FreeRTOS/Source/tasks.c **** 
 752:../FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 753:../FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 754:../FreeRTOS/Source/tasks.c **** 				both lists. */
 755:../FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 656              		.loc 1 755 0
 657 0348 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 658 034c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 659 0350 1B68     		ldr	r3, [r3, #0]
 660 0352 03F10403 		add	r3, r3, #4
 661 0356 1846     		mov	r0, r3
 662 0358 FFF7FEFF 		bl	vListRemove
 756:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 663              		.loc 1 756 0
 664 035c B868     		ldr	r0, [r7, #8]
 665 035e 00F0E3FF 		bl	prvAddCurrentTaskToDelayedList
 757:../FreeRTOS/Source/tasks.c **** 			}
 758:../FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 666              		.loc 1 758 0
 667 0362 FFF7FEFF 		bl	xTaskResumeAll
 668 0366 0346     		mov	r3, r0
 669 0368 FB60     		str	r3, [r7, #12]
 670              	.L23:
 759:../FreeRTOS/Source/tasks.c **** 		}
 760:../FreeRTOS/Source/tasks.c **** 
 761:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 762:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 763:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 671              		.loc 1 763 0
 672 036a FB68     		ldr	r3, [r7, #12]
 673 036c 002B     		cmp	r3, #0
 674 036e 01D1     		bne	.L22
 764:../FreeRTOS/Source/tasks.c **** 		{
 765:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 675              		.loc 1 765 0
 676 0370 FFF7FEFF 		bl	vPortYieldFromISR
 677              	.L22:
 766:../FreeRTOS/Source/tasks.c **** 		}
 767:../FreeRTOS/Source/tasks.c **** 	}
 678              		.loc 1 767 0
 679 0374 07F11007 		add	r7, r7, #16
 680 0378 BD46     		mov	sp, r7
 681 037a 80BD     		pop	{r7, pc}
 682              		.cfi_endproc
 683              	.LFE113:
 685              		.align	2
 686              		.global	uxTaskPriorityGet
 687              		.thumb
 688              		.thumb_func
 690              	uxTaskPriorityGet:
 691              	.LFB114:
 768:../FreeRTOS/Source/tasks.c **** 
 769:../FreeRTOS/Source/tasks.c **** #endif
 770:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 771:../FreeRTOS/Source/tasks.c **** 
 772:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 773:../FreeRTOS/Source/tasks.c **** 
 774:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 775:../FreeRTOS/Source/tasks.c **** 	{
 692              		.loc 1 775 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 16
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696 037c 80B5     		push	{r7, lr}
 697              	.LCFI12:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 14, -4
 700              		.cfi_offset 7, -8
 701 037e 84B0     		sub	sp, sp, #16
 702              	.LCFI13:
 703              		.cfi_def_cfa_offset 24
 704 0380 00AF     		add	r7, sp, #0
 705              	.LCFI14:
 706              		.cfi_def_cfa_register 7
 707 0382 7860     		str	r0, [r7, #4]
 776:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 777:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 778:../FreeRTOS/Source/tasks.c **** 
 779:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 708              		.loc 1 779 0
 709 0384 FFF7FEFF 		bl	vPortEnterCritical
 780:../FreeRTOS/Source/tasks.c **** 		{
 781:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 782:../FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 783:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 710              		.loc 1 783 0
 711 0388 7B68     		ldr	r3, [r7, #4]
 712 038a 002B     		cmp	r3, #0
 713 038c 05D1     		bne	.L26
 714              		.loc 1 783 0 is_stmt 0 discriminator 1
 715 038e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 716 0392 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 717 0396 1B68     		ldr	r3, [r3, #0]
 718 0398 00E0     		b	.L27
 719              	.L26:
 720              		.loc 1 783 0 discriminator 2
 721 039a 7B68     		ldr	r3, [r7, #4]
 722              	.L27:
 723              		.loc 1 783 0 discriminator 3
 724 039c FB60     		str	r3, [r7, #12]
 784:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 725              		.loc 1 784 0 is_stmt 1 discriminator 3
 726 039e FB68     		ldr	r3, [r7, #12]
 727 03a0 DB6A     		ldr	r3, [r3, #44]
 728 03a2 BB60     		str	r3, [r7, #8]
 785:../FreeRTOS/Source/tasks.c **** 		}
 786:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 729              		.loc 1 786 0 discriminator 3
 730 03a4 FFF7FEFF 		bl	vPortExitCritical
 787:../FreeRTOS/Source/tasks.c **** 
 788:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 731              		.loc 1 788 0 discriminator 3
 732 03a8 BB68     		ldr	r3, [r7, #8]
 789:../FreeRTOS/Source/tasks.c **** 	}
 733              		.loc 1 789 0 discriminator 3
 734 03aa 1846     		mov	r0, r3
 735 03ac 07F11007 		add	r7, r7, #16
 736 03b0 BD46     		mov	sp, r7
 737 03b2 80BD     		pop	{r7, pc}
 738              		.cfi_endproc
 739              	.LFE114:
 741              		.align	2
 742              		.global	vTaskPrioritySet
 743              		.thumb
 744              		.thumb_func
 746              	vTaskPrioritySet:
 747              	.LFB115:
 790:../FreeRTOS/Source/tasks.c **** 
 791:../FreeRTOS/Source/tasks.c **** #endif
 792:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 793:../FreeRTOS/Source/tasks.c **** 
 794:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 795:../FreeRTOS/Source/tasks.c **** 
 796:../FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 797:../FreeRTOS/Source/tasks.c **** 	{
 748              		.loc 1 797 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 24
 751              		@ frame_needed = 1, uses_anonymous_args = 0
 752 03b4 80B5     		push	{r7, lr}
 753              	.LCFI15:
 754              		.cfi_def_cfa_offset 8
 755              		.cfi_offset 14, -4
 756              		.cfi_offset 7, -8
 757 03b6 86B0     		sub	sp, sp, #24
 758              	.LCFI16:
 759              		.cfi_def_cfa_offset 32
 760 03b8 00AF     		add	r7, sp, #0
 761              	.LCFI17:
 762              		.cfi_def_cfa_register 7
 763 03ba 7860     		str	r0, [r7, #4]
 764 03bc 3960     		str	r1, [r7, #0]
 798:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 799:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority;
 800:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 765              		.loc 1 800 0
 766 03be 4FF00003 		mov	r3, #0
 767 03c2 7B61     		str	r3, [r7, #20]
 801:../FreeRTOS/Source/tasks.c **** 
 802:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 803:../FreeRTOS/Source/tasks.c **** 
 804:../FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 805:../FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 768              		.loc 1 805 0
 769 03c4 3B68     		ldr	r3, [r7, #0]
 770 03c6 092B     		cmp	r3, #9
 771 03c8 02D9     		bls	.L29
 806:../FreeRTOS/Source/tasks.c **** 		{
 807:../FreeRTOS/Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 772              		.loc 1 807 0
 773 03ca 4FF00903 		mov	r3, #9
 774 03ce 3B60     		str	r3, [r7, #0]
 775              	.L29:
 808:../FreeRTOS/Source/tasks.c **** 		}
 809:../FreeRTOS/Source/tasks.c **** 
 810:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 776              		.loc 1 810 0
 777 03d0 FFF7FEFF 		bl	vPortEnterCritical
 811:../FreeRTOS/Source/tasks.c **** 		{
 812:../FreeRTOS/Source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 778              		.loc 1 812 0
 779 03d4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 780 03d8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 781 03dc 1B68     		ldr	r3, [r3, #0]
 782 03de 7A68     		ldr	r2, [r7, #4]
 783 03e0 9A42     		cmp	r2, r3
 784 03e2 02D1     		bne	.L30
 813:../FreeRTOS/Source/tasks.c **** 			{
 814:../FreeRTOS/Source/tasks.c **** 				pxTask = NULL;
 785              		.loc 1 814 0
 786 03e4 4FF00003 		mov	r3, #0
 787 03e8 7B60     		str	r3, [r7, #4]
 788              	.L30:
 815:../FreeRTOS/Source/tasks.c **** 			}
 816:../FreeRTOS/Source/tasks.c **** 
 817:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 818:../FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 819:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 789              		.loc 1 819 0
 790 03ea 7B68     		ldr	r3, [r7, #4]
 791 03ec 002B     		cmp	r3, #0
 792 03ee 05D1     		bne	.L31
 793              		.loc 1 819 0 is_stmt 0 discriminator 1
 794 03f0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 795 03f4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 796 03f8 1B68     		ldr	r3, [r3, #0]
 797 03fa 00E0     		b	.L32
 798              	.L31:
 799              		.loc 1 819 0 discriminator 2
 800 03fc 7B68     		ldr	r3, [r7, #4]
 801              	.L32:
 802              		.loc 1 819 0 discriminator 3
 803 03fe 3B61     		str	r3, [r7, #16]
 820:../FreeRTOS/Source/tasks.c **** 
 821:../FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 822:../FreeRTOS/Source/tasks.c **** 
 823:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 824:../FreeRTOS/Source/tasks.c **** 			{
 825:../FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 804              		.loc 1 825 0 is_stmt 1 discriminator 3
 805 0400 3B69     		ldr	r3, [r7, #16]
 806 0402 5B6C     		ldr	r3, [r3, #68]
 807 0404 FB60     		str	r3, [r7, #12]
 826:../FreeRTOS/Source/tasks.c **** 			}
 827:../FreeRTOS/Source/tasks.c **** 			#else
 828:../FreeRTOS/Source/tasks.c **** 			{
 829:../FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 830:../FreeRTOS/Source/tasks.c **** 			}
 831:../FreeRTOS/Source/tasks.c **** 			#endif
 832:../FreeRTOS/Source/tasks.c **** 
 833:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 808              		.loc 1 833 0 discriminator 3
 809 0406 FA68     		ldr	r2, [r7, #12]
 810 0408 3B68     		ldr	r3, [r7, #0]
 811 040a 9A42     		cmp	r2, r3
 812 040c 62D0     		beq	.L33
 834:../FreeRTOS/Source/tasks.c **** 			{
 835:../FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 836:../FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 837:../FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 813              		.loc 1 837 0
 814 040e 3A68     		ldr	r2, [r7, #0]
 815 0410 FB68     		ldr	r3, [r7, #12]
 816 0412 9A42     		cmp	r2, r3
 817 0414 06D9     		bls	.L34
 838:../FreeRTOS/Source/tasks.c **** 				{
 839:../FreeRTOS/Source/tasks.c **** 					if( pxTask != NULL )
 818              		.loc 1 839 0
 819 0416 7B68     		ldr	r3, [r7, #4]
 820 0418 002B     		cmp	r3, #0
 821 041a 09D0     		beq	.L35
 840:../FreeRTOS/Source/tasks.c **** 					{
 841:../FreeRTOS/Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 842:../FreeRTOS/Source/tasks.c **** 						were raising the priority of the currently running task
 843:../FreeRTOS/Source/tasks.c **** 						there would be no need to switch as it must have already
 844:../FreeRTOS/Source/tasks.c **** 						been the highest priority task. */
 845:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 822              		.loc 1 845 0
 823 041c 4FF00103 		mov	r3, #1
 824 0420 7B61     		str	r3, [r7, #20]
 825 0422 05E0     		b	.L35
 826              	.L34:
 846:../FreeRTOS/Source/tasks.c **** 					}
 847:../FreeRTOS/Source/tasks.c **** 				}
 848:../FreeRTOS/Source/tasks.c **** 				else if( pxTask == NULL )
 827              		.loc 1 848 0
 828 0424 7B68     		ldr	r3, [r7, #4]
 829 0426 002B     		cmp	r3, #0
 830 0428 02D1     		bne	.L35
 849:../FreeRTOS/Source/tasks.c **** 				{
 850:../FreeRTOS/Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 851:../FreeRTOS/Source/tasks.c **** 					task of higher priority that is ready to execute. */
 852:../FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 831              		.loc 1 852 0
 832 042a 4FF00103 		mov	r3, #1
 833 042e 7B61     		str	r3, [r7, #20]
 834              	.L35:
 853:../FreeRTOS/Source/tasks.c **** 				}
 854:../FreeRTOS/Source/tasks.c **** 
 855:../FreeRTOS/Source/tasks.c **** 
 856:../FreeRTOS/Source/tasks.c **** 
 857:../FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 858:../FreeRTOS/Source/tasks.c **** 				{
 859:../FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 860:../FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 861:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 835              		.loc 1 861 0
 836 0430 3B69     		ldr	r3, [r7, #16]
 837 0432 5A6C     		ldr	r2, [r3, #68]
 838 0434 3B69     		ldr	r3, [r7, #16]
 839 0436 DB6A     		ldr	r3, [r3, #44]
 840 0438 9A42     		cmp	r2, r3
 841 043a 02D1     		bne	.L36
 862:../FreeRTOS/Source/tasks.c **** 					{
 863:../FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 842              		.loc 1 863 0
 843 043c 3B69     		ldr	r3, [r7, #16]
 844 043e 3A68     		ldr	r2, [r7, #0]
 845 0440 DA62     		str	r2, [r3, #44]
 846              	.L36:
 864:../FreeRTOS/Source/tasks.c **** 					}
 865:../FreeRTOS/Source/tasks.c **** 
 866:../FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
 867:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 847              		.loc 1 867 0
 848 0442 3B69     		ldr	r3, [r7, #16]
 849 0444 3A68     		ldr	r2, [r7, #0]
 850 0446 5A64     		str	r2, [r3, #68]
 868:../FreeRTOS/Source/tasks.c **** 				}
 869:../FreeRTOS/Source/tasks.c **** 				#else
 870:../FreeRTOS/Source/tasks.c **** 				{
 871:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 872:../FreeRTOS/Source/tasks.c **** 				}
 873:../FreeRTOS/Source/tasks.c **** 				#endif
 874:../FreeRTOS/Source/tasks.c **** 
 875:../FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 851              		.loc 1 875 0
 852 0448 3B68     		ldr	r3, [r7, #0]
 853 044a C3F10A02 		rsb	r2, r3, #10
 854 044e 3B69     		ldr	r3, [r7, #16]
 855 0450 9A61     		str	r2, [r3, #24]
 876:../FreeRTOS/Source/tasks.c **** 
 877:../FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 878:../FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
 879:../FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 880:../FreeRTOS/Source/tasks.c **** 				in the queue appropriate to its new priority. */
 881:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 856              		.loc 1 881 0
 857 0452 3B69     		ldr	r3, [r7, #16]
 858 0454 5969     		ldr	r1, [r3, #20]
 859 0456 FA68     		ldr	r2, [r7, #12]
 860 0458 1346     		mov	r3, r2
 861 045a 4FEA8303 		lsl	r3, r3, #2
 862 045e 9B18     		adds	r3, r3, r2
 863 0460 4FEA8303 		lsl	r3, r3, #2
 864 0464 1A46     		mov	r2, r3
 865 0466 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 866 046a C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 867 046e D318     		adds	r3, r2, r3
 868 0470 9942     		cmp	r1, r3
 869 0472 2AD1     		bne	.L37
 882:../FreeRTOS/Source/tasks.c **** 				{
 883:../FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 884:../FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 885:../FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
 886:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 870              		.loc 1 886 0
 871 0474 3B69     		ldr	r3, [r7, #16]
 872 0476 03F10403 		add	r3, r3, #4
 873 047a 1846     		mov	r0, r3
 874 047c FFF7FEFF 		bl	vListRemove
 887:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 875              		.loc 1 887 0
 876 0480 3B69     		ldr	r3, [r7, #16]
 877 0482 DA6A     		ldr	r2, [r3, #44]
 878 0484 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 879 0488 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 880 048c 1B68     		ldr	r3, [r3, #0]
 881 048e 9A42     		cmp	r2, r3
 882 0490 06D9     		bls	.L38
 883              		.loc 1 887 0 is_stmt 0 discriminator 1
 884 0492 3B69     		ldr	r3, [r7, #16]
 885 0494 DA6A     		ldr	r2, [r3, #44]
 886 0496 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 887 049a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 888 049e 1A60     		str	r2, [r3, #0]
 889              	.L38:
 890              		.loc 1 887 0 discriminator 2
 891 04a0 3B69     		ldr	r3, [r7, #16]
 892 04a2 DA6A     		ldr	r2, [r3, #44]
 893 04a4 1346     		mov	r3, r2
 894 04a6 4FEA8303 		lsl	r3, r3, #2
 895 04aa 9B18     		adds	r3, r3, r2
 896 04ac 4FEA8303 		lsl	r3, r3, #2
 897 04b0 1A46     		mov	r2, r3
 898 04b2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 899 04b6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 900 04ba D218     		adds	r2, r2, r3
 901 04bc 3B69     		ldr	r3, [r7, #16]
 902 04be 03F10403 		add	r3, r3, #4
 903 04c2 1046     		mov	r0, r2
 904 04c4 1946     		mov	r1, r3
 905 04c6 FFF7FEFF 		bl	vListInsertEnd
 906              	.L37:
 888:../FreeRTOS/Source/tasks.c **** 				}
 889:../FreeRTOS/Source/tasks.c **** 
 890:../FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 907              		.loc 1 890 0 is_stmt 1
 908 04ca 7B69     		ldr	r3, [r7, #20]
 909 04cc 012B     		cmp	r3, #1
 910 04ce 01D1     		bne	.L33
 891:../FreeRTOS/Source/tasks.c **** 				{
 892:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 911              		.loc 1 892 0
 912 04d0 FFF7FEFF 		bl	vPortYieldFromISR
 913              	.L33:
 893:../FreeRTOS/Source/tasks.c **** 				}
 894:../FreeRTOS/Source/tasks.c **** 			}
 895:../FreeRTOS/Source/tasks.c **** 		}
 896:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 914              		.loc 1 896 0
 915 04d4 FFF7FEFF 		bl	vPortExitCritical
 897:../FreeRTOS/Source/tasks.c **** 	}
 916              		.loc 1 897 0
 917 04d8 07F11807 		add	r7, r7, #24
 918 04dc BD46     		mov	sp, r7
 919 04de 80BD     		pop	{r7, pc}
 920              		.cfi_endproc
 921              	.LFE115:
 923              		.align	2
 924              		.global	vTaskSuspend
 925              		.thumb
 926              		.thumb_func
 928              	vTaskSuspend:
 929              	.LFB116:
 898:../FreeRTOS/Source/tasks.c **** 
 899:../FreeRTOS/Source/tasks.c **** #endif
 900:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 901:../FreeRTOS/Source/tasks.c **** 
 902:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 903:../FreeRTOS/Source/tasks.c **** 
 904:../FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 905:../FreeRTOS/Source/tasks.c **** 	{
 930              		.loc 1 905 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 16
 933              		@ frame_needed = 1, uses_anonymous_args = 0
 934 04e0 80B5     		push	{r7, lr}
 935              	.LCFI18:
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 14, -4
 938              		.cfi_offset 7, -8
 939 04e2 84B0     		sub	sp, sp, #16
 940              	.LCFI19:
 941              		.cfi_def_cfa_offset 24
 942 04e4 00AF     		add	r7, sp, #0
 943              	.LCFI20:
 944              		.cfi_def_cfa_register 7
 945 04e6 7860     		str	r0, [r7, #4]
 906:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 907:../FreeRTOS/Source/tasks.c **** 
 908:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 946              		.loc 1 908 0
 947 04e8 FFF7FEFF 		bl	vPortEnterCritical
 909:../FreeRTOS/Source/tasks.c **** 		{
 910:../FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 911:../FreeRTOS/Source/tasks.c **** 			suspended. */
 912:../FreeRTOS/Source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 948              		.loc 1 912 0
 949 04ec 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 950 04f0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 951 04f4 1B68     		ldr	r3, [r3, #0]
 952 04f6 7A68     		ldr	r2, [r7, #4]
 953 04f8 9A42     		cmp	r2, r3
 954 04fa 02D1     		bne	.L40
 913:../FreeRTOS/Source/tasks.c **** 			{
 914:../FreeRTOS/Source/tasks.c **** 				pxTaskToSuspend = NULL;
 955              		.loc 1 914 0
 956 04fc 4FF00003 		mov	r3, #0
 957 0500 7B60     		str	r3, [r7, #4]
 958              	.L40:
 915:../FreeRTOS/Source/tasks.c **** 			}
 916:../FreeRTOS/Source/tasks.c **** 
 917:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 918:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 959              		.loc 1 918 0
 960 0502 7B68     		ldr	r3, [r7, #4]
 961 0504 002B     		cmp	r3, #0
 962 0506 05D1     		bne	.L41
 963              		.loc 1 918 0 is_stmt 0 discriminator 1
 964 0508 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 965 050c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 966 0510 1B68     		ldr	r3, [r3, #0]
 967 0512 00E0     		b	.L42
 968              	.L41:
 969              		.loc 1 918 0 discriminator 2
 970 0514 7B68     		ldr	r3, [r7, #4]
 971              	.L42:
 972              		.loc 1 918 0 discriminator 3
 973 0516 FB60     		str	r3, [r7, #12]
 919:../FreeRTOS/Source/tasks.c **** 
 920:../FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 921:../FreeRTOS/Source/tasks.c **** 
 922:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 923:../FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 974              		.loc 1 923 0 is_stmt 1 discriminator 3
 975 0518 FB68     		ldr	r3, [r7, #12]
 976 051a 03F10403 		add	r3, r3, #4
 977 051e 1846     		mov	r0, r3
 978 0520 FFF7FEFF 		bl	vListRemove
 924:../FreeRTOS/Source/tasks.c **** 
 925:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 926:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 979              		.loc 1 926 0 discriminator 3
 980 0524 FB68     		ldr	r3, [r7, #12]
 981 0526 9B6A     		ldr	r3, [r3, #40]
 982 0528 002B     		cmp	r3, #0
 983 052a 05D0     		beq	.L43
 927:../FreeRTOS/Source/tasks.c **** 			{
 928:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 984              		.loc 1 928 0
 985 052c FB68     		ldr	r3, [r7, #12]
 986 052e 03F11803 		add	r3, r3, #24
 987 0532 1846     		mov	r0, r3
 988 0534 FFF7FEFF 		bl	vListRemove
 989              	.L43:
 929:../FreeRTOS/Source/tasks.c **** 			}
 930:../FreeRTOS/Source/tasks.c **** 
 931:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 990              		.loc 1 931 0
 991 0538 FB68     		ldr	r3, [r7, #12]
 992 053a 03F10403 		add	r3, r3, #4
 993 053e 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 994 0542 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 995 0546 1946     		mov	r1, r3
 996 0548 FFF7FEFF 		bl	vListInsertEnd
 932:../FreeRTOS/Source/tasks.c **** 		}
 933:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 997              		.loc 1 933 0
 998 054c FFF7FEFF 		bl	vPortExitCritical
 934:../FreeRTOS/Source/tasks.c **** 
 935:../FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 999              		.loc 1 935 0
 1000 0550 7B68     		ldr	r3, [r7, #4]
 1001 0552 002B     		cmp	r3, #0
 1002 0554 20D1     		bne	.L39
 936:../FreeRTOS/Source/tasks.c **** 		{
 937:../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1003              		.loc 1 937 0
 1004 0556 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1005 055a C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1006 055e 1B68     		ldr	r3, [r3, #0]
 1007 0560 002B     		cmp	r3, #0
 1008 0562 02D0     		beq	.L45
 938:../FreeRTOS/Source/tasks.c **** 			{
 939:../FreeRTOS/Source/tasks.c **** 				/* We have just suspended the current task. */
 940:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1009              		.loc 1 940 0
 1010 0564 FFF7FEFF 		bl	vPortYieldFromISR
 1011 0568 16E0     		b	.L39
 1012              	.L45:
 941:../FreeRTOS/Source/tasks.c **** 			}
 942:../FreeRTOS/Source/tasks.c **** 			else
 943:../FreeRTOS/Source/tasks.c **** 			{
 944:../FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
 945:../FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
 946:../FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
 947:../FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1013              		.loc 1 947 0
 1014 056a 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1015 056e C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1016 0572 1B68     		ldr	r3, [r3, #0]
 1017 0574 1A46     		mov	r2, r3
 1018 0576 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1019 057a C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1020 057e 1B68     		ldr	r3, [r3, #0]
 1021 0580 9A42     		cmp	r2, r3
 1022 0582 07D1     		bne	.L46
 948:../FreeRTOS/Source/tasks.c **** 				{
 949:../FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
 950:../FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
 951:../FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
 952:../FreeRTOS/Source/tasks.c **** 					is. */
 953:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1023              		.loc 1 953 0
 1024 0584 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1025 0588 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1026 058c 4FF00002 		mov	r2, #0
 1027 0590 1A60     		str	r2, [r3, #0]
 1028 0592 01E0     		b	.L39
 1029              	.L46:
 954:../FreeRTOS/Source/tasks.c **** 				}
 955:../FreeRTOS/Source/tasks.c **** 				else
 956:../FreeRTOS/Source/tasks.c **** 				{
 957:../FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1030              		.loc 1 957 0
 1031 0594 FFF7FEFF 		bl	vTaskSwitchContext
 1032              	.L39:
 958:../FreeRTOS/Source/tasks.c **** 				}
 959:../FreeRTOS/Source/tasks.c **** 			}
 960:../FreeRTOS/Source/tasks.c **** 		}
 961:../FreeRTOS/Source/tasks.c **** 	}
 1033              		.loc 1 961 0
 1034 0598 07F11007 		add	r7, r7, #16
 1035 059c BD46     		mov	sp, r7
 1036 059e 80BD     		pop	{r7, pc}
 1037              		.cfi_endproc
 1038              	.LFE116:
 1040              		.align	2
 1041              		.global	xTaskIsTaskSuspended
 1042              		.thumb
 1043              		.thumb_func
 1045              	xTaskIsTaskSuspended:
 1046              	.LFB117:
 962:../FreeRTOS/Source/tasks.c **** 
 963:../FreeRTOS/Source/tasks.c **** #endif
 964:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 965:../FreeRTOS/Source/tasks.c **** 
 966:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 967:../FreeRTOS/Source/tasks.c **** 
 968:../FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 969:../FreeRTOS/Source/tasks.c **** 	{
 1047              		.loc 1 969 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 16
 1050              		@ frame_needed = 1, uses_anonymous_args = 0
 1051              		@ link register save eliminated.
 1052 05a0 80B4     		push	{r7}
 1053              	.LCFI21:
 1054              		.cfi_def_cfa_offset 4
 1055              		.cfi_offset 7, -4
 1056 05a2 85B0     		sub	sp, sp, #20
 1057              	.LCFI22:
 1058              		.cfi_def_cfa_offset 24
 1059 05a4 00AF     		add	r7, sp, #0
 1060              	.LCFI23:
 1061              		.cfi_def_cfa_register 7
 1062 05a6 7860     		str	r0, [r7, #4]
 970:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 1063              		.loc 1 970 0
 1064 05a8 4FF00003 		mov	r3, #0
 1065 05ac FB60     		str	r3, [r7, #12]
 971:../FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 1066              		.loc 1 971 0
 1067 05ae 7B68     		ldr	r3, [r7, #4]
 1068 05b0 BB60     		str	r3, [r7, #8]
 972:../FreeRTOS/Source/tasks.c **** 
 973:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
 974:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 975:../FreeRTOS/Source/tasks.c **** 
 976:../FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 977:../FreeRTOS/Source/tasks.c **** 		suspended list? */
 978:../FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1069              		.loc 1 978 0
 1070 05b2 BB68     		ldr	r3, [r7, #8]
 1071 05b4 5A69     		ldr	r2, [r3, #20]
 1072 05b6 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1073 05ba C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1074 05be 9A42     		cmp	r2, r3
 1075 05c0 0ED1     		bne	.L48
 979:../FreeRTOS/Source/tasks.c **** 		{
 980:../FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 981:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 1076              		.loc 1 981 0
 1077 05c2 BB68     		ldr	r3, [r7, #8]
 1078 05c4 9A6A     		ldr	r2, [r3, #40]
 1079 05c6 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1080 05ca C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1081 05ce 9A42     		cmp	r2, r3
 1082 05d0 06D0     		beq	.L48
 982:../FreeRTOS/Source/tasks.c **** 			{
 983:../FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
 984:../FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 985:../FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
 986:../FreeRTOS/Source/tasks.c **** 				specified. */
 987:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 1083              		.loc 1 987 0
 1084 05d2 BB68     		ldr	r3, [r7, #8]
 1085 05d4 9B6A     		ldr	r3, [r3, #40]
 1086 05d6 002B     		cmp	r3, #0
 1087 05d8 02D1     		bne	.L48
 988:../FreeRTOS/Source/tasks.c **** 				{
 989:../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1088              		.loc 1 989 0
 1089 05da 4FF00103 		mov	r3, #1
 1090 05de FB60     		str	r3, [r7, #12]
 1091              	.L48:
 990:../FreeRTOS/Source/tasks.c **** 				}
 991:../FreeRTOS/Source/tasks.c **** 			}
 992:../FreeRTOS/Source/tasks.c **** 		}
 993:../FreeRTOS/Source/tasks.c **** 
 994:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 1092              		.loc 1 994 0
 1093 05e0 FB68     		ldr	r3, [r7, #12]
 995:../FreeRTOS/Source/tasks.c **** 	}
 1094              		.loc 1 995 0
 1095 05e2 1846     		mov	r0, r3
 1096 05e4 07F11407 		add	r7, r7, #20
 1097 05e8 BD46     		mov	sp, r7
 1098 05ea 80BC     		pop	{r7}
 1099 05ec 7047     		bx	lr
 1100              		.cfi_endproc
 1101              	.LFE117:
 1103 05ee 00BF     		.align	2
 1104              		.global	vTaskResume
 1105              		.thumb
 1106              		.thumb_func
 1108              	vTaskResume:
 1109              	.LFB118:
 996:../FreeRTOS/Source/tasks.c **** 
 997:../FreeRTOS/Source/tasks.c **** #endif
 998:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 999:../FreeRTOS/Source/tasks.c **** 
1000:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1001:../FreeRTOS/Source/tasks.c **** 
1002:../FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1003:../FreeRTOS/Source/tasks.c **** 	{
 1110              		.loc 1 1003 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 16
 1113              		@ frame_needed = 1, uses_anonymous_args = 0
 1114 05f0 80B5     		push	{r7, lr}
 1115              	.LCFI24:
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 14, -4
 1118              		.cfi_offset 7, -8
 1119 05f2 84B0     		sub	sp, sp, #16
 1120              	.LCFI25:
 1121              		.cfi_def_cfa_offset 24
 1122 05f4 00AF     		add	r7, sp, #0
 1123              	.LCFI26:
 1124              		.cfi_def_cfa_register 7
 1125 05f6 7860     		str	r0, [r7, #4]
1004:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1005:../FreeRTOS/Source/tasks.c **** 
1006:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1007:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1008:../FreeRTOS/Source/tasks.c **** 
1009:../FreeRTOS/Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1010:../FreeRTOS/Source/tasks.c **** 		it in the ready list. */
1011:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1126              		.loc 1 1011 0
 1127 05f8 7B68     		ldr	r3, [r7, #4]
 1128 05fa FB60     		str	r3, [r7, #12]
1012:../FreeRTOS/Source/tasks.c **** 
1013:../FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1014:../FreeRTOS/Source/tasks.c **** 		currently executing task. */
1015:../FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1129              		.loc 1 1015 0
 1130 05fc FB68     		ldr	r3, [r7, #12]
 1131 05fe 002B     		cmp	r3, #0
 1132 0600 48D0     		beq	.L49
 1133              		.loc 1 1015 0 is_stmt 0 discriminator 1
 1134 0602 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1135 0606 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1136 060a 1B68     		ldr	r3, [r3, #0]
 1137 060c FA68     		ldr	r2, [r7, #12]
 1138 060e 9A42     		cmp	r2, r3
 1139 0610 40D0     		beq	.L49
1016:../FreeRTOS/Source/tasks.c **** 		{
1017:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1140              		.loc 1 1017 0 is_stmt 1
 1141 0612 FFF7FEFF 		bl	vPortEnterCritical
1018:../FreeRTOS/Source/tasks.c **** 			{
1019:../FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1142              		.loc 1 1019 0
 1143 0616 F868     		ldr	r0, [r7, #12]
 1144 0618 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1145 061c 0346     		mov	r3, r0
 1146 061e 012B     		cmp	r3, #1
 1147 0620 36D1     		bne	.L51
1020:../FreeRTOS/Source/tasks.c **** 				{
1021:../FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1022:../FreeRTOS/Source/tasks.c **** 
1023:../FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1024:../FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1025:../FreeRTOS/Source/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 1148              		.loc 1 1025 0
 1149 0622 FB68     		ldr	r3, [r7, #12]
 1150 0624 03F10403 		add	r3, r3, #4
 1151 0628 1846     		mov	r0, r3
 1152 062a FFF7FEFF 		bl	vListRemove
1026:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1153              		.loc 1 1026 0
 1154 062e FB68     		ldr	r3, [r7, #12]
 1155 0630 DA6A     		ldr	r2, [r3, #44]
 1156 0632 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1157 0636 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1158 063a 1B68     		ldr	r3, [r3, #0]
 1159 063c 9A42     		cmp	r2, r3
 1160 063e 06D9     		bls	.L52
 1161              		.loc 1 1026 0 is_stmt 0 discriminator 1
 1162 0640 FB68     		ldr	r3, [r7, #12]
 1163 0642 DA6A     		ldr	r2, [r3, #44]
 1164 0644 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1165 0648 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1166 064c 1A60     		str	r2, [r3, #0]
 1167              	.L52:
 1168              		.loc 1 1026 0 discriminator 2
 1169 064e FB68     		ldr	r3, [r7, #12]
 1170 0650 DA6A     		ldr	r2, [r3, #44]
 1171 0652 1346     		mov	r3, r2
 1172 0654 4FEA8303 		lsl	r3, r3, #2
 1173 0658 9B18     		adds	r3, r3, r2
 1174 065a 4FEA8303 		lsl	r3, r3, #2
 1175 065e 1A46     		mov	r2, r3
 1176 0660 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1177 0664 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1178 0668 D218     		adds	r2, r2, r3
 1179 066a FB68     		ldr	r3, [r7, #12]
 1180 066c 03F10403 		add	r3, r3, #4
 1181 0670 1046     		mov	r0, r2
 1182 0672 1946     		mov	r1, r3
 1183 0674 FFF7FEFF 		bl	vListInsertEnd
1027:../FreeRTOS/Source/tasks.c **** 
1028:../FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1029:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1184              		.loc 1 1029 0 is_stmt 1 discriminator 2
 1185 0678 FB68     		ldr	r3, [r7, #12]
 1186 067a DA6A     		ldr	r2, [r3, #44]
 1187 067c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1188 0680 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1189 0684 1B68     		ldr	r3, [r3, #0]
 1190 0686 DB6A     		ldr	r3, [r3, #44]
 1191 0688 9A42     		cmp	r2, r3
 1192 068a 01D3     		bcc	.L51
1030:../FreeRTOS/Source/tasks.c **** 					{
1031:../FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1032:../FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1033:../FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 1193              		.loc 1 1033 0
 1194 068c FFF7FEFF 		bl	vPortYieldFromISR
 1195              	.L51:
1034:../FreeRTOS/Source/tasks.c **** 					}
1035:../FreeRTOS/Source/tasks.c **** 				}
1036:../FreeRTOS/Source/tasks.c **** 			}
1037:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1196              		.loc 1 1037 0
 1197 0690 FFF7FEFF 		bl	vPortExitCritical
 1198              	.L49:
1038:../FreeRTOS/Source/tasks.c **** 		}
1039:../FreeRTOS/Source/tasks.c **** 	}
 1199              		.loc 1 1039 0
 1200 0694 07F11007 		add	r7, r7, #16
 1201 0698 BD46     		mov	sp, r7
 1202 069a 80BD     		pop	{r7, pc}
 1203              		.cfi_endproc
 1204              	.LFE118:
 1206              		.align	2
 1207              		.global	xTaskResumeFromISR
 1208              		.thumb
 1209              		.thumb_func
 1211              	xTaskResumeFromISR:
 1212              	.LFB119:
1040:../FreeRTOS/Source/tasks.c **** 
1041:../FreeRTOS/Source/tasks.c **** #endif
1042:../FreeRTOS/Source/tasks.c **** 
1043:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1044:../FreeRTOS/Source/tasks.c **** 
1045:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1046:../FreeRTOS/Source/tasks.c **** 
1047:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1048:../FreeRTOS/Source/tasks.c **** 	{
 1213              		.loc 1 1048 0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 16
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217 069c 80B5     		push	{r7, lr}
 1218              	.LCFI27:
 1219              		.cfi_def_cfa_offset 8
 1220              		.cfi_offset 14, -4
 1221              		.cfi_offset 7, -8
 1222 069e 84B0     		sub	sp, sp, #16
 1223              	.LCFI28:
 1224              		.cfi_def_cfa_offset 24
 1225 06a0 00AF     		add	r7, sp, #0
 1226              	.LCFI29:
 1227              		.cfi_def_cfa_register 7
 1228 06a2 7860     		str	r0, [r7, #4]
1049:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1229              		.loc 1 1049 0
 1230 06a4 4FF00003 		mov	r3, #0
 1231 06a8 FB60     		str	r3, [r7, #12]
1050:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1051:../FreeRTOS/Source/tasks.c **** 
1052:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1053:../FreeRTOS/Source/tasks.c **** 
1054:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1232              		.loc 1 1054 0
 1233 06aa 7B68     		ldr	r3, [r7, #4]
 1234 06ac BB60     		str	r3, [r7, #8]
1055:../FreeRTOS/Source/tasks.c **** 
1056:../FreeRTOS/Source/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1235              		.loc 1 1056 0
 1236 06ae B868     		ldr	r0, [r7, #8]
 1237 06b0 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1238 06b4 0346     		mov	r3, r0
 1239 06b6 012B     		cmp	r3, #1
 1240 06b8 49D1     		bne	.L54
1057:../FreeRTOS/Source/tasks.c **** 		{
1058:../FreeRTOS/Source/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
1059:../FreeRTOS/Source/tasks.c **** 
1060:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1241              		.loc 1 1060 0
 1242 06ba 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1243 06be C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1244 06c2 1B68     		ldr	r3, [r3, #0]
 1245 06c4 002B     		cmp	r3, #0
 1246 06c6 38D1     		bne	.L55
1061:../FreeRTOS/Source/tasks.c **** 			{
1062:../FreeRTOS/Source/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1247              		.loc 1 1062 0
 1248 06c8 BB68     		ldr	r3, [r7, #8]
 1249 06ca DA6A     		ldr	r2, [r3, #44]
 1250 06cc 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1251 06d0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1252 06d4 1B68     		ldr	r3, [r3, #0]
 1253 06d6 DB6A     		ldr	r3, [r3, #44]
 1254 06d8 9A42     		cmp	r2, r3
 1255 06da 34BF     		ite	cc
 1256 06dc 0023     		movcc	r3, #0
 1257 06de 0123     		movcs	r3, #1
 1258 06e0 FB60     		str	r3, [r7, #12]
1063:../FreeRTOS/Source/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 1259              		.loc 1 1063 0
 1260 06e2 BB68     		ldr	r3, [r7, #8]
 1261 06e4 03F10403 		add	r3, r3, #4
 1262 06e8 1846     		mov	r0, r3
 1263 06ea FFF7FEFF 		bl	vListRemove
1064:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 1264              		.loc 1 1064 0
 1265 06ee BB68     		ldr	r3, [r7, #8]
 1266 06f0 DA6A     		ldr	r2, [r3, #44]
 1267 06f2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1268 06f6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1269 06fa 1B68     		ldr	r3, [r3, #0]
 1270 06fc 9A42     		cmp	r2, r3
 1271 06fe 06D9     		bls	.L56
 1272              		.loc 1 1064 0 is_stmt 0 discriminator 1
 1273 0700 BB68     		ldr	r3, [r7, #8]
 1274 0702 DA6A     		ldr	r2, [r3, #44]
 1275 0704 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1276 0708 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1277 070c 1A60     		str	r2, [r3, #0]
 1278              	.L56:
 1279              		.loc 1 1064 0 discriminator 2
 1280 070e BB68     		ldr	r3, [r7, #8]
 1281 0710 DA6A     		ldr	r2, [r3, #44]
 1282 0712 1346     		mov	r3, r2
 1283 0714 4FEA8303 		lsl	r3, r3, #2
 1284 0718 9B18     		adds	r3, r3, r2
 1285 071a 4FEA8303 		lsl	r3, r3, #2
 1286 071e 1A46     		mov	r2, r3
 1287 0720 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1288 0724 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1289 0728 D218     		adds	r2, r2, r3
 1290 072a BB68     		ldr	r3, [r7, #8]
 1291 072c 03F10403 		add	r3, r3, #4
 1292 0730 1046     		mov	r0, r2
 1293 0732 1946     		mov	r1, r3
 1294 0734 FFF7FEFF 		bl	vListInsertEnd
 1295 0738 09E0     		b	.L54
 1296              	.L55:
1065:../FreeRTOS/Source/tasks.c **** 			}
1066:../FreeRTOS/Source/tasks.c **** 			else
1067:../FreeRTOS/Source/tasks.c **** 			{
1068:../FreeRTOS/Source/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1069:../FreeRTOS/Source/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1070:../FreeRTOS/Source/tasks.c **** 				yield will be performed if necessary. */
1071:../FreeRTOS/Source/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1297              		.loc 1 1071 0 is_stmt 1
 1298 073a BB68     		ldr	r3, [r7, #8]
 1299 073c 03F11803 		add	r3, r3, #24
 1300 0740 40F20000 		movw	r0, #:lower16:xPendingReadyList
 1301 0744 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 1302 0748 1946     		mov	r1, r3
 1303 074a FFF7FEFF 		bl	vListInsertEnd
 1304              	.L54:
1072:../FreeRTOS/Source/tasks.c **** 			}
1073:../FreeRTOS/Source/tasks.c **** 		}
1074:../FreeRTOS/Source/tasks.c **** 
1075:../FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1305              		.loc 1 1075 0
 1306 074e FB68     		ldr	r3, [r7, #12]
1076:../FreeRTOS/Source/tasks.c **** 	}
 1307              		.loc 1 1076 0
 1308 0750 1846     		mov	r0, r3
 1309 0752 07F11007 		add	r7, r7, #16
 1310 0756 BD46     		mov	sp, r7
 1311 0758 80BD     		pop	{r7, pc}
 1312              		.cfi_endproc
 1313              	.LFE119:
 1315              		.section	.rodata
 1316              		.align	2
 1317              	.LC0:
 1318 0000 49444C45 		.ascii	"IDLE\000"
 1318      00
 1319              		.text
 1320 075a 00BF     		.align	2
 1321              		.global	vTaskStartScheduler
 1322              		.thumb
 1323              		.thumb_func
 1325              	vTaskStartScheduler:
 1326              	.LFB120:
1077:../FreeRTOS/Source/tasks.c **** 
1078:../FreeRTOS/Source/tasks.c **** #endif
1079:../FreeRTOS/Source/tasks.c **** 
1080:../FreeRTOS/Source/tasks.c **** 
1081:../FreeRTOS/Source/tasks.c **** 
1082:../FreeRTOS/Source/tasks.c **** 
1083:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1084:../FreeRTOS/Source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1085:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1086:../FreeRTOS/Source/tasks.c **** 
1087:../FreeRTOS/Source/tasks.c **** 
1088:../FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1089:../FreeRTOS/Source/tasks.c **** {
 1327              		.loc 1 1089 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 8
 1330              		@ frame_needed = 1, uses_anonymous_args = 0
 1331 075c 80B5     		push	{r7, lr}
 1332              	.LCFI30:
 1333              		.cfi_def_cfa_offset 8
 1334              		.cfi_offset 14, -4
 1335              		.cfi_offset 7, -8
 1336 075e 86B0     		sub	sp, sp, #24
 1337              	.LCFI31:
 1338              		.cfi_def_cfa_offset 32
 1339 0760 04AF     		add	r7, sp, #16
 1340              	.LCFI32:
 1341              		.cfi_def_cfa 7, 16
1090:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1091:../FreeRTOS/Source/tasks.c **** 
1092:../FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1093:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1094:../FreeRTOS/Source/tasks.c **** 	{
1095:../FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1096:../FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1097:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 1342              		.loc 1 1097 0
 1343 0762 4FF00003 		mov	r3, #0
 1344 0766 0093     		str	r3, [sp, #0]
 1345 0768 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1346 076c C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1347 0770 0193     		str	r3, [sp, #4]
 1348 0772 4FF00003 		mov	r3, #0
 1349 0776 0293     		str	r3, [sp, #8]
 1350 0778 4FF00003 		mov	r3, #0
 1351 077c 0393     		str	r3, [sp, #12]
 1352 077e 40F20000 		movw	r0, #:lower16:prvIdleTask
 1353 0782 C0F20000 		movt	r0, #:upper16:prvIdleTask
 1354 0786 40F20001 		movw	r1, #:lower16:.LC0
 1355 078a C0F20001 		movt	r1, #:upper16:.LC0
 1356 078e 4FF48072 		mov	r2, #256
 1357 0792 4FF00003 		mov	r3, #0
 1358 0796 FFF7FEFF 		bl	xTaskGenericCreate
 1359 079a 0346     		mov	r3, r0
 1360 079c 7B60     		str	r3, [r7, #4]
1098:../FreeRTOS/Source/tasks.c **** 	}
1099:../FreeRTOS/Source/tasks.c **** 	#else
1100:../FreeRTOS/Source/tasks.c **** 	{
1101:../FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1102:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1103:../FreeRTOS/Source/tasks.c **** 	}
1104:../FreeRTOS/Source/tasks.c **** 	#endif
1105:../FreeRTOS/Source/tasks.c **** 
1106:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1107:../FreeRTOS/Source/tasks.c **** 	{
1108:../FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1109:../FreeRTOS/Source/tasks.c **** 		{
1110:../FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1111:../FreeRTOS/Source/tasks.c **** 		}
1112:../FreeRTOS/Source/tasks.c **** 	}
1113:../FreeRTOS/Source/tasks.c **** 	#endif
1114:../FreeRTOS/Source/tasks.c **** 
1115:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 1361              		.loc 1 1115 0
 1362 079e 7B68     		ldr	r3, [r7, #4]
 1363 07a0 012B     		cmp	r3, #1
 1364 07a2 15D1     		bne	.L57
1116:../FreeRTOS/Source/tasks.c **** 	{
1117:../FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1118:../FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1119:../FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1120:../FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1121:../FreeRTOS/Source/tasks.c **** 		starts to run.
1122:../FreeRTOS/Source/tasks.c **** 
1123:../FreeRTOS/Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1124:../FreeRTOS/Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1125:../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1365              		.loc 1 1125 0
 1366              	@ 1125 "../FreeRTOS/Source/tasks.c" 1
 1367 07a4 4FF0BF00 			mov r0, #191								
 1368 07a8 80F31188 		msr basepri, r0							
 1369              	
 1370              	@ 0 "" 2
1126:../FreeRTOS/Source/tasks.c **** 
1127:../FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1371              		.loc 1 1127 0
 1372              		.thumb
 1373 07ac 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1374 07b0 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1375 07b4 4FF00102 		mov	r2, #1
 1376 07b8 1A60     		str	r2, [r3, #0]
1128:../FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 1377              		.loc 1 1128 0
 1378 07ba 40F20003 		movw	r3, #:lower16:xTickCount
 1379 07be C0F20003 		movt	r3, #:upper16:xTickCount
 1380 07c2 4FF00002 		mov	r2, #0
 1381 07c6 1A60     		str	r2, [r3, #0]
1129:../FreeRTOS/Source/tasks.c **** 
1130:../FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1131:../FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1132:../FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1133:../FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 1382              		.loc 1 1133 0
 1383 07c8 FFF7FEFF 		bl	init_us_timer
1134:../FreeRTOS/Source/tasks.c **** 		
1135:../FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1136:../FreeRTOS/Source/tasks.c **** 		portable interface. */
1137:../FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1384              		.loc 1 1137 0
 1385 07cc FFF7FEFF 		bl	xPortStartScheduler
 1386              	.L57:
1138:../FreeRTOS/Source/tasks.c **** 		{
1139:../FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1140:../FreeRTOS/Source/tasks.c **** 			function will not return. */
1141:../FreeRTOS/Source/tasks.c **** 		}
1142:../FreeRTOS/Source/tasks.c **** 		else
1143:../FreeRTOS/Source/tasks.c **** 		{
1144:../FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1145:../FreeRTOS/Source/tasks.c **** 		}
1146:../FreeRTOS/Source/tasks.c **** 	}
1147:../FreeRTOS/Source/tasks.c **** 
1148:../FreeRTOS/Source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1149:../FreeRTOS/Source/tasks.c **** 	configASSERT( xReturn );
1150:../FreeRTOS/Source/tasks.c **** }
 1387              		.loc 1 1150 0
 1388 07d0 07F10807 		add	r7, r7, #8
 1389 07d4 BD46     		mov	sp, r7
 1390 07d6 80BD     		pop	{r7, pc}
 1391              		.cfi_endproc
 1392              	.LFE120:
 1394              		.align	2
 1395              		.global	vTaskEndScheduler
 1396              		.thumb
 1397              		.thumb_func
 1399              	vTaskEndScheduler:
 1400              	.LFB121:
1151:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1152:../FreeRTOS/Source/tasks.c **** 
1153:../FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1154:../FreeRTOS/Source/tasks.c **** {
 1401              		.loc 1 1154 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 0
 1404              		@ frame_needed = 1, uses_anonymous_args = 0
 1405 07d8 80B5     		push	{r7, lr}
 1406              	.LCFI33:
 1407              		.cfi_def_cfa_offset 8
 1408              		.cfi_offset 14, -4
 1409              		.cfi_offset 7, -8
 1410 07da 00AF     		add	r7, sp, #0
 1411              	.LCFI34:
 1412              		.cfi_def_cfa_register 7
1155:../FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1156:../FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1157:../FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1158:../FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1413              		.loc 1 1158 0
 1414              	@ 1158 "../FreeRTOS/Source/tasks.c" 1
 1415 07dc 4FF0BF00 			mov r0, #191								
 1416 07e0 80F31188 		msr basepri, r0							
 1417              	
 1418              	@ 0 "" 2
1159:../FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1419              		.loc 1 1159 0
 1420              		.thumb
 1421 07e4 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1422 07e8 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1423 07ec 4FF00002 		mov	r2, #0
 1424 07f0 1A60     		str	r2, [r3, #0]
1160:../FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1425              		.loc 1 1160 0
 1426 07f2 FFF7FEFF 		bl	vPortEndScheduler
1161:../FreeRTOS/Source/tasks.c **** }
 1427              		.loc 1 1161 0
 1428 07f6 80BD     		pop	{r7, pc}
 1429              		.cfi_endproc
 1430              	.LFE121:
 1432              		.align	2
 1433              		.global	vTaskSuspendAll
 1434              		.thumb
 1435              		.thumb_func
 1437              	vTaskSuspendAll:
 1438              	.LFB122:
1162:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1163:../FreeRTOS/Source/tasks.c **** 
1164:../FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1165:../FreeRTOS/Source/tasks.c **** {
 1439              		.loc 1 1165 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 1, uses_anonymous_args = 0
 1443              		@ link register save eliminated.
 1444 07f8 80B4     		push	{r7}
 1445              	.LCFI35:
 1446              		.cfi_def_cfa_offset 4
 1447              		.cfi_offset 7, -4
 1448 07fa 00AF     		add	r7, sp, #0
 1449              	.LCFI36:
 1450              		.cfi_def_cfa_register 7
1166:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1167:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1168:../FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1451              		.loc 1 1168 0
 1452 07fc 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1453 0800 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1454 0804 1B68     		ldr	r3, [r3, #0]
 1455 0806 03F10102 		add	r2, r3, #1
 1456 080a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1457 080e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1458 0812 1A60     		str	r2, [r3, #0]
1169:../FreeRTOS/Source/tasks.c **** }
 1459              		.loc 1 1169 0
 1460 0814 BD46     		mov	sp, r7
 1461 0816 80BC     		pop	{r7}
 1462 0818 7047     		bx	lr
 1463              		.cfi_endproc
 1464              	.LFE122:
 1466 081a 00BF     		.align	2
 1467              		.global	xTaskResumeAll
 1468              		.thumb
 1469              		.thumb_func
 1471              	xTaskResumeAll:
 1472              	.LFB123:
1170:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1171:../FreeRTOS/Source/tasks.c **** 
1172:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1173:../FreeRTOS/Source/tasks.c **** {
 1473              		.loc 1 1173 0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 8
 1476              		@ frame_needed = 1, uses_anonymous_args = 0
 1477 081c 90B5     		push	{r4, r7, lr}
 1478              	.LCFI37:
 1479              		.cfi_def_cfa_offset 12
 1480              		.cfi_offset 14, -4
 1481              		.cfi_offset 7, -8
 1482              		.cfi_offset 4, -12
 1483 081e 83B0     		sub	sp, sp, #12
 1484              	.LCFI38:
 1485              		.cfi_def_cfa_offset 24
 1486 0820 00AF     		add	r7, sp, #0
 1487              	.LCFI39:
 1488              		.cfi_def_cfa_register 7
1174:../FreeRTOS/Source/tasks.c **** register tskTCB *pxTCB;
1175:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1489              		.loc 1 1175 0
 1490 0822 4FF00003 		mov	r3, #0
 1491 0826 7B60     		str	r3, [r7, #4]
1176:../FreeRTOS/Source/tasks.c **** 
1177:../FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1178:../FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1179:../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1180:../FreeRTOS/Source/tasks.c **** 
1181:../FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1182:../FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1183:../FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1184:../FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1185:../FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1186:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1492              		.loc 1 1186 0
 1493 0828 FFF7FEFF 		bl	vPortEnterCritical
1187:../FreeRTOS/Source/tasks.c **** 	{
1188:../FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1494              		.loc 1 1188 0
 1495 082c 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1496 0830 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1497 0834 1B68     		ldr	r3, [r3, #0]
 1498 0836 03F1FF32 		add	r2, r3, #-1
 1499 083a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1500 083e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1501 0842 1A60     		str	r2, [r3, #0]
1189:../FreeRTOS/Source/tasks.c **** 
1190:../FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1502              		.loc 1 1190 0
 1503 0844 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1504 0848 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1505 084c 1B68     		ldr	r3, [r3, #0]
 1506 084e 002B     		cmp	r3, #0
 1507 0850 40F08680 		bne	.L62
1191:../FreeRTOS/Source/tasks.c **** 		{
1192:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1508              		.loc 1 1192 0
 1509 0854 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1510 0858 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1511 085c 1B68     		ldr	r3, [r3, #0]
 1512 085e 002B     		cmp	r3, #0
 1513 0860 7ED0     		beq	.L62
 1514              	.LBB3:
1193:../FreeRTOS/Source/tasks.c **** 			{
1194:../FreeRTOS/Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1515              		.loc 1 1194 0
 1516 0862 4FF00003 		mov	r3, #0
 1517 0866 3B60     		str	r3, [r7, #0]
1195:../FreeRTOS/Source/tasks.c **** 
1196:../FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1197:../FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1198:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1518              		.loc 1 1198 0
 1519 0868 3DE0     		b	.L63
 1520              	.L65:
1199:../FreeRTOS/Source/tasks.c **** 				{
1200:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1521              		.loc 1 1200 0
 1522 086a 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1523 086e C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1524 0872 DB68     		ldr	r3, [r3, #12]
 1525 0874 DB68     		ldr	r3, [r3, #12]
 1526 0876 1C46     		mov	r4, r3
1201:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 1527              		.loc 1 1201 0
 1528 0878 04F11803 		add	r3, r4, #24
 1529 087c 1846     		mov	r0, r3
 1530 087e FFF7FEFF 		bl	vListRemove
1202:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1531              		.loc 1 1202 0
 1532 0882 04F10403 		add	r3, r4, #4
 1533 0886 1846     		mov	r0, r3
 1534 0888 FFF7FEFF 		bl	vListRemove
1203:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1535              		.loc 1 1203 0
 1536 088c E26A     		ldr	r2, [r4, #44]
 1537 088e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1538 0892 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1539 0896 1B68     		ldr	r3, [r3, #0]
 1540 0898 9A42     		cmp	r2, r3
 1541 089a 05D9     		bls	.L64
 1542              		.loc 1 1203 0 is_stmt 0 discriminator 1
 1543 089c E26A     		ldr	r2, [r4, #44]
 1544 089e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1545 08a2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1546 08a6 1A60     		str	r2, [r3, #0]
 1547              	.L64:
 1548              		.loc 1 1203 0 discriminator 2
 1549 08a8 E26A     		ldr	r2, [r4, #44]
 1550 08aa 1346     		mov	r3, r2
 1551 08ac 4FEA8303 		lsl	r3, r3, #2
 1552 08b0 9B18     		adds	r3, r3, r2
 1553 08b2 4FEA8303 		lsl	r3, r3, #2
 1554 08b6 1A46     		mov	r2, r3
 1555 08b8 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1556 08bc C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1557 08c0 D218     		adds	r2, r2, r3
 1558 08c2 04F10403 		add	r3, r4, #4
 1559 08c6 1046     		mov	r0, r2
 1560 08c8 1946     		mov	r1, r3
 1561 08ca FFF7FEFF 		bl	vListInsertEnd
1204:../FreeRTOS/Source/tasks.c **** 
1205:../FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1206:../FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1207:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1562              		.loc 1 1207 0 is_stmt 1 discriminator 2
 1563 08ce E26A     		ldr	r2, [r4, #44]
 1564 08d0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1565 08d4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1566 08d8 1B68     		ldr	r3, [r3, #0]
 1567 08da DB6A     		ldr	r3, [r3, #44]
 1568 08dc 9A42     		cmp	r2, r3
 1569 08de 02D3     		bcc	.L63
1208:../FreeRTOS/Source/tasks.c **** 					{
1209:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1570              		.loc 1 1209 0
 1571 08e0 4FF00103 		mov	r3, #1
 1572 08e4 3B60     		str	r3, [r7, #0]
 1573              	.L63:
1198:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1574              		.loc 1 1198 0 discriminator 1
 1575 08e6 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1576 08ea C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1577 08ee 1B68     		ldr	r3, [r3, #0]
 1578 08f0 002B     		cmp	r3, #0
 1579 08f2 BAD1     		bne	.L65
1210:../FreeRTOS/Source/tasks.c **** 					}
1211:../FreeRTOS/Source/tasks.c **** 				}
1212:../FreeRTOS/Source/tasks.c **** 
1213:../FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1214:../FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1215:../FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1216:../FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1580              		.loc 1 1216 0
 1581 08f4 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1582 08f8 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1583 08fc 1B68     		ldr	r3, [r3, #0]
 1584 08fe 002B     		cmp	r3, #0
 1585 0900 18D0     		beq	.L66
1217:../FreeRTOS/Source/tasks.c **** 				{
1218:../FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1586              		.loc 1 1218 0
 1587 0902 0DE0     		b	.L67
 1588              	.L68:
1219:../FreeRTOS/Source/tasks.c **** 					{
1220:../FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
 1589              		.loc 1 1220 0
 1590 0904 FFF7FEFF 		bl	vTaskIncrementTick
1221:../FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
 1591              		.loc 1 1221 0
 1592 0908 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1593 090c C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1594 0910 1B68     		ldr	r3, [r3, #0]
 1595 0912 03F1FF32 		add	r2, r3, #-1
 1596 0916 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1597 091a C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1598 091e 1A60     		str	r2, [r3, #0]
 1599              	.L67:
1218:../FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1600              		.loc 1 1218 0 discriminator 1
 1601 0920 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1602 0924 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1603 0928 1B68     		ldr	r3, [r3, #0]
 1604 092a 002B     		cmp	r3, #0
 1605 092c EAD1     		bne	.L68
1222:../FreeRTOS/Source/tasks.c **** 					}
1223:../FreeRTOS/Source/tasks.c **** 
1224:../FreeRTOS/Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1225:../FreeRTOS/Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1226:../FreeRTOS/Source/tasks.c **** 					the task actually running. */
1227:../FreeRTOS/Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1228:../FreeRTOS/Source/tasks.c **** 					{
1229:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1606              		.loc 1 1229 0
 1607 092e 4FF00103 		mov	r3, #1
 1608 0932 3B60     		str	r3, [r7, #0]
 1609              	.L66:
1230:../FreeRTOS/Source/tasks.c **** 					}
1231:../FreeRTOS/Source/tasks.c **** 					#endif
1232:../FreeRTOS/Source/tasks.c **** 				}
1233:../FreeRTOS/Source/tasks.c **** 
1234:../FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1610              		.loc 1 1234 0
 1611 0934 3B68     		ldr	r3, [r7, #0]
 1612 0936 012B     		cmp	r3, #1
 1613 0938 06D0     		beq	.L69
 1614              		.loc 1 1234 0 is_stmt 0 discriminator 1
 1615 093a 40F20003 		movw	r3, #:lower16:xMissedYield
 1616 093e C0F20003 		movt	r3, #:upper16:xMissedYield
 1617 0942 1B68     		ldr	r3, [r3, #0]
 1618 0944 012B     		cmp	r3, #1
 1619 0946 0BD1     		bne	.L62
 1620              	.L69:
1235:../FreeRTOS/Source/tasks.c **** 				{
1236:../FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1621              		.loc 1 1236 0 is_stmt 1
 1622 0948 4FF00103 		mov	r3, #1
 1623 094c 7B60     		str	r3, [r7, #4]
1237:../FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
 1624              		.loc 1 1237 0
 1625 094e 40F20003 		movw	r3, #:lower16:xMissedYield
 1626 0952 C0F20003 		movt	r3, #:upper16:xMissedYield
 1627 0956 4FF00002 		mov	r2, #0
 1628 095a 1A60     		str	r2, [r3, #0]
1238:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1629              		.loc 1 1238 0
 1630 095c FFF7FEFF 		bl	vPortYieldFromISR
 1631              	.L62:
 1632              	.LBE3:
1239:../FreeRTOS/Source/tasks.c **** 				}
1240:../FreeRTOS/Source/tasks.c **** 			}
1241:../FreeRTOS/Source/tasks.c **** 		}
1242:../FreeRTOS/Source/tasks.c **** 	}
1243:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1633              		.loc 1 1243 0
 1634 0960 FFF7FEFF 		bl	vPortExitCritical
1244:../FreeRTOS/Source/tasks.c **** 
1245:../FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 1635              		.loc 1 1245 0
 1636 0964 7B68     		ldr	r3, [r7, #4]
1246:../FreeRTOS/Source/tasks.c **** }
 1637              		.loc 1 1246 0
 1638 0966 1846     		mov	r0, r3
 1639 0968 07F10C07 		add	r7, r7, #12
 1640 096c BD46     		mov	sp, r7
 1641 096e 90BD     		pop	{r4, r7, pc}
 1642              		.cfi_endproc
 1643              	.LFE123:
 1645              		.align	2
 1646              		.global	xTaskGetTickCount
 1647              		.thumb
 1648              		.thumb_func
 1650              	xTaskGetTickCount:
 1651              	.LFB124:
1247:../FreeRTOS/Source/tasks.c **** 
1248:../FreeRTOS/Source/tasks.c **** 
1249:../FreeRTOS/Source/tasks.c **** 
1250:../FreeRTOS/Source/tasks.c **** 
1251:../FreeRTOS/Source/tasks.c **** 
1252:../FreeRTOS/Source/tasks.c **** 
1253:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1254:../FreeRTOS/Source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1255:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1256:../FreeRTOS/Source/tasks.c **** 
1257:../FreeRTOS/Source/tasks.c **** 
1258:../FreeRTOS/Source/tasks.c **** 
1259:../FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1260:../FreeRTOS/Source/tasks.c **** {
 1652              		.loc 1 1260 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 8
 1655              		@ frame_needed = 1, uses_anonymous_args = 0
 1656 0970 80B5     		push	{r7, lr}
 1657              	.LCFI40:
 1658              		.cfi_def_cfa_offset 8
 1659              		.cfi_offset 14, -4
 1660              		.cfi_offset 7, -8
 1661 0972 82B0     		sub	sp, sp, #8
 1662              	.LCFI41:
 1663              		.cfi_def_cfa_offset 16
 1664 0974 00AF     		add	r7, sp, #0
 1665              	.LCFI42:
 1666              		.cfi_def_cfa_register 7
1261:../FreeRTOS/Source/tasks.c **** portTickType xTicks;
1262:../FreeRTOS/Source/tasks.c **** 
1263:../FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1264:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1667              		.loc 1 1264 0
 1668 0976 FFF7FEFF 		bl	vPortEnterCritical
1265:../FreeRTOS/Source/tasks.c **** 	{
1266:../FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1669              		.loc 1 1266 0
 1670 097a 40F20003 		movw	r3, #:lower16:xTickCount
 1671 097e C0F20003 		movt	r3, #:upper16:xTickCount
 1672 0982 1B68     		ldr	r3, [r3, #0]
 1673 0984 7B60     		str	r3, [r7, #4]
1267:../FreeRTOS/Source/tasks.c **** 	}
1268:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1674              		.loc 1 1268 0
 1675 0986 FFF7FEFF 		bl	vPortExitCritical
1269:../FreeRTOS/Source/tasks.c **** 
1270:../FreeRTOS/Source/tasks.c **** 	return xTicks;
 1676              		.loc 1 1270 0
 1677 098a 7B68     		ldr	r3, [r7, #4]
1271:../FreeRTOS/Source/tasks.c **** }
 1678              		.loc 1 1271 0
 1679 098c 1846     		mov	r0, r3
 1680 098e 07F10807 		add	r7, r7, #8
 1681 0992 BD46     		mov	sp, r7
 1682 0994 80BD     		pop	{r7, pc}
 1683              		.cfi_endproc
 1684              	.LFE124:
 1686 0996 00BF     		.align	2
 1687              		.global	xTaskGetTickCountFromISR
 1688              		.thumb
 1689              		.thumb_func
 1691              	xTaskGetTickCountFromISR:
 1692              	.LFB125:
1272:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1273:../FreeRTOS/Source/tasks.c **** 
1274:../FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1275:../FreeRTOS/Source/tasks.c **** {
 1693              		.loc 1 1275 0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 8
 1696              		@ frame_needed = 1, uses_anonymous_args = 0
 1697              		@ link register save eliminated.
 1698 0998 80B4     		push	{r7}
 1699              	.LCFI43:
 1700              		.cfi_def_cfa_offset 4
 1701              		.cfi_offset 7, -4
 1702 099a 83B0     		sub	sp, sp, #12
 1703              	.LCFI44:
 1704              		.cfi_def_cfa_offset 16
 1705 099c 00AF     		add	r7, sp, #0
 1706              	.LCFI45:
 1707              		.cfi_def_cfa_register 7
1276:../FreeRTOS/Source/tasks.c **** portTickType xReturn;
1277:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1278:../FreeRTOS/Source/tasks.c **** 
1279:../FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1708              		.loc 1 1279 0
 1709 099e 4FF00003 		mov	r3, #0
 1710 09a2 7B60     		str	r3, [r7, #4]
 1711              	@ 1279 "../FreeRTOS/Source/tasks.c" 1
 1712 09a4 4FF0BF00 			mov r0, #191								
 1713 09a8 80F31188 		msr basepri, r0							
 1714              	
 1715              	@ 0 "" 2
1280:../FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1716              		.loc 1 1280 0
 1717              		.thumb
 1718 09ac 40F20003 		movw	r3, #:lower16:xTickCount
 1719 09b0 C0F20003 		movt	r3, #:upper16:xTickCount
 1720 09b4 1B68     		ldr	r3, [r3, #0]
 1721 09b6 3B60     		str	r3, [r7, #0]
1281:../FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1722              		.loc 1 1281 0
 1723              	@ 1281 "../FreeRTOS/Source/tasks.c" 1
 1724 09b8 4FF00000 			mov r0, #0					
 1725 09bc 80F31188 		msr basepri, r0				
 1726              	
 1727              	@ 0 "" 2
1282:../FreeRTOS/Source/tasks.c **** 
1283:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 1728              		.loc 1 1283 0
 1729              		.thumb
 1730 09c0 3B68     		ldr	r3, [r7, #0]
1284:../FreeRTOS/Source/tasks.c **** }
 1731              		.loc 1 1284 0
 1732 09c2 1846     		mov	r0, r3
 1733 09c4 07F10C07 		add	r7, r7, #12
 1734 09c8 BD46     		mov	sp, r7
 1735 09ca 80BC     		pop	{r7}
 1736 09cc 7047     		bx	lr
 1737              		.cfi_endproc
 1738              	.LFE125:
 1740 09ce 00BF     		.align	2
 1741              		.global	uxTaskGetNumberOfTasks
 1742              		.thumb
 1743              		.thumb_func
 1745              	uxTaskGetNumberOfTasks:
 1746              	.LFB126:
1285:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1286:../FreeRTOS/Source/tasks.c **** 
1287:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1288:../FreeRTOS/Source/tasks.c **** {
 1747              		.loc 1 1288 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 1, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 1752 09d0 80B4     		push	{r7}
 1753              	.LCFI46:
 1754              		.cfi_def_cfa_offset 4
 1755              		.cfi_offset 7, -4
 1756 09d2 00AF     		add	r7, sp, #0
 1757              	.LCFI47:
 1758              		.cfi_def_cfa_register 7
1289:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1290:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1291:../FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1759              		.loc 1 1291 0
 1760 09d4 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1761 09d8 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1762 09dc 1B68     		ldr	r3, [r3, #0]
1292:../FreeRTOS/Source/tasks.c **** }
 1763              		.loc 1 1292 0
 1764 09de 1846     		mov	r0, r3
 1765 09e0 BD46     		mov	sp, r7
 1766 09e2 80BC     		pop	{r7}
 1767 09e4 7047     		bx	lr
 1768              		.cfi_endproc
 1769              	.LFE126:
 1771              		.section	.rodata
 1772 0005 000000   		.align	2
 1773              	.LC1:
 1774 0008 0D0A00   		.ascii	"\015\012\000"
 1775              		.text
 1776 09e6 00BF     		.align	2
 1777              		.global	vTaskGetRunTimeStats
 1778              		.thumb
 1779              		.thumb_func
 1781              	vTaskGetRunTimeStats:
 1782              	.LFB127:
1293:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1294:../FreeRTOS/Source/tasks.c **** 
1295:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1296:../FreeRTOS/Source/tasks.c **** 
1297:../FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1298:../FreeRTOS/Source/tasks.c **** 	{
1299:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1300:../FreeRTOS/Source/tasks.c **** 
1301:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1302:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1303:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1304:../FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1305:../FreeRTOS/Source/tasks.c **** 	}
1306:../FreeRTOS/Source/tasks.c **** 
1307:../FreeRTOS/Source/tasks.c **** #endif
1308:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1309:../FreeRTOS/Source/tasks.c **** 
1310:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1311:../FreeRTOS/Source/tasks.c **** 
1312:../FreeRTOS/Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1313:../FreeRTOS/Source/tasks.c **** 	{
1314:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1315:../FreeRTOS/Source/tasks.c **** 
1316:../FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1317:../FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1318:../FreeRTOS/Source/tasks.c **** 
1319:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1320:../FreeRTOS/Source/tasks.c **** 		{
1321:../FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1322:../FreeRTOS/Source/tasks.c **** 			report the task name, state and stack high water mark. */
1323:../FreeRTOS/Source/tasks.c **** 
1324:../FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1325:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1326:../FreeRTOS/Source/tasks.c **** 
1327:../FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1328:../FreeRTOS/Source/tasks.c **** 
1329:../FreeRTOS/Source/tasks.c **** 			do
1330:../FreeRTOS/Source/tasks.c **** 			{
1331:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
1332:../FreeRTOS/Source/tasks.c **** 
1333:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1334:../FreeRTOS/Source/tasks.c **** 				{
1335:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1336:../FreeRTOS/Source/tasks.c **** 				}
1337:../FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1338:../FreeRTOS/Source/tasks.c **** 
1339:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1340:../FreeRTOS/Source/tasks.c **** 			{
1341:../FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1342:../FreeRTOS/Source/tasks.c **** 			}
1343:../FreeRTOS/Source/tasks.c **** 
1344:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1345:../FreeRTOS/Source/tasks.c **** 			{
1346:../FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1347:../FreeRTOS/Source/tasks.c **** 			}
1348:../FreeRTOS/Source/tasks.c **** 
1349:../FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1350:../FreeRTOS/Source/tasks.c **** 			{
1351:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1352:../FreeRTOS/Source/tasks.c **** 				{
1353:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1354:../FreeRTOS/Source/tasks.c **** 				}
1355:../FreeRTOS/Source/tasks.c **** 			}
1356:../FreeRTOS/Source/tasks.c **** 			#endif
1357:../FreeRTOS/Source/tasks.c **** 
1358:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1359:../FreeRTOS/Source/tasks.c **** 			{
1360:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1361:../FreeRTOS/Source/tasks.c **** 				{
1362:../FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1363:../FreeRTOS/Source/tasks.c **** 				}
1364:../FreeRTOS/Source/tasks.c **** 			}
1365:../FreeRTOS/Source/tasks.c **** 			#endif
1366:../FreeRTOS/Source/tasks.c **** 		}
1367:../FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1368:../FreeRTOS/Source/tasks.c **** 	}
1369:../FreeRTOS/Source/tasks.c **** 
1370:../FreeRTOS/Source/tasks.c **** #endif
1371:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1372:../FreeRTOS/Source/tasks.c **** 
1373:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1374:../FreeRTOS/Source/tasks.c **** 
1375:../FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1376:../FreeRTOS/Source/tasks.c **** 	{
 1783              		.loc 1 1376 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 16
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787 09e8 90B5     		push	{r4, r7, lr}
 1788              	.LCFI48:
 1789              		.cfi_def_cfa_offset 12
 1790              		.cfi_offset 14, -4
 1791              		.cfi_offset 7, -8
 1792              		.cfi_offset 4, -12
 1793 09ea 85B0     		sub	sp, sp, #20
 1794              	.LCFI49:
 1795              		.cfi_def_cfa_offset 32
 1796 09ec 00AF     		add	r7, sp, #0
 1797              	.LCFI50:
 1798              		.cfi_def_cfa_register 7
 1799 09ee 7860     		str	r0, [r7, #4]
1377:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1378:../FreeRTOS/Source/tasks.c **** 	unsigned long ulTotalRunTime;
1379:../FreeRTOS/Source/tasks.c **** 
1380:../FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1381:../FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1382:../FreeRTOS/Source/tasks.c **** 
1383:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1800              		.loc 1 1383 0
 1801 09f0 FFF7FEFF 		bl	vTaskSuspendAll
1384:../FreeRTOS/Source/tasks.c **** 		{
1385:../FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1386:../FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1387:../FreeRTOS/Source/tasks.c **** 			#else
1388:../FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 1802              		.loc 1 1388 0
 1803 09f4 FFF7FEFF 		bl	get_us_time
 1804 09f8 0246     		mov	r2, r0
 1805 09fa 0B46     		mov	r3, r1
 1806 09fc 1346     		mov	r3, r2
 1807 09fe BB60     		str	r3, [r7, #8]
1389:../FreeRTOS/Source/tasks.c **** 			#endif
1390:../FreeRTOS/Source/tasks.c **** 
1391:../FreeRTOS/Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1392:../FreeRTOS/Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1393:../FreeRTOS/Source/tasks.c **** 			ulTotalRunTime /= 100UL;
 1808              		.loc 1 1393 0
 1809 0a00 BA68     		ldr	r2, [r7, #8]
 1810 0a02 48F21F53 		movw	r3, #34079
 1811 0a06 C5F2EB13 		movt	r3, 20971
 1812 0a0a A3FB0213 		umull	r1, r3, r3, r2
 1813 0a0e 4FEA5313 		lsr	r3, r3, #5
 1814 0a12 BB60     		str	r3, [r7, #8]
1394:../FreeRTOS/Source/tasks.c **** 			
1395:../FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1396:../FreeRTOS/Source/tasks.c **** 			generating a table of run timer percentages in the provided
1397:../FreeRTOS/Source/tasks.c **** 			buffer. */
1398:../FreeRTOS/Source/tasks.c **** 
1399:../FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
 1815              		.loc 1 1399 0
 1816 0a14 7B68     		ldr	r3, [r7, #4]
 1817 0a16 4FF00002 		mov	r2, #0
 1818 0a1a 1A70     		strb	r2, [r3, #0]
1400:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 1819              		.loc 1 1400 0
 1820 0a1c 7C68     		ldr	r4, [r7, #4]
 1821 0a1e 2046     		mov	r0, r4
 1822 0a20 FFF7FEFF 		bl	strlen
 1823 0a24 0346     		mov	r3, r0
 1824 0a26 E218     		adds	r2, r4, r3
 1825 0a28 40F20003 		movw	r3, #:lower16:.LC1
 1826 0a2c C0F20003 		movt	r3, #:upper16:.LC1
 1827 0a30 1146     		mov	r1, r2
 1828 0a32 1A46     		mov	r2, r3
 1829 0a34 4FF00303 		mov	r3, #3
 1830 0a38 0846     		mov	r0, r1
 1831 0a3a 1146     		mov	r1, r2
 1832 0a3c 1A46     		mov	r2, r3
 1833 0a3e FFF7FEFF 		bl	memcpy
1401:../FreeRTOS/Source/tasks.c **** 
1402:../FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 1834              		.loc 1 1402 0
 1835 0a42 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 1836 0a46 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 1837 0a4a 1B68     		ldr	r3, [r3, #0]
 1838 0a4c 03F10103 		add	r3, r3, #1
 1839 0a50 FB60     		str	r3, [r7, #12]
 1840              	.L75:
1403:../FreeRTOS/Source/tasks.c **** 
1404:../FreeRTOS/Source/tasks.c **** 			do
1405:../FreeRTOS/Source/tasks.c **** 			{
1406:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
 1841              		.loc 1 1406 0
 1842 0a52 FB68     		ldr	r3, [r7, #12]
 1843 0a54 03F1FF33 		add	r3, r3, #-1
 1844 0a58 FB60     		str	r3, [r7, #12]
1407:../FreeRTOS/Source/tasks.c **** 
1408:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 1845              		.loc 1 1408 0
 1846 0a5a FA68     		ldr	r2, [r7, #12]
 1847 0a5c 1346     		mov	r3, r2
 1848 0a5e 4FEA8303 		lsl	r3, r3, #2
 1849 0a62 9B18     		adds	r3, r3, r2
 1850 0a64 4FEA8303 		lsl	r3, r3, #2
 1851 0a68 1A46     		mov	r2, r3
 1852 0a6a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1853 0a6e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1854 0a72 D318     		adds	r3, r2, r3
 1855 0a74 1B68     		ldr	r3, [r3, #0]
 1856 0a76 002B     		cmp	r3, #0
 1857 0a78 13D0     		beq	.L74
1409:../FreeRTOS/Source/tasks.c **** 				{
1410:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
 1858              		.loc 1 1410 0
 1859 0a7a FA68     		ldr	r2, [r7, #12]
 1860 0a7c 1346     		mov	r3, r2
 1861 0a7e 4FEA8303 		lsl	r3, r3, #2
 1862 0a82 9B18     		adds	r3, r3, r2
 1863 0a84 4FEA8303 		lsl	r3, r3, #2
 1864 0a88 1A46     		mov	r2, r3
 1865 0a8a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1866 0a8e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1867 0a92 D318     		adds	r3, r2, r3
 1868 0a94 7868     		ldr	r0, [r7, #4]
 1869 0a96 1946     		mov	r1, r3
 1870 0a98 BA68     		ldr	r2, [r7, #8]
 1871 0a9a 4FF05203 		mov	r3, #82
 1872 0a9e 00F0C3FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1873              	.L74:
1411:../FreeRTOS/Source/tasks.c **** 				}
1412:../FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 1874              		.loc 1 1412 0
 1875 0aa2 FB68     		ldr	r3, [r7, #12]
 1876 0aa4 002B     		cmp	r3, #0
 1877 0aa6 D4D1     		bne	.L75
1413:../FreeRTOS/Source/tasks.c **** 
1414:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 1878              		.loc 1 1414 0
 1879 0aa8 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1880 0aac C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1881 0ab0 1B68     		ldr	r3, [r3, #0]
 1882 0ab2 1B68     		ldr	r3, [r3, #0]
 1883 0ab4 002B     		cmp	r3, #0
 1884 0ab6 0BD0     		beq	.L76
1415:../FreeRTOS/Source/tasks.c **** 			{
1416:../FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
 1885              		.loc 1 1416 0
 1886 0ab8 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1887 0abc C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1888 0ac0 1B68     		ldr	r3, [r3, #0]
 1889 0ac2 7868     		ldr	r0, [r7, #4]
 1890 0ac4 1946     		mov	r1, r3
 1891 0ac6 BA68     		ldr	r2, [r7, #8]
 1892 0ac8 4FF04203 		mov	r3, #66
 1893 0acc 00F0ACFC 		bl	prvGenerateRunTimeStatsForTasksInList
 1894              	.L76:
1417:../FreeRTOS/Source/tasks.c **** 			}
1418:../FreeRTOS/Source/tasks.c **** 
1419:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 1895              		.loc 1 1419 0
 1896 0ad0 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1897 0ad4 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1898 0ad8 1B68     		ldr	r3, [r3, #0]
 1899 0ada 1B68     		ldr	r3, [r3, #0]
 1900 0adc 002B     		cmp	r3, #0
 1901 0ade 0BD0     		beq	.L77
1420:../FreeRTOS/Source/tasks.c **** 			{
1421:../FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
 1902              		.loc 1 1421 0
 1903 0ae0 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1904 0ae4 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1905 0ae8 1B68     		ldr	r3, [r3, #0]
 1906 0aea 7868     		ldr	r0, [r7, #4]
 1907 0aec 1946     		mov	r1, r3
 1908 0aee BA68     		ldr	r2, [r7, #8]
 1909 0af0 4FF04203 		mov	r3, #66
 1910 0af4 00F098FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1911              	.L77:
1422:../FreeRTOS/Source/tasks.c **** 			}
1423:../FreeRTOS/Source/tasks.c **** 
1424:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1425:../FreeRTOS/Source/tasks.c **** 			{
1426:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 1912              		.loc 1 1426 0
 1913 0af8 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 1914 0afc C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 1915 0b00 1B68     		ldr	r3, [r3, #0]
 1916 0b02 002B     		cmp	r3, #0
 1917 0b04 09D0     		beq	.L78
1427:../FreeRTOS/Source/tasks.c **** 				{
1428:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
 1918              		.loc 1 1428 0
 1919 0b06 7868     		ldr	r0, [r7, #4]
 1920 0b08 40F20001 		movw	r1, #:lower16:xTasksWaitingTermination
 1921 0b0c C0F20001 		movt	r1, #:upper16:xTasksWaitingTermination
 1922 0b10 BA68     		ldr	r2, [r7, #8]
 1923 0b12 4FF04403 		mov	r3, #68
 1924 0b16 00F087FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1925              	.L78:
1429:../FreeRTOS/Source/tasks.c **** 				}
1430:../FreeRTOS/Source/tasks.c **** 			}
1431:../FreeRTOS/Source/tasks.c **** 			#endif
1432:../FreeRTOS/Source/tasks.c **** 
1433:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1434:../FreeRTOS/Source/tasks.c **** 			{
1435:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 1926              		.loc 1 1435 0
 1927 0b1a 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1928 0b1e C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1929 0b22 1B68     		ldr	r3, [r3, #0]
 1930 0b24 002B     		cmp	r3, #0
 1931 0b26 09D0     		beq	.L79
1436:../FreeRTOS/Source/tasks.c **** 				{
1437:../FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tsk
 1932              		.loc 1 1437 0
 1933 0b28 7868     		ldr	r0, [r7, #4]
 1934 0b2a 40F20001 		movw	r1, #:lower16:xSuspendedTaskList
 1935 0b2e C0F20001 		movt	r1, #:upper16:xSuspendedTaskList
 1936 0b32 BA68     		ldr	r2, [r7, #8]
 1937 0b34 4FF05303 		mov	r3, #83
 1938 0b38 00F076FC 		bl	prvGenerateRunTimeStatsForTasksInList
 1939              	.L79:
1438:../FreeRTOS/Source/tasks.c **** 				}
1439:../FreeRTOS/Source/tasks.c **** 			}
1440:../FreeRTOS/Source/tasks.c **** 			#endif
1441:../FreeRTOS/Source/tasks.c **** 		}
1442:../FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
 1940              		.loc 1 1442 0
 1941 0b3c FFF7FEFF 		bl	xTaskResumeAll
1443:../FreeRTOS/Source/tasks.c **** 	}
 1942              		.loc 1 1443 0
 1943 0b40 07F11407 		add	r7, r7, #20
 1944 0b44 BD46     		mov	sp, r7
 1945 0b46 90BD     		pop	{r4, r7, pc}
 1946              		.cfi_endproc
 1947              	.LFE127:
 1949              		.align	2
 1950              		.global	xTaskGetIdleTaskHandle
 1951              		.thumb
 1952              		.thumb_func
 1954              	xTaskGetIdleTaskHandle:
 1955              	.LFB128:
1444:../FreeRTOS/Source/tasks.c **** 
1445:../FreeRTOS/Source/tasks.c **** #endif
1446:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1447:../FreeRTOS/Source/tasks.c **** 
1448:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1449:../FreeRTOS/Source/tasks.c **** 
1450:../FreeRTOS/Source/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1451:../FreeRTOS/Source/tasks.c **** 	{
1452:../FreeRTOS/Source/tasks.c **** 		configASSERT( pcBuffer );
1453:../FreeRTOS/Source/tasks.c **** 		configASSERT( ulBufferSize );
1454:../FreeRTOS/Source/tasks.c **** 
1455:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1456:../FreeRTOS/Source/tasks.c **** 		{
1457:../FreeRTOS/Source/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
1458:../FreeRTOS/Source/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1459:../FreeRTOS/Source/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1460:../FreeRTOS/Source/tasks.c **** 			xTracing = pdTRUE;
1461:../FreeRTOS/Source/tasks.c **** 		}
1462:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1463:../FreeRTOS/Source/tasks.c **** 	}
1464:../FreeRTOS/Source/tasks.c **** 
1465:../FreeRTOS/Source/tasks.c **** #endif
1466:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1467:../FreeRTOS/Source/tasks.c **** 
1468:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1469:../FreeRTOS/Source/tasks.c **** 
1470:../FreeRTOS/Source/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1471:../FreeRTOS/Source/tasks.c **** 	{
1472:../FreeRTOS/Source/tasks.c **** 	unsigned long ulBufferLength;
1473:../FreeRTOS/Source/tasks.c **** 
1474:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1475:../FreeRTOS/Source/tasks.c **** 			xTracing = pdFALSE;
1476:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1477:../FreeRTOS/Source/tasks.c **** 
1478:../FreeRTOS/Source/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
1479:../FreeRTOS/Source/tasks.c **** 
1480:../FreeRTOS/Source/tasks.c **** 		return ulBufferLength;
1481:../FreeRTOS/Source/tasks.c **** 	}
1482:../FreeRTOS/Source/tasks.c **** 
1483:../FreeRTOS/Source/tasks.c **** #endif
1484:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1485:../FreeRTOS/Source/tasks.c **** 
1486:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1487:../FreeRTOS/Source/tasks.c **** 
1488:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1489:../FreeRTOS/Source/tasks.c **** 	{
 1956              		.loc 1 1489 0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 0
 1959              		@ frame_needed = 1, uses_anonymous_args = 0
 1960              		@ link register save eliminated.
 1961 0b48 80B4     		push	{r7}
 1962              	.LCFI51:
 1963              		.cfi_def_cfa_offset 4
 1964              		.cfi_offset 7, -4
 1965 0b4a 00AF     		add	r7, sp, #0
 1966              	.LCFI52:
 1967              		.cfi_def_cfa_register 7
1490:../FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1491:../FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1492:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1493:../FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
 1968              		.loc 1 1493 0
 1969 0b4c 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1970 0b50 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1971 0b54 1B68     		ldr	r3, [r3, #0]
1494:../FreeRTOS/Source/tasks.c **** 	}
 1972              		.loc 1 1494 0
 1973 0b56 1846     		mov	r0, r3
 1974 0b58 BD46     		mov	sp, r7
 1975 0b5a 80BC     		pop	{r7}
 1976 0b5c 7047     		bx	lr
 1977              		.cfi_endproc
 1978              	.LFE128:
 1980 0b5e 00BF     		.align	2
 1981              		.global	vTaskIncrementTick
 1982              		.thumb
 1983              		.thumb_func
 1985              	vTaskIncrementTick:
 1986              	.LFB129:
1495:../FreeRTOS/Source/tasks.c **** 	
1496:../FreeRTOS/Source/tasks.c **** #endif
1497:../FreeRTOS/Source/tasks.c **** 
1498:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1499:../FreeRTOS/Source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1500:../FreeRTOS/Source/tasks.c ****  * documented in task.h
1501:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1502:../FreeRTOS/Source/tasks.c **** 
1503:../FreeRTOS/Source/tasks.c **** void vTaskIncrementTick( void )
1504:../FreeRTOS/Source/tasks.c **** {
 1987              		.loc 1 1504 0
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 16
 1990              		@ frame_needed = 1, uses_anonymous_args = 0
 1991 0b60 80B5     		push	{r7, lr}
 1992              	.LCFI53:
 1993              		.cfi_def_cfa_offset 8
 1994              		.cfi_offset 14, -4
 1995              		.cfi_offset 7, -8
 1996 0b62 84B0     		sub	sp, sp, #16
 1997              	.LCFI54:
 1998              		.cfi_def_cfa_offset 24
 1999 0b64 00AF     		add	r7, sp, #0
 2000              	.LCFI55:
 2001              		.cfi_def_cfa_register 7
1505:../FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1506:../FreeRTOS/Source/tasks.c **** 
1507:../FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1508:../FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1509:../FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1510:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2002              		.loc 1 1510 0
 2003 0b66 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2004 0b6a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2005 0b6e 1B68     		ldr	r3, [r3, #0]
 2006 0b70 002B     		cmp	r3, #0
 2007 0b72 40F0C080 		bne	.L82
1511:../FreeRTOS/Source/tasks.c **** 	{
1512:../FreeRTOS/Source/tasks.c **** 		++xTickCount;
 2008              		.loc 1 1512 0
 2009 0b76 40F20003 		movw	r3, #:lower16:xTickCount
 2010 0b7a C0F20003 		movt	r3, #:upper16:xTickCount
 2011 0b7e 1B68     		ldr	r3, [r3, #0]
 2012 0b80 03F10102 		add	r2, r3, #1
 2013 0b84 40F20003 		movw	r3, #:lower16:xTickCount
 2014 0b88 C0F20003 		movt	r3, #:upper16:xTickCount
 2015 0b8c 1A60     		str	r2, [r3, #0]
1513:../FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 2016              		.loc 1 1513 0
 2017 0b8e 40F20003 		movw	r3, #:lower16:xTickCount
 2018 0b92 C0F20003 		movt	r3, #:upper16:xTickCount
 2019 0b96 1B68     		ldr	r3, [r3, #0]
 2020 0b98 002B     		cmp	r3, #0
 2021 0b9a 40D1     		bne	.L83
 2022              	.LBB4:
1514:../FreeRTOS/Source/tasks.c **** 		{
1515:../FreeRTOS/Source/tasks.c **** 			xList *pxTemp;
1516:../FreeRTOS/Source/tasks.c **** 
1517:../FreeRTOS/Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1518:../FreeRTOS/Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1519:../FreeRTOS/Source/tasks.c **** 			an error! */
1520:../FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1521:../FreeRTOS/Source/tasks.c **** 			
1522:../FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 2023              		.loc 1 1522 0
 2024 0b9c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2025 0ba0 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2026 0ba4 1B68     		ldr	r3, [r3, #0]
 2027 0ba6 FB60     		str	r3, [r7, #12]
1523:../FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 2028              		.loc 1 1523 0
 2029 0ba8 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2030 0bac C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2031 0bb0 1A68     		ldr	r2, [r3, #0]
 2032 0bb2 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2033 0bb6 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2034 0bba 1A60     		str	r2, [r3, #0]
1524:../FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 2035              		.loc 1 1524 0
 2036 0bbc 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2037 0bc0 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2038 0bc4 FA68     		ldr	r2, [r7, #12]
 2039 0bc6 1A60     		str	r2, [r3, #0]
1525:../FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
 2040              		.loc 1 1525 0
 2041 0bc8 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2042 0bcc C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2043 0bd0 1B68     		ldr	r3, [r3, #0]
 2044 0bd2 03F10102 		add	r2, r3, #1
 2045 0bd6 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2046 0bda C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2047 0bde 1A60     		str	r2, [r3, #0]
1526:../FreeRTOS/Source/tasks.c **** 	
1527:../FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2048              		.loc 1 1527 0
 2049 0be0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2050 0be4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2051 0be8 1B68     		ldr	r3, [r3, #0]
 2052 0bea 1B68     		ldr	r3, [r3, #0]
 2053 0bec 002B     		cmp	r3, #0
 2054 0bee 07D1     		bne	.L84
1528:../FreeRTOS/Source/tasks.c **** 			{
1529:../FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1530:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1531:../FreeRTOS/Source/tasks.c **** 				extremely unlikely that the	
1532:../FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1533:../FreeRTOS/Source/tasks.c **** 				there is an item in the delayed list. */
1534:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 2055              		.loc 1 1534 0
 2056 0bf0 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2057 0bf4 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2058 0bf8 4FF0FF32 		mov	r2, #-1
 2059 0bfc 1A60     		str	r2, [r3, #0]
 2060 0bfe 0EE0     		b	.L83
 2061              	.L84:
1535:../FreeRTOS/Source/tasks.c **** 			}
1536:../FreeRTOS/Source/tasks.c **** 			else
1537:../FreeRTOS/Source/tasks.c **** 			{
1538:../FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1539:../FreeRTOS/Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1540:../FreeRTOS/Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1541:../FreeRTOS/Source/tasks.c **** 				from the Blocked state. */
1542:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2062              		.loc 1 1542 0
 2063 0c00 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2064 0c04 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2065 0c08 1B68     		ldr	r3, [r3, #0]
 2066 0c0a DB68     		ldr	r3, [r3, #12]
 2067 0c0c DB68     		ldr	r3, [r3, #12]
 2068 0c0e BB60     		str	r3, [r7, #8]
1543:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2069              		.loc 1 1543 0
 2070 0c10 BB68     		ldr	r3, [r7, #8]
 2071 0c12 5A68     		ldr	r2, [r3, #4]
 2072 0c14 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2073 0c18 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2074 0c1c 1A60     		str	r2, [r3, #0]
 2075              	.L83:
 2076              	.LBE4:
 2077              	.LBB5:
1544:../FreeRTOS/Source/tasks.c **** 			}
1545:../FreeRTOS/Source/tasks.c **** 		}
1546:../FreeRTOS/Source/tasks.c **** 
1547:../FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1548:../FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 2078              		.loc 1 1548 0
 2079 0c1e 40F20003 		movw	r3, #:lower16:xTickCount
 2080 0c22 C0F20003 		movt	r3, #:upper16:xTickCount
 2081 0c26 1A68     		ldr	r2, [r3, #0]
 2082 0c28 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2083 0c2c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2084 0c30 1B68     		ldr	r3, [r3, #0]
 2085 0c32 9A42     		cmp	r2, r3
 2086 0c34 6BD3     		bcc	.L81
 2087              	.L90:
 2088              		.loc 1 1548 0 is_stmt 0 discriminator 1
 2089 0c36 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2090 0c3a C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2091 0c3e 1B68     		ldr	r3, [r3, #0]
 2092 0c40 1B68     		ldr	r3, [r3, #0]
 2093 0c42 002B     		cmp	r3, #0
 2094 0c44 07D1     		bne	.L86
 2095              		.loc 1 1548 0 discriminator 2
 2096 0c46 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2097 0c4a C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2098 0c4e 4FF0FF32 		mov	r2, #-1
 2099 0c52 1A60     		str	r2, [r3, #0]
 2100 0c54 5BE0     		b	.L81
 2101              	.L86:
 2102              		.loc 1 1548 0 discriminator 3
 2103 0c56 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2104 0c5a C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2105 0c5e 1B68     		ldr	r3, [r3, #0]
 2106 0c60 DB68     		ldr	r3, [r3, #12]
 2107 0c62 DB68     		ldr	r3, [r3, #12]
 2108 0c64 BB60     		str	r3, [r7, #8]
 2109 0c66 BB68     		ldr	r3, [r7, #8]
 2110 0c68 5B68     		ldr	r3, [r3, #4]
 2111 0c6a 7B60     		str	r3, [r7, #4]
 2112 0c6c 40F20003 		movw	r3, #:lower16:xTickCount
 2113 0c70 C0F20003 		movt	r3, #:upper16:xTickCount
 2114 0c74 1A68     		ldr	r2, [r3, #0]
 2115 0c76 7B68     		ldr	r3, [r7, #4]
 2116 0c78 9A42     		cmp	r2, r3
 2117 0c7a 06D2     		bcs	.L87
 2118              		.loc 1 1548 0 discriminator 4
 2119 0c7c 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2120 0c80 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2121 0c84 7A68     		ldr	r2, [r7, #4]
 2122 0c86 1A60     		str	r2, [r3, #0]
 2123 0c88 41E0     		b	.L81
 2124              	.L87:
 2125              		.loc 1 1548 0 discriminator 5
 2126 0c8a BB68     		ldr	r3, [r7, #8]
 2127 0c8c 03F10403 		add	r3, r3, #4
 2128 0c90 1846     		mov	r0, r3
 2129 0c92 FFF7FEFF 		bl	vListRemove
 2130 0c96 BB68     		ldr	r3, [r7, #8]
 2131 0c98 9B6A     		ldr	r3, [r3, #40]
 2132 0c9a 002B     		cmp	r3, #0
 2133 0c9c 05D0     		beq	.L88
 2134              		.loc 1 1548 0 discriminator 6
 2135 0c9e BB68     		ldr	r3, [r7, #8]
 2136 0ca0 03F11803 		add	r3, r3, #24
 2137 0ca4 1846     		mov	r0, r3
 2138 0ca6 FFF7FEFF 		bl	vListRemove
 2139              	.L88:
 2140              		.loc 1 1548 0 discriminator 7
 2141 0caa BB68     		ldr	r3, [r7, #8]
 2142 0cac DA6A     		ldr	r2, [r3, #44]
 2143 0cae 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2144 0cb2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2145 0cb6 1B68     		ldr	r3, [r3, #0]
 2146 0cb8 9A42     		cmp	r2, r3
 2147 0cba 06D9     		bls	.L89
 2148              		.loc 1 1548 0 discriminator 8
 2149 0cbc BB68     		ldr	r3, [r7, #8]
 2150 0cbe DA6A     		ldr	r2, [r3, #44]
 2151 0cc0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2152 0cc4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2153 0cc8 1A60     		str	r2, [r3, #0]
 2154              	.L89:
 2155              		.loc 1 1548 0 discriminator 9
 2156 0cca BB68     		ldr	r3, [r7, #8]
 2157 0ccc DA6A     		ldr	r2, [r3, #44]
 2158 0cce 1346     		mov	r3, r2
 2159 0cd0 4FEA8303 		lsl	r3, r3, #2
 2160 0cd4 9B18     		adds	r3, r3, r2
 2161 0cd6 4FEA8303 		lsl	r3, r3, #2
 2162 0cda 1A46     		mov	r2, r3
 2163 0cdc 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2164 0ce0 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2165 0ce4 D218     		adds	r2, r2, r3
 2166 0ce6 BB68     		ldr	r3, [r7, #8]
 2167 0ce8 03F10403 		add	r3, r3, #4
 2168 0cec 1046     		mov	r0, r2
 2169 0cee 1946     		mov	r1, r3
 2170 0cf0 FFF7FEFF 		bl	vListInsertEnd
 2171 0cf4 9FE7     		b	.L90
 2172              	.L82:
 2173              	.LBE5:
1549:../FreeRTOS/Source/tasks.c **** 	}
1550:../FreeRTOS/Source/tasks.c **** 	else
1551:../FreeRTOS/Source/tasks.c **** 	{
1552:../FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
 2174              		.loc 1 1552 0 is_stmt 1
 2175 0cf6 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2176 0cfa C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2177 0cfe 1B68     		ldr	r3, [r3, #0]
 2178 0d00 03F10102 		add	r2, r3, #1
 2179 0d04 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2180 0d08 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2181 0d0c 1A60     		str	r2, [r3, #0]
 2182              	.L81:
1553:../FreeRTOS/Source/tasks.c **** 
1554:../FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1555:../FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1556:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1557:../FreeRTOS/Source/tasks.c **** 		{
1558:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1559:../FreeRTOS/Source/tasks.c **** 		}
1560:../FreeRTOS/Source/tasks.c **** 		#endif
1561:../FreeRTOS/Source/tasks.c **** 	}
1562:../FreeRTOS/Source/tasks.c **** 
1563:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1564:../FreeRTOS/Source/tasks.c **** 	{
1565:../FreeRTOS/Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1566:../FreeRTOS/Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1567:../FreeRTOS/Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1568:../FreeRTOS/Source/tasks.c **** 		{
1569:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1570:../FreeRTOS/Source/tasks.c **** 		}
1571:../FreeRTOS/Source/tasks.c **** 	}
1572:../FreeRTOS/Source/tasks.c **** 	#endif
1573:../FreeRTOS/Source/tasks.c **** 
1574:../FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1575:../FreeRTOS/Source/tasks.c **** }
 2183              		.loc 1 1575 0
 2184 0d0e 07F11007 		add	r7, r7, #16
 2185 0d12 BD46     		mov	sp, r7
 2186 0d14 80BD     		pop	{r7, pc}
 2187              		.cfi_endproc
 2188              	.LFE129:
 2190 0d16 00BF     		.align	2
 2191              		.global	vTaskSetApplicationTaskTag
 2192              		.thumb
 2193              		.thumb_func
 2195              	vTaskSetApplicationTaskTag:
 2196              	.LFB130:
1576:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1577:../FreeRTOS/Source/tasks.c **** 
1578:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1579:../FreeRTOS/Source/tasks.c **** 
1580:../FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1581:../FreeRTOS/Source/tasks.c **** 	{
 2197              		.loc 1 1581 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 16
 2200              		@ frame_needed = 1, uses_anonymous_args = 0
 2201 0d18 80B5     		push	{r7, lr}
 2202              	.LCFI56:
 2203              		.cfi_def_cfa_offset 8
 2204              		.cfi_offset 14, -4
 2205              		.cfi_offset 7, -8
 2206 0d1a 84B0     		sub	sp, sp, #16
 2207              	.LCFI57:
 2208              		.cfi_def_cfa_offset 24
 2209 0d1c 00AF     		add	r7, sp, #0
 2210              	.LCFI58:
 2211              		.cfi_def_cfa_register 7
 2212 0d1e 7860     		str	r0, [r7, #4]
 2213 0d20 3960     		str	r1, [r7, #0]
1582:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1583:../FreeRTOS/Source/tasks.c **** 
1584:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1585:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2214              		.loc 1 1585 0
 2215 0d22 7B68     		ldr	r3, [r7, #4]
 2216 0d24 002B     		cmp	r3, #0
 2217 0d26 06D1     		bne	.L93
1586:../FreeRTOS/Source/tasks.c **** 		{
1587:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2218              		.loc 1 1587 0
 2219 0d28 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2220 0d2c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2221 0d30 1B68     		ldr	r3, [r3, #0]
 2222 0d32 FB60     		str	r3, [r7, #12]
 2223 0d34 01E0     		b	.L94
 2224              	.L93:
1588:../FreeRTOS/Source/tasks.c **** 		}
1589:../FreeRTOS/Source/tasks.c **** 		else
1590:../FreeRTOS/Source/tasks.c **** 		{
1591:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2225              		.loc 1 1591 0
 2226 0d36 7B68     		ldr	r3, [r7, #4]
 2227 0d38 FB60     		str	r3, [r7, #12]
 2228              	.L94:
1592:../FreeRTOS/Source/tasks.c **** 		}
1593:../FreeRTOS/Source/tasks.c **** 
1594:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1595:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1596:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2229              		.loc 1 1596 0
 2230 0d3a FFF7FEFF 		bl	vPortEnterCritical
1597:../FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2231              		.loc 1 1597 0
 2232 0d3e FB68     		ldr	r3, [r7, #12]
 2233 0d40 3A68     		ldr	r2, [r7, #0]
 2234 0d42 9A64     		str	r2, [r3, #72]
1598:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2235              		.loc 1 1598 0
 2236 0d44 FFF7FEFF 		bl	vPortExitCritical
1599:../FreeRTOS/Source/tasks.c **** 	}
 2237              		.loc 1 1599 0
 2238 0d48 07F11007 		add	r7, r7, #16
 2239 0d4c BD46     		mov	sp, r7
 2240 0d4e 80BD     		pop	{r7, pc}
 2241              		.cfi_endproc
 2242              	.LFE130:
 2244              		.align	2
 2245              		.global	xTaskGetApplicationTaskTag
 2246              		.thumb
 2247              		.thumb_func
 2249              	xTaskGetApplicationTaskTag:
 2250              	.LFB131:
1600:../FreeRTOS/Source/tasks.c **** 
1601:../FreeRTOS/Source/tasks.c **** #endif
1602:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1603:../FreeRTOS/Source/tasks.c **** 
1604:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1605:../FreeRTOS/Source/tasks.c **** 
1606:../FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1607:../FreeRTOS/Source/tasks.c **** 	{
 2251              		.loc 1 1607 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 16
 2254              		@ frame_needed = 1, uses_anonymous_args = 0
 2255 0d50 80B5     		push	{r7, lr}
 2256              	.LCFI59:
 2257              		.cfi_def_cfa_offset 8
 2258              		.cfi_offset 14, -4
 2259              		.cfi_offset 7, -8
 2260 0d52 84B0     		sub	sp, sp, #16
 2261              	.LCFI60:
 2262              		.cfi_def_cfa_offset 24
 2263 0d54 00AF     		add	r7, sp, #0
 2264              	.LCFI61:
 2265              		.cfi_def_cfa_register 7
 2266 0d56 7860     		str	r0, [r7, #4]
1608:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1609:../FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1610:../FreeRTOS/Source/tasks.c **** 
1611:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1612:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2267              		.loc 1 1612 0
 2268 0d58 7B68     		ldr	r3, [r7, #4]
 2269 0d5a 002B     		cmp	r3, #0
 2270 0d5c 06D1     		bne	.L96
1613:../FreeRTOS/Source/tasks.c **** 		{
1614:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2271              		.loc 1 1614 0
 2272 0d5e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2273 0d62 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2274 0d66 1B68     		ldr	r3, [r3, #0]
 2275 0d68 FB60     		str	r3, [r7, #12]
 2276 0d6a 01E0     		b	.L97
 2277              	.L96:
1615:../FreeRTOS/Source/tasks.c **** 		}
1616:../FreeRTOS/Source/tasks.c **** 		else
1617:../FreeRTOS/Source/tasks.c **** 		{
1618:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2278              		.loc 1 1618 0
 2279 0d6c 7B68     		ldr	r3, [r7, #4]
 2280 0d6e FB60     		str	r3, [r7, #12]
 2281              	.L97:
1619:../FreeRTOS/Source/tasks.c **** 		}
1620:../FreeRTOS/Source/tasks.c **** 
1621:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1622:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1623:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2282              		.loc 1 1623 0
 2283 0d70 FFF7FEFF 		bl	vPortEnterCritical
1624:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
 2284              		.loc 1 1624 0
 2285 0d74 FB68     		ldr	r3, [r7, #12]
 2286 0d76 9B6C     		ldr	r3, [r3, #72]
 2287 0d78 BB60     		str	r3, [r7, #8]
1625:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2288              		.loc 1 1625 0
 2289 0d7a FFF7FEFF 		bl	vPortExitCritical
1626:../FreeRTOS/Source/tasks.c **** 
1627:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 2290              		.loc 1 1627 0
 2291 0d7e BB68     		ldr	r3, [r7, #8]
1628:../FreeRTOS/Source/tasks.c **** 	}
 2292              		.loc 1 1628 0
 2293 0d80 1846     		mov	r0, r3
 2294 0d82 07F11007 		add	r7, r7, #16
 2295 0d86 BD46     		mov	sp, r7
 2296 0d88 80BD     		pop	{r7, pc}
 2297              		.cfi_endproc
 2298              	.LFE131:
 2300 0d8a 00BF     		.align	2
 2301              		.global	xTaskCallApplicationTaskHook
 2302              		.thumb
 2303              		.thumb_func
 2305              	xTaskCallApplicationTaskHook:
 2306              	.LFB132:
1629:../FreeRTOS/Source/tasks.c **** 
1630:../FreeRTOS/Source/tasks.c **** #endif
1631:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1632:../FreeRTOS/Source/tasks.c **** 
1633:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1634:../FreeRTOS/Source/tasks.c **** 
1635:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1636:../FreeRTOS/Source/tasks.c **** 	{
 2307              		.loc 1 1636 0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 16
 2310              		@ frame_needed = 1, uses_anonymous_args = 0
 2311 0d8c 80B5     		push	{r7, lr}
 2312              	.LCFI62:
 2313              		.cfi_def_cfa_offset 8
 2314              		.cfi_offset 14, -4
 2315              		.cfi_offset 7, -8
 2316 0d8e 84B0     		sub	sp, sp, #16
 2317              	.LCFI63:
 2318              		.cfi_def_cfa_offset 24
 2319 0d90 00AF     		add	r7, sp, #0
 2320              	.LCFI64:
 2321              		.cfi_def_cfa_register 7
 2322 0d92 7860     		str	r0, [r7, #4]
 2323 0d94 3960     		str	r1, [r7, #0]
1637:../FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1638:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1639:../FreeRTOS/Source/tasks.c **** 
1640:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1641:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2324              		.loc 1 1641 0
 2325 0d96 7B68     		ldr	r3, [r7, #4]
 2326 0d98 002B     		cmp	r3, #0
 2327 0d9a 06D1     		bne	.L99
1642:../FreeRTOS/Source/tasks.c **** 		{
1643:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2328              		.loc 1 1643 0
 2329 0d9c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2330 0da0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2331 0da4 1B68     		ldr	r3, [r3, #0]
 2332 0da6 FB60     		str	r3, [r7, #12]
 2333 0da8 01E0     		b	.L100
 2334              	.L99:
1644:../FreeRTOS/Source/tasks.c **** 		}
1645:../FreeRTOS/Source/tasks.c **** 		else
1646:../FreeRTOS/Source/tasks.c **** 		{
1647:../FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2335              		.loc 1 1647 0
 2336 0daa 7B68     		ldr	r3, [r7, #4]
 2337 0dac FB60     		str	r3, [r7, #12]
 2338              	.L100:
1648:../FreeRTOS/Source/tasks.c **** 		}
1649:../FreeRTOS/Source/tasks.c **** 
1650:../FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 2339              		.loc 1 1650 0
 2340 0dae FB68     		ldr	r3, [r7, #12]
 2341 0db0 9B6C     		ldr	r3, [r3, #72]
 2342 0db2 002B     		cmp	r3, #0
 2343 0db4 06D0     		beq	.L101
1651:../FreeRTOS/Source/tasks.c **** 		{
1652:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 2344              		.loc 1 1652 0
 2345 0db6 FB68     		ldr	r3, [r7, #12]
 2346 0db8 9B6C     		ldr	r3, [r3, #72]
 2347 0dba 3868     		ldr	r0, [r7, #0]
 2348 0dbc 9847     		blx	r3
 2349 0dbe 0346     		mov	r3, r0
 2350 0dc0 BB60     		str	r3, [r7, #8]
 2351 0dc2 02E0     		b	.L102
 2352              	.L101:
1653:../FreeRTOS/Source/tasks.c **** 		}
1654:../FreeRTOS/Source/tasks.c **** 		else
1655:../FreeRTOS/Source/tasks.c **** 		{
1656:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2353              		.loc 1 1656 0
 2354 0dc4 4FF00003 		mov	r3, #0
 2355 0dc8 BB60     		str	r3, [r7, #8]
 2356              	.L102:
1657:../FreeRTOS/Source/tasks.c **** 		}
1658:../FreeRTOS/Source/tasks.c **** 
1659:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 2357              		.loc 1 1659 0
 2358 0dca BB68     		ldr	r3, [r7, #8]
1660:../FreeRTOS/Source/tasks.c **** 	}
 2359              		.loc 1 1660 0
 2360 0dcc 1846     		mov	r0, r3
 2361 0dce 07F11007 		add	r7, r7, #16
 2362 0dd2 BD46     		mov	sp, r7
 2363 0dd4 80BD     		pop	{r7, pc}
 2364              		.cfi_endproc
 2365              	.LFE132:
 2367 0dd6 00BF     		.align	2
 2368              		.global	vTaskSwitchContext
 2369              		.thumb
 2370              		.thumb_func
 2372              	vTaskSwitchContext:
 2373              	.LFB133:
1661:../FreeRTOS/Source/tasks.c **** 
1662:../FreeRTOS/Source/tasks.c **** #endif
1663:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1664:../FreeRTOS/Source/tasks.c **** 
1665:../FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1666:../FreeRTOS/Source/tasks.c **** {
 2374              		.loc 1 1666 0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 8
 2377              		@ frame_needed = 1, uses_anonymous_args = 0
 2378 0dd8 80B5     		push	{r7, lr}
 2379              	.LCFI65:
 2380              		.cfi_def_cfa_offset 8
 2381              		.cfi_offset 14, -4
 2382              		.cfi_offset 7, -8
 2383 0dda 82B0     		sub	sp, sp, #8
 2384              	.LCFI66:
 2385              		.cfi_def_cfa_offset 16
 2386 0ddc 00AF     		add	r7, sp, #0
 2387              	.LCFI67:
 2388              		.cfi_def_cfa_register 7
1667:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 2389              		.loc 1 1667 0
 2390 0dde 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2391 0de2 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2392 0de6 1B68     		ldr	r3, [r3, #0]
 2393 0de8 002B     		cmp	r3, #0
 2394 0dea 07D0     		beq	.L104
1668:../FreeRTOS/Source/tasks.c **** 	{
1669:../FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1670:../FreeRTOS/Source/tasks.c **** 		switch. */
1671:../FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
 2395              		.loc 1 1671 0
 2396 0dec 40F20003 		movw	r3, #:lower16:xMissedYield
 2397 0df0 C0F20003 		movt	r3, #:upper16:xMissedYield
 2398 0df4 4FF00102 		mov	r2, #1
 2399 0df8 1A60     		str	r2, [r3, #0]
 2400 0dfa 89E0     		b	.L103
 2401              	.L104:
 2402              	.LBB6:
1672:../FreeRTOS/Source/tasks.c **** 	}
1673:../FreeRTOS/Source/tasks.c **** 	else
1674:../FreeRTOS/Source/tasks.c **** 	{
1675:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1676:../FreeRTOS/Source/tasks.c **** 	
1677:../FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1678:../FreeRTOS/Source/tasks.c **** 		{
1679:../FreeRTOS/Source/tasks.c **** 			unsigned long ulTempCounter;
1680:../FreeRTOS/Source/tasks.c **** 			
1681:../FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1682:../FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1683:../FreeRTOS/Source/tasks.c **** 				#else
1684:../FreeRTOS/Source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 2403              		.loc 1 1684 0
 2404 0dfc FFF7FEFF 		bl	get_us_time
 2405 0e00 0246     		mov	r2, r0
 2406 0e02 0B46     		mov	r3, r1
 2407 0e04 1346     		mov	r3, r2
 2408 0e06 7B60     		str	r3, [r7, #4]
1685:../FreeRTOS/Source/tasks.c **** 				#endif
1686:../FreeRTOS/Source/tasks.c **** 	
1687:../FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1688:../FreeRTOS/Source/tasks.c **** 				time so far.  The time the task started running was stored in
1689:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1690:../FreeRTOS/Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1691:../FreeRTOS/Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1692:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 2409              		.loc 1 1692 0
 2410 0e08 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2411 0e0c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2412 0e10 1A68     		ldr	r2, [r3, #0]
 2413 0e12 D16C     		ldr	r1, [r2, #76]
 2414 0e14 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2415 0e18 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2416 0e1c 1B68     		ldr	r3, [r3, #0]
 2417 0e1e 7868     		ldr	r0, [r7, #4]
 2418 0e20 C31A     		subs	r3, r0, r3
 2419 0e22 CB18     		adds	r3, r1, r3
 2420 0e24 D364     		str	r3, [r2, #76]
1693:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
 2421              		.loc 1 1693 0
 2422 0e26 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2423 0e2a C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2424 0e2e 7A68     		ldr	r2, [r7, #4]
 2425 0e30 1A60     		str	r2, [r3, #0]
 2426              	.LBE6:
1694:../FreeRTOS/Source/tasks.c **** 		}
1695:../FreeRTOS/Source/tasks.c **** 		#endif
1696:../FreeRTOS/Source/tasks.c **** 	
1697:../FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 2427              		.loc 1 1697 0
 2428 0e32 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2429 0e36 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2430 0e3a 1B68     		ldr	r3, [r3, #0]
 2431 0e3c 1A68     		ldr	r2, [r3, #0]
 2432 0e3e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2433 0e42 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2434 0e46 1B68     		ldr	r3, [r3, #0]
 2435 0e48 1B6B     		ldr	r3, [r3, #48]
 2436 0e4a 9A42     		cmp	r2, r3
 2437 0e4c 1DD8     		bhi	.L110
 2438              		.loc 1 1697 0 is_stmt 0 discriminator 1
 2439 0e4e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2440 0e52 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2441 0e56 1A68     		ldr	r2, [r3, #0]
 2442 0e58 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2443 0e5c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2444 0e60 1B68     		ldr	r3, [r3, #0]
 2445 0e62 03F13403 		add	r3, r3, #52
 2446 0e66 1046     		mov	r0, r2
 2447 0e68 1946     		mov	r1, r3
 2448 0e6a FFF7FEFF 		bl	vApplicationStackOverflowHook
1698:../FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1699:../FreeRTOS/Source/tasks.c **** 	
1700:../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2449              		.loc 1 1701 0 is_stmt 1 discriminator 1
 2450 0e6e 0CE0     		b	.L110
 2451              	.L108:
1702:../FreeRTOS/Source/tasks.c **** 		{
1703:../FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );
1704:../FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;
 2452              		.loc 1 1704 0
 2453 0e70 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2454 0e74 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2455 0e78 1B68     		ldr	r3, [r3, #0]
 2456 0e7a 03F1FF32 		add	r2, r3, #-1
 2457 0e7e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2458 0e82 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2459 0e86 1A60     		str	r2, [r3, #0]
 2460 0e88 00E0     		b	.L107
 2461              	.L110:
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2462              		.loc 1 1701 0
 2463 0e8a 00BF     		nop
 2464              	.L107:
1701:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2465              		.loc 1 1701 0 is_stmt 0 discriminator 1
 2466 0e8c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2467 0e90 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2468 0e94 1A68     		ldr	r2, [r3, #0]
 2469 0e96 1346     		mov	r3, r2
 2470 0e98 4FEA8303 		lsl	r3, r3, #2
 2471 0e9c 9B18     		adds	r3, r3, r2
 2472 0e9e 4FEA8303 		lsl	r3, r3, #2
 2473 0ea2 1A46     		mov	r2, r3
 2474 0ea4 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2475 0ea8 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2476 0eac D318     		adds	r3, r2, r3
 2477 0eae 1B68     		ldr	r3, [r3, #0]
 2478 0eb0 002B     		cmp	r3, #0
 2479 0eb2 DDD0     		beq	.L108
 2480              	.LBB7:
1705:../FreeRTOS/Source/tasks.c **** 		}
1706:../FreeRTOS/Source/tasks.c **** 	
1707:../FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1708:../FreeRTOS/Source/tasks.c **** 		same priority get an equal share of the processor time. */
1709:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 2481              		.loc 1 1709 0 is_stmt 1
 2482 0eb4 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2483 0eb8 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2484 0ebc 1A68     		ldr	r2, [r3, #0]
 2485 0ebe 1346     		mov	r3, r2
 2486 0ec0 4FEA8303 		lsl	r3, r3, #2
 2487 0ec4 9B18     		adds	r3, r3, r2
 2488 0ec6 4FEA8303 		lsl	r3, r3, #2
 2489 0eca 1A46     		mov	r2, r3
 2490 0ecc 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2491 0ed0 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2492 0ed4 D318     		adds	r3, r2, r3
 2493 0ed6 3B60     		str	r3, [r7, #0]
 2494 0ed8 3B68     		ldr	r3, [r7, #0]
 2495 0eda 5B68     		ldr	r3, [r3, #4]
 2496 0edc 5B68     		ldr	r3, [r3, #4]
 2497 0ede 1A46     		mov	r2, r3
 2498 0ee0 3B68     		ldr	r3, [r7, #0]
 2499 0ee2 5A60     		str	r2, [r3, #4]
 2500 0ee4 3B68     		ldr	r3, [r7, #0]
 2501 0ee6 5A68     		ldr	r2, [r3, #4]
 2502 0ee8 3B68     		ldr	r3, [r7, #0]
 2503 0eea 03F10803 		add	r3, r3, #8
 2504 0eee 9A42     		cmp	r2, r3
 2505 0ef0 05D1     		bne	.L109
 2506              		.loc 1 1709 0 is_stmt 0 discriminator 1
 2507 0ef2 3B68     		ldr	r3, [r7, #0]
 2508 0ef4 5B68     		ldr	r3, [r3, #4]
 2509 0ef6 5B68     		ldr	r3, [r3, #4]
 2510 0ef8 1A46     		mov	r2, r3
 2511 0efa 3B68     		ldr	r3, [r7, #0]
 2512 0efc 5A60     		str	r2, [r3, #4]
 2513              	.L109:
 2514              		.loc 1 1709 0 discriminator 2
 2515 0efe 3B68     		ldr	r3, [r7, #0]
 2516 0f00 5B68     		ldr	r3, [r3, #4]
 2517 0f02 DB68     		ldr	r3, [r3, #12]
 2518 0f04 1A46     		mov	r2, r3
 2519 0f06 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2520 0f0a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2521 0f0e 1A60     		str	r2, [r3, #0]
 2522              	.L103:
 2523              	.LBE7:
1710:../FreeRTOS/Source/tasks.c **** 	
1711:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
1712:../FreeRTOS/Source/tasks.c **** 		vWriteTraceToBuffer();
1713:../FreeRTOS/Source/tasks.c **** 	}
1714:../FreeRTOS/Source/tasks.c **** }
 2524              		.loc 1 1714 0 is_stmt 1
 2525 0f10 07F10807 		add	r7, r7, #8
 2526 0f14 BD46     		mov	sp, r7
 2527 0f16 80BD     		pop	{r7, pc}
 2528              		.cfi_endproc
 2529              	.LFE133:
 2531              		.align	2
 2532              		.global	vTaskPlaceOnEventList
 2533              		.thumb
 2534              		.thumb_func
 2536              	vTaskPlaceOnEventList:
 2537              	.LFB134:
1715:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1716:../FreeRTOS/Source/tasks.c **** 
1717:../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1718:../FreeRTOS/Source/tasks.c **** {
 2538              		.loc 1 1718 0
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 16
 2541              		@ frame_needed = 1, uses_anonymous_args = 0
 2542 0f18 80B5     		push	{r7, lr}
 2543              	.LCFI68:
 2544              		.cfi_def_cfa_offset 8
 2545              		.cfi_offset 14, -4
 2546              		.cfi_offset 7, -8
 2547 0f1a 84B0     		sub	sp, sp, #16
 2548              	.LCFI69:
 2549              		.cfi_def_cfa_offset 24
 2550 0f1c 00AF     		add	r7, sp, #0
 2551              	.LCFI70:
 2552              		.cfi_def_cfa_register 7
 2553 0f1e 7860     		str	r0, [r7, #4]
 2554 0f20 3960     		str	r1, [r7, #0]
1719:../FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1720:../FreeRTOS/Source/tasks.c **** 
1721:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1722:../FreeRTOS/Source/tasks.c **** 
1723:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1724:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1725:../FreeRTOS/Source/tasks.c **** 
1726:../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1727:../FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1728:../FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1729:../FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2555              		.loc 1 1729 0
 2556 0f22 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2557 0f26 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2558 0f2a 1B68     		ldr	r3, [r3, #0]
 2559 0f2c 03F11803 		add	r3, r3, #24
 2560 0f30 7868     		ldr	r0, [r7, #4]
 2561 0f32 1946     		mov	r1, r3
 2562 0f34 FFF7FEFF 		bl	vListInsert
1730:../FreeRTOS/Source/tasks.c **** 
1731:../FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1732:../FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1733:../FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1734:../FreeRTOS/Source/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2563              		.loc 1 1734 0
 2564 0f38 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2565 0f3c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2566 0f40 1B68     		ldr	r3, [r3, #0]
 2567 0f42 03F10403 		add	r3, r3, #4
 2568 0f46 1846     		mov	r0, r3
 2569 0f48 FFF7FEFF 		bl	vListRemove
1735:../FreeRTOS/Source/tasks.c **** 
1736:../FreeRTOS/Source/tasks.c **** 
1737:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1738:../FreeRTOS/Source/tasks.c **** 	{
1739:../FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2570              		.loc 1 1739 0
 2571 0f4c 3B68     		ldr	r3, [r7, #0]
 2572 0f4e B3F1FF3F 		cmp	r3, #-1
 2573 0f52 0ED1     		bne	.L112
1740:../FreeRTOS/Source/tasks.c **** 		{
1741:../FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1742:../FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1743:../FreeRTOS/Source/tasks.c **** 			indefinitely. */
1744:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2574              		.loc 1 1744 0
 2575 0f54 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2576 0f58 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2577 0f5c 1B68     		ldr	r3, [r3, #0]
 2578 0f5e 03F10403 		add	r3, r3, #4
 2579 0f62 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 2580 0f66 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 2581 0f6a 1946     		mov	r1, r3
 2582 0f6c FFF7FEFF 		bl	vListInsertEnd
 2583 0f70 0AE0     		b	.L111
 2584              	.L112:
1745:../FreeRTOS/Source/tasks.c **** 		}
1746:../FreeRTOS/Source/tasks.c **** 		else
1747:../FreeRTOS/Source/tasks.c **** 		{
1748:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1749:../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1750:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2585              		.loc 1 1750 0
 2586 0f72 40F20003 		movw	r3, #:lower16:xTickCount
 2587 0f76 C0F20003 		movt	r3, #:upper16:xTickCount
 2588 0f7a 1A68     		ldr	r2, [r3, #0]
 2589 0f7c 3B68     		ldr	r3, [r7, #0]
 2590 0f7e D318     		adds	r3, r2, r3
 2591 0f80 FB60     		str	r3, [r7, #12]
1751:../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2592              		.loc 1 1751 0
 2593 0f82 F868     		ldr	r0, [r7, #12]
 2594 0f84 00F0D0F9 		bl	prvAddCurrentTaskToDelayedList
 2595              	.L111:
1752:../FreeRTOS/Source/tasks.c **** 		}
1753:../FreeRTOS/Source/tasks.c **** 	}
1754:../FreeRTOS/Source/tasks.c **** 	#else
1755:../FreeRTOS/Source/tasks.c **** 	{
1756:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1757:../FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1758:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1759:../FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1760:../FreeRTOS/Source/tasks.c **** 	}
1761:../FreeRTOS/Source/tasks.c **** 	#endif
1762:../FreeRTOS/Source/tasks.c **** }
 2596              		.loc 1 1762 0
 2597 0f88 07F11007 		add	r7, r7, #16
 2598 0f8c BD46     		mov	sp, r7
 2599 0f8e 80BD     		pop	{r7, pc}
 2600              		.cfi_endproc
 2601              	.LFE134:
 2603              		.align	2
 2604              		.global	xTaskRemoveFromEventList
 2605              		.thumb
 2606              		.thumb_func
 2608              	xTaskRemoveFromEventList:
 2609              	.LFB135:
1763:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1764:../FreeRTOS/Source/tasks.c **** 
1765:../FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1766:../FreeRTOS/Source/tasks.c **** 
1767:../FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1768:../FreeRTOS/Source/tasks.c **** 	{
1769:../FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1770:../FreeRTOS/Source/tasks.c **** 
1771:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1772:../FreeRTOS/Source/tasks.c **** 
1773:../FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1774:../FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1775:../FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1776:../FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1777:../FreeRTOS/Source/tasks.c **** 
1778:../FreeRTOS/Source/tasks.c **** 	
1779:../FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1780:../FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1781:../FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1782:../FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1783:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1784:../FreeRTOS/Source/tasks.c **** 
1785:../FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1786:../FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1787:../FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1788:../FreeRTOS/Source/tasks.c **** 		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
1789:../FreeRTOS/Source/tasks.c **** 
1790:../FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1791:../FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1792:../FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1793:../FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1794:../FreeRTOS/Source/tasks.c **** 	}
1795:../FreeRTOS/Source/tasks.c **** 	
1796:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1797:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:../FreeRTOS/Source/tasks.c **** 
1799:../FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1800:../FreeRTOS/Source/tasks.c **** {
 2610              		.loc 1 1800 0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 16
 2613              		@ frame_needed = 1, uses_anonymous_args = 0
 2614 0f90 80B5     		push	{r7, lr}
 2615              	.LCFI71:
 2616              		.cfi_def_cfa_offset 8
 2617              		.cfi_offset 14, -4
 2618              		.cfi_offset 7, -8
 2619 0f92 84B0     		sub	sp, sp, #16
 2620              	.LCFI72:
 2621              		.cfi_def_cfa_offset 24
 2622 0f94 00AF     		add	r7, sp, #0
 2623              	.LCFI73:
 2624              		.cfi_def_cfa_register 7
 2625 0f96 7860     		str	r0, [r7, #4]
1801:../FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1802:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1803:../FreeRTOS/Source/tasks.c **** 
1804:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1805:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1806:../FreeRTOS/Source/tasks.c **** 
1807:../FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1808:../FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1809:../FreeRTOS/Source/tasks.c **** 	it to the ready list.
1810:../FreeRTOS/Source/tasks.c **** 
1811:../FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1812:../FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1813:../FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1814:../FreeRTOS/Source/tasks.c **** 	
1815:../FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1816:../FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1817:../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2626              		.loc 1 1817 0
 2627 0f98 7B68     		ldr	r3, [r7, #4]
 2628 0f9a DB68     		ldr	r3, [r3, #12]
 2629 0f9c DB68     		ldr	r3, [r3, #12]
 2630 0f9e BB60     		str	r3, [r7, #8]
1818:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1819:../FreeRTOS/Source/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2631              		.loc 1 1819 0
 2632 0fa0 BB68     		ldr	r3, [r7, #8]
 2633 0fa2 03F11803 		add	r3, r3, #24
 2634 0fa6 1846     		mov	r0, r3
 2635 0fa8 FFF7FEFF 		bl	vListRemove
1820:../FreeRTOS/Source/tasks.c **** 
1821:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2636              		.loc 1 1821 0
 2637 0fac 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2638 0fb0 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2639 0fb4 1B68     		ldr	r3, [r3, #0]
 2640 0fb6 002B     		cmp	r3, #0
 2641 0fb8 2BD1     		bne	.L115
1822:../FreeRTOS/Source/tasks.c **** 	{
1823:../FreeRTOS/Source/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2642              		.loc 1 1823 0
 2643 0fba BB68     		ldr	r3, [r7, #8]
 2644 0fbc 03F10403 		add	r3, r3, #4
 2645 0fc0 1846     		mov	r0, r3
 2646 0fc2 FFF7FEFF 		bl	vListRemove
1824:../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2647              		.loc 1 1824 0
 2648 0fc6 BB68     		ldr	r3, [r7, #8]
 2649 0fc8 DA6A     		ldr	r2, [r3, #44]
 2650 0fca 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2651 0fce C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2652 0fd2 1B68     		ldr	r3, [r3, #0]
 2653 0fd4 9A42     		cmp	r2, r3
 2654 0fd6 06D9     		bls	.L116
 2655              		.loc 1 1824 0 is_stmt 0 discriminator 1
 2656 0fd8 BB68     		ldr	r3, [r7, #8]
 2657 0fda DA6A     		ldr	r2, [r3, #44]
 2658 0fdc 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2659 0fe0 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2660 0fe4 1A60     		str	r2, [r3, #0]
 2661              	.L116:
 2662              		.loc 1 1824 0 discriminator 2
 2663 0fe6 BB68     		ldr	r3, [r7, #8]
 2664 0fe8 DA6A     		ldr	r2, [r3, #44]
 2665 0fea 1346     		mov	r3, r2
 2666 0fec 4FEA8303 		lsl	r3, r3, #2
 2667 0ff0 9B18     		adds	r3, r3, r2
 2668 0ff2 4FEA8303 		lsl	r3, r3, #2
 2669 0ff6 1A46     		mov	r2, r3
 2670 0ff8 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2671 0ffc C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2672 1000 D218     		adds	r2, r2, r3
 2673 1002 BB68     		ldr	r3, [r7, #8]
 2674 1004 03F10403 		add	r3, r3, #4
 2675 1008 1046     		mov	r0, r2
 2676 100a 1946     		mov	r1, r3
 2677 100c FFF7FEFF 		bl	vListInsertEnd
 2678 1010 09E0     		b	.L117
 2679              	.L115:
1825:../FreeRTOS/Source/tasks.c **** 	}
1826:../FreeRTOS/Source/tasks.c **** 	else
1827:../FreeRTOS/Source/tasks.c **** 	{
1828:../FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1829:../FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1830:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2680              		.loc 1 1830 0 is_stmt 1
 2681 1012 BB68     		ldr	r3, [r7, #8]
 2682 1014 03F11803 		add	r3, r3, #24
 2683 1018 40F20000 		movw	r0, #:lower16:xPendingReadyList
 2684 101c C0F20000 		movt	r0, #:upper16:xPendingReadyList
 2685 1020 1946     		mov	r1, r3
 2686 1022 FFF7FEFF 		bl	vListInsertEnd
 2687              	.L117:
1831:../FreeRTOS/Source/tasks.c **** 	}
1832:../FreeRTOS/Source/tasks.c **** 
1833:../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2688              		.loc 1 1833 0
 2689 1026 BB68     		ldr	r3, [r7, #8]
 2690 1028 DA6A     		ldr	r2, [r3, #44]
 2691 102a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2692 102e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2693 1032 1B68     		ldr	r3, [r3, #0]
 2694 1034 DB6A     		ldr	r3, [r3, #44]
 2695 1036 9A42     		cmp	r2, r3
 2696 1038 03D3     		bcc	.L118
1834:../FreeRTOS/Source/tasks.c **** 	{
1835:../FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1836:../FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1837:../FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
1838:../FreeRTOS/Source/tasks.c **** 		switch now. */
1839:../FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 2697              		.loc 1 1839 0
 2698 103a 4FF00103 		mov	r3, #1
 2699 103e FB60     		str	r3, [r7, #12]
 2700 1040 02E0     		b	.L119
 2701              	.L118:
1840:../FreeRTOS/Source/tasks.c **** 	}
1841:../FreeRTOS/Source/tasks.c **** 	else
1842:../FreeRTOS/Source/tasks.c **** 	{
1843:../FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 2702              		.loc 1 1843 0
 2703 1042 4FF00003 		mov	r3, #0
 2704 1046 FB60     		str	r3, [r7, #12]
 2705              	.L119:
1844:../FreeRTOS/Source/tasks.c **** 	}
1845:../FreeRTOS/Source/tasks.c **** 
1846:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2706              		.loc 1 1846 0
 2707 1048 FB68     		ldr	r3, [r7, #12]
1847:../FreeRTOS/Source/tasks.c **** }
 2708              		.loc 1 1847 0
 2709 104a 1846     		mov	r0, r3
 2710 104c 07F11007 		add	r7, r7, #16
 2711 1050 BD46     		mov	sp, r7
 2712 1052 80BD     		pop	{r7, pc}
 2713              		.cfi_endproc
 2714              	.LFE135:
 2716              		.align	2
 2717              		.global	vTaskSetTimeOutState
 2718              		.thumb
 2719              		.thumb_func
 2721              	vTaskSetTimeOutState:
 2722              	.LFB136:
1848:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1849:../FreeRTOS/Source/tasks.c **** 
1850:../FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1851:../FreeRTOS/Source/tasks.c **** {
 2723              		.loc 1 1851 0
 2724              		.cfi_startproc
 2725              		@ args = 0, pretend = 0, frame = 8
 2726              		@ frame_needed = 1, uses_anonymous_args = 0
 2727              		@ link register save eliminated.
 2728 1054 80B4     		push	{r7}
 2729              	.LCFI74:
 2730              		.cfi_def_cfa_offset 4
 2731              		.cfi_offset 7, -4
 2732 1056 83B0     		sub	sp, sp, #12
 2733              	.LCFI75:
 2734              		.cfi_def_cfa_offset 16
 2735 1058 00AF     		add	r7, sp, #0
 2736              	.LCFI76:
 2737              		.cfi_def_cfa_register 7
 2738 105a 7860     		str	r0, [r7, #4]
1852:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1853:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2739              		.loc 1 1853 0
 2740 105c 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2741 1060 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2742 1064 1A68     		ldr	r2, [r3, #0]
 2743 1066 7B68     		ldr	r3, [r7, #4]
 2744 1068 1A60     		str	r2, [r3, #0]
1854:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2745              		.loc 1 1854 0
 2746 106a 40F20003 		movw	r3, #:lower16:xTickCount
 2747 106e C0F20003 		movt	r3, #:upper16:xTickCount
 2748 1072 1A68     		ldr	r2, [r3, #0]
 2749 1074 7B68     		ldr	r3, [r7, #4]
 2750 1076 5A60     		str	r2, [r3, #4]
1855:../FreeRTOS/Source/tasks.c **** }
 2751              		.loc 1 1855 0
 2752 1078 07F10C07 		add	r7, r7, #12
 2753 107c BD46     		mov	sp, r7
 2754 107e 80BC     		pop	{r7}
 2755 1080 7047     		bx	lr
 2756              		.cfi_endproc
 2757              	.LFE136:
 2759 1082 00BF     		.align	2
 2760              		.global	xTaskCheckForTimeOut
 2761              		.thumb
 2762              		.thumb_func
 2764              	xTaskCheckForTimeOut:
 2765              	.LFB137:
1856:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1857:../FreeRTOS/Source/tasks.c **** 
1858:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1859:../FreeRTOS/Source/tasks.c **** {
 2766              		.loc 1 1859 0
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 16
 2769              		@ frame_needed = 1, uses_anonymous_args = 0
 2770 1084 80B5     		push	{r7, lr}
 2771              	.LCFI77:
 2772              		.cfi_def_cfa_offset 8
 2773              		.cfi_offset 14, -4
 2774              		.cfi_offset 7, -8
 2775 1086 84B0     		sub	sp, sp, #16
 2776              	.LCFI78:
 2777              		.cfi_def_cfa_offset 24
 2778 1088 00AF     		add	r7, sp, #0
 2779              	.LCFI79:
 2780              		.cfi_def_cfa_register 7
 2781 108a 7860     		str	r0, [r7, #4]
 2782 108c 3960     		str	r1, [r7, #0]
1860:../FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1861:../FreeRTOS/Source/tasks.c **** 
1862:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1863:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
1864:../FreeRTOS/Source/tasks.c **** 
1865:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2783              		.loc 1 1865 0
 2784 108e FFF7FEFF 		bl	vPortEnterCritical
1866:../FreeRTOS/Source/tasks.c **** 	{
1867:../FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1868:../FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1869:../FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1870:../FreeRTOS/Source/tasks.c **** 			therefore never time out. */
1871:../FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2785              		.loc 1 1871 0
 2786 1092 3B68     		ldr	r3, [r7, #0]
 2787 1094 1B68     		ldr	r3, [r3, #0]
 2788 1096 B3F1FF3F 		cmp	r3, #-1
 2789 109a 03D1     		bne	.L122
1872:../FreeRTOS/Source/tasks.c **** 			{
1873:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2790              		.loc 1 1873 0
 2791 109c 4FF00003 		mov	r3, #0
 2792 10a0 FB60     		str	r3, [r7, #12]
 2793 10a2 38E0     		b	.L123
 2794              	.L122:
1874:../FreeRTOS/Source/tasks.c **** 			}
1875:../FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1876:../FreeRTOS/Source/tasks.c **** 		#endif
1877:../FreeRTOS/Source/tasks.c **** 
1878:../FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2795              		.loc 1 1878 0
 2796 10a4 7B68     		ldr	r3, [r7, #4]
 2797 10a6 1A68     		ldr	r2, [r3, #0]
 2798 10a8 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2799 10ac C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2800 10b0 1B68     		ldr	r3, [r3, #0]
 2801 10b2 9A42     		cmp	r2, r3
 2802 10b4 0CD0     		beq	.L124
 2803              		.loc 1 1878 0 is_stmt 0 discriminator 1
 2804 10b6 7B68     		ldr	r3, [r7, #4]
 2805 10b8 5A68     		ldr	r2, [r3, #4]
 2806 10ba 40F20003 		movw	r3, #:lower16:xTickCount
 2807 10be C0F20003 		movt	r3, #:upper16:xTickCount
 2808 10c2 1B68     		ldr	r3, [r3, #0]
 2809 10c4 9A42     		cmp	r2, r3
 2810 10c6 03D8     		bhi	.L124
1879:../FreeRTOS/Source/tasks.c **** 		{
1880:../FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1881:../FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1882:../FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1883:../FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1884:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2811              		.loc 1 1884 0 is_stmt 1
 2812 10c8 4FF00103 		mov	r3, #1
 2813 10cc FB60     		str	r3, [r7, #12]
 2814 10ce 22E0     		b	.L123
 2815              	.L124:
1885:../FreeRTOS/Source/tasks.c **** 		}
1886:../FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2816              		.loc 1 1886 0
 2817 10d0 40F20003 		movw	r3, #:lower16:xTickCount
 2818 10d4 C0F20003 		movt	r3, #:upper16:xTickCount
 2819 10d8 1A68     		ldr	r2, [r3, #0]
 2820 10da 7B68     		ldr	r3, [r7, #4]
 2821 10dc 5B68     		ldr	r3, [r3, #4]
 2822 10de D21A     		subs	r2, r2, r3
 2823 10e0 3B68     		ldr	r3, [r7, #0]
 2824 10e2 1B68     		ldr	r3, [r3, #0]
 2825 10e4 9A42     		cmp	r2, r3
 2826 10e6 13D2     		bcs	.L125
1887:../FreeRTOS/Source/tasks.c **** 		{
1888:../FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1889:../FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2827              		.loc 1 1889 0
 2828 10e8 3B68     		ldr	r3, [r7, #0]
 2829 10ea 1A68     		ldr	r2, [r3, #0]
 2830 10ec 7B68     		ldr	r3, [r7, #4]
 2831 10ee 5968     		ldr	r1, [r3, #4]
 2832 10f0 40F20003 		movw	r3, #:lower16:xTickCount
 2833 10f4 C0F20003 		movt	r3, #:upper16:xTickCount
 2834 10f8 1B68     		ldr	r3, [r3, #0]
 2835 10fa CB1A     		subs	r3, r1, r3
 2836 10fc D218     		adds	r2, r2, r3
 2837 10fe 3B68     		ldr	r3, [r7, #0]
 2838 1100 1A60     		str	r2, [r3, #0]
1890:../FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2839              		.loc 1 1890 0
 2840 1102 7868     		ldr	r0, [r7, #4]
 2841 1104 FFF7FEFF 		bl	vTaskSetTimeOutState
1891:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2842              		.loc 1 1891 0
 2843 1108 4FF00003 		mov	r3, #0
 2844 110c FB60     		str	r3, [r7, #12]
 2845 110e 02E0     		b	.L123
 2846              	.L125:
1892:../FreeRTOS/Source/tasks.c **** 		}
1893:../FreeRTOS/Source/tasks.c **** 		else
1894:../FreeRTOS/Source/tasks.c **** 		{
1895:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2847              		.loc 1 1895 0
 2848 1110 4FF00103 		mov	r3, #1
 2849 1114 FB60     		str	r3, [r7, #12]
 2850              	.L123:
1896:../FreeRTOS/Source/tasks.c **** 		}
1897:../FreeRTOS/Source/tasks.c **** 	}
1898:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2851              		.loc 1 1898 0
 2852 1116 FFF7FEFF 		bl	vPortExitCritical
1899:../FreeRTOS/Source/tasks.c **** 
1900:../FreeRTOS/Source/tasks.c **** 	return xReturn;
 2853              		.loc 1 1900 0
 2854 111a FB68     		ldr	r3, [r7, #12]
1901:../FreeRTOS/Source/tasks.c **** }
 2855              		.loc 1 1901 0
 2856 111c 1846     		mov	r0, r3
 2857 111e 07F11007 		add	r7, r7, #16
 2858 1122 BD46     		mov	sp, r7
 2859 1124 80BD     		pop	{r7, pc}
 2860              		.cfi_endproc
 2861              	.LFE137:
 2863 1126 00BF     		.align	2
 2864              		.global	vTaskMissedYield
 2865              		.thumb
 2866              		.thumb_func
 2868              	vTaskMissedYield:
 2869              	.LFB138:
1902:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1903:../FreeRTOS/Source/tasks.c **** 
1904:../FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
1905:../FreeRTOS/Source/tasks.c **** {
 2870              		.loc 1 1905 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
 2873              		@ frame_needed = 1, uses_anonymous_args = 0
 2874              		@ link register save eliminated.
 2875 1128 80B4     		push	{r7}
 2876              	.LCFI80:
 2877              		.cfi_def_cfa_offset 4
 2878              		.cfi_offset 7, -4
 2879 112a 00AF     		add	r7, sp, #0
 2880              	.LCFI81:
 2881              		.cfi_def_cfa_register 7
1906:../FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
 2882              		.loc 1 1906 0
 2883 112c 40F20003 		movw	r3, #:lower16:xMissedYield
 2884 1130 C0F20003 		movt	r3, #:upper16:xMissedYield
 2885 1134 4FF00102 		mov	r2, #1
 2886 1138 1A60     		str	r2, [r3, #0]
1907:../FreeRTOS/Source/tasks.c **** }
 2887              		.loc 1 1907 0
 2888 113a BD46     		mov	sp, r7
 2889 113c 80BC     		pop	{r7}
 2890 113e 7047     		bx	lr
 2891              		.cfi_endproc
 2892              	.LFE138:
 2894              		.align	2
 2895              		.thumb
 2896              		.thumb_func
 2898              	prvIdleTask:
 2899              	.LFB139:
1908:../FreeRTOS/Source/tasks.c **** 
1909:../FreeRTOS/Source/tasks.c **** /*
1910:../FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
1911:../FreeRTOS/Source/tasks.c ****  * The Idle task.
1912:../FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
1913:../FreeRTOS/Source/tasks.c ****  *
1914:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1915:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1916:../FreeRTOS/Source/tasks.c ****  *
1917:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
1918:../FreeRTOS/Source/tasks.c ****  *
1919:../FreeRTOS/Source/tasks.c ****  */
1920:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1921:../FreeRTOS/Source/tasks.c **** {
 2900              		.loc 1 1921 0
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 8
 2903              		@ frame_needed = 1, uses_anonymous_args = 0
 2904 1140 80B5     		push	{r7, lr}
 2905              	.LCFI82:
 2906              		.cfi_def_cfa_offset 8
 2907              		.cfi_offset 14, -4
 2908              		.cfi_offset 7, -8
 2909 1142 82B0     		sub	sp, sp, #8
 2910              	.LCFI83:
 2911              		.cfi_def_cfa_offset 16
 2912 1144 00AF     		add	r7, sp, #0
 2913              	.LCFI84:
 2914              		.cfi_def_cfa_register 7
 2915 1146 7860     		str	r0, [r7, #4]
 2916 1148 00E0     		b	.L129
 2917              	.L130:
1922:../FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
1923:../FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
1924:../FreeRTOS/Source/tasks.c **** 
1925:../FreeRTOS/Source/tasks.c **** 	for( ;; )
1926:../FreeRTOS/Source/tasks.c **** 	{
1927:../FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
1928:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
1929:../FreeRTOS/Source/tasks.c **** 
1930:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1931:../FreeRTOS/Source/tasks.c **** 		{
1932:../FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1933:../FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
1934:../FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
1935:../FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
1936:../FreeRTOS/Source/tasks.c **** 			taskYIELD();
1937:../FreeRTOS/Source/tasks.c **** 		}
1938:../FreeRTOS/Source/tasks.c **** 		#endif
1939:../FreeRTOS/Source/tasks.c **** 
1940:../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1941:../FreeRTOS/Source/tasks.c **** 		{
1942:../FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
1943:../FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1944:../FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
1945:../FreeRTOS/Source/tasks.c **** 			timeslice.
1946:../FreeRTOS/Source/tasks.c **** 
1947:../FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
1948:../FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1949:../FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
1950:../FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
1951:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
1952:../FreeRTOS/Source/tasks.c **** 			{
1953:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
1954:../FreeRTOS/Source/tasks.c **** 			}
1955:../FreeRTOS/Source/tasks.c **** 		}
1956:../FreeRTOS/Source/tasks.c **** 		#endif
1957:../FreeRTOS/Source/tasks.c **** 
1958:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1959:../FreeRTOS/Source/tasks.c **** 		{
1960:../FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
1961:../FreeRTOS/Source/tasks.c **** 
1962:../FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1963:../FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
1964:../FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
1965:../FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1966:../FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1967:../FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
1968:../FreeRTOS/Source/tasks.c **** 		}
1969:../FreeRTOS/Source/tasks.c **** 		#endif
1970:../FreeRTOS/Source/tasks.c **** 	}
 2918              		.loc 1 1970 0
 2919 114a 00BF     		nop
 2920              	.L129:
1928:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 2921              		.loc 1 1928 0
 2922 114c 00F0A0F8 		bl	prvCheckTasksWaitingTermination
1951:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2923              		.loc 1 1951 0
 2924 1150 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2925 1154 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2926 1158 1B68     		ldr	r3, [r3, #0]
 2927 115a 012B     		cmp	r3, #1
 2928 115c F5D9     		bls	.L130
1953:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
 2929              		.loc 1 1953 0
 2930 115e FFF7FEFF 		bl	vPortYieldFromISR
 2931              		.loc 1 1970 0
 2932 1162 F2E7     		b	.L130
 2933              		.cfi_endproc
 2934              	.LFE139:
 2936              		.align	2
 2937              		.thumb
 2938              		.thumb_func
 2940              	prvInitialiseTCBVariables:
 2941              	.LFB140:
1971:../FreeRTOS/Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1972:../FreeRTOS/Source/tasks.c **** 
1973:../FreeRTOS/Source/tasks.c **** 
1974:../FreeRTOS/Source/tasks.c **** 
1975:../FreeRTOS/Source/tasks.c **** 
1976:../FreeRTOS/Source/tasks.c **** 
1977:../FreeRTOS/Source/tasks.c **** 
1978:../FreeRTOS/Source/tasks.c **** 
1979:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1980:../FreeRTOS/Source/tasks.c ****  * File private functions documented at the top of the file.
1981:../FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1982:../FreeRTOS/Source/tasks.c **** 
1983:../FreeRTOS/Source/tasks.c **** 
1984:../FreeRTOS/Source/tasks.c **** 
1985:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1986:../FreeRTOS/Source/tasks.c **** {
 2942              		.loc 1 1986 0
 2943              		.cfi_startproc
 2944              		@ args = 4, pretend = 0, frame = 16
 2945              		@ frame_needed = 1, uses_anonymous_args = 0
 2946 1164 80B5     		push	{r7, lr}
 2947              	.LCFI85:
 2948              		.cfi_def_cfa_offset 8
 2949              		.cfi_offset 14, -4
 2950              		.cfi_offset 7, -8
 2951 1166 84B0     		sub	sp, sp, #16
 2952              	.LCFI86:
 2953              		.cfi_def_cfa_offset 24
 2954 1168 00AF     		add	r7, sp, #0
 2955              	.LCFI87:
 2956              		.cfi_def_cfa_register 7
 2957 116a F860     		str	r0, [r7, #12]
 2958 116c B960     		str	r1, [r7, #8]
 2959 116e 7A60     		str	r2, [r7, #4]
 2960 1170 3B60     		str	r3, [r7, #0]
1987:../FreeRTOS/Source/tasks.c **** 	/* Store the function name in the TCB. */
1988:../FreeRTOS/Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1989:../FreeRTOS/Source/tasks.c **** 	{
1990:../FreeRTOS/Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1991:../FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 2961              		.loc 1 1991 0
 2962 1172 FB68     		ldr	r3, [r7, #12]
 2963 1174 03F13403 		add	r3, r3, #52
 2964 1178 1846     		mov	r0, r3
 2965 117a B968     		ldr	r1, [r7, #8]
 2966 117c 4FF01002 		mov	r2, #16
 2967 1180 FFF7FEFF 		bl	strncpy
1992:../FreeRTOS/Source/tasks.c **** 	}
1993:../FreeRTOS/Source/tasks.c **** 	#endif
1994:../FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 2968              		.loc 1 1994 0
 2969 1184 FB68     		ldr	r3, [r7, #12]
 2970 1186 4FF00002 		mov	r2, #0
 2971 118a 83F84320 		strb	r2, [r3, #67]
1995:../FreeRTOS/Source/tasks.c **** 
1996:../FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1997:../FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
1998:../FreeRTOS/Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 2972              		.loc 1 1998 0
 2973 118e 7B68     		ldr	r3, [r7, #4]
 2974 1190 092B     		cmp	r3, #9
 2975 1192 02D9     		bls	.L132
1999:../FreeRTOS/Source/tasks.c **** 	{
2000:../FreeRTOS/Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 2976              		.loc 1 2000 0
 2977 1194 4FF00903 		mov	r3, #9
 2978 1198 7B60     		str	r3, [r7, #4]
 2979              	.L132:
2001:../FreeRTOS/Source/tasks.c **** 	}
2002:../FreeRTOS/Source/tasks.c **** 
2003:../FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 2980              		.loc 1 2003 0
 2981 119a FB68     		ldr	r3, [r7, #12]
 2982 119c 7A68     		ldr	r2, [r7, #4]
 2983 119e DA62     		str	r2, [r3, #44]
2004:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2005:../FreeRTOS/Source/tasks.c **** 	{
2006:../FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 2984              		.loc 1 2006 0
 2985 11a0 FB68     		ldr	r3, [r7, #12]
 2986 11a2 7A68     		ldr	r2, [r7, #4]
 2987 11a4 5A64     		str	r2, [r3, #68]
2007:../FreeRTOS/Source/tasks.c **** 	}
2008:../FreeRTOS/Source/tasks.c **** 	#endif
2009:../FreeRTOS/Source/tasks.c **** 
2010:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 2988              		.loc 1 2010 0
 2989 11a6 FB68     		ldr	r3, [r7, #12]
 2990 11a8 03F10403 		add	r3, r3, #4
 2991 11ac 1846     		mov	r0, r3
 2992 11ae FFF7FEFF 		bl	vListInitialiseItem
2011:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 2993              		.loc 1 2011 0
 2994 11b2 FB68     		ldr	r3, [r7, #12]
 2995 11b4 03F11803 		add	r3, r3, #24
 2996 11b8 1846     		mov	r0, r3
 2997 11ba FFF7FEFF 		bl	vListInitialiseItem
2012:../FreeRTOS/Source/tasks.c **** 
2013:../FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2014:../FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2015:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 2998              		.loc 1 2015 0
 2999 11be FB68     		ldr	r3, [r7, #12]
 3000 11c0 FA68     		ldr	r2, [r7, #12]
 3001 11c2 1A61     		str	r2, [r3, #16]
2016:../FreeRTOS/Source/tasks.c **** 
2017:../FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2018:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 3002              		.loc 1 2018 0
 3003 11c4 7B68     		ldr	r3, [r7, #4]
 3004 11c6 C3F10A02 		rsb	r2, r3, #10
 3005 11ca FB68     		ldr	r3, [r7, #12]
 3006 11cc 9A61     		str	r2, [r3, #24]
2019:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3007              		.loc 1 2019 0
 3008 11ce FB68     		ldr	r3, [r7, #12]
 3009 11d0 FA68     		ldr	r2, [r7, #12]
 3010 11d2 5A62     		str	r2, [r3, #36]
2020:../FreeRTOS/Source/tasks.c **** 
2021:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2022:../FreeRTOS/Source/tasks.c **** 	{
2023:../FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2024:../FreeRTOS/Source/tasks.c **** 	}
2025:../FreeRTOS/Source/tasks.c **** 	#endif
2026:../FreeRTOS/Source/tasks.c **** 
2027:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2028:../FreeRTOS/Source/tasks.c **** 	{
2029:../FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
 3011              		.loc 1 2029 0
 3012 11d4 FB68     		ldr	r3, [r7, #12]
 3013 11d6 4FF00002 		mov	r2, #0
 3014 11da 9A64     		str	r2, [r3, #72]
2030:../FreeRTOS/Source/tasks.c **** 	}
2031:../FreeRTOS/Source/tasks.c **** 	#endif
2032:../FreeRTOS/Source/tasks.c **** 
2033:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2034:../FreeRTOS/Source/tasks.c **** 	{
2035:../FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
 3015              		.loc 1 2035 0
 3016 11dc FB68     		ldr	r3, [r7, #12]
 3017 11de 4FF00002 		mov	r2, #0
 3018 11e2 DA64     		str	r2, [r3, #76]
2036:../FreeRTOS/Source/tasks.c **** 	}
2037:../FreeRTOS/Source/tasks.c **** 	#endif
2038:../FreeRTOS/Source/tasks.c **** 
2039:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2040:../FreeRTOS/Source/tasks.c **** 	{
2041:../FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2042:../FreeRTOS/Source/tasks.c **** 	}
2043:../FreeRTOS/Source/tasks.c **** 	#else
2044:../FreeRTOS/Source/tasks.c **** 	{
2045:../FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2046:../FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2047:../FreeRTOS/Source/tasks.c **** 	}
2048:../FreeRTOS/Source/tasks.c **** 	#endif
2049:../FreeRTOS/Source/tasks.c **** }
 3019              		.loc 1 2049 0
 3020 11e4 07F11007 		add	r7, r7, #16
 3021 11e8 BD46     		mov	sp, r7
 3022 11ea 80BD     		pop	{r7, pc}
 3023              		.cfi_endproc
 3024              	.LFE140:
 3026              		.align	2
 3027              		.thumb
 3028              		.thumb_func
 3030              	prvInitialiseTaskLists:
 3031              	.LFB141:
2050:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2051:../FreeRTOS/Source/tasks.c **** 
2052:../FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2053:../FreeRTOS/Source/tasks.c **** 
2054:../FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2055:../FreeRTOS/Source/tasks.c **** 	{
2056:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2057:../FreeRTOS/Source/tasks.c **** 	
2058:../FreeRTOS/Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2059:../FreeRTOS/Source/tasks.c **** 		{
2060:../FreeRTOS/Source/tasks.c **** 			xTaskToModify = NULL;
2061:../FreeRTOS/Source/tasks.c **** 		}
2062:../FreeRTOS/Source/tasks.c **** 
2063:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2064:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2065:../FreeRTOS/Source/tasks.c **** 
2066:../FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2067:../FreeRTOS/Source/tasks.c **** 	}
2068:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
2069:../FreeRTOS/Source/tasks.c **** #endif
2070:../FreeRTOS/Source/tasks.c **** 
2071:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2072:../FreeRTOS/Source/tasks.c **** {
 3032              		.loc 1 2072 0
 3033              		.cfi_startproc
 3034              		@ args = 0, pretend = 0, frame = 8
 3035              		@ frame_needed = 1, uses_anonymous_args = 0
 3036 11ec 80B5     		push	{r7, lr}
 3037              	.LCFI88:
 3038              		.cfi_def_cfa_offset 8
 3039              		.cfi_offset 14, -4
 3040              		.cfi_offset 7, -8
 3041 11ee 82B0     		sub	sp, sp, #8
 3042              	.LCFI89:
 3043              		.cfi_def_cfa_offset 16
 3044 11f0 00AF     		add	r7, sp, #0
 3045              	.LCFI90:
 3046              		.cfi_def_cfa_register 7
2073:../FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2074:../FreeRTOS/Source/tasks.c **** 
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3047              		.loc 1 2075 0
 3048 11f2 4FF00003 		mov	r3, #0
 3049 11f6 7B60     		str	r3, [r7, #4]
 3050 11f8 13E0     		b	.L134
 3051              	.L135:
2076:../FreeRTOS/Source/tasks.c **** 	{
2077:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 3052              		.loc 1 2077 0 discriminator 2
 3053 11fa 7A68     		ldr	r2, [r7, #4]
 3054 11fc 1346     		mov	r3, r2
 3055 11fe 4FEA8303 		lsl	r3, r3, #2
 3056 1202 9B18     		adds	r3, r3, r2
 3057 1204 4FEA8303 		lsl	r3, r3, #2
 3058 1208 1A46     		mov	r2, r3
 3059 120a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3060 120e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3061 1212 D318     		adds	r3, r2, r3
 3062 1214 1846     		mov	r0, r3
 3063 1216 FFF7FEFF 		bl	vListInitialise
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3064              		.loc 1 2075 0 discriminator 2
 3065 121a 7B68     		ldr	r3, [r7, #4]
 3066 121c 03F10103 		add	r3, r3, #1
 3067 1220 7B60     		str	r3, [r7, #4]
 3068              	.L134:
2075:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3069              		.loc 1 2075 0 is_stmt 0 discriminator 1
 3070 1222 7B68     		ldr	r3, [r7, #4]
 3071 1224 092B     		cmp	r3, #9
 3072 1226 E8D9     		bls	.L135
2078:../FreeRTOS/Source/tasks.c **** 	}
2079:../FreeRTOS/Source/tasks.c **** 
2080:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 3073              		.loc 1 2080 0 is_stmt 1
 3074 1228 40F20000 		movw	r0, #:lower16:xDelayedTaskList1
 3075 122c C0F20000 		movt	r0, #:upper16:xDelayedTaskList1
 3076 1230 FFF7FEFF 		bl	vListInitialise
2081:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 3077              		.loc 1 2081 0
 3078 1234 40F20000 		movw	r0, #:lower16:xDelayedTaskList2
 3079 1238 C0F20000 		movt	r0, #:upper16:xDelayedTaskList2
 3080 123c FFF7FEFF 		bl	vListInitialise
2082:../FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 3081              		.loc 1 2082 0
 3082 1240 40F20000 		movw	r0, #:lower16:xPendingReadyList
 3083 1244 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 3084 1248 FFF7FEFF 		bl	vListInitialise
2083:../FreeRTOS/Source/tasks.c **** 
2084:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2085:../FreeRTOS/Source/tasks.c **** 	{
2086:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 3085              		.loc 1 2086 0
 3086 124c 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 3087 1250 C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 3088 1254 FFF7FEFF 		bl	vListInitialise
2087:../FreeRTOS/Source/tasks.c **** 	}
2088:../FreeRTOS/Source/tasks.c **** 	#endif
2089:../FreeRTOS/Source/tasks.c **** 
2090:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2091:../FreeRTOS/Source/tasks.c **** 	{
2092:../FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 3089              		.loc 1 2092 0
 3090 1258 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 3091 125c C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 3092 1260 FFF7FEFF 		bl	vListInitialise
2093:../FreeRTOS/Source/tasks.c **** 	}
2094:../FreeRTOS/Source/tasks.c **** 	#endif
2095:../FreeRTOS/Source/tasks.c **** 
2096:../FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2097:../FreeRTOS/Source/tasks.c **** 	using list2. */
2098:../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3093              		.loc 1 2098 0
 3094 1264 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3095 1268 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3096 126c 40F20002 		movw	r2, #:lower16:xDelayedTaskList1
 3097 1270 C0F20002 		movt	r2, #:upper16:xDelayedTaskList1
 3098 1274 1A60     		str	r2, [r3, #0]
2099:../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3099              		.loc 1 2099 0
 3100 1276 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3101 127a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3102 127e 40F20002 		movw	r2, #:lower16:xDelayedTaskList2
 3103 1282 C0F20002 		movt	r2, #:upper16:xDelayedTaskList2
 3104 1286 1A60     		str	r2, [r3, #0]
2100:../FreeRTOS/Source/tasks.c **** }
 3105              		.loc 1 2100 0
 3106 1288 07F10807 		add	r7, r7, #8
 3107 128c BD46     		mov	sp, r7
 3108 128e 80BD     		pop	{r7, pc}
 3109              		.cfi_endproc
 3110              	.LFE141:
 3112              		.align	2
 3113              		.thumb
 3114              		.thumb_func
 3116              	prvCheckTasksWaitingTermination:
 3117              	.LFB142:
2101:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2102:../FreeRTOS/Source/tasks.c **** 
2103:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2104:../FreeRTOS/Source/tasks.c **** {
 3118              		.loc 1 2104 0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 8
 3121              		@ frame_needed = 1, uses_anonymous_args = 0
 3122 1290 80B5     		push	{r7, lr}
 3123              	.LCFI91:
 3124              		.cfi_def_cfa_offset 8
 3125              		.cfi_offset 14, -4
 3126              		.cfi_offset 7, -8
 3127 1292 82B0     		sub	sp, sp, #8
 3128              	.LCFI92:
 3129              		.cfi_def_cfa_offset 16
 3130 1294 00AF     		add	r7, sp, #0
 3131              	.LCFI93:
 3132              		.cfi_def_cfa_register 7
 3133              	.LBB8:
2105:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2106:../FreeRTOS/Source/tasks.c **** 	{
2107:../FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2108:../FreeRTOS/Source/tasks.c **** 
2109:../FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2110:../FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2111:../FreeRTOS/Source/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 3134              		.loc 1 2111 0
 3135 1296 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3136 129a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3137 129e 1B68     		ldr	r3, [r3, #0]
 3138 12a0 002B     		cmp	r3, #0
 3139 12a2 3CD0     		beq	.L136
2112:../FreeRTOS/Source/tasks.c **** 		{
2113:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3140              		.loc 1 2113 0
 3141 12a4 FFF7FEFF 		bl	vTaskSuspendAll
2114:../FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3142              		.loc 1 2114 0
 3143 12a8 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3144 12ac C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3145 12b0 1B68     		ldr	r3, [r3, #0]
 3146 12b2 002B     		cmp	r3, #0
 3147 12b4 14BF     		ite	ne
 3148 12b6 0023     		movne	r3, #0
 3149 12b8 0123     		moveq	r3, #1
 3150 12ba 7B60     		str	r3, [r7, #4]
2115:../FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
 3151              		.loc 1 2115 0
 3152 12bc FFF7FEFF 		bl	xTaskResumeAll
2116:../FreeRTOS/Source/tasks.c **** 
2117:../FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3153              		.loc 1 2117 0
 3154 12c0 7B68     		ldr	r3, [r7, #4]
 3155 12c2 002B     		cmp	r3, #0
 3156 12c4 2BD1     		bne	.L136
 3157              	.LBB9:
2118:../FreeRTOS/Source/tasks.c **** 			{
2119:../FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2120:../FreeRTOS/Source/tasks.c **** 
2121:../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 3158              		.loc 1 2121 0
 3159 12c6 FFF7FEFF 		bl	vPortEnterCritical
2122:../FreeRTOS/Source/tasks.c **** 				{
2123:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 3160              		.loc 1 2123 0
 3161 12ca 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3162 12ce C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3163 12d2 DB68     		ldr	r3, [r3, #12]
 3164 12d4 DB68     		ldr	r3, [r3, #12]
 3165 12d6 3B60     		str	r3, [r7, #0]
2124:../FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 3166              		.loc 1 2124 0
 3167 12d8 3B68     		ldr	r3, [r7, #0]
 3168 12da 03F10403 		add	r3, r3, #4
 3169 12de 1846     		mov	r0, r3
 3170 12e0 FFF7FEFF 		bl	vListRemove
2125:../FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3171              		.loc 1 2125 0
 3172 12e4 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3173 12e8 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3174 12ec 1B68     		ldr	r3, [r3, #0]
 3175 12ee 03F1FF32 		add	r2, r3, #-1
 3176 12f2 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3177 12f6 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3178 12fa 1A60     		str	r2, [r3, #0]
2126:../FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 3179              		.loc 1 2126 0
 3180 12fc 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3181 1300 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3182 1304 1B68     		ldr	r3, [r3, #0]
 3183 1306 03F1FF32 		add	r2, r3, #-1
 3184 130a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3185 130e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3186 1312 1A60     		str	r2, [r3, #0]
2127:../FreeRTOS/Source/tasks.c **** 				}
2128:../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 3187              		.loc 1 2128 0
 3188 1314 FFF7FEFF 		bl	vPortExitCritical
2129:../FreeRTOS/Source/tasks.c **** 
2130:../FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 3189              		.loc 1 2130 0
 3190 1318 3868     		ldr	r0, [r7, #0]
 3191 131a 00F07DF9 		bl	prvDeleteTCB
 3192              	.L136:
 3193              	.LBE9:
 3194              	.LBE8:
2131:../FreeRTOS/Source/tasks.c **** 			}
2132:../FreeRTOS/Source/tasks.c **** 		}
2133:../FreeRTOS/Source/tasks.c **** 	}
2134:../FreeRTOS/Source/tasks.c **** 	#endif
2135:../FreeRTOS/Source/tasks.c **** }
 3195              		.loc 1 2135 0
 3196 131e 07F10807 		add	r7, r7, #8
 3197 1322 BD46     		mov	sp, r7
 3198 1324 80BD     		pop	{r7, pc}
 3199              		.cfi_endproc
 3200              	.LFE142:
 3202 1326 00BF     		.align	2
 3203              		.thumb
 3204              		.thumb_func
 3206              	prvAddCurrentTaskToDelayedList:
 3207              	.LFB143:
2136:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2137:../FreeRTOS/Source/tasks.c **** 
2138:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2139:../FreeRTOS/Source/tasks.c **** {
 3208              		.loc 1 2139 0
 3209              		.cfi_startproc
 3210              		@ args = 0, pretend = 0, frame = 8
 3211              		@ frame_needed = 1, uses_anonymous_args = 0
 3212 1328 80B5     		push	{r7, lr}
 3213              	.LCFI94:
 3214              		.cfi_def_cfa_offset 8
 3215              		.cfi_offset 14, -4
 3216              		.cfi_offset 7, -8
 3217 132a 82B0     		sub	sp, sp, #8
 3218              	.LCFI95:
 3219              		.cfi_def_cfa_offset 16
 3220 132c 00AF     		add	r7, sp, #0
 3221              	.LCFI96:
 3222              		.cfi_def_cfa_register 7
 3223 132e 7860     		str	r0, [r7, #4]
2140:../FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2141:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3224              		.loc 1 2141 0
 3225 1330 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3226 1334 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3227 1338 1B68     		ldr	r3, [r3, #0]
 3228 133a 7A68     		ldr	r2, [r7, #4]
 3229 133c 5A60     		str	r2, [r3, #4]
2142:../FreeRTOS/Source/tasks.c **** 
2143:../FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 3230              		.loc 1 2143 0
 3231 133e 40F20003 		movw	r3, #:lower16:xTickCount
 3232 1342 C0F20003 		movt	r3, #:upper16:xTickCount
 3233 1346 1B68     		ldr	r3, [r3, #0]
 3234 1348 7A68     		ldr	r2, [r7, #4]
 3235 134a 9A42     		cmp	r2, r3
 3236 134c 10D2     		bcs	.L139
2144:../FreeRTOS/Source/tasks.c **** 	{
2145:../FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2146:../FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
 3237              		.loc 1 2146 0
 3238 134e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3239 1352 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3240 1356 1A68     		ldr	r2, [r3, #0]
 3241 1358 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3242 135c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3243 1360 1B68     		ldr	r3, [r3, #0]
 3244 1362 03F10403 		add	r3, r3, #4
 3245 1366 1046     		mov	r0, r2
 3246 1368 1946     		mov	r1, r3
 3247 136a FFF7FEFF 		bl	vListInsert
 3248 136e 1DE0     		b	.L138
 3249              	.L139:
2147:../FreeRTOS/Source/tasks.c **** 	}
2148:../FreeRTOS/Source/tasks.c **** 	else
2149:../FreeRTOS/Source/tasks.c **** 	{
2150:../FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2151:../FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
 3250              		.loc 1 2151 0
 3251 1370 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3252 1374 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3253 1378 1A68     		ldr	r2, [r3, #0]
 3254 137a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3255 137e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3256 1382 1B68     		ldr	r3, [r3, #0]
 3257 1384 03F10403 		add	r3, r3, #4
 3258 1388 1046     		mov	r0, r2
 3259 138a 1946     		mov	r1, r3
 3260 138c FFF7FEFF 		bl	vListInsert
2152:../FreeRTOS/Source/tasks.c **** 
2153:../FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2154:../FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2155:../FreeRTOS/Source/tasks.c **** 		too. */
2156:../FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3261              		.loc 1 2156 0
 3262 1390 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3263 1394 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3264 1398 1B68     		ldr	r3, [r3, #0]
 3265 139a 7A68     		ldr	r2, [r7, #4]
 3266 139c 9A42     		cmp	r2, r3
 3267 139e 05D2     		bcs	.L138
2157:../FreeRTOS/Source/tasks.c **** 		{
2158:../FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3268              		.loc 1 2158 0
 3269 13a0 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3270 13a4 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3271 13a8 7A68     		ldr	r2, [r7, #4]
 3272 13aa 1A60     		str	r2, [r3, #0]
 3273              	.L138:
2159:../FreeRTOS/Source/tasks.c **** 		}
2160:../FreeRTOS/Source/tasks.c **** 	}
2161:../FreeRTOS/Source/tasks.c **** }
 3274              		.loc 1 2161 0
 3275 13ac 07F10807 		add	r7, r7, #8
 3276 13b0 BD46     		mov	sp, r7
 3277 13b2 80BD     		pop	{r7, pc}
 3278              		.cfi_endproc
 3279              	.LFE143:
 3281              		.align	2
 3282              		.thumb
 3283              		.thumb_func
 3285              	prvAllocateTCBAndStack:
 3286              	.LFB144:
2162:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2163:../FreeRTOS/Source/tasks.c **** 
2164:../FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2165:../FreeRTOS/Source/tasks.c **** {
 3287              		.loc 1 2165 0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 16
 3290              		@ frame_needed = 1, uses_anonymous_args = 0
 3291 13b4 80B5     		push	{r7, lr}
 3292              	.LCFI97:
 3293              		.cfi_def_cfa_offset 8
 3294              		.cfi_offset 14, -4
 3295              		.cfi_offset 7, -8
 3296 13b6 84B0     		sub	sp, sp, #16
 3297              	.LCFI98:
 3298              		.cfi_def_cfa_offset 24
 3299 13b8 00AF     		add	r7, sp, #0
 3300              	.LCFI99:
 3301              		.cfi_def_cfa_register 7
 3302 13ba 0346     		mov	r3, r0
 3303 13bc 3960     		str	r1, [r7, #0]
 3304 13be FB80     		strh	r3, [r7, #6]	@ movhi
2166:../FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2167:../FreeRTOS/Source/tasks.c **** 
2168:../FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2169:../FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2170:../FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 3305              		.loc 1 2170 0
 3306 13c0 4FF05000 		mov	r0, #80
 3307 13c4 FFF7FEFF 		bl	malloc
 3308 13c8 0346     		mov	r3, r0
 3309 13ca FB60     		str	r3, [r7, #12]
2171:../FreeRTOS/Source/tasks.c **** 
2172:../FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 3310              		.loc 1 2172 0
 3311 13cc FB68     		ldr	r3, [r7, #12]
 3312 13ce 002B     		cmp	r3, #0
 3313 13d0 23D0     		beq	.L142
2173:../FreeRTOS/Source/tasks.c **** 	{
2174:../FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2175:../FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2176:../FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2177:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 3314              		.loc 1 2177 0
 3315 13d2 3B68     		ldr	r3, [r7, #0]
 3316 13d4 002B     		cmp	r3, #0
 3317 13d6 07D1     		bne	.L143
 3318              		.loc 1 2177 0 is_stmt 0 discriminator 1
 3319 13d8 FB88     		ldrh	r3, [r7, #6]
 3320 13da 4FEA8303 		lsl	r3, r3, #2
 3321 13de 1846     		mov	r0, r3
 3322 13e0 FFF7FEFF 		bl	malloc
 3323 13e4 0346     		mov	r3, r0
 3324 13e6 00E0     		b	.L144
 3325              	.L143:
 3326              		.loc 1 2177 0 discriminator 2
 3327 13e8 3B68     		ldr	r3, [r7, #0]
 3328              	.L144:
 3329              		.loc 1 2177 0 discriminator 3
 3330 13ea FA68     		ldr	r2, [r7, #12]
 3331 13ec 1363     		str	r3, [r2, #48]
2178:../FreeRTOS/Source/tasks.c **** 
2179:../FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3332              		.loc 1 2179 0 is_stmt 1 discriminator 3
 3333 13ee FB68     		ldr	r3, [r7, #12]
 3334 13f0 1B6B     		ldr	r3, [r3, #48]
 3335 13f2 002B     		cmp	r3, #0
 3336 13f4 06D1     		bne	.L145
2180:../FreeRTOS/Source/tasks.c **** 		{
2181:../FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2182:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 3337              		.loc 1 2182 0
 3338 13f6 F868     		ldr	r0, [r7, #12]
 3339 13f8 FFF7FEFF 		bl	free
2183:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
 3340              		.loc 1 2183 0
 3341 13fc 4FF00003 		mov	r3, #0
 3342 1400 FB60     		str	r3, [r7, #12]
 3343 1402 0AE0     		b	.L142
 3344              	.L145:
2184:../FreeRTOS/Source/tasks.c **** 		}
2185:../FreeRTOS/Source/tasks.c **** 		else
2186:../FreeRTOS/Source/tasks.c **** 		{
2187:../FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2188:../FreeRTOS/Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 3345              		.loc 1 2188 0
 3346 1404 FB68     		ldr	r3, [r7, #12]
 3347 1406 1A6B     		ldr	r2, [r3, #48]
 3348 1408 FB88     		ldrh	r3, [r7, #6]
 3349 140a 4FEA8303 		lsl	r3, r3, #2
 3350 140e 1046     		mov	r0, r2
 3351 1410 4FF0A501 		mov	r1, #165
 3352 1414 1A46     		mov	r2, r3
 3353 1416 FFF7FEFF 		bl	memset
 3354              	.L142:
2189:../FreeRTOS/Source/tasks.c **** 		}
2190:../FreeRTOS/Source/tasks.c **** 	}
2191:../FreeRTOS/Source/tasks.c **** 
2192:../FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
 3355              		.loc 1 2192 0
 3356 141a FB68     		ldr	r3, [r7, #12]
2193:../FreeRTOS/Source/tasks.c **** }
 3357              		.loc 1 2193 0
 3358 141c 1846     		mov	r0, r3
 3359 141e 07F11007 		add	r7, r7, #16
 3360 1422 BD46     		mov	sp, r7
 3361 1424 80BD     		pop	{r7, pc}
 3362              		.cfi_endproc
 3363              	.LFE144:
 3365              		.section	.rodata
 3366 000b 00       		.align	2
 3367              	.LC2:
 3368 000c 25752020 		.ascii	"%u  %c  %-16s          0   0%%  %5u\015\012\000"
 3368      25632020 
 3368      252D3136 
 3368      73202020 
 3368      20202020 
 3369 0032 0000     		.align	2
 3370              	.LC3:
 3371 0034 25752020 		.ascii	"%u  %c  %-16s %10u %3u%%  %5u\015\012\000"
 3371      25632020 
 3371      252D3136 
 3371      73202531 
 3371      30752025 
 3372              		.align	2
 3373              	.LC4:
 3374 0054 25752020 		.ascii	"%u  %c  %-16s %10u  <1%%  %5u\015\012\000"
 3374      25632020 
 3374      252D3136 
 3374      73202531 
 3374      30752020 
 3375              		.text
 3376 1426 00BF     		.align	2
 3377              		.thumb
 3378              		.thumb_func
 3380              	prvGenerateRunTimeStatsForTasksInList:
 3381              	.LFB145:
2194:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2195:../FreeRTOS/Source/tasks.c **** 
2196:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2197:../FreeRTOS/Source/tasks.c **** 
2198:../FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2199:../FreeRTOS/Source/tasks.c **** 	{
2200:../FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2201:../FreeRTOS/Source/tasks.c **** 	unsigned short usStackRemaining;
2202:../FreeRTOS/Source/tasks.c **** 
2203:../FreeRTOS/Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2204:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2205:../FreeRTOS/Source/tasks.c **** 		do
2206:../FreeRTOS/Source/tasks.c **** 		{
2207:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2208:../FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2209:../FreeRTOS/Source/tasks.c **** 			{
2210:../FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2211:../FreeRTOS/Source/tasks.c **** 			}
2212:../FreeRTOS/Source/tasks.c **** 			#else
2213:../FreeRTOS/Source/tasks.c **** 			{
2214:../FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2215:../FreeRTOS/Source/tasks.c **** 			}
2216:../FreeRTOS/Source/tasks.c **** 			#endif			
2217:../FreeRTOS/Source/tasks.c **** 			
2218:../FreeRTOS/Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2219:../FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2220:../FreeRTOS/Source/tasks.c **** 
2221:../FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2222:../FreeRTOS/Source/tasks.c **** 	}
2223:../FreeRTOS/Source/tasks.c **** 
2224:../FreeRTOS/Source/tasks.c **** #endif
2225:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2226:../FreeRTOS/Source/tasks.c **** 
2227:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2228:../FreeRTOS/Source/tasks.c **** 
2229:../FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2230:../FreeRTOS/Source/tasks.c **** 	{
 3382              		.loc 1 2230 0
 3383              		.cfi_startproc
 3384              		@ args = 0, pretend = 0, frame = 40
 3385              		@ frame_needed = 1, uses_anonymous_args = 0
 3386 1428 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3387              	.LCFI100:
 3388              		.cfi_def_cfa_offset 24
 3389              		.cfi_offset 14, -4
 3390              		.cfi_offset 8, -8
 3391              		.cfi_offset 7, -12
 3392              		.cfi_offset 6, -16
 3393              		.cfi_offset 5, -20
 3394              		.cfi_offset 4, -24
 3395 142c 8EB0     		sub	sp, sp, #56
 3396              	.LCFI101:
 3397              		.cfi_def_cfa_offset 80
 3398 142e 04AF     		add	r7, sp, #16
 3399              	.LCFI102:
 3400              		.cfi_def_cfa 7, 64
 3401 1430 F860     		str	r0, [r7, #12]
 3402 1432 B960     		str	r1, [r7, #8]
 3403 1434 7A60     		str	r2, [r7, #4]
 3404 1436 FB70     		strb	r3, [r7, #3]
 3405              	.LBB10:
2231:../FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2232:../FreeRTOS/Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2233:../FreeRTOS/Source/tasks.c **** 
2234:../FreeRTOS/Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2235:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3406              		.loc 1 2235 0
 3407 1438 BB68     		ldr	r3, [r7, #8]
 3408 143a 7B62     		str	r3, [r7, #36]
 3409 143c 7B6A     		ldr	r3, [r7, #36]
 3410 143e 5B68     		ldr	r3, [r3, #4]
 3411 1440 5B68     		ldr	r3, [r3, #4]
 3412 1442 1A46     		mov	r2, r3
 3413 1444 7B6A     		ldr	r3, [r7, #36]
 3414 1446 5A60     		str	r2, [r3, #4]
 3415 1448 7B6A     		ldr	r3, [r7, #36]
 3416 144a 5A68     		ldr	r2, [r3, #4]
 3417 144c 7B6A     		ldr	r3, [r7, #36]
 3418 144e 03F10803 		add	r3, r3, #8
 3419 1452 9A42     		cmp	r2, r3
 3420 1454 05D1     		bne	.L147
 3421              		.loc 1 2235 0 is_stmt 0 discriminator 1
 3422 1456 7B6A     		ldr	r3, [r7, #36]
 3423 1458 5B68     		ldr	r3, [r3, #4]
 3424 145a 5B68     		ldr	r3, [r3, #4]
 3425 145c 1A46     		mov	r2, r3
 3426 145e 7B6A     		ldr	r3, [r7, #36]
 3427 1460 5A60     		str	r2, [r3, #4]
 3428              	.L147:
 3429              		.loc 1 2235 0 discriminator 2
 3430 1462 7B6A     		ldr	r3, [r7, #36]
 3431 1464 5B68     		ldr	r3, [r3, #4]
 3432 1466 DB68     		ldr	r3, [r3, #12]
 3433 1468 3B62     		str	r3, [r7, #32]
 3434              	.L153:
 3435              	.LBE10:
 3436              	.LBB11:
2236:../FreeRTOS/Source/tasks.c **** 		do
2237:../FreeRTOS/Source/tasks.c **** 		{
2238:../FreeRTOS/Source/tasks.c **** 			/* Get next TCB in from the list. */
2239:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3437              		.loc 1 2239 0 is_stmt 1
 3438 146a BB68     		ldr	r3, [r7, #8]
 3439 146c FB61     		str	r3, [r7, #28]
 3440 146e FB69     		ldr	r3, [r7, #28]
 3441 1470 5B68     		ldr	r3, [r3, #4]
 3442 1472 5B68     		ldr	r3, [r3, #4]
 3443 1474 1A46     		mov	r2, r3
 3444 1476 FB69     		ldr	r3, [r7, #28]
 3445 1478 5A60     		str	r2, [r3, #4]
 3446 147a FB69     		ldr	r3, [r7, #28]
 3447 147c 5A68     		ldr	r2, [r3, #4]
 3448 147e FB69     		ldr	r3, [r7, #28]
 3449 1480 03F10803 		add	r3, r3, #8
 3450 1484 9A42     		cmp	r2, r3
 3451 1486 05D1     		bne	.L148
 3452              		.loc 1 2239 0 is_stmt 0 discriminator 1
 3453 1488 FB69     		ldr	r3, [r7, #28]
 3454 148a 5B68     		ldr	r3, [r3, #4]
 3455 148c 5B68     		ldr	r3, [r3, #4]
 3456 148e 1A46     		mov	r2, r3
 3457 1490 FB69     		ldr	r3, [r7, #28]
 3458 1492 5A60     		str	r2, [r3, #4]
 3459              	.L148:
 3460              		.loc 1 2239 0 discriminator 2
 3461 1494 FB69     		ldr	r3, [r7, #28]
 3462 1496 5B68     		ldr	r3, [r3, #4]
 3463 1498 DB68     		ldr	r3, [r3, #12]
 3464 149a BB61     		str	r3, [r7, #24]
 3465              	.LBE11:
2240:../FreeRTOS/Source/tasks.c **** 
2241:../FreeRTOS/Source/tasks.c **** 			/* Divide by zero check. */
2242:../FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > 0UL )
 3466              		.loc 1 2242 0 is_stmt 1 discriminator 2
 3467 149c 7B68     		ldr	r3, [r7, #4]
 3468 149e 002B     		cmp	r3, #0
 3469 14a0 76D0     		beq	.L149
2243:../FreeRTOS/Source/tasks.c **** 			{
2244:../FreeRTOS/Source/tasks.c **** 				/* Has the task run at all? */
2245:../FreeRTOS/Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
 3470              		.loc 1 2245 0
 3471 14a2 BB69     		ldr	r3, [r7, #24]
 3472 14a4 DB6C     		ldr	r3, [r3, #76]
 3473 14a6 002B     		cmp	r3, #0
 3474 14a8 1CD1     		bne	.L150
2246:../FreeRTOS/Source/tasks.c **** 				{
2247:../FreeRTOS/Source/tasks.c **** 					/* The task has used no CPU time at all. */
2248:../FreeRTOS/Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) p
 3475              		.loc 1 2248 0
 3476 14aa BB69     		ldr	r3, [r7, #24]
 3477 14ac DB6A     		ldr	r3, [r3, #44]
 3478 14ae 1D46     		mov	r5, r3
 3479 14b0 97F90340 		ldrsb	r4, [r7, #3]
 3480 14b4 BB69     		ldr	r3, [r7, #24]
 3481 14b6 03F13406 		add	r6, r3, #52
 3482 14ba BB69     		ldr	r3, [r7, #24]
 3483 14bc 1B6B     		ldr	r3, [r3, #48]
 3484 14be 1846     		mov	r0, r3
 3485 14c0 00F070F8 		bl	usTaskCheckFreeStackSpace
 3486 14c4 0346     		mov	r3, r0
 3487 14c6 0096     		str	r6, [sp, #0]
 3488 14c8 0193     		str	r3, [sp, #4]
 3489 14ca 40F20000 		movw	r0, #:lower16:pcStatsString
 3490 14ce C0F20000 		movt	r0, #:upper16:pcStatsString
 3491 14d2 40F20001 		movw	r1, #:lower16:.LC2
 3492 14d6 C0F20001 		movt	r1, #:upper16:.LC2
 3493 14da 2A46     		mov	r2, r5
 3494 14dc 2346     		mov	r3, r4
 3495 14de FFF7FEFF 		bl	sprintf
 3496 14e2 4EE0     		b	.L151
 3497              	.L150:
2249:../FreeRTOS/Source/tasks.c **** 				}
2250:../FreeRTOS/Source/tasks.c **** 				else
2251:../FreeRTOS/Source/tasks.c **** 				{
2252:../FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2253:../FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2254:../FreeRTOS/Source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2255:../FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 3498              		.loc 1 2255 0
 3499 14e4 BB69     		ldr	r3, [r7, #24]
 3500 14e6 DB6C     		ldr	r3, [r3, #76]
 3501 14e8 1A46     		mov	r2, r3
 3502 14ea 7B68     		ldr	r3, [r7, #4]
 3503 14ec B2FBF3F3 		udiv	r3, r2, r3
 3504 14f0 7B61     		str	r3, [r7, #20]
2256:../FreeRTOS/Source/tasks.c **** 
2257:../FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
 3505              		.loc 1 2257 0
 3506 14f2 7B69     		ldr	r3, [r7, #20]
 3507 14f4 002B     		cmp	r3, #0
 3508 14f6 23D0     		beq	.L152
2258:../FreeRTOS/Source/tasks.c **** 					{
2259:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2260:../FreeRTOS/Source/tasks.c **** 						{
2261:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2262:../FreeRTOS/Source/tasks.c **** 						}
2263:../FreeRTOS/Source/tasks.c **** 						#else
2264:../FreeRTOS/Source/tasks.c **** 						{
2265:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2266:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2267:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNex
 3509              		.loc 1 2267 0
 3510 14f8 BB69     		ldr	r3, [r7, #24]
 3511 14fa DB6A     		ldr	r3, [r3, #44]
 3512 14fc 1D46     		mov	r5, r3
 3513 14fe 97F90340 		ldrsb	r4, [r7, #3]
 3514 1502 BB69     		ldr	r3, [r7, #24]
 3515 1504 03F13408 		add	r8, r3, #52
 3516 1508 BB69     		ldr	r3, [r7, #24]
 3517 150a DB6C     		ldr	r3, [r3, #76]
 3518 150c 1E46     		mov	r6, r3
 3519 150e BB69     		ldr	r3, [r7, #24]
 3520 1510 1B6B     		ldr	r3, [r3, #48]
 3521 1512 1846     		mov	r0, r3
 3522 1514 00F046F8 		bl	usTaskCheckFreeStackSpace
 3523 1518 0346     		mov	r3, r0
 3524 151a CDF80080 		str	r8, [sp, #0]
 3525 151e 0196     		str	r6, [sp, #4]
 3526 1520 7A69     		ldr	r2, [r7, #20]
 3527 1522 0292     		str	r2, [sp, #8]
 3528 1524 0393     		str	r3, [sp, #12]
 3529 1526 40F20000 		movw	r0, #:lower16:pcStatsString
 3530 152a C0F20000 		movt	r0, #:upper16:pcStatsString
 3531 152e 40F20001 		movw	r1, #:lower16:.LC3
 3532 1532 C0F20001 		movt	r1, #:upper16:.LC3
 3533 1536 2A46     		mov	r2, r5
 3534 1538 2346     		mov	r3, r4
 3535 153a FFF7FEFF 		bl	sprintf
 3536 153e 20E0     		b	.L151
 3537              	.L152:
2268:../FreeRTOS/Source/tasks.c **** 						}
2269:../FreeRTOS/Source/tasks.c **** 						#endif
2270:../FreeRTOS/Source/tasks.c **** 					}
2271:../FreeRTOS/Source/tasks.c **** 					else
2272:../FreeRTOS/Source/tasks.c **** 					{
2273:../FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
2274:../FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
2275:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2276:../FreeRTOS/Source/tasks.c **** 						{
2277:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2278:../FreeRTOS/Source/tasks.c **** 						}
2279:../FreeRTOS/Source/tasks.c **** 						#else
2280:../FreeRTOS/Source/tasks.c **** 						{
2281:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2282:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2283:../FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNe
 3538              		.loc 1 2283 0
 3539 1540 BB69     		ldr	r3, [r7, #24]
 3540 1542 DB6A     		ldr	r3, [r3, #44]
 3541 1544 1D46     		mov	r5, r3
 3542 1546 97F90340 		ldrsb	r4, [r7, #3]
 3543 154a BB69     		ldr	r3, [r7, #24]
 3544 154c 03F13408 		add	r8, r3, #52
 3545 1550 BB69     		ldr	r3, [r7, #24]
 3546 1552 DB6C     		ldr	r3, [r3, #76]
 3547 1554 1E46     		mov	r6, r3
 3548 1556 BB69     		ldr	r3, [r7, #24]
 3549 1558 1B6B     		ldr	r3, [r3, #48]
 3550 155a 1846     		mov	r0, r3
 3551 155c 00F022F8 		bl	usTaskCheckFreeStackSpace
 3552 1560 0346     		mov	r3, r0
 3553 1562 CDF80080 		str	r8, [sp, #0]
 3554 1566 0196     		str	r6, [sp, #4]
 3555 1568 0293     		str	r3, [sp, #8]
 3556 156a 40F20000 		movw	r0, #:lower16:pcStatsString
 3557 156e C0F20000 		movt	r0, #:upper16:pcStatsString
 3558 1572 40F20001 		movw	r1, #:lower16:.LC4
 3559 1576 C0F20001 		movt	r1, #:upper16:.LC4
 3560 157a 2A46     		mov	r2, r5
 3561 157c 2346     		mov	r3, r4
 3562 157e FFF7FEFF 		bl	sprintf
 3563              	.L151:
2284:../FreeRTOS/Source/tasks.c **** 						}
2285:../FreeRTOS/Source/tasks.c **** 						#endif
2286:../FreeRTOS/Source/tasks.c **** 					}
2287:../FreeRTOS/Source/tasks.c **** 				}
2288:../FreeRTOS/Source/tasks.c **** 
2289:../FreeRTOS/Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 3564              		.loc 1 2289 0
 3565 1582 F868     		ldr	r0, [r7, #12]
 3566 1584 40F20001 		movw	r1, #:lower16:pcStatsString
 3567 1588 C0F20001 		movt	r1, #:upper16:pcStatsString
 3568 158c FFF7FEFF 		bl	strcat
 3569              	.L149:
2290:../FreeRTOS/Source/tasks.c **** 			}
2291:../FreeRTOS/Source/tasks.c **** 
2292:../FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
 3570              		.loc 1 2292 0
 3571 1590 BA69     		ldr	r2, [r7, #24]
 3572 1592 3B6A     		ldr	r3, [r7, #32]
 3573 1594 9A42     		cmp	r2, r3
 3574 1596 7FF468AF 		bne	.L153
2293:../FreeRTOS/Source/tasks.c **** 	}
 3575              		.loc 1 2293 0
 3576 159a 07F12807 		add	r7, r7, #40
 3577 159e BD46     		mov	sp, r7
 3578 15a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3579              		.cfi_endproc
 3580              	.LFE145:
 3582              		.align	2
 3583              		.thumb
 3584              		.thumb_func
 3586              	usTaskCheckFreeStackSpace:
 3587              	.LFB146:
2294:../FreeRTOS/Source/tasks.c **** 
2295:../FreeRTOS/Source/tasks.c **** #endif
2296:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2297:../FreeRTOS/Source/tasks.c **** 
2298:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2299:../FreeRTOS/Source/tasks.c **** 
2300:../FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2301:../FreeRTOS/Source/tasks.c **** 	{
 3588              		.loc 1 2301 0
 3589              		.cfi_startproc
 3590              		@ args = 0, pretend = 0, frame = 8
 3591              		@ frame_needed = 1, uses_anonymous_args = 0
 3592              		@ link register save eliminated.
 3593 15a4 90B4     		push	{r4, r7}
 3594              	.LCFI103:
 3595              		.cfi_def_cfa_offset 8
 3596              		.cfi_offset 7, -4
 3597              		.cfi_offset 4, -8
 3598 15a6 82B0     		sub	sp, sp, #8
 3599              	.LCFI104:
 3600              		.cfi_def_cfa_offset 16
 3601 15a8 00AF     		add	r7, sp, #0
 3602              	.LCFI105:
 3603              		.cfi_def_cfa_register 7
 3604 15aa 7860     		str	r0, [r7, #4]
2302:../FreeRTOS/Source/tasks.c **** 	register unsigned short usCount = 0U;
 3605              		.loc 1 2302 0
 3606 15ac 4FF00004 		mov	r4, #0
2303:../FreeRTOS/Source/tasks.c **** 
2304:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3607              		.loc 1 2304 0
 3608 15b0 06E0     		b	.L155
 3609              	.L156:
2305:../FreeRTOS/Source/tasks.c **** 		{
2306:../FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3610              		.loc 1 2306 0
 3611 15b2 7B68     		ldr	r3, [r7, #4]
 3612 15b4 03F10103 		add	r3, r3, #1
 3613 15b8 7B60     		str	r3, [r7, #4]
2307:../FreeRTOS/Source/tasks.c **** 			usCount++;
 3614              		.loc 1 2307 0
 3615 15ba 04F10103 		add	r3, r4, #1
 3616 15be 9CB2     		uxth	r4, r3
 3617              	.L155:
2304:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3618              		.loc 1 2304 0 discriminator 1
 3619 15c0 7B68     		ldr	r3, [r7, #4]
 3620 15c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3621 15c4 A52B     		cmp	r3, #165
 3622 15c6 F4D0     		beq	.L156
2308:../FreeRTOS/Source/tasks.c **** 		}
2309:../FreeRTOS/Source/tasks.c **** 
2310:../FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 3623              		.loc 1 2310 0
 3624 15c8 4FEA9403 		lsr	r3, r4, #2
 3625 15cc 9CB2     		uxth	r4, r3
2311:../FreeRTOS/Source/tasks.c **** 
2312:../FreeRTOS/Source/tasks.c **** 		return usCount;
 3626              		.loc 1 2312 0
 3627 15ce 2346     		mov	r3, r4
2313:../FreeRTOS/Source/tasks.c **** 	}
 3628              		.loc 1 2313 0
 3629 15d0 1846     		mov	r0, r3
 3630 15d2 07F10807 		add	r7, r7, #8
 3631 15d6 BD46     		mov	sp, r7
 3632 15d8 90BC     		pop	{r4, r7}
 3633 15da 7047     		bx	lr
 3634              		.cfi_endproc
 3635              	.LFE146:
 3637              		.align	2
 3638              		.global	uxTaskGetStackHighWaterMark
 3639              		.thumb
 3640              		.thumb_func
 3642              	uxTaskGetStackHighWaterMark:
 3643              	.LFB147:
2314:../FreeRTOS/Source/tasks.c **** 
2315:../FreeRTOS/Source/tasks.c **** #endif
2316:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2317:../FreeRTOS/Source/tasks.c **** 
2318:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2319:../FreeRTOS/Source/tasks.c **** 
2320:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2321:../FreeRTOS/Source/tasks.c **** 	{
 3644              		.loc 1 2321 0
 3645              		.cfi_startproc
 3646              		@ args = 0, pretend = 0, frame = 24
 3647              		@ frame_needed = 1, uses_anonymous_args = 0
 3648 15dc 80B5     		push	{r7, lr}
 3649              	.LCFI106:
 3650              		.cfi_def_cfa_offset 8
 3651              		.cfi_offset 14, -4
 3652              		.cfi_offset 7, -8
 3653 15de 86B0     		sub	sp, sp, #24
 3654              	.LCFI107:
 3655              		.cfi_def_cfa_offset 32
 3656 15e0 00AF     		add	r7, sp, #0
 3657              	.LCFI108:
 3658              		.cfi_def_cfa_register 7
 3659 15e2 7860     		str	r0, [r7, #4]
2322:../FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2323:../FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2324:../FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2325:../FreeRTOS/Source/tasks.c **** 
2326:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3660              		.loc 1 2326 0
 3661 15e4 7B68     		ldr	r3, [r7, #4]
 3662 15e6 002B     		cmp	r3, #0
 3663 15e8 05D1     		bne	.L158
 3664              		.loc 1 2326 0 is_stmt 0 discriminator 1
 3665 15ea 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3666 15ee C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3667 15f2 1B68     		ldr	r3, [r3, #0]
 3668 15f4 00E0     		b	.L159
 3669              	.L158:
 3670              		.loc 1 2326 0 discriminator 2
 3671 15f6 7B68     		ldr	r3, [r7, #4]
 3672              	.L159:
 3673              		.loc 1 2326 0 discriminator 3
 3674 15f8 7B61     		str	r3, [r7, #20]
2327:../FreeRTOS/Source/tasks.c **** 
2328:../FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2329:../FreeRTOS/Source/tasks.c **** 		{
2330:../FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 3675              		.loc 1 2330 0 is_stmt 1 discriminator 3
 3676 15fa 7B69     		ldr	r3, [r7, #20]
 3677 15fc 1B6B     		ldr	r3, [r3, #48]
 3678 15fe 3B61     		str	r3, [r7, #16]
2331:../FreeRTOS/Source/tasks.c **** 		}
2332:../FreeRTOS/Source/tasks.c **** 		#else
2333:../FreeRTOS/Source/tasks.c **** 		{
2334:../FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2335:../FreeRTOS/Source/tasks.c **** 		}
2336:../FreeRTOS/Source/tasks.c **** 		#endif
2337:../FreeRTOS/Source/tasks.c **** 
2338:../FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 3679              		.loc 1 2338 0 discriminator 3
 3680 1600 3869     		ldr	r0, [r7, #16]
 3681 1602 FFF7CFFF 		bl	usTaskCheckFreeStackSpace
 3682 1606 0346     		mov	r3, r0
 3683 1608 FB60     		str	r3, [r7, #12]
2339:../FreeRTOS/Source/tasks.c **** 
2340:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
 3684              		.loc 1 2340 0 discriminator 3
 3685 160a FB68     		ldr	r3, [r7, #12]
2341:../FreeRTOS/Source/tasks.c **** 	}
 3686              		.loc 1 2341 0 discriminator 3
 3687 160c 1846     		mov	r0, r3
 3688 160e 07F11807 		add	r7, r7, #24
 3689 1612 BD46     		mov	sp, r7
 3690 1614 80BD     		pop	{r7, pc}
 3691              		.cfi_endproc
 3692              	.LFE147:
 3694 1616 00BF     		.align	2
 3695              		.thumb
 3696              		.thumb_func
 3698              	prvDeleteTCB:
 3699              	.LFB148:
2342:../FreeRTOS/Source/tasks.c **** 
2343:../FreeRTOS/Source/tasks.c **** #endif
2344:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2345:../FreeRTOS/Source/tasks.c **** 
2346:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2347:../FreeRTOS/Source/tasks.c **** 
2348:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2349:../FreeRTOS/Source/tasks.c **** 	{
 3700              		.loc 1 2349 0
 3701              		.cfi_startproc
 3702              		@ args = 0, pretend = 0, frame = 8
 3703              		@ frame_needed = 1, uses_anonymous_args = 0
 3704 1618 80B5     		push	{r7, lr}
 3705              	.LCFI109:
 3706              		.cfi_def_cfa_offset 8
 3707              		.cfi_offset 14, -4
 3708              		.cfi_offset 7, -8
 3709 161a 82B0     		sub	sp, sp, #8
 3710              	.LCFI110:
 3711              		.cfi_def_cfa_offset 16
 3712 161c 00AF     		add	r7, sp, #0
 3713              	.LCFI111:
 3714              		.cfi_def_cfa_register 7
 3715 161e 7860     		str	r0, [r7, #4]
2350:../FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2351:../FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2352:../FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 3716              		.loc 1 2352 0
 3717 1620 7B68     		ldr	r3, [r7, #4]
 3718 1622 1B6B     		ldr	r3, [r3, #48]
 3719 1624 1846     		mov	r0, r3
 3720 1626 FFF7FEFF 		bl	free
2353:../FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 3721              		.loc 1 2353 0
 3722 162a 7868     		ldr	r0, [r7, #4]
 3723 162c FFF7FEFF 		bl	free
2354:../FreeRTOS/Source/tasks.c **** 	}
 3724              		.loc 1 2354 0
 3725 1630 07F10807 		add	r7, r7, #8
 3726 1634 BD46     		mov	sp, r7
 3727 1636 80BD     		pop	{r7, pc}
 3728              		.cfi_endproc
 3729              	.LFE148:
 3731              		.align	2
 3732              		.global	xTaskGetCurrentTaskHandle
 3733              		.thumb
 3734              		.thumb_func
 3736              	xTaskGetCurrentTaskHandle:
 3737              	.LFB149:
2355:../FreeRTOS/Source/tasks.c **** 
2356:../FreeRTOS/Source/tasks.c **** #endif
2357:../FreeRTOS/Source/tasks.c **** 
2358:../FreeRTOS/Source/tasks.c **** 
2359:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2360:../FreeRTOS/Source/tasks.c **** 
2361:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2362:../FreeRTOS/Source/tasks.c **** 
2363:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2364:../FreeRTOS/Source/tasks.c **** 	{
 3738              		.loc 1 2364 0
 3739              		.cfi_startproc
 3740              		@ args = 0, pretend = 0, frame = 8
 3741              		@ frame_needed = 1, uses_anonymous_args = 0
 3742              		@ link register save eliminated.
 3743 1638 80B4     		push	{r7}
 3744              	.LCFI112:
 3745              		.cfi_def_cfa_offset 4
 3746              		.cfi_offset 7, -4
 3747 163a 83B0     		sub	sp, sp, #12
 3748              	.LCFI113:
 3749              		.cfi_def_cfa_offset 16
 3750 163c 00AF     		add	r7, sp, #0
 3751              	.LCFI114:
 3752              		.cfi_def_cfa_register 7
2365:../FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2366:../FreeRTOS/Source/tasks.c **** 
2367:../FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2368:../FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2369:../FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2370:../FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3753              		.loc 1 2370 0
 3754 163e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3755 1642 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3756 1646 1B68     		ldr	r3, [r3, #0]
 3757 1648 7B60     		str	r3, [r7, #4]
2371:../FreeRTOS/Source/tasks.c **** 
2372:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 3758              		.loc 1 2372 0
 3759 164a 7B68     		ldr	r3, [r7, #4]
2373:../FreeRTOS/Source/tasks.c **** 	}
 3760              		.loc 1 2373 0
 3761 164c 1846     		mov	r0, r3
 3762 164e 07F10C07 		add	r7, r7, #12
 3763 1652 BD46     		mov	sp, r7
 3764 1654 80BC     		pop	{r7}
 3765 1656 7047     		bx	lr
 3766              		.cfi_endproc
 3767              	.LFE149:
 3769              		.align	2
 3770              		.global	vTaskPriorityInherit
 3771              		.thumb
 3772              		.thumb_func
 3774              	vTaskPriorityInherit:
 3775              	.LFB150:
2374:../FreeRTOS/Source/tasks.c **** 
2375:../FreeRTOS/Source/tasks.c **** #endif
2376:../FreeRTOS/Source/tasks.c **** 
2377:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2378:../FreeRTOS/Source/tasks.c **** 
2379:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2380:../FreeRTOS/Source/tasks.c **** 
2381:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2382:../FreeRTOS/Source/tasks.c **** 	{
2383:../FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2384:../FreeRTOS/Source/tasks.c **** 
2385:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2386:../FreeRTOS/Source/tasks.c **** 		{
2387:../FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2388:../FreeRTOS/Source/tasks.c **** 		}
2389:../FreeRTOS/Source/tasks.c **** 		else
2390:../FreeRTOS/Source/tasks.c **** 		{
2391:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2392:../FreeRTOS/Source/tasks.c **** 			{
2393:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2394:../FreeRTOS/Source/tasks.c **** 			}
2395:../FreeRTOS/Source/tasks.c **** 			else
2396:../FreeRTOS/Source/tasks.c **** 			{
2397:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2398:../FreeRTOS/Source/tasks.c **** 			}
2399:../FreeRTOS/Source/tasks.c **** 		}
2400:../FreeRTOS/Source/tasks.c **** 
2401:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2402:../FreeRTOS/Source/tasks.c **** 	}
2403:../FreeRTOS/Source/tasks.c **** 
2404:../FreeRTOS/Source/tasks.c **** #endif
2405:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2406:../FreeRTOS/Source/tasks.c **** 
2407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2408:../FreeRTOS/Source/tasks.c **** 
2409:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2410:../FreeRTOS/Source/tasks.c **** 	{
 3776              		.loc 1 2410 0
 3777              		.cfi_startproc
 3778              		@ args = 0, pretend = 0, frame = 16
 3779              		@ frame_needed = 1, uses_anonymous_args = 0
 3780 1658 80B5     		push	{r7, lr}
 3781              	.LCFI115:
 3782              		.cfi_def_cfa_offset 8
 3783              		.cfi_offset 14, -4
 3784              		.cfi_offset 7, -8
 3785 165a 84B0     		sub	sp, sp, #16
 3786              	.LCFI116:
 3787              		.cfi_def_cfa_offset 24
 3788 165c 00AF     		add	r7, sp, #0
 3789              	.LCFI117:
 3790              		.cfi_def_cfa_register 7
 3791 165e 7860     		str	r0, [r7, #4]
2411:../FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3792              		.loc 1 2411 0
 3793 1660 7B68     		ldr	r3, [r7, #4]
 3794 1662 FB60     		str	r3, [r7, #12]
2412:../FreeRTOS/Source/tasks.c **** 
2413:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxMutexHolder );
2414:../FreeRTOS/Source/tasks.c **** 
2415:../FreeRTOS/Source/tasks.c **** 		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3795              		.loc 1 2415 0
 3796 1664 FB68     		ldr	r3, [r7, #12]
 3797 1666 DA6A     		ldr	r2, [r3, #44]
 3798 1668 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3799 166c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3800 1670 1B68     		ldr	r3, [r3, #0]
 3801 1672 DB6A     		ldr	r3, [r3, #44]
 3802 1674 9A42     		cmp	r2, r3
 3803 1676 57D2     		bcs	.L162
2416:../FreeRTOS/Source/tasks.c **** 		{
2417:../FreeRTOS/Source/tasks.c **** 			/* Adjust the mutex holder state to account for its new priority. */
2418:../FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxC
 3804              		.loc 1 2418 0
 3805 1678 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3806 167c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3807 1680 1B68     		ldr	r3, [r3, #0]
 3808 1682 DB6A     		ldr	r3, [r3, #44]
 3809 1684 C3F10A02 		rsb	r2, r3, #10
 3810 1688 FB68     		ldr	r3, [r7, #12]
 3811 168a 9A61     		str	r2, [r3, #24]
2419:../FreeRTOS/Source/tasks.c **** 
2420:../FreeRTOS/Source/tasks.c **** 			/* If the task being modified is in the ready state it will need to
2421:../FreeRTOS/Source/tasks.c **** 			be moved in to a new list. */
2422:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericList
 3812              		.loc 1 2422 0
 3813 168c FB68     		ldr	r3, [r7, #12]
 3814 168e 5969     		ldr	r1, [r3, #20]
 3815 1690 FB68     		ldr	r3, [r7, #12]
 3816 1692 DA6A     		ldr	r2, [r3, #44]
 3817 1694 1346     		mov	r3, r2
 3818 1696 4FEA8303 		lsl	r3, r3, #2
 3819 169a 9B18     		adds	r3, r3, r2
 3820 169c 4FEA8303 		lsl	r3, r3, #2
 3821 16a0 1A46     		mov	r2, r3
 3822 16a2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3823 16a6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3824 16aa D318     		adds	r3, r2, r3
 3825 16ac 9942     		cmp	r1, r3
 3826 16ae 33D1     		bne	.L164
2423:../FreeRTOS/Source/tasks.c **** 			{
2424:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3827              		.loc 1 2424 0
 3828 16b0 FB68     		ldr	r3, [r7, #12]
 3829 16b2 03F10403 		add	r3, r3, #4
 3830 16b6 1846     		mov	r0, r3
 3831 16b8 FFF7FEFF 		bl	vListRemove
2425:../FreeRTOS/Source/tasks.c **** 
2426:../FreeRTOS/Source/tasks.c **** 				/* Inherit the priority before being moved into the new list. */
2427:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3832              		.loc 1 2427 0
 3833 16bc 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3834 16c0 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3835 16c4 1B68     		ldr	r3, [r3, #0]
 3836 16c6 DA6A     		ldr	r2, [r3, #44]
 3837 16c8 FB68     		ldr	r3, [r7, #12]
 3838 16ca DA62     		str	r2, [r3, #44]
2428:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3839              		.loc 1 2428 0
 3840 16cc FB68     		ldr	r3, [r7, #12]
 3841 16ce DA6A     		ldr	r2, [r3, #44]
 3842 16d0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3843 16d4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3844 16d8 1B68     		ldr	r3, [r3, #0]
 3845 16da 9A42     		cmp	r2, r3
 3846 16dc 06D9     		bls	.L165
 3847              		.loc 1 2428 0 is_stmt 0 discriminator 1
 3848 16de FB68     		ldr	r3, [r7, #12]
 3849 16e0 DA6A     		ldr	r2, [r3, #44]
 3850 16e2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3851 16e6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3852 16ea 1A60     		str	r2, [r3, #0]
 3853              	.L165:
 3854              		.loc 1 2428 0 discriminator 2
 3855 16ec FB68     		ldr	r3, [r7, #12]
 3856 16ee DA6A     		ldr	r2, [r3, #44]
 3857 16f0 1346     		mov	r3, r2
 3858 16f2 4FEA8303 		lsl	r3, r3, #2
 3859 16f6 9B18     		adds	r3, r3, r2
 3860 16f8 4FEA8303 		lsl	r3, r3, #2
 3861 16fc 1A46     		mov	r2, r3
 3862 16fe 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3863 1702 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3864 1706 D218     		adds	r2, r2, r3
 3865 1708 FB68     		ldr	r3, [r7, #12]
 3866 170a 03F10403 		add	r3, r3, #4
 3867 170e 1046     		mov	r0, r2
 3868 1710 1946     		mov	r1, r3
 3869 1712 FFF7FEFF 		bl	vListInsertEnd
 3870 1716 07E0     		b	.L162
 3871              	.L164:
2429:../FreeRTOS/Source/tasks.c **** 			}
2430:../FreeRTOS/Source/tasks.c **** 			else
2431:../FreeRTOS/Source/tasks.c **** 			{
2432:../FreeRTOS/Source/tasks.c **** 				/* Just inherit the priority. */
2433:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3872              		.loc 1 2433 0 is_stmt 1
 3873 1718 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3874 171c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3875 1720 1B68     		ldr	r3, [r3, #0]
 3876 1722 DA6A     		ldr	r2, [r3, #44]
 3877 1724 FB68     		ldr	r3, [r7, #12]
 3878 1726 DA62     		str	r2, [r3, #44]
 3879              	.L162:
2434:../FreeRTOS/Source/tasks.c **** 			}
2435:../FreeRTOS/Source/tasks.c **** 		}
2436:../FreeRTOS/Source/tasks.c **** 	}
 3880              		.loc 1 2436 0
 3881 1728 07F11007 		add	r7, r7, #16
 3882 172c BD46     		mov	sp, r7
 3883 172e 80BD     		pop	{r7, pc}
 3884              		.cfi_endproc
 3885              	.LFE150:
 3887              		.align	2
 3888              		.global	vTaskPriorityDisinherit
 3889              		.thumb
 3890              		.thumb_func
 3892              	vTaskPriorityDisinherit:
 3893              	.LFB151:
2437:../FreeRTOS/Source/tasks.c **** 
2438:../FreeRTOS/Source/tasks.c **** #endif
2439:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2440:../FreeRTOS/Source/tasks.c **** 
2441:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2442:../FreeRTOS/Source/tasks.c **** 
2443:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2444:../FreeRTOS/Source/tasks.c **** 	{
 3894              		.loc 1 2444 0
 3895              		.cfi_startproc
 3896              		@ args = 0, pretend = 0, frame = 16
 3897              		@ frame_needed = 1, uses_anonymous_args = 0
 3898 1730 80B5     		push	{r7, lr}
 3899              	.LCFI118:
 3900              		.cfi_def_cfa_offset 8
 3901              		.cfi_offset 14, -4
 3902              		.cfi_offset 7, -8
 3903 1732 84B0     		sub	sp, sp, #16
 3904              	.LCFI119:
 3905              		.cfi_def_cfa_offset 24
 3906 1734 00AF     		add	r7, sp, #0
 3907              	.LCFI120:
 3908              		.cfi_def_cfa_register 7
 3909 1736 7860     		str	r0, [r7, #4]
2445:../FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3910              		.loc 1 2445 0
 3911 1738 7B68     		ldr	r3, [r7, #4]
 3912 173a FB60     		str	r3, [r7, #12]
2446:../FreeRTOS/Source/tasks.c **** 
2447:../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3913              		.loc 1 2447 0
 3914 173c 7B68     		ldr	r3, [r7, #4]
 3915 173e 002B     		cmp	r3, #0
 3916 1740 3AD0     		beq	.L166
2448:../FreeRTOS/Source/tasks.c **** 		{
2449:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3917              		.loc 1 2449 0
 3918 1742 FB68     		ldr	r3, [r7, #12]
 3919 1744 DA6A     		ldr	r2, [r3, #44]
 3920 1746 FB68     		ldr	r3, [r7, #12]
 3921 1748 5B6C     		ldr	r3, [r3, #68]
 3922 174a 9A42     		cmp	r2, r3
 3923 174c 34D0     		beq	.L166
2450:../FreeRTOS/Source/tasks.c **** 			{
2451:../FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2452:../FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2453:../FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3924              		.loc 1 2453 0
 3925 174e FB68     		ldr	r3, [r7, #12]
 3926 1750 03F10403 		add	r3, r3, #4
 3927 1754 1846     		mov	r0, r3
 3928 1756 FFF7FEFF 		bl	vListRemove
2454:../FreeRTOS/Source/tasks.c **** 
2455:../FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding ourselves into the new
2456:../FreeRTOS/Source/tasks.c **** 				ready list. */
2457:../FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 3929              		.loc 1 2457 0
 3930 175a FB68     		ldr	r3, [r7, #12]
 3931 175c 5A6C     		ldr	r2, [r3, #68]
 3932 175e FB68     		ldr	r3, [r7, #12]
 3933 1760 DA62     		str	r2, [r3, #44]
2458:../FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3934              		.loc 1 2458 0
 3935 1762 FB68     		ldr	r3, [r7, #12]
 3936 1764 DB6A     		ldr	r3, [r3, #44]
 3937 1766 C3F10A02 		rsb	r2, r3, #10
 3938 176a FB68     		ldr	r3, [r7, #12]
 3939 176c 9A61     		str	r2, [r3, #24]
2459:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3940              		.loc 1 2459 0
 3941 176e FB68     		ldr	r3, [r7, #12]
 3942 1770 DA6A     		ldr	r2, [r3, #44]
 3943 1772 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3944 1776 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3945 177a 1B68     		ldr	r3, [r3, #0]
 3946 177c 9A42     		cmp	r2, r3
 3947 177e 06D9     		bls	.L168
 3948              		.loc 1 2459 0 is_stmt 0 discriminator 1
 3949 1780 FB68     		ldr	r3, [r7, #12]
 3950 1782 DA6A     		ldr	r2, [r3, #44]
 3951 1784 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3952 1788 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3953 178c 1A60     		str	r2, [r3, #0]
 3954              	.L168:
 3955              		.loc 1 2459 0 discriminator 2
 3956 178e FB68     		ldr	r3, [r7, #12]
 3957 1790 DA6A     		ldr	r2, [r3, #44]
 3958 1792 1346     		mov	r3, r2
 3959 1794 4FEA8303 		lsl	r3, r3, #2
 3960 1798 9B18     		adds	r3, r3, r2
 3961 179a 4FEA8303 		lsl	r3, r3, #2
 3962 179e 1A46     		mov	r2, r3
 3963 17a0 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3964 17a4 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3965 17a8 D218     		adds	r2, r2, r3
 3966 17aa FB68     		ldr	r3, [r7, #12]
 3967 17ac 03F10403 		add	r3, r3, #4
 3968 17b0 1046     		mov	r0, r2
 3969 17b2 1946     		mov	r1, r3
 3970 17b4 FFF7FEFF 		bl	vListInsertEnd
 3971              	.L166:
2460:../FreeRTOS/Source/tasks.c **** 			}
2461:../FreeRTOS/Source/tasks.c **** 		}
2462:../FreeRTOS/Source/tasks.c **** 	}
 3972              		.loc 1 2462 0 is_stmt 1
 3973 17b8 07F11007 		add	r7, r7, #16
 3974 17bc BD46     		mov	sp, r7
 3975 17be 80BD     		pop	{r7, pc}
 3976              		.cfi_endproc
 3977              	.LFE151:
 3979              	.Letext0:
 3980              		.file 2 "d:\\elektronik\\ides\\eclipse\\yagarto\\bin\\../lib/gcc/arm-none-eabi/4.6.2/include/stdde
 3981              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 3982              		.file 4 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 3983              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 3984              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 3985              		.file 7 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 3986              		.file 8 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 3987              		.file 9 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
  C:\Temp\ccqYo85V.s:23     .bss.pxCurrentTCB:00000000 pxCurrentTCB
  C:\Temp\ccqYo85V.s:20     .bss.pxCurrentTCB:00000000 $d
  C:\Temp\ccqYo85V.s:26     .bss.pxReadyTasksLists:00000000 $d
  C:\Temp\ccqYo85V.s:29     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
  C:\Temp\ccqYo85V.s:32     .bss.xDelayedTaskList1:00000000 $d
  C:\Temp\ccqYo85V.s:35     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
  C:\Temp\ccqYo85V.s:38     .bss.xDelayedTaskList2:00000000 $d
  C:\Temp\ccqYo85V.s:41     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
  C:\Temp\ccqYo85V.s:44     .bss.pxDelayedTaskList:00000000 $d
  C:\Temp\ccqYo85V.s:47     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
  C:\Temp\ccqYo85V.s:50     .bss.pxOverflowDelayedTaskList:00000000 $d
  C:\Temp\ccqYo85V.s:53     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
  C:\Temp\ccqYo85V.s:56     .bss.xPendingReadyList:00000000 $d
  C:\Temp\ccqYo85V.s:59     .bss.xPendingReadyList:00000000 xPendingReadyList
  C:\Temp\ccqYo85V.s:62     .bss.xTasksWaitingTermination:00000000 $d
  C:\Temp\ccqYo85V.s:65     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
  C:\Temp\ccqYo85V.s:68     .bss.uxTasksDeleted:00000000 $d
  C:\Temp\ccqYo85V.s:71     .bss.uxTasksDeleted:00000000 uxTasksDeleted
  C:\Temp\ccqYo85V.s:74     .bss.xSuspendedTaskList:00000000 $d
  C:\Temp\ccqYo85V.s:77     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
  C:\Temp\ccqYo85V.s:80     .bss.xIdleTaskHandle:00000000 $d
  C:\Temp\ccqYo85V.s:83     .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
  C:\Temp\ccqYo85V.s:86     .bss.uxCurrentNumberOfTasks:00000000 $d
  C:\Temp\ccqYo85V.s:89     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
  C:\Temp\ccqYo85V.s:92     .bss.xTickCount:00000000 $d
  C:\Temp\ccqYo85V.s:95     .bss.xTickCount:00000000 xTickCount
  C:\Temp\ccqYo85V.s:98     .bss.uxTopUsedPriority:00000000 $d
  C:\Temp\ccqYo85V.s:101    .bss.uxTopUsedPriority:00000000 uxTopUsedPriority
  C:\Temp\ccqYo85V.s:104    .bss.uxTopReadyPriority:00000000 $d
  C:\Temp\ccqYo85V.s:107    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
  C:\Temp\ccqYo85V.s:110    .bss.xSchedulerRunning:00000000 $d
  C:\Temp\ccqYo85V.s:113    .bss.xSchedulerRunning:00000000 xSchedulerRunning
  C:\Temp\ccqYo85V.s:116    .bss.uxSchedulerSuspended:00000000 $d
  C:\Temp\ccqYo85V.s:119    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
  C:\Temp\ccqYo85V.s:122    .bss.uxMissedTicks:00000000 $d
  C:\Temp\ccqYo85V.s:125    .bss.uxMissedTicks:00000000 uxMissedTicks
  C:\Temp\ccqYo85V.s:128    .bss.xMissedYield:00000000 $d
  C:\Temp\ccqYo85V.s:131    .bss.xMissedYield:00000000 xMissedYield
  C:\Temp\ccqYo85V.s:134    .bss.xNumOfOverflows:00000000 $d
  C:\Temp\ccqYo85V.s:137    .bss.xNumOfOverflows:00000000 xNumOfOverflows
  C:\Temp\ccqYo85V.s:140    .bss.uxTaskNumber:00000000 $d
  C:\Temp\ccqYo85V.s:143    .bss.uxTaskNumber:00000000 uxTaskNumber
  C:\Temp\ccqYo85V.s:146    .data.xNextTaskUnblockTime:00000000 $d
  C:\Temp\ccqYo85V.s:149    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
  C:\Temp\ccqYo85V.s:152    .bss.pcStatsString:00000000 $d
  C:\Temp\ccqYo85V.s:155    .bss.pcStatsString:00000000 pcStatsString
  C:\Temp\ccqYo85V.s:158    .bss.ulTaskSwitchedInTime:00000000 $d
  C:\Temp\ccqYo85V.s:161    .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
  C:\Temp\ccqYo85V.s:164    .text:00000000 $t
  C:\Temp\ccqYo85V.s:169    .text:00000000 xTaskGenericCreate
  C:\Temp\ccqYo85V.s:3285   .text:000013b4 prvAllocateTCBAndStack
  C:\Temp\ccqYo85V.s:2940   .text:00001164 prvInitialiseTCBVariables
  C:\Temp\ccqYo85V.s:3030   .text:000011ec prvInitialiseTaskLists
  C:\Temp\ccqYo85V.s:394    .text:000001ac vTaskDelete
  C:\Temp\ccqYo85V.s:506    .text:0000026c vTaskDelayUntil
  C:\Temp\ccqYo85V.s:1437   .text:000007f8 vTaskSuspendAll
  C:\Temp\ccqYo85V.s:3206   .text:00001328 prvAddCurrentTaskToDelayedList
  C:\Temp\ccqYo85V.s:1471   .text:0000081c xTaskResumeAll
  C:\Temp\ccqYo85V.s:622    .text:00000320 vTaskDelay
  C:\Temp\ccqYo85V.s:690    .text:0000037c uxTaskPriorityGet
  C:\Temp\ccqYo85V.s:746    .text:000003b4 vTaskPrioritySet
  C:\Temp\ccqYo85V.s:928    .text:000004e0 vTaskSuspend
  C:\Temp\ccqYo85V.s:2372   .text:00000dd8 vTaskSwitchContext
  C:\Temp\ccqYo85V.s:1045   .text:000005a0 xTaskIsTaskSuspended
  C:\Temp\ccqYo85V.s:1108   .text:000005f0 vTaskResume
  C:\Temp\ccqYo85V.s:1211   .text:0000069c xTaskResumeFromISR
  C:\Temp\ccqYo85V.s:1316   .rodata:00000000 $d
  C:\Temp\ccqYo85V.s:1317   .rodata:00000000 .LC0
  C:\Temp\ccqYo85V.s:1325   .text:0000075c vTaskStartScheduler
  C:\Temp\ccqYo85V.s:2898   .text:00001140 prvIdleTask
  C:\Temp\ccqYo85V.s:1399   .text:000007d8 vTaskEndScheduler
  C:\Temp\ccqYo85V.s:1985   .text:00000b60 vTaskIncrementTick
  C:\Temp\ccqYo85V.s:1650   .text:00000970 xTaskGetTickCount
  C:\Temp\ccqYo85V.s:1691   .text:00000998 xTaskGetTickCountFromISR
  C:\Temp\ccqYo85V.s:1745   .text:000009d0 uxTaskGetNumberOfTasks
  C:\Temp\ccqYo85V.s:1773   .rodata:00000008 .LC1
  C:\Temp\ccqYo85V.s:1781   .text:000009e8 vTaskGetRunTimeStats
  C:\Temp\ccqYo85V.s:3380   .text:00001428 prvGenerateRunTimeStatsForTasksInList
  C:\Temp\ccqYo85V.s:1954   .text:00000b48 xTaskGetIdleTaskHandle
  C:\Temp\ccqYo85V.s:2195   .text:00000d18 vTaskSetApplicationTaskTag
  C:\Temp\ccqYo85V.s:2249   .text:00000d50 xTaskGetApplicationTaskTag
  C:\Temp\ccqYo85V.s:2305   .text:00000d8c xTaskCallApplicationTaskHook
  C:\Temp\ccqYo85V.s:2536   .text:00000f18 vTaskPlaceOnEventList
  C:\Temp\ccqYo85V.s:2608   .text:00000f90 xTaskRemoveFromEventList
  C:\Temp\ccqYo85V.s:2721   .text:00001054 vTaskSetTimeOutState
  C:\Temp\ccqYo85V.s:2764   .text:00001084 xTaskCheckForTimeOut
  C:\Temp\ccqYo85V.s:2868   .text:00001128 vTaskMissedYield
  C:\Temp\ccqYo85V.s:3116   .text:00001290 prvCheckTasksWaitingTermination
  C:\Temp\ccqYo85V.s:3698   .text:00001618 prvDeleteTCB
  C:\Temp\ccqYo85V.s:3367   .rodata:0000000c .LC2
  C:\Temp\ccqYo85V.s:3370   .rodata:00000034 .LC3
  C:\Temp\ccqYo85V.s:3373   .rodata:00000054 .LC4
  C:\Temp\ccqYo85V.s:3586   .text:000015a4 usTaskCheckFreeStackSpace
  C:\Temp\ccqYo85V.s:3642   .text:000015dc uxTaskGetStackHighWaterMark
  C:\Temp\ccqYo85V.s:3736   .text:00001638 xTaskGetCurrentTaskHandle
  C:\Temp\ccqYo85V.s:3774   .text:00001658 vTaskPriorityInherit
  C:\Temp\ccqYo85V.s:3892   .text:00001730 vTaskPriorityDisinherit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
init_us_timer
xPortStartScheduler
vPortEndScheduler
get_us_time
strlen
memcpy
vApplicationStackOverflowHook
vListInsert
strncpy
vListInitialiseItem
vListInitialise
malloc
free
memset
sprintf
strcat
