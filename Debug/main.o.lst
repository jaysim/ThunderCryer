   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN9CFreeRTOS14StartSchedulerEv,"axG",%progbits,_ZN9CFreeRTOS14StartSchedulerEv,com
  19              		.align	2
  20              		.weak	_ZN9CFreeRTOS14StartSchedulerEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZN9CFreeRTOS14StartSchedulerEv:
  25              	.LFB110:
  26              		.file 1 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS_EC\\Source/CFreeRTOS.h"
   1:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
   2:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @file CFreeRTOS.h
   3:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @class CFreeRTOS
   4:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   5:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This class provide an interface for the <a href="http://www.freertos.org/a00020.html">Kernek Con
   6:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * Moreover provide a method used by the FreeRTOS Extension Layer to initialize the hardware resour
   7:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * All methods are static and inline.
   8:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   9:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @date Jul 14, 2010
  10:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @author Stefano Oliveri (STF12.net)
  11:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *         E-Mail: software@stf12.net
  12:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  13:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  14:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  15:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_CPP_EXT FreeRTOS Class Extension
  16:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This set of C++ class aim to provide an Object Oriented framework to program a FreeRTOS applicat
  17:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  18:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  19:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  20:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  21:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_Wrapper FreeRTOS Wrapper Class
  22:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @ingroup FreeRTOS_CPP_EXT
  23:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * The FreeRTOS Wrapper Layer provides a set of class that are able to attach to and manage a FreeR
  24:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * native handle.
  25:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  26:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  27:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  28:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #ifndef CFREERTOS_H_
  29:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #define CFREERTOS_H_
  30:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  31:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "FreeRTOS.h"
  32:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "task.h"
  33:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  34:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** class CFreeRTOS {
  35:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** public:
  36:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  37:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Default constructor. Not used.
  38:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  39:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	CFreeRTOS();
  40:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  41:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  42:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Destructor. Not used.
  43:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  44:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	~CFreeRTOS();
  45:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  46:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  47:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function
  48:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  49:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	static void StartScheduler() { vTaskStartScheduler(); }
  27              		.loc 1 49 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  39              		.loc 1 49 0
  40 0004 FFF7FEFF 		bl	vTaskStartScheduler
  41 0008 80BD     		pop	{r7, pc}
  42              		.cfi_endproc
  43              	.LFE110:
  45              		.global	g_LedTast
  46 000a 00BF     		.bss
  47              		.align	2
  50              	g_LedTast:
  51 0000 00000000 		.space	20
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	g_Display
  53              		.align	2
  56              	g_Display:
  57 0014 00000000 		.space	8
  57      00000000 
  58              		.global	g_Menue
  59              		.align	2
  62              	g_Menue:
  63 001c 00000000 		.space	16
  63      00000000 
  63      00000000 
  63      00000000 
  64              		.section	.rodata
  65              		.align	2
  66              	.LC0:
  67 0000 4C656420 		.ascii	"Led Heartbeat\000"
  67      48656172 
  67      74626561 
  67      7400
  68 000e 0000     		.align	2
  69              	.LC1:
  70 0010 4D656E75 		.ascii	"Menue\000"
  70      6500
  71              		.text
  72              		.align	2
  73              		.global	main
  74              		.thumb
  75              		.thumb_func
  77              	main:
  78              	.LFB140:
  79              		.file 2 "../main.cpp"
   1:../main.cpp   **** /**
   2:../main.cpp   ****   ******************************************************************************
   3:../main.cpp   ****   * @file      	main.cpp
   4:../main.cpp   ****   * @author    	Tecnologic86
   5:../main.cpp   ****   * @version   	V0.0.0
   6:../main.cpp   ****   * @date      	14.02.12
   7:../main.cpp   ****   * @brief		main program file for Project: ThunderCryer
   8:../main.cpp   ****   ******************************************************************************
   9:../main.cpp   ****   */
  10:../main.cpp   **** 
  11:../main.cpp   **** /* Includes ------------------------------------------------------------------*/
  12:../main.cpp   **** #include "CFreeRTOS.h"
  13:../main.cpp   **** #include "CTask.h"
  14:../main.cpp   **** #include "ustime.h"
  15:../main.cpp   **** #include "CLedHeartBeatSTM32F4Disc.h"
  16:../main.cpp   **** #include "CMenue.h"
  17:../main.cpp   **** #include "CT6963GPIOInterface.h"
  18:../main.cpp   **** #include "stm32f4xx_conf.h"
  19:../main.cpp   **** #include "stm32f4xx.h"
  20:../main.cpp   **** 
  21:../main.cpp   **** /* Private typedef -----------------------------------------------------------*/
  22:../main.cpp   **** /* Private define ------------------------------------------------------------*/
  23:../main.cpp   **** /* Private macro -------------------------------------------------------------*/
  24:../main.cpp   **** /* Private variables ---------------------------------------------------------*/
  25:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
  26:../main.cpp   **** CT6963_GPIO_Interface g_Display;
  27:../main.cpp   **** CMenue	g_Menue(&g_Display);
  28:../main.cpp   **** /* Private function prototypes -----------------------------------------------*/
  29:../main.cpp   **** extern "C" {
  30:../main.cpp   **** 	void vApplicationTickHook( void );
  31:../main.cpp   **** 	void vApplicationIdleHook( void );
  32:../main.cpp   **** 	void vApplicationMallocFailedHook( void );
  33:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
  34:../main.cpp   **** } // extern "C"
  35:../main.cpp   **** /* Private functions ---------------------------------------------------------*/
  36:../main.cpp   **** 
  37:../main.cpp   **** 
  38:../main.cpp   **** 
  39:../main.cpp   **** /**
  40:../main.cpp   ****   * @brief  main function
  41:../main.cpp   ****   * @param  None
  42:../main.cpp   ****   * @retval None
  43:../main.cpp   ****   */
  44:../main.cpp   **** int main(void){
  80              		.loc 2 44 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 14, -4
  88              		.cfi_offset 7, -8
  89 0002 00AF     		add	r7, sp, #0
  90              	.LCFI3:
  91              		.cfi_def_cfa_register 7
  45:../main.cpp   **** 
  46:../main.cpp   **** 	/**
  47:../main.cpp   **** 	 * create Led Heartbeat task with minimal stack size and priority
  48:../main.cpp   **** 	 * 1 higher than idle task
  49:../main.cpp   **** 	 */
  50:../main.cpp   **** 	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+2);
  92              		.loc 2 50 0
  93 0004 40F20000 		movw	r0, #:lower16:g_LedTast
  94 0008 C0F20000 		movt	r0, #:upper16:g_LedTast
  95 000c 40F20001 		movw	r1, #:lower16:.LC0
  96 0010 C0F20001 		movt	r1, #:upper16:.LC0
  97 0014 4FF48072 		mov	r2, #256
  98 0018 4FF00203 		mov	r3, #2
  99 001c FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  51:../main.cpp   **** 	g_Menue.Create("Menue",configMINIMAL_STACK_SIZE * 2,tskIDLE_PRIORITY+1);
 100              		.loc 2 51 0
 101 0020 40F20000 		movw	r0, #:lower16:g_Menue
 102 0024 C0F20000 		movt	r0, #:upper16:g_Menue
 103 0028 40F20001 		movw	r1, #:lower16:.LC1
 104 002c C0F20001 		movt	r1, #:upper16:.LC1
 105 0030 4FF40072 		mov	r2, #512
 106 0034 4FF00103 		mov	r3, #1
 107 0038 FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  52:../main.cpp   **** 	/**
  53:../main.cpp   **** 	 * Initialise the hardware for all Tasks and
  54:../main.cpp   **** 	 * then FreeRTOS takes control of execution
  55:../main.cpp   **** 	 */
  56:../main.cpp   **** 	CFreeRTOS::InitHardwareForManagedTasks();
 108              		.loc 2 56 0
 109 003c FFF7FEFF 		bl	_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
  57:../main.cpp   **** 	CFreeRTOS::StartScheduler();
 110              		.loc 2 57 0
 111 0040 FFF7FEFF 		bl	_ZN9CFreeRTOS14StartSchedulerEv
 112 0044 4FF00003 		mov	r3, #0
  58:../main.cpp   **** 
  59:../main.cpp   **** }
 113              		.loc 2 59 0
 114 0048 1846     		mov	r0, r3
 115 004a 80BD     		pop	{r7, pc}
 116              		.cfi_endproc
 117              	.LFE140:
 119              		.align	2
 120              		.global	vApplicationTickHook
 121              		.thumb
 122              		.thumb_func
 124              	vApplicationTickHook:
 125              	.LFB141:
  60:../main.cpp   **** 
  61:../main.cpp   **** extern "C" {
  62:../main.cpp   **** 
  63:../main.cpp   **** 	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
  64:../main.cpp   **** 	// ----------------------------------------------------------------------------
  65:../main.cpp   **** 	void vApplicationTickHook( void ) {
 126              		.loc 2 65 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 004c 80B4     		push	{r7}
 132              	.LCFI4:
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 004e 00AF     		add	r7, sp, #0
 136              	.LCFI5:
 137              		.cfi_def_cfa_register 7
  66:../main.cpp   **** 
  67:../main.cpp   **** 	}
 138              		.loc 2 67 0
 139 0050 BD46     		mov	sp, r7
 140 0052 80BC     		pop	{r7}
 141 0054 7047     		bx	lr
 142              		.cfi_endproc
 143              	.LFE141:
 145 0056 00BF     		.align	2
 146              		.global	vApplicationIdleHook
 147              		.thumb
 148              		.thumb_func
 150              	vApplicationIdleHook:
 151              	.LFB142:
  68:../main.cpp   **** 
  69:../main.cpp   **** 	// This FreeRTOS call-back function gets when no other task is ready to execute.
  70:../main.cpp   **** 	// On a completely unloaded system this is getting called at over 2.5MHz!
  71:../main.cpp   **** 	// ----------------------------------------------------------------------------
  72:../main.cpp   **** 	void vApplicationIdleHook( void ) {
 152              		.loc 2 72 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157 0058 80B4     		push	{r7}
 158              	.LCFI6:
 159              		.cfi_def_cfa_offset 4
 160              		.cfi_offset 7, -4
 161 005a 00AF     		add	r7, sp, #0
 162              	.LCFI7:
 163              		.cfi_def_cfa_register 7
  73:../main.cpp   **** 
  74:../main.cpp   **** 	}
 164              		.loc 2 74 0
 165 005c BD46     		mov	sp, r7
 166 005e 80BC     		pop	{r7}
 167 0060 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE142:
 171 0062 00BF     		.align	2
 172              		.global	vApplicationMallocFailedHook
 173              		.thumb
 174              		.thumb_func
 176              	vApplicationMallocFailedHook:
 177              	.LFB143:
  75:../main.cpp   **** 
  76:../main.cpp   **** 	// A required FreeRTOS function.
  77:../main.cpp   **** 	// ----------------------------------------------------------------------------
  78:../main.cpp   **** 	void vApplicationMallocFailedHook( void ) {
 178              		.loc 2 78 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183 0064 80B4     		push	{r7}
 184              	.LCFI8:
 185              		.cfi_def_cfa_offset 4
 186              		.cfi_offset 7, -4
 187 0066 00AF     		add	r7, sp, #0
 188              	.LCFI9:
 189              		.cfi_def_cfa_register 7
  79:../main.cpp   **** 		configASSERT( 0 );  // Latch on any failure / error.
  80:../main.cpp   **** 	}
 190              		.loc 2 80 0
 191 0068 BD46     		mov	sp, r7
 192 006a 80BC     		pop	{r7}
 193 006c 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE143:
 197 006e 00BF     		.align	2
 198              		.global	vApplicationStackOverflowHook
 199              		.thumb
 200              		.thumb_func
 202              	vApplicationStackOverflowHook:
 203              	.LFB144:
  81:../main.cpp   **** 
  82:../main.cpp   **** 	// A required FreeRTOS function. gets called on stack overflow
  83:../main.cpp   **** 	// ----------------------------------------------------------------------------
  84:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 204              		.loc 2 84 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 8
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209 0070 80B4     		push	{r7}
 210              	.LCFI10:
 211              		.cfi_def_cfa_offset 4
 212              		.cfi_offset 7, -4
 213 0072 83B0     		sub	sp, sp, #12
 214              	.LCFI11:
 215              		.cfi_def_cfa_offset 16
 216 0074 00AF     		add	r7, sp, #0
 217              	.LCFI12:
 218              		.cfi_def_cfa_register 7
 219 0076 7860     		str	r0, [r7, #4]
 220 0078 3960     		str	r1, [r7, #0]
 221              	.L7:
  85:../main.cpp   **** 		/* TODO, implement your code here */
  86:../main.cpp   **** 		while(1);
 222              		.loc 2 86 0 discriminator 1
 223 007a FEE7     		b	.L7
 224              		.cfi_endproc
 225              	.LFE144:
 227              		.align	2
 228              		.global	EVAL_AUDIO_TransferComplete_CallBack
 229              		.thumb
 230              		.thumb_func
 232              	EVAL_AUDIO_TransferComplete_CallBack:
 233              	.LFB145:
  87:../main.cpp   **** 	}
  88:../main.cpp   **** 
  89:../main.cpp   **** 	/*
  90:../main.cpp   **** 	  * Callback used by stm32f4_discovery_audio_codec.c.
  91:../main.cpp   **** 	  * Refer to stm32f4_discovery_audio_codec.h for more info.
  92:../main.cpp   **** 	  */
  93:../main.cpp   **** 	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 234              		.loc 2 93 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 8
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239 007c 80B4     		push	{r7}
 240              	.LCFI13:
 241              		.cfi_def_cfa_offset 4
 242              		.cfi_offset 7, -4
 243 007e 83B0     		sub	sp, sp, #12
 244              	.LCFI14:
 245              		.cfi_def_cfa_offset 16
 246 0080 00AF     		add	r7, sp, #0
 247              	.LCFI15:
 248              		.cfi_def_cfa_register 7
 249 0082 7860     		str	r0, [r7, #4]
 250 0084 3960     		str	r1, [r7, #0]
  94:../main.cpp   **** 	   /* TODO, implement your code here */
  95:../main.cpp   **** 	   return;
  96:../main.cpp   **** 	}
 251              		.loc 2 96 0
 252 0086 07F10C07 		add	r7, r7, #12
 253 008a BD46     		mov	sp, r7
 254 008c 80BC     		pop	{r7}
 255 008e 7047     		bx	lr
 256              		.cfi_endproc
 257              	.LFE145:
 259              		.align	2
 260              		.global	EVAL_AUDIO_GetSampleCallBack
 261              		.thumb
 262              		.thumb_func
 264              	EVAL_AUDIO_GetSampleCallBack:
 265              	.LFB146:
  97:../main.cpp   **** 
  98:../main.cpp   **** 	/*
  99:../main.cpp   **** 	  * Callback used by stm324xg_eval_audio_codec.c.
 100:../main.cpp   **** 	  * Refer to stm324xg_eval_audio_codec.h for more info.
 101:../main.cpp   **** 	  */
 102:../main.cpp   **** 	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 266              		.loc 2 102 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0090 80B4     		push	{r7}
 272              	.LCFI16:
 273              		.cfi_def_cfa_offset 4
 274              		.cfi_offset 7, -4
 275 0092 00AF     		add	r7, sp, #0
 276              	.LCFI17:
 277              		.cfi_def_cfa_register 7
 103:../main.cpp   **** 	   /* TODO, implement your code here */
 104:../main.cpp   **** 	   return -1;
 278              		.loc 2 104 0
 279 0094 4FF6FF73 		movw	r3, #65535
 105:../main.cpp   **** 	}
 280              		.loc 2 105 0
 281 0098 1846     		mov	r0, r3
 282 009a BD46     		mov	sp, r7
 283 009c 80BC     		pop	{r7}
 284 009e 7047     		bx	lr
 285              		.cfi_endproc
 286              	.LFE146:
 288              		.align	2
 289              		.thumb
 290              		.thumb_func
 292              	_Z41__static_initialization_and_destruction_0ii:
 293              	.LFB147:
 106:../main.cpp   **** } // extern "C"
 294              		.loc 2 106 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 00a0 80B5     		push	{r7, lr}
 299              	.LCFI18:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 14, -4
 302              		.cfi_offset 7, -8
 303 00a2 82B0     		sub	sp, sp, #8
 304              	.LCFI19:
 305              		.cfi_def_cfa_offset 16
 306 00a4 00AF     		add	r7, sp, #0
 307              	.LCFI20:
 308              		.cfi_def_cfa_register 7
 309 00a6 7860     		str	r0, [r7, #4]
 310 00a8 3960     		str	r1, [r7, #0]
 311              		.loc 2 106 0
 312 00aa 7B68     		ldr	r3, [r7, #4]
 313 00ac 012B     		cmp	r3, #1
 314 00ae 49D1     		bne	.L10
 315              		.loc 2 106 0 is_stmt 0 discriminator 1
 316 00b0 3A68     		ldr	r2, [r7, #0]
 317 00b2 4FF6FF73 		movw	r3, #65535
 318 00b6 9A42     		cmp	r2, r3
 319 00b8 44D1     		bne	.L10
  25:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 320              		.loc 2 25 0 is_stmt 1
 321 00ba 40F20000 		movw	r0, #:lower16:g_LedTast
 322 00be C0F20000 		movt	r0, #:upper16:g_LedTast
 323 00c2 4FF03201 		mov	r1, #50
 324 00c6 FFF7FEFF 		bl	_ZN24CLedHeartBeatSTM32F4DiscC1Em
 325 00ca 40F20003 		movw	r3, #:lower16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 326 00ce C0F20003 		movt	r3, #:upper16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 327 00d2 40F20000 		movw	r0, #:lower16:g_LedTast
 328 00d6 C0F20000 		movt	r0, #:upper16:g_LedTast
 329 00da 1946     		mov	r1, r3
 330 00dc 40F20002 		movw	r2, #:lower16:__dso_handle
 331 00e0 C0F20002 		movt	r2, #:upper16:__dso_handle
 332 00e4 FFF7FEFF 		bl	__aeabi_atexit
  26:../main.cpp   **** CT6963_GPIO_Interface g_Display;
 333              		.loc 2 26 0
 334 00e8 40F20000 		movw	r0, #:lower16:g_Display
 335 00ec C0F20000 		movt	r0, #:upper16:g_Display
 336 00f0 FFF7FEFF 		bl	_ZN21CT6963_GPIO_InterfaceC1Ev
 337 00f4 40F20003 		movw	r3, #:lower16:_ZN21CT6963_GPIO_InterfaceD1Ev
 338 00f8 C0F20003 		movt	r3, #:upper16:_ZN21CT6963_GPIO_InterfaceD1Ev
 339 00fc 40F20000 		movw	r0, #:lower16:g_Display
 340 0100 C0F20000 		movt	r0, #:upper16:g_Display
 341 0104 1946     		mov	r1, r3
 342 0106 40F20002 		movw	r2, #:lower16:__dso_handle
 343 010a C0F20002 		movt	r2, #:upper16:__dso_handle
 344 010e FFF7FEFF 		bl	__aeabi_atexit
  27:../main.cpp   **** CMenue	g_Menue(&g_Display);
 345              		.loc 2 27 0
 346 0112 40F20000 		movw	r0, #:lower16:g_Menue
 347 0116 C0F20000 		movt	r0, #:upper16:g_Menue
 348 011a 40F20001 		movw	r1, #:lower16:g_Display
 349 011e C0F20001 		movt	r1, #:upper16:g_Display
 350 0122 FFF7FEFF 		bl	_ZN6CMenueC1EP11CGraphicLCD
 351 0126 40F20003 		movw	r3, #:lower16:_ZN6CMenueD1Ev
 352 012a C0F20003 		movt	r3, #:upper16:_ZN6CMenueD1Ev
 353 012e 40F20000 		movw	r0, #:lower16:g_Menue
 354 0132 C0F20000 		movt	r0, #:upper16:g_Menue
 355 0136 1946     		mov	r1, r3
 356 0138 40F20002 		movw	r2, #:lower16:__dso_handle
 357 013c C0F20002 		movt	r2, #:upper16:__dso_handle
 358 0140 FFF7FEFF 		bl	__aeabi_atexit
 359              	.L10:
 360              		.loc 2 106 0
 361 0144 07F10807 		add	r7, r7, #8
 362 0148 BD46     		mov	sp, r7
 363 014a 80BD     		pop	{r7, pc}
 364              		.cfi_endproc
 365              	.LFE147:
 367              		.section	.rodata
 368 0016 0000     		.align	2
 371              	_ZL12c_FontNative:
 372 0018 00000000 		.space	24
 372      00000000 
 372      00000000 
 372      00000000 
 372      00000000 
 373              		.text
 374              		.align	2
 375              		.thumb
 376              		.thumb_func
 378              	_GLOBAL__sub_I_g_LedTast:
 379              	.LFB148:
 380              		.loc 2 106 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384 014c 80B5     		push	{r7, lr}
 385              	.LCFI21:
 386              		.cfi_def_cfa_offset 8
 387              		.cfi_offset 14, -4
 388              		.cfi_offset 7, -8
 389 014e 00AF     		add	r7, sp, #0
 390              	.LCFI22:
 391              		.cfi_def_cfa_register 7
 392              		.loc 2 106 0
 393 0150 4FF00100 		mov	r0, #1
 394 0154 4FF6FF71 		movw	r1, #65535
 395 0158 FFF7A2FF 		bl	_Z41__static_initialization_and_destruction_0ii
 396 015c 80BD     		pop	{r7, pc}
 397              		.cfi_endproc
 398              	.LFE148:
 400              		.section	.init_array,"aw",%init_array
 401              		.align	2
 402 0000 00000000 		.word	_GLOBAL__sub_I_g_LedTast(target1)
 403              		.text
 404              	.Letext0:
 405              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 406              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source
 407              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 408              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\GraphicLCD/CGraphicLCD.h"
 409              		.file 7 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
 410              		.file 8 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\GraphicLCD/CT6963CDriver.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:19     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:24     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 _ZN9CFreeRTOS14StartSchedulerEv
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:50     .bss:00000000 g_LedTast
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:47     .bss:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:56     .bss:00000014 g_Display
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:62     .bss:0000001c g_Menue
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:65     .rodata:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:66     .rodata:00000000 .LC0
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:69     .rodata:00000010 .LC1
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:72     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:77     .text:00000000 main
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:124    .text:0000004c vApplicationTickHook
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:150    .text:00000058 vApplicationIdleHook
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:176    .text:00000064 vApplicationMallocFailedHook
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:202    .text:00000070 vApplicationStackOverflowHook
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:232    .text:0000007c EVAL_AUDIO_TransferComplete_CallBack
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:264    .text:00000090 EVAL_AUDIO_GetSampleCallBack
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:292    .text:000000a0 _Z41__static_initialization_and_destruction_0ii
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:371    .rodata:00000018 _ZL12c_FontNative
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:378    .text:0000014c _GLOBAL__sub_I_g_LedTast
C:\Users\Alex\AppData\Local\Temp\ccVD1Vxb.s:401    .init_array:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskStartScheduler
_ZN12AManagedTask6CreateEPKctm
_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
_ZN24CLedHeartBeatSTM32F4DiscC1Em
_ZN24CLedHeartBeatSTM32F4DiscD1Ev
__dso_handle
__aeabi_atexit
_ZN21CT6963_GPIO_InterfaceC1Ev
_ZN21CT6963_GPIO_InterfaceD1Ev
_ZN6CMenueC1EP11CGraphicLCD
_ZN6CMenueD1Ev
