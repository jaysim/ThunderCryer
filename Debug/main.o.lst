   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._Z8vLedTaskPv,"ax",%progbits
  19              		.align	1
  20              		.global	_Z8vLedTaskPv
  21              		.thumb
  22              		.thumb_func
  24              	_Z8vLedTaskPv:
  25              	.LFB115:
  26              		.file 1 "../main.cpp"
   1:../main.cpp   **** /**
   2:../main.cpp   ****   ******************************************************************************
   3:../main.cpp   ****   * @file      	main.cpp
   4:../main.cpp   ****   * @author    	Tecnologic86
   5:../main.cpp   ****   * @version   	V0.0.0
   6:../main.cpp   ****   * @date      	14.02.12
   7:../main.cpp   ****   * @brief		main program file for Project: ThunderCryer
   8:../main.cpp   ****   ******************************************************************************
   9:../main.cpp   ****   */
  10:../main.cpp   **** 
  11:../main.cpp   **** #include "FreeRTOS.h"
  12:../main.cpp   **** #include "task.h"
  13:../main.cpp   **** #include "stm32f4xx.h"
  14:../main.cpp   **** #include "stm32f4xx_it.h"
  15:../main.cpp   **** #include "stm32f4xx_conf.h"
  16:../main.cpp   **** #include "stm32f4_discovery.h"
  17:../main.cpp   **** 
  18:../main.cpp   **** /* Private typedef -----------------------------------------------------------*/
  19:../main.cpp   **** typedef enum {
  20:../main.cpp   **** 	LED_Up,
  21:../main.cpp   **** 	LED_Right,
  22:../main.cpp   **** 	LED_Down,
  23:../main.cpp   **** 	LED_Left
  24:../main.cpp   **** }eLedState;
  25:../main.cpp   **** /* Private define ------------------------------------------------------------*/
  26:../main.cpp   **** /* Private macro -------------------------------------------------------------*/
  27:../main.cpp   **** /* Private variables ---------------------------------------------------------*/
  28:../main.cpp   **** /* Private function prototypes -----------------------------------------------*/
  29:../main.cpp   **** void vHardwareInit(void);
  30:../main.cpp   **** void vLedTask(void* pvParameter);
  31:../main.cpp   **** /* Private functions ---------------------------------------------------------*/
  32:../main.cpp   **** 
  33:../main.cpp   **** 
  34:../main.cpp   **** 
  35:../main.cpp   **** /**
  36:../main.cpp   ****   * @brief  main function
  37:../main.cpp   ****   * @param  None
  38:../main.cpp   ****   * @retval None
  39:../main.cpp   ****   */
  40:../main.cpp   **** int main(void){
  41:../main.cpp   **** 	vHardwareInit();
  42:../main.cpp   **** 
  43:../main.cpp   **** 	xTaskCreate( vLedTask, (const signed char*)"LED Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
  44:../main.cpp   **** 
  45:../main.cpp   **** 	asm volatile ("nop");
  46:../main.cpp   **** 
  47:../main.cpp   **** 	/**
  48:../main.cpp   **** 	 * now FreeRTOS takes control of execution
  49:../main.cpp   **** 	 */
  50:../main.cpp   **** 	vTaskStartScheduler();
  51:../main.cpp   **** 
  52:../main.cpp   **** }
  53:../main.cpp   **** 
  54:../main.cpp   **** // This FreeRTOS callback function gets called once per tick (default = 1000Hz).
  55:../main.cpp   **** // ----------------------------------------------------------------------------
  56:../main.cpp   **** void vApplicationTickHook( void ) {
  57:../main.cpp   **** 
  58:../main.cpp   **** }
  59:../main.cpp   **** 
  60:../main.cpp   **** // This FreeRTOS call-back function gets when no other task is ready to execute.
  61:../main.cpp   **** // On a completely unloaded system this is getting called at over 2.5MHz!
  62:../main.cpp   **** // ----------------------------------------------------------------------------
  63:../main.cpp   **** void vApplicationIdleHook( void ) {
  64:../main.cpp   **** 
  65:../main.cpp   **** }
  66:../main.cpp   **** 
  67:../main.cpp   **** // A required FreeRTOS function.
  68:../main.cpp   **** // ----------------------------------------------------------------------------
  69:../main.cpp   **** void vApplicationMallocFailedHook( void ) {
  70:../main.cpp   ****     configASSERT( 0 );  // Latch on any failure / error.
  71:../main.cpp   **** }
  72:../main.cpp   **** 
  73:../main.cpp   **** /**
  74:../main.cpp   ****   * @brief  hardware initialisation
  75:../main.cpp   ****   * @param  None
  76:../main.cpp   ****   * @retval None
  77:../main.cpp   ****   */
  78:../main.cpp   **** void vHardwareInit(void){
  79:../main.cpp   **** 
  80:../main.cpp   **** }
  81:../main.cpp   **** 
  82:../main.cpp   **** /**
  83:../main.cpp   ****   * @brief  led blinking task
  84:../main.cpp   ****   * @param  task parameter
  85:../main.cpp   ****   * @retval None
  86:../main.cpp   ****   */
  87:../main.cpp   **** void vLedTask(void* pvParameter){
  27              		.loc 1 87 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 4, -8
  37              	.LBB4:
  88:../main.cpp   **** 	eLedState ledState = LED_Up;
  89:../main.cpp   **** 
  90:../main.cpp   **** 	// GPIO init
  91:../main.cpp   **** 	STM_EVAL_LEDInit(LED3);
  38              		.loc 1 91 0
  39 0002 0120     		movs	r0, #1
  40              	.LVL1:
  41 0004 FFF7FEFF 		bl	STM_EVAL_LEDInit
  92:../main.cpp   **** 	STM_EVAL_LEDInit(LED4);
  42              		.loc 1 92 0
  43 0008 0020     		movs	r0, #0
  44 000a FFF7FEFF 		bl	STM_EVAL_LEDInit
  93:../main.cpp   **** 	STM_EVAL_LEDInit(LED5);
  45              		.loc 1 93 0
  46 000e 0220     		movs	r0, #2
  47 0010 FFF7FEFF 		bl	STM_EVAL_LEDInit
  94:../main.cpp   **** 	STM_EVAL_LEDInit(LED6);
  48              		.loc 1 94 0
  49 0014 0320     		movs	r0, #3
  50 0016 FFF7FEFF 		bl	STM_EVAL_LEDInit
  88:../main.cpp   **** 	eLedState ledState = LED_Up;
  51              		.loc 1 88 0
  52 001a 0024     		movs	r4, #0
  53              	.LVL2:
  54              	.L8:
  95:../main.cpp   **** 
  96:../main.cpp   **** 
  97:../main.cpp   **** 	while(1){
  98:../main.cpp   **** 		switch(ledState){
  55              		.loc 1 98 0
  56 001c 032C     		cmp	r4, #3
  57 001e 39D8     		bhi	.L9
  58 0020 DFE804F0 		tbb	[pc, r4]
  59              	.L7:
  60 0024 02       		.byte	(.L3-.L7)/2
  61 0025 10       		.byte	(.L4-.L7)/2
  62 0026 1E       		.byte	(.L5-.L7)/2
  63 0027 2C       		.byte	(.L6-.L7)/2
  64              		.align	1
  65              	.L3:
  99:../main.cpp   **** 		case LED_Up:
 100:../main.cpp   **** 			STM_EVAL_LEDOn(LED3);
  66              		.loc 1 100 0
  67 0028 0120     		movs	r0, #1
  68 002a FFF7FEFF 		bl	STM_EVAL_LEDOn
 101:../main.cpp   **** 			STM_EVAL_LEDOff(LED5);
  69              		.loc 1 101 0
  70 002e 0220     		movs	r0, #2
  71 0030 FFF7FEFF 		bl	STM_EVAL_LEDOff
 102:../main.cpp   **** 			STM_EVAL_LEDOff(LED6);
  72              		.loc 1 102 0
  73 0034 0320     		movs	r0, #3
  74 0036 FFF7FEFF 		bl	STM_EVAL_LEDOff
 103:../main.cpp   **** 			STM_EVAL_LEDOff(LED4);
  75              		.loc 1 103 0
  76 003a 0020     		movs	r0, #0
  77 003c FFF7FEFF 		bl	STM_EVAL_LEDOff
  78              	.LVL3:
 104:../main.cpp   **** 			ledState = LED_Right;
  79              		.loc 1 104 0
  80 0040 0124     		movs	r4, #1
 105:../main.cpp   **** 			break;
  81              		.loc 1 105 0
  82 0042 28E0     		b	.L2
  83              	.LVL4:
  84              	.L4:
 106:../main.cpp   **** 		case LED_Right:
 107:../main.cpp   **** 			STM_EVAL_LEDOff(LED3);
  85              		.loc 1 107 0
  86 0044 0120     		movs	r0, #1
  87 0046 FFF7FEFF 		bl	STM_EVAL_LEDOff
 108:../main.cpp   **** 			STM_EVAL_LEDOn(LED5);
  88              		.loc 1 108 0
  89 004a 0220     		movs	r0, #2
  90 004c FFF7FEFF 		bl	STM_EVAL_LEDOn
 109:../main.cpp   **** 			STM_EVAL_LEDOff(LED6);
  91              		.loc 1 109 0
  92 0050 0320     		movs	r0, #3
  93 0052 FFF7FEFF 		bl	STM_EVAL_LEDOff
 110:../main.cpp   **** 			STM_EVAL_LEDOff(LED4);
  94              		.loc 1 110 0
  95 0056 0020     		movs	r0, #0
  96 0058 FFF7FEFF 		bl	STM_EVAL_LEDOff
  97              	.LVL5:
 111:../main.cpp   **** 			ledState = LED_Down;
  98              		.loc 1 111 0
  99 005c 0224     		movs	r4, #2
 112:../main.cpp   **** 			break;
 100              		.loc 1 112 0
 101 005e 1AE0     		b	.L2
 102              	.LVL6:
 103              	.L5:
 113:../main.cpp   **** 		case LED_Down:
 114:../main.cpp   **** 			STM_EVAL_LEDOff(LED3);
 104              		.loc 1 114 0
 105 0060 0120     		movs	r0, #1
 106 0062 FFF7FEFF 		bl	STM_EVAL_LEDOff
 115:../main.cpp   **** 			STM_EVAL_LEDOff(LED5);
 107              		.loc 1 115 0
 108 0066 0220     		movs	r0, #2
 109 0068 FFF7FEFF 		bl	STM_EVAL_LEDOff
 116:../main.cpp   **** 			STM_EVAL_LEDOn(LED6);
 110              		.loc 1 116 0
 111 006c 0320     		movs	r0, #3
 112 006e FFF7FEFF 		bl	STM_EVAL_LEDOn
 117:../main.cpp   **** 			STM_EVAL_LEDOff(LED4);
 113              		.loc 1 117 0
 114 0072 0020     		movs	r0, #0
 115 0074 FFF7FEFF 		bl	STM_EVAL_LEDOff
 116              	.LVL7:
 118:../main.cpp   **** 			ledState = LED_Left;
 117              		.loc 1 118 0
 118 0078 0324     		movs	r4, #3
 119:../main.cpp   **** 			break;
 119              		.loc 1 119 0
 120 007a 0CE0     		b	.L2
 121              	.LVL8:
 122              	.L6:
 120:../main.cpp   **** 		case LED_Left:
 121:../main.cpp   **** 			STM_EVAL_LEDOff(LED3);
 123              		.loc 1 121 0
 124 007c 0120     		movs	r0, #1
 125 007e FFF7FEFF 		bl	STM_EVAL_LEDOff
 122:../main.cpp   **** 			STM_EVAL_LEDOff(LED5);
 126              		.loc 1 122 0
 127 0082 0220     		movs	r0, #2
 128 0084 FFF7FEFF 		bl	STM_EVAL_LEDOff
 123:../main.cpp   **** 			STM_EVAL_LEDOff(LED6);
 129              		.loc 1 123 0
 130 0088 0320     		movs	r0, #3
 131 008a FFF7FEFF 		bl	STM_EVAL_LEDOff
 124:../main.cpp   **** 			STM_EVAL_LEDOn(LED4);
 132              		.loc 1 124 0
 133 008e 0020     		movs	r0, #0
 134 0090 FFF7FEFF 		bl	STM_EVAL_LEDOn
 135              	.LVL9:
 136              	.L9:
 125:../main.cpp   **** 			ledState = LED_Up;
 126:../main.cpp   **** 			break;
 127:../main.cpp   **** 		default:
 128:../main.cpp   **** 			ledState = LED_Up;
 137              		.loc 1 128 0
 138 0094 0024     		movs	r4, #0
 139              	.L2:
 140              	.LVL10:
 129:../main.cpp   **** 			break;
 130:../main.cpp   **** 		}
 131:../main.cpp   **** 		vTaskDelay(500); // 500ms delay
 141              		.loc 1 131 0
 142 0096 4FF4FA70 		mov	r0, #500
 143 009a FFF7FEFF 		bl	vTaskDelay
  97:../main.cpp   **** 	while(1){
 144              		.loc 1 97 0
 145 009e BDE7     		b	.L8
 146              	.LBE4:
 147              		.cfi_endproc
 148              	.LFE115:
 150              		.section	.text.startup.main,"ax",%progbits
 151              		.align	1
 152              		.global	main
 153              		.thumb
 154              		.thumb_func
 156              	main:
 157              	.LFB110:
  40:../main.cpp   **** int main(void){
 158              		.loc 1 40 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 163              	.LCFI1:
 164              		.cfi_def_cfa_offset 24
 165              		.cfi_offset 14, -4
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 3, -12
 168              		.cfi_offset 2, -16
 169              		.cfi_offset 1, -20
 170              		.cfi_offset 0, -24
  43:../main.cpp   **** 	xTaskCreate( vLedTask, (const signed char*)"LED Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 171              		.loc 1 43 0
 172 0002 0024     		movs	r4, #0
 173 0004 0123     		movs	r3, #1
 174 0006 8DE81800 		stmia	sp, {r3, r4}
 175 000a 0749     		ldr	r1, .L11
 176 000c 0748     		ldr	r0, .L11+4
 177 000e 0294     		str	r4, [sp, #8]
 178 0010 4FF48072 		mov	r2, #256
 179 0014 2346     		mov	r3, r4
 180 0016 0394     		str	r4, [sp, #12]
 181 0018 FFF7FEFF 		bl	xTaskGenericCreate
  45:../main.cpp   **** 	asm volatile ("nop");
 182              		.loc 1 45 0
 183              	@ 45 "../main.cpp" 1
 184 001c 00BF     		nop
 185              	@ 0 "" 2
  50:../main.cpp   **** 	vTaskStartScheduler();
 186              		.loc 1 50 0
 187              		.thumb
 188 001e FFF7FEFF 		bl	vTaskStartScheduler
  52:../main.cpp   **** }
 189              		.loc 1 52 0
 190 0022 2046     		mov	r0, r4
 191 0024 04B0     		add	sp, sp, #16
 192 0026 10BD     		pop	{r4, pc}
 193              	.L12:
 194              		.align	2
 195              	.L11:
 196 0028 00000000 		.word	.LC0
 197 002c 00000000 		.word	_Z8vLedTaskPv
 198              		.cfi_endproc
 199              	.LFE110:
 201              		.section	.text._Z20vApplicationTickHookv,"ax",%progbits
 202              		.align	1
 203              		.global	_Z20vApplicationTickHookv
 204              		.thumb
 205              		.thumb_func
 207              	_Z20vApplicationTickHookv:
 208              	.LFB111:
  56:../main.cpp   **** void vApplicationTickHook( void ) {
 209              		.loc 1 56 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
  58:../main.cpp   **** }
 214              		.loc 1 58 0
 215 0000 7047     		bx	lr
 216              		.cfi_endproc
 217              	.LFE111:
 219              		.section	.text._Z20vApplicationIdleHookv,"ax",%progbits
 220              		.align	1
 221              		.global	_Z20vApplicationIdleHookv
 222              		.thumb
 223              		.thumb_func
 225              	_Z20vApplicationIdleHookv:
 226              	.LFB112:
  63:../main.cpp   **** void vApplicationIdleHook( void ) {
 227              		.loc 1 63 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
  65:../main.cpp   **** }
 232              		.loc 1 65 0
 233 0000 7047     		bx	lr
 234              		.cfi_endproc
 235              	.LFE112:
 237              		.section	.text._Z28vApplicationMallocFailedHookv,"ax",%progbits
 238              		.align	1
 239              		.global	_Z28vApplicationMallocFailedHookv
 240              		.thumb
 241              		.thumb_func
 243              	_Z28vApplicationMallocFailedHookv:
 244              	.LFB113:
  69:../main.cpp   **** void vApplicationMallocFailedHook( void ) {
 245              		.loc 1 69 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
  71:../main.cpp   **** }
 250              		.loc 1 71 0
 251 0000 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE113:
 255              		.section	.text._Z13vHardwareInitv,"ax",%progbits
 256              		.align	1
 257              		.global	_Z13vHardwareInitv
 258              		.thumb
 259              		.thumb_func
 261              	_Z13vHardwareInitv:
 262              	.LFB114:
  78:../main.cpp   **** void vHardwareInit(void){
 263              		.loc 1 78 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
  80:../main.cpp   **** }
 268              		.loc 1 80 0
 269 0000 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE114:
 273              		.section	.rodata.str1.1,"aMS",%progbits,1
 274              	.LC0:
 275 0000 4C454420 		.ascii	"LED Task\000"
 275      5461736B 
 275      00
 276              		.text
 277              	.Letext0:
 278              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 279              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4-Discovery/stm32f4_discovery.h"
 280              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
  C:\Temp\ccp7MXiD.s:19     .text._Z8vLedTaskPv:00000000 $t
  C:\Temp\ccp7MXiD.s:24     .text._Z8vLedTaskPv:00000000 _Z8vLedTaskPv
  C:\Temp\ccp7MXiD.s:60     .text._Z8vLedTaskPv:00000024 $d
  C:\Temp\ccp7MXiD.s:64     .text._Z8vLedTaskPv:00000028 $t
  C:\Temp\ccp7MXiD.s:151    .text.startup.main:00000000 $t
  C:\Temp\ccp7MXiD.s:156    .text.startup.main:00000000 main
  C:\Temp\ccp7MXiD.s:196    .text.startup.main:00000028 $d
  C:\Temp\ccp7MXiD.s:202    .text._Z20vApplicationTickHookv:00000000 $t
  C:\Temp\ccp7MXiD.s:207    .text._Z20vApplicationTickHookv:00000000 _Z20vApplicationTickHookv
  C:\Temp\ccp7MXiD.s:220    .text._Z20vApplicationIdleHookv:00000000 $t
  C:\Temp\ccp7MXiD.s:225    .text._Z20vApplicationIdleHookv:00000000 _Z20vApplicationIdleHookv
  C:\Temp\ccp7MXiD.s:238    .text._Z28vApplicationMallocFailedHookv:00000000 $t
  C:\Temp\ccp7MXiD.s:243    .text._Z28vApplicationMallocFailedHookv:00000000 _Z28vApplicationMallocFailedHookv
  C:\Temp\ccp7MXiD.s:256    .text._Z13vHardwareInitv:00000000 $t
  C:\Temp\ccp7MXiD.s:261    .text._Z13vHardwareInitv:00000000 _Z13vHardwareInitv
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
STM_EVAL_LEDInit
STM_EVAL_LEDOn
STM_EVAL_LEDOff
vTaskDelay
xTaskGenericCreate
vTaskStartScheduler
