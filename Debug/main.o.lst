   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN9CFreeRTOS14StartSchedulerEv,"axG",%progbits,_ZN9CFreeRTOS14StartSchedulerEv,com
  19              		.align	2
  20              		.weak	_ZN9CFreeRTOS14StartSchedulerEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZN9CFreeRTOS14StartSchedulerEv:
  25              	.LFB110:
  26              		.file 1 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS_EC\\Source/CFreeRTOS.h"
   1:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
   2:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @file CFreeRTOS.h
   3:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @class CFreeRTOS
   4:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   5:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This class provide an interface for the <a href="http://www.freertos.org/a00020.html">Kernek Con
   6:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * Moreover provide a method used by the FreeRTOS Extension Layer to initialize the hardware resour
   7:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * All methods are static and inline.
   8:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   9:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @date Jul 14, 2010
  10:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @author Stefano Oliveri (STF12.net)
  11:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *         E-Mail: software@stf12.net
  12:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  13:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  14:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  15:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_CPP_EXT FreeRTOS Class Extension
  16:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This set of C++ class aim to provide an Object Oriented framework to program a FreeRTOS applicat
  17:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  18:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  19:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  20:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  21:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_Wrapper FreeRTOS Wrapper Class
  22:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @ingroup FreeRTOS_CPP_EXT
  23:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * The FreeRTOS Wrapper Layer provides a set of class that are able to attach to and manage a FreeR
  24:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * native handle.
  25:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  26:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  27:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  28:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #ifndef CFREERTOS_H_
  29:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #define CFREERTOS_H_
  30:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  31:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "FreeRTOS.h"
  32:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "task.h"
  33:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  34:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** class CFreeRTOS {
  35:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** public:
  36:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  37:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Default constructor. Not used.
  38:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  39:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	CFreeRTOS();
  40:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  41:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  42:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Destructor. Not used.
  43:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  44:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	~CFreeRTOS();
  45:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  46:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  47:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function
  48:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  49:C:\Users\Alex\git\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	static void StartScheduler() { vTaskStartScheduler(); }
  27              		.loc 1 49 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  39              		.loc 1 49 0
  40 0004 FFF7FEFF 		bl	vTaskStartScheduler
  41 0008 80BD     		pop	{r7, pc}
  42              		.cfi_endproc
  43              	.LFE110:
  45              		.global	g_LedTast
  46 000a 00BF     		.bss
  47              		.align	2
  50              	g_LedTast:
  51 0000 00000000 		.space	20
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.section	.rodata
  53              		.align	2
  54              	.LC0:
  55 0000 4C656420 		.ascii	"Led Heartbeat\000"
  55      48656172 
  55      74626561 
  55      7400
  56              		.text
  57              		.align	2
  58              		.global	main
  59              		.thumb
  60              		.thumb_func
  62              	main:
  63              	.LFB140:
  64              		.file 2 "../main.cpp"
   1:../main.cpp   **** /**
   2:../main.cpp   ****   ******************************************************************************
   3:../main.cpp   ****   * @file      	main.cpp
   4:../main.cpp   ****   * @author    	Tecnologic86
   5:../main.cpp   ****   * @version   	V0.0.0
   6:../main.cpp   ****   * @date      	14.02.12
   7:../main.cpp   ****   * @brief		main program file for Project: ThunderCryer
   8:../main.cpp   ****   ******************************************************************************
   9:../main.cpp   ****   */
  10:../main.cpp   **** 
  11:../main.cpp   **** /* Includes ------------------------------------------------------------------*/
  12:../main.cpp   **** #include "CFreeRTOS.h"
  13:../main.cpp   **** #include "CTask.h"
  14:../main.cpp   **** #include "ustime.h"
  15:../main.cpp   **** #include "CLedHeartBeatSTM32F4Disc.h"
  16:../main.cpp   **** #include "CT6963GPIOInterface.h"
  17:../main.cpp   **** #include "stm32f4xx_conf.h"
  18:../main.cpp   **** #include "stm32f4xx.h"
  19:../main.cpp   **** 
  20:../main.cpp   **** /* Private typedef -----------------------------------------------------------*/
  21:../main.cpp   **** /* Private define ------------------------------------------------------------*/
  22:../main.cpp   **** /* Private macro -------------------------------------------------------------*/
  23:../main.cpp   **** /* Private variables ---------------------------------------------------------*/
  24:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
  25:../main.cpp   **** /* Private function prototypes -----------------------------------------------*/
  26:../main.cpp   **** extern "C" {
  27:../main.cpp   **** 	void vApplicationTickHook( void );
  28:../main.cpp   **** 	void vApplicationIdleHook( void );
  29:../main.cpp   **** 	void vApplicationMallocFailedHook( void );
  30:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
  31:../main.cpp   **** } // extern "C"
  32:../main.cpp   **** /* Private functions ---------------------------------------------------------*/
  33:../main.cpp   **** 
  34:../main.cpp   **** 
  35:../main.cpp   **** 
  36:../main.cpp   **** /**
  37:../main.cpp   ****   * @brief  main function
  38:../main.cpp   ****   * @param  None
  39:../main.cpp   ****   * @retval None
  40:../main.cpp   ****   */
  41:../main.cpp   **** int main(void){
  65              		.loc 2 41 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0000 80B5     		push	{r7, lr}
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 14, -4
  73              		.cfi_offset 7, -8
  74 0002 00AF     		add	r7, sp, #0
  75              	.LCFI3:
  76              		.cfi_def_cfa_register 7
  42:../main.cpp   **** 
  43:../main.cpp   **** 	/**
  44:../main.cpp   **** 	 * create Led Heartbeat task with minimal stack size and priority
  45:../main.cpp   **** 	 * 1 higher than idle task
  46:../main.cpp   **** 	 */
  47:../main.cpp   **** 	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+1);
  77              		.loc 2 47 0
  78 0004 40F20000 		movw	r0, #:lower16:g_LedTast
  79 0008 C0F20000 		movt	r0, #:upper16:g_LedTast
  80 000c 40F20001 		movw	r1, #:lower16:.LC0
  81 0010 C0F20001 		movt	r1, #:upper16:.LC0
  82 0014 4FF48072 		mov	r2, #256
  83 0018 4FF00103 		mov	r3, #1
  84 001c FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  48:../main.cpp   **** 
  49:../main.cpp   **** 	/**
  50:../main.cpp   **** 	 * Initialise the hardware for all Tasks and
  51:../main.cpp   **** 	 * then FreeRTOS takes control of execution
  52:../main.cpp   **** 	 */
  53:../main.cpp   **** 	CFreeRTOS::InitHardwareForManagedTasks();
  85              		.loc 2 53 0
  86 0020 FFF7FEFF 		bl	_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
  54:../main.cpp   **** 	CFreeRTOS::StartScheduler();
  87              		.loc 2 54 0
  88 0024 FFF7FEFF 		bl	_ZN9CFreeRTOS14StartSchedulerEv
  89 0028 4FF00003 		mov	r3, #0
  55:../main.cpp   **** 
  56:../main.cpp   **** }
  90              		.loc 2 56 0
  91 002c 1846     		mov	r0, r3
  92 002e 80BD     		pop	{r7, pc}
  93              		.cfi_endproc
  94              	.LFE140:
  96              		.align	2
  97              		.global	vApplicationTickHook
  98              		.thumb
  99              		.thumb_func
 101              	vApplicationTickHook:
 102              	.LFB141:
  57:../main.cpp   **** 
  58:../main.cpp   **** extern "C" {
  59:../main.cpp   **** 
  60:../main.cpp   **** 	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
  61:../main.cpp   **** 	// ----------------------------------------------------------------------------
  62:../main.cpp   **** 	void vApplicationTickHook( void ) {
 103              		.loc 2 62 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108 0030 80B4     		push	{r7}
 109              	.LCFI4:
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 7, -4
 112 0032 00AF     		add	r7, sp, #0
 113              	.LCFI5:
 114              		.cfi_def_cfa_register 7
  63:../main.cpp   **** 
  64:../main.cpp   **** 	}
 115              		.loc 2 64 0
 116 0034 BD46     		mov	sp, r7
 117 0036 80BC     		pop	{r7}
 118 0038 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE141:
 122 003a 00BF     		.align	2
 123              		.global	vApplicationIdleHook
 124              		.thumb
 125              		.thumb_func
 127              	vApplicationIdleHook:
 128              	.LFB142:
  65:../main.cpp   **** 
  66:../main.cpp   **** 	// This FreeRTOS call-back function gets when no other task is ready to execute.
  67:../main.cpp   **** 	// On a completely unloaded system this is getting called at over 2.5MHz!
  68:../main.cpp   **** 	// ----------------------------------------------------------------------------
  69:../main.cpp   **** 	void vApplicationIdleHook( void ) {
 129              		.loc 2 69 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 003c 80B4     		push	{r7}
 135              	.LCFI6:
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 7, -4
 138 003e 00AF     		add	r7, sp, #0
 139              	.LCFI7:
 140              		.cfi_def_cfa_register 7
  70:../main.cpp   **** 
  71:../main.cpp   **** 	}
 141              		.loc 2 71 0
 142 0040 BD46     		mov	sp, r7
 143 0042 80BC     		pop	{r7}
 144 0044 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE142:
 148 0046 00BF     		.align	2
 149              		.global	vApplicationMallocFailedHook
 150              		.thumb
 151              		.thumb_func
 153              	vApplicationMallocFailedHook:
 154              	.LFB143:
  72:../main.cpp   **** 
  73:../main.cpp   **** 	// A required FreeRTOS function.
  74:../main.cpp   **** 	// ----------------------------------------------------------------------------
  75:../main.cpp   **** 	void vApplicationMallocFailedHook( void ) {
 155              		.loc 2 75 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0048 80B4     		push	{r7}
 161              	.LCFI8:
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 004a 00AF     		add	r7, sp, #0
 165              	.LCFI9:
 166              		.cfi_def_cfa_register 7
  76:../main.cpp   **** 		configASSERT( 0 );  // Latch on any failure / error.
  77:../main.cpp   **** 	}
 167              		.loc 2 77 0
 168 004c BD46     		mov	sp, r7
 169 004e 80BC     		pop	{r7}
 170 0050 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE143:
 174 0052 00BF     		.align	2
 175              		.global	vApplicationStackOverflowHook
 176              		.thumb
 177              		.thumb_func
 179              	vApplicationStackOverflowHook:
 180              	.LFB144:
  78:../main.cpp   **** 
  79:../main.cpp   **** 	// A required FreeRTOS function. gets called on stack overflow
  80:../main.cpp   **** 	// ----------------------------------------------------------------------------
  81:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 181              		.loc 2 81 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 8
 184              		@ frame_needed = 1, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186 0054 80B4     		push	{r7}
 187              	.LCFI10:
 188              		.cfi_def_cfa_offset 4
 189              		.cfi_offset 7, -4
 190 0056 83B0     		sub	sp, sp, #12
 191              	.LCFI11:
 192              		.cfi_def_cfa_offset 16
 193 0058 00AF     		add	r7, sp, #0
 194              	.LCFI12:
 195              		.cfi_def_cfa_register 7
 196 005a 7860     		str	r0, [r7, #4]
 197 005c 3960     		str	r1, [r7, #0]
 198              	.L7:
  82:../main.cpp   **** 		/* TODO, implement your code here */
  83:../main.cpp   **** 		while(1);
 199              		.loc 2 83 0 discriminator 1
 200 005e FEE7     		b	.L7
 201              		.cfi_endproc
 202              	.LFE144:
 204              		.align	2
 205              		.global	EVAL_AUDIO_TransferComplete_CallBack
 206              		.thumb
 207              		.thumb_func
 209              	EVAL_AUDIO_TransferComplete_CallBack:
 210              	.LFB145:
  84:../main.cpp   **** 	}
  85:../main.cpp   **** 
  86:../main.cpp   **** 	/*
  87:../main.cpp   **** 	  * Callback used by stm32f4_discovery_audio_codec.c.
  88:../main.cpp   **** 	  * Refer to stm32f4_discovery_audio_codec.h for more info.
  89:../main.cpp   **** 	  */
  90:../main.cpp   **** 	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 211              		.loc 2 90 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 8
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216 0060 80B4     		push	{r7}
 217              	.LCFI13:
 218              		.cfi_def_cfa_offset 4
 219              		.cfi_offset 7, -4
 220 0062 83B0     		sub	sp, sp, #12
 221              	.LCFI14:
 222              		.cfi_def_cfa_offset 16
 223 0064 00AF     		add	r7, sp, #0
 224              	.LCFI15:
 225              		.cfi_def_cfa_register 7
 226 0066 7860     		str	r0, [r7, #4]
 227 0068 3960     		str	r1, [r7, #0]
  91:../main.cpp   **** 	   /* TODO, implement your code here */
  92:../main.cpp   **** 	   return;
  93:../main.cpp   **** 	}
 228              		.loc 2 93 0
 229 006a 07F10C07 		add	r7, r7, #12
 230 006e BD46     		mov	sp, r7
 231 0070 80BC     		pop	{r7}
 232 0072 7047     		bx	lr
 233              		.cfi_endproc
 234              	.LFE145:
 236              		.align	2
 237              		.global	EVAL_AUDIO_GetSampleCallBack
 238              		.thumb
 239              		.thumb_func
 241              	EVAL_AUDIO_GetSampleCallBack:
 242              	.LFB146:
  94:../main.cpp   **** 
  95:../main.cpp   **** 	/*
  96:../main.cpp   **** 	  * Callback used by stm324xg_eval_audio_codec.c.
  97:../main.cpp   **** 	  * Refer to stm324xg_eval_audio_codec.h for more info.
  98:../main.cpp   **** 	  */
  99:../main.cpp   **** 	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 243              		.loc 2 99 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 248 0074 80B4     		push	{r7}
 249              	.LCFI16:
 250              		.cfi_def_cfa_offset 4
 251              		.cfi_offset 7, -4
 252 0076 00AF     		add	r7, sp, #0
 253              	.LCFI17:
 254              		.cfi_def_cfa_register 7
 100:../main.cpp   **** 	   /* TODO, implement your code here */
 101:../main.cpp   **** 	   return -1;
 255              		.loc 2 101 0
 256 0078 4FF6FF73 		movw	r3, #65535
 102:../main.cpp   **** 	}
 257              		.loc 2 102 0
 258 007c 1846     		mov	r0, r3
 259 007e BD46     		mov	sp, r7
 260 0080 80BC     		pop	{r7}
 261 0082 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE146:
 265              		.align	2
 266              		.thumb
 267              		.thumb_func
 269              	_Z41__static_initialization_and_destruction_0ii:
 270              	.LFB147:
 103:../main.cpp   **** } // extern "C"
 271              		.loc 2 103 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 8
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0084 80B5     		push	{r7, lr}
 276              	.LCFI18:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 14, -4
 279              		.cfi_offset 7, -8
 280 0086 82B0     		sub	sp, sp, #8
 281              	.LCFI19:
 282              		.cfi_def_cfa_offset 16
 283 0088 00AF     		add	r7, sp, #0
 284              	.LCFI20:
 285              		.cfi_def_cfa_register 7
 286 008a 7860     		str	r0, [r7, #4]
 287 008c 3960     		str	r1, [r7, #0]
 288              		.loc 2 103 0
 289 008e 7B68     		ldr	r3, [r7, #4]
 290 0090 012B     		cmp	r3, #1
 291 0092 1BD1     		bne	.L10
 292              		.loc 2 103 0 is_stmt 0 discriminator 1
 293 0094 3A68     		ldr	r2, [r7, #0]
 294 0096 4FF6FF73 		movw	r3, #65535
 295 009a 9A42     		cmp	r2, r3
 296 009c 16D1     		bne	.L10
  24:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 297              		.loc 2 24 0 is_stmt 1
 298 009e 40F20000 		movw	r0, #:lower16:g_LedTast
 299 00a2 C0F20000 		movt	r0, #:upper16:g_LedTast
 300 00a6 4FF03201 		mov	r1, #50
 301 00aa FFF7FEFF 		bl	_ZN24CLedHeartBeatSTM32F4DiscC1Em
 302 00ae 40F20003 		movw	r3, #:lower16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 303 00b2 C0F20003 		movt	r3, #:upper16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 304 00b6 40F20000 		movw	r0, #:lower16:g_LedTast
 305 00ba C0F20000 		movt	r0, #:upper16:g_LedTast
 306 00be 1946     		mov	r1, r3
 307 00c0 40F20002 		movw	r2, #:lower16:__dso_handle
 308 00c4 C0F20002 		movt	r2, #:upper16:__dso_handle
 309 00c8 FFF7FEFF 		bl	__aeabi_atexit
 310              	.L10:
 311              		.loc 2 103 0
 312 00cc 07F10807 		add	r7, r7, #8
 313 00d0 BD46     		mov	sp, r7
 314 00d2 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE147:
 318              		.section	.rodata
 319 000e 0000     		.align	2
 322              	_ZL12c_FontNative:
 323 0010 00000000 		.space	24
 323      00000000 
 323      00000000 
 323      00000000 
 323      00000000 
 324              		.text
 325              		.align	2
 326              		.thumb
 327              		.thumb_func
 329              	_GLOBAL__sub_I_g_LedTast:
 330              	.LFB148:
 331              		.loc 2 103 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335 00d4 80B5     		push	{r7, lr}
 336              	.LCFI21:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 14, -4
 339              		.cfi_offset 7, -8
 340 00d6 00AF     		add	r7, sp, #0
 341              	.LCFI22:
 342              		.cfi_def_cfa_register 7
 343              		.loc 2 103 0
 344 00d8 4FF00100 		mov	r0, #1
 345 00dc 4FF6FF71 		movw	r1, #65535
 346 00e0 FFF7D0FF 		bl	_Z41__static_initialization_and_destruction_0ii
 347 00e4 80BD     		pop	{r7, pc}
 348              		.cfi_endproc
 349              	.LFE148:
 351              		.section	.init_array,"aw",%init_array
 352              		.align	2
 353 0000 00000000 		.word	_GLOBAL__sub_I_g_LedTast(target1)
 354              		.text
 355              	.Letext0:
 356              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 357              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source
 358              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 359              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\GraphicLCD/CGraphicLCD.h"
 360              		.file 7 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
 361              		.file 8 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\GraphicLCD/CT6963CDriver.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:19     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:24     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 _ZN9CFreeRTOS14StartSchedulerEv
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:50     .bss:00000000 g_LedTast
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:47     .bss:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:53     .rodata:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:54     .rodata:00000000 .LC0
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:57     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:62     .text:00000000 main
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:101    .text:00000030 vApplicationTickHook
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:127    .text:0000003c vApplicationIdleHook
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:153    .text:00000048 vApplicationMallocFailedHook
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:179    .text:00000054 vApplicationStackOverflowHook
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:209    .text:00000060 EVAL_AUDIO_TransferComplete_CallBack
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:241    .text:00000074 EVAL_AUDIO_GetSampleCallBack
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:269    .text:00000084 _Z41__static_initialization_and_destruction_0ii
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:322    .rodata:00000010 _ZL12c_FontNative
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:329    .text:000000d4 _GLOBAL__sub_I_g_LedTast
C:\Users\Alex\AppData\Local\Temp\cc4F9xmy.s:352    .init_array:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskStartScheduler
_ZN12AManagedTask6CreateEPKctm
_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
_ZN24CLedHeartBeatSTM32F4DiscC1Em
_ZN24CLedHeartBeatSTM32F4DiscD1Ev
__dso_handle
__aeabi_atexit
