   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN9CFreeRTOS14StartSchedulerEv,"axG",%progbits,_ZN9CFreeRTOS14StartSchedulerEv,com
  19              		.align	2
  20              		.weak	_ZN9CFreeRTOS14StartSchedulerEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZN9CFreeRTOS14StartSchedulerEv:
  25              	.LFB110:
  26              		.file 1 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS_EC
   1:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
   2:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @file CFreeRTOS.h
   3:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @class CFreeRTOS
   4:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   5:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This class provide an interface for the <a href="http://www.freertos.org/a00020.html">Kernek Con
   6:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * Moreover provide a method used by the FreeRTOS Extension Layer to initialize the hardware resour
   7:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * All methods are static and inline.
   8:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   9:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @date Jul 14, 2010
  10:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @author Stefano Oliveri (STF12.net)
  11:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *         E-Mail: software@stf12.net
  12:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  13:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  14:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  15:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_CPP_EXT FreeRTOS Class Extension
  16:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This set of C++ class aim to provide an Object Oriented framework to program a FreeRTOS applicat
  17:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  18:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  19:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  20:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  21:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_Wrapper FreeRTOS Wrapper Class
  22:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @ingroup FreeRTOS_CPP_EXT
  23:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * The FreeRTOS Wrapper Layer provides a set of class that are able to attach to and manage a FreeR
  24:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * native handle.
  25:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  26:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  27:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  28:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #ifndef CFREERTOS_H_
  29:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #define CFREERTOS_H_
  30:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  31:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "FreeRTOS.h"
  32:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "task.h"
  33:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  34:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** class CFreeRTOS {
  35:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** public:
  36:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  37:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Default constructor. Not used.
  38:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  39:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	CFreeRTOS();
  40:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  41:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  42:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Destructor. Not used.
  43:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  44:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	~CFreeRTOS();
  45:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  46:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  47:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function
  48:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  49:C:\Dokumente und Einstellungen\brand\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	static void StartScheduler() { vTaskStartScheduler(); }
  27              		.loc 1 49 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  39              		.loc 1 49 0
  40 0004 FFF7FEFF 		bl	vTaskStartScheduler
  41 0008 80BD     		pop	{r7, pc}
  42              		.cfi_endproc
  43              	.LFE110:
  45              		.global	g_LedTast
  46 000a 00BF     		.section	.bss.g_LedTast,"aw",%nobits
  47              		.align	2
  50              	g_LedTast:
  51 0000 00000000 		.space	20
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	g_Display
  53              		.section	.bss.g_Display,"aw",%nobits
  54              		.align	2
  57              	g_Display:
  58 0000 00000000 		.space	8
  58      00000000 
  59              		.global	g_Menue
  60              		.section	.bss.g_Menue,"aw",%nobits
  61              		.align	2
  64              	g_Menue:
  65 0000 00000000 		.space	16
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.global	g_FileHandler
  67              		.section	.bss.g_FileHandler,"aw",%nobits
  68              		.align	2
  71              	g_FileHandler:
  72 0000 00000000 		.space	1212
  72      00000000 
  72      00000000 
  72      00000000 
  72      00000000 
  73              		.section	.rodata
  74              		.align	2
  75              	.LC0:
  76 0000 4C656420 		.ascii	"Led Heartbeat\000"
  76      48656172 
  76      74626561 
  76      7400
  77 000e 0000     		.align	2
  78              	.LC1:
  79 0010 4D656E75 		.ascii	"Menue\000"
  79      6500
  80 0016 0000     		.align	2
  81              	.LC2:
  82 0018 46696C65 		.ascii	"FileHandler\000"
  82      48616E64 
  82      6C657200 
  83              		.section	.text.main,"ax",%progbits
  84              		.align	2
  85              		.global	main
  86              		.thumb
  87              		.thumb_func
  89              	main:
  90              	.LFB140:
  91              		.file 2 "../main.cpp"
   1:../main.cpp   **** /**
   2:../main.cpp   ****   ******************************************************************************
   3:../main.cpp   ****   * @file      	main.cpp
   4:../main.cpp   ****   * @author    	Tecnologic86
   5:../main.cpp   ****   * @version   	V0.0.0
   6:../main.cpp   ****   * @date      	14.02.12
   7:../main.cpp   ****   * @brief		main program file for Project: ThunderCryer
   8:../main.cpp   ****   ******************************************************************************
   9:../main.cpp   ****   */
  10:../main.cpp   **** 
  11:../main.cpp   **** /* Includes ------------------------------------------------------------------*/
  12:../main.cpp   **** #include "CFreeRTOS.h"
  13:../main.cpp   **** #include "CTask.h"
  14:../main.cpp   **** #include "ustime.h"
  15:../main.cpp   **** #include "CLedHeartBeatSTM32F4Disc.h"
  16:../main.cpp   **** #include "CMenue.h"
  17:../main.cpp   **** #include "CT6963GPIOInterface.h"
  18:../main.cpp   **** #include "CFileHandler.h"
  19:../main.cpp   **** #include "stm32f4xx_conf.h"
  20:../main.cpp   **** #include "stm32f4xx.h"
  21:../main.cpp   **** 
  22:../main.cpp   **** /* Private typedef -----------------------------------------------------------*/
  23:../main.cpp   **** /* Private define ------------------------------------------------------------*/
  24:../main.cpp   **** /* Private macro -------------------------------------------------------------*/
  25:../main.cpp   **** /* Private variables ---------------------------------------------------------*/
  26:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
  27:../main.cpp   **** CT6963_GPIO_Interface g_Display;
  28:../main.cpp   **** CMenue	g_Menue(&g_Display);
  29:../main.cpp   **** CFileHandler g_FileHandler;
  30:../main.cpp   **** 
  31:../main.cpp   **** /* Private function prototypes -----------------------------------------------*/
  32:../main.cpp   **** extern "C" {
  33:../main.cpp   **** 	void vApplicationTickHook( void );
  34:../main.cpp   **** 	void vApplicationIdleHook( void );
  35:../main.cpp   **** 	void vApplicationMallocFailedHook( void );
  36:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
  37:../main.cpp   **** } // extern "C"
  38:../main.cpp   **** /* Private functions ---------------------------------------------------------*/
  39:../main.cpp   **** 
  40:../main.cpp   **** 
  41:../main.cpp   **** 
  42:../main.cpp   **** /**
  43:../main.cpp   ****   * @brief  main function
  44:../main.cpp   ****   * @param  None
  45:../main.cpp   ****   * @retval None
  46:../main.cpp   ****   */
  47:../main.cpp   **** int main(void){
  92              		.loc 2 47 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 8
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              	.LCFI2:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 14, -4
 100              		.cfi_offset 7, -8
 101 0002 82B0     		sub	sp, sp, #8
 102              	.LCFI3:
 103              		.cfi_def_cfa_offset 16
 104 0004 00AF     		add	r7, sp, #0
 105              	.LCFI4:
 106              		.cfi_def_cfa_register 7
 107              	.LBB2:
  48:../main.cpp   **** 	unsigned int u;
  49:../main.cpp   **** 
  50:../main.cpp   **** 	/**
  51:../main.cpp   **** 	 * create Led Heartbeat task with minimal stack size and priority
  52:../main.cpp   **** 	 * 1 higher than idle task
  53:../main.cpp   **** 	 */
  54:../main.cpp   **** 	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+5);
 108              		.loc 2 54 0
 109 0006 40F20000 		movw	r0, #:lower16:g_LedTast
 110 000a C0F20000 		movt	r0, #:upper16:g_LedTast
 111 000e 40F20001 		movw	r1, #:lower16:.LC0
 112 0012 C0F20001 		movt	r1, #:upper16:.LC0
 113 0016 4FF48072 		mov	r2, #256
 114 001a 4FF00503 		mov	r3, #5
 115 001e FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  55:../main.cpp   **** 	g_Menue.Create("Menue",configMINIMAL_STACK_SIZE * 2,tskIDLE_PRIORITY+3);
 116              		.loc 2 55 0
 117 0022 40F20000 		movw	r0, #:lower16:g_Menue
 118 0026 C0F20000 		movt	r0, #:upper16:g_Menue
 119 002a 40F20001 		movw	r1, #:lower16:.LC1
 120 002e C0F20001 		movt	r1, #:upper16:.LC1
 121 0032 4FF40072 		mov	r2, #512
 122 0036 4FF00303 		mov	r3, #3
 123 003a FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  56:../main.cpp   **** 	g_FileHandler.Create("FileHandler",configMINIMAL_STACK_SIZE * 10,tskIDLE_PRIORITY+1);
 124              		.loc 2 56 0
 125 003e 40F20000 		movw	r0, #:lower16:g_FileHandler
 126 0042 C0F20000 		movt	r0, #:upper16:g_FileHandler
 127 0046 40F20001 		movw	r1, #:lower16:.LC2
 128 004a C0F20001 		movt	r1, #:upper16:.LC2
 129 004e 4FF42062 		mov	r2, #2560
 130 0052 4FF00103 		mov	r3, #1
 131 0056 FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  57:../main.cpp   **** 
  58:../main.cpp   **** 	/**
  59:../main.cpp   **** 	 * Initialise the hardware for all Tasks and
  60:../main.cpp   **** 	 * then FreeRTOS takes control of execution
  61:../main.cpp   **** 	 */
  62:../main.cpp   **** 	CFreeRTOS::InitHardwareForManagedTasks();
 132              		.loc 2 62 0
 133 005a FFF7FEFF 		bl	_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
  63:../main.cpp   **** 	CFreeRTOS::StartScheduler();
 134              		.loc 2 63 0
 135 005e FFF7FEFF 		bl	_ZN9CFreeRTOS14StartSchedulerEv
 136              	.L3:
  64:../main.cpp   **** 
  65:../main.cpp   **** 	while(1){
  66:../main.cpp   **** 		u++;
 137              		.loc 2 66 0 discriminator 1
 138 0062 7B68     		ldr	r3, [r7, #4]
 139 0064 03F10103 		add	r3, r3, #1
 140 0068 7B60     		str	r3, [r7, #4]
  65:../main.cpp   **** 	while(1){
 141              		.loc 2 65 0 discriminator 1
 142 006a FAE7     		b	.L3
 143              	.LBE2:
 144              		.cfi_endproc
 145              	.LFE140:
 147              		.section	.text.vApplicationTickHook,"ax",%progbits
 148              		.align	2
 149              		.global	vApplicationTickHook
 150              		.thumb
 151              		.thumb_func
 153              	vApplicationTickHook:
 154              	.LFB141:
  67:../main.cpp   **** 	}
  68:../main.cpp   **** 
  69:../main.cpp   **** 	return 0;
  70:../main.cpp   **** 
  71:../main.cpp   **** }
  72:../main.cpp   **** 
  73:../main.cpp   **** extern "C" {
  74:../main.cpp   **** 
  75:../main.cpp   **** 	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
  76:../main.cpp   **** 	// ----------------------------------------------------------------------------
  77:../main.cpp   **** 	void vApplicationTickHook( void ) {
 155              		.loc 2 77 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0000 80B4     		push	{r7}
 161              	.LCFI5:
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 0002 00AF     		add	r7, sp, #0
 165              	.LCFI6:
 166              		.cfi_def_cfa_register 7
  78:../main.cpp   **** 
  79:../main.cpp   **** 	}
 167              		.loc 2 79 0
 168 0004 BD46     		mov	sp, r7
 169 0006 80BC     		pop	{r7}
 170 0008 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE141:
 174 000a 00BF     		.section	.text.vApplicationIdleHook,"ax",%progbits
 175              		.align	2
 176              		.global	vApplicationIdleHook
 177              		.thumb
 178              		.thumb_func
 180              	vApplicationIdleHook:
 181              	.LFB142:
  80:../main.cpp   **** 
  81:../main.cpp   **** 	// This FreeRTOS call-back function gets when no other task is ready to execute.
  82:../main.cpp   **** 	// On a completely unloaded system this is getting called at over 2.5MHz!
  83:../main.cpp   **** 	// ----------------------------------------------------------------------------
  84:../main.cpp   **** 	void vApplicationIdleHook( void ) {
 182              		.loc 2 84 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 187 0000 80B4     		push	{r7}
 188              	.LCFI7:
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 7, -4
 191 0002 00AF     		add	r7, sp, #0
 192              	.LCFI8:
 193              		.cfi_def_cfa_register 7
  85:../main.cpp   **** 
  86:../main.cpp   **** 	}
 194              		.loc 2 86 0
 195 0004 BD46     		mov	sp, r7
 196 0006 80BC     		pop	{r7}
 197 0008 7047     		bx	lr
 198              		.cfi_endproc
 199              	.LFE142:
 201 000a 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 202              		.align	2
 203              		.global	vApplicationMallocFailedHook
 204              		.thumb
 205              		.thumb_func
 207              	vApplicationMallocFailedHook:
 208              	.LFB143:
  87:../main.cpp   **** 
  88:../main.cpp   **** 	// A required FreeRTOS function.
  89:../main.cpp   **** 	// ----------------------------------------------------------------------------
  90:../main.cpp   **** 	void vApplicationMallocFailedHook( void ) {
 209              		.loc 2 90 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214 0000 80B4     		push	{r7}
 215              	.LCFI9:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 7, -4
 218 0002 00AF     		add	r7, sp, #0
 219              	.LCFI10:
 220              		.cfi_def_cfa_register 7
  91:../main.cpp   **** 		configASSERT( 0 );  // Latch on any failure / error.
  92:../main.cpp   **** 	}
 221              		.loc 2 92 0
 222 0004 BD46     		mov	sp, r7
 223 0006 80BC     		pop	{r7}
 224 0008 7047     		bx	lr
 225              		.cfi_endproc
 226              	.LFE143:
 228 000a 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 229              		.align	2
 230              		.global	vApplicationStackOverflowHook
 231              		.thumb
 232              		.thumb_func
 234              	vApplicationStackOverflowHook:
 235              	.LFB144:
  93:../main.cpp   **** 
  94:../main.cpp   **** 	// A required FreeRTOS function. gets called on stack overflow
  95:../main.cpp   **** 	// ----------------------------------------------------------------------------
  96:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 236              		.loc 2 96 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 8
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 0000 80B4     		push	{r7}
 242              	.LCFI11:
 243              		.cfi_def_cfa_offset 4
 244              		.cfi_offset 7, -4
 245 0002 83B0     		sub	sp, sp, #12
 246              	.LCFI12:
 247              		.cfi_def_cfa_offset 16
 248 0004 00AF     		add	r7, sp, #0
 249              	.LCFI13:
 250              		.cfi_def_cfa_register 7
 251 0006 7860     		str	r0, [r7, #4]
 252 0008 3960     		str	r1, [r7, #0]
 253              	.L8:
  97:../main.cpp   **** 		/* TODO, implement your code here */
  98:../main.cpp   **** 		while(1);
 254              		.loc 2 98 0 discriminator 1
 255 000a FEE7     		b	.L8
 256              		.cfi_endproc
 257              	.LFE144:
 259              		.section	.text.EVAL_AUDIO_GetSampleCallBack,"ax",%progbits
 260              		.align	2
 261              		.global	EVAL_AUDIO_GetSampleCallBack
 262              		.thumb
 263              		.thumb_func
 265              	EVAL_AUDIO_GetSampleCallBack:
 266              	.LFB145:
  99:../main.cpp   **** 	}
 100:../main.cpp   **** 
 101:../main.cpp   **** 	/* User Callbacks: user has to implement these functions in his code if
 102:../main.cpp   **** 	  they are needed. -----------------------------------------------------------*/
 103:../main.cpp   **** 
 104:../main.cpp   **** 	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 267              		.loc 2 104 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 1, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272 0000 80B4     		push	{r7}
 273              	.LCFI14:
 274              		.cfi_def_cfa_offset 4
 275              		.cfi_offset 7, -4
 276 0002 00AF     		add	r7, sp, #0
 277              	.LCFI15:
 278              		.cfi_def_cfa_register 7
 105:../main.cpp   **** 		return -1;
 279              		.loc 2 105 0
 280 0004 4FF6FF73 		movw	r3, #65535
 106:../main.cpp   **** 	}
 281              		.loc 2 106 0
 282 0008 1846     		mov	r0, r3
 283 000a BD46     		mov	sp, r7
 284 000c 80BC     		pop	{r7}
 285 000e 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE145:
 289              		.section	.text.EVAL_AUDIO_TransferComplete_CallBack,"ax",%progbits
 290              		.align	2
 291              		.global	EVAL_AUDIO_TransferComplete_CallBack
 292              		.thumb
 293              		.thumb_func
 295              	EVAL_AUDIO_TransferComplete_CallBack:
 296              	.LFB146:
 107:../main.cpp   **** 
 108:../main.cpp   **** 	/* This function is called when the requested data has been completely transferred.
 109:../main.cpp   **** 	   In Normal mode (when  the define AUDIO_MAL_MODE_NORMAL is enabled) this function
 110:../main.cpp   **** 	   is called at the end of the whole audio file.
 111:../main.cpp   **** 	   In circular mode (when  the define AUDIO_MAL_MODE_CIRCULAR is enabled) this
 112:../main.cpp   **** 	   function is called at the end of the current buffer transmission. */
 113:../main.cpp   **** 	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 297              		.loc 2 113 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              	.LCFI16:
 304              		.cfi_def_cfa_offset 4
 305              		.cfi_offset 7, -4
 306 0002 83B0     		sub	sp, sp, #12
 307              	.LCFI17:
 308              		.cfi_def_cfa_offset 16
 309 0004 00AF     		add	r7, sp, #0
 310              	.LCFI18:
 311              		.cfi_def_cfa_register 7
 312 0006 7860     		str	r0, [r7, #4]
 313 0008 3960     		str	r1, [r7, #0]
 114:../main.cpp   **** 
 115:../main.cpp   **** 	}
 314              		.loc 2 115 0
 315 000a 07F10C07 		add	r7, r7, #12
 316 000e BD46     		mov	sp, r7
 317 0010 80BC     		pop	{r7}
 318 0012 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE146:
 322              		.section	.text.EVAL_AUDIO_HalfTransfer_CallBack,"ax",%progbits
 323              		.align	2
 324              		.global	EVAL_AUDIO_HalfTransfer_CallBack
 325              		.thumb
 326              		.thumb_func
 328              	EVAL_AUDIO_HalfTransfer_CallBack:
 329              	.LFB147:
 116:../main.cpp   **** 
 117:../main.cpp   **** 	/* This function is called when half of the requested buffer has been transferred
 118:../main.cpp   **** 	   This callback is useful in Circular mode only (when AUDIO_MAL_MODE_CIRCULAR
 119:../main.cpp   **** 	   define is enabled)*/
 120:../main.cpp   **** 	void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size){
 330              		.loc 2 120 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 8
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 335 0000 80B4     		push	{r7}
 336              	.LCFI19:
 337              		.cfi_def_cfa_offset 4
 338              		.cfi_offset 7, -4
 339 0002 83B0     		sub	sp, sp, #12
 340              	.LCFI20:
 341              		.cfi_def_cfa_offset 16
 342 0004 00AF     		add	r7, sp, #0
 343              	.LCFI21:
 344              		.cfi_def_cfa_register 7
 345 0006 7860     		str	r0, [r7, #4]
 346 0008 3960     		str	r1, [r7, #0]
 121:../main.cpp   **** 
 122:../main.cpp   **** 	}
 347              		.loc 2 122 0
 348 000a 07F10C07 		add	r7, r7, #12
 349 000e BD46     		mov	sp, r7
 350 0010 80BC     		pop	{r7}
 351 0012 7047     		bx	lr
 352              		.cfi_endproc
 353              	.LFE147:
 355              		.section	.text.EVAL_AUDIO_Error_CallBack,"ax",%progbits
 356              		.align	2
 357              		.global	EVAL_AUDIO_Error_CallBack
 358              		.thumb
 359              		.thumb_func
 361              	EVAL_AUDIO_Error_CallBack:
 362              	.LFB148:
 123:../main.cpp   **** 
 124:../main.cpp   **** 	/* This function is called when an Interrupt due to transfer error on or peripheral
 125:../main.cpp   **** 	   error occurs. */
 126:../main.cpp   **** 	void EVAL_AUDIO_Error_CallBack(void* pData){
 363              		.loc 2 126 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 368 0000 80B4     		push	{r7}
 369              	.LCFI22:
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 7, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              	.LCFI23:
 374              		.cfi_def_cfa_offset 16
 375 0004 00AF     		add	r7, sp, #0
 376              	.LCFI24:
 377              		.cfi_def_cfa_register 7
 378 0006 7860     		str	r0, [r7, #4]
 127:../main.cpp   **** 
 128:../main.cpp   **** 	}
 379              		.loc 2 128 0
 380 0008 07F10C07 		add	r7, r7, #12
 381 000c BD46     		mov	sp, r7
 382 000e 80BC     		pop	{r7}
 383 0010 7047     		bx	lr
 384              		.cfi_endproc
 385              	.LFE148:
 387 0012 00BF     		.section	.text.Codec_TIMEOUT_UserCallback,"ax",%progbits
 388              		.align	2
 389              		.global	Codec_TIMEOUT_UserCallback
 390              		.thumb
 391              		.thumb_func
 393              	Codec_TIMEOUT_UserCallback:
 394              	.LFB149:
 129:../main.cpp   **** 
 130:../main.cpp   **** 	/* Codec_TIMEOUT_UserCallback() function is called whenever a timeout condition
 131:../main.cpp   **** 	   occurs during communication (waiting on an event that doesn't occur, bus
 132:../main.cpp   **** 	   errors, busy devices ...) on the Codec control interface (I2C).
 133:../main.cpp   **** 	   You can use the default timeout callback implementation by uncommenting the
 134:../main.cpp   **** 	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_audio_codec.h file.
 135:../main.cpp   **** 	   Typically the user implementation of this callback should reset I2C peripheral
 136:../main.cpp   **** 	   and re-initialize communication or in worst case reset all the application. */
 137:../main.cpp   **** 	uint32_t Codec_TIMEOUT_UserCallback(void){
 395              		.loc 2 137 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400 0000 80B4     		push	{r7}
 401              	.LCFI25:
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0002 00AF     		add	r7, sp, #0
 405              	.LCFI26:
 406              		.cfi_def_cfa_register 7
 138:../main.cpp   **** 		return -1;
 407              		.loc 2 138 0
 408 0004 4FF0FF33 		mov	r3, #-1
 139:../main.cpp   **** 	}
 409              		.loc 2 139 0
 410 0008 1846     		mov	r0, r3
 411 000a BD46     		mov	sp, r7
 412 000c 80BC     		pop	{r7}
 413 000e 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE149:
 417              		.section	.text.LIS302DL_TIMEOUT_UserCallback,"ax",%progbits
 418              		.align	2
 419              		.global	LIS302DL_TIMEOUT_UserCallback
 420              		.thumb
 421              		.thumb_func
 423              	LIS302DL_TIMEOUT_UserCallback:
 424              	.LFB150:
 140:../main.cpp   **** 
 141:../main.cpp   **** 	/* LIS302DL_TIMEOUT_UserCallback() function is called whenever a timeout condition
 142:../main.cpp   **** 	   occure during communication (waiting transmit data register empty flag(TXE)
 143:../main.cpp   **** 	   or waiting receive data register is not empty flag (RXNE)).
 144:../main.cpp   **** 	   You can use the default timeout callback implementation by uncommenting the
 145:../main.cpp   **** 	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_lis302dl.h file.
 146:../main.cpp   **** 	   Typically the user implementation of this callback should reset MEMS peripheral
 147:../main.cpp   **** 	   and re-initialize communication or in worst case reset all the application. */
 148:../main.cpp   **** 	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
 425              		.loc 2 148 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430 0000 80B4     		push	{r7}
 431              	.LCFI27:
 432              		.cfi_def_cfa_offset 4
 433              		.cfi_offset 7, -4
 434 0002 00AF     		add	r7, sp, #0
 435              	.LCFI28:
 436              		.cfi_def_cfa_register 7
 149:../main.cpp   **** 		return -1;
 437              		.loc 2 149 0
 438 0004 4FF0FF33 		mov	r3, #-1
 150:../main.cpp   **** 	}
 439              		.loc 2 150 0
 440 0008 1846     		mov	r0, r3
 441 000a BD46     		mov	sp, r7
 442 000c 80BC     		pop	{r7}
 443 000e 7047     		bx	lr
 444              		.cfi_endproc
 445              	.LFE150:
 447              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 448              		.align	2
 449              		.thumb
 450              		.thumb_func
 452              	_Z41__static_initialization_and_destruction_0ii:
 453              	.LFB151:
 151:../main.cpp   **** } // extern "C"
 454              		.loc 2 151 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 8
 457              		@ frame_needed = 1, uses_anonymous_args = 0
 458 0000 80B5     		push	{r7, lr}
 459              	.LCFI29:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 14, -4
 462              		.cfi_offset 7, -8
 463 0002 82B0     		sub	sp, sp, #8
 464              	.LCFI30:
 465              		.cfi_def_cfa_offset 16
 466 0004 00AF     		add	r7, sp, #0
 467              	.LCFI31:
 468              		.cfi_def_cfa_register 7
 469 0006 7860     		str	r0, [r7, #4]
 470 0008 3960     		str	r1, [r7, #0]
 471              		.loc 2 151 0
 472 000a 7B68     		ldr	r3, [r7, #4]
 473 000c 012B     		cmp	r3, #1
 474 000e 5ED1     		bne	.L15
 475              		.loc 2 151 0 is_stmt 0 discriminator 1
 476 0010 3A68     		ldr	r2, [r7, #0]
 477 0012 4FF6FF73 		movw	r3, #65535
 478 0016 9A42     		cmp	r2, r3
 479 0018 59D1     		bne	.L15
  26:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 480              		.loc 2 26 0 is_stmt 1
 481 001a 40F20000 		movw	r0, #:lower16:g_LedTast
 482 001e C0F20000 		movt	r0, #:upper16:g_LedTast
 483 0022 4FF03201 		mov	r1, #50
 484 0026 FFF7FEFF 		bl	_ZN24CLedHeartBeatSTM32F4DiscC1Em
 485 002a 40F20003 		movw	r3, #:lower16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 486 002e C0F20003 		movt	r3, #:upper16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 487 0032 40F20000 		movw	r0, #:lower16:g_LedTast
 488 0036 C0F20000 		movt	r0, #:upper16:g_LedTast
 489 003a 1946     		mov	r1, r3
 490 003c 40F20002 		movw	r2, #:lower16:__dso_handle
 491 0040 C0F20002 		movt	r2, #:upper16:__dso_handle
 492 0044 FFF7FEFF 		bl	__aeabi_atexit
  27:../main.cpp   **** CT6963_GPIO_Interface g_Display;
 493              		.loc 2 27 0
 494 0048 40F20000 		movw	r0, #:lower16:g_Display
 495 004c C0F20000 		movt	r0, #:upper16:g_Display
 496 0050 FFF7FEFF 		bl	_ZN21CT6963_GPIO_InterfaceC1Ev
 497 0054 40F20003 		movw	r3, #:lower16:_ZN21CT6963_GPIO_InterfaceD1Ev
 498 0058 C0F20003 		movt	r3, #:upper16:_ZN21CT6963_GPIO_InterfaceD1Ev
 499 005c 40F20000 		movw	r0, #:lower16:g_Display
 500 0060 C0F20000 		movt	r0, #:upper16:g_Display
 501 0064 1946     		mov	r1, r3
 502 0066 40F20002 		movw	r2, #:lower16:__dso_handle
 503 006a C0F20002 		movt	r2, #:upper16:__dso_handle
 504 006e FFF7FEFF 		bl	__aeabi_atexit
  28:../main.cpp   **** CMenue	g_Menue(&g_Display);
 505              		.loc 2 28 0
 506 0072 40F20000 		movw	r0, #:lower16:g_Menue
 507 0076 C0F20000 		movt	r0, #:upper16:g_Menue
 508 007a 40F20001 		movw	r1, #:lower16:g_Display
 509 007e C0F20001 		movt	r1, #:upper16:g_Display
 510 0082 FFF7FEFF 		bl	_ZN6CMenueC1EP11CGraphicLCD
 511 0086 40F20003 		movw	r3, #:lower16:_ZN6CMenueD1Ev
 512 008a C0F20003 		movt	r3, #:upper16:_ZN6CMenueD1Ev
 513 008e 40F20000 		movw	r0, #:lower16:g_Menue
 514 0092 C0F20000 		movt	r0, #:upper16:g_Menue
 515 0096 1946     		mov	r1, r3
 516 0098 40F20002 		movw	r2, #:lower16:__dso_handle
 517 009c C0F20002 		movt	r2, #:upper16:__dso_handle
 518 00a0 FFF7FEFF 		bl	__aeabi_atexit
  29:../main.cpp   **** CFileHandler g_FileHandler;
 519              		.loc 2 29 0
 520 00a4 40F20000 		movw	r0, #:lower16:g_FileHandler
 521 00a8 C0F20000 		movt	r0, #:upper16:g_FileHandler
 522 00ac FFF7FEFF 		bl	_ZN12CFileHandlerC1Ev
 523 00b0 40F20003 		movw	r3, #:lower16:_ZN12CFileHandlerD1Ev
 524 00b4 C0F20003 		movt	r3, #:upper16:_ZN12CFileHandlerD1Ev
 525 00b8 40F20000 		movw	r0, #:lower16:g_FileHandler
 526 00bc C0F20000 		movt	r0, #:upper16:g_FileHandler
 527 00c0 1946     		mov	r1, r3
 528 00c2 40F20002 		movw	r2, #:lower16:__dso_handle
 529 00c6 C0F20002 		movt	r2, #:upper16:__dso_handle
 530 00ca FFF7FEFF 		bl	__aeabi_atexit
 531              	.L15:
 532              		.loc 2 151 0
 533 00ce 07F10807 		add	r7, r7, #8
 534 00d2 BD46     		mov	sp, r7
 535 00d4 80BD     		pop	{r7, pc}
 536              		.cfi_endproc
 537              	.LFE151:
 539 00d6 00BF     		.section	.rodata._ZL12c_FontNative,"a",%progbits
 540              		.align	2
 543              	_ZL12c_FontNative:
 544 0000 00000000 		.space	24
 544      00000000 
 544      00000000 
 544      00000000 
 544      00000000 
 545              		.section	.text._GLOBAL__sub_I_g_LedTast,"ax",%progbits
 546              		.align	2
 547              		.thumb
 548              		.thumb_func
 550              	_GLOBAL__sub_I_g_LedTast:
 551              	.LFB152:
 552              		.loc 2 151 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556 0000 80B5     		push	{r7, lr}
 557              	.LCFI32:
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 14, -4
 560              		.cfi_offset 7, -8
 561 0002 00AF     		add	r7, sp, #0
 562              	.LCFI33:
 563              		.cfi_def_cfa_register 7
 564              		.loc 2 151 0
 565 0004 4FF00100 		mov	r0, #1
 566 0008 4FF6FF71 		movw	r1, #65535
 567 000c FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 568 0010 80BD     		pop	{r7, pc}
 569              		.cfi_endproc
 570              	.LFE152:
 572 0012 00BF     		.section	.init_array,"aw",%init_array
 573              		.align	2
 574 0000 00000000 		.word	_GLOBAL__sub_I_g_LedTast(target1)
 575              		.text
 576              	.Letext0:
 577              		.file 3 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 578              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 579              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 580              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\GraphicLCD/
 581              		.file 7 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
 582              		.file 8 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\GraphicLCD/
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
  C:\Temp\ccNLfRew.s:19     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 $t
  C:\Temp\ccNLfRew.s:24     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 _ZN9CFreeRTOS14StartSchedulerEv
  C:\Temp\ccNLfRew.s:50     .bss.g_LedTast:00000000 g_LedTast
  C:\Temp\ccNLfRew.s:47     .bss.g_LedTast:00000000 $d
  C:\Temp\ccNLfRew.s:57     .bss.g_Display:00000000 g_Display
  C:\Temp\ccNLfRew.s:54     .bss.g_Display:00000000 $d
  C:\Temp\ccNLfRew.s:64     .bss.g_Menue:00000000 g_Menue
  C:\Temp\ccNLfRew.s:61     .bss.g_Menue:00000000 $d
  C:\Temp\ccNLfRew.s:71     .bss.g_FileHandler:00000000 g_FileHandler
  C:\Temp\ccNLfRew.s:68     .bss.g_FileHandler:00000000 $d
  C:\Temp\ccNLfRew.s:74     .rodata:00000000 $d
  C:\Temp\ccNLfRew.s:75     .rodata:00000000 .LC0
  C:\Temp\ccNLfRew.s:78     .rodata:00000010 .LC1
  C:\Temp\ccNLfRew.s:81     .rodata:00000018 .LC2
  C:\Temp\ccNLfRew.s:84     .text.main:00000000 $t
  C:\Temp\ccNLfRew.s:89     .text.main:00000000 main
  C:\Temp\ccNLfRew.s:148    .text.vApplicationTickHook:00000000 $t
  C:\Temp\ccNLfRew.s:153    .text.vApplicationTickHook:00000000 vApplicationTickHook
  C:\Temp\ccNLfRew.s:175    .text.vApplicationIdleHook:00000000 $t
  C:\Temp\ccNLfRew.s:180    .text.vApplicationIdleHook:00000000 vApplicationIdleHook
  C:\Temp\ccNLfRew.s:202    .text.vApplicationMallocFailedHook:00000000 $t
  C:\Temp\ccNLfRew.s:207    .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
  C:\Temp\ccNLfRew.s:229    .text.vApplicationStackOverflowHook:00000000 $t
  C:\Temp\ccNLfRew.s:234    .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
  C:\Temp\ccNLfRew.s:260    .text.EVAL_AUDIO_GetSampleCallBack:00000000 $t
  C:\Temp\ccNLfRew.s:265    .text.EVAL_AUDIO_GetSampleCallBack:00000000 EVAL_AUDIO_GetSampleCallBack
  C:\Temp\ccNLfRew.s:290    .text.EVAL_AUDIO_TransferComplete_CallBack:00000000 $t
  C:\Temp\ccNLfRew.s:295    .text.EVAL_AUDIO_TransferComplete_CallBack:00000000 EVAL_AUDIO_TransferComplete_CallBack
  C:\Temp\ccNLfRew.s:323    .text.EVAL_AUDIO_HalfTransfer_CallBack:00000000 $t
  C:\Temp\ccNLfRew.s:328    .text.EVAL_AUDIO_HalfTransfer_CallBack:00000000 EVAL_AUDIO_HalfTransfer_CallBack
  C:\Temp\ccNLfRew.s:356    .text.EVAL_AUDIO_Error_CallBack:00000000 $t
  C:\Temp\ccNLfRew.s:361    .text.EVAL_AUDIO_Error_CallBack:00000000 EVAL_AUDIO_Error_CallBack
  C:\Temp\ccNLfRew.s:388    .text.Codec_TIMEOUT_UserCallback:00000000 $t
  C:\Temp\ccNLfRew.s:393    .text.Codec_TIMEOUT_UserCallback:00000000 Codec_TIMEOUT_UserCallback
  C:\Temp\ccNLfRew.s:418    .text.LIS302DL_TIMEOUT_UserCallback:00000000 $t
  C:\Temp\ccNLfRew.s:423    .text.LIS302DL_TIMEOUT_UserCallback:00000000 LIS302DL_TIMEOUT_UserCallback
  C:\Temp\ccNLfRew.s:448    .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
  C:\Temp\ccNLfRew.s:452    .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
  C:\Temp\ccNLfRew.s:540    .rodata._ZL12c_FontNative:00000000 $d
  C:\Temp\ccNLfRew.s:543    .rodata._ZL12c_FontNative:00000000 _ZL12c_FontNative
  C:\Temp\ccNLfRew.s:546    .text._GLOBAL__sub_I_g_LedTast:00000000 $t
  C:\Temp\ccNLfRew.s:550    .text._GLOBAL__sub_I_g_LedTast:00000000 _GLOBAL__sub_I_g_LedTast
  C:\Temp\ccNLfRew.s:573    .init_array:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskStartScheduler
_ZN12AManagedTask6CreateEPKctm
_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
_ZN24CLedHeartBeatSTM32F4DiscC1Em
_ZN24CLedHeartBeatSTM32F4DiscD1Ev
__dso_handle
__aeabi_atexit
_ZN21CT6963_GPIO_InterfaceC1Ev
_ZN21CT6963_GPIO_InterfaceD1Ev
_ZN6CMenueC1EP11CGraphicLCD
_ZN6CMenueD1Ev
_ZN12CFileHandlerC1Ev
_ZN12CFileHandlerD1Ev
