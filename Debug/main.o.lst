   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN9CFreeRTOS14StartSchedulerEv,"axG",%progbits,_ZN9CFreeRTOS14StartSchedulerEv,com
  19              		.align	2
  20              		.weak	_ZN9CFreeRTOS14StartSchedulerEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZN9CFreeRTOS14StartSchedulerEv:
  25              	.LFB110:
  26              		.file 1 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS_EC\\Source/CFreeRTOS.h"
   1:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
   2:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @file CFreeRTOS.h
   3:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @class CFreeRTOS
   4:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   5:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This class provide an interface for the <a href="http://www.freertos.org/a00020.html">Kernek Con
   6:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * Moreover provide a method used by the FreeRTOS Extension Layer to initialize the hardware resour
   7:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * All methods are static and inline.
   8:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *
   9:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @date Jul 14, 2010
  10:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @author Stefano Oliveri (STF12.net)
  11:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  *         E-Mail: software@stf12.net
  12:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  13:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  14:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  15:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_CPP_EXT FreeRTOS Class Extension
  16:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * This set of C++ class aim to provide an Object Oriented framework to program a FreeRTOS applicat
  17:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  18:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  19:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  20:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** /**
  21:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @defgroup FreeRTOS_Wrapper FreeRTOS Wrapper Class
  22:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @ingroup FreeRTOS_CPP_EXT
  23:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * The FreeRTOS Wrapper Layer provides a set of class that are able to attach to and manage a FreeR
  24:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * native handle.
  25:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  * @{
  26:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h ****  */
  27:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  28:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #ifndef CFREERTOS_H_
  29:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #define CFREERTOS_H_
  30:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  31:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "FreeRTOS.h"
  32:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** #include "task.h"
  33:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  34:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** class CFreeRTOS {
  35:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** public:
  36:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  37:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Default constructor. Not used.
  38:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  39:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	CFreeRTOS();
  40:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  41:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  42:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * Destructor. Not used.
  43:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  44:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	~CFreeRTOS();
  45:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 
  46:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	/**
  47:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function
  48:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	 */
  49:E:\Desktop\thundercyer-the-alarm-clock\FreeRTOS_EC\Source\CFreeRTOS.h **** 	static void StartScheduler() { vTaskStartScheduler(); }
  27              		.loc 1 49 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  39              		.loc 1 49 0
  40 0004 FFF7FEFF 		bl	vTaskStartScheduler
  41 0008 80BD     		pop	{r7, pc}
  42              		.cfi_endproc
  43              	.LFE110:
  45              		.global	g_LedTast
  46 000a 00BF     		.section	.bss.g_LedTast,"aw",%nobits
  47              		.align	2
  50              	g_LedTast:
  51 0000 00000000 		.space	20
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	g_Display
  53              		.section	.bss.g_Display,"aw",%nobits
  54              		.align	2
  57              	g_Display:
  58 0000 00000000 		.space	8
  58      00000000 
  59              		.global	g_Menue
  60              		.section	.bss.g_Menue,"aw",%nobits
  61              		.align	2
  64              	g_Menue:
  65 0000 00000000 		.space	16
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.rodata
  67              		.align	2
  68              	.LC0:
  69 0000 4C656420 		.ascii	"Led Heartbeat\000"
  69      48656172 
  69      74626561 
  69      7400
  70 000e 0000     		.align	2
  71              	.LC1:
  72 0010 4D656E75 		.ascii	"Menue\000"
  72      6500
  73 0016 0000     		.section	.text.main,"ax",%progbits
  74              		.align	2
  75              		.global	main
  76              		.thumb
  77              		.thumb_func
  79              	main:
  80              	.LFB140:
  81              		.file 2 "../main.cpp"
   1:../main.cpp   **** /**
   2:../main.cpp   ****   ******************************************************************************
   3:../main.cpp   ****   * @file      	main.cpp
   4:../main.cpp   ****   * @author    	Tecnologic86
   5:../main.cpp   ****   * @version   	V0.0.0
   6:../main.cpp   ****   * @date      	14.02.12
   7:../main.cpp   ****   * @brief		main program file for Project: ThunderCryer
   8:../main.cpp   ****   ******************************************************************************
   9:../main.cpp   ****   */
  10:../main.cpp   **** 
  11:../main.cpp   **** /* Includes ------------------------------------------------------------------*/
  12:../main.cpp   **** #include "CFreeRTOS.h"
  13:../main.cpp   **** #include "CTask.h"
  14:../main.cpp   **** #include "ustime.h"
  15:../main.cpp   **** #include "CLedHeartBeatSTM32F4Disc.h"
  16:../main.cpp   **** #include "CMenue.h"
  17:../main.cpp   **** #include "CT6963GPIOInterface.h"
  18:../main.cpp   **** #include "CFileHandler.h"
  19:../main.cpp   **** #include "stm32f4xx_conf.h"
  20:../main.cpp   **** #include "stm32f4xx.h"
  21:../main.cpp   **** 
  22:../main.cpp   **** /* Private typedef -----------------------------------------------------------*/
  23:../main.cpp   **** /* Private define ------------------------------------------------------------*/
  24:../main.cpp   **** /* Private macro -------------------------------------------------------------*/
  25:../main.cpp   **** /* Private variables ---------------------------------------------------------*/
  26:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
  27:../main.cpp   **** CT6963_GPIO_Interface g_Display;
  28:../main.cpp   **** CMenue	g_Menue(&g_Display);
  29:../main.cpp   **** //CFileHandler g_FileHandler;
  30:../main.cpp   **** 
  31:../main.cpp   **** /* Private function prototypes -----------------------------------------------*/
  32:../main.cpp   **** extern "C" {
  33:../main.cpp   **** 	void vApplicationTickHook( void );
  34:../main.cpp   **** 	void vApplicationIdleHook( void );
  35:../main.cpp   **** 	void vApplicationMallocFailedHook( void );
  36:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
  37:../main.cpp   **** } // extern "C"
  38:../main.cpp   **** /* Private functions ---------------------------------------------------------*/
  39:../main.cpp   **** 
  40:../main.cpp   **** 
  41:../main.cpp   **** 
  42:../main.cpp   **** /**
  43:../main.cpp   ****   * @brief  main function
  44:../main.cpp   ****   * @param  None
  45:../main.cpp   ****   * @retval None
  46:../main.cpp   ****   */
  47:../main.cpp   **** int main(void){
  82              		.loc 2 47 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              	.LCFI2:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 14, -4
  90              		.cfi_offset 7, -8
  91 0002 82B0     		sub	sp, sp, #8
  92              	.LCFI3:
  93              		.cfi_def_cfa_offset 16
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI4:
  96              		.cfi_def_cfa_register 7
  97              	.LBB2:
  48:../main.cpp   **** 	unsigned int u;
  49:../main.cpp   **** 
  50:../main.cpp   **** 	/**
  51:../main.cpp   **** 	 * create Led Heartbeat task with minimal stack size and priority
  52:../main.cpp   **** 	 * 1 higher than idle task
  53:../main.cpp   **** 	 */
  54:../main.cpp   **** 	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+5);
  98              		.loc 2 54 0
  99 0006 40F20000 		movw	r0, #:lower16:g_LedTast
 100 000a C0F20000 		movt	r0, #:upper16:g_LedTast
 101 000e 40F20001 		movw	r1, #:lower16:.LC0
 102 0012 C0F20001 		movt	r1, #:upper16:.LC0
 103 0016 4FF48072 		mov	r2, #256
 104 001a 4FF00503 		mov	r3, #5
 105 001e FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  55:../main.cpp   **** 	g_Menue.Create("Menue",configMINIMAL_STACK_SIZE * 2,tskIDLE_PRIORITY+3);
 106              		.loc 2 55 0
 107 0022 40F20000 		movw	r0, #:lower16:g_Menue
 108 0026 C0F20000 		movt	r0, #:upper16:g_Menue
 109 002a 40F20001 		movw	r1, #:lower16:.LC1
 110 002e C0F20001 		movt	r1, #:upper16:.LC1
 111 0032 4FF40072 		mov	r2, #512
 112 0036 4FF00303 		mov	r3, #3
 113 003a FFF7FEFF 		bl	_ZN12AManagedTask6CreateEPKctm
  56:../main.cpp   **** 	//g_FileHandler.Create("FileHandler",configMINIMAL_STACK_SIZE * 10,tskIDLE_PRIORITY+1);
  57:../main.cpp   **** 
  58:../main.cpp   **** 	/**
  59:../main.cpp   **** 	 * Initialise the hardware for all Tasks and
  60:../main.cpp   **** 	 * then FreeRTOS takes control of execution
  61:../main.cpp   **** 	 */
  62:../main.cpp   **** 	CFreeRTOS::InitHardwareForManagedTasks();
 114              		.loc 2 62 0
 115 003e FFF7FEFF 		bl	_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
  63:../main.cpp   **** 	CFreeRTOS::StartScheduler();
 116              		.loc 2 63 0
 117 0042 FFF7FEFF 		bl	_ZN9CFreeRTOS14StartSchedulerEv
 118              	.L3:
  64:../main.cpp   **** 
  65:../main.cpp   **** 	while(1){
  66:../main.cpp   **** 		u++;
 119              		.loc 2 66 0 discriminator 1
 120 0046 7B68     		ldr	r3, [r7, #4]
 121 0048 03F10103 		add	r3, r3, #1
 122 004c 7B60     		str	r3, [r7, #4]
  65:../main.cpp   **** 	while(1){
 123              		.loc 2 65 0 discriminator 1
 124 004e FAE7     		b	.L3
 125              	.LBE2:
 126              		.cfi_endproc
 127              	.LFE140:
 129              		.section	.text.vApplicationTickHook,"ax",%progbits
 130              		.align	2
 131              		.global	vApplicationTickHook
 132              		.thumb
 133              		.thumb_func
 135              	vApplicationTickHook:
 136              	.LFB141:
  67:../main.cpp   **** 	}
  68:../main.cpp   **** 
  69:../main.cpp   **** 	return 0;
  70:../main.cpp   **** 
  71:../main.cpp   **** }
  72:../main.cpp   **** 
  73:../main.cpp   **** extern "C" {
  74:../main.cpp   **** 
  75:../main.cpp   **** 	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
  76:../main.cpp   **** 	// ----------------------------------------------------------------------------
  77:../main.cpp   **** 	void vApplicationTickHook( void ) {
 137              		.loc 2 77 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 80B4     		push	{r7}
 143              	.LCFI5:
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 00AF     		add	r7, sp, #0
 147              	.LCFI6:
 148              		.cfi_def_cfa_register 7
  78:../main.cpp   **** 
  79:../main.cpp   **** 	}
 149              		.loc 2 79 0
 150 0004 BD46     		mov	sp, r7
 151 0006 80BC     		pop	{r7}
 152 0008 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE141:
 156 000a 00BF     		.section	.text.vApplicationIdleHook,"ax",%progbits
 157              		.align	2
 158              		.global	vApplicationIdleHook
 159              		.thumb
 160              		.thumb_func
 162              	vApplicationIdleHook:
 163              	.LFB142:
  80:../main.cpp   **** 
  81:../main.cpp   **** 	// This FreeRTOS call-back function gets when no other task is ready to execute.
  82:../main.cpp   **** 	// On a completely unloaded system this is getting called at over 2.5MHz!
  83:../main.cpp   **** 	// ----------------------------------------------------------------------------
  84:../main.cpp   **** 	void vApplicationIdleHook( void ) {
 164              		.loc 2 84 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 80B4     		push	{r7}
 170              	.LCFI7:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI8:
 175              		.cfi_def_cfa_register 7
  85:../main.cpp   **** 
  86:../main.cpp   **** 	}
 176              		.loc 2 86 0
 177 0004 BD46     		mov	sp, r7
 178 0006 80BC     		pop	{r7}
 179 0008 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE142:
 183 000a 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 184              		.align	2
 185              		.global	vApplicationMallocFailedHook
 186              		.thumb
 187              		.thumb_func
 189              	vApplicationMallocFailedHook:
 190              	.LFB143:
  87:../main.cpp   **** 
  88:../main.cpp   **** 	// A required FreeRTOS function.
  89:../main.cpp   **** 	// ----------------------------------------------------------------------------
  90:../main.cpp   **** 	void vApplicationMallocFailedHook( void ) {
 191              		.loc 2 90 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 0000 80B4     		push	{r7}
 197              	.LCFI9:
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 7, -4
 200 0002 00AF     		add	r7, sp, #0
 201              	.LCFI10:
 202              		.cfi_def_cfa_register 7
  91:../main.cpp   **** 		configASSERT( 0 );  // Latch on any failure / error.
  92:../main.cpp   **** 	}
 203              		.loc 2 92 0
 204 0004 BD46     		mov	sp, r7
 205 0006 80BC     		pop	{r7}
 206 0008 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE143:
 210 000a 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 211              		.align	2
 212              		.global	vApplicationStackOverflowHook
 213              		.thumb
 214              		.thumb_func
 216              	vApplicationStackOverflowHook:
 217              	.LFB144:
  93:../main.cpp   **** 
  94:../main.cpp   **** 	// A required FreeRTOS function. gets called on stack overflow
  95:../main.cpp   **** 	// ----------------------------------------------------------------------------
  96:../main.cpp   **** 	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 218              		.loc 2 96 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 8
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223 0000 80B4     		push	{r7}
 224              	.LCFI11:
 225              		.cfi_def_cfa_offset 4
 226              		.cfi_offset 7, -4
 227 0002 83B0     		sub	sp, sp, #12
 228              	.LCFI12:
 229              		.cfi_def_cfa_offset 16
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI13:
 232              		.cfi_def_cfa_register 7
 233 0006 7860     		str	r0, [r7, #4]
 234 0008 3960     		str	r1, [r7, #0]
 235              	.L8:
  97:../main.cpp   **** 		/* TODO, implement your code here */
  98:../main.cpp   **** 		while(1);
 236              		.loc 2 98 0 discriminator 1
 237 000a FEE7     		b	.L8
 238              		.cfi_endproc
 239              	.LFE144:
 241              		.section	.text.EVAL_AUDIO_GetSampleCallBack,"ax",%progbits
 242              		.align	2
 243              		.global	EVAL_AUDIO_GetSampleCallBack
 244              		.thumb
 245              		.thumb_func
 247              	EVAL_AUDIO_GetSampleCallBack:
 248              	.LFB145:
  99:../main.cpp   **** 	}
 100:../main.cpp   **** 
 101:../main.cpp   **** 	/* User Callbacks: user has to implement these functions in his code if
 102:../main.cpp   **** 	  they are needed. -----------------------------------------------------------*/
 103:../main.cpp   **** 
 104:../main.cpp   **** 	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 249              		.loc 2 104 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 1, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254 0000 80B4     		push	{r7}
 255              	.LCFI14:
 256              		.cfi_def_cfa_offset 4
 257              		.cfi_offset 7, -4
 258 0002 00AF     		add	r7, sp, #0
 259              	.LCFI15:
 260              		.cfi_def_cfa_register 7
 105:../main.cpp   **** 		return -1;
 261              		.loc 2 105 0
 262 0004 4FF6FF73 		movw	r3, #65535
 106:../main.cpp   **** 	}
 263              		.loc 2 106 0
 264 0008 1846     		mov	r0, r3
 265 000a BD46     		mov	sp, r7
 266 000c 80BC     		pop	{r7}
 267 000e 7047     		bx	lr
 268              		.cfi_endproc
 269              	.LFE145:
 271              		.section	.text.EVAL_AUDIO_TransferComplete_CallBack,"ax",%progbits
 272              		.align	2
 273              		.global	EVAL_AUDIO_TransferComplete_CallBack
 274              		.thumb
 275              		.thumb_func
 277              	EVAL_AUDIO_TransferComplete_CallBack:
 278              	.LFB146:
 107:../main.cpp   **** 
 108:../main.cpp   **** 	/* This function is called when the requested data has been completely transferred.
 109:../main.cpp   **** 	   In Normal mode (when  the define AUDIO_MAL_MODE_NORMAL is enabled) this function
 110:../main.cpp   **** 	   is called at the end of the whole audio file.
 111:../main.cpp   **** 	   In circular mode (when  the define AUDIO_MAL_MODE_CIRCULAR is enabled) this
 112:../main.cpp   **** 	   function is called at the end of the current buffer transmission. */
 113:../main.cpp   **** 	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 279              		.loc 2 113 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 8
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284 0000 80B4     		push	{r7}
 285              	.LCFI16:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 7, -4
 288 0002 83B0     		sub	sp, sp, #12
 289              	.LCFI17:
 290              		.cfi_def_cfa_offset 16
 291 0004 00AF     		add	r7, sp, #0
 292              	.LCFI18:
 293              		.cfi_def_cfa_register 7
 294 0006 7860     		str	r0, [r7, #4]
 295 0008 3960     		str	r1, [r7, #0]
 114:../main.cpp   **** 
 115:../main.cpp   **** 	}
 296              		.loc 2 115 0
 297 000a 07F10C07 		add	r7, r7, #12
 298 000e BD46     		mov	sp, r7
 299 0010 80BC     		pop	{r7}
 300 0012 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE146:
 304              		.section	.text.EVAL_AUDIO_HalfTransfer_CallBack,"ax",%progbits
 305              		.align	2
 306              		.global	EVAL_AUDIO_HalfTransfer_CallBack
 307              		.thumb
 308              		.thumb_func
 310              	EVAL_AUDIO_HalfTransfer_CallBack:
 311              	.LFB147:
 116:../main.cpp   **** 
 117:../main.cpp   **** 	/* This function is called when half of the requested buffer has been transferred
 118:../main.cpp   **** 	   This callback is useful in Circular mode only (when AUDIO_MAL_MODE_CIRCULAR
 119:../main.cpp   **** 	   define is enabled)*/
 120:../main.cpp   **** 	void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size){
 312              		.loc 2 120 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 8
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317 0000 80B4     		push	{r7}
 318              	.LCFI19:
 319              		.cfi_def_cfa_offset 4
 320              		.cfi_offset 7, -4
 321 0002 83B0     		sub	sp, sp, #12
 322              	.LCFI20:
 323              		.cfi_def_cfa_offset 16
 324 0004 00AF     		add	r7, sp, #0
 325              	.LCFI21:
 326              		.cfi_def_cfa_register 7
 327 0006 7860     		str	r0, [r7, #4]
 328 0008 3960     		str	r1, [r7, #0]
 121:../main.cpp   **** 
 122:../main.cpp   **** 	}
 329              		.loc 2 122 0
 330 000a 07F10C07 		add	r7, r7, #12
 331 000e BD46     		mov	sp, r7
 332 0010 80BC     		pop	{r7}
 333 0012 7047     		bx	lr
 334              		.cfi_endproc
 335              	.LFE147:
 337              		.section	.text.EVAL_AUDIO_Error_CallBack,"ax",%progbits
 338              		.align	2
 339              		.global	EVAL_AUDIO_Error_CallBack
 340              		.thumb
 341              		.thumb_func
 343              	EVAL_AUDIO_Error_CallBack:
 344              	.LFB148:
 123:../main.cpp   **** 
 124:../main.cpp   **** 	/* This function is called when an Interrupt due to transfer error on or peripheral
 125:../main.cpp   **** 	   error occurs. */
 126:../main.cpp   **** 	void EVAL_AUDIO_Error_CallBack(void* pData){
 345              		.loc 2 126 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 0000 80B4     		push	{r7}
 351              	.LCFI22:
 352              		.cfi_def_cfa_offset 4
 353              		.cfi_offset 7, -4
 354 0002 83B0     		sub	sp, sp, #12
 355              	.LCFI23:
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI24:
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
 127:../main.cpp   **** 
 128:../main.cpp   **** 	}
 361              		.loc 2 128 0
 362 0008 07F10C07 		add	r7, r7, #12
 363 000c BD46     		mov	sp, r7
 364 000e 80BC     		pop	{r7}
 365 0010 7047     		bx	lr
 366              		.cfi_endproc
 367              	.LFE148:
 369 0012 00BF     		.section	.text.Codec_TIMEOUT_UserCallback,"ax",%progbits
 370              		.align	2
 371              		.global	Codec_TIMEOUT_UserCallback
 372              		.thumb
 373              		.thumb_func
 375              	Codec_TIMEOUT_UserCallback:
 376              	.LFB149:
 129:../main.cpp   **** 
 130:../main.cpp   **** 	/* Codec_TIMEOUT_UserCallback() function is called whenever a timeout condition
 131:../main.cpp   **** 	   occurs during communication (waiting on an event that doesn't occur, bus
 132:../main.cpp   **** 	   errors, busy devices ...) on the Codec control interface (I2C).
 133:../main.cpp   **** 	   You can use the default timeout callback implementation by uncommenting the
 134:../main.cpp   **** 	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_audio_codec.h file.
 135:../main.cpp   **** 	   Typically the user implementation of this callback should reset I2C peripheral
 136:../main.cpp   **** 	   and re-initialize communication or in worst case reset all the application. */
 137:../main.cpp   **** 	uint32_t Codec_TIMEOUT_UserCallback(void){
 377              		.loc 2 137 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382 0000 80B4     		push	{r7}
 383              	.LCFI25:
 384              		.cfi_def_cfa_offset 4
 385              		.cfi_offset 7, -4
 386 0002 00AF     		add	r7, sp, #0
 387              	.LCFI26:
 388              		.cfi_def_cfa_register 7
 138:../main.cpp   **** 		return -1;
 389              		.loc 2 138 0
 390 0004 4FF0FF33 		mov	r3, #-1
 139:../main.cpp   **** 	}
 391              		.loc 2 139 0
 392 0008 1846     		mov	r0, r3
 393 000a BD46     		mov	sp, r7
 394 000c 80BC     		pop	{r7}
 395 000e 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE149:
 399              		.section	.text.LIS302DL_TIMEOUT_UserCallback,"ax",%progbits
 400              		.align	2
 401              		.global	LIS302DL_TIMEOUT_UserCallback
 402              		.thumb
 403              		.thumb_func
 405              	LIS302DL_TIMEOUT_UserCallback:
 406              	.LFB150:
 140:../main.cpp   **** 
 141:../main.cpp   **** 	/* LIS302DL_TIMEOUT_UserCallback() function is called whenever a timeout condition
 142:../main.cpp   **** 	   occure during communication (waiting transmit data register empty flag(TXE)
 143:../main.cpp   **** 	   or waiting receive data register is not empty flag (RXNE)).
 144:../main.cpp   **** 	   You can use the default timeout callback implementation by uncommenting the
 145:../main.cpp   **** 	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_lis302dl.h file.
 146:../main.cpp   **** 	   Typically the user implementation of this callback should reset MEMS peripheral
 147:../main.cpp   **** 	   and re-initialize communication or in worst case reset all the application. */
 148:../main.cpp   **** 	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
 407              		.loc 2 148 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412 0000 80B4     		push	{r7}
 413              	.LCFI27:
 414              		.cfi_def_cfa_offset 4
 415              		.cfi_offset 7, -4
 416 0002 00AF     		add	r7, sp, #0
 417              	.LCFI28:
 418              		.cfi_def_cfa_register 7
 149:../main.cpp   **** 		return -1;
 419              		.loc 2 149 0
 420 0004 4FF0FF33 		mov	r3, #-1
 150:../main.cpp   **** 	}
 421              		.loc 2 150 0
 422 0008 1846     		mov	r0, r3
 423 000a BD46     		mov	sp, r7
 424 000c 80BC     		pop	{r7}
 425 000e 7047     		bx	lr
 426              		.cfi_endproc
 427              	.LFE150:
 429              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 430              		.align	2
 431              		.thumb
 432              		.thumb_func
 434              	_Z41__static_initialization_and_destruction_0ii:
 435              	.LFB151:
 151:../main.cpp   **** } // extern "C"
 436              		.loc 2 151 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 0000 80B5     		push	{r7, lr}
 441              	.LCFI29:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 14, -4
 444              		.cfi_offset 7, -8
 445 0002 82B0     		sub	sp, sp, #8
 446              	.LCFI30:
 447              		.cfi_def_cfa_offset 16
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI31:
 450              		.cfi_def_cfa_register 7
 451 0006 7860     		str	r0, [r7, #4]
 452 0008 3960     		str	r1, [r7, #0]
 453              		.loc 2 151 0
 454 000a 7B68     		ldr	r3, [r7, #4]
 455 000c 012B     		cmp	r3, #1
 456 000e 49D1     		bne	.L15
 457              		.loc 2 151 0 is_stmt 0 discriminator 1
 458 0010 3A68     		ldr	r2, [r7, #0]
 459 0012 4FF6FF73 		movw	r3, #65535
 460 0016 9A42     		cmp	r2, r3
 461 0018 44D1     		bne	.L15
  26:../main.cpp   **** CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 462              		.loc 2 26 0 is_stmt 1
 463 001a 40F20000 		movw	r0, #:lower16:g_LedTast
 464 001e C0F20000 		movt	r0, #:upper16:g_LedTast
 465 0022 4FF03201 		mov	r1, #50
 466 0026 FFF7FEFF 		bl	_ZN24CLedHeartBeatSTM32F4DiscC1Em
 467 002a 40F20003 		movw	r3, #:lower16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 468 002e C0F20003 		movt	r3, #:upper16:_ZN24CLedHeartBeatSTM32F4DiscD1Ev
 469 0032 40F20000 		movw	r0, #:lower16:g_LedTast
 470 0036 C0F20000 		movt	r0, #:upper16:g_LedTast
 471 003a 1946     		mov	r1, r3
 472 003c 40F20002 		movw	r2, #:lower16:__dso_handle
 473 0040 C0F20002 		movt	r2, #:upper16:__dso_handle
 474 0044 FFF7FEFF 		bl	__aeabi_atexit
  27:../main.cpp   **** CT6963_GPIO_Interface g_Display;
 475              		.loc 2 27 0
 476 0048 40F20000 		movw	r0, #:lower16:g_Display
 477 004c C0F20000 		movt	r0, #:upper16:g_Display
 478 0050 FFF7FEFF 		bl	_ZN21CT6963_GPIO_InterfaceC1Ev
 479 0054 40F20003 		movw	r3, #:lower16:_ZN21CT6963_GPIO_InterfaceD1Ev
 480 0058 C0F20003 		movt	r3, #:upper16:_ZN21CT6963_GPIO_InterfaceD1Ev
 481 005c 40F20000 		movw	r0, #:lower16:g_Display
 482 0060 C0F20000 		movt	r0, #:upper16:g_Display
 483 0064 1946     		mov	r1, r3
 484 0066 40F20002 		movw	r2, #:lower16:__dso_handle
 485 006a C0F20002 		movt	r2, #:upper16:__dso_handle
 486 006e FFF7FEFF 		bl	__aeabi_atexit
  28:../main.cpp   **** CMenue	g_Menue(&g_Display);
 487              		.loc 2 28 0
 488 0072 40F20000 		movw	r0, #:lower16:g_Menue
 489 0076 C0F20000 		movt	r0, #:upper16:g_Menue
 490 007a 40F20001 		movw	r1, #:lower16:g_Display
 491 007e C0F20001 		movt	r1, #:upper16:g_Display
 492 0082 FFF7FEFF 		bl	_ZN6CMenueC1EP11CGraphicLCD
 493 0086 40F20003 		movw	r3, #:lower16:_ZN6CMenueD1Ev
 494 008a C0F20003 		movt	r3, #:upper16:_ZN6CMenueD1Ev
 495 008e 40F20000 		movw	r0, #:lower16:g_Menue
 496 0092 C0F20000 		movt	r0, #:upper16:g_Menue
 497 0096 1946     		mov	r1, r3
 498 0098 40F20002 		movw	r2, #:lower16:__dso_handle
 499 009c C0F20002 		movt	r2, #:upper16:__dso_handle
 500 00a0 FFF7FEFF 		bl	__aeabi_atexit
 501              	.L15:
 502              		.loc 2 151 0
 503 00a4 07F10807 		add	r7, r7, #8
 504 00a8 BD46     		mov	sp, r7
 505 00aa 80BD     		pop	{r7, pc}
 506              		.cfi_endproc
 507              	.LFE151:
 509              		.section	.rodata._ZL12c_FontNative,"a",%progbits
 510              		.align	2
 513              	_ZL12c_FontNative:
 514 0000 00000000 		.space	24
 514      00000000 
 514      00000000 
 514      00000000 
 514      00000000 
 515              		.section	.text._GLOBAL__sub_I_g_LedTast,"ax",%progbits
 516              		.align	2
 517              		.thumb
 518              		.thumb_func
 520              	_GLOBAL__sub_I_g_LedTast:
 521              	.LFB152:
 522              		.loc 2 151 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526 0000 80B5     		push	{r7, lr}
 527              	.LCFI32:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 14, -4
 530              		.cfi_offset 7, -8
 531 0002 00AF     		add	r7, sp, #0
 532              	.LCFI33:
 533              		.cfi_def_cfa_register 7
 534              		.loc 2 151 0
 535 0004 4FF00100 		mov	r0, #1
 536 0008 4FF6FF71 		movw	r1, #65535
 537 000c FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 538 0010 80BD     		pop	{r7, pc}
 539              		.cfi_endproc
 540              	.LFE152:
 542 0012 00BF     		.section	.init_array,"aw",%init_array
 543              		.align	2
 544 0000 00000000 		.word	_GLOBAL__sub_I_g_LedTast(target1)
 545              		.text
 546              	.Letext0:
 547              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 548              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source/portable
 549              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 550              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\GraphicLCD/CGraphicLCD.h"
 551              		.file 7 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
 552              		.file 8 "E:\\Desktop\\thundercyer-the-alarm-clock\\GraphicLCD/CT6963CDriver.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:19     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:24     .text._ZN9CFreeRTOS14StartSchedulerEv:00000000 _ZN9CFreeRTOS14StartSchedulerEv
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:50     .bss.g_LedTast:00000000 g_LedTast
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:47     .bss.g_LedTast:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:57     .bss.g_Display:00000000 g_Display
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:54     .bss.g_Display:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:64     .bss.g_Menue:00000000 g_Menue
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:61     .bss.g_Menue:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:67     .rodata:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:68     .rodata:00000000 .LC0
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:71     .rodata:00000010 .LC1
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:74     .text.main:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:79     .text.main:00000000 main
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:130    .text.vApplicationTickHook:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:135    .text.vApplicationTickHook:00000000 vApplicationTickHook
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:157    .text.vApplicationIdleHook:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:162    .text.vApplicationIdleHook:00000000 vApplicationIdleHook
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:184    .text.vApplicationMallocFailedHook:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:189    .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:211    .text.vApplicationStackOverflowHook:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:216    .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:242    .text.EVAL_AUDIO_GetSampleCallBack:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:247    .text.EVAL_AUDIO_GetSampleCallBack:00000000 EVAL_AUDIO_GetSampleCallBack
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:272    .text.EVAL_AUDIO_TransferComplete_CallBack:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:277    .text.EVAL_AUDIO_TransferComplete_CallBack:00000000 EVAL_AUDIO_TransferComplete_CallBack
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:305    .text.EVAL_AUDIO_HalfTransfer_CallBack:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:310    .text.EVAL_AUDIO_HalfTransfer_CallBack:00000000 EVAL_AUDIO_HalfTransfer_CallBack
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:338    .text.EVAL_AUDIO_Error_CallBack:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:343    .text.EVAL_AUDIO_Error_CallBack:00000000 EVAL_AUDIO_Error_CallBack
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:370    .text.Codec_TIMEOUT_UserCallback:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:375    .text.Codec_TIMEOUT_UserCallback:00000000 Codec_TIMEOUT_UserCallback
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:400    .text.LIS302DL_TIMEOUT_UserCallback:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:405    .text.LIS302DL_TIMEOUT_UserCallback:00000000 LIS302DL_TIMEOUT_UserCallback
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:430    .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:434    .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:510    .rodata._ZL12c_FontNative:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:513    .rodata._ZL12c_FontNative:00000000 _ZL12c_FontNative
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:516    .text._GLOBAL__sub_I_g_LedTast:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:520    .text._GLOBAL__sub_I_g_LedTast:00000000 _GLOBAL__sub_I_g_LedTast
C:\Users\Alex\AppData\Local\Temp\cczVcQRw.s:543    .init_array:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskStartScheduler
_ZN12AManagedTask6CreateEPKctm
_ZN9CFreeRTOS27InitHardwareForManagedTasksEv
_ZN24CLedHeartBeatSTM32F4DiscC1Em
_ZN24CLedHeartBeatSTM32F4DiscD1Ev
__dso_handle
__aeabi_atexit
_ZN21CT6963_GPIO_InterfaceC1Ev
_ZN21CT6963_GPIO_InterfaceD1Ev
_ZN6CMenueC1EP11CGraphicLCD
_ZN6CMenueD1Ev
