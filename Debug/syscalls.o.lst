   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"syscalls.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	__malloc_margin
  19              		.section	.data.__malloc_margin,"aw",%progbits
  20              		.align	2
  23              	__malloc_margin:
  24 0000 00010000 		.word	256
  25              		.comm	__brkval,4,4
  26              		.section	.text._exit,"ax",%progbits
  27              		.align	2
  28              		.global	_exit
  29              		.thumb
  30              		.thumb_func
  32              	_exit:
  33              	.LFB110:
  34              		.file 1 "../syscalls.c"
   1:../syscalls.c **** #include "syscalls.h"
   2:../syscalls.c **** #include "stm32f4xx.h"
   3:../syscalls.c **** #include "FreeRTOS.h"
   4:../syscalls.c **** #include <unistd.h>
   5:../syscalls.c **** #include <stdlib.h>
   6:../syscalls.c **** #include <errno.h>
   7:../syscalls.c **** #include <string.h>
   8:../syscalls.c **** #include <sys/stat.h>
   9:../syscalls.c **** #include <sys/time.h>
  10:../syscalls.c **** 
  11:../syscalls.c **** size_t   __malloc_margin = 256;
  12:../syscalls.c **** char    *__brkval;
  13:../syscalls.c **** 
  14:../syscalls.c **** void _exit(int code)
  15:../syscalls.c **** {
  35              		.loc 1 15 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 8
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  40 0000 80B4     		push	{r7}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 4
  43              		.cfi_offset 7, -4
  44 0002 83B0     		sub	sp, sp, #12
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 16
  47 0004 00AF     		add	r7, sp, #0
  48              	.LCFI2:
  49              		.cfi_def_cfa_register 7
  50 0006 7860     		str	r0, [r7, #4]
  51              	.L2:
  16:../syscalls.c ****     for (;;);
  52              		.loc 1 16 0 discriminator 1
  53 0008 FEE7     		b	.L2
  54              		.cfi_endproc
  55              	.LFE110:
  57 000a 00BF     		.section	.text._read_r,"ax",%progbits
  58              		.align	2
  59              		.global	_read_r
  60              		.thumb
  61              		.thumb_func
  63              	_read_r:
  64              	.LFB111:
  17:../syscalls.c **** }
  18:../syscalls.c **** 
  19:../syscalls.c **** 
  20:../syscalls.c **** ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
  21:../syscalls.c **** {
  65              		.loc 1 21 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 16
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70 0000 80B4     		push	{r7}
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 7, -4
  74 0002 85B0     		sub	sp, sp, #20
  75              	.LCFI4:
  76              		.cfi_def_cfa_offset 24
  77 0004 00AF     		add	r7, sp, #0
  78              	.LCFI5:
  79              		.cfi_def_cfa_register 7
  80 0006 F860     		str	r0, [r7, #12]
  81 0008 B960     		str	r1, [r7, #8]
  82 000a 7A60     		str	r2, [r7, #4]
  83 000c 3B60     		str	r3, [r7, #0]
  22:../syscalls.c ****     //return uart_read_r(r, fd, ptr, len);
  23:../syscalls.c **** 	/**
  24:../syscalls.c **** 	 * printf mapping function
  25:../syscalls.c **** 	 */
  26:../syscalls.c **** 	return 0;
  84              		.loc 1 26 0
  85 000e 4FF00003 		mov	r3, #0
  27:../syscalls.c **** }
  86              		.loc 1 27 0
  87 0012 1846     		mov	r0, r3
  88 0014 07F11407 		add	r7, r7, #20
  89 0018 BD46     		mov	sp, r7
  90 001a 80BC     		pop	{r7}
  91 001c 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE111:
  95 001e 00BF     		.section	.text._write_r,"ax",%progbits
  96              		.align	2
  97              		.global	_write_r
  98              		.thumb
  99              		.thumb_func
 101              	_write_r:
 102              	.LFB112:
  28:../syscalls.c **** 
  29:../syscalls.c **** 
  30:../syscalls.c **** ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
  31:../syscalls.c **** {
 103              		.loc 1 31 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 16
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108 0000 80B4     		push	{r7}
 109              	.LCFI6:
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 7, -4
 112 0002 85B0     		sub	sp, sp, #20
 113              	.LCFI7:
 114              		.cfi_def_cfa_offset 24
 115 0004 00AF     		add	r7, sp, #0
 116              	.LCFI8:
 117              		.cfi_def_cfa_register 7
 118 0006 F860     		str	r0, [r7, #12]
 119 0008 B960     		str	r1, [r7, #8]
 120 000a 7A60     		str	r2, [r7, #4]
 121 000c 3B60     		str	r3, [r7, #0]
  32:../syscalls.c ****     //return uart_write_r(r, fd, ptr, len);
  33:../syscalls.c **** 	/**
  34:../syscalls.c **** 	 * printf maping function
  35:../syscalls.c **** 	 */
  36:../syscalls.c **** 	return 0;
 122              		.loc 1 36 0
 123 000e 4FF00003 		mov	r3, #0
  37:../syscalls.c **** }
 124              		.loc 1 37 0
 125 0012 1846     		mov	r0, r3
 126 0014 07F11407 		add	r7, r7, #20
 127 0018 BD46     		mov	sp, r7
 128 001a 80BC     		pop	{r7}
 129 001c 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE112:
 133 001e 00BF     		.section	.text._lseek_r,"ax",%progbits
 134              		.align	2
 135              		.global	_lseek_r
 136              		.thumb
 137              		.thumb_func
 139              	_lseek_r:
 140              	.LFB113:
  38:../syscalls.c **** 
  39:../syscalls.c **** 
  40:../syscalls.c **** off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
  41:../syscalls.c **** {
 141              		.loc 1 41 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 16
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 80B4     		push	{r7}
 147              	.LCFI9:
 148              		.cfi_def_cfa_offset 4
 149              		.cfi_offset 7, -4
 150 0002 85B0     		sub	sp, sp, #20
 151              	.LCFI10:
 152              		.cfi_def_cfa_offset 24
 153 0004 00AF     		add	r7, sp, #0
 154              	.LCFI11:
 155              		.cfi_def_cfa_register 7
 156 0006 F860     		str	r0, [r7, #12]
 157 0008 B960     		str	r1, [r7, #8]
 158 000a 7A60     		str	r2, [r7, #4]
 159 000c 3B60     		str	r3, [r7, #0]
  42:../syscalls.c **** 
  43:../syscalls.c ****     r->_errno = ENOSYS;
 160              		.loc 1 43 0
 161 000e FB68     		ldr	r3, [r7, #12]
 162 0010 4FF05802 		mov	r2, #88
 163 0014 1A60     		str	r2, [r3, #0]
  44:../syscalls.c ****     return -1;
 164              		.loc 1 44 0
 165 0016 4FF0FF33 		mov	r3, #-1
  45:../syscalls.c **** }
 166              		.loc 1 45 0
 167 001a 1846     		mov	r0, r3
 168 001c 07F11407 		add	r7, r7, #20
 169 0020 BD46     		mov	sp, r7
 170 0022 80BC     		pop	{r7}
 171 0024 7047     		bx	lr
 172              		.cfi_endproc
 173              	.LFE113:
 175 0026 00BF     		.section	.text._close_r,"ax",%progbits
 176              		.align	2
 177              		.global	_close_r
 178              		.thumb
 179              		.thumb_func
 181              	_close_r:
 182              	.LFB114:
  46:../syscalls.c **** 
  47:../syscalls.c **** 
  48:../syscalls.c **** int _close_r(struct _reent *r, int fd)
  49:../syscalls.c **** {
 183              		.loc 1 49 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188 0000 80B4     		push	{r7}
 189              	.LCFI12:
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 7, -4
 192 0002 83B0     		sub	sp, sp, #12
 193              	.LCFI13:
 194              		.cfi_def_cfa_offset 16
 195 0004 00AF     		add	r7, sp, #0
 196              	.LCFI14:
 197              		.cfi_def_cfa_register 7
 198 0006 7860     		str	r0, [r7, #4]
 199 0008 3960     		str	r1, [r7, #0]
  50:../syscalls.c ****     r->_errno = ENOSYS;
 200              		.loc 1 50 0
 201 000a 7B68     		ldr	r3, [r7, #4]
 202 000c 4FF05802 		mov	r2, #88
 203 0010 1A60     		str	r2, [r3, #0]
  51:../syscalls.c ****     return -1;
 204              		.loc 1 51 0
 205 0012 4FF0FF33 		mov	r3, #-1
  52:../syscalls.c **** }
 206              		.loc 1 52 0
 207 0016 1846     		mov	r0, r3
 208 0018 07F10C07 		add	r7, r7, #12
 209 001c BD46     		mov	sp, r7
 210 001e 80BC     		pop	{r7}
 211 0020 7047     		bx	lr
 212              		.cfi_endproc
 213              	.LFE114:
 215 0022 00BF     		.section	.text._fstat_r,"ax",%progbits
 216              		.align	2
 217              		.global	_fstat_r
 218              		.thumb
 219              		.thumb_func
 221              	_fstat_r:
 222              	.LFB115:
  53:../syscalls.c **** 
  54:../syscalls.c **** 
  55:../syscalls.c **** int _fstat_r(struct _reent *r, int fd, struct stat *st)
  56:../syscalls.c **** {
 223              		.loc 1 56 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 16
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228 0000 80B4     		push	{r7}
 229              	.LCFI15:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 7, -4
 232 0002 85B0     		sub	sp, sp, #20
 233              	.LCFI16:
 234              		.cfi_def_cfa_offset 24
 235 0004 00AF     		add	r7, sp, #0
 236              	.LCFI17:
 237              		.cfi_def_cfa_register 7
 238 0006 F860     		str	r0, [r7, #12]
 239 0008 B960     		str	r1, [r7, #8]
 240 000a 7A60     		str	r2, [r7, #4]
  57:../syscalls.c ****     if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 241              		.loc 1 57 0
 242 000c BB68     		ldr	r3, [r7, #8]
 243 000e 002B     		cmp	r3, #0
 244 0010 09DB     		blt	.L8
 245              		.loc 1 57 0 is_stmt 0 discriminator 1
 246 0012 BB68     		ldr	r3, [r7, #8]
 247 0014 022B     		cmp	r3, #2
 248 0016 06DC     		bgt	.L8
  58:../syscalls.c ****       st->st_mode = S_IFCHR;
 249              		.loc 1 58 0 is_stmt 1
 250 0018 7B68     		ldr	r3, [r7, #4]
 251 001a 4FF40052 		mov	r2, #8192
 252 001e 5A60     		str	r2, [r3, #4]
  59:../syscalls.c ****       return 0;
 253              		.loc 1 59 0
 254 0020 4FF00003 		mov	r3, #0
 255 0024 05E0     		b	.L9
 256              	.L8:
  60:../syscalls.c ****     }
  61:../syscalls.c **** 
  62:../syscalls.c ****     r->_errno = ENOSYS;
 257              		.loc 1 62 0
 258 0026 FB68     		ldr	r3, [r7, #12]
 259 0028 4FF05802 		mov	r2, #88
 260 002c 1A60     		str	r2, [r3, #0]
  63:../syscalls.c ****     return -1;
 261              		.loc 1 63 0
 262 002e 4FF0FF33 		mov	r3, #-1
 263              	.L9:
  64:../syscalls.c **** }
 264              		.loc 1 64 0
 265 0032 1846     		mov	r0, r3
 266 0034 07F11407 		add	r7, r7, #20
 267 0038 BD46     		mov	sp, r7
 268 003a 80BC     		pop	{r7}
 269 003c 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE115:
 273 003e 00BF     		.section	.text._isatty_r,"ax",%progbits
 274              		.align	2
 275              		.global	_isatty_r
 276              		.thumb
 277              		.thumb_func
 279              	_isatty_r:
 280              	.LFB116:
  65:../syscalls.c **** 
  66:../syscalls.c **** 
  67:../syscalls.c **** int _isatty_r(struct _reent *r, int fd)
  68:../syscalls.c **** {
 281              		.loc 1 68 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 8
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 0000 80B4     		push	{r7}
 287              	.LCFI18:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 7, -4
 290 0002 83B0     		sub	sp, sp, #12
 291              	.LCFI19:
 292              		.cfi_def_cfa_offset 16
 293 0004 00AF     		add	r7, sp, #0
 294              	.LCFI20:
 295              		.cfi_def_cfa_register 7
 296 0006 7860     		str	r0, [r7, #4]
 297 0008 3960     		str	r1, [r7, #0]
  69:../syscalls.c ****     return 1;
 298              		.loc 1 69 0
 299 000a 4FF00103 		mov	r3, #1
  70:../syscalls.c **** }
 300              		.loc 1 70 0
 301 000e 1846     		mov	r0, r3
 302 0010 07F10C07 		add	r7, r7, #12
 303 0014 BD46     		mov	sp, r7
 304 0016 80BC     		pop	{r7}
 305 0018 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE116:
 309 001a 00BF     		.section	.text._sbrk_r,"ax",%progbits
 310              		.align	2
 311              		.global	_sbrk_r
 312              		.thumb
 313              		.thumb_func
 315              	_sbrk_r:
 316              	.LFB117:
  71:../syscalls.c **** 
  72:../syscalls.c **** 
  73:../syscalls.c **** void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
  74:../syscalls.c **** {
 317              		.loc 1 74 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 16
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321              		@ link register save eliminated.
 322 0000 90B4     		push	{r4, r7}
 323              	.LCFI21:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 7, -4
 326              		.cfi_offset 4, -8
 327 0002 84B0     		sub	sp, sp, #16
 328              	.LCFI22:
 329              		.cfi_def_cfa_offset 24
 330 0004 00AF     		add	r7, sp, #0
 331              	.LCFI23:
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 334 0008 3960     		str	r1, [r7, #0]
  75:../syscalls.c ****     extern char end;   // provided by the linker script
  76:../syscalls.c **** 
  77:../syscalls.c ****     if (__brkval == 0)
 335              		.loc 1 77 0
 336 000a 40F20003 		movw	r3, #:lower16:__brkval
 337 000e C0F20003 		movt	r3, #:upper16:__brkval
 338 0012 1B68     		ldr	r3, [r3, #0]
 339 0014 002B     		cmp	r3, #0
 340 0016 08D1     		bne	.L12
  78:../syscalls.c ****         __brkval = &end;
 341              		.loc 1 78 0
 342 0018 40F20003 		movw	r3, #:lower16:__brkval
 343 001c C0F20003 		movt	r3, #:upper16:__brkval
 344 0020 40F20002 		movw	r2, #:lower16:end
 345 0024 C0F20002 		movt	r2, #:upper16:end
 346 0028 1A60     		str	r2, [r3, #0]
 347              	.L12:
  79:../syscalls.c **** 
  80:../syscalls.c ****     if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 348              		.loc 1 80 0
 349 002a 40F20003 		movw	r3, #:lower16:__brkval
 350 002e C0F20003 		movt	r3, #:upper16:__brkval
 351 0032 1A68     		ldr	r2, [r3, #0]
 352 0034 3B68     		ldr	r3, [r7, #0]
 353 0036 D218     		adds	r2, r2, r3
 354              	.LBB4:
 355              	.LBB5:
 356              		.file 2 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmFunc.h"
   1:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /**************************************************************************//**
   2:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @file     core_cmFunc.h
   3:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @version  V2.10
   5:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @date     26. July 2011
   6:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
   7:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @note
   8:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
  10:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @par
  11:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
  15:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @par
  16:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
  22:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  ******************************************************************************/
  23:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  24:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  27:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  28:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   @{
  32:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  33:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  34:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* ARM armcc specific functions */
  36:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  37:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif
  40:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  41:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  44:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Control Register
  45:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  46:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the Control Register.
  47:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  48:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Control Register value
  49:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  50:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  51:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  52:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regControl);
  54:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  55:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  56:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  57:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Control Register
  58:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  59:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  61:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  63:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  64:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  65:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regControl = control;
  67:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  68:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  69:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  70:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get ISPR Register
  71:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  72:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the ISPR Register.
  73:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  74:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               ISPR Register value
  75:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  76:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  77:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  78:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regIPSR);
  80:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  81:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  82:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  83:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get APSR Register
  84:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  85:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  87:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               APSR Register value
  88:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  89:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
  90:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  91:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regAPSR);
  93:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  94:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  95:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  96:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get xPSR Register
  97:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  98:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 100:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               xPSR Register value
 101:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 102:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 103:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 104:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regXPSR);
 106:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 107:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 108:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 109:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 111:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 113:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               PSP Register value
 114:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 115:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 116:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 117:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regProcessStackPointer);
 119:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 120:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 121:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 122:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 124:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 126:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 128:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 129:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 130:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 133:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 134:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 135:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 137:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 139:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               MSP Register value
 140:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 141:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 142:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 143:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regMainStackPointer);
 145:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 146:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 147:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 148:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 150:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 152:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 154:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 155:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 156:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 159:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 160:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 161:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Priority Mask
 162:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 163:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 165:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Priority Mask value
 166:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 167:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 168:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 169:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regPriMask);
 171:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 172:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 173:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 174:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Priority Mask
 175:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 176:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 178:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 180:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 181:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 182:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regPriMask = (priMask);
 184:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 185:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  
 186:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 187:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 189:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Enable FIQ
 190:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 191:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 194:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 196:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 197:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Disable FIQ
 198:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 199:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 202:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 204:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 205:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Base Priority
 206:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 207:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 209:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Base Priority register value
 210:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 211:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 212:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 213:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regBasePri);
 215:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 216:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 217:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 218:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Base Priority
 219:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 220:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 222:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 224:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 225:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 226:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 229:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  
 230:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 231:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Fault Mask
 232:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 233:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 235:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Fault Mask register value
 236:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 237:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 238:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 239:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regFaultMask);
 241:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 242:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 243:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 244:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Fault Mask
 245:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 246:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 248:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 250:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 252:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 255:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 256:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 258:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 259:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 261:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get FPSCR
 262:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 263:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 265:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 267:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 268:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 269:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regfpscr);
 272:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #else
 273:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****    return(0);
 274:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif
 275:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 276:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 277:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 278:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set FPSCR
 279:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 280:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 282:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 284:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 285:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 286:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regfpscr = (fpscr);
 289:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif
 290:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 291:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 292:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 294:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 295:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* IAR iccarm specific functions */
 297:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 298:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #include <cmsis_iar.h>
 299:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 300:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 301:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* GNU gcc specific functions */
 302:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 303:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 304:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 305:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 306:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 307:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 308:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 309:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 310:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("cpsie i");
 311:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 312:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 313:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 314:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 315:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 316:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 317:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 318:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 319:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 320:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 321:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("cpsid i");
 322:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 323:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 324:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 325:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Control Register
 326:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 327:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the Control Register.
 328:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 329:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Control Register value
 330:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 331:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 332:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 333:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 334:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 335:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 336:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 337:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 338:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 339:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 340:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Control Register
 341:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 342:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
 343:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 344:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
 345:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 346:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 347:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 348:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 349:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 350:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 351:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get ISPR Register
 353:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 354:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the ISPR Register.
 355:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 356:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               ISPR Register value
 357:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 358:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 359:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 360:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 361:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 362:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 363:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 364:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 365:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 366:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 367:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get APSR Register
 368:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 369:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
 370:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 371:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               APSR Register value
 372:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 373:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
 374:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 375:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 376:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 377:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 378:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 379:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 380:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 381:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 382:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get xPSR Register
 383:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 384:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
 385:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 386:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               xPSR Register value
 387:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 388:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
 389:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 390:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 391:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 392:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 393:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 394:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 395:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 396:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 397:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 398:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 399:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 400:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 401:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               PSP Register value
 402:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 403:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
 404:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 405:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t result;
 406:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 407:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 408:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 409:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 410:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  
 411:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 412:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 413:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 414:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 415:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 416:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 417:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 418:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
 419:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 420:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 421:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 422:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 423:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 424:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 425:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 426:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 427:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 428:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               MSP Register value
 429:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 430:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
 431:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 432:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t result;
 433:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 434:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 357              		.loc 2 434 0
 358              	@ 434 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmFunc.h" 1
 359 0038 EFF30884 		MRS r4, msp
 360              	
 361              	@ 0 "" 2
 435:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 362              		.loc 2 435 0
 363              		.thumb
 364 003c 2346     		mov	r3, r4
 365              		.loc 1 80 0
 366 003e 1946     		mov	r1, r3
 367              	.LBE5:
 368              	.LBE4:
 369 0040 40F20003 		movw	r3, #:lower16:__malloc_margin
 370 0044 C0F20003 		movt	r3, #:upper16:__malloc_margin
 371 0048 1B68     		ldr	r3, [r3, #0]
 372 004a CB1A     		subs	r3, r1, r3
 373 004c 9A42     		cmp	r2, r3
 374 004e 06D9     		bls	.L13
  81:../syscalls.c ****         r->_errno = ENOMEM;
 375              		.loc 1 81 0
 376 0050 7B68     		ldr	r3, [r7, #4]
 377 0052 4FF00C02 		mov	r2, #12
 378 0056 1A60     		str	r2, [r3, #0]
  82:../syscalls.c ****         return (void*)-1;
 379              		.loc 1 82 0
 380 0058 4FF0FF33 		mov	r3, #-1
 381 005c 12E0     		b	.L14
 382              	.L13:
  83:../syscalls.c ****     }
  84:../syscalls.c **** 
  85:../syscalls.c ****     void *ret = __brkval;
 383              		.loc 1 85 0
 384 005e 40F20003 		movw	r3, #:lower16:__brkval
 385 0062 C0F20003 		movt	r3, #:upper16:__brkval
 386 0066 1B68     		ldr	r3, [r3, #0]
 387 0068 FB60     		str	r3, [r7, #12]
  86:../syscalls.c ****     __brkval += incr;
 388              		.loc 1 86 0
 389 006a 40F20003 		movw	r3, #:lower16:__brkval
 390 006e C0F20003 		movt	r3, #:upper16:__brkval
 391 0072 1A68     		ldr	r2, [r3, #0]
 392 0074 3B68     		ldr	r3, [r7, #0]
 393 0076 D218     		adds	r2, r2, r3
 394 0078 40F20003 		movw	r3, #:lower16:__brkval
 395 007c C0F20003 		movt	r3, #:upper16:__brkval
 396 0080 1A60     		str	r2, [r3, #0]
  87:../syscalls.c **** 
  88:../syscalls.c ****     return ret;
 397              		.loc 1 88 0
 398 0082 FB68     		ldr	r3, [r7, #12]
 399              	.L14:
  89:../syscalls.c **** }
 400              		.loc 1 89 0
 401 0084 1846     		mov	r0, r3
 402 0086 07F11007 		add	r7, r7, #16
 403 008a BD46     		mov	sp, r7
 404 008c 90BC     		pop	{r4, r7}
 405 008e 7047     		bx	lr
 406              		.cfi_endproc
 407              	.LFE117:
 409              		.section	.text._kill_r,"ax",%progbits
 410              		.align	2
 411              		.global	_kill_r
 412              		.thumb
 413              		.thumb_func
 415              	_kill_r:
 416              	.LFB118:
  90:../syscalls.c **** 
  91:../syscalls.c **** 
  92:../syscalls.c **** int _kill_r(struct _reent *r, int pid, int signal)
  93:../syscalls.c **** {
 417              		.loc 1 93 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 16
 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422 0000 80B4     		push	{r7}
 423              	.LCFI24:
 424              		.cfi_def_cfa_offset 4
 425              		.cfi_offset 7, -4
 426 0002 85B0     		sub	sp, sp, #20
 427              	.LCFI25:
 428              		.cfi_def_cfa_offset 24
 429 0004 00AF     		add	r7, sp, #0
 430              	.LCFI26:
 431              		.cfi_def_cfa_register 7
 432 0006 F860     		str	r0, [r7, #12]
 433 0008 B960     		str	r1, [r7, #8]
 434 000a 7A60     		str	r2, [r7, #4]
  94:../syscalls.c ****     r->_errno = ENOSYS;
 435              		.loc 1 94 0
 436 000c FB68     		ldr	r3, [r7, #12]
 437 000e 4FF05802 		mov	r2, #88
 438 0012 1A60     		str	r2, [r3, #0]
  95:../syscalls.c ****     return -1;
 439              		.loc 1 95 0
 440 0014 4FF0FF33 		mov	r3, #-1
  96:../syscalls.c **** }
 441              		.loc 1 96 0
 442 0018 1846     		mov	r0, r3
 443 001a 07F11407 		add	r7, r7, #20
 444 001e BD46     		mov	sp, r7
 445 0020 80BC     		pop	{r7}
 446 0022 7047     		bx	lr
 447              		.cfi_endproc
 448              	.LFE118:
 450              		.section	.text._getpid_r,"ax",%progbits
 451              		.align	2
 452              		.global	_getpid_r
 453              		.thumb
 454              		.thumb_func
 456              	_getpid_r:
 457              	.LFB119:
  97:../syscalls.c **** 
  98:../syscalls.c **** 
  99:../syscalls.c **** int _getpid_r(struct _reent *r)
 100:../syscalls.c **** {
 458              		.loc 1 100 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 8
 461              		@ frame_needed = 1, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 463 0000 80B4     		push	{r7}
 464              	.LCFI27:
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 7, -4
 467 0002 83B0     		sub	sp, sp, #12
 468              	.LCFI28:
 469              		.cfi_def_cfa_offset 16
 470 0004 00AF     		add	r7, sp, #0
 471              	.LCFI29:
 472              		.cfi_def_cfa_register 7
 473 0006 7860     		str	r0, [r7, #4]
 101:../syscalls.c ****     r->_errno = ENOSYS;
 474              		.loc 1 101 0
 475 0008 7B68     		ldr	r3, [r7, #4]
 476 000a 4FF05802 		mov	r2, #88
 477 000e 1A60     		str	r2, [r3, #0]
 102:../syscalls.c ****     return -1;
 478              		.loc 1 102 0
 479 0010 4FF0FF33 		mov	r3, #-1
 103:../syscalls.c **** }
 480              		.loc 1 103 0
 481 0014 1846     		mov	r0, r3
 482 0016 07F10C07 		add	r7, r7, #12
 483 001a BD46     		mov	sp, r7
 484 001c 80BC     		pop	{r7}
 485 001e 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE119:
 489              		.section	.text.__malloc_lock,"ax",%progbits
 490              		.align	2
 491              		.global	__malloc_lock
 492              		.thumb
 493              		.thumb_func
 495              	__malloc_lock:
 496              	.LFB120:
 104:../syscalls.c **** 
 105:../syscalls.c **** 
 106:../syscalls.c **** void __malloc_lock(struct _reent *r)
 107:../syscalls.c **** {
 497              		.loc 1 107 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 8
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501 0000 80B5     		push	{r7, lr}
 502              	.LCFI30:
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 14, -4
 505              		.cfi_offset 7, -8
 506 0002 82B0     		sub	sp, sp, #8
 507              	.LCFI31:
 508              		.cfi_def_cfa_offset 16
 509 0004 00AF     		add	r7, sp, #0
 510              	.LCFI32:
 511              		.cfi_def_cfa_register 7
 512 0006 7860     		str	r0, [r7, #4]
 108:../syscalls.c ****     vPortEnterCritical();
 513              		.loc 1 108 0
 514 0008 FFF7FEFF 		bl	vPortEnterCritical
 109:../syscalls.c **** }
 515              		.loc 1 109 0
 516 000c 07F10807 		add	r7, r7, #8
 517 0010 BD46     		mov	sp, r7
 518 0012 80BD     		pop	{r7, pc}
 519              		.cfi_endproc
 520              	.LFE120:
 522              		.section	.text.__malloc_unlock,"ax",%progbits
 523              		.align	2
 524              		.global	__malloc_unlock
 525              		.thumb
 526              		.thumb_func
 528              	__malloc_unlock:
 529              	.LFB121:
 110:../syscalls.c **** 
 111:../syscalls.c **** 
 112:../syscalls.c **** void __malloc_unlock(struct _reent *r)
 113:../syscalls.c **** {
 530              		.loc 1 113 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 80B5     		push	{r7, lr}
 535              	.LCFI33:
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 14, -4
 538              		.cfi_offset 7, -8
 539 0002 82B0     		sub	sp, sp, #8
 540              	.LCFI34:
 541              		.cfi_def_cfa_offset 16
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI35:
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
 114:../syscalls.c ****     vPortExitCritical();
 546              		.loc 1 114 0
 547 0008 FFF7FEFF 		bl	vPortExitCritical
 115:../syscalls.c **** }
 548              		.loc 1 115 0
 549 000c 07F10807 		add	r7, r7, #8
 550 0010 BD46     		mov	sp, r7
 551 0012 80BD     		pop	{r7, pc}
 552              		.cfi_endproc
 553              	.LFE121:
 555              		.text
 556              	.Letext0:
 557              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/sys/lock.h"
 558              		.file 4 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/sys/_types.h"
 559              		.file 5 "e:\\elektronik\\toolchain\\yagarto\\bin\\../lib/gcc/arm-none-eabi/4.6.2/include/stddef.h"
 560              		.file 6 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/sys/reent.h"
 561              		.file 7 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 562              		.file 8 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/sys/types.h"
 563              		.file 9 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/sys/stat.h"
 564              		.file 10 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/reent.h"
 565              		.file 11 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/sys/unistd.h"
 566              		.file 12 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:23     .data.__malloc_margin:00000000 __malloc_margin
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:20     .data.__malloc_margin:00000000 $d
                            *COM*:00000004 __brkval
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:27     .text._exit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:32     .text._exit:00000000 _exit
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:58     .text._read_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:63     .text._read_r:00000000 _read_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:96     .text._write_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:101    .text._write_r:00000000 _write_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:134    .text._lseek_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:139    .text._lseek_r:00000000 _lseek_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:176    .text._close_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:181    .text._close_r:00000000 _close_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:216    .text._fstat_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:221    .text._fstat_r:00000000 _fstat_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:274    .text._isatty_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:279    .text._isatty_r:00000000 _isatty_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:310    .text._sbrk_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:315    .text._sbrk_r:00000000 _sbrk_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:410    .text._kill_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:415    .text._kill_r:00000000 _kill_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:451    .text._getpid_r:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:456    .text._getpid_r:00000000 _getpid_r
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:490    .text.__malloc_lock:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:495    .text.__malloc_lock:00000000 __malloc_lock
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:523    .text.__malloc_unlock:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccSm8ROe.s:528    .text.__malloc_unlock:00000000 __malloc_unlock
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
end
vPortEnterCritical
vPortExitCritical
