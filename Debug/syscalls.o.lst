   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"syscalls.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__malloc_margin
  20              		.section	.data.__malloc_margin,"aw",%progbits
  21              		.align	2
  24              	__malloc_margin:
  25 0000 00010000 		.word	256
  26              		.comm	__brkval,4,4
  27              		.text
  28              		.align	2
  29              		.global	_exit
  30              		.thumb
  31              		.thumb_func
  33              	_exit:
  34              	.LFB110:
  35              		.file 1 "../syscalls.c"
   1:../syscalls.c **** #include "syscalls.h"
   2:../syscalls.c **** #include "stm32f4xx.h"
   3:../syscalls.c **** #include "FreeRTOS.h"
   4:../syscalls.c **** #include <unistd.h>
   5:../syscalls.c **** #include <stdlib.h>
   6:../syscalls.c **** #include <errno.h>
   7:../syscalls.c **** #include <string.h>
   8:../syscalls.c **** #include <sys/stat.h>
   9:../syscalls.c **** #include <sys/time.h>
  10:../syscalls.c **** 
  11:../syscalls.c **** size_t   __malloc_margin = 256;
  12:../syscalls.c **** char    *__brkval;
  13:../syscalls.c **** 
  14:../syscalls.c **** void _exit(int code)
  15:../syscalls.c **** {
  36              		.loc 1 15 0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 8
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40              		@ link register save eliminated.
  41 0000 80B4     		push	{r7}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 4
  44              		.cfi_offset 7, -4
  45 0002 83B0     		sub	sp, sp, #12
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 16
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
  52              	.L2:
  16:../syscalls.c ****     for (;;);
  53              		.loc 1 16 0 discriminator 1
  54 0008 FEE7     		b	.L2
  55              		.cfi_endproc
  56              	.LFE110:
  58 000a 00BF     		.align	2
  59              		.global	_read_r
  60              		.thumb
  61              		.thumb_func
  63              	_read_r:
  64              	.LFB111:
  17:../syscalls.c **** }
  18:../syscalls.c **** 
  19:../syscalls.c **** 
  20:../syscalls.c **** ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
  21:../syscalls.c **** {
  65              		.loc 1 21 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 16
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70 000c 80B4     		push	{r7}
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 7, -4
  74 000e 85B0     		sub	sp, sp, #20
  75              	.LCFI4:
  76              		.cfi_def_cfa_offset 24
  77 0010 00AF     		add	r7, sp, #0
  78              	.LCFI5:
  79              		.cfi_def_cfa_register 7
  80 0012 F860     		str	r0, [r7, #12]
  81 0014 B960     		str	r1, [r7, #8]
  82 0016 7A60     		str	r2, [r7, #4]
  83 0018 3B60     		str	r3, [r7, #0]
  22:../syscalls.c ****     //return uart_read_r(r, fd, ptr, len);
  23:../syscalls.c **** 	/**
  24:../syscalls.c **** 	 * printf mapping function
  25:../syscalls.c **** 	 */
  26:../syscalls.c **** 	return 0;
  84              		.loc 1 26 0
  85 001a 4FF00003 		mov	r3, #0
  27:../syscalls.c **** }
  86              		.loc 1 27 0
  87 001e 1846     		mov	r0, r3
  88 0020 07F11407 		add	r7, r7, #20
  89 0024 BD46     		mov	sp, r7
  90 0026 80BC     		pop	{r7}
  91 0028 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE111:
  95 002a 00BF     		.align	2
  96              		.global	_write_r
  97              		.thumb
  98              		.thumb_func
 100              	_write_r:
 101              	.LFB112:
  28:../syscalls.c **** 
  29:../syscalls.c **** 
  30:../syscalls.c **** ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
  31:../syscalls.c **** {
 102              		.loc 1 31 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 16
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107 002c 80B4     		push	{r7}
 108              	.LCFI6:
 109              		.cfi_def_cfa_offset 4
 110              		.cfi_offset 7, -4
 111 002e 85B0     		sub	sp, sp, #20
 112              	.LCFI7:
 113              		.cfi_def_cfa_offset 24
 114 0030 00AF     		add	r7, sp, #0
 115              	.LCFI8:
 116              		.cfi_def_cfa_register 7
 117 0032 F860     		str	r0, [r7, #12]
 118 0034 B960     		str	r1, [r7, #8]
 119 0036 7A60     		str	r2, [r7, #4]
 120 0038 3B60     		str	r3, [r7, #0]
  32:../syscalls.c ****     //return uart_write_r(r, fd, ptr, len);
  33:../syscalls.c **** 	/**
  34:../syscalls.c **** 	 * printf maping function
  35:../syscalls.c **** 	 */
  36:../syscalls.c **** 	return 0;
 121              		.loc 1 36 0
 122 003a 4FF00003 		mov	r3, #0
  37:../syscalls.c **** }
 123              		.loc 1 37 0
 124 003e 1846     		mov	r0, r3
 125 0040 07F11407 		add	r7, r7, #20
 126 0044 BD46     		mov	sp, r7
 127 0046 80BC     		pop	{r7}
 128 0048 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE112:
 132 004a 00BF     		.align	2
 133              		.global	_lseek_r
 134              		.thumb
 135              		.thumb_func
 137              	_lseek_r:
 138              	.LFB113:
  38:../syscalls.c **** 
  39:../syscalls.c **** 
  40:../syscalls.c **** off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
  41:../syscalls.c **** {
 139              		.loc 1 41 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 16
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144 004c 80B4     		push	{r7}
 145              	.LCFI9:
 146              		.cfi_def_cfa_offset 4
 147              		.cfi_offset 7, -4
 148 004e 85B0     		sub	sp, sp, #20
 149              	.LCFI10:
 150              		.cfi_def_cfa_offset 24
 151 0050 00AF     		add	r7, sp, #0
 152              	.LCFI11:
 153              		.cfi_def_cfa_register 7
 154 0052 F860     		str	r0, [r7, #12]
 155 0054 B960     		str	r1, [r7, #8]
 156 0056 7A60     		str	r2, [r7, #4]
 157 0058 3B60     		str	r3, [r7, #0]
  42:../syscalls.c **** 
  43:../syscalls.c ****     r->_errno = ENOSYS;
 158              		.loc 1 43 0
 159 005a FB68     		ldr	r3, [r7, #12]
 160 005c 4FF05802 		mov	r2, #88
 161 0060 1A60     		str	r2, [r3, #0]
  44:../syscalls.c ****     return -1;
 162              		.loc 1 44 0
 163 0062 4FF0FF33 		mov	r3, #-1
  45:../syscalls.c **** }
 164              		.loc 1 45 0
 165 0066 1846     		mov	r0, r3
 166 0068 07F11407 		add	r7, r7, #20
 167 006c BD46     		mov	sp, r7
 168 006e 80BC     		pop	{r7}
 169 0070 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE113:
 173 0072 00BF     		.align	2
 174              		.global	_close_r
 175              		.thumb
 176              		.thumb_func
 178              	_close_r:
 179              	.LFB114:
  46:../syscalls.c **** 
  47:../syscalls.c **** 
  48:../syscalls.c **** int _close_r(struct _reent *r, int fd)
  49:../syscalls.c **** {
 180              		.loc 1 49 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 8
 183              		@ frame_needed = 1, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185 0074 80B4     		push	{r7}
 186              	.LCFI12:
 187              		.cfi_def_cfa_offset 4
 188              		.cfi_offset 7, -4
 189 0076 83B0     		sub	sp, sp, #12
 190              	.LCFI13:
 191              		.cfi_def_cfa_offset 16
 192 0078 00AF     		add	r7, sp, #0
 193              	.LCFI14:
 194              		.cfi_def_cfa_register 7
 195 007a 7860     		str	r0, [r7, #4]
 196 007c 3960     		str	r1, [r7, #0]
  50:../syscalls.c ****     r->_errno = ENOSYS;
 197              		.loc 1 50 0
 198 007e 7B68     		ldr	r3, [r7, #4]
 199 0080 4FF05802 		mov	r2, #88
 200 0084 1A60     		str	r2, [r3, #0]
  51:../syscalls.c ****     return -1;
 201              		.loc 1 51 0
 202 0086 4FF0FF33 		mov	r3, #-1
  52:../syscalls.c **** }
 203              		.loc 1 52 0
 204 008a 1846     		mov	r0, r3
 205 008c 07F10C07 		add	r7, r7, #12
 206 0090 BD46     		mov	sp, r7
 207 0092 80BC     		pop	{r7}
 208 0094 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE114:
 212 0096 00BF     		.align	2
 213              		.global	_fstat_r
 214              		.thumb
 215              		.thumb_func
 217              	_fstat_r:
 218              	.LFB115:
  53:../syscalls.c **** 
  54:../syscalls.c **** 
  55:../syscalls.c **** int _fstat_r(struct _reent *r, int fd, struct stat *st)
  56:../syscalls.c **** {
 219              		.loc 1 56 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 16
 222              		@ frame_needed = 1, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224 0098 80B4     		push	{r7}
 225              	.LCFI15:
 226              		.cfi_def_cfa_offset 4
 227              		.cfi_offset 7, -4
 228 009a 85B0     		sub	sp, sp, #20
 229              	.LCFI16:
 230              		.cfi_def_cfa_offset 24
 231 009c 00AF     		add	r7, sp, #0
 232              	.LCFI17:
 233              		.cfi_def_cfa_register 7
 234 009e F860     		str	r0, [r7, #12]
 235 00a0 B960     		str	r1, [r7, #8]
 236 00a2 7A60     		str	r2, [r7, #4]
  57:../syscalls.c ****     if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 237              		.loc 1 57 0
 238 00a4 BB68     		ldr	r3, [r7, #8]
 239 00a6 002B     		cmp	r3, #0
 240 00a8 09DB     		blt	.L8
 241              		.loc 1 57 0 is_stmt 0 discriminator 1
 242 00aa BB68     		ldr	r3, [r7, #8]
 243 00ac 022B     		cmp	r3, #2
 244 00ae 06DC     		bgt	.L8
  58:../syscalls.c ****       st->st_mode = S_IFCHR;
 245              		.loc 1 58 0 is_stmt 1
 246 00b0 7B68     		ldr	r3, [r7, #4]
 247 00b2 4FF40052 		mov	r2, #8192
 248 00b6 5A60     		str	r2, [r3, #4]
  59:../syscalls.c ****       return 0;
 249              		.loc 1 59 0
 250 00b8 4FF00003 		mov	r3, #0
 251 00bc 05E0     		b	.L9
 252              	.L8:
  60:../syscalls.c ****     }
  61:../syscalls.c **** 
  62:../syscalls.c ****     r->_errno = ENOSYS;
 253              		.loc 1 62 0
 254 00be FB68     		ldr	r3, [r7, #12]
 255 00c0 4FF05802 		mov	r2, #88
 256 00c4 1A60     		str	r2, [r3, #0]
  63:../syscalls.c ****     return -1;
 257              		.loc 1 63 0
 258 00c6 4FF0FF33 		mov	r3, #-1
 259              	.L9:
  64:../syscalls.c **** }
 260              		.loc 1 64 0
 261 00ca 1846     		mov	r0, r3
 262 00cc 07F11407 		add	r7, r7, #20
 263 00d0 BD46     		mov	sp, r7
 264 00d2 80BC     		pop	{r7}
 265 00d4 7047     		bx	lr
 266              		.cfi_endproc
 267              	.LFE115:
 269 00d6 00BF     		.align	2
 270              		.global	_isatty_r
 271              		.thumb
 272              		.thumb_func
 274              	_isatty_r:
 275              	.LFB116:
  65:../syscalls.c **** 
  66:../syscalls.c **** 
  67:../syscalls.c **** int _isatty_r(struct _reent *r, int fd)
  68:../syscalls.c **** {
 276              		.loc 1 68 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 8
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 00d8 80B4     		push	{r7}
 282              	.LCFI18:
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 7, -4
 285 00da 83B0     		sub	sp, sp, #12
 286              	.LCFI19:
 287              		.cfi_def_cfa_offset 16
 288 00dc 00AF     		add	r7, sp, #0
 289              	.LCFI20:
 290              		.cfi_def_cfa_register 7
 291 00de 7860     		str	r0, [r7, #4]
 292 00e0 3960     		str	r1, [r7, #0]
  69:../syscalls.c ****     return 1;
 293              		.loc 1 69 0
 294 00e2 4FF00103 		mov	r3, #1
  70:../syscalls.c **** }
 295              		.loc 1 70 0
 296 00e6 1846     		mov	r0, r3
 297 00e8 07F10C07 		add	r7, r7, #12
 298 00ec BD46     		mov	sp, r7
 299 00ee 80BC     		pop	{r7}
 300 00f0 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE116:
 304 00f2 00BF     		.align	2
 305              		.global	_sbrk_r
 306              		.thumb
 307              		.thumb_func
 309              	_sbrk_r:
 310              	.LFB117:
  71:../syscalls.c **** 
  72:../syscalls.c **** 
  73:../syscalls.c **** void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
  74:../syscalls.c **** {
 311              		.loc 1 74 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 16
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316 00f4 90B4     		push	{r4, r7}
 317              	.LCFI21:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 7, -4
 320              		.cfi_offset 4, -8
 321 00f6 84B0     		sub	sp, sp, #16
 322              	.LCFI22:
 323              		.cfi_def_cfa_offset 24
 324 00f8 00AF     		add	r7, sp, #0
 325              	.LCFI23:
 326              		.cfi_def_cfa_register 7
 327 00fa 7860     		str	r0, [r7, #4]
 328 00fc 3960     		str	r1, [r7, #0]
  75:../syscalls.c ****     extern char end;   // provided by the linker script
  76:../syscalls.c **** 
  77:../syscalls.c ****     if (__brkval == 0)
 329              		.loc 1 77 0
 330 00fe 40F20003 		movw	r3, #:lower16:__brkval
 331 0102 C0F20003 		movt	r3, #:upper16:__brkval
 332 0106 1B68     		ldr	r3, [r3, #0]
 333 0108 002B     		cmp	r3, #0
 334 010a 08D1     		bne	.L12
  78:../syscalls.c ****         __brkval = &end;
 335              		.loc 1 78 0
 336 010c 40F20003 		movw	r3, #:lower16:__brkval
 337 0110 C0F20003 		movt	r3, #:upper16:__brkval
 338 0114 40F20002 		movw	r2, #:lower16:end
 339 0118 C0F20002 		movt	r2, #:upper16:end
 340 011c 1A60     		str	r2, [r3, #0]
 341              	.L12:
  79:../syscalls.c **** 
  80:../syscalls.c ****     if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 342              		.loc 1 80 0
 343 011e 40F20003 		movw	r3, #:lower16:__brkval
 344 0122 C0F20003 		movt	r3, #:upper16:__brkval
 345 0126 1A68     		ldr	r2, [r3, #0]
 346 0128 3B68     		ldr	r3, [r7, #0]
 347 012a D218     		adds	r2, r2, r3
 348              	.LBB4:
 349              	.LBB5:
 350              		.file 2 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmFunc.h"
   1:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /**************************************************************************//**
   2:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @file     core_cmFunc.h
   3:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @version  V2.10
   5:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @date     26. July 2011
   6:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
   7:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @note
   8:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
  10:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @par
  11:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
  15:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * @par
  16:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  *
  22:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  ******************************************************************************/
  23:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  24:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  27:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  28:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   @{
  32:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  33:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  34:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* ARM armcc specific functions */
  36:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  37:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif
  40:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  41:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  44:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Control Register
  45:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  46:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the Control Register.
  47:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  48:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Control Register value
  49:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  50:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  51:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  52:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regControl);
  54:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  55:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  56:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  57:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Control Register
  58:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  59:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  61:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  63:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  64:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  65:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regControl = control;
  67:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  68:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  69:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  70:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get ISPR Register
  71:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  72:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the ISPR Register.
  73:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  74:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               ISPR Register value
  75:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  76:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  77:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  78:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regIPSR);
  80:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  81:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  82:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  83:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get APSR Register
  84:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  85:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  87:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               APSR Register value
  88:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
  89:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
  90:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
  91:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regAPSR);
  93:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
  94:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  95:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  96:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get xPSR Register
  97:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
  98:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 100:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               xPSR Register value
 101:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 102:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 103:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 104:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regXPSR);
 106:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 107:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 108:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 109:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 111:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 113:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               PSP Register value
 114:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 115:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 116:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 117:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regProcessStackPointer);
 119:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 120:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 121:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 122:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 124:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 126:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 128:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 129:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 130:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 133:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 134:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 135:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 137:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 139:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               MSP Register value
 140:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 141:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 142:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 143:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regMainStackPointer);
 145:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 146:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 147:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 148:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 150:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 152:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 154:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 155:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 156:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 159:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 160:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 161:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Priority Mask
 162:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 163:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 165:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Priority Mask value
 166:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 167:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 168:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 169:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regPriMask);
 171:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 172:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 173:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 174:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Priority Mask
 175:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 176:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 178:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 180:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 181:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 182:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regPriMask = (priMask);
 184:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 185:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  
 186:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 187:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 189:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Enable FIQ
 190:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 191:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 194:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 196:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 197:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Disable FIQ
 198:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 199:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 202:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 204:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 205:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Base Priority
 206:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 207:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 209:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Base Priority register value
 210:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 211:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 212:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 213:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regBasePri);
 215:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 216:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 217:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 218:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Base Priority
 219:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 220:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 222:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 224:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 225:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 226:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 229:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  
 230:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 231:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Fault Mask
 232:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 233:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 235:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Fault Mask register value
 236:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 237:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 238:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 239:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regFaultMask);
 241:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 242:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 243:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 244:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Fault Mask
 245:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 246:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 248:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 250:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 252:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 255:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 256:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 258:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 259:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 261:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get FPSCR
 262:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 263:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 265:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 267:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 268:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 269:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(__regfpscr);
 272:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #else
 273:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****    return(0);
 274:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif
 275:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 276:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 277:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 278:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set FPSCR
 279:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 280:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 282:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 284:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 285:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 286:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __regfpscr = (fpscr);
 289:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif
 290:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 291:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 292:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 294:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 295:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* IAR iccarm specific functions */
 297:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 298:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #include <cmsis_iar.h>
 299:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 300:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 301:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /* GNU gcc specific functions */
 302:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 303:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 304:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 305:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 306:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 307:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 308:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 309:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 310:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("cpsie i");
 311:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 312:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 313:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 314:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 315:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 316:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 317:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 318:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 319:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 320:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 321:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("cpsid i");
 322:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 323:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 324:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 325:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Control Register
 326:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 327:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the Control Register.
 328:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 329:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               Control Register value
 330:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 331:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 332:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 333:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 334:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 335:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 336:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 337:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 338:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 339:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 340:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Control Register
 341:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 342:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
 343:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 344:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
 345:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 346:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 347:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 348:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 349:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 350:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 351:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get ISPR Register
 353:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 354:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the ISPR Register.
 355:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 356:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               ISPR Register value
 357:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 358:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 359:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 360:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 361:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 362:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 363:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 364:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 365:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 366:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 367:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get APSR Register
 368:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 369:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
 370:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 371:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               APSR Register value
 372:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 373:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
 374:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 375:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 376:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 377:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 378:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 379:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 380:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 381:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 382:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get xPSR Register
 383:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 384:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
 385:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 386:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               xPSR Register value
 387:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 388:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
 389:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 390:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   uint32_t result;
 391:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 392:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 393:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 394:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 395:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 396:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 397:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 398:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 399:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 400:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 401:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               PSP Register value
 402:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 403:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
 404:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 405:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t result;
 406:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 407:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 408:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 409:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 410:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  
 411:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 412:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 413:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 414:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 415:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 416:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 417:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 418:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
 419:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 420:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 421:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** }
 422:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 423:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 424:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 425:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 426:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 427:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 428:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****     \return               MSP Register value
 429:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****  */
 430:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
 431:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** {
 432:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   register uint32_t result;
 433:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h **** 
 434:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 351              		.loc 2 434 0
 352              	@ 434 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmFunc.h" 1
 353 012c EFF30884 		MRS r4, msp
 354              	
 355              	@ 0 "" 2
 435:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmFunc.h ****   return(result);
 356              		.loc 2 435 0
 357              		.thumb
 358 0130 2346     		mov	r3, r4
 359              		.loc 1 80 0
 360 0132 1946     		mov	r1, r3
 361              	.LBE5:
 362              	.LBE4:
 363 0134 40F20003 		movw	r3, #:lower16:__malloc_margin
 364 0138 C0F20003 		movt	r3, #:upper16:__malloc_margin
 365 013c 1B68     		ldr	r3, [r3, #0]
 366 013e CB1A     		subs	r3, r1, r3
 367 0140 9A42     		cmp	r2, r3
 368 0142 06D9     		bls	.L13
  81:../syscalls.c ****         r->_errno = ENOMEM;
 369              		.loc 1 81 0
 370 0144 7B68     		ldr	r3, [r7, #4]
 371 0146 4FF00C02 		mov	r2, #12
 372 014a 1A60     		str	r2, [r3, #0]
  82:../syscalls.c ****         return (void*)-1;
 373              		.loc 1 82 0
 374 014c 4FF0FF33 		mov	r3, #-1
 375 0150 12E0     		b	.L14
 376              	.L13:
  83:../syscalls.c ****     }
  84:../syscalls.c **** 
  85:../syscalls.c ****     void *ret = __brkval;
 377              		.loc 1 85 0
 378 0152 40F20003 		movw	r3, #:lower16:__brkval
 379 0156 C0F20003 		movt	r3, #:upper16:__brkval
 380 015a 1B68     		ldr	r3, [r3, #0]
 381 015c FB60     		str	r3, [r7, #12]
  86:../syscalls.c ****     __brkval += incr;
 382              		.loc 1 86 0
 383 015e 40F20003 		movw	r3, #:lower16:__brkval
 384 0162 C0F20003 		movt	r3, #:upper16:__brkval
 385 0166 1A68     		ldr	r2, [r3, #0]
 386 0168 3B68     		ldr	r3, [r7, #0]
 387 016a D218     		adds	r2, r2, r3
 388 016c 40F20003 		movw	r3, #:lower16:__brkval
 389 0170 C0F20003 		movt	r3, #:upper16:__brkval
 390 0174 1A60     		str	r2, [r3, #0]
  87:../syscalls.c **** 
  88:../syscalls.c ****     return ret;
 391              		.loc 1 88 0
 392 0176 FB68     		ldr	r3, [r7, #12]
 393              	.L14:
  89:../syscalls.c **** }
 394              		.loc 1 89 0
 395 0178 1846     		mov	r0, r3
 396 017a 07F11007 		add	r7, r7, #16
 397 017e BD46     		mov	sp, r7
 398 0180 90BC     		pop	{r4, r7}
 399 0182 7047     		bx	lr
 400              		.cfi_endproc
 401              	.LFE117:
 403              		.align	2
 404              		.global	_kill_r
 405              		.thumb
 406              		.thumb_func
 408              	_kill_r:
 409              	.LFB118:
  90:../syscalls.c **** 
  91:../syscalls.c **** 
  92:../syscalls.c **** int _kill_r(struct _reent *r, int pid, int signal)
  93:../syscalls.c **** {
 410              		.loc 1 93 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 16
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 415 0184 80B4     		push	{r7}
 416              	.LCFI24:
 417              		.cfi_def_cfa_offset 4
 418              		.cfi_offset 7, -4
 419 0186 85B0     		sub	sp, sp, #20
 420              	.LCFI25:
 421              		.cfi_def_cfa_offset 24
 422 0188 00AF     		add	r7, sp, #0
 423              	.LCFI26:
 424              		.cfi_def_cfa_register 7
 425 018a F860     		str	r0, [r7, #12]
 426 018c B960     		str	r1, [r7, #8]
 427 018e 7A60     		str	r2, [r7, #4]
  94:../syscalls.c ****     r->_errno = ENOSYS;
 428              		.loc 1 94 0
 429 0190 FB68     		ldr	r3, [r7, #12]
 430 0192 4FF05802 		mov	r2, #88
 431 0196 1A60     		str	r2, [r3, #0]
  95:../syscalls.c ****     return -1;
 432              		.loc 1 95 0
 433 0198 4FF0FF33 		mov	r3, #-1
  96:../syscalls.c **** }
 434              		.loc 1 96 0
 435 019c 1846     		mov	r0, r3
 436 019e 07F11407 		add	r7, r7, #20
 437 01a2 BD46     		mov	sp, r7
 438 01a4 80BC     		pop	{r7}
 439 01a6 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE118:
 443              		.align	2
 444              		.global	_getpid_r
 445              		.thumb
 446              		.thumb_func
 448              	_getpid_r:
 449              	.LFB119:
  97:../syscalls.c **** 
  98:../syscalls.c **** 
  99:../syscalls.c **** int _getpid_r(struct _reent *r)
 100:../syscalls.c **** {
 450              		.loc 1 100 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 8
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 01a8 80B4     		push	{r7}
 456              	.LCFI27:
 457              		.cfi_def_cfa_offset 4
 458              		.cfi_offset 7, -4
 459 01aa 83B0     		sub	sp, sp, #12
 460              	.LCFI28:
 461              		.cfi_def_cfa_offset 16
 462 01ac 00AF     		add	r7, sp, #0
 463              	.LCFI29:
 464              		.cfi_def_cfa_register 7
 465 01ae 7860     		str	r0, [r7, #4]
 101:../syscalls.c ****     r->_errno = ENOSYS;
 466              		.loc 1 101 0
 467 01b0 7B68     		ldr	r3, [r7, #4]
 468 01b2 4FF05802 		mov	r2, #88
 469 01b6 1A60     		str	r2, [r3, #0]
 102:../syscalls.c ****     return -1;
 470              		.loc 1 102 0
 471 01b8 4FF0FF33 		mov	r3, #-1
 103:../syscalls.c **** }
 472              		.loc 1 103 0
 473 01bc 1846     		mov	r0, r3
 474 01be 07F10C07 		add	r7, r7, #12
 475 01c2 BD46     		mov	sp, r7
 476 01c4 80BC     		pop	{r7}
 477 01c6 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE119:
 481              		.align	2
 482              		.global	__malloc_lock
 483              		.thumb
 484              		.thumb_func
 486              	__malloc_lock:
 487              	.LFB120:
 104:../syscalls.c **** 
 105:../syscalls.c **** 
 106:../syscalls.c **** void __malloc_lock(struct _reent *r)
 107:../syscalls.c **** {
 488              		.loc 1 107 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 8
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492 01c8 80B5     		push	{r7, lr}
 493              	.LCFI30:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 14, -4
 496              		.cfi_offset 7, -8
 497 01ca 82B0     		sub	sp, sp, #8
 498              	.LCFI31:
 499              		.cfi_def_cfa_offset 16
 500 01cc 00AF     		add	r7, sp, #0
 501              	.LCFI32:
 502              		.cfi_def_cfa_register 7
 503 01ce 7860     		str	r0, [r7, #4]
 108:../syscalls.c ****     vPortEnterCritical();
 504              		.loc 1 108 0
 505 01d0 FFF7FEFF 		bl	vPortEnterCritical
 109:../syscalls.c **** }
 506              		.loc 1 109 0
 507 01d4 07F10807 		add	r7, r7, #8
 508 01d8 BD46     		mov	sp, r7
 509 01da 80BD     		pop	{r7, pc}
 510              		.cfi_endproc
 511              	.LFE120:
 513              		.align	2
 514              		.global	__malloc_unlock
 515              		.thumb
 516              		.thumb_func
 518              	__malloc_unlock:
 519              	.LFB121:
 110:../syscalls.c **** 
 111:../syscalls.c **** 
 112:../syscalls.c **** void __malloc_unlock(struct _reent *r)
 113:../syscalls.c **** {
 520              		.loc 1 113 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 01dc 80B5     		push	{r7, lr}
 525              	.LCFI33:
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 14, -4
 528              		.cfi_offset 7, -8
 529 01de 82B0     		sub	sp, sp, #8
 530              	.LCFI34:
 531              		.cfi_def_cfa_offset 16
 532 01e0 00AF     		add	r7, sp, #0
 533              	.LCFI35:
 534              		.cfi_def_cfa_register 7
 535 01e2 7860     		str	r0, [r7, #4]
 114:../syscalls.c ****     vPortExitCritical();
 536              		.loc 1 114 0
 537 01e4 FFF7FEFF 		bl	vPortExitCritical
 115:../syscalls.c **** }
 538              		.loc 1 115 0
 539 01e8 07F10807 		add	r7, r7, #8
 540 01ec BD46     		mov	sp, r7
 541 01ee 80BD     		pop	{r7, pc}
 542              		.cfi_endproc
 543              	.LFE121:
 545              	.Letext0:
 546              		.file 3 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 547              		.file 4 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 548              		.file 5 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 549              		.file 6 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 550              		.file 7 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 551              		.file 8 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 552              		.file 9 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 553              		.file 10 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eab
 554              		.file 11 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eab
 555              		.file 12 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:24     .data.__malloc_margin:00000000 __malloc_margin
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:21     .data.__malloc_margin:00000000 $d
                            *COM*:00000004 __brkval
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:28     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:33     .text:00000000 _exit
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:63     .text:0000000c _read_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:100    .text:0000002c _write_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:137    .text:0000004c _lseek_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:178    .text:00000074 _close_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:217    .text:00000098 _fstat_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:274    .text:000000d8 _isatty_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:309    .text:000000f4 _sbrk_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:408    .text:00000184 _kill_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:448    .text:000001a8 _getpid_r
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:486    .text:000001c8 __malloc_lock
C:\Users\Alex\AppData\Local\Temp\ccW3wv0X.s:518    .text:000001dc __malloc_unlock
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
end
vPortEnterCritical
vPortExitCritical
