   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f4xx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SystemInit,"ax",%progbits
  19              		.align	1
  20              		.global	SystemInit
  21              		.thumb
  22              		.thumb_func
  24              	SystemInit:
  25              	.LFB110:
  26              		.file 1 "../system_stm32f4xx.c"
   1:../system_stm32f4xx.c **** /**
   2:../system_stm32f4xx.c ****   ******************************************************************************
   3:../system_stm32f4xx.c ****   * @file    system_stm32f4xx.c
   4:../system_stm32f4xx.c ****   * @author  MCD Application Team
   5:../system_stm32f4xx.c ****   * @version V1.0.0
   6:../system_stm32f4xx.c ****   * @date    19-September-2011
   7:../system_stm32f4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   8:../system_stm32f4xx.c ****   *          This file contains the system clock configuration for STM32F4xx devices,
   9:../system_stm32f4xx.c ****   *          and is generated by the clock configuration tool
  10:../system_stm32f4xx.c ****   *          stm32f4xx_Clock_Configuration_V1.0.0.xls
  11:../system_stm32f4xx.c ****   *             
  12:../system_stm32f4xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:../system_stm32f4xx.c ****   *     user application:
  14:../system_stm32f4xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:../system_stm32f4xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:../system_stm32f4xx.c ****   *                      depending on the configuration made in the clock xls tool. 
  17:../system_stm32f4xx.c ****   *                      This function is called at startup just after reset and 
  18:../system_stm32f4xx.c ****   *                      before branch to main program. This call is made inside
  19:../system_stm32f4xx.c ****   *                      the "startup_stm32f4xx.s" file.
  20:../system_stm32f4xx.c ****   *
  21:../system_stm32f4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:../system_stm32f4xx.c ****   *                                  by the user application to setup the SysTick 
  23:../system_stm32f4xx.c ****   *                                  timer or configure other parameters.
  24:../system_stm32f4xx.c ****   *                                     
  25:../system_stm32f4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:../system_stm32f4xx.c ****   *                                 be called whenever the core clock is changed
  27:../system_stm32f4xx.c ****   *                                 during program execution.
  28:../system_stm32f4xx.c ****   *
  29:../system_stm32f4xx.c ****   * 2. After each device reset the HSI (16 MHz) is used as system clock source.
  30:../system_stm32f4xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
  31:../system_stm32f4xx.c ****   *    configure the system clock before to branch to main program.
  32:../system_stm32f4xx.c ****   *
  33:../system_stm32f4xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:../system_stm32f4xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:../system_stm32f4xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:../system_stm32f4xx.c ****   *
  37:../system_stm32f4xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz, refer to "HSE_VALUE" define
  38:../system_stm32f4xx.c ****   *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
  39:../system_stm32f4xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:../system_stm32f4xx.c ****   *    value to your own configuration.
  41:../system_stm32f4xx.c ****   *
  42:../system_stm32f4xx.c ****   * 5. This file configures the system clock as follows:
  43:../system_stm32f4xx.c ****   *=============================================================================
  44:../system_stm32f4xx.c ****   *=============================================================================
  45:../system_stm32f4xx.c ****   *        Supported STM32F4xx device revision    | Rev A
  46:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  47:../system_stm32f4xx.c ****   *        System Clock source                    | PLL (HSE)
  48:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  49:../system_stm32f4xx.c ****   *        SYSCLK(Hz)                             | 168000000
  50:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  51:../system_stm32f4xx.c ****   *        HCLK(Hz)                               | 168000000
  52:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  53:../system_stm32f4xx.c ****   *        AHB Prescaler                          | 1
  54:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  55:../system_stm32f4xx.c ****   *        APB1 Prescaler                         | 4
  56:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  57:../system_stm32f4xx.c ****   *        APB2 Prescaler                         | 2
  58:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  59:../system_stm32f4xx.c ****   *        HSE Frequency(Hz)                      | 8000000
  60:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  61:../system_stm32f4xx.c ****   *        PLL_M                                  | 8
  62:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  63:../system_stm32f4xx.c ****   *        PLL_N                                  | 336
  64:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  65:../system_stm32f4xx.c ****   *        PLL_P                                  | 2
  66:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  67:../system_stm32f4xx.c ****   *        PLL_Q                                  | 7
  68:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  69:../system_stm32f4xx.c ****   *        PLLI2S_N                               | 192
  70:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  71:../system_stm32f4xx.c ****   *        PLLI2S_R                               | 5
  72:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  73:../system_stm32f4xx.c ****   *        I2S input clock(Hz)                    | 38400000
  74:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  75:../system_stm32f4xx.c ****   *        VDD(V)                                 | 3.3
  76:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  77:../system_stm32f4xx.c ****   *        High Performance mode                  | Enabled
  78:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  79:../system_stm32f4xx.c ****   *        Flash Latency(WS)                      | 5
  80:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  81:../system_stm32f4xx.c ****   *        Prefetch Buffer                        | OFF
  82:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  83:../system_stm32f4xx.c ****   *        Instruction cache                      | ON
  84:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  85:../system_stm32f4xx.c ****   *        Data cache                             | ON
  86:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  87:../system_stm32f4xx.c ****   *        Require 48MHz for USB OTG FS,          | Enabled
  88:../system_stm32f4xx.c ****   *        SDIO and RNG clock                     |
  89:../system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  90:../system_stm32f4xx.c ****   *=============================================================================
  91:../system_stm32f4xx.c ****   ****************************************************************************** 
  92:../system_stm32f4xx.c ****   * @attention
  93:../system_stm32f4xx.c ****   *
  94:../system_stm32f4xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  95:../system_stm32f4xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  96:../system_stm32f4xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  97:../system_stm32f4xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  98:../system_stm32f4xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  99:../system_stm32f4xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 100:../system_stm32f4xx.c ****   *
 101:../system_stm32f4xx.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 102:../system_stm32f4xx.c ****   ******************************************************************************
 103:../system_stm32f4xx.c ****   */
 104:../system_stm32f4xx.c **** 
 105:../system_stm32f4xx.c **** /** @addtogroup CMSIS
 106:../system_stm32f4xx.c ****   * @{
 107:../system_stm32f4xx.c ****   */
 108:../system_stm32f4xx.c **** 
 109:../system_stm32f4xx.c **** /** @addtogroup stm32f4xx_system
 110:../system_stm32f4xx.c ****   * @{
 111:../system_stm32f4xx.c ****   */  
 112:../system_stm32f4xx.c ****   
 113:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Includes
 114:../system_stm32f4xx.c ****   * @{
 115:../system_stm32f4xx.c ****   */
 116:../system_stm32f4xx.c **** 
 117:../system_stm32f4xx.c **** #include "stm32f4xx.h"
 118:../system_stm32f4xx.c **** 
 119:../system_stm32f4xx.c **** /**
 120:../system_stm32f4xx.c ****   * @}
 121:../system_stm32f4xx.c ****   */
 122:../system_stm32f4xx.c **** 
 123:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
 124:../system_stm32f4xx.c ****   * @{
 125:../system_stm32f4xx.c ****   */
 126:../system_stm32f4xx.c **** 
 127:../system_stm32f4xx.c **** /**
 128:../system_stm32f4xx.c ****   * @}
 129:../system_stm32f4xx.c ****   */
 130:../system_stm32f4xx.c **** 
 131:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Defines
 132:../system_stm32f4xx.c ****   * @{
 133:../system_stm32f4xx.c ****   */
 134:../system_stm32f4xx.c **** 
 135:../system_stm32f4xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 136:../system_stm32f4xx.c ****      on STM324xG_EVAL board as data memory  */
 137:../system_stm32f4xx.c **** /* #define DATA_IN_ExtSRAM */
 138:../system_stm32f4xx.c **** 
 139:../system_stm32f4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:../system_stm32f4xx.c ****      Internal SRAM. */
 141:../system_stm32f4xx.c **** /* #define VECT_TAB_SRAM */
 142:../system_stm32f4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
 143:../system_stm32f4xx.c ****                                    This value must be a multiple of 0x200. */
 144:../system_stm32f4xx.c **** 
 145:../system_stm32f4xx.c **** 
 146:../system_stm32f4xx.c **** /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
 147:../system_stm32f4xx.c **** #define PLL_M      8
 148:../system_stm32f4xx.c **** #define PLL_N      336
 149:../system_stm32f4xx.c **** 
 150:../system_stm32f4xx.c **** /* SYSCLK = PLL_VCO / PLL_P */
 151:../system_stm32f4xx.c **** #define PLL_P      2
 152:../system_stm32f4xx.c **** 
 153:../system_stm32f4xx.c **** /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
 154:../system_stm32f4xx.c **** #define PLL_Q      7
 155:../system_stm32f4xx.c **** 
 156:../system_stm32f4xx.c **** /* PLLI2S_VCO = (HSE_VALUE Or HSI_VALUE / PLL_M) * PLLI2S_N
 157:../system_stm32f4xx.c ****    I2SCLK = PLLI2S_VCO / PLLI2S_R */
 158:../system_stm32f4xx.c **** #define PLLI2S_N   192
 159:../system_stm32f4xx.c **** #define PLLI2S_R   5
 160:../system_stm32f4xx.c **** 
 161:../system_stm32f4xx.c **** /**
 162:../system_stm32f4xx.c ****   * @}
 163:../system_stm32f4xx.c ****   */
 164:../system_stm32f4xx.c **** 
 165:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Macros
 166:../system_stm32f4xx.c ****   * @{
 167:../system_stm32f4xx.c ****   */
 168:../system_stm32f4xx.c **** 
 169:../system_stm32f4xx.c **** /**
 170:../system_stm32f4xx.c ****   * @}
 171:../system_stm32f4xx.c ****   */
 172:../system_stm32f4xx.c **** 
 173:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Variables
 174:../system_stm32f4xx.c ****   * @{
 175:../system_stm32f4xx.c ****   */
 176:../system_stm32f4xx.c **** 
 177:../system_stm32f4xx.c ****   uint32_t SystemCoreClock = 168000000;
 178:../system_stm32f4xx.c **** 
 179:../system_stm32f4xx.c ****   __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 180:../system_stm32f4xx.c **** 
 181:../system_stm32f4xx.c **** /**
 182:../system_stm32f4xx.c ****   * @}
 183:../system_stm32f4xx.c ****   */
 184:../system_stm32f4xx.c **** 
 185:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
 186:../system_stm32f4xx.c ****   * @{
 187:../system_stm32f4xx.c ****   */
 188:../system_stm32f4xx.c **** 
 189:../system_stm32f4xx.c **** static void SetSysClock(void);
 190:../system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 191:../system_stm32f4xx.c ****   static void SystemInit_ExtMemCtl(void); 
 192:../system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 193:../system_stm32f4xx.c **** 
 194:../system_stm32f4xx.c **** /**
 195:../system_stm32f4xx.c ****   * @}
 196:../system_stm32f4xx.c ****   */
 197:../system_stm32f4xx.c **** 
 198:../system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Functions
 199:../system_stm32f4xx.c ****   * @{
 200:../system_stm32f4xx.c ****   */
 201:../system_stm32f4xx.c **** 
 202:../system_stm32f4xx.c **** /**
 203:../system_stm32f4xx.c ****   * @brief  Setup the microcontroller system
 204:../system_stm32f4xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 205:../system_stm32f4xx.c ****   *         SystemFrequency variable.
 206:../system_stm32f4xx.c ****   * @param  None
 207:../system_stm32f4xx.c ****   * @retval None
 208:../system_stm32f4xx.c ****   */
 209:../system_stm32f4xx.c **** void SystemInit(void)
 210:../system_stm32f4xx.c **** {
  27              		.loc 1 210 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 211:../system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 212:../system_stm32f4xx.c ****   /* Set HSION bit */
 213:../system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  32              		.loc 1 213 0
  33 0000 3A4B     		ldr	r3, .L14
  34 0002 1A68     		ldr	r2, [r3, #0]
  35 0004 42F00102 		orr	r2, r2, #1
  36 0008 1A60     		str	r2, [r3, #0]
 214:../system_stm32f4xx.c **** 
 215:../system_stm32f4xx.c ****   /* Reset CFGR register */
 216:../system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
  37              		.loc 1 216 0
  38 000a 0022     		movs	r2, #0
  39 000c 9A60     		str	r2, [r3, #8]
 217:../system_stm32f4xx.c **** 
 218:../system_stm32f4xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 219:../system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  40              		.loc 1 219 0
  41 000e 1968     		ldr	r1, [r3, #0]
  42 0010 21F08471 		bic	r1, r1, #17301504
  43 0014 21F48031 		bic	r1, r1, #65536
  44 0018 1960     		str	r1, [r3, #0]
 220:../system_stm32f4xx.c **** 
 221:../system_stm32f4xx.c ****   /* Reset PLLCFGR register */
 222:../system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
  45              		.loc 1 222 0
  46 001a 3549     		ldr	r1, .L14+4
  47 001c 5960     		str	r1, [r3, #4]
 223:../system_stm32f4xx.c **** 
 224:../system_stm32f4xx.c ****   /* Reset HSEBYP bit */
 225:../system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  48              		.loc 1 225 0
  49 001e 1968     		ldr	r1, [r3, #0]
 210:../system_stm32f4xx.c **** {
  50              		.loc 1 210 0
  51 0020 82B0     		sub	sp, sp, #8
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 8
  54              		.loc 1 225 0
  55 0022 21F48021 		bic	r1, r1, #262144
  56 0026 1960     		str	r1, [r3, #0]
 226:../system_stm32f4xx.c **** 
 227:../system_stm32f4xx.c ****   /* Disable all interrupts */
 228:../system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
  57              		.loc 1 228 0
  58 0028 DA60     		str	r2, [r3, #12]
  59              	.LBB4:
  60              	.LBB5:
 229:../system_stm32f4xx.c **** 
 230:../system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 231:../system_stm32f4xx.c ****   SystemInit_ExtMemCtl(); 
 232:../system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 233:../system_stm32f4xx.c ****          
 234:../system_stm32f4xx.c ****   /* Configure the System clock source, PLL Multiplier and Divider factors, 
 235:../system_stm32f4xx.c ****      AHB/APBx prescalers and Flash settings ----------------------------------*/
 236:../system_stm32f4xx.c ****   SetSysClock();
 237:../system_stm32f4xx.c **** 
 238:../system_stm32f4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 239:../system_stm32f4xx.c **** #ifdef VECT_TAB_SRAM
 240:../system_stm32f4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 241:../system_stm32f4xx.c **** #else
 242:../system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 243:../system_stm32f4xx.c **** #endif
 244:../system_stm32f4xx.c **** }
 245:../system_stm32f4xx.c **** 
 246:../system_stm32f4xx.c **** /**
 247:../system_stm32f4xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 248:../system_stm32f4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 249:../system_stm32f4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 250:../system_stm32f4xx.c ****   *         other parameters.
 251:../system_stm32f4xx.c ****   *           
 252:../system_stm32f4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 253:../system_stm32f4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 254:../system_stm32f4xx.c ****   *         based on this variable will be incorrect.         
 255:../system_stm32f4xx.c ****   *     
 256:../system_stm32f4xx.c ****   * @note   - The system frequency computed by this function is not the real 
 257:../system_stm32f4xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 258:../system_stm32f4xx.c ****   *           constant and the selected clock source:
 259:../system_stm32f4xx.c ****   *             
 260:../system_stm32f4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 261:../system_stm32f4xx.c ****   *                                              
 262:../system_stm32f4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 263:../system_stm32f4xx.c ****   *                          
 264:../system_stm32f4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 265:../system_stm32f4xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 266:../system_stm32f4xx.c ****   *         
 267:../system_stm32f4xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 268:../system_stm32f4xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 269:../system_stm32f4xx.c ****   *             in voltage and temperature.   
 270:../system_stm32f4xx.c ****   *    
 271:../system_stm32f4xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 272:../system_stm32f4xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 273:../system_stm32f4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 274:../system_stm32f4xx.c ****   *              have wrong result.
 275:../system_stm32f4xx.c ****   *                
 276:../system_stm32f4xx.c ****   *         - The result of this function could be not correct when using fractional
 277:../system_stm32f4xx.c ****   *           value for HSE crystal.
 278:../system_stm32f4xx.c ****   *     
 279:../system_stm32f4xx.c ****   * @param  None
 280:../system_stm32f4xx.c ****   * @retval None
 281:../system_stm32f4xx.c ****   */
 282:../system_stm32f4xx.c **** void SystemCoreClockUpdate(void)
 283:../system_stm32f4xx.c **** {
 284:../system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 285:../system_stm32f4xx.c ****   
 286:../system_stm32f4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 287:../system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 288:../system_stm32f4xx.c **** 
 289:../system_stm32f4xx.c ****   switch (tmp)
 290:../system_stm32f4xx.c ****   {
 291:../system_stm32f4xx.c ****     case 0x00:  /* HSI used as system clock source */
 292:../system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 293:../system_stm32f4xx.c ****       break;
 294:../system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 295:../system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 296:../system_stm32f4xx.c ****       break;
 297:../system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 298:../system_stm32f4xx.c **** 
 299:../system_stm32f4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 300:../system_stm32f4xx.c ****          SYSCLK = PLL_VCO / PLL_P
 301:../system_stm32f4xx.c ****          */    
 302:../system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 303:../system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 304:../system_stm32f4xx.c ****       
 305:../system_stm32f4xx.c ****       if (pllsource != 0)
 306:../system_stm32f4xx.c ****       {
 307:../system_stm32f4xx.c ****         /* HSE used as PLL clock source */
 308:../system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 309:../system_stm32f4xx.c ****       }
 310:../system_stm32f4xx.c ****       else
 311:../system_stm32f4xx.c ****       {
 312:../system_stm32f4xx.c ****         /* HSI used as PLL clock source */
 313:../system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 314:../system_stm32f4xx.c ****       }
 315:../system_stm32f4xx.c **** 
 316:../system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 317:../system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 318:../system_stm32f4xx.c ****       break;
 319:../system_stm32f4xx.c ****     default:
 320:../system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 321:../system_stm32f4xx.c ****       break;
 322:../system_stm32f4xx.c ****   }
 323:../system_stm32f4xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 324:../system_stm32f4xx.c ****   /* Get HCLK prescaler */
 325:../system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 326:../system_stm32f4xx.c ****   /* HCLK frequency */
 327:../system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 328:../system_stm32f4xx.c **** }
 329:../system_stm32f4xx.c **** 
 330:../system_stm32f4xx.c **** /**
 331:../system_stm32f4xx.c ****   * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
 332:../system_stm32f4xx.c ****   *         AHB/APBx prescalers and Flash settings
 333:../system_stm32f4xx.c ****   * @Note   This function should be called only once the RCC clock configuration  
 334:../system_stm32f4xx.c ****   *         is reset to the default reset state (done in SystemInit() function).   
 335:../system_stm32f4xx.c ****   * @param  None
 336:../system_stm32f4xx.c ****   * @retval None
 337:../system_stm32f4xx.c ****   */
 338:../system_stm32f4xx.c **** static void SetSysClock(void)
 339:../system_stm32f4xx.c **** {
 340:../system_stm32f4xx.c **** /******************************************************************************/
 341:../system_stm32f4xx.c **** /*            PLL (clocked by HSE) used as System clock source                */
 342:../system_stm32f4xx.c **** /******************************************************************************/
 343:../system_stm32f4xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  61              		.loc 1 343 0
  62 002a 0092     		str	r2, [sp, #0]
  63              	.LVL0:
  64 002c 0192     		str	r2, [sp, #4]
  65              	.LVL1:
 344:../system_stm32f4xx.c ****   
 345:../system_stm32f4xx.c ****   /* Enable HSE */
 346:../system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  66              		.loc 1 346 0
  67 002e 1A68     		ldr	r2, [r3, #0]
  68 0030 42F48032 		orr	r2, r2, #65536
  69 0034 1A60     		str	r2, [r3, #0]
  70              	.L3:
 347:../system_stm32f4xx.c ****  
 348:../system_stm32f4xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 349:../system_stm32f4xx.c ****   do
 350:../system_stm32f4xx.c ****   {
 351:../system_stm32f4xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  71              		.loc 1 351 0
  72 0036 1A68     		ldr	r2, [r3, #0]
  73 0038 02F40032 		and	r2, r2, #131072
  74              	.LVL2:
  75 003c 0192     		str	r2, [sp, #4]
  76              	.LVL3:
 352:../system_stm32f4xx.c ****     StartUpCounter++;
  77              		.loc 1 352 0
  78 003e 009A     		ldr	r2, [sp, #0]
  79              	.LVL4:
  80 0040 0132     		adds	r2, r2, #1
  81              	.LVL5:
  82 0042 0092     		str	r2, [sp, #0]
  83              	.LVL6:
 353:../system_stm32f4xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  84              		.loc 1 353 0
  85 0044 019A     		ldr	r2, [sp, #4]
  86              	.LVL7:
  87 0046 1AB9     		cbnz	r2, .L2
  88 0048 009A     		ldr	r2, [sp, #0]
  89 004a B2F5A06F 		cmp	r2, #1280
  90 004e F2D1     		bne	.L3
  91              	.L2:
 354:../system_stm32f4xx.c **** 
 355:../system_stm32f4xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
  92              		.loc 1 355 0
  93 0050 264B     		ldr	r3, .L14
  94 0052 1B68     		ldr	r3, [r3, #0]
  95 0054 13F40033 		ands	r3, r3, #131072
 356:../system_stm32f4xx.c ****   {
 357:../system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x01;
  96              		.loc 1 357 0
  97 0058 18BF     		it	ne
  98 005a 0123     		movne	r3, #1
 358:../system_stm32f4xx.c ****   }
 359:../system_stm32f4xx.c ****   else
 360:../system_stm32f4xx.c ****   {
 361:../system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x00;
  99              		.loc 1 361 0
 100 005c 0193     		str	r3, [sp, #4]
 362:../system_stm32f4xx.c ****   }
 363:../system_stm32f4xx.c **** 
 364:../system_stm32f4xx.c ****   if (HSEStatus == (uint32_t)0x01)
 101              		.loc 1 364 0
 102 005e 019B     		ldr	r3, [sp, #4]
 103 0060 012B     		cmp	r3, #1
 104 0062 2ED1     		bne	.L6
 365:../system_stm32f4xx.c ****   {
 366:../system_stm32f4xx.c ****     /* Enable high performance mode, System frequency up to 168 MHz */
 367:../system_stm32f4xx.c ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 105              		.loc 1 367 0
 106 0064 214B     		ldr	r3, .L14
 107 0066 1A6C     		ldr	r2, [r3, #64]
 108 0068 42F08052 		orr	r2, r2, #268435456
 109 006c 1A64     		str	r2, [r3, #64]
 368:../system_stm32f4xx.c ****     PWR->CR |= PWR_CR_PMODE;  
 110              		.loc 1 368 0
 111 006e 214A     		ldr	r2, .L14+8
 112 0070 1168     		ldr	r1, [r2, #0]
 113 0072 41F48041 		orr	r1, r1, #16384
 114 0076 1160     		str	r1, [r2, #0]
 369:../system_stm32f4xx.c **** 
 370:../system_stm32f4xx.c ****     /* HCLK = SYSCLK / 1*/
 371:../system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 115              		.loc 1 371 0
 116 0078 9A68     		ldr	r2, [r3, #8]
 117 007a 9A60     		str	r2, [r3, #8]
 372:../system_stm32f4xx.c ****       
 373:../system_stm32f4xx.c ****     /* PCLK2 = HCLK / 2*/
 374:../system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 118              		.loc 1 374 0
 119 007c 9A68     		ldr	r2, [r3, #8]
 120 007e 42F40042 		orr	r2, r2, #32768
 121 0082 9A60     		str	r2, [r3, #8]
 375:../system_stm32f4xx.c ****     
 376:../system_stm32f4xx.c ****     /* PCLK1 = HCLK / 4*/
 377:../system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 122              		.loc 1 377 0
 123 0084 9A68     		ldr	r2, [r3, #8]
 124 0086 42F4A052 		orr	r2, r2, #5120
 125 008a 9A60     		str	r2, [r3, #8]
 378:../system_stm32f4xx.c **** 
 379:../system_stm32f4xx.c ****     /* Configure the main PLL */
 380:../system_stm32f4xx.c ****     RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 126              		.loc 1 380 0
 127 008c 1A4A     		ldr	r2, .L14+12
 128 008e 5A60     		str	r2, [r3, #4]
 381:../system_stm32f4xx.c ****                    (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 382:../system_stm32f4xx.c **** 
 383:../system_stm32f4xx.c ****     /* Enable the main PLL */
 384:../system_stm32f4xx.c ****     RCC->CR |= RCC_CR_PLLON;
 129              		.loc 1 384 0
 130 0090 1A68     		ldr	r2, [r3, #0]
 131 0092 42F08072 		orr	r2, r2, #16777216
 132 0096 1A60     		str	r2, [r3, #0]
 133              	.L7:
 385:../system_stm32f4xx.c **** 
 386:../system_stm32f4xx.c ****     /* Wait till the main PLL is ready */
 387:../system_stm32f4xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 134              		.loc 1 387 0
 135 0098 1968     		ldr	r1, [r3, #0]
 136 009a 144A     		ldr	r2, .L14
 137 009c 8901     		lsls	r1, r1, #6
 138 009e FBD5     		bpl	.L7
 388:../system_stm32f4xx.c ****     {
 389:../system_stm32f4xx.c ****     }
 390:../system_stm32f4xx.c ****    
 391:../system_stm32f4xx.c ****     /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
 392:../system_stm32f4xx.c ****     FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 139              		.loc 1 392 0
 140 00a0 164B     		ldr	r3, .L14+16
 141 00a2 40F20561 		movw	r1, #1541
 142 00a6 1960     		str	r1, [r3, #0]
 393:../system_stm32f4xx.c **** 
 394:../system_stm32f4xx.c ****     /* Select the main PLL as system clock source */
 395:../system_stm32f4xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 143              		.loc 1 395 0
 144 00a8 9368     		ldr	r3, [r2, #8]
 145 00aa 23F00303 		bic	r3, r3, #3
 146 00ae 9360     		str	r3, [r2, #8]
 396:../system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_SW_PLL;
 147              		.loc 1 396 0
 148 00b0 9368     		ldr	r3, [r2, #8]
 149 00b2 43F00203 		orr	r3, r3, #2
 150 00b6 9360     		str	r3, [r2, #8]
 151              	.L8:
 397:../system_stm32f4xx.c **** 
 398:../system_stm32f4xx.c ****     /* Wait till the main PLL is used as system clock source */
 399:../system_stm32f4xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 152              		.loc 1 399 0
 153 00b8 9368     		ldr	r3, [r2, #8]
 154 00ba 03F00C03 		and	r3, r3, #12
 155 00be 082B     		cmp	r3, #8
 156 00c0 FAD1     		bne	.L8
 157              	.L6:
 400:../system_stm32f4xx.c ****     {
 401:../system_stm32f4xx.c ****     }
 402:../system_stm32f4xx.c ****   }
 403:../system_stm32f4xx.c ****   else
 404:../system_stm32f4xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock
 405:../system_stm32f4xx.c ****          configuration. User can add here some code to deal with this error */
 406:../system_stm32f4xx.c ****   }
 407:../system_stm32f4xx.c **** 
 408:../system_stm32f4xx.c **** /******************************************************************************/
 409:../system_stm32f4xx.c **** /*                        I2S clock configuration                             */
 410:../system_stm32f4xx.c **** /******************************************************************************/
 411:../system_stm32f4xx.c ****   /* PLLI2S clock used as I2S clock source */
 412:../system_stm32f4xx.c ****   RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 158              		.loc 1 412 0
 159 00c2 0A4B     		ldr	r3, .L14
 160 00c4 9A68     		ldr	r2, [r3, #8]
 161 00c6 22F40002 		bic	r2, r2, #8388608
 162 00ca 9A60     		str	r2, [r3, #8]
 413:../system_stm32f4xx.c **** 
 414:../system_stm32f4xx.c ****   /* Configure PLLI2S */
 415:../system_stm32f4xx.c ****   RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 163              		.loc 1 415 0
 164 00cc 0C4A     		ldr	r2, .L14+20
 165 00ce C3F88420 		str	r2, [r3, #132]
 416:../system_stm32f4xx.c **** 
 417:../system_stm32f4xx.c ****   /* Enable PLLI2S */
 418:../system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 166              		.loc 1 418 0
 167 00d2 1A68     		ldr	r2, [r3, #0]
 168 00d4 42F08062 		orr	r2, r2, #67108864
 169 00d8 1A60     		str	r2, [r3, #0]
 170              	.L9:
 419:../system_stm32f4xx.c **** 
 420:../system_stm32f4xx.c ****   /* Wait till PLLI2S is ready */
 421:../system_stm32f4xx.c ****   while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 171              		.loc 1 421 0
 172 00da 1A68     		ldr	r2, [r3, #0]
 173 00dc 1201     		lsls	r2, r2, #4
 174 00de FCD5     		bpl	.L9
 175              	.LBE5:
 176              	.LBE4:
 242:../system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 177              		.loc 1 242 0
 178 00e0 084B     		ldr	r3, .L14+24
 179 00e2 4FF00062 		mov	r2, #134217728
 180 00e6 9A60     		str	r2, [r3, #8]
 244:../system_stm32f4xx.c **** }
 181              		.loc 1 244 0
 182 00e8 02B0     		add	sp, sp, #8
 183 00ea 7047     		bx	lr
 184              	.L15:
 185              		.align	2
 186              	.L14:
 187 00ec 00380240 		.word	1073887232
 188 00f0 10300024 		.word	603992080
 189 00f4 00700040 		.word	1073770496
 190 00f8 08544007 		.word	121656328
 191 00fc 003C0240 		.word	1073888256
 192 0100 00300050 		.word	1342189568
 193 0104 00ED00E0 		.word	-536810240
 194              		.cfi_endproc
 195              	.LFE110:
 197              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 198              		.align	1
 199              		.global	SystemCoreClockUpdate
 200              		.thumb
 201              		.thumb_func
 203              	SystemCoreClockUpdate:
 204              	.LFB111:
 283:../system_stm32f4xx.c **** {
 205              		.loc 1 283 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LVL8:
 287:../system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 211              		.loc 1 287 0
 212 0000 184B     		ldr	r3, .L26
 213 0002 194A     		ldr	r2, .L26+4
 214 0004 9968     		ldr	r1, [r3, #8]
 215              	.LVL9:
 216 0006 01F00C01 		and	r1, r1, #12
 217              	.LVL10:
 289:../system_stm32f4xx.c ****   switch (tmp)
 218              		.loc 1 289 0
 219 000a 0429     		cmp	r1, #4
 295:../system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 220              		.loc 1 295 0
 221 000c 08BF     		it	eq
 222 000e 174B     		ldreq	r3, .L26+8
 289:../system_stm32f4xx.c ****   switch (tmp)
 223              		.loc 1 289 0
 224 0010 1BD0     		beq	.L25
 225 0012 0829     		cmp	r1, #8
 226 0014 18BF     		it	ne
 227 0016 164B     		ldrne	r3, .L26+12
 228 0018 17D1     		bne	.L25
 302:../system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 229              		.loc 1 302 0
 230 001a 5968     		ldr	r1, [r3, #4]
 231              	.LVL11:
 303:../system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 232              		.loc 1 303 0
 233 001c 5A68     		ldr	r2, [r3, #4]
 305:../system_stm32f4xx.c ****       if (pllsource != 0)
 234              		.loc 1 305 0
 235 001e 11F4800F 		tst	r1, #4194304
 308:../system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 236              		.loc 1 308 0
 237 0022 5968     		ldr	r1, [r3, #4]
 238              	.LVL12:
 239 0024 14BF     		ite	ne
 240 0026 114B     		ldrne	r3, .L26+8
 313:../system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 241              		.loc 1 313 0
 242 0028 114B     		ldreq	r3, .L26+12
 303:../system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 243              		.loc 1 303 0
 244 002a 02F03F02 		and	r2, r2, #63
 245              	.LVL13:
 313:../system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 246              		.loc 1 313 0
 247 002e B3FBF2F3 		udiv	r3, r3, r2
 316:../system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 248              		.loc 1 316 0
 249 0032 0C4A     		ldr	r2, .L26
 250              	.LVL14:
 251 0034 5268     		ldr	r2, [r2, #4]
 252 0036 C2F30142 		ubfx	r2, r2, #16, #2
 308:../system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 253              		.loc 1 308 0
 254 003a C1F38811 		ubfx	r1, r1, #6, #9
 316:../system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 255              		.loc 1 316 0
 256 003e 0132     		adds	r2, r2, #1
 257 0040 5200     		lsls	r2, r2, #1
 313:../system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 258              		.loc 1 313 0
 259 0042 4B43     		muls	r3, r1, r3
 260              	.LVL15:
 317:../system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 261              		.loc 1 317 0
 262 0044 B3FBF2F3 		udiv	r3, r3, r2
 263              	.LVL16:
 264 0048 074A     		ldr	r2, .L26+4
 265              	.L25:
 266 004a 1360     		str	r3, [r2, #0]
 325:../system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 267              		.loc 1 325 0
 268 004c 054B     		ldr	r3, .L26
 269 004e 9A68     		ldr	r2, [r3, #8]
 270 0050 054B     		ldr	r3, .L26+4
 271 0052 C2F30312 		ubfx	r2, r2, #4, #4
 272 0056 9A18     		adds	r2, r3, r2
 327:../system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 273              		.loc 1 327 0
 274 0058 1968     		ldr	r1, [r3, #0]
 325:../system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 275              		.loc 1 325 0
 276 005a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 277              	.LVL17:
 327:../system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 278              		.loc 1 327 0
 279 005c 31FA02F2 		lsrs	r2, r1, r2
 280              	.LVL18:
 281 0060 1A60     		str	r2, [r3, #0]
 328:../system_stm32f4xx.c **** }
 282              		.loc 1 328 0
 283 0062 7047     		bx	lr
 284              	.L27:
 285              		.align	2
 286              	.L26:
 287 0064 00380240 		.word	1073887232
 288 0068 00000000 		.word	.LANCHOR0
 289 006c 00127A00 		.word	8000000
 290 0070 0024F400 		.word	16000000
 291              		.cfi_endproc
 292              	.LFE111:
 294              		.global	AHBPrescTable
 295              		.global	SystemCoreClock
 296              		.data
 297              		.align	2
 298              		.set	.LANCHOR0,. + 0
 301              	SystemCoreClock:
 302 0000 007A030A 		.word	168000000
 305              	AHBPrescTable:
 306 0004 00       		.byte	0
 307 0005 00       		.byte	0
 308 0006 00       		.byte	0
 309 0007 00       		.byte	0
 310 0008 00       		.byte	0
 311 0009 00       		.byte	0
 312 000a 00       		.byte	0
 313 000b 00       		.byte	0
 314 000c 01       		.byte	1
 315 000d 02       		.byte	2
 316 000e 03       		.byte	3
 317 000f 04       		.byte	4
 318 0010 06       		.byte	6
 319 0011 07       		.byte	7
 320 0012 08       		.byte	8
 321 0013 09       		.byte	9
 322              		.text
 323              	.Letext0:
 324              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 325              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
 326              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 327              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/system_s
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f4xx.c
  C:\Temp\ccZ4yX1l.s:19     .text.SystemInit:00000000 $t
  C:\Temp\ccZ4yX1l.s:24     .text.SystemInit:00000000 SystemInit
  C:\Temp\ccZ4yX1l.s:187    .text.SystemInit:000000ec $d
  C:\Temp\ccZ4yX1l.s:198    .text.SystemCoreClockUpdate:00000000 $t
  C:\Temp\ccZ4yX1l.s:203    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
  C:\Temp\ccZ4yX1l.s:287    .text.SystemCoreClockUpdate:00000064 $d
  C:\Temp\ccZ4yX1l.s:305    .data:00000004 AHBPrescTable
  C:\Temp\ccZ4yX1l.s:301    .data:00000000 SystemCoreClock
  C:\Temp\ccZ4yX1l.s:297    .data:00000000 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
