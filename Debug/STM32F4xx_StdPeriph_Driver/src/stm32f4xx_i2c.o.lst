   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_i2c.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.I2C_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	I2C_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	I2C_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  27              		.loc 1 133 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 3, -8
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  37              		.loc 1 137 0
  38 0002 134B     		ldr	r3, .L6
  39 0004 9842     		cmp	r0, r3
  40 0006 07D1     		bne	.L2
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  41              		.loc 1 140 0
  42 0008 4FF40010 		mov	r0, #2097152
  43              	.LVL1:
  44 000c 0121     		movs	r1, #1
  45 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  46              		.loc 1 142 0
  47 0012 4FF40010 		mov	r0, #2097152
  48 0016 14E0     		b	.L5
  49              	.LVL2:
  50              	.L2:
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  51              		.loc 1 144 0
  52 0018 0E4B     		ldr	r3, .L6+4
  53 001a 9842     		cmp	r0, r3
  54 001c 07D1     		bne	.L3
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  55              		.loc 1 147 0
  56 001e 4FF48000 		mov	r0, #4194304
  57              	.LVL3:
  58 0022 0121     		movs	r1, #1
  59 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  60              		.loc 1 149 0
  61 0028 4FF48000 		mov	r0, #4194304
  62 002c 09E0     		b	.L5
  63              	.LVL4:
  64              	.L3:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  65              		.loc 1 153 0
  66 002e 0A4B     		ldr	r3, .L6+8
  67 0030 9842     		cmp	r0, r3
  68 0032 0BD1     		bne	.L1
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  69              		.loc 1 156 0
  70 0034 4FF40000 		mov	r0, #8388608
  71              	.LVL5:
  72 0038 0121     		movs	r1, #1
  73 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  74              		.loc 1 158 0
  75 003e 4FF40000 		mov	r0, #8388608
  76              	.L5:
  77 0042 0021     		movs	r1, #0
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  78              		.loc 1 161 0
  79 0044 BDE80840 		pop	{r3, lr}
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  80              		.loc 1 158 0
  81 0048 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  82              	.LVL6:
  83              	.L1:
  84 004c 08BD     		pop	{r3, pc}
  85              	.L7:
  86 004e 00BF     		.align	2
  87              	.L6:
  88 0050 00540040 		.word	1073763328
  89 0054 00580040 		.word	1073764352
  90 0058 005C0040 		.word	1073765376
  91              		.cfi_endproc
  92              	.LFE110:
  94              		.section	.text.I2C_Init,"ax",%progbits
  95              		.align	1
  96              		.global	I2C_Init
  97              		.thumb
  98              		.thumb_func
 100              	I2C_Init:
 101              	.LFB111:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 102              		.loc 1 176 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 16
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              	.LVL7:
 107 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 32
 110              		.cfi_offset 14, -4
 111              		.cfi_offset 6, -8
 112              		.cfi_offset 5, -12
 113              		.cfi_offset 4, -16
 114              		.cfi_offset 3, -20
 115              		.cfi_offset 2, -24
 116              		.cfi_offset 1, -28
 117              		.cfi_offset 0, -32
 118              		.loc 1 176 0
 119 0002 0446     		mov	r4, r0
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 120              		.loc 1 192 0
 121 0004 8688     		ldrh	r6, [r0, #4]
 122              	.LVL8:
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 123              		.loc 1 196 0
 124 0006 6846     		mov	r0, sp
 125              	.LVL9:
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 126              		.loc 1 176 0
 127 0008 0D46     		mov	r5, r1
 128              		.loc 1 196 0
 129 000a FFF7FEFF 		bl	RCC_GetClocksFreq
 130              	.LVL10:
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 131              		.loc 1 197 0
 132 000e 0299     		ldr	r1, [sp, #8]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 133              		.loc 1 199 0
 134 0010 2C48     		ldr	r0, .L16
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 135              		.loc 1 212 0
 136 0012 2B68     		ldr	r3, [r5, #0]
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 137              		.loc 1 194 0
 138 0014 26F03F06 		bic	r6, r6, #63
 139              	.LVL11:
 140 0018 3604     		lsls	r6, r6, #16
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 141              		.loc 1 199 0
 142 001a B1FBF0F0 		udiv	r0, r1, r0
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 143              		.loc 1 194 0
 144 001e 360C     		lsrs	r6, r6, #16
 145              	.LVL12:
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 146              		.loc 1 199 0
 147 0020 80B2     		uxth	r0, r0
 148              	.LVL13:
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 149              		.loc 1 200 0
 150 0022 0643     		orrs	r6, r6, r0
 151              	.LVL14:
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 152              		.loc 1 202 0
 153 0024 A680     		strh	r6, [r4, #4]	@ movhi
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 154              		.loc 1 206 0
 155 0026 2288     		ldrh	r2, [r4, #0]
 156 0028 22F00102 		bic	r2, r2, #1
 157 002c 1204     		lsls	r2, r2, #16
 158 002e 120C     		lsrs	r2, r2, #16
 159 0030 2280     		strh	r2, [r4, #0]	@ movhi
 160              	.LVL15:
 161              		.loc 1 212 0
 162 0032 254A     		ldr	r2, .L16+4
 163 0034 9342     		cmp	r3, r2
 164 0036 0AD8     		bhi	.L9
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 165              		.loc 1 215 0
 166 0038 5B00     		lsls	r3, r3, #1
 167 003a B1FBF3F3 		udiv	r3, r1, r3
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 168              		.loc 1 225 0
 169 003e 0130     		adds	r0, r0, #1
 170              	.LVL16:
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 171              		.loc 1 215 0
 172 0040 9BB2     		uxth	r3, r3
 173              	.LVL17:
 174              		.loc 1 225 0
 175 0042 80B2     		uxth	r0, r0
 176              	.LVL18:
 177 0044 2084     		strh	r0, [r4, #32]	@ movhi
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 178              		.loc 1 223 0
 179 0046 032B     		cmp	r3, #3
 180 0048 98BF     		it	ls
 181 004a 0423     		movls	r3, #4
 182              	.LVL19:
 183 004c 21E0     		b	.L11
 184              	.LVL20:
 185              	.L9:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 186              		.loc 1 232 0
 187 004e EE88     		ldrh	r6, [r5, #6]
 188 0050 4BF6FF72 		movw	r2, #49151
 189 0054 9642     		cmp	r6, r2
 190 0056 05D1     		bne	.L12
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 191              		.loc 1 235 0
 192 0058 0322     		movs	r2, #3
 193 005a 5343     		muls	r3, r2, r3
 194 005c B1FBF3F3 		udiv	r3, r1, r3
 195 0060 9BB2     		uxth	r3, r3
 196              	.LVL21:
 197 0062 06E0     		b	.L13
 198              	.LVL22:
 199              	.L12:
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 200              		.loc 1 240 0
 201 0064 1922     		movs	r2, #25
 202 0066 5343     		muls	r3, r2, r3
 203 0068 B1FBF3F3 		udiv	r3, r1, r3
 204 006c 9BB2     		uxth	r3, r3
 205              	.LVL23:
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 206              		.loc 1 242 0
 207 006e 43F48043 		orr	r3, r3, #16384
 208              	.LVL24:
 209              	.L13:
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 210              		.loc 1 246 0
 211 0072 1A05     		lsls	r2, r3, #20
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 212              		.loc 1 254 0
 213 0074 4FF49672 		mov	r2, #300
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 214              		.loc 1 249 0
 215 0078 08BF     		it	eq
 216 007a 43F00103 		orreq	r3, r3, #1
 217              	.LVL25:
 218              		.loc 1 254 0
 219 007e 5043     		muls	r0, r2, r0
 220              	.LVL26:
 221 0080 4FF47A72 		mov	r2, #1000
 222 0084 90FBF2F0 		sdiv	r0, r0, r2
 223 0088 0130     		adds	r0, r0, #1
 224 008a 80B2     		uxth	r0, r0
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 225              		.loc 1 252 0
 226 008c 43F40043 		orr	r3, r3, #32768
 227              	.LVL27:
 228              		.loc 1 254 0
 229 0090 2084     		strh	r0, [r4, #32]	@ movhi
 230              	.LVL28:
 231              	.L11:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 232              		.loc 1 258 0
 233 0092 A383     		strh	r3, [r4, #28]	@ movhi
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 234              		.loc 1 260 0
 235 0094 2388     		ldrh	r3, [r4, #0]
 236              	.LVL29:
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 237              		.loc 1 270 0
 238 0096 6989     		ldrh	r1, [r5, #10]
 239 0098 AA88     		ldrh	r2, [r5, #4]
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 240              		.loc 1 260 0
 241 009a 9BB2     		uxth	r3, r3
 242 009c 43F00103 		orr	r3, r3, #1
 243 00a0 2380     		strh	r3, [r4, #0]	@ movhi
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 244              		.loc 1 264 0
 245 00a2 2388     		ldrh	r3, [r4, #0]
 246              	.LVL30:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 247              		.loc 1 266 0
 248 00a4 23F48063 		bic	r3, r3, #1024
 249              	.LVL31:
 250 00a8 23F00A03 		bic	r3, r3, #10
 251 00ac 1B04     		lsls	r3, r3, #16
 252              		.loc 1 270 0
 253 00ae 0A43     		orrs	r2, r2, r1
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 254              		.loc 1 266 0
 255 00b0 1B0C     		lsrs	r3, r3, #16
 256              	.LVL32:
 257              		.loc 1 270 0
 258 00b2 1343     		orrs	r3, r3, r2
 259              	.LVL33:
 260 00b4 9BB2     		uxth	r3, r3
 261              	.LVL34:
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 262              		.loc 1 272 0
 263 00b6 2380     		strh	r3, [r4, #0]	@ movhi
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 264              		.loc 1 276 0
 265 00b8 2A89     		ldrh	r2, [r5, #8]
 266 00ba AB89     		ldrh	r3, [r5, #12]
 267              	.LVL35:
 268 00bc 1343     		orrs	r3, r3, r2
 269 00be 9BB2     		uxth	r3, r3
 270 00c0 2381     		strh	r3, [r4, #8]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 271              		.loc 1 277 0
 272 00c2 7FBD     		pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 273              	.L17:
 274              		.align	2
 275              	.L16:
 276 00c4 40420F00 		.word	1000000
 277 00c8 A0860100 		.word	100000
 278              		.cfi_endproc
 279              	.LFE111:
 281              		.section	.text.I2C_StructInit,"ax",%progbits
 282              		.align	1
 283              		.global	I2C_StructInit
 284              		.thumb
 285              		.thumb_func
 287              	I2C_StructInit:
 288              	.LFB112:
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 289              		.loc 1 285 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LVL36:
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 295              		.loc 1 288 0
 296 0000 41F28833 		movw	r3, #5000
 297 0004 0360     		str	r3, [r0, #0]
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 298              		.loc 1 290 0
 299 0006 0023     		movs	r3, #0
 300 0008 8380     		strh	r3, [r0, #4]	@ movhi
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 301              		.loc 1 292 0
 302 000a 4BF6FF72 		movw	r2, 49151	@ movhi
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 303              		.loc 1 294 0
 304 000e 0381     		strh	r3, [r0, #8]	@ movhi
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 305              		.loc 1 296 0
 306 0010 4381     		strh	r3, [r0, #10]	@ movhi
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 307              		.loc 1 298 0
 308 0012 4FF48043 		mov	r3, #16384	@ movhi
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 309              		.loc 1 292 0
 310 0016 C280     		strh	r2, [r0, #6]	@ movhi
 311              		.loc 1 298 0
 312 0018 8381     		strh	r3, [r0, #12]	@ movhi
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 313              		.loc 1 299 0
 314 001a 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE112:
 318              		.section	.text.I2C_Cmd,"ax",%progbits
 319              		.align	1
 320              		.global	I2C_Cmd
 321              		.thumb
 322              		.thumb_func
 324              	I2C_Cmd:
 325              	.LFB113:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 326              		.loc 1 309 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 331              	.LVL37:
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 332              		.loc 1 316 0
 333 0000 0388     		ldrh	r3, [r0, #0]
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 334              		.loc 1 313 0
 335 0002 19B1     		cbz	r1, .L20
 336              		.loc 1 316 0
 337 0004 9BB2     		uxth	r3, r3
 338 0006 43F00103 		orr	r3, r3, #1
 339 000a 03E0     		b	.L22
 340              	.L20:
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 341              		.loc 1 321 0
 342 000c 23F00103 		bic	r3, r3, #1
 343 0010 1B04     		lsls	r3, r3, #16
 344 0012 1B0C     		lsrs	r3, r3, #16
 345              	.L22:
 346 0014 0380     		strh	r3, [r0, #0]	@ movhi
 347 0016 7047     		bx	lr
 348              		.cfi_endproc
 349              	.LFE113:
 351              		.section	.text.I2C_GenerateSTART,"ax",%progbits
 352              		.align	1
 353              		.global	I2C_GenerateSTART
 354              		.thumb
 355              		.thumb_func
 357              	I2C_GenerateSTART:
 358              	.LFB114:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 359              		.loc 1 333 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364              	.LVL38:
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 365              		.loc 1 340 0
 366 0000 0388     		ldrh	r3, [r0, #0]
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 367              		.loc 1 337 0
 368 0002 19B1     		cbz	r1, .L24
 369              		.loc 1 340 0
 370 0004 9BB2     		uxth	r3, r3
 371 0006 43F48073 		orr	r3, r3, #256
 372 000a 03E0     		b	.L26
 373              	.L24:
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 374              		.loc 1 345 0
 375 000c 23F48073 		bic	r3, r3, #256
 376 0010 1B04     		lsls	r3, r3, #16
 377 0012 1B0C     		lsrs	r3, r3, #16
 378              	.L26:
 379 0014 0380     		strh	r3, [r0, #0]	@ movhi
 380 0016 7047     		bx	lr
 381              		.cfi_endproc
 382              	.LFE114:
 384              		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 385              		.align	1
 386              		.global	I2C_GenerateSTOP
 387              		.thumb
 388              		.thumb_func
 390              	I2C_GenerateSTOP:
 391              	.LFB115:
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 392              		.loc 1 357 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397              	.LVL39:
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 398              		.loc 1 364 0
 399 0000 0388     		ldrh	r3, [r0, #0]
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 400              		.loc 1 361 0
 401 0002 19B1     		cbz	r1, .L28
 402              		.loc 1 364 0
 403 0004 9BB2     		uxth	r3, r3
 404 0006 43F40073 		orr	r3, r3, #512
 405 000a 03E0     		b	.L30
 406              	.L28:
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 407              		.loc 1 369 0
 408 000c 23F40073 		bic	r3, r3, #512
 409 0010 1B04     		lsls	r3, r3, #16
 410 0012 1B0C     		lsrs	r3, r3, #16
 411              	.L30:
 412 0014 0380     		strh	r3, [r0, #0]	@ movhi
 413 0016 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE115:
 417              		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 418              		.align	1
 419              		.global	I2C_Send7bitAddress
 420              		.thumb
 421              		.thumb_func
 423              	I2C_Send7bitAddress:
 424              	.LFB116:
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 425              		.loc 1 385 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430              	.LVL40:
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 431              		.loc 1 390 0
 432 0000 12B1     		cbz	r2, .L32
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 433              		.loc 1 393 0
 434 0002 41F00101 		orr	r1, r1, #1
 435              	.LVL41:
 436 0006 01E0     		b	.L33
 437              	.L32:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 438              		.loc 1 398 0
 439 0008 01F0FE01 		and	r1, r1, #254
 440              	.LVL42:
 441              	.L33:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 442              		.loc 1 401 0
 443 000c 0182     		strh	r1, [r0, #16]	@ movhi
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 444              		.loc 1 402 0
 445 000e 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE116:
 449              		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 450              		.align	1
 451              		.global	I2C_AcknowledgeConfig
 452              		.thumb
 453              		.thumb_func
 455              	I2C_AcknowledgeConfig:
 456              	.LFB117:
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 457              		.loc 1 412 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462              	.LVL43:
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 463              		.loc 1 419 0
 464 0000 0388     		ldrh	r3, [r0, #0]
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 465              		.loc 1 416 0
 466 0002 19B1     		cbz	r1, .L35
 467              		.loc 1 419 0
 468 0004 9BB2     		uxth	r3, r3
 469 0006 43F48063 		orr	r3, r3, #1024
 470 000a 03E0     		b	.L37
 471              	.L35:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 472              		.loc 1 424 0
 473 000c 23F48063 		bic	r3, r3, #1024
 474 0010 1B04     		lsls	r3, r3, #16
 475 0012 1B0C     		lsrs	r3, r3, #16
 476              	.L37:
 477 0014 0380     		strh	r3, [r0, #0]	@ movhi
 478 0016 7047     		bx	lr
 479              		.cfi_endproc
 480              	.LFE117:
 482              		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 483              		.align	1
 484              		.global	I2C_OwnAddress2Config
 485              		.thumb
 486              		.thumb_func
 488              	I2C_OwnAddress2Config:
 489              	.LFB118:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 490              		.loc 1 435 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL44:
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 496              		.loc 1 442 0
 497 0000 8389     		ldrh	r3, [r0, #12]
 498 0002 9BB2     		uxth	r3, r3
 499              	.LVL45:
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 500              		.loc 1 448 0
 501 0004 01F0FE01 		and	r1, r1, #254
 502              	.LVL46:
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 503              		.loc 1 445 0
 504 0008 23F0FE03 		bic	r3, r3, #254
 505              	.LVL47:
 506              		.loc 1 448 0
 507 000c 1943     		orrs	r1, r1, r3
 508              	.LVL48:
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 509              		.loc 1 451 0
 510 000e 8181     		strh	r1, [r0, #12]	@ movhi
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 511              		.loc 1 452 0
 512 0010 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE118:
 516              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 517              		.align	1
 518              		.global	I2C_DualAddressCmd
 519              		.thumb
 520              		.thumb_func
 522              	I2C_DualAddressCmd:
 523              	.LFB119:
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 524              		.loc 1 462 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529              	.LVL49:
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 530              		.loc 1 469 0
 531 0000 8389     		ldrh	r3, [r0, #12]
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 532              		.loc 1 466 0
 533 0002 19B1     		cbz	r1, .L40
 534              		.loc 1 469 0
 535 0004 9BB2     		uxth	r3, r3
 536 0006 43F00103 		orr	r3, r3, #1
 537 000a 03E0     		b	.L42
 538              	.L40:
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 539              		.loc 1 474 0
 540 000c 23F00103 		bic	r3, r3, #1
 541 0010 1B04     		lsls	r3, r3, #16
 542 0012 1B0C     		lsrs	r3, r3, #16
 543              	.L42:
 544 0014 8381     		strh	r3, [r0, #12]	@ movhi
 545 0016 7047     		bx	lr
 546              		.cfi_endproc
 547              	.LFE119:
 549              		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 550              		.align	1
 551              		.global	I2C_GeneralCallCmd
 552              		.thumb
 553              		.thumb_func
 555              	I2C_GeneralCallCmd:
 556              	.LFB120:
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 557              		.loc 1 486 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562              	.LVL50:
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 563              		.loc 1 493 0
 564 0000 0388     		ldrh	r3, [r0, #0]
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 565              		.loc 1 490 0
 566 0002 19B1     		cbz	r1, .L44
 567              		.loc 1 493 0
 568 0004 9BB2     		uxth	r3, r3
 569 0006 43F04003 		orr	r3, r3, #64
 570 000a 03E0     		b	.L46
 571              	.L44:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 572              		.loc 1 498 0
 573 000c 23F04003 		bic	r3, r3, #64
 574 0010 1B04     		lsls	r3, r3, #16
 575 0012 1B0C     		lsrs	r3, r3, #16
 576              	.L46:
 577 0014 0380     		strh	r3, [r0, #0]	@ movhi
 578 0016 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE120:
 582              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 583              		.align	1
 584              		.global	I2C_SoftwareResetCmd
 585              		.thumb
 586              		.thumb_func
 588              	I2C_SoftwareResetCmd:
 589              	.LFB121:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 590              		.loc 1 512 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL51:
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 596              		.loc 1 519 0
 597 0000 0388     		ldrh	r3, [r0, #0]
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 598              		.loc 1 516 0
 599 0002 29B1     		cbz	r1, .L48
 600              		.loc 1 519 0
 601 0004 6FEA4343 		mvn	r3, r3, lsl #17
 602 0008 6FEA5343 		mvn	r3, r3, lsr #17
 603 000c 9BB2     		uxth	r3, r3
 604 000e 01E0     		b	.L50
 605              	.L48:
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 606              		.loc 1 524 0
 607 0010 5B04     		lsls	r3, r3, #17
 608 0012 5B0C     		lsrs	r3, r3, #17
 609              	.L50:
 610 0014 0380     		strh	r3, [r0, #0]	@ movhi
 611 0016 7047     		bx	lr
 612              		.cfi_endproc
 613              	.LFE121:
 615              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 616              		.align	1
 617              		.global	I2C_StretchClockCmd
 618              		.thumb
 619              		.thumb_func
 621              	I2C_StretchClockCmd:
 622              	.LFB122:
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 623              		.loc 1 536 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628              	.LVL52:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 629              		.loc 1 543 0
 630 0000 0388     		ldrh	r3, [r0, #0]
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 631              		.loc 1 540 0
 632 0002 19B9     		cbnz	r1, .L52
 633              		.loc 1 543 0
 634 0004 9BB2     		uxth	r3, r3
 635 0006 43F08003 		orr	r3, r3, #128
 636 000a 03E0     		b	.L54
 637              	.L52:
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 638              		.loc 1 548 0
 639 000c 23F08003 		bic	r3, r3, #128
 640 0010 1B04     		lsls	r3, r3, #16
 641 0012 1B0C     		lsrs	r3, r3, #16
 642              	.L54:
 643 0014 0380     		strh	r3, [r0, #0]	@ movhi
 644 0016 7047     		bx	lr
 645              		.cfi_endproc
 646              	.LFE122:
 648              		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 649              		.align	1
 650              		.global	I2C_FastModeDutyCycleConfig
 651              		.thumb
 652              		.thumb_func
 654              	I2C_FastModeDutyCycleConfig:
 655              	.LFB123:
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 656              		.loc 1 562 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661              	.LVL53:
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 662              		.loc 1 569 0
 663 0000 838B     		ldrh	r3, [r0, #28]
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 664              		.loc 1 566 0
 665 0002 B1F5804F 		cmp	r1, #16384
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 666              		.loc 1 574 0
 667 0006 04BF     		itt	eq
 668 0008 9BB2     		uxtheq	r3, r3
 669 000a 43F48043 		orreq	r3, r3, #16384
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 670              		.loc 1 566 0
 671 000e 03D0     		beq	.L58
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 672              		.loc 1 569 0
 673 0010 23F48043 		bic	r3, r3, #16384
 674 0014 1B04     		lsls	r3, r3, #16
 675 0016 1B0C     		lsrs	r3, r3, #16
 676              	.L58:
 677              		.loc 1 574 0
 678 0018 8383     		strh	r3, [r0, #28]	@ movhi
 679 001a 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE123:
 683              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 684              		.align	1
 685              		.global	I2C_NACKPositionConfig
 686              		.thumb
 687              		.thumb_func
 689              	I2C_NACKPositionConfig:
 690              	.LFB124:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 691              		.loc 1 600 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696              	.LVL54:
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 697              		.loc 1 609 0
 698 0000 0388     		ldrh	r3, [r0, #0]
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 699              		.loc 1 606 0
 700 0002 B1F5006F 		cmp	r1, #2048
 701              		.loc 1 609 0
 702 0006 04BF     		itt	eq
 703 0008 9BB2     		uxtheq	r3, r3
 704 000a 43F40063 		orreq	r3, r3, #2048
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 705              		.loc 1 606 0
 706 000e 03D0     		beq	.L62
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 707              		.loc 1 614 0
 708 0010 23F40063 		bic	r3, r3, #2048
 709 0014 1B04     		lsls	r3, r3, #16
 710 0016 1B0C     		lsrs	r3, r3, #16
 711              	.L62:
 712 0018 0380     		strh	r3, [r0, #0]	@ movhi
 713 001a 7047     		bx	lr
 714              		.cfi_endproc
 715              	.LFE124:
 717              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 718              		.align	1
 719              		.global	I2C_SMBusAlertConfig
 720              		.thumb
 721              		.thumb_func
 723              	I2C_SMBusAlertConfig:
 724              	.LFB125:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 725              		.loc 1 628 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730              	.LVL55:
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 731              		.loc 1 635 0
 732 0000 0388     		ldrh	r3, [r0, #0]
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 733              		.loc 1 632 0
 734 0002 B1F5005F 		cmp	r1, #8192
 735              		.loc 1 635 0
 736 0006 04BF     		itt	eq
 737 0008 9BB2     		uxtheq	r3, r3
 738 000a 43F40053 		orreq	r3, r3, #8192
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 739              		.loc 1 632 0
 740 000e 03D0     		beq	.L66
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 741              		.loc 1 640 0
 742 0010 23F40053 		bic	r3, r3, #8192
 743 0014 1B04     		lsls	r3, r3, #16
 744 0016 1B0C     		lsrs	r3, r3, #16
 745              	.L66:
 746 0018 0380     		strh	r3, [r0, #0]	@ movhi
 747 001a 7047     		bx	lr
 748              		.cfi_endproc
 749              	.LFE125:
 751              		.section	.text.I2C_ARPCmd,"ax",%progbits
 752              		.align	1
 753              		.global	I2C_ARPCmd
 754              		.thumb
 755              		.thumb_func
 757              	I2C_ARPCmd:
 758              	.LFB126:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 759              		.loc 1 652 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              		@ link register save eliminated.
 764              	.LVL56:
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 765              		.loc 1 659 0
 766 0000 0388     		ldrh	r3, [r0, #0]
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 767              		.loc 1 656 0
 768 0002 19B1     		cbz	r1, .L68
 769              		.loc 1 659 0
 770 0004 9BB2     		uxth	r3, r3
 771 0006 43F01003 		orr	r3, r3, #16
 772 000a 03E0     		b	.L70
 773              	.L68:
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 774              		.loc 1 664 0
 775 000c 23F01003 		bic	r3, r3, #16
 776 0010 1B04     		lsls	r3, r3, #16
 777 0012 1B0C     		lsrs	r3, r3, #16
 778              	.L70:
 779 0014 0380     		strh	r3, [r0, #0]	@ movhi
 780 0016 7047     		bx	lr
 781              		.cfi_endproc
 782              	.LFE126:
 784              		.section	.text.I2C_SendData,"ax",%progbits
 785              		.align	1
 786              		.global	I2C_SendData
 787              		.thumb
 788              		.thumb_func
 790              	I2C_SendData:
 791              	.LFB127:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 792              		.loc 1 690 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797              	.LVL57:
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 798              		.loc 1 694 0
 799 0000 0182     		strh	r1, [r0, #16]	@ movhi
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 800              		.loc 1 695 0
 801 0002 7047     		bx	lr
 802              		.cfi_endproc
 803              	.LFE127:
 805              		.section	.text.I2C_ReceiveData,"ax",%progbits
 806              		.align	1
 807              		.global	I2C_ReceiveData
 808              		.thumb
 809              		.thumb_func
 811              	I2C_ReceiveData:
 812              	.LFB128:
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 813              		.loc 1 703 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818              	.LVL58:
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 819              		.loc 1 707 0
 820 0000 008A     		ldrh	r0, [r0, #16]
 821              	.LVL59:
 822 0002 C0B2     		uxtb	r0, r0
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 823              		.loc 1 708 0
 824 0004 7047     		bx	lr
 825              		.cfi_endproc
 826              	.LFE128:
 828              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 829              		.align	1
 830              		.global	I2C_TransmitPEC
 831              		.thumb
 832              		.thumb_func
 834              	I2C_TransmitPEC:
 835              	.LFB129:
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 836              		.loc 1 734 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841              	.LVL60:
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 842              		.loc 1 741 0
 843 0000 0388     		ldrh	r3, [r0, #0]
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 844              		.loc 1 738 0
 845 0002 19B1     		cbz	r1, .L74
 846              		.loc 1 741 0
 847 0004 9BB2     		uxth	r3, r3
 848 0006 43F48053 		orr	r3, r3, #4096
 849 000a 03E0     		b	.L76
 850              	.L74:
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 851              		.loc 1 746 0
 852 000c 23F48053 		bic	r3, r3, #4096
 853 0010 1B04     		lsls	r3, r3, #16
 854 0012 1B0C     		lsrs	r3, r3, #16
 855              	.L76:
 856 0014 0380     		strh	r3, [r0, #0]	@ movhi
 857 0016 7047     		bx	lr
 858              		.cfi_endproc
 859              	.LFE129:
 861              		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 862              		.align	1
 863              		.global	I2C_PECPositionConfig
 864              		.thumb
 865              		.thumb_func
 867              	I2C_PECPositionConfig:
 868              	.LFB130:
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 869              		.loc 1 765 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		@ link register save eliminated.
 874              	.LVL61:
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 875              		.loc 1 772 0
 876 0000 0388     		ldrh	r3, [r0, #0]
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 877              		.loc 1 769 0
 878 0002 B1F5006F 		cmp	r1, #2048
 879              		.loc 1 772 0
 880 0006 04BF     		itt	eq
 881 0008 9BB2     		uxtheq	r3, r3
 882 000a 43F40063 		orreq	r3, r3, #2048
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 883              		.loc 1 769 0
 884 000e 03D0     		beq	.L80
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 885              		.loc 1 777 0
 886 0010 23F40063 		bic	r3, r3, #2048
 887 0014 1B04     		lsls	r3, r3, #16
 888 0016 1B0C     		lsrs	r3, r3, #16
 889              	.L80:
 890 0018 0380     		strh	r3, [r0, #0]	@ movhi
 891 001a 7047     		bx	lr
 892              		.cfi_endproc
 893              	.LFE130:
 895              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 896              		.align	1
 897              		.global	I2C_CalculatePEC
 898              		.thumb
 899              		.thumb_func
 901              	I2C_CalculatePEC:
 902              	.LFB131:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 903              		.loc 1 789 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 0
 906              		@ frame_needed = 0, uses_anonymous_args = 0
 907              		@ link register save eliminated.
 908              	.LVL62:
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 909              		.loc 1 796 0
 910 0000 0388     		ldrh	r3, [r0, #0]
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 911              		.loc 1 793 0
 912 0002 19B1     		cbz	r1, .L82
 913              		.loc 1 796 0
 914 0004 9BB2     		uxth	r3, r3
 915 0006 43F02003 		orr	r3, r3, #32
 916 000a 03E0     		b	.L84
 917              	.L82:
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 918              		.loc 1 801 0
 919 000c 23F02003 		bic	r3, r3, #32
 920 0010 1B04     		lsls	r3, r3, #16
 921 0012 1B0C     		lsrs	r3, r3, #16
 922              	.L84:
 923 0014 0380     		strh	r3, [r0, #0]	@ movhi
 924 0016 7047     		bx	lr
 925              		.cfi_endproc
 926              	.LFE131:
 928              		.section	.text.I2C_GetPEC,"ax",%progbits
 929              		.align	1
 930              		.global	I2C_GetPEC
 931              		.thumb
 932              		.thumb_func
 934              	I2C_GetPEC:
 935              	.LFB132:
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 936              		.loc 1 811 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              		@ link register save eliminated.
 941              	.LVL63:
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 942              		.loc 1 815 0
 943 0000 008B     		ldrh	r0, [r0, #24]
 944              	.LVL64:
 945 0002 C0F30720 		ubfx	r0, r0, #8, #8
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 946              		.loc 1 816 0
 947 0006 7047     		bx	lr
 948              		.cfi_endproc
 949              	.LFE132:
 951              		.section	.text.I2C_DMACmd,"ax",%progbits
 952              		.align	1
 953              		.global	I2C_DMACmd
 954              		.thumb
 955              		.thumb_func
 957              	I2C_DMACmd:
 958              	.LFB133:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 959              		.loc 1 844 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963              		@ link register save eliminated.
 964              	.LVL65:
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 965              		.loc 1 851 0
 966 0000 8388     		ldrh	r3, [r0, #4]
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 967              		.loc 1 848 0
 968 0002 19B1     		cbz	r1, .L87
 969              		.loc 1 851 0
 970 0004 9BB2     		uxth	r3, r3
 971 0006 43F40063 		orr	r3, r3, #2048
 972 000a 03E0     		b	.L89
 973              	.L87:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 974              		.loc 1 856 0
 975 000c 23F40063 		bic	r3, r3, #2048
 976 0010 1B04     		lsls	r3, r3, #16
 977 0012 1B0C     		lsrs	r3, r3, #16
 978              	.L89:
 979 0014 8380     		strh	r3, [r0, #4]	@ movhi
 980 0016 7047     		bx	lr
 981              		.cfi_endproc
 982              	.LFE133:
 984              		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 985              		.align	1
 986              		.global	I2C_DMALastTransferCmd
 987              		.thumb
 988              		.thumb_func
 990              	I2C_DMALastTransferCmd:
 991              	.LFB134:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 992              		.loc 1 868 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              		@ link register save eliminated.
 997              	.LVL66:
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 998              		.loc 1 875 0
 999 0000 8388     		ldrh	r3, [r0, #4]
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1000              		.loc 1 872 0
 1001 0002 19B1     		cbz	r1, .L91
 1002              		.loc 1 875 0
 1003 0004 9BB2     		uxth	r3, r3
 1004 0006 43F48053 		orr	r3, r3, #4096
 1005 000a 03E0     		b	.L93
 1006              	.L91:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1007              		.loc 1 880 0
 1008 000c 23F48053 		bic	r3, r3, #4096
 1009 0010 1B04     		lsls	r3, r3, #16
 1010 0012 1B0C     		lsrs	r3, r3, #16
 1011              	.L93:
 1012 0014 8380     		strh	r3, [r0, #4]	@ movhi
 1013 0016 7047     		bx	lr
 1014              		.cfi_endproc
 1015              	.LFE134:
 1017              		.section	.text.I2C_ReadRegister,"ax",%progbits
 1018              		.align	1
 1019              		.global	I2C_ReadRegister
 1020              		.thumb
 1021              		.thumb_func
 1023              	I2C_ReadRegister:
 1024              	.LFB135:
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1025              		.loc 1 1006 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 8
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030              	.LVL67:
 1031 0000 82B0     		sub	sp, sp, #8
 1032              	.LCFI2:
 1033              		.cfi_def_cfa_offset 8
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1034              		.loc 1 1007 0
 1035 0002 0023     		movs	r3, #0
 1036 0004 0193     		str	r3, [sp, #4]
 1037              	.LVL68:
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1038              		.loc 1 1013 0
 1039 0006 0190     		str	r0, [sp, #4]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1040              		.loc 1 1014 0
 1041 0008 019B     		ldr	r3, [sp, #4]
 1042 000a C918     		adds	r1, r1, r3
 1043              	.LVL69:
 1044 000c 0191     		str	r1, [sp, #4]
 1045              	.LVL70:
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1046              		.loc 1 1017 0
 1047 000e 019B     		ldr	r3, [sp, #4]
 1048 0010 1888     		ldrh	r0, [r3, #0]
 1049              	.LVL71:
 1050 0012 80B2     		uxth	r0, r0
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1051              		.loc 1 1018 0
 1052 0014 02B0     		add	sp, sp, #8
 1053 0016 7047     		bx	lr
 1054              		.cfi_endproc
 1055              	.LFE135:
 1057              		.section	.text.I2C_ITConfig,"ax",%progbits
 1058              		.align	1
 1059              		.global	I2C_ITConfig
 1060              		.thumb
 1061              		.thumb_func
 1063              	I2C_ITConfig:
 1064              	.LFB136:
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1065              		.loc 1 1033 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070              	.LVL72:
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1071              		.loc 1 1042 0
 1072 0000 8388     		ldrh	r3, [r0, #4]
 1073 0002 9BB2     		uxth	r3, r3
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1074              		.loc 1 1039 0
 1075 0004 0AB1     		cbz	r2, .L96
 1076              		.loc 1 1042 0
 1077 0006 1943     		orrs	r1, r1, r3
 1078              	.LVL73:
 1079 0008 01E0     		b	.L98
 1080              	.LVL74:
 1081              	.L96:
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1082              		.loc 1 1047 0
 1083 000a 23EA0101 		bic	r1, r3, r1
 1084              	.LVL75:
 1085              	.L98:
 1086 000e 8180     		strh	r1, [r0, #4]	@ movhi
 1087 0010 7047     		bx	lr
 1088              		.cfi_endproc
 1089              	.LFE136:
 1091              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1092              		.align	1
 1093              		.global	I2C_CheckEvent
 1094              		.thumb
 1095              		.thumb_func
 1097              	I2C_CheckEvent:
 1098              	.LFB137:
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1099              		.loc 1 1092 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104              	.LVL76:
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1105              		.loc 1 1102 0
 1106 0000 838A     		ldrh	r3, [r0, #20]
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1107              		.loc 1 1103 0
 1108 0002 008B     		ldrh	r0, [r0, #24]
 1109              	.LVL77:
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1110              		.loc 1 1102 0
 1111 0004 9BB2     		uxth	r3, r3
 1112              	.LVL78:
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1113              		.loc 1 1107 0
 1114 0006 43EA0040 		orr	r0, r3, r0, lsl #16
 1115              	.LVL79:
 1116 000a 0840     		ands	r0, r0, r1
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1117              		.loc 1 1110 0
 1118 000c 20F07F40 		bic	r0, r0, #-16777216
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 1119              		.loc 1 1121 0
 1120 0010 431A     		subs	r3, r0, r1
 1121              	.LVL80:
 1122 0012 5842     		rsbs	r0, r3, #0
 1123 0014 40EB0300 		adc	r0, r0, r3
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1124              		.loc 1 1122 0
 1125 0018 7047     		bx	lr
 1126              		.cfi_endproc
 1127              	.LFE137:
 1129              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1130              		.align	1
 1131              		.global	I2C_GetLastEvent
 1132              		.thumb
 1133              		.thumb_func
 1135              	I2C_GetLastEvent:
 1136              	.LFB138:
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1137              		.loc 1 1140 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142              	.LVL81:
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1143              		.loc 1 1148 0
 1144 0000 838A     		ldrh	r3, [r0, #20]
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1145              		.loc 1 1149 0
 1146 0002 008B     		ldrh	r0, [r0, #24]
 1147              	.LVL82:
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1148              		.loc 1 1148 0
 1149 0004 9BB2     		uxth	r3, r3
 1150              	.LVL83:
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1151              		.loc 1 1153 0
 1152 0006 43EA0040 		orr	r0, r3, r0, lsl #16
 1153              	.LVL84:
 1154 000a 20F07F40 		bic	r0, r0, #-16777216
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1155              		.loc 1 1157 0
 1156 000e 7047     		bx	lr
 1157              		.cfi_endproc
 1158              	.LFE138:
 1160              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1161              		.align	1
 1162              		.global	I2C_GetFlagStatus
 1163              		.thumb
 1164              		.thumb_func
 1166              	I2C_GetFlagStatus:
 1167              	.LFB139:
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1168              		.loc 1 1195 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 8
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		@ link register save eliminated.
 1173              	.LVL85:
 1174 0000 82B0     		sub	sp, sp, #8
 1175              	.LCFI3:
 1176              		.cfi_def_cfa_offset 8
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1177              		.loc 1 1197 0
 1178 0002 0023     		movs	r3, #0
 1179 0004 0093     		str	r3, [sp, #0]
 1180              	.LVL86:
 1181 0006 0193     		str	r3, [sp, #4]
 1182              	.LVL87:
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1183              		.loc 1 1207 0
 1184 0008 0B0F     		lsrs	r3, r1, #28
 1185              	.LVL88:
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1186              		.loc 1 1204 0
 1187 000a 0190     		str	r0, [sp, #4]
 1188              		.loc 1 1207 0
 1189 000c 0093     		str	r3, [sp, #0]
 1190              	.LVL89:
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1191              		.loc 1 1212 0
 1192 000e 009B     		ldr	r3, [sp, #0]
 1193              	.LVL90:
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1194              		.loc 1 1210 0
 1195 0010 21F07F41 		bic	r1, r1, #-16777216
 1196              	.LVL91:
 1197              		.loc 1 1212 0
 1198 0014 13B1     		cbz	r3, .L102
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1199              		.loc 1 1215 0
 1200 0016 019B     		ldr	r3, [sp, #4]
 1201 0018 1433     		adds	r3, r3, #20
 1202              	.LVL92:
 1203 001a 02E0     		b	.L104
 1204              	.LVL93:
 1205              	.L102:
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1206              		.loc 1 1222 0
 1207 001c 019B     		ldr	r3, [sp, #4]
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1208              		.loc 1 1220 0
 1209 001e 090C     		lsrs	r1, r1, #16
 1210              	.LVL94:
 1211              		.loc 1 1222 0
 1212 0020 1833     		adds	r3, r3, #24
 1213              	.LVL95:
 1214              	.L104:
 1215 0022 0193     		str	r3, [sp, #4]
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1216              		.loc 1 1225 0
 1217 0024 019B     		ldr	r3, [sp, #4]
 1218              	.LVL96:
 1219 0026 1B68     		ldr	r3, [r3, #0]
 1220              	.LVL97:
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1221              		.loc 1 1228 0
 1222 0028 1942     		tst	r1, r3
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 1223              		.loc 1 1237 0
 1224 002a 0CBF     		ite	eq
 1225 002c 0020     		moveq	r0, #0
 1226 002e 0120     		movne	r0, #1
 1227              	.LVL98:
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1228              		.loc 1 1238 0
 1229 0030 02B0     		add	sp, sp, #8
 1230 0032 7047     		bx	lr
 1231              		.cfi_endproc
 1232              	.LFE139:
 1234              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1235              		.align	1
 1236              		.global	I2C_ClearFlag
 1237              		.thumb
 1238              		.thumb_func
 1240              	I2C_ClearFlag:
 1241              	.LFB140:
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1242              		.loc 1 1272 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 0
 1245              		@ frame_needed = 0, uses_anonymous_args = 0
 1246              		@ link register save eliminated.
 1247              	.LVL99:
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1248              		.loc 1 1280 0
 1249 0000 C943     		mvns	r1, r1
 1250              	.LVL100:
 1251 0002 89B2     		uxth	r1, r1
 1252              	.LVL101:
 1253 0004 8182     		strh	r1, [r0, #20]	@ movhi
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1254              		.loc 1 1281 0
 1255 0006 7047     		bx	lr
 1256              		.cfi_endproc
 1257              	.LFE140:
 1259              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1260              		.align	1
 1261              		.global	I2C_GetITStatus
 1262              		.thumb
 1263              		.thumb_func
 1265              	I2C_GetITStatus:
 1266              	.LFB141:
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1267              		.loc 1 1306 0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 1272              	.LVL102:
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1273              		.loc 1 1315 0
 1274 0000 8388     		ldrh	r3, [r0, #4]
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1275              		.loc 1 1321 0
 1276 0002 808A     		ldrh	r0, [r0, #20]
 1277              	.LVL103:
 1278 0004 80B2     		uxth	r0, r0
 1279 0006 0840     		ands	r0, r0, r1
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1280              		.loc 1 1315 0
 1281 0008 9BB2     		uxth	r3, r3
 1282              	.LVL104:
 1283              		.loc 1 1321 0
 1284 000a 06D0     		beq	.L107
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1285              		.loc 1 1315 0 discriminator 1
 1286 000c 01F0E061 		and	r1, r1, #117440512
 1287              	.LVL105:
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 1288              		.loc 1 1305 0 discriminator 1
 1289 0010 13EA1141 		ands	r1, r3, r1, lsr #16
 1290              	.LVL106:
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1291              		.loc 1 1324 0 discriminator 1
 1292 0014 0CBF     		ite	eq
 1293 0016 0020     		moveq	r0, #0
 1294 0018 0120     		movne	r0, #1
 1295              	.L107:
 1296              	.LVL107:
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1297              		.loc 1 1333 0
 1298 001a 7047     		bx	lr
 1299              		.cfi_endproc
 1300              	.LFE141:
 1302              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 1303              		.align	1
 1304              		.global	I2C_ClearITPendingBit
 1305              		.thumb
 1306              		.thumb_func
 1308              	I2C_ClearITPendingBit:
 1309              	.LFB142:
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1310              		.loc 1 1366 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314              		@ link register save eliminated.
 1315              	.LVL108:
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1316              		.loc 1 1376 0
 1317 0000 C943     		mvns	r1, r1
 1318              	.LVL109:
 1319 0002 89B2     		uxth	r1, r1
 1320              	.LVL110:
 1321 0004 8182     		strh	r1, [r0, #20]	@ movhi
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1322              		.loc 1 1377 0
 1323 0006 7047     		bx	lr
 1324              		.cfi_endproc
 1325              	.LFE142:
 1327              		.text
 1328              	.Letext0:
 1329              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1330              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 1331              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 1332              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 1333              		.file 6 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
  C:\Temp\ccGLYx7o.s:19     .text.I2C_DeInit:00000000 $t
  C:\Temp\ccGLYx7o.s:24     .text.I2C_DeInit:00000000 I2C_DeInit
  C:\Temp\ccGLYx7o.s:88     .text.I2C_DeInit:00000050 $d
  C:\Temp\ccGLYx7o.s:95     .text.I2C_Init:00000000 $t
  C:\Temp\ccGLYx7o.s:100    .text.I2C_Init:00000000 I2C_Init
  C:\Temp\ccGLYx7o.s:276    .text.I2C_Init:000000c4 $d
  C:\Temp\ccGLYx7o.s:282    .text.I2C_StructInit:00000000 $t
  C:\Temp\ccGLYx7o.s:287    .text.I2C_StructInit:00000000 I2C_StructInit
  C:\Temp\ccGLYx7o.s:319    .text.I2C_Cmd:00000000 $t
  C:\Temp\ccGLYx7o.s:324    .text.I2C_Cmd:00000000 I2C_Cmd
  C:\Temp\ccGLYx7o.s:352    .text.I2C_GenerateSTART:00000000 $t
  C:\Temp\ccGLYx7o.s:357    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
  C:\Temp\ccGLYx7o.s:385    .text.I2C_GenerateSTOP:00000000 $t
  C:\Temp\ccGLYx7o.s:390    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
  C:\Temp\ccGLYx7o.s:418    .text.I2C_Send7bitAddress:00000000 $t
  C:\Temp\ccGLYx7o.s:423    .text.I2C_Send7bitAddress:00000000 I2C_Send7bitAddress
  C:\Temp\ccGLYx7o.s:450    .text.I2C_AcknowledgeConfig:00000000 $t
  C:\Temp\ccGLYx7o.s:455    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
  C:\Temp\ccGLYx7o.s:483    .text.I2C_OwnAddress2Config:00000000 $t
  C:\Temp\ccGLYx7o.s:488    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
  C:\Temp\ccGLYx7o.s:517    .text.I2C_DualAddressCmd:00000000 $t
  C:\Temp\ccGLYx7o.s:522    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
  C:\Temp\ccGLYx7o.s:550    .text.I2C_GeneralCallCmd:00000000 $t
  C:\Temp\ccGLYx7o.s:555    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
  C:\Temp\ccGLYx7o.s:583    .text.I2C_SoftwareResetCmd:00000000 $t
  C:\Temp\ccGLYx7o.s:588    .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
  C:\Temp\ccGLYx7o.s:616    .text.I2C_StretchClockCmd:00000000 $t
  C:\Temp\ccGLYx7o.s:621    .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
  C:\Temp\ccGLYx7o.s:649    .text.I2C_FastModeDutyCycleConfig:00000000 $t
  C:\Temp\ccGLYx7o.s:654    .text.I2C_FastModeDutyCycleConfig:00000000 I2C_FastModeDutyCycleConfig
  C:\Temp\ccGLYx7o.s:684    .text.I2C_NACKPositionConfig:00000000 $t
  C:\Temp\ccGLYx7o.s:689    .text.I2C_NACKPositionConfig:00000000 I2C_NACKPositionConfig
  C:\Temp\ccGLYx7o.s:718    .text.I2C_SMBusAlertConfig:00000000 $t
  C:\Temp\ccGLYx7o.s:723    .text.I2C_SMBusAlertConfig:00000000 I2C_SMBusAlertConfig
  C:\Temp\ccGLYx7o.s:752    .text.I2C_ARPCmd:00000000 $t
  C:\Temp\ccGLYx7o.s:757    .text.I2C_ARPCmd:00000000 I2C_ARPCmd
  C:\Temp\ccGLYx7o.s:785    .text.I2C_SendData:00000000 $t
  C:\Temp\ccGLYx7o.s:790    .text.I2C_SendData:00000000 I2C_SendData
  C:\Temp\ccGLYx7o.s:806    .text.I2C_ReceiveData:00000000 $t
  C:\Temp\ccGLYx7o.s:811    .text.I2C_ReceiveData:00000000 I2C_ReceiveData
  C:\Temp\ccGLYx7o.s:829    .text.I2C_TransmitPEC:00000000 $t
  C:\Temp\ccGLYx7o.s:834    .text.I2C_TransmitPEC:00000000 I2C_TransmitPEC
  C:\Temp\ccGLYx7o.s:862    .text.I2C_PECPositionConfig:00000000 $t
  C:\Temp\ccGLYx7o.s:867    .text.I2C_PECPositionConfig:00000000 I2C_PECPositionConfig
  C:\Temp\ccGLYx7o.s:896    .text.I2C_CalculatePEC:00000000 $t
  C:\Temp\ccGLYx7o.s:901    .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
  C:\Temp\ccGLYx7o.s:929    .text.I2C_GetPEC:00000000 $t
  C:\Temp\ccGLYx7o.s:934    .text.I2C_GetPEC:00000000 I2C_GetPEC
  C:\Temp\ccGLYx7o.s:952    .text.I2C_DMACmd:00000000 $t
  C:\Temp\ccGLYx7o.s:957    .text.I2C_DMACmd:00000000 I2C_DMACmd
  C:\Temp\ccGLYx7o.s:985    .text.I2C_DMALastTransferCmd:00000000 $t
  C:\Temp\ccGLYx7o.s:990    .text.I2C_DMALastTransferCmd:00000000 I2C_DMALastTransferCmd
  C:\Temp\ccGLYx7o.s:1018   .text.I2C_ReadRegister:00000000 $t
  C:\Temp\ccGLYx7o.s:1023   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
  C:\Temp\ccGLYx7o.s:1058   .text.I2C_ITConfig:00000000 $t
  C:\Temp\ccGLYx7o.s:1063   .text.I2C_ITConfig:00000000 I2C_ITConfig
  C:\Temp\ccGLYx7o.s:1092   .text.I2C_CheckEvent:00000000 $t
  C:\Temp\ccGLYx7o.s:1097   .text.I2C_CheckEvent:00000000 I2C_CheckEvent
  C:\Temp\ccGLYx7o.s:1130   .text.I2C_GetLastEvent:00000000 $t
  C:\Temp\ccGLYx7o.s:1135   .text.I2C_GetLastEvent:00000000 I2C_GetLastEvent
  C:\Temp\ccGLYx7o.s:1161   .text.I2C_GetFlagStatus:00000000 $t
  C:\Temp\ccGLYx7o.s:1166   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
  C:\Temp\ccGLYx7o.s:1235   .text.I2C_ClearFlag:00000000 $t
  C:\Temp\ccGLYx7o.s:1240   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
  C:\Temp\ccGLYx7o.s:1260   .text.I2C_GetITStatus:00000000 $t
  C:\Temp\ccGLYx7o.s:1265   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
  C:\Temp\ccGLYx7o.s:1303   .text.I2C_ClearITPendingBit:00000000 $t
  C:\Temp\ccGLYx7o.s:1308   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
