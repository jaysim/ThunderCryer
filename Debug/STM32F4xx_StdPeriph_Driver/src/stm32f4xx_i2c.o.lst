   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_i2c.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.I2C_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	I2C_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	I2C_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  27              		.loc 1 133 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  43              		.loc 1 137 0
  44 0008 7A68     		ldr	r2, [r7, #4]
  45 000a 4FF4A843 		mov	r3, #21504
  46 000e C4F20003 		movt	r3, 16384
  47 0012 9A42     		cmp	r2, r3
  48 0014 0CD1     		bne	.L2
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  49              		.loc 1 140 0
  50 0016 4FF40010 		mov	r0, #2097152
  51 001a 4FF00101 		mov	r1, #1
  52 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  53              		.loc 1 142 0
  54 0022 4FF40010 		mov	r0, #2097152
  55 0026 4FF00001 		mov	r1, #0
  56 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  57 002e 26E0     		b	.L1
  58              	.L2:
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  59              		.loc 1 144 0
  60 0030 7A68     		ldr	r2, [r7, #4]
  61 0032 4FF4B043 		mov	r3, #22528
  62 0036 C4F20003 		movt	r3, 16384
  63 003a 9A42     		cmp	r2, r3
  64 003c 0CD1     		bne	.L4
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  65              		.loc 1 147 0
  66 003e 4FF48000 		mov	r0, #4194304
  67 0042 4FF00101 		mov	r1, #1
  68 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  69              		.loc 1 149 0
  70 004a 4FF48000 		mov	r0, #4194304
  71 004e 4FF00001 		mov	r1, #0
  72 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  73 0056 12E0     		b	.L1
  74              	.L4:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  75              		.loc 1 153 0
  76 0058 7A68     		ldr	r2, [r7, #4]
  77 005a 4FF4B843 		mov	r3, #23552
  78 005e C4F20003 		movt	r3, 16384
  79 0062 9A42     		cmp	r2, r3
  80 0064 0BD1     		bne	.L1
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  81              		.loc 1 156 0
  82 0066 4FF40000 		mov	r0, #8388608
  83 006a 4FF00101 		mov	r1, #1
  84 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  85              		.loc 1 158 0
  86 0072 4FF40000 		mov	r0, #8388608
  87 0076 4FF00001 		mov	r1, #0
  88 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  89              	.L1:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  90              		.loc 1 161 0
  91 007e 07F10807 		add	r7, r7, #8
  92 0082 BD46     		mov	sp, r7
  93 0084 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE110:
  97 0086 00BF     		.section	.text.I2C_Init,"ax",%progbits
  98              		.align	2
  99              		.global	I2C_Init
 100              		.thumb
 101              		.thumb_func
 103              	I2C_Init:
 104              	.LFB111:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 105              		.loc 1 176 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 40
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 80B5     		push	{r7, lr}
 110              	.LCFI3:
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 14, -4
 113              		.cfi_offset 7, -8
 114 0002 8AB0     		sub	sp, sp, #40
 115              	.LCFI4:
 116              		.cfi_def_cfa_offset 48
 117 0004 00AF     		add	r7, sp, #0
 118              	.LCFI5:
 119              		.cfi_def_cfa_register 7
 120 0006 7860     		str	r0, [r7, #4]
 121 0008 3960     		str	r1, [r7, #0]
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 122              		.loc 1 177 0
 123 000a 4FF00003 		mov	r3, #0
 124 000e FB84     		strh	r3, [r7, #38]	@ movhi
 125 0010 4FF00003 		mov	r3, #0
 126 0014 7B84     		strh	r3, [r7, #34]	@ movhi
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 127              		.loc 1 178 0
 128 0016 4FF00403 		mov	r3, #4
 129 001a BB84     		strh	r3, [r7, #36]	@ movhi
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 130              		.loc 1 179 0
 131 001c 4FF49053 		mov	r3, #4608
 132 0020 C0F27A03 		movt	r3, 122
 133 0024 FB61     		str	r3, [r7, #28]
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 134              		.loc 1 192 0
 135 0026 7B68     		ldr	r3, [r7, #4]
 136 0028 9B88     		ldrh	r3, [r3, #4]	@ movhi
 137 002a FB84     		strh	r3, [r7, #38]	@ movhi
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 138              		.loc 1 194 0
 139 002c FB8C     		ldrh	r3, [r7, #38]	@ movhi
 140 002e 23F03F03 		bic	r3, r3, #63
 141 0032 FB84     		strh	r3, [r7, #38]	@ movhi
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 142              		.loc 1 196 0
 143 0034 07F10C03 		add	r3, r7, #12
 144 0038 1846     		mov	r0, r3
 145 003a FFF7FEFF 		bl	RCC_GetClocksFreq
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 146              		.loc 1 197 0
 147 003e 7B69     		ldr	r3, [r7, #20]
 148 0040 FB61     		str	r3, [r7, #28]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 149              		.loc 1 199 0
 150 0042 FA69     		ldr	r2, [r7, #28]
 151 0044 4DF68363 		movw	r3, #56963
 152 0048 C4F21B33 		movt	r3, 17179
 153 004c A3FB0213 		umull	r1, r3, r3, r2
 154 0050 4FEA9343 		lsr	r3, r3, #18
 155 0054 7B84     		strh	r3, [r7, #34]	@ movhi
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 156              		.loc 1 200 0
 157 0056 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 158 0058 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 159 005a 1343     		orrs	r3, r3, r2
 160 005c FB84     		strh	r3, [r7, #38]	@ movhi
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 161              		.loc 1 202 0
 162 005e 7B68     		ldr	r3, [r7, #4]
 163 0060 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 164 0062 9A80     		strh	r2, [r3, #4]	@ movhi
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 165              		.loc 1 206 0
 166 0064 7B68     		ldr	r3, [r7, #4]
 167 0066 1B88     		ldrh	r3, [r3, #0]	@ movhi
 168 0068 9BB2     		uxth	r3, r3
 169 006a 23F00103 		bic	r3, r3, #1
 170 006e 9AB2     		uxth	r2, r3
 171 0070 7B68     		ldr	r3, [r7, #4]
 172 0072 1A80     		strh	r2, [r3, #0]	@ movhi
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 173              		.loc 1 209 0
 174 0074 4FF00003 		mov	r3, #0
 175 0078 FB84     		strh	r3, [r7, #38]	@ movhi
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 176              		.loc 1 212 0
 177 007a 3B68     		ldr	r3, [r7, #0]
 178 007c 1A68     		ldr	r2, [r3, #0]
 179 007e 48F2A063 		movw	r3, #34464
 180 0082 C0F20103 		movt	r3, 1
 181 0086 9A42     		cmp	r2, r3
 182 0088 18D8     		bhi	.L6
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 183              		.loc 1 215 0
 184 008a 3B68     		ldr	r3, [r7, #0]
 185 008c 1B68     		ldr	r3, [r3, #0]
 186 008e 4FEA4303 		lsl	r3, r3, #1
 187 0092 FA69     		ldr	r2, [r7, #28]
 188 0094 B2FBF3F3 		udiv	r3, r2, r3
 189 0098 BB84     		strh	r3, [r7, #36]	@ movhi
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 190              		.loc 1 217 0
 191 009a BB8C     		ldrh	r3, [r7, #36]
 192 009c 032B     		cmp	r3, #3
 193 009e 02D8     		bhi	.L7
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 194              		.loc 1 220 0
 195 00a0 4FF00403 		mov	r3, #4
 196 00a4 BB84     		strh	r3, [r7, #36]	@ movhi
 197              	.L7:
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 198              		.loc 1 223 0
 199 00a6 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 200 00a8 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 201 00aa 1343     		orrs	r3, r3, r2
 202 00ac FB84     		strh	r3, [r7, #38]	@ movhi
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 203              		.loc 1 225 0
 204 00ae 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 205 00b0 03F10103 		add	r3, r3, #1
 206 00b4 9AB2     		uxth	r2, r3
 207 00b6 7B68     		ldr	r3, [r7, #4]
 208 00b8 1A84     		strh	r2, [r3, #32]	@ movhi
 209 00ba 4BE0     		b	.L8
 210              	.L6:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 211              		.loc 1 232 0
 212 00bc 3B68     		ldr	r3, [r7, #0]
 213 00be DA88     		ldrh	r2, [r3, #6]
 214 00c0 4BF6FF73 		movw	r3, #49151
 215 00c4 9A42     		cmp	r2, r3
 216 00c6 0AD1     		bne	.L9
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 217              		.loc 1 235 0
 218 00c8 3B68     		ldr	r3, [r7, #0]
 219 00ca 1A68     		ldr	r2, [r3, #0]
 220 00cc 1346     		mov	r3, r2
 221 00ce 4FEA4303 		lsl	r3, r3, #1
 222 00d2 9B18     		adds	r3, r3, r2
 223 00d4 FA69     		ldr	r2, [r7, #28]
 224 00d6 B2FBF3F3 		udiv	r3, r2, r3
 225 00da BB84     		strh	r3, [r7, #36]	@ movhi
 226 00dc 10E0     		b	.L10
 227              	.L9:
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 228              		.loc 1 240 0
 229 00de 3B68     		ldr	r3, [r7, #0]
 230 00e0 1A68     		ldr	r2, [r3, #0]
 231 00e2 1346     		mov	r3, r2
 232 00e4 4FEA8303 		lsl	r3, r3, #2
 233 00e8 9B18     		adds	r3, r3, r2
 234 00ea 4FEA8302 		lsl	r2, r3, #2
 235 00ee 9B18     		adds	r3, r3, r2
 236 00f0 FA69     		ldr	r2, [r7, #28]
 237 00f2 B2FBF3F3 		udiv	r3, r2, r3
 238 00f6 BB84     		strh	r3, [r7, #36]	@ movhi
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 239              		.loc 1 242 0
 240 00f8 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 241 00fa 43F48043 		orr	r3, r3, #16384
 242 00fe BB84     		strh	r3, [r7, #36]	@ movhi
 243              	.L10:
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 244              		.loc 1 246 0
 245 0100 BB8C     		ldrh	r3, [r7, #36]
 246 0102 4FEA0353 		lsl	r3, r3, #20
 247 0106 4FEA1353 		lsr	r3, r3, #20
 248 010a 002B     		cmp	r3, #0
 249 010c 03D1     		bne	.L11
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 250              		.loc 1 249 0
 251 010e BB8C     		ldrh	r3, [r7, #36]	@ movhi
 252 0110 43F00103 		orr	r3, r3, #1
 253 0114 BB84     		strh	r3, [r7, #36]	@ movhi
 254              	.L11:
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 255              		.loc 1 252 0
 256 0116 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 257 0118 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 258 011a 1343     		orrs	r3, r3, r2
 259 011c 9BB2     		uxth	r3, r3
 260 011e 6FEA4343 		mvn	r3, r3, lsl #17
 261 0122 6FEA5343 		mvn	r3, r3, lsr #17
 262 0126 FB84     		strh	r3, [r7, #38]	@ movhi
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 263              		.loc 1 254 0
 264 0128 7B8C     		ldrh	r3, [r7, #34]
 265 012a 4FF49672 		mov	r2, #300
 266 012e 02FB03F2 		mul	r2, r2, r3
 267 0132 44F6D353 		movw	r3, #19923
 268 0136 C1F26203 		movt	r3, 4194
 269 013a 83FB0213 		smull	r1, r3, r3, r2
 270 013e 4FEAA311 		asr	r1, r3, #6
 271 0142 4FEAE273 		asr	r3, r2, #31
 272 0146 CB1A     		subs	r3, r1, r3
 273 0148 9BB2     		uxth	r3, r3
 274 014a 03F10103 		add	r3, r3, #1
 275 014e 9AB2     		uxth	r2, r3
 276 0150 7B68     		ldr	r3, [r7, #4]
 277 0152 1A84     		strh	r2, [r3, #32]	@ movhi
 278              	.L8:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 279              		.loc 1 258 0
 280 0154 7B68     		ldr	r3, [r7, #4]
 281 0156 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 282 0158 9A83     		strh	r2, [r3, #28]	@ movhi
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 283              		.loc 1 260 0
 284 015a 7B68     		ldr	r3, [r7, #4]
 285 015c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 286 015e 9BB2     		uxth	r3, r3
 287 0160 43F00103 		orr	r3, r3, #1
 288 0164 9AB2     		uxth	r2, r3
 289 0166 7B68     		ldr	r3, [r7, #4]
 290 0168 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 291              		.loc 1 264 0
 292 016a 7B68     		ldr	r3, [r7, #4]
 293 016c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 294 016e FB84     		strh	r3, [r7, #38]	@ movhi
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 295              		.loc 1 266 0
 296 0170 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 297 0172 23F48063 		bic	r3, r3, #1024
 298 0176 23F00A03 		bic	r3, r3, #10
 299 017a FB84     		strh	r3, [r7, #38]	@ movhi
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 300              		.loc 1 270 0
 301 017c 3B68     		ldr	r3, [r7, #0]
 302 017e 9A88     		ldrh	r2, [r3, #4]
 303 0180 3B68     		ldr	r3, [r7, #0]
 304 0182 5B89     		ldrh	r3, [r3, #10]
 305 0184 1343     		orrs	r3, r3, r2
 306 0186 9AB2     		uxth	r2, r3
 307 0188 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 308 018a 1343     		orrs	r3, r3, r2
 309 018c FB84     		strh	r3, [r7, #38]	@ movhi
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 310              		.loc 1 272 0
 311 018e 7B68     		ldr	r3, [r7, #4]
 312 0190 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 313 0192 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 314              		.loc 1 276 0
 315 0194 3B68     		ldr	r3, [r7, #0]
 316 0196 9A89     		ldrh	r2, [r3, #12]
 317 0198 3B68     		ldr	r3, [r7, #0]
 318 019a 1B89     		ldrh	r3, [r3, #8]
 319 019c 1343     		orrs	r3, r3, r2
 320 019e 9AB2     		uxth	r2, r3
 321 01a0 7B68     		ldr	r3, [r7, #4]
 322 01a2 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 323              		.loc 1 277 0
 324 01a4 07F12807 		add	r7, r7, #40
 325 01a8 BD46     		mov	sp, r7
 326 01aa 80BD     		pop	{r7, pc}
 327              		.cfi_endproc
 328              	.LFE111:
 330              		.section	.text.I2C_StructInit,"ax",%progbits
 331              		.align	2
 332              		.global	I2C_StructInit
 333              		.thumb
 334              		.thumb_func
 336              	I2C_StructInit:
 337              	.LFB112:
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 338              		.loc 1 285 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 8
 341              		@ frame_needed = 1, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 343 0000 80B4     		push	{r7}
 344              	.LCFI6:
 345              		.cfi_def_cfa_offset 4
 346              		.cfi_offset 7, -4
 347 0002 83B0     		sub	sp, sp, #12
 348              	.LCFI7:
 349              		.cfi_def_cfa_offset 16
 350 0004 00AF     		add	r7, sp, #0
 351              	.LCFI8:
 352              		.cfi_def_cfa_register 7
 353 0006 7860     		str	r0, [r7, #4]
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 354              		.loc 1 288 0
 355 0008 7B68     		ldr	r3, [r7, #4]
 356 000a 41F28832 		movw	r2, #5000
 357 000e 1A60     		str	r2, [r3, #0]
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 358              		.loc 1 290 0
 359 0010 7B68     		ldr	r3, [r7, #4]
 360 0012 4FF00002 		mov	r2, #0
 361 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 362              		.loc 1 292 0
 363 0018 7B68     		ldr	r3, [r7, #4]
 364 001a 4BF6FF72 		movw	r2, #49151
 365 001e DA80     		strh	r2, [r3, #6]	@ movhi
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 366              		.loc 1 294 0
 367 0020 7B68     		ldr	r3, [r7, #4]
 368 0022 4FF00002 		mov	r2, #0
 369 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 370              		.loc 1 296 0
 371 0028 7B68     		ldr	r3, [r7, #4]
 372 002a 4FF00002 		mov	r2, #0
 373 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 374              		.loc 1 298 0
 375 0030 7B68     		ldr	r3, [r7, #4]
 376 0032 4FF48042 		mov	r2, #16384
 377 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 378              		.loc 1 299 0
 379 0038 07F10C07 		add	r7, r7, #12
 380 003c BD46     		mov	sp, r7
 381 003e 80BC     		pop	{r7}
 382 0040 7047     		bx	lr
 383              		.cfi_endproc
 384              	.LFE112:
 386 0042 00BF     		.section	.text.I2C_Cmd,"ax",%progbits
 387              		.align	2
 388              		.global	I2C_Cmd
 389              		.thumb
 390              		.thumb_func
 392              	I2C_Cmd:
 393              	.LFB113:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 394              		.loc 1 309 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 8
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399 0000 80B4     		push	{r7}
 400              	.LCFI9:
 401              		.cfi_def_cfa_offset 4
 402              		.cfi_offset 7, -4
 403 0002 83B0     		sub	sp, sp, #12
 404              	.LCFI10:
 405              		.cfi_def_cfa_offset 16
 406 0004 00AF     		add	r7, sp, #0
 407              	.LCFI11:
 408              		.cfi_def_cfa_register 7
 409 0006 7860     		str	r0, [r7, #4]
 410 0008 0B46     		mov	r3, r1
 411 000a FB70     		strb	r3, [r7, #3]
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 412              		.loc 1 313 0
 413 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 414 000e 002B     		cmp	r3, #0
 415 0010 08D0     		beq	.L14
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 416              		.loc 1 316 0
 417 0012 7B68     		ldr	r3, [r7, #4]
 418 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 419 0016 9BB2     		uxth	r3, r3
 420 0018 43F00103 		orr	r3, r3, #1
 421 001c 9AB2     		uxth	r2, r3
 422 001e 7B68     		ldr	r3, [r7, #4]
 423 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 424 0022 07E0     		b	.L13
 425              	.L14:
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 426              		.loc 1 321 0
 427 0024 7B68     		ldr	r3, [r7, #4]
 428 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 429 0028 9BB2     		uxth	r3, r3
 430 002a 23F00103 		bic	r3, r3, #1
 431 002e 9AB2     		uxth	r2, r3
 432 0030 7B68     		ldr	r3, [r7, #4]
 433 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 434              	.L13:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 435              		.loc 1 323 0
 436 0034 07F10C07 		add	r7, r7, #12
 437 0038 BD46     		mov	sp, r7
 438 003a 80BC     		pop	{r7}
 439 003c 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE113:
 443 003e 00BF     		.section	.text.I2C_GenerateSTART,"ax",%progbits
 444              		.align	2
 445              		.global	I2C_GenerateSTART
 446              		.thumb
 447              		.thumb_func
 449              	I2C_GenerateSTART:
 450              	.LFB114:
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 451              		.loc 1 333 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 8
 454              		@ frame_needed = 1, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 456 0000 80B4     		push	{r7}
 457              	.LCFI12:
 458              		.cfi_def_cfa_offset 4
 459              		.cfi_offset 7, -4
 460 0002 83B0     		sub	sp, sp, #12
 461              	.LCFI13:
 462              		.cfi_def_cfa_offset 16
 463 0004 00AF     		add	r7, sp, #0
 464              	.LCFI14:
 465              		.cfi_def_cfa_register 7
 466 0006 7860     		str	r0, [r7, #4]
 467 0008 0B46     		mov	r3, r1
 468 000a FB70     		strb	r3, [r7, #3]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 469              		.loc 1 337 0
 470 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 471 000e 002B     		cmp	r3, #0
 472 0010 08D0     		beq	.L17
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 473              		.loc 1 340 0
 474 0012 7B68     		ldr	r3, [r7, #4]
 475 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 476 0016 9BB2     		uxth	r3, r3
 477 0018 43F48073 		orr	r3, r3, #256
 478 001c 9AB2     		uxth	r2, r3
 479 001e 7B68     		ldr	r3, [r7, #4]
 480 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 481 0022 07E0     		b	.L16
 482              	.L17:
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 483              		.loc 1 345 0
 484 0024 7B68     		ldr	r3, [r7, #4]
 485 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 486 0028 9BB2     		uxth	r3, r3
 487 002a 23F48073 		bic	r3, r3, #256
 488 002e 9AB2     		uxth	r2, r3
 489 0030 7B68     		ldr	r3, [r7, #4]
 490 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 491              	.L16:
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 492              		.loc 1 347 0
 493 0034 07F10C07 		add	r7, r7, #12
 494 0038 BD46     		mov	sp, r7
 495 003a 80BC     		pop	{r7}
 496 003c 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE114:
 500 003e 00BF     		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 501              		.align	2
 502              		.global	I2C_GenerateSTOP
 503              		.thumb
 504              		.thumb_func
 506              	I2C_GenerateSTOP:
 507              	.LFB115:
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 508              		.loc 1 357 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513 0000 80B4     		push	{r7}
 514              	.LCFI15:
 515              		.cfi_def_cfa_offset 4
 516              		.cfi_offset 7, -4
 517 0002 83B0     		sub	sp, sp, #12
 518              	.LCFI16:
 519              		.cfi_def_cfa_offset 16
 520 0004 00AF     		add	r7, sp, #0
 521              	.LCFI17:
 522              		.cfi_def_cfa_register 7
 523 0006 7860     		str	r0, [r7, #4]
 524 0008 0B46     		mov	r3, r1
 525 000a FB70     		strb	r3, [r7, #3]
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 526              		.loc 1 361 0
 527 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 528 000e 002B     		cmp	r3, #0
 529 0010 08D0     		beq	.L20
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 530              		.loc 1 364 0
 531 0012 7B68     		ldr	r3, [r7, #4]
 532 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 533 0016 9BB2     		uxth	r3, r3
 534 0018 43F40073 		orr	r3, r3, #512
 535 001c 9AB2     		uxth	r2, r3
 536 001e 7B68     		ldr	r3, [r7, #4]
 537 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 538 0022 07E0     		b	.L19
 539              	.L20:
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 540              		.loc 1 369 0
 541 0024 7B68     		ldr	r3, [r7, #4]
 542 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 543 0028 9BB2     		uxth	r3, r3
 544 002a 23F40073 		bic	r3, r3, #512
 545 002e 9AB2     		uxth	r2, r3
 546 0030 7B68     		ldr	r3, [r7, #4]
 547 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 548              	.L19:
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 549              		.loc 1 371 0
 550 0034 07F10C07 		add	r7, r7, #12
 551 0038 BD46     		mov	sp, r7
 552 003a 80BC     		pop	{r7}
 553 003c 7047     		bx	lr
 554              		.cfi_endproc
 555              	.LFE115:
 557 003e 00BF     		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 558              		.align	2
 559              		.global	I2C_Send7bitAddress
 560              		.thumb
 561              		.thumb_func
 563              	I2C_Send7bitAddress:
 564              	.LFB116:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 565              		.loc 1 385 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 1, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 570 0000 80B4     		push	{r7}
 571              	.LCFI18:
 572              		.cfi_def_cfa_offset 4
 573              		.cfi_offset 7, -4
 574 0002 83B0     		sub	sp, sp, #12
 575              	.LCFI19:
 576              		.cfi_def_cfa_offset 16
 577 0004 00AF     		add	r7, sp, #0
 578              	.LCFI20:
 579              		.cfi_def_cfa_register 7
 580 0006 7860     		str	r0, [r7, #4]
 581 0008 1346     		mov	r3, r2
 582 000a 0A46     		mov	r2, r1
 583 000c FA70     		strb	r2, [r7, #3]
 584 000e BB70     		strb	r3, [r7, #2]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 585              		.loc 1 390 0
 586 0010 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 587 0012 002B     		cmp	r3, #0
 588 0014 04D0     		beq	.L23
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 589              		.loc 1 393 0
 590 0016 FB78     		ldrb	r3, [r7, #3]
 591 0018 43F00103 		orr	r3, r3, #1
 592 001c FB70     		strb	r3, [r7, #3]
 593 001e 03E0     		b	.L24
 594              	.L23:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 595              		.loc 1 398 0
 596 0020 FB78     		ldrb	r3, [r7, #3]
 597 0022 23F00103 		bic	r3, r3, #1
 598 0026 FB70     		strb	r3, [r7, #3]
 599              	.L24:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 600              		.loc 1 401 0
 601 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 602 002a 9AB2     		uxth	r2, r3
 603 002c 7B68     		ldr	r3, [r7, #4]
 604 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 605              		.loc 1 402 0
 606 0030 07F10C07 		add	r7, r7, #12
 607 0034 BD46     		mov	sp, r7
 608 0036 80BC     		pop	{r7}
 609 0038 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE116:
 613 003a 00BF     		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 614              		.align	2
 615              		.global	I2C_AcknowledgeConfig
 616              		.thumb
 617              		.thumb_func
 619              	I2C_AcknowledgeConfig:
 620              	.LFB117:
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 621              		.loc 1 412 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 8
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626 0000 80B4     		push	{r7}
 627              	.LCFI21:
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 7, -4
 630 0002 83B0     		sub	sp, sp, #12
 631              	.LCFI22:
 632              		.cfi_def_cfa_offset 16
 633 0004 00AF     		add	r7, sp, #0
 634              	.LCFI23:
 635              		.cfi_def_cfa_register 7
 636 0006 7860     		str	r0, [r7, #4]
 637 0008 0B46     		mov	r3, r1
 638 000a FB70     		strb	r3, [r7, #3]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 639              		.loc 1 416 0
 640 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 641 000e 002B     		cmp	r3, #0
 642 0010 08D0     		beq	.L26
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 643              		.loc 1 419 0
 644 0012 7B68     		ldr	r3, [r7, #4]
 645 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 646 0016 9BB2     		uxth	r3, r3
 647 0018 43F48063 		orr	r3, r3, #1024
 648 001c 9AB2     		uxth	r2, r3
 649 001e 7B68     		ldr	r3, [r7, #4]
 650 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 651 0022 07E0     		b	.L25
 652              	.L26:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 653              		.loc 1 424 0
 654 0024 7B68     		ldr	r3, [r7, #4]
 655 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 656 0028 9BB2     		uxth	r3, r3
 657 002a 23F48063 		bic	r3, r3, #1024
 658 002e 9AB2     		uxth	r2, r3
 659 0030 7B68     		ldr	r3, [r7, #4]
 660 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 661              	.L25:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 662              		.loc 1 426 0
 663 0034 07F10C07 		add	r7, r7, #12
 664 0038 BD46     		mov	sp, r7
 665 003a 80BC     		pop	{r7}
 666 003c 7047     		bx	lr
 667              		.cfi_endproc
 668              	.LFE117:
 670 003e 00BF     		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 671              		.align	2
 672              		.global	I2C_OwnAddress2Config
 673              		.thumb
 674              		.thumb_func
 676              	I2C_OwnAddress2Config:
 677              	.LFB118:
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 678              		.loc 1 435 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 16
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683 0000 80B4     		push	{r7}
 684              	.LCFI24:
 685              		.cfi_def_cfa_offset 4
 686              		.cfi_offset 7, -4
 687 0002 85B0     		sub	sp, sp, #20
 688              	.LCFI25:
 689              		.cfi_def_cfa_offset 24
 690 0004 00AF     		add	r7, sp, #0
 691              	.LCFI26:
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 694 0008 0B46     		mov	r3, r1
 695 000a FB70     		strb	r3, [r7, #3]
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 696              		.loc 1 436 0
 697 000c 4FF00003 		mov	r3, #0
 698 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 699              		.loc 1 442 0
 700 0012 7B68     		ldr	r3, [r7, #4]
 701 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 702 0016 FB81     		strh	r3, [r7, #14]	@ movhi
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 703              		.loc 1 445 0
 704 0018 FB89     		ldrh	r3, [r7, #14]	@ movhi
 705 001a 23F0FE03 		bic	r3, r3, #254
 706 001e FB81     		strh	r3, [r7, #14]	@ movhi
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 707              		.loc 1 448 0
 708 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 709 0022 9BB2     		uxth	r3, r3
 710 0024 03F0FE03 		and	r3, r3, #254
 711 0028 9AB2     		uxth	r2, r3
 712 002a FB89     		ldrh	r3, [r7, #14]
 713 002c 1343     		orrs	r3, r3, r2
 714 002e 9BB2     		uxth	r3, r3
 715 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 716              		.loc 1 451 0
 717 0032 7B68     		ldr	r3, [r7, #4]
 718 0034 FA89     		ldrh	r2, [r7, #14]	@ movhi
 719 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 720              		.loc 1 452 0
 721 0038 07F11407 		add	r7, r7, #20
 722 003c BD46     		mov	sp, r7
 723 003e 80BC     		pop	{r7}
 724 0040 7047     		bx	lr
 725              		.cfi_endproc
 726              	.LFE118:
 728 0042 00BF     		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 729              		.align	2
 730              		.global	I2C_DualAddressCmd
 731              		.thumb
 732              		.thumb_func
 734              	I2C_DualAddressCmd:
 735              	.LFB119:
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 736              		.loc 1 462 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741 0000 80B4     		push	{r7}
 742              	.LCFI27:
 743              		.cfi_def_cfa_offset 4
 744              		.cfi_offset 7, -4
 745 0002 83B0     		sub	sp, sp, #12
 746              	.LCFI28:
 747              		.cfi_def_cfa_offset 16
 748 0004 00AF     		add	r7, sp, #0
 749              	.LCFI29:
 750              		.cfi_def_cfa_register 7
 751 0006 7860     		str	r0, [r7, #4]
 752 0008 0B46     		mov	r3, r1
 753 000a FB70     		strb	r3, [r7, #3]
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 754              		.loc 1 466 0
 755 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 756 000e 002B     		cmp	r3, #0
 757 0010 08D0     		beq	.L30
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 758              		.loc 1 469 0
 759 0012 7B68     		ldr	r3, [r7, #4]
 760 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 761 0016 9BB2     		uxth	r3, r3
 762 0018 43F00103 		orr	r3, r3, #1
 763 001c 9AB2     		uxth	r2, r3
 764 001e 7B68     		ldr	r3, [r7, #4]
 765 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 766 0022 07E0     		b	.L29
 767              	.L30:
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 768              		.loc 1 474 0
 769 0024 7B68     		ldr	r3, [r7, #4]
 770 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 771 0028 9BB2     		uxth	r3, r3
 772 002a 23F00103 		bic	r3, r3, #1
 773 002e 9AB2     		uxth	r2, r3
 774 0030 7B68     		ldr	r3, [r7, #4]
 775 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 776              	.L29:
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 777              		.loc 1 476 0
 778 0034 07F10C07 		add	r7, r7, #12
 779 0038 BD46     		mov	sp, r7
 780 003a 80BC     		pop	{r7}
 781 003c 7047     		bx	lr
 782              		.cfi_endproc
 783              	.LFE119:
 785 003e 00BF     		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 786              		.align	2
 787              		.global	I2C_GeneralCallCmd
 788              		.thumb
 789              		.thumb_func
 791              	I2C_GeneralCallCmd:
 792              	.LFB120:
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 793              		.loc 1 486 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 8
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797              		@ link register save eliminated.
 798 0000 80B4     		push	{r7}
 799              	.LCFI30:
 800              		.cfi_def_cfa_offset 4
 801              		.cfi_offset 7, -4
 802 0002 83B0     		sub	sp, sp, #12
 803              	.LCFI31:
 804              		.cfi_def_cfa_offset 16
 805 0004 00AF     		add	r7, sp, #0
 806              	.LCFI32:
 807              		.cfi_def_cfa_register 7
 808 0006 7860     		str	r0, [r7, #4]
 809 0008 0B46     		mov	r3, r1
 810 000a FB70     		strb	r3, [r7, #3]
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 811              		.loc 1 490 0
 812 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 813 000e 002B     		cmp	r3, #0
 814 0010 08D0     		beq	.L33
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 815              		.loc 1 493 0
 816 0012 7B68     		ldr	r3, [r7, #4]
 817 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 818 0016 9BB2     		uxth	r3, r3
 819 0018 43F04003 		orr	r3, r3, #64
 820 001c 9AB2     		uxth	r2, r3
 821 001e 7B68     		ldr	r3, [r7, #4]
 822 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 823 0022 07E0     		b	.L32
 824              	.L33:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 825              		.loc 1 498 0
 826 0024 7B68     		ldr	r3, [r7, #4]
 827 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 828 0028 9BB2     		uxth	r3, r3
 829 002a 23F04003 		bic	r3, r3, #64
 830 002e 9AB2     		uxth	r2, r3
 831 0030 7B68     		ldr	r3, [r7, #4]
 832 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 833              	.L32:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 834              		.loc 1 500 0
 835 0034 07F10C07 		add	r7, r7, #12
 836 0038 BD46     		mov	sp, r7
 837 003a 80BC     		pop	{r7}
 838 003c 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE120:
 842 003e 00BF     		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 843              		.align	2
 844              		.global	I2C_SoftwareResetCmd
 845              		.thumb
 846              		.thumb_func
 848              	I2C_SoftwareResetCmd:
 849              	.LFB121:
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 850              		.loc 1 512 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 8
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855 0000 80B4     		push	{r7}
 856              	.LCFI33:
 857              		.cfi_def_cfa_offset 4
 858              		.cfi_offset 7, -4
 859 0002 83B0     		sub	sp, sp, #12
 860              	.LCFI34:
 861              		.cfi_def_cfa_offset 16
 862 0004 00AF     		add	r7, sp, #0
 863              	.LCFI35:
 864              		.cfi_def_cfa_register 7
 865 0006 7860     		str	r0, [r7, #4]
 866 0008 0B46     		mov	r3, r1
 867 000a FB70     		strb	r3, [r7, #3]
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 868              		.loc 1 516 0
 869 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 870 000e 002B     		cmp	r3, #0
 871 0010 0AD0     		beq	.L36
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 872              		.loc 1 519 0
 873 0012 7B68     		ldr	r3, [r7, #4]
 874 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 875 0016 9BB2     		uxth	r3, r3
 876 0018 6FEA4343 		mvn	r3, r3, lsl #17
 877 001c 6FEA5343 		mvn	r3, r3, lsr #17
 878 0020 9AB2     		uxth	r2, r3
 879 0022 7B68     		ldr	r3, [r7, #4]
 880 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 881 0026 09E0     		b	.L35
 882              	.L36:
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 883              		.loc 1 524 0
 884 0028 7B68     		ldr	r3, [r7, #4]
 885 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 886 002c 9BB2     		uxth	r3, r3
 887 002e 4FEA4343 		lsl	r3, r3, #17
 888 0032 4FEA5343 		lsr	r3, r3, #17
 889 0036 9AB2     		uxth	r2, r3
 890 0038 7B68     		ldr	r3, [r7, #4]
 891 003a 1A80     		strh	r2, [r3, #0]	@ movhi
 892              	.L35:
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 893              		.loc 1 526 0
 894 003c 07F10C07 		add	r7, r7, #12
 895 0040 BD46     		mov	sp, r7
 896 0042 80BC     		pop	{r7}
 897 0044 7047     		bx	lr
 898              		.cfi_endproc
 899              	.LFE121:
 901 0046 00BF     		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 902              		.align	2
 903              		.global	I2C_StretchClockCmd
 904              		.thumb
 905              		.thumb_func
 907              	I2C_StretchClockCmd:
 908              	.LFB122:
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 909              		.loc 1 536 0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 8
 912              		@ frame_needed = 1, uses_anonymous_args = 0
 913              		@ link register save eliminated.
 914 0000 80B4     		push	{r7}
 915              	.LCFI36:
 916              		.cfi_def_cfa_offset 4
 917              		.cfi_offset 7, -4
 918 0002 83B0     		sub	sp, sp, #12
 919              	.LCFI37:
 920              		.cfi_def_cfa_offset 16
 921 0004 00AF     		add	r7, sp, #0
 922              	.LCFI38:
 923              		.cfi_def_cfa_register 7
 924 0006 7860     		str	r0, [r7, #4]
 925 0008 0B46     		mov	r3, r1
 926 000a FB70     		strb	r3, [r7, #3]
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 927              		.loc 1 540 0
 928 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 929 000e 002B     		cmp	r3, #0
 930 0010 08D1     		bne	.L39
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 931              		.loc 1 543 0
 932 0012 7B68     		ldr	r3, [r7, #4]
 933 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 934 0016 9BB2     		uxth	r3, r3
 935 0018 43F08003 		orr	r3, r3, #128
 936 001c 9AB2     		uxth	r2, r3
 937 001e 7B68     		ldr	r3, [r7, #4]
 938 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 939 0022 07E0     		b	.L38
 940              	.L39:
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 941              		.loc 1 548 0
 942 0024 7B68     		ldr	r3, [r7, #4]
 943 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 944 0028 9BB2     		uxth	r3, r3
 945 002a 23F08003 		bic	r3, r3, #128
 946 002e 9AB2     		uxth	r2, r3
 947 0030 7B68     		ldr	r3, [r7, #4]
 948 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 949              	.L38:
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 950              		.loc 1 550 0
 951 0034 07F10C07 		add	r7, r7, #12
 952 0038 BD46     		mov	sp, r7
 953 003a 80BC     		pop	{r7}
 954 003c 7047     		bx	lr
 955              		.cfi_endproc
 956              	.LFE122:
 958 003e 00BF     		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 959              		.align	2
 960              		.global	I2C_FastModeDutyCycleConfig
 961              		.thumb
 962              		.thumb_func
 964              	I2C_FastModeDutyCycleConfig:
 965              	.LFB123:
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 966              		.loc 1 562 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 8
 969              		@ frame_needed = 1, uses_anonymous_args = 0
 970              		@ link register save eliminated.
 971 0000 80B4     		push	{r7}
 972              	.LCFI39:
 973              		.cfi_def_cfa_offset 4
 974              		.cfi_offset 7, -4
 975 0002 83B0     		sub	sp, sp, #12
 976              	.LCFI40:
 977              		.cfi_def_cfa_offset 16
 978 0004 00AF     		add	r7, sp, #0
 979              	.LCFI41:
 980              		.cfi_def_cfa_register 7
 981 0006 7860     		str	r0, [r7, #4]
 982 0008 0B46     		mov	r3, r1
 983 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 984              		.loc 1 566 0
 985 000c 7B88     		ldrh	r3, [r7, #2]
 986 000e B3F5804F 		cmp	r3, #16384
 987 0012 08D0     		beq	.L42
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 988              		.loc 1 569 0
 989 0014 7B68     		ldr	r3, [r7, #4]
 990 0016 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 991 0018 9BB2     		uxth	r3, r3
 992 001a 23F48043 		bic	r3, r3, #16384
 993 001e 9AB2     		uxth	r2, r3
 994 0020 7B68     		ldr	r3, [r7, #4]
 995 0022 9A83     		strh	r2, [r3, #28]	@ movhi
 996 0024 07E0     		b	.L41
 997              	.L42:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 998              		.loc 1 574 0
 999 0026 7B68     		ldr	r3, [r7, #4]
 1000 0028 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1001 002a 9BB2     		uxth	r3, r3
 1002 002c 43F48043 		orr	r3, r3, #16384
 1003 0030 9AB2     		uxth	r2, r3
 1004 0032 7B68     		ldr	r3, [r7, #4]
 1005 0034 9A83     		strh	r2, [r3, #28]	@ movhi
 1006              	.L41:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1007              		.loc 1 576 0
 1008 0036 07F10C07 		add	r7, r7, #12
 1009 003a BD46     		mov	sp, r7
 1010 003c 80BC     		pop	{r7}
 1011 003e 7047     		bx	lr
 1012              		.cfi_endproc
 1013              	.LFE123:
 1015              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 1016              		.align	2
 1017              		.global	I2C_NACKPositionConfig
 1018              		.thumb
 1019              		.thumb_func
 1021              	I2C_NACKPositionConfig:
 1022              	.LFB124:
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1023              		.loc 1 600 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 8
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027              		@ link register save eliminated.
 1028 0000 80B4     		push	{r7}
 1029              	.LCFI42:
 1030              		.cfi_def_cfa_offset 4
 1031              		.cfi_offset 7, -4
 1032 0002 83B0     		sub	sp, sp, #12
 1033              	.LCFI43:
 1034              		.cfi_def_cfa_offset 16
 1035 0004 00AF     		add	r7, sp, #0
 1036              	.LCFI44:
 1037              		.cfi_def_cfa_register 7
 1038 0006 7860     		str	r0, [r7, #4]
 1039 0008 0B46     		mov	r3, r1
 1040 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1041              		.loc 1 606 0
 1042 000c 7B88     		ldrh	r3, [r7, #2]
 1043 000e B3F5006F 		cmp	r3, #2048
 1044 0012 08D1     		bne	.L45
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1045              		.loc 1 609 0
 1046 0014 7B68     		ldr	r3, [r7, #4]
 1047 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1048 0018 9BB2     		uxth	r3, r3
 1049 001a 43F40063 		orr	r3, r3, #2048
 1050 001e 9AB2     		uxth	r2, r3
 1051 0020 7B68     		ldr	r3, [r7, #4]
 1052 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1053 0024 07E0     		b	.L44
 1054              	.L45:
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 1055              		.loc 1 614 0
 1056 0026 7B68     		ldr	r3, [r7, #4]
 1057 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1058 002a 9BB2     		uxth	r3, r3
 1059 002c 23F40063 		bic	r3, r3, #2048
 1060 0030 9AB2     		uxth	r2, r3
 1061 0032 7B68     		ldr	r3, [r7, #4]
 1062 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1063              	.L44:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1064              		.loc 1 616 0
 1065 0036 07F10C07 		add	r7, r7, #12
 1066 003a BD46     		mov	sp, r7
 1067 003c 80BC     		pop	{r7}
 1068 003e 7047     		bx	lr
 1069              		.cfi_endproc
 1070              	.LFE124:
 1072              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 1073              		.align	2
 1074              		.global	I2C_SMBusAlertConfig
 1075              		.thumb
 1076              		.thumb_func
 1078              	I2C_SMBusAlertConfig:
 1079              	.LFB125:
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1080              		.loc 1 628 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 8
 1083              		@ frame_needed = 1, uses_anonymous_args = 0
 1084              		@ link register save eliminated.
 1085 0000 80B4     		push	{r7}
 1086              	.LCFI45:
 1087              		.cfi_def_cfa_offset 4
 1088              		.cfi_offset 7, -4
 1089 0002 83B0     		sub	sp, sp, #12
 1090              	.LCFI46:
 1091              		.cfi_def_cfa_offset 16
 1092 0004 00AF     		add	r7, sp, #0
 1093              	.LCFI47:
 1094              		.cfi_def_cfa_register 7
 1095 0006 7860     		str	r0, [r7, #4]
 1096 0008 0B46     		mov	r3, r1
 1097 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1098              		.loc 1 632 0
 1099 000c 7B88     		ldrh	r3, [r7, #2]
 1100 000e B3F5005F 		cmp	r3, #8192
 1101 0012 08D1     		bne	.L48
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1102              		.loc 1 635 0
 1103 0014 7B68     		ldr	r3, [r7, #4]
 1104 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1105 0018 9BB2     		uxth	r3, r3
 1106 001a 43F40053 		orr	r3, r3, #8192
 1107 001e 9AB2     		uxth	r2, r3
 1108 0020 7B68     		ldr	r3, [r7, #4]
 1109 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1110 0024 07E0     		b	.L47
 1111              	.L48:
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 1112              		.loc 1 640 0
 1113 0026 7B68     		ldr	r3, [r7, #4]
 1114 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1115 002a 9BB2     		uxth	r3, r3
 1116 002c 23F40053 		bic	r3, r3, #8192
 1117 0030 9AB2     		uxth	r2, r3
 1118 0032 7B68     		ldr	r3, [r7, #4]
 1119 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1120              	.L47:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1121              		.loc 1 642 0
 1122 0036 07F10C07 		add	r7, r7, #12
 1123 003a BD46     		mov	sp, r7
 1124 003c 80BC     		pop	{r7}
 1125 003e 7047     		bx	lr
 1126              		.cfi_endproc
 1127              	.LFE125:
 1129              		.section	.text.I2C_ARPCmd,"ax",%progbits
 1130              		.align	2
 1131              		.global	I2C_ARPCmd
 1132              		.thumb
 1133              		.thumb_func
 1135              	I2C_ARPCmd:
 1136              	.LFB126:
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1137              		.loc 1 652 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 8
 1140              		@ frame_needed = 1, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142 0000 80B4     		push	{r7}
 1143              	.LCFI48:
 1144              		.cfi_def_cfa_offset 4
 1145              		.cfi_offset 7, -4
 1146 0002 83B0     		sub	sp, sp, #12
 1147              	.LCFI49:
 1148              		.cfi_def_cfa_offset 16
 1149 0004 00AF     		add	r7, sp, #0
 1150              	.LCFI50:
 1151              		.cfi_def_cfa_register 7
 1152 0006 7860     		str	r0, [r7, #4]
 1153 0008 0B46     		mov	r3, r1
 1154 000a FB70     		strb	r3, [r7, #3]
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1155              		.loc 1 656 0
 1156 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1157 000e 002B     		cmp	r3, #0
 1158 0010 08D0     		beq	.L51
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1159              		.loc 1 659 0
 1160 0012 7B68     		ldr	r3, [r7, #4]
 1161 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1162 0016 9BB2     		uxth	r3, r3
 1163 0018 43F01003 		orr	r3, r3, #16
 1164 001c 9AB2     		uxth	r2, r3
 1165 001e 7B68     		ldr	r3, [r7, #4]
 1166 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1167 0022 07E0     		b	.L50
 1168              	.L51:
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 1169              		.loc 1 664 0
 1170 0024 7B68     		ldr	r3, [r7, #4]
 1171 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1172 0028 9BB2     		uxth	r3, r3
 1173 002a 23F01003 		bic	r3, r3, #16
 1174 002e 9AB2     		uxth	r2, r3
 1175 0030 7B68     		ldr	r3, [r7, #4]
 1176 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1177              	.L50:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1178              		.loc 1 666 0
 1179 0034 07F10C07 		add	r7, r7, #12
 1180 0038 BD46     		mov	sp, r7
 1181 003a 80BC     		pop	{r7}
 1182 003c 7047     		bx	lr
 1183              		.cfi_endproc
 1184              	.LFE126:
 1186 003e 00BF     		.section	.text.I2C_SendData,"ax",%progbits
 1187              		.align	2
 1188              		.global	I2C_SendData
 1189              		.thumb
 1190              		.thumb_func
 1192              	I2C_SendData:
 1193              	.LFB127:
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1194              		.loc 1 690 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 8
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
 1199 0000 80B4     		push	{r7}
 1200              	.LCFI51:
 1201              		.cfi_def_cfa_offset 4
 1202              		.cfi_offset 7, -4
 1203 0002 83B0     		sub	sp, sp, #12
 1204              	.LCFI52:
 1205              		.cfi_def_cfa_offset 16
 1206 0004 00AF     		add	r7, sp, #0
 1207              	.LCFI53:
 1208              		.cfi_def_cfa_register 7
 1209 0006 7860     		str	r0, [r7, #4]
 1210 0008 0B46     		mov	r3, r1
 1211 000a FB70     		strb	r3, [r7, #3]
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 1212              		.loc 1 694 0
 1213 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1214 000e 9AB2     		uxth	r2, r3
 1215 0010 7B68     		ldr	r3, [r7, #4]
 1216 0012 1A82     		strh	r2, [r3, #16]	@ movhi
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1217              		.loc 1 695 0
 1218 0014 07F10C07 		add	r7, r7, #12
 1219 0018 BD46     		mov	sp, r7
 1220 001a 80BC     		pop	{r7}
 1221 001c 7047     		bx	lr
 1222              		.cfi_endproc
 1223              	.LFE127:
 1225 001e 00BF     		.section	.text.I2C_ReceiveData,"ax",%progbits
 1226              		.align	2
 1227              		.global	I2C_ReceiveData
 1228              		.thumb
 1229              		.thumb_func
 1231              	I2C_ReceiveData:
 1232              	.LFB128:
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1233              		.loc 1 703 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 8
 1236              		@ frame_needed = 1, uses_anonymous_args = 0
 1237              		@ link register save eliminated.
 1238 0000 80B4     		push	{r7}
 1239              	.LCFI54:
 1240              		.cfi_def_cfa_offset 4
 1241              		.cfi_offset 7, -4
 1242 0002 83B0     		sub	sp, sp, #12
 1243              	.LCFI55:
 1244              		.cfi_def_cfa_offset 16
 1245 0004 00AF     		add	r7, sp, #0
 1246              	.LCFI56:
 1247              		.cfi_def_cfa_register 7
 1248 0006 7860     		str	r0, [r7, #4]
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1249              		.loc 1 707 0
 1250 0008 7B68     		ldr	r3, [r7, #4]
 1251 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1252 000c 9BB2     		uxth	r3, r3
 1253 000e DBB2     		uxtb	r3, r3
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1254              		.loc 1 708 0
 1255 0010 1846     		mov	r0, r3
 1256 0012 07F10C07 		add	r7, r7, #12
 1257 0016 BD46     		mov	sp, r7
 1258 0018 80BC     		pop	{r7}
 1259 001a 7047     		bx	lr
 1260              		.cfi_endproc
 1261              	.LFE128:
 1263              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 1264              		.align	2
 1265              		.global	I2C_TransmitPEC
 1266              		.thumb
 1267              		.thumb_func
 1269              	I2C_TransmitPEC:
 1270              	.LFB129:
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1271              		.loc 1 734 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 8
 1274              		@ frame_needed = 1, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276 0000 80B4     		push	{r7}
 1277              	.LCFI57:
 1278              		.cfi_def_cfa_offset 4
 1279              		.cfi_offset 7, -4
 1280 0002 83B0     		sub	sp, sp, #12
 1281              	.LCFI58:
 1282              		.cfi_def_cfa_offset 16
 1283 0004 00AF     		add	r7, sp, #0
 1284              	.LCFI59:
 1285              		.cfi_def_cfa_register 7
 1286 0006 7860     		str	r0, [r7, #4]
 1287 0008 0B46     		mov	r3, r1
 1288 000a FB70     		strb	r3, [r7, #3]
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1289              		.loc 1 738 0
 1290 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1291 000e 002B     		cmp	r3, #0
 1292 0010 08D0     		beq	.L56
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1293              		.loc 1 741 0
 1294 0012 7B68     		ldr	r3, [r7, #4]
 1295 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1296 0016 9BB2     		uxth	r3, r3
 1297 0018 43F48053 		orr	r3, r3, #4096
 1298 001c 9AB2     		uxth	r2, r3
 1299 001e 7B68     		ldr	r3, [r7, #4]
 1300 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1301 0022 07E0     		b	.L55
 1302              	.L56:
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 1303              		.loc 1 746 0
 1304 0024 7B68     		ldr	r3, [r7, #4]
 1305 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1306 0028 9BB2     		uxth	r3, r3
 1307 002a 23F48053 		bic	r3, r3, #4096
 1308 002e 9AB2     		uxth	r2, r3
 1309 0030 7B68     		ldr	r3, [r7, #4]
 1310 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1311              	.L55:
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1312              		.loc 1 748 0
 1313 0034 07F10C07 		add	r7, r7, #12
 1314 0038 BD46     		mov	sp, r7
 1315 003a 80BC     		pop	{r7}
 1316 003c 7047     		bx	lr
 1317              		.cfi_endproc
 1318              	.LFE129:
 1320 003e 00BF     		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 1321              		.align	2
 1322              		.global	I2C_PECPositionConfig
 1323              		.thumb
 1324              		.thumb_func
 1326              	I2C_PECPositionConfig:
 1327              	.LFB130:
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1328              		.loc 1 765 0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 8
 1331              		@ frame_needed = 1, uses_anonymous_args = 0
 1332              		@ link register save eliminated.
 1333 0000 80B4     		push	{r7}
 1334              	.LCFI60:
 1335              		.cfi_def_cfa_offset 4
 1336              		.cfi_offset 7, -4
 1337 0002 83B0     		sub	sp, sp, #12
 1338              	.LCFI61:
 1339              		.cfi_def_cfa_offset 16
 1340 0004 00AF     		add	r7, sp, #0
 1341              	.LCFI62:
 1342              		.cfi_def_cfa_register 7
 1343 0006 7860     		str	r0, [r7, #4]
 1344 0008 0B46     		mov	r3, r1
 1345 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1346              		.loc 1 769 0
 1347 000c 7B88     		ldrh	r3, [r7, #2]
 1348 000e B3F5006F 		cmp	r3, #2048
 1349 0012 08D1     		bne	.L59
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1350              		.loc 1 772 0
 1351 0014 7B68     		ldr	r3, [r7, #4]
 1352 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1353 0018 9BB2     		uxth	r3, r3
 1354 001a 43F40063 		orr	r3, r3, #2048
 1355 001e 9AB2     		uxth	r2, r3
 1356 0020 7B68     		ldr	r3, [r7, #4]
 1357 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1358 0024 07E0     		b	.L58
 1359              	.L59:
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 1360              		.loc 1 777 0
 1361 0026 7B68     		ldr	r3, [r7, #4]
 1362 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1363 002a 9BB2     		uxth	r3, r3
 1364 002c 23F40063 		bic	r3, r3, #2048
 1365 0030 9AB2     		uxth	r2, r3
 1366 0032 7B68     		ldr	r3, [r7, #4]
 1367 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1368              	.L58:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1369              		.loc 1 779 0
 1370 0036 07F10C07 		add	r7, r7, #12
 1371 003a BD46     		mov	sp, r7
 1372 003c 80BC     		pop	{r7}
 1373 003e 7047     		bx	lr
 1374              		.cfi_endproc
 1375              	.LFE130:
 1377              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1378              		.align	2
 1379              		.global	I2C_CalculatePEC
 1380              		.thumb
 1381              		.thumb_func
 1383              	I2C_CalculatePEC:
 1384              	.LFB131:
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1385              		.loc 1 789 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 8
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
 1390 0000 80B4     		push	{r7}
 1391              	.LCFI63:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 7, -4
 1394 0002 83B0     		sub	sp, sp, #12
 1395              	.LCFI64:
 1396              		.cfi_def_cfa_offset 16
 1397 0004 00AF     		add	r7, sp, #0
 1398              	.LCFI65:
 1399              		.cfi_def_cfa_register 7
 1400 0006 7860     		str	r0, [r7, #4]
 1401 0008 0B46     		mov	r3, r1
 1402 000a FB70     		strb	r3, [r7, #3]
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1403              		.loc 1 793 0
 1404 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1405 000e 002B     		cmp	r3, #0
 1406 0010 08D0     		beq	.L62
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1407              		.loc 1 796 0
 1408 0012 7B68     		ldr	r3, [r7, #4]
 1409 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1410 0016 9BB2     		uxth	r3, r3
 1411 0018 43F02003 		orr	r3, r3, #32
 1412 001c 9AB2     		uxth	r2, r3
 1413 001e 7B68     		ldr	r3, [r7, #4]
 1414 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1415 0022 07E0     		b	.L61
 1416              	.L62:
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1417              		.loc 1 801 0
 1418 0024 7B68     		ldr	r3, [r7, #4]
 1419 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1420 0028 9BB2     		uxth	r3, r3
 1421 002a 23F02003 		bic	r3, r3, #32
 1422 002e 9AB2     		uxth	r2, r3
 1423 0030 7B68     		ldr	r3, [r7, #4]
 1424 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1425              	.L61:
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1426              		.loc 1 803 0
 1427 0034 07F10C07 		add	r7, r7, #12
 1428 0038 BD46     		mov	sp, r7
 1429 003a 80BC     		pop	{r7}
 1430 003c 7047     		bx	lr
 1431              		.cfi_endproc
 1432              	.LFE131:
 1434 003e 00BF     		.section	.text.I2C_GetPEC,"ax",%progbits
 1435              		.align	2
 1436              		.global	I2C_GetPEC
 1437              		.thumb
 1438              		.thumb_func
 1440              	I2C_GetPEC:
 1441              	.LFB132:
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1442              		.loc 1 811 0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 8
 1445              		@ frame_needed = 1, uses_anonymous_args = 0
 1446              		@ link register save eliminated.
 1447 0000 80B4     		push	{r7}
 1448              	.LCFI66:
 1449              		.cfi_def_cfa_offset 4
 1450              		.cfi_offset 7, -4
 1451 0002 83B0     		sub	sp, sp, #12
 1452              	.LCFI67:
 1453              		.cfi_def_cfa_offset 16
 1454 0004 00AF     		add	r7, sp, #0
 1455              	.LCFI68:
 1456              		.cfi_def_cfa_register 7
 1457 0006 7860     		str	r0, [r7, #4]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1458              		.loc 1 815 0
 1459 0008 7B68     		ldr	r3, [r7, #4]
 1460 000a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1461 000c 9BB2     		uxth	r3, r3
 1462 000e 4FEA1323 		lsr	r3, r3, #8
 1463 0012 9BB2     		uxth	r3, r3
 1464 0014 DBB2     		uxtb	r3, r3
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1465              		.loc 1 816 0
 1466 0016 1846     		mov	r0, r3
 1467 0018 07F10C07 		add	r7, r7, #12
 1468 001c BD46     		mov	sp, r7
 1469 001e 80BC     		pop	{r7}
 1470 0020 7047     		bx	lr
 1471              		.cfi_endproc
 1472              	.LFE132:
 1474 0022 00BF     		.section	.text.I2C_DMACmd,"ax",%progbits
 1475              		.align	2
 1476              		.global	I2C_DMACmd
 1477              		.thumb
 1478              		.thumb_func
 1480              	I2C_DMACmd:
 1481              	.LFB133:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1482              		.loc 1 844 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 8
 1485              		@ frame_needed = 1, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487 0000 80B4     		push	{r7}
 1488              	.LCFI69:
 1489              		.cfi_def_cfa_offset 4
 1490              		.cfi_offset 7, -4
 1491 0002 83B0     		sub	sp, sp, #12
 1492              	.LCFI70:
 1493              		.cfi_def_cfa_offset 16
 1494 0004 00AF     		add	r7, sp, #0
 1495              	.LCFI71:
 1496              		.cfi_def_cfa_register 7
 1497 0006 7860     		str	r0, [r7, #4]
 1498 0008 0B46     		mov	r3, r1
 1499 000a FB70     		strb	r3, [r7, #3]
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1500              		.loc 1 848 0
 1501 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1502 000e 002B     		cmp	r3, #0
 1503 0010 08D0     		beq	.L66
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1504              		.loc 1 851 0
 1505 0012 7B68     		ldr	r3, [r7, #4]
 1506 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1507 0016 9BB2     		uxth	r3, r3
 1508 0018 43F40063 		orr	r3, r3, #2048
 1509 001c 9AB2     		uxth	r2, r3
 1510 001e 7B68     		ldr	r3, [r7, #4]
 1511 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 1512 0022 07E0     		b	.L65
 1513              	.L66:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1514              		.loc 1 856 0
 1515 0024 7B68     		ldr	r3, [r7, #4]
 1516 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1517 0028 9BB2     		uxth	r3, r3
 1518 002a 23F40063 		bic	r3, r3, #2048
 1519 002e 9AB2     		uxth	r2, r3
 1520 0030 7B68     		ldr	r3, [r7, #4]
 1521 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1522              	.L65:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1523              		.loc 1 858 0
 1524 0034 07F10C07 		add	r7, r7, #12
 1525 0038 BD46     		mov	sp, r7
 1526 003a 80BC     		pop	{r7}
 1527 003c 7047     		bx	lr
 1528              		.cfi_endproc
 1529              	.LFE133:
 1531 003e 00BF     		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 1532              		.align	2
 1533              		.global	I2C_DMALastTransferCmd
 1534              		.thumb
 1535              		.thumb_func
 1537              	I2C_DMALastTransferCmd:
 1538              	.LFB134:
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1539              		.loc 1 868 0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 8
 1542              		@ frame_needed = 1, uses_anonymous_args = 0
 1543              		@ link register save eliminated.
 1544 0000 80B4     		push	{r7}
 1545              	.LCFI72:
 1546              		.cfi_def_cfa_offset 4
 1547              		.cfi_offset 7, -4
 1548 0002 83B0     		sub	sp, sp, #12
 1549              	.LCFI73:
 1550              		.cfi_def_cfa_offset 16
 1551 0004 00AF     		add	r7, sp, #0
 1552              	.LCFI74:
 1553              		.cfi_def_cfa_register 7
 1554 0006 7860     		str	r0, [r7, #4]
 1555 0008 0B46     		mov	r3, r1
 1556 000a FB70     		strb	r3, [r7, #3]
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1557              		.loc 1 872 0
 1558 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1559 000e 002B     		cmp	r3, #0
 1560 0010 08D0     		beq	.L69
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1561              		.loc 1 875 0
 1562 0012 7B68     		ldr	r3, [r7, #4]
 1563 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1564 0016 9BB2     		uxth	r3, r3
 1565 0018 43F48053 		orr	r3, r3, #4096
 1566 001c 9AB2     		uxth	r2, r3
 1567 001e 7B68     		ldr	r3, [r7, #4]
 1568 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 1569 0022 07E0     		b	.L68
 1570              	.L69:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1571              		.loc 1 880 0
 1572 0024 7B68     		ldr	r3, [r7, #4]
 1573 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1574 0028 9BB2     		uxth	r3, r3
 1575 002a 23F48053 		bic	r3, r3, #4096
 1576 002e 9AB2     		uxth	r2, r3
 1577 0030 7B68     		ldr	r3, [r7, #4]
 1578 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1579              	.L68:
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1580              		.loc 1 882 0
 1581 0034 07F10C07 		add	r7, r7, #12
 1582 0038 BD46     		mov	sp, r7
 1583 003a 80BC     		pop	{r7}
 1584 003c 7047     		bx	lr
 1585              		.cfi_endproc
 1586              	.LFE134:
 1588 003e 00BF     		.section	.text.I2C_ReadRegister,"ax",%progbits
 1589              		.align	2
 1590              		.global	I2C_ReadRegister
 1591              		.thumb
 1592              		.thumb_func
 1594              	I2C_ReadRegister:
 1595              	.LFB135:
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1596              		.loc 1 1006 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 16
 1599              		@ frame_needed = 1, uses_anonymous_args = 0
 1600              		@ link register save eliminated.
 1601 0000 80B4     		push	{r7}
 1602              	.LCFI75:
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 7, -4
 1605 0002 85B0     		sub	sp, sp, #20
 1606              	.LCFI76:
 1607              		.cfi_def_cfa_offset 24
 1608 0004 00AF     		add	r7, sp, #0
 1609              	.LCFI77:
 1610              		.cfi_def_cfa_register 7
 1611 0006 7860     		str	r0, [r7, #4]
 1612 0008 0B46     		mov	r3, r1
 1613 000a FB70     		strb	r3, [r7, #3]
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1614              		.loc 1 1007 0
 1615 000c 4FF00003 		mov	r3, #0
 1616 0010 FB60     		str	r3, [r7, #12]
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1617              		.loc 1 1013 0
 1618 0012 7B68     		ldr	r3, [r7, #4]
 1619 0014 FB60     		str	r3, [r7, #12]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1620              		.loc 1 1014 0
 1621 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1622 0018 FB68     		ldr	r3, [r7, #12]
 1623 001a D318     		adds	r3, r2, r3
 1624 001c FB60     		str	r3, [r7, #12]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1625              		.loc 1 1017 0
 1626 001e FB68     		ldr	r3, [r7, #12]
 1627 0020 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1628 0022 9BB2     		uxth	r3, r3
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1629              		.loc 1 1018 0
 1630 0024 1846     		mov	r0, r3
 1631 0026 07F11407 		add	r7, r7, #20
 1632 002a BD46     		mov	sp, r7
 1633 002c 80BC     		pop	{r7}
 1634 002e 7047     		bx	lr
 1635              		.cfi_endproc
 1636              	.LFE135:
 1638              		.section	.text.I2C_ITConfig,"ax",%progbits
 1639              		.align	2
 1640              		.global	I2C_ITConfig
 1641              		.thumb
 1642              		.thumb_func
 1644              	I2C_ITConfig:
 1645              	.LFB136:
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1646              		.loc 1 1033 0
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 8
 1649              		@ frame_needed = 1, uses_anonymous_args = 0
 1650              		@ link register save eliminated.
 1651 0000 80B4     		push	{r7}
 1652              	.LCFI78:
 1653              		.cfi_def_cfa_offset 4
 1654              		.cfi_offset 7, -4
 1655 0002 83B0     		sub	sp, sp, #12
 1656              	.LCFI79:
 1657              		.cfi_def_cfa_offset 16
 1658 0004 00AF     		add	r7, sp, #0
 1659              	.LCFI80:
 1660              		.cfi_def_cfa_register 7
 1661 0006 7860     		str	r0, [r7, #4]
 1662 0008 1346     		mov	r3, r2
 1663 000a 0A46     		mov	r2, r1	@ movhi
 1664 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1665 000e 7B70     		strb	r3, [r7, #1]
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1666              		.loc 1 1039 0
 1667 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1668 0012 002B     		cmp	r3, #0
 1669 0014 08D0     		beq	.L73
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1670              		.loc 1 1042 0
 1671 0016 7B68     		ldr	r3, [r7, #4]
 1672 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1673 001a 9AB2     		uxth	r2, r3
 1674 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1675 001e 1343     		orrs	r3, r3, r2
 1676 0020 9AB2     		uxth	r2, r3
 1677 0022 7B68     		ldr	r3, [r7, #4]
 1678 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 1679 0026 0AE0     		b	.L72
 1680              	.L73:
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1681              		.loc 1 1047 0
 1682 0028 7B68     		ldr	r3, [r7, #4]
 1683 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1684 002c 9AB2     		uxth	r2, r3
 1685 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1686 0030 6FEA0303 		mvn	r3, r3
 1687 0034 9BB2     		uxth	r3, r3
 1688 0036 1340     		ands	r3, r3, r2
 1689 0038 9AB2     		uxth	r2, r3
 1690 003a 7B68     		ldr	r3, [r7, #4]
 1691 003c 9A80     		strh	r2, [r3, #4]	@ movhi
 1692              	.L72:
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1693              		.loc 1 1049 0
 1694 003e 07F10C07 		add	r7, r7, #12
 1695 0042 BD46     		mov	sp, r7
 1696 0044 80BC     		pop	{r7}
 1697 0046 7047     		bx	lr
 1698              		.cfi_endproc
 1699              	.LFE136:
 1701              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1702              		.align	2
 1703              		.global	I2C_CheckEvent
 1704              		.thumb
 1705              		.thumb_func
 1707              	I2C_CheckEvent:
 1708              	.LFB137:
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1709              		.loc 1 1092 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 24
 1712              		@ frame_needed = 1, uses_anonymous_args = 0
 1713              		@ link register save eliminated.
 1714 0000 80B4     		push	{r7}
 1715              	.LCFI81:
 1716              		.cfi_def_cfa_offset 4
 1717              		.cfi_offset 7, -4
 1718 0002 87B0     		sub	sp, sp, #28
 1719              	.LCFI82:
 1720              		.cfi_def_cfa_offset 32
 1721 0004 00AF     		add	r7, sp, #0
 1722              	.LCFI83:
 1723              		.cfi_def_cfa_register 7
 1724 0006 7860     		str	r0, [r7, #4]
 1725 0008 3960     		str	r1, [r7, #0]
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1726              		.loc 1 1093 0
 1727 000a 4FF00003 		mov	r3, #0
 1728 000e 3B61     		str	r3, [r7, #16]
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1729              		.loc 1 1094 0
 1730 0010 4FF00003 		mov	r3, #0
 1731 0014 FB60     		str	r3, [r7, #12]
 1732 0016 4FF00003 		mov	r3, #0
 1733 001a BB60     		str	r3, [r7, #8]
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 1734              		.loc 1 1095 0
 1735 001c 4FF00003 		mov	r3, #0
 1736 0020 FB75     		strb	r3, [r7, #23]
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1737              		.loc 1 1102 0
 1738 0022 7B68     		ldr	r3, [r7, #4]
 1739 0024 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1740 0026 9BB2     		uxth	r3, r3
 1741 0028 FB60     		str	r3, [r7, #12]
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1742              		.loc 1 1103 0
 1743 002a 7B68     		ldr	r3, [r7, #4]
 1744 002c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1745 002e 9BB2     		uxth	r3, r3
 1746 0030 BB60     		str	r3, [r7, #8]
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1747              		.loc 1 1104 0
 1748 0032 BB68     		ldr	r3, [r7, #8]
 1749 0034 4FEA0343 		lsl	r3, r3, #16
 1750 0038 BB60     		str	r3, [r7, #8]
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1751              		.loc 1 1107 0
 1752 003a FA68     		ldr	r2, [r7, #12]
 1753 003c BB68     		ldr	r3, [r7, #8]
 1754 003e 1343     		orrs	r3, r3, r2
 1755 0040 23F07F43 		bic	r3, r3, #-16777216
 1756 0044 3B61     		str	r3, [r7, #16]
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1757              		.loc 1 1110 0
 1758 0046 3A69     		ldr	r2, [r7, #16]
 1759 0048 3B68     		ldr	r3, [r7, #0]
 1760 004a 1A40     		ands	r2, r2, r3
 1761 004c 3B68     		ldr	r3, [r7, #0]
 1762 004e 9A42     		cmp	r2, r3
 1763 0050 03D1     		bne	.L76
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 1764              		.loc 1 1113 0
 1765 0052 4FF00103 		mov	r3, #1
 1766 0056 FB75     		strb	r3, [r7, #23]
 1767 0058 02E0     		b	.L77
 1768              	.L76:
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 1769              		.loc 1 1118 0
 1770 005a 4FF00003 		mov	r3, #0
 1771 005e FB75     		strb	r3, [r7, #23]
 1772              	.L77:
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 1773              		.loc 1 1121 0
 1774 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1775              		.loc 1 1122 0
 1776 0062 1846     		mov	r0, r3
 1777 0064 07F11C07 		add	r7, r7, #28
 1778 0068 BD46     		mov	sp, r7
 1779 006a 80BC     		pop	{r7}
 1780 006c 7047     		bx	lr
 1781              		.cfi_endproc
 1782              	.LFE137:
 1784 006e 00BF     		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1785              		.align	2
 1786              		.global	I2C_GetLastEvent
 1787              		.thumb
 1788              		.thumb_func
 1790              	I2C_GetLastEvent:
 1791              	.LFB138:
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1792              		.loc 1 1140 0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 24
 1795              		@ frame_needed = 1, uses_anonymous_args = 0
 1796              		@ link register save eliminated.
 1797 0000 80B4     		push	{r7}
 1798              	.LCFI84:
 1799              		.cfi_def_cfa_offset 4
 1800              		.cfi_offset 7, -4
 1801 0002 87B0     		sub	sp, sp, #28
 1802              	.LCFI85:
 1803              		.cfi_def_cfa_offset 32
 1804 0004 00AF     		add	r7, sp, #0
 1805              	.LCFI86:
 1806              		.cfi_def_cfa_register 7
 1807 0006 7860     		str	r0, [r7, #4]
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1808              		.loc 1 1141 0
 1809 0008 4FF00003 		mov	r3, #0
 1810 000c 7B61     		str	r3, [r7, #20]
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1811              		.loc 1 1142 0
 1812 000e 4FF00003 		mov	r3, #0
 1813 0012 3B61     		str	r3, [r7, #16]
 1814 0014 4FF00003 		mov	r3, #0
 1815 0018 FB60     		str	r3, [r7, #12]
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1816              		.loc 1 1148 0
 1817 001a 7B68     		ldr	r3, [r7, #4]
 1818 001c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1819 001e 9BB2     		uxth	r3, r3
 1820 0020 3B61     		str	r3, [r7, #16]
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1821              		.loc 1 1149 0
 1822 0022 7B68     		ldr	r3, [r7, #4]
 1823 0024 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1824 0026 9BB2     		uxth	r3, r3
 1825 0028 FB60     		str	r3, [r7, #12]
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1826              		.loc 1 1150 0
 1827 002a FB68     		ldr	r3, [r7, #12]
 1828 002c 4FEA0343 		lsl	r3, r3, #16
 1829 0030 FB60     		str	r3, [r7, #12]
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1830              		.loc 1 1153 0
 1831 0032 3A69     		ldr	r2, [r7, #16]
 1832 0034 FB68     		ldr	r3, [r7, #12]
 1833 0036 1343     		orrs	r3, r3, r2
 1834 0038 23F07F43 		bic	r3, r3, #-16777216
 1835 003c 7B61     		str	r3, [r7, #20]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 1836              		.loc 1 1156 0
 1837 003e 7B69     		ldr	r3, [r7, #20]
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1838              		.loc 1 1157 0
 1839 0040 1846     		mov	r0, r3
 1840 0042 07F11C07 		add	r7, r7, #28
 1841 0046 BD46     		mov	sp, r7
 1842 0048 80BC     		pop	{r7}
 1843 004a 7047     		bx	lr
 1844              		.cfi_endproc
 1845              	.LFE138:
 1847              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1848              		.align	2
 1849              		.global	I2C_GetFlagStatus
 1850              		.thumb
 1851              		.thumb_func
 1853              	I2C_GetFlagStatus:
 1854              	.LFB139:
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1855              		.loc 1 1195 0
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 24
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859              		@ link register save eliminated.
 1860 0000 80B4     		push	{r7}
 1861              	.LCFI87:
 1862              		.cfi_def_cfa_offset 4
 1863              		.cfi_offset 7, -4
 1864 0002 87B0     		sub	sp, sp, #28
 1865              	.LCFI88:
 1866              		.cfi_def_cfa_offset 32
 1867 0004 00AF     		add	r7, sp, #0
 1868              	.LCFI89:
 1869              		.cfi_def_cfa_register 7
 1870 0006 7860     		str	r0, [r7, #4]
 1871 0008 3960     		str	r1, [r7, #0]
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 1872              		.loc 1 1196 0
 1873 000a 4FF00003 		mov	r3, #0
 1874 000e FB75     		strb	r3, [r7, #23]
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1875              		.loc 1 1197 0
 1876 0010 4FF00003 		mov	r3, #0
 1877 0014 3B61     		str	r3, [r7, #16]
 1878 0016 4FF00003 		mov	r3, #0
 1879 001a FB60     		str	r3, [r7, #12]
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1880              		.loc 1 1204 0
 1881 001c 7B68     		ldr	r3, [r7, #4]
 1882 001e FB60     		str	r3, [r7, #12]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1883              		.loc 1 1207 0
 1884 0020 3B68     		ldr	r3, [r7, #0]
 1885 0022 4FEA1373 		lsr	r3, r3, #28
 1886 0026 3B61     		str	r3, [r7, #16]
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1887              		.loc 1 1210 0
 1888 0028 3B68     		ldr	r3, [r7, #0]
 1889 002a 23F07F43 		bic	r3, r3, #-16777216
 1890 002e 3B60     		str	r3, [r7, #0]
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1891              		.loc 1 1212 0
 1892 0030 3B69     		ldr	r3, [r7, #16]
 1893 0032 002B     		cmp	r3, #0
 1894 0034 04D0     		beq	.L80
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1895              		.loc 1 1215 0
 1896 0036 FB68     		ldr	r3, [r7, #12]
 1897 0038 03F11403 		add	r3, r3, #20
 1898 003c FB60     		str	r3, [r7, #12]
 1899 003e 07E0     		b	.L81
 1900              	.L80:
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1901              		.loc 1 1220 0
 1902 0040 3B68     		ldr	r3, [r7, #0]
 1903 0042 4FEA1343 		lsr	r3, r3, #16
 1904 0046 3B60     		str	r3, [r7, #0]
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1905              		.loc 1 1222 0
 1906 0048 FB68     		ldr	r3, [r7, #12]
 1907 004a 03F11803 		add	r3, r3, #24
 1908 004e FB60     		str	r3, [r7, #12]
 1909              	.L81:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1910              		.loc 1 1225 0
 1911 0050 FB68     		ldr	r3, [r7, #12]
 1912 0052 1A68     		ldr	r2, [r3, #0]
 1913 0054 3B68     		ldr	r3, [r7, #0]
 1914 0056 1340     		ands	r3, r3, r2
 1915 0058 002B     		cmp	r3, #0
 1916 005a 03D0     		beq	.L82
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1917              		.loc 1 1228 0
 1918 005c 4FF00103 		mov	r3, #1
 1919 0060 FB75     		strb	r3, [r7, #23]
 1920 0062 02E0     		b	.L83
 1921              	.L82:
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1922              		.loc 1 1233 0
 1923 0064 4FF00003 		mov	r3, #0
 1924 0068 FB75     		strb	r3, [r7, #23]
 1925              	.L83:
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 1926              		.loc 1 1237 0
 1927 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1928              		.loc 1 1238 0
 1929 006c 1846     		mov	r0, r3
 1930 006e 07F11C07 		add	r7, r7, #28
 1931 0072 BD46     		mov	sp, r7
 1932 0074 80BC     		pop	{r7}
 1933 0076 7047     		bx	lr
 1934              		.cfi_endproc
 1935              	.LFE139:
 1937              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1938              		.align	2
 1939              		.global	I2C_ClearFlag
 1940              		.thumb
 1941              		.thumb_func
 1943              	I2C_ClearFlag:
 1944              	.LFB140:
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1945              		.loc 1 1272 0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 16
 1948              		@ frame_needed = 1, uses_anonymous_args = 0
 1949              		@ link register save eliminated.
 1950 0000 80B4     		push	{r7}
 1951              	.LCFI90:
 1952              		.cfi_def_cfa_offset 4
 1953              		.cfi_offset 7, -4
 1954 0002 85B0     		sub	sp, sp, #20
 1955              	.LCFI91:
 1956              		.cfi_def_cfa_offset 24
 1957 0004 00AF     		add	r7, sp, #0
 1958              	.LCFI92:
 1959              		.cfi_def_cfa_register 7
 1960 0006 7860     		str	r0, [r7, #4]
 1961 0008 3960     		str	r1, [r7, #0]
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 1962              		.loc 1 1273 0
 1963 000a 4FF00003 		mov	r3, #0
 1964 000e FB60     		str	r3, [r7, #12]
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1965              		.loc 1 1278 0
 1966 0010 3B68     		ldr	r3, [r7, #0]
 1967 0012 23F07F43 		bic	r3, r3, #-16777216
 1968 0016 FB60     		str	r3, [r7, #12]
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1969              		.loc 1 1280 0
 1970 0018 FB68     		ldr	r3, [r7, #12]
 1971 001a 9BB2     		uxth	r3, r3
 1972 001c 6FEA0303 		mvn	r3, r3
 1973 0020 9AB2     		uxth	r2, r3
 1974 0022 7B68     		ldr	r3, [r7, #4]
 1975 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1976              		.loc 1 1281 0
 1977 0026 07F11407 		add	r7, r7, #20
 1978 002a BD46     		mov	sp, r7
 1979 002c 80BC     		pop	{r7}
 1980 002e 7047     		bx	lr
 1981              		.cfi_endproc
 1982              	.LFE140:
 1984              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1985              		.align	2
 1986              		.global	I2C_GetITStatus
 1987              		.thumb
 1988              		.thumb_func
 1990              	I2C_GetITStatus:
 1991              	.LFB141:
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1992              		.loc 1 1306 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 16
 1995              		@ frame_needed = 1, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997 0000 80B4     		push	{r7}
 1998              	.LCFI93:
 1999              		.cfi_def_cfa_offset 4
 2000              		.cfi_offset 7, -4
 2001 0002 85B0     		sub	sp, sp, #20
 2002              	.LCFI94:
 2003              		.cfi_def_cfa_offset 24
 2004 0004 00AF     		add	r7, sp, #0
 2005              	.LCFI95:
 2006              		.cfi_def_cfa_register 7
 2007 0006 7860     		str	r0, [r7, #4]
 2008 0008 3960     		str	r1, [r7, #0]
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 2009              		.loc 1 1307 0
 2010 000a 4FF00003 		mov	r3, #0
 2011 000e FB73     		strb	r3, [r7, #15]
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 2012              		.loc 1 1308 0
 2013 0010 4FF00003 		mov	r3, #0
 2014 0014 BB60     		str	r3, [r7, #8]
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 2015              		.loc 1 1315 0
 2016 0016 3B68     		ldr	r3, [r7, #0]
 2017 0018 03F0E063 		and	r3, r3, #117440512
 2018 001c 4FEA1342 		lsr	r2, r3, #16
 2019 0020 7B68     		ldr	r3, [r7, #4]
 2020 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 2021 0024 9BB2     		uxth	r3, r3
 2022 0026 1340     		ands	r3, r3, r2
 2023 0028 BB60     		str	r3, [r7, #8]
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 2024              		.loc 1 1318 0
 2025 002a 3B68     		ldr	r3, [r7, #0]
 2026 002c 23F07F43 		bic	r3, r3, #-16777216
 2027 0030 3B60     		str	r3, [r7, #0]
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 2028              		.loc 1 1321 0
 2029 0032 7B68     		ldr	r3, [r7, #4]
 2030 0034 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2031 0036 9BB2     		uxth	r3, r3
 2032 0038 1A46     		mov	r2, r3
 2033 003a 3B68     		ldr	r3, [r7, #0]
 2034 003c 1340     		ands	r3, r3, r2
 2035 003e 002B     		cmp	r3, #0
 2036 0040 06D0     		beq	.L86
 2037              		.loc 1 1321 0 is_stmt 0 discriminator 1
 2038 0042 BB68     		ldr	r3, [r7, #8]
 2039 0044 002B     		cmp	r3, #0
 2040 0046 03D0     		beq	.L86
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2041              		.loc 1 1324 0 is_stmt 1
 2042 0048 4FF00103 		mov	r3, #1
 2043 004c FB73     		strb	r3, [r7, #15]
 2044 004e 02E0     		b	.L87
 2045              	.L86:
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2046              		.loc 1 1329 0
 2047 0050 4FF00003 		mov	r3, #0
 2048 0054 FB73     		strb	r3, [r7, #15]
 2049              	.L87:
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 2050              		.loc 1 1332 0
 2051 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2052              		.loc 1 1333 0
 2053 0058 1846     		mov	r0, r3
 2054 005a 07F11407 		add	r7, r7, #20
 2055 005e BD46     		mov	sp, r7
 2056 0060 80BC     		pop	{r7}
 2057 0062 7047     		bx	lr
 2058              		.cfi_endproc
 2059              	.LFE141:
 2061              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 2062              		.align	2
 2063              		.global	I2C_ClearITPendingBit
 2064              		.thumb
 2065              		.thumb_func
 2067              	I2C_ClearITPendingBit:
 2068              	.LFB142:
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 2069              		.loc 1 1366 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 16
 2072              		@ frame_needed = 1, uses_anonymous_args = 0
 2073              		@ link register save eliminated.
 2074 0000 80B4     		push	{r7}
 2075              	.LCFI96:
 2076              		.cfi_def_cfa_offset 4
 2077              		.cfi_offset 7, -4
 2078 0002 85B0     		sub	sp, sp, #20
 2079              	.LCFI97:
 2080              		.cfi_def_cfa_offset 24
 2081 0004 00AF     		add	r7, sp, #0
 2082              	.LCFI98:
 2083              		.cfi_def_cfa_register 7
 2084 0006 7860     		str	r0, [r7, #4]
 2085 0008 3960     		str	r1, [r7, #0]
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2086              		.loc 1 1367 0
 2087 000a 4FF00003 		mov	r3, #0
 2088 000e FB60     		str	r3, [r7, #12]
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2089              		.loc 1 1373 0
 2090 0010 3B68     		ldr	r3, [r7, #0]
 2091 0012 23F07F43 		bic	r3, r3, #-16777216
 2092 0016 FB60     		str	r3, [r7, #12]
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2093              		.loc 1 1376 0
 2094 0018 FB68     		ldr	r3, [r7, #12]
 2095 001a 9BB2     		uxth	r3, r3
 2096 001c 6FEA0303 		mvn	r3, r3
 2097 0020 9AB2     		uxth	r2, r3
 2098 0022 7B68     		ldr	r3, [r7, #4]
 2099 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2100              		.loc 1 1377 0
 2101 0026 07F11407 		add	r7, r7, #20
 2102 002a BD46     		mov	sp, r7
 2103 002c 80BC     		pop	{r7}
 2104 002e 7047     		bx	lr
 2105              		.cfi_endproc
 2106              	.LFE142:
 2108              		.text
 2109              	.Letext0:
 2110              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2111              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
 2112              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_S
 2113              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_S
 2114              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
  C:\Temp\ccyGH6r6.s:19     .text.I2C_DeInit:00000000 $t
  C:\Temp\ccyGH6r6.s:24     .text.I2C_DeInit:00000000 I2C_DeInit
  C:\Temp\ccyGH6r6.s:98     .text.I2C_Init:00000000 $t
  C:\Temp\ccyGH6r6.s:103    .text.I2C_Init:00000000 I2C_Init
  C:\Temp\ccyGH6r6.s:331    .text.I2C_StructInit:00000000 $t
  C:\Temp\ccyGH6r6.s:336    .text.I2C_StructInit:00000000 I2C_StructInit
  C:\Temp\ccyGH6r6.s:387    .text.I2C_Cmd:00000000 $t
  C:\Temp\ccyGH6r6.s:392    .text.I2C_Cmd:00000000 I2C_Cmd
  C:\Temp\ccyGH6r6.s:444    .text.I2C_GenerateSTART:00000000 $t
  C:\Temp\ccyGH6r6.s:449    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
  C:\Temp\ccyGH6r6.s:501    .text.I2C_GenerateSTOP:00000000 $t
  C:\Temp\ccyGH6r6.s:506    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
  C:\Temp\ccyGH6r6.s:558    .text.I2C_Send7bitAddress:00000000 $t
  C:\Temp\ccyGH6r6.s:563    .text.I2C_Send7bitAddress:00000000 I2C_Send7bitAddress
  C:\Temp\ccyGH6r6.s:614    .text.I2C_AcknowledgeConfig:00000000 $t
  C:\Temp\ccyGH6r6.s:619    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
  C:\Temp\ccyGH6r6.s:671    .text.I2C_OwnAddress2Config:00000000 $t
  C:\Temp\ccyGH6r6.s:676    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
  C:\Temp\ccyGH6r6.s:729    .text.I2C_DualAddressCmd:00000000 $t
  C:\Temp\ccyGH6r6.s:734    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
  C:\Temp\ccyGH6r6.s:786    .text.I2C_GeneralCallCmd:00000000 $t
  C:\Temp\ccyGH6r6.s:791    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
  C:\Temp\ccyGH6r6.s:843    .text.I2C_SoftwareResetCmd:00000000 $t
  C:\Temp\ccyGH6r6.s:848    .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
  C:\Temp\ccyGH6r6.s:902    .text.I2C_StretchClockCmd:00000000 $t
  C:\Temp\ccyGH6r6.s:907    .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
  C:\Temp\ccyGH6r6.s:959    .text.I2C_FastModeDutyCycleConfig:00000000 $t
  C:\Temp\ccyGH6r6.s:964    .text.I2C_FastModeDutyCycleConfig:00000000 I2C_FastModeDutyCycleConfig
  C:\Temp\ccyGH6r6.s:1016   .text.I2C_NACKPositionConfig:00000000 $t
  C:\Temp\ccyGH6r6.s:1021   .text.I2C_NACKPositionConfig:00000000 I2C_NACKPositionConfig
  C:\Temp\ccyGH6r6.s:1073   .text.I2C_SMBusAlertConfig:00000000 $t
  C:\Temp\ccyGH6r6.s:1078   .text.I2C_SMBusAlertConfig:00000000 I2C_SMBusAlertConfig
  C:\Temp\ccyGH6r6.s:1130   .text.I2C_ARPCmd:00000000 $t
  C:\Temp\ccyGH6r6.s:1135   .text.I2C_ARPCmd:00000000 I2C_ARPCmd
  C:\Temp\ccyGH6r6.s:1187   .text.I2C_SendData:00000000 $t
  C:\Temp\ccyGH6r6.s:1192   .text.I2C_SendData:00000000 I2C_SendData
  C:\Temp\ccyGH6r6.s:1226   .text.I2C_ReceiveData:00000000 $t
  C:\Temp\ccyGH6r6.s:1231   .text.I2C_ReceiveData:00000000 I2C_ReceiveData
  C:\Temp\ccyGH6r6.s:1264   .text.I2C_TransmitPEC:00000000 $t
  C:\Temp\ccyGH6r6.s:1269   .text.I2C_TransmitPEC:00000000 I2C_TransmitPEC
  C:\Temp\ccyGH6r6.s:1321   .text.I2C_PECPositionConfig:00000000 $t
  C:\Temp\ccyGH6r6.s:1326   .text.I2C_PECPositionConfig:00000000 I2C_PECPositionConfig
  C:\Temp\ccyGH6r6.s:1378   .text.I2C_CalculatePEC:00000000 $t
  C:\Temp\ccyGH6r6.s:1383   .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
  C:\Temp\ccyGH6r6.s:1435   .text.I2C_GetPEC:00000000 $t
  C:\Temp\ccyGH6r6.s:1440   .text.I2C_GetPEC:00000000 I2C_GetPEC
  C:\Temp\ccyGH6r6.s:1475   .text.I2C_DMACmd:00000000 $t
  C:\Temp\ccyGH6r6.s:1480   .text.I2C_DMACmd:00000000 I2C_DMACmd
  C:\Temp\ccyGH6r6.s:1532   .text.I2C_DMALastTransferCmd:00000000 $t
  C:\Temp\ccyGH6r6.s:1537   .text.I2C_DMALastTransferCmd:00000000 I2C_DMALastTransferCmd
  C:\Temp\ccyGH6r6.s:1589   .text.I2C_ReadRegister:00000000 $t
  C:\Temp\ccyGH6r6.s:1594   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
  C:\Temp\ccyGH6r6.s:1639   .text.I2C_ITConfig:00000000 $t
  C:\Temp\ccyGH6r6.s:1644   .text.I2C_ITConfig:00000000 I2C_ITConfig
  C:\Temp\ccyGH6r6.s:1702   .text.I2C_CheckEvent:00000000 $t
  C:\Temp\ccyGH6r6.s:1707   .text.I2C_CheckEvent:00000000 I2C_CheckEvent
  C:\Temp\ccyGH6r6.s:1785   .text.I2C_GetLastEvent:00000000 $t
  C:\Temp\ccyGH6r6.s:1790   .text.I2C_GetLastEvent:00000000 I2C_GetLastEvent
  C:\Temp\ccyGH6r6.s:1848   .text.I2C_GetFlagStatus:00000000 $t
  C:\Temp\ccyGH6r6.s:1853   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
  C:\Temp\ccyGH6r6.s:1938   .text.I2C_ClearFlag:00000000 $t
  C:\Temp\ccyGH6r6.s:1943   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
  C:\Temp\ccyGH6r6.s:1985   .text.I2C_GetITStatus:00000000 $t
  C:\Temp\ccyGH6r6.s:1990   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
  C:\Temp\ccyGH6r6.s:2062   .text.I2C_ClearITPendingBit:00000000 $t
  C:\Temp\ccyGH6r6.s:2067   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
