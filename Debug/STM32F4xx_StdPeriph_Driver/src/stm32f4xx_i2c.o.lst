   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_i2c.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	I2C_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	I2C_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  27              		.loc 1 133 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  43              		.loc 1 137 0
  44 0008 7A68     		ldr	r2, [r7, #4]
  45 000a 4FF4A843 		mov	r3, #21504
  46 000e C4F20003 		movt	r3, 16384
  47 0012 9A42     		cmp	r2, r3
  48 0014 0CD1     		bne	.L2
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  49              		.loc 1 140 0
  50 0016 4FF40010 		mov	r0, #2097152
  51 001a 4FF00101 		mov	r1, #1
  52 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  53              		.loc 1 142 0
  54 0022 4FF40010 		mov	r0, #2097152
  55 0026 4FF00001 		mov	r1, #0
  56 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  57 002e 26E0     		b	.L1
  58              	.L2:
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  59              		.loc 1 144 0
  60 0030 7A68     		ldr	r2, [r7, #4]
  61 0032 4FF4B043 		mov	r3, #22528
  62 0036 C4F20003 		movt	r3, 16384
  63 003a 9A42     		cmp	r2, r3
  64 003c 0CD1     		bne	.L4
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  65              		.loc 1 147 0
  66 003e 4FF48000 		mov	r0, #4194304
  67 0042 4FF00101 		mov	r1, #1
  68 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  69              		.loc 1 149 0
  70 004a 4FF48000 		mov	r0, #4194304
  71 004e 4FF00001 		mov	r1, #0
  72 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  73 0056 12E0     		b	.L1
  74              	.L4:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  75              		.loc 1 153 0
  76 0058 7A68     		ldr	r2, [r7, #4]
  77 005a 4FF4B843 		mov	r3, #23552
  78 005e C4F20003 		movt	r3, 16384
  79 0062 9A42     		cmp	r2, r3
  80 0064 0BD1     		bne	.L1
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  81              		.loc 1 156 0
  82 0066 4FF40000 		mov	r0, #8388608
  83 006a 4FF00101 		mov	r1, #1
  84 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  85              		.loc 1 158 0
  86 0072 4FF40000 		mov	r0, #8388608
  87 0076 4FF00001 		mov	r1, #0
  88 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  89              	.L1:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  90              		.loc 1 161 0
  91 007e 07F10807 		add	r7, r7, #8
  92 0082 BD46     		mov	sp, r7
  93 0084 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE110:
  97 0086 00BF     		.align	2
  98              		.global	I2C_Init
  99              		.thumb
 100              		.thumb_func
 102              	I2C_Init:
 103              	.LFB111:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 104              		.loc 1 176 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 40
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108 0088 80B5     		push	{r7, lr}
 109              	.LCFI3:
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 14, -4
 112              		.cfi_offset 7, -8
 113 008a 8AB0     		sub	sp, sp, #40
 114              	.LCFI4:
 115              		.cfi_def_cfa_offset 48
 116 008c 00AF     		add	r7, sp, #0
 117              	.LCFI5:
 118              		.cfi_def_cfa_register 7
 119 008e 7860     		str	r0, [r7, #4]
 120 0090 3960     		str	r1, [r7, #0]
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 121              		.loc 1 177 0
 122 0092 4FF00003 		mov	r3, #0
 123 0096 FB84     		strh	r3, [r7, #38]	@ movhi
 124 0098 4FF00003 		mov	r3, #0
 125 009c 7B84     		strh	r3, [r7, #34]	@ movhi
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 126              		.loc 1 178 0
 127 009e 4FF00403 		mov	r3, #4
 128 00a2 BB84     		strh	r3, [r7, #36]	@ movhi
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 129              		.loc 1 179 0
 130 00a4 4FF49053 		mov	r3, #4608
 131 00a8 C0F27A03 		movt	r3, 122
 132 00ac FB61     		str	r3, [r7, #28]
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 133              		.loc 1 192 0
 134 00ae 7B68     		ldr	r3, [r7, #4]
 135 00b0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 136 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 137              		.loc 1 194 0
 138 00b4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 139 00b6 23F03F03 		bic	r3, r3, #63
 140 00ba FB84     		strh	r3, [r7, #38]	@ movhi
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 141              		.loc 1 196 0
 142 00bc 07F10C03 		add	r3, r7, #12
 143 00c0 1846     		mov	r0, r3
 144 00c2 FFF7FEFF 		bl	RCC_GetClocksFreq
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 145              		.loc 1 197 0
 146 00c6 7B69     		ldr	r3, [r7, #20]
 147 00c8 FB61     		str	r3, [r7, #28]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 148              		.loc 1 199 0
 149 00ca FA69     		ldr	r2, [r7, #28]
 150 00cc 4DF68363 		movw	r3, #56963
 151 00d0 C4F21B33 		movt	r3, 17179
 152 00d4 A3FB0213 		umull	r1, r3, r3, r2
 153 00d8 4FEA9343 		lsr	r3, r3, #18
 154 00dc 7B84     		strh	r3, [r7, #34]	@ movhi
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 155              		.loc 1 200 0
 156 00de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 157 00e0 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 158 00e2 1343     		orrs	r3, r3, r2
 159 00e4 FB84     		strh	r3, [r7, #38]	@ movhi
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 160              		.loc 1 202 0
 161 00e6 7B68     		ldr	r3, [r7, #4]
 162 00e8 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 163 00ea 9A80     		strh	r2, [r3, #4]	@ movhi
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 164              		.loc 1 206 0
 165 00ec 7B68     		ldr	r3, [r7, #4]
 166 00ee 1B88     		ldrh	r3, [r3, #0]	@ movhi
 167 00f0 9BB2     		uxth	r3, r3
 168 00f2 23F00103 		bic	r3, r3, #1
 169 00f6 9AB2     		uxth	r2, r3
 170 00f8 7B68     		ldr	r3, [r7, #4]
 171 00fa 1A80     		strh	r2, [r3, #0]	@ movhi
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 172              		.loc 1 209 0
 173 00fc 4FF00003 		mov	r3, #0
 174 0100 FB84     		strh	r3, [r7, #38]	@ movhi
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 175              		.loc 1 212 0
 176 0102 3B68     		ldr	r3, [r7, #0]
 177 0104 1A68     		ldr	r2, [r3, #0]
 178 0106 48F2A063 		movw	r3, #34464
 179 010a C0F20103 		movt	r3, 1
 180 010e 9A42     		cmp	r2, r3
 181 0110 18D8     		bhi	.L6
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 182              		.loc 1 215 0
 183 0112 3B68     		ldr	r3, [r7, #0]
 184 0114 1B68     		ldr	r3, [r3, #0]
 185 0116 4FEA4303 		lsl	r3, r3, #1
 186 011a FA69     		ldr	r2, [r7, #28]
 187 011c B2FBF3F3 		udiv	r3, r2, r3
 188 0120 BB84     		strh	r3, [r7, #36]	@ movhi
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 189              		.loc 1 217 0
 190 0122 BB8C     		ldrh	r3, [r7, #36]
 191 0124 032B     		cmp	r3, #3
 192 0126 02D8     		bhi	.L7
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 193              		.loc 1 220 0
 194 0128 4FF00403 		mov	r3, #4
 195 012c BB84     		strh	r3, [r7, #36]	@ movhi
 196              	.L7:
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 197              		.loc 1 223 0
 198 012e FA8C     		ldrh	r2, [r7, #38]	@ movhi
 199 0130 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 200 0132 1343     		orrs	r3, r3, r2
 201 0134 FB84     		strh	r3, [r7, #38]	@ movhi
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 202              		.loc 1 225 0
 203 0136 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 204 0138 03F10103 		add	r3, r3, #1
 205 013c 9AB2     		uxth	r2, r3
 206 013e 7B68     		ldr	r3, [r7, #4]
 207 0140 1A84     		strh	r2, [r3, #32]	@ movhi
 208 0142 4BE0     		b	.L8
 209              	.L6:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 210              		.loc 1 232 0
 211 0144 3B68     		ldr	r3, [r7, #0]
 212 0146 DA88     		ldrh	r2, [r3, #6]
 213 0148 4BF6FF73 		movw	r3, #49151
 214 014c 9A42     		cmp	r2, r3
 215 014e 0AD1     		bne	.L9
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 216              		.loc 1 235 0
 217 0150 3B68     		ldr	r3, [r7, #0]
 218 0152 1A68     		ldr	r2, [r3, #0]
 219 0154 1346     		mov	r3, r2
 220 0156 4FEA4303 		lsl	r3, r3, #1
 221 015a 9B18     		adds	r3, r3, r2
 222 015c FA69     		ldr	r2, [r7, #28]
 223 015e B2FBF3F3 		udiv	r3, r2, r3
 224 0162 BB84     		strh	r3, [r7, #36]	@ movhi
 225 0164 10E0     		b	.L10
 226              	.L9:
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 227              		.loc 1 240 0
 228 0166 3B68     		ldr	r3, [r7, #0]
 229 0168 1A68     		ldr	r2, [r3, #0]
 230 016a 1346     		mov	r3, r2
 231 016c 4FEA8303 		lsl	r3, r3, #2
 232 0170 9B18     		adds	r3, r3, r2
 233 0172 4FEA8302 		lsl	r2, r3, #2
 234 0176 9B18     		adds	r3, r3, r2
 235 0178 FA69     		ldr	r2, [r7, #28]
 236 017a B2FBF3F3 		udiv	r3, r2, r3
 237 017e BB84     		strh	r3, [r7, #36]	@ movhi
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 238              		.loc 1 242 0
 239 0180 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 240 0182 43F48043 		orr	r3, r3, #16384
 241 0186 BB84     		strh	r3, [r7, #36]	@ movhi
 242              	.L10:
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 243              		.loc 1 246 0
 244 0188 BB8C     		ldrh	r3, [r7, #36]
 245 018a 4FEA0353 		lsl	r3, r3, #20
 246 018e 4FEA1353 		lsr	r3, r3, #20
 247 0192 002B     		cmp	r3, #0
 248 0194 03D1     		bne	.L11
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 249              		.loc 1 249 0
 250 0196 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 251 0198 43F00103 		orr	r3, r3, #1
 252 019c BB84     		strh	r3, [r7, #36]	@ movhi
 253              	.L11:
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 254              		.loc 1 252 0
 255 019e BA8C     		ldrh	r2, [r7, #36]	@ movhi
 256 01a0 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 257 01a2 1343     		orrs	r3, r3, r2
 258 01a4 9BB2     		uxth	r3, r3
 259 01a6 6FEA4343 		mvn	r3, r3, lsl #17
 260 01aa 6FEA5343 		mvn	r3, r3, lsr #17
 261 01ae FB84     		strh	r3, [r7, #38]	@ movhi
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 262              		.loc 1 254 0
 263 01b0 7B8C     		ldrh	r3, [r7, #34]
 264 01b2 4FF49672 		mov	r2, #300
 265 01b6 02FB03F2 		mul	r2, r2, r3
 266 01ba 44F6D353 		movw	r3, #19923
 267 01be C1F26203 		movt	r3, 4194
 268 01c2 83FB0213 		smull	r1, r3, r3, r2
 269 01c6 4FEAA311 		asr	r1, r3, #6
 270 01ca 4FEAE273 		asr	r3, r2, #31
 271 01ce CB1A     		subs	r3, r1, r3
 272 01d0 9BB2     		uxth	r3, r3
 273 01d2 03F10103 		add	r3, r3, #1
 274 01d6 9AB2     		uxth	r2, r3
 275 01d8 7B68     		ldr	r3, [r7, #4]
 276 01da 1A84     		strh	r2, [r3, #32]	@ movhi
 277              	.L8:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 278              		.loc 1 258 0
 279 01dc 7B68     		ldr	r3, [r7, #4]
 280 01de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 281 01e0 9A83     		strh	r2, [r3, #28]	@ movhi
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 282              		.loc 1 260 0
 283 01e2 7B68     		ldr	r3, [r7, #4]
 284 01e4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 285 01e6 9BB2     		uxth	r3, r3
 286 01e8 43F00103 		orr	r3, r3, #1
 287 01ec 9AB2     		uxth	r2, r3
 288 01ee 7B68     		ldr	r3, [r7, #4]
 289 01f0 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 290              		.loc 1 264 0
 291 01f2 7B68     		ldr	r3, [r7, #4]
 292 01f4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 293 01f6 FB84     		strh	r3, [r7, #38]	@ movhi
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 294              		.loc 1 266 0
 295 01f8 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 296 01fa 23F48063 		bic	r3, r3, #1024
 297 01fe 23F00A03 		bic	r3, r3, #10
 298 0202 FB84     		strh	r3, [r7, #38]	@ movhi
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 299              		.loc 1 270 0
 300 0204 3B68     		ldr	r3, [r7, #0]
 301 0206 9A88     		ldrh	r2, [r3, #4]
 302 0208 3B68     		ldr	r3, [r7, #0]
 303 020a 5B89     		ldrh	r3, [r3, #10]
 304 020c 1343     		orrs	r3, r3, r2
 305 020e 9AB2     		uxth	r2, r3
 306 0210 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 307 0212 1343     		orrs	r3, r3, r2
 308 0214 FB84     		strh	r3, [r7, #38]	@ movhi
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 309              		.loc 1 272 0
 310 0216 7B68     		ldr	r3, [r7, #4]
 311 0218 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 312 021a 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 313              		.loc 1 276 0
 314 021c 3B68     		ldr	r3, [r7, #0]
 315 021e 9A89     		ldrh	r2, [r3, #12]
 316 0220 3B68     		ldr	r3, [r7, #0]
 317 0222 1B89     		ldrh	r3, [r3, #8]
 318 0224 1343     		orrs	r3, r3, r2
 319 0226 9AB2     		uxth	r2, r3
 320 0228 7B68     		ldr	r3, [r7, #4]
 321 022a 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 322              		.loc 1 277 0
 323 022c 07F12807 		add	r7, r7, #40
 324 0230 BD46     		mov	sp, r7
 325 0232 80BD     		pop	{r7, pc}
 326              		.cfi_endproc
 327              	.LFE111:
 329              		.align	2
 330              		.global	I2C_StructInit
 331              		.thumb
 332              		.thumb_func
 334              	I2C_StructInit:
 335              	.LFB112:
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 336              		.loc 1 285 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0234 80B4     		push	{r7}
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 7, -4
 345 0236 83B0     		sub	sp, sp, #12
 346              	.LCFI7:
 347              		.cfi_def_cfa_offset 16
 348 0238 00AF     		add	r7, sp, #0
 349              	.LCFI8:
 350              		.cfi_def_cfa_register 7
 351 023a 7860     		str	r0, [r7, #4]
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 352              		.loc 1 288 0
 353 023c 7B68     		ldr	r3, [r7, #4]
 354 023e 41F28832 		movw	r2, #5000
 355 0242 1A60     		str	r2, [r3, #0]
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 356              		.loc 1 290 0
 357 0244 7B68     		ldr	r3, [r7, #4]
 358 0246 4FF00002 		mov	r2, #0
 359 024a 9A80     		strh	r2, [r3, #4]	@ movhi
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 360              		.loc 1 292 0
 361 024c 7B68     		ldr	r3, [r7, #4]
 362 024e 4BF6FF72 		movw	r2, #49151
 363 0252 DA80     		strh	r2, [r3, #6]	@ movhi
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 364              		.loc 1 294 0
 365 0254 7B68     		ldr	r3, [r7, #4]
 366 0256 4FF00002 		mov	r2, #0
 367 025a 1A81     		strh	r2, [r3, #8]	@ movhi
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 368              		.loc 1 296 0
 369 025c 7B68     		ldr	r3, [r7, #4]
 370 025e 4FF00002 		mov	r2, #0
 371 0262 5A81     		strh	r2, [r3, #10]	@ movhi
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 372              		.loc 1 298 0
 373 0264 7B68     		ldr	r3, [r7, #4]
 374 0266 4FF48042 		mov	r2, #16384
 375 026a 9A81     		strh	r2, [r3, #12]	@ movhi
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 376              		.loc 1 299 0
 377 026c 07F10C07 		add	r7, r7, #12
 378 0270 BD46     		mov	sp, r7
 379 0272 80BC     		pop	{r7}
 380 0274 7047     		bx	lr
 381              		.cfi_endproc
 382              	.LFE112:
 384 0276 00BF     		.align	2
 385              		.global	I2C_Cmd
 386              		.thumb
 387              		.thumb_func
 389              	I2C_Cmd:
 390              	.LFB113:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 391              		.loc 1 309 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0278 80B4     		push	{r7}
 397              	.LCFI9:
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 027a 83B0     		sub	sp, sp, #12
 401              	.LCFI10:
 402              		.cfi_def_cfa_offset 16
 403 027c 00AF     		add	r7, sp, #0
 404              	.LCFI11:
 405              		.cfi_def_cfa_register 7
 406 027e 7860     		str	r0, [r7, #4]
 407 0280 0B46     		mov	r3, r1
 408 0282 FB70     		strb	r3, [r7, #3]
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 409              		.loc 1 313 0
 410 0284 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 411 0286 002B     		cmp	r3, #0
 412 0288 08D0     		beq	.L14
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 413              		.loc 1 316 0
 414 028a 7B68     		ldr	r3, [r7, #4]
 415 028c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 416 028e 9BB2     		uxth	r3, r3
 417 0290 43F00103 		orr	r3, r3, #1
 418 0294 9AB2     		uxth	r2, r3
 419 0296 7B68     		ldr	r3, [r7, #4]
 420 0298 1A80     		strh	r2, [r3, #0]	@ movhi
 421 029a 07E0     		b	.L13
 422              	.L14:
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 423              		.loc 1 321 0
 424 029c 7B68     		ldr	r3, [r7, #4]
 425 029e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 426 02a0 9BB2     		uxth	r3, r3
 427 02a2 23F00103 		bic	r3, r3, #1
 428 02a6 9AB2     		uxth	r2, r3
 429 02a8 7B68     		ldr	r3, [r7, #4]
 430 02aa 1A80     		strh	r2, [r3, #0]	@ movhi
 431              	.L13:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 432              		.loc 1 323 0
 433 02ac 07F10C07 		add	r7, r7, #12
 434 02b0 BD46     		mov	sp, r7
 435 02b2 80BC     		pop	{r7}
 436 02b4 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE113:
 440 02b6 00BF     		.align	2
 441              		.global	I2C_GenerateSTART
 442              		.thumb
 443              		.thumb_func
 445              	I2C_GenerateSTART:
 446              	.LFB114:
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 447              		.loc 1 333 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 02b8 80B4     		push	{r7}
 453              	.LCFI12:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 7, -4
 456 02ba 83B0     		sub	sp, sp, #12
 457              	.LCFI13:
 458              		.cfi_def_cfa_offset 16
 459 02bc 00AF     		add	r7, sp, #0
 460              	.LCFI14:
 461              		.cfi_def_cfa_register 7
 462 02be 7860     		str	r0, [r7, #4]
 463 02c0 0B46     		mov	r3, r1
 464 02c2 FB70     		strb	r3, [r7, #3]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 465              		.loc 1 337 0
 466 02c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 467 02c6 002B     		cmp	r3, #0
 468 02c8 08D0     		beq	.L17
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 469              		.loc 1 340 0
 470 02ca 7B68     		ldr	r3, [r7, #4]
 471 02cc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 472 02ce 9BB2     		uxth	r3, r3
 473 02d0 43F48073 		orr	r3, r3, #256
 474 02d4 9AB2     		uxth	r2, r3
 475 02d6 7B68     		ldr	r3, [r7, #4]
 476 02d8 1A80     		strh	r2, [r3, #0]	@ movhi
 477 02da 07E0     		b	.L16
 478              	.L17:
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 479              		.loc 1 345 0
 480 02dc 7B68     		ldr	r3, [r7, #4]
 481 02de 1B88     		ldrh	r3, [r3, #0]	@ movhi
 482 02e0 9BB2     		uxth	r3, r3
 483 02e2 23F48073 		bic	r3, r3, #256
 484 02e6 9AB2     		uxth	r2, r3
 485 02e8 7B68     		ldr	r3, [r7, #4]
 486 02ea 1A80     		strh	r2, [r3, #0]	@ movhi
 487              	.L16:
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 488              		.loc 1 347 0
 489 02ec 07F10C07 		add	r7, r7, #12
 490 02f0 BD46     		mov	sp, r7
 491 02f2 80BC     		pop	{r7}
 492 02f4 7047     		bx	lr
 493              		.cfi_endproc
 494              	.LFE114:
 496 02f6 00BF     		.align	2
 497              		.global	I2C_GenerateSTOP
 498              		.thumb
 499              		.thumb_func
 501              	I2C_GenerateSTOP:
 502              	.LFB115:
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 503              		.loc 1 357 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 8
 506              		@ frame_needed = 1, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508 02f8 80B4     		push	{r7}
 509              	.LCFI15:
 510              		.cfi_def_cfa_offset 4
 511              		.cfi_offset 7, -4
 512 02fa 83B0     		sub	sp, sp, #12
 513              	.LCFI16:
 514              		.cfi_def_cfa_offset 16
 515 02fc 00AF     		add	r7, sp, #0
 516              	.LCFI17:
 517              		.cfi_def_cfa_register 7
 518 02fe 7860     		str	r0, [r7, #4]
 519 0300 0B46     		mov	r3, r1
 520 0302 FB70     		strb	r3, [r7, #3]
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 521              		.loc 1 361 0
 522 0304 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 523 0306 002B     		cmp	r3, #0
 524 0308 08D0     		beq	.L20
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 525              		.loc 1 364 0
 526 030a 7B68     		ldr	r3, [r7, #4]
 527 030c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 528 030e 9BB2     		uxth	r3, r3
 529 0310 43F40073 		orr	r3, r3, #512
 530 0314 9AB2     		uxth	r2, r3
 531 0316 7B68     		ldr	r3, [r7, #4]
 532 0318 1A80     		strh	r2, [r3, #0]	@ movhi
 533 031a 07E0     		b	.L19
 534              	.L20:
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 535              		.loc 1 369 0
 536 031c 7B68     		ldr	r3, [r7, #4]
 537 031e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 538 0320 9BB2     		uxth	r3, r3
 539 0322 23F40073 		bic	r3, r3, #512
 540 0326 9AB2     		uxth	r2, r3
 541 0328 7B68     		ldr	r3, [r7, #4]
 542 032a 1A80     		strh	r2, [r3, #0]	@ movhi
 543              	.L19:
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 544              		.loc 1 371 0
 545 032c 07F10C07 		add	r7, r7, #12
 546 0330 BD46     		mov	sp, r7
 547 0332 80BC     		pop	{r7}
 548 0334 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE115:
 552 0336 00BF     		.align	2
 553              		.global	I2C_Send7bitAddress
 554              		.thumb
 555              		.thumb_func
 557              	I2C_Send7bitAddress:
 558              	.LFB116:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 559              		.loc 1 385 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0338 80B4     		push	{r7}
 565              	.LCFI18:
 566              		.cfi_def_cfa_offset 4
 567              		.cfi_offset 7, -4
 568 033a 83B0     		sub	sp, sp, #12
 569              	.LCFI19:
 570              		.cfi_def_cfa_offset 16
 571 033c 00AF     		add	r7, sp, #0
 572              	.LCFI20:
 573              		.cfi_def_cfa_register 7
 574 033e 7860     		str	r0, [r7, #4]
 575 0340 1346     		mov	r3, r2
 576 0342 0A46     		mov	r2, r1
 577 0344 FA70     		strb	r2, [r7, #3]
 578 0346 BB70     		strb	r3, [r7, #2]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 579              		.loc 1 390 0
 580 0348 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 581 034a 002B     		cmp	r3, #0
 582 034c 04D0     		beq	.L23
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 583              		.loc 1 393 0
 584 034e FB78     		ldrb	r3, [r7, #3]
 585 0350 43F00103 		orr	r3, r3, #1
 586 0354 FB70     		strb	r3, [r7, #3]
 587 0356 03E0     		b	.L24
 588              	.L23:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 589              		.loc 1 398 0
 590 0358 FB78     		ldrb	r3, [r7, #3]
 591 035a 23F00103 		bic	r3, r3, #1
 592 035e FB70     		strb	r3, [r7, #3]
 593              	.L24:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 594              		.loc 1 401 0
 595 0360 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 596 0362 9AB2     		uxth	r2, r3
 597 0364 7B68     		ldr	r3, [r7, #4]
 598 0366 1A82     		strh	r2, [r3, #16]	@ movhi
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 599              		.loc 1 402 0
 600 0368 07F10C07 		add	r7, r7, #12
 601 036c BD46     		mov	sp, r7
 602 036e 80BC     		pop	{r7}
 603 0370 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE116:
 607 0372 00BF     		.align	2
 608              		.global	I2C_AcknowledgeConfig
 609              		.thumb
 610              		.thumb_func
 612              	I2C_AcknowledgeConfig:
 613              	.LFB117:
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 614              		.loc 1 412 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 8
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 0374 80B4     		push	{r7}
 620              	.LCFI21:
 621              		.cfi_def_cfa_offset 4
 622              		.cfi_offset 7, -4
 623 0376 83B0     		sub	sp, sp, #12
 624              	.LCFI22:
 625              		.cfi_def_cfa_offset 16
 626 0378 00AF     		add	r7, sp, #0
 627              	.LCFI23:
 628              		.cfi_def_cfa_register 7
 629 037a 7860     		str	r0, [r7, #4]
 630 037c 0B46     		mov	r3, r1
 631 037e FB70     		strb	r3, [r7, #3]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 632              		.loc 1 416 0
 633 0380 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 634 0382 002B     		cmp	r3, #0
 635 0384 08D0     		beq	.L26
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 636              		.loc 1 419 0
 637 0386 7B68     		ldr	r3, [r7, #4]
 638 0388 1B88     		ldrh	r3, [r3, #0]	@ movhi
 639 038a 9BB2     		uxth	r3, r3
 640 038c 43F48063 		orr	r3, r3, #1024
 641 0390 9AB2     		uxth	r2, r3
 642 0392 7B68     		ldr	r3, [r7, #4]
 643 0394 1A80     		strh	r2, [r3, #0]	@ movhi
 644 0396 07E0     		b	.L25
 645              	.L26:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 646              		.loc 1 424 0
 647 0398 7B68     		ldr	r3, [r7, #4]
 648 039a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 649 039c 9BB2     		uxth	r3, r3
 650 039e 23F48063 		bic	r3, r3, #1024
 651 03a2 9AB2     		uxth	r2, r3
 652 03a4 7B68     		ldr	r3, [r7, #4]
 653 03a6 1A80     		strh	r2, [r3, #0]	@ movhi
 654              	.L25:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 655              		.loc 1 426 0
 656 03a8 07F10C07 		add	r7, r7, #12
 657 03ac BD46     		mov	sp, r7
 658 03ae 80BC     		pop	{r7}
 659 03b0 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE117:
 663 03b2 00BF     		.align	2
 664              		.global	I2C_OwnAddress2Config
 665              		.thumb
 666              		.thumb_func
 668              	I2C_OwnAddress2Config:
 669              	.LFB118:
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 670              		.loc 1 435 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 16
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 675 03b4 80B4     		push	{r7}
 676              	.LCFI24:
 677              		.cfi_def_cfa_offset 4
 678              		.cfi_offset 7, -4
 679 03b6 85B0     		sub	sp, sp, #20
 680              	.LCFI25:
 681              		.cfi_def_cfa_offset 24
 682 03b8 00AF     		add	r7, sp, #0
 683              	.LCFI26:
 684              		.cfi_def_cfa_register 7
 685 03ba 7860     		str	r0, [r7, #4]
 686 03bc 0B46     		mov	r3, r1
 687 03be FB70     		strb	r3, [r7, #3]
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 688              		.loc 1 436 0
 689 03c0 4FF00003 		mov	r3, #0
 690 03c4 FB81     		strh	r3, [r7, #14]	@ movhi
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 691              		.loc 1 442 0
 692 03c6 7B68     		ldr	r3, [r7, #4]
 693 03c8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 694 03ca FB81     		strh	r3, [r7, #14]	@ movhi
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 695              		.loc 1 445 0
 696 03cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 697 03ce 23F0FE03 		bic	r3, r3, #254
 698 03d2 FB81     		strh	r3, [r7, #14]	@ movhi
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 699              		.loc 1 448 0
 700 03d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 701 03d6 9BB2     		uxth	r3, r3
 702 03d8 03F0FE03 		and	r3, r3, #254
 703 03dc 9AB2     		uxth	r2, r3
 704 03de FB89     		ldrh	r3, [r7, #14]
 705 03e0 1343     		orrs	r3, r3, r2
 706 03e2 9BB2     		uxth	r3, r3
 707 03e4 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 708              		.loc 1 451 0
 709 03e6 7B68     		ldr	r3, [r7, #4]
 710 03e8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 711 03ea 9A81     		strh	r2, [r3, #12]	@ movhi
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 712              		.loc 1 452 0
 713 03ec 07F11407 		add	r7, r7, #20
 714 03f0 BD46     		mov	sp, r7
 715 03f2 80BC     		pop	{r7}
 716 03f4 7047     		bx	lr
 717              		.cfi_endproc
 718              	.LFE118:
 720 03f6 00BF     		.align	2
 721              		.global	I2C_DualAddressCmd
 722              		.thumb
 723              		.thumb_func
 725              	I2C_DualAddressCmd:
 726              	.LFB119:
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 727              		.loc 1 462 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 8
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732 03f8 80B4     		push	{r7}
 733              	.LCFI27:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 7, -4
 736 03fa 83B0     		sub	sp, sp, #12
 737              	.LCFI28:
 738              		.cfi_def_cfa_offset 16
 739 03fc 00AF     		add	r7, sp, #0
 740              	.LCFI29:
 741              		.cfi_def_cfa_register 7
 742 03fe 7860     		str	r0, [r7, #4]
 743 0400 0B46     		mov	r3, r1
 744 0402 FB70     		strb	r3, [r7, #3]
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 745              		.loc 1 466 0
 746 0404 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 747 0406 002B     		cmp	r3, #0
 748 0408 08D0     		beq	.L30
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 749              		.loc 1 469 0
 750 040a 7B68     		ldr	r3, [r7, #4]
 751 040c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 752 040e 9BB2     		uxth	r3, r3
 753 0410 43F00103 		orr	r3, r3, #1
 754 0414 9AB2     		uxth	r2, r3
 755 0416 7B68     		ldr	r3, [r7, #4]
 756 0418 9A81     		strh	r2, [r3, #12]	@ movhi
 757 041a 07E0     		b	.L29
 758              	.L30:
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 759              		.loc 1 474 0
 760 041c 7B68     		ldr	r3, [r7, #4]
 761 041e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 762 0420 9BB2     		uxth	r3, r3
 763 0422 23F00103 		bic	r3, r3, #1
 764 0426 9AB2     		uxth	r2, r3
 765 0428 7B68     		ldr	r3, [r7, #4]
 766 042a 9A81     		strh	r2, [r3, #12]	@ movhi
 767              	.L29:
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 768              		.loc 1 476 0
 769 042c 07F10C07 		add	r7, r7, #12
 770 0430 BD46     		mov	sp, r7
 771 0432 80BC     		pop	{r7}
 772 0434 7047     		bx	lr
 773              		.cfi_endproc
 774              	.LFE119:
 776 0436 00BF     		.align	2
 777              		.global	I2C_GeneralCallCmd
 778              		.thumb
 779              		.thumb_func
 781              	I2C_GeneralCallCmd:
 782              	.LFB120:
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 783              		.loc 1 486 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 8
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787              		@ link register save eliminated.
 788 0438 80B4     		push	{r7}
 789              	.LCFI30:
 790              		.cfi_def_cfa_offset 4
 791              		.cfi_offset 7, -4
 792 043a 83B0     		sub	sp, sp, #12
 793              	.LCFI31:
 794              		.cfi_def_cfa_offset 16
 795 043c 00AF     		add	r7, sp, #0
 796              	.LCFI32:
 797              		.cfi_def_cfa_register 7
 798 043e 7860     		str	r0, [r7, #4]
 799 0440 0B46     		mov	r3, r1
 800 0442 FB70     		strb	r3, [r7, #3]
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 801              		.loc 1 490 0
 802 0444 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 803 0446 002B     		cmp	r3, #0
 804 0448 08D0     		beq	.L33
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 805              		.loc 1 493 0
 806 044a 7B68     		ldr	r3, [r7, #4]
 807 044c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 808 044e 9BB2     		uxth	r3, r3
 809 0450 43F04003 		orr	r3, r3, #64
 810 0454 9AB2     		uxth	r2, r3
 811 0456 7B68     		ldr	r3, [r7, #4]
 812 0458 1A80     		strh	r2, [r3, #0]	@ movhi
 813 045a 07E0     		b	.L32
 814              	.L33:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 815              		.loc 1 498 0
 816 045c 7B68     		ldr	r3, [r7, #4]
 817 045e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 818 0460 9BB2     		uxth	r3, r3
 819 0462 23F04003 		bic	r3, r3, #64
 820 0466 9AB2     		uxth	r2, r3
 821 0468 7B68     		ldr	r3, [r7, #4]
 822 046a 1A80     		strh	r2, [r3, #0]	@ movhi
 823              	.L32:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 824              		.loc 1 500 0
 825 046c 07F10C07 		add	r7, r7, #12
 826 0470 BD46     		mov	sp, r7
 827 0472 80BC     		pop	{r7}
 828 0474 7047     		bx	lr
 829              		.cfi_endproc
 830              	.LFE120:
 832 0476 00BF     		.align	2
 833              		.global	I2C_SoftwareResetCmd
 834              		.thumb
 835              		.thumb_func
 837              	I2C_SoftwareResetCmd:
 838              	.LFB121:
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 839              		.loc 1 512 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 8
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844 0478 80B4     		push	{r7}
 845              	.LCFI33:
 846              		.cfi_def_cfa_offset 4
 847              		.cfi_offset 7, -4
 848 047a 83B0     		sub	sp, sp, #12
 849              	.LCFI34:
 850              		.cfi_def_cfa_offset 16
 851 047c 00AF     		add	r7, sp, #0
 852              	.LCFI35:
 853              		.cfi_def_cfa_register 7
 854 047e 7860     		str	r0, [r7, #4]
 855 0480 0B46     		mov	r3, r1
 856 0482 FB70     		strb	r3, [r7, #3]
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 857              		.loc 1 516 0
 858 0484 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 859 0486 002B     		cmp	r3, #0
 860 0488 0AD0     		beq	.L36
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 861              		.loc 1 519 0
 862 048a 7B68     		ldr	r3, [r7, #4]
 863 048c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 864 048e 9BB2     		uxth	r3, r3
 865 0490 6FEA4343 		mvn	r3, r3, lsl #17
 866 0494 6FEA5343 		mvn	r3, r3, lsr #17
 867 0498 9AB2     		uxth	r2, r3
 868 049a 7B68     		ldr	r3, [r7, #4]
 869 049c 1A80     		strh	r2, [r3, #0]	@ movhi
 870 049e 09E0     		b	.L35
 871              	.L36:
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 872              		.loc 1 524 0
 873 04a0 7B68     		ldr	r3, [r7, #4]
 874 04a2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 875 04a4 9BB2     		uxth	r3, r3
 876 04a6 4FEA4343 		lsl	r3, r3, #17
 877 04aa 4FEA5343 		lsr	r3, r3, #17
 878 04ae 9AB2     		uxth	r2, r3
 879 04b0 7B68     		ldr	r3, [r7, #4]
 880 04b2 1A80     		strh	r2, [r3, #0]	@ movhi
 881              	.L35:
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 882              		.loc 1 526 0
 883 04b4 07F10C07 		add	r7, r7, #12
 884 04b8 BD46     		mov	sp, r7
 885 04ba 80BC     		pop	{r7}
 886 04bc 7047     		bx	lr
 887              		.cfi_endproc
 888              	.LFE121:
 890 04be 00BF     		.align	2
 891              		.global	I2C_StretchClockCmd
 892              		.thumb
 893              		.thumb_func
 895              	I2C_StretchClockCmd:
 896              	.LFB122:
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 897              		.loc 1 536 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 8
 900              		@ frame_needed = 1, uses_anonymous_args = 0
 901              		@ link register save eliminated.
 902 04c0 80B4     		push	{r7}
 903              	.LCFI36:
 904              		.cfi_def_cfa_offset 4
 905              		.cfi_offset 7, -4
 906 04c2 83B0     		sub	sp, sp, #12
 907              	.LCFI37:
 908              		.cfi_def_cfa_offset 16
 909 04c4 00AF     		add	r7, sp, #0
 910              	.LCFI38:
 911              		.cfi_def_cfa_register 7
 912 04c6 7860     		str	r0, [r7, #4]
 913 04c8 0B46     		mov	r3, r1
 914 04ca FB70     		strb	r3, [r7, #3]
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 915              		.loc 1 540 0
 916 04cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 917 04ce 002B     		cmp	r3, #0
 918 04d0 08D1     		bne	.L39
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 919              		.loc 1 543 0
 920 04d2 7B68     		ldr	r3, [r7, #4]
 921 04d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 922 04d6 9BB2     		uxth	r3, r3
 923 04d8 43F08003 		orr	r3, r3, #128
 924 04dc 9AB2     		uxth	r2, r3
 925 04de 7B68     		ldr	r3, [r7, #4]
 926 04e0 1A80     		strh	r2, [r3, #0]	@ movhi
 927 04e2 07E0     		b	.L38
 928              	.L39:
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 929              		.loc 1 548 0
 930 04e4 7B68     		ldr	r3, [r7, #4]
 931 04e6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 932 04e8 9BB2     		uxth	r3, r3
 933 04ea 23F08003 		bic	r3, r3, #128
 934 04ee 9AB2     		uxth	r2, r3
 935 04f0 7B68     		ldr	r3, [r7, #4]
 936 04f2 1A80     		strh	r2, [r3, #0]	@ movhi
 937              	.L38:
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 938              		.loc 1 550 0
 939 04f4 07F10C07 		add	r7, r7, #12
 940 04f8 BD46     		mov	sp, r7
 941 04fa 80BC     		pop	{r7}
 942 04fc 7047     		bx	lr
 943              		.cfi_endproc
 944              	.LFE122:
 946 04fe 00BF     		.align	2
 947              		.global	I2C_FastModeDutyCycleConfig
 948              		.thumb
 949              		.thumb_func
 951              	I2C_FastModeDutyCycleConfig:
 952              	.LFB123:
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 953              		.loc 1 562 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 8
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957              		@ link register save eliminated.
 958 0500 80B4     		push	{r7}
 959              	.LCFI39:
 960              		.cfi_def_cfa_offset 4
 961              		.cfi_offset 7, -4
 962 0502 83B0     		sub	sp, sp, #12
 963              	.LCFI40:
 964              		.cfi_def_cfa_offset 16
 965 0504 00AF     		add	r7, sp, #0
 966              	.LCFI41:
 967              		.cfi_def_cfa_register 7
 968 0506 7860     		str	r0, [r7, #4]
 969 0508 0B46     		mov	r3, r1
 970 050a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 971              		.loc 1 566 0
 972 050c 7B88     		ldrh	r3, [r7, #2]
 973 050e B3F5804F 		cmp	r3, #16384
 974 0512 08D0     		beq	.L42
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 975              		.loc 1 569 0
 976 0514 7B68     		ldr	r3, [r7, #4]
 977 0516 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 978 0518 9BB2     		uxth	r3, r3
 979 051a 23F48043 		bic	r3, r3, #16384
 980 051e 9AB2     		uxth	r2, r3
 981 0520 7B68     		ldr	r3, [r7, #4]
 982 0522 9A83     		strh	r2, [r3, #28]	@ movhi
 983 0524 07E0     		b	.L41
 984              	.L42:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 985              		.loc 1 574 0
 986 0526 7B68     		ldr	r3, [r7, #4]
 987 0528 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 988 052a 9BB2     		uxth	r3, r3
 989 052c 43F48043 		orr	r3, r3, #16384
 990 0530 9AB2     		uxth	r2, r3
 991 0532 7B68     		ldr	r3, [r7, #4]
 992 0534 9A83     		strh	r2, [r3, #28]	@ movhi
 993              	.L41:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 994              		.loc 1 576 0
 995 0536 07F10C07 		add	r7, r7, #12
 996 053a BD46     		mov	sp, r7
 997 053c 80BC     		pop	{r7}
 998 053e 7047     		bx	lr
 999              		.cfi_endproc
 1000              	.LFE123:
 1002              		.align	2
 1003              		.global	I2C_NACKPositionConfig
 1004              		.thumb
 1005              		.thumb_func
 1007              	I2C_NACKPositionConfig:
 1008              	.LFB124:
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1009              		.loc 1 600 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 8
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 1014 0540 80B4     		push	{r7}
 1015              	.LCFI42:
 1016              		.cfi_def_cfa_offset 4
 1017              		.cfi_offset 7, -4
 1018 0542 83B0     		sub	sp, sp, #12
 1019              	.LCFI43:
 1020              		.cfi_def_cfa_offset 16
 1021 0544 00AF     		add	r7, sp, #0
 1022              	.LCFI44:
 1023              		.cfi_def_cfa_register 7
 1024 0546 7860     		str	r0, [r7, #4]
 1025 0548 0B46     		mov	r3, r1
 1026 054a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1027              		.loc 1 606 0
 1028 054c 7B88     		ldrh	r3, [r7, #2]
 1029 054e B3F5006F 		cmp	r3, #2048
 1030 0552 08D1     		bne	.L45
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1031              		.loc 1 609 0
 1032 0554 7B68     		ldr	r3, [r7, #4]
 1033 0556 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1034 0558 9BB2     		uxth	r3, r3
 1035 055a 43F40063 		orr	r3, r3, #2048
 1036 055e 9AB2     		uxth	r2, r3
 1037 0560 7B68     		ldr	r3, [r7, #4]
 1038 0562 1A80     		strh	r2, [r3, #0]	@ movhi
 1039 0564 07E0     		b	.L44
 1040              	.L45:
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 1041              		.loc 1 614 0
 1042 0566 7B68     		ldr	r3, [r7, #4]
 1043 0568 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1044 056a 9BB2     		uxth	r3, r3
 1045 056c 23F40063 		bic	r3, r3, #2048
 1046 0570 9AB2     		uxth	r2, r3
 1047 0572 7B68     		ldr	r3, [r7, #4]
 1048 0574 1A80     		strh	r2, [r3, #0]	@ movhi
 1049              	.L44:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1050              		.loc 1 616 0
 1051 0576 07F10C07 		add	r7, r7, #12
 1052 057a BD46     		mov	sp, r7
 1053 057c 80BC     		pop	{r7}
 1054 057e 7047     		bx	lr
 1055              		.cfi_endproc
 1056              	.LFE124:
 1058              		.align	2
 1059              		.global	I2C_SMBusAlertConfig
 1060              		.thumb
 1061              		.thumb_func
 1063              	I2C_SMBusAlertConfig:
 1064              	.LFB125:
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1065              		.loc 1 628 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 8
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070 0580 80B4     		push	{r7}
 1071              	.LCFI45:
 1072              		.cfi_def_cfa_offset 4
 1073              		.cfi_offset 7, -4
 1074 0582 83B0     		sub	sp, sp, #12
 1075              	.LCFI46:
 1076              		.cfi_def_cfa_offset 16
 1077 0584 00AF     		add	r7, sp, #0
 1078              	.LCFI47:
 1079              		.cfi_def_cfa_register 7
 1080 0586 7860     		str	r0, [r7, #4]
 1081 0588 0B46     		mov	r3, r1
 1082 058a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1083              		.loc 1 632 0
 1084 058c 7B88     		ldrh	r3, [r7, #2]
 1085 058e B3F5005F 		cmp	r3, #8192
 1086 0592 08D1     		bne	.L48
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1087              		.loc 1 635 0
 1088 0594 7B68     		ldr	r3, [r7, #4]
 1089 0596 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1090 0598 9BB2     		uxth	r3, r3
 1091 059a 43F40053 		orr	r3, r3, #8192
 1092 059e 9AB2     		uxth	r2, r3
 1093 05a0 7B68     		ldr	r3, [r7, #4]
 1094 05a2 1A80     		strh	r2, [r3, #0]	@ movhi
 1095 05a4 07E0     		b	.L47
 1096              	.L48:
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 1097              		.loc 1 640 0
 1098 05a6 7B68     		ldr	r3, [r7, #4]
 1099 05a8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1100 05aa 9BB2     		uxth	r3, r3
 1101 05ac 23F40053 		bic	r3, r3, #8192
 1102 05b0 9AB2     		uxth	r2, r3
 1103 05b2 7B68     		ldr	r3, [r7, #4]
 1104 05b4 1A80     		strh	r2, [r3, #0]	@ movhi
 1105              	.L47:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1106              		.loc 1 642 0
 1107 05b6 07F10C07 		add	r7, r7, #12
 1108 05ba BD46     		mov	sp, r7
 1109 05bc 80BC     		pop	{r7}
 1110 05be 7047     		bx	lr
 1111              		.cfi_endproc
 1112              	.LFE125:
 1114              		.align	2
 1115              		.global	I2C_ARPCmd
 1116              		.thumb
 1117              		.thumb_func
 1119              	I2C_ARPCmd:
 1120              	.LFB126:
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1121              		.loc 1 652 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 8
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126 05c0 80B4     		push	{r7}
 1127              	.LCFI48:
 1128              		.cfi_def_cfa_offset 4
 1129              		.cfi_offset 7, -4
 1130 05c2 83B0     		sub	sp, sp, #12
 1131              	.LCFI49:
 1132              		.cfi_def_cfa_offset 16
 1133 05c4 00AF     		add	r7, sp, #0
 1134              	.LCFI50:
 1135              		.cfi_def_cfa_register 7
 1136 05c6 7860     		str	r0, [r7, #4]
 1137 05c8 0B46     		mov	r3, r1
 1138 05ca FB70     		strb	r3, [r7, #3]
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1139              		.loc 1 656 0
 1140 05cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1141 05ce 002B     		cmp	r3, #0
 1142 05d0 08D0     		beq	.L51
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1143              		.loc 1 659 0
 1144 05d2 7B68     		ldr	r3, [r7, #4]
 1145 05d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1146 05d6 9BB2     		uxth	r3, r3
 1147 05d8 43F01003 		orr	r3, r3, #16
 1148 05dc 9AB2     		uxth	r2, r3
 1149 05de 7B68     		ldr	r3, [r7, #4]
 1150 05e0 1A80     		strh	r2, [r3, #0]	@ movhi
 1151 05e2 07E0     		b	.L50
 1152              	.L51:
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 1153              		.loc 1 664 0
 1154 05e4 7B68     		ldr	r3, [r7, #4]
 1155 05e6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1156 05e8 9BB2     		uxth	r3, r3
 1157 05ea 23F01003 		bic	r3, r3, #16
 1158 05ee 9AB2     		uxth	r2, r3
 1159 05f0 7B68     		ldr	r3, [r7, #4]
 1160 05f2 1A80     		strh	r2, [r3, #0]	@ movhi
 1161              	.L50:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1162              		.loc 1 666 0
 1163 05f4 07F10C07 		add	r7, r7, #12
 1164 05f8 BD46     		mov	sp, r7
 1165 05fa 80BC     		pop	{r7}
 1166 05fc 7047     		bx	lr
 1167              		.cfi_endproc
 1168              	.LFE126:
 1170 05fe 00BF     		.align	2
 1171              		.global	I2C_SendData
 1172              		.thumb
 1173              		.thumb_func
 1175              	I2C_SendData:
 1176              	.LFB127:
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1177              		.loc 1 690 0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 8
 1180              		@ frame_needed = 1, uses_anonymous_args = 0
 1181              		@ link register save eliminated.
 1182 0600 80B4     		push	{r7}
 1183              	.LCFI51:
 1184              		.cfi_def_cfa_offset 4
 1185              		.cfi_offset 7, -4
 1186 0602 83B0     		sub	sp, sp, #12
 1187              	.LCFI52:
 1188              		.cfi_def_cfa_offset 16
 1189 0604 00AF     		add	r7, sp, #0
 1190              	.LCFI53:
 1191              		.cfi_def_cfa_register 7
 1192 0606 7860     		str	r0, [r7, #4]
 1193 0608 0B46     		mov	r3, r1
 1194 060a FB70     		strb	r3, [r7, #3]
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 1195              		.loc 1 694 0
 1196 060c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1197 060e 9AB2     		uxth	r2, r3
 1198 0610 7B68     		ldr	r3, [r7, #4]
 1199 0612 1A82     		strh	r2, [r3, #16]	@ movhi
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1200              		.loc 1 695 0
 1201 0614 07F10C07 		add	r7, r7, #12
 1202 0618 BD46     		mov	sp, r7
 1203 061a 80BC     		pop	{r7}
 1204 061c 7047     		bx	lr
 1205              		.cfi_endproc
 1206              	.LFE127:
 1208 061e 00BF     		.align	2
 1209              		.global	I2C_ReceiveData
 1210              		.thumb
 1211              		.thumb_func
 1213              	I2C_ReceiveData:
 1214              	.LFB128:
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1215              		.loc 1 703 0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 8
 1218              		@ frame_needed = 1, uses_anonymous_args = 0
 1219              		@ link register save eliminated.
 1220 0620 80B4     		push	{r7}
 1221              	.LCFI54:
 1222              		.cfi_def_cfa_offset 4
 1223              		.cfi_offset 7, -4
 1224 0622 83B0     		sub	sp, sp, #12
 1225              	.LCFI55:
 1226              		.cfi_def_cfa_offset 16
 1227 0624 00AF     		add	r7, sp, #0
 1228              	.LCFI56:
 1229              		.cfi_def_cfa_register 7
 1230 0626 7860     		str	r0, [r7, #4]
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1231              		.loc 1 707 0
 1232 0628 7B68     		ldr	r3, [r7, #4]
 1233 062a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1234 062c 9BB2     		uxth	r3, r3
 1235 062e DBB2     		uxtb	r3, r3
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1236              		.loc 1 708 0
 1237 0630 1846     		mov	r0, r3
 1238 0632 07F10C07 		add	r7, r7, #12
 1239 0636 BD46     		mov	sp, r7
 1240 0638 80BC     		pop	{r7}
 1241 063a 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE128:
 1245              		.align	2
 1246              		.global	I2C_TransmitPEC
 1247              		.thumb
 1248              		.thumb_func
 1250              	I2C_TransmitPEC:
 1251              	.LFB129:
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1252              		.loc 1 734 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 8
 1255              		@ frame_needed = 1, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 1257 063c 80B4     		push	{r7}
 1258              	.LCFI57:
 1259              		.cfi_def_cfa_offset 4
 1260              		.cfi_offset 7, -4
 1261 063e 83B0     		sub	sp, sp, #12
 1262              	.LCFI58:
 1263              		.cfi_def_cfa_offset 16
 1264 0640 00AF     		add	r7, sp, #0
 1265              	.LCFI59:
 1266              		.cfi_def_cfa_register 7
 1267 0642 7860     		str	r0, [r7, #4]
 1268 0644 0B46     		mov	r3, r1
 1269 0646 FB70     		strb	r3, [r7, #3]
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1270              		.loc 1 738 0
 1271 0648 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1272 064a 002B     		cmp	r3, #0
 1273 064c 08D0     		beq	.L56
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1274              		.loc 1 741 0
 1275 064e 7B68     		ldr	r3, [r7, #4]
 1276 0650 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1277 0652 9BB2     		uxth	r3, r3
 1278 0654 43F48053 		orr	r3, r3, #4096
 1279 0658 9AB2     		uxth	r2, r3
 1280 065a 7B68     		ldr	r3, [r7, #4]
 1281 065c 1A80     		strh	r2, [r3, #0]	@ movhi
 1282 065e 07E0     		b	.L55
 1283              	.L56:
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 1284              		.loc 1 746 0
 1285 0660 7B68     		ldr	r3, [r7, #4]
 1286 0662 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1287 0664 9BB2     		uxth	r3, r3
 1288 0666 23F48053 		bic	r3, r3, #4096
 1289 066a 9AB2     		uxth	r2, r3
 1290 066c 7B68     		ldr	r3, [r7, #4]
 1291 066e 1A80     		strh	r2, [r3, #0]	@ movhi
 1292              	.L55:
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1293              		.loc 1 748 0
 1294 0670 07F10C07 		add	r7, r7, #12
 1295 0674 BD46     		mov	sp, r7
 1296 0676 80BC     		pop	{r7}
 1297 0678 7047     		bx	lr
 1298              		.cfi_endproc
 1299              	.LFE129:
 1301 067a 00BF     		.align	2
 1302              		.global	I2C_PECPositionConfig
 1303              		.thumb
 1304              		.thumb_func
 1306              	I2C_PECPositionConfig:
 1307              	.LFB130:
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1308              		.loc 1 765 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 8
 1311              		@ frame_needed = 1, uses_anonymous_args = 0
 1312              		@ link register save eliminated.
 1313 067c 80B4     		push	{r7}
 1314              	.LCFI60:
 1315              		.cfi_def_cfa_offset 4
 1316              		.cfi_offset 7, -4
 1317 067e 83B0     		sub	sp, sp, #12
 1318              	.LCFI61:
 1319              		.cfi_def_cfa_offset 16
 1320 0680 00AF     		add	r7, sp, #0
 1321              	.LCFI62:
 1322              		.cfi_def_cfa_register 7
 1323 0682 7860     		str	r0, [r7, #4]
 1324 0684 0B46     		mov	r3, r1
 1325 0686 7B80     		strh	r3, [r7, #2]	@ movhi
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1326              		.loc 1 769 0
 1327 0688 7B88     		ldrh	r3, [r7, #2]
 1328 068a B3F5006F 		cmp	r3, #2048
 1329 068e 08D1     		bne	.L59
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1330              		.loc 1 772 0
 1331 0690 7B68     		ldr	r3, [r7, #4]
 1332 0692 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1333 0694 9BB2     		uxth	r3, r3
 1334 0696 43F40063 		orr	r3, r3, #2048
 1335 069a 9AB2     		uxth	r2, r3
 1336 069c 7B68     		ldr	r3, [r7, #4]
 1337 069e 1A80     		strh	r2, [r3, #0]	@ movhi
 1338 06a0 07E0     		b	.L58
 1339              	.L59:
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 1340              		.loc 1 777 0
 1341 06a2 7B68     		ldr	r3, [r7, #4]
 1342 06a4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1343 06a6 9BB2     		uxth	r3, r3
 1344 06a8 23F40063 		bic	r3, r3, #2048
 1345 06ac 9AB2     		uxth	r2, r3
 1346 06ae 7B68     		ldr	r3, [r7, #4]
 1347 06b0 1A80     		strh	r2, [r3, #0]	@ movhi
 1348              	.L58:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1349              		.loc 1 779 0
 1350 06b2 07F10C07 		add	r7, r7, #12
 1351 06b6 BD46     		mov	sp, r7
 1352 06b8 80BC     		pop	{r7}
 1353 06ba 7047     		bx	lr
 1354              		.cfi_endproc
 1355              	.LFE130:
 1357              		.align	2
 1358              		.global	I2C_CalculatePEC
 1359              		.thumb
 1360              		.thumb_func
 1362              	I2C_CalculatePEC:
 1363              	.LFB131:
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1364              		.loc 1 789 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 8
 1367              		@ frame_needed = 1, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 1369 06bc 80B4     		push	{r7}
 1370              	.LCFI63:
 1371              		.cfi_def_cfa_offset 4
 1372              		.cfi_offset 7, -4
 1373 06be 83B0     		sub	sp, sp, #12
 1374              	.LCFI64:
 1375              		.cfi_def_cfa_offset 16
 1376 06c0 00AF     		add	r7, sp, #0
 1377              	.LCFI65:
 1378              		.cfi_def_cfa_register 7
 1379 06c2 7860     		str	r0, [r7, #4]
 1380 06c4 0B46     		mov	r3, r1
 1381 06c6 FB70     		strb	r3, [r7, #3]
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1382              		.loc 1 793 0
 1383 06c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1384 06ca 002B     		cmp	r3, #0
 1385 06cc 08D0     		beq	.L62
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1386              		.loc 1 796 0
 1387 06ce 7B68     		ldr	r3, [r7, #4]
 1388 06d0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1389 06d2 9BB2     		uxth	r3, r3
 1390 06d4 43F02003 		orr	r3, r3, #32
 1391 06d8 9AB2     		uxth	r2, r3
 1392 06da 7B68     		ldr	r3, [r7, #4]
 1393 06dc 1A80     		strh	r2, [r3, #0]	@ movhi
 1394 06de 07E0     		b	.L61
 1395              	.L62:
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1396              		.loc 1 801 0
 1397 06e0 7B68     		ldr	r3, [r7, #4]
 1398 06e2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1399 06e4 9BB2     		uxth	r3, r3
 1400 06e6 23F02003 		bic	r3, r3, #32
 1401 06ea 9AB2     		uxth	r2, r3
 1402 06ec 7B68     		ldr	r3, [r7, #4]
 1403 06ee 1A80     		strh	r2, [r3, #0]	@ movhi
 1404              	.L61:
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1405              		.loc 1 803 0
 1406 06f0 07F10C07 		add	r7, r7, #12
 1407 06f4 BD46     		mov	sp, r7
 1408 06f6 80BC     		pop	{r7}
 1409 06f8 7047     		bx	lr
 1410              		.cfi_endproc
 1411              	.LFE131:
 1413 06fa 00BF     		.align	2
 1414              		.global	I2C_GetPEC
 1415              		.thumb
 1416              		.thumb_func
 1418              	I2C_GetPEC:
 1419              	.LFB132:
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1420              		.loc 1 811 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424              		@ link register save eliminated.
 1425 06fc 80B4     		push	{r7}
 1426              	.LCFI66:
 1427              		.cfi_def_cfa_offset 4
 1428              		.cfi_offset 7, -4
 1429 06fe 83B0     		sub	sp, sp, #12
 1430              	.LCFI67:
 1431              		.cfi_def_cfa_offset 16
 1432 0700 00AF     		add	r7, sp, #0
 1433              	.LCFI68:
 1434              		.cfi_def_cfa_register 7
 1435 0702 7860     		str	r0, [r7, #4]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1436              		.loc 1 815 0
 1437 0704 7B68     		ldr	r3, [r7, #4]
 1438 0706 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1439 0708 9BB2     		uxth	r3, r3
 1440 070a 4FEA1323 		lsr	r3, r3, #8
 1441 070e 9BB2     		uxth	r3, r3
 1442 0710 DBB2     		uxtb	r3, r3
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1443              		.loc 1 816 0
 1444 0712 1846     		mov	r0, r3
 1445 0714 07F10C07 		add	r7, r7, #12
 1446 0718 BD46     		mov	sp, r7
 1447 071a 80BC     		pop	{r7}
 1448 071c 7047     		bx	lr
 1449              		.cfi_endproc
 1450              	.LFE132:
 1452 071e 00BF     		.align	2
 1453              		.global	I2C_DMACmd
 1454              		.thumb
 1455              		.thumb_func
 1457              	I2C_DMACmd:
 1458              	.LFB133:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1459              		.loc 1 844 0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 8
 1462              		@ frame_needed = 1, uses_anonymous_args = 0
 1463              		@ link register save eliminated.
 1464 0720 80B4     		push	{r7}
 1465              	.LCFI69:
 1466              		.cfi_def_cfa_offset 4
 1467              		.cfi_offset 7, -4
 1468 0722 83B0     		sub	sp, sp, #12
 1469              	.LCFI70:
 1470              		.cfi_def_cfa_offset 16
 1471 0724 00AF     		add	r7, sp, #0
 1472              	.LCFI71:
 1473              		.cfi_def_cfa_register 7
 1474 0726 7860     		str	r0, [r7, #4]
 1475 0728 0B46     		mov	r3, r1
 1476 072a FB70     		strb	r3, [r7, #3]
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1477              		.loc 1 848 0
 1478 072c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1479 072e 002B     		cmp	r3, #0
 1480 0730 08D0     		beq	.L66
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1481              		.loc 1 851 0
 1482 0732 7B68     		ldr	r3, [r7, #4]
 1483 0734 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1484 0736 9BB2     		uxth	r3, r3
 1485 0738 43F40063 		orr	r3, r3, #2048
 1486 073c 9AB2     		uxth	r2, r3
 1487 073e 7B68     		ldr	r3, [r7, #4]
 1488 0740 9A80     		strh	r2, [r3, #4]	@ movhi
 1489 0742 07E0     		b	.L65
 1490              	.L66:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1491              		.loc 1 856 0
 1492 0744 7B68     		ldr	r3, [r7, #4]
 1493 0746 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1494 0748 9BB2     		uxth	r3, r3
 1495 074a 23F40063 		bic	r3, r3, #2048
 1496 074e 9AB2     		uxth	r2, r3
 1497 0750 7B68     		ldr	r3, [r7, #4]
 1498 0752 9A80     		strh	r2, [r3, #4]	@ movhi
 1499              	.L65:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1500              		.loc 1 858 0
 1501 0754 07F10C07 		add	r7, r7, #12
 1502 0758 BD46     		mov	sp, r7
 1503 075a 80BC     		pop	{r7}
 1504 075c 7047     		bx	lr
 1505              		.cfi_endproc
 1506              	.LFE133:
 1508 075e 00BF     		.align	2
 1509              		.global	I2C_DMALastTransferCmd
 1510              		.thumb
 1511              		.thumb_func
 1513              	I2C_DMALastTransferCmd:
 1514              	.LFB134:
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1515              		.loc 1 868 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 8
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520 0760 80B4     		push	{r7}
 1521              	.LCFI72:
 1522              		.cfi_def_cfa_offset 4
 1523              		.cfi_offset 7, -4
 1524 0762 83B0     		sub	sp, sp, #12
 1525              	.LCFI73:
 1526              		.cfi_def_cfa_offset 16
 1527 0764 00AF     		add	r7, sp, #0
 1528              	.LCFI74:
 1529              		.cfi_def_cfa_register 7
 1530 0766 7860     		str	r0, [r7, #4]
 1531 0768 0B46     		mov	r3, r1
 1532 076a FB70     		strb	r3, [r7, #3]
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1533              		.loc 1 872 0
 1534 076c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1535 076e 002B     		cmp	r3, #0
 1536 0770 08D0     		beq	.L69
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1537              		.loc 1 875 0
 1538 0772 7B68     		ldr	r3, [r7, #4]
 1539 0774 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1540 0776 9BB2     		uxth	r3, r3
 1541 0778 43F48053 		orr	r3, r3, #4096
 1542 077c 9AB2     		uxth	r2, r3
 1543 077e 7B68     		ldr	r3, [r7, #4]
 1544 0780 9A80     		strh	r2, [r3, #4]	@ movhi
 1545 0782 07E0     		b	.L68
 1546              	.L69:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1547              		.loc 1 880 0
 1548 0784 7B68     		ldr	r3, [r7, #4]
 1549 0786 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1550 0788 9BB2     		uxth	r3, r3
 1551 078a 23F48053 		bic	r3, r3, #4096
 1552 078e 9AB2     		uxth	r2, r3
 1553 0790 7B68     		ldr	r3, [r7, #4]
 1554 0792 9A80     		strh	r2, [r3, #4]	@ movhi
 1555              	.L68:
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1556              		.loc 1 882 0
 1557 0794 07F10C07 		add	r7, r7, #12
 1558 0798 BD46     		mov	sp, r7
 1559 079a 80BC     		pop	{r7}
 1560 079c 7047     		bx	lr
 1561              		.cfi_endproc
 1562              	.LFE134:
 1564 079e 00BF     		.align	2
 1565              		.global	I2C_ReadRegister
 1566              		.thumb
 1567              		.thumb_func
 1569              	I2C_ReadRegister:
 1570              	.LFB135:
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1571              		.loc 1 1006 0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 16
 1574              		@ frame_needed = 1, uses_anonymous_args = 0
 1575              		@ link register save eliminated.
 1576 07a0 80B4     		push	{r7}
 1577              	.LCFI75:
 1578              		.cfi_def_cfa_offset 4
 1579              		.cfi_offset 7, -4
 1580 07a2 85B0     		sub	sp, sp, #20
 1581              	.LCFI76:
 1582              		.cfi_def_cfa_offset 24
 1583 07a4 00AF     		add	r7, sp, #0
 1584              	.LCFI77:
 1585              		.cfi_def_cfa_register 7
 1586 07a6 7860     		str	r0, [r7, #4]
 1587 07a8 0B46     		mov	r3, r1
 1588 07aa FB70     		strb	r3, [r7, #3]
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1589              		.loc 1 1007 0
 1590 07ac 4FF00003 		mov	r3, #0
 1591 07b0 FB60     		str	r3, [r7, #12]
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1592              		.loc 1 1013 0
 1593 07b2 7B68     		ldr	r3, [r7, #4]
 1594 07b4 FB60     		str	r3, [r7, #12]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1595              		.loc 1 1014 0
 1596 07b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1597 07b8 FB68     		ldr	r3, [r7, #12]
 1598 07ba D318     		adds	r3, r2, r3
 1599 07bc FB60     		str	r3, [r7, #12]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1600              		.loc 1 1017 0
 1601 07be FB68     		ldr	r3, [r7, #12]
 1602 07c0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1603 07c2 9BB2     		uxth	r3, r3
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1604              		.loc 1 1018 0
 1605 07c4 1846     		mov	r0, r3
 1606 07c6 07F11407 		add	r7, r7, #20
 1607 07ca BD46     		mov	sp, r7
 1608 07cc 80BC     		pop	{r7}
 1609 07ce 7047     		bx	lr
 1610              		.cfi_endproc
 1611              	.LFE135:
 1613              		.align	2
 1614              		.global	I2C_ITConfig
 1615              		.thumb
 1616              		.thumb_func
 1618              	I2C_ITConfig:
 1619              	.LFB136:
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1620              		.loc 1 1033 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 8
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 07d0 80B4     		push	{r7}
 1626              	.LCFI78:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 07d2 83B0     		sub	sp, sp, #12
 1630              	.LCFI79:
 1631              		.cfi_def_cfa_offset 16
 1632 07d4 00AF     		add	r7, sp, #0
 1633              	.LCFI80:
 1634              		.cfi_def_cfa_register 7
 1635 07d6 7860     		str	r0, [r7, #4]
 1636 07d8 1346     		mov	r3, r2
 1637 07da 0A46     		mov	r2, r1	@ movhi
 1638 07dc 7A80     		strh	r2, [r7, #2]	@ movhi
 1639 07de 7B70     		strb	r3, [r7, #1]
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1640              		.loc 1 1039 0
 1641 07e0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1642 07e2 002B     		cmp	r3, #0
 1643 07e4 08D0     		beq	.L73
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1644              		.loc 1 1042 0
 1645 07e6 7B68     		ldr	r3, [r7, #4]
 1646 07e8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1647 07ea 9AB2     		uxth	r2, r3
 1648 07ec 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1649 07ee 1343     		orrs	r3, r3, r2
 1650 07f0 9AB2     		uxth	r2, r3
 1651 07f2 7B68     		ldr	r3, [r7, #4]
 1652 07f4 9A80     		strh	r2, [r3, #4]	@ movhi
 1653 07f6 0AE0     		b	.L72
 1654              	.L73:
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1655              		.loc 1 1047 0
 1656 07f8 7B68     		ldr	r3, [r7, #4]
 1657 07fa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1658 07fc 9AB2     		uxth	r2, r3
 1659 07fe 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1660 0800 6FEA0303 		mvn	r3, r3
 1661 0804 9BB2     		uxth	r3, r3
 1662 0806 1340     		ands	r3, r3, r2
 1663 0808 9AB2     		uxth	r2, r3
 1664 080a 7B68     		ldr	r3, [r7, #4]
 1665 080c 9A80     		strh	r2, [r3, #4]	@ movhi
 1666              	.L72:
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1667              		.loc 1 1049 0
 1668 080e 07F10C07 		add	r7, r7, #12
 1669 0812 BD46     		mov	sp, r7
 1670 0814 80BC     		pop	{r7}
 1671 0816 7047     		bx	lr
 1672              		.cfi_endproc
 1673              	.LFE136:
 1675              		.align	2
 1676              		.global	I2C_CheckEvent
 1677              		.thumb
 1678              		.thumb_func
 1680              	I2C_CheckEvent:
 1681              	.LFB137:
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1682              		.loc 1 1092 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 24
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
 1687 0818 80B4     		push	{r7}
 1688              	.LCFI81:
 1689              		.cfi_def_cfa_offset 4
 1690              		.cfi_offset 7, -4
 1691 081a 87B0     		sub	sp, sp, #28
 1692              	.LCFI82:
 1693              		.cfi_def_cfa_offset 32
 1694 081c 00AF     		add	r7, sp, #0
 1695              	.LCFI83:
 1696              		.cfi_def_cfa_register 7
 1697 081e 7860     		str	r0, [r7, #4]
 1698 0820 3960     		str	r1, [r7, #0]
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1699              		.loc 1 1093 0
 1700 0822 4FF00003 		mov	r3, #0
 1701 0826 3B61     		str	r3, [r7, #16]
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1702              		.loc 1 1094 0
 1703 0828 4FF00003 		mov	r3, #0
 1704 082c FB60     		str	r3, [r7, #12]
 1705 082e 4FF00003 		mov	r3, #0
 1706 0832 BB60     		str	r3, [r7, #8]
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 1707              		.loc 1 1095 0
 1708 0834 4FF00003 		mov	r3, #0
 1709 0838 FB75     		strb	r3, [r7, #23]
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1710              		.loc 1 1102 0
 1711 083a 7B68     		ldr	r3, [r7, #4]
 1712 083c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1713 083e 9BB2     		uxth	r3, r3
 1714 0840 FB60     		str	r3, [r7, #12]
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1715              		.loc 1 1103 0
 1716 0842 7B68     		ldr	r3, [r7, #4]
 1717 0844 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1718 0846 9BB2     		uxth	r3, r3
 1719 0848 BB60     		str	r3, [r7, #8]
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1720              		.loc 1 1104 0
 1721 084a BB68     		ldr	r3, [r7, #8]
 1722 084c 4FEA0343 		lsl	r3, r3, #16
 1723 0850 BB60     		str	r3, [r7, #8]
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1724              		.loc 1 1107 0
 1725 0852 FA68     		ldr	r2, [r7, #12]
 1726 0854 BB68     		ldr	r3, [r7, #8]
 1727 0856 1343     		orrs	r3, r3, r2
 1728 0858 23F07F43 		bic	r3, r3, #-16777216
 1729 085c 3B61     		str	r3, [r7, #16]
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1730              		.loc 1 1110 0
 1731 085e 3A69     		ldr	r2, [r7, #16]
 1732 0860 3B68     		ldr	r3, [r7, #0]
 1733 0862 1A40     		ands	r2, r2, r3
 1734 0864 3B68     		ldr	r3, [r7, #0]
 1735 0866 9A42     		cmp	r2, r3
 1736 0868 03D1     		bne	.L76
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 1737              		.loc 1 1113 0
 1738 086a 4FF00103 		mov	r3, #1
 1739 086e FB75     		strb	r3, [r7, #23]
 1740 0870 02E0     		b	.L77
 1741              	.L76:
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 1742              		.loc 1 1118 0
 1743 0872 4FF00003 		mov	r3, #0
 1744 0876 FB75     		strb	r3, [r7, #23]
 1745              	.L77:
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 1746              		.loc 1 1121 0
 1747 0878 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1748              		.loc 1 1122 0
 1749 087a 1846     		mov	r0, r3
 1750 087c 07F11C07 		add	r7, r7, #28
 1751 0880 BD46     		mov	sp, r7
 1752 0882 80BC     		pop	{r7}
 1753 0884 7047     		bx	lr
 1754              		.cfi_endproc
 1755              	.LFE137:
 1757 0886 00BF     		.align	2
 1758              		.global	I2C_GetLastEvent
 1759              		.thumb
 1760              		.thumb_func
 1762              	I2C_GetLastEvent:
 1763              	.LFB138:
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1764              		.loc 1 1140 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 24
 1767              		@ frame_needed = 1, uses_anonymous_args = 0
 1768              		@ link register save eliminated.
 1769 0888 80B4     		push	{r7}
 1770              	.LCFI84:
 1771              		.cfi_def_cfa_offset 4
 1772              		.cfi_offset 7, -4
 1773 088a 87B0     		sub	sp, sp, #28
 1774              	.LCFI85:
 1775              		.cfi_def_cfa_offset 32
 1776 088c 00AF     		add	r7, sp, #0
 1777              	.LCFI86:
 1778              		.cfi_def_cfa_register 7
 1779 088e 7860     		str	r0, [r7, #4]
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1780              		.loc 1 1141 0
 1781 0890 4FF00003 		mov	r3, #0
 1782 0894 7B61     		str	r3, [r7, #20]
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1783              		.loc 1 1142 0
 1784 0896 4FF00003 		mov	r3, #0
 1785 089a 3B61     		str	r3, [r7, #16]
 1786 089c 4FF00003 		mov	r3, #0
 1787 08a0 FB60     		str	r3, [r7, #12]
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1788              		.loc 1 1148 0
 1789 08a2 7B68     		ldr	r3, [r7, #4]
 1790 08a4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1791 08a6 9BB2     		uxth	r3, r3
 1792 08a8 3B61     		str	r3, [r7, #16]
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1793              		.loc 1 1149 0
 1794 08aa 7B68     		ldr	r3, [r7, #4]
 1795 08ac 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1796 08ae 9BB2     		uxth	r3, r3
 1797 08b0 FB60     		str	r3, [r7, #12]
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1798              		.loc 1 1150 0
 1799 08b2 FB68     		ldr	r3, [r7, #12]
 1800 08b4 4FEA0343 		lsl	r3, r3, #16
 1801 08b8 FB60     		str	r3, [r7, #12]
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1802              		.loc 1 1153 0
 1803 08ba 3A69     		ldr	r2, [r7, #16]
 1804 08bc FB68     		ldr	r3, [r7, #12]
 1805 08be 1343     		orrs	r3, r3, r2
 1806 08c0 23F07F43 		bic	r3, r3, #-16777216
 1807 08c4 7B61     		str	r3, [r7, #20]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 1808              		.loc 1 1156 0
 1809 08c6 7B69     		ldr	r3, [r7, #20]
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1810              		.loc 1 1157 0
 1811 08c8 1846     		mov	r0, r3
 1812 08ca 07F11C07 		add	r7, r7, #28
 1813 08ce BD46     		mov	sp, r7
 1814 08d0 80BC     		pop	{r7}
 1815 08d2 7047     		bx	lr
 1816              		.cfi_endproc
 1817              	.LFE138:
 1819              		.align	2
 1820              		.global	I2C_GetFlagStatus
 1821              		.thumb
 1822              		.thumb_func
 1824              	I2C_GetFlagStatus:
 1825              	.LFB139:
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1826              		.loc 1 1195 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 24
 1829              		@ frame_needed = 1, uses_anonymous_args = 0
 1830              		@ link register save eliminated.
 1831 08d4 80B4     		push	{r7}
 1832              	.LCFI87:
 1833              		.cfi_def_cfa_offset 4
 1834              		.cfi_offset 7, -4
 1835 08d6 87B0     		sub	sp, sp, #28
 1836              	.LCFI88:
 1837              		.cfi_def_cfa_offset 32
 1838 08d8 00AF     		add	r7, sp, #0
 1839              	.LCFI89:
 1840              		.cfi_def_cfa_register 7
 1841 08da 7860     		str	r0, [r7, #4]
 1842 08dc 3960     		str	r1, [r7, #0]
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 1843              		.loc 1 1196 0
 1844 08de 4FF00003 		mov	r3, #0
 1845 08e2 FB75     		strb	r3, [r7, #23]
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1846              		.loc 1 1197 0
 1847 08e4 4FF00003 		mov	r3, #0
 1848 08e8 3B61     		str	r3, [r7, #16]
 1849 08ea 4FF00003 		mov	r3, #0
 1850 08ee FB60     		str	r3, [r7, #12]
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1851              		.loc 1 1204 0
 1852 08f0 7B68     		ldr	r3, [r7, #4]
 1853 08f2 FB60     		str	r3, [r7, #12]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1854              		.loc 1 1207 0
 1855 08f4 3B68     		ldr	r3, [r7, #0]
 1856 08f6 4FEA1373 		lsr	r3, r3, #28
 1857 08fa 3B61     		str	r3, [r7, #16]
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1858              		.loc 1 1210 0
 1859 08fc 3B68     		ldr	r3, [r7, #0]
 1860 08fe 23F07F43 		bic	r3, r3, #-16777216
 1861 0902 3B60     		str	r3, [r7, #0]
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1862              		.loc 1 1212 0
 1863 0904 3B69     		ldr	r3, [r7, #16]
 1864 0906 002B     		cmp	r3, #0
 1865 0908 04D0     		beq	.L80
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1866              		.loc 1 1215 0
 1867 090a FB68     		ldr	r3, [r7, #12]
 1868 090c 03F11403 		add	r3, r3, #20
 1869 0910 FB60     		str	r3, [r7, #12]
 1870 0912 07E0     		b	.L81
 1871              	.L80:
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1872              		.loc 1 1220 0
 1873 0914 3B68     		ldr	r3, [r7, #0]
 1874 0916 4FEA1343 		lsr	r3, r3, #16
 1875 091a 3B60     		str	r3, [r7, #0]
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1876              		.loc 1 1222 0
 1877 091c FB68     		ldr	r3, [r7, #12]
 1878 091e 03F11803 		add	r3, r3, #24
 1879 0922 FB60     		str	r3, [r7, #12]
 1880              	.L81:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1881              		.loc 1 1225 0
 1882 0924 FB68     		ldr	r3, [r7, #12]
 1883 0926 1A68     		ldr	r2, [r3, #0]
 1884 0928 3B68     		ldr	r3, [r7, #0]
 1885 092a 1340     		ands	r3, r3, r2
 1886 092c 002B     		cmp	r3, #0
 1887 092e 03D0     		beq	.L82
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1888              		.loc 1 1228 0
 1889 0930 4FF00103 		mov	r3, #1
 1890 0934 FB75     		strb	r3, [r7, #23]
 1891 0936 02E0     		b	.L83
 1892              	.L82:
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1893              		.loc 1 1233 0
 1894 0938 4FF00003 		mov	r3, #0
 1895 093c FB75     		strb	r3, [r7, #23]
 1896              	.L83:
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 1897              		.loc 1 1237 0
 1898 093e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1899              		.loc 1 1238 0
 1900 0940 1846     		mov	r0, r3
 1901 0942 07F11C07 		add	r7, r7, #28
 1902 0946 BD46     		mov	sp, r7
 1903 0948 80BC     		pop	{r7}
 1904 094a 7047     		bx	lr
 1905              		.cfi_endproc
 1906              	.LFE139:
 1908              		.align	2
 1909              		.global	I2C_ClearFlag
 1910              		.thumb
 1911              		.thumb_func
 1913              	I2C_ClearFlag:
 1914              	.LFB140:
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1915              		.loc 1 1272 0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 16
 1918              		@ frame_needed = 1, uses_anonymous_args = 0
 1919              		@ link register save eliminated.
 1920 094c 80B4     		push	{r7}
 1921              	.LCFI90:
 1922              		.cfi_def_cfa_offset 4
 1923              		.cfi_offset 7, -4
 1924 094e 85B0     		sub	sp, sp, #20
 1925              	.LCFI91:
 1926              		.cfi_def_cfa_offset 24
 1927 0950 00AF     		add	r7, sp, #0
 1928              	.LCFI92:
 1929              		.cfi_def_cfa_register 7
 1930 0952 7860     		str	r0, [r7, #4]
 1931 0954 3960     		str	r1, [r7, #0]
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 1932              		.loc 1 1273 0
 1933 0956 4FF00003 		mov	r3, #0
 1934 095a FB60     		str	r3, [r7, #12]
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1935              		.loc 1 1278 0
 1936 095c 3B68     		ldr	r3, [r7, #0]
 1937 095e 23F07F43 		bic	r3, r3, #-16777216
 1938 0962 FB60     		str	r3, [r7, #12]
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1939              		.loc 1 1280 0
 1940 0964 FB68     		ldr	r3, [r7, #12]
 1941 0966 9BB2     		uxth	r3, r3
 1942 0968 6FEA0303 		mvn	r3, r3
 1943 096c 9AB2     		uxth	r2, r3
 1944 096e 7B68     		ldr	r3, [r7, #4]
 1945 0970 9A82     		strh	r2, [r3, #20]	@ movhi
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1946              		.loc 1 1281 0
 1947 0972 07F11407 		add	r7, r7, #20
 1948 0976 BD46     		mov	sp, r7
 1949 0978 80BC     		pop	{r7}
 1950 097a 7047     		bx	lr
 1951              		.cfi_endproc
 1952              	.LFE140:
 1954              		.align	2
 1955              		.global	I2C_GetITStatus
 1956              		.thumb
 1957              		.thumb_func
 1959              	I2C_GetITStatus:
 1960              	.LFB141:
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1961              		.loc 1 1306 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 16
 1964              		@ frame_needed = 1, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
 1966 097c 80B4     		push	{r7}
 1967              	.LCFI93:
 1968              		.cfi_def_cfa_offset 4
 1969              		.cfi_offset 7, -4
 1970 097e 85B0     		sub	sp, sp, #20
 1971              	.LCFI94:
 1972              		.cfi_def_cfa_offset 24
 1973 0980 00AF     		add	r7, sp, #0
 1974              	.LCFI95:
 1975              		.cfi_def_cfa_register 7
 1976 0982 7860     		str	r0, [r7, #4]
 1977 0984 3960     		str	r1, [r7, #0]
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 1978              		.loc 1 1307 0
 1979 0986 4FF00003 		mov	r3, #0
 1980 098a FB73     		strb	r3, [r7, #15]
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 1981              		.loc 1 1308 0
 1982 098c 4FF00003 		mov	r3, #0
 1983 0990 BB60     		str	r3, [r7, #8]
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1984              		.loc 1 1315 0
 1985 0992 3B68     		ldr	r3, [r7, #0]
 1986 0994 03F0E063 		and	r3, r3, #117440512
 1987 0998 4FEA1342 		lsr	r2, r3, #16
 1988 099c 7B68     		ldr	r3, [r7, #4]
 1989 099e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1990 09a0 9BB2     		uxth	r3, r3
 1991 09a2 1340     		ands	r3, r3, r2
 1992 09a4 BB60     		str	r3, [r7, #8]
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 1993              		.loc 1 1318 0
 1994 09a6 3B68     		ldr	r3, [r7, #0]
 1995 09a8 23F07F43 		bic	r3, r3, #-16777216
 1996 09ac 3B60     		str	r3, [r7, #0]
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1997              		.loc 1 1321 0
 1998 09ae 7B68     		ldr	r3, [r7, #4]
 1999 09b0 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2000 09b2 9BB2     		uxth	r3, r3
 2001 09b4 1A46     		mov	r2, r3
 2002 09b6 3B68     		ldr	r3, [r7, #0]
 2003 09b8 1340     		ands	r3, r3, r2
 2004 09ba 002B     		cmp	r3, #0
 2005 09bc 06D0     		beq	.L86
 2006              		.loc 1 1321 0 is_stmt 0 discriminator 1
 2007 09be BB68     		ldr	r3, [r7, #8]
 2008 09c0 002B     		cmp	r3, #0
 2009 09c2 03D0     		beq	.L86
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2010              		.loc 1 1324 0 is_stmt 1
 2011 09c4 4FF00103 		mov	r3, #1
 2012 09c8 FB73     		strb	r3, [r7, #15]
 2013 09ca 02E0     		b	.L87
 2014              	.L86:
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2015              		.loc 1 1329 0
 2016 09cc 4FF00003 		mov	r3, #0
 2017 09d0 FB73     		strb	r3, [r7, #15]
 2018              	.L87:
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 2019              		.loc 1 1332 0
 2020 09d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2021              		.loc 1 1333 0
 2022 09d4 1846     		mov	r0, r3
 2023 09d6 07F11407 		add	r7, r7, #20
 2024 09da BD46     		mov	sp, r7
 2025 09dc 80BC     		pop	{r7}
 2026 09de 7047     		bx	lr
 2027              		.cfi_endproc
 2028              	.LFE141:
 2030              		.align	2
 2031              		.global	I2C_ClearITPendingBit
 2032              		.thumb
 2033              		.thumb_func
 2035              	I2C_ClearITPendingBit:
 2036              	.LFB142:
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 2037              		.loc 1 1366 0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 16
 2040              		@ frame_needed = 1, uses_anonymous_args = 0
 2041              		@ link register save eliminated.
 2042 09e0 80B4     		push	{r7}
 2043              	.LCFI96:
 2044              		.cfi_def_cfa_offset 4
 2045              		.cfi_offset 7, -4
 2046 09e2 85B0     		sub	sp, sp, #20
 2047              	.LCFI97:
 2048              		.cfi_def_cfa_offset 24
 2049 09e4 00AF     		add	r7, sp, #0
 2050              	.LCFI98:
 2051              		.cfi_def_cfa_register 7
 2052 09e6 7860     		str	r0, [r7, #4]
 2053 09e8 3960     		str	r1, [r7, #0]
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2054              		.loc 1 1367 0
 2055 09ea 4FF00003 		mov	r3, #0
 2056 09ee FB60     		str	r3, [r7, #12]
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2057              		.loc 1 1373 0
 2058 09f0 3B68     		ldr	r3, [r7, #0]
 2059 09f2 23F07F43 		bic	r3, r3, #-16777216
 2060 09f6 FB60     		str	r3, [r7, #12]
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2061              		.loc 1 1376 0
 2062 09f8 FB68     		ldr	r3, [r7, #12]
 2063 09fa 9BB2     		uxth	r3, r3
 2064 09fc 6FEA0303 		mvn	r3, r3
 2065 0a00 9AB2     		uxth	r2, r3
 2066 0a02 7B68     		ldr	r3, [r7, #4]
 2067 0a04 9A82     		strh	r2, [r3, #20]	@ movhi
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2068              		.loc 1 1377 0
 2069 0a06 07F11407 		add	r7, r7, #20
 2070 0a0a BD46     		mov	sp, r7
 2071 0a0c 80BC     		pop	{r7}
 2072 0a0e 7047     		bx	lr
 2073              		.cfi_endproc
 2074              	.LFE142:
 2076              	.Letext0:
 2077              		.file 2 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 2078              		.file 3 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4xx.h"
 2079              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_rcc.h
 2080              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_i2c.h
 2081              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:19     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:24     .text:00000000 I2C_DeInit
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:102    .text:00000088 I2C_Init
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:334    .text:00000234 I2C_StructInit
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:389    .text:00000278 I2C_Cmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:445    .text:000002b8 I2C_GenerateSTART
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:501    .text:000002f8 I2C_GenerateSTOP
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:557    .text:00000338 I2C_Send7bitAddress
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:612    .text:00000374 I2C_AcknowledgeConfig
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:668    .text:000003b4 I2C_OwnAddress2Config
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:725    .text:000003f8 I2C_DualAddressCmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:781    .text:00000438 I2C_GeneralCallCmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:837    .text:00000478 I2C_SoftwareResetCmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:895    .text:000004c0 I2C_StretchClockCmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:951    .text:00000500 I2C_FastModeDutyCycleConfig
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1007   .text:00000540 I2C_NACKPositionConfig
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1063   .text:00000580 I2C_SMBusAlertConfig
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1119   .text:000005c0 I2C_ARPCmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1175   .text:00000600 I2C_SendData
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1213   .text:00000620 I2C_ReceiveData
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1250   .text:0000063c I2C_TransmitPEC
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1306   .text:0000067c I2C_PECPositionConfig
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1362   .text:000006bc I2C_CalculatePEC
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1418   .text:000006fc I2C_GetPEC
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1457   .text:00000720 I2C_DMACmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1513   .text:00000760 I2C_DMALastTransferCmd
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1569   .text:000007a0 I2C_ReadRegister
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1618   .text:000007d0 I2C_ITConfig
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1680   .text:00000818 I2C_CheckEvent
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1762   .text:00000888 I2C_GetLastEvent
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1824   .text:000008d4 I2C_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1913   .text:0000094c I2C_ClearFlag
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:1959   .text:0000097c I2C_GetITStatus
C:\Users\Alex\AppData\Local\Temp\ccQhRYEG.s:2035   .text:000009e0 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
