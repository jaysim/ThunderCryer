   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_i2c.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	I2C_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	I2C_DeInit:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  26              		.loc 1 133 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  42              		.loc 1 137 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 4FF4A843 		mov	r3, #21504
  45 000e C4F20003 		movt	r3, 16384
  46 0012 9A42     		cmp	r2, r3
  47 0014 0CD1     		bne	.L2
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  48              		.loc 1 140 0
  49 0016 4FF40010 		mov	r0, #2097152
  50 001a 4FF00101 		mov	r1, #1
  51 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  52              		.loc 1 142 0
  53 0022 4FF40010 		mov	r0, #2097152
  54 0026 4FF00001 		mov	r1, #0
  55 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  56 002e 26E0     		b	.L1
  57              	.L2:
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  58              		.loc 1 144 0
  59 0030 7A68     		ldr	r2, [r7, #4]
  60 0032 4FF4B043 		mov	r3, #22528
  61 0036 C4F20003 		movt	r3, 16384
  62 003a 9A42     		cmp	r2, r3
  63 003c 0CD1     		bne	.L4
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  64              		.loc 1 147 0
  65 003e 4FF48000 		mov	r0, #4194304
  66 0042 4FF00101 		mov	r1, #1
  67 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  68              		.loc 1 149 0
  69 004a 4FF48000 		mov	r0, #4194304
  70 004e 4FF00001 		mov	r1, #0
  71 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72 0056 12E0     		b	.L1
  73              	.L4:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  74              		.loc 1 153 0
  75 0058 7A68     		ldr	r2, [r7, #4]
  76 005a 4FF4B843 		mov	r3, #23552
  77 005e C4F20003 		movt	r3, 16384
  78 0062 9A42     		cmp	r2, r3
  79 0064 0BD1     		bne	.L1
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  80              		.loc 1 156 0
  81 0066 4FF40000 		mov	r0, #8388608
  82 006a 4FF00101 		mov	r1, #1
  83 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  84              		.loc 1 158 0
  85 0072 4FF40000 		mov	r0, #8388608
  86 0076 4FF00001 		mov	r1, #0
  87 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  88              	.L1:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  89              		.loc 1 161 0
  90 007e 07F10807 		add	r7, r7, #8
  91 0082 BD46     		mov	sp, r7
  92 0084 80BD     		pop	{r7, pc}
  93              		.cfi_endproc
  94              	.LFE110:
  96 0086 00BF     		.align	2
  97              		.global	I2C_Init
  98              		.thumb
  99              		.thumb_func
 101              	I2C_Init:
 102              	.LFB111:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 103              		.loc 1 176 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 40
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0088 80B5     		push	{r7, lr}
 108              	.LCFI3:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 14, -4
 111              		.cfi_offset 7, -8
 112 008a 8AB0     		sub	sp, sp, #40
 113              	.LCFI4:
 114              		.cfi_def_cfa_offset 48
 115 008c 00AF     		add	r7, sp, #0
 116              	.LCFI5:
 117              		.cfi_def_cfa_register 7
 118 008e 7860     		str	r0, [r7, #4]
 119 0090 3960     		str	r1, [r7, #0]
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 120              		.loc 1 177 0
 121 0092 4FF00003 		mov	r3, #0
 122 0096 FB84     		strh	r3, [r7, #38]	@ movhi
 123 0098 4FF00003 		mov	r3, #0
 124 009c 7B84     		strh	r3, [r7, #34]	@ movhi
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 125              		.loc 1 178 0
 126 009e 4FF00403 		mov	r3, #4
 127 00a2 BB84     		strh	r3, [r7, #36]	@ movhi
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 128              		.loc 1 179 0
 129 00a4 4FF49053 		mov	r3, #4608
 130 00a8 C0F27A03 		movt	r3, 122
 131 00ac FB61     		str	r3, [r7, #28]
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 132              		.loc 1 192 0
 133 00ae 7B68     		ldr	r3, [r7, #4]
 134 00b0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 135 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 136              		.loc 1 194 0
 137 00b4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 138 00b6 23F03F03 		bic	r3, r3, #63
 139 00ba FB84     		strh	r3, [r7, #38]	@ movhi
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 140              		.loc 1 196 0
 141 00bc 07F10C03 		add	r3, r7, #12
 142 00c0 1846     		mov	r0, r3
 143 00c2 FFF7FEFF 		bl	RCC_GetClocksFreq
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 144              		.loc 1 197 0
 145 00c6 7B69     		ldr	r3, [r7, #20]
 146 00c8 FB61     		str	r3, [r7, #28]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 147              		.loc 1 199 0
 148 00ca FA69     		ldr	r2, [r7, #28]
 149 00cc 4DF68363 		movw	r3, #56963
 150 00d0 C4F21B33 		movt	r3, 17179
 151 00d4 A3FB0213 		umull	r1, r3, r3, r2
 152 00d8 4FEA9343 		lsr	r3, r3, #18
 153 00dc 7B84     		strh	r3, [r7, #34]	@ movhi
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 154              		.loc 1 200 0
 155 00de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 156 00e0 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 157 00e2 1343     		orrs	r3, r3, r2
 158 00e4 FB84     		strh	r3, [r7, #38]	@ movhi
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 159              		.loc 1 202 0
 160 00e6 7B68     		ldr	r3, [r7, #4]
 161 00e8 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 162 00ea 9A80     		strh	r2, [r3, #4]	@ movhi
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 163              		.loc 1 206 0
 164 00ec 7B68     		ldr	r3, [r7, #4]
 165 00ee 1B88     		ldrh	r3, [r3, #0]	@ movhi
 166 00f0 9BB2     		uxth	r3, r3
 167 00f2 23F00103 		bic	r3, r3, #1
 168 00f6 9AB2     		uxth	r2, r3
 169 00f8 7B68     		ldr	r3, [r7, #4]
 170 00fa 1A80     		strh	r2, [r3, #0]	@ movhi
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 171              		.loc 1 209 0
 172 00fc 4FF00003 		mov	r3, #0
 173 0100 FB84     		strh	r3, [r7, #38]	@ movhi
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 174              		.loc 1 212 0
 175 0102 3B68     		ldr	r3, [r7, #0]
 176 0104 1A68     		ldr	r2, [r3, #0]
 177 0106 48F2A063 		movw	r3, #34464
 178 010a C0F20103 		movt	r3, 1
 179 010e 9A42     		cmp	r2, r3
 180 0110 18D8     		bhi	.L6
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 181              		.loc 1 215 0
 182 0112 3B68     		ldr	r3, [r7, #0]
 183 0114 1B68     		ldr	r3, [r3, #0]
 184 0116 4FEA4303 		lsl	r3, r3, #1
 185 011a FA69     		ldr	r2, [r7, #28]
 186 011c B2FBF3F3 		udiv	r3, r2, r3
 187 0120 BB84     		strh	r3, [r7, #36]	@ movhi
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 188              		.loc 1 217 0
 189 0122 BB8C     		ldrh	r3, [r7, #36]
 190 0124 032B     		cmp	r3, #3
 191 0126 02D8     		bhi	.L7
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 192              		.loc 1 220 0
 193 0128 4FF00403 		mov	r3, #4
 194 012c BB84     		strh	r3, [r7, #36]	@ movhi
 195              	.L7:
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 196              		.loc 1 223 0
 197 012e FA8C     		ldrh	r2, [r7, #38]	@ movhi
 198 0130 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 199 0132 1343     		orrs	r3, r3, r2
 200 0134 FB84     		strh	r3, [r7, #38]	@ movhi
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 201              		.loc 1 225 0
 202 0136 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 203 0138 03F10103 		add	r3, r3, #1
 204 013c 9AB2     		uxth	r2, r3
 205 013e 7B68     		ldr	r3, [r7, #4]
 206 0140 1A84     		strh	r2, [r3, #32]	@ movhi
 207 0142 4BE0     		b	.L8
 208              	.L6:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 209              		.loc 1 232 0
 210 0144 3B68     		ldr	r3, [r7, #0]
 211 0146 DA88     		ldrh	r2, [r3, #6]
 212 0148 4BF6FF73 		movw	r3, #49151
 213 014c 9A42     		cmp	r2, r3
 214 014e 0AD1     		bne	.L9
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 215              		.loc 1 235 0
 216 0150 3B68     		ldr	r3, [r7, #0]
 217 0152 1A68     		ldr	r2, [r3, #0]
 218 0154 1346     		mov	r3, r2
 219 0156 4FEA4303 		lsl	r3, r3, #1
 220 015a 9B18     		adds	r3, r3, r2
 221 015c FA69     		ldr	r2, [r7, #28]
 222 015e B2FBF3F3 		udiv	r3, r2, r3
 223 0162 BB84     		strh	r3, [r7, #36]	@ movhi
 224 0164 10E0     		b	.L10
 225              	.L9:
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 226              		.loc 1 240 0
 227 0166 3B68     		ldr	r3, [r7, #0]
 228 0168 1A68     		ldr	r2, [r3, #0]
 229 016a 1346     		mov	r3, r2
 230 016c 4FEA8303 		lsl	r3, r3, #2
 231 0170 9B18     		adds	r3, r3, r2
 232 0172 4FEA8302 		lsl	r2, r3, #2
 233 0176 9B18     		adds	r3, r3, r2
 234 0178 FA69     		ldr	r2, [r7, #28]
 235 017a B2FBF3F3 		udiv	r3, r2, r3
 236 017e BB84     		strh	r3, [r7, #36]	@ movhi
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 237              		.loc 1 242 0
 238 0180 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 239 0182 43F48043 		orr	r3, r3, #16384
 240 0186 BB84     		strh	r3, [r7, #36]	@ movhi
 241              	.L10:
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 242              		.loc 1 246 0
 243 0188 BB8C     		ldrh	r3, [r7, #36]
 244 018a 4FEA0353 		lsl	r3, r3, #20
 245 018e 4FEA1353 		lsr	r3, r3, #20
 246 0192 002B     		cmp	r3, #0
 247 0194 03D1     		bne	.L11
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 248              		.loc 1 249 0
 249 0196 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 250 0198 43F00103 		orr	r3, r3, #1
 251 019c BB84     		strh	r3, [r7, #36]	@ movhi
 252              	.L11:
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 253              		.loc 1 252 0
 254 019e BA8C     		ldrh	r2, [r7, #36]	@ movhi
 255 01a0 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 256 01a2 1343     		orrs	r3, r3, r2
 257 01a4 9BB2     		uxth	r3, r3
 258 01a6 6FEA4343 		mvn	r3, r3, lsl #17
 259 01aa 6FEA5343 		mvn	r3, r3, lsr #17
 260 01ae FB84     		strh	r3, [r7, #38]	@ movhi
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 261              		.loc 1 254 0
 262 01b0 7B8C     		ldrh	r3, [r7, #34]
 263 01b2 4FF49672 		mov	r2, #300
 264 01b6 02FB03F2 		mul	r2, r2, r3
 265 01ba 44F6D353 		movw	r3, #19923
 266 01be C1F26203 		movt	r3, 4194
 267 01c2 83FB0213 		smull	r1, r3, r3, r2
 268 01c6 4FEAA311 		asr	r1, r3, #6
 269 01ca 4FEAE273 		asr	r3, r2, #31
 270 01ce CB1A     		subs	r3, r1, r3
 271 01d0 9BB2     		uxth	r3, r3
 272 01d2 03F10103 		add	r3, r3, #1
 273 01d6 9AB2     		uxth	r2, r3
 274 01d8 7B68     		ldr	r3, [r7, #4]
 275 01da 1A84     		strh	r2, [r3, #32]	@ movhi
 276              	.L8:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 277              		.loc 1 258 0
 278 01dc 7B68     		ldr	r3, [r7, #4]
 279 01de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 280 01e0 9A83     		strh	r2, [r3, #28]	@ movhi
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 281              		.loc 1 260 0
 282 01e2 7B68     		ldr	r3, [r7, #4]
 283 01e4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 284 01e6 9BB2     		uxth	r3, r3
 285 01e8 43F00103 		orr	r3, r3, #1
 286 01ec 9AB2     		uxth	r2, r3
 287 01ee 7B68     		ldr	r3, [r7, #4]
 288 01f0 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 289              		.loc 1 264 0
 290 01f2 7B68     		ldr	r3, [r7, #4]
 291 01f4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 292 01f6 FB84     		strh	r3, [r7, #38]	@ movhi
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 293              		.loc 1 266 0
 294 01f8 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 295 01fa 23F48063 		bic	r3, r3, #1024
 296 01fe 23F00A03 		bic	r3, r3, #10
 297 0202 FB84     		strh	r3, [r7, #38]	@ movhi
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 298              		.loc 1 270 0
 299 0204 3B68     		ldr	r3, [r7, #0]
 300 0206 9A88     		ldrh	r2, [r3, #4]
 301 0208 3B68     		ldr	r3, [r7, #0]
 302 020a 5B89     		ldrh	r3, [r3, #10]
 303 020c 1343     		orrs	r3, r3, r2
 304 020e 9AB2     		uxth	r2, r3
 305 0210 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 306 0212 1343     		orrs	r3, r3, r2
 307 0214 FB84     		strh	r3, [r7, #38]	@ movhi
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 308              		.loc 1 272 0
 309 0216 7B68     		ldr	r3, [r7, #4]
 310 0218 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 311 021a 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 312              		.loc 1 276 0
 313 021c 3B68     		ldr	r3, [r7, #0]
 314 021e 9A89     		ldrh	r2, [r3, #12]
 315 0220 3B68     		ldr	r3, [r7, #0]
 316 0222 1B89     		ldrh	r3, [r3, #8]
 317 0224 1343     		orrs	r3, r3, r2
 318 0226 9AB2     		uxth	r2, r3
 319 0228 7B68     		ldr	r3, [r7, #4]
 320 022a 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 321              		.loc 1 277 0
 322 022c 07F12807 		add	r7, r7, #40
 323 0230 BD46     		mov	sp, r7
 324 0232 80BD     		pop	{r7, pc}
 325              		.cfi_endproc
 326              	.LFE111:
 328              		.align	2
 329              		.global	I2C_StructInit
 330              		.thumb
 331              		.thumb_func
 333              	I2C_StructInit:
 334              	.LFB112:
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 335              		.loc 1 285 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 8
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340 0234 80B4     		push	{r7}
 341              	.LCFI6:
 342              		.cfi_def_cfa_offset 4
 343              		.cfi_offset 7, -4
 344 0236 83B0     		sub	sp, sp, #12
 345              	.LCFI7:
 346              		.cfi_def_cfa_offset 16
 347 0238 00AF     		add	r7, sp, #0
 348              	.LCFI8:
 349              		.cfi_def_cfa_register 7
 350 023a 7860     		str	r0, [r7, #4]
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 351              		.loc 1 288 0
 352 023c 7B68     		ldr	r3, [r7, #4]
 353 023e 41F28832 		movw	r2, #5000
 354 0242 1A60     		str	r2, [r3, #0]
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 355              		.loc 1 290 0
 356 0244 7B68     		ldr	r3, [r7, #4]
 357 0246 4FF00002 		mov	r2, #0
 358 024a 9A80     		strh	r2, [r3, #4]	@ movhi
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 359              		.loc 1 292 0
 360 024c 7B68     		ldr	r3, [r7, #4]
 361 024e 4BF6FF72 		movw	r2, #49151
 362 0252 DA80     		strh	r2, [r3, #6]	@ movhi
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 363              		.loc 1 294 0
 364 0254 7B68     		ldr	r3, [r7, #4]
 365 0256 4FF00002 		mov	r2, #0
 366 025a 1A81     		strh	r2, [r3, #8]	@ movhi
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 367              		.loc 1 296 0
 368 025c 7B68     		ldr	r3, [r7, #4]
 369 025e 4FF00002 		mov	r2, #0
 370 0262 5A81     		strh	r2, [r3, #10]	@ movhi
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 371              		.loc 1 298 0
 372 0264 7B68     		ldr	r3, [r7, #4]
 373 0266 4FF48042 		mov	r2, #16384
 374 026a 9A81     		strh	r2, [r3, #12]	@ movhi
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 375              		.loc 1 299 0
 376 026c 07F10C07 		add	r7, r7, #12
 377 0270 BD46     		mov	sp, r7
 378 0272 80BC     		pop	{r7}
 379 0274 7047     		bx	lr
 380              		.cfi_endproc
 381              	.LFE112:
 383 0276 00BF     		.align	2
 384              		.global	I2C_Cmd
 385              		.thumb
 386              		.thumb_func
 388              	I2C_Cmd:
 389              	.LFB113:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 390              		.loc 1 309 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 8
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 395 0278 80B4     		push	{r7}
 396              	.LCFI9:
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 027a 83B0     		sub	sp, sp, #12
 400              	.LCFI10:
 401              		.cfi_def_cfa_offset 16
 402 027c 00AF     		add	r7, sp, #0
 403              	.LCFI11:
 404              		.cfi_def_cfa_register 7
 405 027e 7860     		str	r0, [r7, #4]
 406 0280 0B46     		mov	r3, r1
 407 0282 FB70     		strb	r3, [r7, #3]
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 408              		.loc 1 313 0
 409 0284 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 410 0286 002B     		cmp	r3, #0
 411 0288 08D0     		beq	.L14
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 412              		.loc 1 316 0
 413 028a 7B68     		ldr	r3, [r7, #4]
 414 028c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 415 028e 9BB2     		uxth	r3, r3
 416 0290 43F00103 		orr	r3, r3, #1
 417 0294 9AB2     		uxth	r2, r3
 418 0296 7B68     		ldr	r3, [r7, #4]
 419 0298 1A80     		strh	r2, [r3, #0]	@ movhi
 420 029a 07E0     		b	.L13
 421              	.L14:
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 422              		.loc 1 321 0
 423 029c 7B68     		ldr	r3, [r7, #4]
 424 029e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 425 02a0 9BB2     		uxth	r3, r3
 426 02a2 23F00103 		bic	r3, r3, #1
 427 02a6 9AB2     		uxth	r2, r3
 428 02a8 7B68     		ldr	r3, [r7, #4]
 429 02aa 1A80     		strh	r2, [r3, #0]	@ movhi
 430              	.L13:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 431              		.loc 1 323 0
 432 02ac 07F10C07 		add	r7, r7, #12
 433 02b0 BD46     		mov	sp, r7
 434 02b2 80BC     		pop	{r7}
 435 02b4 7047     		bx	lr
 436              		.cfi_endproc
 437              	.LFE113:
 439 02b6 00BF     		.align	2
 440              		.global	I2C_GenerateSTART
 441              		.thumb
 442              		.thumb_func
 444              	I2C_GenerateSTART:
 445              	.LFB114:
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 446              		.loc 1 333 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 8
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451 02b8 80B4     		push	{r7}
 452              	.LCFI12:
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 7, -4
 455 02ba 83B0     		sub	sp, sp, #12
 456              	.LCFI13:
 457              		.cfi_def_cfa_offset 16
 458 02bc 00AF     		add	r7, sp, #0
 459              	.LCFI14:
 460              		.cfi_def_cfa_register 7
 461 02be 7860     		str	r0, [r7, #4]
 462 02c0 0B46     		mov	r3, r1
 463 02c2 FB70     		strb	r3, [r7, #3]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 464              		.loc 1 337 0
 465 02c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 466 02c6 002B     		cmp	r3, #0
 467 02c8 08D0     		beq	.L17
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 468              		.loc 1 340 0
 469 02ca 7B68     		ldr	r3, [r7, #4]
 470 02cc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 471 02ce 9BB2     		uxth	r3, r3
 472 02d0 43F48073 		orr	r3, r3, #256
 473 02d4 9AB2     		uxth	r2, r3
 474 02d6 7B68     		ldr	r3, [r7, #4]
 475 02d8 1A80     		strh	r2, [r3, #0]	@ movhi
 476 02da 07E0     		b	.L16
 477              	.L17:
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 478              		.loc 1 345 0
 479 02dc 7B68     		ldr	r3, [r7, #4]
 480 02de 1B88     		ldrh	r3, [r3, #0]	@ movhi
 481 02e0 9BB2     		uxth	r3, r3
 482 02e2 23F48073 		bic	r3, r3, #256
 483 02e6 9AB2     		uxth	r2, r3
 484 02e8 7B68     		ldr	r3, [r7, #4]
 485 02ea 1A80     		strh	r2, [r3, #0]	@ movhi
 486              	.L16:
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 487              		.loc 1 347 0
 488 02ec 07F10C07 		add	r7, r7, #12
 489 02f0 BD46     		mov	sp, r7
 490 02f2 80BC     		pop	{r7}
 491 02f4 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE114:
 495 02f6 00BF     		.align	2
 496              		.global	I2C_GenerateSTOP
 497              		.thumb
 498              		.thumb_func
 500              	I2C_GenerateSTOP:
 501              	.LFB115:
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 502              		.loc 1 357 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507 02f8 80B4     		push	{r7}
 508              	.LCFI15:
 509              		.cfi_def_cfa_offset 4
 510              		.cfi_offset 7, -4
 511 02fa 83B0     		sub	sp, sp, #12
 512              	.LCFI16:
 513              		.cfi_def_cfa_offset 16
 514 02fc 00AF     		add	r7, sp, #0
 515              	.LCFI17:
 516              		.cfi_def_cfa_register 7
 517 02fe 7860     		str	r0, [r7, #4]
 518 0300 0B46     		mov	r3, r1
 519 0302 FB70     		strb	r3, [r7, #3]
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 520              		.loc 1 361 0
 521 0304 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 522 0306 002B     		cmp	r3, #0
 523 0308 08D0     		beq	.L20
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 524              		.loc 1 364 0
 525 030a 7B68     		ldr	r3, [r7, #4]
 526 030c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 527 030e 9BB2     		uxth	r3, r3
 528 0310 43F40073 		orr	r3, r3, #512
 529 0314 9AB2     		uxth	r2, r3
 530 0316 7B68     		ldr	r3, [r7, #4]
 531 0318 1A80     		strh	r2, [r3, #0]	@ movhi
 532 031a 07E0     		b	.L19
 533              	.L20:
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 534              		.loc 1 369 0
 535 031c 7B68     		ldr	r3, [r7, #4]
 536 031e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 537 0320 9BB2     		uxth	r3, r3
 538 0322 23F40073 		bic	r3, r3, #512
 539 0326 9AB2     		uxth	r2, r3
 540 0328 7B68     		ldr	r3, [r7, #4]
 541 032a 1A80     		strh	r2, [r3, #0]	@ movhi
 542              	.L19:
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 543              		.loc 1 371 0
 544 032c 07F10C07 		add	r7, r7, #12
 545 0330 BD46     		mov	sp, r7
 546 0332 80BC     		pop	{r7}
 547 0334 7047     		bx	lr
 548              		.cfi_endproc
 549              	.LFE115:
 551 0336 00BF     		.align	2
 552              		.global	I2C_Send7bitAddress
 553              		.thumb
 554              		.thumb_func
 556              	I2C_Send7bitAddress:
 557              	.LFB116:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 558              		.loc 1 385 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0338 80B4     		push	{r7}
 564              	.LCFI18:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 033a 83B0     		sub	sp, sp, #12
 568              	.LCFI19:
 569              		.cfi_def_cfa_offset 16
 570 033c 00AF     		add	r7, sp, #0
 571              	.LCFI20:
 572              		.cfi_def_cfa_register 7
 573 033e 7860     		str	r0, [r7, #4]
 574 0340 1346     		mov	r3, r2
 575 0342 0A46     		mov	r2, r1
 576 0344 FA70     		strb	r2, [r7, #3]
 577 0346 BB70     		strb	r3, [r7, #2]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 578              		.loc 1 390 0
 579 0348 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 580 034a 002B     		cmp	r3, #0
 581 034c 04D0     		beq	.L23
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 582              		.loc 1 393 0
 583 034e FB78     		ldrb	r3, [r7, #3]
 584 0350 43F00103 		orr	r3, r3, #1
 585 0354 FB70     		strb	r3, [r7, #3]
 586 0356 03E0     		b	.L24
 587              	.L23:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 588              		.loc 1 398 0
 589 0358 FB78     		ldrb	r3, [r7, #3]
 590 035a 23F00103 		bic	r3, r3, #1
 591 035e FB70     		strb	r3, [r7, #3]
 592              	.L24:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 593              		.loc 1 401 0
 594 0360 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 595 0362 9AB2     		uxth	r2, r3
 596 0364 7B68     		ldr	r3, [r7, #4]
 597 0366 1A82     		strh	r2, [r3, #16]	@ movhi
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 598              		.loc 1 402 0
 599 0368 07F10C07 		add	r7, r7, #12
 600 036c BD46     		mov	sp, r7
 601 036e 80BC     		pop	{r7}
 602 0370 7047     		bx	lr
 603              		.cfi_endproc
 604              	.LFE116:
 606 0372 00BF     		.align	2
 607              		.global	I2C_AcknowledgeConfig
 608              		.thumb
 609              		.thumb_func
 611              	I2C_AcknowledgeConfig:
 612              	.LFB117:
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 613              		.loc 1 412 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 8
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618 0374 80B4     		push	{r7}
 619              	.LCFI21:
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 7, -4
 622 0376 83B0     		sub	sp, sp, #12
 623              	.LCFI22:
 624              		.cfi_def_cfa_offset 16
 625 0378 00AF     		add	r7, sp, #0
 626              	.LCFI23:
 627              		.cfi_def_cfa_register 7
 628 037a 7860     		str	r0, [r7, #4]
 629 037c 0B46     		mov	r3, r1
 630 037e FB70     		strb	r3, [r7, #3]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 631              		.loc 1 416 0
 632 0380 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 633 0382 002B     		cmp	r3, #0
 634 0384 08D0     		beq	.L26
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 635              		.loc 1 419 0
 636 0386 7B68     		ldr	r3, [r7, #4]
 637 0388 1B88     		ldrh	r3, [r3, #0]	@ movhi
 638 038a 9BB2     		uxth	r3, r3
 639 038c 43F48063 		orr	r3, r3, #1024
 640 0390 9AB2     		uxth	r2, r3
 641 0392 7B68     		ldr	r3, [r7, #4]
 642 0394 1A80     		strh	r2, [r3, #0]	@ movhi
 643 0396 07E0     		b	.L25
 644              	.L26:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 645              		.loc 1 424 0
 646 0398 7B68     		ldr	r3, [r7, #4]
 647 039a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 648 039c 9BB2     		uxth	r3, r3
 649 039e 23F48063 		bic	r3, r3, #1024
 650 03a2 9AB2     		uxth	r2, r3
 651 03a4 7B68     		ldr	r3, [r7, #4]
 652 03a6 1A80     		strh	r2, [r3, #0]	@ movhi
 653              	.L25:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 654              		.loc 1 426 0
 655 03a8 07F10C07 		add	r7, r7, #12
 656 03ac BD46     		mov	sp, r7
 657 03ae 80BC     		pop	{r7}
 658 03b0 7047     		bx	lr
 659              		.cfi_endproc
 660              	.LFE117:
 662 03b2 00BF     		.align	2
 663              		.global	I2C_OwnAddress2Config
 664              		.thumb
 665              		.thumb_func
 667              	I2C_OwnAddress2Config:
 668              	.LFB118:
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 669              		.loc 1 435 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 16
 672              		@ frame_needed = 1, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674 03b4 80B4     		push	{r7}
 675              	.LCFI24:
 676              		.cfi_def_cfa_offset 4
 677              		.cfi_offset 7, -4
 678 03b6 85B0     		sub	sp, sp, #20
 679              	.LCFI25:
 680              		.cfi_def_cfa_offset 24
 681 03b8 00AF     		add	r7, sp, #0
 682              	.LCFI26:
 683              		.cfi_def_cfa_register 7
 684 03ba 7860     		str	r0, [r7, #4]
 685 03bc 0B46     		mov	r3, r1
 686 03be FB70     		strb	r3, [r7, #3]
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 687              		.loc 1 436 0
 688 03c0 4FF00003 		mov	r3, #0
 689 03c4 FB81     		strh	r3, [r7, #14]	@ movhi
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 690              		.loc 1 442 0
 691 03c6 7B68     		ldr	r3, [r7, #4]
 692 03c8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 693 03ca FB81     		strh	r3, [r7, #14]	@ movhi
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 694              		.loc 1 445 0
 695 03cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 696 03ce 23F0FE03 		bic	r3, r3, #254
 697 03d2 FB81     		strh	r3, [r7, #14]	@ movhi
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 698              		.loc 1 448 0
 699 03d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 700 03d6 9BB2     		uxth	r3, r3
 701 03d8 03F0FE03 		and	r3, r3, #254
 702 03dc 9AB2     		uxth	r2, r3
 703 03de FB89     		ldrh	r3, [r7, #14]
 704 03e0 1343     		orrs	r3, r3, r2
 705 03e2 9BB2     		uxth	r3, r3
 706 03e4 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 707              		.loc 1 451 0
 708 03e6 7B68     		ldr	r3, [r7, #4]
 709 03e8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 710 03ea 9A81     		strh	r2, [r3, #12]	@ movhi
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 711              		.loc 1 452 0
 712 03ec 07F11407 		add	r7, r7, #20
 713 03f0 BD46     		mov	sp, r7
 714 03f2 80BC     		pop	{r7}
 715 03f4 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE118:
 719 03f6 00BF     		.align	2
 720              		.global	I2C_DualAddressCmd
 721              		.thumb
 722              		.thumb_func
 724              	I2C_DualAddressCmd:
 725              	.LFB119:
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 726              		.loc 1 462 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 8
 729              		@ frame_needed = 1, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731 03f8 80B4     		push	{r7}
 732              	.LCFI27:
 733              		.cfi_def_cfa_offset 4
 734              		.cfi_offset 7, -4
 735 03fa 83B0     		sub	sp, sp, #12
 736              	.LCFI28:
 737              		.cfi_def_cfa_offset 16
 738 03fc 00AF     		add	r7, sp, #0
 739              	.LCFI29:
 740              		.cfi_def_cfa_register 7
 741 03fe 7860     		str	r0, [r7, #4]
 742 0400 0B46     		mov	r3, r1
 743 0402 FB70     		strb	r3, [r7, #3]
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 744              		.loc 1 466 0
 745 0404 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 746 0406 002B     		cmp	r3, #0
 747 0408 08D0     		beq	.L30
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 748              		.loc 1 469 0
 749 040a 7B68     		ldr	r3, [r7, #4]
 750 040c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 751 040e 9BB2     		uxth	r3, r3
 752 0410 43F00103 		orr	r3, r3, #1
 753 0414 9AB2     		uxth	r2, r3
 754 0416 7B68     		ldr	r3, [r7, #4]
 755 0418 9A81     		strh	r2, [r3, #12]	@ movhi
 756 041a 07E0     		b	.L29
 757              	.L30:
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 758              		.loc 1 474 0
 759 041c 7B68     		ldr	r3, [r7, #4]
 760 041e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 761 0420 9BB2     		uxth	r3, r3
 762 0422 23F00103 		bic	r3, r3, #1
 763 0426 9AB2     		uxth	r2, r3
 764 0428 7B68     		ldr	r3, [r7, #4]
 765 042a 9A81     		strh	r2, [r3, #12]	@ movhi
 766              	.L29:
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 767              		.loc 1 476 0
 768 042c 07F10C07 		add	r7, r7, #12
 769 0430 BD46     		mov	sp, r7
 770 0432 80BC     		pop	{r7}
 771 0434 7047     		bx	lr
 772              		.cfi_endproc
 773              	.LFE119:
 775 0436 00BF     		.align	2
 776              		.global	I2C_GeneralCallCmd
 777              		.thumb
 778              		.thumb_func
 780              	I2C_GeneralCallCmd:
 781              	.LFB120:
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 782              		.loc 1 486 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 8
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 0438 80B4     		push	{r7}
 788              	.LCFI30:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 043a 83B0     		sub	sp, sp, #12
 792              	.LCFI31:
 793              		.cfi_def_cfa_offset 16
 794 043c 00AF     		add	r7, sp, #0
 795              	.LCFI32:
 796              		.cfi_def_cfa_register 7
 797 043e 7860     		str	r0, [r7, #4]
 798 0440 0B46     		mov	r3, r1
 799 0442 FB70     		strb	r3, [r7, #3]
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 800              		.loc 1 490 0
 801 0444 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 802 0446 002B     		cmp	r3, #0
 803 0448 08D0     		beq	.L33
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 804              		.loc 1 493 0
 805 044a 7B68     		ldr	r3, [r7, #4]
 806 044c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 807 044e 9BB2     		uxth	r3, r3
 808 0450 43F04003 		orr	r3, r3, #64
 809 0454 9AB2     		uxth	r2, r3
 810 0456 7B68     		ldr	r3, [r7, #4]
 811 0458 1A80     		strh	r2, [r3, #0]	@ movhi
 812 045a 07E0     		b	.L32
 813              	.L33:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 814              		.loc 1 498 0
 815 045c 7B68     		ldr	r3, [r7, #4]
 816 045e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 817 0460 9BB2     		uxth	r3, r3
 818 0462 23F04003 		bic	r3, r3, #64
 819 0466 9AB2     		uxth	r2, r3
 820 0468 7B68     		ldr	r3, [r7, #4]
 821 046a 1A80     		strh	r2, [r3, #0]	@ movhi
 822              	.L32:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 823              		.loc 1 500 0
 824 046c 07F10C07 		add	r7, r7, #12
 825 0470 BD46     		mov	sp, r7
 826 0472 80BC     		pop	{r7}
 827 0474 7047     		bx	lr
 828              		.cfi_endproc
 829              	.LFE120:
 831 0476 00BF     		.align	2
 832              		.global	I2C_SoftwareResetCmd
 833              		.thumb
 834              		.thumb_func
 836              	I2C_SoftwareResetCmd:
 837              	.LFB121:
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 838              		.loc 1 512 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 8
 841              		@ frame_needed = 1, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 843 0478 80B4     		push	{r7}
 844              	.LCFI33:
 845              		.cfi_def_cfa_offset 4
 846              		.cfi_offset 7, -4
 847 047a 83B0     		sub	sp, sp, #12
 848              	.LCFI34:
 849              		.cfi_def_cfa_offset 16
 850 047c 00AF     		add	r7, sp, #0
 851              	.LCFI35:
 852              		.cfi_def_cfa_register 7
 853 047e 7860     		str	r0, [r7, #4]
 854 0480 0B46     		mov	r3, r1
 855 0482 FB70     		strb	r3, [r7, #3]
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 856              		.loc 1 516 0
 857 0484 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 858 0486 002B     		cmp	r3, #0
 859 0488 0AD0     		beq	.L36
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 860              		.loc 1 519 0
 861 048a 7B68     		ldr	r3, [r7, #4]
 862 048c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 863 048e 9BB2     		uxth	r3, r3
 864 0490 6FEA4343 		mvn	r3, r3, lsl #17
 865 0494 6FEA5343 		mvn	r3, r3, lsr #17
 866 0498 9AB2     		uxth	r2, r3
 867 049a 7B68     		ldr	r3, [r7, #4]
 868 049c 1A80     		strh	r2, [r3, #0]	@ movhi
 869 049e 09E0     		b	.L35
 870              	.L36:
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 871              		.loc 1 524 0
 872 04a0 7B68     		ldr	r3, [r7, #4]
 873 04a2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 874 04a4 9BB2     		uxth	r3, r3
 875 04a6 4FEA4343 		lsl	r3, r3, #17
 876 04aa 4FEA5343 		lsr	r3, r3, #17
 877 04ae 9AB2     		uxth	r2, r3
 878 04b0 7B68     		ldr	r3, [r7, #4]
 879 04b2 1A80     		strh	r2, [r3, #0]	@ movhi
 880              	.L35:
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 881              		.loc 1 526 0
 882 04b4 07F10C07 		add	r7, r7, #12
 883 04b8 BD46     		mov	sp, r7
 884 04ba 80BC     		pop	{r7}
 885 04bc 7047     		bx	lr
 886              		.cfi_endproc
 887              	.LFE121:
 889 04be 00BF     		.align	2
 890              		.global	I2C_StretchClockCmd
 891              		.thumb
 892              		.thumb_func
 894              	I2C_StretchClockCmd:
 895              	.LFB122:
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 896              		.loc 1 536 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 8
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901 04c0 80B4     		push	{r7}
 902              	.LCFI36:
 903              		.cfi_def_cfa_offset 4
 904              		.cfi_offset 7, -4
 905 04c2 83B0     		sub	sp, sp, #12
 906              	.LCFI37:
 907              		.cfi_def_cfa_offset 16
 908 04c4 00AF     		add	r7, sp, #0
 909              	.LCFI38:
 910              		.cfi_def_cfa_register 7
 911 04c6 7860     		str	r0, [r7, #4]
 912 04c8 0B46     		mov	r3, r1
 913 04ca FB70     		strb	r3, [r7, #3]
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 914              		.loc 1 540 0
 915 04cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 916 04ce 002B     		cmp	r3, #0
 917 04d0 08D1     		bne	.L39
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 918              		.loc 1 543 0
 919 04d2 7B68     		ldr	r3, [r7, #4]
 920 04d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 921 04d6 9BB2     		uxth	r3, r3
 922 04d8 43F08003 		orr	r3, r3, #128
 923 04dc 9AB2     		uxth	r2, r3
 924 04de 7B68     		ldr	r3, [r7, #4]
 925 04e0 1A80     		strh	r2, [r3, #0]	@ movhi
 926 04e2 07E0     		b	.L38
 927              	.L39:
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 928              		.loc 1 548 0
 929 04e4 7B68     		ldr	r3, [r7, #4]
 930 04e6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 931 04e8 9BB2     		uxth	r3, r3
 932 04ea 23F08003 		bic	r3, r3, #128
 933 04ee 9AB2     		uxth	r2, r3
 934 04f0 7B68     		ldr	r3, [r7, #4]
 935 04f2 1A80     		strh	r2, [r3, #0]	@ movhi
 936              	.L38:
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 937              		.loc 1 550 0
 938 04f4 07F10C07 		add	r7, r7, #12
 939 04f8 BD46     		mov	sp, r7
 940 04fa 80BC     		pop	{r7}
 941 04fc 7047     		bx	lr
 942              		.cfi_endproc
 943              	.LFE122:
 945 04fe 00BF     		.align	2
 946              		.global	I2C_FastModeDutyCycleConfig
 947              		.thumb
 948              		.thumb_func
 950              	I2C_FastModeDutyCycleConfig:
 951              	.LFB123:
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 952              		.loc 1 562 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 8
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957 0500 80B4     		push	{r7}
 958              	.LCFI39:
 959              		.cfi_def_cfa_offset 4
 960              		.cfi_offset 7, -4
 961 0502 83B0     		sub	sp, sp, #12
 962              	.LCFI40:
 963              		.cfi_def_cfa_offset 16
 964 0504 00AF     		add	r7, sp, #0
 965              	.LCFI41:
 966              		.cfi_def_cfa_register 7
 967 0506 7860     		str	r0, [r7, #4]
 968 0508 0B46     		mov	r3, r1
 969 050a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 970              		.loc 1 566 0
 971 050c 7B88     		ldrh	r3, [r7, #2]
 972 050e B3F5804F 		cmp	r3, #16384
 973 0512 08D0     		beq	.L42
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 974              		.loc 1 569 0
 975 0514 7B68     		ldr	r3, [r7, #4]
 976 0516 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 977 0518 9BB2     		uxth	r3, r3
 978 051a 23F48043 		bic	r3, r3, #16384
 979 051e 9AB2     		uxth	r2, r3
 980 0520 7B68     		ldr	r3, [r7, #4]
 981 0522 9A83     		strh	r2, [r3, #28]	@ movhi
 982 0524 07E0     		b	.L41
 983              	.L42:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 984              		.loc 1 574 0
 985 0526 7B68     		ldr	r3, [r7, #4]
 986 0528 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 987 052a 9BB2     		uxth	r3, r3
 988 052c 43F48043 		orr	r3, r3, #16384
 989 0530 9AB2     		uxth	r2, r3
 990 0532 7B68     		ldr	r3, [r7, #4]
 991 0534 9A83     		strh	r2, [r3, #28]	@ movhi
 992              	.L41:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 993              		.loc 1 576 0
 994 0536 07F10C07 		add	r7, r7, #12
 995 053a BD46     		mov	sp, r7
 996 053c 80BC     		pop	{r7}
 997 053e 7047     		bx	lr
 998              		.cfi_endproc
 999              	.LFE123:
 1001              		.align	2
 1002              		.global	I2C_NACKPositionConfig
 1003              		.thumb
 1004              		.thumb_func
 1006              	I2C_NACKPositionConfig:
 1007              	.LFB124:
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1008              		.loc 1 600 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 8
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 1013 0540 80B4     		push	{r7}
 1014              	.LCFI42:
 1015              		.cfi_def_cfa_offset 4
 1016              		.cfi_offset 7, -4
 1017 0542 83B0     		sub	sp, sp, #12
 1018              	.LCFI43:
 1019              		.cfi_def_cfa_offset 16
 1020 0544 00AF     		add	r7, sp, #0
 1021              	.LCFI44:
 1022              		.cfi_def_cfa_register 7
 1023 0546 7860     		str	r0, [r7, #4]
 1024 0548 0B46     		mov	r3, r1
 1025 054a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1026              		.loc 1 606 0
 1027 054c 7B88     		ldrh	r3, [r7, #2]
 1028 054e B3F5006F 		cmp	r3, #2048
 1029 0552 08D1     		bne	.L45
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1030              		.loc 1 609 0
 1031 0554 7B68     		ldr	r3, [r7, #4]
 1032 0556 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1033 0558 9BB2     		uxth	r3, r3
 1034 055a 43F40063 		orr	r3, r3, #2048
 1035 055e 9AB2     		uxth	r2, r3
 1036 0560 7B68     		ldr	r3, [r7, #4]
 1037 0562 1A80     		strh	r2, [r3, #0]	@ movhi
 1038 0564 07E0     		b	.L44
 1039              	.L45:
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 1040              		.loc 1 614 0
 1041 0566 7B68     		ldr	r3, [r7, #4]
 1042 0568 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1043 056a 9BB2     		uxth	r3, r3
 1044 056c 23F40063 		bic	r3, r3, #2048
 1045 0570 9AB2     		uxth	r2, r3
 1046 0572 7B68     		ldr	r3, [r7, #4]
 1047 0574 1A80     		strh	r2, [r3, #0]	@ movhi
 1048              	.L44:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1049              		.loc 1 616 0
 1050 0576 07F10C07 		add	r7, r7, #12
 1051 057a BD46     		mov	sp, r7
 1052 057c 80BC     		pop	{r7}
 1053 057e 7047     		bx	lr
 1054              		.cfi_endproc
 1055              	.LFE124:
 1057              		.align	2
 1058              		.global	I2C_SMBusAlertConfig
 1059              		.thumb
 1060              		.thumb_func
 1062              	I2C_SMBusAlertConfig:
 1063              	.LFB125:
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1064              		.loc 1 628 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 8
 1067              		@ frame_needed = 1, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069 0580 80B4     		push	{r7}
 1070              	.LCFI45:
 1071              		.cfi_def_cfa_offset 4
 1072              		.cfi_offset 7, -4
 1073 0582 83B0     		sub	sp, sp, #12
 1074              	.LCFI46:
 1075              		.cfi_def_cfa_offset 16
 1076 0584 00AF     		add	r7, sp, #0
 1077              	.LCFI47:
 1078              		.cfi_def_cfa_register 7
 1079 0586 7860     		str	r0, [r7, #4]
 1080 0588 0B46     		mov	r3, r1
 1081 058a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1082              		.loc 1 632 0
 1083 058c 7B88     		ldrh	r3, [r7, #2]
 1084 058e B3F5005F 		cmp	r3, #8192
 1085 0592 08D1     		bne	.L48
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1086              		.loc 1 635 0
 1087 0594 7B68     		ldr	r3, [r7, #4]
 1088 0596 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1089 0598 9BB2     		uxth	r3, r3
 1090 059a 43F40053 		orr	r3, r3, #8192
 1091 059e 9AB2     		uxth	r2, r3
 1092 05a0 7B68     		ldr	r3, [r7, #4]
 1093 05a2 1A80     		strh	r2, [r3, #0]	@ movhi
 1094 05a4 07E0     		b	.L47
 1095              	.L48:
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 1096              		.loc 1 640 0
 1097 05a6 7B68     		ldr	r3, [r7, #4]
 1098 05a8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1099 05aa 9BB2     		uxth	r3, r3
 1100 05ac 23F40053 		bic	r3, r3, #8192
 1101 05b0 9AB2     		uxth	r2, r3
 1102 05b2 7B68     		ldr	r3, [r7, #4]
 1103 05b4 1A80     		strh	r2, [r3, #0]	@ movhi
 1104              	.L47:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1105              		.loc 1 642 0
 1106 05b6 07F10C07 		add	r7, r7, #12
 1107 05ba BD46     		mov	sp, r7
 1108 05bc 80BC     		pop	{r7}
 1109 05be 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE125:
 1113              		.align	2
 1114              		.global	I2C_ARPCmd
 1115              		.thumb
 1116              		.thumb_func
 1118              	I2C_ARPCmd:
 1119              	.LFB126:
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1120              		.loc 1 652 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 8
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125 05c0 80B4     		push	{r7}
 1126              	.LCFI48:
 1127              		.cfi_def_cfa_offset 4
 1128              		.cfi_offset 7, -4
 1129 05c2 83B0     		sub	sp, sp, #12
 1130              	.LCFI49:
 1131              		.cfi_def_cfa_offset 16
 1132 05c4 00AF     		add	r7, sp, #0
 1133              	.LCFI50:
 1134              		.cfi_def_cfa_register 7
 1135 05c6 7860     		str	r0, [r7, #4]
 1136 05c8 0B46     		mov	r3, r1
 1137 05ca FB70     		strb	r3, [r7, #3]
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1138              		.loc 1 656 0
 1139 05cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1140 05ce 002B     		cmp	r3, #0
 1141 05d0 08D0     		beq	.L51
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1142              		.loc 1 659 0
 1143 05d2 7B68     		ldr	r3, [r7, #4]
 1144 05d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1145 05d6 9BB2     		uxth	r3, r3
 1146 05d8 43F01003 		orr	r3, r3, #16
 1147 05dc 9AB2     		uxth	r2, r3
 1148 05de 7B68     		ldr	r3, [r7, #4]
 1149 05e0 1A80     		strh	r2, [r3, #0]	@ movhi
 1150 05e2 07E0     		b	.L50
 1151              	.L51:
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 1152              		.loc 1 664 0
 1153 05e4 7B68     		ldr	r3, [r7, #4]
 1154 05e6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1155 05e8 9BB2     		uxth	r3, r3
 1156 05ea 23F01003 		bic	r3, r3, #16
 1157 05ee 9AB2     		uxth	r2, r3
 1158 05f0 7B68     		ldr	r3, [r7, #4]
 1159 05f2 1A80     		strh	r2, [r3, #0]	@ movhi
 1160              	.L50:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1161              		.loc 1 666 0
 1162 05f4 07F10C07 		add	r7, r7, #12
 1163 05f8 BD46     		mov	sp, r7
 1164 05fa 80BC     		pop	{r7}
 1165 05fc 7047     		bx	lr
 1166              		.cfi_endproc
 1167              	.LFE126:
 1169 05fe 00BF     		.align	2
 1170              		.global	I2C_SendData
 1171              		.thumb
 1172              		.thumb_func
 1174              	I2C_SendData:
 1175              	.LFB127:
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1176              		.loc 1 690 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 8
 1179              		@ frame_needed = 1, uses_anonymous_args = 0
 1180              		@ link register save eliminated.
 1181 0600 80B4     		push	{r7}
 1182              	.LCFI51:
 1183              		.cfi_def_cfa_offset 4
 1184              		.cfi_offset 7, -4
 1185 0602 83B0     		sub	sp, sp, #12
 1186              	.LCFI52:
 1187              		.cfi_def_cfa_offset 16
 1188 0604 00AF     		add	r7, sp, #0
 1189              	.LCFI53:
 1190              		.cfi_def_cfa_register 7
 1191 0606 7860     		str	r0, [r7, #4]
 1192 0608 0B46     		mov	r3, r1
 1193 060a FB70     		strb	r3, [r7, #3]
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 1194              		.loc 1 694 0
 1195 060c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1196 060e 9AB2     		uxth	r2, r3
 1197 0610 7B68     		ldr	r3, [r7, #4]
 1198 0612 1A82     		strh	r2, [r3, #16]	@ movhi
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1199              		.loc 1 695 0
 1200 0614 07F10C07 		add	r7, r7, #12
 1201 0618 BD46     		mov	sp, r7
 1202 061a 80BC     		pop	{r7}
 1203 061c 7047     		bx	lr
 1204              		.cfi_endproc
 1205              	.LFE127:
 1207 061e 00BF     		.align	2
 1208              		.global	I2C_ReceiveData
 1209              		.thumb
 1210              		.thumb_func
 1212              	I2C_ReceiveData:
 1213              	.LFB128:
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1214              		.loc 1 703 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 8
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0620 80B4     		push	{r7}
 1220              	.LCFI54:
 1221              		.cfi_def_cfa_offset 4
 1222              		.cfi_offset 7, -4
 1223 0622 83B0     		sub	sp, sp, #12
 1224              	.LCFI55:
 1225              		.cfi_def_cfa_offset 16
 1226 0624 00AF     		add	r7, sp, #0
 1227              	.LCFI56:
 1228              		.cfi_def_cfa_register 7
 1229 0626 7860     		str	r0, [r7, #4]
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1230              		.loc 1 707 0
 1231 0628 7B68     		ldr	r3, [r7, #4]
 1232 062a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1233 062c 9BB2     		uxth	r3, r3
 1234 062e DBB2     		uxtb	r3, r3
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1235              		.loc 1 708 0
 1236 0630 1846     		mov	r0, r3
 1237 0632 07F10C07 		add	r7, r7, #12
 1238 0636 BD46     		mov	sp, r7
 1239 0638 80BC     		pop	{r7}
 1240 063a 7047     		bx	lr
 1241              		.cfi_endproc
 1242              	.LFE128:
 1244              		.align	2
 1245              		.global	I2C_TransmitPEC
 1246              		.thumb
 1247              		.thumb_func
 1249              	I2C_TransmitPEC:
 1250              	.LFB129:
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1251              		.loc 1 734 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 8
 1254              		@ frame_needed = 1, uses_anonymous_args = 0
 1255              		@ link register save eliminated.
 1256 063c 80B4     		push	{r7}
 1257              	.LCFI57:
 1258              		.cfi_def_cfa_offset 4
 1259              		.cfi_offset 7, -4
 1260 063e 83B0     		sub	sp, sp, #12
 1261              	.LCFI58:
 1262              		.cfi_def_cfa_offset 16
 1263 0640 00AF     		add	r7, sp, #0
 1264              	.LCFI59:
 1265              		.cfi_def_cfa_register 7
 1266 0642 7860     		str	r0, [r7, #4]
 1267 0644 0B46     		mov	r3, r1
 1268 0646 FB70     		strb	r3, [r7, #3]
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1269              		.loc 1 738 0
 1270 0648 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1271 064a 002B     		cmp	r3, #0
 1272 064c 08D0     		beq	.L56
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1273              		.loc 1 741 0
 1274 064e 7B68     		ldr	r3, [r7, #4]
 1275 0650 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1276 0652 9BB2     		uxth	r3, r3
 1277 0654 43F48053 		orr	r3, r3, #4096
 1278 0658 9AB2     		uxth	r2, r3
 1279 065a 7B68     		ldr	r3, [r7, #4]
 1280 065c 1A80     		strh	r2, [r3, #0]	@ movhi
 1281 065e 07E0     		b	.L55
 1282              	.L56:
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 1283              		.loc 1 746 0
 1284 0660 7B68     		ldr	r3, [r7, #4]
 1285 0662 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1286 0664 9BB2     		uxth	r3, r3
 1287 0666 23F48053 		bic	r3, r3, #4096
 1288 066a 9AB2     		uxth	r2, r3
 1289 066c 7B68     		ldr	r3, [r7, #4]
 1290 066e 1A80     		strh	r2, [r3, #0]	@ movhi
 1291              	.L55:
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1292              		.loc 1 748 0
 1293 0670 07F10C07 		add	r7, r7, #12
 1294 0674 BD46     		mov	sp, r7
 1295 0676 80BC     		pop	{r7}
 1296 0678 7047     		bx	lr
 1297              		.cfi_endproc
 1298              	.LFE129:
 1300 067a 00BF     		.align	2
 1301              		.global	I2C_PECPositionConfig
 1302              		.thumb
 1303              		.thumb_func
 1305              	I2C_PECPositionConfig:
 1306              	.LFB130:
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1307              		.loc 1 765 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 8
 1310              		@ frame_needed = 1, uses_anonymous_args = 0
 1311              		@ link register save eliminated.
 1312 067c 80B4     		push	{r7}
 1313              	.LCFI60:
 1314              		.cfi_def_cfa_offset 4
 1315              		.cfi_offset 7, -4
 1316 067e 83B0     		sub	sp, sp, #12
 1317              	.LCFI61:
 1318              		.cfi_def_cfa_offset 16
 1319 0680 00AF     		add	r7, sp, #0
 1320              	.LCFI62:
 1321              		.cfi_def_cfa_register 7
 1322 0682 7860     		str	r0, [r7, #4]
 1323 0684 0B46     		mov	r3, r1
 1324 0686 7B80     		strh	r3, [r7, #2]	@ movhi
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1325              		.loc 1 769 0
 1326 0688 7B88     		ldrh	r3, [r7, #2]
 1327 068a B3F5006F 		cmp	r3, #2048
 1328 068e 08D1     		bne	.L59
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1329              		.loc 1 772 0
 1330 0690 7B68     		ldr	r3, [r7, #4]
 1331 0692 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1332 0694 9BB2     		uxth	r3, r3
 1333 0696 43F40063 		orr	r3, r3, #2048
 1334 069a 9AB2     		uxth	r2, r3
 1335 069c 7B68     		ldr	r3, [r7, #4]
 1336 069e 1A80     		strh	r2, [r3, #0]	@ movhi
 1337 06a0 07E0     		b	.L58
 1338              	.L59:
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 1339              		.loc 1 777 0
 1340 06a2 7B68     		ldr	r3, [r7, #4]
 1341 06a4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1342 06a6 9BB2     		uxth	r3, r3
 1343 06a8 23F40063 		bic	r3, r3, #2048
 1344 06ac 9AB2     		uxth	r2, r3
 1345 06ae 7B68     		ldr	r3, [r7, #4]
 1346 06b0 1A80     		strh	r2, [r3, #0]	@ movhi
 1347              	.L58:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1348              		.loc 1 779 0
 1349 06b2 07F10C07 		add	r7, r7, #12
 1350 06b6 BD46     		mov	sp, r7
 1351 06b8 80BC     		pop	{r7}
 1352 06ba 7047     		bx	lr
 1353              		.cfi_endproc
 1354              	.LFE130:
 1356              		.align	2
 1357              		.global	I2C_CalculatePEC
 1358              		.thumb
 1359              		.thumb_func
 1361              	I2C_CalculatePEC:
 1362              	.LFB131:
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1363              		.loc 1 789 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 8
 1366              		@ frame_needed = 1, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 1368 06bc 80B4     		push	{r7}
 1369              	.LCFI63:
 1370              		.cfi_def_cfa_offset 4
 1371              		.cfi_offset 7, -4
 1372 06be 83B0     		sub	sp, sp, #12
 1373              	.LCFI64:
 1374              		.cfi_def_cfa_offset 16
 1375 06c0 00AF     		add	r7, sp, #0
 1376              	.LCFI65:
 1377              		.cfi_def_cfa_register 7
 1378 06c2 7860     		str	r0, [r7, #4]
 1379 06c4 0B46     		mov	r3, r1
 1380 06c6 FB70     		strb	r3, [r7, #3]
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1381              		.loc 1 793 0
 1382 06c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1383 06ca 002B     		cmp	r3, #0
 1384 06cc 08D0     		beq	.L62
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1385              		.loc 1 796 0
 1386 06ce 7B68     		ldr	r3, [r7, #4]
 1387 06d0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1388 06d2 9BB2     		uxth	r3, r3
 1389 06d4 43F02003 		orr	r3, r3, #32
 1390 06d8 9AB2     		uxth	r2, r3
 1391 06da 7B68     		ldr	r3, [r7, #4]
 1392 06dc 1A80     		strh	r2, [r3, #0]	@ movhi
 1393 06de 07E0     		b	.L61
 1394              	.L62:
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1395              		.loc 1 801 0
 1396 06e0 7B68     		ldr	r3, [r7, #4]
 1397 06e2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1398 06e4 9BB2     		uxth	r3, r3
 1399 06e6 23F02003 		bic	r3, r3, #32
 1400 06ea 9AB2     		uxth	r2, r3
 1401 06ec 7B68     		ldr	r3, [r7, #4]
 1402 06ee 1A80     		strh	r2, [r3, #0]	@ movhi
 1403              	.L61:
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1404              		.loc 1 803 0
 1405 06f0 07F10C07 		add	r7, r7, #12
 1406 06f4 BD46     		mov	sp, r7
 1407 06f6 80BC     		pop	{r7}
 1408 06f8 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE131:
 1412 06fa 00BF     		.align	2
 1413              		.global	I2C_GetPEC
 1414              		.thumb
 1415              		.thumb_func
 1417              	I2C_GetPEC:
 1418              	.LFB132:
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1419              		.loc 1 811 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 8
 1422              		@ frame_needed = 1, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 1424 06fc 80B4     		push	{r7}
 1425              	.LCFI66:
 1426              		.cfi_def_cfa_offset 4
 1427              		.cfi_offset 7, -4
 1428 06fe 83B0     		sub	sp, sp, #12
 1429              	.LCFI67:
 1430              		.cfi_def_cfa_offset 16
 1431 0700 00AF     		add	r7, sp, #0
 1432              	.LCFI68:
 1433              		.cfi_def_cfa_register 7
 1434 0702 7860     		str	r0, [r7, #4]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1435              		.loc 1 815 0
 1436 0704 7B68     		ldr	r3, [r7, #4]
 1437 0706 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1438 0708 9BB2     		uxth	r3, r3
 1439 070a 4FEA1323 		lsr	r3, r3, #8
 1440 070e 9BB2     		uxth	r3, r3
 1441 0710 DBB2     		uxtb	r3, r3
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1442              		.loc 1 816 0
 1443 0712 1846     		mov	r0, r3
 1444 0714 07F10C07 		add	r7, r7, #12
 1445 0718 BD46     		mov	sp, r7
 1446 071a 80BC     		pop	{r7}
 1447 071c 7047     		bx	lr
 1448              		.cfi_endproc
 1449              	.LFE132:
 1451 071e 00BF     		.align	2
 1452              		.global	I2C_DMACmd
 1453              		.thumb
 1454              		.thumb_func
 1456              	I2C_DMACmd:
 1457              	.LFB133:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1458              		.loc 1 844 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 8
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462              		@ link register save eliminated.
 1463 0720 80B4     		push	{r7}
 1464              	.LCFI69:
 1465              		.cfi_def_cfa_offset 4
 1466              		.cfi_offset 7, -4
 1467 0722 83B0     		sub	sp, sp, #12
 1468              	.LCFI70:
 1469              		.cfi_def_cfa_offset 16
 1470 0724 00AF     		add	r7, sp, #0
 1471              	.LCFI71:
 1472              		.cfi_def_cfa_register 7
 1473 0726 7860     		str	r0, [r7, #4]
 1474 0728 0B46     		mov	r3, r1
 1475 072a FB70     		strb	r3, [r7, #3]
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1476              		.loc 1 848 0
 1477 072c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1478 072e 002B     		cmp	r3, #0
 1479 0730 08D0     		beq	.L66
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1480              		.loc 1 851 0
 1481 0732 7B68     		ldr	r3, [r7, #4]
 1482 0734 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1483 0736 9BB2     		uxth	r3, r3
 1484 0738 43F40063 		orr	r3, r3, #2048
 1485 073c 9AB2     		uxth	r2, r3
 1486 073e 7B68     		ldr	r3, [r7, #4]
 1487 0740 9A80     		strh	r2, [r3, #4]	@ movhi
 1488 0742 07E0     		b	.L65
 1489              	.L66:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1490              		.loc 1 856 0
 1491 0744 7B68     		ldr	r3, [r7, #4]
 1492 0746 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1493 0748 9BB2     		uxth	r3, r3
 1494 074a 23F40063 		bic	r3, r3, #2048
 1495 074e 9AB2     		uxth	r2, r3
 1496 0750 7B68     		ldr	r3, [r7, #4]
 1497 0752 9A80     		strh	r2, [r3, #4]	@ movhi
 1498              	.L65:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1499              		.loc 1 858 0
 1500 0754 07F10C07 		add	r7, r7, #12
 1501 0758 BD46     		mov	sp, r7
 1502 075a 80BC     		pop	{r7}
 1503 075c 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE133:
 1507 075e 00BF     		.align	2
 1508              		.global	I2C_DMALastTransferCmd
 1509              		.thumb
 1510              		.thumb_func
 1512              	I2C_DMALastTransferCmd:
 1513              	.LFB134:
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1514              		.loc 1 868 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 8
 1517              		@ frame_needed = 1, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 1519 0760 80B4     		push	{r7}
 1520              	.LCFI72:
 1521              		.cfi_def_cfa_offset 4
 1522              		.cfi_offset 7, -4
 1523 0762 83B0     		sub	sp, sp, #12
 1524              	.LCFI73:
 1525              		.cfi_def_cfa_offset 16
 1526 0764 00AF     		add	r7, sp, #0
 1527              	.LCFI74:
 1528              		.cfi_def_cfa_register 7
 1529 0766 7860     		str	r0, [r7, #4]
 1530 0768 0B46     		mov	r3, r1
 1531 076a FB70     		strb	r3, [r7, #3]
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1532              		.loc 1 872 0
 1533 076c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1534 076e 002B     		cmp	r3, #0
 1535 0770 08D0     		beq	.L69
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1536              		.loc 1 875 0
 1537 0772 7B68     		ldr	r3, [r7, #4]
 1538 0774 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1539 0776 9BB2     		uxth	r3, r3
 1540 0778 43F48053 		orr	r3, r3, #4096
 1541 077c 9AB2     		uxth	r2, r3
 1542 077e 7B68     		ldr	r3, [r7, #4]
 1543 0780 9A80     		strh	r2, [r3, #4]	@ movhi
 1544 0782 07E0     		b	.L68
 1545              	.L69:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1546              		.loc 1 880 0
 1547 0784 7B68     		ldr	r3, [r7, #4]
 1548 0786 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1549 0788 9BB2     		uxth	r3, r3
 1550 078a 23F48053 		bic	r3, r3, #4096
 1551 078e 9AB2     		uxth	r2, r3
 1552 0790 7B68     		ldr	r3, [r7, #4]
 1553 0792 9A80     		strh	r2, [r3, #4]	@ movhi
 1554              	.L68:
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1555              		.loc 1 882 0
 1556 0794 07F10C07 		add	r7, r7, #12
 1557 0798 BD46     		mov	sp, r7
 1558 079a 80BC     		pop	{r7}
 1559 079c 7047     		bx	lr
 1560              		.cfi_endproc
 1561              	.LFE134:
 1563 079e 00BF     		.align	2
 1564              		.global	I2C_ReadRegister
 1565              		.thumb
 1566              		.thumb_func
 1568              	I2C_ReadRegister:
 1569              	.LFB135:
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1570              		.loc 1 1006 0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 16
 1573              		@ frame_needed = 1, uses_anonymous_args = 0
 1574              		@ link register save eliminated.
 1575 07a0 80B4     		push	{r7}
 1576              	.LCFI75:
 1577              		.cfi_def_cfa_offset 4
 1578              		.cfi_offset 7, -4
 1579 07a2 85B0     		sub	sp, sp, #20
 1580              	.LCFI76:
 1581              		.cfi_def_cfa_offset 24
 1582 07a4 00AF     		add	r7, sp, #0
 1583              	.LCFI77:
 1584              		.cfi_def_cfa_register 7
 1585 07a6 7860     		str	r0, [r7, #4]
 1586 07a8 0B46     		mov	r3, r1
 1587 07aa FB70     		strb	r3, [r7, #3]
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1588              		.loc 1 1007 0
 1589 07ac 4FF00003 		mov	r3, #0
 1590 07b0 FB60     		str	r3, [r7, #12]
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1591              		.loc 1 1013 0
 1592 07b2 7B68     		ldr	r3, [r7, #4]
 1593 07b4 FB60     		str	r3, [r7, #12]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1594              		.loc 1 1014 0
 1595 07b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1596 07b8 FB68     		ldr	r3, [r7, #12]
 1597 07ba D318     		adds	r3, r2, r3
 1598 07bc FB60     		str	r3, [r7, #12]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1599              		.loc 1 1017 0
 1600 07be FB68     		ldr	r3, [r7, #12]
 1601 07c0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1602 07c2 9BB2     		uxth	r3, r3
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1603              		.loc 1 1018 0
 1604 07c4 1846     		mov	r0, r3
 1605 07c6 07F11407 		add	r7, r7, #20
 1606 07ca BD46     		mov	sp, r7
 1607 07cc 80BC     		pop	{r7}
 1608 07ce 7047     		bx	lr
 1609              		.cfi_endproc
 1610              	.LFE135:
 1612              		.align	2
 1613              		.global	I2C_ITConfig
 1614              		.thumb
 1615              		.thumb_func
 1617              	I2C_ITConfig:
 1618              	.LFB136:
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1619              		.loc 1 1033 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 8
 1622              		@ frame_needed = 1, uses_anonymous_args = 0
 1623              		@ link register save eliminated.
 1624 07d0 80B4     		push	{r7}
 1625              	.LCFI78:
 1626              		.cfi_def_cfa_offset 4
 1627              		.cfi_offset 7, -4
 1628 07d2 83B0     		sub	sp, sp, #12
 1629              	.LCFI79:
 1630              		.cfi_def_cfa_offset 16
 1631 07d4 00AF     		add	r7, sp, #0
 1632              	.LCFI80:
 1633              		.cfi_def_cfa_register 7
 1634 07d6 7860     		str	r0, [r7, #4]
 1635 07d8 1346     		mov	r3, r2
 1636 07da 0A46     		mov	r2, r1	@ movhi
 1637 07dc 7A80     		strh	r2, [r7, #2]	@ movhi
 1638 07de 7B70     		strb	r3, [r7, #1]
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1639              		.loc 1 1039 0
 1640 07e0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1641 07e2 002B     		cmp	r3, #0
 1642 07e4 08D0     		beq	.L73
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1643              		.loc 1 1042 0
 1644 07e6 7B68     		ldr	r3, [r7, #4]
 1645 07e8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1646 07ea 9AB2     		uxth	r2, r3
 1647 07ec 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1648 07ee 1343     		orrs	r3, r3, r2
 1649 07f0 9AB2     		uxth	r2, r3
 1650 07f2 7B68     		ldr	r3, [r7, #4]
 1651 07f4 9A80     		strh	r2, [r3, #4]	@ movhi
 1652 07f6 0AE0     		b	.L72
 1653              	.L73:
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1654              		.loc 1 1047 0
 1655 07f8 7B68     		ldr	r3, [r7, #4]
 1656 07fa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1657 07fc 9AB2     		uxth	r2, r3
 1658 07fe 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1659 0800 6FEA0303 		mvn	r3, r3
 1660 0804 9BB2     		uxth	r3, r3
 1661 0806 1340     		ands	r3, r3, r2
 1662 0808 9AB2     		uxth	r2, r3
 1663 080a 7B68     		ldr	r3, [r7, #4]
 1664 080c 9A80     		strh	r2, [r3, #4]	@ movhi
 1665              	.L72:
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1666              		.loc 1 1049 0
 1667 080e 07F10C07 		add	r7, r7, #12
 1668 0812 BD46     		mov	sp, r7
 1669 0814 80BC     		pop	{r7}
 1670 0816 7047     		bx	lr
 1671              		.cfi_endproc
 1672              	.LFE136:
 1674              		.align	2
 1675              		.global	I2C_CheckEvent
 1676              		.thumb
 1677              		.thumb_func
 1679              	I2C_CheckEvent:
 1680              	.LFB137:
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1681              		.loc 1 1092 0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 24
 1684              		@ frame_needed = 1, uses_anonymous_args = 0
 1685              		@ link register save eliminated.
 1686 0818 80B4     		push	{r7}
 1687              	.LCFI81:
 1688              		.cfi_def_cfa_offset 4
 1689              		.cfi_offset 7, -4
 1690 081a 87B0     		sub	sp, sp, #28
 1691              	.LCFI82:
 1692              		.cfi_def_cfa_offset 32
 1693 081c 00AF     		add	r7, sp, #0
 1694              	.LCFI83:
 1695              		.cfi_def_cfa_register 7
 1696 081e 7860     		str	r0, [r7, #4]
 1697 0820 3960     		str	r1, [r7, #0]
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1698              		.loc 1 1093 0
 1699 0822 4FF00003 		mov	r3, #0
 1700 0826 3B61     		str	r3, [r7, #16]
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1701              		.loc 1 1094 0
 1702 0828 4FF00003 		mov	r3, #0
 1703 082c FB60     		str	r3, [r7, #12]
 1704 082e 4FF00003 		mov	r3, #0
 1705 0832 BB60     		str	r3, [r7, #8]
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 1706              		.loc 1 1095 0
 1707 0834 4FF00003 		mov	r3, #0
 1708 0838 FB75     		strb	r3, [r7, #23]
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1709              		.loc 1 1102 0
 1710 083a 7B68     		ldr	r3, [r7, #4]
 1711 083c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1712 083e 9BB2     		uxth	r3, r3
 1713 0840 FB60     		str	r3, [r7, #12]
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1714              		.loc 1 1103 0
 1715 0842 7B68     		ldr	r3, [r7, #4]
 1716 0844 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1717 0846 9BB2     		uxth	r3, r3
 1718 0848 BB60     		str	r3, [r7, #8]
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1719              		.loc 1 1104 0
 1720 084a BB68     		ldr	r3, [r7, #8]
 1721 084c 4FEA0343 		lsl	r3, r3, #16
 1722 0850 BB60     		str	r3, [r7, #8]
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1723              		.loc 1 1107 0
 1724 0852 FA68     		ldr	r2, [r7, #12]
 1725 0854 BB68     		ldr	r3, [r7, #8]
 1726 0856 1343     		orrs	r3, r3, r2
 1727 0858 23F07F43 		bic	r3, r3, #-16777216
 1728 085c 3B61     		str	r3, [r7, #16]
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1729              		.loc 1 1110 0
 1730 085e 3A69     		ldr	r2, [r7, #16]
 1731 0860 3B68     		ldr	r3, [r7, #0]
 1732 0862 1A40     		ands	r2, r2, r3
 1733 0864 3B68     		ldr	r3, [r7, #0]
 1734 0866 9A42     		cmp	r2, r3
 1735 0868 03D1     		bne	.L76
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 1736              		.loc 1 1113 0
 1737 086a 4FF00103 		mov	r3, #1
 1738 086e FB75     		strb	r3, [r7, #23]
 1739 0870 02E0     		b	.L77
 1740              	.L76:
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 1741              		.loc 1 1118 0
 1742 0872 4FF00003 		mov	r3, #0
 1743 0876 FB75     		strb	r3, [r7, #23]
 1744              	.L77:
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 1745              		.loc 1 1121 0
 1746 0878 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1747              		.loc 1 1122 0
 1748 087a 1846     		mov	r0, r3
 1749 087c 07F11C07 		add	r7, r7, #28
 1750 0880 BD46     		mov	sp, r7
 1751 0882 80BC     		pop	{r7}
 1752 0884 7047     		bx	lr
 1753              		.cfi_endproc
 1754              	.LFE137:
 1756 0886 00BF     		.align	2
 1757              		.global	I2C_GetLastEvent
 1758              		.thumb
 1759              		.thumb_func
 1761              	I2C_GetLastEvent:
 1762              	.LFB138:
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1763              		.loc 1 1140 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 24
 1766              		@ frame_needed = 1, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768 0888 80B4     		push	{r7}
 1769              	.LCFI84:
 1770              		.cfi_def_cfa_offset 4
 1771              		.cfi_offset 7, -4
 1772 088a 87B0     		sub	sp, sp, #28
 1773              	.LCFI85:
 1774              		.cfi_def_cfa_offset 32
 1775 088c 00AF     		add	r7, sp, #0
 1776              	.LCFI86:
 1777              		.cfi_def_cfa_register 7
 1778 088e 7860     		str	r0, [r7, #4]
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1779              		.loc 1 1141 0
 1780 0890 4FF00003 		mov	r3, #0
 1781 0894 7B61     		str	r3, [r7, #20]
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1782              		.loc 1 1142 0
 1783 0896 4FF00003 		mov	r3, #0
 1784 089a 3B61     		str	r3, [r7, #16]
 1785 089c 4FF00003 		mov	r3, #0
 1786 08a0 FB60     		str	r3, [r7, #12]
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1787              		.loc 1 1148 0
 1788 08a2 7B68     		ldr	r3, [r7, #4]
 1789 08a4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1790 08a6 9BB2     		uxth	r3, r3
 1791 08a8 3B61     		str	r3, [r7, #16]
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1792              		.loc 1 1149 0
 1793 08aa 7B68     		ldr	r3, [r7, #4]
 1794 08ac 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1795 08ae 9BB2     		uxth	r3, r3
 1796 08b0 FB60     		str	r3, [r7, #12]
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1797              		.loc 1 1150 0
 1798 08b2 FB68     		ldr	r3, [r7, #12]
 1799 08b4 4FEA0343 		lsl	r3, r3, #16
 1800 08b8 FB60     		str	r3, [r7, #12]
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1801              		.loc 1 1153 0
 1802 08ba 3A69     		ldr	r2, [r7, #16]
 1803 08bc FB68     		ldr	r3, [r7, #12]
 1804 08be 1343     		orrs	r3, r3, r2
 1805 08c0 23F07F43 		bic	r3, r3, #-16777216
 1806 08c4 7B61     		str	r3, [r7, #20]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 1807              		.loc 1 1156 0
 1808 08c6 7B69     		ldr	r3, [r7, #20]
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1809              		.loc 1 1157 0
 1810 08c8 1846     		mov	r0, r3
 1811 08ca 07F11C07 		add	r7, r7, #28
 1812 08ce BD46     		mov	sp, r7
 1813 08d0 80BC     		pop	{r7}
 1814 08d2 7047     		bx	lr
 1815              		.cfi_endproc
 1816              	.LFE138:
 1818              		.align	2
 1819              		.global	I2C_GetFlagStatus
 1820              		.thumb
 1821              		.thumb_func
 1823              	I2C_GetFlagStatus:
 1824              	.LFB139:
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1825              		.loc 1 1195 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 24
 1828              		@ frame_needed = 1, uses_anonymous_args = 0
 1829              		@ link register save eliminated.
 1830 08d4 80B4     		push	{r7}
 1831              	.LCFI87:
 1832              		.cfi_def_cfa_offset 4
 1833              		.cfi_offset 7, -4
 1834 08d6 87B0     		sub	sp, sp, #28
 1835              	.LCFI88:
 1836              		.cfi_def_cfa_offset 32
 1837 08d8 00AF     		add	r7, sp, #0
 1838              	.LCFI89:
 1839              		.cfi_def_cfa_register 7
 1840 08da 7860     		str	r0, [r7, #4]
 1841 08dc 3960     		str	r1, [r7, #0]
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 1842              		.loc 1 1196 0
 1843 08de 4FF00003 		mov	r3, #0
 1844 08e2 FB75     		strb	r3, [r7, #23]
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1845              		.loc 1 1197 0
 1846 08e4 4FF00003 		mov	r3, #0
 1847 08e8 3B61     		str	r3, [r7, #16]
 1848 08ea 4FF00003 		mov	r3, #0
 1849 08ee FB60     		str	r3, [r7, #12]
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1850              		.loc 1 1204 0
 1851 08f0 7B68     		ldr	r3, [r7, #4]
 1852 08f2 FB60     		str	r3, [r7, #12]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1853              		.loc 1 1207 0
 1854 08f4 3B68     		ldr	r3, [r7, #0]
 1855 08f6 4FEA1373 		lsr	r3, r3, #28
 1856 08fa 3B61     		str	r3, [r7, #16]
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1857              		.loc 1 1210 0
 1858 08fc 3B68     		ldr	r3, [r7, #0]
 1859 08fe 23F07F43 		bic	r3, r3, #-16777216
 1860 0902 3B60     		str	r3, [r7, #0]
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1861              		.loc 1 1212 0
 1862 0904 3B69     		ldr	r3, [r7, #16]
 1863 0906 002B     		cmp	r3, #0
 1864 0908 04D0     		beq	.L80
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1865              		.loc 1 1215 0
 1866 090a FB68     		ldr	r3, [r7, #12]
 1867 090c 03F11403 		add	r3, r3, #20
 1868 0910 FB60     		str	r3, [r7, #12]
 1869 0912 07E0     		b	.L81
 1870              	.L80:
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1871              		.loc 1 1220 0
 1872 0914 3B68     		ldr	r3, [r7, #0]
 1873 0916 4FEA1343 		lsr	r3, r3, #16
 1874 091a 3B60     		str	r3, [r7, #0]
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1875              		.loc 1 1222 0
 1876 091c FB68     		ldr	r3, [r7, #12]
 1877 091e 03F11803 		add	r3, r3, #24
 1878 0922 FB60     		str	r3, [r7, #12]
 1879              	.L81:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1880              		.loc 1 1225 0
 1881 0924 FB68     		ldr	r3, [r7, #12]
 1882 0926 1A68     		ldr	r2, [r3, #0]
 1883 0928 3B68     		ldr	r3, [r7, #0]
 1884 092a 1340     		ands	r3, r3, r2
 1885 092c 002B     		cmp	r3, #0
 1886 092e 03D0     		beq	.L82
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1887              		.loc 1 1228 0
 1888 0930 4FF00103 		mov	r3, #1
 1889 0934 FB75     		strb	r3, [r7, #23]
 1890 0936 02E0     		b	.L83
 1891              	.L82:
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1892              		.loc 1 1233 0
 1893 0938 4FF00003 		mov	r3, #0
 1894 093c FB75     		strb	r3, [r7, #23]
 1895              	.L83:
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 1896              		.loc 1 1237 0
 1897 093e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1898              		.loc 1 1238 0
 1899 0940 1846     		mov	r0, r3
 1900 0942 07F11C07 		add	r7, r7, #28
 1901 0946 BD46     		mov	sp, r7
 1902 0948 80BC     		pop	{r7}
 1903 094a 7047     		bx	lr
 1904              		.cfi_endproc
 1905              	.LFE139:
 1907              		.align	2
 1908              		.global	I2C_ClearFlag
 1909              		.thumb
 1910              		.thumb_func
 1912              	I2C_ClearFlag:
 1913              	.LFB140:
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1914              		.loc 1 1272 0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 16
 1917              		@ frame_needed = 1, uses_anonymous_args = 0
 1918              		@ link register save eliminated.
 1919 094c 80B4     		push	{r7}
 1920              	.LCFI90:
 1921              		.cfi_def_cfa_offset 4
 1922              		.cfi_offset 7, -4
 1923 094e 85B0     		sub	sp, sp, #20
 1924              	.LCFI91:
 1925              		.cfi_def_cfa_offset 24
 1926 0950 00AF     		add	r7, sp, #0
 1927              	.LCFI92:
 1928              		.cfi_def_cfa_register 7
 1929 0952 7860     		str	r0, [r7, #4]
 1930 0954 3960     		str	r1, [r7, #0]
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 1931              		.loc 1 1273 0
 1932 0956 4FF00003 		mov	r3, #0
 1933 095a FB60     		str	r3, [r7, #12]
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1934              		.loc 1 1278 0
 1935 095c 3B68     		ldr	r3, [r7, #0]
 1936 095e 23F07F43 		bic	r3, r3, #-16777216
 1937 0962 FB60     		str	r3, [r7, #12]
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1938              		.loc 1 1280 0
 1939 0964 FB68     		ldr	r3, [r7, #12]
 1940 0966 9BB2     		uxth	r3, r3
 1941 0968 6FEA0303 		mvn	r3, r3
 1942 096c 9AB2     		uxth	r2, r3
 1943 096e 7B68     		ldr	r3, [r7, #4]
 1944 0970 9A82     		strh	r2, [r3, #20]	@ movhi
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1945              		.loc 1 1281 0
 1946 0972 07F11407 		add	r7, r7, #20
 1947 0976 BD46     		mov	sp, r7
 1948 0978 80BC     		pop	{r7}
 1949 097a 7047     		bx	lr
 1950              		.cfi_endproc
 1951              	.LFE140:
 1953              		.align	2
 1954              		.global	I2C_GetITStatus
 1955              		.thumb
 1956              		.thumb_func
 1958              	I2C_GetITStatus:
 1959              	.LFB141:
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1960              		.loc 1 1306 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 16
 1963              		@ frame_needed = 1, uses_anonymous_args = 0
 1964              		@ link register save eliminated.
 1965 097c 80B4     		push	{r7}
 1966              	.LCFI93:
 1967              		.cfi_def_cfa_offset 4
 1968              		.cfi_offset 7, -4
 1969 097e 85B0     		sub	sp, sp, #20
 1970              	.LCFI94:
 1971              		.cfi_def_cfa_offset 24
 1972 0980 00AF     		add	r7, sp, #0
 1973              	.LCFI95:
 1974              		.cfi_def_cfa_register 7
 1975 0982 7860     		str	r0, [r7, #4]
 1976 0984 3960     		str	r1, [r7, #0]
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 1977              		.loc 1 1307 0
 1978 0986 4FF00003 		mov	r3, #0
 1979 098a FB73     		strb	r3, [r7, #15]
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 1980              		.loc 1 1308 0
 1981 098c 4FF00003 		mov	r3, #0
 1982 0990 BB60     		str	r3, [r7, #8]
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1983              		.loc 1 1315 0
 1984 0992 3B68     		ldr	r3, [r7, #0]
 1985 0994 03F0E063 		and	r3, r3, #117440512
 1986 0998 4FEA1342 		lsr	r2, r3, #16
 1987 099c 7B68     		ldr	r3, [r7, #4]
 1988 099e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1989 09a0 9BB2     		uxth	r3, r3
 1990 09a2 1340     		ands	r3, r3, r2
 1991 09a4 BB60     		str	r3, [r7, #8]
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 1992              		.loc 1 1318 0
 1993 09a6 3B68     		ldr	r3, [r7, #0]
 1994 09a8 23F07F43 		bic	r3, r3, #-16777216
 1995 09ac 3B60     		str	r3, [r7, #0]
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1996              		.loc 1 1321 0
 1997 09ae 7B68     		ldr	r3, [r7, #4]
 1998 09b0 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1999 09b2 9BB2     		uxth	r3, r3
 2000 09b4 1A46     		mov	r2, r3
 2001 09b6 3B68     		ldr	r3, [r7, #0]
 2002 09b8 1340     		ands	r3, r3, r2
 2003 09ba 002B     		cmp	r3, #0
 2004 09bc 06D0     		beq	.L86
 2005              		.loc 1 1321 0 is_stmt 0 discriminator 1
 2006 09be BB68     		ldr	r3, [r7, #8]
 2007 09c0 002B     		cmp	r3, #0
 2008 09c2 03D0     		beq	.L86
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2009              		.loc 1 1324 0 is_stmt 1
 2010 09c4 4FF00103 		mov	r3, #1
 2011 09c8 FB73     		strb	r3, [r7, #15]
 2012 09ca 02E0     		b	.L87
 2013              	.L86:
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2014              		.loc 1 1329 0
 2015 09cc 4FF00003 		mov	r3, #0
 2016 09d0 FB73     		strb	r3, [r7, #15]
 2017              	.L87:
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 2018              		.loc 1 1332 0
 2019 09d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2020              		.loc 1 1333 0
 2021 09d4 1846     		mov	r0, r3
 2022 09d6 07F11407 		add	r7, r7, #20
 2023 09da BD46     		mov	sp, r7
 2024 09dc 80BC     		pop	{r7}
 2025 09de 7047     		bx	lr
 2026              		.cfi_endproc
 2027              	.LFE141:
 2029              		.align	2
 2030              		.global	I2C_ClearITPendingBit
 2031              		.thumb
 2032              		.thumb_func
 2034              	I2C_ClearITPendingBit:
 2035              	.LFB142:
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 2036              		.loc 1 1366 0
 2037              		.cfi_startproc
 2038              		@ args = 0, pretend = 0, frame = 16
 2039              		@ frame_needed = 1, uses_anonymous_args = 0
 2040              		@ link register save eliminated.
 2041 09e0 80B4     		push	{r7}
 2042              	.LCFI96:
 2043              		.cfi_def_cfa_offset 4
 2044              		.cfi_offset 7, -4
 2045 09e2 85B0     		sub	sp, sp, #20
 2046              	.LCFI97:
 2047              		.cfi_def_cfa_offset 24
 2048 09e4 00AF     		add	r7, sp, #0
 2049              	.LCFI98:
 2050              		.cfi_def_cfa_register 7
 2051 09e6 7860     		str	r0, [r7, #4]
 2052 09e8 3960     		str	r1, [r7, #0]
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2053              		.loc 1 1367 0
 2054 09ea 4FF00003 		mov	r3, #0
 2055 09ee FB60     		str	r3, [r7, #12]
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2056              		.loc 1 1373 0
 2057 09f0 3B68     		ldr	r3, [r7, #0]
 2058 09f2 23F07F43 		bic	r3, r3, #-16777216
 2059 09f6 FB60     		str	r3, [r7, #12]
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2060              		.loc 1 1376 0
 2061 09f8 FB68     		ldr	r3, [r7, #12]
 2062 09fa 9BB2     		uxth	r3, r3
 2063 09fc 6FEA0303 		mvn	r3, r3
 2064 0a00 9AB2     		uxth	r2, r3
 2065 0a02 7B68     		ldr	r3, [r7, #4]
 2066 0a04 9A82     		strh	r2, [r3, #20]	@ movhi
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2067              		.loc 1 1377 0
 2068 0a06 07F11407 		add	r7, r7, #20
 2069 0a0a BD46     		mov	sp, r7
 2070 0a0c 80BC     		pop	{r7}
 2071 0a0e 7047     		bx	lr
 2072              		.cfi_endproc
 2073              	.LFE142:
 2075              	.Letext0:
 2076              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2077              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 2078              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 2079              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 2080              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:18     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:23     .text:00000000 I2C_DeInit
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:101    .text:00000088 I2C_Init
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:333    .text:00000234 I2C_StructInit
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:388    .text:00000278 I2C_Cmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:444    .text:000002b8 I2C_GenerateSTART
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:500    .text:000002f8 I2C_GenerateSTOP
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:556    .text:00000338 I2C_Send7bitAddress
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:611    .text:00000374 I2C_AcknowledgeConfig
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:667    .text:000003b4 I2C_OwnAddress2Config
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:724    .text:000003f8 I2C_DualAddressCmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:780    .text:00000438 I2C_GeneralCallCmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:836    .text:00000478 I2C_SoftwareResetCmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:894    .text:000004c0 I2C_StretchClockCmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:950    .text:00000500 I2C_FastModeDutyCycleConfig
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1006   .text:00000540 I2C_NACKPositionConfig
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1062   .text:00000580 I2C_SMBusAlertConfig
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1118   .text:000005c0 I2C_ARPCmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1174   .text:00000600 I2C_SendData
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1212   .text:00000620 I2C_ReceiveData
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1249   .text:0000063c I2C_TransmitPEC
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1305   .text:0000067c I2C_PECPositionConfig
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1361   .text:000006bc I2C_CalculatePEC
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1417   .text:000006fc I2C_GetPEC
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1456   .text:00000720 I2C_DMACmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1512   .text:00000760 I2C_DMALastTransferCmd
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1568   .text:000007a0 I2C_ReadRegister
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1617   .text:000007d0 I2C_ITConfig
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1679   .text:00000818 I2C_CheckEvent
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1761   .text:00000888 I2C_GetLastEvent
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1823   .text:000008d4 I2C_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1912   .text:0000094c I2C_ClearFlag
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:1958   .text:0000097c I2C_GetITStatus
C:\Users\Alex\AppData\Local\Temp\ccPTZPlU.s:2034   .text:000009e0 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
