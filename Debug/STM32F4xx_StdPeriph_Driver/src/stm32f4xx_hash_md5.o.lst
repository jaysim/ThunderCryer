   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_hash_md5.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HASH_MD5,"ax",%progbits
  19              		.align	2
  20              		.global	HASH_MD5
  21              		.thumb
  22              		.thumb_func
  24              	HASH_MD5:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @file    stm32f4xx_hash_md5.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief   This file provides high level functions to compute the HASH MD5 and
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          HMAC MD5 Digest of an input message.
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *    
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          1. Enable The HASH controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          2. Calculate the HASH MD5 Digest using HASH_MD5() function.
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          3. Calculate the HMAC MD5 Digest using HMAC_MD5() function.
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *  @endverbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @attention
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Includes ------------------------------------------------------------------*/
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** #include "stm32f4xx_hash.h"
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH 
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief HASH driver modules
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private typedef -----------------------------------------------------------*/
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private define ------------------------------------------------------------*/
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private macro -------------------------------------------------------------*/
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private variables ---------------------------------------------------------*/
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private function prototypes -----------------------------------------------*/
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private functions ---------------------------------------------------------*/
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Private_Functions
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */ 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Group7 High Level MD5 functions
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  *  @brief   High Level MD5 Hash and HMAC functions 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  *
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** @verbatim   
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****                           High Level MD5 Hash and HMAC functions
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** @endverbatim
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /**
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HASH MD5 digest.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** {
  27              		.loc 1 88 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 112
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 90B5     		push	{r4, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 4, -12
  37 0002 9DB0     		sub	sp, sp, #116
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 128
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
  46              		.loc 1 91 0
  47 000c 4FF00003 		mov	r3, #0
  48 0010 FB82     		strh	r3, [r7, #22]	@ movhi
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
  49              		.loc 1 92 0
  50 0012 4FF00003 		mov	r3, #0
  51 0016 FB66     		str	r3, [r7, #108]
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
  52              		.loc 1 93 0
  53 0018 4FF00003 		mov	r3, #0
  54 001c 3B61     		str	r3, [r7, #16]
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
  55              		.loc 1 94 0
  56 001e 4FF00003 		mov	r3, #0
  57 0022 3B66     		str	r3, [r7, #96]
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
  58              		.loc 1 95 0
  59 0024 4FF00103 		mov	r3, #1
  60 0028 87F86B30 		strb	r3, [r7, #107]
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
  61              		.loc 1 96 0
  62 002c FB68     		ldr	r3, [r7, #12]
  63 002e 7B66     		str	r3, [r7, #100]
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
  64              		.loc 1 97 0
  65 0030 7B68     		ldr	r3, [r7, #4]
  66 0032 FB65     		str	r3, [r7, #92]
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  67              		.loc 1 101 0
  68 0034 BB68     		ldr	r3, [r7, #8]
  69 0036 9BB2     		uxth	r3, r3
  70 0038 03F00303 		and	r3, r3, #3
  71 003c 9BB2     		uxth	r3, r3
  72 003e 4FEAC303 		lsl	r3, r3, #3
  73 0042 9BB2     		uxth	r3, r3
  74 0044 FB82     		strh	r3, [r7, #22]	@ movhi
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
  75              		.loc 1 104 0
  76 0046 FFF7FEFF 		bl	HASH_DeInit
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  77              		.loc 1 107 0
  78 004a 4FF08003 		mov	r3, #128
  79 004e FB62     		str	r3, [r7, #44]
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  80              		.loc 1 108 0
  81 0050 4FF00003 		mov	r3, #0
  82 0054 3B63     		str	r3, [r7, #48]
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  83              		.loc 1 109 0
  84 0056 4FF02003 		mov	r3, #32
  85 005a 7B63     		str	r3, [r7, #52]
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
  86              		.loc 1 110 0
  87 005c 07F12C03 		add	r3, r7, #44
  88 0060 1846     		mov	r0, r3
  89 0062 FFF7FEFF 		bl	HASH_Init
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the data */
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  90              		.loc 1 113 0
  91 0066 FB8A     		ldrh	r3, [r7, #22]	@ movhi
  92 0068 9BB2     		uxth	r3, r3
  93 006a 1846     		mov	r0, r3
  94 006c FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Write the Input block in the IN FIFO */
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
  95              		.loc 1 116 0
  96 0070 4FF00003 		mov	r3, #0
  97 0074 FB66     		str	r3, [r7, #108]
  98 0076 0CE0     		b	.L2
  99              	.L3:
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
 100              		.loc 1 118 0 discriminator 2
 101 0078 7B6E     		ldr	r3, [r7, #100]
 102 007a 1B68     		ldr	r3, [r3, #0]
 103 007c 1846     		mov	r0, r3
 104 007e FFF7FEFF 		bl	HASH_DataIn
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     inputaddr+=4;
 105              		.loc 1 119 0 discriminator 2
 106 0082 7B6E     		ldr	r3, [r7, #100]
 107 0084 03F10403 		add	r3, r3, #4
 108 0088 7B66     		str	r3, [r7, #100]
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
 109              		.loc 1 116 0 discriminator 2
 110 008a FB6E     		ldr	r3, [r7, #108]
 111 008c 03F10403 		add	r3, r3, #4
 112 0090 FB66     		str	r3, [r7, #108]
 113              	.L2:
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
 114              		.loc 1 116 0 is_stmt 0 discriminator 1
 115 0092 FA6E     		ldr	r2, [r7, #108]
 116 0094 BB68     		ldr	r3, [r7, #8]
 117 0096 9A42     		cmp	r2, r3
 118 0098 EED3     		bcc	.L3
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 119              		.loc 1 123 0 is_stmt 1
 120 009a FFF7FEFF 		bl	HASH_StartDigest
 121              	.L5:
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   do
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 122              		.loc 1 128 0 discriminator 1
 123 009e 4FF00800 		mov	r0, #8
 124 00a2 FFF7FEFF 		bl	HASH_GetFlagStatus
 125 00a6 0346     		mov	r3, r0
 126 00a8 3B66     		str	r3, [r7, #96]
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     counter++;
 127              		.loc 1 129 0 discriminator 1
 128 00aa 3B69     		ldr	r3, [r7, #16]
 129 00ac 03F10103 		add	r3, r3, #1
 130 00b0 3B61     		str	r3, [r7, #16]
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 131              		.loc 1 130 0 discriminator 1
 132 00b2 3B69     		ldr	r3, [r7, #16]
 133 00b4 B3F5803F 		cmp	r3, #65536
 134 00b8 02D0     		beq	.L4
 135 00ba 3B6E     		ldr	r3, [r7, #96]
 136 00bc 002B     		cmp	r3, #0
 137 00be EED1     		bne	.L5
 138              	.L4:
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 139              		.loc 1 132 0
 140 00c0 3B6E     		ldr	r3, [r7, #96]
 141 00c2 002B     		cmp	r3, #0
 142 00c4 04D0     		beq	.L6
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 143              		.loc 1 134 0
 144 00c6 4FF00003 		mov	r3, #0
 145 00ca 87F86B30 		strb	r3, [r7, #107]
 146 00ce 30E0     		b	.L7
 147              	.L6:
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   else
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Read the message digest */
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_GetDigest(&MD5_MessageDigest);
 148              		.loc 1 139 0
 149 00d0 07F11803 		add	r3, r7, #24
 150 00d4 1846     		mov	r0, r3
 151 00d6 FFF7FEFF 		bl	HASH_GetDigest
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 152              		.loc 1 140 0
 153 00da FB6D     		ldr	r3, [r7, #92]
 154 00dc BA69     		ldr	r2, [r7, #24]
 155 00de BA65     		str	r2, [r7, #88]
 156              	.LBB18:
 157              	.LBB19:
 158              		.file 2 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmInstr.h"
   1:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 295:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 296:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 297:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 299:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 301:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 303:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 305:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 306:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 307:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 309:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 313:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 315:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 317:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 318:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 319:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 321:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 324:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 326:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 328:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 329:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 330:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 332:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 335:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 337:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 339:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 340:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 341:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 343:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 345:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 348:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 350:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 159              		.loc 2 352 0
 160 00e0 BA6D     		ldr	r2, [r7, #88]
 161              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 162 00e2 14BA     		rev r4, r2
 163              	@ 0 "" 2
 164              		.thumb
 165 00e4 7C65     		str	r4, [r7, #84]
 353:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   return(result);
 166              		.loc 2 353 0
 167 00e6 7A6D     		ldr	r2, [r7, #84]
 168              	.LBE19:
 169              	.LBE18:
 170              		.loc 1 140 0
 171 00e8 1A60     		str	r2, [r3, #0]
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 172              		.loc 1 141 0
 173 00ea FB6D     		ldr	r3, [r7, #92]
 174 00ec 03F10403 		add	r3, r3, #4
 175 00f0 FB65     		str	r3, [r7, #92]
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 176              		.loc 1 142 0
 177 00f2 FB6D     		ldr	r3, [r7, #92]
 178 00f4 FA69     		ldr	r2, [r7, #28]
 179 00f6 3A65     		str	r2, [r7, #80]
 180              	.LBB20:
 181              	.LBB21:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 182              		.loc 2 352 0
 183 00f8 3A6D     		ldr	r2, [r7, #80]
 184              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 185 00fa 14BA     		rev r4, r2
 186              	@ 0 "" 2
 187              		.thumb
 188 00fc FC64     		str	r4, [r7, #76]
 189              		.loc 2 353 0
 190 00fe FA6C     		ldr	r2, [r7, #76]
 191              	.LBE21:
 192              	.LBE20:
 193              		.loc 1 142 0
 194 0100 1A60     		str	r2, [r3, #0]
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 195              		.loc 1 143 0
 196 0102 FB6D     		ldr	r3, [r7, #92]
 197 0104 03F10403 		add	r3, r3, #4
 198 0108 FB65     		str	r3, [r7, #92]
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 199              		.loc 1 144 0
 200 010a FB6D     		ldr	r3, [r7, #92]
 201 010c 3A6A     		ldr	r2, [r7, #32]
 202 010e BA64     		str	r2, [r7, #72]
 203              	.LBB22:
 204              	.LBB23:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 205              		.loc 2 352 0
 206 0110 BA6C     		ldr	r2, [r7, #72]
 207              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 208 0112 14BA     		rev r4, r2
 209              	@ 0 "" 2
 210              		.thumb
 211 0114 7C64     		str	r4, [r7, #68]
 212              		.loc 2 353 0
 213 0116 7A6C     		ldr	r2, [r7, #68]
 214              	.LBE23:
 215              	.LBE22:
 216              		.loc 1 144 0
 217 0118 1A60     		str	r2, [r3, #0]
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 218              		.loc 1 145 0
 219 011a FB6D     		ldr	r3, [r7, #92]
 220 011c 03F10403 		add	r3, r3, #4
 221 0120 FB65     		str	r3, [r7, #92]
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 222              		.loc 1 146 0
 223 0122 FB6D     		ldr	r3, [r7, #92]
 224 0124 7A6A     		ldr	r2, [r7, #36]
 225 0126 3A64     		str	r2, [r7, #64]
 226              	.LBB24:
 227              	.LBB25:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 228              		.loc 2 352 0
 229 0128 3A6C     		ldr	r2, [r7, #64]
 230              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 231 012a 14BA     		rev r4, r2
 232              	@ 0 "" 2
 233              		.thumb
 234 012c FC63     		str	r4, [r7, #60]
 235              		.loc 2 353 0
 236 012e FA6B     		ldr	r2, [r7, #60]
 237              	.LBE25:
 238              	.LBE24:
 239              		.loc 1 146 0
 240 0130 1A60     		str	r2, [r3, #0]
 241              	.L7:
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   return status; 
 242              		.loc 1 148 0
 243 0132 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** }
 244              		.loc 1 149 0
 245 0136 1846     		mov	r0, r3
 246 0138 07F17407 		add	r7, r7, #116
 247 013c BD46     		mov	sp, r7
 248 013e 90BD     		pop	{r4, r7, pc}
 249              		.cfi_endproc
 250              	.LFE110:
 252              		.section	.text.HMAC_MD5,"ax",%progbits
 253              		.align	2
 254              		.global	HMAC_MD5
 255              		.thumb
 256              		.thumb_func
 258              	HMAC_MD5:
 259              	.LFB111:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /**
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HMAC MD5 digest.
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Key: pointer to the Key used for HMAC.
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Keylen: length of the Key used for HMAC.
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest  
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****                      uint32_t Ilen, uint8_t Output[16])
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** {
 260              		.loc 1 164 0
 261              		.cfi_startproc
 262              		@ args = 4, pretend = 0, frame = 120
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264 0000 90B5     		push	{r4, r7, lr}
 265              	.LCFI3:
 266              		.cfi_def_cfa_offset 12
 267              		.cfi_offset 14, -4
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 4, -12
 270 0002 9FB0     		sub	sp, sp, #124
 271              	.LCFI4:
 272              		.cfi_def_cfa_offset 136
 273 0004 00AF     		add	r7, sp, #0
 274              	.LCFI5:
 275              		.cfi_def_cfa_register 7
 276 0006 F860     		str	r0, [r7, #12]
 277 0008 B960     		str	r1, [r7, #8]
 278 000a 7A60     		str	r2, [r7, #4]
 279 000c 3B60     		str	r3, [r7, #0]
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
 280              		.loc 1 167 0
 281 000e 4FF00003 		mov	r3, #0
 282 0012 7B83     		strh	r3, [r7, #26]	@ movhi
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitskey = 0;
 283              		.loc 1 168 0
 284 0014 4FF00003 		mov	r3, #0
 285 0018 3B83     		strh	r3, [r7, #24]	@ movhi
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
 286              		.loc 1 169 0
 287 001a 4FF00003 		mov	r3, #0
 288 001e 7B67     		str	r3, [r7, #116]
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
 289              		.loc 1 170 0
 290 0020 4FF00003 		mov	r3, #0
 291 0024 7B61     		str	r3, [r7, #20]
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 292              		.loc 1 171 0
 293 0026 4FF00003 		mov	r3, #0
 294 002a 7B66     		str	r3, [r7, #100]
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
 295              		.loc 1 172 0
 296 002c 4FF00103 		mov	r3, #1
 297 0030 87F87330 		strb	r3, [r7, #115]
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 298              		.loc 1 173 0
 299 0034 FB68     		ldr	r3, [r7, #12]
 300 0036 FB66     		str	r3, [r7, #108]
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 301              		.loc 1 174 0
 302 0038 7B68     		ldr	r3, [r7, #4]
 303 003a BB66     		str	r3, [r7, #104]
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 304              		.loc 1 175 0
 305 003c D7F88830 		ldr	r3, [r7, #136]
 306 0040 3B66     		str	r3, [r7, #96]
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 307              		.loc 1 178 0
 308 0042 3B68     		ldr	r3, [r7, #0]
 309 0044 9BB2     		uxth	r3, r3
 310 0046 03F00303 		and	r3, r3, #3
 311 004a 9BB2     		uxth	r3, r3
 312 004c 4FEAC303 		lsl	r3, r3, #3
 313 0050 9BB2     		uxth	r3, r3
 314 0052 7B83     		strh	r3, [r7, #26]	@ movhi
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Key */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 315              		.loc 1 181 0
 316 0054 BB68     		ldr	r3, [r7, #8]
 317 0056 9BB2     		uxth	r3, r3
 318 0058 03F00303 		and	r3, r3, #3
 319 005c 9BB2     		uxth	r3, r3
 320 005e 4FEAC303 		lsl	r3, r3, #3
 321 0062 9BB2     		uxth	r3, r3
 322 0064 3B83     		strh	r3, [r7, #24]	@ movhi
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****    
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
 323              		.loc 1 184 0
 324 0066 FFF7FEFF 		bl	HASH_DeInit
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 325              		.loc 1 187 0
 326 006a 4FF08003 		mov	r3, #128
 327 006e 3B63     		str	r3, [r7, #48]
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 328              		.loc 1 188 0
 329 0070 4FF04003 		mov	r3, #64
 330 0074 7B63     		str	r3, [r7, #52]
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 331              		.loc 1 189 0
 332 0076 4FF02003 		mov	r3, #32
 333 007a BB63     		str	r3, [r7, #56]
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   if(Keylen > 64)
 334              		.loc 1 190 0
 335 007c BB68     		ldr	r3, [r7, #8]
 336 007e 402B     		cmp	r3, #64
 337 0080 03D9     		bls	.L9
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* HMAC long Key */
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 338              		.loc 1 193 0
 339 0082 4FF48033 		mov	r3, #65536
 340 0086 FB63     		str	r3, [r7, #60]
 341 0088 02E0     		b	.L10
 342              	.L9:
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   else
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* HMAC short Key */
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 343              		.loc 1 198 0
 344 008a 4FF00003 		mov	r3, #0
 345 008e FB63     		str	r3, [r7, #60]
 346              	.L10:
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
 347              		.loc 1 200 0
 348 0090 07F13003 		add	r3, r7, #48
 349 0094 1846     		mov	r0, r3
 350 0096 FFF7FEFF 		bl	HASH_Init
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the Key */
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 351              		.loc 1 203 0
 352 009a 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 353 009c 9BB2     		uxth	r3, r3
 354 009e 1846     		mov	r0, r3
 355 00a0 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Write the Key */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 356              		.loc 1 206 0
 357 00a4 4FF00003 		mov	r3, #0
 358 00a8 7B67     		str	r3, [r7, #116]
 359 00aa 0CE0     		b	.L11
 360              	.L12:
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 361              		.loc 1 208 0 discriminator 2
 362 00ac FB6E     		ldr	r3, [r7, #108]
 363 00ae 1B68     		ldr	r3, [r3, #0]
 364 00b0 1846     		mov	r0, r3
 365 00b2 FFF7FEFF 		bl	HASH_DataIn
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     keyaddr+=4;
 366              		.loc 1 209 0 discriminator 2
 367 00b6 FB6E     		ldr	r3, [r7, #108]
 368 00b8 03F10403 		add	r3, r3, #4
 369 00bc FB66     		str	r3, [r7, #108]
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 370              		.loc 1 206 0 discriminator 2
 371 00be 7B6F     		ldr	r3, [r7, #116]
 372 00c0 03F10403 		add	r3, r3, #4
 373 00c4 7B67     		str	r3, [r7, #116]
 374              	.L11:
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 375              		.loc 1 206 0 is_stmt 0 discriminator 1
 376 00c6 7A6F     		ldr	r2, [r7, #116]
 377 00c8 BB68     		ldr	r3, [r7, #8]
 378 00ca 9A42     		cmp	r2, r3
 379 00cc EED3     		bcc	.L12
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 380              		.loc 1 213 0 is_stmt 1
 381 00ce FFF7FEFF 		bl	HASH_StartDigest
 382              	.L14:
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   do
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 383              		.loc 1 218 0 discriminator 1
 384 00d2 4FF00800 		mov	r0, #8
 385 00d6 FFF7FEFF 		bl	HASH_GetFlagStatus
 386 00da 0346     		mov	r3, r0
 387 00dc 7B66     		str	r3, [r7, #100]
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     counter++;
 388              		.loc 1 219 0 discriminator 1
 389 00de 7B69     		ldr	r3, [r7, #20]
 390 00e0 03F10103 		add	r3, r3, #1
 391 00e4 7B61     		str	r3, [r7, #20]
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 392              		.loc 1 220 0 discriminator 1
 393 00e6 7B69     		ldr	r3, [r7, #20]
 394 00e8 B3F5803F 		cmp	r3, #65536
 395 00ec 02D0     		beq	.L13
 396 00ee 7B6E     		ldr	r3, [r7, #100]
 397 00f0 002B     		cmp	r3, #0
 398 00f2 EED1     		bne	.L14
 399              	.L13:
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 400              		.loc 1 222 0
 401 00f4 7B6E     		ldr	r3, [r7, #100]
 402 00f6 002B     		cmp	r3, #0
 403 00f8 04D0     		beq	.L15
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 404              		.loc 1 224 0
 405 00fa 4FF00003 		mov	r3, #0
 406 00fe 87F87330 		strb	r3, [r7, #115]
 407 0102 A2E0     		b	.L16
 408              	.L15:
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   else
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Configure the number of valid bits in last word of the Input data */
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 409              		.loc 1 229 0
 410 0104 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 411 0106 9BB2     		uxth	r3, r3
 412 0108 1846     		mov	r0, r3
 413 010a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Write the Input block in the IN FIFO */
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 414              		.loc 1 232 0
 415 010e 4FF00003 		mov	r3, #0
 416 0112 7B67     		str	r3, [r7, #116]
 417 0114 0CE0     		b	.L17
 418              	.L18:
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 419              		.loc 1 234 0 discriminator 2
 420 0116 BB6E     		ldr	r3, [r7, #104]
 421 0118 1B68     		ldr	r3, [r3, #0]
 422 011a 1846     		mov	r0, r3
 423 011c FFF7FEFF 		bl	HASH_DataIn
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 424              		.loc 1 235 0 discriminator 2
 425 0120 BB6E     		ldr	r3, [r7, #104]
 426 0122 03F10403 		add	r3, r3, #4
 427 0126 BB66     		str	r3, [r7, #104]
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 428              		.loc 1 232 0 discriminator 2
 429 0128 7B6F     		ldr	r3, [r7, #116]
 430 012a 03F10403 		add	r3, r3, #4
 431 012e 7B67     		str	r3, [r7, #116]
 432              	.L17:
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 433              		.loc 1 232 0 is_stmt 0 discriminator 1
 434 0130 7A6F     		ldr	r2, [r7, #116]
 435 0132 3B68     		ldr	r3, [r7, #0]
 436 0134 9A42     		cmp	r2, r3
 437 0136 EED3     		bcc	.L18
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Start the HASH processor */
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_StartDigest();
 438              		.loc 1 239 0 is_stmt 1
 439 0138 FFF7FEFF 		bl	HASH_StartDigest
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* wait until the Busy flag is RESET */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     counter =0;
 440              		.loc 1 242 0
 441 013c 4FF00003 		mov	r3, #0
 442 0140 7B61     		str	r3, [r7, #20]
 443              	.L20:
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     do
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 444              		.loc 1 245 0 discriminator 1
 445 0142 4FF00800 		mov	r0, #8
 446 0146 FFF7FEFF 		bl	HASH_GetFlagStatus
 447 014a 0346     		mov	r3, r0
 448 014c 7B66     		str	r3, [r7, #100]
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        counter++;
 449              		.loc 1 246 0 discriminator 1
 450 014e 7B69     		ldr	r3, [r7, #20]
 451 0150 03F10103 		add	r3, r3, #1
 452 0154 7B61     		str	r3, [r7, #20]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 453              		.loc 1 247 0 discriminator 1
 454 0156 7B69     		ldr	r3, [r7, #20]
 455 0158 B3F5803F 		cmp	r3, #65536
 456 015c 02D0     		beq	.L19
 457 015e 7B6E     		ldr	r3, [r7, #100]
 458 0160 002B     		cmp	r3, #0
 459 0162 EED1     		bne	.L20
 460              	.L19:
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     if (busystatus != RESET)
 461              		.loc 1 249 0
 462 0164 7B6E     		ldr	r3, [r7, #100]
 463 0166 002B     		cmp	r3, #0
 464 0168 04D0     		beq	.L21
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       status = ERROR;
 465              		.loc 1 251 0
 466 016a 4FF00003 		mov	r3, #0
 467 016e 87F87330 		strb	r3, [r7, #115]
 468 0172 6AE0     		b	.L16
 469              	.L21:
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     else
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {  
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       /* Configure the number of valid bits in last word of the Key */
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 470              		.loc 1 256 0
 471 0174 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 472 0176 9BB2     		uxth	r3, r3
 473 0178 1846     		mov	r0, r3
 474 017a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       /* Write the Key */
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       keyaddr = (uint32_t)Key;
 475              		.loc 1 259 0
 476 017e FB68     		ldr	r3, [r7, #12]
 477 0180 FB66     		str	r3, [r7, #108]
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 478              		.loc 1 260 0
 479 0182 4FF00003 		mov	r3, #0
 480 0186 7B67     		str	r3, [r7, #116]
 481 0188 0CE0     		b	.L22
 482              	.L23:
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       {
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 483              		.loc 1 262 0 discriminator 2
 484 018a FB6E     		ldr	r3, [r7, #108]
 485 018c 1B68     		ldr	r3, [r3, #0]
 486 018e 1846     		mov	r0, r3
 487 0190 FFF7FEFF 		bl	HASH_DataIn
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 488              		.loc 1 263 0 discriminator 2
 489 0194 FB6E     		ldr	r3, [r7, #108]
 490 0196 03F10403 		add	r3, r3, #4
 491 019a FB66     		str	r3, [r7, #108]
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 492              		.loc 1 260 0 discriminator 2
 493 019c 7B6F     		ldr	r3, [r7, #116]
 494 019e 03F10403 		add	r3, r3, #4
 495 01a2 7B67     		str	r3, [r7, #116]
 496              	.L22:
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 497              		.loc 1 260 0 is_stmt 0 discriminator 1
 498 01a4 7A6F     		ldr	r2, [r7, #116]
 499 01a6 BB68     		ldr	r3, [r7, #8]
 500 01a8 9A42     		cmp	r2, r3
 501 01aa EED3     		bcc	.L23
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        /* Start the HASH processor */
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        HASH_StartDigest();
 502              		.loc 1 267 0 is_stmt 1
 503 01ac FFF7FEFF 		bl	HASH_StartDigest
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        /* wait until the Busy flag is RESET */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        counter =0;
 504              		.loc 1 270 0
 505 01b0 4FF00003 		mov	r3, #0
 506 01b4 7B61     		str	r3, [r7, #20]
 507              	.L25:
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        do
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        {
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 508              		.loc 1 273 0 discriminator 1
 509 01b6 4FF00800 		mov	r0, #8
 510 01ba FFF7FEFF 		bl	HASH_GetFlagStatus
 511 01be 0346     		mov	r3, r0
 512 01c0 7B66     		str	r3, [r7, #100]
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****           counter++;
 513              		.loc 1 274 0 discriminator 1
 514 01c2 7B69     		ldr	r3, [r7, #20]
 515 01c4 03F10103 		add	r3, r3, #1
 516 01c8 7B61     		str	r3, [r7, #20]
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 517              		.loc 1 275 0 discriminator 1
 518 01ca 7B69     		ldr	r3, [r7, #20]
 519 01cc B3F5803F 		cmp	r3, #65536
 520 01d0 02D0     		beq	.L24
 521 01d2 7B6E     		ldr	r3, [r7, #100]
 522 01d4 002B     		cmp	r3, #0
 523 01d6 EED1     		bne	.L25
 524              	.L24:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       if (busystatus != RESET)
 525              		.loc 1 277 0
 526 01d8 7B6E     		ldr	r3, [r7, #100]
 527 01da 002B     		cmp	r3, #0
 528 01dc 04D0     		beq	.L26
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       {
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          status = ERROR;
 529              		.loc 1 279 0
 530 01de 4FF00003 		mov	r3, #0
 531 01e2 87F87330 		strb	r3, [r7, #115]
 532 01e6 30E0     		b	.L16
 533              	.L26:
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       else
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       {
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          /* Read the message digest */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          HASH_GetDigest(&MD5_MessageDigest);
 534              		.loc 1 284 0
 535 01e8 07F11C03 		add	r3, r7, #28
 536 01ec 1846     		mov	r0, r3
 537 01ee FFF7FEFF 		bl	HASH_GetDigest
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 538              		.loc 1 285 0
 539 01f2 3B6E     		ldr	r3, [r7, #96]
 540 01f4 FA69     		ldr	r2, [r7, #28]
 541 01f6 FA65     		str	r2, [r7, #92]
 542              	.LBB26:
 543              	.LBB27:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 544              		.loc 2 352 0
 545 01f8 FA6D     		ldr	r2, [r7, #92]
 546              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 547 01fa 14BA     		rev r4, r2
 548              	@ 0 "" 2
 549              		.thumb
 550 01fc BC65     		str	r4, [r7, #88]
 551              		.loc 2 353 0
 552 01fe BA6D     		ldr	r2, [r7, #88]
 553              	.LBE27:
 554              	.LBE26:
 555              		.loc 1 285 0
 556 0200 1A60     		str	r2, [r3, #0]
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 557              		.loc 1 286 0
 558 0202 3B6E     		ldr	r3, [r7, #96]
 559 0204 03F10403 		add	r3, r3, #4
 560 0208 3B66     		str	r3, [r7, #96]
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 561              		.loc 1 287 0
 562 020a 3B6E     		ldr	r3, [r7, #96]
 563 020c 3A6A     		ldr	r2, [r7, #32]
 564 020e 7A65     		str	r2, [r7, #84]
 565              	.LBB28:
 566              	.LBB29:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 567              		.loc 2 352 0
 568 0210 7A6D     		ldr	r2, [r7, #84]
 569              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 570 0212 14BA     		rev r4, r2
 571              	@ 0 "" 2
 572              		.thumb
 573 0214 3C65     		str	r4, [r7, #80]
 574              		.loc 2 353 0
 575 0216 3A6D     		ldr	r2, [r7, #80]
 576              	.LBE29:
 577              	.LBE28:
 578              		.loc 1 287 0
 579 0218 1A60     		str	r2, [r3, #0]
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 580              		.loc 1 288 0
 581 021a 3B6E     		ldr	r3, [r7, #96]
 582 021c 03F10403 		add	r3, r3, #4
 583 0220 3B66     		str	r3, [r7, #96]
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 584              		.loc 1 289 0
 585 0222 3B6E     		ldr	r3, [r7, #96]
 586 0224 7A6A     		ldr	r2, [r7, #36]
 587 0226 FA64     		str	r2, [r7, #76]
 588              	.LBB30:
 589              	.LBB31:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 590              		.loc 2 352 0
 591 0228 FA6C     		ldr	r2, [r7, #76]
 592              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 593 022a 14BA     		rev r4, r2
 594              	@ 0 "" 2
 595              		.thumb
 596 022c BC64     		str	r4, [r7, #72]
 597              		.loc 2 353 0
 598 022e BA6C     		ldr	r2, [r7, #72]
 599              	.LBE31:
 600              	.LBE30:
 601              		.loc 1 289 0
 602 0230 1A60     		str	r2, [r3, #0]
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 603              		.loc 1 290 0
 604 0232 3B6E     		ldr	r3, [r7, #96]
 605 0234 03F10403 		add	r3, r3, #4
 606 0238 3B66     		str	r3, [r7, #96]
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 607              		.loc 1 291 0
 608 023a 3B6E     		ldr	r3, [r7, #96]
 609 023c BA6A     		ldr	r2, [r7, #40]
 610 023e 7A64     		str	r2, [r7, #68]
 611              	.LBB32:
 612              	.LBB33:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 613              		.loc 2 352 0
 614 0240 7A6C     		ldr	r2, [r7, #68]
 615              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 616 0242 14BA     		rev r4, r2
 617              	@ 0 "" 2
 618              		.thumb
 619 0244 3C64     		str	r4, [r7, #64]
 620              		.loc 2 353 0
 621 0246 3A6C     		ldr	r2, [r7, #64]
 622              	.LBE33:
 623              	.LBE32:
 624              		.loc 1 291 0
 625 0248 1A60     		str	r2, [r3, #0]
 626              	.L16:
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   return status;  
 627              		.loc 1 295 0
 628 024a 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** }
 629              		.loc 1 296 0
 630 024e 1846     		mov	r0, r3
 631 0250 07F17C07 		add	r7, r7, #124
 632 0254 BD46     		mov	sp, r7
 633 0256 90BD     		pop	{r4, r7, pc}
 634              		.cfi_endproc
 635              	.LFE111:
 637              		.text
 638              	.Letext0:
 639              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 640              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 641              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 642              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hash_md5.c
C:\Users\Alex\AppData\Local\Temp\ccMwLlbC.s:19     .text.HASH_MD5:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccMwLlbC.s:24     .text.HASH_MD5:00000000 HASH_MD5
C:\Users\Alex\AppData\Local\Temp\ccMwLlbC.s:253    .text.HMAC_MD5:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccMwLlbC.s:258    .text.HMAC_MD5:00000000 HMAC_MD5
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
