   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_wwdg.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.WWDG_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	WWDG_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	WWDG_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @file    stm32f4xx_wwdg.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          functionalities of the Window watchdog (WWDG) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *           - Prescaler, Refresh window and Counter configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *           - WWDG activation
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *           - Interrupts and flags management
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *  @verbatim
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *    
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          ===================================================================
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                                     WWDG features
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          ===================================================================
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                                        
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          Once enabled the WWDG generates a system reset on expiry of a programmed
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          time period, unless the program refreshes the counter (downcounter) 
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          before to reach 0x3F value (i.e. a reset is generated when the counter
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          value rolls over from 0x40 to 0x3F). 
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          An MCU reset is also generated if the counter value is refreshed
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          before the counter has reached the refresh window value. This 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          implies that the counter must be refreshed in a limited window.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *            
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          Once enabled the WWDG cannot be disabled except by a system reset.                    
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          reset occurs.
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *            
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          The WWDG counter input clock is derived from the APB clock divided 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          by a programmable prescaler.
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *              
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          WWDG counter clock = PCLK1 / Prescaler
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          WWDG timeout = (WWDG counter clock) * (counter value)
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                      
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          Min-max timeout value @30 MHz(PCLK1): ~136.5 us / ~69.9 ms
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                            
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          ===================================================================
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                                 How to use this driver
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          =================================================================== 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          1. Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) functio
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *            
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          2. Configure the WWDG prescaler using WWDG_SetPrescaler() function
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                           
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          3. Configure the WWDG refresh window using WWDG_SetWindowValue() function
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *            
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          4. Set the WWDG counter value and start it using WWDG_Enable() function.
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             When the WWDG is enabled the counter value should be configured to 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             a value greater than 0x40 to prevent generating an immediate reset.     
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *            
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          5. Optionally you can enable the Early wakeup interrupt which is 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             generated when the counter reach 0x40.
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             Once enabled this interrupt cannot be disabled except by a system reset.
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *          6. Then the application program must refresh the WWDG counter at regular
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             intervals during normal operation to prevent an MCU reset, using
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             WWDG_SetCounter() function. This operation must occur only when
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             the counter value is lower than the refresh window value, 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *             programmed using WWDG_SetWindowValue().         
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *  @endverbatim  
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *                             
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   ******************************************************************************
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @attention
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   ******************************************************************************
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Includes ------------------------------------------------------------------*/
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #include "stm32f4xx_wwdg.h"
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #include "stm32f4xx_rcc.h"
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @{
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG 
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief WWDG driver modules
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @{
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Private define ------------------------------------------------------------*/
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* ----------- WWDG registers bit address in the alias region ----------- */
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Alias word address of EWI bit */
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define EWI_BitNumber     0x09
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* --------------------- WWDG registers bit mask ------------------------ */
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* CFR register bit mask */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** #define BIT_MASK          ((uint8_t)0x7F)
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /* Private functions ---------------------------------------------------------*/
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Private_Functions
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @{
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  *  @brief   Prescaler, Refresh window and Counter configuration functions 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  *
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** @verbatim   
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  ===============================================================================
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****           Prescaler, Refresh window and Counter configuration functions
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  ===============================================================================  
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** @endverbatim
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @{
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  None
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_DeInit(void)
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
  27              		.loc 1 135 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 3, -8
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  36              		.loc 1 136 0
  37 0002 0121     		movs	r1, #1
  38 0004 4FF40060 		mov	r0, #2048
  39 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  40              		.loc 1 137 0
  41 000c 4FF40060 		mov	r0, #2048
  42 0010 0021     		movs	r1, #0
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
  43              		.loc 1 138 0
  44 0012 BDE80840 		pop	{r3, lr}
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  45              		.loc 1 137 0
  46 0016 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  47              		.cfi_endproc
  48              	.LFE110:
  50              		.section	.text.WWDG_SetPrescaler,"ax",%progbits
  51              		.align	1
  52              		.global	WWDG_SetPrescaler
  53              		.thumb
  54              		.thumb_func
  56              	WWDG_SetPrescaler:
  57              	.LFB111:
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG Prescaler.
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *   This parameter can be one of the following values:
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
  58              		.loc 1 151 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL0:
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   uint32_t tmpreg = 0;
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Clear WDGTB[1:0] bits */
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  64              		.loc 1 156 0
  65 0000 034B     		ldr	r3, .L3
  66 0002 5A68     		ldr	r2, [r3, #4]
  67 0004 22F4C072 		bic	r2, r2, #384
  68              	.LVL1:
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   tmpreg |= WWDG_Prescaler;
  69              		.loc 1 158 0
  70 0008 1043     		orrs	r0, r0, r2
  71              	.LVL2:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Store the new value */
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
  72              		.loc 1 160 0
  73 000a 5860     		str	r0, [r3, #4]
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
  74              		.loc 1 161 0
  75 000c 7047     		bx	lr
  76              	.L4:
  77 000e 00BF     		.align	2
  78              	.L3:
  79 0010 002C0040 		.word	1073753088
  80              		.cfi_endproc
  81              	.LFE111:
  83              		.section	.text.WWDG_SetWindowValue,"ax",%progbits
  84              		.align	1
  85              		.global	WWDG_SetWindowValue
  86              		.thumb
  87              		.thumb_func
  89              	WWDG_SetWindowValue:
  90              	.LFB112:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG window value.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *   This parameter value must be lower than 0x80.
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_SetWindowValue(uint8_t WindowValue)
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
  91              		.loc 1 170 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 8
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL3:
  97 0000 82B0     		sub	sp, sp, #8
  98              	.LCFI1:
  99              		.cfi_def_cfa_offset 8
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   __IO uint32_t tmpreg = 0;
 100              		.loc 1 171 0
 101 0002 0023     		movs	r3, #0
 102 0004 0193     		str	r3, [sp, #4]
 103              	.LVL4:
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Clear W[6:0] bits */
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_W_MASK;
 104              		.loc 1 177 0
 105 0006 074B     		ldr	r3, .L6
 106 0008 5A68     		ldr	r2, [r3, #4]
 107 000a 22F07F02 		bic	r2, r2, #127
 108              	.LVL5:
 109 000e 0192     		str	r2, [sp, #4]
 110              	.LVL6:
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Set W[6:0] bits according to WindowValue value */
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 111              		.loc 1 180 0
 112 0010 019A     		ldr	r2, [sp, #4]
 113              	.LVL7:
 114 0012 00F07F00 		and	r0, r0, #127
 115              	.LVL8:
 116 0016 1043     		orrs	r0, r0, r2
 117              	.LVL9:
 118 0018 0190     		str	r0, [sp, #4]
 119              	.LVL10:
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Store the new value */
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
 120              		.loc 1 183 0
 121 001a 019A     		ldr	r2, [sp, #4]
 122 001c 5A60     		str	r2, [r3, #4]
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
 123              		.loc 1 184 0
 124 001e 02B0     		add	sp, sp, #8
 125 0020 7047     		bx	lr
 126              	.L7:
 127 0022 00BF     		.align	2
 128              	.L6:
 129 0024 002C0040 		.word	1073753088
 130              		.cfi_endproc
 131              	.LFE112:
 133              		.section	.text.WWDG_EnableIT,"ax",%progbits
 134              		.align	1
 135              		.global	WWDG_EnableIT
 136              		.thumb
 137              		.thumb_func
 139              	WWDG_EnableIT:
 140              	.LFB113:
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @note   Once enabled this interrupt cannot be disabled except by a system reset.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  None
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_EnableIT(void)
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
 141              		.loc 1 193 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 146              		.loc 1 194 0
 147 0000 014B     		ldr	r3, .L9
 148 0002 0122     		movs	r2, #1
 149 0004 1A60     		str	r2, [r3, #0]
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
 150              		.loc 1 195 0
 151 0006 7047     		bx	lr
 152              	.L10:
 153              		.align	2
 154              	.L9:
 155 0008 A4800542 		.word	1107656868
 156              		.cfi_endproc
 157              	.LFE113:
 159              		.section	.text.WWDG_SetCounter,"ax",%progbits
 160              		.align	1
 161              		.global	WWDG_SetCounter
 162              		.thumb
 163              		.thumb_func
 165              	WWDG_SetCounter:
 166              	.LFB114:
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG counter value.
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *   an immediate reset) 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_SetCounter(uint8_t Counter)
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
 167              		.loc 1 205 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172              	.LVL11:
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Write to T[6:0] bits to configure the counter value, no need to do
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****      a read-modify-write; writing a 0 to WDGA bit does nothing */
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
 173              		.loc 1 210 0
 174 0000 024B     		ldr	r3, .L12
 175 0002 00F07F00 		and	r0, r0, #127
 176              	.LVL12:
 177 0006 1860     		str	r0, [r3, #0]
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
 178              		.loc 1 211 0
 179 0008 7047     		bx	lr
 180              	.L13:
 181 000a 00BF     		.align	2
 182              	.L12:
 183 000c 002C0040 		.word	1073753088
 184              		.cfi_endproc
 185              	.LFE114:
 187              		.section	.text.WWDG_Enable,"ax",%progbits
 188              		.align	1
 189              		.global	WWDG_Enable
 190              		.thumb
 191              		.thumb_func
 193              	WWDG_Enable:
 194              	.LFB115:
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @}
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group2 WWDG activation functions
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  *  @brief   WWDG activation functions 
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  *
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** @verbatim   
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  ===============================================================================
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****                        WWDG activation function
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  ===============================================================================  
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** @endverbatim
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @{
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Enables WWDG and load the counter value.                  
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   *   an immediate reset)
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_Enable(uint8_t Counter)
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
 195              		.loc 1 236 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 200              	.LVL13:
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 201              		.loc 1 239 0
 202 0000 024B     		ldr	r3, .L15
 203 0002 40F08000 		orr	r0, r0, #128
 204              	.LVL14:
 205 0006 1860     		str	r0, [r3, #0]
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
 206              		.loc 1 240 0
 207 0008 7047     		bx	lr
 208              	.L16:
 209 000a 00BF     		.align	2
 210              	.L15:
 211 000c 002C0040 		.word	1073753088
 212              		.cfi_endproc
 213              	.LFE115:
 215              		.section	.text.WWDG_GetFlagStatus,"ax",%progbits
 216              		.align	1
 217              		.global	WWDG_GetFlagStatus
 218              		.thumb
 219              		.thumb_func
 221              	WWDG_GetFlagStatus:
 222              	.LFB116:
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @}
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group3 Interrupts and flags management functions
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  *  @brief   Interrupts and flags management functions 
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  *
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** @verbatim   
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  ===============================================================================
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****                  Interrupts and flags management functions
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****  ===============================================================================  
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** @endverbatim
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @{
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  None
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** FlagStatus WWDG_GetFlagStatus(void)
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
 223              		.loc 1 263 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL15:
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   FlagStatus bitstatus = RESET;
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****     
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 229              		.loc 1 266 0
 230 0000 024B     		ldr	r3, .L18
 231 0002 9868     		ldr	r0, [r3, #8]
 232              	.LVL16:
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   {
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****     bitstatus = SET;
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   }
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   else
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   {
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****     bitstatus = RESET;
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   }
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   return bitstatus;
 233              		.loc 1 274 0
 234 0004 0030     		adds	r0, r0, #0
 235 0006 18BF     		it	ne
 236 0008 0120     		movne	r0, #1
 237              	.LVL17:
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
 238              		.loc 1 275 0
 239 000a 7047     		bx	lr
 240              	.L19:
 241              		.align	2
 242              	.L18:
 243 000c 002C0040 		.word	1073753088
 244              		.cfi_endproc
 245              	.LFE116:
 247              		.section	.text.WWDG_ClearFlag,"ax",%progbits
 248              		.align	1
 249              		.global	WWDG_ClearFlag
 250              		.thumb
 251              		.thumb_func
 253              	WWDG_ClearFlag:
 254              	.LFB117:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** 
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** /**
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @brief  Clears Early Wakeup interrupt flag.
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @param  None
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   * @retval None
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   */
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** void WWDG_ClearFlag(void)
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** {
 255              		.loc 1 283 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c ****   WWDG->SR = (uint32_t)RESET;
 260              		.loc 1 284 0
 261 0000 014B     		ldr	r3, .L21
 262 0002 0022     		movs	r2, #0
 263 0004 9A60     		str	r2, [r3, #8]
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c **** }
 264              		.loc 1 285 0
 265 0006 7047     		bx	lr
 266              	.L22:
 267              		.align	2
 268              	.L21:
 269 0008 002C0040 		.word	1073753088
 270              		.cfi_endproc
 271              	.LFE117:
 273              		.text
 274              	.Letext0:
 275              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 276              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 277              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_wwdg.c
  C:\Temp\ccuerEjZ.s:19     .text.WWDG_DeInit:00000000 $t
  C:\Temp\ccuerEjZ.s:24     .text.WWDG_DeInit:00000000 WWDG_DeInit
  C:\Temp\ccuerEjZ.s:51     .text.WWDG_SetPrescaler:00000000 $t
  C:\Temp\ccuerEjZ.s:56     .text.WWDG_SetPrescaler:00000000 WWDG_SetPrescaler
  C:\Temp\ccuerEjZ.s:79     .text.WWDG_SetPrescaler:00000010 $d
  C:\Temp\ccuerEjZ.s:84     .text.WWDG_SetWindowValue:00000000 $t
  C:\Temp\ccuerEjZ.s:89     .text.WWDG_SetWindowValue:00000000 WWDG_SetWindowValue
  C:\Temp\ccuerEjZ.s:129    .text.WWDG_SetWindowValue:00000024 $d
  C:\Temp\ccuerEjZ.s:134    .text.WWDG_EnableIT:00000000 $t
  C:\Temp\ccuerEjZ.s:139    .text.WWDG_EnableIT:00000000 WWDG_EnableIT
  C:\Temp\ccuerEjZ.s:155    .text.WWDG_EnableIT:00000008 $d
  C:\Temp\ccuerEjZ.s:160    .text.WWDG_SetCounter:00000000 $t
  C:\Temp\ccuerEjZ.s:165    .text.WWDG_SetCounter:00000000 WWDG_SetCounter
  C:\Temp\ccuerEjZ.s:183    .text.WWDG_SetCounter:0000000c $d
  C:\Temp\ccuerEjZ.s:188    .text.WWDG_Enable:00000000 $t
  C:\Temp\ccuerEjZ.s:193    .text.WWDG_Enable:00000000 WWDG_Enable
  C:\Temp\ccuerEjZ.s:211    .text.WWDG_Enable:0000000c $d
  C:\Temp\ccuerEjZ.s:216    .text.WWDG_GetFlagStatus:00000000 $t
  C:\Temp\ccuerEjZ.s:221    .text.WWDG_GetFlagStatus:00000000 WWDG_GetFlagStatus
  C:\Temp\ccuerEjZ.s:243    .text.WWDG_GetFlagStatus:0000000c $d
  C:\Temp\ccuerEjZ.s:248    .text.WWDG_ClearFlag:00000000 $t
  C:\Temp\ccuerEjZ.s:253    .text.WWDG_ClearFlag:00000000 WWDG_ClearFlag
  C:\Temp\ccuerEjZ.s:269    .text.WWDG_ClearFlag:00000008 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
