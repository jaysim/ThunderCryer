   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RCC_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	RCC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	RCC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  27              		.loc 1 197 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  32              		.loc 1 199 0
  33 0000 0A4B     		ldr	r3, .L2
  34 0002 1A68     		ldr	r2, [r3, #0]
  35 0004 42F00102 		orr	r2, r2, #1
  36 0008 1A60     		str	r2, [r3, #0]
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  37              		.loc 1 202 0
  38 000a 0022     		movs	r2, #0
  39 000c 9A60     		str	r2, [r3, #8]
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  40              		.loc 1 205 0
  41 000e 1968     		ldr	r1, [r3, #0]
  42 0010 21F08471 		bic	r1, r1, #17301504
  43 0014 21F48031 		bic	r1, r1, #65536
  44 0018 1960     		str	r1, [r3, #0]
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  45              		.loc 1 208 0
  46 001a 0549     		ldr	r1, .L2+4
  47 001c 5960     		str	r1, [r3, #4]
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  48              		.loc 1 211 0
  49 001e 1968     		ldr	r1, [r3, #0]
  50 0020 21F48021 		bic	r1, r1, #262144
  51 0024 1960     		str	r1, [r3, #0]
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  52              		.loc 1 214 0
  53 0026 DA60     		str	r2, [r3, #12]
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  54              		.loc 1 215 0
  55 0028 7047     		bx	lr
  56              	.L3:
  57 002a 00BF     		.align	2
  58              	.L2:
  59 002c 00380240 		.word	1073887232
  60 0030 10300024 		.word	603992080
  61              		.cfi_endproc
  62              	.LFE110:
  64              		.section	.text.RCC_HSEConfig,"ax",%progbits
  65              		.align	1
  66              		.global	RCC_HSEConfig
  67              		.thumb
  68              		.thumb_func
  70              	RCC_HSEConfig:
  71              	.LFB111:
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  72              		.loc 1 238 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.LVL0:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  78              		.loc 1 243 0
  79 0000 024B     		ldr	r3, .L5
  80 0002 0022     		movs	r2, #0
  81 0004 1A70     		strb	r2, [r3, #0]
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  82              		.loc 1 246 0
  83 0006 1870     		strb	r0, [r3, #0]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  84              		.loc 1 247 0
  85 0008 7047     		bx	lr
  86              	.L6:
  87 000a 00BF     		.align	2
  88              	.L5:
  89 000c 02380240 		.word	1073887234
  90              		.cfi_endproc
  91              	.LFE111:
  93              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
  94              		.align	1
  95              		.global	RCC_AdjustHSICalibrationValue
  96              		.thumb
  97              		.thumb_func
  99              	RCC_AdjustHSICalibrationValue:
 100              	.LFB113:
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 101              		.loc 1 293 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL1:
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 107              		.loc 1 298 0
 108 0000 034B     		ldr	r3, .L8
 109 0002 1A68     		ldr	r2, [r3, #0]
 110              	.LVL2:
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 111              		.loc 1 301 0
 112 0004 22F0F802 		bic	r2, r2, #248
 113              	.LVL3:
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 114              		.loc 1 304 0
 115 0008 42EAC000 		orr	r0, r2, r0, lsl #3
 116              	.LVL4:
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 117              		.loc 1 307 0
 118 000c 1860     		str	r0, [r3, #0]
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 119              		.loc 1 308 0
 120 000e 7047     		bx	lr
 121              	.L9:
 122              		.align	2
 123              	.L8:
 124 0010 00380240 		.word	1073887232
 125              		.cfi_endproc
 126              	.LFE113:
 128              		.section	.text.RCC_HSICmd,"ax",%progbits
 129              		.align	1
 130              		.global	RCC_HSICmd
 131              		.thumb
 132              		.thumb_func
 134              	RCC_HSICmd:
 135              	.LFB114:
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 136              		.loc 1 329 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL5:
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 142              		.loc 1 333 0
 143 0000 014B     		ldr	r3, .L11
 144 0002 1860     		str	r0, [r3, #0]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 145              		.loc 1 334 0
 146 0004 7047     		bx	lr
 147              	.L12:
 148 0006 00BF     		.align	2
 149              	.L11:
 150 0008 00004742 		.word	1111949312
 151              		.cfi_endproc
 152              	.LFE114:
 154              		.section	.text.RCC_LSEConfig,"ax",%progbits
 155              		.align	1
 156              		.global	RCC_LSEConfig
 157              		.thumb
 158              		.thumb_func
 160              	RCC_LSEConfig:
 161              	.LFB115:
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 162              		.loc 1 354 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167              	.LVL6:
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 168              		.loc 1 360 0
 169 0000 064B     		ldr	r3, .L18
 170 0002 0022     		movs	r2, #0
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 171              		.loc 1 366 0
 172 0004 0128     		cmp	r0, #1
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 173              		.loc 1 360 0
 174 0006 1A70     		strb	r2, [r3, #0]
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 175              		.loc 1 363 0
 176 0008 1A70     		strb	r2, [r3, #0]
 177              		.loc 1 366 0
 178 000a 02D0     		beq	.L15
 179 000c 0428     		cmp	r0, #4
 180 000e 04D1     		bne	.L13
 181 0010 01E0     		b	.L17
 182              	.L15:
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 183              		.loc 1 370 0
 184 0012 1870     		strb	r0, [r3, #0]
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 185              		.loc 1 371 0
 186 0014 7047     		bx	lr
 187              	.L17:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 188              		.loc 1 374 0
 189 0016 0522     		movs	r2, #5
 190 0018 1A70     		strb	r2, [r3, #0]
 191              	.L13:
 192 001a 7047     		bx	lr
 193              	.L19:
 194              		.align	2
 195              	.L18:
 196 001c 70380240 		.word	1073887344
 197              		.cfi_endproc
 198              	.LFE115:
 200              		.section	.text.RCC_LSICmd,"ax",%progbits
 201              		.align	1
 202              		.global	RCC_LSICmd
 203              		.thumb
 204              		.thumb_func
 206              	RCC_LSICmd:
 207              	.LFB116:
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 208              		.loc 1 394 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LVL7:
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 214              		.loc 1 398 0
 215 0000 014B     		ldr	r3, .L21
 216 0002 1860     		str	r0, [r3, #0]
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 217              		.loc 1 399 0
 218 0004 7047     		bx	lr
 219              	.L22:
 220 0006 00BF     		.align	2
 221              	.L21:
 222 0008 800E4742 		.word	1111953024
 223              		.cfi_endproc
 224              	.LFE116:
 226              		.section	.text.RCC_PLLConfig,"ax",%progbits
 227              		.align	1
 228              		.global	RCC_PLLConfig
 229              		.thumb
 230              		.thumb_func
 232              	RCC_PLLConfig:
 233              	.LFB117:
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 234              		.loc 1 437 0
 235              		.cfi_startproc
 236              		@ args = 4, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL8:
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 240              		.loc 1 445 0
 241 0000 0143     		orrs	r1, r1, r0
 242              	.LVL9:
 243 0002 41EA8212 		orr	r2, r1, r2, lsl #6
 244              	.LVL10:
 245 0006 0099     		ldr	r1, [sp, #0]
 246 0008 42EA0161 		orr	r1, r2, r1, lsl #24
 247 000c 5A08     		lsrs	r2, r3, #1
 248 000e 013A     		subs	r2, r2, #1
 249 0010 024B     		ldr	r3, .L24
 250              	.LVL11:
 251 0012 41EA0242 		orr	r2, r1, r2, lsl #16
 252 0016 5A60     		str	r2, [r3, #4]
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 253              		.loc 1 447 0
 254 0018 7047     		bx	lr
 255              	.L25:
 256 001a 00BF     		.align	2
 257              	.L24:
 258 001c 00380240 		.word	1073887232
 259              		.cfi_endproc
 260              	.LFE117:
 262              		.section	.text.RCC_PLLCmd,"ax",%progbits
 263              		.align	1
 264              		.global	RCC_PLLCmd
 265              		.thumb
 266              		.thumb_func
 268              	RCC_PLLCmd:
 269              	.LFB118:
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 270              		.loc 1 460 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 275              	.LVL12:
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 276              		.loc 1 463 0
 277 0000 014B     		ldr	r3, .L27
 278 0002 1860     		str	r0, [r3, #0]
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 279              		.loc 1 464 0
 280 0004 7047     		bx	lr
 281              	.L28:
 282 0006 00BF     		.align	2
 283              	.L27:
 284 0008 60004742 		.word	1111949408
 285              		.cfi_endproc
 286              	.LFE118:
 288              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 289              		.align	1
 290              		.global	RCC_PLLI2SConfig
 291              		.thumb
 292              		.thumb_func
 294              	RCC_PLLI2SConfig:
 295              	.LFB119:
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 296              		.loc 1 487 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL13:
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 302              		.loc 1 492 0
 303 0000 8001     		lsls	r0, r0, #6
 304              	.LVL14:
 305 0002 034B     		ldr	r3, .L30
 306 0004 40EA0170 		orr	r0, r0, r1, lsl #28
 307 0008 C3F88400 		str	r0, [r3, #132]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 308              		.loc 1 493 0
 309 000c 7047     		bx	lr
 310              	.L31:
 311 000e 00BF     		.align	2
 312              	.L30:
 313 0010 00380240 		.word	1073887232
 314              		.cfi_endproc
 315              	.LFE119:
 317              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 318              		.align	1
 319              		.global	RCC_PLLI2SCmd
 320              		.thumb
 321              		.thumb_func
 323              	RCC_PLLI2SCmd:
 324              	.LFB120:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 325              		.loc 1 503 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL15:
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 331              		.loc 1 506 0
 332 0000 014B     		ldr	r3, .L33
 333 0002 1860     		str	r0, [r3, #0]
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 334              		.loc 1 507 0
 335 0004 7047     		bx	lr
 336              	.L34:
 337 0006 00BF     		.align	2
 338              	.L33:
 339 0008 68004742 		.word	1111949416
 340              		.cfi_endproc
 341              	.LFE120:
 343              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 344              		.align	1
 345              		.global	RCC_ClockSecuritySystemCmd
 346              		.thumb
 347              		.thumb_func
 349              	RCC_ClockSecuritySystemCmd:
 350              	.LFB121:
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 351              		.loc 1 521 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 356              	.LVL16:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 357              		.loc 1 524 0
 358 0000 014B     		ldr	r3, .L36
 359 0002 1860     		str	r0, [r3, #0]
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 360              		.loc 1 525 0
 361 0004 7047     		bx	lr
 362              	.L37:
 363 0006 00BF     		.align	2
 364              	.L36:
 365 0008 4C004742 		.word	1111949388
 366              		.cfi_endproc
 367              	.LFE121:
 369              		.section	.text.RCC_MCO1Config,"ax",%progbits
 370              		.align	1
 371              		.global	RCC_MCO1Config
 372              		.thumb
 373              		.thumb_func
 375              	RCC_MCO1Config:
 376              	.LFB122:
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 377              		.loc 1 546 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382              	.LVL17:
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 383              		.loc 1 553 0
 384 0000 034B     		ldr	r3, .L39
 385 0002 9A68     		ldr	r2, [r3, #8]
 386              	.LVL18:
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 387              		.loc 1 556 0
 388 0004 22F0EC62 		bic	r2, r2, #123731968
 389              	.LVL19:
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 390              		.loc 1 559 0
 391 0008 1043     		orrs	r0, r0, r2
 392              	.LVL20:
 393 000a 0843     		orrs	r0, r0, r1
 394              	.LVL21:
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 395              		.loc 1 562 0
 396 000c 9860     		str	r0, [r3, #8]
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 397              		.loc 1 563 0
 398 000e 7047     		bx	lr
 399              	.L40:
 400              		.align	2
 401              	.L39:
 402 0010 00380240 		.word	1073887232
 403              		.cfi_endproc
 404              	.LFE122:
 406              		.section	.text.RCC_MCO2Config,"ax",%progbits
 407              		.align	1
 408              		.global	RCC_MCO2Config
 409              		.thumb
 410              		.thumb_func
 412              	RCC_MCO2Config:
 413              	.LFB123:
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 414              		.loc 1 584 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419              	.LVL22:
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 420              		.loc 1 591 0
 421 0000 034B     		ldr	r3, .L42
 422 0002 9A68     		ldr	r2, [r3, #8]
 423              	.LVL23:
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 424              		.loc 1 594 0
 425 0004 22F07842 		bic	r2, r2, #-134217728
 426              	.LVL24:
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 427              		.loc 1 597 0
 428 0008 1043     		orrs	r0, r0, r2
 429              	.LVL25:
 430 000a 0843     		orrs	r0, r0, r1
 431              	.LVL26:
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 432              		.loc 1 600 0
 433 000c 9860     		str	r0, [r3, #8]
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 434              		.loc 1 601 0
 435 000e 7047     		bx	lr
 436              	.L43:
 437              		.align	2
 438              	.L42:
 439 0010 00380240 		.word	1073887232
 440              		.cfi_endproc
 441              	.LFE123:
 443              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 444              		.align	1
 445              		.global	RCC_SYSCLKConfig
 446              		.thumb
 447              		.thumb_func
 449              	RCC_SYSCLKConfig:
 450              	.LFB124:
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 451              		.loc 1 689 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 456              	.LVL27:
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 457              		.loc 1 695 0
 458 0000 034B     		ldr	r3, .L45
 459 0002 9A68     		ldr	r2, [r3, #8]
 460              	.LVL28:
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 461              		.loc 1 698 0
 462 0004 22F00302 		bic	r2, r2, #3
 463              	.LVL29:
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 464              		.loc 1 701 0
 465 0008 1043     		orrs	r0, r0, r2
 466              	.LVL30:
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 467              		.loc 1 704 0
 468 000a 9860     		str	r0, [r3, #8]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 469              		.loc 1 705 0
 470 000c 7047     		bx	lr
 471              	.L46:
 472 000e 00BF     		.align	2
 473              	.L45:
 474 0010 00380240 		.word	1073887232
 475              		.cfi_endproc
 476              	.LFE124:
 478              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 479              		.align	1
 480              		.global	RCC_GetSYSCLKSource
 481              		.thumb
 482              		.thumb_func
 484              	RCC_GetSYSCLKSource:
 485              	.LFB125:
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 486              		.loc 1 717 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 491              		.loc 1 718 0
 492 0000 024B     		ldr	r3, .L48
 493 0002 9868     		ldr	r0, [r3, #8]
 494 0004 00F00C00 		and	r0, r0, #12
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 495              		.loc 1 719 0
 496 0008 7047     		bx	lr
 497              	.L49:
 498 000a 00BF     		.align	2
 499              	.L48:
 500 000c 00380240 		.word	1073887232
 501              		.cfi_endproc
 502              	.LFE125:
 504              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 505              		.align	1
 506              		.global	RCC_HCLKConfig
 507              		.thumb
 508              		.thumb_func
 510              	RCC_HCLKConfig:
 511              	.LFB126:
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 512              		.loc 1 742 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517              	.LVL31:
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 518              		.loc 1 748 0
 519 0000 034B     		ldr	r3, .L51
 520 0002 9A68     		ldr	r2, [r3, #8]
 521              	.LVL32:
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 522              		.loc 1 751 0
 523 0004 22F0F002 		bic	r2, r2, #240
 524              	.LVL33:
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 525              		.loc 1 754 0
 526 0008 1043     		orrs	r0, r0, r2
 527              	.LVL34:
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 528              		.loc 1 757 0
 529 000a 9860     		str	r0, [r3, #8]
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 530              		.loc 1 758 0
 531 000c 7047     		bx	lr
 532              	.L52:
 533 000e 00BF     		.align	2
 534              	.L51:
 535 0010 00380240 		.word	1073887232
 536              		.cfi_endproc
 537              	.LFE126:
 539              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 540              		.align	1
 541              		.global	RCC_PCLK1Config
 542              		.thumb
 543              		.thumb_func
 545              	RCC_PCLK1Config:
 546              	.LFB127:
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 547              		.loc 1 774 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 552              	.LVL35:
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 553              		.loc 1 780 0
 554 0000 034B     		ldr	r3, .L54
 555 0002 9A68     		ldr	r2, [r3, #8]
 556              	.LVL36:
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 557              		.loc 1 783 0
 558 0004 22F4E052 		bic	r2, r2, #7168
 559              	.LVL37:
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 560              		.loc 1 786 0
 561 0008 1043     		orrs	r0, r0, r2
 562              	.LVL38:
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 563              		.loc 1 789 0
 564 000a 9860     		str	r0, [r3, #8]
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 565              		.loc 1 790 0
 566 000c 7047     		bx	lr
 567              	.L55:
 568 000e 00BF     		.align	2
 569              	.L54:
 570 0010 00380240 		.word	1073887232
 571              		.cfi_endproc
 572              	.LFE127:
 574              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 575              		.align	1
 576              		.global	RCC_PCLK2Config
 577              		.thumb
 578              		.thumb_func
 580              	RCC_PCLK2Config:
 581              	.LFB128:
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 582              		.loc 1 805 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              		@ link register save eliminated.
 587              	.LVL39:
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 588              		.loc 1 811 0
 589 0000 034B     		ldr	r3, .L57
 590 0002 9A68     		ldr	r2, [r3, #8]
 591              	.LVL40:
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 592              		.loc 1 814 0
 593 0004 22F46042 		bic	r2, r2, #57344
 594              	.LVL41:
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 595              		.loc 1 817 0
 596 0008 42EAC000 		orr	r0, r2, r0, lsl #3
 597              	.LVL42:
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 598              		.loc 1 820 0
 599 000c 9860     		str	r0, [r3, #8]
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 600              		.loc 1 821 0
 601 000e 7047     		bx	lr
 602              	.L58:
 603              		.align	2
 604              	.L57:
 605 0010 00380240 		.word	1073887232
 606              		.cfi_endproc
 607              	.LFE128:
 609              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 610              		.align	1
 611              		.global	RCC_GetClocksFreq
 612              		.thumb
 613              		.thumb_func
 615              	RCC_GetClocksFreq:
 616              	.LFB129:
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 617              		.loc 1 857 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              	.LVL43:
 622 0000 10B5     		push	{r4, lr}
 623              	.LCFI0:
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 14, -4
 626              		.cfi_offset 4, -8
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 627              		.loc 1 861 0
 628 0002 1E4B     		ldr	r3, .L69
 629 0004 9A68     		ldr	r2, [r3, #8]
 630              	.LVL44:
 631 0006 02F00C02 		and	r2, r2, #12
 632              	.LVL45:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 633              		.loc 1 863 0
 634 000a 042A     		cmp	r2, #4
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 635              		.loc 1 869 0
 636 000c 08BF     		it	eq
 637 000e 1C4B     		ldreq	r3, .L69+4
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 638              		.loc 1 863 0
 639 0010 1AD0     		beq	.L68
 640 0012 082A     		cmp	r2, #8
 641 0014 18BF     		it	ne
 642 0016 1B4B     		ldrne	r3, .L69+8
 643 0018 16D1     		bne	.L68
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 644              		.loc 1 876 0
 645 001a 5968     		ldr	r1, [r3, #4]
 646              	.LVL46:
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 647              		.loc 1 877 0
 648 001c 5A68     		ldr	r2, [r3, #4]
 649              	.LVL47:
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 650              		.loc 1 879 0
 651 001e 11F4800F 		tst	r1, #4194304
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 652              		.loc 1 882 0
 653 0022 5968     		ldr	r1, [r3, #4]
 654              	.LVL48:
 655 0024 14BF     		ite	ne
 656 0026 164B     		ldrne	r3, .L69+4
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 657              		.loc 1 887 0
 658 0028 164B     		ldreq	r3, .L69+8
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 659              		.loc 1 877 0
 660 002a 02F03F02 		and	r2, r2, #63
 661              	.LVL49:
 662              		.loc 1 887 0
 663 002e B3FBF2F3 		udiv	r3, r3, r2
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 664              		.loc 1 890 0
 665 0032 124A     		ldr	r2, .L69
 666              	.LVL50:
 667 0034 5268     		ldr	r2, [r2, #4]
 668 0036 C2F30142 		ubfx	r2, r2, #16, #2
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 669              		.loc 1 882 0
 670 003a C1F38811 		ubfx	r1, r1, #6, #9
 671              		.loc 1 890 0
 672 003e 0132     		adds	r2, r2, #1
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 673              		.loc 1 887 0
 674 0040 4B43     		muls	r3, r1, r3
 675              	.LVL51:
 676              		.loc 1 890 0
 677 0042 5200     		lsls	r2, r2, #1
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 678              		.loc 1 891 0
 679 0044 B3FBF2F3 		udiv	r3, r3, r2
 680              	.LVL52:
 681              	.L68:
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 682              		.loc 1 900 0
 683 0048 0C49     		ldr	r1, .L69
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 684              		.loc 1 891 0
 685 004a 0360     		str	r3, [r0, #0]
 686              		.loc 1 900 0
 687 004c 8B68     		ldr	r3, [r1, #8]
 688              	.LVL53:
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 689              		.loc 1 902 0
 690 004e 0E4A     		ldr	r2, .L69+12
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 691              		.loc 1 904 0
 692 0050 0468     		ldr	r4, [r0, #0]
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 693              		.loc 1 901 0
 694 0052 C3F30313 		ubfx	r3, r3, #4, #4
 695              	.LVL54:
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 696              		.loc 1 902 0
 697 0056 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 698              	.LVL55:
 699              		.loc 1 904 0
 700 0058 34FA03F3 		lsrs	r3, r4, r3
 701              	.LVL56:
 702 005c 4360     		str	r3, [r0, #4]
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 703              		.loc 1 907 0
 704 005e 8C68     		ldr	r4, [r1, #8]
 705              	.LVL57:
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 706              		.loc 1 908 0
 707 0060 C4F38224 		ubfx	r4, r4, #10, #3
 708              	.LVL58:
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 709              		.loc 1 909 0
 710 0064 145D     		ldrb	r4, [r2, r4]	@ zero_extendqisi2
 711              	.LVL59:
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 712              		.loc 1 911 0
 713 0066 33FA04F4 		lsrs	r4, r3, r4
 714              	.LVL60:
 715 006a 8460     		str	r4, [r0, #8]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 716              		.loc 1 914 0
 717 006c 8968     		ldr	r1, [r1, #8]
 718              	.LVL61:
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 719              		.loc 1 915 0
 720 006e C1F34231 		ubfx	r1, r1, #13, #3
 721              	.LVL62:
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 722              		.loc 1 916 0
 723 0072 525C     		ldrb	r2, [r2, r1]	@ zero_extendqisi2
 724              	.LVL63:
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 725              		.loc 1 918 0
 726 0074 D340     		lsrs	r3, r3, r2
 727 0076 C360     		str	r3, [r0, #12]
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 728              		.loc 1 919 0
 729 0078 10BD     		pop	{r4, pc}
 730              	.L70:
 731 007a 00BF     		.align	2
 732              	.L69:
 733 007c 00380240 		.word	1073887232
 734 0080 00127A00 		.word	8000000
 735 0084 0024F400 		.word	16000000
 736 0088 00000000 		.word	.LANCHOR0
 737              		.cfi_endproc
 738              	.LFE129:
 740              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 741              		.align	1
 742              		.global	RCC_RTCCLKConfig
 743              		.thumb
 744              		.thumb_func
 746              	RCC_RTCCLKConfig:
 747              	.LFB130:
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 748              		.loc 1 982 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 753              	.LVL64:
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 754              		.loc 1 988 0
 755 0000 00F44073 		and	r3, r0, #768
 756 0004 B3F5407F 		cmp	r3, #768
 757 0008 084B     		ldr	r3, .L73
 758 000a 08D1     		bne	.L72
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 759              		.loc 1 990 0
 760 000c 9968     		ldr	r1, [r3, #8]
 761              	.LVL65:
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 762              		.loc 1 996 0
 763 000e 20F07042 		bic	r2, r0, #-268435456
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 764              		.loc 1 993 0
 765 0012 21F4F811 		bic	r1, r1, #2031616
 766              	.LVL66:
 767              		.loc 1 996 0
 768 0016 22F44072 		bic	r2, r2, #768
 769 001a 0A43     		orrs	r2, r2, r1
 770              	.LVL67:
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 771              		.loc 1 999 0
 772 001c 9A60     		str	r2, [r3, #8]
 773              	.LVL68:
 774              	.L72:
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 775              		.loc 1 1003 0
 776 001e 1A6F     		ldr	r2, [r3, #112]
 777 0020 0005     		lsls	r0, r0, #20
 778              	.LVL69:
 779 0022 42EA1050 		orr	r0, r2, r0, lsr #20
 780 0026 1867     		str	r0, [r3, #112]
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 781              		.loc 1 1004 0
 782 0028 7047     		bx	lr
 783              	.L74:
 784 002a 00BF     		.align	2
 785              	.L73:
 786 002c 00380240 		.word	1073887232
 787              		.cfi_endproc
 788              	.LFE130:
 790              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 791              		.align	1
 792              		.global	RCC_RTCCLKCmd
 793              		.thumb
 794              		.thumb_func
 796              	RCC_RTCCLKCmd:
 797              	.LFB131:
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 798              		.loc 1 1014 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803              	.LVL70:
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 804              		.loc 1 1018 0
 805 0000 014B     		ldr	r3, .L76
 806 0002 1860     		str	r0, [r3, #0]
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 807              		.loc 1 1019 0
 808 0004 7047     		bx	lr
 809              	.L77:
 810 0006 00BF     		.align	2
 811              	.L76:
 812 0008 3C0E4742 		.word	1111952956
 813              		.cfi_endproc
 814              	.LFE131:
 816              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 817              		.align	1
 818              		.global	RCC_BackupResetCmd
 819              		.thumb
 820              		.thumb_func
 822              	RCC_BackupResetCmd:
 823              	.LFB132:
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 824              		.loc 1 1031 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 0
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              		@ link register save eliminated.
 829              	.LVL71:
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 830              		.loc 1 1034 0
 831 0000 014B     		ldr	r3, .L79
 832 0002 1860     		str	r0, [r3, #0]
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 833              		.loc 1 1035 0
 834 0004 7047     		bx	lr
 835              	.L80:
 836 0006 00BF     		.align	2
 837              	.L79:
 838 0008 400E4742 		.word	1111952960
 839              		.cfi_endproc
 840              	.LFE132:
 842              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 843              		.align	1
 844              		.global	RCC_I2SCLKConfig
 845              		.thumb
 846              		.thumb_func
 848              	RCC_I2SCLKConfig:
 849              	.LFB133:
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 850              		.loc 1 1051 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855              	.LVL72:
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 856              		.loc 1 1055 0
 857 0000 014B     		ldr	r3, .L82
 858 0002 1860     		str	r0, [r3, #0]
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 859              		.loc 1 1056 0
 860 0004 7047     		bx	lr
 861              	.L83:
 862 0006 00BF     		.align	2
 863              	.L82:
 864 0008 5C014742 		.word	1111949660
 865              		.cfi_endproc
 866              	.LFE133:
 868              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 869              		.align	1
 870              		.global	RCC_AHB1PeriphClockCmd
 871              		.thumb
 872              		.thumb_func
 874              	RCC_AHB1PeriphClockCmd:
 875              	.LFB134:
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 876              		.loc 1 1089 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 881              	.LVL73:
 882 0000 044B     		ldr	r3, .L88
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 883              		.loc 1 1096 0
 884 0002 1A6B     		ldr	r2, [r3, #48]
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 885              		.loc 1 1094 0
 886 0004 09B1     		cbz	r1, .L85
 887              		.loc 1 1096 0
 888 0006 1043     		orrs	r0, r0, r2
 889              	.LVL74:
 890 0008 01E0     		b	.L87
 891              	.LVL75:
 892              	.L85:
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 893              		.loc 1 1100 0
 894 000a 22EA0000 		bic	r0, r2, r0
 895              	.LVL76:
 896              	.L87:
 897 000e 1863     		str	r0, [r3, #48]
 898 0010 7047     		bx	lr
 899              	.L89:
 900 0012 00BF     		.align	2
 901              	.L88:
 902 0014 00380240 		.word	1073887232
 903              		.cfi_endproc
 904              	.LFE134:
 906              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 907              		.align	1
 908              		.global	RCC_AHB2PeriphClockCmd
 909              		.thumb
 910              		.thumb_func
 912              	RCC_AHB2PeriphClockCmd:
 913              	.LFB135:
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 914              		.loc 1 1121 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 0
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918              		@ link register save eliminated.
 919              	.LVL77:
 920 0000 044B     		ldr	r3, .L94
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 921              		.loc 1 1128 0
 922 0002 5A6B     		ldr	r2, [r3, #52]
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 923              		.loc 1 1126 0
 924 0004 09B1     		cbz	r1, .L91
 925              		.loc 1 1128 0
 926 0006 1043     		orrs	r0, r0, r2
 927              	.LVL78:
 928 0008 01E0     		b	.L93
 929              	.LVL79:
 930              	.L91:
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 931              		.loc 1 1132 0
 932 000a 22EA0000 		bic	r0, r2, r0
 933              	.LVL80:
 934              	.L93:
 935 000e 5863     		str	r0, [r3, #52]
 936 0010 7047     		bx	lr
 937              	.L95:
 938 0012 00BF     		.align	2
 939              	.L94:
 940 0014 00380240 		.word	1073887232
 941              		.cfi_endproc
 942              	.LFE135:
 944              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 945              		.align	1
 946              		.global	RCC_AHB3PeriphClockCmd
 947              		.thumb
 948              		.thumb_func
 950              	RCC_AHB3PeriphClockCmd:
 951              	.LFB136:
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 952              		.loc 1 1148 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957              	.LVL81:
 958 0000 044B     		ldr	r3, .L100
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 959              		.loc 1 1155 0
 960 0002 9A6B     		ldr	r2, [r3, #56]
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 961              		.loc 1 1153 0
 962 0004 09B1     		cbz	r1, .L97
 963              		.loc 1 1155 0
 964 0006 1043     		orrs	r0, r0, r2
 965              	.LVL82:
 966 0008 01E0     		b	.L99
 967              	.LVL83:
 968              	.L97:
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 969              		.loc 1 1159 0
 970 000a 22EA0000 		bic	r0, r2, r0
 971              	.LVL84:
 972              	.L99:
 973 000e 9863     		str	r0, [r3, #56]
 974 0010 7047     		bx	lr
 975              	.L101:
 976 0012 00BF     		.align	2
 977              	.L100:
 978 0014 00380240 		.word	1073887232
 979              		.cfi_endproc
 980              	.LFE136:
 982              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 983              		.align	1
 984              		.global	RCC_APB1PeriphClockCmd
 985              		.thumb
 986              		.thumb_func
 988              	RCC_APB1PeriphClockCmd:
 989              	.LFB137:
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 990              		.loc 1 1198 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995              	.LVL85:
 996 0000 044B     		ldr	r3, .L106
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 997              		.loc 1 1205 0
 998 0002 1A6C     		ldr	r2, [r3, #64]
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 999              		.loc 1 1203 0
 1000 0004 09B1     		cbz	r1, .L103
 1001              		.loc 1 1205 0
 1002 0006 1043     		orrs	r0, r0, r2
 1003              	.LVL86:
 1004 0008 01E0     		b	.L105
 1005              	.LVL87:
 1006              	.L103:
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1007              		.loc 1 1209 0
 1008 000a 22EA0000 		bic	r0, r2, r0
 1009              	.LVL88:
 1010              	.L105:
 1011 000e 1864     		str	r0, [r3, #64]
 1012 0010 7047     		bx	lr
 1013              	.L107:
 1014 0012 00BF     		.align	2
 1015              	.L106:
 1016 0014 00380240 		.word	1073887232
 1017              		.cfi_endproc
 1018              	.LFE137:
 1020              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1021              		.align	1
 1022              		.global	RCC_APB2PeriphClockCmd
 1023              		.thumb
 1024              		.thumb_func
 1026              	RCC_APB2PeriphClockCmd:
 1027              	.LFB138:
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1028              		.loc 1 1238 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033              	.LVL89:
 1034 0000 044B     		ldr	r3, .L112
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1035              		.loc 1 1245 0
 1036 0002 5A6C     		ldr	r2, [r3, #68]
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1037              		.loc 1 1243 0
 1038 0004 09B1     		cbz	r1, .L109
 1039              		.loc 1 1245 0
 1040 0006 1043     		orrs	r0, r0, r2
 1041              	.LVL90:
 1042 0008 01E0     		b	.L111
 1043              	.LVL91:
 1044              	.L109:
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1045              		.loc 1 1249 0
 1046 000a 22EA0000 		bic	r0, r2, r0
 1047              	.LVL92:
 1048              	.L111:
 1049 000e 5864     		str	r0, [r3, #68]
 1050 0010 7047     		bx	lr
 1051              	.L113:
 1052 0012 00BF     		.align	2
 1053              	.L112:
 1054 0014 00380240 		.word	1073887232
 1055              		.cfi_endproc
 1056              	.LFE138:
 1058              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1059              		.align	1
 1060              		.global	RCC_AHB1PeriphResetCmd
 1061              		.thumb
 1062              		.thumb_func
 1064              	RCC_AHB1PeriphResetCmd:
 1065              	.LFB139:
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1066              		.loc 1 1277 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071              	.LVL93:
 1072 0000 044B     		ldr	r3, .L118
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1073              		.loc 1 1284 0
 1074 0002 1A69     		ldr	r2, [r3, #16]
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1075              		.loc 1 1282 0
 1076 0004 09B1     		cbz	r1, .L115
 1077              		.loc 1 1284 0
 1078 0006 1043     		orrs	r0, r0, r2
 1079              	.LVL94:
 1080 0008 01E0     		b	.L117
 1081              	.LVL95:
 1082              	.L115:
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1083              		.loc 1 1288 0
 1084 000a 22EA0000 		bic	r0, r2, r0
 1085              	.LVL96:
 1086              	.L117:
 1087 000e 1861     		str	r0, [r3, #16]
 1088 0010 7047     		bx	lr
 1089              	.L119:
 1090 0012 00BF     		.align	2
 1091              	.L118:
 1092 0014 00380240 		.word	1073887232
 1093              		.cfi_endproc
 1094              	.LFE139:
 1096              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1097              		.align	1
 1098              		.global	RCC_AHB2PeriphResetCmd
 1099              		.thumb
 1100              		.thumb_func
 1102              	RCC_AHB2PeriphResetCmd:
 1103              	.LFB140:
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1104              		.loc 1 1306 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109              	.LVL97:
 1110 0000 044B     		ldr	r3, .L124
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1111              		.loc 1 1313 0
 1112 0002 5A69     		ldr	r2, [r3, #20]
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1113              		.loc 1 1311 0
 1114 0004 09B1     		cbz	r1, .L121
 1115              		.loc 1 1313 0
 1116 0006 1043     		orrs	r0, r0, r2
 1117              	.LVL98:
 1118 0008 01E0     		b	.L123
 1119              	.LVL99:
 1120              	.L121:
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1121              		.loc 1 1317 0
 1122 000a 22EA0000 		bic	r0, r2, r0
 1123              	.LVL100:
 1124              	.L123:
 1125 000e 5861     		str	r0, [r3, #20]
 1126 0010 7047     		bx	lr
 1127              	.L125:
 1128 0012 00BF     		.align	2
 1129              	.L124:
 1130 0014 00380240 		.word	1073887232
 1131              		.cfi_endproc
 1132              	.LFE140:
 1134              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1135              		.align	1
 1136              		.global	RCC_AHB3PeriphResetCmd
 1137              		.thumb
 1138              		.thumb_func
 1140              	RCC_AHB3PeriphResetCmd:
 1141              	.LFB141:
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1142              		.loc 1 1330 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 0
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 1146              		@ link register save eliminated.
 1147              	.LVL101:
 1148 0000 044B     		ldr	r3, .L130
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1149              		.loc 1 1337 0
 1150 0002 9A69     		ldr	r2, [r3, #24]
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1151              		.loc 1 1335 0
 1152 0004 09B1     		cbz	r1, .L127
 1153              		.loc 1 1337 0
 1154 0006 1043     		orrs	r0, r0, r2
 1155              	.LVL102:
 1156 0008 01E0     		b	.L129
 1157              	.LVL103:
 1158              	.L127:
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1159              		.loc 1 1341 0
 1160 000a 22EA0000 		bic	r0, r2, r0
 1161              	.LVL104:
 1162              	.L129:
 1163 000e 9861     		str	r0, [r3, #24]
 1164 0010 7047     		bx	lr
 1165              	.L131:
 1166 0012 00BF     		.align	2
 1167              	.L130:
 1168 0014 00380240 		.word	1073887232
 1169              		.cfi_endproc
 1170              	.LFE141:
 1172              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1173              		.align	1
 1174              		.global	RCC_APB1PeriphResetCmd
 1175              		.thumb
 1176              		.thumb_func
 1178              	RCC_APB1PeriphResetCmd:
 1179              	.LFB142:
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1180              		.loc 1 1377 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185              	.LVL105:
 1186 0000 044B     		ldr	r3, .L136
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1187              		.loc 1 1383 0
 1188 0002 1A6A     		ldr	r2, [r3, #32]
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1189              		.loc 1 1381 0
 1190 0004 09B1     		cbz	r1, .L133
 1191              		.loc 1 1383 0
 1192 0006 1043     		orrs	r0, r0, r2
 1193              	.LVL106:
 1194 0008 01E0     		b	.L135
 1195              	.LVL107:
 1196              	.L133:
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1197              		.loc 1 1387 0
 1198 000a 22EA0000 		bic	r0, r2, r0
 1199              	.LVL108:
 1200              	.L135:
 1201 000e 1862     		str	r0, [r3, #32]
 1202 0010 7047     		bx	lr
 1203              	.L137:
 1204 0012 00BF     		.align	2
 1205              	.L136:
 1206 0014 00380240 		.word	1073887232
 1207              		.cfi_endproc
 1208              	.LFE142:
 1210              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1211              		.align	1
 1212              		.global	RCC_APB2PeriphResetCmd
 1213              		.thumb
 1214              		.thumb_func
 1216              	RCC_APB2PeriphResetCmd:
 1217              	.LFB143:
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1218              		.loc 1 1413 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              		@ link register save eliminated.
 1223              	.LVL109:
 1224 0000 044B     		ldr	r3, .L142
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1225              		.loc 1 1419 0
 1226 0002 5A6A     		ldr	r2, [r3, #36]
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1227              		.loc 1 1417 0
 1228 0004 09B1     		cbz	r1, .L139
 1229              		.loc 1 1419 0
 1230 0006 1043     		orrs	r0, r0, r2
 1231              	.LVL110:
 1232 0008 01E0     		b	.L141
 1233              	.LVL111:
 1234              	.L139:
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1235              		.loc 1 1423 0
 1236 000a 22EA0000 		bic	r0, r2, r0
 1237              	.LVL112:
 1238              	.L141:
 1239 000e 5862     		str	r0, [r3, #36]
 1240 0010 7047     		bx	lr
 1241              	.L143:
 1242 0012 00BF     		.align	2
 1243              	.L142:
 1244 0014 00380240 		.word	1073887232
 1245              		.cfi_endproc
 1246              	.LFE143:
 1248              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1249              		.align	1
 1250              		.global	RCC_AHB1PeriphClockLPModeCmd
 1251              		.thumb
 1252              		.thumb_func
 1254              	RCC_AHB1PeriphClockLPModeCmd:
 1255              	.LFB144:
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1256              		.loc 1 1459 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 1261              	.LVL113:
 1262 0000 044B     		ldr	r3, .L148
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1263              		.loc 1 1465 0
 1264 0002 1A6D     		ldr	r2, [r3, #80]
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1265              		.loc 1 1463 0
 1266 0004 09B1     		cbz	r1, .L145
 1267              		.loc 1 1465 0
 1268 0006 1043     		orrs	r0, r0, r2
 1269              	.LVL114:
 1270 0008 01E0     		b	.L147
 1271              	.LVL115:
 1272              	.L145:
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1273              		.loc 1 1469 0
 1274 000a 22EA0000 		bic	r0, r2, r0
 1275              	.LVL116:
 1276              	.L147:
 1277 000e 1865     		str	r0, [r3, #80]
 1278 0010 7047     		bx	lr
 1279              	.L149:
 1280 0012 00BF     		.align	2
 1281              	.L148:
 1282 0014 00380240 		.word	1073887232
 1283              		.cfi_endproc
 1284              	.LFE144:
 1286              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1287              		.align	1
 1288              		.global	RCC_AHB2PeriphClockLPModeCmd
 1289              		.thumb
 1290              		.thumb_func
 1292              	RCC_AHB2PeriphClockLPModeCmd:
 1293              	.LFB145:
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1294              		.loc 1 1491 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299              	.LVL117:
 1300 0000 044B     		ldr	r3, .L154
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 1301              		.loc 1 1497 0
 1302 0002 5A6D     		ldr	r2, [r3, #84]
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1303              		.loc 1 1495 0
 1304 0004 09B1     		cbz	r1, .L151
 1305              		.loc 1 1497 0
 1306 0006 1043     		orrs	r0, r0, r2
 1307              	.LVL118:
 1308 0008 01E0     		b	.L153
 1309              	.LVL119:
 1310              	.L151:
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1311              		.loc 1 1501 0
 1312 000a 22EA0000 		bic	r0, r2, r0
 1313              	.LVL120:
 1314              	.L153:
 1315 000e 5865     		str	r0, [r3, #84]
 1316 0010 7047     		bx	lr
 1317              	.L155:
 1318 0012 00BF     		.align	2
 1319              	.L154:
 1320 0014 00380240 		.word	1073887232
 1321              		.cfi_endproc
 1322              	.LFE145:
 1324              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1325              		.align	1
 1326              		.global	RCC_AHB3PeriphClockLPModeCmd
 1327              		.thumb
 1328              		.thumb_func
 1330              	RCC_AHB3PeriphClockLPModeCmd:
 1331              	.LFB146:
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1332              		.loc 1 1518 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              		@ link register save eliminated.
 1337              	.LVL121:
 1338 0000 044B     		ldr	r3, .L160
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 1339              		.loc 1 1524 0
 1340 0002 9A6D     		ldr	r2, [r3, #88]
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1341              		.loc 1 1522 0
 1342 0004 09B1     		cbz	r1, .L157
 1343              		.loc 1 1524 0
 1344 0006 1043     		orrs	r0, r0, r2
 1345              	.LVL122:
 1346 0008 01E0     		b	.L159
 1347              	.LVL123:
 1348              	.L157:
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1349              		.loc 1 1528 0
 1350 000a 22EA0000 		bic	r0, r2, r0
 1351              	.LVL124:
 1352              	.L159:
 1353 000e 9865     		str	r0, [r3, #88]
 1354 0010 7047     		bx	lr
 1355              	.L161:
 1356 0012 00BF     		.align	2
 1357              	.L160:
 1358 0014 00380240 		.word	1073887232
 1359              		.cfi_endproc
 1360              	.LFE146:
 1362              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1363              		.align	1
 1364              		.global	RCC_APB1PeriphClockLPModeCmd
 1365              		.thumb
 1366              		.thumb_func
 1368              	RCC_APB1PeriphClockLPModeCmd:
 1369              	.LFB147:
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1370              		.loc 1 1568 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              		@ link register save eliminated.
 1375              	.LVL125:
 1376 0000 044B     		ldr	r3, .L166
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 1377              		.loc 1 1574 0
 1378 0002 1A6E     		ldr	r2, [r3, #96]
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1379              		.loc 1 1572 0
 1380 0004 09B1     		cbz	r1, .L163
 1381              		.loc 1 1574 0
 1382 0006 1043     		orrs	r0, r0, r2
 1383              	.LVL126:
 1384 0008 01E0     		b	.L165
 1385              	.LVL127:
 1386              	.L163:
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1387              		.loc 1 1578 0
 1388 000a 22EA0000 		bic	r0, r2, r0
 1389              	.LVL128:
 1390              	.L165:
 1391 000e 1866     		str	r0, [r3, #96]
 1392 0010 7047     		bx	lr
 1393              	.L167:
 1394 0012 00BF     		.align	2
 1395              	.L166:
 1396 0014 00380240 		.word	1073887232
 1397              		.cfi_endproc
 1398              	.LFE147:
 1400              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1401              		.align	1
 1402              		.global	RCC_APB2PeriphClockLPModeCmd
 1403              		.thumb
 1404              		.thumb_func
 1406              	RCC_APB2PeriphClockLPModeCmd:
 1407              	.LFB148:
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1408              		.loc 1 1608 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              		@ link register save eliminated.
 1413              	.LVL129:
 1414 0000 044B     		ldr	r3, .L172
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 1415              		.loc 1 1614 0
 1416 0002 5A6E     		ldr	r2, [r3, #100]
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1417              		.loc 1 1612 0
 1418 0004 09B1     		cbz	r1, .L169
 1419              		.loc 1 1614 0
 1420 0006 1043     		orrs	r0, r0, r2
 1421              	.LVL130:
 1422 0008 01E0     		b	.L171
 1423              	.LVL131:
 1424              	.L169:
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1425              		.loc 1 1618 0
 1426 000a 22EA0000 		bic	r0, r2, r0
 1427              	.LVL132:
 1428              	.L171:
 1429 000e 5866     		str	r0, [r3, #100]
 1430 0010 7047     		bx	lr
 1431              	.L173:
 1432 0012 00BF     		.align	2
 1433              	.L172:
 1434 0014 00380240 		.word	1073887232
 1435              		.cfi_endproc
 1436              	.LFE148:
 1438              		.section	.text.RCC_ITConfig,"ax",%progbits
 1439              		.align	1
 1440              		.global	RCC_ITConfig
 1441              		.thumb
 1442              		.thumb_func
 1444              	RCC_ITConfig:
 1445              	.LFB149:
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1446              		.loc 1 1653 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              		@ link register save eliminated.
 1451              	.LVL133:
 1452 0000 044B     		ldr	r3, .L178
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1453              		.loc 1 1660 0
 1454 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1455              		.loc 1 1657 0
 1456 0004 09B1     		cbz	r1, .L175
 1457              		.loc 1 1660 0
 1458 0006 1043     		orrs	r0, r0, r2
 1459              	.LVL134:
 1460 0008 01E0     		b	.L177
 1461              	.LVL135:
 1462              	.L175:
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1463              		.loc 1 1665 0
 1464 000a 22EA0000 		bic	r0, r2, r0
 1465              	.LVL136:
 1466              	.L177:
 1467 000e 1870     		strb	r0, [r3, #0]
 1468 0010 7047     		bx	lr
 1469              	.L179:
 1470 0012 00BF     		.align	2
 1471              	.L178:
 1472 0014 0D380240 		.word	1073887245
 1473              		.cfi_endproc
 1474              	.LFE149:
 1476              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1477              		.align	1
 1478              		.global	RCC_GetFlagStatus
 1479              		.thumb
 1480              		.thumb_func
 1482              	RCC_GetFlagStatus:
 1483              	.LFB150:
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1484              		.loc 1 1689 0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
 1489              	.LVL137:
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1490              		.loc 1 1698 0
 1491 0000 4309     		lsrs	r3, r0, #5
 1492              	.LVL138:
 1493 0002 084A     		ldr	r2, .L184
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1494              		.loc 1 1699 0
 1495 0004 012B     		cmp	r3, #1
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 1496              		.loc 1 1701 0
 1497 0006 08BF     		it	eq
 1498 0008 1368     		ldreq	r3, [r2, #0]
 1499              	.LVL139:
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1500              		.loc 1 1699 0
 1501 000a 03D0     		beq	.L182
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1502              		.loc 1 1703 0
 1503 000c 022B     		cmp	r3, #2
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 1504              		.loc 1 1705 0
 1505 000e 0CBF     		ite	eq
 1506 0010 136F     		ldreq	r3, [r2, #112]
 1507              	.LVL140:
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1508              		.loc 1 1709 0
 1509 0012 536F     		ldrne	r3, [r2, #116]
 1510              	.LVL141:
 1511              	.L182:
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1512              		.loc 1 1713 0
 1513 0014 00F01F00 		and	r0, r0, #31
 1514              	.LVL142:
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1515              		.loc 1 1714 0
 1516 0018 33FA00F0 		lsrs	r0, r3, r0
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 1517              		.loc 1 1723 0
 1518 001c 00F00100 		and	r0, r0, #1
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1519              		.loc 1 1724 0
 1520 0020 7047     		bx	lr
 1521              	.L185:
 1522 0022 00BF     		.align	2
 1523              	.L184:
 1524 0024 00380240 		.word	1073887232
 1525              		.cfi_endproc
 1526              	.LFE150:
 1528              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1529              		.align	1
 1530              		.global	RCC_WaitForHSEStartUp
 1531              		.thumb
 1532              		.thumb_func
 1534              	RCC_WaitForHSEStartUp:
 1535              	.LFB112:
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1536              		.loc 1 262 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 8
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540 0000 07B5     		push	{r0, r1, r2, lr}
 1541              	.LCFI1:
 1542              		.cfi_def_cfa_offset 16
 1543              		.cfi_offset 14, -4
 1544              		.cfi_offset 2, -8
 1545              		.cfi_offset 1, -12
 1546              		.cfi_offset 0, -16
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1547              		.loc 1 263 0
 1548 0002 0023     		movs	r3, #0
 1549 0004 0193     		str	r3, [sp, #4]
 1550              	.LVL143:
 1551              	.L188:
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 1552              		.loc 1 269 0 discriminator 1
 1553 0006 3120     		movs	r0, #49
 1554 0008 FFF7FEFF 		bl	RCC_GetFlagStatus
 1555              	.LVL144:
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 1556              		.loc 1 270 0 discriminator 1
 1557 000c 019B     		ldr	r3, [sp, #4]
 1558 000e 0133     		adds	r3, r3, #1
 1559              	.LVL145:
 1560 0010 0193     		str	r3, [sp, #4]
 1561              	.LVL146:
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 1562              		.loc 1 271 0 discriminator 1
 1563 0012 019B     		ldr	r3, [sp, #4]
 1564              	.LVL147:
 1565 0014 B3F5A06F 		cmp	r3, #1280
 1566 0018 01D0     		beq	.L187
 1567 001a 0028     		cmp	r0, #0
 1568 001c F3D0     		beq	.L188
 1569              	.L187:
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 1570              		.loc 1 273 0
 1571 001e 3120     		movs	r0, #49
 1572              	.LVL148:
 1573 0020 FFF7FEFF 		bl	RCC_GetFlagStatus
 1574              	.LVL149:
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 1575              		.loc 1 281 0
 1576 0024 0030     		adds	r0, r0, #0
 1577 0026 18BF     		it	ne
 1578 0028 0120     		movne	r0, #1
 1579              	.LVL150:
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1580              		.loc 1 282 0
 1581 002a 0EBD     		pop	{r1, r2, r3, pc}
 1582              		.cfi_endproc
 1583              	.LFE112:
 1585              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1586              		.align	1
 1587              		.global	RCC_ClearFlag
 1588              		.thumb
 1589              		.thumb_func
 1591              	RCC_ClearFlag:
 1592              	.LFB151:
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1593              		.loc 1 1734 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597              		@ link register save eliminated.
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1598              		.loc 1 1736 0
 1599 0000 024B     		ldr	r3, .L191
 1600 0002 5A6F     		ldr	r2, [r3, #116]
 1601 0004 42F08072 		orr	r2, r2, #16777216
 1602 0008 5A67     		str	r2, [r3, #116]
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1603              		.loc 1 1737 0
 1604 000a 7047     		bx	lr
 1605              	.L192:
 1606              		.align	2
 1607              	.L191:
 1608 000c 00380240 		.word	1073887232
 1609              		.cfi_endproc
 1610              	.LFE151:
 1612              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1613              		.align	1
 1614              		.global	RCC_GetITStatus
 1615              		.thumb
 1616              		.thumb_func
 1618              	RCC_GetITStatus:
 1619              	.LFB152:
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1620              		.loc 1 1753 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625              	.LVL151:
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1626              		.loc 1 1760 0
 1627 0000 034B     		ldr	r3, .L194
 1628 0002 DB68     		ldr	r3, [r3, #12]
 1629              	.LVL152:
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 1630              		.loc 1 1762 0
 1631 0004 1842     		tst	r0, r3
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 1632              		.loc 1 1769 0
 1633 0006 0CBF     		ite	eq
 1634 0008 0020     		moveq	r0, #0
 1635 000a 0120     		movne	r0, #1
 1636              	.LVL153:
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1637              		.loc 1 1770 0
 1638 000c 7047     		bx	lr
 1639              	.L195:
 1640 000e 00BF     		.align	2
 1641              	.L194:
 1642 0010 00380240 		.word	1073887232
 1643              		.cfi_endproc
 1644              	.LFE152:
 1646              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1647              		.align	1
 1648              		.global	RCC_ClearITPendingBit
 1649              		.thumb
 1650              		.thumb_func
 1652              	RCC_ClearITPendingBit:
 1653              	.LFB153:
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1654              		.loc 1 1786 0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 0
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 1659              	.LVL154:
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1660              		.loc 1 1792 0
 1661 0000 014B     		ldr	r3, .L197
 1662 0002 1870     		strb	r0, [r3, #0]
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1663              		.loc 1 1793 0
 1664 0004 7047     		bx	lr
 1665              	.L198:
 1666 0006 00BF     		.align	2
 1667              	.L197:
 1668 0008 0E380240 		.word	1073887246
 1669              		.cfi_endproc
 1670              	.LFE153:
 1672              		.data
 1673              		.set	.LANCHOR0,. + 0
 1676              	APBAHBPrescTable:
 1677 0000 00       		.byte	0
 1678 0001 00       		.byte	0
 1679 0002 00       		.byte	0
 1680 0003 00       		.byte	0
 1681 0004 01       		.byte	1
 1682 0005 02       		.byte	2
 1683 0006 03       		.byte	3
 1684 0007 04       		.byte	4
 1685 0008 01       		.byte	1
 1686 0009 02       		.byte	2
 1687 000a 03       		.byte	3
 1688 000b 04       		.byte	4
 1689 000c 06       		.byte	6
 1690 000d 07       		.byte	7
 1691 000e 08       		.byte	8
 1692 000f 09       		.byte	9
 1693              		.text
 1694              	.Letext0:
 1695              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1696              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 1697              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 1698              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
  C:\Temp\ccU1egEC.s:19     .text.RCC_DeInit:00000000 $t
  C:\Temp\ccU1egEC.s:24     .text.RCC_DeInit:00000000 RCC_DeInit
  C:\Temp\ccU1egEC.s:59     .text.RCC_DeInit:0000002c $d
  C:\Temp\ccU1egEC.s:65     .text.RCC_HSEConfig:00000000 $t
  C:\Temp\ccU1egEC.s:70     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
  C:\Temp\ccU1egEC.s:89     .text.RCC_HSEConfig:0000000c $d
  C:\Temp\ccU1egEC.s:94     .text.RCC_AdjustHSICalibrationValue:00000000 $t
  C:\Temp\ccU1egEC.s:99     .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
  C:\Temp\ccU1egEC.s:124    .text.RCC_AdjustHSICalibrationValue:00000010 $d
  C:\Temp\ccU1egEC.s:129    .text.RCC_HSICmd:00000000 $t
  C:\Temp\ccU1egEC.s:134    .text.RCC_HSICmd:00000000 RCC_HSICmd
  C:\Temp\ccU1egEC.s:150    .text.RCC_HSICmd:00000008 $d
  C:\Temp\ccU1egEC.s:155    .text.RCC_LSEConfig:00000000 $t
  C:\Temp\ccU1egEC.s:160    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
  C:\Temp\ccU1egEC.s:196    .text.RCC_LSEConfig:0000001c $d
  C:\Temp\ccU1egEC.s:201    .text.RCC_LSICmd:00000000 $t
  C:\Temp\ccU1egEC.s:206    .text.RCC_LSICmd:00000000 RCC_LSICmd
  C:\Temp\ccU1egEC.s:222    .text.RCC_LSICmd:00000008 $d
  C:\Temp\ccU1egEC.s:227    .text.RCC_PLLConfig:00000000 $t
  C:\Temp\ccU1egEC.s:232    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
  C:\Temp\ccU1egEC.s:258    .text.RCC_PLLConfig:0000001c $d
  C:\Temp\ccU1egEC.s:263    .text.RCC_PLLCmd:00000000 $t
  C:\Temp\ccU1egEC.s:268    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
  C:\Temp\ccU1egEC.s:284    .text.RCC_PLLCmd:00000008 $d
  C:\Temp\ccU1egEC.s:289    .text.RCC_PLLI2SConfig:00000000 $t
  C:\Temp\ccU1egEC.s:294    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
  C:\Temp\ccU1egEC.s:313    .text.RCC_PLLI2SConfig:00000010 $d
  C:\Temp\ccU1egEC.s:318    .text.RCC_PLLI2SCmd:00000000 $t
  C:\Temp\ccU1egEC.s:323    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
  C:\Temp\ccU1egEC.s:339    .text.RCC_PLLI2SCmd:00000008 $d
  C:\Temp\ccU1egEC.s:344    .text.RCC_ClockSecuritySystemCmd:00000000 $t
  C:\Temp\ccU1egEC.s:349    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
  C:\Temp\ccU1egEC.s:365    .text.RCC_ClockSecuritySystemCmd:00000008 $d
  C:\Temp\ccU1egEC.s:370    .text.RCC_MCO1Config:00000000 $t
  C:\Temp\ccU1egEC.s:375    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
  C:\Temp\ccU1egEC.s:402    .text.RCC_MCO1Config:00000010 $d
  C:\Temp\ccU1egEC.s:407    .text.RCC_MCO2Config:00000000 $t
  C:\Temp\ccU1egEC.s:412    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
  C:\Temp\ccU1egEC.s:439    .text.RCC_MCO2Config:00000010 $d
  C:\Temp\ccU1egEC.s:444    .text.RCC_SYSCLKConfig:00000000 $t
  C:\Temp\ccU1egEC.s:449    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
  C:\Temp\ccU1egEC.s:474    .text.RCC_SYSCLKConfig:00000010 $d
  C:\Temp\ccU1egEC.s:479    .text.RCC_GetSYSCLKSource:00000000 $t
  C:\Temp\ccU1egEC.s:484    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
  C:\Temp\ccU1egEC.s:500    .text.RCC_GetSYSCLKSource:0000000c $d
  C:\Temp\ccU1egEC.s:505    .text.RCC_HCLKConfig:00000000 $t
  C:\Temp\ccU1egEC.s:510    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
  C:\Temp\ccU1egEC.s:535    .text.RCC_HCLKConfig:00000010 $d
  C:\Temp\ccU1egEC.s:540    .text.RCC_PCLK1Config:00000000 $t
  C:\Temp\ccU1egEC.s:545    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
  C:\Temp\ccU1egEC.s:570    .text.RCC_PCLK1Config:00000010 $d
  C:\Temp\ccU1egEC.s:575    .text.RCC_PCLK2Config:00000000 $t
  C:\Temp\ccU1egEC.s:580    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
  C:\Temp\ccU1egEC.s:605    .text.RCC_PCLK2Config:00000010 $d
  C:\Temp\ccU1egEC.s:610    .text.RCC_GetClocksFreq:00000000 $t
  C:\Temp\ccU1egEC.s:615    .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
  C:\Temp\ccU1egEC.s:733    .text.RCC_GetClocksFreq:0000007c $d
  C:\Temp\ccU1egEC.s:741    .text.RCC_RTCCLKConfig:00000000 $t
  C:\Temp\ccU1egEC.s:746    .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
  C:\Temp\ccU1egEC.s:786    .text.RCC_RTCCLKConfig:0000002c $d
  C:\Temp\ccU1egEC.s:791    .text.RCC_RTCCLKCmd:00000000 $t
  C:\Temp\ccU1egEC.s:796    .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
  C:\Temp\ccU1egEC.s:812    .text.RCC_RTCCLKCmd:00000008 $d
  C:\Temp\ccU1egEC.s:817    .text.RCC_BackupResetCmd:00000000 $t
  C:\Temp\ccU1egEC.s:822    .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
  C:\Temp\ccU1egEC.s:838    .text.RCC_BackupResetCmd:00000008 $d
  C:\Temp\ccU1egEC.s:843    .text.RCC_I2SCLKConfig:00000000 $t
  C:\Temp\ccU1egEC.s:848    .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
  C:\Temp\ccU1egEC.s:864    .text.RCC_I2SCLKConfig:00000008 $d
  C:\Temp\ccU1egEC.s:869    .text.RCC_AHB1PeriphClockCmd:00000000 $t
  C:\Temp\ccU1egEC.s:874    .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
  C:\Temp\ccU1egEC.s:902    .text.RCC_AHB1PeriphClockCmd:00000014 $d
  C:\Temp\ccU1egEC.s:907    .text.RCC_AHB2PeriphClockCmd:00000000 $t
  C:\Temp\ccU1egEC.s:912    .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
  C:\Temp\ccU1egEC.s:940    .text.RCC_AHB2PeriphClockCmd:00000014 $d
  C:\Temp\ccU1egEC.s:945    .text.RCC_AHB3PeriphClockCmd:00000000 $t
  C:\Temp\ccU1egEC.s:950    .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
  C:\Temp\ccU1egEC.s:978    .text.RCC_AHB3PeriphClockCmd:00000014 $d
  C:\Temp\ccU1egEC.s:983    .text.RCC_APB1PeriphClockCmd:00000000 $t
  C:\Temp\ccU1egEC.s:988    .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
  C:\Temp\ccU1egEC.s:1016   .text.RCC_APB1PeriphClockCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1021   .text.RCC_APB2PeriphClockCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1026   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
  C:\Temp\ccU1egEC.s:1054   .text.RCC_APB2PeriphClockCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1059   .text.RCC_AHB1PeriphResetCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1064   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
  C:\Temp\ccU1egEC.s:1092   .text.RCC_AHB1PeriphResetCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1097   .text.RCC_AHB2PeriphResetCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1102   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
  C:\Temp\ccU1egEC.s:1130   .text.RCC_AHB2PeriphResetCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1135   .text.RCC_AHB3PeriphResetCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1140   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
  C:\Temp\ccU1egEC.s:1168   .text.RCC_AHB3PeriphResetCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1173   .text.RCC_APB1PeriphResetCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1178   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
  C:\Temp\ccU1egEC.s:1206   .text.RCC_APB1PeriphResetCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1211   .text.RCC_APB2PeriphResetCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1216   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
  C:\Temp\ccU1egEC.s:1244   .text.RCC_APB2PeriphResetCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1249   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1254   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
  C:\Temp\ccU1egEC.s:1282   .text.RCC_AHB1PeriphClockLPModeCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1287   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1292   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
  C:\Temp\ccU1egEC.s:1320   .text.RCC_AHB2PeriphClockLPModeCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1325   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1330   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
  C:\Temp\ccU1egEC.s:1358   .text.RCC_AHB3PeriphClockLPModeCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1363   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1368   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
  C:\Temp\ccU1egEC.s:1396   .text.RCC_APB1PeriphClockLPModeCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1401   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
  C:\Temp\ccU1egEC.s:1406   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
  C:\Temp\ccU1egEC.s:1434   .text.RCC_APB2PeriphClockLPModeCmd:00000014 $d
  C:\Temp\ccU1egEC.s:1439   .text.RCC_ITConfig:00000000 $t
  C:\Temp\ccU1egEC.s:1444   .text.RCC_ITConfig:00000000 RCC_ITConfig
  C:\Temp\ccU1egEC.s:1472   .text.RCC_ITConfig:00000014 $d
  C:\Temp\ccU1egEC.s:1477   .text.RCC_GetFlagStatus:00000000 $t
  C:\Temp\ccU1egEC.s:1482   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
  C:\Temp\ccU1egEC.s:1524   .text.RCC_GetFlagStatus:00000024 $d
  C:\Temp\ccU1egEC.s:1529   .text.RCC_WaitForHSEStartUp:00000000 $t
  C:\Temp\ccU1egEC.s:1534   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
  C:\Temp\ccU1egEC.s:1586   .text.RCC_ClearFlag:00000000 $t
  C:\Temp\ccU1egEC.s:1591   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
  C:\Temp\ccU1egEC.s:1608   .text.RCC_ClearFlag:0000000c $d
  C:\Temp\ccU1egEC.s:1613   .text.RCC_GetITStatus:00000000 $t
  C:\Temp\ccU1egEC.s:1618   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
  C:\Temp\ccU1egEC.s:1642   .text.RCC_GetITStatus:00000010 $d
  C:\Temp\ccU1egEC.s:1647   .text.RCC_ClearITPendingBit:00000000 $t
  C:\Temp\ccU1egEC.s:1652   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
  C:\Temp\ccU1egEC.s:1668   .text.RCC_ClearITPendingBit:00000008 $d
  C:\Temp\ccU1egEC.s:1676   .data:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
