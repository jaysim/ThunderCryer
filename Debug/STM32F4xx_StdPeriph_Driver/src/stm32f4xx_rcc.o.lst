   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.data.APBAHBPrescTable,"aw",%progbits
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.section	.text.RCC_DeInit,"ax",%progbits
  40              		.align	2
  41              		.global	RCC_DeInit
  42              		.thumb
  43              		.thumb_func
  45              	RCC_DeInit:
  46              	.LFB110:
  47              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  48              		.loc 1 197 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53 0000 80B4     		push	{r7}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 4
  56              		.cfi_offset 7, -4
  57 0002 00AF     		add	r7, sp, #0
  58              	.LCFI1:
  59              		.cfi_def_cfa_register 7
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  60              		.loc 1 199 0
  61 0004 4FF46053 		mov	r3, #14336
  62 0008 C4F20203 		movt	r3, 16386
  63 000c 4FF46052 		mov	r2, #14336
  64 0010 C4F20202 		movt	r2, 16386
  65 0014 1268     		ldr	r2, [r2, #0]
  66 0016 42F00102 		orr	r2, r2, #1
  67 001a 1A60     		str	r2, [r3, #0]
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  68              		.loc 1 202 0
  69 001c 4FF46053 		mov	r3, #14336
  70 0020 C4F20203 		movt	r3, 16386
  71 0024 4FF00002 		mov	r2, #0
  72 0028 9A60     		str	r2, [r3, #8]
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  73              		.loc 1 205 0
  74 002a 4FF46053 		mov	r3, #14336
  75 002e C4F20203 		movt	r3, 16386
  76 0032 4FF46052 		mov	r2, #14336
  77 0036 C4F20202 		movt	r2, 16386
  78 003a 1268     		ldr	r2, [r2, #0]
  79 003c 22F08472 		bic	r2, r2, #17301504
  80 0040 22F48032 		bic	r2, r2, #65536
  81 0044 1A60     		str	r2, [r3, #0]
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  82              		.loc 1 208 0
  83 0046 4FF46053 		mov	r3, #14336
  84 004a C4F20203 		movt	r3, 16386
  85 004e 43F21002 		movw	r2, #12304
  86 0052 C2F20042 		movt	r2, 9216
  87 0056 5A60     		str	r2, [r3, #4]
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 211 0
  89 0058 4FF46053 		mov	r3, #14336
  90 005c C4F20203 		movt	r3, 16386
  91 0060 4FF46052 		mov	r2, #14336
  92 0064 C4F20202 		movt	r2, 16386
  93 0068 1268     		ldr	r2, [r2, #0]
  94 006a 22F48022 		bic	r2, r2, #262144
  95 006e 1A60     		str	r2, [r3, #0]
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  96              		.loc 1 214 0
  97 0070 4FF46053 		mov	r3, #14336
  98 0074 C4F20203 		movt	r3, 16386
  99 0078 4FF00002 		mov	r2, #0
 100 007c DA60     		str	r2, [r3, #12]
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 101              		.loc 1 215 0
 102 007e BD46     		mov	sp, r7
 103 0080 80BC     		pop	{r7}
 104 0082 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE110:
 108              		.section	.text.RCC_HSEConfig,"ax",%progbits
 109              		.align	2
 110              		.global	RCC_HSEConfig
 111              		.thumb
 112              		.thumb_func
 114              	RCC_HSEConfig:
 115              	.LFB111:
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 116              		.loc 1 238 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 8
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0000 80B4     		push	{r7}
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 7, -4
 125 0002 83B0     		sub	sp, sp, #12
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              	.LCFI4:
 130              		.cfi_def_cfa_register 7
 131 0006 0346     		mov	r3, r0
 132 0008 FB71     		strb	r3, [r7, #7]
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 133              		.loc 1 243 0
 134 000a 43F60203 		movw	r3, #14338
 135 000e C4F20203 		movt	r3, 16386
 136 0012 4FF00002 		mov	r2, #0
 137 0016 1A70     		strb	r2, [r3, #0]
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 138              		.loc 1 246 0
 139 0018 43F60203 		movw	r3, #14338
 140 001c C4F20203 		movt	r3, 16386
 141 0020 FA79     		ldrb	r2, [r7, #7]
 142 0022 1A70     		strb	r2, [r3, #0]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 143              		.loc 1 247 0
 144 0024 07F10C07 		add	r7, r7, #12
 145 0028 BD46     		mov	sp, r7
 146 002a 80BC     		pop	{r7}
 147 002c 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE111:
 151 002e 00BF     		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 152              		.align	2
 153              		.global	RCC_WaitForHSEStartUp
 154              		.thumb
 155              		.thumb_func
 157              	RCC_WaitForHSEStartUp:
 158              	.LFB112:
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 159              		.loc 1 262 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI5:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 14, -4
 167              		.cfi_offset 7, -8
 168 0002 82B0     		sub	sp, sp, #8
 169              	.LCFI6:
 170              		.cfi_def_cfa_offset 16
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI7:
 173              		.cfi_def_cfa_register 7
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 174              		.loc 1 263 0
 175 0006 4FF00003 		mov	r3, #0
 176 000a 3B60     		str	r3, [r7, #0]
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 177              		.loc 1 264 0
 178 000c 4FF00003 		mov	r3, #0
 179 0010 FB71     		strb	r3, [r7, #7]
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 180              		.loc 1 265 0
 181 0012 4FF00003 		mov	r3, #0
 182 0016 BB71     		strb	r3, [r7, #6]
 183              	.L5:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 184              		.loc 1 269 0 discriminator 1
 185 0018 4FF03100 		mov	r0, #49
 186 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 187 0020 0346     		mov	r3, r0
 188 0022 BB71     		strb	r3, [r7, #6]
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 189              		.loc 1 270 0 discriminator 1
 190 0024 3B68     		ldr	r3, [r7, #0]
 191 0026 03F10103 		add	r3, r3, #1
 192 002a 3B60     		str	r3, [r7, #0]
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 193              		.loc 1 271 0 discriminator 1
 194 002c 3B68     		ldr	r3, [r7, #0]
 195 002e B3F5A06F 		cmp	r3, #1280
 196 0032 02D0     		beq	.L4
 197 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 198 0036 002B     		cmp	r3, #0
 199 0038 EED0     		beq	.L5
 200              	.L4:
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 201              		.loc 1 273 0
 202 003a 4FF03100 		mov	r0, #49
 203 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 204 0042 0346     		mov	r3, r0
 205 0044 002B     		cmp	r3, #0
 206 0046 03D0     		beq	.L6
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 207              		.loc 1 275 0
 208 0048 4FF00103 		mov	r3, #1
 209 004c FB71     		strb	r3, [r7, #7]
 210 004e 02E0     		b	.L7
 211              	.L6:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 212              		.loc 1 279 0
 213 0050 4FF00003 		mov	r3, #0
 214 0054 FB71     		strb	r3, [r7, #7]
 215              	.L7:
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 216              		.loc 1 281 0
 217 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 218              		.loc 1 282 0
 219 0058 1846     		mov	r0, r3
 220 005a 07F10807 		add	r7, r7, #8
 221 005e BD46     		mov	sp, r7
 222 0060 80BD     		pop	{r7, pc}
 223              		.cfi_endproc
 224              	.LFE112:
 226 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 227              		.align	2
 228              		.global	RCC_AdjustHSICalibrationValue
 229              		.thumb
 230              		.thumb_func
 232              	RCC_AdjustHSICalibrationValue:
 233              	.LFB113:
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 234              		.loc 1 293 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 16
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239 0000 80B4     		push	{r7}
 240              	.LCFI8:
 241              		.cfi_def_cfa_offset 4
 242              		.cfi_offset 7, -4
 243 0002 85B0     		sub	sp, sp, #20
 244              	.LCFI9:
 245              		.cfi_def_cfa_offset 24
 246 0004 00AF     		add	r7, sp, #0
 247              	.LCFI10:
 248              		.cfi_def_cfa_register 7
 249 0006 0346     		mov	r3, r0
 250 0008 FB71     		strb	r3, [r7, #7]
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 251              		.loc 1 294 0
 252 000a 4FF00003 		mov	r3, #0
 253 000e FB60     		str	r3, [r7, #12]
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 254              		.loc 1 298 0
 255 0010 4FF46053 		mov	r3, #14336
 256 0014 C4F20203 		movt	r3, 16386
 257 0018 1B68     		ldr	r3, [r3, #0]
 258 001a FB60     		str	r3, [r7, #12]
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 259              		.loc 1 301 0
 260 001c FB68     		ldr	r3, [r7, #12]
 261 001e 23F0F803 		bic	r3, r3, #248
 262 0022 FB60     		str	r3, [r7, #12]
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 263              		.loc 1 304 0
 264 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 265 0026 4FEAC303 		lsl	r3, r3, #3
 266 002a FA68     		ldr	r2, [r7, #12]
 267 002c 1343     		orrs	r3, r3, r2
 268 002e FB60     		str	r3, [r7, #12]
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 269              		.loc 1 307 0
 270 0030 4FF46053 		mov	r3, #14336
 271 0034 C4F20203 		movt	r3, 16386
 272 0038 FA68     		ldr	r2, [r7, #12]
 273 003a 1A60     		str	r2, [r3, #0]
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 274              		.loc 1 308 0
 275 003c 07F11407 		add	r7, r7, #20
 276 0040 BD46     		mov	sp, r7
 277 0042 80BC     		pop	{r7}
 278 0044 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE113:
 282 0046 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 283              		.align	2
 284              		.global	RCC_HSICmd
 285              		.thumb
 286              		.thumb_func
 288              	RCC_HSICmd:
 289              	.LFB114:
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 290              		.loc 1 329 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 8
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295 0000 80B4     		push	{r7}
 296              	.LCFI11:
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 7, -4
 299 0002 83B0     		sub	sp, sp, #12
 300              	.LCFI12:
 301              		.cfi_def_cfa_offset 16
 302 0004 00AF     		add	r7, sp, #0
 303              	.LCFI13:
 304              		.cfi_def_cfa_register 7
 305 0006 0346     		mov	r3, r0
 306 0008 FB71     		strb	r3, [r7, #7]
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 307              		.loc 1 333 0
 308 000a 4FF00003 		mov	r3, #0
 309 000e C4F24723 		movt	r3, 16967
 310 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 311 0014 1A60     		str	r2, [r3, #0]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 312              		.loc 1 334 0
 313 0016 07F10C07 		add	r7, r7, #12
 314 001a BD46     		mov	sp, r7
 315 001c 80BC     		pop	{r7}
 316 001e 7047     		bx	lr
 317              		.cfi_endproc
 318              	.LFE114:
 320              		.section	.text.RCC_LSEConfig,"ax",%progbits
 321              		.align	2
 322              		.global	RCC_LSEConfig
 323              		.thumb
 324              		.thumb_func
 326              	RCC_LSEConfig:
 327              	.LFB115:
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 328              		.loc 1 354 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 1, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333 0000 80B4     		push	{r7}
 334              	.LCFI14:
 335              		.cfi_def_cfa_offset 4
 336              		.cfi_offset 7, -4
 337 0002 83B0     		sub	sp, sp, #12
 338              	.LCFI15:
 339              		.cfi_def_cfa_offset 16
 340 0004 00AF     		add	r7, sp, #0
 341              	.LCFI16:
 342              		.cfi_def_cfa_register 7
 343 0006 0346     		mov	r3, r0
 344 0008 FB71     		strb	r3, [r7, #7]
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 345              		.loc 1 360 0
 346 000a 43F67003 		movw	r3, #14448
 347 000e C4F20203 		movt	r3, 16386
 348 0012 4FF00002 		mov	r2, #0
 349 0016 1A70     		strb	r2, [r3, #0]
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 350              		.loc 1 363 0
 351 0018 43F67003 		movw	r3, #14448
 352 001c C4F20203 		movt	r3, 16386
 353 0020 4FF00002 		mov	r2, #0
 354 0024 1A70     		strb	r2, [r3, #0]
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 355              		.loc 1 366 0
 356 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 357 0028 012B     		cmp	r3, #1
 358 002a 02D0     		beq	.L12
 359 002c 042B     		cmp	r3, #4
 360 002e 08D0     		beq	.L13
 361 0030 0FE0     		b	.L15
 362              	.L12:
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 363              		.loc 1 370 0
 364 0032 43F67003 		movw	r3, #14448
 365 0036 C4F20203 		movt	r3, 16386
 366 003a 4FF00102 		mov	r2, #1
 367 003e 1A70     		strb	r2, [r3, #0]
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 368              		.loc 1 371 0
 369 0040 08E0     		b	.L10
 370              	.L13:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 371              		.loc 1 374 0
 372 0042 43F67003 		movw	r3, #14448
 373 0046 C4F20203 		movt	r3, 16386
 374 004a 4FF00502 		mov	r2, #5
 375 004e 1A70     		strb	r2, [r3, #0]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376              		.loc 1 375 0
 377 0050 00E0     		b	.L10
 378              	.L15:
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 379              		.loc 1 377 0
 380 0052 00BF     		nop
 381              	.L10:
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 382              		.loc 1 379 0
 383 0054 07F10C07 		add	r7, r7, #12
 384 0058 BD46     		mov	sp, r7
 385 005a 80BC     		pop	{r7}
 386 005c 7047     		bx	lr
 387              		.cfi_endproc
 388              	.LFE115:
 390 005e 00BF     		.section	.text.RCC_LSICmd,"ax",%progbits
 391              		.align	2
 392              		.global	RCC_LSICmd
 393              		.thumb
 394              		.thumb_func
 396              	RCC_LSICmd:
 397              	.LFB116:
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 398              		.loc 1 394 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403 0000 80B4     		push	{r7}
 404              	.LCFI17:
 405              		.cfi_def_cfa_offset 4
 406              		.cfi_offset 7, -4
 407 0002 83B0     		sub	sp, sp, #12
 408              	.LCFI18:
 409              		.cfi_def_cfa_offset 16
 410 0004 00AF     		add	r7, sp, #0
 411              	.LCFI19:
 412              		.cfi_def_cfa_register 7
 413 0006 0346     		mov	r3, r0
 414 0008 FB71     		strb	r3, [r7, #7]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 415              		.loc 1 398 0
 416 000a 4FF46863 		mov	r3, #3712
 417 000e C4F24723 		movt	r3, 16967
 418 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 419 0014 1A60     		str	r2, [r3, #0]
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 420              		.loc 1 399 0
 421 0016 07F10C07 		add	r7, r7, #12
 422 001a BD46     		mov	sp, r7
 423 001c 80BC     		pop	{r7}
 424 001e 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE116:
 428              		.section	.text.RCC_PLLConfig,"ax",%progbits
 429              		.align	2
 430              		.global	RCC_PLLConfig
 431              		.thumb
 432              		.thumb_func
 434              	RCC_PLLConfig:
 435              	.LFB117:
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 436              		.loc 1 437 0
 437              		.cfi_startproc
 438              		@ args = 4, pretend = 0, frame = 16
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441 0000 80B4     		push	{r7}
 442              	.LCFI20:
 443              		.cfi_def_cfa_offset 4
 444              		.cfi_offset 7, -4
 445 0002 85B0     		sub	sp, sp, #20
 446              	.LCFI21:
 447              		.cfi_def_cfa_offset 24
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI22:
 450              		.cfi_def_cfa_register 7
 451 0006 F860     		str	r0, [r7, #12]
 452 0008 B960     		str	r1, [r7, #8]
 453 000a 7A60     		str	r2, [r7, #4]
 454 000c 3B60     		str	r3, [r7, #0]
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 455              		.loc 1 445 0
 456 000e 4FF46053 		mov	r3, #14336
 457 0012 C4F20203 		movt	r3, 16386
 458 0016 7A68     		ldr	r2, [r7, #4]
 459 0018 4FEA8211 		lsl	r1, r2, #6
 460 001c BA68     		ldr	r2, [r7, #8]
 461 001e 1143     		orrs	r1, r1, r2
 462 0020 3A68     		ldr	r2, [r7, #0]
 463 0022 4FEA5202 		lsr	r2, r2, #1
 464 0026 02F1FF32 		add	r2, r2, #-1
 465 002a 4FEA0242 		lsl	r2, r2, #16
 466 002e 1143     		orrs	r1, r1, r2
 467 0030 FA68     		ldr	r2, [r7, #12]
 468 0032 1143     		orrs	r1, r1, r2
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 469              		.loc 1 446 0
 470 0034 BA69     		ldr	r2, [r7, #24]
 471 0036 4FEA0262 		lsl	r2, r2, #24
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 472              		.loc 1 445 0
 473 003a 0A43     		orrs	r2, r2, r1
 474 003c 5A60     		str	r2, [r3, #4]
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 475              		.loc 1 447 0
 476 003e 07F11407 		add	r7, r7, #20
 477 0042 BD46     		mov	sp, r7
 478 0044 80BC     		pop	{r7}
 479 0046 7047     		bx	lr
 480              		.cfi_endproc
 481              	.LFE117:
 483              		.section	.text.RCC_PLLCmd,"ax",%progbits
 484              		.align	2
 485              		.global	RCC_PLLCmd
 486              		.thumb
 487              		.thumb_func
 489              	RCC_PLLCmd:
 490              	.LFB118:
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 491              		.loc 1 460 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 8
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496 0000 80B4     		push	{r7}
 497              	.LCFI23:
 498              		.cfi_def_cfa_offset 4
 499              		.cfi_offset 7, -4
 500 0002 83B0     		sub	sp, sp, #12
 501              	.LCFI24:
 502              		.cfi_def_cfa_offset 16
 503 0004 00AF     		add	r7, sp, #0
 504              	.LCFI25:
 505              		.cfi_def_cfa_register 7
 506 0006 0346     		mov	r3, r0
 507 0008 FB71     		strb	r3, [r7, #7]
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 508              		.loc 1 463 0
 509 000a 4FF06003 		mov	r3, #96
 510 000e C4F24723 		movt	r3, 16967
 511 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 512 0014 1A60     		str	r2, [r3, #0]
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 513              		.loc 1 464 0
 514 0016 07F10C07 		add	r7, r7, #12
 515 001a BD46     		mov	sp, r7
 516 001c 80BC     		pop	{r7}
 517 001e 7047     		bx	lr
 518              		.cfi_endproc
 519              	.LFE118:
 521              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 522              		.align	2
 523              		.global	RCC_PLLI2SConfig
 524              		.thumb
 525              		.thumb_func
 527              	RCC_PLLI2SConfig:
 528              	.LFB119:
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 529              		.loc 1 487 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 534 0000 80B4     		push	{r7}
 535              	.LCFI26:
 536              		.cfi_def_cfa_offset 4
 537              		.cfi_offset 7, -4
 538 0002 83B0     		sub	sp, sp, #12
 539              	.LCFI27:
 540              		.cfi_def_cfa_offset 16
 541 0004 00AF     		add	r7, sp, #0
 542              	.LCFI28:
 543              		.cfi_def_cfa_register 7
 544 0006 7860     		str	r0, [r7, #4]
 545 0008 3960     		str	r1, [r7, #0]
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 546              		.loc 1 492 0
 547 000a 4FF46053 		mov	r3, #14336
 548 000e C4F20203 		movt	r3, 16386
 549 0012 7A68     		ldr	r2, [r7, #4]
 550 0014 4FEA8211 		lsl	r1, r2, #6
 551 0018 3A68     		ldr	r2, [r7, #0]
 552 001a 4FEA0272 		lsl	r2, r2, #28
 553 001e 0A43     		orrs	r2, r2, r1
 554 0020 C3F88420 		str	r2, [r3, #132]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 555              		.loc 1 493 0
 556 0024 07F10C07 		add	r7, r7, #12
 557 0028 BD46     		mov	sp, r7
 558 002a 80BC     		pop	{r7}
 559 002c 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE119:
 563 002e 00BF     		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 564              		.align	2
 565              		.global	RCC_PLLI2SCmd
 566              		.thumb
 567              		.thumb_func
 569              	RCC_PLLI2SCmd:
 570              	.LFB120:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 571              		.loc 1 503 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 8
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576 0000 80B4     		push	{r7}
 577              	.LCFI29:
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 7, -4
 580 0002 83B0     		sub	sp, sp, #12
 581              	.LCFI30:
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              	.LCFI31:
 585              		.cfi_def_cfa_register 7
 586 0006 0346     		mov	r3, r0
 587 0008 FB71     		strb	r3, [r7, #7]
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 588              		.loc 1 506 0
 589 000a 4FF06803 		mov	r3, #104
 590 000e C4F24723 		movt	r3, 16967
 591 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 592 0014 1A60     		str	r2, [r3, #0]
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 593              		.loc 1 507 0
 594 0016 07F10C07 		add	r7, r7, #12
 595 001a BD46     		mov	sp, r7
 596 001c 80BC     		pop	{r7}
 597 001e 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE120:
 601              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 602              		.align	2
 603              		.global	RCC_ClockSecuritySystemCmd
 604              		.thumb
 605              		.thumb_func
 607              	RCC_ClockSecuritySystemCmd:
 608              	.LFB121:
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 609              		.loc 1 521 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 8
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              	.LCFI32:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 7, -4
 618 0002 83B0     		sub	sp, sp, #12
 619              	.LCFI33:
 620              		.cfi_def_cfa_offset 16
 621 0004 00AF     		add	r7, sp, #0
 622              	.LCFI34:
 623              		.cfi_def_cfa_register 7
 624 0006 0346     		mov	r3, r0
 625 0008 FB71     		strb	r3, [r7, #7]
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 626              		.loc 1 524 0
 627 000a 4FF04C03 		mov	r3, #76
 628 000e C4F24723 		movt	r3, 16967
 629 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 630 0014 1A60     		str	r2, [r3, #0]
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 631              		.loc 1 525 0
 632 0016 07F10C07 		add	r7, r7, #12
 633 001a BD46     		mov	sp, r7
 634 001c 80BC     		pop	{r7}
 635 001e 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE121:
 639              		.section	.text.RCC_MCO1Config,"ax",%progbits
 640              		.align	2
 641              		.global	RCC_MCO1Config
 642              		.thumb
 643              		.thumb_func
 645              	RCC_MCO1Config:
 646              	.LFB122:
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 647              		.loc 1 546 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 16
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 0000 80B4     		push	{r7}
 653              	.LCFI35:
 654              		.cfi_def_cfa_offset 4
 655              		.cfi_offset 7, -4
 656 0002 85B0     		sub	sp, sp, #20
 657              	.LCFI36:
 658              		.cfi_def_cfa_offset 24
 659 0004 00AF     		add	r7, sp, #0
 660              	.LCFI37:
 661              		.cfi_def_cfa_register 7
 662 0006 7860     		str	r0, [r7, #4]
 663 0008 3960     		str	r1, [r7, #0]
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 664              		.loc 1 547 0
 665 000a 4FF00003 		mov	r3, #0
 666 000e FB60     		str	r3, [r7, #12]
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 667              		.loc 1 553 0
 668 0010 4FF46053 		mov	r3, #14336
 669 0014 C4F20203 		movt	r3, 16386
 670 0018 9B68     		ldr	r3, [r3, #8]
 671 001a FB60     		str	r3, [r7, #12]
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 672              		.loc 1 556 0
 673 001c FB68     		ldr	r3, [r7, #12]
 674 001e 23F0EC63 		bic	r3, r3, #123731968
 675 0022 FB60     		str	r3, [r7, #12]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 676              		.loc 1 559 0
 677 0024 7A68     		ldr	r2, [r7, #4]
 678 0026 3B68     		ldr	r3, [r7, #0]
 679 0028 1343     		orrs	r3, r3, r2
 680 002a FA68     		ldr	r2, [r7, #12]
 681 002c 1343     		orrs	r3, r3, r2
 682 002e FB60     		str	r3, [r7, #12]
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 683              		.loc 1 562 0
 684 0030 4FF46053 		mov	r3, #14336
 685 0034 C4F20203 		movt	r3, 16386
 686 0038 FA68     		ldr	r2, [r7, #12]
 687 003a 9A60     		str	r2, [r3, #8]
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 688              		.loc 1 563 0
 689 003c 07F11407 		add	r7, r7, #20
 690 0040 BD46     		mov	sp, r7
 691 0042 80BC     		pop	{r7}
 692 0044 7047     		bx	lr
 693              		.cfi_endproc
 694              	.LFE122:
 696 0046 00BF     		.section	.text.RCC_MCO2Config,"ax",%progbits
 697              		.align	2
 698              		.global	RCC_MCO2Config
 699              		.thumb
 700              		.thumb_func
 702              	RCC_MCO2Config:
 703              	.LFB123:
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 704              		.loc 1 584 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 16
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 0000 80B4     		push	{r7}
 710              	.LCFI38:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 0002 85B0     		sub	sp, sp, #20
 714              	.LCFI39:
 715              		.cfi_def_cfa_offset 24
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI40:
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 720 0008 3960     		str	r1, [r7, #0]
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 721              		.loc 1 585 0
 722 000a 4FF00003 		mov	r3, #0
 723 000e FB60     		str	r3, [r7, #12]
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 724              		.loc 1 591 0
 725 0010 4FF46053 		mov	r3, #14336
 726 0014 C4F20203 		movt	r3, 16386
 727 0018 9B68     		ldr	r3, [r3, #8]
 728 001a FB60     		str	r3, [r7, #12]
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 729              		.loc 1 594 0
 730 001c FB68     		ldr	r3, [r7, #12]
 731 001e 23F07843 		bic	r3, r3, #-134217728
 732 0022 FB60     		str	r3, [r7, #12]
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 733              		.loc 1 597 0
 734 0024 7A68     		ldr	r2, [r7, #4]
 735 0026 3B68     		ldr	r3, [r7, #0]
 736 0028 1343     		orrs	r3, r3, r2
 737 002a FA68     		ldr	r2, [r7, #12]
 738 002c 1343     		orrs	r3, r3, r2
 739 002e FB60     		str	r3, [r7, #12]
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 740              		.loc 1 600 0
 741 0030 4FF46053 		mov	r3, #14336
 742 0034 C4F20203 		movt	r3, 16386
 743 0038 FA68     		ldr	r2, [r7, #12]
 744 003a 9A60     		str	r2, [r3, #8]
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 745              		.loc 1 601 0
 746 003c 07F11407 		add	r7, r7, #20
 747 0040 BD46     		mov	sp, r7
 748 0042 80BC     		pop	{r7}
 749 0044 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE123:
 753 0046 00BF     		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 754              		.align	2
 755              		.global	RCC_SYSCLKConfig
 756              		.thumb
 757              		.thumb_func
 759              	RCC_SYSCLKConfig:
 760              	.LFB124:
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 761              		.loc 1 689 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 16
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766 0000 80B4     		push	{r7}
 767              	.LCFI41:
 768              		.cfi_def_cfa_offset 4
 769              		.cfi_offset 7, -4
 770 0002 85B0     		sub	sp, sp, #20
 771              	.LCFI42:
 772              		.cfi_def_cfa_offset 24
 773 0004 00AF     		add	r7, sp, #0
 774              	.LCFI43:
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 777              		.loc 1 690 0
 778 0008 4FF00003 		mov	r3, #0
 779 000c FB60     		str	r3, [r7, #12]
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 780              		.loc 1 695 0
 781 000e 4FF46053 		mov	r3, #14336
 782 0012 C4F20203 		movt	r3, 16386
 783 0016 9B68     		ldr	r3, [r3, #8]
 784 0018 FB60     		str	r3, [r7, #12]
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 785              		.loc 1 698 0
 786 001a FB68     		ldr	r3, [r7, #12]
 787 001c 23F00303 		bic	r3, r3, #3
 788 0020 FB60     		str	r3, [r7, #12]
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 789              		.loc 1 701 0
 790 0022 FA68     		ldr	r2, [r7, #12]
 791 0024 7B68     		ldr	r3, [r7, #4]
 792 0026 1343     		orrs	r3, r3, r2
 793 0028 FB60     		str	r3, [r7, #12]
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 794              		.loc 1 704 0
 795 002a 4FF46053 		mov	r3, #14336
 796 002e C4F20203 		movt	r3, 16386
 797 0032 FA68     		ldr	r2, [r7, #12]
 798 0034 9A60     		str	r2, [r3, #8]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 799              		.loc 1 705 0
 800 0036 07F11407 		add	r7, r7, #20
 801 003a BD46     		mov	sp, r7
 802 003c 80BC     		pop	{r7}
 803 003e 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE124:
 807              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 808              		.align	2
 809              		.global	RCC_GetSYSCLKSource
 810              		.thumb
 811              		.thumb_func
 813              	RCC_GetSYSCLKSource:
 814              	.LFB125:
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 815              		.loc 1 717 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820 0000 80B4     		push	{r7}
 821              	.LCFI44:
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 00AF     		add	r7, sp, #0
 825              	.LCFI45:
 826              		.cfi_def_cfa_register 7
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 827              		.loc 1 718 0
 828 0004 4FF46053 		mov	r3, #14336
 829 0008 C4F20203 		movt	r3, 16386
 830 000c 9B68     		ldr	r3, [r3, #8]
 831 000e DBB2     		uxtb	r3, r3
 832 0010 03F00C03 		and	r3, r3, #12
 833 0014 DBB2     		uxtb	r3, r3
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 834              		.loc 1 719 0
 835 0016 1846     		mov	r0, r3
 836 0018 BD46     		mov	sp, r7
 837 001a 80BC     		pop	{r7}
 838 001c 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE125:
 842 001e 00BF     		.section	.text.RCC_HCLKConfig,"ax",%progbits
 843              		.align	2
 844              		.global	RCC_HCLKConfig
 845              		.thumb
 846              		.thumb_func
 848              	RCC_HCLKConfig:
 849              	.LFB126:
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 850              		.loc 1 742 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 16
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855 0000 80B4     		push	{r7}
 856              	.LCFI46:
 857              		.cfi_def_cfa_offset 4
 858              		.cfi_offset 7, -4
 859 0002 85B0     		sub	sp, sp, #20
 860              	.LCFI47:
 861              		.cfi_def_cfa_offset 24
 862 0004 00AF     		add	r7, sp, #0
 863              	.LCFI48:
 864              		.cfi_def_cfa_register 7
 865 0006 7860     		str	r0, [r7, #4]
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 866              		.loc 1 743 0
 867 0008 4FF00003 		mov	r3, #0
 868 000c FB60     		str	r3, [r7, #12]
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 869              		.loc 1 748 0
 870 000e 4FF46053 		mov	r3, #14336
 871 0012 C4F20203 		movt	r3, 16386
 872 0016 9B68     		ldr	r3, [r3, #8]
 873 0018 FB60     		str	r3, [r7, #12]
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 874              		.loc 1 751 0
 875 001a FB68     		ldr	r3, [r7, #12]
 876 001c 23F0F003 		bic	r3, r3, #240
 877 0020 FB60     		str	r3, [r7, #12]
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 878              		.loc 1 754 0
 879 0022 FA68     		ldr	r2, [r7, #12]
 880 0024 7B68     		ldr	r3, [r7, #4]
 881 0026 1343     		orrs	r3, r3, r2
 882 0028 FB60     		str	r3, [r7, #12]
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 883              		.loc 1 757 0
 884 002a 4FF46053 		mov	r3, #14336
 885 002e C4F20203 		movt	r3, 16386
 886 0032 FA68     		ldr	r2, [r7, #12]
 887 0034 9A60     		str	r2, [r3, #8]
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 888              		.loc 1 758 0
 889 0036 07F11407 		add	r7, r7, #20
 890 003a BD46     		mov	sp, r7
 891 003c 80BC     		pop	{r7}
 892 003e 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE126:
 896              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 897              		.align	2
 898              		.global	RCC_PCLK1Config
 899              		.thumb
 900              		.thumb_func
 902              	RCC_PCLK1Config:
 903              	.LFB127:
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 904              		.loc 1 774 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 1, uses_anonymous_args = 0
 908              		@ link register save eliminated.
 909 0000 80B4     		push	{r7}
 910              	.LCFI49:
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 7, -4
 913 0002 85B0     		sub	sp, sp, #20
 914              	.LCFI50:
 915              		.cfi_def_cfa_offset 24
 916 0004 00AF     		add	r7, sp, #0
 917              	.LCFI51:
 918              		.cfi_def_cfa_register 7
 919 0006 7860     		str	r0, [r7, #4]
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 920              		.loc 1 775 0
 921 0008 4FF00003 		mov	r3, #0
 922 000c FB60     		str	r3, [r7, #12]
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 923              		.loc 1 780 0
 924 000e 4FF46053 		mov	r3, #14336
 925 0012 C4F20203 		movt	r3, 16386
 926 0016 9B68     		ldr	r3, [r3, #8]
 927 0018 FB60     		str	r3, [r7, #12]
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 928              		.loc 1 783 0
 929 001a FB68     		ldr	r3, [r7, #12]
 930 001c 23F4E053 		bic	r3, r3, #7168
 931 0020 FB60     		str	r3, [r7, #12]
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 932              		.loc 1 786 0
 933 0022 FA68     		ldr	r2, [r7, #12]
 934 0024 7B68     		ldr	r3, [r7, #4]
 935 0026 1343     		orrs	r3, r3, r2
 936 0028 FB60     		str	r3, [r7, #12]
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 937              		.loc 1 789 0
 938 002a 4FF46053 		mov	r3, #14336
 939 002e C4F20203 		movt	r3, 16386
 940 0032 FA68     		ldr	r2, [r7, #12]
 941 0034 9A60     		str	r2, [r3, #8]
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 942              		.loc 1 790 0
 943 0036 07F11407 		add	r7, r7, #20
 944 003a BD46     		mov	sp, r7
 945 003c 80BC     		pop	{r7}
 946 003e 7047     		bx	lr
 947              		.cfi_endproc
 948              	.LFE127:
 950              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 951              		.align	2
 952              		.global	RCC_PCLK2Config
 953              		.thumb
 954              		.thumb_func
 956              	RCC_PCLK2Config:
 957              	.LFB128:
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 958              		.loc 1 805 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 16
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 0000 80B4     		push	{r7}
 964              	.LCFI52:
 965              		.cfi_def_cfa_offset 4
 966              		.cfi_offset 7, -4
 967 0002 85B0     		sub	sp, sp, #20
 968              	.LCFI53:
 969              		.cfi_def_cfa_offset 24
 970 0004 00AF     		add	r7, sp, #0
 971              	.LCFI54:
 972              		.cfi_def_cfa_register 7
 973 0006 7860     		str	r0, [r7, #4]
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 974              		.loc 1 806 0
 975 0008 4FF00003 		mov	r3, #0
 976 000c FB60     		str	r3, [r7, #12]
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 977              		.loc 1 811 0
 978 000e 4FF46053 		mov	r3, #14336
 979 0012 C4F20203 		movt	r3, 16386
 980 0016 9B68     		ldr	r3, [r3, #8]
 981 0018 FB60     		str	r3, [r7, #12]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 982              		.loc 1 814 0
 983 001a FB68     		ldr	r3, [r7, #12]
 984 001c 23F46043 		bic	r3, r3, #57344
 985 0020 FB60     		str	r3, [r7, #12]
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 986              		.loc 1 817 0
 987 0022 7B68     		ldr	r3, [r7, #4]
 988 0024 4FEAC303 		lsl	r3, r3, #3
 989 0028 FA68     		ldr	r2, [r7, #12]
 990 002a 1343     		orrs	r3, r3, r2
 991 002c FB60     		str	r3, [r7, #12]
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 992              		.loc 1 820 0
 993 002e 4FF46053 		mov	r3, #14336
 994 0032 C4F20203 		movt	r3, 16386
 995 0036 FA68     		ldr	r2, [r7, #12]
 996 0038 9A60     		str	r2, [r3, #8]
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 997              		.loc 1 821 0
 998 003a 07F11407 		add	r7, r7, #20
 999 003e BD46     		mov	sp, r7
 1000 0040 80BC     		pop	{r7}
 1001 0042 7047     		bx	lr
 1002              		.cfi_endproc
 1003              	.LFE128:
 1005              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1006              		.align	2
 1007              		.global	RCC_GetClocksFreq
 1008              		.thumb
 1009              		.thumb_func
 1011              	RCC_GetClocksFreq:
 1012              	.LFB129:
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1013              		.loc 1 857 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 32
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017              		@ link register save eliminated.
 1018 0000 80B4     		push	{r7}
 1019              	.LCFI55:
 1020              		.cfi_def_cfa_offset 4
 1021              		.cfi_offset 7, -4
 1022 0002 89B0     		sub	sp, sp, #36
 1023              	.LCFI56:
 1024              		.cfi_def_cfa_offset 40
 1025 0004 00AF     		add	r7, sp, #0
 1026              	.LCFI57:
 1027              		.cfi_def_cfa_register 7
 1028 0006 7860     		str	r0, [r7, #4]
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1029              		.loc 1 858 0
 1030 0008 4FF00003 		mov	r3, #0
 1031 000c BB61     		str	r3, [r7, #24]
 1032 000e 4FF00003 		mov	r3, #0
 1033 0012 7B61     		str	r3, [r7, #20]
 1034 0014 4FF00003 		mov	r3, #0
 1035 0018 FB61     		str	r3, [r7, #28]
 1036 001a 4FF00203 		mov	r3, #2
 1037 001e 3B61     		str	r3, [r7, #16]
 1038 0020 4FF00003 		mov	r3, #0
 1039 0024 FB60     		str	r3, [r7, #12]
 1040 0026 4FF00203 		mov	r3, #2
 1041 002a BB60     		str	r3, [r7, #8]
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1042              		.loc 1 861 0
 1043 002c 4FF46053 		mov	r3, #14336
 1044 0030 C4F20203 		movt	r3, 16386
 1045 0034 9B68     		ldr	r3, [r3, #8]
 1046 0036 03F00C03 		and	r3, r3, #12
 1047 003a BB61     		str	r3, [r7, #24]
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1048              		.loc 1 863 0
 1049 003c BB69     		ldr	r3, [r7, #24]
 1050 003e 042B     		cmp	r3, #4
 1051 0040 0AD0     		beq	.L32
 1052 0042 082B     		cmp	r3, #8
 1053 0044 0FD0     		beq	.L33
 1054 0046 002B     		cmp	r3, #0
 1055 0048 62D1     		bne	.L37
 1056              	.L31:
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1057              		.loc 1 866 0
 1058 004a 7A68     		ldr	r2, [r7, #4]
 1059 004c 4FF41053 		mov	r3, #9216
 1060 0050 C0F2F403 		movt	r3, 244
 1061 0054 1360     		str	r3, [r2, #0]
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1062              		.loc 1 867 0
 1063 0056 62E0     		b	.L34
 1064              	.L32:
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1065              		.loc 1 869 0
 1066 0058 7A68     		ldr	r2, [r7, #4]
 1067 005a 4FF49053 		mov	r3, #4608
 1068 005e C0F27A03 		movt	r3, 122
 1069 0062 1360     		str	r3, [r2, #0]
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1070              		.loc 1 870 0
 1071 0064 5BE0     		b	.L34
 1072              	.L33:
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1073              		.loc 1 876 0
 1074 0066 4FF46053 		mov	r3, #14336
 1075 006a C4F20203 		movt	r3, 16386
 1076 006e 5B68     		ldr	r3, [r3, #4]
 1077 0070 03F48003 		and	r3, r3, #4194304
 1078 0074 4FEA9353 		lsr	r3, r3, #22
 1079 0078 FB60     		str	r3, [r7, #12]
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1080              		.loc 1 877 0
 1081 007a 4FF46053 		mov	r3, #14336
 1082 007e C4F20203 		movt	r3, 16386
 1083 0082 5B68     		ldr	r3, [r3, #4]
 1084 0084 03F03F03 		and	r3, r3, #63
 1085 0088 BB60     		str	r3, [r7, #8]
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1086              		.loc 1 879 0
 1087 008a FB68     		ldr	r3, [r7, #12]
 1088 008c 002B     		cmp	r3, #0
 1089 008e 15D0     		beq	.L35
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1090              		.loc 1 882 0
 1091 0090 4FF49053 		mov	r3, #4608
 1092 0094 C0F27A03 		movt	r3, 122
 1093 0098 BA68     		ldr	r2, [r7, #8]
 1094 009a B3FBF2F2 		udiv	r2, r3, r2
 1095 009e 4FF46053 		mov	r3, #14336
 1096 00a2 C4F20203 		movt	r3, 16386
 1097 00a6 5B68     		ldr	r3, [r3, #4]
 1098 00a8 1946     		mov	r1, r3
 1099 00aa 47F6C073 		movw	r3, #32704
 1100 00ae 0B40     		ands	r3, r3, r1
 1101 00b0 4FEA9313 		lsr	r3, r3, #6
 1102 00b4 03FB02F3 		mul	r3, r3, r2
 1103 00b8 FB61     		str	r3, [r7, #28]
 1104 00ba 14E0     		b	.L36
 1105              	.L35:
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1106              		.loc 1 887 0
 1107 00bc 4FF41053 		mov	r3, #9216
 1108 00c0 C0F2F403 		movt	r3, 244
 1109 00c4 BA68     		ldr	r2, [r7, #8]
 1110 00c6 B3FBF2F2 		udiv	r2, r3, r2
 1111 00ca 4FF46053 		mov	r3, #14336
 1112 00ce C4F20203 		movt	r3, 16386
 1113 00d2 5B68     		ldr	r3, [r3, #4]
 1114 00d4 1946     		mov	r1, r3
 1115 00d6 47F6C073 		movw	r3, #32704
 1116 00da 0B40     		ands	r3, r3, r1
 1117 00dc 4FEA9313 		lsr	r3, r3, #6
 1118 00e0 03FB02F3 		mul	r3, r3, r2
 1119 00e4 FB61     		str	r3, [r7, #28]
 1120              	.L36:
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1121              		.loc 1 890 0
 1122 00e6 4FF46053 		mov	r3, #14336
 1123 00ea C4F20203 		movt	r3, 16386
 1124 00ee 5B68     		ldr	r3, [r3, #4]
 1125 00f0 03F44033 		and	r3, r3, #196608
 1126 00f4 4FEA1343 		lsr	r3, r3, #16
 1127 00f8 03F10103 		add	r3, r3, #1
 1128 00fc 4FEA4303 		lsl	r3, r3, #1
 1129 0100 3B61     		str	r3, [r7, #16]
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1130              		.loc 1 891 0
 1131 0102 FA69     		ldr	r2, [r7, #28]
 1132 0104 3B69     		ldr	r3, [r7, #16]
 1133 0106 B2FBF3F2 		udiv	r2, r2, r3
 1134 010a 7B68     		ldr	r3, [r7, #4]
 1135 010c 1A60     		str	r2, [r3, #0]
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1136              		.loc 1 892 0
 1137 010e 06E0     		b	.L34
 1138              	.L37:
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1139              		.loc 1 894 0
 1140 0110 7A68     		ldr	r2, [r7, #4]
 1141 0112 4FF41053 		mov	r3, #9216
 1142 0116 C0F2F403 		movt	r3, 244
 1143 011a 1360     		str	r3, [r2, #0]
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1144              		.loc 1 895 0
 1145 011c 00BF     		nop
 1146              	.L34:
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1147              		.loc 1 900 0
 1148 011e 4FF46053 		mov	r3, #14336
 1149 0122 C4F20203 		movt	r3, 16386
 1150 0126 9B68     		ldr	r3, [r3, #8]
 1151 0128 03F0F003 		and	r3, r3, #240
 1152 012c BB61     		str	r3, [r7, #24]
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1153              		.loc 1 901 0
 1154 012e BB69     		ldr	r3, [r7, #24]
 1155 0130 4FEA1313 		lsr	r3, r3, #4
 1156 0134 BB61     		str	r3, [r7, #24]
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1157              		.loc 1 902 0
 1158 0136 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1159 013a C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1160 013e BA69     		ldr	r2, [r7, #24]
 1161 0140 9B18     		adds	r3, r3, r2
 1162 0142 1B78     		ldrb	r3, [r3, #0]
 1163 0144 DBB2     		uxtb	r3, r3
 1164 0146 7B61     		str	r3, [r7, #20]
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1165              		.loc 1 904 0
 1166 0148 7B68     		ldr	r3, [r7, #4]
 1167 014a 1A68     		ldr	r2, [r3, #0]
 1168 014c 7B69     		ldr	r3, [r7, #20]
 1169 014e 22FA03F2 		lsr	r2, r2, r3
 1170 0152 7B68     		ldr	r3, [r7, #4]
 1171 0154 5A60     		str	r2, [r3, #4]
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1172              		.loc 1 907 0
 1173 0156 4FF46053 		mov	r3, #14336
 1174 015a C4F20203 		movt	r3, 16386
 1175 015e 9B68     		ldr	r3, [r3, #8]
 1176 0160 03F4E053 		and	r3, r3, #7168
 1177 0164 BB61     		str	r3, [r7, #24]
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1178              		.loc 1 908 0
 1179 0166 BB69     		ldr	r3, [r7, #24]
 1180 0168 4FEA9323 		lsr	r3, r3, #10
 1181 016c BB61     		str	r3, [r7, #24]
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1182              		.loc 1 909 0
 1183 016e 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1184 0172 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1185 0176 BA69     		ldr	r2, [r7, #24]
 1186 0178 9B18     		adds	r3, r3, r2
 1187 017a 1B78     		ldrb	r3, [r3, #0]
 1188 017c DBB2     		uxtb	r3, r3
 1189 017e 7B61     		str	r3, [r7, #20]
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1190              		.loc 1 911 0
 1191 0180 7B68     		ldr	r3, [r7, #4]
 1192 0182 5A68     		ldr	r2, [r3, #4]
 1193 0184 7B69     		ldr	r3, [r7, #20]
 1194 0186 22FA03F2 		lsr	r2, r2, r3
 1195 018a 7B68     		ldr	r3, [r7, #4]
 1196 018c 9A60     		str	r2, [r3, #8]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1197              		.loc 1 914 0
 1198 018e 4FF46053 		mov	r3, #14336
 1199 0192 C4F20203 		movt	r3, 16386
 1200 0196 9B68     		ldr	r3, [r3, #8]
 1201 0198 03F46043 		and	r3, r3, #57344
 1202 019c BB61     		str	r3, [r7, #24]
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1203              		.loc 1 915 0
 1204 019e BB69     		ldr	r3, [r7, #24]
 1205 01a0 4FEA5333 		lsr	r3, r3, #13
 1206 01a4 BB61     		str	r3, [r7, #24]
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1207              		.loc 1 916 0
 1208 01a6 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1209 01aa C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1210 01ae BA69     		ldr	r2, [r7, #24]
 1211 01b0 9B18     		adds	r3, r3, r2
 1212 01b2 1B78     		ldrb	r3, [r3, #0]
 1213 01b4 DBB2     		uxtb	r3, r3
 1214 01b6 7B61     		str	r3, [r7, #20]
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1215              		.loc 1 918 0
 1216 01b8 7B68     		ldr	r3, [r7, #4]
 1217 01ba 5A68     		ldr	r2, [r3, #4]
 1218 01bc 7B69     		ldr	r3, [r7, #20]
 1219 01be 22FA03F2 		lsr	r2, r2, r3
 1220 01c2 7B68     		ldr	r3, [r7, #4]
 1221 01c4 DA60     		str	r2, [r3, #12]
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1222              		.loc 1 919 0
 1223 01c6 07F12407 		add	r7, r7, #36
 1224 01ca BD46     		mov	sp, r7
 1225 01cc 80BC     		pop	{r7}
 1226 01ce 7047     		bx	lr
 1227              		.cfi_endproc
 1228              	.LFE129:
 1230              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1231              		.align	2
 1232              		.global	RCC_RTCCLKConfig
 1233              		.thumb
 1234              		.thumb_func
 1236              	RCC_RTCCLKConfig:
 1237              	.LFB130:
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1238              		.loc 1 982 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 16
 1241              		@ frame_needed = 1, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 1243 0000 80B4     		push	{r7}
 1244              	.LCFI58:
 1245              		.cfi_def_cfa_offset 4
 1246              		.cfi_offset 7, -4
 1247 0002 85B0     		sub	sp, sp, #20
 1248              	.LCFI59:
 1249              		.cfi_def_cfa_offset 24
 1250 0004 00AF     		add	r7, sp, #0
 1251              	.LCFI60:
 1252              		.cfi_def_cfa_register 7
 1253 0006 7860     		str	r0, [r7, #4]
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1254              		.loc 1 983 0
 1255 0008 4FF00003 		mov	r3, #0
 1256 000c FB60     		str	r3, [r7, #12]
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1257              		.loc 1 988 0
 1258 000e 7B68     		ldr	r3, [r7, #4]
 1259 0010 03F44073 		and	r3, r3, #768
 1260 0014 B3F5407F 		cmp	r3, #768
 1261 0018 17D1     		bne	.L39
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1262              		.loc 1 990 0
 1263 001a 4FF46053 		mov	r3, #14336
 1264 001e C4F20203 		movt	r3, 16386
 1265 0022 9B68     		ldr	r3, [r3, #8]
 1266 0024 FB60     		str	r3, [r7, #12]
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1267              		.loc 1 993 0
 1268 0026 FB68     		ldr	r3, [r7, #12]
 1269 0028 23F4F813 		bic	r3, r3, #2031616
 1270 002c FB60     		str	r3, [r7, #12]
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1271              		.loc 1 996 0
 1272 002e 7B68     		ldr	r3, [r7, #4]
 1273 0030 23F07043 		bic	r3, r3, #-268435456
 1274 0034 23F44073 		bic	r3, r3, #768
 1275 0038 FA68     		ldr	r2, [r7, #12]
 1276 003a 1343     		orrs	r3, r3, r2
 1277 003c FB60     		str	r3, [r7, #12]
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1278              		.loc 1 999 0
 1279 003e 4FF46053 		mov	r3, #14336
 1280 0042 C4F20203 		movt	r3, 16386
 1281 0046 FA68     		ldr	r2, [r7, #12]
 1282 0048 9A60     		str	r2, [r3, #8]
 1283              	.L39:
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1284              		.loc 1 1003 0
 1285 004a 4FF46053 		mov	r3, #14336
 1286 004e C4F20203 		movt	r3, 16386
 1287 0052 4FF46052 		mov	r2, #14336
 1288 0056 C4F20202 		movt	r2, 16386
 1289 005a 126F     		ldr	r2, [r2, #112]
 1290 005c 1146     		mov	r1, r2
 1291 005e 7A68     		ldr	r2, [r7, #4]
 1292 0060 4FEA0252 		lsl	r2, r2, #20
 1293 0064 4FEA1252 		lsr	r2, r2, #20
 1294 0068 0A43     		orrs	r2, r2, r1
 1295 006a 1A67     		str	r2, [r3, #112]
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1296              		.loc 1 1004 0
 1297 006c 07F11407 		add	r7, r7, #20
 1298 0070 BD46     		mov	sp, r7
 1299 0072 80BC     		pop	{r7}
 1300 0074 7047     		bx	lr
 1301              		.cfi_endproc
 1302              	.LFE130:
 1304 0076 00BF     		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1305              		.align	2
 1306              		.global	RCC_RTCCLKCmd
 1307              		.thumb
 1308              		.thumb_func
 1310              	RCC_RTCCLKCmd:
 1311              	.LFB131:
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1312              		.loc 1 1014 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 8
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316              		@ link register save eliminated.
 1317 0000 80B4     		push	{r7}
 1318              	.LCFI61:
 1319              		.cfi_def_cfa_offset 4
 1320              		.cfi_offset 7, -4
 1321 0002 83B0     		sub	sp, sp, #12
 1322              	.LCFI62:
 1323              		.cfi_def_cfa_offset 16
 1324 0004 00AF     		add	r7, sp, #0
 1325              	.LCFI63:
 1326              		.cfi_def_cfa_register 7
 1327 0006 0346     		mov	r3, r0
 1328 0008 FB71     		strb	r3, [r7, #7]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1329              		.loc 1 1018 0
 1330 000a 40F63C63 		movw	r3, #3644
 1331 000e C4F24723 		movt	r3, 16967
 1332 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1333 0014 1A60     		str	r2, [r3, #0]
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1334              		.loc 1 1019 0
 1335 0016 07F10C07 		add	r7, r7, #12
 1336 001a BD46     		mov	sp, r7
 1337 001c 80BC     		pop	{r7}
 1338 001e 7047     		bx	lr
 1339              		.cfi_endproc
 1340              	.LFE131:
 1342              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1343              		.align	2
 1344              		.global	RCC_BackupResetCmd
 1345              		.thumb
 1346              		.thumb_func
 1348              	RCC_BackupResetCmd:
 1349              	.LFB132:
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1350              		.loc 1 1031 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 8
 1353              		@ frame_needed = 1, uses_anonymous_args = 0
 1354              		@ link register save eliminated.
 1355 0000 80B4     		push	{r7}
 1356              	.LCFI64:
 1357              		.cfi_def_cfa_offset 4
 1358              		.cfi_offset 7, -4
 1359 0002 83B0     		sub	sp, sp, #12
 1360              	.LCFI65:
 1361              		.cfi_def_cfa_offset 16
 1362 0004 00AF     		add	r7, sp, #0
 1363              	.LCFI66:
 1364              		.cfi_def_cfa_register 7
 1365 0006 0346     		mov	r3, r0
 1366 0008 FB71     		strb	r3, [r7, #7]
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1367              		.loc 1 1034 0
 1368 000a 4FF46463 		mov	r3, #3648
 1369 000e C4F24723 		movt	r3, 16967
 1370 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1371 0014 1A60     		str	r2, [r3, #0]
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1372              		.loc 1 1035 0
 1373 0016 07F10C07 		add	r7, r7, #12
 1374 001a BD46     		mov	sp, r7
 1375 001c 80BC     		pop	{r7}
 1376 001e 7047     		bx	lr
 1377              		.cfi_endproc
 1378              	.LFE132:
 1380              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1381              		.align	2
 1382              		.global	RCC_I2SCLKConfig
 1383              		.thumb
 1384              		.thumb_func
 1386              	RCC_I2SCLKConfig:
 1387              	.LFB133:
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1388              		.loc 1 1051 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 8
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392              		@ link register save eliminated.
 1393 0000 80B4     		push	{r7}
 1394              	.LCFI67:
 1395              		.cfi_def_cfa_offset 4
 1396              		.cfi_offset 7, -4
 1397 0002 83B0     		sub	sp, sp, #12
 1398              	.LCFI68:
 1399              		.cfi_def_cfa_offset 16
 1400 0004 00AF     		add	r7, sp, #0
 1401              	.LCFI69:
 1402              		.cfi_def_cfa_register 7
 1403 0006 7860     		str	r0, [r7, #4]
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1404              		.loc 1 1055 0
 1405 0008 4FF4AE73 		mov	r3, #348
 1406 000c C4F24723 		movt	r3, 16967
 1407 0010 7A68     		ldr	r2, [r7, #4]
 1408 0012 1A60     		str	r2, [r3, #0]
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1409              		.loc 1 1056 0
 1410 0014 07F10C07 		add	r7, r7, #12
 1411 0018 BD46     		mov	sp, r7
 1412 001a 80BC     		pop	{r7}
 1413 001c 7047     		bx	lr
 1414              		.cfi_endproc
 1415              	.LFE133:
 1417 001e 00BF     		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1418              		.align	2
 1419              		.global	RCC_AHB1PeriphClockCmd
 1420              		.thumb
 1421              		.thumb_func
 1423              	RCC_AHB1PeriphClockCmd:
 1424              	.LFB134:
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1425              		.loc 1 1089 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 8
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 1430 0000 80B4     		push	{r7}
 1431              	.LCFI70:
 1432              		.cfi_def_cfa_offset 4
 1433              		.cfi_offset 7, -4
 1434 0002 83B0     		sub	sp, sp, #12
 1435              	.LCFI71:
 1436              		.cfi_def_cfa_offset 16
 1437 0004 00AF     		add	r7, sp, #0
 1438              	.LCFI72:
 1439              		.cfi_def_cfa_register 7
 1440 0006 7860     		str	r0, [r7, #4]
 1441 0008 0B46     		mov	r3, r1
 1442 000a FB70     		strb	r3, [r7, #3]
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1443              		.loc 1 1094 0
 1444 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1445 000e 002B     		cmp	r3, #0
 1446 0010 0DD0     		beq	.L44
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1447              		.loc 1 1096 0
 1448 0012 4FF46053 		mov	r3, #14336
 1449 0016 C4F20203 		movt	r3, 16386
 1450 001a 4FF46052 		mov	r2, #14336
 1451 001e C4F20202 		movt	r2, 16386
 1452 0022 126B     		ldr	r2, [r2, #48]
 1453 0024 1146     		mov	r1, r2
 1454 0026 7A68     		ldr	r2, [r7, #4]
 1455 0028 0A43     		orrs	r2, r2, r1
 1456 002a 1A63     		str	r2, [r3, #48]
 1457 002c 0EE0     		b	.L43
 1458              	.L44:
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1459              		.loc 1 1100 0
 1460 002e 4FF46053 		mov	r3, #14336
 1461 0032 C4F20203 		movt	r3, 16386
 1462 0036 4FF46052 		mov	r2, #14336
 1463 003a C4F20202 		movt	r2, 16386
 1464 003e 126B     		ldr	r2, [r2, #48]
 1465 0040 1146     		mov	r1, r2
 1466 0042 7A68     		ldr	r2, [r7, #4]
 1467 0044 6FEA0202 		mvn	r2, r2
 1468 0048 0A40     		ands	r2, r2, r1
 1469 004a 1A63     		str	r2, [r3, #48]
 1470              	.L43:
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1471              		.loc 1 1102 0
 1472 004c 07F10C07 		add	r7, r7, #12
 1473 0050 BD46     		mov	sp, r7
 1474 0052 80BC     		pop	{r7}
 1475 0054 7047     		bx	lr
 1476              		.cfi_endproc
 1477              	.LFE134:
 1479 0056 00BF     		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1480              		.align	2
 1481              		.global	RCC_AHB2PeriphClockCmd
 1482              		.thumb
 1483              		.thumb_func
 1485              	RCC_AHB2PeriphClockCmd:
 1486              	.LFB135:
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1487              		.loc 1 1121 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 8
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491              		@ link register save eliminated.
 1492 0000 80B4     		push	{r7}
 1493              	.LCFI73:
 1494              		.cfi_def_cfa_offset 4
 1495              		.cfi_offset 7, -4
 1496 0002 83B0     		sub	sp, sp, #12
 1497              	.LCFI74:
 1498              		.cfi_def_cfa_offset 16
 1499 0004 00AF     		add	r7, sp, #0
 1500              	.LCFI75:
 1501              		.cfi_def_cfa_register 7
 1502 0006 7860     		str	r0, [r7, #4]
 1503 0008 0B46     		mov	r3, r1
 1504 000a FB70     		strb	r3, [r7, #3]
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1505              		.loc 1 1126 0
 1506 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1507 000e 002B     		cmp	r3, #0
 1508 0010 0DD0     		beq	.L47
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1509              		.loc 1 1128 0
 1510 0012 4FF46053 		mov	r3, #14336
 1511 0016 C4F20203 		movt	r3, 16386
 1512 001a 4FF46052 		mov	r2, #14336
 1513 001e C4F20202 		movt	r2, 16386
 1514 0022 526B     		ldr	r2, [r2, #52]
 1515 0024 1146     		mov	r1, r2
 1516 0026 7A68     		ldr	r2, [r7, #4]
 1517 0028 0A43     		orrs	r2, r2, r1
 1518 002a 5A63     		str	r2, [r3, #52]
 1519 002c 0EE0     		b	.L46
 1520              	.L47:
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1521              		.loc 1 1132 0
 1522 002e 4FF46053 		mov	r3, #14336
 1523 0032 C4F20203 		movt	r3, 16386
 1524 0036 4FF46052 		mov	r2, #14336
 1525 003a C4F20202 		movt	r2, 16386
 1526 003e 526B     		ldr	r2, [r2, #52]
 1527 0040 1146     		mov	r1, r2
 1528 0042 7A68     		ldr	r2, [r7, #4]
 1529 0044 6FEA0202 		mvn	r2, r2
 1530 0048 0A40     		ands	r2, r2, r1
 1531 004a 5A63     		str	r2, [r3, #52]
 1532              	.L46:
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1533              		.loc 1 1134 0
 1534 004c 07F10C07 		add	r7, r7, #12
 1535 0050 BD46     		mov	sp, r7
 1536 0052 80BC     		pop	{r7}
 1537 0054 7047     		bx	lr
 1538              		.cfi_endproc
 1539              	.LFE135:
 1541 0056 00BF     		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1542              		.align	2
 1543              		.global	RCC_AHB3PeriphClockCmd
 1544              		.thumb
 1545              		.thumb_func
 1547              	RCC_AHB3PeriphClockCmd:
 1548              	.LFB136:
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1549              		.loc 1 1148 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 8
 1552              		@ frame_needed = 1, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554 0000 80B4     		push	{r7}
 1555              	.LCFI76:
 1556              		.cfi_def_cfa_offset 4
 1557              		.cfi_offset 7, -4
 1558 0002 83B0     		sub	sp, sp, #12
 1559              	.LCFI77:
 1560              		.cfi_def_cfa_offset 16
 1561 0004 00AF     		add	r7, sp, #0
 1562              	.LCFI78:
 1563              		.cfi_def_cfa_register 7
 1564 0006 7860     		str	r0, [r7, #4]
 1565 0008 0B46     		mov	r3, r1
 1566 000a FB70     		strb	r3, [r7, #3]
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1567              		.loc 1 1153 0
 1568 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1569 000e 002B     		cmp	r3, #0
 1570 0010 0DD0     		beq	.L50
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1571              		.loc 1 1155 0
 1572 0012 4FF46053 		mov	r3, #14336
 1573 0016 C4F20203 		movt	r3, 16386
 1574 001a 4FF46052 		mov	r2, #14336
 1575 001e C4F20202 		movt	r2, 16386
 1576 0022 926B     		ldr	r2, [r2, #56]
 1577 0024 1146     		mov	r1, r2
 1578 0026 7A68     		ldr	r2, [r7, #4]
 1579 0028 0A43     		orrs	r2, r2, r1
 1580 002a 9A63     		str	r2, [r3, #56]
 1581 002c 0EE0     		b	.L49
 1582              	.L50:
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1583              		.loc 1 1159 0
 1584 002e 4FF46053 		mov	r3, #14336
 1585 0032 C4F20203 		movt	r3, 16386
 1586 0036 4FF46052 		mov	r2, #14336
 1587 003a C4F20202 		movt	r2, 16386
 1588 003e 926B     		ldr	r2, [r2, #56]
 1589 0040 1146     		mov	r1, r2
 1590 0042 7A68     		ldr	r2, [r7, #4]
 1591 0044 6FEA0202 		mvn	r2, r2
 1592 0048 0A40     		ands	r2, r2, r1
 1593 004a 9A63     		str	r2, [r3, #56]
 1594              	.L49:
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1595              		.loc 1 1161 0
 1596 004c 07F10C07 		add	r7, r7, #12
 1597 0050 BD46     		mov	sp, r7
 1598 0052 80BC     		pop	{r7}
 1599 0054 7047     		bx	lr
 1600              		.cfi_endproc
 1601              	.LFE136:
 1603 0056 00BF     		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1604              		.align	2
 1605              		.global	RCC_APB1PeriphClockCmd
 1606              		.thumb
 1607              		.thumb_func
 1609              	RCC_APB1PeriphClockCmd:
 1610              	.LFB137:
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1611              		.loc 1 1198 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 8
 1614              		@ frame_needed = 1, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
 1616 0000 80B4     		push	{r7}
 1617              	.LCFI79:
 1618              		.cfi_def_cfa_offset 4
 1619              		.cfi_offset 7, -4
 1620 0002 83B0     		sub	sp, sp, #12
 1621              	.LCFI80:
 1622              		.cfi_def_cfa_offset 16
 1623 0004 00AF     		add	r7, sp, #0
 1624              	.LCFI81:
 1625              		.cfi_def_cfa_register 7
 1626 0006 7860     		str	r0, [r7, #4]
 1627 0008 0B46     		mov	r3, r1
 1628 000a FB70     		strb	r3, [r7, #3]
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1629              		.loc 1 1203 0
 1630 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1631 000e 002B     		cmp	r3, #0
 1632 0010 0DD0     		beq	.L53
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1633              		.loc 1 1205 0
 1634 0012 4FF46053 		mov	r3, #14336
 1635 0016 C4F20203 		movt	r3, 16386
 1636 001a 4FF46052 		mov	r2, #14336
 1637 001e C4F20202 		movt	r2, 16386
 1638 0022 126C     		ldr	r2, [r2, #64]
 1639 0024 1146     		mov	r1, r2
 1640 0026 7A68     		ldr	r2, [r7, #4]
 1641 0028 0A43     		orrs	r2, r2, r1
 1642 002a 1A64     		str	r2, [r3, #64]
 1643 002c 0EE0     		b	.L52
 1644              	.L53:
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1645              		.loc 1 1209 0
 1646 002e 4FF46053 		mov	r3, #14336
 1647 0032 C4F20203 		movt	r3, 16386
 1648 0036 4FF46052 		mov	r2, #14336
 1649 003a C4F20202 		movt	r2, 16386
 1650 003e 126C     		ldr	r2, [r2, #64]
 1651 0040 1146     		mov	r1, r2
 1652 0042 7A68     		ldr	r2, [r7, #4]
 1653 0044 6FEA0202 		mvn	r2, r2
 1654 0048 0A40     		ands	r2, r2, r1
 1655 004a 1A64     		str	r2, [r3, #64]
 1656              	.L52:
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1657              		.loc 1 1211 0
 1658 004c 07F10C07 		add	r7, r7, #12
 1659 0050 BD46     		mov	sp, r7
 1660 0052 80BC     		pop	{r7}
 1661 0054 7047     		bx	lr
 1662              		.cfi_endproc
 1663              	.LFE137:
 1665 0056 00BF     		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1666              		.align	2
 1667              		.global	RCC_APB2PeriphClockCmd
 1668              		.thumb
 1669              		.thumb_func
 1671              	RCC_APB2PeriphClockCmd:
 1672              	.LFB138:
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1673              		.loc 1 1238 0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 8
 1676              		@ frame_needed = 1, uses_anonymous_args = 0
 1677              		@ link register save eliminated.
 1678 0000 80B4     		push	{r7}
 1679              	.LCFI82:
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 7, -4
 1682 0002 83B0     		sub	sp, sp, #12
 1683              	.LCFI83:
 1684              		.cfi_def_cfa_offset 16
 1685 0004 00AF     		add	r7, sp, #0
 1686              	.LCFI84:
 1687              		.cfi_def_cfa_register 7
 1688 0006 7860     		str	r0, [r7, #4]
 1689 0008 0B46     		mov	r3, r1
 1690 000a FB70     		strb	r3, [r7, #3]
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1691              		.loc 1 1243 0
 1692 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1693 000e 002B     		cmp	r3, #0
 1694 0010 0DD0     		beq	.L56
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1695              		.loc 1 1245 0
 1696 0012 4FF46053 		mov	r3, #14336
 1697 0016 C4F20203 		movt	r3, 16386
 1698 001a 4FF46052 		mov	r2, #14336
 1699 001e C4F20202 		movt	r2, 16386
 1700 0022 526C     		ldr	r2, [r2, #68]
 1701 0024 1146     		mov	r1, r2
 1702 0026 7A68     		ldr	r2, [r7, #4]
 1703 0028 0A43     		orrs	r2, r2, r1
 1704 002a 5A64     		str	r2, [r3, #68]
 1705 002c 0EE0     		b	.L55
 1706              	.L56:
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1707              		.loc 1 1249 0
 1708 002e 4FF46053 		mov	r3, #14336
 1709 0032 C4F20203 		movt	r3, 16386
 1710 0036 4FF46052 		mov	r2, #14336
 1711 003a C4F20202 		movt	r2, 16386
 1712 003e 526C     		ldr	r2, [r2, #68]
 1713 0040 1146     		mov	r1, r2
 1714 0042 7A68     		ldr	r2, [r7, #4]
 1715 0044 6FEA0202 		mvn	r2, r2
 1716 0048 0A40     		ands	r2, r2, r1
 1717 004a 5A64     		str	r2, [r3, #68]
 1718              	.L55:
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1719              		.loc 1 1251 0
 1720 004c 07F10C07 		add	r7, r7, #12
 1721 0050 BD46     		mov	sp, r7
 1722 0052 80BC     		pop	{r7}
 1723 0054 7047     		bx	lr
 1724              		.cfi_endproc
 1725              	.LFE138:
 1727 0056 00BF     		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1728              		.align	2
 1729              		.global	RCC_AHB1PeriphResetCmd
 1730              		.thumb
 1731              		.thumb_func
 1733              	RCC_AHB1PeriphResetCmd:
 1734              	.LFB139:
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1735              		.loc 1 1277 0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 8
 1738              		@ frame_needed = 1, uses_anonymous_args = 0
 1739              		@ link register save eliminated.
 1740 0000 80B4     		push	{r7}
 1741              	.LCFI85:
 1742              		.cfi_def_cfa_offset 4
 1743              		.cfi_offset 7, -4
 1744 0002 83B0     		sub	sp, sp, #12
 1745              	.LCFI86:
 1746              		.cfi_def_cfa_offset 16
 1747 0004 00AF     		add	r7, sp, #0
 1748              	.LCFI87:
 1749              		.cfi_def_cfa_register 7
 1750 0006 7860     		str	r0, [r7, #4]
 1751 0008 0B46     		mov	r3, r1
 1752 000a FB70     		strb	r3, [r7, #3]
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1753              		.loc 1 1282 0
 1754 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1755 000e 002B     		cmp	r3, #0
 1756 0010 0DD0     		beq	.L59
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1757              		.loc 1 1284 0
 1758 0012 4FF46053 		mov	r3, #14336
 1759 0016 C4F20203 		movt	r3, 16386
 1760 001a 4FF46052 		mov	r2, #14336
 1761 001e C4F20202 		movt	r2, 16386
 1762 0022 1269     		ldr	r2, [r2, #16]
 1763 0024 1146     		mov	r1, r2
 1764 0026 7A68     		ldr	r2, [r7, #4]
 1765 0028 0A43     		orrs	r2, r2, r1
 1766 002a 1A61     		str	r2, [r3, #16]
 1767 002c 0EE0     		b	.L58
 1768              	.L59:
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1769              		.loc 1 1288 0
 1770 002e 4FF46053 		mov	r3, #14336
 1771 0032 C4F20203 		movt	r3, 16386
 1772 0036 4FF46052 		mov	r2, #14336
 1773 003a C4F20202 		movt	r2, 16386
 1774 003e 1269     		ldr	r2, [r2, #16]
 1775 0040 1146     		mov	r1, r2
 1776 0042 7A68     		ldr	r2, [r7, #4]
 1777 0044 6FEA0202 		mvn	r2, r2
 1778 0048 0A40     		ands	r2, r2, r1
 1779 004a 1A61     		str	r2, [r3, #16]
 1780              	.L58:
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1781              		.loc 1 1290 0
 1782 004c 07F10C07 		add	r7, r7, #12
 1783 0050 BD46     		mov	sp, r7
 1784 0052 80BC     		pop	{r7}
 1785 0054 7047     		bx	lr
 1786              		.cfi_endproc
 1787              	.LFE139:
 1789 0056 00BF     		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1790              		.align	2
 1791              		.global	RCC_AHB2PeriphResetCmd
 1792              		.thumb
 1793              		.thumb_func
 1795              	RCC_AHB2PeriphResetCmd:
 1796              	.LFB140:
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1797              		.loc 1 1306 0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 8
 1800              		@ frame_needed = 1, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
 1802 0000 80B4     		push	{r7}
 1803              	.LCFI88:
 1804              		.cfi_def_cfa_offset 4
 1805              		.cfi_offset 7, -4
 1806 0002 83B0     		sub	sp, sp, #12
 1807              	.LCFI89:
 1808              		.cfi_def_cfa_offset 16
 1809 0004 00AF     		add	r7, sp, #0
 1810              	.LCFI90:
 1811              		.cfi_def_cfa_register 7
 1812 0006 7860     		str	r0, [r7, #4]
 1813 0008 0B46     		mov	r3, r1
 1814 000a FB70     		strb	r3, [r7, #3]
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1815              		.loc 1 1311 0
 1816 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1817 000e 002B     		cmp	r3, #0
 1818 0010 0DD0     		beq	.L62
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1819              		.loc 1 1313 0
 1820 0012 4FF46053 		mov	r3, #14336
 1821 0016 C4F20203 		movt	r3, 16386
 1822 001a 4FF46052 		mov	r2, #14336
 1823 001e C4F20202 		movt	r2, 16386
 1824 0022 5269     		ldr	r2, [r2, #20]
 1825 0024 1146     		mov	r1, r2
 1826 0026 7A68     		ldr	r2, [r7, #4]
 1827 0028 0A43     		orrs	r2, r2, r1
 1828 002a 5A61     		str	r2, [r3, #20]
 1829 002c 0EE0     		b	.L61
 1830              	.L62:
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1831              		.loc 1 1317 0
 1832 002e 4FF46053 		mov	r3, #14336
 1833 0032 C4F20203 		movt	r3, 16386
 1834 0036 4FF46052 		mov	r2, #14336
 1835 003a C4F20202 		movt	r2, 16386
 1836 003e 5269     		ldr	r2, [r2, #20]
 1837 0040 1146     		mov	r1, r2
 1838 0042 7A68     		ldr	r2, [r7, #4]
 1839 0044 6FEA0202 		mvn	r2, r2
 1840 0048 0A40     		ands	r2, r2, r1
 1841 004a 5A61     		str	r2, [r3, #20]
 1842              	.L61:
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1843              		.loc 1 1319 0
 1844 004c 07F10C07 		add	r7, r7, #12
 1845 0050 BD46     		mov	sp, r7
 1846 0052 80BC     		pop	{r7}
 1847 0054 7047     		bx	lr
 1848              		.cfi_endproc
 1849              	.LFE140:
 1851 0056 00BF     		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1852              		.align	2
 1853              		.global	RCC_AHB3PeriphResetCmd
 1854              		.thumb
 1855              		.thumb_func
 1857              	RCC_AHB3PeriphResetCmd:
 1858              	.LFB141:
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1859              		.loc 1 1330 0
 1860              		.cfi_startproc
 1861              		@ args = 0, pretend = 0, frame = 8
 1862              		@ frame_needed = 1, uses_anonymous_args = 0
 1863              		@ link register save eliminated.
 1864 0000 80B4     		push	{r7}
 1865              	.LCFI91:
 1866              		.cfi_def_cfa_offset 4
 1867              		.cfi_offset 7, -4
 1868 0002 83B0     		sub	sp, sp, #12
 1869              	.LCFI92:
 1870              		.cfi_def_cfa_offset 16
 1871 0004 00AF     		add	r7, sp, #0
 1872              	.LCFI93:
 1873              		.cfi_def_cfa_register 7
 1874 0006 7860     		str	r0, [r7, #4]
 1875 0008 0B46     		mov	r3, r1
 1876 000a FB70     		strb	r3, [r7, #3]
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1877              		.loc 1 1335 0
 1878 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1879 000e 002B     		cmp	r3, #0
 1880 0010 0DD0     		beq	.L65
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1881              		.loc 1 1337 0
 1882 0012 4FF46053 		mov	r3, #14336
 1883 0016 C4F20203 		movt	r3, 16386
 1884 001a 4FF46052 		mov	r2, #14336
 1885 001e C4F20202 		movt	r2, 16386
 1886 0022 9269     		ldr	r2, [r2, #24]
 1887 0024 1146     		mov	r1, r2
 1888 0026 7A68     		ldr	r2, [r7, #4]
 1889 0028 0A43     		orrs	r2, r2, r1
 1890 002a 9A61     		str	r2, [r3, #24]
 1891 002c 0EE0     		b	.L64
 1892              	.L65:
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1893              		.loc 1 1341 0
 1894 002e 4FF46053 		mov	r3, #14336
 1895 0032 C4F20203 		movt	r3, 16386
 1896 0036 4FF46052 		mov	r2, #14336
 1897 003a C4F20202 		movt	r2, 16386
 1898 003e 9269     		ldr	r2, [r2, #24]
 1899 0040 1146     		mov	r1, r2
 1900 0042 7A68     		ldr	r2, [r7, #4]
 1901 0044 6FEA0202 		mvn	r2, r2
 1902 0048 0A40     		ands	r2, r2, r1
 1903 004a 9A61     		str	r2, [r3, #24]
 1904              	.L64:
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1905              		.loc 1 1343 0
 1906 004c 07F10C07 		add	r7, r7, #12
 1907 0050 BD46     		mov	sp, r7
 1908 0052 80BC     		pop	{r7}
 1909 0054 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE141:
 1913 0056 00BF     		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1914              		.align	2
 1915              		.global	RCC_APB1PeriphResetCmd
 1916              		.thumb
 1917              		.thumb_func
 1919              	RCC_APB1PeriphResetCmd:
 1920              	.LFB142:
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1921              		.loc 1 1377 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 8
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 1926 0000 80B4     		push	{r7}
 1927              	.LCFI94:
 1928              		.cfi_def_cfa_offset 4
 1929              		.cfi_offset 7, -4
 1930 0002 83B0     		sub	sp, sp, #12
 1931              	.LCFI95:
 1932              		.cfi_def_cfa_offset 16
 1933 0004 00AF     		add	r7, sp, #0
 1934              	.LCFI96:
 1935              		.cfi_def_cfa_register 7
 1936 0006 7860     		str	r0, [r7, #4]
 1937 0008 0B46     		mov	r3, r1
 1938 000a FB70     		strb	r3, [r7, #3]
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1939              		.loc 1 1381 0
 1940 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1941 000e 002B     		cmp	r3, #0
 1942 0010 0DD0     		beq	.L68
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1943              		.loc 1 1383 0
 1944 0012 4FF46053 		mov	r3, #14336
 1945 0016 C4F20203 		movt	r3, 16386
 1946 001a 4FF46052 		mov	r2, #14336
 1947 001e C4F20202 		movt	r2, 16386
 1948 0022 126A     		ldr	r2, [r2, #32]
 1949 0024 1146     		mov	r1, r2
 1950 0026 7A68     		ldr	r2, [r7, #4]
 1951 0028 0A43     		orrs	r2, r2, r1
 1952 002a 1A62     		str	r2, [r3, #32]
 1953 002c 0EE0     		b	.L67
 1954              	.L68:
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1955              		.loc 1 1387 0
 1956 002e 4FF46053 		mov	r3, #14336
 1957 0032 C4F20203 		movt	r3, 16386
 1958 0036 4FF46052 		mov	r2, #14336
 1959 003a C4F20202 		movt	r2, 16386
 1960 003e 126A     		ldr	r2, [r2, #32]
 1961 0040 1146     		mov	r1, r2
 1962 0042 7A68     		ldr	r2, [r7, #4]
 1963 0044 6FEA0202 		mvn	r2, r2
 1964 0048 0A40     		ands	r2, r2, r1
 1965 004a 1A62     		str	r2, [r3, #32]
 1966              	.L67:
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1967              		.loc 1 1389 0
 1968 004c 07F10C07 		add	r7, r7, #12
 1969 0050 BD46     		mov	sp, r7
 1970 0052 80BC     		pop	{r7}
 1971 0054 7047     		bx	lr
 1972              		.cfi_endproc
 1973              	.LFE142:
 1975 0056 00BF     		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1976              		.align	2
 1977              		.global	RCC_APB2PeriphResetCmd
 1978              		.thumb
 1979              		.thumb_func
 1981              	RCC_APB2PeriphResetCmd:
 1982              	.LFB143:
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1983              		.loc 1 1413 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 8
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987              		@ link register save eliminated.
 1988 0000 80B4     		push	{r7}
 1989              	.LCFI97:
 1990              		.cfi_def_cfa_offset 4
 1991              		.cfi_offset 7, -4
 1992 0002 83B0     		sub	sp, sp, #12
 1993              	.LCFI98:
 1994              		.cfi_def_cfa_offset 16
 1995 0004 00AF     		add	r7, sp, #0
 1996              	.LCFI99:
 1997              		.cfi_def_cfa_register 7
 1998 0006 7860     		str	r0, [r7, #4]
 1999 0008 0B46     		mov	r3, r1
 2000 000a FB70     		strb	r3, [r7, #3]
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2001              		.loc 1 1417 0
 2002 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2003 000e 002B     		cmp	r3, #0
 2004 0010 0DD0     		beq	.L71
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2005              		.loc 1 1419 0
 2006 0012 4FF46053 		mov	r3, #14336
 2007 0016 C4F20203 		movt	r3, 16386
 2008 001a 4FF46052 		mov	r2, #14336
 2009 001e C4F20202 		movt	r2, 16386
 2010 0022 526A     		ldr	r2, [r2, #36]
 2011 0024 1146     		mov	r1, r2
 2012 0026 7A68     		ldr	r2, [r7, #4]
 2013 0028 0A43     		orrs	r2, r2, r1
 2014 002a 5A62     		str	r2, [r3, #36]
 2015 002c 0EE0     		b	.L70
 2016              	.L71:
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2017              		.loc 1 1423 0
 2018 002e 4FF46053 		mov	r3, #14336
 2019 0032 C4F20203 		movt	r3, 16386
 2020 0036 4FF46052 		mov	r2, #14336
 2021 003a C4F20202 		movt	r2, 16386
 2022 003e 526A     		ldr	r2, [r2, #36]
 2023 0040 1146     		mov	r1, r2
 2024 0042 7A68     		ldr	r2, [r7, #4]
 2025 0044 6FEA0202 		mvn	r2, r2
 2026 0048 0A40     		ands	r2, r2, r1
 2027 004a 5A62     		str	r2, [r3, #36]
 2028              	.L70:
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2029              		.loc 1 1425 0
 2030 004c 07F10C07 		add	r7, r7, #12
 2031 0050 BD46     		mov	sp, r7
 2032 0052 80BC     		pop	{r7}
 2033 0054 7047     		bx	lr
 2034              		.cfi_endproc
 2035              	.LFE143:
 2037 0056 00BF     		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2038              		.align	2
 2039              		.global	RCC_AHB1PeriphClockLPModeCmd
 2040              		.thumb
 2041              		.thumb_func
 2043              	RCC_AHB1PeriphClockLPModeCmd:
 2044              	.LFB144:
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2045              		.loc 1 1459 0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 8
 2048              		@ frame_needed = 1, uses_anonymous_args = 0
 2049              		@ link register save eliminated.
 2050 0000 80B4     		push	{r7}
 2051              	.LCFI100:
 2052              		.cfi_def_cfa_offset 4
 2053              		.cfi_offset 7, -4
 2054 0002 83B0     		sub	sp, sp, #12
 2055              	.LCFI101:
 2056              		.cfi_def_cfa_offset 16
 2057 0004 00AF     		add	r7, sp, #0
 2058              	.LCFI102:
 2059              		.cfi_def_cfa_register 7
 2060 0006 7860     		str	r0, [r7, #4]
 2061 0008 0B46     		mov	r3, r1
 2062 000a FB70     		strb	r3, [r7, #3]
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2063              		.loc 1 1463 0
 2064 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2065 000e 002B     		cmp	r3, #0
 2066 0010 0DD0     		beq	.L74
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2067              		.loc 1 1465 0
 2068 0012 4FF46053 		mov	r3, #14336
 2069 0016 C4F20203 		movt	r3, 16386
 2070 001a 4FF46052 		mov	r2, #14336
 2071 001e C4F20202 		movt	r2, 16386
 2072 0022 126D     		ldr	r2, [r2, #80]
 2073 0024 1146     		mov	r1, r2
 2074 0026 7A68     		ldr	r2, [r7, #4]
 2075 0028 0A43     		orrs	r2, r2, r1
 2076 002a 1A65     		str	r2, [r3, #80]
 2077 002c 0EE0     		b	.L73
 2078              	.L74:
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2079              		.loc 1 1469 0
 2080 002e 4FF46053 		mov	r3, #14336
 2081 0032 C4F20203 		movt	r3, 16386
 2082 0036 4FF46052 		mov	r2, #14336
 2083 003a C4F20202 		movt	r2, 16386
 2084 003e 126D     		ldr	r2, [r2, #80]
 2085 0040 1146     		mov	r1, r2
 2086 0042 7A68     		ldr	r2, [r7, #4]
 2087 0044 6FEA0202 		mvn	r2, r2
 2088 0048 0A40     		ands	r2, r2, r1
 2089 004a 1A65     		str	r2, [r3, #80]
 2090              	.L73:
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2091              		.loc 1 1471 0
 2092 004c 07F10C07 		add	r7, r7, #12
 2093 0050 BD46     		mov	sp, r7
 2094 0052 80BC     		pop	{r7}
 2095 0054 7047     		bx	lr
 2096              		.cfi_endproc
 2097              	.LFE144:
 2099 0056 00BF     		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2100              		.align	2
 2101              		.global	RCC_AHB2PeriphClockLPModeCmd
 2102              		.thumb
 2103              		.thumb_func
 2105              	RCC_AHB2PeriphClockLPModeCmd:
 2106              	.LFB145:
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2107              		.loc 1 1491 0
 2108              		.cfi_startproc
 2109              		@ args = 0, pretend = 0, frame = 8
 2110              		@ frame_needed = 1, uses_anonymous_args = 0
 2111              		@ link register save eliminated.
 2112 0000 80B4     		push	{r7}
 2113              	.LCFI103:
 2114              		.cfi_def_cfa_offset 4
 2115              		.cfi_offset 7, -4
 2116 0002 83B0     		sub	sp, sp, #12
 2117              	.LCFI104:
 2118              		.cfi_def_cfa_offset 16
 2119 0004 00AF     		add	r7, sp, #0
 2120              	.LCFI105:
 2121              		.cfi_def_cfa_register 7
 2122 0006 7860     		str	r0, [r7, #4]
 2123 0008 0B46     		mov	r3, r1
 2124 000a FB70     		strb	r3, [r7, #3]
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2125              		.loc 1 1495 0
 2126 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2127 000e 002B     		cmp	r3, #0
 2128 0010 0DD0     		beq	.L77
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2129              		.loc 1 1497 0
 2130 0012 4FF46053 		mov	r3, #14336
 2131 0016 C4F20203 		movt	r3, 16386
 2132 001a 4FF46052 		mov	r2, #14336
 2133 001e C4F20202 		movt	r2, 16386
 2134 0022 526D     		ldr	r2, [r2, #84]
 2135 0024 1146     		mov	r1, r2
 2136 0026 7A68     		ldr	r2, [r7, #4]
 2137 0028 0A43     		orrs	r2, r2, r1
 2138 002a 5A65     		str	r2, [r3, #84]
 2139 002c 0EE0     		b	.L76
 2140              	.L77:
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2141              		.loc 1 1501 0
 2142 002e 4FF46053 		mov	r3, #14336
 2143 0032 C4F20203 		movt	r3, 16386
 2144 0036 4FF46052 		mov	r2, #14336
 2145 003a C4F20202 		movt	r2, 16386
 2146 003e 526D     		ldr	r2, [r2, #84]
 2147 0040 1146     		mov	r1, r2
 2148 0042 7A68     		ldr	r2, [r7, #4]
 2149 0044 6FEA0202 		mvn	r2, r2
 2150 0048 0A40     		ands	r2, r2, r1
 2151 004a 5A65     		str	r2, [r3, #84]
 2152              	.L76:
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2153              		.loc 1 1503 0
 2154 004c 07F10C07 		add	r7, r7, #12
 2155 0050 BD46     		mov	sp, r7
 2156 0052 80BC     		pop	{r7}
 2157 0054 7047     		bx	lr
 2158              		.cfi_endproc
 2159              	.LFE145:
 2161 0056 00BF     		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2162              		.align	2
 2163              		.global	RCC_AHB3PeriphClockLPModeCmd
 2164              		.thumb
 2165              		.thumb_func
 2167              	RCC_AHB3PeriphClockLPModeCmd:
 2168              	.LFB146:
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2169              		.loc 1 1518 0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 8
 2172              		@ frame_needed = 1, uses_anonymous_args = 0
 2173              		@ link register save eliminated.
 2174 0000 80B4     		push	{r7}
 2175              	.LCFI106:
 2176              		.cfi_def_cfa_offset 4
 2177              		.cfi_offset 7, -4
 2178 0002 83B0     		sub	sp, sp, #12
 2179              	.LCFI107:
 2180              		.cfi_def_cfa_offset 16
 2181 0004 00AF     		add	r7, sp, #0
 2182              	.LCFI108:
 2183              		.cfi_def_cfa_register 7
 2184 0006 7860     		str	r0, [r7, #4]
 2185 0008 0B46     		mov	r3, r1
 2186 000a FB70     		strb	r3, [r7, #3]
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2187              		.loc 1 1522 0
 2188 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2189 000e 002B     		cmp	r3, #0
 2190 0010 0DD0     		beq	.L80
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2191              		.loc 1 1524 0
 2192 0012 4FF46053 		mov	r3, #14336
 2193 0016 C4F20203 		movt	r3, 16386
 2194 001a 4FF46052 		mov	r2, #14336
 2195 001e C4F20202 		movt	r2, 16386
 2196 0022 926D     		ldr	r2, [r2, #88]
 2197 0024 1146     		mov	r1, r2
 2198 0026 7A68     		ldr	r2, [r7, #4]
 2199 0028 0A43     		orrs	r2, r2, r1
 2200 002a 9A65     		str	r2, [r3, #88]
 2201 002c 0EE0     		b	.L79
 2202              	.L80:
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2203              		.loc 1 1528 0
 2204 002e 4FF46053 		mov	r3, #14336
 2205 0032 C4F20203 		movt	r3, 16386
 2206 0036 4FF46052 		mov	r2, #14336
 2207 003a C4F20202 		movt	r2, 16386
 2208 003e 926D     		ldr	r2, [r2, #88]
 2209 0040 1146     		mov	r1, r2
 2210 0042 7A68     		ldr	r2, [r7, #4]
 2211 0044 6FEA0202 		mvn	r2, r2
 2212 0048 0A40     		ands	r2, r2, r1
 2213 004a 9A65     		str	r2, [r3, #88]
 2214              	.L79:
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2215              		.loc 1 1530 0
 2216 004c 07F10C07 		add	r7, r7, #12
 2217 0050 BD46     		mov	sp, r7
 2218 0052 80BC     		pop	{r7}
 2219 0054 7047     		bx	lr
 2220              		.cfi_endproc
 2221              	.LFE146:
 2223 0056 00BF     		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2224              		.align	2
 2225              		.global	RCC_APB1PeriphClockLPModeCmd
 2226              		.thumb
 2227              		.thumb_func
 2229              	RCC_APB1PeriphClockLPModeCmd:
 2230              	.LFB147:
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2231              		.loc 1 1568 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 8
 2234              		@ frame_needed = 1, uses_anonymous_args = 0
 2235              		@ link register save eliminated.
 2236 0000 80B4     		push	{r7}
 2237              	.LCFI109:
 2238              		.cfi_def_cfa_offset 4
 2239              		.cfi_offset 7, -4
 2240 0002 83B0     		sub	sp, sp, #12
 2241              	.LCFI110:
 2242              		.cfi_def_cfa_offset 16
 2243 0004 00AF     		add	r7, sp, #0
 2244              	.LCFI111:
 2245              		.cfi_def_cfa_register 7
 2246 0006 7860     		str	r0, [r7, #4]
 2247 0008 0B46     		mov	r3, r1
 2248 000a FB70     		strb	r3, [r7, #3]
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2249              		.loc 1 1572 0
 2250 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2251 000e 002B     		cmp	r3, #0
 2252 0010 0DD0     		beq	.L83
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2253              		.loc 1 1574 0
 2254 0012 4FF46053 		mov	r3, #14336
 2255 0016 C4F20203 		movt	r3, 16386
 2256 001a 4FF46052 		mov	r2, #14336
 2257 001e C4F20202 		movt	r2, 16386
 2258 0022 126E     		ldr	r2, [r2, #96]
 2259 0024 1146     		mov	r1, r2
 2260 0026 7A68     		ldr	r2, [r7, #4]
 2261 0028 0A43     		orrs	r2, r2, r1
 2262 002a 1A66     		str	r2, [r3, #96]
 2263 002c 0EE0     		b	.L82
 2264              	.L83:
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2265              		.loc 1 1578 0
 2266 002e 4FF46053 		mov	r3, #14336
 2267 0032 C4F20203 		movt	r3, 16386
 2268 0036 4FF46052 		mov	r2, #14336
 2269 003a C4F20202 		movt	r2, 16386
 2270 003e 126E     		ldr	r2, [r2, #96]
 2271 0040 1146     		mov	r1, r2
 2272 0042 7A68     		ldr	r2, [r7, #4]
 2273 0044 6FEA0202 		mvn	r2, r2
 2274 0048 0A40     		ands	r2, r2, r1
 2275 004a 1A66     		str	r2, [r3, #96]
 2276              	.L82:
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2277              		.loc 1 1580 0
 2278 004c 07F10C07 		add	r7, r7, #12
 2279 0050 BD46     		mov	sp, r7
 2280 0052 80BC     		pop	{r7}
 2281 0054 7047     		bx	lr
 2282              		.cfi_endproc
 2283              	.LFE147:
 2285 0056 00BF     		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2286              		.align	2
 2287              		.global	RCC_APB2PeriphClockLPModeCmd
 2288              		.thumb
 2289              		.thumb_func
 2291              	RCC_APB2PeriphClockLPModeCmd:
 2292              	.LFB148:
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2293              		.loc 1 1608 0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 8
 2296              		@ frame_needed = 1, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 2298 0000 80B4     		push	{r7}
 2299              	.LCFI112:
 2300              		.cfi_def_cfa_offset 4
 2301              		.cfi_offset 7, -4
 2302 0002 83B0     		sub	sp, sp, #12
 2303              	.LCFI113:
 2304              		.cfi_def_cfa_offset 16
 2305 0004 00AF     		add	r7, sp, #0
 2306              	.LCFI114:
 2307              		.cfi_def_cfa_register 7
 2308 0006 7860     		str	r0, [r7, #4]
 2309 0008 0B46     		mov	r3, r1
 2310 000a FB70     		strb	r3, [r7, #3]
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2311              		.loc 1 1612 0
 2312 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2313 000e 002B     		cmp	r3, #0
 2314 0010 0DD0     		beq	.L86
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2315              		.loc 1 1614 0
 2316 0012 4FF46053 		mov	r3, #14336
 2317 0016 C4F20203 		movt	r3, 16386
 2318 001a 4FF46052 		mov	r2, #14336
 2319 001e C4F20202 		movt	r2, 16386
 2320 0022 526E     		ldr	r2, [r2, #100]
 2321 0024 1146     		mov	r1, r2
 2322 0026 7A68     		ldr	r2, [r7, #4]
 2323 0028 0A43     		orrs	r2, r2, r1
 2324 002a 5A66     		str	r2, [r3, #100]
 2325 002c 0EE0     		b	.L85
 2326              	.L86:
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2327              		.loc 1 1618 0
 2328 002e 4FF46053 		mov	r3, #14336
 2329 0032 C4F20203 		movt	r3, 16386
 2330 0036 4FF46052 		mov	r2, #14336
 2331 003a C4F20202 		movt	r2, 16386
 2332 003e 526E     		ldr	r2, [r2, #100]
 2333 0040 1146     		mov	r1, r2
 2334 0042 7A68     		ldr	r2, [r7, #4]
 2335 0044 6FEA0202 		mvn	r2, r2
 2336 0048 0A40     		ands	r2, r2, r1
 2337 004a 5A66     		str	r2, [r3, #100]
 2338              	.L85:
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2339              		.loc 1 1620 0
 2340 004c 07F10C07 		add	r7, r7, #12
 2341 0050 BD46     		mov	sp, r7
 2342 0052 80BC     		pop	{r7}
 2343 0054 7047     		bx	lr
 2344              		.cfi_endproc
 2345              	.LFE148:
 2347 0056 00BF     		.section	.text.RCC_ITConfig,"ax",%progbits
 2348              		.align	2
 2349              		.global	RCC_ITConfig
 2350              		.thumb
 2351              		.thumb_func
 2353              	RCC_ITConfig:
 2354              	.LFB149:
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2355              		.loc 1 1653 0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 8
 2358              		@ frame_needed = 1, uses_anonymous_args = 0
 2359              		@ link register save eliminated.
 2360 0000 80B4     		push	{r7}
 2361              	.LCFI115:
 2362              		.cfi_def_cfa_offset 4
 2363              		.cfi_offset 7, -4
 2364 0002 83B0     		sub	sp, sp, #12
 2365              	.LCFI116:
 2366              		.cfi_def_cfa_offset 16
 2367 0004 00AF     		add	r7, sp, #0
 2368              	.LCFI117:
 2369              		.cfi_def_cfa_register 7
 2370 0006 0246     		mov	r2, r0
 2371 0008 0B46     		mov	r3, r1
 2372 000a FA71     		strb	r2, [r7, #7]
 2373 000c BB71     		strb	r3, [r7, #6]
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2374              		.loc 1 1657 0
 2375 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2376 0010 002B     		cmp	r3, #0
 2377 0012 0ED0     		beq	.L89
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2378              		.loc 1 1660 0
 2379 0014 43F60D03 		movw	r3, #14349
 2380 0018 C4F20203 		movt	r3, 16386
 2381 001c 43F60D02 		movw	r2, #14349
 2382 0020 C4F20202 		movt	r2, 16386
 2383 0024 1278     		ldrb	r2, [r2, #0]
 2384 0026 D1B2     		uxtb	r1, r2
 2385 0028 FA79     		ldrb	r2, [r7, #7]
 2386 002a 0A43     		orrs	r2, r2, r1
 2387 002c D2B2     		uxtb	r2, r2
 2388 002e 1A70     		strb	r2, [r3, #0]
 2389 0030 10E0     		b	.L88
 2390              	.L89:
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2391              		.loc 1 1665 0
 2392 0032 43F60D03 		movw	r3, #14349
 2393 0036 C4F20203 		movt	r3, 16386
 2394 003a 43F60D02 		movw	r2, #14349
 2395 003e C4F20202 		movt	r2, 16386
 2396 0042 1278     		ldrb	r2, [r2, #0]
 2397 0044 D1B2     		uxtb	r1, r2
 2398 0046 FA79     		ldrb	r2, [r7, #7]
 2399 0048 6FEA0202 		mvn	r2, r2
 2400 004c D2B2     		uxtb	r2, r2
 2401 004e 0A40     		ands	r2, r2, r1
 2402 0050 D2B2     		uxtb	r2, r2
 2403 0052 1A70     		strb	r2, [r3, #0]
 2404              	.L88:
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2405              		.loc 1 1667 0
 2406 0054 07F10C07 		add	r7, r7, #12
 2407 0058 BD46     		mov	sp, r7
 2408 005a 80BC     		pop	{r7}
 2409 005c 7047     		bx	lr
 2410              		.cfi_endproc
 2411              	.LFE149:
 2413 005e 00BF     		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2414              		.align	2
 2415              		.global	RCC_GetFlagStatus
 2416              		.thumb
 2417              		.thumb_func
 2419              	RCC_GetFlagStatus:
 2420              	.LFB150:
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2421              		.loc 1 1689 0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 24
 2424              		@ frame_needed = 1, uses_anonymous_args = 0
 2425              		@ link register save eliminated.
 2426 0000 80B4     		push	{r7}
 2427              	.LCFI118:
 2428              		.cfi_def_cfa_offset 4
 2429              		.cfi_offset 7, -4
 2430 0002 87B0     		sub	sp, sp, #28
 2431              	.LCFI119:
 2432              		.cfi_def_cfa_offset 32
 2433 0004 00AF     		add	r7, sp, #0
 2434              	.LCFI120:
 2435              		.cfi_def_cfa_register 7
 2436 0006 0346     		mov	r3, r0
 2437 0008 FB71     		strb	r3, [r7, #7]
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2438              		.loc 1 1690 0
 2439 000a 4FF00003 		mov	r3, #0
 2440 000e FB60     		str	r3, [r7, #12]
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2441              		.loc 1 1691 0
 2442 0010 4FF00003 		mov	r3, #0
 2443 0014 7B61     		str	r3, [r7, #20]
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2444              		.loc 1 1692 0
 2445 0016 4FF00003 		mov	r3, #0
 2446 001a FB74     		strb	r3, [r7, #19]
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2447              		.loc 1 1698 0
 2448 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2449 001e 4FEA5313 		lsr	r3, r3, #5
 2450 0022 DBB2     		uxtb	r3, r3
 2451 0024 FB60     		str	r3, [r7, #12]
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2452              		.loc 1 1699 0
 2453 0026 FB68     		ldr	r3, [r7, #12]
 2454 0028 012B     		cmp	r3, #1
 2455 002a 06D1     		bne	.L92
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2456              		.loc 1 1701 0
 2457 002c 4FF46053 		mov	r3, #14336
 2458 0030 C4F20203 		movt	r3, 16386
 2459 0034 1B68     		ldr	r3, [r3, #0]
 2460 0036 7B61     		str	r3, [r7, #20]
 2461 0038 0FE0     		b	.L93
 2462              	.L92:
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2463              		.loc 1 1703 0
 2464 003a FB68     		ldr	r3, [r7, #12]
 2465 003c 022B     		cmp	r3, #2
 2466 003e 06D1     		bne	.L94
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2467              		.loc 1 1705 0
 2468 0040 4FF46053 		mov	r3, #14336
 2469 0044 C4F20203 		movt	r3, 16386
 2470 0048 1B6F     		ldr	r3, [r3, #112]
 2471 004a 7B61     		str	r3, [r7, #20]
 2472 004c 05E0     		b	.L93
 2473              	.L94:
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2474              		.loc 1 1709 0
 2475 004e 4FF46053 		mov	r3, #14336
 2476 0052 C4F20203 		movt	r3, 16386
 2477 0056 5B6F     		ldr	r3, [r3, #116]
 2478 0058 7B61     		str	r3, [r7, #20]
 2479              	.L93:
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2480              		.loc 1 1713 0
 2481 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2482 005c 03F01F03 		and	r3, r3, #31
 2483 0060 FB60     		str	r3, [r7, #12]
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2484              		.loc 1 1714 0
 2485 0062 FB68     		ldr	r3, [r7, #12]
 2486 0064 7A69     		ldr	r2, [r7, #20]
 2487 0066 22FA03F3 		lsr	r3, r2, r3
 2488 006a 03F00103 		and	r3, r3, #1
 2489 006e DBB2     		uxtb	r3, r3
 2490 0070 002B     		cmp	r3, #0
 2491 0072 03D0     		beq	.L95
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2492              		.loc 1 1716 0
 2493 0074 4FF00103 		mov	r3, #1
 2494 0078 FB74     		strb	r3, [r7, #19]
 2495 007a 02E0     		b	.L96
 2496              	.L95:
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2497              		.loc 1 1720 0
 2498 007c 4FF00003 		mov	r3, #0
 2499 0080 FB74     		strb	r3, [r7, #19]
 2500              	.L96:
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2501              		.loc 1 1723 0
 2502 0082 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2503              		.loc 1 1724 0
 2504 0084 1846     		mov	r0, r3
 2505 0086 07F11C07 		add	r7, r7, #28
 2506 008a BD46     		mov	sp, r7
 2507 008c 80BC     		pop	{r7}
 2508 008e 7047     		bx	lr
 2509              		.cfi_endproc
 2510              	.LFE150:
 2512              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2513              		.align	2
 2514              		.global	RCC_ClearFlag
 2515              		.thumb
 2516              		.thumb_func
 2518              	RCC_ClearFlag:
 2519              	.LFB151:
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2520              		.loc 1 1734 0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 0
 2523              		@ frame_needed = 1, uses_anonymous_args = 0
 2524              		@ link register save eliminated.
 2525 0000 80B4     		push	{r7}
 2526              	.LCFI121:
 2527              		.cfi_def_cfa_offset 4
 2528              		.cfi_offset 7, -4
 2529 0002 00AF     		add	r7, sp, #0
 2530              	.LCFI122:
 2531              		.cfi_def_cfa_register 7
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2532              		.loc 1 1736 0
 2533 0004 4FF46053 		mov	r3, #14336
 2534 0008 C4F20203 		movt	r3, 16386
 2535 000c 4FF46052 		mov	r2, #14336
 2536 0010 C4F20202 		movt	r2, 16386
 2537 0014 526F     		ldr	r2, [r2, #116]
 2538 0016 42F08072 		orr	r2, r2, #16777216
 2539 001a 5A67     		str	r2, [r3, #116]
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2540              		.loc 1 1737 0
 2541 001c BD46     		mov	sp, r7
 2542 001e 80BC     		pop	{r7}
 2543 0020 7047     		bx	lr
 2544              		.cfi_endproc
 2545              	.LFE151:
 2547 0022 00BF     		.section	.text.RCC_GetITStatus,"ax",%progbits
 2548              		.align	2
 2549              		.global	RCC_GetITStatus
 2550              		.thumb
 2551              		.thumb_func
 2553              	RCC_GetITStatus:
 2554              	.LFB152:
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2555              		.loc 1 1753 0
 2556              		.cfi_startproc
 2557              		@ args = 0, pretend = 0, frame = 16
 2558              		@ frame_needed = 1, uses_anonymous_args = 0
 2559              		@ link register save eliminated.
 2560 0000 80B4     		push	{r7}
 2561              	.LCFI123:
 2562              		.cfi_def_cfa_offset 4
 2563              		.cfi_offset 7, -4
 2564 0002 85B0     		sub	sp, sp, #20
 2565              	.LCFI124:
 2566              		.cfi_def_cfa_offset 24
 2567 0004 00AF     		add	r7, sp, #0
 2568              	.LCFI125:
 2569              		.cfi_def_cfa_register 7
 2570 0006 0346     		mov	r3, r0
 2571 0008 FB71     		strb	r3, [r7, #7]
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2572              		.loc 1 1754 0
 2573 000a 4FF00003 		mov	r3, #0
 2574 000e FB73     		strb	r3, [r7, #15]
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2575              		.loc 1 1760 0
 2576 0010 4FF46053 		mov	r3, #14336
 2577 0014 C4F20203 		movt	r3, 16386
 2578 0018 DB68     		ldr	r3, [r3, #12]
 2579 001a 1A46     		mov	r2, r3
 2580 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2581 001e 1340     		ands	r3, r3, r2
 2582 0020 002B     		cmp	r3, #0
 2583 0022 03D0     		beq	.L99
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2584              		.loc 1 1762 0
 2585 0024 4FF00103 		mov	r3, #1
 2586 0028 FB73     		strb	r3, [r7, #15]
 2587 002a 02E0     		b	.L100
 2588              	.L99:
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2589              		.loc 1 1766 0
 2590 002c 4FF00003 		mov	r3, #0
 2591 0030 FB73     		strb	r3, [r7, #15]
 2592              	.L100:
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2593              		.loc 1 1769 0
 2594 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2595              		.loc 1 1770 0
 2596 0034 1846     		mov	r0, r3
 2597 0036 07F11407 		add	r7, r7, #20
 2598 003a BD46     		mov	sp, r7
 2599 003c 80BC     		pop	{r7}
 2600 003e 7047     		bx	lr
 2601              		.cfi_endproc
 2602              	.LFE152:
 2604              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2605              		.align	2
 2606              		.global	RCC_ClearITPendingBit
 2607              		.thumb
 2608              		.thumb_func
 2610              	RCC_ClearITPendingBit:
 2611              	.LFB153:
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2612              		.loc 1 1786 0
 2613              		.cfi_startproc
 2614              		@ args = 0, pretend = 0, frame = 8
 2615              		@ frame_needed = 1, uses_anonymous_args = 0
 2616              		@ link register save eliminated.
 2617 0000 80B4     		push	{r7}
 2618              	.LCFI126:
 2619              		.cfi_def_cfa_offset 4
 2620              		.cfi_offset 7, -4
 2621 0002 83B0     		sub	sp, sp, #12
 2622              	.LCFI127:
 2623              		.cfi_def_cfa_offset 16
 2624 0004 00AF     		add	r7, sp, #0
 2625              	.LCFI128:
 2626              		.cfi_def_cfa_register 7
 2627 0006 0346     		mov	r3, r0
 2628 0008 FB71     		strb	r3, [r7, #7]
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2629              		.loc 1 1792 0
 2630 000a 43F60E03 		movw	r3, #14350
 2631 000e C4F20203 		movt	r3, 16386
 2632 0012 FA79     		ldrb	r2, [r7, #7]
 2633 0014 1A70     		strb	r2, [r3, #0]
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2634              		.loc 1 1793 0
 2635 0016 07F10C07 		add	r7, r7, #12
 2636 001a BD46     		mov	sp, r7
 2637 001c 80BC     		pop	{r7}
 2638 001e 7047     		bx	lr
 2639              		.cfi_endproc
 2640              	.LFE153:
 2642              		.text
 2643              	.Letext0:
 2644              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2645              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 2646              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 2647              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:19     .data.APBAHBPrescTable:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:22     .data.APBAHBPrescTable:00000000 APBAHBPrescTable
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:40     .text.RCC_DeInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:45     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:109    .text.RCC_HSEConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:114    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:152    .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:157    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2419   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:227    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:232    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:283    .text.RCC_HSICmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:288    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:321    .text.RCC_LSEConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:326    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:391    .text.RCC_LSICmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:396    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:429    .text.RCC_PLLConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:434    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:484    .text.RCC_PLLCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:489    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:522    .text.RCC_PLLI2SConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:527    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:564    .text.RCC_PLLI2SCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:569    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:602    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:607    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:640    .text.RCC_MCO1Config:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:645    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:697    .text.RCC_MCO2Config:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:702    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:754    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:759    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:808    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:813    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:843    .text.RCC_HCLKConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:848    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:897    .text.RCC_PCLK1Config:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:902    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:951    .text.RCC_PCLK2Config:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:956    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1006   .text.RCC_GetClocksFreq:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1011   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1231   .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1236   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1305   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1310   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1343   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1348   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1381   .text.RCC_I2SCLKConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1386   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1418   .text.RCC_AHB1PeriphClockCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1423   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1480   .text.RCC_AHB2PeriphClockCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1485   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1542   .text.RCC_AHB3PeriphClockCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1547   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1604   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1609   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1666   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1671   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1728   .text.RCC_AHB1PeriphResetCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1733   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1790   .text.RCC_AHB2PeriphResetCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1795   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1852   .text.RCC_AHB3PeriphResetCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1857   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1914   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1919   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1976   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:1981   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2038   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2043   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2100   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2105   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2162   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2167   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2224   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2229   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2286   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2291   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2348   .text.RCC_ITConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2353   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2414   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2513   .text.RCC_ClearFlag:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2518   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2548   .text.RCC_GetITStatus:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2553   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2605   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccViEE0V.s:2610   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
