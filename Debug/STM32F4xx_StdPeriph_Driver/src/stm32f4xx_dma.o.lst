   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.DMA_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	DMA_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	DMA_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  27              		.loc 1 189 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  33              		.loc 1 194 0
  34 0000 0368     		ldr	r3, [r0, #0]
  35 0002 23F00103 		bic	r3, r3, #1
  36 0006 0360     		str	r3, [r0, #0]
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  37              		.loc 1 197 0
  38 0008 0023     		movs	r3, #0
  39 000a 0360     		str	r3, [r0, #0]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  40              		.loc 1 200 0
  41 000c 4360     		str	r3, [r0, #4]
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  42              		.loc 1 203 0
  43 000e 8360     		str	r3, [r0, #8]
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  44              		.loc 1 206 0
  45 0010 C360     		str	r3, [r0, #12]
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  46              		.loc 1 209 0
  47 0012 0361     		str	r3, [r0, #16]
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  48              		.loc 1 212 0
  49 0014 2123     		movs	r3, #33
  50 0016 4361     		str	r3, [r0, #20]
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  51              		.loc 1 215 0
  52 0018 2C4B     		ldr	r3, .L25
  53 001a 9842     		cmp	r0, r3
  54 001c 1CD0     		beq	.L18
  55              	.L2:
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  56              		.loc 1 220 0
  57 001e 2C4B     		ldr	r3, .L25+4
  58 0020 9842     		cmp	r0, r3
  59 0022 20D0     		beq	.L19
  60              	.L4:
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
  61              		.loc 1 225 0
  62 0024 2B4B     		ldr	r3, .L25+8
  63 0026 9842     		cmp	r0, r3
  64 0028 25D0     		beq	.L20
  65              	.L5:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
  66              		.loc 1 230 0
  67 002a 2B4B     		ldr	r3, .L25+12
  68 002c 9842     		cmp	r0, r3
  69 002e 2AD0     		beq	.L21
  70              	.L6:
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
  71              		.loc 1 235 0
  72 0030 2A4B     		ldr	r3, .L25+16
  73 0032 9842     		cmp	r0, r3
  74 0034 2FD0     		beq	.L22
  75              	.L7:
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
  76              		.loc 1 240 0
  77 0036 2A4B     		ldr	r3, .L25+20
  78 0038 9842     		cmp	r0, r3
  79 003a 33D0     		beq	.L23
  80              	.L8:
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
  81              		.loc 1 245 0
  82 003c 294B     		ldr	r3, .L25+24
  83 003e 9842     		cmp	r0, r3
  84 0040 37D0     		beq	.L24
  85              	.L9:
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
  86              		.loc 1 250 0
  87 0042 294B     		ldr	r3, .L25+28
  88 0044 9842     		cmp	r0, r3
  89 0046 04D1     		bne	.L10
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
  90              		.loc 1 253 0
  91 0048 4FF03D52 		mov	r2, #792723456
  92 004c 43F8AC2C 		str	r2, [r3, #-172]
  93 0050 7047     		bx	lr
  94              	.L10:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
  95              		.loc 1 255 0
  96 0052 264B     		ldr	r3, .L25+32
  97 0054 9842     		cmp	r0, r3
  98 0056 03D1     		bne	.L11
  99              	.L18:
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 100              		.loc 1 258 0
 101 0058 3D22     		movs	r2, #61
 102 005a 43F8082C 		str	r2, [r3, #-8]
 103 005e 7047     		bx	lr
 104              	.L11:
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 105              		.loc 1 260 0
 106 0060 234B     		ldr	r3, .L25+36
 107 0062 9842     		cmp	r0, r3
 108 0064 04D1     		bne	.L12
 109              	.L19:
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 110              		.loc 1 263 0
 111 0066 4FF47462 		mov	r2, #3904
 112 006a 43F8202C 		str	r2, [r3, #-32]
 113 006e 7047     		bx	lr
 114              	.L12:
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 115              		.loc 1 265 0
 116 0070 204B     		ldr	r3, .L25+40
 117 0072 9842     		cmp	r0, r3
 118 0074 04D1     		bne	.L13
 119              	.L20:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 120              		.loc 1 268 0
 121 0076 4FF47412 		mov	r2, #3997696
 122 007a 43F8382C 		str	r2, [r3, #-56]
 123 007e 7047     		bx	lr
 124              	.L13:
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 125              		.loc 1 270 0
 126 0080 1D4B     		ldr	r3, .L25+44
 127 0082 9842     		cmp	r0, r3
 128 0084 04D1     		bne	.L14
 129              	.L21:
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 130              		.loc 1 273 0
 131 0086 4FF07462 		mov	r2, #255852544
 132 008a 43F8502C 		str	r2, [r3, #-80]
 133 008e 7047     		bx	lr
 134              	.L14:
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 135              		.loc 1 275 0
 136 0090 1A4B     		ldr	r3, .L25+48
 137 0092 9842     		cmp	r0, r3
 138 0094 03D1     		bne	.L15
 139              	.L22:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 140              		.loc 1 278 0
 141 0096 1A4A     		ldr	r2, .L25+52
 142 0098 43F8642C 		str	r2, [r3, #-100]
 143 009c 7047     		bx	lr
 144              	.L15:
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 145              		.loc 1 280 0
 146 009e 194B     		ldr	r3, .L25+56
 147 00a0 9842     		cmp	r0, r3
 148 00a2 03D1     		bne	.L16
 149              	.L23:
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 150              		.loc 1 283 0
 151 00a4 184A     		ldr	r2, .L25+60
 152 00a6 43F87C2C 		str	r2, [r3, #-124]
 153 00aa 7047     		bx	lr
 154              	.L16:
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 155              		.loc 1 285 0
 156 00ac 174B     		ldr	r3, .L25+64
 157 00ae 9842     		cmp	r0, r3
 158 00b0 03D1     		bne	.L17
 159              	.L24:
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 160              		.loc 1 288 0
 161 00b2 174A     		ldr	r2, .L25+68
 162 00b4 43F8942C 		str	r2, [r3, #-148]
 163 00b8 7047     		bx	lr
 164              	.L17:
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 165              		.loc 1 292 0
 166 00ba 164B     		ldr	r3, .L25+72
 167 00bc 9842     		cmp	r0, r3
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 168              		.loc 1 295 0
 169 00be 04BF     		itt	eq
 170 00c0 4FF03D52 		moveq	r2, #792723456
 171 00c4 43F8AC2C 		streq	r2, [r3, #-172]
 172 00c8 7047     		bx	lr
 173              	.L26:
 174 00ca 00BF     		.align	2
 175              	.L25:
 176 00cc 10600240 		.word	1073897488
 177 00d0 28600240 		.word	1073897512
 178 00d4 40600240 		.word	1073897536
 179 00d8 58600240 		.word	1073897560
 180 00dc 70600240 		.word	1073897584
 181 00e0 88600240 		.word	1073897608
 182 00e4 A0600240 		.word	1073897632
 183 00e8 B8600240 		.word	1073897656
 184 00ec 10640240 		.word	1073898512
 185 00f0 28640240 		.word	1073898536
 186 00f4 40640240 		.word	1073898560
 187 00f8 58640240 		.word	1073898584
 188 00fc 70640240 		.word	1073898608
 189 0100 3D000020 		.word	536870973
 190 0104 88640240 		.word	1073898632
 191 0108 400F0020 		.word	536874816
 192 010c A0640240 		.word	1073898656
 193 0110 00003D20 		.word	540868608
 194 0114 B8640240 		.word	1073898680
 195              		.cfi_endproc
 196              	.LFE110:
 198              		.section	.text.DMA_Init,"ax",%progbits
 199              		.align	1
 200              		.global	DMA_Init
 201              		.thumb
 202              		.thumb_func
 204              	DMA_Init:
 205              	.LFB111:
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 206              		.loc 1 312 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL1:
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 211              		.loc 1 333 0
 212 0000 0268     		ldr	r2, [r0, #0]
 213              	.LVL2:
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 214              		.loc 1 336 0
 215 0002 134B     		ldr	r3, .L28
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 216              		.loc 1 312 0
 217 0004 10B5     		push	{r4, lr}
 218              	.LCFI0:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 14, -4
 221              		.cfi_offset 4, -8
 222              		.loc 1 336 0
 223 0006 1340     		ands	r3, r3, r2
 224              	.LVL3:
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 225              		.loc 1 352 0
 226 0008 CC68     		ldr	r4, [r1, #12]
 227 000a 0A68     		ldr	r2, [r1, #0]
 228 000c 2243     		orrs	r2, r2, r4
 229 000e 4C69     		ldr	r4, [r1, #20]
 230 0010 2243     		orrs	r2, r2, r4
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 231              		.loc 1 353 0
 232 0012 8C69     		ldr	r4, [r1, #24]
 233 0014 2243     		orrs	r2, r2, r4
 234 0016 CC69     		ldr	r4, [r1, #28]
 235 0018 2243     		orrs	r2, r2, r4
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 236              		.loc 1 354 0
 237 001a 0C6A     		ldr	r4, [r1, #32]
 238 001c 2243     		orrs	r2, r2, r4
 239 001e 4C6A     		ldr	r4, [r1, #36]
 240 0020 2243     		orrs	r2, r2, r4
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 241              		.loc 1 355 0
 242 0022 8C6A     		ldr	r4, [r1, #40]
 243 0024 2243     		orrs	r2, r2, r4
 244 0026 4C6B     		ldr	r4, [r1, #52]
 245 0028 2243     		orrs	r2, r2, r4
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 246              		.loc 1 356 0
 247 002a 8C6B     		ldr	r4, [r1, #56]
 248 002c 2243     		orrs	r2, r2, r4
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 249              		.loc 1 352 0
 250 002e 1343     		orrs	r3, r3, r2
 251              	.LVL4:
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 252              		.loc 1 359 0
 253 0030 0360     		str	r3, [r0, #0]
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 254              		.loc 1 363 0
 255 0032 4269     		ldr	r2, [r0, #20]
 256              	.LVL5:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 257              		.loc 1 371 0
 258 0034 0C6B     		ldr	r4, [r1, #48]
 259 0036 CB6A     		ldr	r3, [r1, #44]
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 260              		.loc 1 366 0
 261 0038 22F00702 		bic	r2, r2, #7
 262              	.LVL6:
 263              		.loc 1 371 0
 264 003c 2343     		orrs	r3, r3, r4
 265 003e 1343     		orrs	r3, r3, r2
 266              	.LVL7:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 267              		.loc 1 374 0
 268 0040 4361     		str	r3, [r0, #20]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 269              		.loc 1 378 0
 270 0042 0B69     		ldr	r3, [r1, #16]
 271              	.LVL8:
 272 0044 4360     		str	r3, [r0, #4]
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 273              		.loc 1 382 0
 274 0046 4B68     		ldr	r3, [r1, #4]
 275 0048 8360     		str	r3, [r0, #8]
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 276              		.loc 1 386 0
 277 004a 8B68     		ldr	r3, [r1, #8]
 278 004c C360     		str	r3, [r0, #12]
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 279              		.loc 1 387 0
 280 004e 10BD     		pop	{r4, pc}
 281              	.L29:
 282              		.align	2
 283              	.L28:
 284 0050 3F801CF0 		.word	-266567617
 285              		.cfi_endproc
 286              	.LFE111:
 288              		.section	.text.DMA_StructInit,"ax",%progbits
 289              		.align	1
 290              		.global	DMA_StructInit
 291              		.thumb
 292              		.thumb_func
 294              	DMA_StructInit:
 295              	.LFB112:
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 296              		.loc 1 396 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL9:
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 302              		.loc 1 399 0
 303 0000 0023     		movs	r3, #0
 304 0002 0360     		str	r3, [r0, #0]
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 305              		.loc 1 402 0
 306 0004 4360     		str	r3, [r0, #4]
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 307              		.loc 1 405 0
 308 0006 8360     		str	r3, [r0, #8]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 309              		.loc 1 408 0
 310 0008 C360     		str	r3, [r0, #12]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 311              		.loc 1 411 0
 312 000a 0361     		str	r3, [r0, #16]
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 313              		.loc 1 414 0
 314 000c 4361     		str	r3, [r0, #20]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 315              		.loc 1 417 0
 316 000e 8361     		str	r3, [r0, #24]
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 317              		.loc 1 420 0
 318 0010 C361     		str	r3, [r0, #28]
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 319              		.loc 1 423 0
 320 0012 0362     		str	r3, [r0, #32]
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 321              		.loc 1 426 0
 322 0014 4362     		str	r3, [r0, #36]
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 323              		.loc 1 429 0
 324 0016 8362     		str	r3, [r0, #40]
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 325              		.loc 1 432 0
 326 0018 C362     		str	r3, [r0, #44]
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 327              		.loc 1 435 0
 328 001a 0363     		str	r3, [r0, #48]
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 329              		.loc 1 438 0
 330 001c 4363     		str	r3, [r0, #52]
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 331              		.loc 1 441 0
 332 001e 8363     		str	r3, [r0, #56]
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 333              		.loc 1 442 0
 334 0020 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE112:
 338              		.section	.text.DMA_Cmd,"ax",%progbits
 339              		.align	1
 340              		.global	DMA_Cmd
 341              		.thumb
 342              		.thumb_func
 344              	DMA_Cmd:
 345              	.LFB113:
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 346              		.loc 1 471 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351              	.LVL10:
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 352              		.loc 1 479 0
 353 0000 0368     		ldr	r3, [r0, #0]
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 354              		.loc 1 476 0
 355 0002 11B1     		cbz	r1, .L32
 356              		.loc 1 479 0
 357 0004 43F00103 		orr	r3, r3, #1
 358 0008 01E0     		b	.L34
 359              	.L32:
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 360              		.loc 1 484 0
 361 000a 23F00103 		bic	r3, r3, #1
 362              	.L34:
 363 000e 0360     		str	r3, [r0, #0]
 364 0010 7047     		bx	lr
 365              		.cfi_endproc
 366              	.LFE113:
 368              		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 369              		.align	1
 370              		.global	DMA_PeriphIncOffsetSizeConfig
 371              		.thumb
 372              		.thumb_func
 374              	DMA_PeriphIncOffsetSizeConfig:
 375              	.LFB114:
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 376              		.loc 1 507 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381              	.LVL11:
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 382              		.loc 1 516 0
 383 0000 0368     		ldr	r3, [r0, #0]
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 384              		.loc 1 513 0
 385 0002 11B1     		cbz	r1, .L36
 386              		.loc 1 516 0
 387 0004 43F40043 		orr	r3, r3, #32768
 388 0008 01E0     		b	.L38
 389              	.L36:
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 390              		.loc 1 521 0
 391 000a 23F40043 		bic	r3, r3, #32768
 392              	.L38:
 393 000e 0360     		str	r3, [r0, #0]
 394 0010 7047     		bx	lr
 395              		.cfi_endproc
 396              	.LFE114:
 398              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 399              		.align	1
 400              		.global	DMA_FlowControllerConfig
 401              		.thumb
 402              		.thumb_func
 404              	DMA_FlowControllerConfig:
 405              	.LFB115:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 406              		.loc 1 543 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411              	.LVL12:
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 412              		.loc 1 552 0
 413 0000 0368     		ldr	r3, [r0, #0]
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 414              		.loc 1 549 0
 415 0002 11B1     		cbz	r1, .L40
 416              		.loc 1 552 0
 417 0004 43F02003 		orr	r3, r3, #32
 418 0008 01E0     		b	.L42
 419              	.L40:
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 420              		.loc 1 557 0
 421 000a 23F02003 		bic	r3, r3, #32
 422              	.L42:
 423 000e 0360     		str	r3, [r0, #0]
 424 0010 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE115:
 428              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 429              		.align	1
 430              		.global	DMA_SetCurrDataCounter
 431              		.thumb
 432              		.thumb_func
 434              	DMA_SetCurrDataCounter:
 435              	.LFB116:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 436              		.loc 1 627 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441              	.LVL13:
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 442              		.loc 1 632 0
 443 0000 4160     		str	r1, [r0, #4]
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 444              		.loc 1 633 0
 445 0002 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE116:
 449              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 450              		.align	1
 451              		.global	DMA_GetCurrDataCounter
 452              		.thumb
 453              		.thumb_func
 455              	DMA_GetCurrDataCounter:
 456              	.LFB117:
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 457              		.loc 1 642 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462              	.LVL14:
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 463              		.loc 1 647 0
 464 0000 4068     		ldr	r0, [r0, #4]
 465              	.LVL15:
 466 0002 80B2     		uxth	r0, r0
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 467              		.loc 1 648 0
 468 0004 7047     		bx	lr
 469              		.cfi_endproc
 470              	.LFE117:
 472              		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 473              		.align	1
 474              		.global	DMA_DoubleBufferModeConfig
 475              		.thumb
 476              		.thumb_func
 478              	DMA_DoubleBufferModeConfig:
 479              	.LFB118:
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 480              		.loc 1 720 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485              	.LVL16:
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 486              		.loc 1 728 0
 487 0000 0368     		ldr	r3, [r0, #0]
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 488              		.loc 1 725 0
 489 0002 12B1     		cbz	r2, .L46
 490              		.loc 1 728 0
 491 0004 43F40023 		orr	r3, r3, #524288
 492 0008 01E0     		b	.L48
 493              	.L46:
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 494              		.loc 1 733 0
 495 000a 23F40023 		bic	r3, r3, #524288
 496              	.L48:
 497 000e 0360     		str	r3, [r0, #0]
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 498              		.loc 1 737 0
 499 0010 0161     		str	r1, [r0, #16]
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 500              		.loc 1 738 0
 501 0012 7047     		bx	lr
 502              		.cfi_endproc
 503              	.LFE118:
 505              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 506              		.align	1
 507              		.global	DMA_DoubleBufferModeCmd
 508              		.thumb
 509              		.thumb_func
 511              	DMA_DoubleBufferModeCmd:
 512              	.LFB119:
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 513              		.loc 1 750 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 518              	.LVL17:
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 519              		.loc 1 759 0
 520 0000 0368     		ldr	r3, [r0, #0]
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 521              		.loc 1 756 0
 522 0002 11B1     		cbz	r1, .L50
 523              		.loc 1 759 0
 524 0004 43F48023 		orr	r3, r3, #262144
 525 0008 01E0     		b	.L52
 526              	.L50:
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 527              		.loc 1 764 0
 528 000a 23F48023 		bic	r3, r3, #262144
 529              	.L52:
 530 000e 0360     		str	r3, [r0, #0]
 531 0010 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE119:
 535              		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 536              		.align	1
 537              		.global	DMA_MemoryTargetConfig
 538              		.thumb
 539              		.thumb_func
 541              	DMA_MemoryTargetConfig:
 542              	.LFB120:
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 543              		.loc 1 792 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL18:
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 549              		.loc 1 798 0
 550 0000 0AB1     		cbz	r2, .L54
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 551              		.loc 1 801 0
 552 0002 0161     		str	r1, [r0, #16]
 553 0004 7047     		bx	lr
 554              	.L54:
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 555              		.loc 1 806 0
 556 0006 C160     		str	r1, [r0, #12]
 557 0008 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE120:
 561              		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 562              		.align	1
 563              		.global	DMA_GetCurrentMemoryTarget
 564              		.thumb
 565              		.thumb_func
 567              	DMA_GetCurrentMemoryTarget:
 568              	.LFB121:
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 569              		.loc 1 817 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL19:
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 575              		.loc 1 824 0
 576 0000 0068     		ldr	r0, [r0, #0]
 577              	.LVL20:
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 578              		.loc 1 827 0
 579 0002 C0F3C040 		ubfx	r0, r0, #19, #1
 580              	.LVL21:
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 581              		.loc 1 835 0
 582 0006 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE121:
 586              		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 587              		.align	1
 588              		.global	DMA_GetCmdStatus
 589              		.thumb
 590              		.thumb_func
 592              	DMA_GetCmdStatus:
 593              	.LFB122:
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 594              		.loc 1 926 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599              	.LVL22:
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 600              		.loc 1 932 0
 601 0000 0068     		ldr	r0, [r0, #0]
 602              	.LVL23:
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 603              		.loc 1 943 0
 604 0002 00F00100 		and	r0, r0, #1
 605              	.LVL24:
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 606              		.loc 1 944 0
 607 0006 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE122:
 611              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 612              		.align	1
 613              		.global	DMA_GetFIFOStatus
 614              		.thumb
 615              		.thumb_func
 617              	DMA_GetFIFOStatus:
 618              	.LFB123:
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 619              		.loc 1 960 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624              	.LVL25:
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 625              		.loc 1 967 0
 626 0000 4069     		ldr	r0, [r0, #20]
 627              	.LVL26:
 628 0002 00F03800 		and	r0, r0, #56
 629              	.LVL27:
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 630              		.loc 1 970 0
 631 0006 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE123:
 635              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 636              		.align	1
 637              		.global	DMA_GetFlagStatus
 638              		.thumb
 639              		.thumb_func
 641              	DMA_GetFlagStatus:
 642              	.LFB124:
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 643              		.loc 1 987 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              	.LVL28:
 648 0000 10B5     		push	{r4, lr}
 649              	.LCFI1:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 14, -4
 652              		.cfi_offset 4, -8
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 653              		.loc 1 1000 0
 654 0002 094A     		ldr	r2, .L64
 655 0004 094B     		ldr	r3, .L64+4
 656 0006 0A4C     		ldr	r4, .L64+8
 657 0008 A042     		cmp	r0, r4
 658 000a 8CBF     		ite	hi
 659 000c 1046     		movhi	r0, r2
 660 000e 1846     		movls	r0, r3
 661              	.LVL29:
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 662              		.loc 1 1009 0
 663 0010 8B00     		lsls	r3, r1, #2
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 664              		.loc 1 1021 0
 665 0012 084B     		ldr	r3, .L64+12
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 666              		.loc 1 1012 0
 667 0014 4CBF     		ite	mi
 668 0016 4268     		ldrmi	r2, [r0, #4]
 669              	.LVL30:
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 670              		.loc 1 1017 0
 671 0018 0268     		ldrpl	r2, [r0, #0]
 672              	.LVL31:
 673              		.loc 1 1021 0
 674 001a 0B40     		ands	r3, r3, r1
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 675              		.loc 1 1027 0
 676 001c 1342     		tst	r3, r2
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 677              		.loc 1 1036 0
 678 001e 0CBF     		ite	eq
 679 0020 0020     		moveq	r0, #0
 680 0022 0120     		movne	r0, #1
 681              	.LVL32:
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 682              		.loc 1 1037 0
 683 0024 10BD     		pop	{r4, pc}
 684              	.L65:
 685 0026 00BF     		.align	2
 686              	.L64:
 687 0028 00640240 		.word	1073898496
 688 002c 00600240 		.word	1073897472
 689 0030 0F640240 		.word	1073898511
 690 0034 7D0F7D0F 		.word	259854205
 691              		.cfi_endproc
 692              	.LFE124:
 694              		.section	.text.DMA_ClearFlag,"ax",%progbits
 695              		.align	1
 696              		.global	DMA_ClearFlag
 697              		.thumb
 698              		.thumb_func
 700              	DMA_ClearFlag:
 701              	.LFB125:
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 702              		.loc 1 1054 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              	.LVL33:
 707 0000 10B5     		push	{r4, lr}
 708              	.LCFI2:
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 14, -4
 711              		.cfi_offset 4, -8
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 712              		.loc 1 1065 0
 713 0002 084B     		ldr	r3, .L71
 714 0004 084A     		ldr	r2, .L71+4
 715 0006 094C     		ldr	r4, .L71+8
 716 0008 A042     		cmp	r0, r4
 717 000a 8CBF     		ite	hi
 718 000c 1046     		movhi	r0, r2
 719 000e 1846     		movls	r0, r3
 720              	.LVL34:
 721 0010 074B     		ldr	r3, .L71+12
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 722              		.loc 1 1074 0
 723 0012 11F0005F 		tst	r1, #536870912
 724 0016 01EA0303 		and	r3, r1, r3
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 725              		.loc 1 1077 0
 726 001a 14BF     		ite	ne
 727 001c C360     		strne	r3, [r0, #12]
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 728              		.loc 1 1082 0
 729 001e 8360     		streq	r3, [r0, #8]
 730 0020 10BD     		pop	{r4, pc}
 731              	.L72:
 732 0022 00BF     		.align	2
 733              	.L71:
 734 0024 00600240 		.word	1073897472
 735 0028 00640240 		.word	1073898496
 736 002c 0F640240 		.word	1073898511
 737 0030 7D0F7D0F 		.word	259854205
 738              		.cfi_endproc
 739              	.LFE125:
 741              		.section	.text.DMA_ITConfig,"ax",%progbits
 742              		.align	1
 743              		.global	DMA_ITConfig
 744              		.thumb
 745              		.thumb_func
 747              	DMA_ITConfig:
 748              	.LFB126:
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 749              		.loc 1 1101 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 754              	.LVL35:
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 755              		.loc 1 1108 0
 756 0000 0B06     		lsls	r3, r1, #24
 757 0002 07D5     		bpl	.L74
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 758              		.loc 1 1113 0
 759 0004 4369     		ldr	r3, [r0, #20]
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 760              		.loc 1 1110 0
 761 0006 12B1     		cbz	r2, .L75
 762              		.loc 1 1113 0
 763 0008 43F08003 		orr	r3, r3, #128
 764 000c 01E0     		b	.L78
 765              	.L75:
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 766              		.loc 1 1118 0
 767 000e 23F08003 		bic	r3, r3, #128
 768              	.L78:
 769 0012 4361     		str	r3, [r0, #20]
 770              	.L74:
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 771              		.loc 1 1123 0
 772 0014 8029     		cmp	r1, #128
 773 0016 09D0     		beq	.L73
 774 0018 01F01E01 		and	r1, r1, #30
 775              	.LVL36:
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 776              		.loc 1 1128 0
 777 001c 0368     		ldr	r3, [r0, #0]
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 778              		.loc 1 1125 0
 779 001e 12B1     		cbz	r2, .L77
 780              		.loc 1 1128 0
 781 0020 1943     		orrs	r1, r1, r3
 782 0022 0160     		str	r1, [r0, #0]
 783 0024 7047     		bx	lr
 784              	.L77:
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 785              		.loc 1 1133 0
 786 0026 23EA0101 		bic	r1, r3, r1
 787 002a 0160     		str	r1, [r0, #0]
 788              	.L73:
 789 002c 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE126:
 793              		.section	.text.DMA_GetITStatus,"ax",%progbits
 794              		.align	1
 795              		.global	DMA_GetITStatus
 796              		.thumb
 797              		.thumb_func
 799              	DMA_GetITStatus:
 800              	.LFB127:
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 801              		.loc 1 1153 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              	.LVL37:
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 806              		.loc 1 1166 0
 807 0000 114B     		ldr	r3, .L86
 808 0002 124A     		ldr	r2, .L86+4
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 809              		.loc 1 1153 0
 810 0004 10B5     		push	{r4, lr}
 811              	.LCFI3:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 14, -4
 814              		.cfi_offset 4, -8
 815              		.loc 1 1166 0
 816 0006 124C     		ldr	r4, .L86+8
 817 0008 A042     		cmp	r0, r4
 818 000a 8CBF     		ite	hi
 819 000c 1446     		movhi	r4, r2
 820 000e 1C46     		movls	r4, r3
 821              	.LVL38:
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 822              		.loc 1 1175 0
 823 0010 104B     		ldr	r3, .L86+12
 824 0012 0B40     		ands	r3, r3, r1
 825 0014 2BB1     		cbz	r3, .L81
 826              	.LVL39:
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 827              		.loc 1 1181 0
 828 0016 0268     		ldr	r2, [r0, #0]
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 829              		.loc 1 1178 0
 830 0018 02F01E02 		and	r2, r2, #30
 831              		.loc 1 1181 0
 832 001c 02EAD122 		and	r2, r2, r1, lsr #11
 833              	.LVL40:
 834 0020 02E0     		b	.L82
 835              	.LVL41:
 836              	.L81:
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 837              		.loc 1 1186 0
 838 0022 4269     		ldr	r2, [r0, #20]
 839 0024 02F08002 		and	r2, r2, #128
 840              	.LVL42:
 841              	.L82:
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 842              		.loc 1 1190 0
 843 0028 8800     		lsls	r0, r1, #2
 844              	.LVL43:
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 845              		.loc 1 1202 0
 846 002a 0B4B     		ldr	r3, .L86+16
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 847              		.loc 1 1193 0
 848 002c 4CBF     		ite	mi
 849 002e 6068     		ldrmi	r0, [r4, #4]
 850              	.LVL44:
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 851              		.loc 1 1198 0
 852 0030 2068     		ldrpl	r0, [r4, #0]
 853              	.LVL45:
 854              		.loc 1 1202 0
 855 0032 0B40     		ands	r3, r3, r1
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 856              		.loc 1 1205 0
 857 0034 0342     		tst	r3, r0
 858 0036 0CBF     		ite	eq
 859 0038 0020     		moveq	r0, #0
 860 003a 0120     		movne	r0, #1
 861              	.LVL46:
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 862              		.loc 1 1217 0
 863 003c 002A     		cmp	r2, #0
 864 003e 0CBF     		ite	eq
 865 0040 0020     		moveq	r0, #0
 866 0042 00F00100 		andne	r0, r0, #1
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 867              		.loc 1 1218 0
 868 0046 10BD     		pop	{r4, pc}
 869              	.L87:
 870              		.align	2
 871              	.L86:
 872 0048 00600240 		.word	1073897472
 873 004c 00640240 		.word	1073898496
 874 0050 0F640240 		.word	1073898511
 875 0054 3C0F3C0F 		.word	255594300
 876 0058 7D0F7D0F 		.word	259854205
 877              		.cfi_endproc
 878              	.LFE127:
 880              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 881              		.align	1
 882              		.global	DMA_ClearITPendingBit
 883              		.thumb
 884              		.thumb_func
 886              	DMA_ClearITPendingBit:
 887              	.LFB128:
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 888              		.loc 1 1235 0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892              	.LVL47:
 893 0000 10B5     		push	{r4, lr}
 894              	.LCFI4:
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 14, -4
 897              		.cfi_offset 4, -8
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 898              		.loc 1 1246 0
 899 0002 084B     		ldr	r3, .L93
 900 0004 084A     		ldr	r2, .L93+4
 901 0006 094C     		ldr	r4, .L93+8
 902 0008 A042     		cmp	r0, r4
 903 000a 8CBF     		ite	hi
 904 000c 1046     		movhi	r0, r2
 905 000e 1846     		movls	r0, r3
 906              	.LVL48:
 907 0010 074B     		ldr	r3, .L93+12
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 908              		.loc 1 1255 0
 909 0012 11F0005F 		tst	r1, #536870912
 910 0016 01EA0303 		and	r3, r1, r3
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 911              		.loc 1 1258 0
 912 001a 14BF     		ite	ne
 913 001c C360     		strne	r3, [r0, #12]
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 914              		.loc 1 1263 0
 915 001e 8360     		streq	r3, [r0, #8]
 916 0020 10BD     		pop	{r4, pc}
 917              	.L94:
 918 0022 00BF     		.align	2
 919              	.L93:
 920 0024 00600240 		.word	1073897472
 921 0028 00640240 		.word	1073898496
 922 002c 0F640240 		.word	1073898511
 923 0030 7D0F7D0F 		.word	259854205
 924              		.cfi_endproc
 925              	.LFE128:
 927              		.text
 928              	.Letext0:
 929              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 930              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 931              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 932              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
  C:\Temp\ccPBTIVa.s:19     .text.DMA_DeInit:00000000 $t
  C:\Temp\ccPBTIVa.s:24     .text.DMA_DeInit:00000000 DMA_DeInit
  C:\Temp\ccPBTIVa.s:176    .text.DMA_DeInit:000000cc $d
  C:\Temp\ccPBTIVa.s:199    .text.DMA_Init:00000000 $t
  C:\Temp\ccPBTIVa.s:204    .text.DMA_Init:00000000 DMA_Init
  C:\Temp\ccPBTIVa.s:284    .text.DMA_Init:00000050 $d
  C:\Temp\ccPBTIVa.s:289    .text.DMA_StructInit:00000000 $t
  C:\Temp\ccPBTIVa.s:294    .text.DMA_StructInit:00000000 DMA_StructInit
  C:\Temp\ccPBTIVa.s:339    .text.DMA_Cmd:00000000 $t
  C:\Temp\ccPBTIVa.s:344    .text.DMA_Cmd:00000000 DMA_Cmd
  C:\Temp\ccPBTIVa.s:369    .text.DMA_PeriphIncOffsetSizeConfig:00000000 $t
  C:\Temp\ccPBTIVa.s:374    .text.DMA_PeriphIncOffsetSizeConfig:00000000 DMA_PeriphIncOffsetSizeConfig
  C:\Temp\ccPBTIVa.s:399    .text.DMA_FlowControllerConfig:00000000 $t
  C:\Temp\ccPBTIVa.s:404    .text.DMA_FlowControllerConfig:00000000 DMA_FlowControllerConfig
  C:\Temp\ccPBTIVa.s:429    .text.DMA_SetCurrDataCounter:00000000 $t
  C:\Temp\ccPBTIVa.s:434    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
  C:\Temp\ccPBTIVa.s:450    .text.DMA_GetCurrDataCounter:00000000 $t
  C:\Temp\ccPBTIVa.s:455    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
  C:\Temp\ccPBTIVa.s:473    .text.DMA_DoubleBufferModeConfig:00000000 $t
  C:\Temp\ccPBTIVa.s:478    .text.DMA_DoubleBufferModeConfig:00000000 DMA_DoubleBufferModeConfig
  C:\Temp\ccPBTIVa.s:506    .text.DMA_DoubleBufferModeCmd:00000000 $t
  C:\Temp\ccPBTIVa.s:511    .text.DMA_DoubleBufferModeCmd:00000000 DMA_DoubleBufferModeCmd
  C:\Temp\ccPBTIVa.s:536    .text.DMA_MemoryTargetConfig:00000000 $t
  C:\Temp\ccPBTIVa.s:541    .text.DMA_MemoryTargetConfig:00000000 DMA_MemoryTargetConfig
  C:\Temp\ccPBTIVa.s:562    .text.DMA_GetCurrentMemoryTarget:00000000 $t
  C:\Temp\ccPBTIVa.s:567    .text.DMA_GetCurrentMemoryTarget:00000000 DMA_GetCurrentMemoryTarget
  C:\Temp\ccPBTIVa.s:587    .text.DMA_GetCmdStatus:00000000 $t
  C:\Temp\ccPBTIVa.s:592    .text.DMA_GetCmdStatus:00000000 DMA_GetCmdStatus
  C:\Temp\ccPBTIVa.s:612    .text.DMA_GetFIFOStatus:00000000 $t
  C:\Temp\ccPBTIVa.s:617    .text.DMA_GetFIFOStatus:00000000 DMA_GetFIFOStatus
  C:\Temp\ccPBTIVa.s:636    .text.DMA_GetFlagStatus:00000000 $t
  C:\Temp\ccPBTIVa.s:641    .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
  C:\Temp\ccPBTIVa.s:687    .text.DMA_GetFlagStatus:00000028 $d
  C:\Temp\ccPBTIVa.s:695    .text.DMA_ClearFlag:00000000 $t
  C:\Temp\ccPBTIVa.s:700    .text.DMA_ClearFlag:00000000 DMA_ClearFlag
  C:\Temp\ccPBTIVa.s:734    .text.DMA_ClearFlag:00000024 $d
  C:\Temp\ccPBTIVa.s:742    .text.DMA_ITConfig:00000000 $t
  C:\Temp\ccPBTIVa.s:747    .text.DMA_ITConfig:00000000 DMA_ITConfig
  C:\Temp\ccPBTIVa.s:794    .text.DMA_GetITStatus:00000000 $t
  C:\Temp\ccPBTIVa.s:799    .text.DMA_GetITStatus:00000000 DMA_GetITStatus
  C:\Temp\ccPBTIVa.s:872    .text.DMA_GetITStatus:00000048 $d
  C:\Temp\ccPBTIVa.s:881    .text.DMA_ClearITPendingBit:00000000 $t
  C:\Temp\ccPBTIVa.s:886    .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
  C:\Temp\ccPBTIVa.s:920    .text.DMA_ClearITPendingBit:00000024 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
