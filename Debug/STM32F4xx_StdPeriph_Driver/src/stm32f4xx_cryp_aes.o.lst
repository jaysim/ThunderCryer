   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp_aes.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CRYP_AES_ECB
  20              		.thumb
  21              		.thumb_func
  23              	CRYP_AES_ECB:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @file    stm32f4xx_cryp_aes.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          input message using AES in ECB/CBC/CTR modes.
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          1. Enable The CRYP controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          2. Encrypt and decrypt using AES in ECB Mode using CRYP_AES_ECB()
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *             function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          3. Encrypt and decrypt using AES in CBC Mode using CRYP_AES_CBC()
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *             function.
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          4. Encrypt and decrypt using AES in CTR Mode using CRYP_AES_CTR()
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *             function.
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *  @endverbatim
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @attention
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************  
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Includes ------------------------------------------------------------------*/
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** #include "stm32f4xx_cryp.h"
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @{
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP 
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @brief CRYP driver modules
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @{
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Private typedef -----------------------------------------------------------*/
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Private define ------------------------------------------------------------*/
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** #define AESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Private macro -------------------------------------------------------------*/
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Private variables ---------------------------------------------------------*/
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Private function prototypes -----------------------------------------------*/
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /* Private functions ---------------------------------------------------------*/
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP_Private_Functions
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @{
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */ 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP_Group6 High Level AES functions
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****  *  @brief   High Level AES functions 
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****  *
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** @verbatim   
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****  ===============================================================================
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****                           High Level AES functions
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****  ===============================================================================
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** @endverbatim
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @{
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /**
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in ECB Mode
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****                          uint8_t* Input, uint32_t Ilength, uint8_t* Output)
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** {
  26              		.loc 1 100 0
  27              		.cfi_startproc
  28              		@ args = 8, pretend = 0, frame = 232
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 90B5     		push	{r4, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 4, -12
  36 0002 BBB0     		sub	sp, sp, #236
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 248
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 B960     		str	r1, [r7, #8]
  43 0008 7B60     		str	r3, [r7, #4]
  44 000a 0346     		mov	r3, r0
  45 000c FB73     		strb	r3, [r7, #15]
  46 000e 1346     		mov	r3, r2	@ movhi
  47 0010 BB81     		strh	r3, [r7, #12]	@ movhi
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
  48              		.loc 1 103 0
  49 0012 4FF00003 		mov	r3, #0
  50 0016 7B61     		str	r3, [r7, #20]
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
  51              		.loc 1 104 0
  52 0018 4FF00003 		mov	r3, #0
  53 001c C7F8D430 		str	r3, [r7, #212]
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
  54              		.loc 1 105 0
  55 0020 4FF00103 		mov	r3, #1
  56 0024 87F8E730 		strb	r3, [r7, #231]
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
  57              		.loc 1 106 0
  58 0028 BB68     		ldr	r3, [r7, #8]
  59 002a C7F8D030 		str	r3, [r7, #208]
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  60              		.loc 1 107 0
  61 002e 7B68     		ldr	r3, [r7, #4]
  62 0030 C7F8E030 		str	r3, [r7, #224]
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
  63              		.loc 1 108 0
  64 0034 D7F8FC30 		ldr	r3, [r7, #252]
  65 0038 C7F8DC30 		str	r3, [r7, #220]
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
  66              		.loc 1 109 0
  67 003c 4FF00003 		mov	r3, #0
  68 0040 C7F8D830 		str	r3, [r7, #216]
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  69              		.loc 1 112 0
  70 0044 07F11803 		add	r3, r7, #24
  71 0048 1846     		mov	r0, r3
  72 004a FFF7FEFF 		bl	CRYP_KeyStructInit
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
  73              		.loc 1 114 0
  74 004e BB89     		ldrh	r3, [r7, #12]
  75 0050 C02B     		cmp	r3, #192
  76 0052 50D0     		beq	.L4
  77 0054 B3F5807F 		cmp	r3, #256
  78 0058 00F0BD80 		beq	.L5
  79 005c 802B     		cmp	r3, #128
  80 005e 40F03081 		bne	.L19
  81              	.L3:
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 128:
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
  82              		.loc 1 117 0
  83 0062 4FF00003 		mov	r3, #0
  84 0066 FB87     		strh	r3, [r7, #62]	@ movhi
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
  85              		.loc 1 118 0
  86 0068 D7F8D030 		ldr	r3, [r7, #208]
  87 006c 1B68     		ldr	r3, [r3, #0]
  88 006e C7F8CC30 		str	r3, [r7, #204]
  89              	.LBB126:
  90              	.LBB127:
  91              		.file 2 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmInstr.h"
   1:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 295:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 296:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 297:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 299:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 301:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 303:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 305:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 306:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 307:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 309:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 313:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 315:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 317:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 318:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 319:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 321:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 324:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 326:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 328:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 329:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 330:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 332:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 335:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 337:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 339:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 340:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 341:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 343:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 345:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 348:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 350:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
  92              		.loc 2 352 0
  93 0072 D7F8CC30 		ldr	r3, [r7, #204]
  94              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
  95 0076 1CBA     		rev r4, r3
  96              	@ 0 "" 2
  97              		.thumb
  98 0078 C7F8C840 		str	r4, [r7, #200]
 353:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   return(result);
  99              		.loc 2 353 0
 100 007c D7F8C830 		ldr	r3, [r7, #200]
 101              	.LBE127:
 102              	.LBE126:
 103              		.loc 1 118 0
 104 0080 BB62     		str	r3, [r7, #40]
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 105              		.loc 1 119 0
 106 0082 D7F8D030 		ldr	r3, [r7, #208]
 107 0086 03F10403 		add	r3, r3, #4
 108 008a C7F8D030 		str	r3, [r7, #208]
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 109              		.loc 1 120 0
 110 008e D7F8D030 		ldr	r3, [r7, #208]
 111 0092 1B68     		ldr	r3, [r3, #0]
 112 0094 C7F8C430 		str	r3, [r7, #196]
 113              	.LBB128:
 114              	.LBB129:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 115              		.loc 2 352 0
 116 0098 D7F8C430 		ldr	r3, [r7, #196]
 117              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 118 009c 1CBA     		rev r4, r3
 119              	@ 0 "" 2
 120              		.thumb
 121 009e C7F8C040 		str	r4, [r7, #192]
 122              		.loc 2 353 0
 123 00a2 D7F8C030 		ldr	r3, [r7, #192]
 124              	.LBE129:
 125              	.LBE128:
 126              		.loc 1 120 0
 127 00a6 FB62     		str	r3, [r7, #44]
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 128              		.loc 1 121 0
 129 00a8 D7F8D030 		ldr	r3, [r7, #208]
 130 00ac 03F10403 		add	r3, r3, #4
 131 00b0 C7F8D030 		str	r3, [r7, #208]
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 132              		.loc 1 122 0
 133 00b4 D7F8D030 		ldr	r3, [r7, #208]
 134 00b8 1B68     		ldr	r3, [r3, #0]
 135 00ba C7F8BC30 		str	r3, [r7, #188]
 136              	.LBB130:
 137              	.LBB131:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 138              		.loc 2 352 0
 139 00be D7F8BC30 		ldr	r3, [r7, #188]
 140              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 141 00c2 1CBA     		rev r4, r3
 142              	@ 0 "" 2
 143              		.thumb
 144 00c4 C7F8B840 		str	r4, [r7, #184]
 145              		.loc 2 353 0
 146 00c8 D7F8B830 		ldr	r3, [r7, #184]
 147              	.LBE131:
 148              	.LBE130:
 149              		.loc 1 122 0
 150 00cc 3B63     		str	r3, [r7, #48]
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 151              		.loc 1 123 0
 152 00ce D7F8D030 		ldr	r3, [r7, #208]
 153 00d2 03F10403 		add	r3, r3, #4
 154 00d6 C7F8D030 		str	r3, [r7, #208]
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 155              		.loc 1 124 0
 156 00da D7F8D030 		ldr	r3, [r7, #208]
 157 00de 1B68     		ldr	r3, [r3, #0]
 158 00e0 C7F8B430 		str	r3, [r7, #180]
 159              	.LBB132:
 160              	.LBB133:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 161              		.loc 2 352 0
 162 00e4 D7F8B430 		ldr	r3, [r7, #180]
 163              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 164 00e8 1CBA     		rev r4, r3
 165              	@ 0 "" 2
 166              		.thumb
 167 00ea C7F8B040 		str	r4, [r7, #176]
 168              		.loc 2 353 0
 169 00ee D7F8B030 		ldr	r3, [r7, #176]
 170              	.LBE133:
 171              	.LBE132:
 172              		.loc 1 124 0
 173 00f2 7B63     		str	r3, [r7, #52]
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 174              		.loc 1 125 0
 175 00f4 E6E0     		b	.L6
 176              	.L4:
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 192:
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 177              		.loc 1 127 0
 178 00f6 4FF48073 		mov	r3, #256
 179 00fa FB87     		strh	r3, [r7, #62]	@ movhi
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 180              		.loc 1 128 0
 181 00fc D7F8D030 		ldr	r3, [r7, #208]
 182 0100 1B68     		ldr	r3, [r3, #0]
 183 0102 C7F8AC30 		str	r3, [r7, #172]
 184              	.LBB134:
 185              	.LBB135:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 186              		.loc 2 352 0
 187 0106 D7F8AC30 		ldr	r3, [r7, #172]
 188              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 189 010a 1CBA     		rev r4, r3
 190              	@ 0 "" 2
 191              		.thumb
 192 010c C7F8A840 		str	r4, [r7, #168]
 193              		.loc 2 353 0
 194 0110 D7F8A830 		ldr	r3, [r7, #168]
 195              	.LBE135:
 196              	.LBE134:
 197              		.loc 1 128 0
 198 0114 3B62     		str	r3, [r7, #32]
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 199              		.loc 1 129 0
 200 0116 D7F8D030 		ldr	r3, [r7, #208]
 201 011a 03F10403 		add	r3, r3, #4
 202 011e C7F8D030 		str	r3, [r7, #208]
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 203              		.loc 1 130 0
 204 0122 D7F8D030 		ldr	r3, [r7, #208]
 205 0126 1B68     		ldr	r3, [r3, #0]
 206 0128 C7F8A430 		str	r3, [r7, #164]
 207              	.LBB136:
 208              	.LBB137:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 209              		.loc 2 352 0
 210 012c D7F8A430 		ldr	r3, [r7, #164]
 211              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 212 0130 1CBA     		rev r4, r3
 213              	@ 0 "" 2
 214              		.thumb
 215 0132 C7F8A040 		str	r4, [r7, #160]
 216              		.loc 2 353 0
 217 0136 D7F8A030 		ldr	r3, [r7, #160]
 218              	.LBE137:
 219              	.LBE136:
 220              		.loc 1 130 0
 221 013a 7B62     		str	r3, [r7, #36]
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 222              		.loc 1 131 0
 223 013c D7F8D030 		ldr	r3, [r7, #208]
 224 0140 03F10403 		add	r3, r3, #4
 225 0144 C7F8D030 		str	r3, [r7, #208]
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 226              		.loc 1 132 0
 227 0148 D7F8D030 		ldr	r3, [r7, #208]
 228 014c 1B68     		ldr	r3, [r3, #0]
 229 014e C7F89C30 		str	r3, [r7, #156]
 230              	.LBB138:
 231              	.LBB139:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 232              		.loc 2 352 0
 233 0152 D7F89C30 		ldr	r3, [r7, #156]
 234              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 235 0156 1CBA     		rev r4, r3
 236              	@ 0 "" 2
 237              		.thumb
 238 0158 C7F89840 		str	r4, [r7, #152]
 239              		.loc 2 353 0
 240 015c D7F89830 		ldr	r3, [r7, #152]
 241              	.LBE139:
 242              	.LBE138:
 243              		.loc 1 132 0
 244 0160 BB62     		str	r3, [r7, #40]
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 245              		.loc 1 133 0
 246 0162 D7F8D030 		ldr	r3, [r7, #208]
 247 0166 03F10403 		add	r3, r3, #4
 248 016a C7F8D030 		str	r3, [r7, #208]
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 249              		.loc 1 134 0
 250 016e D7F8D030 		ldr	r3, [r7, #208]
 251 0172 1B68     		ldr	r3, [r3, #0]
 252 0174 C7F89430 		str	r3, [r7, #148]
 253              	.LBB140:
 254              	.LBB141:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 255              		.loc 2 352 0
 256 0178 D7F89430 		ldr	r3, [r7, #148]
 257              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 258 017c 1CBA     		rev r4, r3
 259              	@ 0 "" 2
 260              		.thumb
 261 017e C7F89040 		str	r4, [r7, #144]
 262              		.loc 2 353 0
 263 0182 D7F89030 		ldr	r3, [r7, #144]
 264              	.LBE141:
 265              	.LBE140:
 266              		.loc 1 134 0
 267 0186 FB62     		str	r3, [r7, #44]
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 268              		.loc 1 135 0
 269 0188 D7F8D030 		ldr	r3, [r7, #208]
 270 018c 03F10403 		add	r3, r3, #4
 271 0190 C7F8D030 		str	r3, [r7, #208]
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 272              		.loc 1 136 0
 273 0194 D7F8D030 		ldr	r3, [r7, #208]
 274 0198 1B68     		ldr	r3, [r3, #0]
 275 019a C7F88C30 		str	r3, [r7, #140]
 276              	.LBB142:
 277              	.LBB143:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 278              		.loc 2 352 0
 279 019e D7F88C30 		ldr	r3, [r7, #140]
 280              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 281 01a2 1CBA     		rev r4, r3
 282              	@ 0 "" 2
 283              		.thumb
 284 01a4 C7F88840 		str	r4, [r7, #136]
 285              		.loc 2 353 0
 286 01a8 D7F88830 		ldr	r3, [r7, #136]
 287              	.LBE143:
 288              	.LBE142:
 289              		.loc 1 136 0
 290 01ac 3B63     		str	r3, [r7, #48]
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 291              		.loc 1 137 0
 292 01ae D7F8D030 		ldr	r3, [r7, #208]
 293 01b2 03F10403 		add	r3, r3, #4
 294 01b6 C7F8D030 		str	r3, [r7, #208]
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 295              		.loc 1 138 0
 296 01ba D7F8D030 		ldr	r3, [r7, #208]
 297 01be 1B68     		ldr	r3, [r3, #0]
 298 01c0 C7F88430 		str	r3, [r7, #132]
 299              	.LBB144:
 300              	.LBB145:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 301              		.loc 2 352 0
 302 01c4 D7F88430 		ldr	r3, [r7, #132]
 303              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 304 01c8 1CBA     		rev r4, r3
 305              	@ 0 "" 2
 306              		.thumb
 307 01ca C7F88040 		str	r4, [r7, #128]
 308              		.loc 2 353 0
 309 01ce D7F88030 		ldr	r3, [r7, #128]
 310              	.LBE145:
 311              	.LBE144:
 312              		.loc 1 138 0
 313 01d2 7B63     		str	r3, [r7, #52]
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 314              		.loc 1 139 0
 315 01d4 76E0     		b	.L6
 316              	.L5:
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 256:
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 317              		.loc 1 141 0
 318 01d6 4FF40073 		mov	r3, #512
 319 01da FB87     		strh	r3, [r7, #62]	@ movhi
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 320              		.loc 1 142 0
 321 01dc D7F8D030 		ldr	r3, [r7, #208]
 322 01e0 1B68     		ldr	r3, [r3, #0]
 323 01e2 FB67     		str	r3, [r7, #124]
 324              	.LBB146:
 325              	.LBB147:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 326              		.loc 2 352 0
 327 01e4 FB6F     		ldr	r3, [r7, #124]
 328              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 329 01e6 1CBA     		rev r4, r3
 330              	@ 0 "" 2
 331              		.thumb
 332 01e8 BC67     		str	r4, [r7, #120]
 333              		.loc 2 353 0
 334 01ea BB6F     		ldr	r3, [r7, #120]
 335              	.LBE147:
 336              	.LBE146:
 337              		.loc 1 142 0
 338 01ec BB61     		str	r3, [r7, #24]
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 339              		.loc 1 143 0
 340 01ee D7F8D030 		ldr	r3, [r7, #208]
 341 01f2 03F10403 		add	r3, r3, #4
 342 01f6 C7F8D030 		str	r3, [r7, #208]
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 343              		.loc 1 144 0
 344 01fa D7F8D030 		ldr	r3, [r7, #208]
 345 01fe 1B68     		ldr	r3, [r3, #0]
 346 0200 7B67     		str	r3, [r7, #116]
 347              	.LBB148:
 348              	.LBB149:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 349              		.loc 2 352 0
 350 0202 7B6F     		ldr	r3, [r7, #116]
 351              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 352 0204 1CBA     		rev r4, r3
 353              	@ 0 "" 2
 354              		.thumb
 355 0206 3C67     		str	r4, [r7, #112]
 356              		.loc 2 353 0
 357 0208 3B6F     		ldr	r3, [r7, #112]
 358              	.LBE149:
 359              	.LBE148:
 360              		.loc 1 144 0
 361 020a FB61     		str	r3, [r7, #28]
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 362              		.loc 1 145 0
 363 020c D7F8D030 		ldr	r3, [r7, #208]
 364 0210 03F10403 		add	r3, r3, #4
 365 0214 C7F8D030 		str	r3, [r7, #208]
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 366              		.loc 1 146 0
 367 0218 D7F8D030 		ldr	r3, [r7, #208]
 368 021c 1B68     		ldr	r3, [r3, #0]
 369 021e FB66     		str	r3, [r7, #108]
 370              	.LBB150:
 371              	.LBB151:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 372              		.loc 2 352 0
 373 0220 FB6E     		ldr	r3, [r7, #108]
 374              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 375 0222 1CBA     		rev r4, r3
 376              	@ 0 "" 2
 377              		.thumb
 378 0224 BC66     		str	r4, [r7, #104]
 379              		.loc 2 353 0
 380 0226 BB6E     		ldr	r3, [r7, #104]
 381              	.LBE151:
 382              	.LBE150:
 383              		.loc 1 146 0
 384 0228 3B62     		str	r3, [r7, #32]
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 385              		.loc 1 147 0
 386 022a D7F8D030 		ldr	r3, [r7, #208]
 387 022e 03F10403 		add	r3, r3, #4
 388 0232 C7F8D030 		str	r3, [r7, #208]
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 389              		.loc 1 148 0
 390 0236 D7F8D030 		ldr	r3, [r7, #208]
 391 023a 1B68     		ldr	r3, [r3, #0]
 392 023c 7B66     		str	r3, [r7, #100]
 393              	.LBB152:
 394              	.LBB153:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 395              		.loc 2 352 0
 396 023e 7B6E     		ldr	r3, [r7, #100]
 397              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 398 0240 1CBA     		rev r4, r3
 399              	@ 0 "" 2
 400              		.thumb
 401 0242 3C66     		str	r4, [r7, #96]
 402              		.loc 2 353 0
 403 0244 3B6E     		ldr	r3, [r7, #96]
 404              	.LBE153:
 405              	.LBE152:
 406              		.loc 1 148 0
 407 0246 7B62     		str	r3, [r7, #36]
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 408              		.loc 1 149 0
 409 0248 D7F8D030 		ldr	r3, [r7, #208]
 410 024c 03F10403 		add	r3, r3, #4
 411 0250 C7F8D030 		str	r3, [r7, #208]
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 412              		.loc 1 150 0
 413 0254 D7F8D030 		ldr	r3, [r7, #208]
 414 0258 1B68     		ldr	r3, [r3, #0]
 415 025a FB65     		str	r3, [r7, #92]
 416              	.LBB154:
 417              	.LBB155:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 418              		.loc 2 352 0
 419 025c FB6D     		ldr	r3, [r7, #92]
 420              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 421 025e 1CBA     		rev r4, r3
 422              	@ 0 "" 2
 423              		.thumb
 424 0260 BC65     		str	r4, [r7, #88]
 425              		.loc 2 353 0
 426 0262 BB6D     		ldr	r3, [r7, #88]
 427              	.LBE155:
 428              	.LBE154:
 429              		.loc 1 150 0
 430 0264 BB62     		str	r3, [r7, #40]
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 431              		.loc 1 151 0
 432 0266 D7F8D030 		ldr	r3, [r7, #208]
 433 026a 03F10403 		add	r3, r3, #4
 434 026e C7F8D030 		str	r3, [r7, #208]
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 435              		.loc 1 152 0
 436 0272 D7F8D030 		ldr	r3, [r7, #208]
 437 0276 1B68     		ldr	r3, [r3, #0]
 438 0278 7B65     		str	r3, [r7, #84]
 439              	.LBB156:
 440              	.LBB157:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 441              		.loc 2 352 0
 442 027a 7B6D     		ldr	r3, [r7, #84]
 443              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 444 027c 1CBA     		rev r4, r3
 445              	@ 0 "" 2
 446              		.thumb
 447 027e 3C65     		str	r4, [r7, #80]
 448              		.loc 2 353 0
 449 0280 3B6D     		ldr	r3, [r7, #80]
 450              	.LBE157:
 451              	.LBE156:
 452              		.loc 1 152 0
 453 0282 FB62     		str	r3, [r7, #44]
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 454              		.loc 1 153 0
 455 0284 D7F8D030 		ldr	r3, [r7, #208]
 456 0288 03F10403 		add	r3, r3, #4
 457 028c C7F8D030 		str	r3, [r7, #208]
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 458              		.loc 1 154 0
 459 0290 D7F8D030 		ldr	r3, [r7, #208]
 460 0294 1B68     		ldr	r3, [r3, #0]
 461 0296 FB64     		str	r3, [r7, #76]
 462              	.LBB158:
 463              	.LBB159:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 464              		.loc 2 352 0
 465 0298 FB6C     		ldr	r3, [r7, #76]
 466              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 467 029a 1CBA     		rev r4, r3
 468              	@ 0 "" 2
 469              		.thumb
 470 029c BC64     		str	r4, [r7, #72]
 471              		.loc 2 353 0
 472 029e BB6C     		ldr	r3, [r7, #72]
 473              	.LBE159:
 474              	.LBE158:
 475              		.loc 1 154 0
 476 02a0 3B63     		str	r3, [r7, #48]
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 477              		.loc 1 155 0
 478 02a2 D7F8D030 		ldr	r3, [r7, #208]
 479 02a6 03F10403 		add	r3, r3, #4
 480 02aa C7F8D030 		str	r3, [r7, #208]
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 481              		.loc 1 156 0
 482 02ae D7F8D030 		ldr	r3, [r7, #208]
 483 02b2 1B68     		ldr	r3, [r3, #0]
 484 02b4 7B64     		str	r3, [r7, #68]
 485              	.LBB160:
 486              	.LBB161:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 487              		.loc 2 352 0
 488 02b6 7B6C     		ldr	r3, [r7, #68]
 489              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 490 02b8 1CBA     		rev r4, r3
 491              	@ 0 "" 2
 492              		.thumb
 493 02ba 3C64     		str	r4, [r7, #64]
 494              		.loc 2 353 0
 495 02bc 3B6C     		ldr	r3, [r7, #64]
 496              	.LBE161:
 497              	.LBE160:
 498              		.loc 1 156 0
 499 02be 7B63     		str	r3, [r7, #52]
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 500              		.loc 1 157 0
 501 02c0 00E0     		b	.L6
 502              	.L19:
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     default:
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 503              		.loc 1 159 0
 504 02c2 00BF     		nop
 505              	.L6:
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 506              		.loc 1 163 0
 507 02c4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 508 02c6 002B     		cmp	r3, #0
 509 02c8 38D1     		bne	.L7
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 510              		.loc 1 166 0
 511 02ca FFF7FEFF 		bl	CRYP_FIFOFlush
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 512              		.loc 1 169 0
 513 02ce 4FF00403 		mov	r3, #4
 514 02d2 3B87     		strh	r3, [r7, #56]	@ movhi
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 515              		.loc 1 170 0
 516 02d4 4FF03803 		mov	r3, #56
 517 02d8 7B87     		strh	r3, [r7, #58]	@ movhi
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 518              		.loc 1 171 0
 519 02da 4FF00003 		mov	r3, #0
 520 02de BB87     		strh	r3, [r7, #60]	@ movhi
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 521              		.loc 1 172 0
 522 02e0 07F13803 		add	r3, r7, #56
 523 02e4 1846     		mov	r0, r3
 524 02e6 FFF7FEFF 		bl	CRYP_Init
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 525              		.loc 1 175 0
 526 02ea 07F11803 		add	r3, r7, #24
 527 02ee 1846     		mov	r0, r3
 528 02f0 FFF7FEFF 		bl	CRYP_KeyInit
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 529              		.loc 1 178 0
 530 02f4 4FF00100 		mov	r0, #1
 531 02f8 FFF7FEFF 		bl	CRYP_Cmd
 532              	.L9:
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* wait until the Busy flag is RESET */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     do
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 533              		.loc 1 183 0 discriminator 1
 534 02fc 4FF01000 		mov	r0, #16
 535 0300 FFF7FEFF 		bl	CRYP_GetFlagStatus
 536 0304 0346     		mov	r3, r0
 537 0306 C7F8D430 		str	r3, [r7, #212]
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       counter++;
 538              		.loc 1 184 0 discriminator 1
 539 030a 7B69     		ldr	r3, [r7, #20]
 540 030c 03F10103 		add	r3, r3, #1
 541 0310 7B61     		str	r3, [r7, #20]
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 542              		.loc 1 185 0 discriminator 1
 543 0312 7B69     		ldr	r3, [r7, #20]
 544 0314 B3F5803F 		cmp	r3, #65536
 545 0318 03D0     		beq	.L8
 546 031a D7F8D430 		ldr	r3, [r7, #212]
 547 031e 002B     		cmp	r3, #0
 548 0320 ECD1     		bne	.L9
 549              	.L8:
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 550              		.loc 1 187 0
 551 0322 D7F8D430 		ldr	r3, [r7, #212]
 552 0326 002B     		cmp	r3, #0
 553 0328 04D0     		beq	.L10
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****    {
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 554              		.loc 1 189 0
 555 032a 4FF00003 		mov	r3, #0
 556 032e 87F8E730 		strb	r3, [r7, #231]
 557 0332 0BE0     		b	.L11
 558              	.L10:
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     else
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       /* Crypto Init for decryption process */  
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 559              		.loc 1 194 0
 560 0334 4FF00403 		mov	r3, #4
 561 0338 3B87     		strh	r3, [r7, #56]	@ movhi
 562 033a 07E0     		b	.L11
 563              	.L7:
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 564              		.loc 1 201 0
 565 033c 07F11803 		add	r3, r7, #24
 566 0340 1846     		mov	r0, r3
 567 0342 FFF7FEFF 		bl	CRYP_KeyInit
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 568              		.loc 1 204 0
 569 0346 4FF00003 		mov	r3, #0
 570 034a 3B87     		strh	r3, [r7, #56]	@ movhi
 571              	.L11:
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 572              		.loc 1 207 0
 573 034c 4FF02003 		mov	r3, #32
 574 0350 7B87     		strh	r3, [r7, #58]	@ movhi
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 575              		.loc 1 208 0
 576 0352 4FF08003 		mov	r3, #128
 577 0356 BB87     		strh	r3, [r7, #60]	@ movhi
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 578              		.loc 1 209 0
 579 0358 07F13803 		add	r3, r7, #56
 580 035c 1846     		mov	r0, r3
 581 035e FFF7FEFF 		bl	CRYP_Init
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 582              		.loc 1 212 0
 583 0362 FFF7FEFF 		bl	CRYP_FIFOFlush
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 584              		.loc 1 215 0
 585 0366 4FF00100 		mov	r0, #1
 586 036a FFF7FEFF 		bl	CRYP_Cmd
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 587              		.loc 1 217 0
 588 036e 4FF00003 		mov	r3, #0
 589 0372 C7F8D830 		str	r3, [r7, #216]
 590 0376 84E0     		b	.L12
 591              	.L18:
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 592              		.loc 1 221 0
 593 0378 D7F8E030 		ldr	r3, [r7, #224]
 594 037c 1B68     		ldr	r3, [r3, #0]
 595 037e 1846     		mov	r0, r3
 596 0380 FFF7FEFF 		bl	CRYP_DataIn
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 597              		.loc 1 222 0
 598 0384 D7F8E030 		ldr	r3, [r7, #224]
 599 0388 03F10403 		add	r3, r3, #4
 600 038c C7F8E030 		str	r3, [r7, #224]
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 601              		.loc 1 223 0
 602 0390 D7F8E030 		ldr	r3, [r7, #224]
 603 0394 1B68     		ldr	r3, [r3, #0]
 604 0396 1846     		mov	r0, r3
 605 0398 FFF7FEFF 		bl	CRYP_DataIn
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 606              		.loc 1 224 0
 607 039c D7F8E030 		ldr	r3, [r7, #224]
 608 03a0 03F10403 		add	r3, r3, #4
 609 03a4 C7F8E030 		str	r3, [r7, #224]
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 610              		.loc 1 225 0
 611 03a8 D7F8E030 		ldr	r3, [r7, #224]
 612 03ac 1B68     		ldr	r3, [r3, #0]
 613 03ae 1846     		mov	r0, r3
 614 03b0 FFF7FEFF 		bl	CRYP_DataIn
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 615              		.loc 1 226 0
 616 03b4 D7F8E030 		ldr	r3, [r7, #224]
 617 03b8 03F10403 		add	r3, r3, #4
 618 03bc C7F8E030 		str	r3, [r7, #224]
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 619              		.loc 1 227 0
 620 03c0 D7F8E030 		ldr	r3, [r7, #224]
 621 03c4 1B68     		ldr	r3, [r3, #0]
 622 03c6 1846     		mov	r0, r3
 623 03c8 FFF7FEFF 		bl	CRYP_DataIn
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 624              		.loc 1 228 0
 625 03cc D7F8E030 		ldr	r3, [r7, #224]
 626 03d0 03F10403 		add	r3, r3, #4
 627 03d4 C7F8E030 		str	r3, [r7, #224]
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 628              		.loc 1 231 0
 629 03d8 4FF00003 		mov	r3, #0
 630 03dc 7B61     		str	r3, [r7, #20]
 631              	.L14:
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     do
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 632              		.loc 1 234 0 discriminator 1
 633 03de 4FF01000 		mov	r0, #16
 634 03e2 FFF7FEFF 		bl	CRYP_GetFlagStatus
 635 03e6 0346     		mov	r3, r0
 636 03e8 C7F8D430 		str	r3, [r7, #212]
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       counter++;
 637              		.loc 1 235 0 discriminator 1
 638 03ec 7B69     		ldr	r3, [r7, #20]
 639 03ee 03F10103 		add	r3, r3, #1
 640 03f2 7B61     		str	r3, [r7, #20]
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 641              		.loc 1 236 0 discriminator 1
 642 03f4 7B69     		ldr	r3, [r7, #20]
 643 03f6 B3F5803F 		cmp	r3, #65536
 644 03fa 03D0     		beq	.L13
 645 03fc D7F8D430 		ldr	r3, [r7, #212]
 646 0400 002B     		cmp	r3, #0
 647 0402 ECD1     		bne	.L14
 648              	.L13:
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 649              		.loc 1 238 0
 650 0404 D7F8D430 		ldr	r3, [r7, #212]
 651 0408 002B     		cmp	r3, #0
 652 040a 04D0     		beq	.L15
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****    {
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 653              		.loc 1 240 0
 654 040c 4FF00003 		mov	r3, #0
 655 0410 87F8E730 		strb	r3, [r7, #231]
 656 0414 2FE0     		b	.L16
 657              	.L15:
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     else
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 658              		.loc 1 246 0
 659 0416 D7F8DC40 		ldr	r4, [r7, #220]
 660 041a FFF7FEFF 		bl	CRYP_DataOut
 661 041e 0346     		mov	r3, r0
 662 0420 2360     		str	r3, [r4, #0]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 663              		.loc 1 247 0
 664 0422 D7F8DC30 		ldr	r3, [r7, #220]
 665 0426 03F10403 		add	r3, r3, #4
 666 042a C7F8DC30 		str	r3, [r7, #220]
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 667              		.loc 1 248 0
 668 042e D7F8DC40 		ldr	r4, [r7, #220]
 669 0432 FFF7FEFF 		bl	CRYP_DataOut
 670 0436 0346     		mov	r3, r0
 671 0438 2360     		str	r3, [r4, #0]
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 672              		.loc 1 249 0
 673 043a D7F8DC30 		ldr	r3, [r7, #220]
 674 043e 03F10403 		add	r3, r3, #4
 675 0442 C7F8DC30 		str	r3, [r7, #220]
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 676              		.loc 1 250 0
 677 0446 D7F8DC40 		ldr	r4, [r7, #220]
 678 044a FFF7FEFF 		bl	CRYP_DataOut
 679 044e 0346     		mov	r3, r0
 680 0450 2360     		str	r3, [r4, #0]
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 681              		.loc 1 251 0
 682 0452 D7F8DC30 		ldr	r3, [r7, #220]
 683 0456 03F10403 		add	r3, r3, #4
 684 045a C7F8DC30 		str	r3, [r7, #220]
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 685              		.loc 1 252 0
 686 045e D7F8DC40 		ldr	r4, [r7, #220]
 687 0462 FFF7FEFF 		bl	CRYP_DataOut
 688 0466 0346     		mov	r3, r0
 689 0468 2360     		str	r3, [r4, #0]
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 690              		.loc 1 253 0
 691 046a D7F8DC30 		ldr	r3, [r7, #220]
 692 046e 03F10403 		add	r3, r3, #4
 693 0472 C7F8DC30 		str	r3, [r7, #220]
 694              	.L16:
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 695              		.loc 1 217 0
 696 0476 D7F8D830 		ldr	r3, [r7, #216]
 697 047a 03F11003 		add	r3, r3, #16
 698 047e C7F8D830 		str	r3, [r7, #216]
 699              	.L12:
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 700              		.loc 1 217 0 is_stmt 0 discriminator 1
 701 0482 D7F8D820 		ldr	r2, [r7, #216]
 702 0486 D7F8F830 		ldr	r3, [r7, #248]
 703 048a 9A42     		cmp	r2, r3
 704 048c 04D2     		bcs	.L17
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 705              		.loc 1 217 0 discriminator 2
 706 048e 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 707 0492 002B     		cmp	r3, #0
 708 0494 7FF470AF 		bne	.L18
 709              	.L17:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 710              		.loc 1 258 0 is_stmt 1
 711 0498 4FF00000 		mov	r0, #0
 712 049c FFF7FEFF 		bl	CRYP_Cmd
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   return status; 
 713              		.loc 1 260 0
 714 04a0 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** }
 715              		.loc 1 261 0
 716 04a4 1846     		mov	r0, r3
 717 04a6 07F1EC07 		add	r7, r7, #236
 718 04aa BD46     		mov	sp, r7
 719 04ac 90BD     		pop	{r4, r7, pc}
 720              		.cfi_endproc
 721              	.LFE110:
 723 04ae 00BF     		.align	2
 724              		.global	CRYP_AES_CBC
 725              		.thumb
 726              		.thumb_func
 728              	CRYP_AES_CBC:
 729              	.LFB111:
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /**
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CBC Mode
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****                          uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output)
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** {
 730              		.loc 1 282 0
 731              		.cfi_startproc
 732              		@ args = 12, pretend = 0, frame = 280
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 04b0 90B5     		push	{r4, r7, lr}
 735              	.LCFI3:
 736              		.cfi_def_cfa_offset 12
 737              		.cfi_offset 14, -4
 738              		.cfi_offset 7, -8
 739              		.cfi_offset 4, -12
 740 04b2 C7B0     		sub	sp, sp, #284
 741              	.LCFI4:
 742              		.cfi_def_cfa_offset 296
 743 04b4 00AF     		add	r7, sp, #0
 744              	.LCFI5:
 745              		.cfi_def_cfa_register 7
 746 04b6 07F10804 		add	r4, r7, #8
 747 04ba 2160     		str	r1, [r4, #0]
 748 04bc 07F10401 		add	r1, r7, #4
 749 04c0 0A60     		str	r2, [r1, #0]
 750 04c2 1A46     		mov	r2, r3
 751 04c4 07F11003 		add	r3, r7, #16
 752 04c8 03F1FF33 		add	r3, r3, #-1
 753 04cc 0146     		mov	r1, r0
 754 04ce 1970     		strb	r1, [r3, #0]
 755 04d0 07F10C03 		add	r3, r7, #12
 756 04d4 1A80     		strh	r2, [r3, #0]	@ movhi
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 757              		.loc 1 286 0
 758 04d6 07F11003 		add	r3, r7, #16
 759 04da 4FF00002 		mov	r2, #0
 760 04de 1A60     		str	r2, [r3, #0]
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 761              		.loc 1 287 0
 762 04e0 4FF00003 		mov	r3, #0
 763 04e4 C7F80431 		str	r3, [r7, #260]
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 764              		.loc 1 288 0
 765 04e8 4FF00103 		mov	r3, #1
 766 04ec 87F81731 		strb	r3, [r7, #279]
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 767              		.loc 1 289 0
 768 04f0 07F10403 		add	r3, r7, #4
 769 04f4 1B68     		ldr	r3, [r3, #0]
 770 04f6 C7F80031 		str	r3, [r7, #256]
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 771              		.loc 1 290 0
 772 04fa D7F82831 		ldr	r3, [r7, #296]
 773 04fe C7F81031 		str	r3, [r7, #272]
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 774              		.loc 1 291 0
 775 0502 D7F83031 		ldr	r3, [r7, #304]
 776 0506 C7F80C31 		str	r3, [r7, #268]
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 777              		.loc 1 292 0
 778 050a 07F10803 		add	r3, r7, #8
 779 050e 1B68     		ldr	r3, [r3, #0]
 780 0510 C7F8FC30 		str	r3, [r7, #252]
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 781              		.loc 1 293 0
 782 0514 4FF00003 		mov	r3, #0
 783 0518 C7F80831 		str	r3, [r7, #264]
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 784              		.loc 1 296 0
 785 051c 07F12403 		add	r3, r7, #36
 786 0520 1846     		mov	r0, r3
 787 0522 FFF7FEFF 		bl	CRYP_KeyStructInit
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 788              		.loc 1 298 0
 789 0526 07F10C03 		add	r3, r7, #12
 790 052a 1B88     		ldrh	r3, [r3, #0]
 791 052c C02B     		cmp	r3, #192
 792 052e 51D0     		beq	.L23
 793 0530 B3F5807F 		cmp	r3, #256
 794 0534 00F0BF80 		beq	.L24
 795 0538 802B     		cmp	r3, #128
 796 053a 40F04981 		bne	.L38
 797              	.L22:
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 128:
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 798              		.loc 1 301 0
 799 053e 4FF00003 		mov	r3, #0
 800 0542 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 801              		.loc 1 302 0
 802 0546 D7F80031 		ldr	r3, [r7, #256]
 803 054a 1B68     		ldr	r3, [r3, #0]
 804 054c C7F8F830 		str	r3, [r7, #248]
 805              	.LBB162:
 806              	.LBB163:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 807              		.loc 2 352 0
 808 0550 D7F8F830 		ldr	r3, [r7, #248]
 809              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 810 0554 1CBA     		rev r4, r3
 811              	@ 0 "" 2
 812              		.thumb
 813 0556 C7F8F440 		str	r4, [r7, #244]
 814              		.loc 2 353 0
 815 055a D7F8F430 		ldr	r3, [r7, #244]
 816              	.LBE163:
 817              	.LBE162:
 818              		.loc 1 302 0
 819 055e 7B63     		str	r3, [r7, #52]
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 820              		.loc 1 303 0
 821 0560 D7F80031 		ldr	r3, [r7, #256]
 822 0564 03F10403 		add	r3, r3, #4
 823 0568 C7F80031 		str	r3, [r7, #256]
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 824              		.loc 1 304 0
 825 056c D7F80031 		ldr	r3, [r7, #256]
 826 0570 1B68     		ldr	r3, [r3, #0]
 827 0572 C7F8F030 		str	r3, [r7, #240]
 828              	.LBB164:
 829              	.LBB165:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 830              		.loc 2 352 0
 831 0576 D7F8F030 		ldr	r3, [r7, #240]
 832              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 833 057a 1CBA     		rev r4, r3
 834              	@ 0 "" 2
 835              		.thumb
 836 057c C7F8EC40 		str	r4, [r7, #236]
 837              		.loc 2 353 0
 838 0580 D7F8EC30 		ldr	r3, [r7, #236]
 839              	.LBE165:
 840              	.LBE164:
 841              		.loc 1 304 0
 842 0584 BB63     		str	r3, [r7, #56]
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 843              		.loc 1 305 0
 844 0586 D7F80031 		ldr	r3, [r7, #256]
 845 058a 03F10403 		add	r3, r3, #4
 846 058e C7F80031 		str	r3, [r7, #256]
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 847              		.loc 1 306 0
 848 0592 D7F80031 		ldr	r3, [r7, #256]
 849 0596 1B68     		ldr	r3, [r3, #0]
 850 0598 C7F8E830 		str	r3, [r7, #232]
 851              	.LBB166:
 852              	.LBB167:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 853              		.loc 2 352 0
 854 059c D7F8E830 		ldr	r3, [r7, #232]
 855              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 856 05a0 1CBA     		rev r4, r3
 857              	@ 0 "" 2
 858              		.thumb
 859 05a2 C7F8E440 		str	r4, [r7, #228]
 860              		.loc 2 353 0
 861 05a6 D7F8E430 		ldr	r3, [r7, #228]
 862              	.LBE167:
 863              	.LBE166:
 864              		.loc 1 306 0
 865 05aa FB63     		str	r3, [r7, #60]
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 866              		.loc 1 307 0
 867 05ac D7F80031 		ldr	r3, [r7, #256]
 868 05b0 03F10403 		add	r3, r3, #4
 869 05b4 C7F80031 		str	r3, [r7, #256]
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 870              		.loc 1 308 0
 871 05b8 D7F80031 		ldr	r3, [r7, #256]
 872 05bc 1B68     		ldr	r3, [r3, #0]
 873 05be C7F8E030 		str	r3, [r7, #224]
 874              	.LBB168:
 875              	.LBB169:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 876              		.loc 2 352 0
 877 05c2 D7F8E030 		ldr	r3, [r7, #224]
 878              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 879 05c6 1CBA     		rev r4, r3
 880              	@ 0 "" 2
 881              		.thumb
 882 05c8 C7F8DC40 		str	r4, [r7, #220]
 883              		.loc 2 353 0
 884 05cc D7F8DC30 		ldr	r3, [r7, #220]
 885              	.LBE169:
 886              	.LBE168:
 887              		.loc 1 308 0
 888 05d0 3B64     		str	r3, [r7, #64]
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 889              		.loc 1 309 0
 890 05d2 FEE0     		b	.L25
 891              	.L23:
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 192:
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 892              		.loc 1 311 0
 893 05d4 4FF48073 		mov	r3, #256
 894 05d8 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 895              		.loc 1 312 0
 896 05dc D7F80031 		ldr	r3, [r7, #256]
 897 05e0 1B68     		ldr	r3, [r3, #0]
 898 05e2 C7F8D830 		str	r3, [r7, #216]
 899              	.LBB170:
 900              	.LBB171:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 901              		.loc 2 352 0
 902 05e6 D7F8D830 		ldr	r3, [r7, #216]
 903              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 904 05ea 1CBA     		rev r4, r3
 905              	@ 0 "" 2
 906              		.thumb
 907 05ec C7F8D440 		str	r4, [r7, #212]
 908              		.loc 2 353 0
 909 05f0 D7F8D430 		ldr	r3, [r7, #212]
 910              	.LBE171:
 911              	.LBE170:
 912              		.loc 1 312 0
 913 05f4 FB62     		str	r3, [r7, #44]
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 914              		.loc 1 313 0
 915 05f6 D7F80031 		ldr	r3, [r7, #256]
 916 05fa 03F10403 		add	r3, r3, #4
 917 05fe C7F80031 		str	r3, [r7, #256]
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 918              		.loc 1 314 0
 919 0602 D7F80031 		ldr	r3, [r7, #256]
 920 0606 1B68     		ldr	r3, [r3, #0]
 921 0608 C7F8D030 		str	r3, [r7, #208]
 922              	.LBB172:
 923              	.LBB173:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 924              		.loc 2 352 0
 925 060c D7F8D030 		ldr	r3, [r7, #208]
 926              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 927 0610 1CBA     		rev r4, r3
 928              	@ 0 "" 2
 929              		.thumb
 930 0612 C7F8CC40 		str	r4, [r7, #204]
 931              		.loc 2 353 0
 932 0616 D7F8CC30 		ldr	r3, [r7, #204]
 933              	.LBE173:
 934              	.LBE172:
 935              		.loc 1 314 0
 936 061a 3B63     		str	r3, [r7, #48]
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 937              		.loc 1 315 0
 938 061c D7F80031 		ldr	r3, [r7, #256]
 939 0620 03F10403 		add	r3, r3, #4
 940 0624 C7F80031 		str	r3, [r7, #256]
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 941              		.loc 1 316 0
 942 0628 D7F80031 		ldr	r3, [r7, #256]
 943 062c 1B68     		ldr	r3, [r3, #0]
 944 062e C7F8C830 		str	r3, [r7, #200]
 945              	.LBB174:
 946              	.LBB175:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 947              		.loc 2 352 0
 948 0632 D7F8C830 		ldr	r3, [r7, #200]
 949              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 950 0636 1CBA     		rev r4, r3
 951              	@ 0 "" 2
 952              		.thumb
 953 0638 C7F8C440 		str	r4, [r7, #196]
 954              		.loc 2 353 0
 955 063c D7F8C430 		ldr	r3, [r7, #196]
 956              	.LBE175:
 957              	.LBE174:
 958              		.loc 1 316 0
 959 0640 7B63     		str	r3, [r7, #52]
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 960              		.loc 1 317 0
 961 0642 D7F80031 		ldr	r3, [r7, #256]
 962 0646 03F10403 		add	r3, r3, #4
 963 064a C7F80031 		str	r3, [r7, #256]
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 964              		.loc 1 318 0
 965 064e D7F80031 		ldr	r3, [r7, #256]
 966 0652 1B68     		ldr	r3, [r3, #0]
 967 0654 C7F8C030 		str	r3, [r7, #192]
 968              	.LBB176:
 969              	.LBB177:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 970              		.loc 2 352 0
 971 0658 D7F8C030 		ldr	r3, [r7, #192]
 972              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 973 065c 1CBA     		rev r4, r3
 974              	@ 0 "" 2
 975              		.thumb
 976 065e C7F8BC40 		str	r4, [r7, #188]
 977              		.loc 2 353 0
 978 0662 D7F8BC30 		ldr	r3, [r7, #188]
 979              	.LBE177:
 980              	.LBE176:
 981              		.loc 1 318 0
 982 0666 BB63     		str	r3, [r7, #56]
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 983              		.loc 1 319 0
 984 0668 D7F80031 		ldr	r3, [r7, #256]
 985 066c 03F10403 		add	r3, r3, #4
 986 0670 C7F80031 		str	r3, [r7, #256]
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 987              		.loc 1 320 0
 988 0674 D7F80031 		ldr	r3, [r7, #256]
 989 0678 1B68     		ldr	r3, [r3, #0]
 990 067a C7F8B830 		str	r3, [r7, #184]
 991              	.LBB178:
 992              	.LBB179:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 993              		.loc 2 352 0
 994 067e D7F8B830 		ldr	r3, [r7, #184]
 995              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 996 0682 1CBA     		rev r4, r3
 997              	@ 0 "" 2
 998              		.thumb
 999 0684 C7F8B440 		str	r4, [r7, #180]
 1000              		.loc 2 353 0
 1001 0688 D7F8B430 		ldr	r3, [r7, #180]
 1002              	.LBE179:
 1003              	.LBE178:
 1004              		.loc 1 320 0
 1005 068c FB63     		str	r3, [r7, #60]
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1006              		.loc 1 321 0
 1007 068e D7F80031 		ldr	r3, [r7, #256]
 1008 0692 03F10403 		add	r3, r3, #4
 1009 0696 C7F80031 		str	r3, [r7, #256]
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1010              		.loc 1 322 0
 1011 069a D7F80031 		ldr	r3, [r7, #256]
 1012 069e 1B68     		ldr	r3, [r3, #0]
 1013 06a0 C7F8B030 		str	r3, [r7, #176]
 1014              	.LBB180:
 1015              	.LBB181:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1016              		.loc 2 352 0
 1017 06a4 D7F8B030 		ldr	r3, [r7, #176]
 1018              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1019 06a8 1CBA     		rev r4, r3
 1020              	@ 0 "" 2
 1021              		.thumb
 1022 06aa C7F8AC40 		str	r4, [r7, #172]
 1023              		.loc 2 353 0
 1024 06ae D7F8AC30 		ldr	r3, [r7, #172]
 1025              	.LBE181:
 1026              	.LBE180:
 1027              		.loc 1 322 0
 1028 06b2 3B64     		str	r3, [r7, #64]
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 1029              		.loc 1 323 0
 1030 06b4 8DE0     		b	.L25
 1031              	.L24:
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 256:
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 1032              		.loc 1 325 0
 1033 06b6 4FF40073 		mov	r3, #512
 1034 06ba A7F84A30 		strh	r3, [r7, #74]	@ movhi
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 1035              		.loc 1 326 0
 1036 06be D7F80031 		ldr	r3, [r7, #256]
 1037 06c2 1B68     		ldr	r3, [r3, #0]
 1038 06c4 C7F8A830 		str	r3, [r7, #168]
 1039              	.LBB182:
 1040              	.LBB183:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1041              		.loc 2 352 0
 1042 06c8 D7F8A830 		ldr	r3, [r7, #168]
 1043              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1044 06cc 1CBA     		rev r4, r3
 1045              	@ 0 "" 2
 1046              		.thumb
 1047 06ce C7F8A440 		str	r4, [r7, #164]
 1048              		.loc 2 353 0
 1049 06d2 D7F8A430 		ldr	r3, [r7, #164]
 1050              	.LBE183:
 1051              	.LBE182:
 1052              		.loc 1 326 0
 1053 06d6 7B62     		str	r3, [r7, #36]
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1054              		.loc 1 327 0
 1055 06d8 D7F80031 		ldr	r3, [r7, #256]
 1056 06dc 03F10403 		add	r3, r3, #4
 1057 06e0 C7F80031 		str	r3, [r7, #256]
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 1058              		.loc 1 328 0
 1059 06e4 D7F80031 		ldr	r3, [r7, #256]
 1060 06e8 1B68     		ldr	r3, [r3, #0]
 1061 06ea C7F8A030 		str	r3, [r7, #160]
 1062              	.LBB184:
 1063              	.LBB185:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1064              		.loc 2 352 0
 1065 06ee D7F8A030 		ldr	r3, [r7, #160]
 1066              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1067 06f2 1CBA     		rev r4, r3
 1068              	@ 0 "" 2
 1069              		.thumb
 1070 06f4 C7F89C40 		str	r4, [r7, #156]
 1071              		.loc 2 353 0
 1072 06f8 D7F89C30 		ldr	r3, [r7, #156]
 1073              	.LBE185:
 1074              	.LBE184:
 1075              		.loc 1 328 0
 1076 06fc BB62     		str	r3, [r7, #40]
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1077              		.loc 1 329 0
 1078 06fe D7F80031 		ldr	r3, [r7, #256]
 1079 0702 03F10403 		add	r3, r3, #4
 1080 0706 C7F80031 		str	r3, [r7, #256]
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1081              		.loc 1 330 0
 1082 070a D7F80031 		ldr	r3, [r7, #256]
 1083 070e 1B68     		ldr	r3, [r3, #0]
 1084 0710 C7F89830 		str	r3, [r7, #152]
 1085              	.LBB186:
 1086              	.LBB187:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1087              		.loc 2 352 0
 1088 0714 D7F89830 		ldr	r3, [r7, #152]
 1089              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1090 0718 1CBA     		rev r4, r3
 1091              	@ 0 "" 2
 1092              		.thumb
 1093 071a C7F89440 		str	r4, [r7, #148]
 1094              		.loc 2 353 0
 1095 071e D7F89430 		ldr	r3, [r7, #148]
 1096              	.LBE187:
 1097              	.LBE186:
 1098              		.loc 1 330 0
 1099 0722 FB62     		str	r3, [r7, #44]
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1100              		.loc 1 331 0
 1101 0724 D7F80031 		ldr	r3, [r7, #256]
 1102 0728 03F10403 		add	r3, r3, #4
 1103 072c C7F80031 		str	r3, [r7, #256]
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1104              		.loc 1 332 0
 1105 0730 D7F80031 		ldr	r3, [r7, #256]
 1106 0734 1B68     		ldr	r3, [r3, #0]
 1107 0736 C7F89030 		str	r3, [r7, #144]
 1108              	.LBB188:
 1109              	.LBB189:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1110              		.loc 2 352 0
 1111 073a D7F89030 		ldr	r3, [r7, #144]
 1112              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1113 073e 1CBA     		rev r4, r3
 1114              	@ 0 "" 2
 1115              		.thumb
 1116 0740 C7F88C40 		str	r4, [r7, #140]
 1117              		.loc 2 353 0
 1118 0744 D7F88C30 		ldr	r3, [r7, #140]
 1119              	.LBE189:
 1120              	.LBE188:
 1121              		.loc 1 332 0
 1122 0748 3B63     		str	r3, [r7, #48]
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1123              		.loc 1 333 0
 1124 074a D7F80031 		ldr	r3, [r7, #256]
 1125 074e 03F10403 		add	r3, r3, #4
 1126 0752 C7F80031 		str	r3, [r7, #256]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1127              		.loc 1 334 0
 1128 0756 D7F80031 		ldr	r3, [r7, #256]
 1129 075a 1B68     		ldr	r3, [r3, #0]
 1130 075c C7F88830 		str	r3, [r7, #136]
 1131              	.LBB190:
 1132              	.LBB191:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1133              		.loc 2 352 0
 1134 0760 D7F88830 		ldr	r3, [r7, #136]
 1135              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1136 0764 1CBA     		rev r4, r3
 1137              	@ 0 "" 2
 1138              		.thumb
 1139 0766 C7F88440 		str	r4, [r7, #132]
 1140              		.loc 2 353 0
 1141 076a D7F88430 		ldr	r3, [r7, #132]
 1142              	.LBE191:
 1143              	.LBE190:
 1144              		.loc 1 334 0
 1145 076e 7B63     		str	r3, [r7, #52]
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1146              		.loc 1 335 0
 1147 0770 D7F80031 		ldr	r3, [r7, #256]
 1148 0774 03F10403 		add	r3, r3, #4
 1149 0778 C7F80031 		str	r3, [r7, #256]
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1150              		.loc 1 336 0
 1151 077c D7F80031 		ldr	r3, [r7, #256]
 1152 0780 1B68     		ldr	r3, [r3, #0]
 1153 0782 C7F88030 		str	r3, [r7, #128]
 1154              	.LBB192:
 1155              	.LBB193:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1156              		.loc 2 352 0
 1157 0786 D7F88030 		ldr	r3, [r7, #128]
 1158              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1159 078a 1CBA     		rev r4, r3
 1160              	@ 0 "" 2
 1161              		.thumb
 1162 078c FC67     		str	r4, [r7, #124]
 1163              		.loc 2 353 0
 1164 078e FB6F     		ldr	r3, [r7, #124]
 1165              	.LBE193:
 1166              	.LBE192:
 1167              		.loc 1 336 0
 1168 0790 BB63     		str	r3, [r7, #56]
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1169              		.loc 1 337 0
 1170 0792 D7F80031 		ldr	r3, [r7, #256]
 1171 0796 03F10403 		add	r3, r3, #4
 1172 079a C7F80031 		str	r3, [r7, #256]
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1173              		.loc 1 338 0
 1174 079e D7F80031 		ldr	r3, [r7, #256]
 1175 07a2 1B68     		ldr	r3, [r3, #0]
 1176 07a4 BB67     		str	r3, [r7, #120]
 1177              	.LBB194:
 1178              	.LBB195:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1179              		.loc 2 352 0
 1180 07a6 BB6F     		ldr	r3, [r7, #120]
 1181              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1182 07a8 1CBA     		rev r4, r3
 1183              	@ 0 "" 2
 1184              		.thumb
 1185 07aa 7C67     		str	r4, [r7, #116]
 1186              		.loc 2 353 0
 1187 07ac 7B6F     		ldr	r3, [r7, #116]
 1188              	.LBE195:
 1189              	.LBE194:
 1190              		.loc 1 338 0
 1191 07ae FB63     		str	r3, [r7, #60]
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1192              		.loc 1 339 0
 1193 07b0 D7F80031 		ldr	r3, [r7, #256]
 1194 07b4 03F10403 		add	r3, r3, #4
 1195 07b8 C7F80031 		str	r3, [r7, #256]
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1196              		.loc 1 340 0
 1197 07bc D7F80031 		ldr	r3, [r7, #256]
 1198 07c0 1B68     		ldr	r3, [r3, #0]
 1199 07c2 3B67     		str	r3, [r7, #112]
 1200              	.LBB196:
 1201              	.LBB197:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1202              		.loc 2 352 0
 1203 07c4 3B6F     		ldr	r3, [r7, #112]
 1204              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1205 07c6 1CBA     		rev r4, r3
 1206              	@ 0 "" 2
 1207              		.thumb
 1208 07c8 FC66     		str	r4, [r7, #108]
 1209              		.loc 2 353 0
 1210 07ca FB6E     		ldr	r3, [r7, #108]
 1211              	.LBE197:
 1212              	.LBE196:
 1213              		.loc 1 340 0
 1214 07cc 3B64     		str	r3, [r7, #64]
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 1215              		.loc 1 341 0
 1216 07ce 00E0     		b	.L25
 1217              	.L38:
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     default:
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 1218              		.loc 1 343 0
 1219 07d0 00BF     		nop
 1220              	.L25:
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 1221              		.loc 1 347 0
 1222 07d2 D7F8FC30 		ldr	r3, [r7, #252]
 1223 07d6 1B68     		ldr	r3, [r3, #0]
 1224 07d8 BB66     		str	r3, [r7, #104]
 1225              	.LBB198:
 1226              	.LBB199:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1227              		.loc 2 352 0
 1228 07da BB6E     		ldr	r3, [r7, #104]
 1229              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1230 07dc 1CBA     		rev r4, r3
 1231              	@ 0 "" 2
 1232              		.thumb
 1233 07de 7C66     		str	r4, [r7, #100]
 1234              		.loc 2 353 0
 1235 07e0 7B6E     		ldr	r3, [r7, #100]
 1236              		.loc 1 347 0
 1237 07e2 1A46     		mov	r2, r3
 1238              	.LBE199:
 1239              	.LBE198:
 1240 07e4 07F11403 		add	r3, r7, #20
 1241 07e8 1A60     		str	r2, [r3, #0]
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 1242              		.loc 1 348 0
 1243 07ea D7F8FC30 		ldr	r3, [r7, #252]
 1244 07ee 03F10403 		add	r3, r3, #4
 1245 07f2 C7F8FC30 		str	r3, [r7, #252]
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 1246              		.loc 1 349 0
 1247 07f6 D7F8FC30 		ldr	r3, [r7, #252]
 1248 07fa 1B68     		ldr	r3, [r3, #0]
 1249 07fc 3B66     		str	r3, [r7, #96]
 1250              	.LBB200:
 1251              	.LBB201:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1252              		.loc 2 352 0
 1253 07fe 3B6E     		ldr	r3, [r7, #96]
 1254              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1255 0800 1CBA     		rev r4, r3
 1256              	@ 0 "" 2
 1257              		.thumb
 1258 0802 FC65     		str	r4, [r7, #92]
 1259              		.loc 2 353 0
 1260 0804 FB6D     		ldr	r3, [r7, #92]
 1261              		.loc 1 349 0
 1262 0806 1A46     		mov	r2, r3
 1263              	.LBE201:
 1264              	.LBE200:
 1265 0808 07F11403 		add	r3, r7, #20
 1266 080c 5A60     		str	r2, [r3, #4]
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 1267              		.loc 1 350 0
 1268 080e D7F8FC30 		ldr	r3, [r7, #252]
 1269 0812 03F10403 		add	r3, r3, #4
 1270 0816 C7F8FC30 		str	r3, [r7, #252]
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 1271              		.loc 1 351 0
 1272 081a D7F8FC30 		ldr	r3, [r7, #252]
 1273 081e 1B68     		ldr	r3, [r3, #0]
 1274 0820 BB65     		str	r3, [r7, #88]
 1275              	.LBB202:
 1276              	.LBB203:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1277              		.loc 2 352 0
 1278 0822 BB6D     		ldr	r3, [r7, #88]
 1279              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1280 0824 1CBA     		rev r4, r3
 1281              	@ 0 "" 2
 1282              		.thumb
 1283 0826 7C65     		str	r4, [r7, #84]
 1284              		.loc 2 353 0
 1285 0828 7B6D     		ldr	r3, [r7, #84]
 1286              		.loc 1 351 0
 1287 082a 1A46     		mov	r2, r3
 1288              	.LBE203:
 1289              	.LBE202:
 1290 082c 07F11403 		add	r3, r7, #20
 1291 0830 9A60     		str	r2, [r3, #8]
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 1292              		.loc 1 352 0
 1293 0832 D7F8FC30 		ldr	r3, [r7, #252]
 1294 0836 03F10403 		add	r3, r3, #4
 1295 083a C7F8FC30 		str	r3, [r7, #252]
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 1296              		.loc 1 353 0
 1297 083e D7F8FC30 		ldr	r3, [r7, #252]
 1298 0842 1B68     		ldr	r3, [r3, #0]
 1299 0844 3B65     		str	r3, [r7, #80]
 1300              	.LBB204:
 1301              	.LBB205:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1302              		.loc 2 352 0
 1303 0846 3B6D     		ldr	r3, [r7, #80]
 1304              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1305 0848 1CBA     		rev r4, r3
 1306              	@ 0 "" 2
 1307              		.thumb
 1308 084a FC64     		str	r4, [r7, #76]
 1309              		.loc 2 353 0
 1310 084c FB6C     		ldr	r3, [r7, #76]
 1311              		.loc 1 353 0
 1312 084e 1A46     		mov	r2, r3
 1313              	.LBE205:
 1314              	.LBE204:
 1315 0850 07F11403 		add	r3, r7, #20
 1316 0854 DA60     		str	r2, [r3, #12]
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 1317              		.loc 1 357 0
 1318 0856 07F11003 		add	r3, r7, #16
 1319 085a 03F1FF33 		add	r3, r3, #-1
 1320 085e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1321 0860 002B     		cmp	r3, #0
 1322 0862 42D1     		bne	.L26
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 1323              		.loc 1 360 0
 1324 0864 FFF7FEFF 		bl	CRYP_FIFOFlush
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 1325              		.loc 1 363 0
 1326 0868 4FF00403 		mov	r3, #4
 1327 086c A7F84430 		strh	r3, [r7, #68]	@ movhi
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 1328              		.loc 1 364 0
 1329 0870 4FF03803 		mov	r3, #56
 1330 0874 A7F84630 		strh	r3, [r7, #70]	@ movhi
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 1331              		.loc 1 365 0
 1332 0878 4FF00003 		mov	r3, #0
 1333 087c A7F84830 		strh	r3, [r7, #72]	@ movhi
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 1334              		.loc 1 367 0
 1335 0880 07F14403 		add	r3, r7, #68
 1336 0884 1846     		mov	r0, r3
 1337 0886 FFF7FEFF 		bl	CRYP_Init
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 1338              		.loc 1 370 0
 1339 088a 07F12403 		add	r3, r7, #36
 1340 088e 1846     		mov	r0, r3
 1341 0890 FFF7FEFF 		bl	CRYP_KeyInit
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 1342              		.loc 1 373 0
 1343 0894 4FF00100 		mov	r0, #1
 1344 0898 FFF7FEFF 		bl	CRYP_Cmd
 1345              	.L28:
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* wait until the Busy flag is RESET */
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     do
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 1346              		.loc 1 378 0 discriminator 1
 1347 089c 4FF01000 		mov	r0, #16
 1348 08a0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 1349 08a4 0346     		mov	r3, r0
 1350 08a6 C7F80431 		str	r3, [r7, #260]
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       counter++;
 1351              		.loc 1 379 0 discriminator 1
 1352 08aa 07F11003 		add	r3, r7, #16
 1353 08ae 1B68     		ldr	r3, [r3, #0]
 1354 08b0 03F10102 		add	r2, r3, #1
 1355 08b4 07F11003 		add	r3, r7, #16
 1356 08b8 1A60     		str	r2, [r3, #0]
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 1357              		.loc 1 380 0 discriminator 1
 1358 08ba 07F11003 		add	r3, r7, #16
 1359 08be 1B68     		ldr	r3, [r3, #0]
 1360 08c0 B3F5803F 		cmp	r3, #65536
 1361 08c4 03D0     		beq	.L27
 1362 08c6 D7F80431 		ldr	r3, [r7, #260]
 1363 08ca 002B     		cmp	r3, #0
 1364 08cc E6D1     		bne	.L28
 1365              	.L27:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 1366              		.loc 1 382 0
 1367 08ce D7F80431 		ldr	r3, [r7, #260]
 1368 08d2 002B     		cmp	r3, #0
 1369 08d4 04D0     		beq	.L29
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****    {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 1370              		.loc 1 384 0
 1371 08d6 4FF00003 		mov	r3, #0
 1372 08da 87F81731 		strb	r3, [r7, #279]
 1373 08de 0DE0     		b	.L30
 1374              	.L29:
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     else
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       /* Crypto Init for decryption process */  
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 1375              		.loc 1 389 0
 1376 08e0 4FF00403 		mov	r3, #4
 1377 08e4 A7F84430 		strh	r3, [r7, #68]	@ movhi
 1378 08e8 08E0     		b	.L30
 1379              	.L26:
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 1380              		.loc 1 395 0
 1381 08ea 07F12403 		add	r3, r7, #36
 1382 08ee 1846     		mov	r0, r3
 1383 08f0 FFF7FEFF 		bl	CRYP_KeyInit
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 1384              		.loc 1 398 0
 1385 08f4 4FF00003 		mov	r3, #0
 1386 08f8 A7F84430 		strh	r3, [r7, #68]	@ movhi
 1387              	.L30:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 1388              		.loc 1 400 0
 1389 08fc 4FF02803 		mov	r3, #40
 1390 0900 A7F84630 		strh	r3, [r7, #70]	@ movhi
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 1391              		.loc 1 401 0
 1392 0904 4FF08003 		mov	r3, #128
 1393 0908 A7F84830 		strh	r3, [r7, #72]	@ movhi
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 1394              		.loc 1 402 0
 1395 090c 07F14403 		add	r3, r7, #68
 1396 0910 1846     		mov	r0, r3
 1397 0912 FFF7FEFF 		bl	CRYP_Init
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInit(&AES_CRYP_IVInitStructure);
 1398              		.loc 1 405 0
 1399 0916 07F11403 		add	r3, r7, #20
 1400 091a 1846     		mov	r0, r3
 1401 091c FFF7FEFF 		bl	CRYP_IVInit
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 1402              		.loc 1 408 0
 1403 0920 FFF7FEFF 		bl	CRYP_FIFOFlush
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 1404              		.loc 1 411 0
 1405 0924 4FF00100 		mov	r0, #1
 1406 0928 FFF7FEFF 		bl	CRYP_Cmd
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 1407              		.loc 1 414 0
 1408 092c 4FF00003 		mov	r3, #0
 1409 0930 C7F80831 		str	r3, [r7, #264]
 1410 0934 8CE0     		b	.L31
 1411              	.L37:
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1412              		.loc 1 418 0
 1413 0936 D7F81031 		ldr	r3, [r7, #272]
 1414 093a 1B68     		ldr	r3, [r3, #0]
 1415 093c 1846     		mov	r0, r3
 1416 093e FFF7FEFF 		bl	CRYP_DataIn
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1417              		.loc 1 419 0
 1418 0942 D7F81031 		ldr	r3, [r7, #272]
 1419 0946 03F10403 		add	r3, r3, #4
 1420 094a C7F81031 		str	r3, [r7, #272]
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1421              		.loc 1 420 0
 1422 094e D7F81031 		ldr	r3, [r7, #272]
 1423 0952 1B68     		ldr	r3, [r3, #0]
 1424 0954 1846     		mov	r0, r3
 1425 0956 FFF7FEFF 		bl	CRYP_DataIn
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1426              		.loc 1 421 0
 1427 095a D7F81031 		ldr	r3, [r7, #272]
 1428 095e 03F10403 		add	r3, r3, #4
 1429 0962 C7F81031 		str	r3, [r7, #272]
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1430              		.loc 1 422 0
 1431 0966 D7F81031 		ldr	r3, [r7, #272]
 1432 096a 1B68     		ldr	r3, [r3, #0]
 1433 096c 1846     		mov	r0, r3
 1434 096e FFF7FEFF 		bl	CRYP_DataIn
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1435              		.loc 1 423 0
 1436 0972 D7F81031 		ldr	r3, [r7, #272]
 1437 0976 03F10403 		add	r3, r3, #4
 1438 097a C7F81031 		str	r3, [r7, #272]
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1439              		.loc 1 424 0
 1440 097e D7F81031 		ldr	r3, [r7, #272]
 1441 0982 1B68     		ldr	r3, [r3, #0]
 1442 0984 1846     		mov	r0, r3
 1443 0986 FFF7FEFF 		bl	CRYP_DataIn
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1444              		.loc 1 425 0
 1445 098a D7F81031 		ldr	r3, [r7, #272]
 1446 098e 03F10403 		add	r3, r3, #4
 1447 0992 C7F81031 		str	r3, [r7, #272]
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 1448              		.loc 1 427 0
 1449 0996 07F11003 		add	r3, r7, #16
 1450 099a 4FF00002 		mov	r2, #0
 1451 099e 1A60     		str	r2, [r3, #0]
 1452              	.L33:
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     do
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 1453              		.loc 1 430 0 discriminator 1
 1454 09a0 4FF01000 		mov	r0, #16
 1455 09a4 FFF7FEFF 		bl	CRYP_GetFlagStatus
 1456 09a8 0346     		mov	r3, r0
 1457 09aa C7F80431 		str	r3, [r7, #260]
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       counter++;
 1458              		.loc 1 431 0 discriminator 1
 1459 09ae 07F11003 		add	r3, r7, #16
 1460 09b2 1B68     		ldr	r3, [r3, #0]
 1461 09b4 03F10102 		add	r2, r3, #1
 1462 09b8 07F11003 		add	r3, r7, #16
 1463 09bc 1A60     		str	r2, [r3, #0]
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 1464              		.loc 1 432 0 discriminator 1
 1465 09be 07F11003 		add	r3, r7, #16
 1466 09c2 1B68     		ldr	r3, [r3, #0]
 1467 09c4 B3F5803F 		cmp	r3, #65536
 1468 09c8 03D0     		beq	.L32
 1469 09ca D7F80431 		ldr	r3, [r7, #260]
 1470 09ce 002B     		cmp	r3, #0
 1471 09d0 E6D1     		bne	.L33
 1472              	.L32:
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 1473              		.loc 1 434 0
 1474 09d2 D7F80431 		ldr	r3, [r7, #260]
 1475 09d6 002B     		cmp	r3, #0
 1476 09d8 04D0     		beq	.L34
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****    {
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 1477              		.loc 1 436 0
 1478 09da 4FF00003 		mov	r3, #0
 1479 09de 87F81731 		strb	r3, [r7, #279]
 1480 09e2 2FE0     		b	.L35
 1481              	.L34:
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     else
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1482              		.loc 1 442 0
 1483 09e4 D7F80C41 		ldr	r4, [r7, #268]
 1484 09e8 FFF7FEFF 		bl	CRYP_DataOut
 1485 09ec 0346     		mov	r3, r0
 1486 09ee 2360     		str	r3, [r4, #0]
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1487              		.loc 1 443 0
 1488 09f0 D7F80C31 		ldr	r3, [r7, #268]
 1489 09f4 03F10403 		add	r3, r3, #4
 1490 09f8 C7F80C31 		str	r3, [r7, #268]
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1491              		.loc 1 444 0
 1492 09fc D7F80C41 		ldr	r4, [r7, #268]
 1493 0a00 FFF7FEFF 		bl	CRYP_DataOut
 1494 0a04 0346     		mov	r3, r0
 1495 0a06 2360     		str	r3, [r4, #0]
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1496              		.loc 1 445 0
 1497 0a08 D7F80C31 		ldr	r3, [r7, #268]
 1498 0a0c 03F10403 		add	r3, r3, #4
 1499 0a10 C7F80C31 		str	r3, [r7, #268]
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1500              		.loc 1 446 0
 1501 0a14 D7F80C41 		ldr	r4, [r7, #268]
 1502 0a18 FFF7FEFF 		bl	CRYP_DataOut
 1503 0a1c 0346     		mov	r3, r0
 1504 0a1e 2360     		str	r3, [r4, #0]
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1505              		.loc 1 447 0
 1506 0a20 D7F80C31 		ldr	r3, [r7, #268]
 1507 0a24 03F10403 		add	r3, r3, #4
 1508 0a28 C7F80C31 		str	r3, [r7, #268]
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1509              		.loc 1 448 0
 1510 0a2c D7F80C41 		ldr	r4, [r7, #268]
 1511 0a30 FFF7FEFF 		bl	CRYP_DataOut
 1512 0a34 0346     		mov	r3, r0
 1513 0a36 2360     		str	r3, [r4, #0]
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1514              		.loc 1 449 0
 1515 0a38 D7F80C31 		ldr	r3, [r7, #268]
 1516 0a3c 03F10403 		add	r3, r3, #4
 1517 0a40 C7F80C31 		str	r3, [r7, #268]
 1518              	.L35:
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 1519              		.loc 1 414 0
 1520 0a44 D7F80831 		ldr	r3, [r7, #264]
 1521 0a48 03F11003 		add	r3, r3, #16
 1522 0a4c C7F80831 		str	r3, [r7, #264]
 1523              	.L31:
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 1524              		.loc 1 414 0 is_stmt 0 discriminator 1
 1525 0a50 D7F80821 		ldr	r2, [r7, #264]
 1526 0a54 D7F82C31 		ldr	r3, [r7, #300]
 1527 0a58 9A42     		cmp	r2, r3
 1528 0a5a 04D2     		bcs	.L36
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 1529              		.loc 1 414 0 discriminator 2
 1530 0a5c 97F81731 		ldrb	r3, [r7, #279]	@ zero_extendqisi2
 1531 0a60 002B     		cmp	r3, #0
 1532 0a62 7FF468AF 		bne	.L37
 1533              	.L36:
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 1534              		.loc 1 454 0 is_stmt 1
 1535 0a66 4FF00000 		mov	r0, #0
 1536 0a6a FFF7FEFF 		bl	CRYP_Cmd
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   return status;
 1537              		.loc 1 456 0
 1538 0a6e 97F81731 		ldrb	r3, [r7, #279]	@ zero_extendqisi2
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** }
 1539              		.loc 1 457 0
 1540 0a72 1846     		mov	r0, r3
 1541 0a74 07F58E77 		add	r7, r7, #284
 1542 0a78 BD46     		mov	sp, r7
 1543 0a7a 90BD     		pop	{r4, r7, pc}
 1544              		.cfi_endproc
 1545              	.LFE111:
 1547              		.align	2
 1548              		.global	CRYP_AES_CTR
 1549              		.thumb
 1550              		.thumb_func
 1552              	CRYP_AES_CTR:
 1553              	.LFB112:
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** /**
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CTR Mode
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *           This parameter can be one of the following values:
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****                          uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output)
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** {
 1554              		.loc 1 478 0
 1555              		.cfi_startproc
 1556              		@ args = 12, pretend = 0, frame = 280
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558 0a7c 90B5     		push	{r4, r7, lr}
 1559              	.LCFI6:
 1560              		.cfi_def_cfa_offset 12
 1561              		.cfi_offset 14, -4
 1562              		.cfi_offset 7, -8
 1563              		.cfi_offset 4, -12
 1564 0a7e C7B0     		sub	sp, sp, #284
 1565              	.LCFI7:
 1566              		.cfi_def_cfa_offset 296
 1567 0a80 00AF     		add	r7, sp, #0
 1568              	.LCFI8:
 1569              		.cfi_def_cfa_register 7
 1570 0a82 07F10804 		add	r4, r7, #8
 1571 0a86 2160     		str	r1, [r4, #0]
 1572 0a88 07F10401 		add	r1, r7, #4
 1573 0a8c 0A60     		str	r2, [r1, #0]
 1574 0a8e 1A46     		mov	r2, r3
 1575 0a90 07F11003 		add	r3, r7, #16
 1576 0a94 03F1FF33 		add	r3, r3, #-1
 1577 0a98 0146     		mov	r1, r0
 1578 0a9a 1970     		strb	r1, [r3, #0]
 1579 0a9c 07F10C03 		add	r3, r7, #12
 1580 0aa0 1A80     		strh	r2, [r3, #0]	@ movhi
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 1581              		.loc 1 482 0
 1582 0aa2 07F11003 		add	r3, r7, #16
 1583 0aa6 4FF00002 		mov	r2, #0
 1584 0aaa 1A60     		str	r2, [r3, #0]
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 1585              		.loc 1 483 0
 1586 0aac 4FF00003 		mov	r3, #0
 1587 0ab0 C7F80431 		str	r3, [r7, #260]
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 1588              		.loc 1 484 0
 1589 0ab4 4FF00103 		mov	r3, #1
 1590 0ab8 87F81731 		strb	r3, [r7, #279]
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 1591              		.loc 1 485 0
 1592 0abc 07F10403 		add	r3, r7, #4
 1593 0ac0 1B68     		ldr	r3, [r3, #0]
 1594 0ac2 C7F80031 		str	r3, [r7, #256]
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 1595              		.loc 1 486 0
 1596 0ac6 D7F82831 		ldr	r3, [r7, #296]
 1597 0aca C7F81031 		str	r3, [r7, #272]
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 1598              		.loc 1 487 0
 1599 0ace D7F83031 		ldr	r3, [r7, #304]
 1600 0ad2 C7F80C31 		str	r3, [r7, #268]
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 1601              		.loc 1 488 0
 1602 0ad6 07F10803 		add	r3, r7, #8
 1603 0ada 1B68     		ldr	r3, [r3, #0]
 1604 0adc C7F8FC30 		str	r3, [r7, #252]
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 1605              		.loc 1 489 0
 1606 0ae0 4FF00003 		mov	r3, #0
 1607 0ae4 C7F80831 		str	r3, [r7, #264]
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 1608              		.loc 1 492 0
 1609 0ae8 07F12403 		add	r3, r7, #36
 1610 0aec 1846     		mov	r0, r3
 1611 0aee FFF7FEFF 		bl	CRYP_KeyStructInit
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 1612              		.loc 1 494 0
 1613 0af2 07F10C03 		add	r3, r7, #12
 1614 0af6 1B88     		ldrh	r3, [r3, #0]
 1615 0af8 C02B     		cmp	r3, #192
 1616 0afa 51D0     		beq	.L42
 1617 0afc B3F5807F 		cmp	r3, #256
 1618 0b00 00F0BF80 		beq	.L43
 1619 0b04 802B     		cmp	r3, #128
 1620 0b06 40F04981 		bne	.L54
 1621              	.L41:
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 128:
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 1622              		.loc 1 497 0
 1623 0b0a 4FF00003 		mov	r3, #0
 1624 0b0e A7F84A30 		strh	r3, [r7, #74]	@ movhi
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1625              		.loc 1 498 0
 1626 0b12 D7F80031 		ldr	r3, [r7, #256]
 1627 0b16 1B68     		ldr	r3, [r3, #0]
 1628 0b18 C7F8F830 		str	r3, [r7, #248]
 1629              	.LBB206:
 1630              	.LBB207:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1631              		.loc 2 352 0
 1632 0b1c D7F8F830 		ldr	r3, [r7, #248]
 1633              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1634 0b20 1CBA     		rev r4, r3
 1635              	@ 0 "" 2
 1636              		.thumb
 1637 0b22 C7F8F440 		str	r4, [r7, #244]
 1638              		.loc 2 353 0
 1639 0b26 D7F8F430 		ldr	r3, [r7, #244]
 1640              	.LBE207:
 1641              	.LBE206:
 1642              		.loc 1 498 0
 1643 0b2a 7B63     		str	r3, [r7, #52]
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1644              		.loc 1 499 0
 1645 0b2c D7F80031 		ldr	r3, [r7, #256]
 1646 0b30 03F10403 		add	r3, r3, #4
 1647 0b34 C7F80031 		str	r3, [r7, #256]
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1648              		.loc 1 500 0
 1649 0b38 D7F80031 		ldr	r3, [r7, #256]
 1650 0b3c 1B68     		ldr	r3, [r3, #0]
 1651 0b3e C7F8F030 		str	r3, [r7, #240]
 1652              	.LBB208:
 1653              	.LBB209:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1654              		.loc 2 352 0
 1655 0b42 D7F8F030 		ldr	r3, [r7, #240]
 1656              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1657 0b46 1CBA     		rev r4, r3
 1658              	@ 0 "" 2
 1659              		.thumb
 1660 0b48 C7F8EC40 		str	r4, [r7, #236]
 1661              		.loc 2 353 0
 1662 0b4c D7F8EC30 		ldr	r3, [r7, #236]
 1663              	.LBE209:
 1664              	.LBE208:
 1665              		.loc 1 500 0
 1666 0b50 BB63     		str	r3, [r7, #56]
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1667              		.loc 1 501 0
 1668 0b52 D7F80031 		ldr	r3, [r7, #256]
 1669 0b56 03F10403 		add	r3, r3, #4
 1670 0b5a C7F80031 		str	r3, [r7, #256]
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1671              		.loc 1 502 0
 1672 0b5e D7F80031 		ldr	r3, [r7, #256]
 1673 0b62 1B68     		ldr	r3, [r3, #0]
 1674 0b64 C7F8E830 		str	r3, [r7, #232]
 1675              	.LBB210:
 1676              	.LBB211:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1677              		.loc 2 352 0
 1678 0b68 D7F8E830 		ldr	r3, [r7, #232]
 1679              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1680 0b6c 1CBA     		rev r4, r3
 1681              	@ 0 "" 2
 1682              		.thumb
 1683 0b6e C7F8E440 		str	r4, [r7, #228]
 1684              		.loc 2 353 0
 1685 0b72 D7F8E430 		ldr	r3, [r7, #228]
 1686              	.LBE211:
 1687              	.LBE210:
 1688              		.loc 1 502 0
 1689 0b76 FB63     		str	r3, [r7, #60]
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1690              		.loc 1 503 0
 1691 0b78 D7F80031 		ldr	r3, [r7, #256]
 1692 0b7c 03F10403 		add	r3, r3, #4
 1693 0b80 C7F80031 		str	r3, [r7, #256]
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1694              		.loc 1 504 0
 1695 0b84 D7F80031 		ldr	r3, [r7, #256]
 1696 0b88 1B68     		ldr	r3, [r3, #0]
 1697 0b8a C7F8E030 		str	r3, [r7, #224]
 1698              	.LBB212:
 1699              	.LBB213:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1700              		.loc 2 352 0
 1701 0b8e D7F8E030 		ldr	r3, [r7, #224]
 1702              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1703 0b92 1CBA     		rev r4, r3
 1704              	@ 0 "" 2
 1705              		.thumb
 1706 0b94 C7F8DC40 		str	r4, [r7, #220]
 1707              		.loc 2 353 0
 1708 0b98 D7F8DC30 		ldr	r3, [r7, #220]
 1709              	.LBE213:
 1710              	.LBE212:
 1711              		.loc 1 504 0
 1712 0b9c 3B64     		str	r3, [r7, #64]
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 1713              		.loc 1 505 0
 1714 0b9e FEE0     		b	.L44
 1715              	.L42:
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 192:
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 1716              		.loc 1 507 0
 1717 0ba0 4FF48073 		mov	r3, #256
 1718 0ba4 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1719              		.loc 1 508 0
 1720 0ba8 D7F80031 		ldr	r3, [r7, #256]
 1721 0bac 1B68     		ldr	r3, [r3, #0]
 1722 0bae C7F8D830 		str	r3, [r7, #216]
 1723              	.LBB214:
 1724              	.LBB215:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1725              		.loc 2 352 0
 1726 0bb2 D7F8D830 		ldr	r3, [r7, #216]
 1727              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1728 0bb6 1CBA     		rev r4, r3
 1729              	@ 0 "" 2
 1730              		.thumb
 1731 0bb8 C7F8D440 		str	r4, [r7, #212]
 1732              		.loc 2 353 0
 1733 0bbc D7F8D430 		ldr	r3, [r7, #212]
 1734              	.LBE215:
 1735              	.LBE214:
 1736              		.loc 1 508 0
 1737 0bc0 FB62     		str	r3, [r7, #44]
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1738              		.loc 1 509 0
 1739 0bc2 D7F80031 		ldr	r3, [r7, #256]
 1740 0bc6 03F10403 		add	r3, r3, #4
 1741 0bca C7F80031 		str	r3, [r7, #256]
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1742              		.loc 1 510 0
 1743 0bce D7F80031 		ldr	r3, [r7, #256]
 1744 0bd2 1B68     		ldr	r3, [r3, #0]
 1745 0bd4 C7F8D030 		str	r3, [r7, #208]
 1746              	.LBB216:
 1747              	.LBB217:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1748              		.loc 2 352 0
 1749 0bd8 D7F8D030 		ldr	r3, [r7, #208]
 1750              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1751 0bdc 1CBA     		rev r4, r3
 1752              	@ 0 "" 2
 1753              		.thumb
 1754 0bde C7F8CC40 		str	r4, [r7, #204]
 1755              		.loc 2 353 0
 1756 0be2 D7F8CC30 		ldr	r3, [r7, #204]
 1757              	.LBE217:
 1758              	.LBE216:
 1759              		.loc 1 510 0
 1760 0be6 3B63     		str	r3, [r7, #48]
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1761              		.loc 1 511 0
 1762 0be8 D7F80031 		ldr	r3, [r7, #256]
 1763 0bec 03F10403 		add	r3, r3, #4
 1764 0bf0 C7F80031 		str	r3, [r7, #256]
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1765              		.loc 1 512 0
 1766 0bf4 D7F80031 		ldr	r3, [r7, #256]
 1767 0bf8 1B68     		ldr	r3, [r3, #0]
 1768 0bfa C7F8C830 		str	r3, [r7, #200]
 1769              	.LBB218:
 1770              	.LBB219:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1771              		.loc 2 352 0
 1772 0bfe D7F8C830 		ldr	r3, [r7, #200]
 1773              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1774 0c02 1CBA     		rev r4, r3
 1775              	@ 0 "" 2
 1776              		.thumb
 1777 0c04 C7F8C440 		str	r4, [r7, #196]
 1778              		.loc 2 353 0
 1779 0c08 D7F8C430 		ldr	r3, [r7, #196]
 1780              	.LBE219:
 1781              	.LBE218:
 1782              		.loc 1 512 0
 1783 0c0c 7B63     		str	r3, [r7, #52]
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1784              		.loc 1 513 0
 1785 0c0e D7F80031 		ldr	r3, [r7, #256]
 1786 0c12 03F10403 		add	r3, r3, #4
 1787 0c16 C7F80031 		str	r3, [r7, #256]
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1788              		.loc 1 514 0
 1789 0c1a D7F80031 		ldr	r3, [r7, #256]
 1790 0c1e 1B68     		ldr	r3, [r3, #0]
 1791 0c20 C7F8C030 		str	r3, [r7, #192]
 1792              	.LBB220:
 1793              	.LBB221:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1794              		.loc 2 352 0
 1795 0c24 D7F8C030 		ldr	r3, [r7, #192]
 1796              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1797 0c28 1CBA     		rev r4, r3
 1798              	@ 0 "" 2
 1799              		.thumb
 1800 0c2a C7F8BC40 		str	r4, [r7, #188]
 1801              		.loc 2 353 0
 1802 0c2e D7F8BC30 		ldr	r3, [r7, #188]
 1803              	.LBE221:
 1804              	.LBE220:
 1805              		.loc 1 514 0
 1806 0c32 BB63     		str	r3, [r7, #56]
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1807              		.loc 1 515 0
 1808 0c34 D7F80031 		ldr	r3, [r7, #256]
 1809 0c38 03F10403 		add	r3, r3, #4
 1810 0c3c C7F80031 		str	r3, [r7, #256]
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1811              		.loc 1 516 0
 1812 0c40 D7F80031 		ldr	r3, [r7, #256]
 1813 0c44 1B68     		ldr	r3, [r3, #0]
 1814 0c46 C7F8B830 		str	r3, [r7, #184]
 1815              	.LBB222:
 1816              	.LBB223:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1817              		.loc 2 352 0
 1818 0c4a D7F8B830 		ldr	r3, [r7, #184]
 1819              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1820 0c4e 1CBA     		rev r4, r3
 1821              	@ 0 "" 2
 1822              		.thumb
 1823 0c50 C7F8B440 		str	r4, [r7, #180]
 1824              		.loc 2 353 0
 1825 0c54 D7F8B430 		ldr	r3, [r7, #180]
 1826              	.LBE223:
 1827              	.LBE222:
 1828              		.loc 1 516 0
 1829 0c58 FB63     		str	r3, [r7, #60]
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1830              		.loc 1 517 0
 1831 0c5a D7F80031 		ldr	r3, [r7, #256]
 1832 0c5e 03F10403 		add	r3, r3, #4
 1833 0c62 C7F80031 		str	r3, [r7, #256]
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1834              		.loc 1 518 0
 1835 0c66 D7F80031 		ldr	r3, [r7, #256]
 1836 0c6a 1B68     		ldr	r3, [r3, #0]
 1837 0c6c C7F8B030 		str	r3, [r7, #176]
 1838              	.LBB224:
 1839              	.LBB225:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1840              		.loc 2 352 0
 1841 0c70 D7F8B030 		ldr	r3, [r7, #176]
 1842              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1843 0c74 1CBA     		rev r4, r3
 1844              	@ 0 "" 2
 1845              		.thumb
 1846 0c76 C7F8AC40 		str	r4, [r7, #172]
 1847              		.loc 2 353 0
 1848 0c7a D7F8AC30 		ldr	r3, [r7, #172]
 1849              	.LBE225:
 1850              	.LBE224:
 1851              		.loc 1 518 0
 1852 0c7e 3B64     		str	r3, [r7, #64]
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 1853              		.loc 1 519 0
 1854 0c80 8DE0     		b	.L44
 1855              	.L43:
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     case 256:
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 1856              		.loc 1 521 0
 1857 0c82 4FF40073 		mov	r3, #512
 1858 0c86 A7F84A30 		strh	r3, [r7, #74]	@ movhi
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 1859              		.loc 1 522 0
 1860 0c8a D7F80031 		ldr	r3, [r7, #256]
 1861 0c8e 1B68     		ldr	r3, [r3, #0]
 1862 0c90 C7F8A830 		str	r3, [r7, #168]
 1863              	.LBB226:
 1864              	.LBB227:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1865              		.loc 2 352 0
 1866 0c94 D7F8A830 		ldr	r3, [r7, #168]
 1867              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1868 0c98 1CBA     		rev r4, r3
 1869              	@ 0 "" 2
 1870              		.thumb
 1871 0c9a C7F8A440 		str	r4, [r7, #164]
 1872              		.loc 2 353 0
 1873 0c9e D7F8A430 		ldr	r3, [r7, #164]
 1874              	.LBE227:
 1875              	.LBE226:
 1876              		.loc 1 522 0
 1877 0ca2 7B62     		str	r3, [r7, #36]
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1878              		.loc 1 523 0
 1879 0ca4 D7F80031 		ldr	r3, [r7, #256]
 1880 0ca8 03F10403 		add	r3, r3, #4
 1881 0cac C7F80031 		str	r3, [r7, #256]
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 1882              		.loc 1 524 0
 1883 0cb0 D7F80031 		ldr	r3, [r7, #256]
 1884 0cb4 1B68     		ldr	r3, [r3, #0]
 1885 0cb6 C7F8A030 		str	r3, [r7, #160]
 1886              	.LBB228:
 1887              	.LBB229:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1888              		.loc 2 352 0
 1889 0cba D7F8A030 		ldr	r3, [r7, #160]
 1890              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1891 0cbe 1CBA     		rev r4, r3
 1892              	@ 0 "" 2
 1893              		.thumb
 1894 0cc0 C7F89C40 		str	r4, [r7, #156]
 1895              		.loc 2 353 0
 1896 0cc4 D7F89C30 		ldr	r3, [r7, #156]
 1897              	.LBE229:
 1898              	.LBE228:
 1899              		.loc 1 524 0
 1900 0cc8 BB62     		str	r3, [r7, #40]
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1901              		.loc 1 525 0
 1902 0cca D7F80031 		ldr	r3, [r7, #256]
 1903 0cce 03F10403 		add	r3, r3, #4
 1904 0cd2 C7F80031 		str	r3, [r7, #256]
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1905              		.loc 1 526 0
 1906 0cd6 D7F80031 		ldr	r3, [r7, #256]
 1907 0cda 1B68     		ldr	r3, [r3, #0]
 1908 0cdc C7F89830 		str	r3, [r7, #152]
 1909              	.LBB230:
 1910              	.LBB231:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1911              		.loc 2 352 0
 1912 0ce0 D7F89830 		ldr	r3, [r7, #152]
 1913              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1914 0ce4 1CBA     		rev r4, r3
 1915              	@ 0 "" 2
 1916              		.thumb
 1917 0ce6 C7F89440 		str	r4, [r7, #148]
 1918              		.loc 2 353 0
 1919 0cea D7F89430 		ldr	r3, [r7, #148]
 1920              	.LBE231:
 1921              	.LBE230:
 1922              		.loc 1 526 0
 1923 0cee FB62     		str	r3, [r7, #44]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1924              		.loc 1 527 0
 1925 0cf0 D7F80031 		ldr	r3, [r7, #256]
 1926 0cf4 03F10403 		add	r3, r3, #4
 1927 0cf8 C7F80031 		str	r3, [r7, #256]
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1928              		.loc 1 528 0
 1929 0cfc D7F80031 		ldr	r3, [r7, #256]
 1930 0d00 1B68     		ldr	r3, [r3, #0]
 1931 0d02 C7F89030 		str	r3, [r7, #144]
 1932              	.LBB232:
 1933              	.LBB233:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1934              		.loc 2 352 0
 1935 0d06 D7F89030 		ldr	r3, [r7, #144]
 1936              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1937 0d0a 1CBA     		rev r4, r3
 1938              	@ 0 "" 2
 1939              		.thumb
 1940 0d0c C7F88C40 		str	r4, [r7, #140]
 1941              		.loc 2 353 0
 1942 0d10 D7F88C30 		ldr	r3, [r7, #140]
 1943              	.LBE233:
 1944              	.LBE232:
 1945              		.loc 1 528 0
 1946 0d14 3B63     		str	r3, [r7, #48]
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1947              		.loc 1 529 0
 1948 0d16 D7F80031 		ldr	r3, [r7, #256]
 1949 0d1a 03F10403 		add	r3, r3, #4
 1950 0d1e C7F80031 		str	r3, [r7, #256]
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1951              		.loc 1 530 0
 1952 0d22 D7F80031 		ldr	r3, [r7, #256]
 1953 0d26 1B68     		ldr	r3, [r3, #0]
 1954 0d28 C7F88830 		str	r3, [r7, #136]
 1955              	.LBB234:
 1956              	.LBB235:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1957              		.loc 2 352 0
 1958 0d2c D7F88830 		ldr	r3, [r7, #136]
 1959              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1960 0d30 1CBA     		rev r4, r3
 1961              	@ 0 "" 2
 1962              		.thumb
 1963 0d32 C7F88440 		str	r4, [r7, #132]
 1964              		.loc 2 353 0
 1965 0d36 D7F88430 		ldr	r3, [r7, #132]
 1966              	.LBE235:
 1967              	.LBE234:
 1968              		.loc 1 530 0
 1969 0d3a 7B63     		str	r3, [r7, #52]
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1970              		.loc 1 531 0
 1971 0d3c D7F80031 		ldr	r3, [r7, #256]
 1972 0d40 03F10403 		add	r3, r3, #4
 1973 0d44 C7F80031 		str	r3, [r7, #256]
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1974              		.loc 1 532 0
 1975 0d48 D7F80031 		ldr	r3, [r7, #256]
 1976 0d4c 1B68     		ldr	r3, [r3, #0]
 1977 0d4e C7F88030 		str	r3, [r7, #128]
 1978              	.LBB236:
 1979              	.LBB237:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1980              		.loc 2 352 0
 1981 0d52 D7F88030 		ldr	r3, [r7, #128]
 1982              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 1983 0d56 1CBA     		rev r4, r3
 1984              	@ 0 "" 2
 1985              		.thumb
 1986 0d58 FC67     		str	r4, [r7, #124]
 1987              		.loc 2 353 0
 1988 0d5a FB6F     		ldr	r3, [r7, #124]
 1989              	.LBE237:
 1990              	.LBE236:
 1991              		.loc 1 532 0
 1992 0d5c BB63     		str	r3, [r7, #56]
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1993              		.loc 1 533 0
 1994 0d5e D7F80031 		ldr	r3, [r7, #256]
 1995 0d62 03F10403 		add	r3, r3, #4
 1996 0d66 C7F80031 		str	r3, [r7, #256]
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1997              		.loc 1 534 0
 1998 0d6a D7F80031 		ldr	r3, [r7, #256]
 1999 0d6e 1B68     		ldr	r3, [r3, #0]
 2000 0d70 BB67     		str	r3, [r7, #120]
 2001              	.LBB238:
 2002              	.LBB239:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 2003              		.loc 2 352 0
 2004 0d72 BB6F     		ldr	r3, [r7, #120]
 2005              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 2006 0d74 1CBA     		rev r4, r3
 2007              	@ 0 "" 2
 2008              		.thumb
 2009 0d76 7C67     		str	r4, [r7, #116]
 2010              		.loc 2 353 0
 2011 0d78 7B6F     		ldr	r3, [r7, #116]
 2012              	.LBE239:
 2013              	.LBE238:
 2014              		.loc 1 534 0
 2015 0d7a FB63     		str	r3, [r7, #60]
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2016              		.loc 1 535 0
 2017 0d7c D7F80031 		ldr	r3, [r7, #256]
 2018 0d80 03F10403 		add	r3, r3, #4
 2019 0d84 C7F80031 		str	r3, [r7, #256]
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 2020              		.loc 1 536 0
 2021 0d88 D7F80031 		ldr	r3, [r7, #256]
 2022 0d8c 1B68     		ldr	r3, [r3, #0]
 2023 0d8e 3B67     		str	r3, [r7, #112]
 2024              	.LBB240:
 2025              	.LBB241:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 2026              		.loc 2 352 0
 2027 0d90 3B6F     		ldr	r3, [r7, #112]
 2028              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 2029 0d92 1CBA     		rev r4, r3
 2030              	@ 0 "" 2
 2031              		.thumb
 2032 0d94 FC66     		str	r4, [r7, #108]
 2033              		.loc 2 353 0
 2034 0d96 FB6E     		ldr	r3, [r7, #108]
 2035              	.LBE241:
 2036              	.LBE240:
 2037              		.loc 1 536 0
 2038 0d98 3B64     		str	r3, [r7, #64]
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 2039              		.loc 1 537 0
 2040 0d9a 00E0     		b	.L44
 2041              	.L54:
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     default:
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     break;
 2042              		.loc 1 539 0
 2043 0d9c 00BF     		nop
 2044              	.L44:
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 2045              		.loc 1 542 0
 2046 0d9e D7F8FC30 		ldr	r3, [r7, #252]
 2047 0da2 1B68     		ldr	r3, [r3, #0]
 2048 0da4 BB66     		str	r3, [r7, #104]
 2049              	.LBB242:
 2050              	.LBB243:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 2051              		.loc 2 352 0
 2052 0da6 BB6E     		ldr	r3, [r7, #104]
 2053              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 2054 0da8 1CBA     		rev r4, r3
 2055              	@ 0 "" 2
 2056              		.thumb
 2057 0daa 7C66     		str	r4, [r7, #100]
 2058              		.loc 2 353 0
 2059 0dac 7B6E     		ldr	r3, [r7, #100]
 2060              		.loc 1 542 0
 2061 0dae 1A46     		mov	r2, r3
 2062              	.LBE243:
 2063              	.LBE242:
 2064 0db0 07F11403 		add	r3, r7, #20
 2065 0db4 1A60     		str	r2, [r3, #0]
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 2066              		.loc 1 543 0
 2067 0db6 D7F8FC30 		ldr	r3, [r7, #252]
 2068 0dba 03F10403 		add	r3, r3, #4
 2069 0dbe C7F8FC30 		str	r3, [r7, #252]
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 2070              		.loc 1 544 0
 2071 0dc2 D7F8FC30 		ldr	r3, [r7, #252]
 2072 0dc6 1B68     		ldr	r3, [r3, #0]
 2073 0dc8 3B66     		str	r3, [r7, #96]
 2074              	.LBB244:
 2075              	.LBB245:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 2076              		.loc 2 352 0
 2077 0dca 3B6E     		ldr	r3, [r7, #96]
 2078              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 2079 0dcc 1CBA     		rev r4, r3
 2080              	@ 0 "" 2
 2081              		.thumb
 2082 0dce FC65     		str	r4, [r7, #92]
 2083              		.loc 2 353 0
 2084 0dd0 FB6D     		ldr	r3, [r7, #92]
 2085              		.loc 1 544 0
 2086 0dd2 1A46     		mov	r2, r3
 2087              	.LBE245:
 2088              	.LBE244:
 2089 0dd4 07F11403 		add	r3, r7, #20
 2090 0dd8 5A60     		str	r2, [r3, #4]
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 2091              		.loc 1 545 0
 2092 0dda D7F8FC30 		ldr	r3, [r7, #252]
 2093 0dde 03F10403 		add	r3, r3, #4
 2094 0de2 C7F8FC30 		str	r3, [r7, #252]
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 2095              		.loc 1 546 0
 2096 0de6 D7F8FC30 		ldr	r3, [r7, #252]
 2097 0dea 1B68     		ldr	r3, [r3, #0]
 2098 0dec BB65     		str	r3, [r7, #88]
 2099              	.LBB246:
 2100              	.LBB247:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 2101              		.loc 2 352 0
 2102 0dee BB6D     		ldr	r3, [r7, #88]
 2103              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 2104 0df0 1CBA     		rev r4, r3
 2105              	@ 0 "" 2
 2106              		.thumb
 2107 0df2 7C65     		str	r4, [r7, #84]
 2108              		.loc 2 353 0
 2109 0df4 7B6D     		ldr	r3, [r7, #84]
 2110              		.loc 1 546 0
 2111 0df6 1A46     		mov	r2, r3
 2112              	.LBE247:
 2113              	.LBE246:
 2114 0df8 07F11403 		add	r3, r7, #20
 2115 0dfc 9A60     		str	r2, [r3, #8]
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 2116              		.loc 1 547 0
 2117 0dfe D7F8FC30 		ldr	r3, [r7, #252]
 2118 0e02 03F10403 		add	r3, r3, #4
 2119 0e06 C7F8FC30 		str	r3, [r7, #252]
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 2120              		.loc 1 548 0
 2121 0e0a D7F8FC30 		ldr	r3, [r7, #252]
 2122 0e0e 1B68     		ldr	r3, [r3, #0]
 2123 0e10 3B65     		str	r3, [r7, #80]
 2124              	.LBB248:
 2125              	.LBB249:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 2126              		.loc 2 352 0
 2127 0e12 3B6D     		ldr	r3, [r7, #80]
 2128              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 2129 0e14 1CBA     		rev r4, r3
 2130              	@ 0 "" 2
 2131              		.thumb
 2132 0e16 FC64     		str	r4, [r7, #76]
 2133              		.loc 2 353 0
 2134 0e18 FB6C     		ldr	r3, [r7, #76]
 2135              		.loc 1 548 0
 2136 0e1a 1A46     		mov	r2, r3
 2137              	.LBE249:
 2138              	.LBE248:
 2139 0e1c 07F11403 		add	r3, r7, #20
 2140 0e20 DA60     		str	r2, [r3, #12]
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Key Initialisation */
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 2141              		.loc 1 551 0
 2142 0e22 07F12403 		add	r3, r7, #36
 2143 0e26 1846     		mov	r0, r3
 2144 0e28 FFF7FEFF 		bl	CRYP_KeyInit
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 2145              		.loc 1 554 0
 2146 0e2c 07F11003 		add	r3, r7, #16
 2147 0e30 03F1FF33 		add	r3, r3, #-1
 2148 0e34 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2149 0e36 002B     		cmp	r3, #0
 2150 0e38 04D1     		bne	.L45
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for decryption process */
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 2151              		.loc 1 557 0
 2152 0e3a 4FF00403 		mov	r3, #4
 2153 0e3e A7F84430 		strh	r3, [r7, #68]	@ movhi
 2154 0e42 03E0     		b	.L46
 2155              	.L45:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 2156              		.loc 1 563 0
 2157 0e44 4FF00003 		mov	r3, #0
 2158 0e48 A7F84430 		strh	r3, [r7, #68]	@ movhi
 2159              	.L46:
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 2160              		.loc 1 565 0
 2161 0e4c 4FF03003 		mov	r3, #48
 2162 0e50 A7F84630 		strh	r3, [r7, #70]	@ movhi
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 2163              		.loc 1 566 0
 2164 0e54 4FF08003 		mov	r3, #128
 2165 0e58 A7F84830 		strh	r3, [r7, #72]	@ movhi
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 2166              		.loc 1 567 0
 2167 0e5c 07F14403 		add	r3, r7, #68
 2168 0e60 1846     		mov	r0, r3
 2169 0e62 FFF7FEFF 		bl	CRYP_Init
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInit(&AES_CRYP_IVInitStructure);
 2170              		.loc 1 570 0
 2171 0e66 07F11403 		add	r3, r7, #20
 2172 0e6a 1846     		mov	r0, r3
 2173 0e6c FFF7FEFF 		bl	CRYP_IVInit
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 2174              		.loc 1 573 0
 2175 0e70 FFF7FEFF 		bl	CRYP_FIFOFlush
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 2176              		.loc 1 576 0
 2177 0e74 4FF00100 		mov	r0, #1
 2178 0e78 FFF7FEFF 		bl	CRYP_Cmd
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 2179              		.loc 1 578 0
 2180 0e7c 4FF00003 		mov	r3, #0
 2181 0e80 C7F80831 		str	r3, [r7, #264]
 2182 0e84 8CE0     		b	.L47
 2183              	.L53:
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   {
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 2184              		.loc 1 582 0
 2185 0e86 D7F81031 		ldr	r3, [r7, #272]
 2186 0e8a 1B68     		ldr	r3, [r3, #0]
 2187 0e8c 1846     		mov	r0, r3
 2188 0e8e FFF7FEFF 		bl	CRYP_DataIn
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 2189              		.loc 1 583 0
 2190 0e92 D7F81031 		ldr	r3, [r7, #272]
 2191 0e96 03F10403 		add	r3, r3, #4
 2192 0e9a C7F81031 		str	r3, [r7, #272]
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 2193              		.loc 1 584 0
 2194 0e9e D7F81031 		ldr	r3, [r7, #272]
 2195 0ea2 1B68     		ldr	r3, [r3, #0]
 2196 0ea4 1846     		mov	r0, r3
 2197 0ea6 FFF7FEFF 		bl	CRYP_DataIn
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 2198              		.loc 1 585 0
 2199 0eaa D7F81031 		ldr	r3, [r7, #272]
 2200 0eae 03F10403 		add	r3, r3, #4
 2201 0eb2 C7F81031 		str	r3, [r7, #272]
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 2202              		.loc 1 586 0
 2203 0eb6 D7F81031 		ldr	r3, [r7, #272]
 2204 0eba 1B68     		ldr	r3, [r3, #0]
 2205 0ebc 1846     		mov	r0, r3
 2206 0ebe FFF7FEFF 		bl	CRYP_DataIn
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 2207              		.loc 1 587 0
 2208 0ec2 D7F81031 		ldr	r3, [r7, #272]
 2209 0ec6 03F10403 		add	r3, r3, #4
 2210 0eca C7F81031 		str	r3, [r7, #272]
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 2211              		.loc 1 588 0
 2212 0ece D7F81031 		ldr	r3, [r7, #272]
 2213 0ed2 1B68     		ldr	r3, [r3, #0]
 2214 0ed4 1846     		mov	r0, r3
 2215 0ed6 FFF7FEFF 		bl	CRYP_DataIn
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 2216              		.loc 1 589 0
 2217 0eda D7F81031 		ldr	r3, [r7, #272]
 2218 0ede 03F10403 		add	r3, r3, #4
 2219 0ee2 C7F81031 		str	r3, [r7, #272]
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 2220              		.loc 1 591 0
 2221 0ee6 07F11003 		add	r3, r7, #16
 2222 0eea 4FF00002 		mov	r2, #0
 2223 0eee 1A60     		str	r2, [r3, #0]
 2224              	.L49:
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     do
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 2225              		.loc 1 594 0 discriminator 1
 2226 0ef0 4FF01000 		mov	r0, #16
 2227 0ef4 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2228 0ef8 0346     		mov	r3, r0
 2229 0efa C7F80431 		str	r3, [r7, #260]
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       counter++;
 2230              		.loc 1 595 0 discriminator 1
 2231 0efe 07F11003 		add	r3, r7, #16
 2232 0f02 1B68     		ldr	r3, [r3, #0]
 2233 0f04 03F10102 		add	r2, r3, #1
 2234 0f08 07F11003 		add	r3, r7, #16
 2235 0f0c 1A60     		str	r2, [r3, #0]
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2236              		.loc 1 596 0 discriminator 1
 2237 0f0e 07F11003 		add	r3, r7, #16
 2238 0f12 1B68     		ldr	r3, [r3, #0]
 2239 0f14 B3F5803F 		cmp	r3, #65536
 2240 0f18 03D0     		beq	.L48
 2241 0f1a D7F80431 		ldr	r3, [r7, #260]
 2242 0f1e 002B     		cmp	r3, #0
 2243 0f20 E6D1     		bne	.L49
 2244              	.L48:
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 2245              		.loc 1 598 0
 2246 0f22 D7F80431 		ldr	r3, [r7, #260]
 2247 0f26 002B     		cmp	r3, #0
 2248 0f28 04D0     		beq	.L50
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****    {
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 2249              		.loc 1 600 0
 2250 0f2a 4FF00003 		mov	r3, #0
 2251 0f2e 87F81731 		strb	r3, [r7, #279]
 2252 0f32 2FE0     		b	.L51
 2253              	.L50:
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     else
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     {
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2254              		.loc 1 606 0
 2255 0f34 D7F80C41 		ldr	r4, [r7, #268]
 2256 0f38 FFF7FEFF 		bl	CRYP_DataOut
 2257 0f3c 0346     		mov	r3, r0
 2258 0f3e 2360     		str	r3, [r4, #0]
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 2259              		.loc 1 607 0
 2260 0f40 D7F80C31 		ldr	r3, [r7, #268]
 2261 0f44 03F10403 		add	r3, r3, #4
 2262 0f48 C7F80C31 		str	r3, [r7, #268]
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2263              		.loc 1 608 0
 2264 0f4c D7F80C41 		ldr	r4, [r7, #268]
 2265 0f50 FFF7FEFF 		bl	CRYP_DataOut
 2266 0f54 0346     		mov	r3, r0
 2267 0f56 2360     		str	r3, [r4, #0]
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 2268              		.loc 1 609 0
 2269 0f58 D7F80C31 		ldr	r3, [r7, #268]
 2270 0f5c 03F10403 		add	r3, r3, #4
 2271 0f60 C7F80C31 		str	r3, [r7, #268]
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2272              		.loc 1 610 0
 2273 0f64 D7F80C41 		ldr	r4, [r7, #268]
 2274 0f68 FFF7FEFF 		bl	CRYP_DataOut
 2275 0f6c 0346     		mov	r3, r0
 2276 0f6e 2360     		str	r3, [r4, #0]
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 2277              		.loc 1 611 0
 2278 0f70 D7F80C31 		ldr	r3, [r7, #268]
 2279 0f74 03F10403 		add	r3, r3, #4
 2280 0f78 C7F80C31 		str	r3, [r7, #268]
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2281              		.loc 1 612 0
 2282 0f7c D7F80C41 		ldr	r4, [r7, #268]
 2283 0f80 FFF7FEFF 		bl	CRYP_DataOut
 2284 0f84 0346     		mov	r3, r0
 2285 0f86 2360     		str	r3, [r4, #0]
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 2286              		.loc 1 613 0
 2287 0f88 D7F80C31 		ldr	r3, [r7, #268]
 2288 0f8c 03F10403 		add	r3, r3, #4
 2289 0f90 C7F80C31 		str	r3, [r7, #268]
 2290              	.L51:
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 2291              		.loc 1 578 0
 2292 0f94 D7F80831 		ldr	r3, [r7, #264]
 2293 0f98 03F11003 		add	r3, r3, #16
 2294 0f9c C7F80831 		str	r3, [r7, #264]
 2295              	.L47:
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 2296              		.loc 1 578 0 is_stmt 0 discriminator 1
 2297 0fa0 D7F80821 		ldr	r2, [r7, #264]
 2298 0fa4 D7F82C31 		ldr	r3, [r7, #300]
 2299 0fa8 9A42     		cmp	r2, r3
 2300 0faa 04D2     		bcs	.L52
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 2301              		.loc 1 578 0 discriminator 2
 2302 0fac 97F81731 		ldrb	r3, [r7, #279]	@ zero_extendqisi2
 2303 0fb0 002B     		cmp	r3, #0
 2304 0fb2 7FF468AF 		bne	.L53
 2305              	.L52:
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****     }
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 2306              		.loc 1 617 0 is_stmt 1
 2307 0fb6 4FF00000 		mov	r0, #0
 2308 0fba FFF7FEFF 		bl	CRYP_Cmd
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** 
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c ****   return status;
 2309              		.loc 1 619 0
 2310 0fbe 97F81731 		ldrb	r3, [r7, #279]	@ zero_extendqisi2
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c **** }
 2311              		.loc 1 620 0
 2312 0fc2 1846     		mov	r0, r3
 2313 0fc4 07F58E77 		add	r7, r7, #284
 2314 0fc8 BD46     		mov	sp, r7
 2315 0fca 90BD     		pop	{r4, r7, pc}
 2316              		.cfi_endproc
 2317              	.LFE112:
 2319              	.Letext0:
 2320              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2321              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 2322              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 2323              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_aes.c
C:\Users\Alex\AppData\Local\Temp\ccS3TiS4.s:18     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccS3TiS4.s:23     .text:00000000 CRYP_AES_ECB
C:\Users\Alex\AppData\Local\Temp\ccS3TiS4.s:728    .text:000004b0 CRYP_AES_CBC
C:\Users\Alex\AppData\Local\Temp\ccS3TiS4.s:1552   .text:00000a7c CRYP_AES_CTR
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_FIFOFlush
CRYP_Init
CRYP_KeyInit
CRYP_Cmd
CRYP_GetFlagStatus
CRYP_DataIn
CRYP_DataOut
CRYP_IVInit
