   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	RTC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	RTC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 368 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  42              		.loc 1 369 0
  43 0006 4FF00003 		mov	r3, #0
  44 000a 7B60     		str	r3, [r7, #4]
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  45              		.loc 1 370 0
  46 000c 4FF00003 		mov	r3, #0
  47 0010 BB60     		str	r3, [r7, #8]
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  48              		.loc 1 371 0
  49 0012 4FF00003 		mov	r3, #0
  50 0016 FB73     		strb	r3, [r7, #15]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  51              		.loc 1 374 0
  52 0018 4FF42053 		mov	r3, #10240
  53 001c C4F20003 		movt	r3, 16384
  54 0020 4FF0CA02 		mov	r2, #202
  55 0024 5A62     		str	r2, [r3, #36]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  56              		.loc 1 375 0
  57 0026 4FF42053 		mov	r3, #10240
  58 002a C4F20003 		movt	r3, 16384
  59 002e 4FF05302 		mov	r2, #83
  60 0032 5A62     		str	r2, [r3, #36]
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  61              		.loc 1 378 0
  62 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  63 0038 0346     		mov	r3, r0
  64 003a 002B     		cmp	r3, #0
  65 003c 03D1     		bne	.L2
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  66              		.loc 1 380 0
  67 003e 4FF00003 		mov	r3, #0
  68 0042 FB73     		strb	r3, [r7, #15]
  69 0044 84E0     		b	.L3
  70              	.L2:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  71              		.loc 1 385 0
  72 0046 4FF42053 		mov	r3, #10240
  73 004a C4F20003 		movt	r3, 16384
  74 004e 4FF00002 		mov	r2, #0
  75 0052 1A60     		str	r2, [r3, #0]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  76              		.loc 1 386 0
  77 0054 4FF42053 		mov	r3, #10240
  78 0058 C4F20003 		movt	r3, 16384
  79 005c 42F20112 		movw	r2, #8449
  80 0060 5A60     		str	r2, [r3, #4]
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  81              		.loc 1 388 0
  82 0062 4FF42053 		mov	r3, #10240
  83 0066 C4F20003 		movt	r3, 16384
  84 006a 4FF42052 		mov	r2, #10240
  85 006e C4F20002 		movt	r2, 16384
  86 0072 9268     		ldr	r2, [r2, #8]
  87 0074 02F00702 		and	r2, r2, #7
  88 0078 9A60     		str	r2, [r3, #8]
  89              	.L5:
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  90              		.loc 1 393 0 discriminator 1
  91 007a 4FF42053 		mov	r3, #10240
  92 007e C4F20003 		movt	r3, 16384
  93 0082 DB68     		ldr	r3, [r3, #12]
  94 0084 03F00403 		and	r3, r3, #4
  95 0088 BB60     		str	r3, [r7, #8]
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  96              		.loc 1 394 0 discriminator 1
  97 008a 7B68     		ldr	r3, [r7, #4]
  98 008c 03F10103 		add	r3, r3, #1
  99 0090 7B60     		str	r3, [r7, #4]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 100              		.loc 1 395 0 discriminator 1
 101 0092 7B68     		ldr	r3, [r7, #4]
 102 0094 B3F5803F 		cmp	r3, #65536
 103 0098 02D0     		beq	.L4
 104 009a BB68     		ldr	r3, [r7, #8]
 105 009c 002B     		cmp	r3, #0
 106 009e ECD0     		beq	.L5
 107              	.L4:
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 108              		.loc 1 397 0
 109 00a0 4FF42053 		mov	r3, #10240
 110 00a4 C4F20003 		movt	r3, 16384
 111 00a8 DB68     		ldr	r3, [r3, #12]
 112 00aa 03F00403 		and	r3, r3, #4
 113 00ae 002B     		cmp	r3, #0
 114 00b0 03D1     		bne	.L6
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 115              		.loc 1 399 0
 116 00b2 4FF00003 		mov	r3, #0
 117 00b6 FB73     		strb	r3, [r7, #15]
 118 00b8 4AE0     		b	.L3
 119              	.L6:
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 120              		.loc 1 404 0
 121 00ba 4FF42053 		mov	r3, #10240
 122 00be C4F20003 		movt	r3, 16384
 123 00c2 9B68     		ldr	r3, [r3, #8]
 124 00c4 4FF42053 		mov	r3, #10240
 125 00c8 C4F20003 		movt	r3, 16384
 126 00cc 4FF00002 		mov	r2, #0
 127 00d0 9A60     		str	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 128              		.loc 1 405 0
 129 00d2 4FF42053 		mov	r3, #10240
 130 00d6 C4F20003 		movt	r3, 16384
 131 00da 4FF6FF72 		movw	r2, #65535
 132 00de 5A61     		str	r2, [r3, #20]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 133              		.loc 1 406 0
 134 00e0 4FF42053 		mov	r3, #10240
 135 00e4 C4F20003 		movt	r3, 16384
 136 00e8 4FF0FF02 		mov	r2, #255
 137 00ec C0F27F02 		movt	r2, 127
 138 00f0 1A61     		str	r2, [r3, #16]
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 139              		.loc 1 407 0
 140 00f2 4FF42053 		mov	r3, #10240
 141 00f6 C4F20003 		movt	r3, 16384
 142 00fa 4FF00002 		mov	r2, #0
 143 00fe 9A61     		str	r2, [r3, #24]
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 144              		.loc 1 408 0
 145 0100 4FF42053 		mov	r3, #10240
 146 0104 C4F20003 		movt	r3, 16384
 147 0108 4FF00002 		mov	r2, #0
 148 010c DA61     		str	r2, [r3, #28]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 149              		.loc 1 409 0
 150 010e 4FF42053 		mov	r3, #10240
 151 0112 C4F20003 		movt	r3, 16384
 152 0116 4FF00002 		mov	r2, #0
 153 011a 1A62     		str	r2, [r3, #32]
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 154              		.loc 1 412 0
 155 011c 4FF42053 		mov	r3, #10240
 156 0120 C4F20003 		movt	r3, 16384
 157 0124 4FF00002 		mov	r2, #0
 158 0128 DA60     		str	r2, [r3, #12]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 159              		.loc 1 415 0
 160 012a 4FF42053 		mov	r3, #10240
 161 012e C4F20003 		movt	r3, 16384
 162 0132 4FF00002 		mov	r2, #0
 163 0136 1A64     		str	r2, [r3, #64]
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 164              		.loc 1 417 0
 165 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 166 013c 0346     		mov	r3, r0
 167 013e 002B     		cmp	r3, #0
 168 0140 03D1     		bne	.L7
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 169              		.loc 1 419 0
 170 0142 4FF00003 		mov	r3, #0
 171 0146 FB73     		strb	r3, [r7, #15]
 172 0148 02E0     		b	.L3
 173              	.L7:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 174              		.loc 1 423 0
 175 014a 4FF00103 		mov	r3, #1
 176 014e FB73     		strb	r3, [r7, #15]
 177              	.L3:
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 178              		.loc 1 429 0
 179 0150 4FF42053 		mov	r3, #10240
 180 0154 C4F20003 		movt	r3, 16384
 181 0158 4FF0FF02 		mov	r2, #255
 182 015c 5A62     		str	r2, [r3, #36]
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 183              		.loc 1 431 0
 184 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 185              		.loc 1 432 0
 186 0160 1846     		mov	r0, r3
 187 0162 07F11007 		add	r7, r7, #16
 188 0166 BD46     		mov	sp, r7
 189 0168 80BD     		pop	{r7, pc}
 190              		.cfi_endproc
 191              	.LFE110:
 193 016a 00BF     		.align	2
 194              		.global	RTC_Init
 195              		.thumb
 196              		.thumb_func
 198              	RTC_Init:
 199              	.LFB111:
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 200              		.loc 1 446 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 16
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204 016c 80B5     		push	{r7, lr}
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 14, -4
 208              		.cfi_offset 7, -8
 209 016e 84B0     		sub	sp, sp, #16
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 24
 212 0170 00AF     		add	r7, sp, #0
 213              	.LCFI5:
 214              		.cfi_def_cfa_register 7
 215 0172 7860     		str	r0, [r7, #4]
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 216              		.loc 1 447 0
 217 0174 4FF00003 		mov	r3, #0
 218 0178 FB73     		strb	r3, [r7, #15]
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 219              		.loc 1 455 0
 220 017a 4FF42053 		mov	r3, #10240
 221 017e C4F20003 		movt	r3, 16384
 222 0182 4FF0CA02 		mov	r2, #202
 223 0186 5A62     		str	r2, [r3, #36]
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 224              		.loc 1 456 0
 225 0188 4FF42053 		mov	r3, #10240
 226 018c C4F20003 		movt	r3, 16384
 227 0190 4FF05302 		mov	r2, #83
 228 0194 5A62     		str	r2, [r3, #36]
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 229              		.loc 1 459 0
 230 0196 FFF7FEFF 		bl	RTC_EnterInitMode
 231 019a 0346     		mov	r3, r0
 232 019c 002B     		cmp	r3, #0
 233 019e 03D1     		bne	.L9
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 234              		.loc 1 461 0
 235 01a0 4FF00003 		mov	r3, #0
 236 01a4 FB73     		strb	r3, [r7, #15]
 237 01a6 35E0     		b	.L10
 238              	.L9:
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 239              		.loc 1 466 0
 240 01a8 4FF42053 		mov	r3, #10240
 241 01ac C4F20003 		movt	r3, 16384
 242 01b0 4FF42052 		mov	r2, #10240
 243 01b4 C4F20002 		movt	r2, 16384
 244 01b8 9268     		ldr	r2, [r2, #8]
 245 01ba 22F04002 		bic	r2, r2, #64
 246 01be 9A60     		str	r2, [r3, #8]
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 247              		.loc 1 468 0
 248 01c0 4FF42053 		mov	r3, #10240
 249 01c4 C4F20003 		movt	r3, 16384
 250 01c8 4FF42052 		mov	r2, #10240
 251 01cc C4F20002 		movt	r2, 16384
 252 01d0 9268     		ldr	r2, [r2, #8]
 253 01d2 1146     		mov	r1, r2
 254 01d4 7A68     		ldr	r2, [r7, #4]
 255 01d6 1268     		ldr	r2, [r2, #0]
 256 01d8 0A43     		orrs	r2, r2, r1
 257 01da 9A60     		str	r2, [r3, #8]
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 258              		.loc 1 471 0
 259 01dc 4FF42053 		mov	r3, #10240
 260 01e0 C4F20003 		movt	r3, 16384
 261 01e4 7A68     		ldr	r2, [r7, #4]
 262 01e6 9268     		ldr	r2, [r2, #8]
 263 01e8 1A61     		str	r2, [r3, #16]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 264              		.loc 1 472 0
 265 01ea 4FF42053 		mov	r3, #10240
 266 01ee C4F20003 		movt	r3, 16384
 267 01f2 4FF42052 		mov	r2, #10240
 268 01f6 C4F20002 		movt	r2, 16384
 269 01fa 1269     		ldr	r2, [r2, #16]
 270 01fc 1146     		mov	r1, r2
 271 01fe 7A68     		ldr	r2, [r7, #4]
 272 0200 5268     		ldr	r2, [r2, #4]
 273 0202 4FEA0242 		lsl	r2, r2, #16
 274 0206 0A43     		orrs	r2, r2, r1
 275 0208 1A61     		str	r2, [r3, #16]
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 276              		.loc 1 475 0
 277 020a FFF7FEFF 		bl	RTC_ExitInitMode
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 278              		.loc 1 477 0
 279 020e 4FF00103 		mov	r3, #1
 280 0212 FB73     		strb	r3, [r7, #15]
 281              	.L10:
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 282              		.loc 1 480 0
 283 0214 4FF42053 		mov	r3, #10240
 284 0218 C4F20003 		movt	r3, 16384
 285 021c 4FF0FF02 		mov	r2, #255
 286 0220 5A62     		str	r2, [r3, #36]
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 287              		.loc 1 482 0
 288 0222 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 289              		.loc 1 483 0
 290 0224 1846     		mov	r0, r3
 291 0226 07F11007 		add	r7, r7, #16
 292 022a BD46     		mov	sp, r7
 293 022c 80BD     		pop	{r7, pc}
 294              		.cfi_endproc
 295              	.LFE111:
 297 022e 00BF     		.align	2
 298              		.global	RTC_StructInit
 299              		.thumb
 300              		.thumb_func
 302              	RTC_StructInit:
 303              	.LFB112:
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 304              		.loc 1 492 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 8
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 309 0230 80B4     		push	{r7}
 310              	.LCFI6:
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 7, -4
 313 0232 83B0     		sub	sp, sp, #12
 314              	.LCFI7:
 315              		.cfi_def_cfa_offset 16
 316 0234 00AF     		add	r7, sp, #0
 317              	.LCFI8:
 318              		.cfi_def_cfa_register 7
 319 0236 7860     		str	r0, [r7, #4]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 320              		.loc 1 494 0
 321 0238 7B68     		ldr	r3, [r7, #4]
 322 023a 4FF00002 		mov	r2, #0
 323 023e 1A60     		str	r2, [r3, #0]
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 324              		.loc 1 497 0
 325 0240 7B68     		ldr	r3, [r7, #4]
 326 0242 4FF07F02 		mov	r2, #127
 327 0246 5A60     		str	r2, [r3, #4]
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 328              		.loc 1 500 0
 329 0248 7B68     		ldr	r3, [r7, #4]
 330 024a 4FF0FF02 		mov	r2, #255
 331 024e 9A60     		str	r2, [r3, #8]
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 332              		.loc 1 501 0
 333 0250 07F10C07 		add	r7, r7, #12
 334 0254 BD46     		mov	sp, r7
 335 0256 80BC     		pop	{r7}
 336 0258 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE112:
 340 025a 00BF     		.align	2
 341              		.global	RTC_WriteProtectionCmd
 342              		.thumb
 343              		.thumb_func
 345              	RTC_WriteProtectionCmd:
 346              	.LFB113:
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 347              		.loc 1 514 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 8
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 352 025c 80B4     		push	{r7}
 353              	.LCFI9:
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 7, -4
 356 025e 83B0     		sub	sp, sp, #12
 357              	.LCFI10:
 358              		.cfi_def_cfa_offset 16
 359 0260 00AF     		add	r7, sp, #0
 360              	.LCFI11:
 361              		.cfi_def_cfa_register 7
 362 0262 0346     		mov	r3, r0
 363 0264 FB71     		strb	r3, [r7, #7]
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 364              		.loc 1 518 0
 365 0266 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 366 0268 002B     		cmp	r3, #0
 367 026a 07D0     		beq	.L13
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 368              		.loc 1 521 0
 369 026c 4FF42053 		mov	r3, #10240
 370 0270 C4F20003 		movt	r3, 16384
 371 0274 4FF0FF02 		mov	r2, #255
 372 0278 5A62     		str	r2, [r3, #36]
 373 027a 0DE0     		b	.L12
 374              	.L13:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 375              		.loc 1 526 0
 376 027c 4FF42053 		mov	r3, #10240
 377 0280 C4F20003 		movt	r3, 16384
 378 0284 4FF0CA02 		mov	r2, #202
 379 0288 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 380              		.loc 1 527 0
 381 028a 4FF42053 		mov	r3, #10240
 382 028e C4F20003 		movt	r3, 16384
 383 0292 4FF05302 		mov	r2, #83
 384 0296 5A62     		str	r2, [r3, #36]
 385              	.L12:
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 386              		.loc 1 529 0
 387 0298 07F10C07 		add	r7, r7, #12
 388 029c BD46     		mov	sp, r7
 389 029e 80BC     		pop	{r7}
 390 02a0 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE113:
 394 02a2 00BF     		.align	2
 395              		.global	RTC_EnterInitMode
 396              		.thumb
 397              		.thumb_func
 399              	RTC_EnterInitMode:
 400              	.LFB114:
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 401              		.loc 1 541 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 16
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406 02a4 80B4     		push	{r7}
 407              	.LCFI12:
 408              		.cfi_def_cfa_offset 4
 409              		.cfi_offset 7, -4
 410 02a6 85B0     		sub	sp, sp, #20
 411              	.LCFI13:
 412              		.cfi_def_cfa_offset 24
 413 02a8 00AF     		add	r7, sp, #0
 414              	.LCFI14:
 415              		.cfi_def_cfa_register 7
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 416              		.loc 1 542 0
 417 02aa 4FF00003 		mov	r3, #0
 418 02ae 7B60     		str	r3, [r7, #4]
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 419              		.loc 1 543 0
 420 02b0 4FF00003 		mov	r3, #0
 421 02b4 FB73     		strb	r3, [r7, #15]
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 422              		.loc 1 544 0
 423 02b6 4FF00003 		mov	r3, #0
 424 02ba BB60     		str	r3, [r7, #8]
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 425              		.loc 1 547 0
 426 02bc 4FF42053 		mov	r3, #10240
 427 02c0 C4F20003 		movt	r3, 16384
 428 02c4 DB68     		ldr	r3, [r3, #12]
 429 02c6 03F04003 		and	r3, r3, #64
 430 02ca 002B     		cmp	r3, #0
 431 02cc 2AD1     		bne	.L16
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 432              		.loc 1 550 0
 433 02ce 4FF42053 		mov	r3, #10240
 434 02d2 C4F20003 		movt	r3, 16384
 435 02d6 4FF0FF32 		mov	r2, #-1
 436 02da DA60     		str	r2, [r3, #12]
 437              	.L18:
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 438              		.loc 1 555 0 discriminator 1
 439 02dc 4FF42053 		mov	r3, #10240
 440 02e0 C4F20003 		movt	r3, 16384
 441 02e4 DB68     		ldr	r3, [r3, #12]
 442 02e6 03F04003 		and	r3, r3, #64
 443 02ea BB60     		str	r3, [r7, #8]
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 444              		.loc 1 556 0 discriminator 1
 445 02ec 7B68     		ldr	r3, [r7, #4]
 446 02ee 03F10103 		add	r3, r3, #1
 447 02f2 7B60     		str	r3, [r7, #4]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 448              		.loc 1 557 0 discriminator 1
 449 02f4 7B68     		ldr	r3, [r7, #4]
 450 02f6 B3F5803F 		cmp	r3, #65536
 451 02fa 02D0     		beq	.L17
 452 02fc BB68     		ldr	r3, [r7, #8]
 453 02fe 002B     		cmp	r3, #0
 454 0300 ECD0     		beq	.L18
 455              	.L17:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 456              		.loc 1 559 0
 457 0302 4FF42053 		mov	r3, #10240
 458 0306 C4F20003 		movt	r3, 16384
 459 030a DB68     		ldr	r3, [r3, #12]
 460 030c 03F04003 		and	r3, r3, #64
 461 0310 002B     		cmp	r3, #0
 462 0312 03D0     		beq	.L19
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 463              		.loc 1 561 0
 464 0314 4FF00103 		mov	r3, #1
 465 0318 FB73     		strb	r3, [r7, #15]
 466 031a 06E0     		b	.L20
 467              	.L19:
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 468              		.loc 1 565 0
 469 031c 4FF00003 		mov	r3, #0
 470 0320 FB73     		strb	r3, [r7, #15]
 471 0322 02E0     		b	.L20
 472              	.L16:
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 473              		.loc 1 570 0
 474 0324 4FF00103 		mov	r3, #1
 475 0328 FB73     		strb	r3, [r7, #15]
 476              	.L20:
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 477              		.loc 1 573 0
 478 032a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 479              		.loc 1 574 0
 480 032c 1846     		mov	r0, r3
 481 032e 07F11407 		add	r7, r7, #20
 482 0332 BD46     		mov	sp, r7
 483 0334 80BC     		pop	{r7}
 484 0336 7047     		bx	lr
 485              		.cfi_endproc
 486              	.LFE114:
 488              		.align	2
 489              		.global	RTC_ExitInitMode
 490              		.thumb
 491              		.thumb_func
 493              	RTC_ExitInitMode:
 494              	.LFB115:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 495              		.loc 1 586 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500 0338 80B4     		push	{r7}
 501              	.LCFI15:
 502              		.cfi_def_cfa_offset 4
 503              		.cfi_offset 7, -4
 504 033a 00AF     		add	r7, sp, #0
 505              	.LCFI16:
 506              		.cfi_def_cfa_register 7
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 507              		.loc 1 588 0
 508 033c 4FF42053 		mov	r3, #10240
 509 0340 C4F20003 		movt	r3, 16384
 510 0344 4FF42052 		mov	r2, #10240
 511 0348 C4F20002 		movt	r2, 16384
 512 034c D268     		ldr	r2, [r2, #12]
 513 034e 22F08002 		bic	r2, r2, #128
 514 0352 DA60     		str	r2, [r3, #12]
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 515              		.loc 1 589 0
 516 0354 BD46     		mov	sp, r7
 517 0356 80BC     		pop	{r7}
 518 0358 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE115:
 522 035a 00BF     		.align	2
 523              		.global	RTC_WaitForSynchro
 524              		.thumb
 525              		.thumb_func
 527              	RTC_WaitForSynchro:
 528              	.LFB116:
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 529              		.loc 1 608 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 16
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 534 035c 80B4     		push	{r7}
 535              	.LCFI17:
 536              		.cfi_def_cfa_offset 4
 537              		.cfi_offset 7, -4
 538 035e 85B0     		sub	sp, sp, #20
 539              	.LCFI18:
 540              		.cfi_def_cfa_offset 24
 541 0360 00AF     		add	r7, sp, #0
 542              	.LCFI19:
 543              		.cfi_def_cfa_register 7
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 544              		.loc 1 609 0
 545 0362 4FF00003 		mov	r3, #0
 546 0366 7B60     		str	r3, [r7, #4]
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 547              		.loc 1 610 0
 548 0368 4FF00003 		mov	r3, #0
 549 036c FB73     		strb	r3, [r7, #15]
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 550              		.loc 1 611 0
 551 036e 4FF00003 		mov	r3, #0
 552 0372 BB60     		str	r3, [r7, #8]
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 553              		.loc 1 614 0
 554 0374 4FF42053 		mov	r3, #10240
 555 0378 C4F20003 		movt	r3, 16384
 556 037c 4FF0CA02 		mov	r2, #202
 557 0380 5A62     		str	r2, [r3, #36]
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 558              		.loc 1 615 0
 559 0382 4FF42053 		mov	r3, #10240
 560 0386 C4F20003 		movt	r3, 16384
 561 038a 4FF05302 		mov	r2, #83
 562 038e 5A62     		str	r2, [r3, #36]
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 563              		.loc 1 618 0
 564 0390 4FF42053 		mov	r3, #10240
 565 0394 C4F20003 		movt	r3, 16384
 566 0398 4FF42052 		mov	r2, #10240
 567 039c C4F20002 		movt	r2, 16384
 568 03a0 D268     		ldr	r2, [r2, #12]
 569 03a2 22F0A002 		bic	r2, r2, #160
 570 03a6 DA60     		str	r2, [r3, #12]
 571              	.L24:
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 572              		.loc 1 623 0 discriminator 1
 573 03a8 4FF42053 		mov	r3, #10240
 574 03ac C4F20003 		movt	r3, 16384
 575 03b0 DB68     		ldr	r3, [r3, #12]
 576 03b2 03F02003 		and	r3, r3, #32
 577 03b6 BB60     		str	r3, [r7, #8]
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 578              		.loc 1 624 0 discriminator 1
 579 03b8 7B68     		ldr	r3, [r7, #4]
 580 03ba 03F10103 		add	r3, r3, #1
 581 03be 7B60     		str	r3, [r7, #4]
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 582              		.loc 1 625 0 discriminator 1
 583 03c0 7B68     		ldr	r3, [r7, #4]
 584 03c2 B3F5003F 		cmp	r3, #131072
 585 03c6 02D0     		beq	.L23
 586 03c8 BB68     		ldr	r3, [r7, #8]
 587 03ca 002B     		cmp	r3, #0
 588 03cc ECD0     		beq	.L24
 589              	.L23:
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 590              		.loc 1 627 0
 591 03ce 4FF42053 		mov	r3, #10240
 592 03d2 C4F20003 		movt	r3, 16384
 593 03d6 DB68     		ldr	r3, [r3, #12]
 594 03d8 03F02003 		and	r3, r3, #32
 595 03dc 002B     		cmp	r3, #0
 596 03de 03D0     		beq	.L25
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 597              		.loc 1 629 0
 598 03e0 4FF00103 		mov	r3, #1
 599 03e4 FB73     		strb	r3, [r7, #15]
 600 03e6 02E0     		b	.L26
 601              	.L25:
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 602              		.loc 1 633 0
 603 03e8 4FF00003 		mov	r3, #0
 604 03ec FB73     		strb	r3, [r7, #15]
 605              	.L26:
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 606              		.loc 1 637 0
 607 03ee 4FF42053 		mov	r3, #10240
 608 03f2 C4F20003 		movt	r3, 16384
 609 03f6 4FF0FF02 		mov	r2, #255
 610 03fa 5A62     		str	r2, [r3, #36]
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 611              		.loc 1 639 0
 612 03fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 613              		.loc 1 640 0
 614 03fe 1846     		mov	r0, r3
 615 0400 07F11407 		add	r7, r7, #20
 616 0404 BD46     		mov	sp, r7
 617 0406 80BC     		pop	{r7}
 618 0408 7047     		bx	lr
 619              		.cfi_endproc
 620              	.LFE116:
 622 040a 00BF     		.align	2
 623              		.global	RTC_RefClockCmd
 624              		.thumb
 625              		.thumb_func
 627              	RTC_RefClockCmd:
 628              	.LFB117:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 629              		.loc 1 651 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 16
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633 040c 80B5     		push	{r7, lr}
 634              	.LCFI20:
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 14, -4
 637              		.cfi_offset 7, -8
 638 040e 84B0     		sub	sp, sp, #16
 639              	.LCFI21:
 640              		.cfi_def_cfa_offset 24
 641 0410 00AF     		add	r7, sp, #0
 642              	.LCFI22:
 643              		.cfi_def_cfa_register 7
 644 0412 0346     		mov	r3, r0
 645 0414 FB71     		strb	r3, [r7, #7]
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 646              		.loc 1 652 0
 647 0416 4FF00003 		mov	r3, #0
 648 041a FB73     		strb	r3, [r7, #15]
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 649              		.loc 1 658 0
 650 041c 4FF42053 		mov	r3, #10240
 651 0420 C4F20003 		movt	r3, 16384
 652 0424 4FF0CA02 		mov	r2, #202
 653 0428 5A62     		str	r2, [r3, #36]
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 654              		.loc 1 659 0
 655 042a 4FF42053 		mov	r3, #10240
 656 042e C4F20003 		movt	r3, 16384
 657 0432 4FF05302 		mov	r2, #83
 658 0436 5A62     		str	r2, [r3, #36]
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 659              		.loc 1 662 0
 660 0438 FFF7FEFF 		bl	RTC_EnterInitMode
 661 043c 0346     		mov	r3, r0
 662 043e 002B     		cmp	r3, #0
 663 0440 03D1     		bne	.L28
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 664              		.loc 1 664 0
 665 0442 4FF00003 		mov	r3, #0
 666 0446 FB73     		strb	r3, [r7, #15]
 667 0448 20E0     		b	.L29
 668              	.L28:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 669              		.loc 1 668 0
 670 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 671 044c 002B     		cmp	r3, #0
 672 044e 0CD0     		beq	.L30
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 673              		.loc 1 671 0
 674 0450 4FF42053 		mov	r3, #10240
 675 0454 C4F20003 		movt	r3, 16384
 676 0458 4FF42052 		mov	r2, #10240
 677 045c C4F20002 		movt	r2, 16384
 678 0460 9268     		ldr	r2, [r2, #8]
 679 0462 42F01002 		orr	r2, r2, #16
 680 0466 9A60     		str	r2, [r3, #8]
 681 0468 0BE0     		b	.L31
 682              	.L30:
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 683              		.loc 1 676 0
 684 046a 4FF42053 		mov	r3, #10240
 685 046e C4F20003 		movt	r3, 16384
 686 0472 4FF42052 		mov	r2, #10240
 687 0476 C4F20002 		movt	r2, 16384
 688 047a 9268     		ldr	r2, [r2, #8]
 689 047c 22F01002 		bic	r2, r2, #16
 690 0480 9A60     		str	r2, [r3, #8]
 691              	.L31:
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 692              		.loc 1 679 0
 693 0482 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 694              		.loc 1 681 0
 695 0486 4FF00103 		mov	r3, #1
 696 048a FB73     		strb	r3, [r7, #15]
 697              	.L29:
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698              		.loc 1 685 0
 699 048c 4FF42053 		mov	r3, #10240
 700 0490 C4F20003 		movt	r3, 16384
 701 0494 4FF0FF02 		mov	r2, #255
 702 0498 5A62     		str	r2, [r3, #36]
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 703              		.loc 1 687 0
 704 049a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 705              		.loc 1 688 0
 706 049c 1846     		mov	r0, r3
 707 049e 07F11007 		add	r7, r7, #16
 708 04a2 BD46     		mov	sp, r7
 709 04a4 80BD     		pop	{r7, pc}
 710              		.cfi_endproc
 711              	.LFE117:
 713 04a6 00BF     		.align	2
 714              		.global	RTC_BypassShadowCmd
 715              		.thumb
 716              		.thumb_func
 718              	RTC_BypassShadowCmd:
 719              	.LFB118:
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 720              		.loc 1 699 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 8
 723              		@ frame_needed = 1, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725 04a8 80B4     		push	{r7}
 726              	.LCFI23:
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 7, -4
 729 04aa 83B0     		sub	sp, sp, #12
 730              	.LCFI24:
 731              		.cfi_def_cfa_offset 16
 732 04ac 00AF     		add	r7, sp, #0
 733              	.LCFI25:
 734              		.cfi_def_cfa_register 7
 735 04ae 0346     		mov	r3, r0
 736 04b0 FB71     		strb	r3, [r7, #7]
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 737              		.loc 1 704 0
 738 04b2 4FF42053 		mov	r3, #10240
 739 04b6 C4F20003 		movt	r3, 16384
 740 04ba 4FF0CA02 		mov	r2, #202
 741 04be 5A62     		str	r2, [r3, #36]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 742              		.loc 1 705 0
 743 04c0 4FF42053 		mov	r3, #10240
 744 04c4 C4F20003 		movt	r3, 16384
 745 04c8 4FF05302 		mov	r2, #83
 746 04cc 5A62     		str	r2, [r3, #36]
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 747              		.loc 1 707 0
 748 04ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 749 04d0 002B     		cmp	r3, #0
 750 04d2 0CD0     		beq	.L33
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 751              		.loc 1 710 0
 752 04d4 4FF42053 		mov	r3, #10240
 753 04d8 C4F20003 		movt	r3, 16384
 754 04dc 4FF42052 		mov	r2, #10240
 755 04e0 C4F20002 		movt	r2, 16384
 756 04e4 9268     		ldr	r2, [r2, #8]
 757 04e6 42F02002 		orr	r2, r2, #32
 758 04ea 9A60     		str	r2, [r3, #8]
 759 04ec 0BE0     		b	.L34
 760              	.L33:
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 761              		.loc 1 715 0
 762 04ee 4FF42053 		mov	r3, #10240
 763 04f2 C4F20003 		movt	r3, 16384
 764 04f6 4FF42052 		mov	r2, #10240
 765 04fa C4F20002 		movt	r2, 16384
 766 04fe 9268     		ldr	r2, [r2, #8]
 767 0500 02F0DF02 		and	r2, r2, #223
 768 0504 9A60     		str	r2, [r3, #8]
 769              	.L34:
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 770              		.loc 1 719 0
 771 0506 4FF42053 		mov	r3, #10240
 772 050a C4F20003 		movt	r3, 16384
 773 050e 4FF0FF02 		mov	r2, #255
 774 0512 5A62     		str	r2, [r3, #36]
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 775              		.loc 1 720 0
 776 0514 07F10C07 		add	r7, r7, #12
 777 0518 BD46     		mov	sp, r7
 778 051a 80BC     		pop	{r7}
 779 051c 7047     		bx	lr
 780              		.cfi_endproc
 781              	.LFE118:
 783 051e 00BF     		.align	2
 784              		.global	RTC_SetTime
 785              		.thumb
 786              		.thumb_func
 788              	RTC_SetTime:
 789              	.LFB119:
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 790              		.loc 1 754 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 16
 793              		@ frame_needed = 1, uses_anonymous_args = 0
 794 0520 90B5     		push	{r4, r7, lr}
 795              	.LCFI26:
 796              		.cfi_def_cfa_offset 12
 797              		.cfi_offset 14, -4
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 4, -12
 800 0522 85B0     		sub	sp, sp, #20
 801              	.LCFI27:
 802              		.cfi_def_cfa_offset 32
 803 0524 00AF     		add	r7, sp, #0
 804              	.LCFI28:
 805              		.cfi_def_cfa_register 7
 806 0526 7860     		str	r0, [r7, #4]
 807 0528 3960     		str	r1, [r7, #0]
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 808              		.loc 1 755 0
 809 052a 4FF00003 		mov	r3, #0
 810 052e FB60     		str	r3, [r7, #12]
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 811              		.loc 1 756 0
 812 0530 4FF00003 		mov	r3, #0
 813 0534 FB72     		strb	r3, [r7, #11]
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 814              		.loc 1 761 0
 815 0536 7B68     		ldr	r3, [r7, #4]
 816 0538 002B     		cmp	r3, #0
 817 053a 0DD1     		bne	.L36
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 818              		.loc 1 763 0
 819 053c 4FF42053 		mov	r3, #10240
 820 0540 C4F20003 		movt	r3, 16384
 821 0544 9B68     		ldr	r3, [r3, #8]
 822 0546 03F04003 		and	r3, r3, #64
 823 054a 002B     		cmp	r3, #0
 824 054c 19D1     		bne	.L37
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 825              		.loc 1 770 0
 826 054e 3B68     		ldr	r3, [r7, #0]
 827 0550 4FF00002 		mov	r2, #0
 828 0554 DA70     		strb	r2, [r3, #3]
 829 0556 14E0     		b	.L37
 830              	.L36:
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 831              		.loc 1 778 0
 832 0558 4FF42053 		mov	r3, #10240
 833 055c C4F20003 		movt	r3, 16384
 834 0560 9B68     		ldr	r3, [r3, #8]
 835 0562 03F04003 		and	r3, r3, #64
 836 0566 002B     		cmp	r3, #0
 837 0568 07D0     		beq	.L38
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 838              		.loc 1 780 0
 839 056a 3B68     		ldr	r3, [r7, #0]
 840 056c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 841 056e 1846     		mov	r0, r3
 842 0570 01F032FB 		bl	RTC_Bcd2ToByte
 843 0574 0346     		mov	r3, r0
 844 0576 FB60     		str	r3, [r7, #12]
 845 0578 03E0     		b	.L37
 846              	.L38:
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 847              		.loc 1 786 0
 848 057a 3B68     		ldr	r3, [r7, #0]
 849 057c 4FF00002 		mov	r2, #0
 850 0580 DA70     		strb	r2, [r3, #3]
 851              	.L37:
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 852              		.loc 1 794 0
 853 0582 7B68     		ldr	r3, [r7, #4]
 854 0584 002B     		cmp	r3, #0
 855 0586 12D0     		beq	.L39
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 856              		.loc 1 796 0
 857 0588 3B68     		ldr	r3, [r7, #0]
 858 058a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 859 058c 4FEA0342 		lsl	r2, r3, #16
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 860              		.loc 1 797 0
 861 0590 3B68     		ldr	r3, [r7, #0]
 862 0592 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 863 0594 4FEA0323 		lsl	r3, r3, #8
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 864              		.loc 1 796 0
 865 0598 1A43     		orrs	r2, r2, r3
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 866              		.loc 1 798 0
 867 059a 3B68     		ldr	r3, [r7, #0]
 868 059c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 869              		.loc 1 797 0
 870 059e 1A43     		orrs	r2, r2, r3
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 871              		.loc 1 799 0
 872 05a0 3B68     		ldr	r3, [r7, #0]
 873 05a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 874 05a4 4FEA0343 		lsl	r3, r3, #16
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 875              		.loc 1 796 0
 876 05a8 1343     		orrs	r3, r3, r2
 877 05aa FB60     		str	r3, [r7, #12]
 878 05ac 1EE0     		b	.L40
 879              	.L39:
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 880              		.loc 1 803 0
 881 05ae 3B68     		ldr	r3, [r7, #0]
 882 05b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 883 05b2 1846     		mov	r0, r3
 884 05b4 01F0EEFA 		bl	RTC_ByteToBcd2
 885 05b8 0346     		mov	r3, r0
 886 05ba 4FEA0344 		lsl	r4, r3, #16
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 887              		.loc 1 804 0
 888 05be 3B68     		ldr	r3, [r7, #0]
 889 05c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 890 05c2 1846     		mov	r0, r3
 891 05c4 01F0E6FA 		bl	RTC_ByteToBcd2
 892 05c8 0346     		mov	r3, r0
 893 05ca 4FEA0323 		lsl	r3, r3, #8
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 894              		.loc 1 803 0
 895 05ce 1C43     		orrs	r4, r4, r3
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 896              		.loc 1 805 0
 897 05d0 3B68     		ldr	r3, [r7, #0]
 898 05d2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 899 05d4 1846     		mov	r0, r3
 900 05d6 01F0DDFA 		bl	RTC_ByteToBcd2
 901 05da 0346     		mov	r3, r0
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 902              		.loc 1 804 0
 903 05dc 44EA0302 		orr	r2, r4, r3
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 904              		.loc 1 806 0
 905 05e0 3B68     		ldr	r3, [r7, #0]
 906 05e2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 907 05e4 4FEA0343 		lsl	r3, r3, #16
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 908              		.loc 1 803 0
 909 05e8 1343     		orrs	r3, r3, r2
 910 05ea FB60     		str	r3, [r7, #12]
 911              	.L40:
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 912              		.loc 1 810 0
 913 05ec 4FF42053 		mov	r3, #10240
 914 05f0 C4F20003 		movt	r3, 16384
 915 05f4 4FF0CA02 		mov	r2, #202
 916 05f8 5A62     		str	r2, [r3, #36]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 917              		.loc 1 811 0
 918 05fa 4FF42053 		mov	r3, #10240
 919 05fe C4F20003 		movt	r3, 16384
 920 0602 4FF05302 		mov	r2, #83
 921 0606 5A62     		str	r2, [r3, #36]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 922              		.loc 1 814 0
 923 0608 FFF7FEFF 		bl	RTC_EnterInitMode
 924 060c 0346     		mov	r3, r0
 925 060e 002B     		cmp	r3, #0
 926 0610 03D1     		bne	.L41
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 927              		.loc 1 816 0
 928 0612 4FF00003 		mov	r3, #0
 929 0616 FB72     		strb	r3, [r7, #11]
 930 0618 18E0     		b	.L42
 931              	.L41:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 932              		.loc 1 821 0
 933 061a 4FF42052 		mov	r2, #10240
 934 061e C4F20002 		movt	r2, 16384
 935 0622 F968     		ldr	r1, [r7, #12]
 936 0624 47F67F73 		movw	r3, #32639
 937 0628 C0F27F03 		movt	r3, 127
 938 062c 0B40     		ands	r3, r3, r1
 939 062e 1360     		str	r3, [r2, #0]
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 940              		.loc 1 824 0
 941 0630 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 942              		.loc 1 826 0
 943 0634 FFF7FEFF 		bl	RTC_WaitForSynchro
 944 0638 0346     		mov	r3, r0
 945 063a 002B     		cmp	r3, #0
 946 063c 03D1     		bne	.L43
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 947              		.loc 1 828 0
 948 063e 4FF00003 		mov	r3, #0
 949 0642 FB72     		strb	r3, [r7, #11]
 950 0644 02E0     		b	.L42
 951              	.L43:
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 952              		.loc 1 832 0
 953 0646 4FF00103 		mov	r3, #1
 954 064a FB72     		strb	r3, [r7, #11]
 955              	.L42:
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 956              		.loc 1 837 0
 957 064c 4FF42053 		mov	r3, #10240
 958 0650 C4F20003 		movt	r3, 16384
 959 0654 4FF0FF02 		mov	r2, #255
 960 0658 5A62     		str	r2, [r3, #36]
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 961              		.loc 1 839 0
 962 065a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 963              		.loc 1 840 0
 964 065c 1846     		mov	r0, r3
 965 065e 07F11407 		add	r7, r7, #20
 966 0662 BD46     		mov	sp, r7
 967 0664 90BD     		pop	{r4, r7, pc}
 968              		.cfi_endproc
 969              	.LFE119:
 971 0666 00BF     		.align	2
 972              		.global	RTC_TimeStructInit
 973              		.thumb
 974              		.thumb_func
 976              	RTC_TimeStructInit:
 977              	.LFB120:
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 978              		.loc 1 850 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 8
 981              		@ frame_needed = 1, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983 0668 80B4     		push	{r7}
 984              	.LCFI29:
 985              		.cfi_def_cfa_offset 4
 986              		.cfi_offset 7, -4
 987 066a 83B0     		sub	sp, sp, #12
 988              	.LCFI30:
 989              		.cfi_def_cfa_offset 16
 990 066c 00AF     		add	r7, sp, #0
 991              	.LCFI31:
 992              		.cfi_def_cfa_register 7
 993 066e 7860     		str	r0, [r7, #4]
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 994              		.loc 1 852 0
 995 0670 7B68     		ldr	r3, [r7, #4]
 996 0672 4FF00002 		mov	r2, #0
 997 0676 DA70     		strb	r2, [r3, #3]
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 998              		.loc 1 853 0
 999 0678 7B68     		ldr	r3, [r7, #4]
 1000 067a 4FF00002 		mov	r2, #0
 1001 067e 1A70     		strb	r2, [r3, #0]
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1002              		.loc 1 854 0
 1003 0680 7B68     		ldr	r3, [r7, #4]
 1004 0682 4FF00002 		mov	r2, #0
 1005 0686 5A70     		strb	r2, [r3, #1]
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1006              		.loc 1 855 0
 1007 0688 7B68     		ldr	r3, [r7, #4]
 1008 068a 4FF00002 		mov	r2, #0
 1009 068e 9A70     		strb	r2, [r3, #2]
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1010              		.loc 1 856 0
 1011 0690 07F10C07 		add	r7, r7, #12
 1012 0694 BD46     		mov	sp, r7
 1013 0696 80BC     		pop	{r7}
 1014 0698 7047     		bx	lr
 1015              		.cfi_endproc
 1016              	.LFE120:
 1018 069a 00BF     		.align	2
 1019              		.global	RTC_GetTime
 1020              		.thumb
 1021              		.thumb_func
 1023              	RTC_GetTime:
 1024              	.LFB121:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1025              		.loc 1 869 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 16
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 069c 80B5     		push	{r7, lr}
 1030              	.LCFI32:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 14, -4
 1033              		.cfi_offset 7, -8
 1034 069e 84B0     		sub	sp, sp, #16
 1035              	.LCFI33:
 1036              		.cfi_def_cfa_offset 24
 1037 06a0 00AF     		add	r7, sp, #0
 1038              	.LCFI34:
 1039              		.cfi_def_cfa_register 7
 1040 06a2 7860     		str	r0, [r7, #4]
 1041 06a4 3960     		str	r1, [r7, #0]
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1042              		.loc 1 870 0
 1043 06a6 4FF00003 		mov	r3, #0
 1044 06aa FB60     		str	r3, [r7, #12]
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1045              		.loc 1 876 0
 1046 06ac 4FF42053 		mov	r3, #10240
 1047 06b0 C4F20003 		movt	r3, 16384
 1048 06b4 1B68     		ldr	r3, [r3, #0]
 1049 06b6 1A46     		mov	r2, r3
 1050 06b8 47F67F73 		movw	r3, #32639
 1051 06bc C0F27F03 		movt	r3, 127
 1052 06c0 1340     		ands	r3, r3, r2
 1053 06c2 FB60     		str	r3, [r7, #12]
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1054              		.loc 1 879 0
 1055 06c4 FB68     		ldr	r3, [r7, #12]
 1056 06c6 03F47C13 		and	r3, r3, #4128768
 1057 06ca 4FEA1343 		lsr	r3, r3, #16
 1058 06ce DAB2     		uxtb	r2, r3
 1059 06d0 3B68     		ldr	r3, [r7, #0]
 1060 06d2 1A70     		strb	r2, [r3, #0]
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1061              		.loc 1 880 0
 1062 06d4 FB68     		ldr	r3, [r7, #12]
 1063 06d6 03F4FE43 		and	r3, r3, #32512
 1064 06da 4FEA1323 		lsr	r3, r3, #8
 1065 06de DAB2     		uxtb	r2, r3
 1066 06e0 3B68     		ldr	r3, [r7, #0]
 1067 06e2 5A70     		strb	r2, [r3, #1]
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1068              		.loc 1 881 0
 1069 06e4 FB68     		ldr	r3, [r7, #12]
 1070 06e6 DBB2     		uxtb	r3, r3
 1071 06e8 03F07F03 		and	r3, r3, #127
 1072 06ec DAB2     		uxtb	r2, r3
 1073 06ee 3B68     		ldr	r3, [r7, #0]
 1074 06f0 9A70     		strb	r2, [r3, #2]
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1075              		.loc 1 882 0
 1076 06f2 FB68     		ldr	r3, [r7, #12]
 1077 06f4 03F48003 		and	r3, r3, #4194304
 1078 06f8 4FEA1343 		lsr	r3, r3, #16
 1079 06fc DAB2     		uxtb	r2, r3
 1080 06fe 3B68     		ldr	r3, [r7, #0]
 1081 0700 DA70     		strb	r2, [r3, #3]
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1082              		.loc 1 885 0
 1083 0702 7B68     		ldr	r3, [r7, #4]
 1084 0704 002B     		cmp	r3, #0
 1085 0706 1AD1     		bne	.L45
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1086              		.loc 1 888 0
 1087 0708 3B68     		ldr	r3, [r7, #0]
 1088 070a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1089 070c 1846     		mov	r0, r3
 1090 070e 01F063FA 		bl	RTC_Bcd2ToByte
 1091 0712 0346     		mov	r3, r0
 1092 0714 1A46     		mov	r2, r3
 1093 0716 3B68     		ldr	r3, [r7, #0]
 1094 0718 1A70     		strb	r2, [r3, #0]
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1095              		.loc 1 889 0
 1096 071a 3B68     		ldr	r3, [r7, #0]
 1097 071c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1098 071e 1846     		mov	r0, r3
 1099 0720 01F05AFA 		bl	RTC_Bcd2ToByte
 1100 0724 0346     		mov	r3, r0
 1101 0726 1A46     		mov	r2, r3
 1102 0728 3B68     		ldr	r3, [r7, #0]
 1103 072a 5A70     		strb	r2, [r3, #1]
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1104              		.loc 1 890 0
 1105 072c 3B68     		ldr	r3, [r7, #0]
 1106 072e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1107 0730 1846     		mov	r0, r3
 1108 0732 01F051FA 		bl	RTC_Bcd2ToByte
 1109 0736 0346     		mov	r3, r0
 1110 0738 1A46     		mov	r2, r3
 1111 073a 3B68     		ldr	r3, [r7, #0]
 1112 073c 9A70     		strb	r2, [r3, #2]
 1113              	.L45:
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1114              		.loc 1 892 0
 1115 073e 07F11007 		add	r7, r7, #16
 1116 0742 BD46     		mov	sp, r7
 1117 0744 80BD     		pop	{r7, pc}
 1118              		.cfi_endproc
 1119              	.LFE121:
 1121 0746 00BF     		.align	2
 1122              		.global	RTC_GetSubSecond
 1123              		.thumb
 1124              		.thumb_func
 1126              	RTC_GetSubSecond:
 1127              	.LFB122:
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1128              		.loc 1 902 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 8
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
 1133 0748 80B4     		push	{r7}
 1134              	.LCFI35:
 1135              		.cfi_def_cfa_offset 4
 1136              		.cfi_offset 7, -4
 1137 074a 83B0     		sub	sp, sp, #12
 1138              	.LCFI36:
 1139              		.cfi_def_cfa_offset 16
 1140 074c 00AF     		add	r7, sp, #0
 1141              	.LCFI37:
 1142              		.cfi_def_cfa_register 7
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1143              		.loc 1 903 0
 1144 074e 4FF00003 		mov	r3, #0
 1145 0752 7B60     		str	r3, [r7, #4]
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1146              		.loc 1 906 0
 1147 0754 4FF42053 		mov	r3, #10240
 1148 0758 C4F20003 		movt	r3, 16384
 1149 075c 9B6A     		ldr	r3, [r3, #40]
 1150 075e 7B60     		str	r3, [r7, #4]
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1151              		.loc 1 909 0
 1152 0760 4FF42053 		mov	r3, #10240
 1153 0764 C4F20003 		movt	r3, 16384
 1154 0768 5B68     		ldr	r3, [r3, #4]
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1155              		.loc 1 911 0
 1156 076a 7B68     		ldr	r3, [r7, #4]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1157              		.loc 1 912 0
 1158 076c 1846     		mov	r0, r3
 1159 076e 07F10C07 		add	r7, r7, #12
 1160 0772 BD46     		mov	sp, r7
 1161 0774 80BC     		pop	{r7}
 1162 0776 7047     		bx	lr
 1163              		.cfi_endproc
 1164              	.LFE122:
 1166              		.align	2
 1167              		.global	RTC_SetDate
 1168              		.thumb
 1169              		.thumb_func
 1171              	RTC_SetDate:
 1172              	.LFB123:
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1173              		.loc 1 927 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 16
 1176              		@ frame_needed = 1, uses_anonymous_args = 0
 1177 0778 90B5     		push	{r4, r7, lr}
 1178              	.LCFI38:
 1179              		.cfi_def_cfa_offset 12
 1180              		.cfi_offset 14, -4
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 4, -12
 1183 077a 85B0     		sub	sp, sp, #20
 1184              	.LCFI39:
 1185              		.cfi_def_cfa_offset 32
 1186 077c 00AF     		add	r7, sp, #0
 1187              	.LCFI40:
 1188              		.cfi_def_cfa_register 7
 1189 077e 7860     		str	r0, [r7, #4]
 1190 0780 3960     		str	r1, [r7, #0]
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1191              		.loc 1 928 0
 1192 0782 4FF00003 		mov	r3, #0
 1193 0786 FB60     		str	r3, [r7, #12]
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1194              		.loc 1 929 0
 1195 0788 4FF00003 		mov	r3, #0
 1196 078c FB72     		strb	r3, [r7, #11]
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1197              		.loc 1 934 0
 1198 078e 7B68     		ldr	r3, [r7, #4]
 1199 0790 002B     		cmp	r3, #0
 1200 0792 0FD1     		bne	.L49
 1201              		.loc 1 934 0 is_stmt 0 discriminator 1
 1202 0794 3B68     		ldr	r3, [r7, #0]
 1203 0796 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1204 0798 03F01003 		and	r3, r3, #16
 1205 079c 002B     		cmp	r3, #0
 1206 079e 09D0     		beq	.L49
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1207              		.loc 1 936 0 is_stmt 1
 1208 07a0 3B68     		ldr	r3, [r7, #0]
 1209 07a2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1210 07a4 23F01003 		bic	r3, r3, #16
 1211 07a8 DBB2     		uxtb	r3, r3
 1212 07aa 03F10A03 		add	r3, r3, #10
 1213 07ae DAB2     		uxtb	r2, r3
 1214 07b0 3B68     		ldr	r3, [r7, #0]
 1215 07b2 5A70     		strb	r2, [r3, #1]
 1216              	.L49:
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1217              		.loc 1 938 0
 1218 07b4 7B68     		ldr	r3, [r7, #4]
 1219 07b6 002B     		cmp	r3, #0
 1220 07b8 0DD0     		beq	.L50
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1221              		.loc 1 947 0
 1222 07ba 3B68     		ldr	r3, [r7, #0]
 1223 07bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1224 07be 1846     		mov	r0, r3
 1225 07c0 01F00AFA 		bl	RTC_Bcd2ToByte
 1226 07c4 0346     		mov	r3, r0
 1227 07c6 FB60     		str	r3, [r7, #12]
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1228              		.loc 1 949 0
 1229 07c8 3B68     		ldr	r3, [r7, #0]
 1230 07ca 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1231 07cc 1846     		mov	r0, r3
 1232 07ce 01F003FA 		bl	RTC_Bcd2ToByte
 1233 07d2 0346     		mov	r3, r0
 1234 07d4 FB60     		str	r3, [r7, #12]
 1235              	.L50:
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1236              		.loc 1 955 0
 1237 07d6 7B68     		ldr	r3, [r7, #4]
 1238 07d8 002B     		cmp	r3, #0
 1239 07da 12D0     		beq	.L51
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1240              		.loc 1 957 0
 1241 07dc 3B68     		ldr	r3, [r7, #0]
 1242 07de DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1243 07e0 4FEA0342 		lsl	r2, r3, #16
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1244              		.loc 1 958 0
 1245 07e4 3B68     		ldr	r3, [r7, #0]
 1246 07e6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1247 07e8 4FEA0323 		lsl	r3, r3, #8
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1248              		.loc 1 957 0
 1249 07ec 1A43     		orrs	r2, r2, r3
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1250              		.loc 1 959 0
 1251 07ee 3B68     		ldr	r3, [r7, #0]
 1252 07f0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1253              		.loc 1 958 0
 1254 07f2 1A43     		orrs	r2, r2, r3
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1255              		.loc 1 960 0
 1256 07f4 3B68     		ldr	r3, [r7, #0]
 1257 07f6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1258 07f8 4FEA4333 		lsl	r3, r3, #13
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1259              		.loc 1 957 0
 1260 07fc 1343     		orrs	r3, r3, r2
 1261 07fe FB60     		str	r3, [r7, #12]
 1262 0800 1EE0     		b	.L52
 1263              	.L51:
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1264              		.loc 1 964 0
 1265 0802 3B68     		ldr	r3, [r7, #0]
 1266 0804 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1267 0806 1846     		mov	r0, r3
 1268 0808 01F0C4F9 		bl	RTC_ByteToBcd2
 1269 080c 0346     		mov	r3, r0
 1270 080e 4FEA0344 		lsl	r4, r3, #16
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1271              		.loc 1 965 0
 1272 0812 3B68     		ldr	r3, [r7, #0]
 1273 0814 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1274 0816 1846     		mov	r0, r3
 1275 0818 01F0BCF9 		bl	RTC_ByteToBcd2
 1276 081c 0346     		mov	r3, r0
 1277 081e 4FEA0323 		lsl	r3, r3, #8
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1278              		.loc 1 964 0
 1279 0822 1C43     		orrs	r4, r4, r3
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1280              		.loc 1 966 0
 1281 0824 3B68     		ldr	r3, [r7, #0]
 1282 0826 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1283 0828 1846     		mov	r0, r3
 1284 082a 01F0B3F9 		bl	RTC_ByteToBcd2
 1285 082e 0346     		mov	r3, r0
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1286              		.loc 1 965 0
 1287 0830 44EA0302 		orr	r2, r4, r3
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1288              		.loc 1 967 0
 1289 0834 3B68     		ldr	r3, [r7, #0]
 1290 0836 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1291 0838 4FEA4333 		lsl	r3, r3, #13
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1292              		.loc 1 964 0
 1293 083c 1343     		orrs	r3, r3, r2
 1294 083e FB60     		str	r3, [r7, #12]
 1295              	.L52:
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1296              		.loc 1 971 0
 1297 0840 4FF42053 		mov	r3, #10240
 1298 0844 C4F20003 		movt	r3, 16384
 1299 0848 4FF0CA02 		mov	r2, #202
 1300 084c 5A62     		str	r2, [r3, #36]
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1301              		.loc 1 972 0
 1302 084e 4FF42053 		mov	r3, #10240
 1303 0852 C4F20003 		movt	r3, 16384
 1304 0856 4FF05302 		mov	r2, #83
 1305 085a 5A62     		str	r2, [r3, #36]
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1306              		.loc 1 975 0
 1307 085c FFF7FEFF 		bl	RTC_EnterInitMode
 1308 0860 0346     		mov	r3, r0
 1309 0862 002B     		cmp	r3, #0
 1310 0864 03D1     		bne	.L53
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1311              		.loc 1 977 0
 1312 0866 4FF00003 		mov	r3, #0
 1313 086a FB72     		strb	r3, [r7, #11]
 1314 086c 17E0     		b	.L54
 1315              	.L53:
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1316              		.loc 1 982 0
 1317 086e 4FF42053 		mov	r3, #10240
 1318 0872 C4F20003 		movt	r3, 16384
 1319 0876 FA68     		ldr	r2, [r7, #12]
 1320 0878 22F07F42 		bic	r2, r2, #-16777216
 1321 087c 22F0C002 		bic	r2, r2, #192
 1322 0880 5A60     		str	r2, [r3, #4]
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1323              		.loc 1 985 0
 1324 0882 FFF7FEFF 		bl	RTC_ExitInitMode
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1325              		.loc 1 987 0
 1326 0886 FFF7FEFF 		bl	RTC_WaitForSynchro
 1327 088a 0346     		mov	r3, r0
 1328 088c 002B     		cmp	r3, #0
 1329 088e 03D1     		bne	.L55
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1330              		.loc 1 989 0
 1331 0890 4FF00003 		mov	r3, #0
 1332 0894 FB72     		strb	r3, [r7, #11]
 1333 0896 02E0     		b	.L54
 1334              	.L55:
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1335              		.loc 1 993 0
 1336 0898 4FF00103 		mov	r3, #1
 1337 089c FB72     		strb	r3, [r7, #11]
 1338              	.L54:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1339              		.loc 1 997 0
 1340 089e 4FF42053 		mov	r3, #10240
 1341 08a2 C4F20003 		movt	r3, 16384
 1342 08a6 4FF0FF02 		mov	r2, #255
 1343 08aa 5A62     		str	r2, [r3, #36]
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1344              		.loc 1 999 0
 1345 08ac FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1346              		.loc 1 1000 0
 1347 08ae 1846     		mov	r0, r3
 1348 08b0 07F11407 		add	r7, r7, #20
 1349 08b4 BD46     		mov	sp, r7
 1350 08b6 90BD     		pop	{r4, r7, pc}
 1351              		.cfi_endproc
 1352              	.LFE123:
 1354              		.align	2
 1355              		.global	RTC_DateStructInit
 1356              		.thumb
 1357              		.thumb_func
 1359              	RTC_DateStructInit:
 1360              	.LFB124:
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1361              		.loc 1 1010 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 8
 1364              		@ frame_needed = 1, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366 08b8 80B4     		push	{r7}
 1367              	.LCFI41:
 1368              		.cfi_def_cfa_offset 4
 1369              		.cfi_offset 7, -4
 1370 08ba 83B0     		sub	sp, sp, #12
 1371              	.LCFI42:
 1372              		.cfi_def_cfa_offset 16
 1373 08bc 00AF     		add	r7, sp, #0
 1374              	.LCFI43:
 1375              		.cfi_def_cfa_register 7
 1376 08be 7860     		str	r0, [r7, #4]
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1377              		.loc 1 1012 0
 1378 08c0 7B68     		ldr	r3, [r7, #4]
 1379 08c2 4FF00102 		mov	r2, #1
 1380 08c6 1A70     		strb	r2, [r3, #0]
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1381              		.loc 1 1013 0
 1382 08c8 7B68     		ldr	r3, [r7, #4]
 1383 08ca 4FF00102 		mov	r2, #1
 1384 08ce 9A70     		strb	r2, [r3, #2]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1385              		.loc 1 1014 0
 1386 08d0 7B68     		ldr	r3, [r7, #4]
 1387 08d2 4FF00102 		mov	r2, #1
 1388 08d6 5A70     		strb	r2, [r3, #1]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1389              		.loc 1 1015 0
 1390 08d8 7B68     		ldr	r3, [r7, #4]
 1391 08da 4FF00002 		mov	r2, #0
 1392 08de DA70     		strb	r2, [r3, #3]
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1393              		.loc 1 1016 0
 1394 08e0 07F10C07 		add	r7, r7, #12
 1395 08e4 BD46     		mov	sp, r7
 1396 08e6 80BC     		pop	{r7}
 1397 08e8 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE124:
 1401 08ea 00BF     		.align	2
 1402              		.global	RTC_GetDate
 1403              		.thumb
 1404              		.thumb_func
 1406              	RTC_GetDate:
 1407              	.LFB125:
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1408              		.loc 1 1029 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 16
 1411              		@ frame_needed = 1, uses_anonymous_args = 0
 1412 08ec 80B5     		push	{r7, lr}
 1413              	.LCFI44:
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 14, -4
 1416              		.cfi_offset 7, -8
 1417 08ee 84B0     		sub	sp, sp, #16
 1418              	.LCFI45:
 1419              		.cfi_def_cfa_offset 24
 1420 08f0 00AF     		add	r7, sp, #0
 1421              	.LCFI46:
 1422              		.cfi_def_cfa_register 7
 1423 08f2 7860     		str	r0, [r7, #4]
 1424 08f4 3960     		str	r1, [r7, #0]
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1425              		.loc 1 1030 0
 1426 08f6 4FF00003 		mov	r3, #0
 1427 08fa FB60     		str	r3, [r7, #12]
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1428              		.loc 1 1036 0
 1429 08fc 4FF42053 		mov	r3, #10240
 1430 0900 C4F20003 		movt	r3, 16384
 1431 0904 5B68     		ldr	r3, [r3, #4]
 1432 0906 23F07F43 		bic	r3, r3, #-16777216
 1433 090a 23F0C003 		bic	r3, r3, #192
 1434 090e FB60     		str	r3, [r7, #12]
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1435              		.loc 1 1039 0
 1436 0910 FB68     		ldr	r3, [r7, #12]
 1437 0912 03F47F03 		and	r3, r3, #16711680
 1438 0916 4FEA1343 		lsr	r3, r3, #16
 1439 091a DAB2     		uxtb	r2, r3
 1440 091c 3B68     		ldr	r3, [r7, #0]
 1441 091e DA70     		strb	r2, [r3, #3]
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1442              		.loc 1 1040 0
 1443 0920 FB68     		ldr	r3, [r7, #12]
 1444 0922 03F4F853 		and	r3, r3, #7936
 1445 0926 4FEA1323 		lsr	r3, r3, #8
 1446 092a DAB2     		uxtb	r2, r3
 1447 092c 3B68     		ldr	r3, [r7, #0]
 1448 092e 5A70     		strb	r2, [r3, #1]
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1449              		.loc 1 1041 0
 1450 0930 FB68     		ldr	r3, [r7, #12]
 1451 0932 DBB2     		uxtb	r3, r3
 1452 0934 03F03F03 		and	r3, r3, #63
 1453 0938 DAB2     		uxtb	r2, r3
 1454 093a 3B68     		ldr	r3, [r7, #0]
 1455 093c 9A70     		strb	r2, [r3, #2]
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1456              		.loc 1 1042 0
 1457 093e FB68     		ldr	r3, [r7, #12]
 1458 0940 03F46043 		and	r3, r3, #57344
 1459 0944 4FEA5333 		lsr	r3, r3, #13
 1460 0948 DAB2     		uxtb	r2, r3
 1461 094a 3B68     		ldr	r3, [r7, #0]
 1462 094c 1A70     		strb	r2, [r3, #0]
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1463              		.loc 1 1045 0
 1464 094e 7B68     		ldr	r3, [r7, #4]
 1465 0950 002B     		cmp	r3, #0
 1466 0952 1AD1     		bne	.L57
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1467              		.loc 1 1048 0
 1468 0954 3B68     		ldr	r3, [r7, #0]
 1469 0956 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1470 0958 1846     		mov	r0, r3
 1471 095a 01F03DF9 		bl	RTC_Bcd2ToByte
 1472 095e 0346     		mov	r3, r0
 1473 0960 1A46     		mov	r2, r3
 1474 0962 3B68     		ldr	r3, [r7, #0]
 1475 0964 DA70     		strb	r2, [r3, #3]
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1476              		.loc 1 1049 0
 1477 0966 3B68     		ldr	r3, [r7, #0]
 1478 0968 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1479 096a 1846     		mov	r0, r3
 1480 096c 01F034F9 		bl	RTC_Bcd2ToByte
 1481 0970 0346     		mov	r3, r0
 1482 0972 1A46     		mov	r2, r3
 1483 0974 3B68     		ldr	r3, [r7, #0]
 1484 0976 5A70     		strb	r2, [r3, #1]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1485              		.loc 1 1050 0
 1486 0978 3B68     		ldr	r3, [r7, #0]
 1487 097a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1488 097c 1846     		mov	r0, r3
 1489 097e 01F02BF9 		bl	RTC_Bcd2ToByte
 1490 0982 0346     		mov	r3, r0
 1491 0984 1A46     		mov	r2, r3
 1492 0986 3B68     		ldr	r3, [r7, #0]
 1493 0988 9A70     		strb	r2, [r3, #2]
 1494              	.L57:
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1495              		.loc 1 1052 0
 1496 098a 07F11007 		add	r7, r7, #16
 1497 098e BD46     		mov	sp, r7
 1498 0990 80BD     		pop	{r7, pc}
 1499              		.cfi_endproc
 1500              	.LFE125:
 1502 0992 00BF     		.align	2
 1503              		.global	RTC_SetAlarm
 1504              		.thumb
 1505              		.thumb_func
 1507              	RTC_SetAlarm:
 1508              	.LFB126:
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1509              		.loc 1 1089 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 24
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0994 90B5     		push	{r4, r7, lr}
 1514              	.LCFI47:
 1515              		.cfi_def_cfa_offset 12
 1516              		.cfi_offset 14, -4
 1517              		.cfi_offset 7, -8
 1518              		.cfi_offset 4, -12
 1519 0996 87B0     		sub	sp, sp, #28
 1520              	.LCFI48:
 1521              		.cfi_def_cfa_offset 40
 1522 0998 00AF     		add	r7, sp, #0
 1523              	.LCFI49:
 1524              		.cfi_def_cfa_register 7
 1525 099a F860     		str	r0, [r7, #12]
 1526 099c B960     		str	r1, [r7, #8]
 1527 099e 7A60     		str	r2, [r7, #4]
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1528              		.loc 1 1090 0
 1529 09a0 4FF00003 		mov	r3, #0
 1530 09a4 7B61     		str	r3, [r7, #20]
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1531              		.loc 1 1098 0
 1532 09a6 FB68     		ldr	r3, [r7, #12]
 1533 09a8 002B     		cmp	r3, #0
 1534 09aa 0DD1     		bne	.L60
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1535              		.loc 1 1100 0
 1536 09ac 4FF42053 		mov	r3, #10240
 1537 09b0 C4F20003 		movt	r3, 16384
 1538 09b4 9B68     		ldr	r3, [r3, #8]
 1539 09b6 03F04003 		and	r3, r3, #64
 1540 09ba 002B     		cmp	r3, #0
 1541 09bc 2CD1     		bne	.L62
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1542              		.loc 1 1107 0
 1543 09be 7B68     		ldr	r3, [r7, #4]
 1544 09c0 4FF00002 		mov	r2, #0
 1545 09c4 DA70     		strb	r2, [r3, #3]
 1546 09c6 27E0     		b	.L62
 1547              	.L60:
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1548              		.loc 1 1124 0
 1549 09c8 4FF42053 		mov	r3, #10240
 1550 09cc C4F20003 		movt	r3, 16384
 1551 09d0 9B68     		ldr	r3, [r3, #8]
 1552 09d2 03F04003 		and	r3, r3, #64
 1553 09d6 002B     		cmp	r3, #0
 1554 09d8 07D0     		beq	.L63
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1555              		.loc 1 1126 0
 1556 09da 7B68     		ldr	r3, [r7, #4]
 1557 09dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1558 09de 1846     		mov	r0, r3
 1559 09e0 01F0FAF8 		bl	RTC_Bcd2ToByte
 1560 09e4 0346     		mov	r3, r0
 1561 09e6 7B61     		str	r3, [r7, #20]
 1562 09e8 03E0     		b	.L64
 1563              	.L63:
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1564              		.loc 1 1132 0
 1565 09ea 7B68     		ldr	r3, [r7, #4]
 1566 09ec 4FF00002 		mov	r2, #0
 1567 09f0 DA70     		strb	r2, [r3, #3]
 1568              	.L64:
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1569              		.loc 1 1139 0
 1570 09f2 7B68     		ldr	r3, [r7, #4]
 1571 09f4 9B68     		ldr	r3, [r3, #8]
 1572 09f6 002B     		cmp	r3, #0
 1573 09f8 07D1     		bne	.L65
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1574              		.loc 1 1141 0
 1575 09fa 7B68     		ldr	r3, [r7, #4]
 1576 09fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1577 09fe 1846     		mov	r0, r3
 1578 0a00 01F0EAF8 		bl	RTC_Bcd2ToByte
 1579 0a04 0346     		mov	r3, r0
 1580 0a06 7B61     		str	r3, [r7, #20]
 1581 0a08 06E0     		b	.L62
 1582              	.L65:
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1583              		.loc 1 1146 0
 1584 0a0a 7B68     		ldr	r3, [r7, #4]
 1585 0a0c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1586 0a0e 1846     		mov	r0, r3
 1587 0a10 01F0E2F8 		bl	RTC_Bcd2ToByte
 1588 0a14 0346     		mov	r3, r0
 1589 0a16 7B61     		str	r3, [r7, #20]
 1590              	.L62:
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1591              		.loc 1 1152 0
 1592 0a18 FB68     		ldr	r3, [r7, #12]
 1593 0a1a 002B     		cmp	r3, #0
 1594 0a1c 1DD0     		beq	.L66
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1595              		.loc 1 1154 0
 1596 0a1e 7B68     		ldr	r3, [r7, #4]
 1597 0a20 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1598 0a22 4FEA0342 		lsl	r2, r3, #16
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1599              		.loc 1 1155 0
 1600 0a26 7B68     		ldr	r3, [r7, #4]
 1601 0a28 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1602 0a2a 4FEA0323 		lsl	r3, r3, #8
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1603              		.loc 1 1154 0
 1604 0a2e 1A43     		orrs	r2, r2, r3
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1605              		.loc 1 1156 0
 1606 0a30 7B68     		ldr	r3, [r7, #4]
 1607 0a32 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1608              		.loc 1 1155 0
 1609 0a34 1A43     		orrs	r2, r2, r3
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1610              		.loc 1 1157 0
 1611 0a36 7B68     		ldr	r3, [r7, #4]
 1612 0a38 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1613 0a3a 4FEA0343 		lsl	r3, r3, #16
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1614              		.loc 1 1156 0
 1615 0a3e 1A43     		orrs	r2, r2, r3
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1616              		.loc 1 1158 0
 1617 0a40 7B68     		ldr	r3, [r7, #4]
 1618 0a42 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1619 0a44 4FEA0363 		lsl	r3, r3, #24
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1620              		.loc 1 1157 0
 1621 0a48 1A43     		orrs	r2, r2, r3
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1622              		.loc 1 1159 0
 1623 0a4a 7B68     		ldr	r3, [r7, #4]
 1624 0a4c 9B68     		ldr	r3, [r3, #8]
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1625              		.loc 1 1158 0
 1626 0a4e 1A43     		orrs	r2, r2, r3
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1627              		.loc 1 1160 0
 1628 0a50 7B68     		ldr	r3, [r7, #4]
 1629 0a52 5B68     		ldr	r3, [r3, #4]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1630              		.loc 1 1154 0
 1631 0a54 1343     		orrs	r3, r3, r2
 1632 0a56 7B61     		str	r3, [r7, #20]
 1633 0a58 2FE0     		b	.L67
 1634              	.L66:
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1635              		.loc 1 1164 0
 1636 0a5a 7B68     		ldr	r3, [r7, #4]
 1637 0a5c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1638 0a5e 1846     		mov	r0, r3
 1639 0a60 01F098F8 		bl	RTC_ByteToBcd2
 1640 0a64 0346     		mov	r3, r0
 1641 0a66 4FEA0344 		lsl	r4, r3, #16
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1642              		.loc 1 1165 0
 1643 0a6a 7B68     		ldr	r3, [r7, #4]
 1644 0a6c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1645 0a6e 1846     		mov	r0, r3
 1646 0a70 01F090F8 		bl	RTC_ByteToBcd2
 1647 0a74 0346     		mov	r3, r0
 1648 0a76 4FEA0323 		lsl	r3, r3, #8
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1649              		.loc 1 1164 0
 1650 0a7a 1C43     		orrs	r4, r4, r3
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1651              		.loc 1 1166 0
 1652 0a7c 7B68     		ldr	r3, [r7, #4]
 1653 0a7e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1654 0a80 1846     		mov	r0, r3
 1655 0a82 01F087F8 		bl	RTC_ByteToBcd2
 1656 0a86 0346     		mov	r3, r0
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1657              		.loc 1 1165 0
 1658 0a88 44EA0302 		orr	r2, r4, r3
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1659              		.loc 1 1167 0
 1660 0a8c 7B68     		ldr	r3, [r7, #4]
 1661 0a8e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1662 0a90 4FEA0343 		lsl	r3, r3, #16
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1663              		.loc 1 1166 0
 1664 0a94 42EA0304 		orr	r4, r2, r3
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1665              		.loc 1 1168 0
 1666 0a98 7B68     		ldr	r3, [r7, #4]
 1667 0a9a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1668 0a9c 1846     		mov	r0, r3
 1669 0a9e 01F079F8 		bl	RTC_ByteToBcd2
 1670 0aa2 0346     		mov	r3, r0
 1671 0aa4 4FEA0363 		lsl	r3, r3, #24
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1672              		.loc 1 1167 0
 1673 0aa8 44EA0302 		orr	r2, r4, r3
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1674              		.loc 1 1169 0
 1675 0aac 7B68     		ldr	r3, [r7, #4]
 1676 0aae 9B68     		ldr	r3, [r3, #8]
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1677              		.loc 1 1168 0
 1678 0ab0 1A43     		orrs	r2, r2, r3
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1679              		.loc 1 1170 0
 1680 0ab2 7B68     		ldr	r3, [r7, #4]
 1681 0ab4 5B68     		ldr	r3, [r3, #4]
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1682              		.loc 1 1164 0
 1683 0ab6 1343     		orrs	r3, r3, r2
 1684 0ab8 7B61     		str	r3, [r7, #20]
 1685              	.L67:
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1686              		.loc 1 1174 0
 1687 0aba 4FF42053 		mov	r3, #10240
 1688 0abe C4F20003 		movt	r3, 16384
 1689 0ac2 4FF0CA02 		mov	r2, #202
 1690 0ac6 5A62     		str	r2, [r3, #36]
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1691              		.loc 1 1175 0
 1692 0ac8 4FF42053 		mov	r3, #10240
 1693 0acc C4F20003 		movt	r3, 16384
 1694 0ad0 4FF05302 		mov	r2, #83
 1695 0ad4 5A62     		str	r2, [r3, #36]
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1696              		.loc 1 1178 0
 1697 0ad6 BB68     		ldr	r3, [r7, #8]
 1698 0ad8 B3F5807F 		cmp	r3, #256
 1699 0adc 06D1     		bne	.L68
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1700              		.loc 1 1180 0
 1701 0ade 4FF42053 		mov	r3, #10240
 1702 0ae2 C4F20003 		movt	r3, 16384
 1703 0ae6 7A69     		ldr	r2, [r7, #20]
 1704 0ae8 DA61     		str	r2, [r3, #28]
 1705 0aea 05E0     		b	.L69
 1706              	.L68:
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1707              		.loc 1 1184 0
 1708 0aec 4FF42053 		mov	r3, #10240
 1709 0af0 C4F20003 		movt	r3, 16384
 1710 0af4 7A69     		ldr	r2, [r7, #20]
 1711 0af6 1A62     		str	r2, [r3, #32]
 1712              	.L69:
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1713              		.loc 1 1188 0
 1714 0af8 4FF42053 		mov	r3, #10240
 1715 0afc C4F20003 		movt	r3, 16384
 1716 0b00 4FF0FF02 		mov	r2, #255
 1717 0b04 5A62     		str	r2, [r3, #36]
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1718              		.loc 1 1189 0
 1719 0b06 07F11C07 		add	r7, r7, #28
 1720 0b0a BD46     		mov	sp, r7
 1721 0b0c 90BD     		pop	{r4, r7, pc}
 1722              		.cfi_endproc
 1723              	.LFE126:
 1725 0b0e 00BF     		.align	2
 1726              		.global	RTC_AlarmStructInit
 1727              		.thumb
 1728              		.thumb_func
 1730              	RTC_AlarmStructInit:
 1731              	.LFB127:
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1732              		.loc 1 1200 0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 8
 1735              		@ frame_needed = 1, uses_anonymous_args = 0
 1736              		@ link register save eliminated.
 1737 0b10 80B4     		push	{r7}
 1738              	.LCFI50:
 1739              		.cfi_def_cfa_offset 4
 1740              		.cfi_offset 7, -4
 1741 0b12 83B0     		sub	sp, sp, #12
 1742              	.LCFI51:
 1743              		.cfi_def_cfa_offset 16
 1744 0b14 00AF     		add	r7, sp, #0
 1745              	.LCFI52:
 1746              		.cfi_def_cfa_register 7
 1747 0b16 7860     		str	r0, [r7, #4]
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1748              		.loc 1 1202 0
 1749 0b18 7B68     		ldr	r3, [r7, #4]
 1750 0b1a 4FF00002 		mov	r2, #0
 1751 0b1e DA70     		strb	r2, [r3, #3]
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1752              		.loc 1 1203 0
 1753 0b20 7B68     		ldr	r3, [r7, #4]
 1754 0b22 4FF00002 		mov	r2, #0
 1755 0b26 1A70     		strb	r2, [r3, #0]
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1756              		.loc 1 1204 0
 1757 0b28 7B68     		ldr	r3, [r7, #4]
 1758 0b2a 4FF00002 		mov	r2, #0
 1759 0b2e 5A70     		strb	r2, [r3, #1]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1760              		.loc 1 1205 0
 1761 0b30 7B68     		ldr	r3, [r7, #4]
 1762 0b32 4FF00002 		mov	r2, #0
 1763 0b36 9A70     		strb	r2, [r3, #2]
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1764              		.loc 1 1208 0
 1765 0b38 7B68     		ldr	r3, [r7, #4]
 1766 0b3a 4FF00002 		mov	r2, #0
 1767 0b3e 9A60     		str	r2, [r3, #8]
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1768              		.loc 1 1209 0
 1769 0b40 7B68     		ldr	r3, [r7, #4]
 1770 0b42 4FF00102 		mov	r2, #1
 1771 0b46 1A73     		strb	r2, [r3, #12]
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1772              		.loc 1 1212 0
 1773 0b48 7B68     		ldr	r3, [r7, #4]
 1774 0b4a 4FF00002 		mov	r2, #0
 1775 0b4e 5A60     		str	r2, [r3, #4]
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1776              		.loc 1 1213 0
 1777 0b50 07F10C07 		add	r7, r7, #12
 1778 0b54 BD46     		mov	sp, r7
 1779 0b56 80BC     		pop	{r7}
 1780 0b58 7047     		bx	lr
 1781              		.cfi_endproc
 1782              	.LFE127:
 1784 0b5a 00BF     		.align	2
 1785              		.global	RTC_GetAlarm
 1786              		.thumb
 1787              		.thumb_func
 1789              	RTC_GetAlarm:
 1790              	.LFB128:
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1791              		.loc 1 1230 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 24
 1794              		@ frame_needed = 1, uses_anonymous_args = 0
 1795 0b5c 80B5     		push	{r7, lr}
 1796              	.LCFI53:
 1797              		.cfi_def_cfa_offset 8
 1798              		.cfi_offset 14, -4
 1799              		.cfi_offset 7, -8
 1800 0b5e 86B0     		sub	sp, sp, #24
 1801              	.LCFI54:
 1802              		.cfi_def_cfa_offset 32
 1803 0b60 00AF     		add	r7, sp, #0
 1804              	.LCFI55:
 1805              		.cfi_def_cfa_register 7
 1806 0b62 F860     		str	r0, [r7, #12]
 1807 0b64 B960     		str	r1, [r7, #8]
 1808 0b66 7A60     		str	r2, [r7, #4]
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1809              		.loc 1 1231 0
 1810 0b68 4FF00003 		mov	r3, #0
 1811 0b6c 7B61     		str	r3, [r7, #20]
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1812              		.loc 1 1238 0
 1813 0b6e BB68     		ldr	r3, [r7, #8]
 1814 0b70 B3F5807F 		cmp	r3, #256
 1815 0b74 06D1     		bne	.L72
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1816              		.loc 1 1240 0
 1817 0b76 4FF42053 		mov	r3, #10240
 1818 0b7a C4F20003 		movt	r3, 16384
 1819 0b7e DB69     		ldr	r3, [r3, #28]
 1820 0b80 7B61     		str	r3, [r7, #20]
 1821 0b82 05E0     		b	.L73
 1822              	.L72:
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1823              		.loc 1 1244 0
 1824 0b84 4FF42053 		mov	r3, #10240
 1825 0b88 C4F20003 		movt	r3, 16384
 1826 0b8c 1B6A     		ldr	r3, [r3, #32]
 1827 0b8e 7B61     		str	r3, [r7, #20]
 1828              	.L73:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1829              		.loc 1 1248 0
 1830 0b90 7B69     		ldr	r3, [r7, #20]
 1831 0b92 03F47C13 		and	r3, r3, #4128768
 1832 0b96 4FEA1343 		lsr	r3, r3, #16
 1833 0b9a DAB2     		uxtb	r2, r3
 1834 0b9c 7B68     		ldr	r3, [r7, #4]
 1835 0b9e 1A70     		strb	r2, [r3, #0]
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1836              		.loc 1 1250 0
 1837 0ba0 7B69     		ldr	r3, [r7, #20]
 1838 0ba2 03F4FE43 		and	r3, r3, #32512
 1839 0ba6 4FEA1323 		lsr	r3, r3, #8
 1840 0baa DAB2     		uxtb	r2, r3
 1841 0bac 7B68     		ldr	r3, [r7, #4]
 1842 0bae 5A70     		strb	r2, [r3, #1]
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1843              		.loc 1 1252 0
 1844 0bb0 7B69     		ldr	r3, [r7, #20]
 1845 0bb2 DBB2     		uxtb	r3, r3
 1846 0bb4 03F07F03 		and	r3, r3, #127
 1847 0bb8 DAB2     		uxtb	r2, r3
 1848 0bba 7B68     		ldr	r3, [r7, #4]
 1849 0bbc 9A70     		strb	r2, [r3, #2]
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1850              		.loc 1 1254 0
 1851 0bbe 7B69     		ldr	r3, [r7, #20]
 1852 0bc0 03F48003 		and	r3, r3, #4194304
 1853 0bc4 4FEA1343 		lsr	r3, r3, #16
 1854 0bc8 DAB2     		uxtb	r2, r3
 1855 0bca 7B68     		ldr	r3, [r7, #4]
 1856 0bcc DA70     		strb	r2, [r3, #3]
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1857              		.loc 1 1255 0
 1858 0bce 7B69     		ldr	r3, [r7, #20]
 1859 0bd0 03F07C53 		and	r3, r3, #1056964608
 1860 0bd4 4FEA1363 		lsr	r3, r3, #24
 1861 0bd8 DAB2     		uxtb	r2, r3
 1862 0bda 7B68     		ldr	r3, [r7, #4]
 1863 0bdc 1A73     		strb	r2, [r3, #12]
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1864              		.loc 1 1256 0
 1865 0bde 7B69     		ldr	r3, [r7, #20]
 1866 0be0 03F08042 		and	r2, r3, #1073741824
 1867 0be4 7B68     		ldr	r3, [r7, #4]
 1868 0be6 9A60     		str	r2, [r3, #8]
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1869              		.loc 1 1257 0
 1870 0be8 7B69     		ldr	r3, [r7, #20]
 1871 0bea 03F08032 		and	r2, r3, #-2139062144
 1872 0bee 7B68     		ldr	r3, [r7, #4]
 1873 0bf0 5A60     		str	r2, [r3, #4]
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1874              		.loc 1 1259 0
 1875 0bf2 FB68     		ldr	r3, [r7, #12]
 1876 0bf4 002B     		cmp	r3, #0
 1877 0bf6 23D1     		bne	.L71
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1878              		.loc 1 1261 0
 1879 0bf8 7B68     		ldr	r3, [r7, #4]
 1880 0bfa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1881 0bfc 1846     		mov	r0, r3
 1882 0bfe 00F0EBFF 		bl	RTC_Bcd2ToByte
 1883 0c02 0346     		mov	r3, r0
 1884 0c04 1A46     		mov	r2, r3
 1885 0c06 7B68     		ldr	r3, [r7, #4]
 1886 0c08 1A70     		strb	r2, [r3, #0]
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1887              		.loc 1 1263 0
 1888 0c0a 7B68     		ldr	r3, [r7, #4]
 1889 0c0c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1890 0c0e 1846     		mov	r0, r3
 1891 0c10 00F0E2FF 		bl	RTC_Bcd2ToByte
 1892 0c14 0346     		mov	r3, r0
 1893 0c16 1A46     		mov	r2, r3
 1894 0c18 7B68     		ldr	r3, [r7, #4]
 1895 0c1a 5A70     		strb	r2, [r3, #1]
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1896              		.loc 1 1265 0
 1897 0c1c 7B68     		ldr	r3, [r7, #4]
 1898 0c1e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1899 0c20 1846     		mov	r0, r3
 1900 0c22 00F0D9FF 		bl	RTC_Bcd2ToByte
 1901 0c26 0346     		mov	r3, r0
 1902 0c28 1A46     		mov	r2, r3
 1903 0c2a 7B68     		ldr	r3, [r7, #4]
 1904 0c2c 9A70     		strb	r2, [r3, #2]
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1905              		.loc 1 1267 0
 1906 0c2e 7B68     		ldr	r3, [r7, #4]
 1907 0c30 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1908 0c32 1846     		mov	r0, r3
 1909 0c34 00F0D0FF 		bl	RTC_Bcd2ToByte
 1910 0c38 0346     		mov	r3, r0
 1911 0c3a 1A46     		mov	r2, r3
 1912 0c3c 7B68     		ldr	r3, [r7, #4]
 1913 0c3e 1A73     		strb	r2, [r3, #12]
 1914              	.L71:
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1915              		.loc 1 1269 0
 1916 0c40 07F11807 		add	r7, r7, #24
 1917 0c44 BD46     		mov	sp, r7
 1918 0c46 80BD     		pop	{r7, pc}
 1919              		.cfi_endproc
 1920              	.LFE128:
 1922              		.align	2
 1923              		.global	RTC_AlarmCmd
 1924              		.thumb
 1925              		.thumb_func
 1927              	RTC_AlarmCmd:
 1928              	.LFB129:
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1929              		.loc 1 1284 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 24
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933              		@ link register save eliminated.
 1934 0c48 80B4     		push	{r7}
 1935              	.LCFI56:
 1936              		.cfi_def_cfa_offset 4
 1937              		.cfi_offset 7, -4
 1938 0c4a 87B0     		sub	sp, sp, #28
 1939              	.LCFI57:
 1940              		.cfi_def_cfa_offset 32
 1941 0c4c 00AF     		add	r7, sp, #0
 1942              	.LCFI58:
 1943              		.cfi_def_cfa_register 7
 1944 0c4e 7860     		str	r0, [r7, #4]
 1945 0c50 0B46     		mov	r3, r1
 1946 0c52 FB70     		strb	r3, [r7, #3]
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1947              		.loc 1 1285 0
 1948 0c54 4FF00003 		mov	r3, #0
 1949 0c58 FB60     		str	r3, [r7, #12]
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1950              		.loc 1 1286 0
 1951 0c5a 4FF00003 		mov	r3, #0
 1952 0c5e 3B61     		str	r3, [r7, #16]
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1953              		.loc 1 1287 0
 1954 0c60 4FF00003 		mov	r3, #0
 1955 0c64 FB75     		strb	r3, [r7, #23]
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1956              		.loc 1 1294 0
 1957 0c66 4FF42053 		mov	r3, #10240
 1958 0c6a C4F20003 		movt	r3, 16384
 1959 0c6e 4FF0CA02 		mov	r2, #202
 1960 0c72 5A62     		str	r2, [r3, #36]
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1961              		.loc 1 1295 0
 1962 0c74 4FF42053 		mov	r3, #10240
 1963 0c78 C4F20003 		movt	r3, 16384
 1964 0c7c 4FF05302 		mov	r2, #83
 1965 0c80 5A62     		str	r2, [r3, #36]
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1966              		.loc 1 1298 0
 1967 0c82 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1968 0c84 002B     		cmp	r3, #0
 1969 0c86 10D0     		beq	.L76
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1970              		.loc 1 1300 0
 1971 0c88 4FF42053 		mov	r3, #10240
 1972 0c8c C4F20003 		movt	r3, 16384
 1973 0c90 4FF42052 		mov	r2, #10240
 1974 0c94 C4F20002 		movt	r2, 16384
 1975 0c98 9268     		ldr	r2, [r2, #8]
 1976 0c9a 1146     		mov	r1, r2
 1977 0c9c 7A68     		ldr	r2, [r7, #4]
 1978 0c9e 0A43     		orrs	r2, r2, r1
 1979 0ca0 9A60     		str	r2, [r3, #8]
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1980              		.loc 1 1302 0
 1981 0ca2 4FF00103 		mov	r3, #1
 1982 0ca6 FB75     		strb	r3, [r7, #23]
 1983 0ca8 37E0     		b	.L77
 1984              	.L76:
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1985              		.loc 1 1307 0
 1986 0caa 4FF42053 		mov	r3, #10240
 1987 0cae C4F20003 		movt	r3, 16384
 1988 0cb2 4FF42052 		mov	r2, #10240
 1989 0cb6 C4F20002 		movt	r2, 16384
 1990 0cba 9268     		ldr	r2, [r2, #8]
 1991 0cbc 1146     		mov	r1, r2
 1992 0cbe 7A68     		ldr	r2, [r7, #4]
 1993 0cc0 6FEA0202 		mvn	r2, r2
 1994 0cc4 0A40     		ands	r2, r2, r1
 1995 0cc6 9A60     		str	r2, [r3, #8]
 1996              	.L79:
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1997              		.loc 1 1312 0 discriminator 1
 1998 0cc8 4FF42053 		mov	r3, #10240
 1999 0ccc C4F20003 		movt	r3, 16384
 2000 0cd0 DB68     		ldr	r3, [r3, #12]
 2001 0cd2 1A46     		mov	r2, r3
 2002 0cd4 7B68     		ldr	r3, [r7, #4]
 2003 0cd6 4FEA1323 		lsr	r3, r3, #8
 2004 0cda 1340     		ands	r3, r3, r2
 2005 0cdc 3B61     		str	r3, [r7, #16]
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2006              		.loc 1 1313 0 discriminator 1
 2007 0cde FB68     		ldr	r3, [r7, #12]
 2008 0ce0 03F10103 		add	r3, r3, #1
 2009 0ce4 FB60     		str	r3, [r7, #12]
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2010              		.loc 1 1314 0 discriminator 1
 2011 0ce6 FB68     		ldr	r3, [r7, #12]
 2012 0ce8 B3F5803F 		cmp	r3, #65536
 2013 0cec 02D0     		beq	.L78
 2014 0cee 3B69     		ldr	r3, [r7, #16]
 2015 0cf0 002B     		cmp	r3, #0
 2016 0cf2 E9D0     		beq	.L79
 2017              	.L78:
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2018              		.loc 1 1316 0
 2019 0cf4 4FF42053 		mov	r3, #10240
 2020 0cf8 C4F20003 		movt	r3, 16384
 2021 0cfc DB68     		ldr	r3, [r3, #12]
 2022 0cfe 1A46     		mov	r2, r3
 2023 0d00 7B68     		ldr	r3, [r7, #4]
 2024 0d02 4FEA1323 		lsr	r3, r3, #8
 2025 0d06 1340     		ands	r3, r3, r2
 2026 0d08 002B     		cmp	r3, #0
 2027 0d0a 03D1     		bne	.L80
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2028              		.loc 1 1318 0
 2029 0d0c 4FF00003 		mov	r3, #0
 2030 0d10 FB75     		strb	r3, [r7, #23]
 2031 0d12 02E0     		b	.L77
 2032              	.L80:
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2033              		.loc 1 1322 0
 2034 0d14 4FF00103 		mov	r3, #1
 2035 0d18 FB75     		strb	r3, [r7, #23]
 2036              	.L77:
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2037              		.loc 1 1327 0
 2038 0d1a 4FF42053 		mov	r3, #10240
 2039 0d1e C4F20003 		movt	r3, 16384
 2040 0d22 4FF0FF02 		mov	r2, #255
 2041 0d26 5A62     		str	r2, [r3, #36]
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2042              		.loc 1 1329 0
 2043 0d28 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2044              		.loc 1 1330 0
 2045 0d2a 1846     		mov	r0, r3
 2046 0d2c 07F11C07 		add	r7, r7, #28
 2047 0d30 BD46     		mov	sp, r7
 2048 0d32 80BC     		pop	{r7}
 2049 0d34 7047     		bx	lr
 2050              		.cfi_endproc
 2051              	.LFE129:
 2053 0d36 00BF     		.align	2
 2054              		.global	RTC_AlarmSubSecondConfig
 2055              		.thumb
 2056              		.thumb_func
 2058              	RTC_AlarmSubSecondConfig:
 2059              	.LFB130:
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2060              		.loc 1 1378 0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 24
 2063              		@ frame_needed = 1, uses_anonymous_args = 0
 2064              		@ link register save eliminated.
 2065 0d38 80B4     		push	{r7}
 2066              	.LCFI59:
 2067              		.cfi_def_cfa_offset 4
 2068              		.cfi_offset 7, -4
 2069 0d3a 87B0     		sub	sp, sp, #28
 2070              	.LCFI60:
 2071              		.cfi_def_cfa_offset 32
 2072 0d3c 00AF     		add	r7, sp, #0
 2073              	.LCFI61:
 2074              		.cfi_def_cfa_register 7
 2075 0d3e F860     		str	r0, [r7, #12]
 2076 0d40 B960     		str	r1, [r7, #8]
 2077 0d42 7A60     		str	r2, [r7, #4]
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2078              		.loc 1 1379 0
 2079 0d44 4FF00003 		mov	r3, #0
 2080 0d48 7B61     		str	r3, [r7, #20]
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2081              		.loc 1 1387 0
 2082 0d4a 4FF42053 		mov	r3, #10240
 2083 0d4e C4F20003 		movt	r3, 16384
 2084 0d52 4FF0CA02 		mov	r2, #202
 2085 0d56 5A62     		str	r2, [r3, #36]
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2086              		.loc 1 1388 0
 2087 0d58 4FF42053 		mov	r3, #10240
 2088 0d5c C4F20003 		movt	r3, 16384
 2089 0d60 4FF05302 		mov	r2, #83
 2090 0d64 5A62     		str	r2, [r3, #36]
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2091              		.loc 1 1391 0
 2092 0d66 BA68     		ldr	r2, [r7, #8]
 2093 0d68 7B68     		ldr	r3, [r7, #4]
 2094 0d6a 1343     		orrs	r3, r3, r2
 2095 0d6c 7B61     		str	r3, [r7, #20]
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2096              		.loc 1 1393 0
 2097 0d6e FB68     		ldr	r3, [r7, #12]
 2098 0d70 B3F5807F 		cmp	r3, #256
 2099 0d74 06D1     		bne	.L82
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2100              		.loc 1 1396 0
 2101 0d76 4FF42053 		mov	r3, #10240
 2102 0d7a C4F20003 		movt	r3, 16384
 2103 0d7e 7A69     		ldr	r2, [r7, #20]
 2104 0d80 5A64     		str	r2, [r3, #68]
 2105 0d82 05E0     		b	.L83
 2106              	.L82:
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2107              		.loc 1 1401 0
 2108 0d84 4FF42053 		mov	r3, #10240
 2109 0d88 C4F20003 		movt	r3, 16384
 2110 0d8c 7A69     		ldr	r2, [r7, #20]
 2111 0d8e 9A64     		str	r2, [r3, #72]
 2112              	.L83:
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2113              		.loc 1 1405 0
 2114 0d90 4FF42053 		mov	r3, #10240
 2115 0d94 C4F20003 		movt	r3, 16384
 2116 0d98 4FF0FF02 		mov	r2, #255
 2117 0d9c 5A62     		str	r2, [r3, #36]
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2118              		.loc 1 1407 0
 2119 0d9e 07F11C07 		add	r7, r7, #28
 2120 0da2 BD46     		mov	sp, r7
 2121 0da4 80BC     		pop	{r7}
 2122 0da6 7047     		bx	lr
 2123              		.cfi_endproc
 2124              	.LFE130:
 2126              		.align	2
 2127              		.global	RTC_GetAlarmSubSecond
 2128              		.thumb
 2129              		.thumb_func
 2131              	RTC_GetAlarmSubSecond:
 2132              	.LFB131:
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2133              		.loc 1 1419 0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 16
 2136              		@ frame_needed = 1, uses_anonymous_args = 0
 2137              		@ link register save eliminated.
 2138 0da8 80B4     		push	{r7}
 2139              	.LCFI62:
 2140              		.cfi_def_cfa_offset 4
 2141              		.cfi_offset 7, -4
 2142 0daa 85B0     		sub	sp, sp, #20
 2143              	.LCFI63:
 2144              		.cfi_def_cfa_offset 24
 2145 0dac 00AF     		add	r7, sp, #0
 2146              	.LCFI64:
 2147              		.cfi_def_cfa_register 7
 2148 0dae 7860     		str	r0, [r7, #4]
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2149              		.loc 1 1420 0
 2150 0db0 4FF00003 		mov	r3, #0
 2151 0db4 FB60     		str	r3, [r7, #12]
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2152              		.loc 1 1423 0
 2153 0db6 7B68     		ldr	r3, [r7, #4]
 2154 0db8 B3F5807F 		cmp	r3, #256
 2155 0dbc 0AD1     		bne	.L85
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2156              		.loc 1 1425 0
 2157 0dbe 4FF42053 		mov	r3, #10240
 2158 0dc2 C4F20003 		movt	r3, 16384
 2159 0dc6 5B6C     		ldr	r3, [r3, #68]
 2160 0dc8 4FEA4343 		lsl	r3, r3, #17
 2161 0dcc 4FEA5343 		lsr	r3, r3, #17
 2162 0dd0 FB60     		str	r3, [r7, #12]
 2163 0dd2 09E0     		b	.L86
 2164              	.L85:
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2165              		.loc 1 1429 0
 2166 0dd4 4FF42053 		mov	r3, #10240
 2167 0dd8 C4F20003 		movt	r3, 16384
 2168 0ddc 9B6C     		ldr	r3, [r3, #72]
 2169 0dde 4FEA4343 		lsl	r3, r3, #17
 2170 0de2 4FEA5343 		lsr	r3, r3, #17
 2171 0de6 FB60     		str	r3, [r7, #12]
 2172              	.L86:
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2173              		.loc 1 1432 0
 2174 0de8 FB68     		ldr	r3, [r7, #12]
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2175              		.loc 1 1433 0
 2176 0dea 1846     		mov	r0, r3
 2177 0dec 07F11407 		add	r7, r7, #20
 2178 0df0 BD46     		mov	sp, r7
 2179 0df2 80BC     		pop	{r7}
 2180 0df4 7047     		bx	lr
 2181              		.cfi_endproc
 2182              	.LFE131:
 2184 0df6 00BF     		.align	2
 2185              		.global	RTC_WakeUpClockConfig
 2186              		.thumb
 2187              		.thumb_func
 2189              	RTC_WakeUpClockConfig:
 2190              	.LFB132:
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2191              		.loc 1 1468 0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 8
 2194              		@ frame_needed = 1, uses_anonymous_args = 0
 2195              		@ link register save eliminated.
 2196 0df8 80B4     		push	{r7}
 2197              	.LCFI65:
 2198              		.cfi_def_cfa_offset 4
 2199              		.cfi_offset 7, -4
 2200 0dfa 83B0     		sub	sp, sp, #12
 2201              	.LCFI66:
 2202              		.cfi_def_cfa_offset 16
 2203 0dfc 00AF     		add	r7, sp, #0
 2204              	.LCFI67:
 2205              		.cfi_def_cfa_register 7
 2206 0dfe 7860     		str	r0, [r7, #4]
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2207              		.loc 1 1473 0
 2208 0e00 4FF42053 		mov	r3, #10240
 2209 0e04 C4F20003 		movt	r3, 16384
 2210 0e08 4FF0CA02 		mov	r2, #202
 2211 0e0c 5A62     		str	r2, [r3, #36]
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2212              		.loc 1 1474 0
 2213 0e0e 4FF42053 		mov	r3, #10240
 2214 0e12 C4F20003 		movt	r3, 16384
 2215 0e16 4FF05302 		mov	r2, #83
 2216 0e1a 5A62     		str	r2, [r3, #36]
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2217              		.loc 1 1477 0
 2218 0e1c 4FF42053 		mov	r3, #10240
 2219 0e20 C4F20003 		movt	r3, 16384
 2220 0e24 4FF42052 		mov	r2, #10240
 2221 0e28 C4F20002 		movt	r2, 16384
 2222 0e2c 9268     		ldr	r2, [r2, #8]
 2223 0e2e 22F00702 		bic	r2, r2, #7
 2224 0e32 9A60     		str	r2, [r3, #8]
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2225              		.loc 1 1480 0
 2226 0e34 4FF42053 		mov	r3, #10240
 2227 0e38 C4F20003 		movt	r3, 16384
 2228 0e3c 4FF42052 		mov	r2, #10240
 2229 0e40 C4F20002 		movt	r2, 16384
 2230 0e44 9268     		ldr	r2, [r2, #8]
 2231 0e46 1146     		mov	r1, r2
 2232 0e48 7A68     		ldr	r2, [r7, #4]
 2233 0e4a 0A43     		orrs	r2, r2, r1
 2234 0e4c 9A60     		str	r2, [r3, #8]
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2235              		.loc 1 1483 0
 2236 0e4e 4FF42053 		mov	r3, #10240
 2237 0e52 C4F20003 		movt	r3, 16384
 2238 0e56 4FF0FF02 		mov	r2, #255
 2239 0e5a 5A62     		str	r2, [r3, #36]
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2240              		.loc 1 1484 0
 2241 0e5c 07F10C07 		add	r7, r7, #12
 2242 0e60 BD46     		mov	sp, r7
 2243 0e62 80BC     		pop	{r7}
 2244 0e64 7047     		bx	lr
 2245              		.cfi_endproc
 2246              	.LFE132:
 2248 0e66 00BF     		.align	2
 2249              		.global	RTC_SetWakeUpCounter
 2250              		.thumb
 2251              		.thumb_func
 2253              	RTC_SetWakeUpCounter:
 2254              	.LFB133:
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2255              		.loc 1 1495 0
 2256              		.cfi_startproc
 2257              		@ args = 0, pretend = 0, frame = 8
 2258              		@ frame_needed = 1, uses_anonymous_args = 0
 2259              		@ link register save eliminated.
 2260 0e68 80B4     		push	{r7}
 2261              	.LCFI68:
 2262              		.cfi_def_cfa_offset 4
 2263              		.cfi_offset 7, -4
 2264 0e6a 83B0     		sub	sp, sp, #12
 2265              	.LCFI69:
 2266              		.cfi_def_cfa_offset 16
 2267 0e6c 00AF     		add	r7, sp, #0
 2268              	.LCFI70:
 2269              		.cfi_def_cfa_register 7
 2270 0e6e 7860     		str	r0, [r7, #4]
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2271              		.loc 1 1500 0
 2272 0e70 4FF42053 		mov	r3, #10240
 2273 0e74 C4F20003 		movt	r3, 16384
 2274 0e78 4FF0CA02 		mov	r2, #202
 2275 0e7c 5A62     		str	r2, [r3, #36]
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2276              		.loc 1 1501 0
 2277 0e7e 4FF42053 		mov	r3, #10240
 2278 0e82 C4F20003 		movt	r3, 16384
 2279 0e86 4FF05302 		mov	r2, #83
 2280 0e8a 5A62     		str	r2, [r3, #36]
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2281              		.loc 1 1504 0
 2282 0e8c 4FF42053 		mov	r3, #10240
 2283 0e90 C4F20003 		movt	r3, 16384
 2284 0e94 7A68     		ldr	r2, [r7, #4]
 2285 0e96 5A61     		str	r2, [r3, #20]
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2286              		.loc 1 1507 0
 2287 0e98 4FF42053 		mov	r3, #10240
 2288 0e9c C4F20003 		movt	r3, 16384
 2289 0ea0 4FF0FF02 		mov	r2, #255
 2290 0ea4 5A62     		str	r2, [r3, #36]
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2291              		.loc 1 1508 0
 2292 0ea6 07F10C07 		add	r7, r7, #12
 2293 0eaa BD46     		mov	sp, r7
 2294 0eac 80BC     		pop	{r7}
 2295 0eae 7047     		bx	lr
 2296              		.cfi_endproc
 2297              	.LFE133:
 2299              		.align	2
 2300              		.global	RTC_GetWakeUpCounter
 2301              		.thumb
 2302              		.thumb_func
 2304              	RTC_GetWakeUpCounter:
 2305              	.LFB134:
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2306              		.loc 1 1516 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 1, uses_anonymous_args = 0
 2310              		@ link register save eliminated.
 2311 0eb0 80B4     		push	{r7}
 2312              	.LCFI71:
 2313              		.cfi_def_cfa_offset 4
 2314              		.cfi_offset 7, -4
 2315 0eb2 00AF     		add	r7, sp, #0
 2316              	.LCFI72:
 2317              		.cfi_def_cfa_register 7
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2318              		.loc 1 1518 0
 2319 0eb4 4FF42053 		mov	r3, #10240
 2320 0eb8 C4F20003 		movt	r3, 16384
 2321 0ebc 5B69     		ldr	r3, [r3, #20]
 2322 0ebe 4FEA0343 		lsl	r3, r3, #16
 2323 0ec2 4FEA1343 		lsr	r3, r3, #16
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2324              		.loc 1 1519 0
 2325 0ec6 1846     		mov	r0, r3
 2326 0ec8 BD46     		mov	sp, r7
 2327 0eca 80BC     		pop	{r7}
 2328 0ecc 7047     		bx	lr
 2329              		.cfi_endproc
 2330              	.LFE134:
 2332 0ece 00BF     		.align	2
 2333              		.global	RTC_WakeUpCmd
 2334              		.thumb
 2335              		.thumb_func
 2337              	RTC_WakeUpCmd:
 2338              	.LFB135:
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2339              		.loc 1 1528 0
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 24
 2342              		@ frame_needed = 1, uses_anonymous_args = 0
 2343              		@ link register save eliminated.
 2344 0ed0 80B4     		push	{r7}
 2345              	.LCFI73:
 2346              		.cfi_def_cfa_offset 4
 2347              		.cfi_offset 7, -4
 2348 0ed2 87B0     		sub	sp, sp, #28
 2349              	.LCFI74:
 2350              		.cfi_def_cfa_offset 32
 2351 0ed4 00AF     		add	r7, sp, #0
 2352              	.LCFI75:
 2353              		.cfi_def_cfa_register 7
 2354 0ed6 0346     		mov	r3, r0
 2355 0ed8 FB71     		strb	r3, [r7, #7]
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2356              		.loc 1 1529 0
 2357 0eda 4FF00003 		mov	r3, #0
 2358 0ede FB60     		str	r3, [r7, #12]
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2359              		.loc 1 1530 0
 2360 0ee0 4FF00003 		mov	r3, #0
 2361 0ee4 3B61     		str	r3, [r7, #16]
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2362              		.loc 1 1531 0
 2363 0ee6 4FF00003 		mov	r3, #0
 2364 0eea FB75     		strb	r3, [r7, #23]
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2365              		.loc 1 1537 0
 2366 0eec 4FF42053 		mov	r3, #10240
 2367 0ef0 C4F20003 		movt	r3, 16384
 2368 0ef4 4FF0CA02 		mov	r2, #202
 2369 0ef8 5A62     		str	r2, [r3, #36]
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2370              		.loc 1 1538 0
 2371 0efa 4FF42053 		mov	r3, #10240
 2372 0efe C4F20003 		movt	r3, 16384
 2373 0f02 4FF05302 		mov	r2, #83
 2374 0f06 5A62     		str	r2, [r3, #36]
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2375              		.loc 1 1540 0
 2376 0f08 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2377 0f0a 002B     		cmp	r3, #0
 2378 0f0c 0FD0     		beq	.L91
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2379              		.loc 1 1543 0
 2380 0f0e 4FF42053 		mov	r3, #10240
 2381 0f12 C4F20003 		movt	r3, 16384
 2382 0f16 4FF42052 		mov	r2, #10240
 2383 0f1a C4F20002 		movt	r2, 16384
 2384 0f1e 9268     		ldr	r2, [r2, #8]
 2385 0f20 42F48062 		orr	r2, r2, #1024
 2386 0f24 9A60     		str	r2, [r3, #8]
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2387              		.loc 1 1544 0
 2388 0f26 4FF00103 		mov	r3, #1
 2389 0f2a FB75     		strb	r3, [r7, #23]
 2390 0f2c 2EE0     		b	.L92
 2391              	.L91:
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2392              		.loc 1 1549 0
 2393 0f2e 4FF42053 		mov	r3, #10240
 2394 0f32 C4F20003 		movt	r3, 16384
 2395 0f36 4FF42052 		mov	r2, #10240
 2396 0f3a C4F20002 		movt	r2, 16384
 2397 0f3e 9268     		ldr	r2, [r2, #8]
 2398 0f40 22F48062 		bic	r2, r2, #1024
 2399 0f44 9A60     		str	r2, [r3, #8]
 2400              	.L94:
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2401              		.loc 1 1553 0 discriminator 1
 2402 0f46 4FF42053 		mov	r3, #10240
 2403 0f4a C4F20003 		movt	r3, 16384
 2404 0f4e DB68     		ldr	r3, [r3, #12]
 2405 0f50 03F00403 		and	r3, r3, #4
 2406 0f54 3B61     		str	r3, [r7, #16]
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2407              		.loc 1 1554 0 discriminator 1
 2408 0f56 FB68     		ldr	r3, [r7, #12]
 2409 0f58 03F10103 		add	r3, r3, #1
 2410 0f5c FB60     		str	r3, [r7, #12]
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2411              		.loc 1 1555 0 discriminator 1
 2412 0f5e FB68     		ldr	r3, [r7, #12]
 2413 0f60 B3F5803F 		cmp	r3, #65536
 2414 0f64 02D0     		beq	.L93
 2415 0f66 3B69     		ldr	r3, [r7, #16]
 2416 0f68 002B     		cmp	r3, #0
 2417 0f6a ECD0     		beq	.L94
 2418              	.L93:
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2419              		.loc 1 1557 0
 2420 0f6c 4FF42053 		mov	r3, #10240
 2421 0f70 C4F20003 		movt	r3, 16384
 2422 0f74 DB68     		ldr	r3, [r3, #12]
 2423 0f76 03F00403 		and	r3, r3, #4
 2424 0f7a 002B     		cmp	r3, #0
 2425 0f7c 03D1     		bne	.L95
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2426              		.loc 1 1559 0
 2427 0f7e 4FF00003 		mov	r3, #0
 2428 0f82 FB75     		strb	r3, [r7, #23]
 2429 0f84 02E0     		b	.L92
 2430              	.L95:
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2431              		.loc 1 1563 0
 2432 0f86 4FF00103 		mov	r3, #1
 2433 0f8a FB75     		strb	r3, [r7, #23]
 2434              	.L92:
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2435              		.loc 1 1568 0
 2436 0f8c 4FF42053 		mov	r3, #10240
 2437 0f90 C4F20003 		movt	r3, 16384
 2438 0f94 4FF0FF02 		mov	r2, #255
 2439 0f98 5A62     		str	r2, [r3, #36]
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2440              		.loc 1 1570 0
 2441 0f9a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2442              		.loc 1 1571 0
 2443 0f9c 1846     		mov	r0, r3
 2444 0f9e 07F11C07 		add	r7, r7, #28
 2445 0fa2 BD46     		mov	sp, r7
 2446 0fa4 80BC     		pop	{r7}
 2447 0fa6 7047     		bx	lr
 2448              		.cfi_endproc
 2449              	.LFE135:
 2451              		.align	2
 2452              		.global	RTC_DayLightSavingConfig
 2453              		.thumb
 2454              		.thumb_func
 2456              	RTC_DayLightSavingConfig:
 2457              	.LFB136:
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2458              		.loc 1 1605 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 8
 2461              		@ frame_needed = 1, uses_anonymous_args = 0
 2462              		@ link register save eliminated.
 2463 0fa8 80B4     		push	{r7}
 2464              	.LCFI76:
 2465              		.cfi_def_cfa_offset 4
 2466              		.cfi_offset 7, -4
 2467 0faa 83B0     		sub	sp, sp, #12
 2468              	.LCFI77:
 2469              		.cfi_def_cfa_offset 16
 2470 0fac 00AF     		add	r7, sp, #0
 2471              	.LCFI78:
 2472              		.cfi_def_cfa_register 7
 2473 0fae 7860     		str	r0, [r7, #4]
 2474 0fb0 3960     		str	r1, [r7, #0]
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2475              		.loc 1 1611 0
 2476 0fb2 4FF42053 		mov	r3, #10240
 2477 0fb6 C4F20003 		movt	r3, 16384
 2478 0fba 4FF0CA02 		mov	r2, #202
 2479 0fbe 5A62     		str	r2, [r3, #36]
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2480              		.loc 1 1612 0
 2481 0fc0 4FF42053 		mov	r3, #10240
 2482 0fc4 C4F20003 		movt	r3, 16384
 2483 0fc8 4FF05302 		mov	r2, #83
 2484 0fcc 5A62     		str	r2, [r3, #36]
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2485              		.loc 1 1615 0
 2486 0fce 4FF42053 		mov	r3, #10240
 2487 0fd2 C4F20003 		movt	r3, 16384
 2488 0fd6 4FF42052 		mov	r2, #10240
 2489 0fda C4F20002 		movt	r2, 16384
 2490 0fde 9268     		ldr	r2, [r2, #8]
 2491 0fe0 22F48022 		bic	r2, r2, #262144
 2492 0fe4 9A60     		str	r2, [r3, #8]
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2493              		.loc 1 1618 0
 2494 0fe6 4FF42053 		mov	r3, #10240
 2495 0fea C4F20003 		movt	r3, 16384
 2496 0fee 4FF42052 		mov	r2, #10240
 2497 0ff2 C4F20002 		movt	r2, 16384
 2498 0ff6 9268     		ldr	r2, [r2, #8]
 2499 0ff8 1146     		mov	r1, r2
 2500 0ffa 7868     		ldr	r0, [r7, #4]
 2501 0ffc 3A68     		ldr	r2, [r7, #0]
 2502 0ffe 0243     		orrs	r2, r2, r0
 2503 1000 0A43     		orrs	r2, r2, r1
 2504 1002 9A60     		str	r2, [r3, #8]
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2505              		.loc 1 1621 0
 2506 1004 4FF42053 		mov	r3, #10240
 2507 1008 C4F20003 		movt	r3, 16384
 2508 100c 4FF0FF02 		mov	r2, #255
 2509 1010 5A62     		str	r2, [r3, #36]
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2510              		.loc 1 1622 0
 2511 1012 07F10C07 		add	r7, r7, #12
 2512 1016 BD46     		mov	sp, r7
 2513 1018 80BC     		pop	{r7}
 2514 101a 7047     		bx	lr
 2515              		.cfi_endproc
 2516              	.LFE136:
 2518              		.align	2
 2519              		.global	RTC_GetStoreOperation
 2520              		.thumb
 2521              		.thumb_func
 2523              	RTC_GetStoreOperation:
 2524              	.LFB137:
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2525              		.loc 1 1632 0
 2526              		.cfi_startproc
 2527              		@ args = 0, pretend = 0, frame = 0
 2528              		@ frame_needed = 1, uses_anonymous_args = 0
 2529              		@ link register save eliminated.
 2530 101c 80B4     		push	{r7}
 2531              	.LCFI79:
 2532              		.cfi_def_cfa_offset 4
 2533              		.cfi_offset 7, -4
 2534 101e 00AF     		add	r7, sp, #0
 2535              	.LCFI80:
 2536              		.cfi_def_cfa_register 7
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2537              		.loc 1 1633 0
 2538 1020 4FF42053 		mov	r3, #10240
 2539 1024 C4F20003 		movt	r3, 16384
 2540 1028 9B68     		ldr	r3, [r3, #8]
 2541 102a 03F48023 		and	r3, r3, #262144
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2542              		.loc 1 1634 0
 2543 102e 1846     		mov	r0, r3
 2544 1030 BD46     		mov	sp, r7
 2545 1032 80BC     		pop	{r7}
 2546 1034 7047     		bx	lr
 2547              		.cfi_endproc
 2548              	.LFE137:
 2550 1036 00BF     		.align	2
 2551              		.global	RTC_OutputConfig
 2552              		.thumb
 2553              		.thumb_func
 2555              	RTC_OutputConfig:
 2556              	.LFB138:
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2557              		.loc 1 1671 0
 2558              		.cfi_startproc
 2559              		@ args = 0, pretend = 0, frame = 8
 2560              		@ frame_needed = 1, uses_anonymous_args = 0
 2561              		@ link register save eliminated.
 2562 1038 80B4     		push	{r7}
 2563              	.LCFI81:
 2564              		.cfi_def_cfa_offset 4
 2565              		.cfi_offset 7, -4
 2566 103a 83B0     		sub	sp, sp, #12
 2567              	.LCFI82:
 2568              		.cfi_def_cfa_offset 16
 2569 103c 00AF     		add	r7, sp, #0
 2570              	.LCFI83:
 2571              		.cfi_def_cfa_register 7
 2572 103e 7860     		str	r0, [r7, #4]
 2573 1040 3960     		str	r1, [r7, #0]
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2574              		.loc 1 1677 0
 2575 1042 4FF42053 		mov	r3, #10240
 2576 1046 C4F20003 		movt	r3, 16384
 2577 104a 4FF0CA02 		mov	r2, #202
 2578 104e 5A62     		str	r2, [r3, #36]
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2579              		.loc 1 1678 0
 2580 1050 4FF42053 		mov	r3, #10240
 2581 1054 C4F20003 		movt	r3, 16384
 2582 1058 4FF05302 		mov	r2, #83
 2583 105c 5A62     		str	r2, [r3, #36]
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2584              		.loc 1 1681 0
 2585 105e 4FF42053 		mov	r3, #10240
 2586 1062 C4F20003 		movt	r3, 16384
 2587 1066 4FF42052 		mov	r2, #10240
 2588 106a C4F20002 		movt	r2, 16384
 2589 106e 9268     		ldr	r2, [r2, #8]
 2590 1070 22F4E002 		bic	r2, r2, #7340032
 2591 1074 9A60     		str	r2, [r3, #8]
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2592              		.loc 1 1684 0
 2593 1076 4FF42053 		mov	r3, #10240
 2594 107a C4F20003 		movt	r3, 16384
 2595 107e 4FF42052 		mov	r2, #10240
 2596 1082 C4F20002 		movt	r2, 16384
 2597 1086 9268     		ldr	r2, [r2, #8]
 2598 1088 1146     		mov	r1, r2
 2599 108a 7868     		ldr	r0, [r7, #4]
 2600 108c 3A68     		ldr	r2, [r7, #0]
 2601 108e 0243     		orrs	r2, r2, r0
 2602 1090 0A43     		orrs	r2, r2, r1
 2603 1092 9A60     		str	r2, [r3, #8]
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2604              		.loc 1 1687 0
 2605 1094 4FF42053 		mov	r3, #10240
 2606 1098 C4F20003 		movt	r3, 16384
 2607 109c 4FF0FF02 		mov	r2, #255
 2608 10a0 5A62     		str	r2, [r3, #36]
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2609              		.loc 1 1688 0
 2610 10a2 07F10C07 		add	r7, r7, #12
 2611 10a6 BD46     		mov	sp, r7
 2612 10a8 80BC     		pop	{r7}
 2613 10aa 7047     		bx	lr
 2614              		.cfi_endproc
 2615              	.LFE138:
 2617              		.align	2
 2618              		.global	RTC_CoarseCalibConfig
 2619              		.thumb
 2620              		.thumb_func
 2622              	RTC_CoarseCalibConfig:
 2623              	.LFB139:
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2624              		.loc 1 1725 0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 16
 2627              		@ frame_needed = 1, uses_anonymous_args = 0
 2628 10ac 80B5     		push	{r7, lr}
 2629              	.LCFI84:
 2630              		.cfi_def_cfa_offset 8
 2631              		.cfi_offset 14, -4
 2632              		.cfi_offset 7, -8
 2633 10ae 84B0     		sub	sp, sp, #16
 2634              	.LCFI85:
 2635              		.cfi_def_cfa_offset 24
 2636 10b0 00AF     		add	r7, sp, #0
 2637              	.LCFI86:
 2638              		.cfi_def_cfa_register 7
 2639 10b2 7860     		str	r0, [r7, #4]
 2640 10b4 3960     		str	r1, [r7, #0]
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2641              		.loc 1 1726 0
 2642 10b6 4FF00003 		mov	r3, #0
 2643 10ba FB73     		strb	r3, [r7, #15]
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2644              		.loc 1 1733 0
 2645 10bc 4FF42053 		mov	r3, #10240
 2646 10c0 C4F20003 		movt	r3, 16384
 2647 10c4 4FF0CA02 		mov	r2, #202
 2648 10c8 5A62     		str	r2, [r3, #36]
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2649              		.loc 1 1734 0
 2650 10ca 4FF42053 		mov	r3, #10240
 2651 10ce C4F20003 		movt	r3, 16384
 2652 10d2 4FF05302 		mov	r2, #83
 2653 10d6 5A62     		str	r2, [r3, #36]
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2654              		.loc 1 1737 0
 2655 10d8 FFF7FEFF 		bl	RTC_EnterInitMode
 2656 10dc 0346     		mov	r3, r0
 2657 10de 002B     		cmp	r3, #0
 2658 10e0 03D1     		bne	.L100
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2659              		.loc 1 1739 0
 2660 10e2 4FF00003 		mov	r3, #0
 2661 10e6 FB73     		strb	r3, [r7, #15]
 2662 10e8 0CE0     		b	.L101
 2663              	.L100:
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2664              		.loc 1 1744 0
 2665 10ea 4FF42053 		mov	r3, #10240
 2666 10ee C4F20003 		movt	r3, 16384
 2667 10f2 7968     		ldr	r1, [r7, #4]
 2668 10f4 3A68     		ldr	r2, [r7, #0]
 2669 10f6 0A43     		orrs	r2, r2, r1
 2670 10f8 9A61     		str	r2, [r3, #24]
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2671              		.loc 1 1746 0
 2672 10fa FFF7FEFF 		bl	RTC_ExitInitMode
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2673              		.loc 1 1748 0
 2674 10fe 4FF00103 		mov	r3, #1
 2675 1102 FB73     		strb	r3, [r7, #15]
 2676              	.L101:
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2677              		.loc 1 1752 0
 2678 1104 4FF42053 		mov	r3, #10240
 2679 1108 C4F20003 		movt	r3, 16384
 2680 110c 4FF0FF02 		mov	r2, #255
 2681 1110 5A62     		str	r2, [r3, #36]
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2682              		.loc 1 1754 0
 2683 1112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2684              		.loc 1 1755 0
 2685 1114 1846     		mov	r0, r3
 2686 1116 07F11007 		add	r7, r7, #16
 2687 111a BD46     		mov	sp, r7
 2688 111c 80BD     		pop	{r7, pc}
 2689              		.cfi_endproc
 2690              	.LFE139:
 2692 111e 00BF     		.align	2
 2693              		.global	RTC_CoarseCalibCmd
 2694              		.thumb
 2695              		.thumb_func
 2697              	RTC_CoarseCalibCmd:
 2698              	.LFB140:
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2699              		.loc 1 1766 0
 2700              		.cfi_startproc
 2701              		@ args = 0, pretend = 0, frame = 16
 2702              		@ frame_needed = 1, uses_anonymous_args = 0
 2703 1120 80B5     		push	{r7, lr}
 2704              	.LCFI87:
 2705              		.cfi_def_cfa_offset 8
 2706              		.cfi_offset 14, -4
 2707              		.cfi_offset 7, -8
 2708 1122 84B0     		sub	sp, sp, #16
 2709              	.LCFI88:
 2710              		.cfi_def_cfa_offset 24
 2711 1124 00AF     		add	r7, sp, #0
 2712              	.LCFI89:
 2713              		.cfi_def_cfa_register 7
 2714 1126 0346     		mov	r3, r0
 2715 1128 FB71     		strb	r3, [r7, #7]
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2716              		.loc 1 1767 0
 2717 112a 4FF00003 		mov	r3, #0
 2718 112e FB73     		strb	r3, [r7, #15]
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2719              		.loc 1 1773 0
 2720 1130 4FF42053 		mov	r3, #10240
 2721 1134 C4F20003 		movt	r3, 16384
 2722 1138 4FF0CA02 		mov	r2, #202
 2723 113c 5A62     		str	r2, [r3, #36]
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2724              		.loc 1 1774 0
 2725 113e 4FF42053 		mov	r3, #10240
 2726 1142 C4F20003 		movt	r3, 16384
 2727 1146 4FF05302 		mov	r2, #83
 2728 114a 5A62     		str	r2, [r3, #36]
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2729              		.loc 1 1777 0
 2730 114c FFF7FEFF 		bl	RTC_EnterInitMode
 2731 1150 0346     		mov	r3, r0
 2732 1152 002B     		cmp	r3, #0
 2733 1154 03D1     		bne	.L103
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2734              		.loc 1 1779 0
 2735 1156 4FF00003 		mov	r3, #0
 2736 115a FB73     		strb	r3, [r7, #15]
 2737 115c 20E0     		b	.L104
 2738              	.L103:
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2739              		.loc 1 1783 0
 2740 115e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2741 1160 002B     		cmp	r3, #0
 2742 1162 0CD0     		beq	.L105
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2743              		.loc 1 1786 0
 2744 1164 4FF42053 		mov	r3, #10240
 2745 1168 C4F20003 		movt	r3, 16384
 2746 116c 4FF42052 		mov	r2, #10240
 2747 1170 C4F20002 		movt	r2, 16384
 2748 1174 9268     		ldr	r2, [r2, #8]
 2749 1176 42F08002 		orr	r2, r2, #128
 2750 117a 9A60     		str	r2, [r3, #8]
 2751 117c 0BE0     		b	.L106
 2752              	.L105:
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2753              		.loc 1 1791 0
 2754 117e 4FF42053 		mov	r3, #10240
 2755 1182 C4F20003 		movt	r3, 16384
 2756 1186 4FF42052 		mov	r2, #10240
 2757 118a C4F20002 		movt	r2, 16384
 2758 118e 9268     		ldr	r2, [r2, #8]
 2759 1190 22F08002 		bic	r2, r2, #128
 2760 1194 9A60     		str	r2, [r3, #8]
 2761              	.L106:
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2762              		.loc 1 1794 0
 2763 1196 FFF7FEFF 		bl	RTC_ExitInitMode
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2764              		.loc 1 1796 0
 2765 119a 4FF00103 		mov	r3, #1
 2766 119e FB73     		strb	r3, [r7, #15]
 2767              	.L104:
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2768              		.loc 1 1800 0
 2769 11a0 4FF42053 		mov	r3, #10240
 2770 11a4 C4F20003 		movt	r3, 16384
 2771 11a8 4FF0FF02 		mov	r2, #255
 2772 11ac 5A62     		str	r2, [r3, #36]
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2773              		.loc 1 1802 0
 2774 11ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2775              		.loc 1 1803 0
 2776 11b0 1846     		mov	r0, r3
 2777 11b2 07F11007 		add	r7, r7, #16
 2778 11b6 BD46     		mov	sp, r7
 2779 11b8 80BD     		pop	{r7, pc}
 2780              		.cfi_endproc
 2781              	.LFE140:
 2783 11ba 00BF     		.align	2
 2784              		.global	RTC_CalibOutputCmd
 2785              		.thumb
 2786              		.thumb_func
 2788              	RTC_CalibOutputCmd:
 2789              	.LFB141:
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2790              		.loc 1 1812 0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 8
 2793              		@ frame_needed = 1, uses_anonymous_args = 0
 2794              		@ link register save eliminated.
 2795 11bc 80B4     		push	{r7}
 2796              	.LCFI90:
 2797              		.cfi_def_cfa_offset 4
 2798              		.cfi_offset 7, -4
 2799 11be 83B0     		sub	sp, sp, #12
 2800              	.LCFI91:
 2801              		.cfi_def_cfa_offset 16
 2802 11c0 00AF     		add	r7, sp, #0
 2803              	.LCFI92:
 2804              		.cfi_def_cfa_register 7
 2805 11c2 0346     		mov	r3, r0
 2806 11c4 FB71     		strb	r3, [r7, #7]
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2807              		.loc 1 1817 0
 2808 11c6 4FF42053 		mov	r3, #10240
 2809 11ca C4F20003 		movt	r3, 16384
 2810 11ce 4FF0CA02 		mov	r2, #202
 2811 11d2 5A62     		str	r2, [r3, #36]
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2812              		.loc 1 1818 0
 2813 11d4 4FF42053 		mov	r3, #10240
 2814 11d8 C4F20003 		movt	r3, 16384
 2815 11dc 4FF05302 		mov	r2, #83
 2816 11e0 5A62     		str	r2, [r3, #36]
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2817              		.loc 1 1820 0
 2818 11e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2819 11e4 002B     		cmp	r3, #0
 2820 11e6 0CD0     		beq	.L108
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2821              		.loc 1 1823 0
 2822 11e8 4FF42053 		mov	r3, #10240
 2823 11ec C4F20003 		movt	r3, 16384
 2824 11f0 4FF42052 		mov	r2, #10240
 2825 11f4 C4F20002 		movt	r2, 16384
 2826 11f8 9268     		ldr	r2, [r2, #8]
 2827 11fa 42F40002 		orr	r2, r2, #8388608
 2828 11fe 9A60     		str	r2, [r3, #8]
 2829 1200 0BE0     		b	.L109
 2830              	.L108:
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2831              		.loc 1 1828 0
 2832 1202 4FF42053 		mov	r3, #10240
 2833 1206 C4F20003 		movt	r3, 16384
 2834 120a 4FF42052 		mov	r2, #10240
 2835 120e C4F20002 		movt	r2, 16384
 2836 1212 9268     		ldr	r2, [r2, #8]
 2837 1214 22F40002 		bic	r2, r2, #8388608
 2838 1218 9A60     		str	r2, [r3, #8]
 2839              	.L109:
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2840              		.loc 1 1832 0
 2841 121a 4FF42053 		mov	r3, #10240
 2842 121e C4F20003 		movt	r3, 16384
 2843 1222 4FF0FF02 		mov	r2, #255
 2844 1226 5A62     		str	r2, [r3, #36]
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2845              		.loc 1 1833 0
 2846 1228 07F10C07 		add	r7, r7, #12
 2847 122c BD46     		mov	sp, r7
 2848 122e 80BC     		pop	{r7}
 2849 1230 7047     		bx	lr
 2850              		.cfi_endproc
 2851              	.LFE141:
 2853 1232 00BF     		.align	2
 2854              		.global	RTC_CalibOutputConfig
 2855              		.thumb
 2856              		.thumb_func
 2858              	RTC_CalibOutputConfig:
 2859              	.LFB142:
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2860              		.loc 1 1844 0
 2861              		.cfi_startproc
 2862              		@ args = 0, pretend = 0, frame = 8
 2863              		@ frame_needed = 1, uses_anonymous_args = 0
 2864              		@ link register save eliminated.
 2865 1234 80B4     		push	{r7}
 2866              	.LCFI93:
 2867              		.cfi_def_cfa_offset 4
 2868              		.cfi_offset 7, -4
 2869 1236 83B0     		sub	sp, sp, #12
 2870              	.LCFI94:
 2871              		.cfi_def_cfa_offset 16
 2872 1238 00AF     		add	r7, sp, #0
 2873              	.LCFI95:
 2874              		.cfi_def_cfa_register 7
 2875 123a 7860     		str	r0, [r7, #4]
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2876              		.loc 1 1849 0
 2877 123c 4FF42053 		mov	r3, #10240
 2878 1240 C4F20003 		movt	r3, 16384
 2879 1244 4FF0CA02 		mov	r2, #202
 2880 1248 5A62     		str	r2, [r3, #36]
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2881              		.loc 1 1850 0
 2882 124a 4FF42053 		mov	r3, #10240
 2883 124e C4F20003 		movt	r3, 16384
 2884 1252 4FF05302 		mov	r2, #83
 2885 1256 5A62     		str	r2, [r3, #36]
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2886              		.loc 1 1853 0
 2887 1258 4FF42053 		mov	r3, #10240
 2888 125c C4F20003 		movt	r3, 16384
 2889 1260 4FF42052 		mov	r2, #10240
 2890 1264 C4F20002 		movt	r2, 16384
 2891 1268 9268     		ldr	r2, [r2, #8]
 2892 126a 22F40022 		bic	r2, r2, #524288
 2893 126e 9A60     		str	r2, [r3, #8]
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2894              		.loc 1 1856 0
 2895 1270 4FF42053 		mov	r3, #10240
 2896 1274 C4F20003 		movt	r3, 16384
 2897 1278 4FF42052 		mov	r2, #10240
 2898 127c C4F20002 		movt	r2, 16384
 2899 1280 9268     		ldr	r2, [r2, #8]
 2900 1282 1146     		mov	r1, r2
 2901 1284 7A68     		ldr	r2, [r7, #4]
 2902 1286 0A43     		orrs	r2, r2, r1
 2903 1288 9A60     		str	r2, [r3, #8]
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2904              		.loc 1 1859 0
 2905 128a 4FF42053 		mov	r3, #10240
 2906 128e C4F20003 		movt	r3, 16384
 2907 1292 4FF0FF02 		mov	r2, #255
 2908 1296 5A62     		str	r2, [r3, #36]
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2909              		.loc 1 1860 0
 2910 1298 07F10C07 		add	r7, r7, #12
 2911 129c BD46     		mov	sp, r7
 2912 129e 80BC     		pop	{r7}
 2913 12a0 7047     		bx	lr
 2914              		.cfi_endproc
 2915              	.LFE142:
 2917 12a2 00BF     		.align	2
 2918              		.global	RTC_SmoothCalibConfig
 2919              		.thumb
 2920              		.thumb_func
 2922              	RTC_SmoothCalibConfig:
 2923              	.LFB143:
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2924              		.loc 1 1882 0
 2925              		.cfi_startproc
 2926              		@ args = 0, pretend = 0, frame = 24
 2927              		@ frame_needed = 1, uses_anonymous_args = 0
 2928              		@ link register save eliminated.
 2929 12a4 80B4     		push	{r7}
 2930              	.LCFI96:
 2931              		.cfi_def_cfa_offset 4
 2932              		.cfi_offset 7, -4
 2933 12a6 87B0     		sub	sp, sp, #28
 2934              	.LCFI97:
 2935              		.cfi_def_cfa_offset 32
 2936 12a8 00AF     		add	r7, sp, #0
 2937              	.LCFI98:
 2938              		.cfi_def_cfa_register 7
 2939 12aa F860     		str	r0, [r7, #12]
 2940 12ac B960     		str	r1, [r7, #8]
 2941 12ae 7A60     		str	r2, [r7, #4]
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2942              		.loc 1 1883 0
 2943 12b0 4FF00003 		mov	r3, #0
 2944 12b4 FB75     		strb	r3, [r7, #23]
1884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2945              		.loc 1 1884 0
 2946 12b6 4FF00003 		mov	r3, #0
 2947 12ba 3B61     		str	r3, [r7, #16]
1885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2948              		.loc 1 1892 0
 2949 12bc 4FF42053 		mov	r3, #10240
 2950 12c0 C4F20003 		movt	r3, 16384
 2951 12c4 4FF0CA02 		mov	r2, #202
 2952 12c8 5A62     		str	r2, [r3, #36]
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2953              		.loc 1 1893 0
 2954 12ca 4FF42053 		mov	r3, #10240
 2955 12ce C4F20003 		movt	r3, 16384
 2956 12d2 4FF05302 		mov	r2, #83
 2957 12d6 5A62     		str	r2, [r3, #36]
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2958              		.loc 1 1896 0
 2959 12d8 4FF42053 		mov	r3, #10240
 2960 12dc C4F20003 		movt	r3, 16384
 2961 12e0 DB68     		ldr	r3, [r3, #12]
 2962 12e2 03F48033 		and	r3, r3, #65536
 2963 12e6 002B     		cmp	r3, #0
 2964 12e8 11D0     		beq	.L112
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2965              		.loc 1 1899 0
 2966 12ea 03E0     		b	.L113
 2967              	.L114:
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2968              		.loc 1 1901 0
 2969 12ec 3B69     		ldr	r3, [r7, #16]
 2970 12ee 03F10103 		add	r3, r3, #1
 2971 12f2 3B61     		str	r3, [r7, #16]
 2972              	.L113:
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2973              		.loc 1 1899 0 discriminator 1
 2974 12f4 4FF42053 		mov	r3, #10240
 2975 12f8 C4F20003 		movt	r3, 16384
 2976 12fc DB68     		ldr	r3, [r3, #12]
 2977 12fe 03F48033 		and	r3, r3, #65536
 2978 1302 002B     		cmp	r3, #0
 2979 1304 03D0     		beq	.L112
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2980              		.loc 1 1899 0 is_stmt 0 discriminator 2
 2981 1306 3B69     		ldr	r3, [r7, #16]
 2982 1308 B3F5003F 		cmp	r3, #131072
 2983 130c EED1     		bne	.L114
 2984              	.L112:
1902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2985              		.loc 1 1906 0 is_stmt 1
 2986 130e 4FF42053 		mov	r3, #10240
 2987 1312 C4F20003 		movt	r3, 16384
 2988 1316 DB68     		ldr	r3, [r3, #12]
 2989 1318 03F48033 		and	r3, r3, #65536
 2990 131c 002B     		cmp	r3, #0
 2991 131e 0DD1     		bne	.L115
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2992              		.loc 1 1909 0
 2993 1320 4FF42053 		mov	r3, #10240
 2994 1324 C4F20003 		movt	r3, 16384
 2995 1328 F968     		ldr	r1, [r7, #12]
 2996 132a BA68     		ldr	r2, [r7, #8]
 2997 132c 1143     		orrs	r1, r1, r2
 2998 132e 7A68     		ldr	r2, [r7, #4]
 2999 1330 0A43     		orrs	r2, r2, r1
 3000 1332 DA63     		str	r2, [r3, #60]
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3001              		.loc 1 1911 0
 3002 1334 4FF00103 		mov	r3, #1
 3003 1338 FB75     		strb	r3, [r7, #23]
 3004 133a 02E0     		b	.L116
 3005              	.L115:
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3006              		.loc 1 1915 0
 3007 133c 4FF00003 		mov	r3, #0
 3008 1340 FB75     		strb	r3, [r7, #23]
 3009              	.L116:
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3010              		.loc 1 1919 0
 3011 1342 4FF42053 		mov	r3, #10240
 3012 1346 C4F20003 		movt	r3, 16384
 3013 134a 4FF0FF02 		mov	r2, #255
 3014 134e 5A62     		str	r2, [r3, #36]
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3015              		.loc 1 1921 0
 3016 1350 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3017              		.loc 1 1922 0
 3018 1352 1846     		mov	r0, r3
 3019 1354 07F11C07 		add	r7, r7, #28
 3020 1358 BD46     		mov	sp, r7
 3021 135a 80BC     		pop	{r7}
 3022 135c 7047     		bx	lr
 3023              		.cfi_endproc
 3024              	.LFE143:
 3026 135e 00BF     		.align	2
 3027              		.global	RTC_TimeStampCmd
 3028              		.thumb
 3029              		.thumb_func
 3031              	RTC_TimeStampCmd:
 3032              	.LFB144:
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3033              		.loc 1 1956 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 16
 3036              		@ frame_needed = 1, uses_anonymous_args = 0
 3037              		@ link register save eliminated.
 3038 1360 80B4     		push	{r7}
 3039              	.LCFI99:
 3040              		.cfi_def_cfa_offset 4
 3041              		.cfi_offset 7, -4
 3042 1362 85B0     		sub	sp, sp, #20
 3043              	.LCFI100:
 3044              		.cfi_def_cfa_offset 24
 3045 1364 00AF     		add	r7, sp, #0
 3046              	.LCFI101:
 3047              		.cfi_def_cfa_register 7
 3048 1366 7860     		str	r0, [r7, #4]
 3049 1368 0B46     		mov	r3, r1
 3050 136a FB70     		strb	r3, [r7, #3]
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3051              		.loc 1 1957 0
 3052 136c 4FF00003 		mov	r3, #0
 3053 1370 FB60     		str	r3, [r7, #12]
1958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3054              		.loc 1 1964 0
 3055 1372 4FF42053 		mov	r3, #10240
 3056 1376 C4F20003 		movt	r3, 16384
 3057 137a 9B68     		ldr	r3, [r3, #8]
 3058 137c 23F40063 		bic	r3, r3, #2048
 3059 1380 23F00803 		bic	r3, r3, #8
 3060 1384 FB60     		str	r3, [r7, #12]
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3061              		.loc 1 1967 0
 3062 1386 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3063 1388 002B     		cmp	r3, #0
 3064 138a 06D0     		beq	.L118
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3065              		.loc 1 1969 0
 3066 138c 7A68     		ldr	r2, [r7, #4]
 3067 138e FB68     		ldr	r3, [r7, #12]
 3068 1390 1343     		orrs	r3, r3, r2
 3069 1392 43F40063 		orr	r3, r3, #2048
 3070 1396 FB60     		str	r3, [r7, #12]
 3071 1398 03E0     		b	.L119
 3072              	.L118:
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3073              		.loc 1 1973 0
 3074 139a FA68     		ldr	r2, [r7, #12]
 3075 139c 7B68     		ldr	r3, [r7, #4]
 3076 139e 1343     		orrs	r3, r3, r2
 3077 13a0 FB60     		str	r3, [r7, #12]
 3078              	.L119:
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3079              		.loc 1 1977 0
 3080 13a2 4FF42053 		mov	r3, #10240
 3081 13a6 C4F20003 		movt	r3, 16384
 3082 13aa 4FF0CA02 		mov	r2, #202
 3083 13ae 5A62     		str	r2, [r3, #36]
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3084              		.loc 1 1978 0
 3085 13b0 4FF42053 		mov	r3, #10240
 3086 13b4 C4F20003 		movt	r3, 16384
 3087 13b8 4FF05302 		mov	r2, #83
 3088 13bc 5A62     		str	r2, [r3, #36]
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3089              		.loc 1 1981 0
 3090 13be 4FF42053 		mov	r3, #10240
 3091 13c2 C4F20003 		movt	r3, 16384
 3092 13c6 FA68     		ldr	r2, [r7, #12]
 3093 13c8 9A60     		str	r2, [r3, #8]
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3094              		.loc 1 1984 0
 3095 13ca 4FF42053 		mov	r3, #10240
 3096 13ce C4F20003 		movt	r3, 16384
 3097 13d2 4FF0FF02 		mov	r2, #255
 3098 13d6 5A62     		str	r2, [r3, #36]
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3099              		.loc 1 1985 0
 3100 13d8 07F11407 		add	r7, r7, #20
 3101 13dc BD46     		mov	sp, r7
 3102 13de 80BC     		pop	{r7}
 3103 13e0 7047     		bx	lr
 3104              		.cfi_endproc
 3105              	.LFE144:
 3107 13e2 00BF     		.align	2
 3108              		.global	RTC_GetTimeStamp
 3109              		.thumb
 3110              		.thumb_func
 3112              	RTC_GetTimeStamp:
 3113              	.LFB145:
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3114              		.loc 1 2001 0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 24
 3117              		@ frame_needed = 1, uses_anonymous_args = 0
 3118 13e4 80B5     		push	{r7, lr}
 3119              	.LCFI102:
 3120              		.cfi_def_cfa_offset 8
 3121              		.cfi_offset 14, -4
 3122              		.cfi_offset 7, -8
 3123 13e6 86B0     		sub	sp, sp, #24
 3124              	.LCFI103:
 3125              		.cfi_def_cfa_offset 32
 3126 13e8 00AF     		add	r7, sp, #0
 3127              	.LCFI104:
 3128              		.cfi_def_cfa_register 7
 3129 13ea F860     		str	r0, [r7, #12]
 3130 13ec B960     		str	r1, [r7, #8]
 3131 13ee 7A60     		str	r2, [r7, #4]
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3132              		.loc 1 2002 0
 3133 13f0 4FF00003 		mov	r3, #0
 3134 13f4 7B61     		str	r3, [r7, #20]
 3135 13f6 4FF00003 		mov	r3, #0
 3136 13fa 3B61     		str	r3, [r7, #16]
2003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3137              		.loc 1 2008 0
 3138 13fc 4FF42053 		mov	r3, #10240
 3139 1400 C4F20003 		movt	r3, 16384
 3140 1404 1B6B     		ldr	r3, [r3, #48]
 3141 1406 1A46     		mov	r2, r3
 3142 1408 47F67F73 		movw	r3, #32639
 3143 140c C0F27F03 		movt	r3, 127
 3144 1410 1340     		ands	r3, r3, r2
 3145 1412 7B61     		str	r3, [r7, #20]
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3146              		.loc 1 2009 0
 3147 1414 4FF42053 		mov	r3, #10240
 3148 1418 C4F20003 		movt	r3, 16384
 3149 141c 5B6B     		ldr	r3, [r3, #52]
 3150 141e 23F07F43 		bic	r3, r3, #-16777216
 3151 1422 23F0C003 		bic	r3, r3, #192
 3152 1426 3B61     		str	r3, [r7, #16]
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3153              		.loc 1 2012 0
 3154 1428 7B69     		ldr	r3, [r7, #20]
 3155 142a 03F47C13 		and	r3, r3, #4128768
 3156 142e 4FEA1343 		lsr	r3, r3, #16
 3157 1432 DAB2     		uxtb	r2, r3
 3158 1434 BB68     		ldr	r3, [r7, #8]
 3159 1436 1A70     		strb	r2, [r3, #0]
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3160              		.loc 1 2013 0
 3161 1438 7B69     		ldr	r3, [r7, #20]
 3162 143a 03F4FE43 		and	r3, r3, #32512
 3163 143e 4FEA1323 		lsr	r3, r3, #8
 3164 1442 DAB2     		uxtb	r2, r3
 3165 1444 BB68     		ldr	r3, [r7, #8]
 3166 1446 5A70     		strb	r2, [r3, #1]
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3167              		.loc 1 2014 0
 3168 1448 7B69     		ldr	r3, [r7, #20]
 3169 144a DBB2     		uxtb	r3, r3
 3170 144c 03F07F03 		and	r3, r3, #127
 3171 1450 DAB2     		uxtb	r2, r3
 3172 1452 BB68     		ldr	r3, [r7, #8]
 3173 1454 9A70     		strb	r2, [r3, #2]
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3174              		.loc 1 2015 0
 3175 1456 7B69     		ldr	r3, [r7, #20]
 3176 1458 03F48003 		and	r3, r3, #4194304
 3177 145c 4FEA1343 		lsr	r3, r3, #16
 3178 1460 DAB2     		uxtb	r2, r3
 3179 1462 BB68     		ldr	r3, [r7, #8]
 3180 1464 DA70     		strb	r2, [r3, #3]
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3181              		.loc 1 2018 0
 3182 1466 7B68     		ldr	r3, [r7, #4]
 3183 1468 4FF00002 		mov	r2, #0
 3184 146c DA70     		strb	r2, [r3, #3]
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3185              		.loc 1 2019 0
 3186 146e 3B69     		ldr	r3, [r7, #16]
 3187 1470 03F4F853 		and	r3, r3, #7936
 3188 1474 4FEA1323 		lsr	r3, r3, #8
 3189 1478 DAB2     		uxtb	r2, r3
 3190 147a 7B68     		ldr	r3, [r7, #4]
 3191 147c 5A70     		strb	r2, [r3, #1]
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3192              		.loc 1 2020 0
 3193 147e 3B69     		ldr	r3, [r7, #16]
 3194 1480 DBB2     		uxtb	r3, r3
 3195 1482 03F03F03 		and	r3, r3, #63
 3196 1486 DAB2     		uxtb	r2, r3
 3197 1488 7B68     		ldr	r3, [r7, #4]
 3198 148a 9A70     		strb	r2, [r3, #2]
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3199              		.loc 1 2021 0
 3200 148c 3B69     		ldr	r3, [r7, #16]
 3201 148e 03F46043 		and	r3, r3, #57344
 3202 1492 4FEA5333 		lsr	r3, r3, #13
 3203 1496 DAB2     		uxtb	r2, r3
 3204 1498 7B68     		ldr	r3, [r7, #4]
 3205 149a 1A70     		strb	r2, [r3, #0]
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3206              		.loc 1 2024 0
 3207 149c FB68     		ldr	r3, [r7, #12]
 3208 149e 002B     		cmp	r3, #0
 3209 14a0 35D1     		bne	.L120
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3210              		.loc 1 2027 0
 3211 14a2 BB68     		ldr	r3, [r7, #8]
 3212 14a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3213 14a6 1846     		mov	r0, r3
 3214 14a8 00F096FB 		bl	RTC_Bcd2ToByte
 3215 14ac 0346     		mov	r3, r0
 3216 14ae 1A46     		mov	r2, r3
 3217 14b0 BB68     		ldr	r3, [r7, #8]
 3218 14b2 1A70     		strb	r2, [r3, #0]
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3219              		.loc 1 2028 0
 3220 14b4 BB68     		ldr	r3, [r7, #8]
 3221 14b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3222 14b8 1846     		mov	r0, r3
 3223 14ba 00F08DFB 		bl	RTC_Bcd2ToByte
 3224 14be 0346     		mov	r3, r0
 3225 14c0 1A46     		mov	r2, r3
 3226 14c2 BB68     		ldr	r3, [r7, #8]
 3227 14c4 5A70     		strb	r2, [r3, #1]
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3228              		.loc 1 2029 0
 3229 14c6 BB68     		ldr	r3, [r7, #8]
 3230 14c8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3231 14ca 1846     		mov	r0, r3
 3232 14cc 00F084FB 		bl	RTC_Bcd2ToByte
 3233 14d0 0346     		mov	r3, r0
 3234 14d2 1A46     		mov	r2, r3
 3235 14d4 BB68     		ldr	r3, [r7, #8]
 3236 14d6 9A70     		strb	r2, [r3, #2]
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3237              		.loc 1 2032 0
 3238 14d8 7B68     		ldr	r3, [r7, #4]
 3239 14da 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3240 14dc 1846     		mov	r0, r3
 3241 14de 00F07BFB 		bl	RTC_Bcd2ToByte
 3242 14e2 0346     		mov	r3, r0
 3243 14e4 1A46     		mov	r2, r3
 3244 14e6 7B68     		ldr	r3, [r7, #4]
 3245 14e8 5A70     		strb	r2, [r3, #1]
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3246              		.loc 1 2033 0
 3247 14ea 7B68     		ldr	r3, [r7, #4]
 3248 14ec 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3249 14ee 1846     		mov	r0, r3
 3250 14f0 00F072FB 		bl	RTC_Bcd2ToByte
 3251 14f4 0346     		mov	r3, r0
 3252 14f6 1A46     		mov	r2, r3
 3253 14f8 7B68     		ldr	r3, [r7, #4]
 3254 14fa 9A70     		strb	r2, [r3, #2]
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3255              		.loc 1 2034 0
 3256 14fc 7B68     		ldr	r3, [r7, #4]
 3257 14fe 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3258 1500 1846     		mov	r0, r3
 3259 1502 00F069FB 		bl	RTC_Bcd2ToByte
 3260 1506 0346     		mov	r3, r0
 3261 1508 1A46     		mov	r2, r3
 3262 150a 7B68     		ldr	r3, [r7, #4]
 3263 150c 1A70     		strb	r2, [r3, #0]
 3264              	.L120:
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3265              		.loc 1 2036 0
 3266 150e 07F11807 		add	r7, r7, #24
 3267 1512 BD46     		mov	sp, r7
 3268 1514 80BD     		pop	{r7, pc}
 3269              		.cfi_endproc
 3270              	.LFE145:
 3272 1516 00BF     		.align	2
 3273              		.global	RTC_GetTimeStampSubSecond
 3274              		.thumb
 3275              		.thumb_func
 3277              	RTC_GetTimeStampSubSecond:
 3278              	.LFB146:
2037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3279              		.loc 1 2044 0
 3280              		.cfi_startproc
 3281              		@ args = 0, pretend = 0, frame = 0
 3282              		@ frame_needed = 1, uses_anonymous_args = 0
 3283              		@ link register save eliminated.
 3284 1518 80B4     		push	{r7}
 3285              	.LCFI105:
 3286              		.cfi_def_cfa_offset 4
 3287              		.cfi_offset 7, -4
 3288 151a 00AF     		add	r7, sp, #0
 3289              	.LCFI106:
 3290              		.cfi_def_cfa_register 7
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3291              		.loc 1 2046 0
 3292 151c 4FF42053 		mov	r3, #10240
 3293 1520 C4F20003 		movt	r3, 16384
 3294 1524 9B6B     		ldr	r3, [r3, #56]
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3295              		.loc 1 2047 0
 3296 1526 1846     		mov	r0, r3
 3297 1528 BD46     		mov	sp, r7
 3298 152a 80BC     		pop	{r7}
 3299 152c 7047     		bx	lr
 3300              		.cfi_endproc
 3301              	.LFE146:
 3303 152e 00BF     		.align	2
 3304              		.global	RTC_TamperTriggerConfig
 3305              		.thumb
 3306              		.thumb_func
 3308              	RTC_TamperTriggerConfig:
 3309              	.LFB147:
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3310              		.loc 1 2079 0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 8
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314              		@ link register save eliminated.
 3315 1530 80B4     		push	{r7}
 3316              	.LCFI107:
 3317              		.cfi_def_cfa_offset 4
 3318              		.cfi_offset 7, -4
 3319 1532 83B0     		sub	sp, sp, #12
 3320              	.LCFI108:
 3321              		.cfi_def_cfa_offset 16
 3322 1534 00AF     		add	r7, sp, #0
 3323              	.LCFI109:
 3324              		.cfi_def_cfa_register 7
 3325 1536 7860     		str	r0, [r7, #4]
 3326 1538 3960     		str	r1, [r7, #0]
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3327              		.loc 1 2084 0
 3328 153a 3B68     		ldr	r3, [r7, #0]
 3329 153c 002B     		cmp	r3, #0
 3330 153e 11D1     		bne	.L124
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3331              		.loc 1 2087 0
 3332 1540 4FF42053 		mov	r3, #10240
 3333 1544 C4F20003 		movt	r3, 16384
 3334 1548 4FF42052 		mov	r2, #10240
 3335 154c C4F20002 		movt	r2, 16384
 3336 1550 126C     		ldr	r2, [r2, #64]
 3337 1552 1146     		mov	r1, r2
 3338 1554 7A68     		ldr	r2, [r7, #4]
 3339 1556 4FEA4202 		lsl	r2, r2, #1
 3340 155a 6FEA0202 		mvn	r2, r2
 3341 155e 0A40     		ands	r2, r2, r1
 3342 1560 1A64     		str	r2, [r3, #64]
 3343 1562 0EE0     		b	.L123
 3344              	.L124:
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3345              		.loc 1 2092 0
 3346 1564 4FF42053 		mov	r3, #10240
 3347 1568 C4F20003 		movt	r3, 16384
 3348 156c 4FF42052 		mov	r2, #10240
 3349 1570 C4F20002 		movt	r2, 16384
 3350 1574 126C     		ldr	r2, [r2, #64]
 3351 1576 1146     		mov	r1, r2
 3352 1578 7A68     		ldr	r2, [r7, #4]
 3353 157a 4FEA4202 		lsl	r2, r2, #1
 3354 157e 0A43     		orrs	r2, r2, r1
 3355 1580 1A64     		str	r2, [r3, #64]
 3356              	.L123:
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3357              		.loc 1 2094 0
 3358 1582 07F10C07 		add	r7, r7, #12
 3359 1586 BD46     		mov	sp, r7
 3360 1588 80BC     		pop	{r7}
 3361 158a 7047     		bx	lr
 3362              		.cfi_endproc
 3363              	.LFE147:
 3365              		.align	2
 3366              		.global	RTC_TamperCmd
 3367              		.thumb
 3368              		.thumb_func
 3370              	RTC_TamperCmd:
 3371              	.LFB148:
2095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3372              		.loc 1 2105 0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376              		@ link register save eliminated.
 3377 158c 80B4     		push	{r7}
 3378              	.LCFI110:
 3379              		.cfi_def_cfa_offset 4
 3380              		.cfi_offset 7, -4
 3381 158e 83B0     		sub	sp, sp, #12
 3382              	.LCFI111:
 3383              		.cfi_def_cfa_offset 16
 3384 1590 00AF     		add	r7, sp, #0
 3385              	.LCFI112:
 3386              		.cfi_def_cfa_register 7
 3387 1592 7860     		str	r0, [r7, #4]
 3388 1594 0B46     		mov	r3, r1
 3389 1596 FB70     		strb	r3, [r7, #3]
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3390              		.loc 1 2110 0
 3391 1598 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3392 159a 002B     		cmp	r3, #0
 3393 159c 0DD0     		beq	.L127
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3394              		.loc 1 2113 0
 3395 159e 4FF42053 		mov	r3, #10240
 3396 15a2 C4F20003 		movt	r3, 16384
 3397 15a6 4FF42052 		mov	r2, #10240
 3398 15aa C4F20002 		movt	r2, 16384
 3399 15ae 126C     		ldr	r2, [r2, #64]
 3400 15b0 1146     		mov	r1, r2
 3401 15b2 7A68     		ldr	r2, [r7, #4]
 3402 15b4 0A43     		orrs	r2, r2, r1
 3403 15b6 1A64     		str	r2, [r3, #64]
 3404 15b8 0EE0     		b	.L126
 3405              	.L127:
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3406              		.loc 1 2118 0
 3407 15ba 4FF42053 		mov	r3, #10240
 3408 15be C4F20003 		movt	r3, 16384
 3409 15c2 4FF42052 		mov	r2, #10240
 3410 15c6 C4F20002 		movt	r2, 16384
 3411 15ca 126C     		ldr	r2, [r2, #64]
 3412 15cc 1146     		mov	r1, r2
 3413 15ce 7A68     		ldr	r2, [r7, #4]
 3414 15d0 6FEA0202 		mvn	r2, r2
 3415 15d4 0A40     		ands	r2, r2, r1
 3416 15d6 1A64     		str	r2, [r3, #64]
 3417              	.L126:
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3418              		.loc 1 2120 0
 3419 15d8 07F10C07 		add	r7, r7, #12
 3420 15dc BD46     		mov	sp, r7
 3421 15de 80BC     		pop	{r7}
 3422 15e0 7047     		bx	lr
 3423              		.cfi_endproc
 3424              	.LFE148:
 3426 15e2 00BF     		.align	2
 3427              		.global	RTC_TamperFilterConfig
 3428              		.thumb
 3429              		.thumb_func
 3431              	RTC_TamperFilterConfig:
 3432              	.LFB149:
2121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3433              		.loc 1 2136 0
 3434              		.cfi_startproc
 3435              		@ args = 0, pretend = 0, frame = 8
 3436              		@ frame_needed = 1, uses_anonymous_args = 0
 3437              		@ link register save eliminated.
 3438 15e4 80B4     		push	{r7}
 3439              	.LCFI113:
 3440              		.cfi_def_cfa_offset 4
 3441              		.cfi_offset 7, -4
 3442 15e6 83B0     		sub	sp, sp, #12
 3443              	.LCFI114:
 3444              		.cfi_def_cfa_offset 16
 3445 15e8 00AF     		add	r7, sp, #0
 3446              	.LCFI115:
 3447              		.cfi_def_cfa_register 7
 3448 15ea 7860     		str	r0, [r7, #4]
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3449              		.loc 1 2141 0
 3450 15ec 4FF42053 		mov	r3, #10240
 3451 15f0 C4F20003 		movt	r3, 16384
 3452 15f4 4FF42052 		mov	r2, #10240
 3453 15f8 C4F20002 		movt	r2, 16384
 3454 15fc 126C     		ldr	r2, [r2, #64]
 3455 15fe 22F4C052 		bic	r2, r2, #6144
 3456 1602 1A64     		str	r2, [r3, #64]
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3457              		.loc 1 2144 0
 3458 1604 4FF42053 		mov	r3, #10240
 3459 1608 C4F20003 		movt	r3, 16384
 3460 160c 4FF42052 		mov	r2, #10240
 3461 1610 C4F20002 		movt	r2, 16384
 3462 1614 126C     		ldr	r2, [r2, #64]
 3463 1616 1146     		mov	r1, r2
 3464 1618 7A68     		ldr	r2, [r7, #4]
 3465 161a 0A43     		orrs	r2, r2, r1
 3466 161c 1A64     		str	r2, [r3, #64]
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3467              		.loc 1 2145 0
 3468 161e 07F10C07 		add	r7, r7, #12
 3469 1622 BD46     		mov	sp, r7
 3470 1624 80BC     		pop	{r7}
 3471 1626 7047     		bx	lr
 3472              		.cfi_endproc
 3473              	.LFE149:
 3475              		.align	2
 3476              		.global	RTC_TamperSamplingFreqConfig
 3477              		.thumb
 3478              		.thumb_func
 3480              	RTC_TamperSamplingFreqConfig:
 3481              	.LFB150:
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3482              		.loc 1 2170 0
 3483              		.cfi_startproc
 3484              		@ args = 0, pretend = 0, frame = 8
 3485              		@ frame_needed = 1, uses_anonymous_args = 0
 3486              		@ link register save eliminated.
 3487 1628 80B4     		push	{r7}
 3488              	.LCFI116:
 3489              		.cfi_def_cfa_offset 4
 3490              		.cfi_offset 7, -4
 3491 162a 83B0     		sub	sp, sp, #12
 3492              	.LCFI117:
 3493              		.cfi_def_cfa_offset 16
 3494 162c 00AF     		add	r7, sp, #0
 3495              	.LCFI118:
 3496              		.cfi_def_cfa_register 7
 3497 162e 7860     		str	r0, [r7, #4]
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3498              		.loc 1 2175 0
 3499 1630 4FF42053 		mov	r3, #10240
 3500 1634 C4F20003 		movt	r3, 16384
 3501 1638 4FF42052 		mov	r2, #10240
 3502 163c C4F20002 		movt	r2, 16384
 3503 1640 126C     		ldr	r2, [r2, #64]
 3504 1642 22F4E062 		bic	r2, r2, #1792
 3505 1646 1A64     		str	r2, [r3, #64]
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3506              		.loc 1 2178 0
 3507 1648 4FF42053 		mov	r3, #10240
 3508 164c C4F20003 		movt	r3, 16384
 3509 1650 4FF42052 		mov	r2, #10240
 3510 1654 C4F20002 		movt	r2, 16384
 3511 1658 126C     		ldr	r2, [r2, #64]
 3512 165a 1146     		mov	r1, r2
 3513 165c 7A68     		ldr	r2, [r7, #4]
 3514 165e 0A43     		orrs	r2, r2, r1
 3515 1660 1A64     		str	r2, [r3, #64]
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3516              		.loc 1 2179 0
 3517 1662 07F10C07 		add	r7, r7, #12
 3518 1666 BD46     		mov	sp, r7
 3519 1668 80BC     		pop	{r7}
 3520 166a 7047     		bx	lr
 3521              		.cfi_endproc
 3522              	.LFE150:
 3524              		.align	2
 3525              		.global	RTC_TamperPinsPrechargeDuration
 3526              		.thumb
 3527              		.thumb_func
 3529              	RTC_TamperPinsPrechargeDuration:
 3530              	.LFB151:
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3531              		.loc 1 2193 0
 3532              		.cfi_startproc
 3533              		@ args = 0, pretend = 0, frame = 8
 3534              		@ frame_needed = 1, uses_anonymous_args = 0
 3535              		@ link register save eliminated.
 3536 166c 80B4     		push	{r7}
 3537              	.LCFI119:
 3538              		.cfi_def_cfa_offset 4
 3539              		.cfi_offset 7, -4
 3540 166e 83B0     		sub	sp, sp, #12
 3541              	.LCFI120:
 3542              		.cfi_def_cfa_offset 16
 3543 1670 00AF     		add	r7, sp, #0
 3544              	.LCFI121:
 3545              		.cfi_def_cfa_register 7
 3546 1672 7860     		str	r0, [r7, #4]
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3547              		.loc 1 2198 0
 3548 1674 4FF42053 		mov	r3, #10240
 3549 1678 C4F20003 		movt	r3, 16384
 3550 167c 4FF42052 		mov	r2, #10240
 3551 1680 C4F20002 		movt	r2, 16384
 3552 1684 126C     		ldr	r2, [r2, #64]
 3553 1686 22F4C042 		bic	r2, r2, #24576
 3554 168a 1A64     		str	r2, [r3, #64]
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3555              		.loc 1 2201 0
 3556 168c 4FF42053 		mov	r3, #10240
 3557 1690 C4F20003 		movt	r3, 16384
 3558 1694 4FF42052 		mov	r2, #10240
 3559 1698 C4F20002 		movt	r2, 16384
 3560 169c 126C     		ldr	r2, [r2, #64]
 3561 169e 1146     		mov	r1, r2
 3562 16a0 7A68     		ldr	r2, [r7, #4]
 3563 16a2 0A43     		orrs	r2, r2, r1
 3564 16a4 1A64     		str	r2, [r3, #64]
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3565              		.loc 1 2202 0
 3566 16a6 07F10C07 		add	r7, r7, #12
 3567 16aa BD46     		mov	sp, r7
 3568 16ac 80BC     		pop	{r7}
 3569 16ae 7047     		bx	lr
 3570              		.cfi_endproc
 3571              	.LFE151:
 3573              		.align	2
 3574              		.global	RTC_TimeStampOnTamperDetectionCmd
 3575              		.thumb
 3576              		.thumb_func
 3578              	RTC_TimeStampOnTamperDetectionCmd:
 3579              	.LFB152:
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3580              		.loc 1 2213 0
 3581              		.cfi_startproc
 3582              		@ args = 0, pretend = 0, frame = 8
 3583              		@ frame_needed = 1, uses_anonymous_args = 0
 3584              		@ link register save eliminated.
 3585 16b0 80B4     		push	{r7}
 3586              	.LCFI122:
 3587              		.cfi_def_cfa_offset 4
 3588              		.cfi_offset 7, -4
 3589 16b2 83B0     		sub	sp, sp, #12
 3590              	.LCFI123:
 3591              		.cfi_def_cfa_offset 16
 3592 16b4 00AF     		add	r7, sp, #0
 3593              	.LCFI124:
 3594              		.cfi_def_cfa_register 7
 3595 16b6 0346     		mov	r3, r0
 3596 16b8 FB71     		strb	r3, [r7, #7]
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3597              		.loc 1 2217 0
 3598 16ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3599 16bc 002B     		cmp	r3, #0
 3600 16be 0CD0     		beq	.L133
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3601              		.loc 1 2220 0
 3602 16c0 4FF42053 		mov	r3, #10240
 3603 16c4 C4F20003 		movt	r3, 16384
 3604 16c8 4FF42052 		mov	r2, #10240
 3605 16cc C4F20002 		movt	r2, 16384
 3606 16d0 126C     		ldr	r2, [r2, #64]
 3607 16d2 42F08002 		orr	r2, r2, #128
 3608 16d6 1A64     		str	r2, [r3, #64]
 3609 16d8 0BE0     		b	.L132
 3610              	.L133:
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3611              		.loc 1 2225 0
 3612 16da 4FF42053 		mov	r3, #10240
 3613 16de C4F20003 		movt	r3, 16384
 3614 16e2 4FF42052 		mov	r2, #10240
 3615 16e6 C4F20002 		movt	r2, 16384
 3616 16ea 126C     		ldr	r2, [r2, #64]
 3617 16ec 22F08002 		bic	r2, r2, #128
 3618 16f0 1A64     		str	r2, [r3, #64]
 3619              	.L132:
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3620              		.loc 1 2227 0
 3621 16f2 07F10C07 		add	r7, r7, #12
 3622 16f6 BD46     		mov	sp, r7
 3623 16f8 80BC     		pop	{r7}
 3624 16fa 7047     		bx	lr
 3625              		.cfi_endproc
 3626              	.LFE152:
 3628              		.align	2
 3629              		.global	RTC_TamperPullUpCmd
 3630              		.thumb
 3631              		.thumb_func
 3633              	RTC_TamperPullUpCmd:
 3634              	.LFB153:
2228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3635              		.loc 1 2236 0
 3636              		.cfi_startproc
 3637              		@ args = 0, pretend = 0, frame = 8
 3638              		@ frame_needed = 1, uses_anonymous_args = 0
 3639              		@ link register save eliminated.
 3640 16fc 80B4     		push	{r7}
 3641              	.LCFI125:
 3642              		.cfi_def_cfa_offset 4
 3643              		.cfi_offset 7, -4
 3644 16fe 83B0     		sub	sp, sp, #12
 3645              	.LCFI126:
 3646              		.cfi_def_cfa_offset 16
 3647 1700 00AF     		add	r7, sp, #0
 3648              	.LCFI127:
 3649              		.cfi_def_cfa_register 7
 3650 1702 0346     		mov	r3, r0
 3651 1704 FB71     		strb	r3, [r7, #7]
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3652              		.loc 1 2240 0
 3653 1706 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3654 1708 002B     		cmp	r3, #0
 3655 170a 0CD0     		beq	.L136
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3656              		.loc 1 2243 0
 3657 170c 4FF42053 		mov	r3, #10240
 3658 1710 C4F20003 		movt	r3, 16384
 3659 1714 4FF42052 		mov	r2, #10240
 3660 1718 C4F20002 		movt	r2, 16384
 3661 171c 126C     		ldr	r2, [r2, #64]
 3662 171e 22F40042 		bic	r2, r2, #32768
 3663 1722 1A64     		str	r2, [r3, #64]
 3664 1724 0BE0     		b	.L135
 3665              	.L136:
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3666              		.loc 1 2248 0
 3667 1726 4FF42053 		mov	r3, #10240
 3668 172a C4F20003 		movt	r3, 16384
 3669 172e 4FF42052 		mov	r2, #10240
 3670 1732 C4F20002 		movt	r2, 16384
 3671 1736 126C     		ldr	r2, [r2, #64]
 3672 1738 42F40042 		orr	r2, r2, #32768
 3673 173c 1A64     		str	r2, [r3, #64]
 3674              	.L135:
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3675              		.loc 1 2250 0
 3676 173e 07F10C07 		add	r7, r7, #12
 3677 1742 BD46     		mov	sp, r7
 3678 1744 80BC     		pop	{r7}
 3679 1746 7047     		bx	lr
 3680              		.cfi_endproc
 3681              	.LFE153:
 3683              		.align	2
 3684              		.global	RTC_WriteBackupRegister
 3685              		.thumb
 3686              		.thumb_func
 3688              	RTC_WriteBackupRegister:
 3689              	.LFB154:
2251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3690              		.loc 1 2277 0
 3691              		.cfi_startproc
 3692              		@ args = 0, pretend = 0, frame = 16
 3693              		@ frame_needed = 1, uses_anonymous_args = 0
 3694              		@ link register save eliminated.
 3695 1748 80B4     		push	{r7}
 3696              	.LCFI128:
 3697              		.cfi_def_cfa_offset 4
 3698              		.cfi_offset 7, -4
 3699 174a 85B0     		sub	sp, sp, #20
 3700              	.LCFI129:
 3701              		.cfi_def_cfa_offset 24
 3702 174c 00AF     		add	r7, sp, #0
 3703              	.LCFI130:
 3704              		.cfi_def_cfa_register 7
 3705 174e 7860     		str	r0, [r7, #4]
 3706 1750 3960     		str	r1, [r7, #0]
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3707              		.loc 1 2278 0
 3708 1752 4FF00003 		mov	r3, #0
 3709 1756 FB60     		str	r3, [r7, #12]
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3710              		.loc 1 2283 0
 3711 1758 42F65003 		movw	r3, #10320
 3712 175c C4F20003 		movt	r3, 16384
 3713 1760 FB60     		str	r3, [r7, #12]
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3714              		.loc 1 2284 0
 3715 1762 7B68     		ldr	r3, [r7, #4]
 3716 1764 4FEA8302 		lsl	r2, r3, #2
 3717 1768 FB68     		ldr	r3, [r7, #12]
 3718 176a D318     		adds	r3, r2, r3
 3719 176c FB60     		str	r3, [r7, #12]
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3720              		.loc 1 2287 0
 3721 176e FB68     		ldr	r3, [r7, #12]
 3722 1770 3A68     		ldr	r2, [r7, #0]
 3723 1772 1A60     		str	r2, [r3, #0]
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3724              		.loc 1 2288 0
 3725 1774 07F11407 		add	r7, r7, #20
 3726 1778 BD46     		mov	sp, r7
 3727 177a 80BC     		pop	{r7}
 3728 177c 7047     		bx	lr
 3729              		.cfi_endproc
 3730              	.LFE154:
 3732 177e 00BF     		.align	2
 3733              		.global	RTC_ReadBackupRegister
 3734              		.thumb
 3735              		.thumb_func
 3737              	RTC_ReadBackupRegister:
 3738              	.LFB155:
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3739              		.loc 1 2298 0
 3740              		.cfi_startproc
 3741              		@ args = 0, pretend = 0, frame = 16
 3742              		@ frame_needed = 1, uses_anonymous_args = 0
 3743              		@ link register save eliminated.
 3744 1780 80B4     		push	{r7}
 3745              	.LCFI131:
 3746              		.cfi_def_cfa_offset 4
 3747              		.cfi_offset 7, -4
 3748 1782 85B0     		sub	sp, sp, #20
 3749              	.LCFI132:
 3750              		.cfi_def_cfa_offset 24
 3751 1784 00AF     		add	r7, sp, #0
 3752              	.LCFI133:
 3753              		.cfi_def_cfa_register 7
 3754 1786 7860     		str	r0, [r7, #4]
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3755              		.loc 1 2299 0
 3756 1788 4FF00003 		mov	r3, #0
 3757 178c FB60     		str	r3, [r7, #12]
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3758              		.loc 1 2304 0
 3759 178e 42F65003 		movw	r3, #10320
 3760 1792 C4F20003 		movt	r3, 16384
 3761 1796 FB60     		str	r3, [r7, #12]
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3762              		.loc 1 2305 0
 3763 1798 7B68     		ldr	r3, [r7, #4]
 3764 179a 4FEA8302 		lsl	r2, r3, #2
 3765 179e FB68     		ldr	r3, [r7, #12]
 3766 17a0 D318     		adds	r3, r2, r3
 3767 17a2 FB60     		str	r3, [r7, #12]
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3768              		.loc 1 2308 0
 3769 17a4 FB68     		ldr	r3, [r7, #12]
 3770 17a6 1B68     		ldr	r3, [r3, #0]
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3771              		.loc 1 2309 0
 3772 17a8 1846     		mov	r0, r3
 3773 17aa 07F11407 		add	r7, r7, #20
 3774 17ae BD46     		mov	sp, r7
 3775 17b0 80BC     		pop	{r7}
 3776 17b2 7047     		bx	lr
 3777              		.cfi_endproc
 3778              	.LFE155:
 3780              		.align	2
 3781              		.global	RTC_TamperPinSelection
 3782              		.thumb
 3783              		.thumb_func
 3785              	RTC_TamperPinSelection:
 3786              	.LFB156:
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3787              		.loc 1 2338 0
 3788              		.cfi_startproc
 3789              		@ args = 0, pretend = 0, frame = 8
 3790              		@ frame_needed = 1, uses_anonymous_args = 0
 3791              		@ link register save eliminated.
 3792 17b4 80B4     		push	{r7}
 3793              	.LCFI134:
 3794              		.cfi_def_cfa_offset 4
 3795              		.cfi_offset 7, -4
 3796 17b6 83B0     		sub	sp, sp, #12
 3797              	.LCFI135:
 3798              		.cfi_def_cfa_offset 16
 3799 17b8 00AF     		add	r7, sp, #0
 3800              	.LCFI136:
 3801              		.cfi_def_cfa_register 7
 3802 17ba 7860     		str	r0, [r7, #4]
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3803              		.loc 1 2342 0
 3804 17bc 4FF42053 		mov	r3, #10240
 3805 17c0 C4F20003 		movt	r3, 16384
 3806 17c4 4FF42052 		mov	r2, #10240
 3807 17c8 C4F20002 		movt	r2, 16384
 3808 17cc 126C     		ldr	r2, [r2, #64]
 3809 17ce 22F48032 		bic	r2, r2, #65536
 3810 17d2 1A64     		str	r2, [r3, #64]
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3811              		.loc 1 2343 0
 3812 17d4 4FF42053 		mov	r3, #10240
 3813 17d8 C4F20003 		movt	r3, 16384
 3814 17dc 4FF42052 		mov	r2, #10240
 3815 17e0 C4F20002 		movt	r2, 16384
 3816 17e4 126C     		ldr	r2, [r2, #64]
 3817 17e6 1146     		mov	r1, r2
 3818 17e8 7A68     		ldr	r2, [r7, #4]
 3819 17ea 0A43     		orrs	r2, r2, r1
 3820 17ec 1A64     		str	r2, [r3, #64]
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3821              		.loc 1 2344 0
 3822 17ee 07F10C07 		add	r7, r7, #12
 3823 17f2 BD46     		mov	sp, r7
 3824 17f4 80BC     		pop	{r7}
 3825 17f6 7047     		bx	lr
 3826              		.cfi_endproc
 3827              	.LFE156:
 3829              		.align	2
 3830              		.global	RTC_TimeStampPinSelection
 3831              		.thumb
 3832              		.thumb_func
 3834              	RTC_TimeStampPinSelection:
 3835              	.LFB157:
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3836              		.loc 1 2355 0
 3837              		.cfi_startproc
 3838              		@ args = 0, pretend = 0, frame = 8
 3839              		@ frame_needed = 1, uses_anonymous_args = 0
 3840              		@ link register save eliminated.
 3841 17f8 80B4     		push	{r7}
 3842              	.LCFI137:
 3843              		.cfi_def_cfa_offset 4
 3844              		.cfi_offset 7, -4
 3845 17fa 83B0     		sub	sp, sp, #12
 3846              	.LCFI138:
 3847              		.cfi_def_cfa_offset 16
 3848 17fc 00AF     		add	r7, sp, #0
 3849              	.LCFI139:
 3850              		.cfi_def_cfa_register 7
 3851 17fe 7860     		str	r0, [r7, #4]
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3852              		.loc 1 2359 0
 3853 1800 4FF42053 		mov	r3, #10240
 3854 1804 C4F20003 		movt	r3, 16384
 3855 1808 4FF42052 		mov	r2, #10240
 3856 180c C4F20002 		movt	r2, 16384
 3857 1810 126C     		ldr	r2, [r2, #64]
 3858 1812 22F40032 		bic	r2, r2, #131072
 3859 1816 1A64     		str	r2, [r3, #64]
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3860              		.loc 1 2360 0
 3861 1818 4FF42053 		mov	r3, #10240
 3862 181c C4F20003 		movt	r3, 16384
 3863 1820 4FF42052 		mov	r2, #10240
 3864 1824 C4F20002 		movt	r2, 16384
 3865 1828 126C     		ldr	r2, [r2, #64]
 3866 182a 1146     		mov	r1, r2
 3867 182c 7A68     		ldr	r2, [r7, #4]
 3868 182e 0A43     		orrs	r2, r2, r1
 3869 1830 1A64     		str	r2, [r3, #64]
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3870              		.loc 1 2361 0
 3871 1832 07F10C07 		add	r7, r7, #12
 3872 1836 BD46     		mov	sp, r7
 3873 1838 80BC     		pop	{r7}
 3874 183a 7047     		bx	lr
 3875              		.cfi_endproc
 3876              	.LFE157:
 3878              		.align	2
 3879              		.global	RTC_OutputTypeConfig
 3880              		.thumb
 3881              		.thumb_func
 3883              	RTC_OutputTypeConfig:
 3884              	.LFB158:
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3885              		.loc 1 2374 0
 3886              		.cfi_startproc
 3887              		@ args = 0, pretend = 0, frame = 8
 3888              		@ frame_needed = 1, uses_anonymous_args = 0
 3889              		@ link register save eliminated.
 3890 183c 80B4     		push	{r7}
 3891              	.LCFI140:
 3892              		.cfi_def_cfa_offset 4
 3893              		.cfi_offset 7, -4
 3894 183e 83B0     		sub	sp, sp, #12
 3895              	.LCFI141:
 3896              		.cfi_def_cfa_offset 16
 3897 1840 00AF     		add	r7, sp, #0
 3898              	.LCFI142:
 3899              		.cfi_def_cfa_register 7
 3900 1842 7860     		str	r0, [r7, #4]
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3901              		.loc 1 2378 0
 3902 1844 4FF42053 		mov	r3, #10240
 3903 1848 C4F20003 		movt	r3, 16384
 3904 184c 4FF42052 		mov	r2, #10240
 3905 1850 C4F20002 		movt	r2, 16384
 3906 1854 126C     		ldr	r2, [r2, #64]
 3907 1856 22F48022 		bic	r2, r2, #262144
 3908 185a 1A64     		str	r2, [r3, #64]
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3909              		.loc 1 2379 0
 3910 185c 4FF42053 		mov	r3, #10240
 3911 1860 C4F20003 		movt	r3, 16384
 3912 1864 4FF42052 		mov	r2, #10240
 3913 1868 C4F20002 		movt	r2, 16384
 3914 186c 126C     		ldr	r2, [r2, #64]
 3915 186e 1146     		mov	r1, r2
 3916 1870 7A68     		ldr	r2, [r7, #4]
 3917 1872 0A43     		orrs	r2, r2, r1
 3918 1874 1A64     		str	r2, [r3, #64]
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3919              		.loc 1 2380 0
 3920 1876 07F10C07 		add	r7, r7, #12
 3921 187a BD46     		mov	sp, r7
 3922 187c 80BC     		pop	{r7}
 3923 187e 7047     		bx	lr
 3924              		.cfi_endproc
 3925              	.LFE158:
 3927              		.align	2
 3928              		.global	RTC_SynchroShiftConfig
 3929              		.thumb
 3930              		.thumb_func
 3932              	RTC_SynchroShiftConfig:
 3933              	.LFB159:
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3934              		.loc 1 2412 0
 3935              		.cfi_startproc
 3936              		@ args = 0, pretend = 0, frame = 16
 3937              		@ frame_needed = 1, uses_anonymous_args = 0
 3938 1880 80B5     		push	{r7, lr}
 3939              	.LCFI143:
 3940              		.cfi_def_cfa_offset 8
 3941              		.cfi_offset 14, -4
 3942              		.cfi_offset 7, -8
 3943 1882 84B0     		sub	sp, sp, #16
 3944              	.LCFI144:
 3945              		.cfi_def_cfa_offset 24
 3946 1884 00AF     		add	r7, sp, #0
 3947              	.LCFI145:
 3948              		.cfi_def_cfa_register 7
 3949 1886 7860     		str	r0, [r7, #4]
 3950 1888 3960     		str	r1, [r7, #0]
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3951              		.loc 1 2413 0
 3952 188a 4FF00003 		mov	r3, #0
 3953 188e FB73     		strb	r3, [r7, #15]
2414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3954              		.loc 1 2414 0
 3955 1890 4FF00003 		mov	r3, #0
 3956 1894 BB60     		str	r3, [r7, #8]
2415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3957              		.loc 1 2421 0
 3958 1896 4FF42053 		mov	r3, #10240
 3959 189a C4F20003 		movt	r3, 16384
 3960 189e 4FF0CA02 		mov	r2, #202
 3961 18a2 5A62     		str	r2, [r3, #36]
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3962              		.loc 1 2422 0
 3963 18a4 4FF42053 		mov	r3, #10240
 3964 18a8 C4F20003 		movt	r3, 16384
 3965 18ac 4FF05302 		mov	r2, #83
 3966 18b0 5A62     		str	r2, [r3, #36]
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3967              		.loc 1 2425 0
 3968 18b2 4FF42053 		mov	r3, #10240
 3969 18b6 C4F20003 		movt	r3, 16384
 3970 18ba DB68     		ldr	r3, [r3, #12]
 3971 18bc 03F00803 		and	r3, r3, #8
 3972 18c0 002B     		cmp	r3, #0
 3973 18c2 11D0     		beq	.L144
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3974              		.loc 1 2428 0
 3975 18c4 03E0     		b	.L145
 3976              	.L146:
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 3977              		.loc 1 2430 0
 3978 18c6 BB68     		ldr	r3, [r7, #8]
 3979 18c8 03F10103 		add	r3, r3, #1
 3980 18cc BB60     		str	r3, [r7, #8]
 3981              	.L145:
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3982              		.loc 1 2428 0 discriminator 1
 3983 18ce 4FF42053 		mov	r3, #10240
 3984 18d2 C4F20003 		movt	r3, 16384
 3985 18d6 DB68     		ldr	r3, [r3, #12]
 3986 18d8 03F00803 		and	r3, r3, #8
 3987 18dc 002B     		cmp	r3, #0
 3988 18de 03D0     		beq	.L144
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3989              		.loc 1 2428 0 is_stmt 0 discriminator 2
 3990 18e0 BB68     		ldr	r3, [r7, #8]
 3991 18e2 B3F5805F 		cmp	r3, #4096
 3992 18e6 EED1     		bne	.L146
 3993              	.L144:
2431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3994              		.loc 1 2435 0 is_stmt 1
 3995 18e8 4FF42053 		mov	r3, #10240
 3996 18ec C4F20003 		movt	r3, 16384
 3997 18f0 DB68     		ldr	r3, [r3, #12]
 3998 18f2 03F00803 		and	r3, r3, #8
 3999 18f6 002B     		cmp	r3, #0
 4000 18f8 21D1     		bne	.L147
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4001              		.loc 1 2438 0
 4002 18fa 4FF42053 		mov	r3, #10240
 4003 18fe C4F20003 		movt	r3, 16384
 4004 1902 9B68     		ldr	r3, [r3, #8]
 4005 1904 03F01003 		and	r3, r3, #16
 4006 1908 002B     		cmp	r3, #0
 4007 190a 14D1     		bne	.L148
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4008              		.loc 1 2441 0
 4009 190c 4FF42053 		mov	r3, #10240
 4010 1910 C4F20003 		movt	r3, 16384
 4011 1914 3968     		ldr	r1, [r7, #0]
 4012 1916 7A68     		ldr	r2, [r7, #4]
 4013 1918 0A43     		orrs	r2, r2, r1
 4014 191a DA62     		str	r2, [r3, #44]
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4015              		.loc 1 2443 0
 4016 191c FFF7FEFF 		bl	RTC_WaitForSynchro
 4017 1920 0346     		mov	r3, r0
 4018 1922 002B     		cmp	r3, #0
 4019 1924 03D1     		bne	.L149
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4020              		.loc 1 2445 0
 4021 1926 4FF00003 		mov	r3, #0
 4022 192a FB73     		strb	r3, [r7, #15]
 4023 192c 0AE0     		b	.L150
 4024              	.L149:
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4025              		.loc 1 2449 0
 4026 192e 4FF00103 		mov	r3, #1
 4027 1932 FB73     		strb	r3, [r7, #15]
 4028 1934 06E0     		b	.L150
 4029              	.L148:
2450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4030              		.loc 1 2454 0
 4031 1936 4FF00003 		mov	r3, #0
 4032 193a FB73     		strb	r3, [r7, #15]
 4033 193c 02E0     		b	.L150
 4034              	.L147:
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4035              		.loc 1 2459 0
 4036 193e 4FF00003 		mov	r3, #0
 4037 1942 FB73     		strb	r3, [r7, #15]
 4038              	.L150:
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4039              		.loc 1 2463 0
 4040 1944 4FF42053 		mov	r3, #10240
 4041 1948 C4F20003 		movt	r3, 16384
 4042 194c 4FF0FF02 		mov	r2, #255
 4043 1950 5A62     		str	r2, [r3, #36]
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4044              		.loc 1 2465 0
 4045 1952 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4046              		.loc 1 2466 0
 4047 1954 1846     		mov	r0, r3
 4048 1956 07F11007 		add	r7, r7, #16
 4049 195a BD46     		mov	sp, r7
 4050 195c 80BD     		pop	{r7, pc}
 4051              		.cfi_endproc
 4052              	.LFE159:
 4054 195e 00BF     		.align	2
 4055              		.global	RTC_ITConfig
 4056              		.thumb
 4057              		.thumb_func
 4059              	RTC_ITConfig:
 4060              	.LFB160:
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4061              		.loc 1 2531 0
 4062              		.cfi_startproc
 4063              		@ args = 0, pretend = 0, frame = 8
 4064              		@ frame_needed = 1, uses_anonymous_args = 0
 4065              		@ link register save eliminated.
 4066 1960 80B4     		push	{r7}
 4067              	.LCFI146:
 4068              		.cfi_def_cfa_offset 4
 4069              		.cfi_offset 7, -4
 4070 1962 83B0     		sub	sp, sp, #12
 4071              	.LCFI147:
 4072              		.cfi_def_cfa_offset 16
 4073 1964 00AF     		add	r7, sp, #0
 4074              	.LCFI148:
 4075              		.cfi_def_cfa_register 7
 4076 1966 7860     		str	r0, [r7, #4]
 4077 1968 0B46     		mov	r3, r1
 4078 196a FB70     		strb	r3, [r7, #3]
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4079              		.loc 1 2537 0
 4080 196c 4FF42053 		mov	r3, #10240
 4081 1970 C4F20003 		movt	r3, 16384
 4082 1974 4FF0CA02 		mov	r2, #202
 4083 1978 5A62     		str	r2, [r3, #36]
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4084              		.loc 1 2538 0
 4085 197a 4FF42053 		mov	r3, #10240
 4086 197e C4F20003 		movt	r3, 16384
 4087 1982 4FF05302 		mov	r2, #83
 4088 1986 5A62     		str	r2, [r3, #36]
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4089              		.loc 1 2540 0
 4090 1988 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4091 198a 002B     		cmp	r3, #0
 4092 198c 1ED0     		beq	.L152
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4093              		.loc 1 2543 0
 4094 198e 4FF42053 		mov	r3, #10240
 4095 1992 C4F20003 		movt	r3, 16384
 4096 1996 4FF42052 		mov	r2, #10240
 4097 199a C4F20002 		movt	r2, 16384
 4098 199e 9268     		ldr	r2, [r2, #8]
 4099 19a0 1146     		mov	r1, r2
 4100 19a2 7A68     		ldr	r2, [r7, #4]
 4101 19a4 22F00402 		bic	r2, r2, #4
 4102 19a8 0A43     		orrs	r2, r2, r1
 4103 19aa 9A60     		str	r2, [r3, #8]
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4104              		.loc 1 2545 0
 4105 19ac 4FF42053 		mov	r3, #10240
 4106 19b0 C4F20003 		movt	r3, 16384
 4107 19b4 4FF42052 		mov	r2, #10240
 4108 19b8 C4F20002 		movt	r2, 16384
 4109 19bc 126C     		ldr	r2, [r2, #64]
 4110 19be 1146     		mov	r1, r2
 4111 19c0 7A68     		ldr	r2, [r7, #4]
 4112 19c2 02F00402 		and	r2, r2, #4
 4113 19c6 0A43     		orrs	r2, r2, r1
 4114 19c8 1A64     		str	r2, [r3, #64]
 4115 19ca 21E0     		b	.L153
 4116              	.L152:
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4117              		.loc 1 2550 0
 4118 19cc 4FF42053 		mov	r3, #10240
 4119 19d0 C4F20003 		movt	r3, 16384
 4120 19d4 4FF42052 		mov	r2, #10240
 4121 19d8 C4F20002 		movt	r2, 16384
 4122 19dc 9268     		ldr	r2, [r2, #8]
 4123 19de 1146     		mov	r1, r2
 4124 19e0 7A68     		ldr	r2, [r7, #4]
 4125 19e2 22F00402 		bic	r2, r2, #4
 4126 19e6 6FEA0202 		mvn	r2, r2
 4127 19ea 0A40     		ands	r2, r2, r1
 4128 19ec 9A60     		str	r2, [r3, #8]
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4129              		.loc 1 2552 0
 4130 19ee 4FF42053 		mov	r3, #10240
 4131 19f2 C4F20003 		movt	r3, 16384
 4132 19f6 4FF42052 		mov	r2, #10240
 4133 19fa C4F20002 		movt	r2, 16384
 4134 19fe 126C     		ldr	r2, [r2, #64]
 4135 1a00 1146     		mov	r1, r2
 4136 1a02 7A68     		ldr	r2, [r7, #4]
 4137 1a04 02F00402 		and	r2, r2, #4
 4138 1a08 6FEA0202 		mvn	r2, r2
 4139 1a0c 0A40     		ands	r2, r2, r1
 4140 1a0e 1A64     		str	r2, [r3, #64]
 4141              	.L153:
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4142              		.loc 1 2555 0
 4143 1a10 4FF42053 		mov	r3, #10240
 4144 1a14 C4F20003 		movt	r3, 16384
 4145 1a18 4FF0FF02 		mov	r2, #255
 4146 1a1c 5A62     		str	r2, [r3, #36]
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4147              		.loc 1 2556 0
 4148 1a1e 07F10C07 		add	r7, r7, #12
 4149 1a22 BD46     		mov	sp, r7
 4150 1a24 80BC     		pop	{r7}
 4151 1a26 7047     		bx	lr
 4152              		.cfi_endproc
 4153              	.LFE160:
 4155              		.align	2
 4156              		.global	RTC_GetFlagStatus
 4157              		.thumb
 4158              		.thumb_func
 4160              	RTC_GetFlagStatus:
 4161              	.LFB161:
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4162              		.loc 1 2577 0
 4163              		.cfi_startproc
 4164              		@ args = 0, pretend = 0, frame = 16
 4165              		@ frame_needed = 1, uses_anonymous_args = 0
 4166              		@ link register save eliminated.
 4167 1a28 80B4     		push	{r7}
 4168              	.LCFI149:
 4169              		.cfi_def_cfa_offset 4
 4170              		.cfi_offset 7, -4
 4171 1a2a 85B0     		sub	sp, sp, #20
 4172              	.LCFI150:
 4173              		.cfi_def_cfa_offset 24
 4174 1a2c 00AF     		add	r7, sp, #0
 4175              	.LCFI151:
 4176              		.cfi_def_cfa_register 7
 4177 1a2e 7860     		str	r0, [r7, #4]
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4178              		.loc 1 2578 0
 4179 1a30 4FF00003 		mov	r3, #0
 4180 1a34 FB73     		strb	r3, [r7, #15]
2579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4181              		.loc 1 2579 0
 4182 1a36 4FF00003 		mov	r3, #0
 4183 1a3a BB60     		str	r3, [r7, #8]
2580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4184              		.loc 1 2585 0
 4185 1a3c 4FF42053 		mov	r3, #10240
 4186 1a40 C4F20003 		movt	r3, 16384
 4187 1a44 DB68     		ldr	r3, [r3, #12]
 4188 1a46 1A46     		mov	r2, r3
 4189 1a48 43F67773 		movw	r3, #16247
 4190 1a4c 1340     		ands	r3, r3, r2
 4191 1a4e BB60     		str	r3, [r7, #8]
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4192              		.loc 1 2588 0
 4193 1a50 BA68     		ldr	r2, [r7, #8]
 4194 1a52 7B68     		ldr	r3, [r7, #4]
 4195 1a54 1340     		ands	r3, r3, r2
 4196 1a56 002B     		cmp	r3, #0
 4197 1a58 03D0     		beq	.L155
2589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4198              		.loc 1 2590 0
 4199 1a5a 4FF00103 		mov	r3, #1
 4200 1a5e FB73     		strb	r3, [r7, #15]
 4201 1a60 02E0     		b	.L156
 4202              	.L155:
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4203              		.loc 1 2594 0
 4204 1a62 4FF00003 		mov	r3, #0
 4205 1a66 FB73     		strb	r3, [r7, #15]
 4206              	.L156:
2595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4207              		.loc 1 2596 0
 4208 1a68 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4209              		.loc 1 2597 0
 4210 1a6a 1846     		mov	r0, r3
 4211 1a6c 07F11407 		add	r7, r7, #20
 4212 1a70 BD46     		mov	sp, r7
 4213 1a72 80BC     		pop	{r7}
 4214 1a74 7047     		bx	lr
 4215              		.cfi_endproc
 4216              	.LFE161:
 4218 1a76 00BF     		.align	2
 4219              		.global	RTC_ClearFlag
 4220              		.thumb
 4221              		.thumb_func
 4223              	RTC_ClearFlag:
 4224              	.LFB162:
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4225              		.loc 1 2613 0
 4226              		.cfi_startproc
 4227              		@ args = 0, pretend = 0, frame = 8
 4228              		@ frame_needed = 1, uses_anonymous_args = 0
 4229              		@ link register save eliminated.
 4230 1a78 80B4     		push	{r7}
 4231              	.LCFI152:
 4232              		.cfi_def_cfa_offset 4
 4233              		.cfi_offset 7, -4
 4234 1a7a 83B0     		sub	sp, sp, #12
 4235              	.LCFI153:
 4236              		.cfi_def_cfa_offset 16
 4237 1a7c 00AF     		add	r7, sp, #0
 4238              	.LCFI154:
 4239              		.cfi_def_cfa_register 7
 4240 1a7e 7860     		str	r0, [r7, #4]
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4241              		.loc 1 2618 0
 4242 1a80 4FF42053 		mov	r3, #10240
 4243 1a84 C4F20003 		movt	r3, 16384
 4244 1a88 7A68     		ldr	r2, [r7, #4]
 4245 1a8a 4FEA0242 		lsl	r2, r2, #16
 4246 1a8e 4FEA1242 		lsr	r2, r2, #16
 4247 1a92 42F08002 		orr	r2, r2, #128
 4248 1a96 6FEA0201 		mvn	r1, r2
 4249 1a9a 4FF42052 		mov	r2, #10240
 4250 1a9e C4F20002 		movt	r2, 16384
 4251 1aa2 D268     		ldr	r2, [r2, #12]
 4252 1aa4 02F08002 		and	r2, r2, #128
 4253 1aa8 0A43     		orrs	r2, r2, r1
 4254 1aaa DA60     		str	r2, [r3, #12]
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4255              		.loc 1 2619 0
 4256 1aac 07F10C07 		add	r7, r7, #12
 4257 1ab0 BD46     		mov	sp, r7
 4258 1ab2 80BC     		pop	{r7}
 4259 1ab4 7047     		bx	lr
 4260              		.cfi_endproc
 4261              	.LFE162:
 4263 1ab6 00BF     		.align	2
 4264              		.global	RTC_GetITStatus
 4265              		.thumb
 4266              		.thumb_func
 4268              	RTC_GetITStatus:
 4269              	.LFB163:
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4270              		.loc 1 2633 0
 4271              		.cfi_startproc
 4272              		@ args = 0, pretend = 0, frame = 24
 4273              		@ frame_needed = 1, uses_anonymous_args = 0
 4274              		@ link register save eliminated.
 4275 1ab8 80B4     		push	{r7}
 4276              	.LCFI155:
 4277              		.cfi_def_cfa_offset 4
 4278              		.cfi_offset 7, -4
 4279 1aba 87B0     		sub	sp, sp, #28
 4280              	.LCFI156:
 4281              		.cfi_def_cfa_offset 32
 4282 1abc 00AF     		add	r7, sp, #0
 4283              	.LCFI157:
 4284              		.cfi_def_cfa_register 7
 4285 1abe 7860     		str	r0, [r7, #4]
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4286              		.loc 1 2634 0
 4287 1ac0 4FF00003 		mov	r3, #0
 4288 1ac4 FB75     		strb	r3, [r7, #23]
2635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4289              		.loc 1 2635 0
 4290 1ac6 4FF00003 		mov	r3, #0
 4291 1aca 3B61     		str	r3, [r7, #16]
 4292 1acc 4FF00003 		mov	r3, #0
 4293 1ad0 FB60     		str	r3, [r7, #12]
2636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4294              		.loc 1 2641 0
 4295 1ad2 4FF42053 		mov	r3, #10240
 4296 1ad6 C4F20003 		movt	r3, 16384
 4297 1ada 1B6C     		ldr	r3, [r3, #64]
 4298 1adc 03F00403 		and	r3, r3, #4
 4299 1ae0 3B61     		str	r3, [r7, #16]
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4300              		.loc 1 2644 0
 4301 1ae2 4FF42053 		mov	r3, #10240
 4302 1ae6 C4F20003 		movt	r3, 16384
 4303 1aea 9B68     		ldr	r3, [r3, #8]
 4304 1aec 1A46     		mov	r2, r3
 4305 1aee 7B68     		ldr	r3, [r7, #4]
 4306 1af0 1A40     		ands	r2, r2, r3
 4307 1af2 7B68     		ldr	r3, [r7, #4]
 4308 1af4 4FEAD331 		lsr	r1, r3, #15
 4309 1af8 3B69     		ldr	r3, [r7, #16]
 4310 1afa 0B40     		ands	r3, r3, r1
 4311 1afc 1343     		orrs	r3, r3, r2
 4312 1afe FB60     		str	r3, [r7, #12]
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4313              		.loc 1 2647 0
 4314 1b00 4FF42053 		mov	r3, #10240
 4315 1b04 C4F20003 		movt	r3, 16384
 4316 1b08 DB68     		ldr	r3, [r3, #12]
 4317 1b0a 1A46     		mov	r2, r3
 4318 1b0c 7B68     		ldr	r3, [r7, #4]
 4319 1b0e 4FEA1313 		lsr	r3, r3, #4
 4320 1b12 1340     		ands	r3, r3, r2
 4321 1b14 3B61     		str	r3, [r7, #16]
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4322              		.loc 1 2650 0
 4323 1b16 FB68     		ldr	r3, [r7, #12]
 4324 1b18 002B     		cmp	r3, #0
 4325 1b1a 0AD0     		beq	.L159
 4326              		.loc 1 2650 0 is_stmt 0 discriminator 1
 4327 1b1c 3B69     		ldr	r3, [r7, #16]
 4328 1b1e 4FEA0343 		lsl	r3, r3, #16
 4329 1b22 4FEA1343 		lsr	r3, r3, #16
 4330 1b26 002B     		cmp	r3, #0
 4331 1b28 03D0     		beq	.L159
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4332              		.loc 1 2652 0 is_stmt 1
 4333 1b2a 4FF00103 		mov	r3, #1
 4334 1b2e FB75     		strb	r3, [r7, #23]
 4335 1b30 02E0     		b	.L160
 4336              	.L159:
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4337              		.loc 1 2656 0
 4338 1b32 4FF00003 		mov	r3, #0
 4339 1b36 FB75     		strb	r3, [r7, #23]
 4340              	.L160:
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4341              		.loc 1 2658 0
 4342 1b38 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4343              		.loc 1 2659 0
 4344 1b3a 1846     		mov	r0, r3
 4345 1b3c 07F11C07 		add	r7, r7, #28
 4346 1b40 BD46     		mov	sp, r7
 4347 1b42 80BC     		pop	{r7}
 4348 1b44 7047     		bx	lr
 4349              		.cfi_endproc
 4350              	.LFE163:
 4352 1b46 00BF     		.align	2
 4353              		.global	RTC_ClearITPendingBit
 4354              		.thumb
 4355              		.thumb_func
 4357              	RTC_ClearITPendingBit:
 4358              	.LFB164:
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4359              		.loc 1 2673 0
 4360              		.cfi_startproc
 4361              		@ args = 0, pretend = 0, frame = 16
 4362              		@ frame_needed = 1, uses_anonymous_args = 0
 4363              		@ link register save eliminated.
 4364 1b48 80B4     		push	{r7}
 4365              	.LCFI158:
 4366              		.cfi_def_cfa_offset 4
 4367              		.cfi_offset 7, -4
 4368 1b4a 85B0     		sub	sp, sp, #20
 4369              	.LCFI159:
 4370              		.cfi_def_cfa_offset 24
 4371 1b4c 00AF     		add	r7, sp, #0
 4372              	.LCFI160:
 4373              		.cfi_def_cfa_register 7
 4374 1b4e 7860     		str	r0, [r7, #4]
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4375              		.loc 1 2674 0
 4376 1b50 4FF00003 		mov	r3, #0
 4377 1b54 FB60     		str	r3, [r7, #12]
2675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4378              		.loc 1 2680 0
 4379 1b56 7B68     		ldr	r3, [r7, #4]
 4380 1b58 4FEA1313 		lsr	r3, r3, #4
 4381 1b5c FB60     		str	r3, [r7, #12]
2681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4382              		.loc 1 2683 0
 4383 1b5e 4FF42053 		mov	r3, #10240
 4384 1b62 C4F20003 		movt	r3, 16384
 4385 1b66 FA68     		ldr	r2, [r7, #12]
 4386 1b68 4FEA0242 		lsl	r2, r2, #16
 4387 1b6c 4FEA1242 		lsr	r2, r2, #16
 4388 1b70 42F08002 		orr	r2, r2, #128
 4389 1b74 6FEA0201 		mvn	r1, r2
 4390 1b78 4FF42052 		mov	r2, #10240
 4391 1b7c C4F20002 		movt	r2, 16384
 4392 1b80 D268     		ldr	r2, [r2, #12]
 4393 1b82 02F08002 		and	r2, r2, #128
 4394 1b86 0A43     		orrs	r2, r2, r1
 4395 1b88 DA60     		str	r2, [r3, #12]
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4396              		.loc 1 2684 0
 4397 1b8a 07F11407 		add	r7, r7, #20
 4398 1b8e BD46     		mov	sp, r7
 4399 1b90 80BC     		pop	{r7}
 4400 1b92 7047     		bx	lr
 4401              		.cfi_endproc
 4402              	.LFE164:
 4404              		.align	2
 4405              		.thumb
 4406              		.thumb_func
 4408              	RTC_ByteToBcd2:
 4409              	.LFB165:
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4410              		.loc 1 2696 0
 4411              		.cfi_startproc
 4412              		@ args = 0, pretend = 0, frame = 16
 4413              		@ frame_needed = 1, uses_anonymous_args = 0
 4414              		@ link register save eliminated.
 4415 1b94 80B4     		push	{r7}
 4416              	.LCFI161:
 4417              		.cfi_def_cfa_offset 4
 4418              		.cfi_offset 7, -4
 4419 1b96 85B0     		sub	sp, sp, #20
 4420              	.LCFI162:
 4421              		.cfi_def_cfa_offset 24
 4422 1b98 00AF     		add	r7, sp, #0
 4423              	.LCFI163:
 4424              		.cfi_def_cfa_register 7
 4425 1b9a 0346     		mov	r3, r0
 4426 1b9c FB71     		strb	r3, [r7, #7]
2697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4427              		.loc 1 2697 0
 4428 1b9e 4FF00003 		mov	r3, #0
 4429 1ba2 FB73     		strb	r3, [r7, #15]
2698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4430              		.loc 1 2699 0
 4431 1ba4 07E0     		b	.L163
 4432              	.L164:
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4433              		.loc 1 2701 0
 4434 1ba6 FB7B     		ldrb	r3, [r7, #15]
 4435 1ba8 03F10103 		add	r3, r3, #1
 4436 1bac FB73     		strb	r3, [r7, #15]
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4437              		.loc 1 2702 0
 4438 1bae FB79     		ldrb	r3, [r7, #7]
 4439 1bb0 A3F10A03 		sub	r3, r3, #10
 4440 1bb4 FB71     		strb	r3, [r7, #7]
 4441              	.L163:
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4442              		.loc 1 2699 0 discriminator 1
 4443 1bb6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4444 1bb8 092B     		cmp	r3, #9
 4445 1bba F4D8     		bhi	.L164
2703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4446              		.loc 1 2705 0
 4447 1bbc FB7B     		ldrb	r3, [r7, #15]
 4448 1bbe 4FEA0313 		lsl	r3, r3, #4
 4449 1bc2 DAB2     		uxtb	r2, r3
 4450 1bc4 FB79     		ldrb	r3, [r7, #7]
 4451 1bc6 1343     		orrs	r3, r3, r2
 4452 1bc8 DBB2     		uxtb	r3, r3
2706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4453              		.loc 1 2706 0
 4454 1bca 1846     		mov	r0, r3
 4455 1bcc 07F11407 		add	r7, r7, #20
 4456 1bd0 BD46     		mov	sp, r7
 4457 1bd2 80BC     		pop	{r7}
 4458 1bd4 7047     		bx	lr
 4459              		.cfi_endproc
 4460              	.LFE165:
 4462 1bd6 00BF     		.align	2
 4463              		.thumb
 4464              		.thumb_func
 4466              	RTC_Bcd2ToByte:
 4467              	.LFB166:
2707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4468              		.loc 1 2714 0
 4469              		.cfi_startproc
 4470              		@ args = 0, pretend = 0, frame = 16
 4471              		@ frame_needed = 1, uses_anonymous_args = 0
 4472              		@ link register save eliminated.
 4473 1bd8 80B4     		push	{r7}
 4474              	.LCFI164:
 4475              		.cfi_def_cfa_offset 4
 4476              		.cfi_offset 7, -4
 4477 1bda 85B0     		sub	sp, sp, #20
 4478              	.LCFI165:
 4479              		.cfi_def_cfa_offset 24
 4480 1bdc 00AF     		add	r7, sp, #0
 4481              	.LCFI166:
 4482              		.cfi_def_cfa_register 7
 4483 1bde 0346     		mov	r3, r0
 4484 1be0 FB71     		strb	r3, [r7, #7]
2715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4485              		.loc 1 2715 0
 4486 1be2 4FF00003 		mov	r3, #0
 4487 1be6 FB73     		strb	r3, [r7, #15]
2716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4488              		.loc 1 2716 0
 4489 1be8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4490 1bea 4FEA1313 		lsr	r3, r3, #4
 4491 1bee DBB2     		uxtb	r3, r3
 4492 1bf0 1A46     		mov	r2, r3
 4493 1bf2 4FEA8202 		lsl	r2, r2, #2
 4494 1bf6 D318     		adds	r3, r2, r3
 4495 1bf8 4FEA4303 		lsl	r3, r3, #1
 4496 1bfc FB73     		strb	r3, [r7, #15]
2717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4497              		.loc 1 2717 0
 4498 1bfe FB79     		ldrb	r3, [r7, #7]
 4499 1c00 03F00F03 		and	r3, r3, #15
 4500 1c04 DAB2     		uxtb	r2, r3
 4501 1c06 FB7B     		ldrb	r3, [r7, #15]
 4502 1c08 D318     		adds	r3, r2, r3
 4503 1c0a DBB2     		uxtb	r3, r3
2718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4504              		.loc 1 2718 0
 4505 1c0c 1846     		mov	r0, r3
 4506 1c0e 07F11407 		add	r7, r7, #20
 4507 1c12 BD46     		mov	sp, r7
 4508 1c14 80BC     		pop	{r7}
 4509 1c16 7047     		bx	lr
 4510              		.cfi_endproc
 4511              	.LFE166:
 4513              	.Letext0:
 4514              		.file 2 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 4515              		.file 3 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4xx.h"
 4516              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_rtc.h
 4517              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:19     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:24     .text:00000000 RTC_DeInit
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:399    .text:000002a4 RTC_EnterInitMode
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:527    .text:0000035c RTC_WaitForSynchro
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:198    .text:0000016c RTC_Init
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:493    .text:00000338 RTC_ExitInitMode
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:302    .text:00000230 RTC_StructInit
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:345    .text:0000025c RTC_WriteProtectionCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:627    .text:0000040c RTC_RefClockCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:718    .text:000004a8 RTC_BypassShadowCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:788    .text:00000520 RTC_SetTime
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4466   .text:00001bd8 RTC_Bcd2ToByte
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4408   .text:00001b94 RTC_ByteToBcd2
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:976    .text:00000668 RTC_TimeStructInit
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1023   .text:0000069c RTC_GetTime
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1126   .text:00000748 RTC_GetSubSecond
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1171   .text:00000778 RTC_SetDate
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1359   .text:000008b8 RTC_DateStructInit
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1406   .text:000008ec RTC_GetDate
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1507   .text:00000994 RTC_SetAlarm
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1730   .text:00000b10 RTC_AlarmStructInit
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1789   .text:00000b5c RTC_GetAlarm
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:1927   .text:00000c48 RTC_AlarmCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2058   .text:00000d38 RTC_AlarmSubSecondConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2131   .text:00000da8 RTC_GetAlarmSubSecond
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2189   .text:00000df8 RTC_WakeUpClockConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2253   .text:00000e68 RTC_SetWakeUpCounter
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2304   .text:00000eb0 RTC_GetWakeUpCounter
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2337   .text:00000ed0 RTC_WakeUpCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2456   .text:00000fa8 RTC_DayLightSavingConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2523   .text:0000101c RTC_GetStoreOperation
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2555   .text:00001038 RTC_OutputConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2622   .text:000010ac RTC_CoarseCalibConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2697   .text:00001120 RTC_CoarseCalibCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2788   .text:000011bc RTC_CalibOutputCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2858   .text:00001234 RTC_CalibOutputConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:2922   .text:000012a4 RTC_SmoothCalibConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3031   .text:00001360 RTC_TimeStampCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3112   .text:000013e4 RTC_GetTimeStamp
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3277   .text:00001518 RTC_GetTimeStampSubSecond
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3308   .text:00001530 RTC_TamperTriggerConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3370   .text:0000158c RTC_TamperCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3431   .text:000015e4 RTC_TamperFilterConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3480   .text:00001628 RTC_TamperSamplingFreqConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3529   .text:0000166c RTC_TamperPinsPrechargeDuration
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3578   .text:000016b0 RTC_TimeStampOnTamperDetectionCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3633   .text:000016fc RTC_TamperPullUpCmd
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3688   .text:00001748 RTC_WriteBackupRegister
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3737   .text:00001780 RTC_ReadBackupRegister
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3785   .text:000017b4 RTC_TamperPinSelection
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3834   .text:000017f8 RTC_TimeStampPinSelection
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3883   .text:0000183c RTC_OutputTypeConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:3932   .text:00001880 RTC_SynchroShiftConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4059   .text:00001960 RTC_ITConfig
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4160   .text:00001a28 RTC_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4223   .text:00001a78 RTC_ClearFlag
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4268   .text:00001ab8 RTC_GetITStatus
C:\Users\Alex\AppData\Local\Temp\ccuAOU1t.s:4357   .text:00001b48 RTC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
