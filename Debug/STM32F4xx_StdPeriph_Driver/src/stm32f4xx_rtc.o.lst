   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	RTC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	RTC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 368 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  42              		.loc 1 369 0
  43 0006 4FF00003 		mov	r3, #0
  44 000a 7B60     		str	r3, [r7, #4]
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  45              		.loc 1 370 0
  46 000c 4FF00003 		mov	r3, #0
  47 0010 BB60     		str	r3, [r7, #8]
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  48              		.loc 1 371 0
  49 0012 4FF00003 		mov	r3, #0
  50 0016 FB73     		strb	r3, [r7, #15]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  51              		.loc 1 374 0
  52 0018 4FF42053 		mov	r3, #10240
  53 001c C4F20003 		movt	r3, 16384
  54 0020 4FF0CA02 		mov	r2, #202
  55 0024 5A62     		str	r2, [r3, #36]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  56              		.loc 1 375 0
  57 0026 4FF42053 		mov	r3, #10240
  58 002a C4F20003 		movt	r3, 16384
  59 002e 4FF05302 		mov	r2, #83
  60 0032 5A62     		str	r2, [r3, #36]
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  61              		.loc 1 378 0
  62 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  63 0038 0346     		mov	r3, r0
  64 003a 002B     		cmp	r3, #0
  65 003c 03D1     		bne	.L2
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  66              		.loc 1 380 0
  67 003e 4FF00003 		mov	r3, #0
  68 0042 FB73     		strb	r3, [r7, #15]
  69 0044 84E0     		b	.L3
  70              	.L2:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  71              		.loc 1 385 0
  72 0046 4FF42053 		mov	r3, #10240
  73 004a C4F20003 		movt	r3, 16384
  74 004e 4FF00002 		mov	r2, #0
  75 0052 1A60     		str	r2, [r3, #0]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  76              		.loc 1 386 0
  77 0054 4FF42053 		mov	r3, #10240
  78 0058 C4F20003 		movt	r3, 16384
  79 005c 42F20112 		movw	r2, #8449
  80 0060 5A60     		str	r2, [r3, #4]
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  81              		.loc 1 388 0
  82 0062 4FF42053 		mov	r3, #10240
  83 0066 C4F20003 		movt	r3, 16384
  84 006a 4FF42052 		mov	r2, #10240
  85 006e C4F20002 		movt	r2, 16384
  86 0072 9268     		ldr	r2, [r2, #8]
  87 0074 02F00702 		and	r2, r2, #7
  88 0078 9A60     		str	r2, [r3, #8]
  89              	.L5:
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  90              		.loc 1 393 0 discriminator 1
  91 007a 4FF42053 		mov	r3, #10240
  92 007e C4F20003 		movt	r3, 16384
  93 0082 DB68     		ldr	r3, [r3, #12]
  94 0084 03F00403 		and	r3, r3, #4
  95 0088 BB60     		str	r3, [r7, #8]
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  96              		.loc 1 394 0 discriminator 1
  97 008a 7B68     		ldr	r3, [r7, #4]
  98 008c 03F10103 		add	r3, r3, #1
  99 0090 7B60     		str	r3, [r7, #4]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 100              		.loc 1 395 0 discriminator 1
 101 0092 7B68     		ldr	r3, [r7, #4]
 102 0094 B3F5803F 		cmp	r3, #65536
 103 0098 02D0     		beq	.L4
 104 009a BB68     		ldr	r3, [r7, #8]
 105 009c 002B     		cmp	r3, #0
 106 009e ECD0     		beq	.L5
 107              	.L4:
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 108              		.loc 1 397 0
 109 00a0 4FF42053 		mov	r3, #10240
 110 00a4 C4F20003 		movt	r3, 16384
 111 00a8 DB68     		ldr	r3, [r3, #12]
 112 00aa 03F00403 		and	r3, r3, #4
 113 00ae 002B     		cmp	r3, #0
 114 00b0 03D1     		bne	.L6
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 115              		.loc 1 399 0
 116 00b2 4FF00003 		mov	r3, #0
 117 00b6 FB73     		strb	r3, [r7, #15]
 118 00b8 4AE0     		b	.L3
 119              	.L6:
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 120              		.loc 1 404 0
 121 00ba 4FF42053 		mov	r3, #10240
 122 00be C4F20003 		movt	r3, 16384
 123 00c2 9B68     		ldr	r3, [r3, #8]
 124 00c4 4FF42053 		mov	r3, #10240
 125 00c8 C4F20003 		movt	r3, 16384
 126 00cc 4FF00002 		mov	r2, #0
 127 00d0 9A60     		str	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 128              		.loc 1 405 0
 129 00d2 4FF42053 		mov	r3, #10240
 130 00d6 C4F20003 		movt	r3, 16384
 131 00da 4FF6FF72 		movw	r2, #65535
 132 00de 5A61     		str	r2, [r3, #20]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 133              		.loc 1 406 0
 134 00e0 4FF42053 		mov	r3, #10240
 135 00e4 C4F20003 		movt	r3, 16384
 136 00e8 4FF0FF02 		mov	r2, #255
 137 00ec C0F27F02 		movt	r2, 127
 138 00f0 1A61     		str	r2, [r3, #16]
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 139              		.loc 1 407 0
 140 00f2 4FF42053 		mov	r3, #10240
 141 00f6 C4F20003 		movt	r3, 16384
 142 00fa 4FF00002 		mov	r2, #0
 143 00fe 9A61     		str	r2, [r3, #24]
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 144              		.loc 1 408 0
 145 0100 4FF42053 		mov	r3, #10240
 146 0104 C4F20003 		movt	r3, 16384
 147 0108 4FF00002 		mov	r2, #0
 148 010c DA61     		str	r2, [r3, #28]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 149              		.loc 1 409 0
 150 010e 4FF42053 		mov	r3, #10240
 151 0112 C4F20003 		movt	r3, 16384
 152 0116 4FF00002 		mov	r2, #0
 153 011a 1A62     		str	r2, [r3, #32]
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 154              		.loc 1 412 0
 155 011c 4FF42053 		mov	r3, #10240
 156 0120 C4F20003 		movt	r3, 16384
 157 0124 4FF00002 		mov	r2, #0
 158 0128 DA60     		str	r2, [r3, #12]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 159              		.loc 1 415 0
 160 012a 4FF42053 		mov	r3, #10240
 161 012e C4F20003 		movt	r3, 16384
 162 0132 4FF00002 		mov	r2, #0
 163 0136 1A64     		str	r2, [r3, #64]
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 164              		.loc 1 417 0
 165 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 166 013c 0346     		mov	r3, r0
 167 013e 002B     		cmp	r3, #0
 168 0140 03D1     		bne	.L7
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 169              		.loc 1 419 0
 170 0142 4FF00003 		mov	r3, #0
 171 0146 FB73     		strb	r3, [r7, #15]
 172 0148 02E0     		b	.L3
 173              	.L7:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 174              		.loc 1 423 0
 175 014a 4FF00103 		mov	r3, #1
 176 014e FB73     		strb	r3, [r7, #15]
 177              	.L3:
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 178              		.loc 1 429 0
 179 0150 4FF42053 		mov	r3, #10240
 180 0154 C4F20003 		movt	r3, 16384
 181 0158 4FF0FF02 		mov	r2, #255
 182 015c 5A62     		str	r2, [r3, #36]
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 183              		.loc 1 431 0
 184 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 185              		.loc 1 432 0
 186 0160 1846     		mov	r0, r3
 187 0162 07F11007 		add	r7, r7, #16
 188 0166 BD46     		mov	sp, r7
 189 0168 80BD     		pop	{r7, pc}
 190              		.cfi_endproc
 191              	.LFE110:
 193 016a 00BF     		.section	.text.RTC_Init,"ax",%progbits
 194              		.align	2
 195              		.global	RTC_Init
 196              		.thumb
 197              		.thumb_func
 199              	RTC_Init:
 200              	.LFB111:
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 201              		.loc 1 446 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0000 80B5     		push	{r7, lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 14, -4
 209              		.cfi_offset 7, -8
 210 0002 84B0     		sub	sp, sp, #16
 211              	.LCFI4:
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI5:
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 217              		.loc 1 447 0
 218 0008 4FF00003 		mov	r3, #0
 219 000c FB73     		strb	r3, [r7, #15]
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 220              		.loc 1 455 0
 221 000e 4FF42053 		mov	r3, #10240
 222 0012 C4F20003 		movt	r3, 16384
 223 0016 4FF0CA02 		mov	r2, #202
 224 001a 5A62     		str	r2, [r3, #36]
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 225              		.loc 1 456 0
 226 001c 4FF42053 		mov	r3, #10240
 227 0020 C4F20003 		movt	r3, 16384
 228 0024 4FF05302 		mov	r2, #83
 229 0028 5A62     		str	r2, [r3, #36]
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 230              		.loc 1 459 0
 231 002a FFF7FEFF 		bl	RTC_EnterInitMode
 232 002e 0346     		mov	r3, r0
 233 0030 002B     		cmp	r3, #0
 234 0032 03D1     		bne	.L9
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 235              		.loc 1 461 0
 236 0034 4FF00003 		mov	r3, #0
 237 0038 FB73     		strb	r3, [r7, #15]
 238 003a 35E0     		b	.L10
 239              	.L9:
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 240              		.loc 1 466 0
 241 003c 4FF42053 		mov	r3, #10240
 242 0040 C4F20003 		movt	r3, 16384
 243 0044 4FF42052 		mov	r2, #10240
 244 0048 C4F20002 		movt	r2, 16384
 245 004c 9268     		ldr	r2, [r2, #8]
 246 004e 22F04002 		bic	r2, r2, #64
 247 0052 9A60     		str	r2, [r3, #8]
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 248              		.loc 1 468 0
 249 0054 4FF42053 		mov	r3, #10240
 250 0058 C4F20003 		movt	r3, 16384
 251 005c 4FF42052 		mov	r2, #10240
 252 0060 C4F20002 		movt	r2, 16384
 253 0064 9268     		ldr	r2, [r2, #8]
 254 0066 1146     		mov	r1, r2
 255 0068 7A68     		ldr	r2, [r7, #4]
 256 006a 1268     		ldr	r2, [r2, #0]
 257 006c 0A43     		orrs	r2, r2, r1
 258 006e 9A60     		str	r2, [r3, #8]
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 259              		.loc 1 471 0
 260 0070 4FF42053 		mov	r3, #10240
 261 0074 C4F20003 		movt	r3, 16384
 262 0078 7A68     		ldr	r2, [r7, #4]
 263 007a 9268     		ldr	r2, [r2, #8]
 264 007c 1A61     		str	r2, [r3, #16]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 265              		.loc 1 472 0
 266 007e 4FF42053 		mov	r3, #10240
 267 0082 C4F20003 		movt	r3, 16384
 268 0086 4FF42052 		mov	r2, #10240
 269 008a C4F20002 		movt	r2, 16384
 270 008e 1269     		ldr	r2, [r2, #16]
 271 0090 1146     		mov	r1, r2
 272 0092 7A68     		ldr	r2, [r7, #4]
 273 0094 5268     		ldr	r2, [r2, #4]
 274 0096 4FEA0242 		lsl	r2, r2, #16
 275 009a 0A43     		orrs	r2, r2, r1
 276 009c 1A61     		str	r2, [r3, #16]
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 277              		.loc 1 475 0
 278 009e FFF7FEFF 		bl	RTC_ExitInitMode
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 279              		.loc 1 477 0
 280 00a2 4FF00103 		mov	r3, #1
 281 00a6 FB73     		strb	r3, [r7, #15]
 282              	.L10:
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 283              		.loc 1 480 0
 284 00a8 4FF42053 		mov	r3, #10240
 285 00ac C4F20003 		movt	r3, 16384
 286 00b0 4FF0FF02 		mov	r2, #255
 287 00b4 5A62     		str	r2, [r3, #36]
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 288              		.loc 1 482 0
 289 00b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 290              		.loc 1 483 0
 291 00b8 1846     		mov	r0, r3
 292 00ba 07F11007 		add	r7, r7, #16
 293 00be BD46     		mov	sp, r7
 294 00c0 80BD     		pop	{r7, pc}
 295              		.cfi_endproc
 296              	.LFE111:
 298 00c2 00BF     		.section	.text.RTC_StructInit,"ax",%progbits
 299              		.align	2
 300              		.global	RTC_StructInit
 301              		.thumb
 302              		.thumb_func
 304              	RTC_StructInit:
 305              	.LFB112:
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 306              		.loc 1 492 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 8
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311 0000 80B4     		push	{r7}
 312              	.LCFI6:
 313              		.cfi_def_cfa_offset 4
 314              		.cfi_offset 7, -4
 315 0002 83B0     		sub	sp, sp, #12
 316              	.LCFI7:
 317              		.cfi_def_cfa_offset 16
 318 0004 00AF     		add	r7, sp, #0
 319              	.LCFI8:
 320              		.cfi_def_cfa_register 7
 321 0006 7860     		str	r0, [r7, #4]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 322              		.loc 1 494 0
 323 0008 7B68     		ldr	r3, [r7, #4]
 324 000a 4FF00002 		mov	r2, #0
 325 000e 1A60     		str	r2, [r3, #0]
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 326              		.loc 1 497 0
 327 0010 7B68     		ldr	r3, [r7, #4]
 328 0012 4FF07F02 		mov	r2, #127
 329 0016 5A60     		str	r2, [r3, #4]
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 330              		.loc 1 500 0
 331 0018 7B68     		ldr	r3, [r7, #4]
 332 001a 4FF0FF02 		mov	r2, #255
 333 001e 9A60     		str	r2, [r3, #8]
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 334              		.loc 1 501 0
 335 0020 07F10C07 		add	r7, r7, #12
 336 0024 BD46     		mov	sp, r7
 337 0026 80BC     		pop	{r7}
 338 0028 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE112:
 342 002a 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 343              		.align	2
 344              		.global	RTC_WriteProtectionCmd
 345              		.thumb
 346              		.thumb_func
 348              	RTC_WriteProtectionCmd:
 349              	.LFB113:
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 350              		.loc 1 514 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 355 0000 80B4     		push	{r7}
 356              	.LCFI9:
 357              		.cfi_def_cfa_offset 4
 358              		.cfi_offset 7, -4
 359 0002 83B0     		sub	sp, sp, #12
 360              	.LCFI10:
 361              		.cfi_def_cfa_offset 16
 362 0004 00AF     		add	r7, sp, #0
 363              	.LCFI11:
 364              		.cfi_def_cfa_register 7
 365 0006 0346     		mov	r3, r0
 366 0008 FB71     		strb	r3, [r7, #7]
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 367              		.loc 1 518 0
 368 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 000c 002B     		cmp	r3, #0
 370 000e 07D0     		beq	.L13
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 371              		.loc 1 521 0
 372 0010 4FF42053 		mov	r3, #10240
 373 0014 C4F20003 		movt	r3, 16384
 374 0018 4FF0FF02 		mov	r2, #255
 375 001c 5A62     		str	r2, [r3, #36]
 376 001e 0DE0     		b	.L12
 377              	.L13:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 378              		.loc 1 526 0
 379 0020 4FF42053 		mov	r3, #10240
 380 0024 C4F20003 		movt	r3, 16384
 381 0028 4FF0CA02 		mov	r2, #202
 382 002c 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 383              		.loc 1 527 0
 384 002e 4FF42053 		mov	r3, #10240
 385 0032 C4F20003 		movt	r3, 16384
 386 0036 4FF05302 		mov	r2, #83
 387 003a 5A62     		str	r2, [r3, #36]
 388              	.L12:
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 389              		.loc 1 529 0
 390 003c 07F10C07 		add	r7, r7, #12
 391 0040 BD46     		mov	sp, r7
 392 0042 80BC     		pop	{r7}
 393 0044 7047     		bx	lr
 394              		.cfi_endproc
 395              	.LFE113:
 397 0046 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 398              		.align	2
 399              		.global	RTC_EnterInitMode
 400              		.thumb
 401              		.thumb_func
 403              	RTC_EnterInitMode:
 404              	.LFB114:
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 405              		.loc 1 541 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 16
 408              		@ frame_needed = 1, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410 0000 80B4     		push	{r7}
 411              	.LCFI12:
 412              		.cfi_def_cfa_offset 4
 413              		.cfi_offset 7, -4
 414 0002 85B0     		sub	sp, sp, #20
 415              	.LCFI13:
 416              		.cfi_def_cfa_offset 24
 417 0004 00AF     		add	r7, sp, #0
 418              	.LCFI14:
 419              		.cfi_def_cfa_register 7
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 420              		.loc 1 542 0
 421 0006 4FF00003 		mov	r3, #0
 422 000a 7B60     		str	r3, [r7, #4]
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 423              		.loc 1 543 0
 424 000c 4FF00003 		mov	r3, #0
 425 0010 FB73     		strb	r3, [r7, #15]
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 426              		.loc 1 544 0
 427 0012 4FF00003 		mov	r3, #0
 428 0016 BB60     		str	r3, [r7, #8]
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 429              		.loc 1 547 0
 430 0018 4FF42053 		mov	r3, #10240
 431 001c C4F20003 		movt	r3, 16384
 432 0020 DB68     		ldr	r3, [r3, #12]
 433 0022 03F04003 		and	r3, r3, #64
 434 0026 002B     		cmp	r3, #0
 435 0028 2AD1     		bne	.L16
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 436              		.loc 1 550 0
 437 002a 4FF42053 		mov	r3, #10240
 438 002e C4F20003 		movt	r3, 16384
 439 0032 4FF0FF32 		mov	r2, #-1
 440 0036 DA60     		str	r2, [r3, #12]
 441              	.L18:
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 442              		.loc 1 555 0 discriminator 1
 443 0038 4FF42053 		mov	r3, #10240
 444 003c C4F20003 		movt	r3, 16384
 445 0040 DB68     		ldr	r3, [r3, #12]
 446 0042 03F04003 		and	r3, r3, #64
 447 0046 BB60     		str	r3, [r7, #8]
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 448              		.loc 1 556 0 discriminator 1
 449 0048 7B68     		ldr	r3, [r7, #4]
 450 004a 03F10103 		add	r3, r3, #1
 451 004e 7B60     		str	r3, [r7, #4]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 452              		.loc 1 557 0 discriminator 1
 453 0050 7B68     		ldr	r3, [r7, #4]
 454 0052 B3F5803F 		cmp	r3, #65536
 455 0056 02D0     		beq	.L17
 456 0058 BB68     		ldr	r3, [r7, #8]
 457 005a 002B     		cmp	r3, #0
 458 005c ECD0     		beq	.L18
 459              	.L17:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 460              		.loc 1 559 0
 461 005e 4FF42053 		mov	r3, #10240
 462 0062 C4F20003 		movt	r3, 16384
 463 0066 DB68     		ldr	r3, [r3, #12]
 464 0068 03F04003 		and	r3, r3, #64
 465 006c 002B     		cmp	r3, #0
 466 006e 03D0     		beq	.L19
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 467              		.loc 1 561 0
 468 0070 4FF00103 		mov	r3, #1
 469 0074 FB73     		strb	r3, [r7, #15]
 470 0076 06E0     		b	.L20
 471              	.L19:
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 472              		.loc 1 565 0
 473 0078 4FF00003 		mov	r3, #0
 474 007c FB73     		strb	r3, [r7, #15]
 475 007e 02E0     		b	.L20
 476              	.L16:
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 477              		.loc 1 570 0
 478 0080 4FF00103 		mov	r3, #1
 479 0084 FB73     		strb	r3, [r7, #15]
 480              	.L20:
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 481              		.loc 1 573 0
 482 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 483              		.loc 1 574 0
 484 0088 1846     		mov	r0, r3
 485 008a 07F11407 		add	r7, r7, #20
 486 008e BD46     		mov	sp, r7
 487 0090 80BC     		pop	{r7}
 488 0092 7047     		bx	lr
 489              		.cfi_endproc
 490              	.LFE114:
 492              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 493              		.align	2
 494              		.global	RTC_ExitInitMode
 495              		.thumb
 496              		.thumb_func
 498              	RTC_ExitInitMode:
 499              	.LFB115:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 500              		.loc 1 586 0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504              		@ link register save eliminated.
 505 0000 80B4     		push	{r7}
 506              	.LCFI15:
 507              		.cfi_def_cfa_offset 4
 508              		.cfi_offset 7, -4
 509 0002 00AF     		add	r7, sp, #0
 510              	.LCFI16:
 511              		.cfi_def_cfa_register 7
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 512              		.loc 1 588 0
 513 0004 4FF42053 		mov	r3, #10240
 514 0008 C4F20003 		movt	r3, 16384
 515 000c 4FF42052 		mov	r2, #10240
 516 0010 C4F20002 		movt	r2, 16384
 517 0014 D268     		ldr	r2, [r2, #12]
 518 0016 22F08002 		bic	r2, r2, #128
 519 001a DA60     		str	r2, [r3, #12]
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 520              		.loc 1 589 0
 521 001c BD46     		mov	sp, r7
 522 001e 80BC     		pop	{r7}
 523 0020 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE115:
 527 0022 00BF     		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 528              		.align	2
 529              		.global	RTC_WaitForSynchro
 530              		.thumb
 531              		.thumb_func
 533              	RTC_WaitForSynchro:
 534              	.LFB116:
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 535              		.loc 1 608 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 16
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540 0000 80B4     		push	{r7}
 541              	.LCFI17:
 542              		.cfi_def_cfa_offset 4
 543              		.cfi_offset 7, -4
 544 0002 85B0     		sub	sp, sp, #20
 545              	.LCFI18:
 546              		.cfi_def_cfa_offset 24
 547 0004 00AF     		add	r7, sp, #0
 548              	.LCFI19:
 549              		.cfi_def_cfa_register 7
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 550              		.loc 1 609 0
 551 0006 4FF00003 		mov	r3, #0
 552 000a 7B60     		str	r3, [r7, #4]
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 553              		.loc 1 610 0
 554 000c 4FF00003 		mov	r3, #0
 555 0010 FB73     		strb	r3, [r7, #15]
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 556              		.loc 1 611 0
 557 0012 4FF00003 		mov	r3, #0
 558 0016 BB60     		str	r3, [r7, #8]
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 559              		.loc 1 614 0
 560 0018 4FF42053 		mov	r3, #10240
 561 001c C4F20003 		movt	r3, 16384
 562 0020 4FF0CA02 		mov	r2, #202
 563 0024 5A62     		str	r2, [r3, #36]
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 564              		.loc 1 615 0
 565 0026 4FF42053 		mov	r3, #10240
 566 002a C4F20003 		movt	r3, 16384
 567 002e 4FF05302 		mov	r2, #83
 568 0032 5A62     		str	r2, [r3, #36]
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 569              		.loc 1 618 0
 570 0034 4FF42053 		mov	r3, #10240
 571 0038 C4F20003 		movt	r3, 16384
 572 003c 4FF42052 		mov	r2, #10240
 573 0040 C4F20002 		movt	r2, 16384
 574 0044 D268     		ldr	r2, [r2, #12]
 575 0046 22F0A002 		bic	r2, r2, #160
 576 004a DA60     		str	r2, [r3, #12]
 577              	.L24:
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 578              		.loc 1 623 0 discriminator 1
 579 004c 4FF42053 		mov	r3, #10240
 580 0050 C4F20003 		movt	r3, 16384
 581 0054 DB68     		ldr	r3, [r3, #12]
 582 0056 03F02003 		and	r3, r3, #32
 583 005a BB60     		str	r3, [r7, #8]
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 584              		.loc 1 624 0 discriminator 1
 585 005c 7B68     		ldr	r3, [r7, #4]
 586 005e 03F10103 		add	r3, r3, #1
 587 0062 7B60     		str	r3, [r7, #4]
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 588              		.loc 1 625 0 discriminator 1
 589 0064 7B68     		ldr	r3, [r7, #4]
 590 0066 B3F5003F 		cmp	r3, #131072
 591 006a 02D0     		beq	.L23
 592 006c BB68     		ldr	r3, [r7, #8]
 593 006e 002B     		cmp	r3, #0
 594 0070 ECD0     		beq	.L24
 595              	.L23:
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 596              		.loc 1 627 0
 597 0072 4FF42053 		mov	r3, #10240
 598 0076 C4F20003 		movt	r3, 16384
 599 007a DB68     		ldr	r3, [r3, #12]
 600 007c 03F02003 		and	r3, r3, #32
 601 0080 002B     		cmp	r3, #0
 602 0082 03D0     		beq	.L25
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 603              		.loc 1 629 0
 604 0084 4FF00103 		mov	r3, #1
 605 0088 FB73     		strb	r3, [r7, #15]
 606 008a 02E0     		b	.L26
 607              	.L25:
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 608              		.loc 1 633 0
 609 008c 4FF00003 		mov	r3, #0
 610 0090 FB73     		strb	r3, [r7, #15]
 611              	.L26:
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 612              		.loc 1 637 0
 613 0092 4FF42053 		mov	r3, #10240
 614 0096 C4F20003 		movt	r3, 16384
 615 009a 4FF0FF02 		mov	r2, #255
 616 009e 5A62     		str	r2, [r3, #36]
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 617              		.loc 1 639 0
 618 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 619              		.loc 1 640 0
 620 00a2 1846     		mov	r0, r3
 621 00a4 07F11407 		add	r7, r7, #20
 622 00a8 BD46     		mov	sp, r7
 623 00aa 80BC     		pop	{r7}
 624 00ac 7047     		bx	lr
 625              		.cfi_endproc
 626              	.LFE116:
 628 00ae 00BF     		.section	.text.RTC_RefClockCmd,"ax",%progbits
 629              		.align	2
 630              		.global	RTC_RefClockCmd
 631              		.thumb
 632              		.thumb_func
 634              	RTC_RefClockCmd:
 635              	.LFB117:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 636              		.loc 1 651 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 16
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 80B5     		push	{r7, lr}
 641              	.LCFI20:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 14, -4
 644              		.cfi_offset 7, -8
 645 0002 84B0     		sub	sp, sp, #16
 646              	.LCFI21:
 647              		.cfi_def_cfa_offset 24
 648 0004 00AF     		add	r7, sp, #0
 649              	.LCFI22:
 650              		.cfi_def_cfa_register 7
 651 0006 0346     		mov	r3, r0
 652 0008 FB71     		strb	r3, [r7, #7]
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 653              		.loc 1 652 0
 654 000a 4FF00003 		mov	r3, #0
 655 000e FB73     		strb	r3, [r7, #15]
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 656              		.loc 1 658 0
 657 0010 4FF42053 		mov	r3, #10240
 658 0014 C4F20003 		movt	r3, 16384
 659 0018 4FF0CA02 		mov	r2, #202
 660 001c 5A62     		str	r2, [r3, #36]
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 661              		.loc 1 659 0
 662 001e 4FF42053 		mov	r3, #10240
 663 0022 C4F20003 		movt	r3, 16384
 664 0026 4FF05302 		mov	r2, #83
 665 002a 5A62     		str	r2, [r3, #36]
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 666              		.loc 1 662 0
 667 002c FFF7FEFF 		bl	RTC_EnterInitMode
 668 0030 0346     		mov	r3, r0
 669 0032 002B     		cmp	r3, #0
 670 0034 03D1     		bne	.L28
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 671              		.loc 1 664 0
 672 0036 4FF00003 		mov	r3, #0
 673 003a FB73     		strb	r3, [r7, #15]
 674 003c 20E0     		b	.L29
 675              	.L28:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 676              		.loc 1 668 0
 677 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 678 0040 002B     		cmp	r3, #0
 679 0042 0CD0     		beq	.L30
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 680              		.loc 1 671 0
 681 0044 4FF42053 		mov	r3, #10240
 682 0048 C4F20003 		movt	r3, 16384
 683 004c 4FF42052 		mov	r2, #10240
 684 0050 C4F20002 		movt	r2, 16384
 685 0054 9268     		ldr	r2, [r2, #8]
 686 0056 42F01002 		orr	r2, r2, #16
 687 005a 9A60     		str	r2, [r3, #8]
 688 005c 0BE0     		b	.L31
 689              	.L30:
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 690              		.loc 1 676 0
 691 005e 4FF42053 		mov	r3, #10240
 692 0062 C4F20003 		movt	r3, 16384
 693 0066 4FF42052 		mov	r2, #10240
 694 006a C4F20002 		movt	r2, 16384
 695 006e 9268     		ldr	r2, [r2, #8]
 696 0070 22F01002 		bic	r2, r2, #16
 697 0074 9A60     		str	r2, [r3, #8]
 698              	.L31:
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 699              		.loc 1 679 0
 700 0076 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 701              		.loc 1 681 0
 702 007a 4FF00103 		mov	r3, #1
 703 007e FB73     		strb	r3, [r7, #15]
 704              	.L29:
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 705              		.loc 1 685 0
 706 0080 4FF42053 		mov	r3, #10240
 707 0084 C4F20003 		movt	r3, 16384
 708 0088 4FF0FF02 		mov	r2, #255
 709 008c 5A62     		str	r2, [r3, #36]
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 710              		.loc 1 687 0
 711 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 712              		.loc 1 688 0
 713 0090 1846     		mov	r0, r3
 714 0092 07F11007 		add	r7, r7, #16
 715 0096 BD46     		mov	sp, r7
 716 0098 80BD     		pop	{r7, pc}
 717              		.cfi_endproc
 718              	.LFE117:
 720 009a 00BF     		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 721              		.align	2
 722              		.global	RTC_BypassShadowCmd
 723              		.thumb
 724              		.thumb_func
 726              	RTC_BypassShadowCmd:
 727              	.LFB118:
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 728              		.loc 1 699 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 8
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733 0000 80B4     		push	{r7}
 734              	.LCFI23:
 735              		.cfi_def_cfa_offset 4
 736              		.cfi_offset 7, -4
 737 0002 83B0     		sub	sp, sp, #12
 738              	.LCFI24:
 739              		.cfi_def_cfa_offset 16
 740 0004 00AF     		add	r7, sp, #0
 741              	.LCFI25:
 742              		.cfi_def_cfa_register 7
 743 0006 0346     		mov	r3, r0
 744 0008 FB71     		strb	r3, [r7, #7]
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 745              		.loc 1 704 0
 746 000a 4FF42053 		mov	r3, #10240
 747 000e C4F20003 		movt	r3, 16384
 748 0012 4FF0CA02 		mov	r2, #202
 749 0016 5A62     		str	r2, [r3, #36]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 750              		.loc 1 705 0
 751 0018 4FF42053 		mov	r3, #10240
 752 001c C4F20003 		movt	r3, 16384
 753 0020 4FF05302 		mov	r2, #83
 754 0024 5A62     		str	r2, [r3, #36]
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 755              		.loc 1 707 0
 756 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 757 0028 002B     		cmp	r3, #0
 758 002a 0CD0     		beq	.L33
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 759              		.loc 1 710 0
 760 002c 4FF42053 		mov	r3, #10240
 761 0030 C4F20003 		movt	r3, 16384
 762 0034 4FF42052 		mov	r2, #10240
 763 0038 C4F20002 		movt	r2, 16384
 764 003c 9268     		ldr	r2, [r2, #8]
 765 003e 42F02002 		orr	r2, r2, #32
 766 0042 9A60     		str	r2, [r3, #8]
 767 0044 0BE0     		b	.L34
 768              	.L33:
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 769              		.loc 1 715 0
 770 0046 4FF42053 		mov	r3, #10240
 771 004a C4F20003 		movt	r3, 16384
 772 004e 4FF42052 		mov	r2, #10240
 773 0052 C4F20002 		movt	r2, 16384
 774 0056 9268     		ldr	r2, [r2, #8]
 775 0058 02F0DF02 		and	r2, r2, #223
 776 005c 9A60     		str	r2, [r3, #8]
 777              	.L34:
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 778              		.loc 1 719 0
 779 005e 4FF42053 		mov	r3, #10240
 780 0062 C4F20003 		movt	r3, 16384
 781 0066 4FF0FF02 		mov	r2, #255
 782 006a 5A62     		str	r2, [r3, #36]
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 783              		.loc 1 720 0
 784 006c 07F10C07 		add	r7, r7, #12
 785 0070 BD46     		mov	sp, r7
 786 0072 80BC     		pop	{r7}
 787 0074 7047     		bx	lr
 788              		.cfi_endproc
 789              	.LFE118:
 791              		.section	.text.RTC_SetTime,"ax",%progbits
 792              		.align	2
 793              		.global	RTC_SetTime
 794              		.thumb
 795              		.thumb_func
 797              	RTC_SetTime:
 798              	.LFB119:
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 799              		.loc 1 754 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 16
 802              		@ frame_needed = 1, uses_anonymous_args = 0
 803 0000 90B5     		push	{r4, r7, lr}
 804              	.LCFI26:
 805              		.cfi_def_cfa_offset 12
 806              		.cfi_offset 14, -4
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 4, -12
 809 0002 85B0     		sub	sp, sp, #20
 810              	.LCFI27:
 811              		.cfi_def_cfa_offset 32
 812 0004 00AF     		add	r7, sp, #0
 813              	.LCFI28:
 814              		.cfi_def_cfa_register 7
 815 0006 7860     		str	r0, [r7, #4]
 816 0008 3960     		str	r1, [r7, #0]
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 817              		.loc 1 755 0
 818 000a 4FF00003 		mov	r3, #0
 819 000e FB60     		str	r3, [r7, #12]
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 820              		.loc 1 756 0
 821 0010 4FF00003 		mov	r3, #0
 822 0014 FB72     		strb	r3, [r7, #11]
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 823              		.loc 1 761 0
 824 0016 7B68     		ldr	r3, [r7, #4]
 825 0018 002B     		cmp	r3, #0
 826 001a 0DD1     		bne	.L36
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 827              		.loc 1 763 0
 828 001c 4FF42053 		mov	r3, #10240
 829 0020 C4F20003 		movt	r3, 16384
 830 0024 9B68     		ldr	r3, [r3, #8]
 831 0026 03F04003 		and	r3, r3, #64
 832 002a 002B     		cmp	r3, #0
 833 002c 19D1     		bne	.L37
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 834              		.loc 1 770 0
 835 002e 3B68     		ldr	r3, [r7, #0]
 836 0030 4FF00002 		mov	r2, #0
 837 0034 DA70     		strb	r2, [r3, #3]
 838 0036 14E0     		b	.L37
 839              	.L36:
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 840              		.loc 1 778 0
 841 0038 4FF42053 		mov	r3, #10240
 842 003c C4F20003 		movt	r3, 16384
 843 0040 9B68     		ldr	r3, [r3, #8]
 844 0042 03F04003 		and	r3, r3, #64
 845 0046 002B     		cmp	r3, #0
 846 0048 07D0     		beq	.L38
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 847              		.loc 1 780 0
 848 004a 3B68     		ldr	r3, [r7, #0]
 849 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 850 004e 1846     		mov	r0, r3
 851 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 852 0054 0346     		mov	r3, r0
 853 0056 FB60     		str	r3, [r7, #12]
 854 0058 03E0     		b	.L37
 855              	.L38:
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 856              		.loc 1 786 0
 857 005a 3B68     		ldr	r3, [r7, #0]
 858 005c 4FF00002 		mov	r2, #0
 859 0060 DA70     		strb	r2, [r3, #3]
 860              	.L37:
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 861              		.loc 1 794 0
 862 0062 7B68     		ldr	r3, [r7, #4]
 863 0064 002B     		cmp	r3, #0
 864 0066 12D0     		beq	.L39
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 865              		.loc 1 796 0
 866 0068 3B68     		ldr	r3, [r7, #0]
 867 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 868 006c 4FEA0342 		lsl	r2, r3, #16
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 869              		.loc 1 797 0
 870 0070 3B68     		ldr	r3, [r7, #0]
 871 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 872 0074 4FEA0323 		lsl	r3, r3, #8
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 873              		.loc 1 796 0
 874 0078 1A43     		orrs	r2, r2, r3
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 875              		.loc 1 798 0
 876 007a 3B68     		ldr	r3, [r7, #0]
 877 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 878              		.loc 1 797 0
 879 007e 1A43     		orrs	r2, r2, r3
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 880              		.loc 1 799 0
 881 0080 3B68     		ldr	r3, [r7, #0]
 882 0082 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 883 0084 4FEA0343 		lsl	r3, r3, #16
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 884              		.loc 1 796 0
 885 0088 1343     		orrs	r3, r3, r2
 886 008a FB60     		str	r3, [r7, #12]
 887 008c 1EE0     		b	.L40
 888              	.L39:
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 889              		.loc 1 803 0
 890 008e 3B68     		ldr	r3, [r7, #0]
 891 0090 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 892 0092 1846     		mov	r0, r3
 893 0094 FFF7FEFF 		bl	RTC_ByteToBcd2
 894 0098 0346     		mov	r3, r0
 895 009a 4FEA0344 		lsl	r4, r3, #16
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 896              		.loc 1 804 0
 897 009e 3B68     		ldr	r3, [r7, #0]
 898 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 899 00a2 1846     		mov	r0, r3
 900 00a4 FFF7FEFF 		bl	RTC_ByteToBcd2
 901 00a8 0346     		mov	r3, r0
 902 00aa 4FEA0323 		lsl	r3, r3, #8
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 903              		.loc 1 803 0
 904 00ae 1C43     		orrs	r4, r4, r3
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 905              		.loc 1 805 0
 906 00b0 3B68     		ldr	r3, [r7, #0]
 907 00b2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 908 00b4 1846     		mov	r0, r3
 909 00b6 FFF7FEFF 		bl	RTC_ByteToBcd2
 910 00ba 0346     		mov	r3, r0
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 911              		.loc 1 804 0
 912 00bc 44EA0302 		orr	r2, r4, r3
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 913              		.loc 1 806 0
 914 00c0 3B68     		ldr	r3, [r7, #0]
 915 00c2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 916 00c4 4FEA0343 		lsl	r3, r3, #16
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 917              		.loc 1 803 0
 918 00c8 1343     		orrs	r3, r3, r2
 919 00ca FB60     		str	r3, [r7, #12]
 920              	.L40:
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 921              		.loc 1 810 0
 922 00cc 4FF42053 		mov	r3, #10240
 923 00d0 C4F20003 		movt	r3, 16384
 924 00d4 4FF0CA02 		mov	r2, #202
 925 00d8 5A62     		str	r2, [r3, #36]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 926              		.loc 1 811 0
 927 00da 4FF42053 		mov	r3, #10240
 928 00de C4F20003 		movt	r3, 16384
 929 00e2 4FF05302 		mov	r2, #83
 930 00e6 5A62     		str	r2, [r3, #36]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 931              		.loc 1 814 0
 932 00e8 FFF7FEFF 		bl	RTC_EnterInitMode
 933 00ec 0346     		mov	r3, r0
 934 00ee 002B     		cmp	r3, #0
 935 00f0 03D1     		bne	.L41
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 936              		.loc 1 816 0
 937 00f2 4FF00003 		mov	r3, #0
 938 00f6 FB72     		strb	r3, [r7, #11]
 939 00f8 18E0     		b	.L42
 940              	.L41:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 941              		.loc 1 821 0
 942 00fa 4FF42052 		mov	r2, #10240
 943 00fe C4F20002 		movt	r2, 16384
 944 0102 F968     		ldr	r1, [r7, #12]
 945 0104 47F67F73 		movw	r3, #32639
 946 0108 C0F27F03 		movt	r3, 127
 947 010c 0B40     		ands	r3, r3, r1
 948 010e 1360     		str	r3, [r2, #0]
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 949              		.loc 1 824 0
 950 0110 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 951              		.loc 1 826 0
 952 0114 FFF7FEFF 		bl	RTC_WaitForSynchro
 953 0118 0346     		mov	r3, r0
 954 011a 002B     		cmp	r3, #0
 955 011c 03D1     		bne	.L43
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 956              		.loc 1 828 0
 957 011e 4FF00003 		mov	r3, #0
 958 0122 FB72     		strb	r3, [r7, #11]
 959 0124 02E0     		b	.L42
 960              	.L43:
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 961              		.loc 1 832 0
 962 0126 4FF00103 		mov	r3, #1
 963 012a FB72     		strb	r3, [r7, #11]
 964              	.L42:
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 965              		.loc 1 837 0
 966 012c 4FF42053 		mov	r3, #10240
 967 0130 C4F20003 		movt	r3, 16384
 968 0134 4FF0FF02 		mov	r2, #255
 969 0138 5A62     		str	r2, [r3, #36]
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 970              		.loc 1 839 0
 971 013a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 972              		.loc 1 840 0
 973 013c 1846     		mov	r0, r3
 974 013e 07F11407 		add	r7, r7, #20
 975 0142 BD46     		mov	sp, r7
 976 0144 90BD     		pop	{r4, r7, pc}
 977              		.cfi_endproc
 978              	.LFE119:
 980 0146 00BF     		.section	.text.RTC_TimeStructInit,"ax",%progbits
 981              		.align	2
 982              		.global	RTC_TimeStructInit
 983              		.thumb
 984              		.thumb_func
 986              	RTC_TimeStructInit:
 987              	.LFB120:
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 988              		.loc 1 850 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 8
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993 0000 80B4     		push	{r7}
 994              	.LCFI29:
 995              		.cfi_def_cfa_offset 4
 996              		.cfi_offset 7, -4
 997 0002 83B0     		sub	sp, sp, #12
 998              	.LCFI30:
 999              		.cfi_def_cfa_offset 16
 1000 0004 00AF     		add	r7, sp, #0
 1001              	.LCFI31:
 1002              		.cfi_def_cfa_register 7
 1003 0006 7860     		str	r0, [r7, #4]
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1004              		.loc 1 852 0
 1005 0008 7B68     		ldr	r3, [r7, #4]
 1006 000a 4FF00002 		mov	r2, #0
 1007 000e DA70     		strb	r2, [r3, #3]
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1008              		.loc 1 853 0
 1009 0010 7B68     		ldr	r3, [r7, #4]
 1010 0012 4FF00002 		mov	r2, #0
 1011 0016 1A70     		strb	r2, [r3, #0]
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1012              		.loc 1 854 0
 1013 0018 7B68     		ldr	r3, [r7, #4]
 1014 001a 4FF00002 		mov	r2, #0
 1015 001e 5A70     		strb	r2, [r3, #1]
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1016              		.loc 1 855 0
 1017 0020 7B68     		ldr	r3, [r7, #4]
 1018 0022 4FF00002 		mov	r2, #0
 1019 0026 9A70     		strb	r2, [r3, #2]
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1020              		.loc 1 856 0
 1021 0028 07F10C07 		add	r7, r7, #12
 1022 002c BD46     		mov	sp, r7
 1023 002e 80BC     		pop	{r7}
 1024 0030 7047     		bx	lr
 1025              		.cfi_endproc
 1026              	.LFE120:
 1028 0032 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 1029              		.align	2
 1030              		.global	RTC_GetTime
 1031              		.thumb
 1032              		.thumb_func
 1034              	RTC_GetTime:
 1035              	.LFB121:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1036              		.loc 1 869 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 16
 1039              		@ frame_needed = 1, uses_anonymous_args = 0
 1040 0000 80B5     		push	{r7, lr}
 1041              	.LCFI32:
 1042              		.cfi_def_cfa_offset 8
 1043              		.cfi_offset 14, -4
 1044              		.cfi_offset 7, -8
 1045 0002 84B0     		sub	sp, sp, #16
 1046              	.LCFI33:
 1047              		.cfi_def_cfa_offset 24
 1048 0004 00AF     		add	r7, sp, #0
 1049              	.LCFI34:
 1050              		.cfi_def_cfa_register 7
 1051 0006 7860     		str	r0, [r7, #4]
 1052 0008 3960     		str	r1, [r7, #0]
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1053              		.loc 1 870 0
 1054 000a 4FF00003 		mov	r3, #0
 1055 000e FB60     		str	r3, [r7, #12]
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1056              		.loc 1 876 0
 1057 0010 4FF42053 		mov	r3, #10240
 1058 0014 C4F20003 		movt	r3, 16384
 1059 0018 1B68     		ldr	r3, [r3, #0]
 1060 001a 1A46     		mov	r2, r3
 1061 001c 47F67F73 		movw	r3, #32639
 1062 0020 C0F27F03 		movt	r3, 127
 1063 0024 1340     		ands	r3, r3, r2
 1064 0026 FB60     		str	r3, [r7, #12]
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1065              		.loc 1 879 0
 1066 0028 FB68     		ldr	r3, [r7, #12]
 1067 002a 03F47C13 		and	r3, r3, #4128768
 1068 002e 4FEA1343 		lsr	r3, r3, #16
 1069 0032 DAB2     		uxtb	r2, r3
 1070 0034 3B68     		ldr	r3, [r7, #0]
 1071 0036 1A70     		strb	r2, [r3, #0]
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1072              		.loc 1 880 0
 1073 0038 FB68     		ldr	r3, [r7, #12]
 1074 003a 03F4FE43 		and	r3, r3, #32512
 1075 003e 4FEA1323 		lsr	r3, r3, #8
 1076 0042 DAB2     		uxtb	r2, r3
 1077 0044 3B68     		ldr	r3, [r7, #0]
 1078 0046 5A70     		strb	r2, [r3, #1]
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1079              		.loc 1 881 0
 1080 0048 FB68     		ldr	r3, [r7, #12]
 1081 004a DBB2     		uxtb	r3, r3
 1082 004c 03F07F03 		and	r3, r3, #127
 1083 0050 DAB2     		uxtb	r2, r3
 1084 0052 3B68     		ldr	r3, [r7, #0]
 1085 0054 9A70     		strb	r2, [r3, #2]
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1086              		.loc 1 882 0
 1087 0056 FB68     		ldr	r3, [r7, #12]
 1088 0058 03F48003 		and	r3, r3, #4194304
 1089 005c 4FEA1343 		lsr	r3, r3, #16
 1090 0060 DAB2     		uxtb	r2, r3
 1091 0062 3B68     		ldr	r3, [r7, #0]
 1092 0064 DA70     		strb	r2, [r3, #3]
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1093              		.loc 1 885 0
 1094 0066 7B68     		ldr	r3, [r7, #4]
 1095 0068 002B     		cmp	r3, #0
 1096 006a 1AD1     		bne	.L45
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1097              		.loc 1 888 0
 1098 006c 3B68     		ldr	r3, [r7, #0]
 1099 006e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1100 0070 1846     		mov	r0, r3
 1101 0072 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1102 0076 0346     		mov	r3, r0
 1103 0078 1A46     		mov	r2, r3
 1104 007a 3B68     		ldr	r3, [r7, #0]
 1105 007c 1A70     		strb	r2, [r3, #0]
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1106              		.loc 1 889 0
 1107 007e 3B68     		ldr	r3, [r7, #0]
 1108 0080 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1109 0082 1846     		mov	r0, r3
 1110 0084 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1111 0088 0346     		mov	r3, r0
 1112 008a 1A46     		mov	r2, r3
 1113 008c 3B68     		ldr	r3, [r7, #0]
 1114 008e 5A70     		strb	r2, [r3, #1]
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1115              		.loc 1 890 0
 1116 0090 3B68     		ldr	r3, [r7, #0]
 1117 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1118 0094 1846     		mov	r0, r3
 1119 0096 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1120 009a 0346     		mov	r3, r0
 1121 009c 1A46     		mov	r2, r3
 1122 009e 3B68     		ldr	r3, [r7, #0]
 1123 00a0 9A70     		strb	r2, [r3, #2]
 1124              	.L45:
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1125              		.loc 1 892 0
 1126 00a2 07F11007 		add	r7, r7, #16
 1127 00a6 BD46     		mov	sp, r7
 1128 00a8 80BD     		pop	{r7, pc}
 1129              		.cfi_endproc
 1130              	.LFE121:
 1132 00aa 00BF     		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1133              		.align	2
 1134              		.global	RTC_GetSubSecond
 1135              		.thumb
 1136              		.thumb_func
 1138              	RTC_GetSubSecond:
 1139              	.LFB122:
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1140              		.loc 1 902 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 8
 1143              		@ frame_needed = 1, uses_anonymous_args = 0
 1144              		@ link register save eliminated.
 1145 0000 80B4     		push	{r7}
 1146              	.LCFI35:
 1147              		.cfi_def_cfa_offset 4
 1148              		.cfi_offset 7, -4
 1149 0002 83B0     		sub	sp, sp, #12
 1150              	.LCFI36:
 1151              		.cfi_def_cfa_offset 16
 1152 0004 00AF     		add	r7, sp, #0
 1153              	.LCFI37:
 1154              		.cfi_def_cfa_register 7
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1155              		.loc 1 903 0
 1156 0006 4FF00003 		mov	r3, #0
 1157 000a 7B60     		str	r3, [r7, #4]
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1158              		.loc 1 906 0
 1159 000c 4FF42053 		mov	r3, #10240
 1160 0010 C4F20003 		movt	r3, 16384
 1161 0014 9B6A     		ldr	r3, [r3, #40]
 1162 0016 7B60     		str	r3, [r7, #4]
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1163              		.loc 1 909 0
 1164 0018 4FF42053 		mov	r3, #10240
 1165 001c C4F20003 		movt	r3, 16384
 1166 0020 5B68     		ldr	r3, [r3, #4]
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1167              		.loc 1 911 0
 1168 0022 7B68     		ldr	r3, [r7, #4]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1169              		.loc 1 912 0
 1170 0024 1846     		mov	r0, r3
 1171 0026 07F10C07 		add	r7, r7, #12
 1172 002a BD46     		mov	sp, r7
 1173 002c 80BC     		pop	{r7}
 1174 002e 7047     		bx	lr
 1175              		.cfi_endproc
 1176              	.LFE122:
 1178              		.section	.text.RTC_SetDate,"ax",%progbits
 1179              		.align	2
 1180              		.global	RTC_SetDate
 1181              		.thumb
 1182              		.thumb_func
 1184              	RTC_SetDate:
 1185              	.LFB123:
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1186              		.loc 1 927 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 16
 1189              		@ frame_needed = 1, uses_anonymous_args = 0
 1190 0000 90B5     		push	{r4, r7, lr}
 1191              	.LCFI38:
 1192              		.cfi_def_cfa_offset 12
 1193              		.cfi_offset 14, -4
 1194              		.cfi_offset 7, -8
 1195              		.cfi_offset 4, -12
 1196 0002 85B0     		sub	sp, sp, #20
 1197              	.LCFI39:
 1198              		.cfi_def_cfa_offset 32
 1199 0004 00AF     		add	r7, sp, #0
 1200              	.LCFI40:
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
 1203 0008 3960     		str	r1, [r7, #0]
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1204              		.loc 1 928 0
 1205 000a 4FF00003 		mov	r3, #0
 1206 000e FB60     		str	r3, [r7, #12]
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1207              		.loc 1 929 0
 1208 0010 4FF00003 		mov	r3, #0
 1209 0014 FB72     		strb	r3, [r7, #11]
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1210              		.loc 1 934 0
 1211 0016 7B68     		ldr	r3, [r7, #4]
 1212 0018 002B     		cmp	r3, #0
 1213 001a 0FD1     		bne	.L49
 1214              		.loc 1 934 0 is_stmt 0 discriminator 1
 1215 001c 3B68     		ldr	r3, [r7, #0]
 1216 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1217 0020 03F01003 		and	r3, r3, #16
 1218 0024 002B     		cmp	r3, #0
 1219 0026 09D0     		beq	.L49
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1220              		.loc 1 936 0 is_stmt 1
 1221 0028 3B68     		ldr	r3, [r7, #0]
 1222 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1223 002c 23F01003 		bic	r3, r3, #16
 1224 0030 DBB2     		uxtb	r3, r3
 1225 0032 03F10A03 		add	r3, r3, #10
 1226 0036 DAB2     		uxtb	r2, r3
 1227 0038 3B68     		ldr	r3, [r7, #0]
 1228 003a 5A70     		strb	r2, [r3, #1]
 1229              	.L49:
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1230              		.loc 1 938 0
 1231 003c 7B68     		ldr	r3, [r7, #4]
 1232 003e 002B     		cmp	r3, #0
 1233 0040 0DD0     		beq	.L50
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1234              		.loc 1 947 0
 1235 0042 3B68     		ldr	r3, [r7, #0]
 1236 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1237 0046 1846     		mov	r0, r3
 1238 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1239 004c 0346     		mov	r3, r0
 1240 004e FB60     		str	r3, [r7, #12]
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1241              		.loc 1 949 0
 1242 0050 3B68     		ldr	r3, [r7, #0]
 1243 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1244 0054 1846     		mov	r0, r3
 1245 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1246 005a 0346     		mov	r3, r0
 1247 005c FB60     		str	r3, [r7, #12]
 1248              	.L50:
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1249              		.loc 1 955 0
 1250 005e 7B68     		ldr	r3, [r7, #4]
 1251 0060 002B     		cmp	r3, #0
 1252 0062 12D0     		beq	.L51
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1253              		.loc 1 957 0
 1254 0064 3B68     		ldr	r3, [r7, #0]
 1255 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1256 0068 4FEA0342 		lsl	r2, r3, #16
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1257              		.loc 1 958 0
 1258 006c 3B68     		ldr	r3, [r7, #0]
 1259 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1260 0070 4FEA0323 		lsl	r3, r3, #8
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1261              		.loc 1 957 0
 1262 0074 1A43     		orrs	r2, r2, r3
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1263              		.loc 1 959 0
 1264 0076 3B68     		ldr	r3, [r7, #0]
 1265 0078 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1266              		.loc 1 958 0
 1267 007a 1A43     		orrs	r2, r2, r3
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1268              		.loc 1 960 0
 1269 007c 3B68     		ldr	r3, [r7, #0]
 1270 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1271 0080 4FEA4333 		lsl	r3, r3, #13
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1272              		.loc 1 957 0
 1273 0084 1343     		orrs	r3, r3, r2
 1274 0086 FB60     		str	r3, [r7, #12]
 1275 0088 1EE0     		b	.L52
 1276              	.L51:
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1277              		.loc 1 964 0
 1278 008a 3B68     		ldr	r3, [r7, #0]
 1279 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1280 008e 1846     		mov	r0, r3
 1281 0090 FFF7FEFF 		bl	RTC_ByteToBcd2
 1282 0094 0346     		mov	r3, r0
 1283 0096 4FEA0344 		lsl	r4, r3, #16
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1284              		.loc 1 965 0
 1285 009a 3B68     		ldr	r3, [r7, #0]
 1286 009c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1287 009e 1846     		mov	r0, r3
 1288 00a0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1289 00a4 0346     		mov	r3, r0
 1290 00a6 4FEA0323 		lsl	r3, r3, #8
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1291              		.loc 1 964 0
 1292 00aa 1C43     		orrs	r4, r4, r3
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1293              		.loc 1 966 0
 1294 00ac 3B68     		ldr	r3, [r7, #0]
 1295 00ae 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1296 00b0 1846     		mov	r0, r3
 1297 00b2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1298 00b6 0346     		mov	r3, r0
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1299              		.loc 1 965 0
 1300 00b8 44EA0302 		orr	r2, r4, r3
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1301              		.loc 1 967 0
 1302 00bc 3B68     		ldr	r3, [r7, #0]
 1303 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1304 00c0 4FEA4333 		lsl	r3, r3, #13
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1305              		.loc 1 964 0
 1306 00c4 1343     		orrs	r3, r3, r2
 1307 00c6 FB60     		str	r3, [r7, #12]
 1308              	.L52:
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1309              		.loc 1 971 0
 1310 00c8 4FF42053 		mov	r3, #10240
 1311 00cc C4F20003 		movt	r3, 16384
 1312 00d0 4FF0CA02 		mov	r2, #202
 1313 00d4 5A62     		str	r2, [r3, #36]
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1314              		.loc 1 972 0
 1315 00d6 4FF42053 		mov	r3, #10240
 1316 00da C4F20003 		movt	r3, 16384
 1317 00de 4FF05302 		mov	r2, #83
 1318 00e2 5A62     		str	r2, [r3, #36]
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1319              		.loc 1 975 0
 1320 00e4 FFF7FEFF 		bl	RTC_EnterInitMode
 1321 00e8 0346     		mov	r3, r0
 1322 00ea 002B     		cmp	r3, #0
 1323 00ec 03D1     		bne	.L53
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1324              		.loc 1 977 0
 1325 00ee 4FF00003 		mov	r3, #0
 1326 00f2 FB72     		strb	r3, [r7, #11]
 1327 00f4 17E0     		b	.L54
 1328              	.L53:
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1329              		.loc 1 982 0
 1330 00f6 4FF42053 		mov	r3, #10240
 1331 00fa C4F20003 		movt	r3, 16384
 1332 00fe FA68     		ldr	r2, [r7, #12]
 1333 0100 22F07F42 		bic	r2, r2, #-16777216
 1334 0104 22F0C002 		bic	r2, r2, #192
 1335 0108 5A60     		str	r2, [r3, #4]
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1336              		.loc 1 985 0
 1337 010a FFF7FEFF 		bl	RTC_ExitInitMode
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1338              		.loc 1 987 0
 1339 010e FFF7FEFF 		bl	RTC_WaitForSynchro
 1340 0112 0346     		mov	r3, r0
 1341 0114 002B     		cmp	r3, #0
 1342 0116 03D1     		bne	.L55
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1343              		.loc 1 989 0
 1344 0118 4FF00003 		mov	r3, #0
 1345 011c FB72     		strb	r3, [r7, #11]
 1346 011e 02E0     		b	.L54
 1347              	.L55:
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1348              		.loc 1 993 0
 1349 0120 4FF00103 		mov	r3, #1
 1350 0124 FB72     		strb	r3, [r7, #11]
 1351              	.L54:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1352              		.loc 1 997 0
 1353 0126 4FF42053 		mov	r3, #10240
 1354 012a C4F20003 		movt	r3, 16384
 1355 012e 4FF0FF02 		mov	r2, #255
 1356 0132 5A62     		str	r2, [r3, #36]
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1357              		.loc 1 999 0
 1358 0134 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1359              		.loc 1 1000 0
 1360 0136 1846     		mov	r0, r3
 1361 0138 07F11407 		add	r7, r7, #20
 1362 013c BD46     		mov	sp, r7
 1363 013e 90BD     		pop	{r4, r7, pc}
 1364              		.cfi_endproc
 1365              	.LFE123:
 1367              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1368              		.align	2
 1369              		.global	RTC_DateStructInit
 1370              		.thumb
 1371              		.thumb_func
 1373              	RTC_DateStructInit:
 1374              	.LFB124:
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1375              		.loc 1 1010 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 8
 1378              		@ frame_needed = 1, uses_anonymous_args = 0
 1379              		@ link register save eliminated.
 1380 0000 80B4     		push	{r7}
 1381              	.LCFI41:
 1382              		.cfi_def_cfa_offset 4
 1383              		.cfi_offset 7, -4
 1384 0002 83B0     		sub	sp, sp, #12
 1385              	.LCFI42:
 1386              		.cfi_def_cfa_offset 16
 1387 0004 00AF     		add	r7, sp, #0
 1388              	.LCFI43:
 1389              		.cfi_def_cfa_register 7
 1390 0006 7860     		str	r0, [r7, #4]
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1391              		.loc 1 1012 0
 1392 0008 7B68     		ldr	r3, [r7, #4]
 1393 000a 4FF00102 		mov	r2, #1
 1394 000e 1A70     		strb	r2, [r3, #0]
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1395              		.loc 1 1013 0
 1396 0010 7B68     		ldr	r3, [r7, #4]
 1397 0012 4FF00102 		mov	r2, #1
 1398 0016 9A70     		strb	r2, [r3, #2]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1399              		.loc 1 1014 0
 1400 0018 7B68     		ldr	r3, [r7, #4]
 1401 001a 4FF00102 		mov	r2, #1
 1402 001e 5A70     		strb	r2, [r3, #1]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1403              		.loc 1 1015 0
 1404 0020 7B68     		ldr	r3, [r7, #4]
 1405 0022 4FF00002 		mov	r2, #0
 1406 0026 DA70     		strb	r2, [r3, #3]
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1407              		.loc 1 1016 0
 1408 0028 07F10C07 		add	r7, r7, #12
 1409 002c BD46     		mov	sp, r7
 1410 002e 80BC     		pop	{r7}
 1411 0030 7047     		bx	lr
 1412              		.cfi_endproc
 1413              	.LFE124:
 1415 0032 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1416              		.align	2
 1417              		.global	RTC_GetDate
 1418              		.thumb
 1419              		.thumb_func
 1421              	RTC_GetDate:
 1422              	.LFB125:
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1423              		.loc 1 1029 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 16
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427 0000 80B5     		push	{r7, lr}
 1428              	.LCFI44:
 1429              		.cfi_def_cfa_offset 8
 1430              		.cfi_offset 14, -4
 1431              		.cfi_offset 7, -8
 1432 0002 84B0     		sub	sp, sp, #16
 1433              	.LCFI45:
 1434              		.cfi_def_cfa_offset 24
 1435 0004 00AF     		add	r7, sp, #0
 1436              	.LCFI46:
 1437              		.cfi_def_cfa_register 7
 1438 0006 7860     		str	r0, [r7, #4]
 1439 0008 3960     		str	r1, [r7, #0]
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1440              		.loc 1 1030 0
 1441 000a 4FF00003 		mov	r3, #0
 1442 000e FB60     		str	r3, [r7, #12]
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1443              		.loc 1 1036 0
 1444 0010 4FF42053 		mov	r3, #10240
 1445 0014 C4F20003 		movt	r3, 16384
 1446 0018 5B68     		ldr	r3, [r3, #4]
 1447 001a 23F07F43 		bic	r3, r3, #-16777216
 1448 001e 23F0C003 		bic	r3, r3, #192
 1449 0022 FB60     		str	r3, [r7, #12]
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1450              		.loc 1 1039 0
 1451 0024 FB68     		ldr	r3, [r7, #12]
 1452 0026 03F47F03 		and	r3, r3, #16711680
 1453 002a 4FEA1343 		lsr	r3, r3, #16
 1454 002e DAB2     		uxtb	r2, r3
 1455 0030 3B68     		ldr	r3, [r7, #0]
 1456 0032 DA70     		strb	r2, [r3, #3]
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1457              		.loc 1 1040 0
 1458 0034 FB68     		ldr	r3, [r7, #12]
 1459 0036 03F4F853 		and	r3, r3, #7936
 1460 003a 4FEA1323 		lsr	r3, r3, #8
 1461 003e DAB2     		uxtb	r2, r3
 1462 0040 3B68     		ldr	r3, [r7, #0]
 1463 0042 5A70     		strb	r2, [r3, #1]
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1464              		.loc 1 1041 0
 1465 0044 FB68     		ldr	r3, [r7, #12]
 1466 0046 DBB2     		uxtb	r3, r3
 1467 0048 03F03F03 		and	r3, r3, #63
 1468 004c DAB2     		uxtb	r2, r3
 1469 004e 3B68     		ldr	r3, [r7, #0]
 1470 0050 9A70     		strb	r2, [r3, #2]
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1471              		.loc 1 1042 0
 1472 0052 FB68     		ldr	r3, [r7, #12]
 1473 0054 03F46043 		and	r3, r3, #57344
 1474 0058 4FEA5333 		lsr	r3, r3, #13
 1475 005c DAB2     		uxtb	r2, r3
 1476 005e 3B68     		ldr	r3, [r7, #0]
 1477 0060 1A70     		strb	r2, [r3, #0]
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1478              		.loc 1 1045 0
 1479 0062 7B68     		ldr	r3, [r7, #4]
 1480 0064 002B     		cmp	r3, #0
 1481 0066 1AD1     		bne	.L57
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1482              		.loc 1 1048 0
 1483 0068 3B68     		ldr	r3, [r7, #0]
 1484 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1485 006c 1846     		mov	r0, r3
 1486 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1487 0072 0346     		mov	r3, r0
 1488 0074 1A46     		mov	r2, r3
 1489 0076 3B68     		ldr	r3, [r7, #0]
 1490 0078 DA70     		strb	r2, [r3, #3]
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1491              		.loc 1 1049 0
 1492 007a 3B68     		ldr	r3, [r7, #0]
 1493 007c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1494 007e 1846     		mov	r0, r3
 1495 0080 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1496 0084 0346     		mov	r3, r0
 1497 0086 1A46     		mov	r2, r3
 1498 0088 3B68     		ldr	r3, [r7, #0]
 1499 008a 5A70     		strb	r2, [r3, #1]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1500              		.loc 1 1050 0
 1501 008c 3B68     		ldr	r3, [r7, #0]
 1502 008e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1503 0090 1846     		mov	r0, r3
 1504 0092 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1505 0096 0346     		mov	r3, r0
 1506 0098 1A46     		mov	r2, r3
 1507 009a 3B68     		ldr	r3, [r7, #0]
 1508 009c 9A70     		strb	r2, [r3, #2]
 1509              	.L57:
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1510              		.loc 1 1052 0
 1511 009e 07F11007 		add	r7, r7, #16
 1512 00a2 BD46     		mov	sp, r7
 1513 00a4 80BD     		pop	{r7, pc}
 1514              		.cfi_endproc
 1515              	.LFE125:
 1517 00a6 00BF     		.section	.text.RTC_SetAlarm,"ax",%progbits
 1518              		.align	2
 1519              		.global	RTC_SetAlarm
 1520              		.thumb
 1521              		.thumb_func
 1523              	RTC_SetAlarm:
 1524              	.LFB126:
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1525              		.loc 1 1089 0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 24
 1528              		@ frame_needed = 1, uses_anonymous_args = 0
 1529 0000 90B5     		push	{r4, r7, lr}
 1530              	.LCFI47:
 1531              		.cfi_def_cfa_offset 12
 1532              		.cfi_offset 14, -4
 1533              		.cfi_offset 7, -8
 1534              		.cfi_offset 4, -12
 1535 0002 87B0     		sub	sp, sp, #28
 1536              	.LCFI48:
 1537              		.cfi_def_cfa_offset 40
 1538 0004 00AF     		add	r7, sp, #0
 1539              	.LCFI49:
 1540              		.cfi_def_cfa_register 7
 1541 0006 F860     		str	r0, [r7, #12]
 1542 0008 B960     		str	r1, [r7, #8]
 1543 000a 7A60     		str	r2, [r7, #4]
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1544              		.loc 1 1090 0
 1545 000c 4FF00003 		mov	r3, #0
 1546 0010 7B61     		str	r3, [r7, #20]
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1547              		.loc 1 1098 0
 1548 0012 FB68     		ldr	r3, [r7, #12]
 1549 0014 002B     		cmp	r3, #0
 1550 0016 0DD1     		bne	.L60
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1551              		.loc 1 1100 0
 1552 0018 4FF42053 		mov	r3, #10240
 1553 001c C4F20003 		movt	r3, 16384
 1554 0020 9B68     		ldr	r3, [r3, #8]
 1555 0022 03F04003 		and	r3, r3, #64
 1556 0026 002B     		cmp	r3, #0
 1557 0028 2CD1     		bne	.L62
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1558              		.loc 1 1107 0
 1559 002a 7B68     		ldr	r3, [r7, #4]
 1560 002c 4FF00002 		mov	r2, #0
 1561 0030 DA70     		strb	r2, [r3, #3]
 1562 0032 27E0     		b	.L62
 1563              	.L60:
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1564              		.loc 1 1124 0
 1565 0034 4FF42053 		mov	r3, #10240
 1566 0038 C4F20003 		movt	r3, 16384
 1567 003c 9B68     		ldr	r3, [r3, #8]
 1568 003e 03F04003 		and	r3, r3, #64
 1569 0042 002B     		cmp	r3, #0
 1570 0044 07D0     		beq	.L63
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1571              		.loc 1 1126 0
 1572 0046 7B68     		ldr	r3, [r7, #4]
 1573 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1574 004a 1846     		mov	r0, r3
 1575 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1576 0050 0346     		mov	r3, r0
 1577 0052 7B61     		str	r3, [r7, #20]
 1578 0054 03E0     		b	.L64
 1579              	.L63:
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1580              		.loc 1 1132 0
 1581 0056 7B68     		ldr	r3, [r7, #4]
 1582 0058 4FF00002 		mov	r2, #0
 1583 005c DA70     		strb	r2, [r3, #3]
 1584              	.L64:
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1585              		.loc 1 1139 0
 1586 005e 7B68     		ldr	r3, [r7, #4]
 1587 0060 9B68     		ldr	r3, [r3, #8]
 1588 0062 002B     		cmp	r3, #0
 1589 0064 07D1     		bne	.L65
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1590              		.loc 1 1141 0
 1591 0066 7B68     		ldr	r3, [r7, #4]
 1592 0068 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1593 006a 1846     		mov	r0, r3
 1594 006c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1595 0070 0346     		mov	r3, r0
 1596 0072 7B61     		str	r3, [r7, #20]
 1597 0074 06E0     		b	.L62
 1598              	.L65:
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1599              		.loc 1 1146 0
 1600 0076 7B68     		ldr	r3, [r7, #4]
 1601 0078 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1602 007a 1846     		mov	r0, r3
 1603 007c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1604 0080 0346     		mov	r3, r0
 1605 0082 7B61     		str	r3, [r7, #20]
 1606              	.L62:
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1607              		.loc 1 1152 0
 1608 0084 FB68     		ldr	r3, [r7, #12]
 1609 0086 002B     		cmp	r3, #0
 1610 0088 1DD0     		beq	.L66
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1611              		.loc 1 1154 0
 1612 008a 7B68     		ldr	r3, [r7, #4]
 1613 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1614 008e 4FEA0342 		lsl	r2, r3, #16
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1615              		.loc 1 1155 0
 1616 0092 7B68     		ldr	r3, [r7, #4]
 1617 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1618 0096 4FEA0323 		lsl	r3, r3, #8
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1619              		.loc 1 1154 0
 1620 009a 1A43     		orrs	r2, r2, r3
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1621              		.loc 1 1156 0
 1622 009c 7B68     		ldr	r3, [r7, #4]
 1623 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1624              		.loc 1 1155 0
 1625 00a0 1A43     		orrs	r2, r2, r3
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1626              		.loc 1 1157 0
 1627 00a2 7B68     		ldr	r3, [r7, #4]
 1628 00a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1629 00a6 4FEA0343 		lsl	r3, r3, #16
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1630              		.loc 1 1156 0
 1631 00aa 1A43     		orrs	r2, r2, r3
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1632              		.loc 1 1158 0
 1633 00ac 7B68     		ldr	r3, [r7, #4]
 1634 00ae 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1635 00b0 4FEA0363 		lsl	r3, r3, #24
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1636              		.loc 1 1157 0
 1637 00b4 1A43     		orrs	r2, r2, r3
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1638              		.loc 1 1159 0
 1639 00b6 7B68     		ldr	r3, [r7, #4]
 1640 00b8 9B68     		ldr	r3, [r3, #8]
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1641              		.loc 1 1158 0
 1642 00ba 1A43     		orrs	r2, r2, r3
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1643              		.loc 1 1160 0
 1644 00bc 7B68     		ldr	r3, [r7, #4]
 1645 00be 5B68     		ldr	r3, [r3, #4]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1646              		.loc 1 1154 0
 1647 00c0 1343     		orrs	r3, r3, r2
 1648 00c2 7B61     		str	r3, [r7, #20]
 1649 00c4 2FE0     		b	.L67
 1650              	.L66:
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1651              		.loc 1 1164 0
 1652 00c6 7B68     		ldr	r3, [r7, #4]
 1653 00c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1654 00ca 1846     		mov	r0, r3
 1655 00cc FFF7FEFF 		bl	RTC_ByteToBcd2
 1656 00d0 0346     		mov	r3, r0
 1657 00d2 4FEA0344 		lsl	r4, r3, #16
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1658              		.loc 1 1165 0
 1659 00d6 7B68     		ldr	r3, [r7, #4]
 1660 00d8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1661 00da 1846     		mov	r0, r3
 1662 00dc FFF7FEFF 		bl	RTC_ByteToBcd2
 1663 00e0 0346     		mov	r3, r0
 1664 00e2 4FEA0323 		lsl	r3, r3, #8
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1665              		.loc 1 1164 0
 1666 00e6 1C43     		orrs	r4, r4, r3
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1667              		.loc 1 1166 0
 1668 00e8 7B68     		ldr	r3, [r7, #4]
 1669 00ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1670 00ec 1846     		mov	r0, r3
 1671 00ee FFF7FEFF 		bl	RTC_ByteToBcd2
 1672 00f2 0346     		mov	r3, r0
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1673              		.loc 1 1165 0
 1674 00f4 44EA0302 		orr	r2, r4, r3
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1675              		.loc 1 1167 0
 1676 00f8 7B68     		ldr	r3, [r7, #4]
 1677 00fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1678 00fc 4FEA0343 		lsl	r3, r3, #16
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1679              		.loc 1 1166 0
 1680 0100 42EA0304 		orr	r4, r2, r3
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1681              		.loc 1 1168 0
 1682 0104 7B68     		ldr	r3, [r7, #4]
 1683 0106 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1684 0108 1846     		mov	r0, r3
 1685 010a FFF7FEFF 		bl	RTC_ByteToBcd2
 1686 010e 0346     		mov	r3, r0
 1687 0110 4FEA0363 		lsl	r3, r3, #24
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1688              		.loc 1 1167 0
 1689 0114 44EA0302 		orr	r2, r4, r3
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1690              		.loc 1 1169 0
 1691 0118 7B68     		ldr	r3, [r7, #4]
 1692 011a 9B68     		ldr	r3, [r3, #8]
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1693              		.loc 1 1168 0
 1694 011c 1A43     		orrs	r2, r2, r3
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1695              		.loc 1 1170 0
 1696 011e 7B68     		ldr	r3, [r7, #4]
 1697 0120 5B68     		ldr	r3, [r3, #4]
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1698              		.loc 1 1164 0
 1699 0122 1343     		orrs	r3, r3, r2
 1700 0124 7B61     		str	r3, [r7, #20]
 1701              	.L67:
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1702              		.loc 1 1174 0
 1703 0126 4FF42053 		mov	r3, #10240
 1704 012a C4F20003 		movt	r3, 16384
 1705 012e 4FF0CA02 		mov	r2, #202
 1706 0132 5A62     		str	r2, [r3, #36]
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1707              		.loc 1 1175 0
 1708 0134 4FF42053 		mov	r3, #10240
 1709 0138 C4F20003 		movt	r3, 16384
 1710 013c 4FF05302 		mov	r2, #83
 1711 0140 5A62     		str	r2, [r3, #36]
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1712              		.loc 1 1178 0
 1713 0142 BB68     		ldr	r3, [r7, #8]
 1714 0144 B3F5807F 		cmp	r3, #256
 1715 0148 06D1     		bne	.L68
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1716              		.loc 1 1180 0
 1717 014a 4FF42053 		mov	r3, #10240
 1718 014e C4F20003 		movt	r3, 16384
 1719 0152 7A69     		ldr	r2, [r7, #20]
 1720 0154 DA61     		str	r2, [r3, #28]
 1721 0156 05E0     		b	.L69
 1722              	.L68:
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1723              		.loc 1 1184 0
 1724 0158 4FF42053 		mov	r3, #10240
 1725 015c C4F20003 		movt	r3, 16384
 1726 0160 7A69     		ldr	r2, [r7, #20]
 1727 0162 1A62     		str	r2, [r3, #32]
 1728              	.L69:
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1729              		.loc 1 1188 0
 1730 0164 4FF42053 		mov	r3, #10240
 1731 0168 C4F20003 		movt	r3, 16384
 1732 016c 4FF0FF02 		mov	r2, #255
 1733 0170 5A62     		str	r2, [r3, #36]
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1734              		.loc 1 1189 0
 1735 0172 07F11C07 		add	r7, r7, #28
 1736 0176 BD46     		mov	sp, r7
 1737 0178 90BD     		pop	{r4, r7, pc}
 1738              		.cfi_endproc
 1739              	.LFE126:
 1741 017a 00BF     		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1742              		.align	2
 1743              		.global	RTC_AlarmStructInit
 1744              		.thumb
 1745              		.thumb_func
 1747              	RTC_AlarmStructInit:
 1748              	.LFB127:
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1749              		.loc 1 1200 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 8
 1752              		@ frame_needed = 1, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
 1754 0000 80B4     		push	{r7}
 1755              	.LCFI50:
 1756              		.cfi_def_cfa_offset 4
 1757              		.cfi_offset 7, -4
 1758 0002 83B0     		sub	sp, sp, #12
 1759              	.LCFI51:
 1760              		.cfi_def_cfa_offset 16
 1761 0004 00AF     		add	r7, sp, #0
 1762              	.LCFI52:
 1763              		.cfi_def_cfa_register 7
 1764 0006 7860     		str	r0, [r7, #4]
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1765              		.loc 1 1202 0
 1766 0008 7B68     		ldr	r3, [r7, #4]
 1767 000a 4FF00002 		mov	r2, #0
 1768 000e DA70     		strb	r2, [r3, #3]
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1769              		.loc 1 1203 0
 1770 0010 7B68     		ldr	r3, [r7, #4]
 1771 0012 4FF00002 		mov	r2, #0
 1772 0016 1A70     		strb	r2, [r3, #0]
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1773              		.loc 1 1204 0
 1774 0018 7B68     		ldr	r3, [r7, #4]
 1775 001a 4FF00002 		mov	r2, #0
 1776 001e 5A70     		strb	r2, [r3, #1]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1777              		.loc 1 1205 0
 1778 0020 7B68     		ldr	r3, [r7, #4]
 1779 0022 4FF00002 		mov	r2, #0
 1780 0026 9A70     		strb	r2, [r3, #2]
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1781              		.loc 1 1208 0
 1782 0028 7B68     		ldr	r3, [r7, #4]
 1783 002a 4FF00002 		mov	r2, #0
 1784 002e 9A60     		str	r2, [r3, #8]
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1785              		.loc 1 1209 0
 1786 0030 7B68     		ldr	r3, [r7, #4]
 1787 0032 4FF00102 		mov	r2, #1
 1788 0036 1A73     		strb	r2, [r3, #12]
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1789              		.loc 1 1212 0
 1790 0038 7B68     		ldr	r3, [r7, #4]
 1791 003a 4FF00002 		mov	r2, #0
 1792 003e 5A60     		str	r2, [r3, #4]
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1793              		.loc 1 1213 0
 1794 0040 07F10C07 		add	r7, r7, #12
 1795 0044 BD46     		mov	sp, r7
 1796 0046 80BC     		pop	{r7}
 1797 0048 7047     		bx	lr
 1798              		.cfi_endproc
 1799              	.LFE127:
 1801 004a 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 1802              		.align	2
 1803              		.global	RTC_GetAlarm
 1804              		.thumb
 1805              		.thumb_func
 1807              	RTC_GetAlarm:
 1808              	.LFB128:
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1809              		.loc 1 1230 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 24
 1812              		@ frame_needed = 1, uses_anonymous_args = 0
 1813 0000 80B5     		push	{r7, lr}
 1814              	.LCFI53:
 1815              		.cfi_def_cfa_offset 8
 1816              		.cfi_offset 14, -4
 1817              		.cfi_offset 7, -8
 1818 0002 86B0     		sub	sp, sp, #24
 1819              	.LCFI54:
 1820              		.cfi_def_cfa_offset 32
 1821 0004 00AF     		add	r7, sp, #0
 1822              	.LCFI55:
 1823              		.cfi_def_cfa_register 7
 1824 0006 F860     		str	r0, [r7, #12]
 1825 0008 B960     		str	r1, [r7, #8]
 1826 000a 7A60     		str	r2, [r7, #4]
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1827              		.loc 1 1231 0
 1828 000c 4FF00003 		mov	r3, #0
 1829 0010 7B61     		str	r3, [r7, #20]
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1830              		.loc 1 1238 0
 1831 0012 BB68     		ldr	r3, [r7, #8]
 1832 0014 B3F5807F 		cmp	r3, #256
 1833 0018 06D1     		bne	.L72
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1834              		.loc 1 1240 0
 1835 001a 4FF42053 		mov	r3, #10240
 1836 001e C4F20003 		movt	r3, 16384
 1837 0022 DB69     		ldr	r3, [r3, #28]
 1838 0024 7B61     		str	r3, [r7, #20]
 1839 0026 05E0     		b	.L73
 1840              	.L72:
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1841              		.loc 1 1244 0
 1842 0028 4FF42053 		mov	r3, #10240
 1843 002c C4F20003 		movt	r3, 16384
 1844 0030 1B6A     		ldr	r3, [r3, #32]
 1845 0032 7B61     		str	r3, [r7, #20]
 1846              	.L73:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1847              		.loc 1 1248 0
 1848 0034 7B69     		ldr	r3, [r7, #20]
 1849 0036 03F47C13 		and	r3, r3, #4128768
 1850 003a 4FEA1343 		lsr	r3, r3, #16
 1851 003e DAB2     		uxtb	r2, r3
 1852 0040 7B68     		ldr	r3, [r7, #4]
 1853 0042 1A70     		strb	r2, [r3, #0]
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1854              		.loc 1 1250 0
 1855 0044 7B69     		ldr	r3, [r7, #20]
 1856 0046 03F4FE43 		and	r3, r3, #32512
 1857 004a 4FEA1323 		lsr	r3, r3, #8
 1858 004e DAB2     		uxtb	r2, r3
 1859 0050 7B68     		ldr	r3, [r7, #4]
 1860 0052 5A70     		strb	r2, [r3, #1]
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1861              		.loc 1 1252 0
 1862 0054 7B69     		ldr	r3, [r7, #20]
 1863 0056 DBB2     		uxtb	r3, r3
 1864 0058 03F07F03 		and	r3, r3, #127
 1865 005c DAB2     		uxtb	r2, r3
 1866 005e 7B68     		ldr	r3, [r7, #4]
 1867 0060 9A70     		strb	r2, [r3, #2]
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1868              		.loc 1 1254 0
 1869 0062 7B69     		ldr	r3, [r7, #20]
 1870 0064 03F48003 		and	r3, r3, #4194304
 1871 0068 4FEA1343 		lsr	r3, r3, #16
 1872 006c DAB2     		uxtb	r2, r3
 1873 006e 7B68     		ldr	r3, [r7, #4]
 1874 0070 DA70     		strb	r2, [r3, #3]
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1875              		.loc 1 1255 0
 1876 0072 7B69     		ldr	r3, [r7, #20]
 1877 0074 03F07C53 		and	r3, r3, #1056964608
 1878 0078 4FEA1363 		lsr	r3, r3, #24
 1879 007c DAB2     		uxtb	r2, r3
 1880 007e 7B68     		ldr	r3, [r7, #4]
 1881 0080 1A73     		strb	r2, [r3, #12]
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1882              		.loc 1 1256 0
 1883 0082 7B69     		ldr	r3, [r7, #20]
 1884 0084 03F08042 		and	r2, r3, #1073741824
 1885 0088 7B68     		ldr	r3, [r7, #4]
 1886 008a 9A60     		str	r2, [r3, #8]
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1887              		.loc 1 1257 0
 1888 008c 7B69     		ldr	r3, [r7, #20]
 1889 008e 03F08032 		and	r2, r3, #-2139062144
 1890 0092 7B68     		ldr	r3, [r7, #4]
 1891 0094 5A60     		str	r2, [r3, #4]
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1892              		.loc 1 1259 0
 1893 0096 FB68     		ldr	r3, [r7, #12]
 1894 0098 002B     		cmp	r3, #0
 1895 009a 23D1     		bne	.L71
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1896              		.loc 1 1261 0
 1897 009c 7B68     		ldr	r3, [r7, #4]
 1898 009e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1899 00a0 1846     		mov	r0, r3
 1900 00a2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1901 00a6 0346     		mov	r3, r0
 1902 00a8 1A46     		mov	r2, r3
 1903 00aa 7B68     		ldr	r3, [r7, #4]
 1904 00ac 1A70     		strb	r2, [r3, #0]
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1905              		.loc 1 1263 0
 1906 00ae 7B68     		ldr	r3, [r7, #4]
 1907 00b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1908 00b2 1846     		mov	r0, r3
 1909 00b4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1910 00b8 0346     		mov	r3, r0
 1911 00ba 1A46     		mov	r2, r3
 1912 00bc 7B68     		ldr	r3, [r7, #4]
 1913 00be 5A70     		strb	r2, [r3, #1]
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1914              		.loc 1 1265 0
 1915 00c0 7B68     		ldr	r3, [r7, #4]
 1916 00c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1917 00c4 1846     		mov	r0, r3
 1918 00c6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1919 00ca 0346     		mov	r3, r0
 1920 00cc 1A46     		mov	r2, r3
 1921 00ce 7B68     		ldr	r3, [r7, #4]
 1922 00d0 9A70     		strb	r2, [r3, #2]
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1923              		.loc 1 1267 0
 1924 00d2 7B68     		ldr	r3, [r7, #4]
 1925 00d4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1926 00d6 1846     		mov	r0, r3
 1927 00d8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1928 00dc 0346     		mov	r3, r0
 1929 00de 1A46     		mov	r2, r3
 1930 00e0 7B68     		ldr	r3, [r7, #4]
 1931 00e2 1A73     		strb	r2, [r3, #12]
 1932              	.L71:
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1933              		.loc 1 1269 0
 1934 00e4 07F11807 		add	r7, r7, #24
 1935 00e8 BD46     		mov	sp, r7
 1936 00ea 80BD     		pop	{r7, pc}
 1937              		.cfi_endproc
 1938              	.LFE128:
 1940              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1941              		.align	2
 1942              		.global	RTC_AlarmCmd
 1943              		.thumb
 1944              		.thumb_func
 1946              	RTC_AlarmCmd:
 1947              	.LFB129:
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1948              		.loc 1 1284 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 24
 1951              		@ frame_needed = 1, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953 0000 80B4     		push	{r7}
 1954              	.LCFI56:
 1955              		.cfi_def_cfa_offset 4
 1956              		.cfi_offset 7, -4
 1957 0002 87B0     		sub	sp, sp, #28
 1958              	.LCFI57:
 1959              		.cfi_def_cfa_offset 32
 1960 0004 00AF     		add	r7, sp, #0
 1961              	.LCFI58:
 1962              		.cfi_def_cfa_register 7
 1963 0006 7860     		str	r0, [r7, #4]
 1964 0008 0B46     		mov	r3, r1
 1965 000a FB70     		strb	r3, [r7, #3]
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1966              		.loc 1 1285 0
 1967 000c 4FF00003 		mov	r3, #0
 1968 0010 FB60     		str	r3, [r7, #12]
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1969              		.loc 1 1286 0
 1970 0012 4FF00003 		mov	r3, #0
 1971 0016 3B61     		str	r3, [r7, #16]
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1972              		.loc 1 1287 0
 1973 0018 4FF00003 		mov	r3, #0
 1974 001c FB75     		strb	r3, [r7, #23]
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1975              		.loc 1 1294 0
 1976 001e 4FF42053 		mov	r3, #10240
 1977 0022 C4F20003 		movt	r3, 16384
 1978 0026 4FF0CA02 		mov	r2, #202
 1979 002a 5A62     		str	r2, [r3, #36]
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1980              		.loc 1 1295 0
 1981 002c 4FF42053 		mov	r3, #10240
 1982 0030 C4F20003 		movt	r3, 16384
 1983 0034 4FF05302 		mov	r2, #83
 1984 0038 5A62     		str	r2, [r3, #36]
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1985              		.loc 1 1298 0
 1986 003a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1987 003c 002B     		cmp	r3, #0
 1988 003e 10D0     		beq	.L76
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1989              		.loc 1 1300 0
 1990 0040 4FF42053 		mov	r3, #10240
 1991 0044 C4F20003 		movt	r3, 16384
 1992 0048 4FF42052 		mov	r2, #10240
 1993 004c C4F20002 		movt	r2, 16384
 1994 0050 9268     		ldr	r2, [r2, #8]
 1995 0052 1146     		mov	r1, r2
 1996 0054 7A68     		ldr	r2, [r7, #4]
 1997 0056 0A43     		orrs	r2, r2, r1
 1998 0058 9A60     		str	r2, [r3, #8]
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1999              		.loc 1 1302 0
 2000 005a 4FF00103 		mov	r3, #1
 2001 005e FB75     		strb	r3, [r7, #23]
 2002 0060 37E0     		b	.L77
 2003              	.L76:
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2004              		.loc 1 1307 0
 2005 0062 4FF42053 		mov	r3, #10240
 2006 0066 C4F20003 		movt	r3, 16384
 2007 006a 4FF42052 		mov	r2, #10240
 2008 006e C4F20002 		movt	r2, 16384
 2009 0072 9268     		ldr	r2, [r2, #8]
 2010 0074 1146     		mov	r1, r2
 2011 0076 7A68     		ldr	r2, [r7, #4]
 2012 0078 6FEA0202 		mvn	r2, r2
 2013 007c 0A40     		ands	r2, r2, r1
 2014 007e 9A60     		str	r2, [r3, #8]
 2015              	.L79:
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2016              		.loc 1 1312 0 discriminator 1
 2017 0080 4FF42053 		mov	r3, #10240
 2018 0084 C4F20003 		movt	r3, 16384
 2019 0088 DB68     		ldr	r3, [r3, #12]
 2020 008a 1A46     		mov	r2, r3
 2021 008c 7B68     		ldr	r3, [r7, #4]
 2022 008e 4FEA1323 		lsr	r3, r3, #8
 2023 0092 1340     		ands	r3, r3, r2
 2024 0094 3B61     		str	r3, [r7, #16]
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2025              		.loc 1 1313 0 discriminator 1
 2026 0096 FB68     		ldr	r3, [r7, #12]
 2027 0098 03F10103 		add	r3, r3, #1
 2028 009c FB60     		str	r3, [r7, #12]
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2029              		.loc 1 1314 0 discriminator 1
 2030 009e FB68     		ldr	r3, [r7, #12]
 2031 00a0 B3F5803F 		cmp	r3, #65536
 2032 00a4 02D0     		beq	.L78
 2033 00a6 3B69     		ldr	r3, [r7, #16]
 2034 00a8 002B     		cmp	r3, #0
 2035 00aa E9D0     		beq	.L79
 2036              	.L78:
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2037              		.loc 1 1316 0
 2038 00ac 4FF42053 		mov	r3, #10240
 2039 00b0 C4F20003 		movt	r3, 16384
 2040 00b4 DB68     		ldr	r3, [r3, #12]
 2041 00b6 1A46     		mov	r2, r3
 2042 00b8 7B68     		ldr	r3, [r7, #4]
 2043 00ba 4FEA1323 		lsr	r3, r3, #8
 2044 00be 1340     		ands	r3, r3, r2
 2045 00c0 002B     		cmp	r3, #0
 2046 00c2 03D1     		bne	.L80
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2047              		.loc 1 1318 0
 2048 00c4 4FF00003 		mov	r3, #0
 2049 00c8 FB75     		strb	r3, [r7, #23]
 2050 00ca 02E0     		b	.L77
 2051              	.L80:
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2052              		.loc 1 1322 0
 2053 00cc 4FF00103 		mov	r3, #1
 2054 00d0 FB75     		strb	r3, [r7, #23]
 2055              	.L77:
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2056              		.loc 1 1327 0
 2057 00d2 4FF42053 		mov	r3, #10240
 2058 00d6 C4F20003 		movt	r3, 16384
 2059 00da 4FF0FF02 		mov	r2, #255
 2060 00de 5A62     		str	r2, [r3, #36]
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2061              		.loc 1 1329 0
 2062 00e0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2063              		.loc 1 1330 0
 2064 00e2 1846     		mov	r0, r3
 2065 00e4 07F11C07 		add	r7, r7, #28
 2066 00e8 BD46     		mov	sp, r7
 2067 00ea 80BC     		pop	{r7}
 2068 00ec 7047     		bx	lr
 2069              		.cfi_endproc
 2070              	.LFE129:
 2072 00ee 00BF     		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2073              		.align	2
 2074              		.global	RTC_AlarmSubSecondConfig
 2075              		.thumb
 2076              		.thumb_func
 2078              	RTC_AlarmSubSecondConfig:
 2079              	.LFB130:
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2080              		.loc 1 1378 0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 24
 2083              		@ frame_needed = 1, uses_anonymous_args = 0
 2084              		@ link register save eliminated.
 2085 0000 80B4     		push	{r7}
 2086              	.LCFI59:
 2087              		.cfi_def_cfa_offset 4
 2088              		.cfi_offset 7, -4
 2089 0002 87B0     		sub	sp, sp, #28
 2090              	.LCFI60:
 2091              		.cfi_def_cfa_offset 32
 2092 0004 00AF     		add	r7, sp, #0
 2093              	.LCFI61:
 2094              		.cfi_def_cfa_register 7
 2095 0006 F860     		str	r0, [r7, #12]
 2096 0008 B960     		str	r1, [r7, #8]
 2097 000a 7A60     		str	r2, [r7, #4]
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2098              		.loc 1 1379 0
 2099 000c 4FF00003 		mov	r3, #0
 2100 0010 7B61     		str	r3, [r7, #20]
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2101              		.loc 1 1387 0
 2102 0012 4FF42053 		mov	r3, #10240
 2103 0016 C4F20003 		movt	r3, 16384
 2104 001a 4FF0CA02 		mov	r2, #202
 2105 001e 5A62     		str	r2, [r3, #36]
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2106              		.loc 1 1388 0
 2107 0020 4FF42053 		mov	r3, #10240
 2108 0024 C4F20003 		movt	r3, 16384
 2109 0028 4FF05302 		mov	r2, #83
 2110 002c 5A62     		str	r2, [r3, #36]
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2111              		.loc 1 1391 0
 2112 002e BA68     		ldr	r2, [r7, #8]
 2113 0030 7B68     		ldr	r3, [r7, #4]
 2114 0032 1343     		orrs	r3, r3, r2
 2115 0034 7B61     		str	r3, [r7, #20]
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2116              		.loc 1 1393 0
 2117 0036 FB68     		ldr	r3, [r7, #12]
 2118 0038 B3F5807F 		cmp	r3, #256
 2119 003c 06D1     		bne	.L82
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2120              		.loc 1 1396 0
 2121 003e 4FF42053 		mov	r3, #10240
 2122 0042 C4F20003 		movt	r3, 16384
 2123 0046 7A69     		ldr	r2, [r7, #20]
 2124 0048 5A64     		str	r2, [r3, #68]
 2125 004a 05E0     		b	.L83
 2126              	.L82:
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2127              		.loc 1 1401 0
 2128 004c 4FF42053 		mov	r3, #10240
 2129 0050 C4F20003 		movt	r3, 16384
 2130 0054 7A69     		ldr	r2, [r7, #20]
 2131 0056 9A64     		str	r2, [r3, #72]
 2132              	.L83:
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2133              		.loc 1 1405 0
 2134 0058 4FF42053 		mov	r3, #10240
 2135 005c C4F20003 		movt	r3, 16384
 2136 0060 4FF0FF02 		mov	r2, #255
 2137 0064 5A62     		str	r2, [r3, #36]
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2138              		.loc 1 1407 0
 2139 0066 07F11C07 		add	r7, r7, #28
 2140 006a BD46     		mov	sp, r7
 2141 006c 80BC     		pop	{r7}
 2142 006e 7047     		bx	lr
 2143              		.cfi_endproc
 2144              	.LFE130:
 2146              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2147              		.align	2
 2148              		.global	RTC_GetAlarmSubSecond
 2149              		.thumb
 2150              		.thumb_func
 2152              	RTC_GetAlarmSubSecond:
 2153              	.LFB131:
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2154              		.loc 1 1419 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 16
 2157              		@ frame_needed = 1, uses_anonymous_args = 0
 2158              		@ link register save eliminated.
 2159 0000 80B4     		push	{r7}
 2160              	.LCFI62:
 2161              		.cfi_def_cfa_offset 4
 2162              		.cfi_offset 7, -4
 2163 0002 85B0     		sub	sp, sp, #20
 2164              	.LCFI63:
 2165              		.cfi_def_cfa_offset 24
 2166 0004 00AF     		add	r7, sp, #0
 2167              	.LCFI64:
 2168              		.cfi_def_cfa_register 7
 2169 0006 7860     		str	r0, [r7, #4]
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2170              		.loc 1 1420 0
 2171 0008 4FF00003 		mov	r3, #0
 2172 000c FB60     		str	r3, [r7, #12]
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2173              		.loc 1 1423 0
 2174 000e 7B68     		ldr	r3, [r7, #4]
 2175 0010 B3F5807F 		cmp	r3, #256
 2176 0014 0AD1     		bne	.L85
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2177              		.loc 1 1425 0
 2178 0016 4FF42053 		mov	r3, #10240
 2179 001a C4F20003 		movt	r3, 16384
 2180 001e 5B6C     		ldr	r3, [r3, #68]
 2181 0020 4FEA4343 		lsl	r3, r3, #17
 2182 0024 4FEA5343 		lsr	r3, r3, #17
 2183 0028 FB60     		str	r3, [r7, #12]
 2184 002a 09E0     		b	.L86
 2185              	.L85:
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2186              		.loc 1 1429 0
 2187 002c 4FF42053 		mov	r3, #10240
 2188 0030 C4F20003 		movt	r3, 16384
 2189 0034 9B6C     		ldr	r3, [r3, #72]
 2190 0036 4FEA4343 		lsl	r3, r3, #17
 2191 003a 4FEA5343 		lsr	r3, r3, #17
 2192 003e FB60     		str	r3, [r7, #12]
 2193              	.L86:
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2194              		.loc 1 1432 0
 2195 0040 FB68     		ldr	r3, [r7, #12]
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2196              		.loc 1 1433 0
 2197 0042 1846     		mov	r0, r3
 2198 0044 07F11407 		add	r7, r7, #20
 2199 0048 BD46     		mov	sp, r7
 2200 004a 80BC     		pop	{r7}
 2201 004c 7047     		bx	lr
 2202              		.cfi_endproc
 2203              	.LFE131:
 2205 004e 00BF     		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2206              		.align	2
 2207              		.global	RTC_WakeUpClockConfig
 2208              		.thumb
 2209              		.thumb_func
 2211              	RTC_WakeUpClockConfig:
 2212              	.LFB132:
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2213              		.loc 1 1468 0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 8
 2216              		@ frame_needed = 1, uses_anonymous_args = 0
 2217              		@ link register save eliminated.
 2218 0000 80B4     		push	{r7}
 2219              	.LCFI65:
 2220              		.cfi_def_cfa_offset 4
 2221              		.cfi_offset 7, -4
 2222 0002 83B0     		sub	sp, sp, #12
 2223              	.LCFI66:
 2224              		.cfi_def_cfa_offset 16
 2225 0004 00AF     		add	r7, sp, #0
 2226              	.LCFI67:
 2227              		.cfi_def_cfa_register 7
 2228 0006 7860     		str	r0, [r7, #4]
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2229              		.loc 1 1473 0
 2230 0008 4FF42053 		mov	r3, #10240
 2231 000c C4F20003 		movt	r3, 16384
 2232 0010 4FF0CA02 		mov	r2, #202
 2233 0014 5A62     		str	r2, [r3, #36]
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2234              		.loc 1 1474 0
 2235 0016 4FF42053 		mov	r3, #10240
 2236 001a C4F20003 		movt	r3, 16384
 2237 001e 4FF05302 		mov	r2, #83
 2238 0022 5A62     		str	r2, [r3, #36]
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2239              		.loc 1 1477 0
 2240 0024 4FF42053 		mov	r3, #10240
 2241 0028 C4F20003 		movt	r3, 16384
 2242 002c 4FF42052 		mov	r2, #10240
 2243 0030 C4F20002 		movt	r2, 16384
 2244 0034 9268     		ldr	r2, [r2, #8]
 2245 0036 22F00702 		bic	r2, r2, #7
 2246 003a 9A60     		str	r2, [r3, #8]
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2247              		.loc 1 1480 0
 2248 003c 4FF42053 		mov	r3, #10240
 2249 0040 C4F20003 		movt	r3, 16384
 2250 0044 4FF42052 		mov	r2, #10240
 2251 0048 C4F20002 		movt	r2, 16384
 2252 004c 9268     		ldr	r2, [r2, #8]
 2253 004e 1146     		mov	r1, r2
 2254 0050 7A68     		ldr	r2, [r7, #4]
 2255 0052 0A43     		orrs	r2, r2, r1
 2256 0054 9A60     		str	r2, [r3, #8]
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2257              		.loc 1 1483 0
 2258 0056 4FF42053 		mov	r3, #10240
 2259 005a C4F20003 		movt	r3, 16384
 2260 005e 4FF0FF02 		mov	r2, #255
 2261 0062 5A62     		str	r2, [r3, #36]
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2262              		.loc 1 1484 0
 2263 0064 07F10C07 		add	r7, r7, #12
 2264 0068 BD46     		mov	sp, r7
 2265 006a 80BC     		pop	{r7}
 2266 006c 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE132:
 2270 006e 00BF     		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2271              		.align	2
 2272              		.global	RTC_SetWakeUpCounter
 2273              		.thumb
 2274              		.thumb_func
 2276              	RTC_SetWakeUpCounter:
 2277              	.LFB133:
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2278              		.loc 1 1495 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 8
 2281              		@ frame_needed = 1, uses_anonymous_args = 0
 2282              		@ link register save eliminated.
 2283 0000 80B4     		push	{r7}
 2284              	.LCFI68:
 2285              		.cfi_def_cfa_offset 4
 2286              		.cfi_offset 7, -4
 2287 0002 83B0     		sub	sp, sp, #12
 2288              	.LCFI69:
 2289              		.cfi_def_cfa_offset 16
 2290 0004 00AF     		add	r7, sp, #0
 2291              	.LCFI70:
 2292              		.cfi_def_cfa_register 7
 2293 0006 7860     		str	r0, [r7, #4]
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2294              		.loc 1 1500 0
 2295 0008 4FF42053 		mov	r3, #10240
 2296 000c C4F20003 		movt	r3, 16384
 2297 0010 4FF0CA02 		mov	r2, #202
 2298 0014 5A62     		str	r2, [r3, #36]
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2299              		.loc 1 1501 0
 2300 0016 4FF42053 		mov	r3, #10240
 2301 001a C4F20003 		movt	r3, 16384
 2302 001e 4FF05302 		mov	r2, #83
 2303 0022 5A62     		str	r2, [r3, #36]
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2304              		.loc 1 1504 0
 2305 0024 4FF42053 		mov	r3, #10240
 2306 0028 C4F20003 		movt	r3, 16384
 2307 002c 7A68     		ldr	r2, [r7, #4]
 2308 002e 5A61     		str	r2, [r3, #20]
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2309              		.loc 1 1507 0
 2310 0030 4FF42053 		mov	r3, #10240
 2311 0034 C4F20003 		movt	r3, 16384
 2312 0038 4FF0FF02 		mov	r2, #255
 2313 003c 5A62     		str	r2, [r3, #36]
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2314              		.loc 1 1508 0
 2315 003e 07F10C07 		add	r7, r7, #12
 2316 0042 BD46     		mov	sp, r7
 2317 0044 80BC     		pop	{r7}
 2318 0046 7047     		bx	lr
 2319              		.cfi_endproc
 2320              	.LFE133:
 2322              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2323              		.align	2
 2324              		.global	RTC_GetWakeUpCounter
 2325              		.thumb
 2326              		.thumb_func
 2328              	RTC_GetWakeUpCounter:
 2329              	.LFB134:
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2330              		.loc 1 1516 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 1, uses_anonymous_args = 0
 2334              		@ link register save eliminated.
 2335 0000 80B4     		push	{r7}
 2336              	.LCFI71:
 2337              		.cfi_def_cfa_offset 4
 2338              		.cfi_offset 7, -4
 2339 0002 00AF     		add	r7, sp, #0
 2340              	.LCFI72:
 2341              		.cfi_def_cfa_register 7
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2342              		.loc 1 1518 0
 2343 0004 4FF42053 		mov	r3, #10240
 2344 0008 C4F20003 		movt	r3, 16384
 2345 000c 5B69     		ldr	r3, [r3, #20]
 2346 000e 4FEA0343 		lsl	r3, r3, #16
 2347 0012 4FEA1343 		lsr	r3, r3, #16
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2348              		.loc 1 1519 0
 2349 0016 1846     		mov	r0, r3
 2350 0018 BD46     		mov	sp, r7
 2351 001a 80BC     		pop	{r7}
 2352 001c 7047     		bx	lr
 2353              		.cfi_endproc
 2354              	.LFE134:
 2356 001e 00BF     		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2357              		.align	2
 2358              		.global	RTC_WakeUpCmd
 2359              		.thumb
 2360              		.thumb_func
 2362              	RTC_WakeUpCmd:
 2363              	.LFB135:
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2364              		.loc 1 1528 0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 24
 2367              		@ frame_needed = 1, uses_anonymous_args = 0
 2368              		@ link register save eliminated.
 2369 0000 80B4     		push	{r7}
 2370              	.LCFI73:
 2371              		.cfi_def_cfa_offset 4
 2372              		.cfi_offset 7, -4
 2373 0002 87B0     		sub	sp, sp, #28
 2374              	.LCFI74:
 2375              		.cfi_def_cfa_offset 32
 2376 0004 00AF     		add	r7, sp, #0
 2377              	.LCFI75:
 2378              		.cfi_def_cfa_register 7
 2379 0006 0346     		mov	r3, r0
 2380 0008 FB71     		strb	r3, [r7, #7]
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2381              		.loc 1 1529 0
 2382 000a 4FF00003 		mov	r3, #0
 2383 000e FB60     		str	r3, [r7, #12]
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2384              		.loc 1 1530 0
 2385 0010 4FF00003 		mov	r3, #0
 2386 0014 3B61     		str	r3, [r7, #16]
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2387              		.loc 1 1531 0
 2388 0016 4FF00003 		mov	r3, #0
 2389 001a FB75     		strb	r3, [r7, #23]
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2390              		.loc 1 1537 0
 2391 001c 4FF42053 		mov	r3, #10240
 2392 0020 C4F20003 		movt	r3, 16384
 2393 0024 4FF0CA02 		mov	r2, #202
 2394 0028 5A62     		str	r2, [r3, #36]
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2395              		.loc 1 1538 0
 2396 002a 4FF42053 		mov	r3, #10240
 2397 002e C4F20003 		movt	r3, 16384
 2398 0032 4FF05302 		mov	r2, #83
 2399 0036 5A62     		str	r2, [r3, #36]
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2400              		.loc 1 1540 0
 2401 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2402 003a 002B     		cmp	r3, #0
 2403 003c 0FD0     		beq	.L91
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2404              		.loc 1 1543 0
 2405 003e 4FF42053 		mov	r3, #10240
 2406 0042 C4F20003 		movt	r3, 16384
 2407 0046 4FF42052 		mov	r2, #10240
 2408 004a C4F20002 		movt	r2, 16384
 2409 004e 9268     		ldr	r2, [r2, #8]
 2410 0050 42F48062 		orr	r2, r2, #1024
 2411 0054 9A60     		str	r2, [r3, #8]
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2412              		.loc 1 1544 0
 2413 0056 4FF00103 		mov	r3, #1
 2414 005a FB75     		strb	r3, [r7, #23]
 2415 005c 2EE0     		b	.L92
 2416              	.L91:
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2417              		.loc 1 1549 0
 2418 005e 4FF42053 		mov	r3, #10240
 2419 0062 C4F20003 		movt	r3, 16384
 2420 0066 4FF42052 		mov	r2, #10240
 2421 006a C4F20002 		movt	r2, 16384
 2422 006e 9268     		ldr	r2, [r2, #8]
 2423 0070 22F48062 		bic	r2, r2, #1024
 2424 0074 9A60     		str	r2, [r3, #8]
 2425              	.L94:
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2426              		.loc 1 1553 0 discriminator 1
 2427 0076 4FF42053 		mov	r3, #10240
 2428 007a C4F20003 		movt	r3, 16384
 2429 007e DB68     		ldr	r3, [r3, #12]
 2430 0080 03F00403 		and	r3, r3, #4
 2431 0084 3B61     		str	r3, [r7, #16]
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2432              		.loc 1 1554 0 discriminator 1
 2433 0086 FB68     		ldr	r3, [r7, #12]
 2434 0088 03F10103 		add	r3, r3, #1
 2435 008c FB60     		str	r3, [r7, #12]
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2436              		.loc 1 1555 0 discriminator 1
 2437 008e FB68     		ldr	r3, [r7, #12]
 2438 0090 B3F5803F 		cmp	r3, #65536
 2439 0094 02D0     		beq	.L93
 2440 0096 3B69     		ldr	r3, [r7, #16]
 2441 0098 002B     		cmp	r3, #0
 2442 009a ECD0     		beq	.L94
 2443              	.L93:
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2444              		.loc 1 1557 0
 2445 009c 4FF42053 		mov	r3, #10240
 2446 00a0 C4F20003 		movt	r3, 16384
 2447 00a4 DB68     		ldr	r3, [r3, #12]
 2448 00a6 03F00403 		and	r3, r3, #4
 2449 00aa 002B     		cmp	r3, #0
 2450 00ac 03D1     		bne	.L95
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2451              		.loc 1 1559 0
 2452 00ae 4FF00003 		mov	r3, #0
 2453 00b2 FB75     		strb	r3, [r7, #23]
 2454 00b4 02E0     		b	.L92
 2455              	.L95:
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2456              		.loc 1 1563 0
 2457 00b6 4FF00103 		mov	r3, #1
 2458 00ba FB75     		strb	r3, [r7, #23]
 2459              	.L92:
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2460              		.loc 1 1568 0
 2461 00bc 4FF42053 		mov	r3, #10240
 2462 00c0 C4F20003 		movt	r3, 16384
 2463 00c4 4FF0FF02 		mov	r2, #255
 2464 00c8 5A62     		str	r2, [r3, #36]
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2465              		.loc 1 1570 0
 2466 00ca FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2467              		.loc 1 1571 0
 2468 00cc 1846     		mov	r0, r3
 2469 00ce 07F11C07 		add	r7, r7, #28
 2470 00d2 BD46     		mov	sp, r7
 2471 00d4 80BC     		pop	{r7}
 2472 00d6 7047     		bx	lr
 2473              		.cfi_endproc
 2474              	.LFE135:
 2476              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2477              		.align	2
 2478              		.global	RTC_DayLightSavingConfig
 2479              		.thumb
 2480              		.thumb_func
 2482              	RTC_DayLightSavingConfig:
 2483              	.LFB136:
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2484              		.loc 1 1605 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 8
 2487              		@ frame_needed = 1, uses_anonymous_args = 0
 2488              		@ link register save eliminated.
 2489 0000 80B4     		push	{r7}
 2490              	.LCFI76:
 2491              		.cfi_def_cfa_offset 4
 2492              		.cfi_offset 7, -4
 2493 0002 83B0     		sub	sp, sp, #12
 2494              	.LCFI77:
 2495              		.cfi_def_cfa_offset 16
 2496 0004 00AF     		add	r7, sp, #0
 2497              	.LCFI78:
 2498              		.cfi_def_cfa_register 7
 2499 0006 7860     		str	r0, [r7, #4]
 2500 0008 3960     		str	r1, [r7, #0]
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2501              		.loc 1 1611 0
 2502 000a 4FF42053 		mov	r3, #10240
 2503 000e C4F20003 		movt	r3, 16384
 2504 0012 4FF0CA02 		mov	r2, #202
 2505 0016 5A62     		str	r2, [r3, #36]
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2506              		.loc 1 1612 0
 2507 0018 4FF42053 		mov	r3, #10240
 2508 001c C4F20003 		movt	r3, 16384
 2509 0020 4FF05302 		mov	r2, #83
 2510 0024 5A62     		str	r2, [r3, #36]
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2511              		.loc 1 1615 0
 2512 0026 4FF42053 		mov	r3, #10240
 2513 002a C4F20003 		movt	r3, 16384
 2514 002e 4FF42052 		mov	r2, #10240
 2515 0032 C4F20002 		movt	r2, 16384
 2516 0036 9268     		ldr	r2, [r2, #8]
 2517 0038 22F48022 		bic	r2, r2, #262144
 2518 003c 9A60     		str	r2, [r3, #8]
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2519              		.loc 1 1618 0
 2520 003e 4FF42053 		mov	r3, #10240
 2521 0042 C4F20003 		movt	r3, 16384
 2522 0046 4FF42052 		mov	r2, #10240
 2523 004a C4F20002 		movt	r2, 16384
 2524 004e 9268     		ldr	r2, [r2, #8]
 2525 0050 1146     		mov	r1, r2
 2526 0052 7868     		ldr	r0, [r7, #4]
 2527 0054 3A68     		ldr	r2, [r7, #0]
 2528 0056 0243     		orrs	r2, r2, r0
 2529 0058 0A43     		orrs	r2, r2, r1
 2530 005a 9A60     		str	r2, [r3, #8]
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2531              		.loc 1 1621 0
 2532 005c 4FF42053 		mov	r3, #10240
 2533 0060 C4F20003 		movt	r3, 16384
 2534 0064 4FF0FF02 		mov	r2, #255
 2535 0068 5A62     		str	r2, [r3, #36]
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2536              		.loc 1 1622 0
 2537 006a 07F10C07 		add	r7, r7, #12
 2538 006e BD46     		mov	sp, r7
 2539 0070 80BC     		pop	{r7}
 2540 0072 7047     		bx	lr
 2541              		.cfi_endproc
 2542              	.LFE136:
 2544              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2545              		.align	2
 2546              		.global	RTC_GetStoreOperation
 2547              		.thumb
 2548              		.thumb_func
 2550              	RTC_GetStoreOperation:
 2551              	.LFB137:
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2552              		.loc 1 1632 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 0
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 2557 0000 80B4     		push	{r7}
 2558              	.LCFI79:
 2559              		.cfi_def_cfa_offset 4
 2560              		.cfi_offset 7, -4
 2561 0002 00AF     		add	r7, sp, #0
 2562              	.LCFI80:
 2563              		.cfi_def_cfa_register 7
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2564              		.loc 1 1633 0
 2565 0004 4FF42053 		mov	r3, #10240
 2566 0008 C4F20003 		movt	r3, 16384
 2567 000c 9B68     		ldr	r3, [r3, #8]
 2568 000e 03F48023 		and	r3, r3, #262144
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2569              		.loc 1 1634 0
 2570 0012 1846     		mov	r0, r3
 2571 0014 BD46     		mov	sp, r7
 2572 0016 80BC     		pop	{r7}
 2573 0018 7047     		bx	lr
 2574              		.cfi_endproc
 2575              	.LFE137:
 2577 001a 00BF     		.section	.text.RTC_OutputConfig,"ax",%progbits
 2578              		.align	2
 2579              		.global	RTC_OutputConfig
 2580              		.thumb
 2581              		.thumb_func
 2583              	RTC_OutputConfig:
 2584              	.LFB138:
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2585              		.loc 1 1671 0
 2586              		.cfi_startproc
 2587              		@ args = 0, pretend = 0, frame = 8
 2588              		@ frame_needed = 1, uses_anonymous_args = 0
 2589              		@ link register save eliminated.
 2590 0000 80B4     		push	{r7}
 2591              	.LCFI81:
 2592              		.cfi_def_cfa_offset 4
 2593              		.cfi_offset 7, -4
 2594 0002 83B0     		sub	sp, sp, #12
 2595              	.LCFI82:
 2596              		.cfi_def_cfa_offset 16
 2597 0004 00AF     		add	r7, sp, #0
 2598              	.LCFI83:
 2599              		.cfi_def_cfa_register 7
 2600 0006 7860     		str	r0, [r7, #4]
 2601 0008 3960     		str	r1, [r7, #0]
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2602              		.loc 1 1677 0
 2603 000a 4FF42053 		mov	r3, #10240
 2604 000e C4F20003 		movt	r3, 16384
 2605 0012 4FF0CA02 		mov	r2, #202
 2606 0016 5A62     		str	r2, [r3, #36]
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2607              		.loc 1 1678 0
 2608 0018 4FF42053 		mov	r3, #10240
 2609 001c C4F20003 		movt	r3, 16384
 2610 0020 4FF05302 		mov	r2, #83
 2611 0024 5A62     		str	r2, [r3, #36]
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2612              		.loc 1 1681 0
 2613 0026 4FF42053 		mov	r3, #10240
 2614 002a C4F20003 		movt	r3, 16384
 2615 002e 4FF42052 		mov	r2, #10240
 2616 0032 C4F20002 		movt	r2, 16384
 2617 0036 9268     		ldr	r2, [r2, #8]
 2618 0038 22F4E002 		bic	r2, r2, #7340032
 2619 003c 9A60     		str	r2, [r3, #8]
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2620              		.loc 1 1684 0
 2621 003e 4FF42053 		mov	r3, #10240
 2622 0042 C4F20003 		movt	r3, 16384
 2623 0046 4FF42052 		mov	r2, #10240
 2624 004a C4F20002 		movt	r2, 16384
 2625 004e 9268     		ldr	r2, [r2, #8]
 2626 0050 1146     		mov	r1, r2
 2627 0052 7868     		ldr	r0, [r7, #4]
 2628 0054 3A68     		ldr	r2, [r7, #0]
 2629 0056 0243     		orrs	r2, r2, r0
 2630 0058 0A43     		orrs	r2, r2, r1
 2631 005a 9A60     		str	r2, [r3, #8]
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2632              		.loc 1 1687 0
 2633 005c 4FF42053 		mov	r3, #10240
 2634 0060 C4F20003 		movt	r3, 16384
 2635 0064 4FF0FF02 		mov	r2, #255
 2636 0068 5A62     		str	r2, [r3, #36]
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2637              		.loc 1 1688 0
 2638 006a 07F10C07 		add	r7, r7, #12
 2639 006e BD46     		mov	sp, r7
 2640 0070 80BC     		pop	{r7}
 2641 0072 7047     		bx	lr
 2642              		.cfi_endproc
 2643              	.LFE138:
 2645              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2646              		.align	2
 2647              		.global	RTC_CoarseCalibConfig
 2648              		.thumb
 2649              		.thumb_func
 2651              	RTC_CoarseCalibConfig:
 2652              	.LFB139:
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2653              		.loc 1 1725 0
 2654              		.cfi_startproc
 2655              		@ args = 0, pretend = 0, frame = 16
 2656              		@ frame_needed = 1, uses_anonymous_args = 0
 2657 0000 80B5     		push	{r7, lr}
 2658              	.LCFI84:
 2659              		.cfi_def_cfa_offset 8
 2660              		.cfi_offset 14, -4
 2661              		.cfi_offset 7, -8
 2662 0002 84B0     		sub	sp, sp, #16
 2663              	.LCFI85:
 2664              		.cfi_def_cfa_offset 24
 2665 0004 00AF     		add	r7, sp, #0
 2666              	.LCFI86:
 2667              		.cfi_def_cfa_register 7
 2668 0006 7860     		str	r0, [r7, #4]
 2669 0008 3960     		str	r1, [r7, #0]
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2670              		.loc 1 1726 0
 2671 000a 4FF00003 		mov	r3, #0
 2672 000e FB73     		strb	r3, [r7, #15]
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2673              		.loc 1 1733 0
 2674 0010 4FF42053 		mov	r3, #10240
 2675 0014 C4F20003 		movt	r3, 16384
 2676 0018 4FF0CA02 		mov	r2, #202
 2677 001c 5A62     		str	r2, [r3, #36]
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2678              		.loc 1 1734 0
 2679 001e 4FF42053 		mov	r3, #10240
 2680 0022 C4F20003 		movt	r3, 16384
 2681 0026 4FF05302 		mov	r2, #83
 2682 002a 5A62     		str	r2, [r3, #36]
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2683              		.loc 1 1737 0
 2684 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2685 0030 0346     		mov	r3, r0
 2686 0032 002B     		cmp	r3, #0
 2687 0034 03D1     		bne	.L100
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2688              		.loc 1 1739 0
 2689 0036 4FF00003 		mov	r3, #0
 2690 003a FB73     		strb	r3, [r7, #15]
 2691 003c 0CE0     		b	.L101
 2692              	.L100:
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2693              		.loc 1 1744 0
 2694 003e 4FF42053 		mov	r3, #10240
 2695 0042 C4F20003 		movt	r3, 16384
 2696 0046 7968     		ldr	r1, [r7, #4]
 2697 0048 3A68     		ldr	r2, [r7, #0]
 2698 004a 0A43     		orrs	r2, r2, r1
 2699 004c 9A61     		str	r2, [r3, #24]
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2700              		.loc 1 1746 0
 2701 004e FFF7FEFF 		bl	RTC_ExitInitMode
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2702              		.loc 1 1748 0
 2703 0052 4FF00103 		mov	r3, #1
 2704 0056 FB73     		strb	r3, [r7, #15]
 2705              	.L101:
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2706              		.loc 1 1752 0
 2707 0058 4FF42053 		mov	r3, #10240
 2708 005c C4F20003 		movt	r3, 16384
 2709 0060 4FF0FF02 		mov	r2, #255
 2710 0064 5A62     		str	r2, [r3, #36]
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2711              		.loc 1 1754 0
 2712 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2713              		.loc 1 1755 0
 2714 0068 1846     		mov	r0, r3
 2715 006a 07F11007 		add	r7, r7, #16
 2716 006e BD46     		mov	sp, r7
 2717 0070 80BD     		pop	{r7, pc}
 2718              		.cfi_endproc
 2719              	.LFE139:
 2721 0072 00BF     		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2722              		.align	2
 2723              		.global	RTC_CoarseCalibCmd
 2724              		.thumb
 2725              		.thumb_func
 2727              	RTC_CoarseCalibCmd:
 2728              	.LFB140:
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2729              		.loc 1 1766 0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 16
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733 0000 80B5     		push	{r7, lr}
 2734              	.LCFI87:
 2735              		.cfi_def_cfa_offset 8
 2736              		.cfi_offset 14, -4
 2737              		.cfi_offset 7, -8
 2738 0002 84B0     		sub	sp, sp, #16
 2739              	.LCFI88:
 2740              		.cfi_def_cfa_offset 24
 2741 0004 00AF     		add	r7, sp, #0
 2742              	.LCFI89:
 2743              		.cfi_def_cfa_register 7
 2744 0006 0346     		mov	r3, r0
 2745 0008 FB71     		strb	r3, [r7, #7]
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2746              		.loc 1 1767 0
 2747 000a 4FF00003 		mov	r3, #0
 2748 000e FB73     		strb	r3, [r7, #15]
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2749              		.loc 1 1773 0
 2750 0010 4FF42053 		mov	r3, #10240
 2751 0014 C4F20003 		movt	r3, 16384
 2752 0018 4FF0CA02 		mov	r2, #202
 2753 001c 5A62     		str	r2, [r3, #36]
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2754              		.loc 1 1774 0
 2755 001e 4FF42053 		mov	r3, #10240
 2756 0022 C4F20003 		movt	r3, 16384
 2757 0026 4FF05302 		mov	r2, #83
 2758 002a 5A62     		str	r2, [r3, #36]
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2759              		.loc 1 1777 0
 2760 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2761 0030 0346     		mov	r3, r0
 2762 0032 002B     		cmp	r3, #0
 2763 0034 03D1     		bne	.L103
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2764              		.loc 1 1779 0
 2765 0036 4FF00003 		mov	r3, #0
 2766 003a FB73     		strb	r3, [r7, #15]
 2767 003c 20E0     		b	.L104
 2768              	.L103:
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2769              		.loc 1 1783 0
 2770 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2771 0040 002B     		cmp	r3, #0
 2772 0042 0CD0     		beq	.L105
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2773              		.loc 1 1786 0
 2774 0044 4FF42053 		mov	r3, #10240
 2775 0048 C4F20003 		movt	r3, 16384
 2776 004c 4FF42052 		mov	r2, #10240
 2777 0050 C4F20002 		movt	r2, 16384
 2778 0054 9268     		ldr	r2, [r2, #8]
 2779 0056 42F08002 		orr	r2, r2, #128
 2780 005a 9A60     		str	r2, [r3, #8]
 2781 005c 0BE0     		b	.L106
 2782              	.L105:
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2783              		.loc 1 1791 0
 2784 005e 4FF42053 		mov	r3, #10240
 2785 0062 C4F20003 		movt	r3, 16384
 2786 0066 4FF42052 		mov	r2, #10240
 2787 006a C4F20002 		movt	r2, 16384
 2788 006e 9268     		ldr	r2, [r2, #8]
 2789 0070 22F08002 		bic	r2, r2, #128
 2790 0074 9A60     		str	r2, [r3, #8]
 2791              	.L106:
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2792              		.loc 1 1794 0
 2793 0076 FFF7FEFF 		bl	RTC_ExitInitMode
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2794              		.loc 1 1796 0
 2795 007a 4FF00103 		mov	r3, #1
 2796 007e FB73     		strb	r3, [r7, #15]
 2797              	.L104:
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2798              		.loc 1 1800 0
 2799 0080 4FF42053 		mov	r3, #10240
 2800 0084 C4F20003 		movt	r3, 16384
 2801 0088 4FF0FF02 		mov	r2, #255
 2802 008c 5A62     		str	r2, [r3, #36]
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2803              		.loc 1 1802 0
 2804 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2805              		.loc 1 1803 0
 2806 0090 1846     		mov	r0, r3
 2807 0092 07F11007 		add	r7, r7, #16
 2808 0096 BD46     		mov	sp, r7
 2809 0098 80BD     		pop	{r7, pc}
 2810              		.cfi_endproc
 2811              	.LFE140:
 2813 009a 00BF     		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2814              		.align	2
 2815              		.global	RTC_CalibOutputCmd
 2816              		.thumb
 2817              		.thumb_func
 2819              	RTC_CalibOutputCmd:
 2820              	.LFB141:
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2821              		.loc 1 1812 0
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 8
 2824              		@ frame_needed = 1, uses_anonymous_args = 0
 2825              		@ link register save eliminated.
 2826 0000 80B4     		push	{r7}
 2827              	.LCFI90:
 2828              		.cfi_def_cfa_offset 4
 2829              		.cfi_offset 7, -4
 2830 0002 83B0     		sub	sp, sp, #12
 2831              	.LCFI91:
 2832              		.cfi_def_cfa_offset 16
 2833 0004 00AF     		add	r7, sp, #0
 2834              	.LCFI92:
 2835              		.cfi_def_cfa_register 7
 2836 0006 0346     		mov	r3, r0
 2837 0008 FB71     		strb	r3, [r7, #7]
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2838              		.loc 1 1817 0
 2839 000a 4FF42053 		mov	r3, #10240
 2840 000e C4F20003 		movt	r3, 16384
 2841 0012 4FF0CA02 		mov	r2, #202
 2842 0016 5A62     		str	r2, [r3, #36]
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2843              		.loc 1 1818 0
 2844 0018 4FF42053 		mov	r3, #10240
 2845 001c C4F20003 		movt	r3, 16384
 2846 0020 4FF05302 		mov	r2, #83
 2847 0024 5A62     		str	r2, [r3, #36]
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2848              		.loc 1 1820 0
 2849 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2850 0028 002B     		cmp	r3, #0
 2851 002a 0CD0     		beq	.L108
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2852              		.loc 1 1823 0
 2853 002c 4FF42053 		mov	r3, #10240
 2854 0030 C4F20003 		movt	r3, 16384
 2855 0034 4FF42052 		mov	r2, #10240
 2856 0038 C4F20002 		movt	r2, 16384
 2857 003c 9268     		ldr	r2, [r2, #8]
 2858 003e 42F40002 		orr	r2, r2, #8388608
 2859 0042 9A60     		str	r2, [r3, #8]
 2860 0044 0BE0     		b	.L109
 2861              	.L108:
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2862              		.loc 1 1828 0
 2863 0046 4FF42053 		mov	r3, #10240
 2864 004a C4F20003 		movt	r3, 16384
 2865 004e 4FF42052 		mov	r2, #10240
 2866 0052 C4F20002 		movt	r2, 16384
 2867 0056 9268     		ldr	r2, [r2, #8]
 2868 0058 22F40002 		bic	r2, r2, #8388608
 2869 005c 9A60     		str	r2, [r3, #8]
 2870              	.L109:
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2871              		.loc 1 1832 0
 2872 005e 4FF42053 		mov	r3, #10240
 2873 0062 C4F20003 		movt	r3, 16384
 2874 0066 4FF0FF02 		mov	r2, #255
 2875 006a 5A62     		str	r2, [r3, #36]
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2876              		.loc 1 1833 0
 2877 006c 07F10C07 		add	r7, r7, #12
 2878 0070 BD46     		mov	sp, r7
 2879 0072 80BC     		pop	{r7}
 2880 0074 7047     		bx	lr
 2881              		.cfi_endproc
 2882              	.LFE141:
 2884              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2885              		.align	2
 2886              		.global	RTC_CalibOutputConfig
 2887              		.thumb
 2888              		.thumb_func
 2890              	RTC_CalibOutputConfig:
 2891              	.LFB142:
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2892              		.loc 1 1844 0
 2893              		.cfi_startproc
 2894              		@ args = 0, pretend = 0, frame = 8
 2895              		@ frame_needed = 1, uses_anonymous_args = 0
 2896              		@ link register save eliminated.
 2897 0000 80B4     		push	{r7}
 2898              	.LCFI93:
 2899              		.cfi_def_cfa_offset 4
 2900              		.cfi_offset 7, -4
 2901 0002 83B0     		sub	sp, sp, #12
 2902              	.LCFI94:
 2903              		.cfi_def_cfa_offset 16
 2904 0004 00AF     		add	r7, sp, #0
 2905              	.LCFI95:
 2906              		.cfi_def_cfa_register 7
 2907 0006 7860     		str	r0, [r7, #4]
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2908              		.loc 1 1849 0
 2909 0008 4FF42053 		mov	r3, #10240
 2910 000c C4F20003 		movt	r3, 16384
 2911 0010 4FF0CA02 		mov	r2, #202
 2912 0014 5A62     		str	r2, [r3, #36]
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2913              		.loc 1 1850 0
 2914 0016 4FF42053 		mov	r3, #10240
 2915 001a C4F20003 		movt	r3, 16384
 2916 001e 4FF05302 		mov	r2, #83
 2917 0022 5A62     		str	r2, [r3, #36]
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2918              		.loc 1 1853 0
 2919 0024 4FF42053 		mov	r3, #10240
 2920 0028 C4F20003 		movt	r3, 16384
 2921 002c 4FF42052 		mov	r2, #10240
 2922 0030 C4F20002 		movt	r2, 16384
 2923 0034 9268     		ldr	r2, [r2, #8]
 2924 0036 22F40022 		bic	r2, r2, #524288
 2925 003a 9A60     		str	r2, [r3, #8]
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2926              		.loc 1 1856 0
 2927 003c 4FF42053 		mov	r3, #10240
 2928 0040 C4F20003 		movt	r3, 16384
 2929 0044 4FF42052 		mov	r2, #10240
 2930 0048 C4F20002 		movt	r2, 16384
 2931 004c 9268     		ldr	r2, [r2, #8]
 2932 004e 1146     		mov	r1, r2
 2933 0050 7A68     		ldr	r2, [r7, #4]
 2934 0052 0A43     		orrs	r2, r2, r1
 2935 0054 9A60     		str	r2, [r3, #8]
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2936              		.loc 1 1859 0
 2937 0056 4FF42053 		mov	r3, #10240
 2938 005a C4F20003 		movt	r3, 16384
 2939 005e 4FF0FF02 		mov	r2, #255
 2940 0062 5A62     		str	r2, [r3, #36]
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2941              		.loc 1 1860 0
 2942 0064 07F10C07 		add	r7, r7, #12
 2943 0068 BD46     		mov	sp, r7
 2944 006a 80BC     		pop	{r7}
 2945 006c 7047     		bx	lr
 2946              		.cfi_endproc
 2947              	.LFE142:
 2949 006e 00BF     		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2950              		.align	2
 2951              		.global	RTC_SmoothCalibConfig
 2952              		.thumb
 2953              		.thumb_func
 2955              	RTC_SmoothCalibConfig:
 2956              	.LFB143:
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2957              		.loc 1 1882 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 24
 2960              		@ frame_needed = 1, uses_anonymous_args = 0
 2961              		@ link register save eliminated.
 2962 0000 80B4     		push	{r7}
 2963              	.LCFI96:
 2964              		.cfi_def_cfa_offset 4
 2965              		.cfi_offset 7, -4
 2966 0002 87B0     		sub	sp, sp, #28
 2967              	.LCFI97:
 2968              		.cfi_def_cfa_offset 32
 2969 0004 00AF     		add	r7, sp, #0
 2970              	.LCFI98:
 2971              		.cfi_def_cfa_register 7
 2972 0006 F860     		str	r0, [r7, #12]
 2973 0008 B960     		str	r1, [r7, #8]
 2974 000a 7A60     		str	r2, [r7, #4]
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2975              		.loc 1 1883 0
 2976 000c 4FF00003 		mov	r3, #0
 2977 0010 FB75     		strb	r3, [r7, #23]
1884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2978              		.loc 1 1884 0
 2979 0012 4FF00003 		mov	r3, #0
 2980 0016 3B61     		str	r3, [r7, #16]
1885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2981              		.loc 1 1892 0
 2982 0018 4FF42053 		mov	r3, #10240
 2983 001c C4F20003 		movt	r3, 16384
 2984 0020 4FF0CA02 		mov	r2, #202
 2985 0024 5A62     		str	r2, [r3, #36]
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2986              		.loc 1 1893 0
 2987 0026 4FF42053 		mov	r3, #10240
 2988 002a C4F20003 		movt	r3, 16384
 2989 002e 4FF05302 		mov	r2, #83
 2990 0032 5A62     		str	r2, [r3, #36]
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2991              		.loc 1 1896 0
 2992 0034 4FF42053 		mov	r3, #10240
 2993 0038 C4F20003 		movt	r3, 16384
 2994 003c DB68     		ldr	r3, [r3, #12]
 2995 003e 03F48033 		and	r3, r3, #65536
 2996 0042 002B     		cmp	r3, #0
 2997 0044 11D0     		beq	.L112
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2998              		.loc 1 1899 0
 2999 0046 03E0     		b	.L113
 3000              	.L114:
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 3001              		.loc 1 1901 0
 3002 0048 3B69     		ldr	r3, [r7, #16]
 3003 004a 03F10103 		add	r3, r3, #1
 3004 004e 3B61     		str	r3, [r7, #16]
 3005              	.L113:
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3006              		.loc 1 1899 0 discriminator 1
 3007 0050 4FF42053 		mov	r3, #10240
 3008 0054 C4F20003 		movt	r3, 16384
 3009 0058 DB68     		ldr	r3, [r3, #12]
 3010 005a 03F48033 		and	r3, r3, #65536
 3011 005e 002B     		cmp	r3, #0
 3012 0060 03D0     		beq	.L112
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3013              		.loc 1 1899 0 is_stmt 0 discriminator 2
 3014 0062 3B69     		ldr	r3, [r7, #16]
 3015 0064 B3F5003F 		cmp	r3, #131072
 3016 0068 EED1     		bne	.L114
 3017              	.L112:
1902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3018              		.loc 1 1906 0 is_stmt 1
 3019 006a 4FF42053 		mov	r3, #10240
 3020 006e C4F20003 		movt	r3, 16384
 3021 0072 DB68     		ldr	r3, [r3, #12]
 3022 0074 03F48033 		and	r3, r3, #65536
 3023 0078 002B     		cmp	r3, #0
 3024 007a 0DD1     		bne	.L115
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3025              		.loc 1 1909 0
 3026 007c 4FF42053 		mov	r3, #10240
 3027 0080 C4F20003 		movt	r3, 16384
 3028 0084 F968     		ldr	r1, [r7, #12]
 3029 0086 BA68     		ldr	r2, [r7, #8]
 3030 0088 1143     		orrs	r1, r1, r2
 3031 008a 7A68     		ldr	r2, [r7, #4]
 3032 008c 0A43     		orrs	r2, r2, r1
 3033 008e DA63     		str	r2, [r3, #60]
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3034              		.loc 1 1911 0
 3035 0090 4FF00103 		mov	r3, #1
 3036 0094 FB75     		strb	r3, [r7, #23]
 3037 0096 02E0     		b	.L116
 3038              	.L115:
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3039              		.loc 1 1915 0
 3040 0098 4FF00003 		mov	r3, #0
 3041 009c FB75     		strb	r3, [r7, #23]
 3042              	.L116:
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3043              		.loc 1 1919 0
 3044 009e 4FF42053 		mov	r3, #10240
 3045 00a2 C4F20003 		movt	r3, 16384
 3046 00a6 4FF0FF02 		mov	r2, #255
 3047 00aa 5A62     		str	r2, [r3, #36]
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3048              		.loc 1 1921 0
 3049 00ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3050              		.loc 1 1922 0
 3051 00ae 1846     		mov	r0, r3
 3052 00b0 07F11C07 		add	r7, r7, #28
 3053 00b4 BD46     		mov	sp, r7
 3054 00b6 80BC     		pop	{r7}
 3055 00b8 7047     		bx	lr
 3056              		.cfi_endproc
 3057              	.LFE143:
 3059 00ba 00BF     		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3060              		.align	2
 3061              		.global	RTC_TimeStampCmd
 3062              		.thumb
 3063              		.thumb_func
 3065              	RTC_TimeStampCmd:
 3066              	.LFB144:
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3067              		.loc 1 1956 0
 3068              		.cfi_startproc
 3069              		@ args = 0, pretend = 0, frame = 16
 3070              		@ frame_needed = 1, uses_anonymous_args = 0
 3071              		@ link register save eliminated.
 3072 0000 80B4     		push	{r7}
 3073              	.LCFI99:
 3074              		.cfi_def_cfa_offset 4
 3075              		.cfi_offset 7, -4
 3076 0002 85B0     		sub	sp, sp, #20
 3077              	.LCFI100:
 3078              		.cfi_def_cfa_offset 24
 3079 0004 00AF     		add	r7, sp, #0
 3080              	.LCFI101:
 3081              		.cfi_def_cfa_register 7
 3082 0006 7860     		str	r0, [r7, #4]
 3083 0008 0B46     		mov	r3, r1
 3084 000a FB70     		strb	r3, [r7, #3]
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3085              		.loc 1 1957 0
 3086 000c 4FF00003 		mov	r3, #0
 3087 0010 FB60     		str	r3, [r7, #12]
1958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3088              		.loc 1 1964 0
 3089 0012 4FF42053 		mov	r3, #10240
 3090 0016 C4F20003 		movt	r3, 16384
 3091 001a 9B68     		ldr	r3, [r3, #8]
 3092 001c 23F40063 		bic	r3, r3, #2048
 3093 0020 23F00803 		bic	r3, r3, #8
 3094 0024 FB60     		str	r3, [r7, #12]
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3095              		.loc 1 1967 0
 3096 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3097 0028 002B     		cmp	r3, #0
 3098 002a 06D0     		beq	.L118
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3099              		.loc 1 1969 0
 3100 002c 7A68     		ldr	r2, [r7, #4]
 3101 002e FB68     		ldr	r3, [r7, #12]
 3102 0030 1343     		orrs	r3, r3, r2
 3103 0032 43F40063 		orr	r3, r3, #2048
 3104 0036 FB60     		str	r3, [r7, #12]
 3105 0038 03E0     		b	.L119
 3106              	.L118:
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3107              		.loc 1 1973 0
 3108 003a FA68     		ldr	r2, [r7, #12]
 3109 003c 7B68     		ldr	r3, [r7, #4]
 3110 003e 1343     		orrs	r3, r3, r2
 3111 0040 FB60     		str	r3, [r7, #12]
 3112              	.L119:
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3113              		.loc 1 1977 0
 3114 0042 4FF42053 		mov	r3, #10240
 3115 0046 C4F20003 		movt	r3, 16384
 3116 004a 4FF0CA02 		mov	r2, #202
 3117 004e 5A62     		str	r2, [r3, #36]
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3118              		.loc 1 1978 0
 3119 0050 4FF42053 		mov	r3, #10240
 3120 0054 C4F20003 		movt	r3, 16384
 3121 0058 4FF05302 		mov	r2, #83
 3122 005c 5A62     		str	r2, [r3, #36]
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3123              		.loc 1 1981 0
 3124 005e 4FF42053 		mov	r3, #10240
 3125 0062 C4F20003 		movt	r3, 16384
 3126 0066 FA68     		ldr	r2, [r7, #12]
 3127 0068 9A60     		str	r2, [r3, #8]
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3128              		.loc 1 1984 0
 3129 006a 4FF42053 		mov	r3, #10240
 3130 006e C4F20003 		movt	r3, 16384
 3131 0072 4FF0FF02 		mov	r2, #255
 3132 0076 5A62     		str	r2, [r3, #36]
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3133              		.loc 1 1985 0
 3134 0078 07F11407 		add	r7, r7, #20
 3135 007c BD46     		mov	sp, r7
 3136 007e 80BC     		pop	{r7}
 3137 0080 7047     		bx	lr
 3138              		.cfi_endproc
 3139              	.LFE144:
 3141 0082 00BF     		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3142              		.align	2
 3143              		.global	RTC_GetTimeStamp
 3144              		.thumb
 3145              		.thumb_func
 3147              	RTC_GetTimeStamp:
 3148              	.LFB145:
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3149              		.loc 1 2001 0
 3150              		.cfi_startproc
 3151              		@ args = 0, pretend = 0, frame = 24
 3152              		@ frame_needed = 1, uses_anonymous_args = 0
 3153 0000 80B5     		push	{r7, lr}
 3154              	.LCFI102:
 3155              		.cfi_def_cfa_offset 8
 3156              		.cfi_offset 14, -4
 3157              		.cfi_offset 7, -8
 3158 0002 86B0     		sub	sp, sp, #24
 3159              	.LCFI103:
 3160              		.cfi_def_cfa_offset 32
 3161 0004 00AF     		add	r7, sp, #0
 3162              	.LCFI104:
 3163              		.cfi_def_cfa_register 7
 3164 0006 F860     		str	r0, [r7, #12]
 3165 0008 B960     		str	r1, [r7, #8]
 3166 000a 7A60     		str	r2, [r7, #4]
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3167              		.loc 1 2002 0
 3168 000c 4FF00003 		mov	r3, #0
 3169 0010 7B61     		str	r3, [r7, #20]
 3170 0012 4FF00003 		mov	r3, #0
 3171 0016 3B61     		str	r3, [r7, #16]
2003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3172              		.loc 1 2008 0
 3173 0018 4FF42053 		mov	r3, #10240
 3174 001c C4F20003 		movt	r3, 16384
 3175 0020 1B6B     		ldr	r3, [r3, #48]
 3176 0022 1A46     		mov	r2, r3
 3177 0024 47F67F73 		movw	r3, #32639
 3178 0028 C0F27F03 		movt	r3, 127
 3179 002c 1340     		ands	r3, r3, r2
 3180 002e 7B61     		str	r3, [r7, #20]
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3181              		.loc 1 2009 0
 3182 0030 4FF42053 		mov	r3, #10240
 3183 0034 C4F20003 		movt	r3, 16384
 3184 0038 5B6B     		ldr	r3, [r3, #52]
 3185 003a 23F07F43 		bic	r3, r3, #-16777216
 3186 003e 23F0C003 		bic	r3, r3, #192
 3187 0042 3B61     		str	r3, [r7, #16]
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3188              		.loc 1 2012 0
 3189 0044 7B69     		ldr	r3, [r7, #20]
 3190 0046 03F47C13 		and	r3, r3, #4128768
 3191 004a 4FEA1343 		lsr	r3, r3, #16
 3192 004e DAB2     		uxtb	r2, r3
 3193 0050 BB68     		ldr	r3, [r7, #8]
 3194 0052 1A70     		strb	r2, [r3, #0]
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3195              		.loc 1 2013 0
 3196 0054 7B69     		ldr	r3, [r7, #20]
 3197 0056 03F4FE43 		and	r3, r3, #32512
 3198 005a 4FEA1323 		lsr	r3, r3, #8
 3199 005e DAB2     		uxtb	r2, r3
 3200 0060 BB68     		ldr	r3, [r7, #8]
 3201 0062 5A70     		strb	r2, [r3, #1]
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3202              		.loc 1 2014 0
 3203 0064 7B69     		ldr	r3, [r7, #20]
 3204 0066 DBB2     		uxtb	r3, r3
 3205 0068 03F07F03 		and	r3, r3, #127
 3206 006c DAB2     		uxtb	r2, r3
 3207 006e BB68     		ldr	r3, [r7, #8]
 3208 0070 9A70     		strb	r2, [r3, #2]
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3209              		.loc 1 2015 0
 3210 0072 7B69     		ldr	r3, [r7, #20]
 3211 0074 03F48003 		and	r3, r3, #4194304
 3212 0078 4FEA1343 		lsr	r3, r3, #16
 3213 007c DAB2     		uxtb	r2, r3
 3214 007e BB68     		ldr	r3, [r7, #8]
 3215 0080 DA70     		strb	r2, [r3, #3]
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3216              		.loc 1 2018 0
 3217 0082 7B68     		ldr	r3, [r7, #4]
 3218 0084 4FF00002 		mov	r2, #0
 3219 0088 DA70     		strb	r2, [r3, #3]
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3220              		.loc 1 2019 0
 3221 008a 3B69     		ldr	r3, [r7, #16]
 3222 008c 03F4F853 		and	r3, r3, #7936
 3223 0090 4FEA1323 		lsr	r3, r3, #8
 3224 0094 DAB2     		uxtb	r2, r3
 3225 0096 7B68     		ldr	r3, [r7, #4]
 3226 0098 5A70     		strb	r2, [r3, #1]
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3227              		.loc 1 2020 0
 3228 009a 3B69     		ldr	r3, [r7, #16]
 3229 009c DBB2     		uxtb	r3, r3
 3230 009e 03F03F03 		and	r3, r3, #63
 3231 00a2 DAB2     		uxtb	r2, r3
 3232 00a4 7B68     		ldr	r3, [r7, #4]
 3233 00a6 9A70     		strb	r2, [r3, #2]
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3234              		.loc 1 2021 0
 3235 00a8 3B69     		ldr	r3, [r7, #16]
 3236 00aa 03F46043 		and	r3, r3, #57344
 3237 00ae 4FEA5333 		lsr	r3, r3, #13
 3238 00b2 DAB2     		uxtb	r2, r3
 3239 00b4 7B68     		ldr	r3, [r7, #4]
 3240 00b6 1A70     		strb	r2, [r3, #0]
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3241              		.loc 1 2024 0
 3242 00b8 FB68     		ldr	r3, [r7, #12]
 3243 00ba 002B     		cmp	r3, #0
 3244 00bc 35D1     		bne	.L120
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3245              		.loc 1 2027 0
 3246 00be BB68     		ldr	r3, [r7, #8]
 3247 00c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3248 00c2 1846     		mov	r0, r3
 3249 00c4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3250 00c8 0346     		mov	r3, r0
 3251 00ca 1A46     		mov	r2, r3
 3252 00cc BB68     		ldr	r3, [r7, #8]
 3253 00ce 1A70     		strb	r2, [r3, #0]
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3254              		.loc 1 2028 0
 3255 00d0 BB68     		ldr	r3, [r7, #8]
 3256 00d2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3257 00d4 1846     		mov	r0, r3
 3258 00d6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3259 00da 0346     		mov	r3, r0
 3260 00dc 1A46     		mov	r2, r3
 3261 00de BB68     		ldr	r3, [r7, #8]
 3262 00e0 5A70     		strb	r2, [r3, #1]
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3263              		.loc 1 2029 0
 3264 00e2 BB68     		ldr	r3, [r7, #8]
 3265 00e4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3266 00e6 1846     		mov	r0, r3
 3267 00e8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3268 00ec 0346     		mov	r3, r0
 3269 00ee 1A46     		mov	r2, r3
 3270 00f0 BB68     		ldr	r3, [r7, #8]
 3271 00f2 9A70     		strb	r2, [r3, #2]
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3272              		.loc 1 2032 0
 3273 00f4 7B68     		ldr	r3, [r7, #4]
 3274 00f6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3275 00f8 1846     		mov	r0, r3
 3276 00fa FFF7FEFF 		bl	RTC_Bcd2ToByte
 3277 00fe 0346     		mov	r3, r0
 3278 0100 1A46     		mov	r2, r3
 3279 0102 7B68     		ldr	r3, [r7, #4]
 3280 0104 5A70     		strb	r2, [r3, #1]
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3281              		.loc 1 2033 0
 3282 0106 7B68     		ldr	r3, [r7, #4]
 3283 0108 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3284 010a 1846     		mov	r0, r3
 3285 010c FFF7FEFF 		bl	RTC_Bcd2ToByte
 3286 0110 0346     		mov	r3, r0
 3287 0112 1A46     		mov	r2, r3
 3288 0114 7B68     		ldr	r3, [r7, #4]
 3289 0116 9A70     		strb	r2, [r3, #2]
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3290              		.loc 1 2034 0
 3291 0118 7B68     		ldr	r3, [r7, #4]
 3292 011a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3293 011c 1846     		mov	r0, r3
 3294 011e FFF7FEFF 		bl	RTC_Bcd2ToByte
 3295 0122 0346     		mov	r3, r0
 3296 0124 1A46     		mov	r2, r3
 3297 0126 7B68     		ldr	r3, [r7, #4]
 3298 0128 1A70     		strb	r2, [r3, #0]
 3299              	.L120:
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3300              		.loc 1 2036 0
 3301 012a 07F11807 		add	r7, r7, #24
 3302 012e BD46     		mov	sp, r7
 3303 0130 80BD     		pop	{r7, pc}
 3304              		.cfi_endproc
 3305              	.LFE145:
 3307 0132 00BF     		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3308              		.align	2
 3309              		.global	RTC_GetTimeStampSubSecond
 3310              		.thumb
 3311              		.thumb_func
 3313              	RTC_GetTimeStampSubSecond:
 3314              	.LFB146:
2037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3315              		.loc 1 2044 0
 3316              		.cfi_startproc
 3317              		@ args = 0, pretend = 0, frame = 0
 3318              		@ frame_needed = 1, uses_anonymous_args = 0
 3319              		@ link register save eliminated.
 3320 0000 80B4     		push	{r7}
 3321              	.LCFI105:
 3322              		.cfi_def_cfa_offset 4
 3323              		.cfi_offset 7, -4
 3324 0002 00AF     		add	r7, sp, #0
 3325              	.LCFI106:
 3326              		.cfi_def_cfa_register 7
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3327              		.loc 1 2046 0
 3328 0004 4FF42053 		mov	r3, #10240
 3329 0008 C4F20003 		movt	r3, 16384
 3330 000c 9B6B     		ldr	r3, [r3, #56]
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3331              		.loc 1 2047 0
 3332 000e 1846     		mov	r0, r3
 3333 0010 BD46     		mov	sp, r7
 3334 0012 80BC     		pop	{r7}
 3335 0014 7047     		bx	lr
 3336              		.cfi_endproc
 3337              	.LFE146:
 3339 0016 00BF     		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3340              		.align	2
 3341              		.global	RTC_TamperTriggerConfig
 3342              		.thumb
 3343              		.thumb_func
 3345              	RTC_TamperTriggerConfig:
 3346              	.LFB147:
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3347              		.loc 1 2079 0
 3348              		.cfi_startproc
 3349              		@ args = 0, pretend = 0, frame = 8
 3350              		@ frame_needed = 1, uses_anonymous_args = 0
 3351              		@ link register save eliminated.
 3352 0000 80B4     		push	{r7}
 3353              	.LCFI107:
 3354              		.cfi_def_cfa_offset 4
 3355              		.cfi_offset 7, -4
 3356 0002 83B0     		sub	sp, sp, #12
 3357              	.LCFI108:
 3358              		.cfi_def_cfa_offset 16
 3359 0004 00AF     		add	r7, sp, #0
 3360              	.LCFI109:
 3361              		.cfi_def_cfa_register 7
 3362 0006 7860     		str	r0, [r7, #4]
 3363 0008 3960     		str	r1, [r7, #0]
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3364              		.loc 1 2084 0
 3365 000a 3B68     		ldr	r3, [r7, #0]
 3366 000c 002B     		cmp	r3, #0
 3367 000e 11D1     		bne	.L124
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3368              		.loc 1 2087 0
 3369 0010 4FF42053 		mov	r3, #10240
 3370 0014 C4F20003 		movt	r3, 16384
 3371 0018 4FF42052 		mov	r2, #10240
 3372 001c C4F20002 		movt	r2, 16384
 3373 0020 126C     		ldr	r2, [r2, #64]
 3374 0022 1146     		mov	r1, r2
 3375 0024 7A68     		ldr	r2, [r7, #4]
 3376 0026 4FEA4202 		lsl	r2, r2, #1
 3377 002a 6FEA0202 		mvn	r2, r2
 3378 002e 0A40     		ands	r2, r2, r1
 3379 0030 1A64     		str	r2, [r3, #64]
 3380 0032 0EE0     		b	.L123
 3381              	.L124:
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3382              		.loc 1 2092 0
 3383 0034 4FF42053 		mov	r3, #10240
 3384 0038 C4F20003 		movt	r3, 16384
 3385 003c 4FF42052 		mov	r2, #10240
 3386 0040 C4F20002 		movt	r2, 16384
 3387 0044 126C     		ldr	r2, [r2, #64]
 3388 0046 1146     		mov	r1, r2
 3389 0048 7A68     		ldr	r2, [r7, #4]
 3390 004a 4FEA4202 		lsl	r2, r2, #1
 3391 004e 0A43     		orrs	r2, r2, r1
 3392 0050 1A64     		str	r2, [r3, #64]
 3393              	.L123:
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3394              		.loc 1 2094 0
 3395 0052 07F10C07 		add	r7, r7, #12
 3396 0056 BD46     		mov	sp, r7
 3397 0058 80BC     		pop	{r7}
 3398 005a 7047     		bx	lr
 3399              		.cfi_endproc
 3400              	.LFE147:
 3402              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3403              		.align	2
 3404              		.global	RTC_TamperCmd
 3405              		.thumb
 3406              		.thumb_func
 3408              	RTC_TamperCmd:
 3409              	.LFB148:
2095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3410              		.loc 1 2105 0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 8
 3413              		@ frame_needed = 1, uses_anonymous_args = 0
 3414              		@ link register save eliminated.
 3415 0000 80B4     		push	{r7}
 3416              	.LCFI110:
 3417              		.cfi_def_cfa_offset 4
 3418              		.cfi_offset 7, -4
 3419 0002 83B0     		sub	sp, sp, #12
 3420              	.LCFI111:
 3421              		.cfi_def_cfa_offset 16
 3422 0004 00AF     		add	r7, sp, #0
 3423              	.LCFI112:
 3424              		.cfi_def_cfa_register 7
 3425 0006 7860     		str	r0, [r7, #4]
 3426 0008 0B46     		mov	r3, r1
 3427 000a FB70     		strb	r3, [r7, #3]
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3428              		.loc 1 2110 0
 3429 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3430 000e 002B     		cmp	r3, #0
 3431 0010 0DD0     		beq	.L127
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3432              		.loc 1 2113 0
 3433 0012 4FF42053 		mov	r3, #10240
 3434 0016 C4F20003 		movt	r3, 16384
 3435 001a 4FF42052 		mov	r2, #10240
 3436 001e C4F20002 		movt	r2, 16384
 3437 0022 126C     		ldr	r2, [r2, #64]
 3438 0024 1146     		mov	r1, r2
 3439 0026 7A68     		ldr	r2, [r7, #4]
 3440 0028 0A43     		orrs	r2, r2, r1
 3441 002a 1A64     		str	r2, [r3, #64]
 3442 002c 0EE0     		b	.L126
 3443              	.L127:
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3444              		.loc 1 2118 0
 3445 002e 4FF42053 		mov	r3, #10240
 3446 0032 C4F20003 		movt	r3, 16384
 3447 0036 4FF42052 		mov	r2, #10240
 3448 003a C4F20002 		movt	r2, 16384
 3449 003e 126C     		ldr	r2, [r2, #64]
 3450 0040 1146     		mov	r1, r2
 3451 0042 7A68     		ldr	r2, [r7, #4]
 3452 0044 6FEA0202 		mvn	r2, r2
 3453 0048 0A40     		ands	r2, r2, r1
 3454 004a 1A64     		str	r2, [r3, #64]
 3455              	.L126:
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3456              		.loc 1 2120 0
 3457 004c 07F10C07 		add	r7, r7, #12
 3458 0050 BD46     		mov	sp, r7
 3459 0052 80BC     		pop	{r7}
 3460 0054 7047     		bx	lr
 3461              		.cfi_endproc
 3462              	.LFE148:
 3464 0056 00BF     		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3465              		.align	2
 3466              		.global	RTC_TamperFilterConfig
 3467              		.thumb
 3468              		.thumb_func
 3470              	RTC_TamperFilterConfig:
 3471              	.LFB149:
2121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3472              		.loc 1 2136 0
 3473              		.cfi_startproc
 3474              		@ args = 0, pretend = 0, frame = 8
 3475              		@ frame_needed = 1, uses_anonymous_args = 0
 3476              		@ link register save eliminated.
 3477 0000 80B4     		push	{r7}
 3478              	.LCFI113:
 3479              		.cfi_def_cfa_offset 4
 3480              		.cfi_offset 7, -4
 3481 0002 83B0     		sub	sp, sp, #12
 3482              	.LCFI114:
 3483              		.cfi_def_cfa_offset 16
 3484 0004 00AF     		add	r7, sp, #0
 3485              	.LCFI115:
 3486              		.cfi_def_cfa_register 7
 3487 0006 7860     		str	r0, [r7, #4]
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3488              		.loc 1 2141 0
 3489 0008 4FF42053 		mov	r3, #10240
 3490 000c C4F20003 		movt	r3, 16384
 3491 0010 4FF42052 		mov	r2, #10240
 3492 0014 C4F20002 		movt	r2, 16384
 3493 0018 126C     		ldr	r2, [r2, #64]
 3494 001a 22F4C052 		bic	r2, r2, #6144
 3495 001e 1A64     		str	r2, [r3, #64]
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3496              		.loc 1 2144 0
 3497 0020 4FF42053 		mov	r3, #10240
 3498 0024 C4F20003 		movt	r3, 16384
 3499 0028 4FF42052 		mov	r2, #10240
 3500 002c C4F20002 		movt	r2, 16384
 3501 0030 126C     		ldr	r2, [r2, #64]
 3502 0032 1146     		mov	r1, r2
 3503 0034 7A68     		ldr	r2, [r7, #4]
 3504 0036 0A43     		orrs	r2, r2, r1
 3505 0038 1A64     		str	r2, [r3, #64]
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3506              		.loc 1 2145 0
 3507 003a 07F10C07 		add	r7, r7, #12
 3508 003e BD46     		mov	sp, r7
 3509 0040 80BC     		pop	{r7}
 3510 0042 7047     		bx	lr
 3511              		.cfi_endproc
 3512              	.LFE149:
 3514              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3515              		.align	2
 3516              		.global	RTC_TamperSamplingFreqConfig
 3517              		.thumb
 3518              		.thumb_func
 3520              	RTC_TamperSamplingFreqConfig:
 3521              	.LFB150:
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3522              		.loc 1 2170 0
 3523              		.cfi_startproc
 3524              		@ args = 0, pretend = 0, frame = 8
 3525              		@ frame_needed = 1, uses_anonymous_args = 0
 3526              		@ link register save eliminated.
 3527 0000 80B4     		push	{r7}
 3528              	.LCFI116:
 3529              		.cfi_def_cfa_offset 4
 3530              		.cfi_offset 7, -4
 3531 0002 83B0     		sub	sp, sp, #12
 3532              	.LCFI117:
 3533              		.cfi_def_cfa_offset 16
 3534 0004 00AF     		add	r7, sp, #0
 3535              	.LCFI118:
 3536              		.cfi_def_cfa_register 7
 3537 0006 7860     		str	r0, [r7, #4]
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3538              		.loc 1 2175 0
 3539 0008 4FF42053 		mov	r3, #10240
 3540 000c C4F20003 		movt	r3, 16384
 3541 0010 4FF42052 		mov	r2, #10240
 3542 0014 C4F20002 		movt	r2, 16384
 3543 0018 126C     		ldr	r2, [r2, #64]
 3544 001a 22F4E062 		bic	r2, r2, #1792
 3545 001e 1A64     		str	r2, [r3, #64]
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3546              		.loc 1 2178 0
 3547 0020 4FF42053 		mov	r3, #10240
 3548 0024 C4F20003 		movt	r3, 16384
 3549 0028 4FF42052 		mov	r2, #10240
 3550 002c C4F20002 		movt	r2, 16384
 3551 0030 126C     		ldr	r2, [r2, #64]
 3552 0032 1146     		mov	r1, r2
 3553 0034 7A68     		ldr	r2, [r7, #4]
 3554 0036 0A43     		orrs	r2, r2, r1
 3555 0038 1A64     		str	r2, [r3, #64]
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3556              		.loc 1 2179 0
 3557 003a 07F10C07 		add	r7, r7, #12
 3558 003e BD46     		mov	sp, r7
 3559 0040 80BC     		pop	{r7}
 3560 0042 7047     		bx	lr
 3561              		.cfi_endproc
 3562              	.LFE150:
 3564              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3565              		.align	2
 3566              		.global	RTC_TamperPinsPrechargeDuration
 3567              		.thumb
 3568              		.thumb_func
 3570              	RTC_TamperPinsPrechargeDuration:
 3571              	.LFB151:
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3572              		.loc 1 2193 0
 3573              		.cfi_startproc
 3574              		@ args = 0, pretend = 0, frame = 8
 3575              		@ frame_needed = 1, uses_anonymous_args = 0
 3576              		@ link register save eliminated.
 3577 0000 80B4     		push	{r7}
 3578              	.LCFI119:
 3579              		.cfi_def_cfa_offset 4
 3580              		.cfi_offset 7, -4
 3581 0002 83B0     		sub	sp, sp, #12
 3582              	.LCFI120:
 3583              		.cfi_def_cfa_offset 16
 3584 0004 00AF     		add	r7, sp, #0
 3585              	.LCFI121:
 3586              		.cfi_def_cfa_register 7
 3587 0006 7860     		str	r0, [r7, #4]
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3588              		.loc 1 2198 0
 3589 0008 4FF42053 		mov	r3, #10240
 3590 000c C4F20003 		movt	r3, 16384
 3591 0010 4FF42052 		mov	r2, #10240
 3592 0014 C4F20002 		movt	r2, 16384
 3593 0018 126C     		ldr	r2, [r2, #64]
 3594 001a 22F4C042 		bic	r2, r2, #24576
 3595 001e 1A64     		str	r2, [r3, #64]
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3596              		.loc 1 2201 0
 3597 0020 4FF42053 		mov	r3, #10240
 3598 0024 C4F20003 		movt	r3, 16384
 3599 0028 4FF42052 		mov	r2, #10240
 3600 002c C4F20002 		movt	r2, 16384
 3601 0030 126C     		ldr	r2, [r2, #64]
 3602 0032 1146     		mov	r1, r2
 3603 0034 7A68     		ldr	r2, [r7, #4]
 3604 0036 0A43     		orrs	r2, r2, r1
 3605 0038 1A64     		str	r2, [r3, #64]
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3606              		.loc 1 2202 0
 3607 003a 07F10C07 		add	r7, r7, #12
 3608 003e BD46     		mov	sp, r7
 3609 0040 80BC     		pop	{r7}
 3610 0042 7047     		bx	lr
 3611              		.cfi_endproc
 3612              	.LFE151:
 3614              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3615              		.align	2
 3616              		.global	RTC_TimeStampOnTamperDetectionCmd
 3617              		.thumb
 3618              		.thumb_func
 3620              	RTC_TimeStampOnTamperDetectionCmd:
 3621              	.LFB152:
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3622              		.loc 1 2213 0
 3623              		.cfi_startproc
 3624              		@ args = 0, pretend = 0, frame = 8
 3625              		@ frame_needed = 1, uses_anonymous_args = 0
 3626              		@ link register save eliminated.
 3627 0000 80B4     		push	{r7}
 3628              	.LCFI122:
 3629              		.cfi_def_cfa_offset 4
 3630              		.cfi_offset 7, -4
 3631 0002 83B0     		sub	sp, sp, #12
 3632              	.LCFI123:
 3633              		.cfi_def_cfa_offset 16
 3634 0004 00AF     		add	r7, sp, #0
 3635              	.LCFI124:
 3636              		.cfi_def_cfa_register 7
 3637 0006 0346     		mov	r3, r0
 3638 0008 FB71     		strb	r3, [r7, #7]
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3639              		.loc 1 2217 0
 3640 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3641 000c 002B     		cmp	r3, #0
 3642 000e 0CD0     		beq	.L133
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3643              		.loc 1 2220 0
 3644 0010 4FF42053 		mov	r3, #10240
 3645 0014 C4F20003 		movt	r3, 16384
 3646 0018 4FF42052 		mov	r2, #10240
 3647 001c C4F20002 		movt	r2, 16384
 3648 0020 126C     		ldr	r2, [r2, #64]
 3649 0022 42F08002 		orr	r2, r2, #128
 3650 0026 1A64     		str	r2, [r3, #64]
 3651 0028 0BE0     		b	.L132
 3652              	.L133:
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3653              		.loc 1 2225 0
 3654 002a 4FF42053 		mov	r3, #10240
 3655 002e C4F20003 		movt	r3, 16384
 3656 0032 4FF42052 		mov	r2, #10240
 3657 0036 C4F20002 		movt	r2, 16384
 3658 003a 126C     		ldr	r2, [r2, #64]
 3659 003c 22F08002 		bic	r2, r2, #128
 3660 0040 1A64     		str	r2, [r3, #64]
 3661              	.L132:
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3662              		.loc 1 2227 0
 3663 0042 07F10C07 		add	r7, r7, #12
 3664 0046 BD46     		mov	sp, r7
 3665 0048 80BC     		pop	{r7}
 3666 004a 7047     		bx	lr
 3667              		.cfi_endproc
 3668              	.LFE152:
 3670              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3671              		.align	2
 3672              		.global	RTC_TamperPullUpCmd
 3673              		.thumb
 3674              		.thumb_func
 3676              	RTC_TamperPullUpCmd:
 3677              	.LFB153:
2228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3678              		.loc 1 2236 0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 8
 3681              		@ frame_needed = 1, uses_anonymous_args = 0
 3682              		@ link register save eliminated.
 3683 0000 80B4     		push	{r7}
 3684              	.LCFI125:
 3685              		.cfi_def_cfa_offset 4
 3686              		.cfi_offset 7, -4
 3687 0002 83B0     		sub	sp, sp, #12
 3688              	.LCFI126:
 3689              		.cfi_def_cfa_offset 16
 3690 0004 00AF     		add	r7, sp, #0
 3691              	.LCFI127:
 3692              		.cfi_def_cfa_register 7
 3693 0006 0346     		mov	r3, r0
 3694 0008 FB71     		strb	r3, [r7, #7]
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3695              		.loc 1 2240 0
 3696 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3697 000c 002B     		cmp	r3, #0
 3698 000e 0CD0     		beq	.L136
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3699              		.loc 1 2243 0
 3700 0010 4FF42053 		mov	r3, #10240
 3701 0014 C4F20003 		movt	r3, 16384
 3702 0018 4FF42052 		mov	r2, #10240
 3703 001c C4F20002 		movt	r2, 16384
 3704 0020 126C     		ldr	r2, [r2, #64]
 3705 0022 22F40042 		bic	r2, r2, #32768
 3706 0026 1A64     		str	r2, [r3, #64]
 3707 0028 0BE0     		b	.L135
 3708              	.L136:
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3709              		.loc 1 2248 0
 3710 002a 4FF42053 		mov	r3, #10240
 3711 002e C4F20003 		movt	r3, 16384
 3712 0032 4FF42052 		mov	r2, #10240
 3713 0036 C4F20002 		movt	r2, 16384
 3714 003a 126C     		ldr	r2, [r2, #64]
 3715 003c 42F40042 		orr	r2, r2, #32768
 3716 0040 1A64     		str	r2, [r3, #64]
 3717              	.L135:
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3718              		.loc 1 2250 0
 3719 0042 07F10C07 		add	r7, r7, #12
 3720 0046 BD46     		mov	sp, r7
 3721 0048 80BC     		pop	{r7}
 3722 004a 7047     		bx	lr
 3723              		.cfi_endproc
 3724              	.LFE153:
 3726              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3727              		.align	2
 3728              		.global	RTC_WriteBackupRegister
 3729              		.thumb
 3730              		.thumb_func
 3732              	RTC_WriteBackupRegister:
 3733              	.LFB154:
2251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3734              		.loc 1 2277 0
 3735              		.cfi_startproc
 3736              		@ args = 0, pretend = 0, frame = 16
 3737              		@ frame_needed = 1, uses_anonymous_args = 0
 3738              		@ link register save eliminated.
 3739 0000 80B4     		push	{r7}
 3740              	.LCFI128:
 3741              		.cfi_def_cfa_offset 4
 3742              		.cfi_offset 7, -4
 3743 0002 85B0     		sub	sp, sp, #20
 3744              	.LCFI129:
 3745              		.cfi_def_cfa_offset 24
 3746 0004 00AF     		add	r7, sp, #0
 3747              	.LCFI130:
 3748              		.cfi_def_cfa_register 7
 3749 0006 7860     		str	r0, [r7, #4]
 3750 0008 3960     		str	r1, [r7, #0]
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3751              		.loc 1 2278 0
 3752 000a 4FF00003 		mov	r3, #0
 3753 000e FB60     		str	r3, [r7, #12]
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3754              		.loc 1 2283 0
 3755 0010 42F65003 		movw	r3, #10320
 3756 0014 C4F20003 		movt	r3, 16384
 3757 0018 FB60     		str	r3, [r7, #12]
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3758              		.loc 1 2284 0
 3759 001a 7B68     		ldr	r3, [r7, #4]
 3760 001c 4FEA8302 		lsl	r2, r3, #2
 3761 0020 FB68     		ldr	r3, [r7, #12]
 3762 0022 D318     		adds	r3, r2, r3
 3763 0024 FB60     		str	r3, [r7, #12]
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3764              		.loc 1 2287 0
 3765 0026 FB68     		ldr	r3, [r7, #12]
 3766 0028 3A68     		ldr	r2, [r7, #0]
 3767 002a 1A60     		str	r2, [r3, #0]
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3768              		.loc 1 2288 0
 3769 002c 07F11407 		add	r7, r7, #20
 3770 0030 BD46     		mov	sp, r7
 3771 0032 80BC     		pop	{r7}
 3772 0034 7047     		bx	lr
 3773              		.cfi_endproc
 3774              	.LFE154:
 3776 0036 00BF     		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3777              		.align	2
 3778              		.global	RTC_ReadBackupRegister
 3779              		.thumb
 3780              		.thumb_func
 3782              	RTC_ReadBackupRegister:
 3783              	.LFB155:
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3784              		.loc 1 2298 0
 3785              		.cfi_startproc
 3786              		@ args = 0, pretend = 0, frame = 16
 3787              		@ frame_needed = 1, uses_anonymous_args = 0
 3788              		@ link register save eliminated.
 3789 0000 80B4     		push	{r7}
 3790              	.LCFI131:
 3791              		.cfi_def_cfa_offset 4
 3792              		.cfi_offset 7, -4
 3793 0002 85B0     		sub	sp, sp, #20
 3794              	.LCFI132:
 3795              		.cfi_def_cfa_offset 24
 3796 0004 00AF     		add	r7, sp, #0
 3797              	.LCFI133:
 3798              		.cfi_def_cfa_register 7
 3799 0006 7860     		str	r0, [r7, #4]
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3800              		.loc 1 2299 0
 3801 0008 4FF00003 		mov	r3, #0
 3802 000c FB60     		str	r3, [r7, #12]
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3803              		.loc 1 2304 0
 3804 000e 42F65003 		movw	r3, #10320
 3805 0012 C4F20003 		movt	r3, 16384
 3806 0016 FB60     		str	r3, [r7, #12]
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3807              		.loc 1 2305 0
 3808 0018 7B68     		ldr	r3, [r7, #4]
 3809 001a 4FEA8302 		lsl	r2, r3, #2
 3810 001e FB68     		ldr	r3, [r7, #12]
 3811 0020 D318     		adds	r3, r2, r3
 3812 0022 FB60     		str	r3, [r7, #12]
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3813              		.loc 1 2308 0
 3814 0024 FB68     		ldr	r3, [r7, #12]
 3815 0026 1B68     		ldr	r3, [r3, #0]
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3816              		.loc 1 2309 0
 3817 0028 1846     		mov	r0, r3
 3818 002a 07F11407 		add	r7, r7, #20
 3819 002e BD46     		mov	sp, r7
 3820 0030 80BC     		pop	{r7}
 3821 0032 7047     		bx	lr
 3822              		.cfi_endproc
 3823              	.LFE155:
 3825              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3826              		.align	2
 3827              		.global	RTC_TamperPinSelection
 3828              		.thumb
 3829              		.thumb_func
 3831              	RTC_TamperPinSelection:
 3832              	.LFB156:
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3833              		.loc 1 2338 0
 3834              		.cfi_startproc
 3835              		@ args = 0, pretend = 0, frame = 8
 3836              		@ frame_needed = 1, uses_anonymous_args = 0
 3837              		@ link register save eliminated.
 3838 0000 80B4     		push	{r7}
 3839              	.LCFI134:
 3840              		.cfi_def_cfa_offset 4
 3841              		.cfi_offset 7, -4
 3842 0002 83B0     		sub	sp, sp, #12
 3843              	.LCFI135:
 3844              		.cfi_def_cfa_offset 16
 3845 0004 00AF     		add	r7, sp, #0
 3846              	.LCFI136:
 3847              		.cfi_def_cfa_register 7
 3848 0006 7860     		str	r0, [r7, #4]
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3849              		.loc 1 2342 0
 3850 0008 4FF42053 		mov	r3, #10240
 3851 000c C4F20003 		movt	r3, 16384
 3852 0010 4FF42052 		mov	r2, #10240
 3853 0014 C4F20002 		movt	r2, 16384
 3854 0018 126C     		ldr	r2, [r2, #64]
 3855 001a 22F48032 		bic	r2, r2, #65536
 3856 001e 1A64     		str	r2, [r3, #64]
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3857              		.loc 1 2343 0
 3858 0020 4FF42053 		mov	r3, #10240
 3859 0024 C4F20003 		movt	r3, 16384
 3860 0028 4FF42052 		mov	r2, #10240
 3861 002c C4F20002 		movt	r2, 16384
 3862 0030 126C     		ldr	r2, [r2, #64]
 3863 0032 1146     		mov	r1, r2
 3864 0034 7A68     		ldr	r2, [r7, #4]
 3865 0036 0A43     		orrs	r2, r2, r1
 3866 0038 1A64     		str	r2, [r3, #64]
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3867              		.loc 1 2344 0
 3868 003a 07F10C07 		add	r7, r7, #12
 3869 003e BD46     		mov	sp, r7
 3870 0040 80BC     		pop	{r7}
 3871 0042 7047     		bx	lr
 3872              		.cfi_endproc
 3873              	.LFE156:
 3875              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3876              		.align	2
 3877              		.global	RTC_TimeStampPinSelection
 3878              		.thumb
 3879              		.thumb_func
 3881              	RTC_TimeStampPinSelection:
 3882              	.LFB157:
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3883              		.loc 1 2355 0
 3884              		.cfi_startproc
 3885              		@ args = 0, pretend = 0, frame = 8
 3886              		@ frame_needed = 1, uses_anonymous_args = 0
 3887              		@ link register save eliminated.
 3888 0000 80B4     		push	{r7}
 3889              	.LCFI137:
 3890              		.cfi_def_cfa_offset 4
 3891              		.cfi_offset 7, -4
 3892 0002 83B0     		sub	sp, sp, #12
 3893              	.LCFI138:
 3894              		.cfi_def_cfa_offset 16
 3895 0004 00AF     		add	r7, sp, #0
 3896              	.LCFI139:
 3897              		.cfi_def_cfa_register 7
 3898 0006 7860     		str	r0, [r7, #4]
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3899              		.loc 1 2359 0
 3900 0008 4FF42053 		mov	r3, #10240
 3901 000c C4F20003 		movt	r3, 16384
 3902 0010 4FF42052 		mov	r2, #10240
 3903 0014 C4F20002 		movt	r2, 16384
 3904 0018 126C     		ldr	r2, [r2, #64]
 3905 001a 22F40032 		bic	r2, r2, #131072
 3906 001e 1A64     		str	r2, [r3, #64]
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3907              		.loc 1 2360 0
 3908 0020 4FF42053 		mov	r3, #10240
 3909 0024 C4F20003 		movt	r3, 16384
 3910 0028 4FF42052 		mov	r2, #10240
 3911 002c C4F20002 		movt	r2, 16384
 3912 0030 126C     		ldr	r2, [r2, #64]
 3913 0032 1146     		mov	r1, r2
 3914 0034 7A68     		ldr	r2, [r7, #4]
 3915 0036 0A43     		orrs	r2, r2, r1
 3916 0038 1A64     		str	r2, [r3, #64]
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3917              		.loc 1 2361 0
 3918 003a 07F10C07 		add	r7, r7, #12
 3919 003e BD46     		mov	sp, r7
 3920 0040 80BC     		pop	{r7}
 3921 0042 7047     		bx	lr
 3922              		.cfi_endproc
 3923              	.LFE157:
 3925              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3926              		.align	2
 3927              		.global	RTC_OutputTypeConfig
 3928              		.thumb
 3929              		.thumb_func
 3931              	RTC_OutputTypeConfig:
 3932              	.LFB158:
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3933              		.loc 1 2374 0
 3934              		.cfi_startproc
 3935              		@ args = 0, pretend = 0, frame = 8
 3936              		@ frame_needed = 1, uses_anonymous_args = 0
 3937              		@ link register save eliminated.
 3938 0000 80B4     		push	{r7}
 3939              	.LCFI140:
 3940              		.cfi_def_cfa_offset 4
 3941              		.cfi_offset 7, -4
 3942 0002 83B0     		sub	sp, sp, #12
 3943              	.LCFI141:
 3944              		.cfi_def_cfa_offset 16
 3945 0004 00AF     		add	r7, sp, #0
 3946              	.LCFI142:
 3947              		.cfi_def_cfa_register 7
 3948 0006 7860     		str	r0, [r7, #4]
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3949              		.loc 1 2378 0
 3950 0008 4FF42053 		mov	r3, #10240
 3951 000c C4F20003 		movt	r3, 16384
 3952 0010 4FF42052 		mov	r2, #10240
 3953 0014 C4F20002 		movt	r2, 16384
 3954 0018 126C     		ldr	r2, [r2, #64]
 3955 001a 22F48022 		bic	r2, r2, #262144
 3956 001e 1A64     		str	r2, [r3, #64]
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3957              		.loc 1 2379 0
 3958 0020 4FF42053 		mov	r3, #10240
 3959 0024 C4F20003 		movt	r3, 16384
 3960 0028 4FF42052 		mov	r2, #10240
 3961 002c C4F20002 		movt	r2, 16384
 3962 0030 126C     		ldr	r2, [r2, #64]
 3963 0032 1146     		mov	r1, r2
 3964 0034 7A68     		ldr	r2, [r7, #4]
 3965 0036 0A43     		orrs	r2, r2, r1
 3966 0038 1A64     		str	r2, [r3, #64]
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3967              		.loc 1 2380 0
 3968 003a 07F10C07 		add	r7, r7, #12
 3969 003e BD46     		mov	sp, r7
 3970 0040 80BC     		pop	{r7}
 3971 0042 7047     		bx	lr
 3972              		.cfi_endproc
 3973              	.LFE158:
 3975              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3976              		.align	2
 3977              		.global	RTC_SynchroShiftConfig
 3978              		.thumb
 3979              		.thumb_func
 3981              	RTC_SynchroShiftConfig:
 3982              	.LFB159:
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3983              		.loc 1 2412 0
 3984              		.cfi_startproc
 3985              		@ args = 0, pretend = 0, frame = 16
 3986              		@ frame_needed = 1, uses_anonymous_args = 0
 3987 0000 80B5     		push	{r7, lr}
 3988              	.LCFI143:
 3989              		.cfi_def_cfa_offset 8
 3990              		.cfi_offset 14, -4
 3991              		.cfi_offset 7, -8
 3992 0002 84B0     		sub	sp, sp, #16
 3993              	.LCFI144:
 3994              		.cfi_def_cfa_offset 24
 3995 0004 00AF     		add	r7, sp, #0
 3996              	.LCFI145:
 3997              		.cfi_def_cfa_register 7
 3998 0006 7860     		str	r0, [r7, #4]
 3999 0008 3960     		str	r1, [r7, #0]
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 4000              		.loc 1 2413 0
 4001 000a 4FF00003 		mov	r3, #0
 4002 000e FB73     		strb	r3, [r7, #15]
2414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 4003              		.loc 1 2414 0
 4004 0010 4FF00003 		mov	r3, #0
 4005 0014 BB60     		str	r3, [r7, #8]
2415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4006              		.loc 1 2421 0
 4007 0016 4FF42053 		mov	r3, #10240
 4008 001a C4F20003 		movt	r3, 16384
 4009 001e 4FF0CA02 		mov	r2, #202
 4010 0022 5A62     		str	r2, [r3, #36]
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4011              		.loc 1 2422 0
 4012 0024 4FF42053 		mov	r3, #10240
 4013 0028 C4F20003 		movt	r3, 16384
 4014 002c 4FF05302 		mov	r2, #83
 4015 0030 5A62     		str	r2, [r3, #36]
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 4016              		.loc 1 2425 0
 4017 0032 4FF42053 		mov	r3, #10240
 4018 0036 C4F20003 		movt	r3, 16384
 4019 003a DB68     		ldr	r3, [r3, #12]
 4020 003c 03F00803 		and	r3, r3, #8
 4021 0040 002B     		cmp	r3, #0
 4022 0042 11D0     		beq	.L144
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4023              		.loc 1 2428 0
 4024 0044 03E0     		b	.L145
 4025              	.L146:
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 4026              		.loc 1 2430 0
 4027 0046 BB68     		ldr	r3, [r7, #8]
 4028 0048 03F10103 		add	r3, r3, #1
 4029 004c BB60     		str	r3, [r7, #8]
 4030              	.L145:
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4031              		.loc 1 2428 0 discriminator 1
 4032 004e 4FF42053 		mov	r3, #10240
 4033 0052 C4F20003 		movt	r3, 16384
 4034 0056 DB68     		ldr	r3, [r3, #12]
 4035 0058 03F00803 		and	r3, r3, #8
 4036 005c 002B     		cmp	r3, #0
 4037 005e 03D0     		beq	.L144
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4038              		.loc 1 2428 0 is_stmt 0 discriminator 2
 4039 0060 BB68     		ldr	r3, [r7, #8]
 4040 0062 B3F5805F 		cmp	r3, #4096
 4041 0066 EED1     		bne	.L146
 4042              	.L144:
2431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4043              		.loc 1 2435 0 is_stmt 1
 4044 0068 4FF42053 		mov	r3, #10240
 4045 006c C4F20003 		movt	r3, 16384
 4046 0070 DB68     		ldr	r3, [r3, #12]
 4047 0072 03F00803 		and	r3, r3, #8
 4048 0076 002B     		cmp	r3, #0
 4049 0078 21D1     		bne	.L147
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4050              		.loc 1 2438 0
 4051 007a 4FF42053 		mov	r3, #10240
 4052 007e C4F20003 		movt	r3, 16384
 4053 0082 9B68     		ldr	r3, [r3, #8]
 4054 0084 03F01003 		and	r3, r3, #16
 4055 0088 002B     		cmp	r3, #0
 4056 008a 14D1     		bne	.L148
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4057              		.loc 1 2441 0
 4058 008c 4FF42053 		mov	r3, #10240
 4059 0090 C4F20003 		movt	r3, 16384
 4060 0094 3968     		ldr	r1, [r7, #0]
 4061 0096 7A68     		ldr	r2, [r7, #4]
 4062 0098 0A43     		orrs	r2, r2, r1
 4063 009a DA62     		str	r2, [r3, #44]
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4064              		.loc 1 2443 0
 4065 009c FFF7FEFF 		bl	RTC_WaitForSynchro
 4066 00a0 0346     		mov	r3, r0
 4067 00a2 002B     		cmp	r3, #0
 4068 00a4 03D1     		bne	.L149
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4069              		.loc 1 2445 0
 4070 00a6 4FF00003 		mov	r3, #0
 4071 00aa FB73     		strb	r3, [r7, #15]
 4072 00ac 0AE0     		b	.L150
 4073              	.L149:
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4074              		.loc 1 2449 0
 4075 00ae 4FF00103 		mov	r3, #1
 4076 00b2 FB73     		strb	r3, [r7, #15]
 4077 00b4 06E0     		b	.L150
 4078              	.L148:
2450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4079              		.loc 1 2454 0
 4080 00b6 4FF00003 		mov	r3, #0
 4081 00ba FB73     		strb	r3, [r7, #15]
 4082 00bc 02E0     		b	.L150
 4083              	.L147:
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4084              		.loc 1 2459 0
 4085 00be 4FF00003 		mov	r3, #0
 4086 00c2 FB73     		strb	r3, [r7, #15]
 4087              	.L150:
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4088              		.loc 1 2463 0
 4089 00c4 4FF42053 		mov	r3, #10240
 4090 00c8 C4F20003 		movt	r3, 16384
 4091 00cc 4FF0FF02 		mov	r2, #255
 4092 00d0 5A62     		str	r2, [r3, #36]
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4093              		.loc 1 2465 0
 4094 00d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4095              		.loc 1 2466 0
 4096 00d4 1846     		mov	r0, r3
 4097 00d6 07F11007 		add	r7, r7, #16
 4098 00da BD46     		mov	sp, r7
 4099 00dc 80BD     		pop	{r7, pc}
 4100              		.cfi_endproc
 4101              	.LFE159:
 4103 00de 00BF     		.section	.text.RTC_ITConfig,"ax",%progbits
 4104              		.align	2
 4105              		.global	RTC_ITConfig
 4106              		.thumb
 4107              		.thumb_func
 4109              	RTC_ITConfig:
 4110              	.LFB160:
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4111              		.loc 1 2531 0
 4112              		.cfi_startproc
 4113              		@ args = 0, pretend = 0, frame = 8
 4114              		@ frame_needed = 1, uses_anonymous_args = 0
 4115              		@ link register save eliminated.
 4116 0000 80B4     		push	{r7}
 4117              	.LCFI146:
 4118              		.cfi_def_cfa_offset 4
 4119              		.cfi_offset 7, -4
 4120 0002 83B0     		sub	sp, sp, #12
 4121              	.LCFI147:
 4122              		.cfi_def_cfa_offset 16
 4123 0004 00AF     		add	r7, sp, #0
 4124              	.LCFI148:
 4125              		.cfi_def_cfa_register 7
 4126 0006 7860     		str	r0, [r7, #4]
 4127 0008 0B46     		mov	r3, r1
 4128 000a FB70     		strb	r3, [r7, #3]
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4129              		.loc 1 2537 0
 4130 000c 4FF42053 		mov	r3, #10240
 4131 0010 C4F20003 		movt	r3, 16384
 4132 0014 4FF0CA02 		mov	r2, #202
 4133 0018 5A62     		str	r2, [r3, #36]
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4134              		.loc 1 2538 0
 4135 001a 4FF42053 		mov	r3, #10240
 4136 001e C4F20003 		movt	r3, 16384
 4137 0022 4FF05302 		mov	r2, #83
 4138 0026 5A62     		str	r2, [r3, #36]
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4139              		.loc 1 2540 0
 4140 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4141 002a 002B     		cmp	r3, #0
 4142 002c 1ED0     		beq	.L152
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4143              		.loc 1 2543 0
 4144 002e 4FF42053 		mov	r3, #10240
 4145 0032 C4F20003 		movt	r3, 16384
 4146 0036 4FF42052 		mov	r2, #10240
 4147 003a C4F20002 		movt	r2, 16384
 4148 003e 9268     		ldr	r2, [r2, #8]
 4149 0040 1146     		mov	r1, r2
 4150 0042 7A68     		ldr	r2, [r7, #4]
 4151 0044 22F00402 		bic	r2, r2, #4
 4152 0048 0A43     		orrs	r2, r2, r1
 4153 004a 9A60     		str	r2, [r3, #8]
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4154              		.loc 1 2545 0
 4155 004c 4FF42053 		mov	r3, #10240
 4156 0050 C4F20003 		movt	r3, 16384
 4157 0054 4FF42052 		mov	r2, #10240
 4158 0058 C4F20002 		movt	r2, 16384
 4159 005c 126C     		ldr	r2, [r2, #64]
 4160 005e 1146     		mov	r1, r2
 4161 0060 7A68     		ldr	r2, [r7, #4]
 4162 0062 02F00402 		and	r2, r2, #4
 4163 0066 0A43     		orrs	r2, r2, r1
 4164 0068 1A64     		str	r2, [r3, #64]
 4165 006a 21E0     		b	.L153
 4166              	.L152:
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4167              		.loc 1 2550 0
 4168 006c 4FF42053 		mov	r3, #10240
 4169 0070 C4F20003 		movt	r3, 16384
 4170 0074 4FF42052 		mov	r2, #10240
 4171 0078 C4F20002 		movt	r2, 16384
 4172 007c 9268     		ldr	r2, [r2, #8]
 4173 007e 1146     		mov	r1, r2
 4174 0080 7A68     		ldr	r2, [r7, #4]
 4175 0082 22F00402 		bic	r2, r2, #4
 4176 0086 6FEA0202 		mvn	r2, r2
 4177 008a 0A40     		ands	r2, r2, r1
 4178 008c 9A60     		str	r2, [r3, #8]
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4179              		.loc 1 2552 0
 4180 008e 4FF42053 		mov	r3, #10240
 4181 0092 C4F20003 		movt	r3, 16384
 4182 0096 4FF42052 		mov	r2, #10240
 4183 009a C4F20002 		movt	r2, 16384
 4184 009e 126C     		ldr	r2, [r2, #64]
 4185 00a0 1146     		mov	r1, r2
 4186 00a2 7A68     		ldr	r2, [r7, #4]
 4187 00a4 02F00402 		and	r2, r2, #4
 4188 00a8 6FEA0202 		mvn	r2, r2
 4189 00ac 0A40     		ands	r2, r2, r1
 4190 00ae 1A64     		str	r2, [r3, #64]
 4191              	.L153:
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4192              		.loc 1 2555 0
 4193 00b0 4FF42053 		mov	r3, #10240
 4194 00b4 C4F20003 		movt	r3, 16384
 4195 00b8 4FF0FF02 		mov	r2, #255
 4196 00bc 5A62     		str	r2, [r3, #36]
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4197              		.loc 1 2556 0
 4198 00be 07F10C07 		add	r7, r7, #12
 4199 00c2 BD46     		mov	sp, r7
 4200 00c4 80BC     		pop	{r7}
 4201 00c6 7047     		bx	lr
 4202              		.cfi_endproc
 4203              	.LFE160:
 4205              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4206              		.align	2
 4207              		.global	RTC_GetFlagStatus
 4208              		.thumb
 4209              		.thumb_func
 4211              	RTC_GetFlagStatus:
 4212              	.LFB161:
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4213              		.loc 1 2577 0
 4214              		.cfi_startproc
 4215              		@ args = 0, pretend = 0, frame = 16
 4216              		@ frame_needed = 1, uses_anonymous_args = 0
 4217              		@ link register save eliminated.
 4218 0000 80B4     		push	{r7}
 4219              	.LCFI149:
 4220              		.cfi_def_cfa_offset 4
 4221              		.cfi_offset 7, -4
 4222 0002 85B0     		sub	sp, sp, #20
 4223              	.LCFI150:
 4224              		.cfi_def_cfa_offset 24
 4225 0004 00AF     		add	r7, sp, #0
 4226              	.LCFI151:
 4227              		.cfi_def_cfa_register 7
 4228 0006 7860     		str	r0, [r7, #4]
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4229              		.loc 1 2578 0
 4230 0008 4FF00003 		mov	r3, #0
 4231 000c FB73     		strb	r3, [r7, #15]
2579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4232              		.loc 1 2579 0
 4233 000e 4FF00003 		mov	r3, #0
 4234 0012 BB60     		str	r3, [r7, #8]
2580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4235              		.loc 1 2585 0
 4236 0014 4FF42053 		mov	r3, #10240
 4237 0018 C4F20003 		movt	r3, 16384
 4238 001c DB68     		ldr	r3, [r3, #12]
 4239 001e 1A46     		mov	r2, r3
 4240 0020 43F67773 		movw	r3, #16247
 4241 0024 1340     		ands	r3, r3, r2
 4242 0026 BB60     		str	r3, [r7, #8]
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4243              		.loc 1 2588 0
 4244 0028 BA68     		ldr	r2, [r7, #8]
 4245 002a 7B68     		ldr	r3, [r7, #4]
 4246 002c 1340     		ands	r3, r3, r2
 4247 002e 002B     		cmp	r3, #0
 4248 0030 03D0     		beq	.L155
2589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4249              		.loc 1 2590 0
 4250 0032 4FF00103 		mov	r3, #1
 4251 0036 FB73     		strb	r3, [r7, #15]
 4252 0038 02E0     		b	.L156
 4253              	.L155:
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4254              		.loc 1 2594 0
 4255 003a 4FF00003 		mov	r3, #0
 4256 003e FB73     		strb	r3, [r7, #15]
 4257              	.L156:
2595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4258              		.loc 1 2596 0
 4259 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4260              		.loc 1 2597 0
 4261 0042 1846     		mov	r0, r3
 4262 0044 07F11407 		add	r7, r7, #20
 4263 0048 BD46     		mov	sp, r7
 4264 004a 80BC     		pop	{r7}
 4265 004c 7047     		bx	lr
 4266              		.cfi_endproc
 4267              	.LFE161:
 4269 004e 00BF     		.section	.text.RTC_ClearFlag,"ax",%progbits
 4270              		.align	2
 4271              		.global	RTC_ClearFlag
 4272              		.thumb
 4273              		.thumb_func
 4275              	RTC_ClearFlag:
 4276              	.LFB162:
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4277              		.loc 1 2613 0
 4278              		.cfi_startproc
 4279              		@ args = 0, pretend = 0, frame = 8
 4280              		@ frame_needed = 1, uses_anonymous_args = 0
 4281              		@ link register save eliminated.
 4282 0000 80B4     		push	{r7}
 4283              	.LCFI152:
 4284              		.cfi_def_cfa_offset 4
 4285              		.cfi_offset 7, -4
 4286 0002 83B0     		sub	sp, sp, #12
 4287              	.LCFI153:
 4288              		.cfi_def_cfa_offset 16
 4289 0004 00AF     		add	r7, sp, #0
 4290              	.LCFI154:
 4291              		.cfi_def_cfa_register 7
 4292 0006 7860     		str	r0, [r7, #4]
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4293              		.loc 1 2618 0
 4294 0008 4FF42053 		mov	r3, #10240
 4295 000c C4F20003 		movt	r3, 16384
 4296 0010 7A68     		ldr	r2, [r7, #4]
 4297 0012 4FEA0242 		lsl	r2, r2, #16
 4298 0016 4FEA1242 		lsr	r2, r2, #16
 4299 001a 42F08002 		orr	r2, r2, #128
 4300 001e 6FEA0201 		mvn	r1, r2
 4301 0022 4FF42052 		mov	r2, #10240
 4302 0026 C4F20002 		movt	r2, 16384
 4303 002a D268     		ldr	r2, [r2, #12]
 4304 002c 02F08002 		and	r2, r2, #128
 4305 0030 0A43     		orrs	r2, r2, r1
 4306 0032 DA60     		str	r2, [r3, #12]
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4307              		.loc 1 2619 0
 4308 0034 07F10C07 		add	r7, r7, #12
 4309 0038 BD46     		mov	sp, r7
 4310 003a 80BC     		pop	{r7}
 4311 003c 7047     		bx	lr
 4312              		.cfi_endproc
 4313              	.LFE162:
 4315 003e 00BF     		.section	.text.RTC_GetITStatus,"ax",%progbits
 4316              		.align	2
 4317              		.global	RTC_GetITStatus
 4318              		.thumb
 4319              		.thumb_func
 4321              	RTC_GetITStatus:
 4322              	.LFB163:
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4323              		.loc 1 2633 0
 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 24
 4326              		@ frame_needed = 1, uses_anonymous_args = 0
 4327              		@ link register save eliminated.
 4328 0000 80B4     		push	{r7}
 4329              	.LCFI155:
 4330              		.cfi_def_cfa_offset 4
 4331              		.cfi_offset 7, -4
 4332 0002 87B0     		sub	sp, sp, #28
 4333              	.LCFI156:
 4334              		.cfi_def_cfa_offset 32
 4335 0004 00AF     		add	r7, sp, #0
 4336              	.LCFI157:
 4337              		.cfi_def_cfa_register 7
 4338 0006 7860     		str	r0, [r7, #4]
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4339              		.loc 1 2634 0
 4340 0008 4FF00003 		mov	r3, #0
 4341 000c FB75     		strb	r3, [r7, #23]
2635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4342              		.loc 1 2635 0
 4343 000e 4FF00003 		mov	r3, #0
 4344 0012 3B61     		str	r3, [r7, #16]
 4345 0014 4FF00003 		mov	r3, #0
 4346 0018 FB60     		str	r3, [r7, #12]
2636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4347              		.loc 1 2641 0
 4348 001a 4FF42053 		mov	r3, #10240
 4349 001e C4F20003 		movt	r3, 16384
 4350 0022 1B6C     		ldr	r3, [r3, #64]
 4351 0024 03F00403 		and	r3, r3, #4
 4352 0028 3B61     		str	r3, [r7, #16]
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4353              		.loc 1 2644 0
 4354 002a 4FF42053 		mov	r3, #10240
 4355 002e C4F20003 		movt	r3, 16384
 4356 0032 9B68     		ldr	r3, [r3, #8]
 4357 0034 1A46     		mov	r2, r3
 4358 0036 7B68     		ldr	r3, [r7, #4]
 4359 0038 1A40     		ands	r2, r2, r3
 4360 003a 7B68     		ldr	r3, [r7, #4]
 4361 003c 4FEAD331 		lsr	r1, r3, #15
 4362 0040 3B69     		ldr	r3, [r7, #16]
 4363 0042 0B40     		ands	r3, r3, r1
 4364 0044 1343     		orrs	r3, r3, r2
 4365 0046 FB60     		str	r3, [r7, #12]
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4366              		.loc 1 2647 0
 4367 0048 4FF42053 		mov	r3, #10240
 4368 004c C4F20003 		movt	r3, 16384
 4369 0050 DB68     		ldr	r3, [r3, #12]
 4370 0052 1A46     		mov	r2, r3
 4371 0054 7B68     		ldr	r3, [r7, #4]
 4372 0056 4FEA1313 		lsr	r3, r3, #4
 4373 005a 1340     		ands	r3, r3, r2
 4374 005c 3B61     		str	r3, [r7, #16]
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4375              		.loc 1 2650 0
 4376 005e FB68     		ldr	r3, [r7, #12]
 4377 0060 002B     		cmp	r3, #0
 4378 0062 0AD0     		beq	.L159
 4379              		.loc 1 2650 0 is_stmt 0 discriminator 1
 4380 0064 3B69     		ldr	r3, [r7, #16]
 4381 0066 4FEA0343 		lsl	r3, r3, #16
 4382 006a 4FEA1343 		lsr	r3, r3, #16
 4383 006e 002B     		cmp	r3, #0
 4384 0070 03D0     		beq	.L159
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4385              		.loc 1 2652 0 is_stmt 1
 4386 0072 4FF00103 		mov	r3, #1
 4387 0076 FB75     		strb	r3, [r7, #23]
 4388 0078 02E0     		b	.L160
 4389              	.L159:
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4390              		.loc 1 2656 0
 4391 007a 4FF00003 		mov	r3, #0
 4392 007e FB75     		strb	r3, [r7, #23]
 4393              	.L160:
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4394              		.loc 1 2658 0
 4395 0080 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4396              		.loc 1 2659 0
 4397 0082 1846     		mov	r0, r3
 4398 0084 07F11C07 		add	r7, r7, #28
 4399 0088 BD46     		mov	sp, r7
 4400 008a 80BC     		pop	{r7}
 4401 008c 7047     		bx	lr
 4402              		.cfi_endproc
 4403              	.LFE163:
 4405 008e 00BF     		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4406              		.align	2
 4407              		.global	RTC_ClearITPendingBit
 4408              		.thumb
 4409              		.thumb_func
 4411              	RTC_ClearITPendingBit:
 4412              	.LFB164:
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4413              		.loc 1 2673 0
 4414              		.cfi_startproc
 4415              		@ args = 0, pretend = 0, frame = 16
 4416              		@ frame_needed = 1, uses_anonymous_args = 0
 4417              		@ link register save eliminated.
 4418 0000 80B4     		push	{r7}
 4419              	.LCFI158:
 4420              		.cfi_def_cfa_offset 4
 4421              		.cfi_offset 7, -4
 4422 0002 85B0     		sub	sp, sp, #20
 4423              	.LCFI159:
 4424              		.cfi_def_cfa_offset 24
 4425 0004 00AF     		add	r7, sp, #0
 4426              	.LCFI160:
 4427              		.cfi_def_cfa_register 7
 4428 0006 7860     		str	r0, [r7, #4]
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4429              		.loc 1 2674 0
 4430 0008 4FF00003 		mov	r3, #0
 4431 000c FB60     		str	r3, [r7, #12]
2675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4432              		.loc 1 2680 0
 4433 000e 7B68     		ldr	r3, [r7, #4]
 4434 0010 4FEA1313 		lsr	r3, r3, #4
 4435 0014 FB60     		str	r3, [r7, #12]
2681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4436              		.loc 1 2683 0
 4437 0016 4FF42053 		mov	r3, #10240
 4438 001a C4F20003 		movt	r3, 16384
 4439 001e FA68     		ldr	r2, [r7, #12]
 4440 0020 4FEA0242 		lsl	r2, r2, #16
 4441 0024 4FEA1242 		lsr	r2, r2, #16
 4442 0028 42F08002 		orr	r2, r2, #128
 4443 002c 6FEA0201 		mvn	r1, r2
 4444 0030 4FF42052 		mov	r2, #10240
 4445 0034 C4F20002 		movt	r2, 16384
 4446 0038 D268     		ldr	r2, [r2, #12]
 4447 003a 02F08002 		and	r2, r2, #128
 4448 003e 0A43     		orrs	r2, r2, r1
 4449 0040 DA60     		str	r2, [r3, #12]
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4450              		.loc 1 2684 0
 4451 0042 07F11407 		add	r7, r7, #20
 4452 0046 BD46     		mov	sp, r7
 4453 0048 80BC     		pop	{r7}
 4454 004a 7047     		bx	lr
 4455              		.cfi_endproc
 4456              	.LFE164:
 4458              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4459              		.align	2
 4460              		.thumb
 4461              		.thumb_func
 4463              	RTC_ByteToBcd2:
 4464              	.LFB165:
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4465              		.loc 1 2696 0
 4466              		.cfi_startproc
 4467              		@ args = 0, pretend = 0, frame = 16
 4468              		@ frame_needed = 1, uses_anonymous_args = 0
 4469              		@ link register save eliminated.
 4470 0000 80B4     		push	{r7}
 4471              	.LCFI161:
 4472              		.cfi_def_cfa_offset 4
 4473              		.cfi_offset 7, -4
 4474 0002 85B0     		sub	sp, sp, #20
 4475              	.LCFI162:
 4476              		.cfi_def_cfa_offset 24
 4477 0004 00AF     		add	r7, sp, #0
 4478              	.LCFI163:
 4479              		.cfi_def_cfa_register 7
 4480 0006 0346     		mov	r3, r0
 4481 0008 FB71     		strb	r3, [r7, #7]
2697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4482              		.loc 1 2697 0
 4483 000a 4FF00003 		mov	r3, #0
 4484 000e FB73     		strb	r3, [r7, #15]
2698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4485              		.loc 1 2699 0
 4486 0010 07E0     		b	.L163
 4487              	.L164:
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4488              		.loc 1 2701 0
 4489 0012 FB7B     		ldrb	r3, [r7, #15]
 4490 0014 03F10103 		add	r3, r3, #1
 4491 0018 FB73     		strb	r3, [r7, #15]
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4492              		.loc 1 2702 0
 4493 001a FB79     		ldrb	r3, [r7, #7]
 4494 001c A3F10A03 		sub	r3, r3, #10
 4495 0020 FB71     		strb	r3, [r7, #7]
 4496              	.L163:
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4497              		.loc 1 2699 0 discriminator 1
 4498 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4499 0024 092B     		cmp	r3, #9
 4500 0026 F4D8     		bhi	.L164
2703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4501              		.loc 1 2705 0
 4502 0028 FB7B     		ldrb	r3, [r7, #15]
 4503 002a 4FEA0313 		lsl	r3, r3, #4
 4504 002e DAB2     		uxtb	r2, r3
 4505 0030 FB79     		ldrb	r3, [r7, #7]
 4506 0032 1343     		orrs	r3, r3, r2
 4507 0034 DBB2     		uxtb	r3, r3
2706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4508              		.loc 1 2706 0
 4509 0036 1846     		mov	r0, r3
 4510 0038 07F11407 		add	r7, r7, #20
 4511 003c BD46     		mov	sp, r7
 4512 003e 80BC     		pop	{r7}
 4513 0040 7047     		bx	lr
 4514              		.cfi_endproc
 4515              	.LFE165:
 4517 0042 00BF     		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 4518              		.align	2
 4519              		.thumb
 4520              		.thumb_func
 4522              	RTC_Bcd2ToByte:
 4523              	.LFB166:
2707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4524              		.loc 1 2714 0
 4525              		.cfi_startproc
 4526              		@ args = 0, pretend = 0, frame = 16
 4527              		@ frame_needed = 1, uses_anonymous_args = 0
 4528              		@ link register save eliminated.
 4529 0000 80B4     		push	{r7}
 4530              	.LCFI164:
 4531              		.cfi_def_cfa_offset 4
 4532              		.cfi_offset 7, -4
 4533 0002 85B0     		sub	sp, sp, #20
 4534              	.LCFI165:
 4535              		.cfi_def_cfa_offset 24
 4536 0004 00AF     		add	r7, sp, #0
 4537              	.LCFI166:
 4538              		.cfi_def_cfa_register 7
 4539 0006 0346     		mov	r3, r0
 4540 0008 FB71     		strb	r3, [r7, #7]
2715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4541              		.loc 1 2715 0
 4542 000a 4FF00003 		mov	r3, #0
 4543 000e FB73     		strb	r3, [r7, #15]
2716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4544              		.loc 1 2716 0
 4545 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4546 0012 4FEA1313 		lsr	r3, r3, #4
 4547 0016 DBB2     		uxtb	r3, r3
 4548 0018 1A46     		mov	r2, r3
 4549 001a 4FEA8202 		lsl	r2, r2, #2
 4550 001e D318     		adds	r3, r2, r3
 4551 0020 4FEA4303 		lsl	r3, r3, #1
 4552 0024 FB73     		strb	r3, [r7, #15]
2717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4553              		.loc 1 2717 0
 4554 0026 FB79     		ldrb	r3, [r7, #7]
 4555 0028 03F00F03 		and	r3, r3, #15
 4556 002c DAB2     		uxtb	r2, r3
 4557 002e FB7B     		ldrb	r3, [r7, #15]
 4558 0030 D318     		adds	r3, r2, r3
 4559 0032 DBB2     		uxtb	r3, r3
2718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4560              		.loc 1 2718 0
 4561 0034 1846     		mov	r0, r3
 4562 0036 07F11407 		add	r7, r7, #20
 4563 003a BD46     		mov	sp, r7
 4564 003c 80BC     		pop	{r7}
 4565 003e 7047     		bx	lr
 4566              		.cfi_endproc
 4567              	.LFE166:
 4569              		.text
 4570              	.Letext0:
 4571              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 4572              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
 4573              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_S
 4574              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
  C:\Temp\ccKjStGV.s:19     .text.RTC_DeInit:00000000 $t
  C:\Temp\ccKjStGV.s:24     .text.RTC_DeInit:00000000 RTC_DeInit
  C:\Temp\ccKjStGV.s:403    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
  C:\Temp\ccKjStGV.s:533    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
  C:\Temp\ccKjStGV.s:194    .text.RTC_Init:00000000 $t
  C:\Temp\ccKjStGV.s:199    .text.RTC_Init:00000000 RTC_Init
  C:\Temp\ccKjStGV.s:498    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
  C:\Temp\ccKjStGV.s:299    .text.RTC_StructInit:00000000 $t
  C:\Temp\ccKjStGV.s:304    .text.RTC_StructInit:00000000 RTC_StructInit
  C:\Temp\ccKjStGV.s:343    .text.RTC_WriteProtectionCmd:00000000 $t
  C:\Temp\ccKjStGV.s:348    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
  C:\Temp\ccKjStGV.s:398    .text.RTC_EnterInitMode:00000000 $t
  C:\Temp\ccKjStGV.s:493    .text.RTC_ExitInitMode:00000000 $t
  C:\Temp\ccKjStGV.s:528    .text.RTC_WaitForSynchro:00000000 $t
  C:\Temp\ccKjStGV.s:629    .text.RTC_RefClockCmd:00000000 $t
  C:\Temp\ccKjStGV.s:634    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
  C:\Temp\ccKjStGV.s:721    .text.RTC_BypassShadowCmd:00000000 $t
  C:\Temp\ccKjStGV.s:726    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
  C:\Temp\ccKjStGV.s:792    .text.RTC_SetTime:00000000 $t
  C:\Temp\ccKjStGV.s:797    .text.RTC_SetTime:00000000 RTC_SetTime
  C:\Temp\ccKjStGV.s:4522   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
  C:\Temp\ccKjStGV.s:4463   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
  C:\Temp\ccKjStGV.s:981    .text.RTC_TimeStructInit:00000000 $t
  C:\Temp\ccKjStGV.s:986    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
  C:\Temp\ccKjStGV.s:1029   .text.RTC_GetTime:00000000 $t
  C:\Temp\ccKjStGV.s:1034   .text.RTC_GetTime:00000000 RTC_GetTime
  C:\Temp\ccKjStGV.s:1133   .text.RTC_GetSubSecond:00000000 $t
  C:\Temp\ccKjStGV.s:1138   .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
  C:\Temp\ccKjStGV.s:1179   .text.RTC_SetDate:00000000 $t
  C:\Temp\ccKjStGV.s:1184   .text.RTC_SetDate:00000000 RTC_SetDate
  C:\Temp\ccKjStGV.s:1368   .text.RTC_DateStructInit:00000000 $t
  C:\Temp\ccKjStGV.s:1373   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
  C:\Temp\ccKjStGV.s:1416   .text.RTC_GetDate:00000000 $t
  C:\Temp\ccKjStGV.s:1421   .text.RTC_GetDate:00000000 RTC_GetDate
  C:\Temp\ccKjStGV.s:1518   .text.RTC_SetAlarm:00000000 $t
  C:\Temp\ccKjStGV.s:1523   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
  C:\Temp\ccKjStGV.s:1742   .text.RTC_AlarmStructInit:00000000 $t
  C:\Temp\ccKjStGV.s:1747   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
  C:\Temp\ccKjStGV.s:1802   .text.RTC_GetAlarm:00000000 $t
  C:\Temp\ccKjStGV.s:1807   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
  C:\Temp\ccKjStGV.s:1941   .text.RTC_AlarmCmd:00000000 $t
  C:\Temp\ccKjStGV.s:1946   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
  C:\Temp\ccKjStGV.s:2073   .text.RTC_AlarmSubSecondConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2078   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
  C:\Temp\ccKjStGV.s:2147   .text.RTC_GetAlarmSubSecond:00000000 $t
  C:\Temp\ccKjStGV.s:2152   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
  C:\Temp\ccKjStGV.s:2206   .text.RTC_WakeUpClockConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2211   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
  C:\Temp\ccKjStGV.s:2271   .text.RTC_SetWakeUpCounter:00000000 $t
  C:\Temp\ccKjStGV.s:2276   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
  C:\Temp\ccKjStGV.s:2323   .text.RTC_GetWakeUpCounter:00000000 $t
  C:\Temp\ccKjStGV.s:2328   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
  C:\Temp\ccKjStGV.s:2357   .text.RTC_WakeUpCmd:00000000 $t
  C:\Temp\ccKjStGV.s:2362   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
  C:\Temp\ccKjStGV.s:2477   .text.RTC_DayLightSavingConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2482   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
  C:\Temp\ccKjStGV.s:2545   .text.RTC_GetStoreOperation:00000000 $t
  C:\Temp\ccKjStGV.s:2550   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
  C:\Temp\ccKjStGV.s:2578   .text.RTC_OutputConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2583   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
  C:\Temp\ccKjStGV.s:2646   .text.RTC_CoarseCalibConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2651   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
  C:\Temp\ccKjStGV.s:2722   .text.RTC_CoarseCalibCmd:00000000 $t
  C:\Temp\ccKjStGV.s:2727   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
  C:\Temp\ccKjStGV.s:2814   .text.RTC_CalibOutputCmd:00000000 $t
  C:\Temp\ccKjStGV.s:2819   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
  C:\Temp\ccKjStGV.s:2885   .text.RTC_CalibOutputConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2890   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
  C:\Temp\ccKjStGV.s:2950   .text.RTC_SmoothCalibConfig:00000000 $t
  C:\Temp\ccKjStGV.s:2955   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
  C:\Temp\ccKjStGV.s:3060   .text.RTC_TimeStampCmd:00000000 $t
  C:\Temp\ccKjStGV.s:3065   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
  C:\Temp\ccKjStGV.s:3142   .text.RTC_GetTimeStamp:00000000 $t
  C:\Temp\ccKjStGV.s:3147   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
  C:\Temp\ccKjStGV.s:3308   .text.RTC_GetTimeStampSubSecond:00000000 $t
  C:\Temp\ccKjStGV.s:3313   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
  C:\Temp\ccKjStGV.s:3340   .text.RTC_TamperTriggerConfig:00000000 $t
  C:\Temp\ccKjStGV.s:3345   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
  C:\Temp\ccKjStGV.s:3403   .text.RTC_TamperCmd:00000000 $t
  C:\Temp\ccKjStGV.s:3408   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
  C:\Temp\ccKjStGV.s:3465   .text.RTC_TamperFilterConfig:00000000 $t
  C:\Temp\ccKjStGV.s:3470   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
  C:\Temp\ccKjStGV.s:3515   .text.RTC_TamperSamplingFreqConfig:00000000 $t
  C:\Temp\ccKjStGV.s:3520   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
  C:\Temp\ccKjStGV.s:3565   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
  C:\Temp\ccKjStGV.s:3570   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
  C:\Temp\ccKjStGV.s:3615   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
  C:\Temp\ccKjStGV.s:3620   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
  C:\Temp\ccKjStGV.s:3671   .text.RTC_TamperPullUpCmd:00000000 $t
  C:\Temp\ccKjStGV.s:3676   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
  C:\Temp\ccKjStGV.s:3727   .text.RTC_WriteBackupRegister:00000000 $t
  C:\Temp\ccKjStGV.s:3732   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
  C:\Temp\ccKjStGV.s:3777   .text.RTC_ReadBackupRegister:00000000 $t
  C:\Temp\ccKjStGV.s:3782   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
  C:\Temp\ccKjStGV.s:3826   .text.RTC_TamperPinSelection:00000000 $t
  C:\Temp\ccKjStGV.s:3831   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
  C:\Temp\ccKjStGV.s:3876   .text.RTC_TimeStampPinSelection:00000000 $t
  C:\Temp\ccKjStGV.s:3881   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
  C:\Temp\ccKjStGV.s:3926   .text.RTC_OutputTypeConfig:00000000 $t
  C:\Temp\ccKjStGV.s:3931   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
  C:\Temp\ccKjStGV.s:3976   .text.RTC_SynchroShiftConfig:00000000 $t
  C:\Temp\ccKjStGV.s:3981   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
  C:\Temp\ccKjStGV.s:4104   .text.RTC_ITConfig:00000000 $t
  C:\Temp\ccKjStGV.s:4109   .text.RTC_ITConfig:00000000 RTC_ITConfig
  C:\Temp\ccKjStGV.s:4206   .text.RTC_GetFlagStatus:00000000 $t
  C:\Temp\ccKjStGV.s:4211   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
  C:\Temp\ccKjStGV.s:4270   .text.RTC_ClearFlag:00000000 $t
  C:\Temp\ccKjStGV.s:4275   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
  C:\Temp\ccKjStGV.s:4316   .text.RTC_GetITStatus:00000000 $t
  C:\Temp\ccKjStGV.s:4321   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
  C:\Temp\ccKjStGV.s:4406   .text.RTC_ClearITPendingBit:00000000 $t
  C:\Temp\ccKjStGV.s:4411   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
  C:\Temp\ccKjStGV.s:4459   .text.RTC_ByteToBcd2:00000000 $t
  C:\Temp\ccKjStGV.s:4518   .text.RTC_Bcd2ToByte:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
