   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	RTC_ByteToBcd2:
  24              	.LFB165:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
1903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
2432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
2447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
2456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
2461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  26              		.loc 1 2697 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
2698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  32              		.loc 1 2698 0
  33 0000 0023     		movs	r3, #0
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  34              		.loc 1 2700 0
  35 0002 03E0     		b	.L2
  36              	.LVL1:
  37              	.L3:
2701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
  38              		.loc 1 2702 0
  39 0004 0133     		adds	r3, r3, #1
  40              	.LVL2:
2703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
  41              		.loc 1 2703 0
  42 0006 0A38     		subs	r0, r0, #10
  43              	.LVL3:
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
  44              		.loc 1 2702 0
  45 0008 DBB2     		uxtb	r3, r3
  46              	.LVL4:
  47              		.loc 1 2703 0
  48 000a C0B2     		uxtb	r0, r0
  49              	.LVL5:
  50              	.L2:
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  51              		.loc 1 2700 0 discriminator 1
  52 000c 0928     		cmp	r0, #9
  53 000e F9D8     		bhi	.L3
2704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  54              		.loc 1 2706 0
  55 0010 40EA0310 		orr	r0, r0, r3, lsl #4
  56              	.LVL6:
  57 0014 C0B2     		uxtb	r0, r0
2707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  58              		.loc 1 2707 0
  59 0016 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE165:
  63              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  64              		.align	1
  65              		.thumb
  66              		.thumb_func
  68              	RTC_Bcd2ToByte:
  69              	.LFB166:
2708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  70              		.loc 1 2715 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75              	.LVL7:
2716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  76              		.loc 1 2717 0
  77 0000 0209     		lsrs	r2, r0, #4
2718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  78              		.loc 1 2718 0
  79 0002 00F00F03 		and	r3, r0, #15
  80 0006 0A20     		movs	r0, #10
  81              	.LVL8:
  82 0008 00FB0230 		mla	r0, r0, r2, r3
  83 000c C0B2     		uxtb	r0, r0
2719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  84              		.loc 1 2719 0
  85 000e 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE166:
  89              		.section	.text.RTC_StructInit,"ax",%progbits
  90              		.align	1
  91              		.global	RTC_StructInit
  92              		.thumb
  93              		.thumb_func
  95              	RTC_StructInit:
  96              	.LFB112:
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  97              		.loc 1 492 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL9:
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 103              		.loc 1 500 0
 104 0000 0021     		movs	r1, #0
 105 0002 7F22     		movs	r2, #127
 106 0004 FF23     		movs	r3, #255
 107 0006 80E80E00 		stmia	r0, {r1, r2, r3}
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 108              		.loc 1 501 0
 109 000a 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE112:
 113              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 114              		.align	1
 115              		.global	RTC_WriteProtectionCmd
 116              		.thumb
 117              		.thumb_func
 119              	RTC_WriteProtectionCmd:
 120              	.LFB113:
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 121              		.loc 1 514 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.LVL10:
 127 0000 034B     		ldr	r3, .L10
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 128              		.loc 1 521 0
 129 0002 FF22     		movs	r2, #255
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 130              		.loc 1 518 0
 131 0004 10B9     		cbnz	r0, .L9
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 132              		.loc 1 526 0
 133 0006 CA22     		movs	r2, #202
 134 0008 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 135              		.loc 1 527 0
 136 000a 5322     		movs	r2, #83
 137              	.L9:
 138 000c 5A62     		str	r2, [r3, #36]
 139 000e 7047     		bx	lr
 140              	.L11:
 141              		.align	2
 142              	.L10:
 143 0010 00280040 		.word	1073752064
 144              		.cfi_endproc
 145              	.LFE113:
 147              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 148              		.align	1
 149              		.global	RTC_EnterInitMode
 150              		.thumb
 151              		.thumb_func
 153              	RTC_EnterInitMode:
 154              	.LFB114:
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 155              		.loc 1 541 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 8
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0000 82B0     		sub	sp, sp, #8
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 163              		.loc 1 542 0
 164 0002 0023     		movs	r3, #0
 165 0004 0193     		str	r3, [sp, #4]
 166              	.LVL11:
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 167              		.loc 1 547 0
 168 0006 0C4B     		ldr	r3, .L18
 169 0008 DA68     		ldr	r2, [r3, #12]
 170 000a 5206     		lsls	r2, r2, #25
 171 000c 11D4     		bmi	.L16
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 172              		.loc 1 550 0
 173 000e 4FF0FF32 		mov	r2, #-1
 174 0012 DA60     		str	r2, [r3, #12]
 175              	.LVL12:
 176              	.L15:
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 177              		.loc 1 555 0 discriminator 1
 178 0014 DA68     		ldr	r2, [r3, #12]
 179              	.LVL13:
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 180              		.loc 1 556 0 discriminator 1
 181 0016 0199     		ldr	r1, [sp, #4]
 182 0018 0131     		adds	r1, r1, #1
 183              	.LVL14:
 184 001a 0191     		str	r1, [sp, #4]
 185              	.LVL15:
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 186              		.loc 1 557 0 discriminator 1
 187 001c 0199     		ldr	r1, [sp, #4]
 188              	.LVL16:
 189 001e B1F5803F 		cmp	r1, #65536
 190 0022 01D0     		beq	.L14
 191 0024 5006     		lsls	r0, r2, #25
 192 0026 F5D5     		bpl	.L15
 193              	.L14:
 194              	.LBB4:
 195              	.LBB5:
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 196              		.loc 1 559 0
 197 0028 034B     		ldr	r3, .L18
 198 002a D868     		ldr	r0, [r3, #12]
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 199              		.loc 1 561 0
 200 002c C0F38010 		ubfx	r0, r0, #6, #1
 201 0030 00E0     		b	.L13
 202              	.LVL17:
 203              	.L16:
 204              	.LBE5:
 205              	.LBE4:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 206              		.loc 1 570 0
 207 0032 0120     		movs	r0, #1
 208              	.LVL18:
 209              	.L13:
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 210              		.loc 1 574 0
 211 0034 02B0     		add	sp, sp, #8
 212 0036 7047     		bx	lr
 213              	.L19:
 214              		.align	2
 215              	.L18:
 216 0038 00280040 		.word	1073752064
 217              		.cfi_endproc
 218              	.LFE114:
 220              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 221              		.align	1
 222              		.global	RTC_ExitInitMode
 223              		.thumb
 224              		.thumb_func
 226              	RTC_ExitInitMode:
 227              	.LFB115:
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 228              		.loc 1 586 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 233              		.loc 1 588 0
 234 0000 024B     		ldr	r3, .L21
 235 0002 DA68     		ldr	r2, [r3, #12]
 236 0004 22F08002 		bic	r2, r2, #128
 237 0008 DA60     		str	r2, [r3, #12]
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 238              		.loc 1 589 0
 239 000a 7047     		bx	lr
 240              	.L22:
 241              		.align	2
 242              	.L21:
 243 000c 00280040 		.word	1073752064
 244              		.cfi_endproc
 245              	.LFE115:
 247              		.section	.text.RTC_Init,"ax",%progbits
 248              		.align	1
 249              		.global	RTC_Init
 250              		.thumb
 251              		.thumb_func
 253              	RTC_Init:
 254              	.LFB111:
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 255              		.loc 1 446 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              	.LVL19:
 260 0000 38B5     		push	{r3, r4, r5, lr}
 261              	.LCFI1:
 262              		.cfi_def_cfa_offset 16
 263              		.cfi_offset 14, -4
 264              		.cfi_offset 5, -8
 265              		.cfi_offset 4, -12
 266              		.cfi_offset 3, -16
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 267              		.loc 1 455 0
 268 0002 0F4C     		ldr	r4, .L26
 269 0004 CA23     		movs	r3, #202
 270 0006 6362     		str	r3, [r4, #36]
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 271              		.loc 1 456 0
 272 0008 5323     		movs	r3, #83
 273 000a 6362     		str	r3, [r4, #36]
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 274              		.loc 1 446 0
 275 000c 0546     		mov	r5, r0
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 276              		.loc 1 459 0
 277 000e FFF7FEFF 		bl	RTC_EnterInitMode
 278              	.LVL20:
 279 0012 88B1     		cbz	r0, .L24
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 280              		.loc 1 466 0
 281 0014 A368     		ldr	r3, [r4, #8]
 282 0016 23F04003 		bic	r3, r3, #64
 283 001a A360     		str	r3, [r4, #8]
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 284              		.loc 1 468 0
 285 001c A268     		ldr	r2, [r4, #8]
 286 001e 2B68     		ldr	r3, [r5, #0]
 287 0020 1343     		orrs	r3, r3, r2
 288 0022 A360     		str	r3, [r4, #8]
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 289              		.loc 1 471 0
 290 0024 AB68     		ldr	r3, [r5, #8]
 291 0026 2361     		str	r3, [r4, #16]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 292              		.loc 1 472 0
 293 0028 2369     		ldr	r3, [r4, #16]
 294 002a 6A68     		ldr	r2, [r5, #4]
 295 002c 43EA0243 		orr	r3, r3, r2, lsl #16
 296 0030 2361     		str	r3, [r4, #16]
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 297              		.loc 1 475 0
 298 0032 FFF7FEFF 		bl	RTC_ExitInitMode
 299              	.LVL21:
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 300              		.loc 1 477 0
 301 0036 0120     		movs	r0, #1
 302              	.LVL22:
 303              	.L24:
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 304              		.loc 1 480 0
 305 0038 014B     		ldr	r3, .L26
 306 003a FF22     		movs	r2, #255
 307 003c 5A62     		str	r2, [r3, #36]
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 308              		.loc 1 483 0
 309 003e 38BD     		pop	{r3, r4, r5, pc}
 310              	.L27:
 311              		.align	2
 312              	.L26:
 313 0040 00280040 		.word	1073752064
 314              		.cfi_endproc
 315              	.LFE111:
 317              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 318              		.align	1
 319              		.global	RTC_WaitForSynchro
 320              		.thumb
 321              		.thumb_func
 323              	RTC_WaitForSynchro:
 324              	.LFB116:
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 325              		.loc 1 608 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 8
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330 0000 82B0     		sub	sp, sp, #8
 331              	.LCFI2:
 332              		.cfi_def_cfa_offset 8
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 333              		.loc 1 609 0
 334 0002 0023     		movs	r3, #0
 335 0004 0193     		str	r3, [sp, #4]
 336              	.LVL23:
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 337              		.loc 1 614 0
 338 0006 0D4B     		ldr	r3, .L32
 339 0008 CA22     		movs	r2, #202
 340 000a 5A62     		str	r2, [r3, #36]
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 341              		.loc 1 615 0
 342 000c 5322     		movs	r2, #83
 343 000e 5A62     		str	r2, [r3, #36]
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 344              		.loc 1 618 0
 345 0010 DA68     		ldr	r2, [r3, #12]
 346 0012 22F0A002 		bic	r2, r2, #160
 347 0016 DA60     		str	r2, [r3, #12]
 348              	.LVL24:
 349              	.L30:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 350              		.loc 1 623 0 discriminator 1
 351 0018 D968     		ldr	r1, [r3, #12]
 352              	.LVL25:
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 353              		.loc 1 624 0 discriminator 1
 354 001a 019A     		ldr	r2, [sp, #4]
 355 001c 0132     		adds	r2, r2, #1
 356              	.LVL26:
 357 001e 0192     		str	r2, [sp, #4]
 358              	.LVL27:
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 359              		.loc 1 625 0 discriminator 1
 360 0020 019A     		ldr	r2, [sp, #4]
 361              	.LVL28:
 362 0022 B2F5003F 		cmp	r2, #131072
 363 0026 054A     		ldr	r2, .L32
 364 0028 01D0     		beq	.L29
 365 002a 8906     		lsls	r1, r1, #26
 366              	.LVL29:
 367 002c F4D5     		bpl	.L30
 368              	.L29:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 369              		.loc 1 627 0
 370 002e D068     		ldr	r0, [r2, #12]
 371              	.LVL30:
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 372              		.loc 1 637 0
 373 0030 FF23     		movs	r3, #255
 374 0032 5362     		str	r3, [r2, #36]
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 375              		.loc 1 639 0
 376 0034 C0F34010 		ubfx	r0, r0, #5, #1
 377              	.LVL31:
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 378              		.loc 1 640 0
 379 0038 02B0     		add	sp, sp, #8
 380 003a 7047     		bx	lr
 381              	.L33:
 382              		.align	2
 383              	.L32:
 384 003c 00280040 		.word	1073752064
 385              		.cfi_endproc
 386              	.LFE116:
 388              		.section	.text.RTC_DeInit,"ax",%progbits
 389              		.align	1
 390              		.global	RTC_DeInit
 391              		.thumb
 392              		.thumb_func
 394              	RTC_DeInit:
 395              	.LFB110:
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 396              		.loc 1 368 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 8
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 401              	.LCFI3:
 402              		.cfi_def_cfa_offset 24
 403              		.cfi_offset 14, -4
 404              		.cfi_offset 5, -8
 405              		.cfi_offset 4, -12
 406              		.cfi_offset 2, -16
 407              		.cfi_offset 1, -20
 408              		.cfi_offset 0, -24
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 409              		.loc 1 374 0
 410 0002 1C4C     		ldr	r4, .L42
 411 0004 CA23     		movs	r3, #202
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 412              		.loc 1 369 0
 413 0006 0025     		movs	r5, #0
 414 0008 0195     		str	r5, [sp, #4]
 415              	.LVL32:
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 416              		.loc 1 374 0
 417 000a 6362     		str	r3, [r4, #36]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 418              		.loc 1 375 0
 419 000c 5323     		movs	r3, #83
 420 000e 6362     		str	r3, [r4, #36]
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 421              		.loc 1 378 0
 422 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 423 0014 0028     		cmp	r0, #0
 424 0016 29D0     		beq	.L35
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 425              		.loc 1 386 0
 426 0018 42F20113 		movw	r3, #8449
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 427              		.loc 1 385 0
 428 001c 2560     		str	r5, [r4, #0]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 429              		.loc 1 386 0
 430 001e 6360     		str	r3, [r4, #4]
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 431              		.loc 1 388 0
 432 0020 A368     		ldr	r3, [r4, #8]
 433 0022 03F00703 		and	r3, r3, #7
 434 0026 A360     		str	r3, [r4, #8]
 435              	.LVL33:
 436              	.L37:
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 437              		.loc 1 393 0 discriminator 1
 438 0028 E368     		ldr	r3, [r4, #12]
 439              	.LVL34:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 440              		.loc 1 394 0 discriminator 1
 441 002a 019A     		ldr	r2, [sp, #4]
 442 002c 0132     		adds	r2, r2, #1
 443              	.LVL35:
 444 002e 0192     		str	r2, [sp, #4]
 445              	.LVL36:
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 446              		.loc 1 395 0 discriminator 1
 447 0030 019A     		ldr	r2, [sp, #4]
 448              	.LVL37:
 449 0032 B2F5803F 		cmp	r2, #65536
 450 0036 01D0     		beq	.L36
 451 0038 5807     		lsls	r0, r3, #29
 452 003a F5D5     		bpl	.L37
 453              	.L36:
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 454              		.loc 1 397 0
 455 003c 0D4B     		ldr	r3, .L42
 456              	.LVL38:
 457 003e D868     		ldr	r0, [r3, #12]
 458 0040 10F00400 		ands	r0, r0, #4
 459 0044 12D0     		beq	.L35
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 460              		.loc 1 404 0
 461 0046 9A68     		ldr	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 462              		.loc 1 405 0
 463 0048 4FF6FF71 		movw	r1, #65535
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 464              		.loc 1 404 0
 465 004c 0022     		movs	r2, #0
 466 004e 9A60     		str	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 467              		.loc 1 405 0
 468 0050 5961     		str	r1, [r3, #20]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 469              		.loc 1 406 0
 470 0052 0949     		ldr	r1, .L42+4
 471 0054 1961     		str	r1, [r3, #16]
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 472              		.loc 1 407 0
 473 0056 9A61     		str	r2, [r3, #24]
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 474              		.loc 1 408 0
 475 0058 DA61     		str	r2, [r3, #28]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 476              		.loc 1 409 0
 477 005a 1A62     		str	r2, [r3, #32]
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 478              		.loc 1 412 0
 479 005c DA60     		str	r2, [r3, #12]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 480              		.loc 1 415 0
 481 005e 1A64     		str	r2, [r3, #64]
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 482              		.loc 1 417 0
 483 0060 FFF7FEFF 		bl	RTC_WaitForSynchro
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 484              		.loc 1 419 0
 485 0064 0028     		cmp	r0, #0
 486 0066 14BF     		ite	ne
 487 0068 0120     		movne	r0, #1
 488 006a 0020     		moveq	r0, #0
 489              	.L35:
 490              	.LVL39:
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 491              		.loc 1 429 0
 492 006c 014B     		ldr	r3, .L42
 493 006e FF22     		movs	r2, #255
 494 0070 5A62     		str	r2, [r3, #36]
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 495              		.loc 1 432 0
 496 0072 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 497              	.L43:
 498              		.align	2
 499              	.L42:
 500 0074 00280040 		.word	1073752064
 501 0078 FF007F00 		.word	8323327
 502              		.cfi_endproc
 503              	.LFE110:
 505              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 506              		.align	1
 507              		.global	RTC_RefClockCmd
 508              		.thumb
 509              		.thumb_func
 511              	RTC_RefClockCmd:
 512              	.LFB117:
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 513              		.loc 1 651 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              	.LVL40:
 518 0000 38B5     		push	{r3, r4, r5, lr}
 519              	.LCFI4:
 520              		.cfi_def_cfa_offset 16
 521              		.cfi_offset 14, -4
 522              		.cfi_offset 5, -8
 523              		.cfi_offset 4, -12
 524              		.cfi_offset 3, -16
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 525              		.loc 1 658 0
 526 0002 0B4C     		ldr	r4, .L50
 527 0004 CA23     		movs	r3, #202
 528 0006 6362     		str	r3, [r4, #36]
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 529              		.loc 1 659 0
 530 0008 5323     		movs	r3, #83
 531 000a 6362     		str	r3, [r4, #36]
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 532              		.loc 1 651 0
 533 000c 0546     		mov	r5, r0
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 534              		.loc 1 662 0
 535 000e FFF7FEFF 		bl	RTC_EnterInitMode
 536              	.LVL41:
 537 0012 50B1     		cbz	r0, .L45
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 538              		.loc 1 671 0
 539 0014 A368     		ldr	r3, [r4, #8]
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 540              		.loc 1 668 0
 541 0016 15B1     		cbz	r5, .L46
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 542              		.loc 1 671 0
 543 0018 43F01003 		orr	r3, r3, #16
 544 001c 01E0     		b	.L49
 545              	.L46:
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 546              		.loc 1 676 0
 547 001e 23F01003 		bic	r3, r3, #16
 548              	.L49:
 549 0022 A360     		str	r3, [r4, #8]
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 550              		.loc 1 679 0
 551 0024 FFF7FEFF 		bl	RTC_ExitInitMode
 552              	.LVL42:
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 553              		.loc 1 681 0
 554 0028 0120     		movs	r0, #1
 555              	.LVL43:
 556              	.L45:
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 557              		.loc 1 685 0
 558 002a FF23     		movs	r3, #255
 559 002c 6362     		str	r3, [r4, #36]
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 560              		.loc 1 688 0
 561 002e 38BD     		pop	{r3, r4, r5, pc}
 562              	.L51:
 563              		.align	2
 564              	.L50:
 565 0030 00280040 		.word	1073752064
 566              		.cfi_endproc
 567              	.LFE117:
 569              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 570              		.align	1
 571              		.global	RTC_BypassShadowCmd
 572              		.thumb
 573              		.thumb_func
 575              	RTC_BypassShadowCmd:
 576              	.LFB118:
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 577              		.loc 1 699 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 582              	.LVL44:
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 583              		.loc 1 704 0
 584 0000 074B     		ldr	r3, .L56
 585 0002 CA22     		movs	r2, #202
 586 0004 5A62     		str	r2, [r3, #36]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 587              		.loc 1 705 0
 588 0006 5322     		movs	r2, #83
 589 0008 5A62     		str	r2, [r3, #36]
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 590              		.loc 1 710 0
 591 000a 9A68     		ldr	r2, [r3, #8]
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 592              		.loc 1 707 0
 593 000c 10B1     		cbz	r0, .L53
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 594              		.loc 1 710 0
 595 000e 42F02002 		orr	r2, r2, #32
 596 0012 01E0     		b	.L55
 597              	.L53:
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 598              		.loc 1 715 0
 599 0014 02F0DF02 		and	r2, r2, #223
 600              	.L55:
 601 0018 9A60     		str	r2, [r3, #8]
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 602              		.loc 1 719 0
 603 001a FF22     		movs	r2, #255
 604 001c 5A62     		str	r2, [r3, #36]
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 605              		.loc 1 720 0
 606 001e 7047     		bx	lr
 607              	.L57:
 608              		.align	2
 609              	.L56:
 610 0020 00280040 		.word	1073752064
 611              		.cfi_endproc
 612              	.LFE118:
 614              		.section	.text.RTC_SetTime,"ax",%progbits
 615              		.align	1
 616              		.global	RTC_SetTime
 617              		.thumb
 618              		.thumb_func
 620              	RTC_SetTime:
 621              	.LFB119:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 622              		.loc 1 754 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              	.LVL45:
 627 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 628              	.LCFI5:
 629              		.cfi_def_cfa_offset 24
 630              		.cfi_offset 14, -4
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 6, -12
 633              		.cfi_offset 5, -16
 634              		.cfi_offset 4, -20
 635              		.cfi_offset 3, -24
 636 0002 204B     		ldr	r3, .L66
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 637              		.loc 1 754 0
 638 0004 0C46     		mov	r4, r1
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 639              		.loc 1 763 0
 640 0006 9B68     		ldr	r3, [r3, #8]
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 641              		.loc 1 761 0
 642 0008 B0B9     		cbnz	r0, .L59
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 643              		.loc 1 763 0
 644 000a 13F04003 		ands	r3, r3, #64
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 645              		.loc 1 770 0
 646 000e 08BF     		it	eq
 647 0010 CB70     		strbeq	r3, [r1, #3]
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 648              		.loc 1 803 0
 649 0012 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 650              	.LVL46:
 651 0014 FFF7FEFF 		bl	RTC_ByteToBcd2
 652              	.LVL47:
 653 0018 0746     		mov	r7, r0
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 654              		.loc 1 804 0
 655 001a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 656 001c FFF7FEFF 		bl	RTC_ByteToBcd2
 657 0020 0646     		mov	r6, r0
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 658              		.loc 1 805 0
 659 0022 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 660 0024 FFF7FEFF 		bl	RTC_ByteToBcd2
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 661              		.loc 1 806 0
 662 0028 E578     		ldrb	r5, [r4, #3]	@ zero_extendqisi2
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 663              		.loc 1 803 0
 664 002a 40EA0545 		orr	r5, r0, r5, lsl #16
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 665              		.loc 1 804 0
 666 002e 45EA0745 		orr	r5, r5, r7, lsl #16
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 667              		.loc 1 803 0
 668 0032 45EA0625 		orr	r5, r5, r6, lsl #8
 669              	.LVL48:
 670 0036 0DE0     		b	.L63
 671              	.LVL49:
 672              	.L59:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 673              		.loc 1 778 0
 674 0038 13F04003 		ands	r3, r3, #64
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 675              		.loc 1 797 0
 676 003c 4D78     		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 677              		.loc 1 786 0
 678 003e 08BF     		it	eq
 679 0040 CB70     		strbeq	r3, [r1, #3]
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 680              		.loc 1 796 0
 681 0042 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 682              		.loc 1 797 0
 683 0044 2D02     		lsls	r5, r5, #8
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 684              		.loc 1 796 0
 685 0046 45EA0345 		orr	r5, r5, r3, lsl #16
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 686              		.loc 1 798 0
 687 004a 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 688              		.loc 1 797 0
 689 004c 1D43     		orrs	r5, r5, r3
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 690              		.loc 1 799 0
 691 004e CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 692              		.loc 1 796 0
 693 0050 45EA0345 		orr	r5, r5, r3, lsl #16
 694              	.LVL50:
 695              	.L63:
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 696              		.loc 1 810 0
 697 0054 0B4C     		ldr	r4, .L66
 698              	.LVL51:
 699 0056 CA23     		movs	r3, #202
 700 0058 6362     		str	r3, [r4, #36]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 701              		.loc 1 811 0
 702 005a 5323     		movs	r3, #83
 703 005c 6362     		str	r3, [r4, #36]
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 704              		.loc 1 814 0
 705 005e FFF7FEFF 		bl	RTC_EnterInitMode
 706 0062 50B1     		cbz	r0, .L62
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 707              		.loc 1 821 0
 708 0064 084B     		ldr	r3, .L66+4
 709 0066 2B40     		ands	r3, r3, r5
 710 0068 2360     		str	r3, [r4, #0]
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 711              		.loc 1 824 0
 712 006a FFF7FEFF 		bl	RTC_ExitInitMode
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 713              		.loc 1 826 0
 714 006e FFF7FEFF 		bl	RTC_WaitForSynchro
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 715              		.loc 1 828 0
 716 0072 0028     		cmp	r0, #0
 717 0074 14BF     		ite	ne
 718 0076 0120     		movne	r0, #1
 719 0078 0020     		moveq	r0, #0
 720              	.L62:
 721              	.LVL52:
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 722              		.loc 1 837 0
 723 007a 024B     		ldr	r3, .L66
 724 007c FF22     		movs	r2, #255
 725 007e 5A62     		str	r2, [r3, #36]
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 726              		.loc 1 840 0
 727 0080 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 728              	.L67:
 729 0082 00BF     		.align	2
 730              	.L66:
 731 0084 00280040 		.word	1073752064
 732 0088 7F7F7F00 		.word	8355711
 733              		.cfi_endproc
 734              	.LFE119:
 736              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 737              		.align	1
 738              		.global	RTC_TimeStructInit
 739              		.thumb
 740              		.thumb_func
 742              	RTC_TimeStructInit:
 743              	.LFB120:
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 744              		.loc 1 850 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749              	.LVL53:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 750              		.loc 1 852 0
 751 0000 0023     		movs	r3, #0
 752 0002 C370     		strb	r3, [r0, #3]
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 753              		.loc 1 853 0
 754 0004 0370     		strb	r3, [r0, #0]
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 755              		.loc 1 854 0
 756 0006 4370     		strb	r3, [r0, #1]
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 757              		.loc 1 855 0
 758 0008 8370     		strb	r3, [r0, #2]
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 759              		.loc 1 856 0
 760 000a 7047     		bx	lr
 761              		.cfi_endproc
 762              	.LFE120:
 764              		.section	.text.RTC_GetTime,"ax",%progbits
 765              		.align	1
 766              		.global	RTC_GetTime
 767              		.thumb
 768              		.thumb_func
 770              	RTC_GetTime:
 771              	.LFB121:
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 772              		.loc 1 869 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              	.LVL54:
 777 0000 70B5     		push	{r4, r5, r6, lr}
 778              	.LCFI6:
 779              		.cfi_def_cfa_offset 16
 780              		.cfi_offset 14, -4
 781              		.cfi_offset 6, -8
 782              		.cfi_offset 5, -12
 783              		.cfi_offset 4, -16
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 784              		.loc 1 876 0
 785 0002 0F4A     		ldr	r2, .L71
 786 0004 1268     		ldr	r2, [r2, #0]
 787              	.LVL55:
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 788              		.loc 1 869 0
 789 0006 0346     		mov	r3, r0
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 790              		.loc 1 880 0
 791 0008 C2F30626 		ubfx	r6, r2, #8, #7
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 792              		.loc 1 879 0
 793 000c C2F30540 		ubfx	r0, r2, #16, #6
 794              	.LVL56:
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 795              		.loc 1 881 0
 796 0010 02F07F05 		and	r5, r2, #127
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 797              		.loc 1 882 0
 798 0014 02F48002 		and	r2, r2, #4194304
 799              	.LVL57:
 800 0018 120C     		lsrs	r2, r2, #16
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 801              		.loc 1 869 0
 802 001a 0C46     		mov	r4, r1
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 803              		.loc 1 879 0
 804 001c 0870     		strb	r0, [r1, #0]
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 805              		.loc 1 880 0
 806 001e 4E70     		strb	r6, [r1, #1]
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 807              		.loc 1 881 0
 808 0020 8D70     		strb	r5, [r1, #2]
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 809              		.loc 1 882 0
 810 0022 CA70     		strb	r2, [r1, #3]
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 811              		.loc 1 885 0
 812 0024 53B9     		cbnz	r3, .L69
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 813              		.loc 1 888 0
 814 0026 FFF7FEFF 		bl	RTC_Bcd2ToByte
 815              	.LVL58:
 816 002a 2070     		strb	r0, [r4, #0]
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 817              		.loc 1 889 0
 818 002c 3046     		mov	r0, r6
 819 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 820 0032 6070     		strb	r0, [r4, #1]
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 821              		.loc 1 890 0
 822 0034 2846     		mov	r0, r5
 823 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 824 003a A070     		strb	r0, [r4, #2]
 825              	.L69:
 826 003c 70BD     		pop	{r4, r5, r6, pc}
 827              	.L72:
 828 003e 00BF     		.align	2
 829              	.L71:
 830 0040 00280040 		.word	1073752064
 831              		.cfi_endproc
 832              	.LFE121:
 834              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 835              		.align	1
 836              		.global	RTC_GetSubSecond
 837              		.thumb
 838              		.thumb_func
 840              	RTC_GetSubSecond:
 841              	.LFB122:
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 842              		.loc 1 902 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846              		@ link register save eliminated.
 847              	.LVL59:
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 848              		.loc 1 906 0
 849 0000 014B     		ldr	r3, .L74
 850 0002 986A     		ldr	r0, [r3, #40]
 851              	.LVL60:
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 852              		.loc 1 909 0
 853 0004 5B68     		ldr	r3, [r3, #4]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 854              		.loc 1 912 0
 855 0006 7047     		bx	lr
 856              	.L75:
 857              		.align	2
 858              	.L74:
 859 0008 00280040 		.word	1073752064
 860              		.cfi_endproc
 861              	.LFE122:
 863              		.section	.text.RTC_SetDate,"ax",%progbits
 864              		.align	1
 865              		.global	RTC_SetDate
 866              		.thumb
 867              		.thumb_func
 869              	RTC_SetDate:
 870              	.LFB123:
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 871              		.loc 1 927 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              	.LVL61:
 876 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 877              	.LCFI7:
 878              		.cfi_def_cfa_offset 24
 879              		.cfi_offset 14, -4
 880              		.cfi_offset 7, -8
 881              		.cfi_offset 6, -12
 882              		.cfi_offset 5, -16
 883              		.cfi_offset 4, -20
 884              		.cfi_offset 3, -24
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 885              		.loc 1 927 0
 886 0002 0C46     		mov	r4, r1
 887 0004 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 888              		.loc 1 934 0
 889 0006 30B9     		cbnz	r0, .L77
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 890              		.loc 1 934 0 is_stmt 0 discriminator 1
 891 0008 DD06     		lsls	r5, r3, #27
 892 000a 26D5     		bpl	.L78
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 893              		.loc 1 936 0 is_stmt 1
 894 000c 23F01003 		bic	r3, r3, #16
 895 0010 0A33     		adds	r3, r3, #10
 896 0012 4B70     		strb	r3, [r1, #1]
 897 0014 21E0     		b	.L78
 898              	.L77:
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 899              		.loc 1 957 0
 900 0016 CD78     		ldrb	r5, [r1, #3]	@ zero_extendqisi2
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 901              		.loc 1 959 0
 902 0018 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 903              		.loc 1 958 0
 904 001a 1B02     		lsls	r3, r3, #8
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 905              		.loc 1 957 0
 906 001c 43EA0545 		orr	r5, r3, r5, lsl #16
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 907              		.loc 1 960 0
 908 0020 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 909              		.loc 1 958 0
 910 0022 1543     		orrs	r5, r5, r2
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 911              		.loc 1 957 0
 912 0024 45EA4335 		orr	r5, r5, r3, lsl #13
 913              	.LVL62:
 914              	.L80:
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 915              		.loc 1 971 0
 916 0028 154C     		ldr	r4, .L83
 917              	.LVL63:
 918 002a CA23     		movs	r3, #202
 919 002c 6362     		str	r3, [r4, #36]
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 920              		.loc 1 972 0
 921 002e 5323     		movs	r3, #83
 922 0030 6362     		str	r3, [r4, #36]
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 923              		.loc 1 975 0
 924 0032 FFF7FEFF 		bl	RTC_EnterInitMode
 925 0036 60B1     		cbz	r0, .L79
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 926              		.loc 1 982 0
 927 0038 25F07F45 		bic	r5, r5, #-16777216
 928              	.LVL64:
 929 003c 25F0C005 		bic	r5, r5, #192
 930 0040 6560     		str	r5, [r4, #4]
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 931              		.loc 1 985 0
 932 0042 FFF7FEFF 		bl	RTC_ExitInitMode
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 933              		.loc 1 987 0
 934 0046 FFF7FEFF 		bl	RTC_WaitForSynchro
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 935              		.loc 1 989 0
 936 004a 0028     		cmp	r0, #0
 937 004c 14BF     		ite	ne
 938 004e 0120     		movne	r0, #1
 939 0050 0020     		moveq	r0, #0
 940              	.L79:
 941              	.LVL65:
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 942              		.loc 1 997 0
 943 0052 0B4B     		ldr	r3, .L83
 944 0054 FF22     		movs	r2, #255
 945 0056 5A62     		str	r2, [r3, #36]
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 946              		.loc 1 1000 0
 947 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 948              	.LVL66:
 949              	.L78:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 950              		.loc 1 964 0
 951 005a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 952              	.LVL67:
 953 005c FFF7FEFF 		bl	RTC_ByteToBcd2
 954              	.LVL68:
 955 0060 0746     		mov	r7, r0
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 956              		.loc 1 965 0
 957 0062 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 958 0064 FFF7FEFF 		bl	RTC_ByteToBcd2
 959 0068 0646     		mov	r6, r0
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 960              		.loc 1 966 0
 961 006a A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 962 006c FFF7FEFF 		bl	RTC_ByteToBcd2
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 963              		.loc 1 967 0
 964 0070 2578     		ldrb	r5, [r4, #0]	@ zero_extendqisi2
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 965              		.loc 1 964 0
 966 0072 40EA4535 		orr	r5, r0, r5, lsl #13
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 967              		.loc 1 965 0
 968 0076 45EA0745 		orr	r5, r5, r7, lsl #16
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 969              		.loc 1 964 0
 970 007a 45EA0625 		orr	r5, r5, r6, lsl #8
 971              	.LVL69:
 972 007e D3E7     		b	.L80
 973              	.L84:
 974              		.align	2
 975              	.L83:
 976 0080 00280040 		.word	1073752064
 977              		.cfi_endproc
 978              	.LFE123:
 980              		.section	.text.RTC_DateStructInit,"ax",%progbits
 981              		.align	1
 982              		.global	RTC_DateStructInit
 983              		.thumb
 984              		.thumb_func
 986              	RTC_DateStructInit:
 987              	.LFB124:
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 988              		.loc 1 1010 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993              	.LVL70:
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 994              		.loc 1 1012 0
 995 0000 0123     		movs	r3, #1
 996 0002 0370     		strb	r3, [r0, #0]
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 997              		.loc 1 1013 0
 998 0004 8370     		strb	r3, [r0, #2]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 999              		.loc 1 1014 0
 1000 0006 4370     		strb	r3, [r0, #1]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1001              		.loc 1 1015 0
 1002 0008 0023     		movs	r3, #0
 1003 000a C370     		strb	r3, [r0, #3]
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1004              		.loc 1 1016 0
 1005 000c 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE124:
 1009              		.section	.text.RTC_GetDate,"ax",%progbits
 1010              		.align	1
 1011              		.global	RTC_GetDate
 1012              		.thumb
 1013              		.thumb_func
 1015              	RTC_GetDate:
 1016              	.LFB125:
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1017              		.loc 1 1029 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL71:
 1022 0000 70B5     		push	{r4, r5, r6, lr}
 1023              	.LCFI8:
 1024              		.cfi_def_cfa_offset 16
 1025              		.cfi_offset 14, -4
 1026              		.cfi_offset 6, -8
 1027              		.cfi_offset 5, -12
 1028              		.cfi_offset 4, -16
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1029              		.loc 1 1036 0
 1030 0002 0E4A     		ldr	r2, .L88
 1031 0004 5268     		ldr	r2, [r2, #4]
 1032              	.LVL72:
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1033              		.loc 1 1029 0
 1034 0006 0346     		mov	r3, r0
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1035              		.loc 1 1040 0
 1036 0008 C2F30426 		ubfx	r6, r2, #8, #5
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1037              		.loc 1 1039 0
 1038 000c C2F30740 		ubfx	r0, r2, #16, #8
 1039              	.LVL73:
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1040              		.loc 1 1041 0
 1041 0010 02F03F05 		and	r5, r2, #63
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1042              		.loc 1 1042 0
 1043 0014 C2F34232 		ubfx	r2, r2, #13, #3
 1044              	.LVL74:
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1045              		.loc 1 1029 0
 1046 0018 0C46     		mov	r4, r1
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1047              		.loc 1 1039 0
 1048 001a C870     		strb	r0, [r1, #3]
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1049              		.loc 1 1040 0
 1050 001c 4E70     		strb	r6, [r1, #1]
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1051              		.loc 1 1041 0
 1052 001e 8D70     		strb	r5, [r1, #2]
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1053              		.loc 1 1042 0
 1054 0020 0A70     		strb	r2, [r1, #0]
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1055              		.loc 1 1045 0
 1056 0022 53B9     		cbnz	r3, .L86
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1057              		.loc 1 1048 0
 1058 0024 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1059              	.LVL75:
 1060 0028 E070     		strb	r0, [r4, #3]
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1061              		.loc 1 1049 0
 1062 002a 3046     		mov	r0, r6
 1063 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1064 0030 6070     		strb	r0, [r4, #1]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1065              		.loc 1 1050 0
 1066 0032 2846     		mov	r0, r5
 1067 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1068 0038 A070     		strb	r0, [r4, #2]
 1069              	.L86:
 1070 003a 70BD     		pop	{r4, r5, r6, pc}
 1071              	.L89:
 1072              		.align	2
 1073              	.L88:
 1074 003c 00280040 		.word	1073752064
 1075              		.cfi_endproc
 1076              	.LFE125:
 1078              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1079              		.align	1
 1080              		.global	RTC_SetAlarm
 1081              		.thumb
 1082              		.thumb_func
 1084              	RTC_SetAlarm:
 1085              	.LFB126:
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1086              		.loc 1 1090 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              	.LVL76:
 1091 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1092              	.LCFI9:
 1093              		.cfi_def_cfa_offset 24
 1094              		.cfi_offset 14, -4
 1095              		.cfi_offset 8, -8
 1096              		.cfi_offset 7, -12
 1097              		.cfi_offset 6, -16
 1098              		.cfi_offset 5, -20
 1099              		.cfi_offset 4, -24
 1100 0004 244B     		ldr	r3, .L97
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1101              		.loc 1 1090 0
 1102 0006 0C46     		mov	r4, r1
 1103 0008 1546     		mov	r5, r2
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1104              		.loc 1 1101 0
 1105 000a 9B68     		ldr	r3, [r3, #8]
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1106              		.loc 1 1099 0
 1107 000c 08BB     		cbnz	r0, .L91
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1108              		.loc 1 1101 0
 1109 000e 13F04003 		ands	r3, r3, #64
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1110              		.loc 1 1108 0
 1111 0012 08BF     		it	eq
 1112 0014 D370     		strbeq	r3, [r2, #3]
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1113              		.loc 1 1165 0
 1114 0016 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 1115              	.LVL77:
 1116 0018 FFF7FEFF 		bl	RTC_ByteToBcd2
 1117              	.LVL78:
 1118 001c 0746     		mov	r7, r0
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1119              		.loc 1 1166 0
 1120 001e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1121 0020 FFF7FEFF 		bl	RTC_ByteToBcd2
 1122 0024 0646     		mov	r6, r0
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1123              		.loc 1 1167 0
 1124 0026 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1125 0028 FFF7FEFF 		bl	RTC_ByteToBcd2
 1126 002c 8046     		mov	r8, r0
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1127              		.loc 1 1169 0
 1128 002e 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 1129 0030 FFF7FEFF 		bl	RTC_ByteToBcd2
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1130              		.loc 1 1165 0
 1131 0034 6A68     		ldr	r2, [r5, #4]
 1132 0036 AB68     		ldr	r3, [r5, #8]
 1133 0038 1343     		orrs	r3, r3, r2
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1134              		.loc 1 1168 0
 1135 003a EA78     		ldrb	r2, [r5, #3]	@ zero_extendqisi2
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1136              		.loc 1 1166 0
 1137 003c 43EA0243 		orr	r3, r3, r2, lsl #16
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1138              		.loc 1 1167 0
 1139 0040 43EA0808 		orr	r8, r3, r8
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1140              		.loc 1 1168 0
 1141 0044 48EA0747 		orr	r7, r8, r7, lsl #16
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1142              		.loc 1 1169 0
 1143 0048 47EA0626 		orr	r6, r7, r6, lsl #8
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1144              		.loc 1 1165 0
 1145 004c 46EA0066 		orr	r6, r6, r0, lsl #24
 1146              	.LVL79:
 1147 0050 14E0     		b	.L96
 1148              	.LVL80:
 1149              	.L91:
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1150              		.loc 1 1125 0
 1151 0052 13F04003 		ands	r3, r3, #64
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1152              		.loc 1 1133 0
 1153 0056 08BF     		it	eq
 1154 0058 D370     		strbeq	r3, [r2, #3]
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1155              		.loc 1 1155 0
 1156 005a 5668     		ldr	r6, [r2, #4]
 1157 005c 9368     		ldr	r3, [r2, #8]
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1158              		.loc 1 1159 0
 1159 005e 177B     		ldrb	r7, [r2, #12]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1160              		.loc 1 1155 0
 1161 0060 1E43     		orrs	r6, r6, r3
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1162              		.loc 1 1157 0
 1163 0062 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1164              		.loc 1 1156 0
 1165 0064 1E43     		orrs	r6, r6, r3
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1166              		.loc 1 1155 0
 1167 0066 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1168              		.loc 1 1157 0
 1169 0068 46EA0346 		orr	r6, r6, r3, lsl #16
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1170              		.loc 1 1156 0
 1171 006c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1172              		.loc 1 1158 0
 1173 006e 46EA0326 		orr	r6, r6, r3, lsl #8
 1174 0072 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1175              		.loc 1 1159 0
 1176 0074 46EA0346 		orr	r6, r6, r3, lsl #16
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1177              		.loc 1 1155 0
 1178 0078 46EA0766 		orr	r6, r6, r7, lsl #24
 1179              	.LVL81:
 1180              	.L96:
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1181              		.loc 1 1175 0
 1182 007c 064B     		ldr	r3, .L97
 1183 007e CA22     		movs	r2, #202
 1184 0080 5A62     		str	r2, [r3, #36]
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1185              		.loc 1 1176 0
 1186 0082 5322     		movs	r2, #83
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1187              		.loc 1 1179 0
 1188 0084 B4F5807F 		cmp	r4, #256
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1189              		.loc 1 1176 0
 1190 0088 5A62     		str	r2, [r3, #36]
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1191              		.loc 1 1181 0
 1192 008a 0CBF     		ite	eq
 1193 008c DE61     		streq	r6, [r3, #28]
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1194              		.loc 1 1185 0
 1195 008e 1E62     		strne	r6, [r3, #32]
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1196              		.loc 1 1189 0
 1197 0090 FF22     		movs	r2, #255
 1198 0092 5A62     		str	r2, [r3, #36]
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1199              		.loc 1 1190 0
 1200 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1201              	.L98:
 1202              		.align	2
 1203              	.L97:
 1204 0098 00280040 		.word	1073752064
 1205              		.cfi_endproc
 1206              	.LFE126:
 1208              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1209              		.align	1
 1210              		.global	RTC_AlarmStructInit
 1211              		.thumb
 1212              		.thumb_func
 1214              	RTC_AlarmStructInit:
 1215              	.LFB127:
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1216              		.loc 1 1201 0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 1221              	.LVL82:
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1222              		.loc 1 1203 0
 1223 0000 0023     		movs	r3, #0
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1224              		.loc 1 1210 0
 1225 0002 0122     		movs	r2, #1
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1226              		.loc 1 1203 0
 1227 0004 C370     		strb	r3, [r0, #3]
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1228              		.loc 1 1204 0
 1229 0006 0370     		strb	r3, [r0, #0]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1230              		.loc 1 1205 0
 1231 0008 4370     		strb	r3, [r0, #1]
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1232              		.loc 1 1206 0
 1233 000a 8370     		strb	r3, [r0, #2]
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1234              		.loc 1 1209 0
 1235 000c 8360     		str	r3, [r0, #8]
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1236              		.loc 1 1210 0
 1237 000e 0273     		strb	r2, [r0, #12]
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1238              		.loc 1 1213 0
 1239 0010 4360     		str	r3, [r0, #4]
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1240              		.loc 1 1214 0
 1241 0012 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE127:
 1245              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1246              		.align	1
 1247              		.global	RTC_GetAlarm
 1248              		.thumb
 1249              		.thumb_func
 1251              	RTC_GetAlarm:
 1252              	.LFB128:
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1253              		.loc 1 1231 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              	.LVL83:
 1258 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1259              	.LCFI10:
 1260              		.cfi_def_cfa_offset 24
 1261              		.cfi_offset 14, -4
 1262              		.cfi_offset 7, -8
 1263              		.cfi_offset 6, -12
 1264              		.cfi_offset 5, -16
 1265              		.cfi_offset 4, -20
 1266              		.cfi_offset 3, -24
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1267              		.loc 1 1231 0
 1268 0002 1446     		mov	r4, r2
 1269 0004 164A     		ldr	r2, .L104
 1270              	.LVL84:
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1271              		.loc 1 1239 0
 1272 0006 B1F5807F 		cmp	r1, #256
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1273              		.loc 1 1241 0
 1274 000a 0CBF     		ite	eq
 1275 000c D269     		ldreq	r2, [r2, #28]
 1276              	.LVL85:
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1277              		.loc 1 1245 0
 1278 000e 126A     		ldrne	r2, [r2, #32]
 1279              	.LVL86:
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1280              		.loc 1 1255 0
 1281 0010 02F48001 		and	r1, r2, #4194304
 1282              	.LVL87:
 1283 0014 090C     		lsrs	r1, r1, #16
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1284              		.loc 1 1251 0
 1285 0016 C2F30627 		ubfx	r7, r2, #8, #7
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1286              		.loc 1 1253 0
 1287 001a 02F07F06 		and	r6, r2, #127
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1288              		.loc 1 1256 0
 1289 001e C2F30565 		ubfx	r5, r2, #24, #6
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1290              		.loc 1 1231 0
 1291 0022 0346     		mov	r3, r0
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1292              		.loc 1 1255 0
 1293 0024 E170     		strb	r1, [r4, #3]
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1294              		.loc 1 1249 0
 1295 0026 C2F30540 		ubfx	r0, r2, #16, #6
 1296              	.LVL88:
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1297              		.loc 1 1257 0
 1298 002a 02F08041 		and	r1, r2, #1073741824
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1299              		.loc 1 1258 0
 1300 002e 02F08032 		and	r2, r2, #-2139062144
 1301              	.LVL89:
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1302              		.loc 1 1249 0
 1303 0032 2070     		strb	r0, [r4, #0]
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1304              		.loc 1 1251 0
 1305 0034 6770     		strb	r7, [r4, #1]
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1306              		.loc 1 1253 0
 1307 0036 A670     		strb	r6, [r4, #2]
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1308              		.loc 1 1256 0
 1309 0038 2573     		strb	r5, [r4, #12]
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1310              		.loc 1 1257 0
 1311 003a A160     		str	r1, [r4, #8]
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1312              		.loc 1 1258 0
 1313 003c 6260     		str	r2, [r4, #4]
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1314              		.loc 1 1260 0
 1315 003e 73B9     		cbnz	r3, .L100
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1316              		.loc 1 1262 0
 1317 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1318              	.LVL90:
 1319 0044 2070     		strb	r0, [r4, #0]
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1320              		.loc 1 1264 0
 1321 0046 3846     		mov	r0, r7
 1322 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1323 004c 6070     		strb	r0, [r4, #1]
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1324              		.loc 1 1266 0
 1325 004e 3046     		mov	r0, r6
 1326 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1327 0054 A070     		strb	r0, [r4, #2]
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1328              		.loc 1 1268 0
 1329 0056 2846     		mov	r0, r5
 1330 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1331 005c 2073     		strb	r0, [r4, #12]
 1332              	.L100:
 1333 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1334              	.L105:
 1335              		.align	2
 1336              	.L104:
 1337 0060 00280040 		.word	1073752064
 1338              		.cfi_endproc
 1339              	.LFE128:
 1341              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1342              		.align	1
 1343              		.global	RTC_AlarmCmd
 1344              		.thumb
 1345              		.thumb_func
 1347              	RTC_AlarmCmd:
 1348              	.LFB129:
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1349              		.loc 1 1285 0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 8
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 1353              		@ link register save eliminated.
 1354              	.LVL91:
 1355 0000 82B0     		sub	sp, sp, #8
 1356              	.LCFI11:
 1357              		.cfi_def_cfa_offset 8
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1358              		.loc 1 1286 0
 1359 0002 0023     		movs	r3, #0
 1360 0004 0193     		str	r3, [sp, #4]
 1361              	.LVL92:
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1362              		.loc 1 1295 0
 1363 0006 114B     		ldr	r3, .L113
 1364 0008 CA22     		movs	r2, #202
 1365 000a 5A62     		str	r2, [r3, #36]
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1366              		.loc 1 1296 0
 1367 000c 5322     		movs	r2, #83
 1368 000e 5A62     		str	r2, [r3, #36]
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1369              		.loc 1 1301 0
 1370 0010 9A68     		ldr	r2, [r3, #8]
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1371              		.loc 1 1299 0
 1372 0012 19B1     		cbz	r1, .L107
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1373              		.loc 1 1301 0
 1374 0014 1043     		orrs	r0, r0, r2
 1375              	.LVL93:
 1376 0016 9860     		str	r0, [r3, #8]
 1377              	.LVL94:
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1378              		.loc 1 1303 0
 1379 0018 0120     		movs	r0, #1
 1380 001a 12E0     		b	.L108
 1381              	.LVL95:
 1382              	.L107:
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1383              		.loc 1 1308 0
 1384 001c 22EA0002 		bic	r2, r2, r0
 1385 0020 9A60     		str	r2, [r3, #8]
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1386              		.loc 1 1313 0
 1387 0022 000A     		lsrs	r0, r0, #8
 1388              	.LVL96:
 1389              	.L110:
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1390              		.loc 1 1313 0 is_stmt 0 discriminator 1
 1391 0024 DA68     		ldr	r2, [r3, #12]
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1392              		.loc 1 1314 0 is_stmt 1 discriminator 1
 1393 0026 0199     		ldr	r1, [sp, #4]
 1394 0028 0131     		adds	r1, r1, #1
 1395              	.LVL97:
 1396 002a 0191     		str	r1, [sp, #4]
 1397              	.LVL98:
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1398              		.loc 1 1315 0 discriminator 1
 1399 002c 0199     		ldr	r1, [sp, #4]
 1400              	.LVL99:
 1401 002e B1F5803F 		cmp	r1, #65536
 1402 0032 01D0     		beq	.L109
 1403 0034 1042     		tst	r0, r2
 1404 0036 F5D0     		beq	.L110
 1405              	.L109:
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1406              		.loc 1 1317 0
 1407 0038 044B     		ldr	r3, .L113
 1408 003a DB68     		ldr	r3, [r3, #12]
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1409              		.loc 1 1319 0
 1410 003c 1840     		ands	r0, r0, r3
 1411 003e 18BF     		it	ne
 1412 0040 0120     		movne	r0, #1
 1413              	.LVL100:
 1414              	.L108:
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1415              		.loc 1 1328 0
 1416 0042 024B     		ldr	r3, .L113
 1417 0044 FF22     		movs	r2, #255
 1418 0046 5A62     		str	r2, [r3, #36]
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1419              		.loc 1 1331 0
 1420 0048 02B0     		add	sp, sp, #8
 1421 004a 7047     		bx	lr
 1422              	.L114:
 1423              		.align	2
 1424              	.L113:
 1425 004c 00280040 		.word	1073752064
 1426              		.cfi_endproc
 1427              	.LFE129:
 1429              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1430              		.align	1
 1431              		.global	RTC_AlarmSubSecondConfig
 1432              		.thumb
 1433              		.thumb_func
 1435              	RTC_AlarmSubSecondConfig:
 1436              	.LFB130:
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1437              		.loc 1 1379 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441              	.LVL101:
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1442              		.loc 1 1388 0
 1443 0000 074B     		ldr	r3, .L118
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1444              		.loc 1 1379 0
 1445 0002 10B5     		push	{r4, lr}
 1446              	.LCFI12:
 1447              		.cfi_def_cfa_offset 8
 1448              		.cfi_offset 14, -4
 1449              		.cfi_offset 4, -8
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1450              		.loc 1 1388 0
 1451 0004 CA24     		movs	r4, #202
 1452 0006 5C62     		str	r4, [r3, #36]
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 1453              		.loc 1 1392 0
 1454 0008 1143     		orrs	r1, r1, r2
 1455              	.LVL102:
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1456              		.loc 1 1389 0
 1457 000a 5324     		movs	r4, #83
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1458              		.loc 1 1394 0
 1459 000c B0F5807F 		cmp	r0, #256
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1460              		.loc 1 1389 0
 1461 0010 5C62     		str	r4, [r3, #36]
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 1462              		.loc 1 1397 0
 1463 0012 0CBF     		ite	eq
 1464 0014 5964     		streq	r1, [r3, #68]
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 1465              		.loc 1 1402 0
 1466 0016 9964     		strne	r1, [r3, #72]
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 1467              		.loc 1 1406 0
 1468 0018 FF22     		movs	r2, #255
 1469              	.LVL103:
 1470 001a 5A62     		str	r2, [r3, #36]
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1471              		.loc 1 1408 0
 1472 001c 10BD     		pop	{r4, pc}
 1473              	.L119:
 1474 001e 00BF     		.align	2
 1475              	.L118:
 1476 0020 00280040 		.word	1073752064
 1477              		.cfi_endproc
 1478              	.LFE130:
 1480              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1481              		.align	1
 1482              		.global	RTC_GetAlarmSubSecond
 1483              		.thumb
 1484              		.thumb_func
 1486              	RTC_GetAlarmSubSecond:
 1487              	.LFB131:
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1488              		.loc 1 1420 0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
 1492              		@ link register save eliminated.
 1493              	.LVL104:
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1494              		.loc 1 1424 0
 1495 0000 B0F5807F 		cmp	r0, #256
 1496 0004 044B     		ldr	r3, .L123
 1497 0006 03D1     		bne	.L121
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 1498              		.loc 1 1426 0
 1499 0008 586C     		ldr	r0, [r3, #68]
 1500              	.LVL105:
 1501 000a 4004     		lsls	r0, r0, #17
 1502 000c 400C     		lsrs	r0, r0, #17
 1503              	.LVL106:
 1504 000e 7047     		bx	lr
 1505              	.LVL107:
 1506              	.L121:
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 1507              		.loc 1 1430 0
 1508 0010 986C     		ldr	r0, [r3, #72]
 1509              	.LVL108:
 1510 0012 4004     		lsls	r0, r0, #17
 1511 0014 400C     		lsrs	r0, r0, #17
 1512              	.LVL109:
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1513              		.loc 1 1434 0
 1514 0016 7047     		bx	lr
 1515              	.L124:
 1516              		.align	2
 1517              	.L123:
 1518 0018 00280040 		.word	1073752064
 1519              		.cfi_endproc
 1520              	.LFE131:
 1522              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1523              		.align	1
 1524              		.global	RTC_WakeUpClockConfig
 1525              		.thumb
 1526              		.thumb_func
 1528              	RTC_WakeUpClockConfig:
 1529              	.LFB132:
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1530              		.loc 1 1469 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535              	.LVL110:
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1536              		.loc 1 1474 0
 1537 0000 074B     		ldr	r3, .L126
 1538 0002 CA22     		movs	r2, #202
 1539 0004 5A62     		str	r2, [r3, #36]
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1540              		.loc 1 1475 0
 1541 0006 5322     		movs	r2, #83
 1542 0008 5A62     		str	r2, [r3, #36]
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1543              		.loc 1 1478 0
 1544 000a 9A68     		ldr	r2, [r3, #8]
 1545 000c 22F00702 		bic	r2, r2, #7
 1546 0010 9A60     		str	r2, [r3, #8]
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1547              		.loc 1 1481 0
 1548 0012 9A68     		ldr	r2, [r3, #8]
 1549 0014 1043     		orrs	r0, r0, r2
 1550              	.LVL111:
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1551              		.loc 1 1484 0
 1552 0016 FF22     		movs	r2, #255
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1553              		.loc 1 1481 0
 1554 0018 9860     		str	r0, [r3, #8]
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1555              		.loc 1 1484 0
 1556 001a 5A62     		str	r2, [r3, #36]
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1557              		.loc 1 1485 0
 1558 001c 7047     		bx	lr
 1559              	.L127:
 1560 001e 00BF     		.align	2
 1561              	.L126:
 1562 0020 00280040 		.word	1073752064
 1563              		.cfi_endproc
 1564              	.LFE132:
 1566              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1567              		.align	1
 1568              		.global	RTC_SetWakeUpCounter
 1569              		.thumb
 1570              		.thumb_func
 1572              	RTC_SetWakeUpCounter:
 1573              	.LFB133:
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1574              		.loc 1 1496 0
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 0
 1577              		@ frame_needed = 0, uses_anonymous_args = 0
 1578              		@ link register save eliminated.
 1579              	.LVL112:
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1580              		.loc 1 1501 0
 1581 0000 044B     		ldr	r3, .L129
 1582 0002 CA22     		movs	r2, #202
 1583 0004 5A62     		str	r2, [r3, #36]
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1584              		.loc 1 1502 0
 1585 0006 5322     		movs	r2, #83
 1586 0008 5A62     		str	r2, [r3, #36]
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1587              		.loc 1 1508 0
 1588 000a FF22     		movs	r2, #255
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 1589              		.loc 1 1505 0
 1590 000c 5861     		str	r0, [r3, #20]
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1591              		.loc 1 1508 0
 1592 000e 5A62     		str	r2, [r3, #36]
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1593              		.loc 1 1509 0
 1594 0010 7047     		bx	lr
 1595              	.L130:
 1596 0012 00BF     		.align	2
 1597              	.L129:
 1598 0014 00280040 		.word	1073752064
 1599              		.cfi_endproc
 1600              	.LFE133:
 1602              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1603              		.align	1
 1604              		.global	RTC_GetWakeUpCounter
 1605              		.thumb
 1606              		.thumb_func
 1608              	RTC_GetWakeUpCounter:
 1609              	.LFB134:
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1610              		.loc 1 1517 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614              		@ link register save eliminated.
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 1615              		.loc 1 1519 0
 1616 0000 014B     		ldr	r3, .L132
 1617 0002 5869     		ldr	r0, [r3, #20]
 1618 0004 80B2     		uxth	r0, r0
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1619              		.loc 1 1520 0
 1620 0006 7047     		bx	lr
 1621              	.L133:
 1622              		.align	2
 1623              	.L132:
 1624 0008 00280040 		.word	1073752064
 1625              		.cfi_endproc
 1626              	.LFE134:
 1628              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1629              		.align	1
 1630              		.global	RTC_WakeUpCmd
 1631              		.thumb
 1632              		.thumb_func
 1634              	RTC_WakeUpCmd:
 1635              	.LFB135:
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1636              		.loc 1 1529 0
 1637              		.cfi_startproc
 1638              		@ args = 0, pretend = 0, frame = 8
 1639              		@ frame_needed = 0, uses_anonymous_args = 0
 1640              		@ link register save eliminated.
 1641              	.LVL113:
 1642 0000 82B0     		sub	sp, sp, #8
 1643              	.LCFI13:
 1644              		.cfi_def_cfa_offset 8
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1645              		.loc 1 1530 0
 1646 0002 0023     		movs	r3, #0
 1647 0004 0193     		str	r3, [sp, #4]
 1648              	.LVL114:
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1649              		.loc 1 1538 0
 1650 0006 114B     		ldr	r3, .L141
 1651 0008 CA22     		movs	r2, #202
 1652 000a 5A62     		str	r2, [r3, #36]
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1653              		.loc 1 1539 0
 1654 000c 5322     		movs	r2, #83
 1655 000e 5A62     		str	r2, [r3, #36]
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1656              		.loc 1 1544 0
 1657 0010 9A68     		ldr	r2, [r3, #8]
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1658              		.loc 1 1541 0
 1659 0012 20B1     		cbz	r0, .L135
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1660              		.loc 1 1544 0
 1661 0014 42F48062 		orr	r2, r2, #1024
 1662 0018 9A60     		str	r2, [r3, #8]
 1663              	.LVL115:
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1664              		.loc 1 1545 0
 1665 001a 0120     		movs	r0, #1
 1666              	.LVL116:
 1667 001c 10E0     		b	.L136
 1668              	.LVL117:
 1669              	.L135:
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 1670              		.loc 1 1550 0
 1671 001e 22F48062 		bic	r2, r2, #1024
 1672 0022 9A60     		str	r2, [r3, #8]
 1673              	.LVL118:
 1674              	.L138:
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1675              		.loc 1 1554 0 discriminator 1
 1676 0024 DA68     		ldr	r2, [r3, #12]
 1677              	.LVL119:
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1678              		.loc 1 1555 0 discriminator 1
 1679 0026 0199     		ldr	r1, [sp, #4]
 1680 0028 0131     		adds	r1, r1, #1
 1681              	.LVL120:
 1682 002a 0191     		str	r1, [sp, #4]
 1683              	.LVL121:
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1684              		.loc 1 1556 0 discriminator 1
 1685 002c 0199     		ldr	r1, [sp, #4]
 1686              	.LVL122:
 1687 002e B1F5803F 		cmp	r1, #65536
 1688 0032 01D0     		beq	.L137
 1689 0034 5207     		lsls	r2, r2, #29
 1690              	.LVL123:
 1691 0036 F5D5     		bpl	.L138
 1692              	.L137:
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 1693              		.loc 1 1558 0
 1694 0038 044B     		ldr	r3, .L141
 1695 003a D868     		ldr	r0, [r3, #12]
 1696              	.LVL124:
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1697              		.loc 1 1560 0
 1698 003c C0F38000 		ubfx	r0, r0, #2, #1
 1699              	.LVL125:
 1700              	.L136:
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1701              		.loc 1 1569 0
 1702 0040 024B     		ldr	r3, .L141
 1703 0042 FF22     		movs	r2, #255
 1704 0044 5A62     		str	r2, [r3, #36]
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1705              		.loc 1 1572 0
 1706 0046 02B0     		add	sp, sp, #8
 1707 0048 7047     		bx	lr
 1708              	.L142:
 1709 004a 00BF     		.align	2
 1710              	.L141:
 1711 004c 00280040 		.word	1073752064
 1712              		.cfi_endproc
 1713              	.LFE135:
 1715              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1716              		.align	1
 1717              		.global	RTC_DayLightSavingConfig
 1718              		.thumb
 1719              		.thumb_func
 1721              	RTC_DayLightSavingConfig:
 1722              	.LFB136:
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1723              		.loc 1 1606 0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 0
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 1727              		@ link register save eliminated.
 1728              	.LVL126:
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1729              		.loc 1 1612 0
 1730 0000 074B     		ldr	r3, .L144
 1731 0002 CA22     		movs	r2, #202
 1732 0004 5A62     		str	r2, [r3, #36]
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1733              		.loc 1 1613 0
 1734 0006 5322     		movs	r2, #83
 1735 0008 5A62     		str	r2, [r3, #36]
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 1736              		.loc 1 1616 0
 1737 000a 9A68     		ldr	r2, [r3, #8]
 1738 000c 22F48022 		bic	r2, r2, #262144
 1739 0010 9A60     		str	r2, [r3, #8]
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1740              		.loc 1 1619 0
 1741 0012 9A68     		ldr	r2, [r3, #8]
 1742 0014 1043     		orrs	r0, r0, r2
 1743              	.LVL127:
 1744 0016 0843     		orrs	r0, r0, r1
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1745              		.loc 1 1622 0
 1746 0018 FF22     		movs	r2, #255
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1747              		.loc 1 1619 0
 1748 001a 9860     		str	r0, [r3, #8]
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1749              		.loc 1 1622 0
 1750 001c 5A62     		str	r2, [r3, #36]
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1751              		.loc 1 1623 0
 1752 001e 7047     		bx	lr
 1753              	.L145:
 1754              		.align	2
 1755              	.L144:
 1756 0020 00280040 		.word	1073752064
 1757              		.cfi_endproc
 1758              	.LFE136:
 1760              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1761              		.align	1
 1762              		.global	RTC_GetStoreOperation
 1763              		.thumb
 1764              		.thumb_func
 1766              	RTC_GetStoreOperation:
 1767              	.LFB137:
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1768              		.loc 1 1633 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1773              		.loc 1 1634 0
 1774 0000 024B     		ldr	r3, .L147
 1775 0002 9868     		ldr	r0, [r3, #8]
 1776 0004 00F48020 		and	r0, r0, #262144
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1777              		.loc 1 1635 0
 1778 0008 7047     		bx	lr
 1779              	.L148:
 1780 000a 00BF     		.align	2
 1781              	.L147:
 1782 000c 00280040 		.word	1073752064
 1783              		.cfi_endproc
 1784              	.LFE137:
 1786              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1787              		.align	1
 1788              		.global	RTC_OutputConfig
 1789              		.thumb
 1790              		.thumb_func
 1792              	RTC_OutputConfig:
 1793              	.LFB138:
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1794              		.loc 1 1672 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 0
 1797              		@ frame_needed = 0, uses_anonymous_args = 0
 1798              		@ link register save eliminated.
 1799              	.LVL128:
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1800              		.loc 1 1678 0
 1801 0000 074B     		ldr	r3, .L150
 1802 0002 CA22     		movs	r2, #202
 1803 0004 5A62     		str	r2, [r3, #36]
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1804              		.loc 1 1679 0
 1805 0006 5322     		movs	r2, #83
 1806 0008 5A62     		str	r2, [r3, #36]
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 1807              		.loc 1 1682 0
 1808 000a 9A68     		ldr	r2, [r3, #8]
 1809 000c 22F4E002 		bic	r2, r2, #7340032
 1810 0010 9A60     		str	r2, [r3, #8]
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1811              		.loc 1 1685 0
 1812 0012 9A68     		ldr	r2, [r3, #8]
 1813 0014 1043     		orrs	r0, r0, r2
 1814              	.LVL129:
 1815 0016 0843     		orrs	r0, r0, r1
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1816              		.loc 1 1688 0
 1817 0018 FF22     		movs	r2, #255
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1818              		.loc 1 1685 0
 1819 001a 9860     		str	r0, [r3, #8]
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1820              		.loc 1 1688 0
 1821 001c 5A62     		str	r2, [r3, #36]
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1822              		.loc 1 1689 0
 1823 001e 7047     		bx	lr
 1824              	.L151:
 1825              		.align	2
 1826              	.L150:
 1827 0020 00280040 		.word	1073752064
 1828              		.cfi_endproc
 1829              	.LFE138:
 1831              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 1832              		.align	1
 1833              		.global	RTC_CoarseCalibConfig
 1834              		.thumb
 1835              		.thumb_func
 1837              	RTC_CoarseCalibConfig:
 1838              	.LFB139:
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1839              		.loc 1 1726 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              	.LVL130:
 1844 0000 70B5     		push	{r4, r5, r6, lr}
 1845              	.LCFI14:
 1846              		.cfi_def_cfa_offset 16
 1847              		.cfi_offset 14, -4
 1848              		.cfi_offset 6, -8
 1849              		.cfi_offset 5, -12
 1850              		.cfi_offset 4, -16
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1851              		.loc 1 1734 0
 1852 0002 094D     		ldr	r5, .L155
 1853 0004 CA23     		movs	r3, #202
 1854 0006 6B62     		str	r3, [r5, #36]
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1855              		.loc 1 1735 0
 1856 0008 5323     		movs	r3, #83
 1857 000a 6B62     		str	r3, [r5, #36]
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1858              		.loc 1 1726 0
 1859 000c 0446     		mov	r4, r0
 1860 000e 0E46     		mov	r6, r1
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1861              		.loc 1 1738 0
 1862 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 1863              	.LVL131:
 1864 0014 20B1     		cbz	r0, .L153
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 1865              		.loc 1 1745 0
 1866 0016 3443     		orrs	r4, r4, r6
 1867              	.LVL132:
 1868 0018 AC61     		str	r4, [r5, #24]
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 1869              		.loc 1 1747 0
 1870 001a FFF7FEFF 		bl	RTC_ExitInitMode
 1871              	.LVL133:
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 1872              		.loc 1 1749 0
 1873 001e 0120     		movs	r0, #1
 1874              	.LVL134:
 1875              	.L153:
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1876              		.loc 1 1753 0
 1877 0020 FF23     		movs	r3, #255
 1878 0022 6B62     		str	r3, [r5, #36]
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1879              		.loc 1 1756 0
 1880 0024 70BD     		pop	{r4, r5, r6, pc}
 1881              	.L156:
 1882 0026 00BF     		.align	2
 1883              	.L155:
 1884 0028 00280040 		.word	1073752064
 1885              		.cfi_endproc
 1886              	.LFE139:
 1888              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 1889              		.align	1
 1890              		.global	RTC_CoarseCalibCmd
 1891              		.thumb
 1892              		.thumb_func
 1894              	RTC_CoarseCalibCmd:
 1895              	.LFB140:
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1896              		.loc 1 1767 0
 1897              		.cfi_startproc
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 0, uses_anonymous_args = 0
 1900              	.LVL135:
 1901 0000 38B5     		push	{r3, r4, r5, lr}
 1902              	.LCFI15:
 1903              		.cfi_def_cfa_offset 16
 1904              		.cfi_offset 14, -4
 1905              		.cfi_offset 5, -8
 1906              		.cfi_offset 4, -12
 1907              		.cfi_offset 3, -16
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1908              		.loc 1 1774 0
 1909 0002 0B4C     		ldr	r4, .L163
 1910 0004 CA23     		movs	r3, #202
 1911 0006 6362     		str	r3, [r4, #36]
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1912              		.loc 1 1775 0
 1913 0008 5323     		movs	r3, #83
 1914 000a 6362     		str	r3, [r4, #36]
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1915              		.loc 1 1767 0
 1916 000c 0546     		mov	r5, r0
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1917              		.loc 1 1778 0
 1918 000e FFF7FEFF 		bl	RTC_EnterInitMode
 1919              	.LVL136:
 1920 0012 50B1     		cbz	r0, .L158
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 1921              		.loc 1 1787 0
 1922 0014 A368     		ldr	r3, [r4, #8]
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 1923              		.loc 1 1784 0
 1924 0016 15B1     		cbz	r5, .L159
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 1925              		.loc 1 1787 0
 1926 0018 43F08003 		orr	r3, r3, #128
 1927 001c 01E0     		b	.L162
 1928              	.L159:
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 1929              		.loc 1 1792 0
 1930 001e 23F08003 		bic	r3, r3, #128
 1931              	.L162:
 1932 0022 A360     		str	r3, [r4, #8]
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 1933              		.loc 1 1795 0
 1934 0024 FFF7FEFF 		bl	RTC_ExitInitMode
 1935              	.LVL137:
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 1936              		.loc 1 1797 0
 1937 0028 0120     		movs	r0, #1
 1938              	.LVL138:
 1939              	.L158:
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1940              		.loc 1 1801 0
 1941 002a FF23     		movs	r3, #255
 1942 002c 6362     		str	r3, [r4, #36]
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1943              		.loc 1 1804 0
 1944 002e 38BD     		pop	{r3, r4, r5, pc}
 1945              	.L164:
 1946              		.align	2
 1947              	.L163:
 1948 0030 00280040 		.word	1073752064
 1949              		.cfi_endproc
 1950              	.LFE140:
 1952              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 1953              		.align	1
 1954              		.global	RTC_CalibOutputCmd
 1955              		.thumb
 1956              		.thumb_func
 1958              	RTC_CalibOutputCmd:
 1959              	.LFB141:
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1960              		.loc 1 1813 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 0
 1963              		@ frame_needed = 0, uses_anonymous_args = 0
 1964              		@ link register save eliminated.
 1965              	.LVL139:
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1966              		.loc 1 1818 0
 1967 0000 074B     		ldr	r3, .L169
 1968 0002 CA22     		movs	r2, #202
 1969 0004 5A62     		str	r2, [r3, #36]
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1970              		.loc 1 1819 0
 1971 0006 5322     		movs	r2, #83
 1972 0008 5A62     		str	r2, [r3, #36]
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 1973              		.loc 1 1824 0
 1974 000a 9A68     		ldr	r2, [r3, #8]
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1975              		.loc 1 1821 0
 1976 000c 10B1     		cbz	r0, .L166
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 1977              		.loc 1 1824 0
 1978 000e 42F40002 		orr	r2, r2, #8388608
 1979 0012 01E0     		b	.L168
 1980              	.L166:
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 1981              		.loc 1 1829 0
 1982 0014 22F40002 		bic	r2, r2, #8388608
 1983              	.L168:
 1984 0018 9A60     		str	r2, [r3, #8]
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1985              		.loc 1 1833 0
 1986 001a FF22     		movs	r2, #255
 1987 001c 5A62     		str	r2, [r3, #36]
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1988              		.loc 1 1834 0
 1989 001e 7047     		bx	lr
 1990              	.L170:
 1991              		.align	2
 1992              	.L169:
 1993 0020 00280040 		.word	1073752064
 1994              		.cfi_endproc
 1995              	.LFE141:
 1997              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 1998              		.align	1
 1999              		.global	RTC_CalibOutputConfig
 2000              		.thumb
 2001              		.thumb_func
 2003              	RTC_CalibOutputConfig:
 2004              	.LFB142:
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2005              		.loc 1 1845 0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 0
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
 2009              		@ link register save eliminated.
 2010              	.LVL140:
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2011              		.loc 1 1850 0
 2012 0000 074B     		ldr	r3, .L172
 2013 0002 CA22     		movs	r2, #202
 2014 0004 5A62     		str	r2, [r3, #36]
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2015              		.loc 1 1851 0
 2016 0006 5322     		movs	r2, #83
 2017 0008 5A62     		str	r2, [r3, #36]
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2018              		.loc 1 1854 0
 2019 000a 9A68     		ldr	r2, [r3, #8]
 2020 000c 22F40022 		bic	r2, r2, #524288
 2021 0010 9A60     		str	r2, [r3, #8]
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2022              		.loc 1 1857 0
 2023 0012 9A68     		ldr	r2, [r3, #8]
 2024 0014 1043     		orrs	r0, r0, r2
 2025              	.LVL141:
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2026              		.loc 1 1860 0
 2027 0016 FF22     		movs	r2, #255
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2028              		.loc 1 1857 0
 2029 0018 9860     		str	r0, [r3, #8]
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2030              		.loc 1 1860 0
 2031 001a 5A62     		str	r2, [r3, #36]
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2032              		.loc 1 1861 0
 2033 001c 7047     		bx	lr
 2034              	.L173:
 2035 001e 00BF     		.align	2
 2036              	.L172:
 2037 0020 00280040 		.word	1073752064
 2038              		.cfi_endproc
 2039              	.LFE142:
 2041              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2042              		.align	1
 2043              		.global	RTC_SmoothCalibConfig
 2044              		.thumb
 2045              		.thumb_func
 2047              	RTC_SmoothCalibConfig:
 2048              	.LFB143:
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2049              		.loc 1 1883 0
 2050              		.cfi_startproc
 2051              		@ args = 0, pretend = 0, frame = 0
 2052              		@ frame_needed = 0, uses_anonymous_args = 0
 2053              	.LVL142:
 2054 0000 30B5     		push	{r4, r5, lr}
 2055              	.LCFI16:
 2056              		.cfi_def_cfa_offset 12
 2057              		.cfi_offset 14, -4
 2058              		.cfi_offset 5, -8
 2059              		.cfi_offset 4, -12
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2060              		.loc 1 1893 0
 2061 0002 0E4B     		ldr	r3, .L180
 2062 0004 CA24     		movs	r4, #202
 2063 0006 5C62     		str	r4, [r3, #36]
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2064              		.loc 1 1894 0
 2065 0008 5324     		movs	r4, #83
 2066 000a 5C62     		str	r4, [r3, #36]
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2067              		.loc 1 1897 0
 2068 000c DC68     		ldr	r4, [r3, #12]
 2069 000e E403     		lsls	r4, r4, #15
 2070 0010 06D5     		bpl	.L175
 2071 0012 0B4C     		ldr	r4, .L180+4
 2072              	.LVL143:
 2073              	.L176:
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2074              		.loc 1 1900 0 discriminator 1
 2075 0014 DD68     		ldr	r5, [r3, #12]
 2076 0016 15F4803F 		tst	r5, #65536
 2077 001a 01D0     		beq	.L175
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2078              		.loc 1 1900 0 is_stmt 0 discriminator 2
 2079 001c 013C     		subs	r4, r4, #1
 2080 001e F9D1     		bne	.L176
 2081              	.L175:
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2082              		.loc 1 1907 0 is_stmt 1
 2083 0020 064B     		ldr	r3, .L180
 2084 0022 DC68     		ldr	r4, [r3, #12]
 2085 0024 14F4803F 		tst	r4, #65536
 2086 0028 04D1     		bne	.L178
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2087              		.loc 1 1910 0
 2088 002a 0143     		orrs	r1, r1, r0
 2089              	.LVL144:
 2090 002c 1143     		orrs	r1, r1, r2
 2091 002e D963     		str	r1, [r3, #60]
 2092              	.LVL145:
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2093              		.loc 1 1912 0
 2094 0030 0120     		movs	r0, #1
 2095              	.LVL146:
 2096 0032 00E0     		b	.L177
 2097              	.LVL147:
 2098              	.L178:
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2099              		.loc 1 1916 0
 2100 0034 0020     		movs	r0, #0
 2101              	.LVL148:
 2102              	.L177:
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2103              		.loc 1 1920 0
 2104 0036 FF22     		movs	r2, #255
 2105              	.LVL149:
 2106 0038 5A62     		str	r2, [r3, #36]
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2107              		.loc 1 1923 0
 2108 003a 30BD     		pop	{r4, r5, pc}
 2109              	.L181:
 2110              		.align	2
 2111              	.L180:
 2112 003c 00280040 		.word	1073752064
 2113 0040 01000200 		.word	131073
 2114              		.cfi_endproc
 2115              	.LFE143:
 2117              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2118              		.align	1
 2119              		.global	RTC_TimeStampCmd
 2120              		.thumb
 2121              		.thumb_func
 2123              	RTC_TimeStampCmd:
 2124              	.LFB144:
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2125              		.loc 1 1957 0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 0
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 2129              		@ link register save eliminated.
 2130              	.LVL150:
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2131              		.loc 1 1965 0
 2132 0000 084B     		ldr	r3, .L185
 2133 0002 9A68     		ldr	r2, [r3, #8]
 2134 0004 22F40062 		bic	r2, r2, #2048
 2135 0008 22F00802 		bic	r2, r2, #8
 2136              	.LVL151:
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2137              		.loc 1 1968 0
 2138 000c 09B1     		cbz	r1, .L183
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 2139              		.loc 1 1970 0
 2140 000e 42F40062 		orr	r2, r2, #2048
 2141              	.LVL152:
 2142              	.L183:
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 2143              		.loc 1 1974 0
 2144 0012 1043     		orrs	r0, r0, r2
 2145              	.LVL153:
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2146              		.loc 1 1978 0
 2147 0014 CA22     		movs	r2, #202
 2148 0016 5A62     		str	r2, [r3, #36]
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2149              		.loc 1 1979 0
 2150 0018 5322     		movs	r2, #83
 2151 001a 5A62     		str	r2, [r3, #36]
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2152              		.loc 1 1985 0
 2153 001c FF22     		movs	r2, #255
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 2154              		.loc 1 1982 0
 2155 001e 9860     		str	r0, [r3, #8]
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2156              		.loc 1 1985 0
 2157 0020 5A62     		str	r2, [r3, #36]
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2158              		.loc 1 1986 0
 2159 0022 7047     		bx	lr
 2160              	.L186:
 2161              		.align	2
 2162              	.L185:
 2163 0024 00280040 		.word	1073752064
 2164              		.cfi_endproc
 2165              	.LFE144:
 2167              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2168              		.align	1
 2169              		.global	RTC_GetTimeStamp
 2170              		.thumb
 2171              		.thumb_func
 2173              	RTC_GetTimeStamp:
 2174              	.LFB145:
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2175              		.loc 1 2002 0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              	.LVL154:
 2180 0000 38B5     		push	{r3, r4, r5, lr}
 2181              	.LCFI17:
 2182              		.cfi_def_cfa_offset 16
 2183              		.cfi_offset 14, -4
 2184              		.cfi_offset 5, -8
 2185              		.cfi_offset 4, -12
 2186              		.cfi_offset 3, -16
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2187              		.loc 1 2002 0
 2188 0002 1546     		mov	r5, r2
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2189              		.loc 1 2009 0
 2190 0004 1A4A     		ldr	r2, .L189
 2191              	.LVL155:
 2192 0006 136B     		ldr	r3, [r2, #48]
 2193              	.LVL156:
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2194              		.loc 1 2010 0
 2195 0008 526B     		ldr	r2, [r2, #52]
 2196              	.LVL157:
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2197              		.loc 1 2002 0
 2198 000a 0C46     		mov	r4, r1
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 2199              		.loc 1 2013 0
 2200 000c C3F30541 		ubfx	r1, r3, #16, #6
 2201              	.LVL158:
 2202 0010 2170     		strb	r1, [r4, #0]
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2203              		.loc 1 2014 0
 2204 0012 C3F30621 		ubfx	r1, r3, #8, #7
 2205 0016 6170     		strb	r1, [r4, #1]
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2206              		.loc 1 2015 0
 2207 0018 03F07F01 		and	r1, r3, #127
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2208              		.loc 1 2016 0
 2209 001c 03F48003 		and	r3, r3, #4194304
 2210              	.LVL159:
 2211 0020 1B0C     		lsrs	r3, r3, #16
 2212 0022 E370     		strb	r3, [r4, #3]
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2213              		.loc 1 2019 0
 2214 0024 0023     		movs	r3, #0
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2215              		.loc 1 2015 0
 2216 0026 A170     		strb	r1, [r4, #2]
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2217              		.loc 1 2019 0
 2218 0028 EB70     		strb	r3, [r5, #3]
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2219              		.loc 1 2020 0
 2220 002a C2F30423 		ubfx	r3, r2, #8, #5
 2221 002e 6B70     		strb	r3, [r5, #1]
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2222              		.loc 1 2021 0
 2223 0030 02F03F03 		and	r3, r2, #63
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2224              		.loc 1 2022 0
 2225 0034 C2F34232 		ubfx	r2, r2, #13, #3
 2226              	.LVL160:
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2227              		.loc 1 2021 0
 2228 0038 AB70     		strb	r3, [r5, #2]
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2229              		.loc 1 2022 0
 2230 003a 2A70     		strb	r2, [r5, #0]
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2231              		.loc 1 2025 0
 2232 003c B8B9     		cbnz	r0, .L187
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 2233              		.loc 1 2028 0
 2234 003e 2078     		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 2235              	.LVL161:
 2236 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2237 0044 2070     		strb	r0, [r4, #0]
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2238              		.loc 1 2029 0
 2239 0046 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2240 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2241 004c 6070     		strb	r0, [r4, #1]
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2242              		.loc 1 2030 0
 2243 004e A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2244 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2245 0054 A070     		strb	r0, [r4, #2]
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 2246              		.loc 1 2033 0
 2247 0056 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2248 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2249 005c 6870     		strb	r0, [r5, #1]
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2250              		.loc 1 2034 0
 2251 005e A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2252 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2253 0064 A870     		strb	r0, [r5, #2]
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2254              		.loc 1 2035 0
 2255 0066 2878     		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 2256 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2257 006c 2870     		strb	r0, [r5, #0]
 2258              	.L187:
 2259 006e 38BD     		pop	{r3, r4, r5, pc}
 2260              	.L190:
 2261              		.align	2
 2262              	.L189:
 2263 0070 00280040 		.word	1073752064
 2264              		.cfi_endproc
 2265              	.LFE145:
 2267              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2268              		.align	1
 2269              		.global	RTC_GetTimeStampSubSecond
 2270              		.thumb
 2271              		.thumb_func
 2273              	RTC_GetTimeStampSubSecond:
 2274              	.LFB146:
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2275              		.loc 1 2045 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
 2279              		@ link register save eliminated.
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 2280              		.loc 1 2047 0
 2281 0000 014B     		ldr	r3, .L192
 2282 0002 986B     		ldr	r0, [r3, #56]
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2283              		.loc 1 2048 0
 2284 0004 7047     		bx	lr
 2285              	.L193:
 2286 0006 00BF     		.align	2
 2287              	.L192:
 2288 0008 00280040 		.word	1073752064
 2289              		.cfi_endproc
 2290              	.LFE146:
 2292              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2293              		.align	1
 2294              		.global	RTC_TamperTriggerConfig
 2295              		.thumb
 2296              		.thumb_func
 2298              	RTC_TamperTriggerConfig:
 2299              	.LFB147:
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2300              		.loc 1 2080 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 0
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 2304              		@ link register save eliminated.
 2305              	.LVL162:
 2306 0000 044B     		ldr	r3, .L198
 2307 0002 4000     		lsls	r0, r0, #1
 2308              	.LVL163:
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2309              		.loc 1 2088 0
 2310 0004 1A6C     		ldr	r2, [r3, #64]
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 2311              		.loc 1 2085 0
 2312 0006 11B9     		cbnz	r1, .L195
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2313              		.loc 1 2088 0
 2314 0008 22EA0000 		bic	r0, r2, r0
 2315 000c 00E0     		b	.L197
 2316              	.L195:
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 2317              		.loc 1 2093 0
 2318 000e 1043     		orrs	r0, r0, r2
 2319              	.L197:
 2320 0010 1864     		str	r0, [r3, #64]
 2321 0012 7047     		bx	lr
 2322              	.L199:
 2323              		.align	2
 2324              	.L198:
 2325 0014 00280040 		.word	1073752064
 2326              		.cfi_endproc
 2327              	.LFE147:
 2329              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2330              		.align	1
 2331              		.global	RTC_TamperCmd
 2332              		.thumb
 2333              		.thumb_func
 2335              	RTC_TamperCmd:
 2336              	.LFB148:
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2337              		.loc 1 2106 0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 0
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 2341              		@ link register save eliminated.
 2342              	.LVL164:
 2343 0000 044B     		ldr	r3, .L204
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2344              		.loc 1 2114 0
 2345 0002 1A6C     		ldr	r2, [r3, #64]
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2346              		.loc 1 2111 0
 2347 0004 09B1     		cbz	r1, .L201
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2348              		.loc 1 2114 0
 2349 0006 1043     		orrs	r0, r0, r2
 2350              	.LVL165:
 2351 0008 01E0     		b	.L203
 2352              	.LVL166:
 2353              	.L201:
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 2354              		.loc 1 2119 0
 2355 000a 22EA0000 		bic	r0, r2, r0
 2356              	.LVL167:
 2357              	.L203:
 2358 000e 1864     		str	r0, [r3, #64]
 2359 0010 7047     		bx	lr
 2360              	.L205:
 2361 0012 00BF     		.align	2
 2362              	.L204:
 2363 0014 00280040 		.word	1073752064
 2364              		.cfi_endproc
 2365              	.LFE148:
 2367              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2368              		.align	1
 2369              		.global	RTC_TamperFilterConfig
 2370              		.thumb
 2371              		.thumb_func
 2373              	RTC_TamperFilterConfig:
 2374              	.LFB149:
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2375              		.loc 1 2137 0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 2379              		@ link register save eliminated.
 2380              	.LVL168:
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 2381              		.loc 1 2142 0
 2382 0000 044B     		ldr	r3, .L207
 2383 0002 1A6C     		ldr	r2, [r3, #64]
 2384 0004 22F4C052 		bic	r2, r2, #6144
 2385 0008 1A64     		str	r2, [r3, #64]
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 2386              		.loc 1 2145 0
 2387 000a 1A6C     		ldr	r2, [r3, #64]
 2388 000c 1043     		orrs	r0, r0, r2
 2389              	.LVL169:
 2390 000e 1864     		str	r0, [r3, #64]
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2391              		.loc 1 2146 0
 2392 0010 7047     		bx	lr
 2393              	.L208:
 2394 0012 00BF     		.align	2
 2395              	.L207:
 2396 0014 00280040 		.word	1073752064
 2397              		.cfi_endproc
 2398              	.LFE149:
 2400              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2401              		.align	1
 2402              		.global	RTC_TamperSamplingFreqConfig
 2403              		.thumb
 2404              		.thumb_func
 2406              	RTC_TamperSamplingFreqConfig:
 2407              	.LFB150:
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2408              		.loc 1 2171 0
 2409              		.cfi_startproc
 2410              		@ args = 0, pretend = 0, frame = 0
 2411              		@ frame_needed = 0, uses_anonymous_args = 0
 2412              		@ link register save eliminated.
 2413              	.LVL170:
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 2414              		.loc 1 2176 0
 2415 0000 044B     		ldr	r3, .L210
 2416 0002 1A6C     		ldr	r2, [r3, #64]
 2417 0004 22F4E062 		bic	r2, r2, #1792
 2418 0008 1A64     		str	r2, [r3, #64]
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 2419              		.loc 1 2179 0
 2420 000a 1A6C     		ldr	r2, [r3, #64]
 2421 000c 1043     		orrs	r0, r0, r2
 2422              	.LVL171:
 2423 000e 1864     		str	r0, [r3, #64]
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2424              		.loc 1 2180 0
 2425 0010 7047     		bx	lr
 2426              	.L211:
 2427 0012 00BF     		.align	2
 2428              	.L210:
 2429 0014 00280040 		.word	1073752064
 2430              		.cfi_endproc
 2431              	.LFE150:
 2433              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2434              		.align	1
 2435              		.global	RTC_TamperPinsPrechargeDuration
 2436              		.thumb
 2437              		.thumb_func
 2439              	RTC_TamperPinsPrechargeDuration:
 2440              	.LFB151:
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2441              		.loc 1 2194 0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 2446              	.LVL172:
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 2447              		.loc 1 2199 0
 2448 0000 044B     		ldr	r3, .L213
 2449 0002 1A6C     		ldr	r2, [r3, #64]
 2450 0004 22F4C042 		bic	r2, r2, #24576
 2451 0008 1A64     		str	r2, [r3, #64]
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 2452              		.loc 1 2202 0
 2453 000a 1A6C     		ldr	r2, [r3, #64]
 2454 000c 1043     		orrs	r0, r0, r2
 2455              	.LVL173:
 2456 000e 1864     		str	r0, [r3, #64]
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2457              		.loc 1 2203 0
 2458 0010 7047     		bx	lr
 2459              	.L214:
 2460 0012 00BF     		.align	2
 2461              	.L213:
 2462 0014 00280040 		.word	1073752064
 2463              		.cfi_endproc
 2464              	.LFE151:
 2466              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2467              		.align	1
 2468              		.global	RTC_TimeStampOnTamperDetectionCmd
 2469              		.thumb
 2470              		.thumb_func
 2472              	RTC_TimeStampOnTamperDetectionCmd:
 2473              	.LFB152:
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2474              		.loc 1 2214 0
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 0
 2477              		@ frame_needed = 0, uses_anonymous_args = 0
 2478              		@ link register save eliminated.
 2479              	.LVL174:
 2480 0000 044B     		ldr	r3, .L219
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2481              		.loc 1 2221 0
 2482 0002 1A6C     		ldr	r2, [r3, #64]
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2483              		.loc 1 2218 0
 2484 0004 10B1     		cbz	r0, .L216
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2485              		.loc 1 2221 0
 2486 0006 42F08002 		orr	r2, r2, #128
 2487 000a 01E0     		b	.L218
 2488              	.L216:
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 2489              		.loc 1 2226 0
 2490 000c 22F08002 		bic	r2, r2, #128
 2491              	.L218:
 2492 0010 1A64     		str	r2, [r3, #64]
 2493 0012 7047     		bx	lr
 2494              	.L220:
 2495              		.align	2
 2496              	.L219:
 2497 0014 00280040 		.word	1073752064
 2498              		.cfi_endproc
 2499              	.LFE152:
 2501              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2502              		.align	1
 2503              		.global	RTC_TamperPullUpCmd
 2504              		.thumb
 2505              		.thumb_func
 2507              	RTC_TamperPullUpCmd:
 2508              	.LFB153:
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2509              		.loc 1 2237 0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 0
 2512              		@ frame_needed = 0, uses_anonymous_args = 0
 2513              		@ link register save eliminated.
 2514              	.LVL175:
 2515 0000 044B     		ldr	r3, .L225
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2516              		.loc 1 2244 0
 2517 0002 1A6C     		ldr	r2, [r3, #64]
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 2518              		.loc 1 2241 0
 2519 0004 10B1     		cbz	r0, .L222
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2520              		.loc 1 2244 0
 2521 0006 22F40042 		bic	r2, r2, #32768
 2522 000a 01E0     		b	.L224
 2523              	.L222:
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 2524              		.loc 1 2249 0
 2525 000c 42F40042 		orr	r2, r2, #32768
 2526              	.L224:
 2527 0010 1A64     		str	r2, [r3, #64]
 2528 0012 7047     		bx	lr
 2529              	.L226:
 2530              		.align	2
 2531              	.L225:
 2532 0014 00280040 		.word	1073752064
 2533              		.cfi_endproc
 2534              	.LFE153:
 2536              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2537              		.align	1
 2538              		.global	RTC_WriteBackupRegister
 2539              		.thumb
 2540              		.thumb_func
 2542              	RTC_WriteBackupRegister:
 2543              	.LFB154:
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2544              		.loc 1 2278 0
 2545              		.cfi_startproc
 2546              		@ args = 0, pretend = 0, frame = 8
 2547              		@ frame_needed = 0, uses_anonymous_args = 0
 2548              		@ link register save eliminated.
 2549              	.LVL176:
 2550 0000 82B0     		sub	sp, sp, #8
 2551              	.LCFI18:
 2552              		.cfi_def_cfa_offset 8
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2553              		.loc 1 2279 0
 2554 0002 0023     		movs	r3, #0
 2555 0004 0193     		str	r3, [sp, #4]
 2556              	.LVL177:
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2557              		.loc 1 2284 0
 2558 0006 054B     		ldr	r3, .L228
 2559 0008 0193     		str	r3, [sp, #4]
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2560              		.loc 1 2285 0
 2561 000a 019B     		ldr	r3, [sp, #4]
 2562 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2563              	.LVL178:
 2564 0010 0190     		str	r0, [sp, #4]
 2565              	.LVL179:
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 2566              		.loc 1 2288 0
 2567 0012 019B     		ldr	r3, [sp, #4]
 2568 0014 1960     		str	r1, [r3, #0]
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2569              		.loc 1 2289 0
 2570 0016 02B0     		add	sp, sp, #8
 2571 0018 7047     		bx	lr
 2572              	.L229:
 2573 001a 00BF     		.align	2
 2574              	.L228:
 2575 001c 50280040 		.word	1073752144
 2576              		.cfi_endproc
 2577              	.LFE154:
 2579              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2580              		.align	1
 2581              		.global	RTC_ReadBackupRegister
 2582              		.thumb
 2583              		.thumb_func
 2585              	RTC_ReadBackupRegister:
 2586              	.LFB155:
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2587              		.loc 1 2299 0
 2588              		.cfi_startproc
 2589              		@ args = 0, pretend = 0, frame = 8
 2590              		@ frame_needed = 0, uses_anonymous_args = 0
 2591              		@ link register save eliminated.
 2592              	.LVL180:
 2593 0000 82B0     		sub	sp, sp, #8
 2594              	.LCFI19:
 2595              		.cfi_def_cfa_offset 8
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2596              		.loc 1 2300 0
 2597 0002 0023     		movs	r3, #0
 2598 0004 0193     		str	r3, [sp, #4]
 2599              	.LVL181:
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2600              		.loc 1 2305 0
 2601 0006 054B     		ldr	r3, .L231
 2602 0008 0193     		str	r3, [sp, #4]
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2603              		.loc 1 2306 0
 2604 000a 019B     		ldr	r3, [sp, #4]
 2605 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2606              	.LVL182:
 2607 0010 0190     		str	r0, [sp, #4]
 2608              	.LVL183:
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 2609              		.loc 1 2309 0
 2610 0012 019B     		ldr	r3, [sp, #4]
 2611 0014 1868     		ldr	r0, [r3, #0]
 2612              	.LVL184:
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2613              		.loc 1 2310 0
 2614 0016 02B0     		add	sp, sp, #8
 2615 0018 7047     		bx	lr
 2616              	.L232:
 2617 001a 00BF     		.align	2
 2618              	.L231:
 2619 001c 50280040 		.word	1073752144
 2620              		.cfi_endproc
 2621              	.LFE155:
 2623              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 2624              		.align	1
 2625              		.global	RTC_TamperPinSelection
 2626              		.thumb
 2627              		.thumb_func
 2629              	RTC_TamperPinSelection:
 2630              	.LFB156:
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2631              		.loc 1 2339 0
 2632              		.cfi_startproc
 2633              		@ args = 0, pretend = 0, frame = 0
 2634              		@ frame_needed = 0, uses_anonymous_args = 0
 2635              		@ link register save eliminated.
 2636              	.LVL185:
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 2637              		.loc 1 2343 0
 2638 0000 044B     		ldr	r3, .L234
 2639 0002 1A6C     		ldr	r2, [r3, #64]
 2640 0004 22F48032 		bic	r2, r2, #65536
 2641 0008 1A64     		str	r2, [r3, #64]
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2642              		.loc 1 2344 0
 2643 000a 1A6C     		ldr	r2, [r3, #64]
 2644 000c 1043     		orrs	r0, r0, r2
 2645              	.LVL186:
 2646 000e 1864     		str	r0, [r3, #64]
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2647              		.loc 1 2345 0
 2648 0010 7047     		bx	lr
 2649              	.L235:
 2650 0012 00BF     		.align	2
 2651              	.L234:
 2652 0014 00280040 		.word	1073752064
 2653              		.cfi_endproc
 2654              	.LFE156:
 2656              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 2657              		.align	1
 2658              		.global	RTC_TimeStampPinSelection
 2659              		.thumb
 2660              		.thumb_func
 2662              	RTC_TimeStampPinSelection:
 2663              	.LFB157:
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2664              		.loc 1 2356 0
 2665              		.cfi_startproc
 2666              		@ args = 0, pretend = 0, frame = 0
 2667              		@ frame_needed = 0, uses_anonymous_args = 0
 2668              		@ link register save eliminated.
 2669              	.LVL187:
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 2670              		.loc 1 2360 0
 2671 0000 044B     		ldr	r3, .L237
 2672 0002 1A6C     		ldr	r2, [r3, #64]
 2673 0004 22F40032 		bic	r2, r2, #131072
 2674 0008 1A64     		str	r2, [r3, #64]
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2675              		.loc 1 2361 0
 2676 000a 1A6C     		ldr	r2, [r3, #64]
 2677 000c 1043     		orrs	r0, r0, r2
 2678              	.LVL188:
 2679 000e 1864     		str	r0, [r3, #64]
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2680              		.loc 1 2362 0
 2681 0010 7047     		bx	lr
 2682              	.L238:
 2683 0012 00BF     		.align	2
 2684              	.L237:
 2685 0014 00280040 		.word	1073752064
 2686              		.cfi_endproc
 2687              	.LFE157:
 2689              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2690              		.align	1
 2691              		.global	RTC_OutputTypeConfig
 2692              		.thumb
 2693              		.thumb_func
 2695              	RTC_OutputTypeConfig:
 2696              	.LFB158:
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2697              		.loc 1 2375 0
 2698              		.cfi_startproc
 2699              		@ args = 0, pretend = 0, frame = 0
 2700              		@ frame_needed = 0, uses_anonymous_args = 0
 2701              		@ link register save eliminated.
 2702              	.LVL189:
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 2703              		.loc 1 2379 0
 2704 0000 044B     		ldr	r3, .L240
 2705 0002 1A6C     		ldr	r2, [r3, #64]
 2706 0004 22F48022 		bic	r2, r2, #262144
 2707 0008 1A64     		str	r2, [r3, #64]
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2708              		.loc 1 2380 0
 2709 000a 1A6C     		ldr	r2, [r3, #64]
 2710 000c 1043     		orrs	r0, r0, r2
 2711              	.LVL190:
 2712 000e 1864     		str	r0, [r3, #64]
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2713              		.loc 1 2381 0
 2714 0010 7047     		bx	lr
 2715              	.L241:
 2716 0012 00BF     		.align	2
 2717              	.L240:
 2718 0014 00280040 		.word	1073752064
 2719              		.cfi_endproc
 2720              	.LFE158:
 2722              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 2723              		.align	1
 2724              		.global	RTC_SynchroShiftConfig
 2725              		.thumb
 2726              		.thumb_func
 2728              	RTC_SynchroShiftConfig:
 2729              	.LFB159:
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2730              		.loc 1 2413 0
 2731              		.cfi_startproc
 2732              		@ args = 0, pretend = 0, frame = 0
 2733              		@ frame_needed = 0, uses_anonymous_args = 0
 2734              	.LVL191:
 2735 0000 10B5     		push	{r4, lr}
 2736              	.LCFI20:
 2737              		.cfi_def_cfa_offset 8
 2738              		.cfi_offset 14, -4
 2739              		.cfi_offset 4, -8
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2740              		.loc 1 2422 0
 2741 0002 144B     		ldr	r3, .L250
 2742 0004 CA22     		movs	r2, #202
 2743 0006 5A62     		str	r2, [r3, #36]
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2744              		.loc 1 2423 0
 2745 0008 5322     		movs	r2, #83
 2746 000a 5A62     		str	r2, [r3, #36]
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 2747              		.loc 1 2426 0
 2748 000c DA68     		ldr	r2, [r3, #12]
 2749 000e 1207     		lsls	r2, r2, #28
 2750 0010 07D5     		bpl	.L243
 2751 0012 41F20102 		movw	r2, #4097
 2752              	.LVL192:
 2753              	.L244:
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2754              		.loc 1 2429 0 discriminator 1
 2755 0016 DC68     		ldr	r4, [r3, #12]
 2756 0018 14F0080F 		tst	r4, #8
 2757 001c 01D0     		beq	.L243
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2758              		.loc 1 2429 0 is_stmt 0 discriminator 2
 2759 001e 013A     		subs	r2, r2, #1
 2760 0020 F9D1     		bne	.L244
 2761              	.L243:
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2762              		.loc 1 2436 0 is_stmt 1
 2763 0022 0C4B     		ldr	r3, .L250
 2764 0024 DA68     		ldr	r2, [r3, #12]
 2765 0026 12F00802 		ands	r2, r2, #8
 2766 002a 0ED1     		bne	.L246
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 2767              		.loc 1 2439 0
 2768 002c 9C68     		ldr	r4, [r3, #8]
 2769 002e 14F0100F 		tst	r4, #16
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2770              		.loc 1 2455 0
 2771 0032 18BF     		it	ne
 2772 0034 1046     		movne	r0, r2
 2773              	.LVL193:
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 2774              		.loc 1 2439 0
 2775 0036 09D1     		bne	.L245
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 2776              		.loc 1 2442 0
 2777 0038 0843     		orrs	r0, r0, r1
 2778 003a D862     		str	r0, [r3, #44]
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 2779              		.loc 1 2444 0
 2780 003c FFF7FEFF 		bl	RTC_WaitForSynchro
 2781              	.LVL194:
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 2782              		.loc 1 2446 0
 2783 0040 0028     		cmp	r0, #0
 2784 0042 14BF     		ite	ne
 2785 0044 0120     		movne	r0, #1
 2786 0046 0020     		moveq	r0, #0
 2787 0048 00E0     		b	.L245
 2788              	.LVL195:
 2789              	.L246:
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2790              		.loc 1 2460 0
 2791 004a 0020     		movs	r0, #0
 2792              	.LVL196:
 2793              	.L245:
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2794              		.loc 1 2464 0
 2795 004c 014B     		ldr	r3, .L250
 2796 004e FF22     		movs	r2, #255
 2797 0050 5A62     		str	r2, [r3, #36]
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2798              		.loc 1 2467 0
 2799 0052 10BD     		pop	{r4, pc}
 2800              	.L251:
 2801              		.align	2
 2802              	.L250:
 2803 0054 00280040 		.word	1073752064
 2804              		.cfi_endproc
 2805              	.LFE159:
 2807              		.section	.text.RTC_ITConfig,"ax",%progbits
 2808              		.align	1
 2809              		.global	RTC_ITConfig
 2810              		.thumb
 2811              		.thumb_func
 2813              	RTC_ITConfig:
 2814              	.LFB160:
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2815              		.loc 1 2532 0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
 2819              		@ link register save eliminated.
 2820              	.LVL197:
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2821              		.loc 1 2538 0
 2822 0000 0E4B     		ldr	r3, .L256
 2823 0002 CA22     		movs	r2, #202
 2824 0004 5A62     		str	r2, [r3, #36]
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2825              		.loc 1 2539 0
 2826 0006 5322     		movs	r2, #83
 2827 0008 5A62     		str	r2, [r3, #36]
 2828 000a 20F00402 		bic	r2, r0, #4
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2829              		.loc 1 2541 0
 2830 000e 39B1     		cbz	r1, .L253
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 2831              		.loc 1 2544 0
 2832 0010 9968     		ldr	r1, [r3, #8]
 2833              	.LVL198:
 2834 0012 0A43     		orrs	r2, r2, r1
 2835 0014 9A60     		str	r2, [r3, #8]
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 2836              		.loc 1 2546 0
 2837 0016 1A6C     		ldr	r2, [r3, #64]
 2838 0018 00F00400 		and	r0, r0, #4
 2839              	.LVL199:
 2840 001c 1043     		orrs	r0, r0, r2
 2841 001e 08E0     		b	.L255
 2842              	.LVL200:
 2843              	.L253:
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 2844              		.loc 1 2551 0
 2845 0020 9968     		ldr	r1, [r3, #8]
 2846              	.LVL201:
 2847 0022 21EA0202 		bic	r2, r1, r2
 2848 0026 9A60     		str	r2, [r3, #8]
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 2849              		.loc 1 2553 0
 2850 0028 1A6C     		ldr	r2, [r3, #64]
 2851 002a 00F00400 		and	r0, r0, #4
 2852              	.LVL202:
 2853 002e 22EA0000 		bic	r0, r2, r0
 2854              	.L255:
 2855 0032 1864     		str	r0, [r3, #64]
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2856              		.loc 1 2556 0
 2857 0034 014B     		ldr	r3, .L256
 2858 0036 FF22     		movs	r2, #255
 2859 0038 5A62     		str	r2, [r3, #36]
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2860              		.loc 1 2557 0
 2861 003a 7047     		bx	lr
 2862              	.L257:
 2863              		.align	2
 2864              	.L256:
 2865 003c 00280040 		.word	1073752064
 2866              		.cfi_endproc
 2867              	.LFE160:
 2869              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 2870              		.align	1
 2871              		.global	RTC_GetFlagStatus
 2872              		.thumb
 2873              		.thumb_func
 2875              	RTC_GetFlagStatus:
 2876              	.LFB161:
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2877              		.loc 1 2578 0
 2878              		.cfi_startproc
 2879              		@ args = 0, pretend = 0, frame = 0
 2880              		@ frame_needed = 0, uses_anonymous_args = 0
 2881              		@ link register save eliminated.
 2882              	.LVL203:
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 2883              		.loc 1 2586 0
 2884 0000 044B     		ldr	r3, .L259
 2885 0002 DA68     		ldr	r2, [r3, #12]
 2886              	.LVL204:
 2887 0004 43F67773 		movw	r3, #16247
 2888 0008 1340     		ands	r3, r3, r2
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 2889              		.loc 1 2591 0
 2890 000a 0342     		tst	r3, r0
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 2891              		.loc 1 2597 0
 2892 000c 0CBF     		ite	eq
 2893 000e 0020     		moveq	r0, #0
 2894 0010 0120     		movne	r0, #1
 2895              	.LVL205:
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2896              		.loc 1 2598 0
 2897 0012 7047     		bx	lr
 2898              	.L260:
 2899              		.align	2
 2900              	.L259:
 2901 0014 00280040 		.word	1073752064
 2902              		.cfi_endproc
 2903              	.LFE161:
 2905              		.section	.text.RTC_ClearFlag,"ax",%progbits
 2906              		.align	1
 2907              		.global	RTC_ClearFlag
 2908              		.thumb
 2909              		.thumb_func
 2911              	RTC_ClearFlag:
 2912              	.LFB162:
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2913              		.loc 1 2614 0
 2914              		.cfi_startproc
 2915              		@ args = 0, pretend = 0, frame = 0
 2916              		@ frame_needed = 0, uses_anonymous_args = 0
 2917              		@ link register save eliminated.
 2918              	.LVL206:
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 2919              		.loc 1 2619 0
 2920 0000 054B     		ldr	r3, .L262
 2921 0002 DA68     		ldr	r2, [r3, #12]
 2922 0004 80B2     		uxth	r0, r0
 2923              	.LVL207:
 2924 0006 40F08000 		orr	r0, r0, #128
 2925 000a 02F08002 		and	r2, r2, #128
 2926 000e 62EA0000 		orn	r0, r2, r0
 2927 0012 D860     		str	r0, [r3, #12]
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2928              		.loc 1 2620 0
 2929 0014 7047     		bx	lr
 2930              	.L263:
 2931 0016 00BF     		.align	2
 2932              	.L262:
 2933 0018 00280040 		.word	1073752064
 2934              		.cfi_endproc
 2935              	.LFE162:
 2937              		.section	.text.RTC_GetITStatus,"ax",%progbits
 2938              		.align	1
 2939              		.global	RTC_GetITStatus
 2940              		.thumb
 2941              		.thumb_func
 2943              	RTC_GetITStatus:
 2944              	.LFB163:
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2945              		.loc 1 2634 0
 2946              		.cfi_startproc
 2947              		@ args = 0, pretend = 0, frame = 0
 2948              		@ frame_needed = 0, uses_anonymous_args = 0
 2949              	.LVL208:
 2950 0000 10B5     		push	{r4, lr}
 2951              	.LCFI21:
 2952              		.cfi_def_cfa_offset 8
 2953              		.cfi_offset 14, -4
 2954              		.cfi_offset 4, -8
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 2955              		.loc 1 2642 0
 2956 0002 0A4B     		ldr	r3, .L267
 2957 0004 1A6C     		ldr	r2, [r3, #64]
 2958              	.LVL209:
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 2959              		.loc 1 2645 0
 2960 0006 9C68     		ldr	r4, [r3, #8]
 2961              	.LVL210:
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 2962              		.loc 1 2648 0
 2963 0008 D968     		ldr	r1, [r3, #12]
 2964              	.LVL211:
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 2965              		.loc 1 2642 0
 2966 000a 02F00402 		and	r2, r2, #4
 2967              	.LVL212:
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 2968              		.loc 1 2645 0
 2969 000e 02EAD032 		and	r2, r2, r0, lsr #15
 2970 0012 00EA0403 		and	r3, r0, r4
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 2971              		.loc 1 2651 0
 2972 0016 1343     		orrs	r3, r2, r3
 2973              	.LVL213:
 2974 0018 06D0     		beq	.L266
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 2975              		.loc 1 2648 0 discriminator 1
 2976 001a 8BB2     		uxth	r3, r1
 2977              	.LVL214:
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
 2978              		.loc 1 2633 0 discriminator 1
 2979 001c 13EA1013 		ands	r3, r3, r0, lsr #4
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 2980              		.loc 1 2653 0 discriminator 1
 2981 0020 0CBF     		ite	eq
 2982 0022 0020     		moveq	r0, #0
 2983 0024 0120     		movne	r0, #1
 2984              	.LVL215:
 2985 0026 10BD     		pop	{r4, pc}
 2986              	.LVL216:
 2987              	.L266:
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 2988              		.loc 1 2657 0
 2989 0028 1846     		mov	r0, r3
 2990              	.LVL217:
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2991              		.loc 1 2660 0
 2992 002a 10BD     		pop	{r4, pc}
 2993              	.L268:
 2994              		.align	2
 2995              	.L267:
 2996 002c 00280040 		.word	1073752064
 2997              		.cfi_endproc
 2998              	.LFE163:
 3000              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3001              		.align	1
 3002              		.global	RTC_ClearITPendingBit
 3003              		.thumb
 3004              		.thumb_func
 3006              	RTC_ClearITPendingBit:
 3007              	.LFB164:
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3008              		.loc 1 2674 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 0
 3011              		@ frame_needed = 0, uses_anonymous_args = 0
 3012              		@ link register save eliminated.
 3013              	.LVL218:
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3014              		.loc 1 2684 0
 3015 0000 054B     		ldr	r3, .L270
 3016 0002 DA68     		ldr	r2, [r3, #12]
 3017 0004 C0F30F10 		ubfx	r0, r0, #4, #16
 3018              	.LVL219:
 3019 0008 40F08000 		orr	r0, r0, #128
 3020 000c 02F08002 		and	r2, r2, #128
 3021 0010 62EA0000 		orn	r0, r2, r0
 3022 0014 D860     		str	r0, [r3, #12]
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3023              		.loc 1 2685 0
 3024 0016 7047     		bx	lr
 3025              	.L271:
 3026              		.align	2
 3027              	.L270:
 3028 0018 00280040 		.word	1073752064
 3029              		.cfi_endproc
 3030              	.LFE164:
 3032              		.text
 3033              	.Letext0:
 3034              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 3035              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 3036              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 3037              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
  C:\Temp\cczTkmmg.s:19     .text.RTC_ByteToBcd2:00000000 $t
  C:\Temp\cczTkmmg.s:23     .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
  C:\Temp\cczTkmmg.s:64     .text.RTC_Bcd2ToByte:00000000 $t
  C:\Temp\cczTkmmg.s:68     .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
  C:\Temp\cczTkmmg.s:90     .text.RTC_StructInit:00000000 $t
  C:\Temp\cczTkmmg.s:95     .text.RTC_StructInit:00000000 RTC_StructInit
  C:\Temp\cczTkmmg.s:114    .text.RTC_WriteProtectionCmd:00000000 $t
  C:\Temp\cczTkmmg.s:119    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
  C:\Temp\cczTkmmg.s:143    .text.RTC_WriteProtectionCmd:00000010 $d
  C:\Temp\cczTkmmg.s:148    .text.RTC_EnterInitMode:00000000 $t
  C:\Temp\cczTkmmg.s:153    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
  C:\Temp\cczTkmmg.s:216    .text.RTC_EnterInitMode:00000038 $d
  C:\Temp\cczTkmmg.s:221    .text.RTC_ExitInitMode:00000000 $t
  C:\Temp\cczTkmmg.s:226    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
  C:\Temp\cczTkmmg.s:243    .text.RTC_ExitInitMode:0000000c $d
  C:\Temp\cczTkmmg.s:248    .text.RTC_Init:00000000 $t
  C:\Temp\cczTkmmg.s:253    .text.RTC_Init:00000000 RTC_Init
  C:\Temp\cczTkmmg.s:313    .text.RTC_Init:00000040 $d
  C:\Temp\cczTkmmg.s:318    .text.RTC_WaitForSynchro:00000000 $t
  C:\Temp\cczTkmmg.s:323    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
  C:\Temp\cczTkmmg.s:384    .text.RTC_WaitForSynchro:0000003c $d
  C:\Temp\cczTkmmg.s:389    .text.RTC_DeInit:00000000 $t
  C:\Temp\cczTkmmg.s:394    .text.RTC_DeInit:00000000 RTC_DeInit
  C:\Temp\cczTkmmg.s:500    .text.RTC_DeInit:00000074 $d
  C:\Temp\cczTkmmg.s:506    .text.RTC_RefClockCmd:00000000 $t
  C:\Temp\cczTkmmg.s:511    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
  C:\Temp\cczTkmmg.s:565    .text.RTC_RefClockCmd:00000030 $d
  C:\Temp\cczTkmmg.s:570    .text.RTC_BypassShadowCmd:00000000 $t
  C:\Temp\cczTkmmg.s:575    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
  C:\Temp\cczTkmmg.s:610    .text.RTC_BypassShadowCmd:00000020 $d
  C:\Temp\cczTkmmg.s:615    .text.RTC_SetTime:00000000 $t
  C:\Temp\cczTkmmg.s:620    .text.RTC_SetTime:00000000 RTC_SetTime
  C:\Temp\cczTkmmg.s:731    .text.RTC_SetTime:00000084 $d
  C:\Temp\cczTkmmg.s:737    .text.RTC_TimeStructInit:00000000 $t
  C:\Temp\cczTkmmg.s:742    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
  C:\Temp\cczTkmmg.s:765    .text.RTC_GetTime:00000000 $t
  C:\Temp\cczTkmmg.s:770    .text.RTC_GetTime:00000000 RTC_GetTime
  C:\Temp\cczTkmmg.s:830    .text.RTC_GetTime:00000040 $d
  C:\Temp\cczTkmmg.s:835    .text.RTC_GetSubSecond:00000000 $t
  C:\Temp\cczTkmmg.s:840    .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
  C:\Temp\cczTkmmg.s:859    .text.RTC_GetSubSecond:00000008 $d
  C:\Temp\cczTkmmg.s:864    .text.RTC_SetDate:00000000 $t
  C:\Temp\cczTkmmg.s:869    .text.RTC_SetDate:00000000 RTC_SetDate
  C:\Temp\cczTkmmg.s:976    .text.RTC_SetDate:00000080 $d
  C:\Temp\cczTkmmg.s:981    .text.RTC_DateStructInit:00000000 $t
  C:\Temp\cczTkmmg.s:986    .text.RTC_DateStructInit:00000000 RTC_DateStructInit
  C:\Temp\cczTkmmg.s:1010   .text.RTC_GetDate:00000000 $t
  C:\Temp\cczTkmmg.s:1015   .text.RTC_GetDate:00000000 RTC_GetDate
  C:\Temp\cczTkmmg.s:1074   .text.RTC_GetDate:0000003c $d
  C:\Temp\cczTkmmg.s:1079   .text.RTC_SetAlarm:00000000 $t
  C:\Temp\cczTkmmg.s:1084   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
  C:\Temp\cczTkmmg.s:1204   .text.RTC_SetAlarm:00000098 $d
  C:\Temp\cczTkmmg.s:1209   .text.RTC_AlarmStructInit:00000000 $t
  C:\Temp\cczTkmmg.s:1214   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
  C:\Temp\cczTkmmg.s:1246   .text.RTC_GetAlarm:00000000 $t
  C:\Temp\cczTkmmg.s:1251   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
  C:\Temp\cczTkmmg.s:1337   .text.RTC_GetAlarm:00000060 $d
  C:\Temp\cczTkmmg.s:1342   .text.RTC_AlarmCmd:00000000 $t
  C:\Temp\cczTkmmg.s:1347   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
  C:\Temp\cczTkmmg.s:1425   .text.RTC_AlarmCmd:0000004c $d
  C:\Temp\cczTkmmg.s:1430   .text.RTC_AlarmSubSecondConfig:00000000 $t
  C:\Temp\cczTkmmg.s:1435   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
  C:\Temp\cczTkmmg.s:1476   .text.RTC_AlarmSubSecondConfig:00000020 $d
  C:\Temp\cczTkmmg.s:1481   .text.RTC_GetAlarmSubSecond:00000000 $t
  C:\Temp\cczTkmmg.s:1486   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
  C:\Temp\cczTkmmg.s:1518   .text.RTC_GetAlarmSubSecond:00000018 $d
  C:\Temp\cczTkmmg.s:1523   .text.RTC_WakeUpClockConfig:00000000 $t
  C:\Temp\cczTkmmg.s:1528   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
  C:\Temp\cczTkmmg.s:1562   .text.RTC_WakeUpClockConfig:00000020 $d
  C:\Temp\cczTkmmg.s:1567   .text.RTC_SetWakeUpCounter:00000000 $t
  C:\Temp\cczTkmmg.s:1572   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
  C:\Temp\cczTkmmg.s:1598   .text.RTC_SetWakeUpCounter:00000014 $d
  C:\Temp\cczTkmmg.s:1603   .text.RTC_GetWakeUpCounter:00000000 $t
  C:\Temp\cczTkmmg.s:1608   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
  C:\Temp\cczTkmmg.s:1624   .text.RTC_GetWakeUpCounter:00000008 $d
  C:\Temp\cczTkmmg.s:1629   .text.RTC_WakeUpCmd:00000000 $t
  C:\Temp\cczTkmmg.s:1634   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
  C:\Temp\cczTkmmg.s:1711   .text.RTC_WakeUpCmd:0000004c $d
  C:\Temp\cczTkmmg.s:1716   .text.RTC_DayLightSavingConfig:00000000 $t
  C:\Temp\cczTkmmg.s:1721   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
  C:\Temp\cczTkmmg.s:1756   .text.RTC_DayLightSavingConfig:00000020 $d
  C:\Temp\cczTkmmg.s:1761   .text.RTC_GetStoreOperation:00000000 $t
  C:\Temp\cczTkmmg.s:1766   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
  C:\Temp\cczTkmmg.s:1782   .text.RTC_GetStoreOperation:0000000c $d
  C:\Temp\cczTkmmg.s:1787   .text.RTC_OutputConfig:00000000 $t
  C:\Temp\cczTkmmg.s:1792   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
  C:\Temp\cczTkmmg.s:1827   .text.RTC_OutputConfig:00000020 $d
  C:\Temp\cczTkmmg.s:1832   .text.RTC_CoarseCalibConfig:00000000 $t
  C:\Temp\cczTkmmg.s:1837   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
  C:\Temp\cczTkmmg.s:1884   .text.RTC_CoarseCalibConfig:00000028 $d
  C:\Temp\cczTkmmg.s:1889   .text.RTC_CoarseCalibCmd:00000000 $t
  C:\Temp\cczTkmmg.s:1894   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
  C:\Temp\cczTkmmg.s:1948   .text.RTC_CoarseCalibCmd:00000030 $d
  C:\Temp\cczTkmmg.s:1953   .text.RTC_CalibOutputCmd:00000000 $t
  C:\Temp\cczTkmmg.s:1958   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
  C:\Temp\cczTkmmg.s:1993   .text.RTC_CalibOutputCmd:00000020 $d
  C:\Temp\cczTkmmg.s:1998   .text.RTC_CalibOutputConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2003   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
  C:\Temp\cczTkmmg.s:2037   .text.RTC_CalibOutputConfig:00000020 $d
  C:\Temp\cczTkmmg.s:2042   .text.RTC_SmoothCalibConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2047   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
  C:\Temp\cczTkmmg.s:2112   .text.RTC_SmoothCalibConfig:0000003c $d
  C:\Temp\cczTkmmg.s:2118   .text.RTC_TimeStampCmd:00000000 $t
  C:\Temp\cczTkmmg.s:2123   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
  C:\Temp\cczTkmmg.s:2163   .text.RTC_TimeStampCmd:00000024 $d
  C:\Temp\cczTkmmg.s:2168   .text.RTC_GetTimeStamp:00000000 $t
  C:\Temp\cczTkmmg.s:2173   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
  C:\Temp\cczTkmmg.s:2263   .text.RTC_GetTimeStamp:00000070 $d
  C:\Temp\cczTkmmg.s:2268   .text.RTC_GetTimeStampSubSecond:00000000 $t
  C:\Temp\cczTkmmg.s:2273   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
  C:\Temp\cczTkmmg.s:2288   .text.RTC_GetTimeStampSubSecond:00000008 $d
  C:\Temp\cczTkmmg.s:2293   .text.RTC_TamperTriggerConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2298   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
  C:\Temp\cczTkmmg.s:2325   .text.RTC_TamperTriggerConfig:00000014 $d
  C:\Temp\cczTkmmg.s:2330   .text.RTC_TamperCmd:00000000 $t
  C:\Temp\cczTkmmg.s:2335   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
  C:\Temp\cczTkmmg.s:2363   .text.RTC_TamperCmd:00000014 $d
  C:\Temp\cczTkmmg.s:2368   .text.RTC_TamperFilterConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2373   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
  C:\Temp\cczTkmmg.s:2396   .text.RTC_TamperFilterConfig:00000014 $d
  C:\Temp\cczTkmmg.s:2401   .text.RTC_TamperSamplingFreqConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2406   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
  C:\Temp\cczTkmmg.s:2429   .text.RTC_TamperSamplingFreqConfig:00000014 $d
  C:\Temp\cczTkmmg.s:2434   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
  C:\Temp\cczTkmmg.s:2439   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
  C:\Temp\cczTkmmg.s:2462   .text.RTC_TamperPinsPrechargeDuration:00000014 $d
  C:\Temp\cczTkmmg.s:2467   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
  C:\Temp\cczTkmmg.s:2472   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
  C:\Temp\cczTkmmg.s:2497   .text.RTC_TimeStampOnTamperDetectionCmd:00000014 $d
  C:\Temp\cczTkmmg.s:2502   .text.RTC_TamperPullUpCmd:00000000 $t
  C:\Temp\cczTkmmg.s:2507   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
  C:\Temp\cczTkmmg.s:2532   .text.RTC_TamperPullUpCmd:00000014 $d
  C:\Temp\cczTkmmg.s:2537   .text.RTC_WriteBackupRegister:00000000 $t
  C:\Temp\cczTkmmg.s:2542   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
  C:\Temp\cczTkmmg.s:2575   .text.RTC_WriteBackupRegister:0000001c $d
  C:\Temp\cczTkmmg.s:2580   .text.RTC_ReadBackupRegister:00000000 $t
  C:\Temp\cczTkmmg.s:2585   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
  C:\Temp\cczTkmmg.s:2619   .text.RTC_ReadBackupRegister:0000001c $d
  C:\Temp\cczTkmmg.s:2624   .text.RTC_TamperPinSelection:00000000 $t
  C:\Temp\cczTkmmg.s:2629   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
  C:\Temp\cczTkmmg.s:2652   .text.RTC_TamperPinSelection:00000014 $d
  C:\Temp\cczTkmmg.s:2657   .text.RTC_TimeStampPinSelection:00000000 $t
  C:\Temp\cczTkmmg.s:2662   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
  C:\Temp\cczTkmmg.s:2685   .text.RTC_TimeStampPinSelection:00000014 $d
  C:\Temp\cczTkmmg.s:2690   .text.RTC_OutputTypeConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2695   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
  C:\Temp\cczTkmmg.s:2718   .text.RTC_OutputTypeConfig:00000014 $d
  C:\Temp\cczTkmmg.s:2723   .text.RTC_SynchroShiftConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2728   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
  C:\Temp\cczTkmmg.s:2803   .text.RTC_SynchroShiftConfig:00000054 $d
  C:\Temp\cczTkmmg.s:2808   .text.RTC_ITConfig:00000000 $t
  C:\Temp\cczTkmmg.s:2813   .text.RTC_ITConfig:00000000 RTC_ITConfig
  C:\Temp\cczTkmmg.s:2865   .text.RTC_ITConfig:0000003c $d
  C:\Temp\cczTkmmg.s:2870   .text.RTC_GetFlagStatus:00000000 $t
  C:\Temp\cczTkmmg.s:2875   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
  C:\Temp\cczTkmmg.s:2901   .text.RTC_GetFlagStatus:00000014 $d
  C:\Temp\cczTkmmg.s:2906   .text.RTC_ClearFlag:00000000 $t
  C:\Temp\cczTkmmg.s:2911   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
  C:\Temp\cczTkmmg.s:2933   .text.RTC_ClearFlag:00000018 $d
  C:\Temp\cczTkmmg.s:2938   .text.RTC_GetITStatus:00000000 $t
  C:\Temp\cczTkmmg.s:2943   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
  C:\Temp\cczTkmmg.s:2996   .text.RTC_GetITStatus:0000002c $d
  C:\Temp\cczTkmmg.s:3001   .text.RTC_ClearITPendingBit:00000000 $t
  C:\Temp\cczTkmmg.s:3006   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
  C:\Temp\cczTkmmg.s:3028   .text.RTC_ClearITPendingBit:00000018 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
