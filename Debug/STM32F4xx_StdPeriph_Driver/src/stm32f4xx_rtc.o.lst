   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	RTC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	RTC_DeInit:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  26              		.loc 1 368 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 84B0     		sub	sp, sp, #16
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  41              		.loc 1 369 0
  42 0006 4FF00003 		mov	r3, #0
  43 000a 7B60     		str	r3, [r7, #4]
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  44              		.loc 1 370 0
  45 000c 4FF00003 		mov	r3, #0
  46 0010 BB60     		str	r3, [r7, #8]
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  47              		.loc 1 371 0
  48 0012 4FF00003 		mov	r3, #0
  49 0016 FB73     		strb	r3, [r7, #15]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  50              		.loc 1 374 0
  51 0018 4FF42053 		mov	r3, #10240
  52 001c C4F20003 		movt	r3, 16384
  53 0020 4FF0CA02 		mov	r2, #202
  54 0024 5A62     		str	r2, [r3, #36]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  55              		.loc 1 375 0
  56 0026 4FF42053 		mov	r3, #10240
  57 002a C4F20003 		movt	r3, 16384
  58 002e 4FF05302 		mov	r2, #83
  59 0032 5A62     		str	r2, [r3, #36]
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  60              		.loc 1 378 0
  61 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  62 0038 0346     		mov	r3, r0
  63 003a 002B     		cmp	r3, #0
  64 003c 03D1     		bne	.L2
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  65              		.loc 1 380 0
  66 003e 4FF00003 		mov	r3, #0
  67 0042 FB73     		strb	r3, [r7, #15]
  68 0044 84E0     		b	.L3
  69              	.L2:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  70              		.loc 1 385 0
  71 0046 4FF42053 		mov	r3, #10240
  72 004a C4F20003 		movt	r3, 16384
  73 004e 4FF00002 		mov	r2, #0
  74 0052 1A60     		str	r2, [r3, #0]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  75              		.loc 1 386 0
  76 0054 4FF42053 		mov	r3, #10240
  77 0058 C4F20003 		movt	r3, 16384
  78 005c 42F20112 		movw	r2, #8449
  79 0060 5A60     		str	r2, [r3, #4]
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  80              		.loc 1 388 0
  81 0062 4FF42053 		mov	r3, #10240
  82 0066 C4F20003 		movt	r3, 16384
  83 006a 4FF42052 		mov	r2, #10240
  84 006e C4F20002 		movt	r2, 16384
  85 0072 9268     		ldr	r2, [r2, #8]
  86 0074 02F00702 		and	r2, r2, #7
  87 0078 9A60     		str	r2, [r3, #8]
  88              	.L5:
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  89              		.loc 1 393 0 discriminator 1
  90 007a 4FF42053 		mov	r3, #10240
  91 007e C4F20003 		movt	r3, 16384
  92 0082 DB68     		ldr	r3, [r3, #12]
  93 0084 03F00403 		and	r3, r3, #4
  94 0088 BB60     		str	r3, [r7, #8]
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  95              		.loc 1 394 0 discriminator 1
  96 008a 7B68     		ldr	r3, [r7, #4]
  97 008c 03F10103 		add	r3, r3, #1
  98 0090 7B60     		str	r3, [r7, #4]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  99              		.loc 1 395 0 discriminator 1
 100 0092 7B68     		ldr	r3, [r7, #4]
 101 0094 B3F5803F 		cmp	r3, #65536
 102 0098 02D0     		beq	.L4
 103 009a BB68     		ldr	r3, [r7, #8]
 104 009c 002B     		cmp	r3, #0
 105 009e ECD0     		beq	.L5
 106              	.L4:
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 107              		.loc 1 397 0
 108 00a0 4FF42053 		mov	r3, #10240
 109 00a4 C4F20003 		movt	r3, 16384
 110 00a8 DB68     		ldr	r3, [r3, #12]
 111 00aa 03F00403 		and	r3, r3, #4
 112 00ae 002B     		cmp	r3, #0
 113 00b0 03D1     		bne	.L6
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 114              		.loc 1 399 0
 115 00b2 4FF00003 		mov	r3, #0
 116 00b6 FB73     		strb	r3, [r7, #15]
 117 00b8 4AE0     		b	.L3
 118              	.L6:
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 119              		.loc 1 404 0
 120 00ba 4FF42053 		mov	r3, #10240
 121 00be C4F20003 		movt	r3, 16384
 122 00c2 9B68     		ldr	r3, [r3, #8]
 123 00c4 4FF42053 		mov	r3, #10240
 124 00c8 C4F20003 		movt	r3, 16384
 125 00cc 4FF00002 		mov	r2, #0
 126 00d0 9A60     		str	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 127              		.loc 1 405 0
 128 00d2 4FF42053 		mov	r3, #10240
 129 00d6 C4F20003 		movt	r3, 16384
 130 00da 4FF6FF72 		movw	r2, #65535
 131 00de 5A61     		str	r2, [r3, #20]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 132              		.loc 1 406 0
 133 00e0 4FF42053 		mov	r3, #10240
 134 00e4 C4F20003 		movt	r3, 16384
 135 00e8 4FF0FF02 		mov	r2, #255
 136 00ec C0F27F02 		movt	r2, 127
 137 00f0 1A61     		str	r2, [r3, #16]
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 138              		.loc 1 407 0
 139 00f2 4FF42053 		mov	r3, #10240
 140 00f6 C4F20003 		movt	r3, 16384
 141 00fa 4FF00002 		mov	r2, #0
 142 00fe 9A61     		str	r2, [r3, #24]
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 143              		.loc 1 408 0
 144 0100 4FF42053 		mov	r3, #10240
 145 0104 C4F20003 		movt	r3, 16384
 146 0108 4FF00002 		mov	r2, #0
 147 010c DA61     		str	r2, [r3, #28]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 148              		.loc 1 409 0
 149 010e 4FF42053 		mov	r3, #10240
 150 0112 C4F20003 		movt	r3, 16384
 151 0116 4FF00002 		mov	r2, #0
 152 011a 1A62     		str	r2, [r3, #32]
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 153              		.loc 1 412 0
 154 011c 4FF42053 		mov	r3, #10240
 155 0120 C4F20003 		movt	r3, 16384
 156 0124 4FF00002 		mov	r2, #0
 157 0128 DA60     		str	r2, [r3, #12]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 158              		.loc 1 415 0
 159 012a 4FF42053 		mov	r3, #10240
 160 012e C4F20003 		movt	r3, 16384
 161 0132 4FF00002 		mov	r2, #0
 162 0136 1A64     		str	r2, [r3, #64]
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 163              		.loc 1 417 0
 164 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 165 013c 0346     		mov	r3, r0
 166 013e 002B     		cmp	r3, #0
 167 0140 03D1     		bne	.L7
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 168              		.loc 1 419 0
 169 0142 4FF00003 		mov	r3, #0
 170 0146 FB73     		strb	r3, [r7, #15]
 171 0148 02E0     		b	.L3
 172              	.L7:
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 173              		.loc 1 423 0
 174 014a 4FF00103 		mov	r3, #1
 175 014e FB73     		strb	r3, [r7, #15]
 176              	.L3:
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 177              		.loc 1 429 0
 178 0150 4FF42053 		mov	r3, #10240
 179 0154 C4F20003 		movt	r3, 16384
 180 0158 4FF0FF02 		mov	r2, #255
 181 015c 5A62     		str	r2, [r3, #36]
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 182              		.loc 1 431 0
 183 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 184              		.loc 1 432 0
 185 0160 1846     		mov	r0, r3
 186 0162 07F11007 		add	r7, r7, #16
 187 0166 BD46     		mov	sp, r7
 188 0168 80BD     		pop	{r7, pc}
 189              		.cfi_endproc
 190              	.LFE110:
 192 016a 00BF     		.align	2
 193              		.global	RTC_Init
 194              		.thumb
 195              		.thumb_func
 197              	RTC_Init:
 198              	.LFB111:
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 199              		.loc 1 446 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 16
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 016c 80B5     		push	{r7, lr}
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 14, -4
 207              		.cfi_offset 7, -8
 208 016e 84B0     		sub	sp, sp, #16
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 24
 211 0170 00AF     		add	r7, sp, #0
 212              	.LCFI5:
 213              		.cfi_def_cfa_register 7
 214 0172 7860     		str	r0, [r7, #4]
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 215              		.loc 1 447 0
 216 0174 4FF00003 		mov	r3, #0
 217 0178 FB73     		strb	r3, [r7, #15]
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 218              		.loc 1 455 0
 219 017a 4FF42053 		mov	r3, #10240
 220 017e C4F20003 		movt	r3, 16384
 221 0182 4FF0CA02 		mov	r2, #202
 222 0186 5A62     		str	r2, [r3, #36]
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 223              		.loc 1 456 0
 224 0188 4FF42053 		mov	r3, #10240
 225 018c C4F20003 		movt	r3, 16384
 226 0190 4FF05302 		mov	r2, #83
 227 0194 5A62     		str	r2, [r3, #36]
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 228              		.loc 1 459 0
 229 0196 FFF7FEFF 		bl	RTC_EnterInitMode
 230 019a 0346     		mov	r3, r0
 231 019c 002B     		cmp	r3, #0
 232 019e 03D1     		bne	.L9
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 233              		.loc 1 461 0
 234 01a0 4FF00003 		mov	r3, #0
 235 01a4 FB73     		strb	r3, [r7, #15]
 236 01a6 35E0     		b	.L10
 237              	.L9:
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 238              		.loc 1 466 0
 239 01a8 4FF42053 		mov	r3, #10240
 240 01ac C4F20003 		movt	r3, 16384
 241 01b0 4FF42052 		mov	r2, #10240
 242 01b4 C4F20002 		movt	r2, 16384
 243 01b8 9268     		ldr	r2, [r2, #8]
 244 01ba 22F04002 		bic	r2, r2, #64
 245 01be 9A60     		str	r2, [r3, #8]
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 246              		.loc 1 468 0
 247 01c0 4FF42053 		mov	r3, #10240
 248 01c4 C4F20003 		movt	r3, 16384
 249 01c8 4FF42052 		mov	r2, #10240
 250 01cc C4F20002 		movt	r2, 16384
 251 01d0 9268     		ldr	r2, [r2, #8]
 252 01d2 1146     		mov	r1, r2
 253 01d4 7A68     		ldr	r2, [r7, #4]
 254 01d6 1268     		ldr	r2, [r2, #0]
 255 01d8 0A43     		orrs	r2, r2, r1
 256 01da 9A60     		str	r2, [r3, #8]
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 257              		.loc 1 471 0
 258 01dc 4FF42053 		mov	r3, #10240
 259 01e0 C4F20003 		movt	r3, 16384
 260 01e4 7A68     		ldr	r2, [r7, #4]
 261 01e6 9268     		ldr	r2, [r2, #8]
 262 01e8 1A61     		str	r2, [r3, #16]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 263              		.loc 1 472 0
 264 01ea 4FF42053 		mov	r3, #10240
 265 01ee C4F20003 		movt	r3, 16384
 266 01f2 4FF42052 		mov	r2, #10240
 267 01f6 C4F20002 		movt	r2, 16384
 268 01fa 1269     		ldr	r2, [r2, #16]
 269 01fc 1146     		mov	r1, r2
 270 01fe 7A68     		ldr	r2, [r7, #4]
 271 0200 5268     		ldr	r2, [r2, #4]
 272 0202 4FEA0242 		lsl	r2, r2, #16
 273 0206 0A43     		orrs	r2, r2, r1
 274 0208 1A61     		str	r2, [r3, #16]
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 275              		.loc 1 475 0
 276 020a FFF7FEFF 		bl	RTC_ExitInitMode
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 277              		.loc 1 477 0
 278 020e 4FF00103 		mov	r3, #1
 279 0212 FB73     		strb	r3, [r7, #15]
 280              	.L10:
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 281              		.loc 1 480 0
 282 0214 4FF42053 		mov	r3, #10240
 283 0218 C4F20003 		movt	r3, 16384
 284 021c 4FF0FF02 		mov	r2, #255
 285 0220 5A62     		str	r2, [r3, #36]
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 286              		.loc 1 482 0
 287 0222 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 288              		.loc 1 483 0
 289 0224 1846     		mov	r0, r3
 290 0226 07F11007 		add	r7, r7, #16
 291 022a BD46     		mov	sp, r7
 292 022c 80BD     		pop	{r7, pc}
 293              		.cfi_endproc
 294              	.LFE111:
 296 022e 00BF     		.align	2
 297              		.global	RTC_StructInit
 298              		.thumb
 299              		.thumb_func
 301              	RTC_StructInit:
 302              	.LFB112:
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 303              		.loc 1 492 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 8
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308 0230 80B4     		push	{r7}
 309              	.LCFI6:
 310              		.cfi_def_cfa_offset 4
 311              		.cfi_offset 7, -4
 312 0232 83B0     		sub	sp, sp, #12
 313              	.LCFI7:
 314              		.cfi_def_cfa_offset 16
 315 0234 00AF     		add	r7, sp, #0
 316              	.LCFI8:
 317              		.cfi_def_cfa_register 7
 318 0236 7860     		str	r0, [r7, #4]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 319              		.loc 1 494 0
 320 0238 7B68     		ldr	r3, [r7, #4]
 321 023a 4FF00002 		mov	r2, #0
 322 023e 1A60     		str	r2, [r3, #0]
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 323              		.loc 1 497 0
 324 0240 7B68     		ldr	r3, [r7, #4]
 325 0242 4FF07F02 		mov	r2, #127
 326 0246 5A60     		str	r2, [r3, #4]
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 327              		.loc 1 500 0
 328 0248 7B68     		ldr	r3, [r7, #4]
 329 024a 4FF0FF02 		mov	r2, #255
 330 024e 9A60     		str	r2, [r3, #8]
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 331              		.loc 1 501 0
 332 0250 07F10C07 		add	r7, r7, #12
 333 0254 BD46     		mov	sp, r7
 334 0256 80BC     		pop	{r7}
 335 0258 7047     		bx	lr
 336              		.cfi_endproc
 337              	.LFE112:
 339 025a 00BF     		.align	2
 340              		.global	RTC_WriteProtectionCmd
 341              		.thumb
 342              		.thumb_func
 344              	RTC_WriteProtectionCmd:
 345              	.LFB113:
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 346              		.loc 1 514 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 8
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351 025c 80B4     		push	{r7}
 352              	.LCFI9:
 353              		.cfi_def_cfa_offset 4
 354              		.cfi_offset 7, -4
 355 025e 83B0     		sub	sp, sp, #12
 356              	.LCFI10:
 357              		.cfi_def_cfa_offset 16
 358 0260 00AF     		add	r7, sp, #0
 359              	.LCFI11:
 360              		.cfi_def_cfa_register 7
 361 0262 0346     		mov	r3, r0
 362 0264 FB71     		strb	r3, [r7, #7]
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 363              		.loc 1 518 0
 364 0266 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 365 0268 002B     		cmp	r3, #0
 366 026a 07D0     		beq	.L13
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 367              		.loc 1 521 0
 368 026c 4FF42053 		mov	r3, #10240
 369 0270 C4F20003 		movt	r3, 16384
 370 0274 4FF0FF02 		mov	r2, #255
 371 0278 5A62     		str	r2, [r3, #36]
 372 027a 0DE0     		b	.L12
 373              	.L13:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 374              		.loc 1 526 0
 375 027c 4FF42053 		mov	r3, #10240
 376 0280 C4F20003 		movt	r3, 16384
 377 0284 4FF0CA02 		mov	r2, #202
 378 0288 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 379              		.loc 1 527 0
 380 028a 4FF42053 		mov	r3, #10240
 381 028e C4F20003 		movt	r3, 16384
 382 0292 4FF05302 		mov	r2, #83
 383 0296 5A62     		str	r2, [r3, #36]
 384              	.L12:
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 385              		.loc 1 529 0
 386 0298 07F10C07 		add	r7, r7, #12
 387 029c BD46     		mov	sp, r7
 388 029e 80BC     		pop	{r7}
 389 02a0 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE113:
 393 02a2 00BF     		.align	2
 394              		.global	RTC_EnterInitMode
 395              		.thumb
 396              		.thumb_func
 398              	RTC_EnterInitMode:
 399              	.LFB114:
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 400              		.loc 1 541 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 16
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404              		@ link register save eliminated.
 405 02a4 80B4     		push	{r7}
 406              	.LCFI12:
 407              		.cfi_def_cfa_offset 4
 408              		.cfi_offset 7, -4
 409 02a6 85B0     		sub	sp, sp, #20
 410              	.LCFI13:
 411              		.cfi_def_cfa_offset 24
 412 02a8 00AF     		add	r7, sp, #0
 413              	.LCFI14:
 414              		.cfi_def_cfa_register 7
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 415              		.loc 1 542 0
 416 02aa 4FF00003 		mov	r3, #0
 417 02ae 7B60     		str	r3, [r7, #4]
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 418              		.loc 1 543 0
 419 02b0 4FF00003 		mov	r3, #0
 420 02b4 FB73     		strb	r3, [r7, #15]
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 421              		.loc 1 544 0
 422 02b6 4FF00003 		mov	r3, #0
 423 02ba BB60     		str	r3, [r7, #8]
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 424              		.loc 1 547 0
 425 02bc 4FF42053 		mov	r3, #10240
 426 02c0 C4F20003 		movt	r3, 16384
 427 02c4 DB68     		ldr	r3, [r3, #12]
 428 02c6 03F04003 		and	r3, r3, #64
 429 02ca 002B     		cmp	r3, #0
 430 02cc 2AD1     		bne	.L16
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 431              		.loc 1 550 0
 432 02ce 4FF42053 		mov	r3, #10240
 433 02d2 C4F20003 		movt	r3, 16384
 434 02d6 4FF0FF32 		mov	r2, #-1
 435 02da DA60     		str	r2, [r3, #12]
 436              	.L18:
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 437              		.loc 1 555 0 discriminator 1
 438 02dc 4FF42053 		mov	r3, #10240
 439 02e0 C4F20003 		movt	r3, 16384
 440 02e4 DB68     		ldr	r3, [r3, #12]
 441 02e6 03F04003 		and	r3, r3, #64
 442 02ea BB60     		str	r3, [r7, #8]
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 443              		.loc 1 556 0 discriminator 1
 444 02ec 7B68     		ldr	r3, [r7, #4]
 445 02ee 03F10103 		add	r3, r3, #1
 446 02f2 7B60     		str	r3, [r7, #4]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 447              		.loc 1 557 0 discriminator 1
 448 02f4 7B68     		ldr	r3, [r7, #4]
 449 02f6 B3F5803F 		cmp	r3, #65536
 450 02fa 02D0     		beq	.L17
 451 02fc BB68     		ldr	r3, [r7, #8]
 452 02fe 002B     		cmp	r3, #0
 453 0300 ECD0     		beq	.L18
 454              	.L17:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 455              		.loc 1 559 0
 456 0302 4FF42053 		mov	r3, #10240
 457 0306 C4F20003 		movt	r3, 16384
 458 030a DB68     		ldr	r3, [r3, #12]
 459 030c 03F04003 		and	r3, r3, #64
 460 0310 002B     		cmp	r3, #0
 461 0312 03D0     		beq	.L19
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 462              		.loc 1 561 0
 463 0314 4FF00103 		mov	r3, #1
 464 0318 FB73     		strb	r3, [r7, #15]
 465 031a 06E0     		b	.L20
 466              	.L19:
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 467              		.loc 1 565 0
 468 031c 4FF00003 		mov	r3, #0
 469 0320 FB73     		strb	r3, [r7, #15]
 470 0322 02E0     		b	.L20
 471              	.L16:
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 472              		.loc 1 570 0
 473 0324 4FF00103 		mov	r3, #1
 474 0328 FB73     		strb	r3, [r7, #15]
 475              	.L20:
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 476              		.loc 1 573 0
 477 032a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 478              		.loc 1 574 0
 479 032c 1846     		mov	r0, r3
 480 032e 07F11407 		add	r7, r7, #20
 481 0332 BD46     		mov	sp, r7
 482 0334 80BC     		pop	{r7}
 483 0336 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE114:
 487              		.align	2
 488              		.global	RTC_ExitInitMode
 489              		.thumb
 490              		.thumb_func
 492              	RTC_ExitInitMode:
 493              	.LFB115:
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 494              		.loc 1 586 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 1, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499 0338 80B4     		push	{r7}
 500              	.LCFI15:
 501              		.cfi_def_cfa_offset 4
 502              		.cfi_offset 7, -4
 503 033a 00AF     		add	r7, sp, #0
 504              	.LCFI16:
 505              		.cfi_def_cfa_register 7
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 506              		.loc 1 588 0
 507 033c 4FF42053 		mov	r3, #10240
 508 0340 C4F20003 		movt	r3, 16384
 509 0344 4FF42052 		mov	r2, #10240
 510 0348 C4F20002 		movt	r2, 16384
 511 034c D268     		ldr	r2, [r2, #12]
 512 034e 22F08002 		bic	r2, r2, #128
 513 0352 DA60     		str	r2, [r3, #12]
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 514              		.loc 1 589 0
 515 0354 BD46     		mov	sp, r7
 516 0356 80BC     		pop	{r7}
 517 0358 7047     		bx	lr
 518              		.cfi_endproc
 519              	.LFE115:
 521 035a 00BF     		.align	2
 522              		.global	RTC_WaitForSynchro
 523              		.thumb
 524              		.thumb_func
 526              	RTC_WaitForSynchro:
 527              	.LFB116:
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 528              		.loc 1 608 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 16
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533 035c 80B4     		push	{r7}
 534              	.LCFI17:
 535              		.cfi_def_cfa_offset 4
 536              		.cfi_offset 7, -4
 537 035e 85B0     		sub	sp, sp, #20
 538              	.LCFI18:
 539              		.cfi_def_cfa_offset 24
 540 0360 00AF     		add	r7, sp, #0
 541              	.LCFI19:
 542              		.cfi_def_cfa_register 7
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 543              		.loc 1 609 0
 544 0362 4FF00003 		mov	r3, #0
 545 0366 7B60     		str	r3, [r7, #4]
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 546              		.loc 1 610 0
 547 0368 4FF00003 		mov	r3, #0
 548 036c FB73     		strb	r3, [r7, #15]
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 549              		.loc 1 611 0
 550 036e 4FF00003 		mov	r3, #0
 551 0372 BB60     		str	r3, [r7, #8]
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 552              		.loc 1 614 0
 553 0374 4FF42053 		mov	r3, #10240
 554 0378 C4F20003 		movt	r3, 16384
 555 037c 4FF0CA02 		mov	r2, #202
 556 0380 5A62     		str	r2, [r3, #36]
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 557              		.loc 1 615 0
 558 0382 4FF42053 		mov	r3, #10240
 559 0386 C4F20003 		movt	r3, 16384
 560 038a 4FF05302 		mov	r2, #83
 561 038e 5A62     		str	r2, [r3, #36]
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 562              		.loc 1 618 0
 563 0390 4FF42053 		mov	r3, #10240
 564 0394 C4F20003 		movt	r3, 16384
 565 0398 4FF42052 		mov	r2, #10240
 566 039c C4F20002 		movt	r2, 16384
 567 03a0 D268     		ldr	r2, [r2, #12]
 568 03a2 22F0A002 		bic	r2, r2, #160
 569 03a6 DA60     		str	r2, [r3, #12]
 570              	.L24:
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 571              		.loc 1 623 0 discriminator 1
 572 03a8 4FF42053 		mov	r3, #10240
 573 03ac C4F20003 		movt	r3, 16384
 574 03b0 DB68     		ldr	r3, [r3, #12]
 575 03b2 03F02003 		and	r3, r3, #32
 576 03b6 BB60     		str	r3, [r7, #8]
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 577              		.loc 1 624 0 discriminator 1
 578 03b8 7B68     		ldr	r3, [r7, #4]
 579 03ba 03F10103 		add	r3, r3, #1
 580 03be 7B60     		str	r3, [r7, #4]
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 581              		.loc 1 625 0 discriminator 1
 582 03c0 7B68     		ldr	r3, [r7, #4]
 583 03c2 B3F5003F 		cmp	r3, #131072
 584 03c6 02D0     		beq	.L23
 585 03c8 BB68     		ldr	r3, [r7, #8]
 586 03ca 002B     		cmp	r3, #0
 587 03cc ECD0     		beq	.L24
 588              	.L23:
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 589              		.loc 1 627 0
 590 03ce 4FF42053 		mov	r3, #10240
 591 03d2 C4F20003 		movt	r3, 16384
 592 03d6 DB68     		ldr	r3, [r3, #12]
 593 03d8 03F02003 		and	r3, r3, #32
 594 03dc 002B     		cmp	r3, #0
 595 03de 03D0     		beq	.L25
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 596              		.loc 1 629 0
 597 03e0 4FF00103 		mov	r3, #1
 598 03e4 FB73     		strb	r3, [r7, #15]
 599 03e6 02E0     		b	.L26
 600              	.L25:
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 601              		.loc 1 633 0
 602 03e8 4FF00003 		mov	r3, #0
 603 03ec FB73     		strb	r3, [r7, #15]
 604              	.L26:
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 605              		.loc 1 637 0
 606 03ee 4FF42053 		mov	r3, #10240
 607 03f2 C4F20003 		movt	r3, 16384
 608 03f6 4FF0FF02 		mov	r2, #255
 609 03fa 5A62     		str	r2, [r3, #36]
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 610              		.loc 1 639 0
 611 03fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 612              		.loc 1 640 0
 613 03fe 1846     		mov	r0, r3
 614 0400 07F11407 		add	r7, r7, #20
 615 0404 BD46     		mov	sp, r7
 616 0406 80BC     		pop	{r7}
 617 0408 7047     		bx	lr
 618              		.cfi_endproc
 619              	.LFE116:
 621 040a 00BF     		.align	2
 622              		.global	RTC_RefClockCmd
 623              		.thumb
 624              		.thumb_func
 626              	RTC_RefClockCmd:
 627              	.LFB117:
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 628              		.loc 1 651 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 16
 631              		@ frame_needed = 1, uses_anonymous_args = 0
 632 040c 80B5     		push	{r7, lr}
 633              	.LCFI20:
 634              		.cfi_def_cfa_offset 8
 635              		.cfi_offset 14, -4
 636              		.cfi_offset 7, -8
 637 040e 84B0     		sub	sp, sp, #16
 638              	.LCFI21:
 639              		.cfi_def_cfa_offset 24
 640 0410 00AF     		add	r7, sp, #0
 641              	.LCFI22:
 642              		.cfi_def_cfa_register 7
 643 0412 0346     		mov	r3, r0
 644 0414 FB71     		strb	r3, [r7, #7]
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 645              		.loc 1 652 0
 646 0416 4FF00003 		mov	r3, #0
 647 041a FB73     		strb	r3, [r7, #15]
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 648              		.loc 1 658 0
 649 041c 4FF42053 		mov	r3, #10240
 650 0420 C4F20003 		movt	r3, 16384
 651 0424 4FF0CA02 		mov	r2, #202
 652 0428 5A62     		str	r2, [r3, #36]
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 653              		.loc 1 659 0
 654 042a 4FF42053 		mov	r3, #10240
 655 042e C4F20003 		movt	r3, 16384
 656 0432 4FF05302 		mov	r2, #83
 657 0436 5A62     		str	r2, [r3, #36]
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 658              		.loc 1 662 0
 659 0438 FFF7FEFF 		bl	RTC_EnterInitMode
 660 043c 0346     		mov	r3, r0
 661 043e 002B     		cmp	r3, #0
 662 0440 03D1     		bne	.L28
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 663              		.loc 1 664 0
 664 0442 4FF00003 		mov	r3, #0
 665 0446 FB73     		strb	r3, [r7, #15]
 666 0448 20E0     		b	.L29
 667              	.L28:
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 668              		.loc 1 668 0
 669 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 670 044c 002B     		cmp	r3, #0
 671 044e 0CD0     		beq	.L30
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 672              		.loc 1 671 0
 673 0450 4FF42053 		mov	r3, #10240
 674 0454 C4F20003 		movt	r3, 16384
 675 0458 4FF42052 		mov	r2, #10240
 676 045c C4F20002 		movt	r2, 16384
 677 0460 9268     		ldr	r2, [r2, #8]
 678 0462 42F01002 		orr	r2, r2, #16
 679 0466 9A60     		str	r2, [r3, #8]
 680 0468 0BE0     		b	.L31
 681              	.L30:
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 682              		.loc 1 676 0
 683 046a 4FF42053 		mov	r3, #10240
 684 046e C4F20003 		movt	r3, 16384
 685 0472 4FF42052 		mov	r2, #10240
 686 0476 C4F20002 		movt	r2, 16384
 687 047a 9268     		ldr	r2, [r2, #8]
 688 047c 22F01002 		bic	r2, r2, #16
 689 0480 9A60     		str	r2, [r3, #8]
 690              	.L31:
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 691              		.loc 1 679 0
 692 0482 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 693              		.loc 1 681 0
 694 0486 4FF00103 		mov	r3, #1
 695 048a FB73     		strb	r3, [r7, #15]
 696              	.L29:
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 697              		.loc 1 685 0
 698 048c 4FF42053 		mov	r3, #10240
 699 0490 C4F20003 		movt	r3, 16384
 700 0494 4FF0FF02 		mov	r2, #255
 701 0498 5A62     		str	r2, [r3, #36]
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 702              		.loc 1 687 0
 703 049a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 704              		.loc 1 688 0
 705 049c 1846     		mov	r0, r3
 706 049e 07F11007 		add	r7, r7, #16
 707 04a2 BD46     		mov	sp, r7
 708 04a4 80BD     		pop	{r7, pc}
 709              		.cfi_endproc
 710              	.LFE117:
 712 04a6 00BF     		.align	2
 713              		.global	RTC_BypassShadowCmd
 714              		.thumb
 715              		.thumb_func
 717              	RTC_BypassShadowCmd:
 718              	.LFB118:
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 719              		.loc 1 699 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 8
 722              		@ frame_needed = 1, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 724 04a8 80B4     		push	{r7}
 725              	.LCFI23:
 726              		.cfi_def_cfa_offset 4
 727              		.cfi_offset 7, -4
 728 04aa 83B0     		sub	sp, sp, #12
 729              	.LCFI24:
 730              		.cfi_def_cfa_offset 16
 731 04ac 00AF     		add	r7, sp, #0
 732              	.LCFI25:
 733              		.cfi_def_cfa_register 7
 734 04ae 0346     		mov	r3, r0
 735 04b0 FB71     		strb	r3, [r7, #7]
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 736              		.loc 1 704 0
 737 04b2 4FF42053 		mov	r3, #10240
 738 04b6 C4F20003 		movt	r3, 16384
 739 04ba 4FF0CA02 		mov	r2, #202
 740 04be 5A62     		str	r2, [r3, #36]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 741              		.loc 1 705 0
 742 04c0 4FF42053 		mov	r3, #10240
 743 04c4 C4F20003 		movt	r3, 16384
 744 04c8 4FF05302 		mov	r2, #83
 745 04cc 5A62     		str	r2, [r3, #36]
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 746              		.loc 1 707 0
 747 04ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 748 04d0 002B     		cmp	r3, #0
 749 04d2 0CD0     		beq	.L33
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 750              		.loc 1 710 0
 751 04d4 4FF42053 		mov	r3, #10240
 752 04d8 C4F20003 		movt	r3, 16384
 753 04dc 4FF42052 		mov	r2, #10240
 754 04e0 C4F20002 		movt	r2, 16384
 755 04e4 9268     		ldr	r2, [r2, #8]
 756 04e6 42F02002 		orr	r2, r2, #32
 757 04ea 9A60     		str	r2, [r3, #8]
 758 04ec 0BE0     		b	.L34
 759              	.L33:
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 760              		.loc 1 715 0
 761 04ee 4FF42053 		mov	r3, #10240
 762 04f2 C4F20003 		movt	r3, 16384
 763 04f6 4FF42052 		mov	r2, #10240
 764 04fa C4F20002 		movt	r2, 16384
 765 04fe 9268     		ldr	r2, [r2, #8]
 766 0500 02F0DF02 		and	r2, r2, #223
 767 0504 9A60     		str	r2, [r3, #8]
 768              	.L34:
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 769              		.loc 1 719 0
 770 0506 4FF42053 		mov	r3, #10240
 771 050a C4F20003 		movt	r3, 16384
 772 050e 4FF0FF02 		mov	r2, #255
 773 0512 5A62     		str	r2, [r3, #36]
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 774              		.loc 1 720 0
 775 0514 07F10C07 		add	r7, r7, #12
 776 0518 BD46     		mov	sp, r7
 777 051a 80BC     		pop	{r7}
 778 051c 7047     		bx	lr
 779              		.cfi_endproc
 780              	.LFE118:
 782 051e 00BF     		.align	2
 783              		.global	RTC_SetTime
 784              		.thumb
 785              		.thumb_func
 787              	RTC_SetTime:
 788              	.LFB119:
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 789              		.loc 1 754 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0520 90B5     		push	{r4, r7, lr}
 794              	.LCFI26:
 795              		.cfi_def_cfa_offset 12
 796              		.cfi_offset 14, -4
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 4, -12
 799 0522 85B0     		sub	sp, sp, #20
 800              	.LCFI27:
 801              		.cfi_def_cfa_offset 32
 802 0524 00AF     		add	r7, sp, #0
 803              	.LCFI28:
 804              		.cfi_def_cfa_register 7
 805 0526 7860     		str	r0, [r7, #4]
 806 0528 3960     		str	r1, [r7, #0]
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 807              		.loc 1 755 0
 808 052a 4FF00003 		mov	r3, #0
 809 052e FB60     		str	r3, [r7, #12]
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 810              		.loc 1 756 0
 811 0530 4FF00003 		mov	r3, #0
 812 0534 FB72     		strb	r3, [r7, #11]
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 813              		.loc 1 761 0
 814 0536 7B68     		ldr	r3, [r7, #4]
 815 0538 002B     		cmp	r3, #0
 816 053a 0DD1     		bne	.L36
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 817              		.loc 1 763 0
 818 053c 4FF42053 		mov	r3, #10240
 819 0540 C4F20003 		movt	r3, 16384
 820 0544 9B68     		ldr	r3, [r3, #8]
 821 0546 03F04003 		and	r3, r3, #64
 822 054a 002B     		cmp	r3, #0
 823 054c 19D1     		bne	.L37
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 824              		.loc 1 770 0
 825 054e 3B68     		ldr	r3, [r7, #0]
 826 0550 4FF00002 		mov	r2, #0
 827 0554 DA70     		strb	r2, [r3, #3]
 828 0556 14E0     		b	.L37
 829              	.L36:
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 830              		.loc 1 778 0
 831 0558 4FF42053 		mov	r3, #10240
 832 055c C4F20003 		movt	r3, 16384
 833 0560 9B68     		ldr	r3, [r3, #8]
 834 0562 03F04003 		and	r3, r3, #64
 835 0566 002B     		cmp	r3, #0
 836 0568 07D0     		beq	.L38
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 837              		.loc 1 780 0
 838 056a 3B68     		ldr	r3, [r7, #0]
 839 056c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 840 056e 1846     		mov	r0, r3
 841 0570 01F036FB 		bl	RTC_Bcd2ToByte
 842 0574 0346     		mov	r3, r0
 843 0576 FB60     		str	r3, [r7, #12]
 844 0578 03E0     		b	.L37
 845              	.L38:
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 846              		.loc 1 786 0
 847 057a 3B68     		ldr	r3, [r7, #0]
 848 057c 4FF00002 		mov	r2, #0
 849 0580 DA70     		strb	r2, [r3, #3]
 850              	.L37:
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 851              		.loc 1 794 0
 852 0582 7B68     		ldr	r3, [r7, #4]
 853 0584 002B     		cmp	r3, #0
 854 0586 12D0     		beq	.L39
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 855              		.loc 1 796 0
 856 0588 3B68     		ldr	r3, [r7, #0]
 857 058a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 858 058c 4FEA0342 		lsl	r2, r3, #16
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 859              		.loc 1 797 0
 860 0590 3B68     		ldr	r3, [r7, #0]
 861 0592 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 862 0594 4FEA0323 		lsl	r3, r3, #8
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 863              		.loc 1 796 0
 864 0598 1A43     		orrs	r2, r2, r3
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 865              		.loc 1 798 0
 866 059a 3B68     		ldr	r3, [r7, #0]
 867 059c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 868              		.loc 1 797 0
 869 059e 1A43     		orrs	r2, r2, r3
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 870              		.loc 1 799 0
 871 05a0 3B68     		ldr	r3, [r7, #0]
 872 05a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 873 05a4 4FEA0343 		lsl	r3, r3, #16
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 874              		.loc 1 796 0
 875 05a8 1343     		orrs	r3, r3, r2
 876 05aa FB60     		str	r3, [r7, #12]
 877 05ac 1EE0     		b	.L40
 878              	.L39:
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 879              		.loc 1 803 0
 880 05ae 3B68     		ldr	r3, [r7, #0]
 881 05b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 882 05b2 1846     		mov	r0, r3
 883 05b4 01F0F2FA 		bl	RTC_ByteToBcd2
 884 05b8 0346     		mov	r3, r0
 885 05ba 4FEA0344 		lsl	r4, r3, #16
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 886              		.loc 1 804 0
 887 05be 3B68     		ldr	r3, [r7, #0]
 888 05c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 889 05c2 1846     		mov	r0, r3
 890 05c4 01F0EAFA 		bl	RTC_ByteToBcd2
 891 05c8 0346     		mov	r3, r0
 892 05ca 4FEA0323 		lsl	r3, r3, #8
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 893              		.loc 1 803 0
 894 05ce 1C43     		orrs	r4, r4, r3
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 895              		.loc 1 805 0
 896 05d0 3B68     		ldr	r3, [r7, #0]
 897 05d2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 898 05d4 1846     		mov	r0, r3
 899 05d6 01F0E1FA 		bl	RTC_ByteToBcd2
 900 05da 0346     		mov	r3, r0
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 901              		.loc 1 804 0
 902 05dc 44EA0302 		orr	r2, r4, r3
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 903              		.loc 1 806 0
 904 05e0 3B68     		ldr	r3, [r7, #0]
 905 05e2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 906 05e4 4FEA0343 		lsl	r3, r3, #16
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 907              		.loc 1 803 0
 908 05e8 1343     		orrs	r3, r3, r2
 909 05ea FB60     		str	r3, [r7, #12]
 910              	.L40:
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 911              		.loc 1 810 0
 912 05ec 4FF42053 		mov	r3, #10240
 913 05f0 C4F20003 		movt	r3, 16384
 914 05f4 4FF0CA02 		mov	r2, #202
 915 05f8 5A62     		str	r2, [r3, #36]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 916              		.loc 1 811 0
 917 05fa 4FF42053 		mov	r3, #10240
 918 05fe C4F20003 		movt	r3, 16384
 919 0602 4FF05302 		mov	r2, #83
 920 0606 5A62     		str	r2, [r3, #36]
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 921              		.loc 1 814 0
 922 0608 FFF7FEFF 		bl	RTC_EnterInitMode
 923 060c 0346     		mov	r3, r0
 924 060e 002B     		cmp	r3, #0
 925 0610 03D1     		bne	.L41
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 926              		.loc 1 816 0
 927 0612 4FF00003 		mov	r3, #0
 928 0616 FB72     		strb	r3, [r7, #11]
 929 0618 18E0     		b	.L42
 930              	.L41:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 931              		.loc 1 821 0
 932 061a 4FF42052 		mov	r2, #10240
 933 061e C4F20002 		movt	r2, 16384
 934 0622 F968     		ldr	r1, [r7, #12]
 935 0624 47F67F73 		movw	r3, #32639
 936 0628 C0F27F03 		movt	r3, 127
 937 062c 0B40     		ands	r3, r3, r1
 938 062e 1360     		str	r3, [r2, #0]
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 939              		.loc 1 824 0
 940 0630 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 941              		.loc 1 826 0
 942 0634 FFF7FEFF 		bl	RTC_WaitForSynchro
 943 0638 0346     		mov	r3, r0
 944 063a 002B     		cmp	r3, #0
 945 063c 03D1     		bne	.L43
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 946              		.loc 1 828 0
 947 063e 4FF00003 		mov	r3, #0
 948 0642 FB72     		strb	r3, [r7, #11]
 949 0644 02E0     		b	.L42
 950              	.L43:
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 951              		.loc 1 832 0
 952 0646 4FF00103 		mov	r3, #1
 953 064a FB72     		strb	r3, [r7, #11]
 954              	.L42:
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 955              		.loc 1 837 0
 956 064c 4FF42053 		mov	r3, #10240
 957 0650 C4F20003 		movt	r3, 16384
 958 0654 4FF0FF02 		mov	r2, #255
 959 0658 5A62     		str	r2, [r3, #36]
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 960              		.loc 1 839 0
 961 065a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 962              		.loc 1 840 0
 963 065c 1846     		mov	r0, r3
 964 065e 07F11407 		add	r7, r7, #20
 965 0662 BD46     		mov	sp, r7
 966 0664 90BD     		pop	{r4, r7, pc}
 967              		.cfi_endproc
 968              	.LFE119:
 970 0666 00BF     		.align	2
 971              		.global	RTC_TimeStructInit
 972              		.thumb
 973              		.thumb_func
 975              	RTC_TimeStructInit:
 976              	.LFB120:
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 977              		.loc 1 850 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 8
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981              		@ link register save eliminated.
 982 0668 80B4     		push	{r7}
 983              	.LCFI29:
 984              		.cfi_def_cfa_offset 4
 985              		.cfi_offset 7, -4
 986 066a 83B0     		sub	sp, sp, #12
 987              	.LCFI30:
 988              		.cfi_def_cfa_offset 16
 989 066c 00AF     		add	r7, sp, #0
 990              	.LCFI31:
 991              		.cfi_def_cfa_register 7
 992 066e 7860     		str	r0, [r7, #4]
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 993              		.loc 1 852 0
 994 0670 7B68     		ldr	r3, [r7, #4]
 995 0672 4FF00002 		mov	r2, #0
 996 0676 DA70     		strb	r2, [r3, #3]
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 997              		.loc 1 853 0
 998 0678 7B68     		ldr	r3, [r7, #4]
 999 067a 4FF00002 		mov	r2, #0
 1000 067e 1A70     		strb	r2, [r3, #0]
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1001              		.loc 1 854 0
 1002 0680 7B68     		ldr	r3, [r7, #4]
 1003 0682 4FF00002 		mov	r2, #0
 1004 0686 5A70     		strb	r2, [r3, #1]
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1005              		.loc 1 855 0
 1006 0688 7B68     		ldr	r3, [r7, #4]
 1007 068a 4FF00002 		mov	r2, #0
 1008 068e 9A70     		strb	r2, [r3, #2]
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1009              		.loc 1 856 0
 1010 0690 07F10C07 		add	r7, r7, #12
 1011 0694 BD46     		mov	sp, r7
 1012 0696 80BC     		pop	{r7}
 1013 0698 7047     		bx	lr
 1014              		.cfi_endproc
 1015              	.LFE120:
 1017 069a 00BF     		.align	2
 1018              		.global	RTC_GetTime
 1019              		.thumb
 1020              		.thumb_func
 1022              	RTC_GetTime:
 1023              	.LFB121:
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1024              		.loc 1 869 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 16
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028 069c 80B5     		push	{r7, lr}
 1029              	.LCFI32:
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 14, -4
 1032              		.cfi_offset 7, -8
 1033 069e 84B0     		sub	sp, sp, #16
 1034              	.LCFI33:
 1035              		.cfi_def_cfa_offset 24
 1036 06a0 00AF     		add	r7, sp, #0
 1037              	.LCFI34:
 1038              		.cfi_def_cfa_register 7
 1039 06a2 7860     		str	r0, [r7, #4]
 1040 06a4 3960     		str	r1, [r7, #0]
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1041              		.loc 1 870 0
 1042 06a6 4FF00003 		mov	r3, #0
 1043 06aa FB60     		str	r3, [r7, #12]
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1044              		.loc 1 876 0
 1045 06ac 4FF42053 		mov	r3, #10240
 1046 06b0 C4F20003 		movt	r3, 16384
 1047 06b4 1B68     		ldr	r3, [r3, #0]
 1048 06b6 1A46     		mov	r2, r3
 1049 06b8 47F67F73 		movw	r3, #32639
 1050 06bc C0F27F03 		movt	r3, 127
 1051 06c0 1340     		ands	r3, r3, r2
 1052 06c2 FB60     		str	r3, [r7, #12]
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1053              		.loc 1 879 0
 1054 06c4 FB68     		ldr	r3, [r7, #12]
 1055 06c6 03F47C13 		and	r3, r3, #4128768
 1056 06ca 4FEA1343 		lsr	r3, r3, #16
 1057 06ce DAB2     		uxtb	r2, r3
 1058 06d0 3B68     		ldr	r3, [r7, #0]
 1059 06d2 1A70     		strb	r2, [r3, #0]
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1060              		.loc 1 880 0
 1061 06d4 FB68     		ldr	r3, [r7, #12]
 1062 06d6 03F4FE43 		and	r3, r3, #32512
 1063 06da 4FEA1323 		lsr	r3, r3, #8
 1064 06de DAB2     		uxtb	r2, r3
 1065 06e0 3B68     		ldr	r3, [r7, #0]
 1066 06e2 5A70     		strb	r2, [r3, #1]
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1067              		.loc 1 881 0
 1068 06e4 FB68     		ldr	r3, [r7, #12]
 1069 06e6 DBB2     		uxtb	r3, r3
 1070 06e8 03F07F03 		and	r3, r3, #127
 1071 06ec DAB2     		uxtb	r2, r3
 1072 06ee 3B68     		ldr	r3, [r7, #0]
 1073 06f0 9A70     		strb	r2, [r3, #2]
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1074              		.loc 1 882 0
 1075 06f2 FB68     		ldr	r3, [r7, #12]
 1076 06f4 03F48003 		and	r3, r3, #4194304
 1077 06f8 4FEA1343 		lsr	r3, r3, #16
 1078 06fc DAB2     		uxtb	r2, r3
 1079 06fe 3B68     		ldr	r3, [r7, #0]
 1080 0700 DA70     		strb	r2, [r3, #3]
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1081              		.loc 1 885 0
 1082 0702 7B68     		ldr	r3, [r7, #4]
 1083 0704 002B     		cmp	r3, #0
 1084 0706 1AD1     		bne	.L45
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1085              		.loc 1 888 0
 1086 0708 3B68     		ldr	r3, [r7, #0]
 1087 070a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1088 070c 1846     		mov	r0, r3
 1089 070e 01F067FA 		bl	RTC_Bcd2ToByte
 1090 0712 0346     		mov	r3, r0
 1091 0714 1A46     		mov	r2, r3
 1092 0716 3B68     		ldr	r3, [r7, #0]
 1093 0718 1A70     		strb	r2, [r3, #0]
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1094              		.loc 1 889 0
 1095 071a 3B68     		ldr	r3, [r7, #0]
 1096 071c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1097 071e 1846     		mov	r0, r3
 1098 0720 01F05EFA 		bl	RTC_Bcd2ToByte
 1099 0724 0346     		mov	r3, r0
 1100 0726 1A46     		mov	r2, r3
 1101 0728 3B68     		ldr	r3, [r7, #0]
 1102 072a 5A70     		strb	r2, [r3, #1]
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1103              		.loc 1 890 0
 1104 072c 3B68     		ldr	r3, [r7, #0]
 1105 072e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1106 0730 1846     		mov	r0, r3
 1107 0732 01F055FA 		bl	RTC_Bcd2ToByte
 1108 0736 0346     		mov	r3, r0
 1109 0738 1A46     		mov	r2, r3
 1110 073a 3B68     		ldr	r3, [r7, #0]
 1111 073c 9A70     		strb	r2, [r3, #2]
 1112              	.L45:
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1113              		.loc 1 892 0
 1114 073e 07F11007 		add	r7, r7, #16
 1115 0742 BD46     		mov	sp, r7
 1116 0744 80BD     		pop	{r7, pc}
 1117              		.cfi_endproc
 1118              	.LFE121:
 1120 0746 00BF     		.align	2
 1121              		.global	RTC_GetSubSecond
 1122              		.thumb
 1123              		.thumb_func
 1125              	RTC_GetSubSecond:
 1126              	.LFB122:
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1127              		.loc 1 902 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 8
 1130              		@ frame_needed = 1, uses_anonymous_args = 0
 1131              		@ link register save eliminated.
 1132 0748 80B4     		push	{r7}
 1133              	.LCFI35:
 1134              		.cfi_def_cfa_offset 4
 1135              		.cfi_offset 7, -4
 1136 074a 83B0     		sub	sp, sp, #12
 1137              	.LCFI36:
 1138              		.cfi_def_cfa_offset 16
 1139 074c 00AF     		add	r7, sp, #0
 1140              	.LCFI37:
 1141              		.cfi_def_cfa_register 7
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1142              		.loc 1 903 0
 1143 074e 4FF00003 		mov	r3, #0
 1144 0752 7B60     		str	r3, [r7, #4]
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1145              		.loc 1 906 0
 1146 0754 4FF42053 		mov	r3, #10240
 1147 0758 C4F20003 		movt	r3, 16384
 1148 075c 9B6A     		ldr	r3, [r3, #40]
 1149 075e 7B60     		str	r3, [r7, #4]
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1150              		.loc 1 909 0
 1151 0760 4FF42053 		mov	r3, #10240
 1152 0764 C4F20003 		movt	r3, 16384
 1153 0768 5B68     		ldr	r3, [r3, #4]
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1154              		.loc 1 911 0
 1155 076a 7B68     		ldr	r3, [r7, #4]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1156              		.loc 1 912 0
 1157 076c 1846     		mov	r0, r3
 1158 076e 07F10C07 		add	r7, r7, #12
 1159 0772 BD46     		mov	sp, r7
 1160 0774 80BC     		pop	{r7}
 1161 0776 7047     		bx	lr
 1162              		.cfi_endproc
 1163              	.LFE122:
 1165              		.align	2
 1166              		.global	RTC_SetDate
 1167              		.thumb
 1168              		.thumb_func
 1170              	RTC_SetDate:
 1171              	.LFB123:
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1172              		.loc 1 927 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 16
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0778 90B5     		push	{r4, r7, lr}
 1177              	.LCFI38:
 1178              		.cfi_def_cfa_offset 12
 1179              		.cfi_offset 14, -4
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 4, -12
 1182 077a 85B0     		sub	sp, sp, #20
 1183              	.LCFI39:
 1184              		.cfi_def_cfa_offset 32
 1185 077c 00AF     		add	r7, sp, #0
 1186              	.LCFI40:
 1187              		.cfi_def_cfa_register 7
 1188 077e 7860     		str	r0, [r7, #4]
 1189 0780 3960     		str	r1, [r7, #0]
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1190              		.loc 1 928 0
 1191 0782 4FF00003 		mov	r3, #0
 1192 0786 FB60     		str	r3, [r7, #12]
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1193              		.loc 1 929 0
 1194 0788 4FF00003 		mov	r3, #0
 1195 078c FB72     		strb	r3, [r7, #11]
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1196              		.loc 1 934 0
 1197 078e 7B68     		ldr	r3, [r7, #4]
 1198 0790 002B     		cmp	r3, #0
 1199 0792 0FD1     		bne	.L49
 1200              		.loc 1 934 0 is_stmt 0 discriminator 1
 1201 0794 3B68     		ldr	r3, [r7, #0]
 1202 0796 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1203 0798 03F01003 		and	r3, r3, #16
 1204 079c 002B     		cmp	r3, #0
 1205 079e 09D0     		beq	.L49
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1206              		.loc 1 936 0 is_stmt 1
 1207 07a0 3B68     		ldr	r3, [r7, #0]
 1208 07a2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1209 07a4 23F01003 		bic	r3, r3, #16
 1210 07a8 DBB2     		uxtb	r3, r3
 1211 07aa 03F10A03 		add	r3, r3, #10
 1212 07ae DAB2     		uxtb	r2, r3
 1213 07b0 3B68     		ldr	r3, [r7, #0]
 1214 07b2 5A70     		strb	r2, [r3, #1]
 1215              	.L49:
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1216              		.loc 1 938 0
 1217 07b4 7B68     		ldr	r3, [r7, #4]
 1218 07b6 002B     		cmp	r3, #0
 1219 07b8 0DD0     		beq	.L50
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1220              		.loc 1 947 0
 1221 07ba 3B68     		ldr	r3, [r7, #0]
 1222 07bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1223 07be 1846     		mov	r0, r3
 1224 07c0 01F00EFA 		bl	RTC_Bcd2ToByte
 1225 07c4 0346     		mov	r3, r0
 1226 07c6 FB60     		str	r3, [r7, #12]
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1227              		.loc 1 949 0
 1228 07c8 3B68     		ldr	r3, [r7, #0]
 1229 07ca 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1230 07cc 1846     		mov	r0, r3
 1231 07ce 01F007FA 		bl	RTC_Bcd2ToByte
 1232 07d2 0346     		mov	r3, r0
 1233 07d4 FB60     		str	r3, [r7, #12]
 1234              	.L50:
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1235              		.loc 1 955 0
 1236 07d6 7B68     		ldr	r3, [r7, #4]
 1237 07d8 002B     		cmp	r3, #0
 1238 07da 12D0     		beq	.L51
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1239              		.loc 1 957 0
 1240 07dc 3B68     		ldr	r3, [r7, #0]
 1241 07de DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1242 07e0 4FEA0342 		lsl	r2, r3, #16
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1243              		.loc 1 958 0
 1244 07e4 3B68     		ldr	r3, [r7, #0]
 1245 07e6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1246 07e8 4FEA0323 		lsl	r3, r3, #8
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1247              		.loc 1 957 0
 1248 07ec 1A43     		orrs	r2, r2, r3
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1249              		.loc 1 959 0
 1250 07ee 3B68     		ldr	r3, [r7, #0]
 1251 07f0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1252              		.loc 1 958 0
 1253 07f2 1A43     		orrs	r2, r2, r3
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1254              		.loc 1 960 0
 1255 07f4 3B68     		ldr	r3, [r7, #0]
 1256 07f6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1257 07f8 4FEA4333 		lsl	r3, r3, #13
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1258              		.loc 1 957 0
 1259 07fc 1343     		orrs	r3, r3, r2
 1260 07fe FB60     		str	r3, [r7, #12]
 1261 0800 1EE0     		b	.L52
 1262              	.L51:
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1263              		.loc 1 964 0
 1264 0802 3B68     		ldr	r3, [r7, #0]
 1265 0804 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1266 0806 1846     		mov	r0, r3
 1267 0808 01F0C8F9 		bl	RTC_ByteToBcd2
 1268 080c 0346     		mov	r3, r0
 1269 080e 4FEA0344 		lsl	r4, r3, #16
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1270              		.loc 1 965 0
 1271 0812 3B68     		ldr	r3, [r7, #0]
 1272 0814 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1273 0816 1846     		mov	r0, r3
 1274 0818 01F0C0F9 		bl	RTC_ByteToBcd2
 1275 081c 0346     		mov	r3, r0
 1276 081e 4FEA0323 		lsl	r3, r3, #8
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1277              		.loc 1 964 0
 1278 0822 1C43     		orrs	r4, r4, r3
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1279              		.loc 1 966 0
 1280 0824 3B68     		ldr	r3, [r7, #0]
 1281 0826 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1282 0828 1846     		mov	r0, r3
 1283 082a 01F0B7F9 		bl	RTC_ByteToBcd2
 1284 082e 0346     		mov	r3, r0
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1285              		.loc 1 965 0
 1286 0830 44EA0302 		orr	r2, r4, r3
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1287              		.loc 1 967 0
 1288 0834 3B68     		ldr	r3, [r7, #0]
 1289 0836 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1290 0838 4FEA4333 		lsl	r3, r3, #13
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1291              		.loc 1 964 0
 1292 083c 1343     		orrs	r3, r3, r2
 1293 083e FB60     		str	r3, [r7, #12]
 1294              	.L52:
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1295              		.loc 1 971 0
 1296 0840 4FF42053 		mov	r3, #10240
 1297 0844 C4F20003 		movt	r3, 16384
 1298 0848 4FF0CA02 		mov	r2, #202
 1299 084c 5A62     		str	r2, [r3, #36]
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1300              		.loc 1 972 0
 1301 084e 4FF42053 		mov	r3, #10240
 1302 0852 C4F20003 		movt	r3, 16384
 1303 0856 4FF05302 		mov	r2, #83
 1304 085a 5A62     		str	r2, [r3, #36]
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1305              		.loc 1 975 0
 1306 085c FFF7FEFF 		bl	RTC_EnterInitMode
 1307 0860 0346     		mov	r3, r0
 1308 0862 002B     		cmp	r3, #0
 1309 0864 03D1     		bne	.L53
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1310              		.loc 1 977 0
 1311 0866 4FF00003 		mov	r3, #0
 1312 086a FB72     		strb	r3, [r7, #11]
 1313 086c 17E0     		b	.L54
 1314              	.L53:
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1315              		.loc 1 982 0
 1316 086e 4FF42053 		mov	r3, #10240
 1317 0872 C4F20003 		movt	r3, 16384
 1318 0876 FA68     		ldr	r2, [r7, #12]
 1319 0878 22F07F42 		bic	r2, r2, #-16777216
 1320 087c 22F0C002 		bic	r2, r2, #192
 1321 0880 5A60     		str	r2, [r3, #4]
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1322              		.loc 1 985 0
 1323 0882 FFF7FEFF 		bl	RTC_ExitInitMode
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1324              		.loc 1 987 0
 1325 0886 FFF7FEFF 		bl	RTC_WaitForSynchro
 1326 088a 0346     		mov	r3, r0
 1327 088c 002B     		cmp	r3, #0
 1328 088e 03D1     		bne	.L55
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1329              		.loc 1 989 0
 1330 0890 4FF00003 		mov	r3, #0
 1331 0894 FB72     		strb	r3, [r7, #11]
 1332 0896 02E0     		b	.L54
 1333              	.L55:
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1334              		.loc 1 993 0
 1335 0898 4FF00103 		mov	r3, #1
 1336 089c FB72     		strb	r3, [r7, #11]
 1337              	.L54:
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1338              		.loc 1 997 0
 1339 089e 4FF42053 		mov	r3, #10240
 1340 08a2 C4F20003 		movt	r3, 16384
 1341 08a6 4FF0FF02 		mov	r2, #255
 1342 08aa 5A62     		str	r2, [r3, #36]
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1343              		.loc 1 999 0
 1344 08ac FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1345              		.loc 1 1000 0
 1346 08ae 1846     		mov	r0, r3
 1347 08b0 07F11407 		add	r7, r7, #20
 1348 08b4 BD46     		mov	sp, r7
 1349 08b6 90BD     		pop	{r4, r7, pc}
 1350              		.cfi_endproc
 1351              	.LFE123:
 1353              		.align	2
 1354              		.global	RTC_DateStructInit
 1355              		.thumb
 1356              		.thumb_func
 1358              	RTC_DateStructInit:
 1359              	.LFB124:
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1360              		.loc 1 1010 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 8
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 1365 08b8 80B4     		push	{r7}
 1366              	.LCFI41:
 1367              		.cfi_def_cfa_offset 4
 1368              		.cfi_offset 7, -4
 1369 08ba 83B0     		sub	sp, sp, #12
 1370              	.LCFI42:
 1371              		.cfi_def_cfa_offset 16
 1372 08bc 00AF     		add	r7, sp, #0
 1373              	.LCFI43:
 1374              		.cfi_def_cfa_register 7
 1375 08be 7860     		str	r0, [r7, #4]
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1376              		.loc 1 1012 0
 1377 08c0 7B68     		ldr	r3, [r7, #4]
 1378 08c2 4FF00102 		mov	r2, #1
 1379 08c6 1A70     		strb	r2, [r3, #0]
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1380              		.loc 1 1013 0
 1381 08c8 7B68     		ldr	r3, [r7, #4]
 1382 08ca 4FF00102 		mov	r2, #1
 1383 08ce 9A70     		strb	r2, [r3, #2]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1384              		.loc 1 1014 0
 1385 08d0 7B68     		ldr	r3, [r7, #4]
 1386 08d2 4FF00102 		mov	r2, #1
 1387 08d6 5A70     		strb	r2, [r3, #1]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1388              		.loc 1 1015 0
 1389 08d8 7B68     		ldr	r3, [r7, #4]
 1390 08da 4FF00002 		mov	r2, #0
 1391 08de DA70     		strb	r2, [r3, #3]
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1392              		.loc 1 1016 0
 1393 08e0 07F10C07 		add	r7, r7, #12
 1394 08e4 BD46     		mov	sp, r7
 1395 08e6 80BC     		pop	{r7}
 1396 08e8 7047     		bx	lr
 1397              		.cfi_endproc
 1398              	.LFE124:
 1400 08ea 00BF     		.align	2
 1401              		.global	RTC_GetDate
 1402              		.thumb
 1403              		.thumb_func
 1405              	RTC_GetDate:
 1406              	.LFB125:
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1407              		.loc 1 1029 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 16
 1410              		@ frame_needed = 1, uses_anonymous_args = 0
 1411 08ec 80B5     		push	{r7, lr}
 1412              	.LCFI44:
 1413              		.cfi_def_cfa_offset 8
 1414              		.cfi_offset 14, -4
 1415              		.cfi_offset 7, -8
 1416 08ee 84B0     		sub	sp, sp, #16
 1417              	.LCFI45:
 1418              		.cfi_def_cfa_offset 24
 1419 08f0 00AF     		add	r7, sp, #0
 1420              	.LCFI46:
 1421              		.cfi_def_cfa_register 7
 1422 08f2 7860     		str	r0, [r7, #4]
 1423 08f4 3960     		str	r1, [r7, #0]
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1424              		.loc 1 1030 0
 1425 08f6 4FF00003 		mov	r3, #0
 1426 08fa FB60     		str	r3, [r7, #12]
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1427              		.loc 1 1036 0
 1428 08fc 4FF42053 		mov	r3, #10240
 1429 0900 C4F20003 		movt	r3, 16384
 1430 0904 5B68     		ldr	r3, [r3, #4]
 1431 0906 23F07F43 		bic	r3, r3, #-16777216
 1432 090a 23F0C003 		bic	r3, r3, #192
 1433 090e FB60     		str	r3, [r7, #12]
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1434              		.loc 1 1039 0
 1435 0910 FB68     		ldr	r3, [r7, #12]
 1436 0912 03F47F03 		and	r3, r3, #16711680
 1437 0916 4FEA1343 		lsr	r3, r3, #16
 1438 091a DAB2     		uxtb	r2, r3
 1439 091c 3B68     		ldr	r3, [r7, #0]
 1440 091e DA70     		strb	r2, [r3, #3]
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1441              		.loc 1 1040 0
 1442 0920 FB68     		ldr	r3, [r7, #12]
 1443 0922 03F4F853 		and	r3, r3, #7936
 1444 0926 4FEA1323 		lsr	r3, r3, #8
 1445 092a DAB2     		uxtb	r2, r3
 1446 092c 3B68     		ldr	r3, [r7, #0]
 1447 092e 5A70     		strb	r2, [r3, #1]
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1448              		.loc 1 1041 0
 1449 0930 FB68     		ldr	r3, [r7, #12]
 1450 0932 DBB2     		uxtb	r3, r3
 1451 0934 03F03F03 		and	r3, r3, #63
 1452 0938 DAB2     		uxtb	r2, r3
 1453 093a 3B68     		ldr	r3, [r7, #0]
 1454 093c 9A70     		strb	r2, [r3, #2]
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1455              		.loc 1 1042 0
 1456 093e FB68     		ldr	r3, [r7, #12]
 1457 0940 03F46043 		and	r3, r3, #57344
 1458 0944 4FEA5333 		lsr	r3, r3, #13
 1459 0948 DAB2     		uxtb	r2, r3
 1460 094a 3B68     		ldr	r3, [r7, #0]
 1461 094c 1A70     		strb	r2, [r3, #0]
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1462              		.loc 1 1045 0
 1463 094e 7B68     		ldr	r3, [r7, #4]
 1464 0950 002B     		cmp	r3, #0
 1465 0952 1ED1     		bne	.L57
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1466              		.loc 1 1048 0
 1467 0954 3B68     		ldr	r3, [r7, #0]
 1468 0956 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1469 0958 1846     		mov	r0, r3
 1470 095a 01F041F9 		bl	RTC_Bcd2ToByte
 1471 095e 0346     		mov	r3, r0
 1472 0960 1A46     		mov	r2, r3
 1473 0962 3B68     		ldr	r3, [r7, #0]
 1474 0964 DA70     		strb	r2, [r3, #3]
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1475              		.loc 1 1049 0
 1476 0966 3B68     		ldr	r3, [r7, #0]
 1477 0968 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1478 096a 1846     		mov	r0, r3
 1479 096c 01F038F9 		bl	RTC_Bcd2ToByte
 1480 0970 0346     		mov	r3, r0
 1481 0972 1A46     		mov	r2, r3
 1482 0974 3B68     		ldr	r3, [r7, #0]
 1483 0976 5A70     		strb	r2, [r3, #1]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1484              		.loc 1 1050 0
 1485 0978 3B68     		ldr	r3, [r7, #0]
 1486 097a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1487 097c 1846     		mov	r0, r3
 1488 097e 01F02FF9 		bl	RTC_Bcd2ToByte
 1489 0982 0346     		mov	r3, r0
 1490 0984 1A46     		mov	r2, r3
 1491 0986 3B68     		ldr	r3, [r7, #0]
 1492 0988 9A70     		strb	r2, [r3, #2]
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1493              		.loc 1 1051 0
 1494 098a 3B68     		ldr	r3, [r7, #0]
 1495 098c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1496 098e 3B68     		ldr	r3, [r7, #0]
 1497 0990 1A70     		strb	r2, [r3, #0]
 1498              	.L57:
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1499              		.loc 1 1053 0
 1500 0992 07F11007 		add	r7, r7, #16
 1501 0996 BD46     		mov	sp, r7
 1502 0998 80BD     		pop	{r7, pc}
 1503              		.cfi_endproc
 1504              	.LFE125:
 1506 099a 00BF     		.align	2
 1507              		.global	RTC_SetAlarm
 1508              		.thumb
 1509              		.thumb_func
 1511              	RTC_SetAlarm:
 1512              	.LFB126:
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1513              		.loc 1 1090 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 24
 1516              		@ frame_needed = 1, uses_anonymous_args = 0
 1517 099c 90B5     		push	{r4, r7, lr}
 1518              	.LCFI47:
 1519              		.cfi_def_cfa_offset 12
 1520              		.cfi_offset 14, -4
 1521              		.cfi_offset 7, -8
 1522              		.cfi_offset 4, -12
 1523 099e 87B0     		sub	sp, sp, #28
 1524              	.LCFI48:
 1525              		.cfi_def_cfa_offset 40
 1526 09a0 00AF     		add	r7, sp, #0
 1527              	.LCFI49:
 1528              		.cfi_def_cfa_register 7
 1529 09a2 F860     		str	r0, [r7, #12]
 1530 09a4 B960     		str	r1, [r7, #8]
 1531 09a6 7A60     		str	r2, [r7, #4]
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1532              		.loc 1 1091 0
 1533 09a8 4FF00003 		mov	r3, #0
 1534 09ac 7B61     		str	r3, [r7, #20]
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1535              		.loc 1 1099 0
 1536 09ae FB68     		ldr	r3, [r7, #12]
 1537 09b0 002B     		cmp	r3, #0
 1538 09b2 0DD1     		bne	.L60
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1539              		.loc 1 1101 0
 1540 09b4 4FF42053 		mov	r3, #10240
 1541 09b8 C4F20003 		movt	r3, 16384
 1542 09bc 9B68     		ldr	r3, [r3, #8]
 1543 09be 03F04003 		and	r3, r3, #64
 1544 09c2 002B     		cmp	r3, #0
 1545 09c4 2CD1     		bne	.L62
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1546              		.loc 1 1108 0
 1547 09c6 7B68     		ldr	r3, [r7, #4]
 1548 09c8 4FF00002 		mov	r2, #0
 1549 09cc DA70     		strb	r2, [r3, #3]
 1550 09ce 27E0     		b	.L62
 1551              	.L60:
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1552              		.loc 1 1125 0
 1553 09d0 4FF42053 		mov	r3, #10240
 1554 09d4 C4F20003 		movt	r3, 16384
 1555 09d8 9B68     		ldr	r3, [r3, #8]
 1556 09da 03F04003 		and	r3, r3, #64
 1557 09de 002B     		cmp	r3, #0
 1558 09e0 07D0     		beq	.L63
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1559              		.loc 1 1127 0
 1560 09e2 7B68     		ldr	r3, [r7, #4]
 1561 09e4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1562 09e6 1846     		mov	r0, r3
 1563 09e8 01F0FAF8 		bl	RTC_Bcd2ToByte
 1564 09ec 0346     		mov	r3, r0
 1565 09ee 7B61     		str	r3, [r7, #20]
 1566 09f0 03E0     		b	.L64
 1567              	.L63:
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1568              		.loc 1 1133 0
 1569 09f2 7B68     		ldr	r3, [r7, #4]
 1570 09f4 4FF00002 		mov	r2, #0
 1571 09f8 DA70     		strb	r2, [r3, #3]
 1572              	.L64:
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1573              		.loc 1 1140 0
 1574 09fa 7B68     		ldr	r3, [r7, #4]
 1575 09fc 9B68     		ldr	r3, [r3, #8]
 1576 09fe 002B     		cmp	r3, #0
 1577 0a00 07D1     		bne	.L65
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1578              		.loc 1 1142 0
 1579 0a02 7B68     		ldr	r3, [r7, #4]
 1580 0a04 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1581 0a06 1846     		mov	r0, r3
 1582 0a08 01F0EAF8 		bl	RTC_Bcd2ToByte
 1583 0a0c 0346     		mov	r3, r0
 1584 0a0e 7B61     		str	r3, [r7, #20]
 1585 0a10 06E0     		b	.L62
 1586              	.L65:
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1587              		.loc 1 1147 0
 1588 0a12 7B68     		ldr	r3, [r7, #4]
 1589 0a14 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1590 0a16 1846     		mov	r0, r3
 1591 0a18 01F0E2F8 		bl	RTC_Bcd2ToByte
 1592 0a1c 0346     		mov	r3, r0
 1593 0a1e 7B61     		str	r3, [r7, #20]
 1594              	.L62:
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1595              		.loc 1 1153 0
 1596 0a20 FB68     		ldr	r3, [r7, #12]
 1597 0a22 002B     		cmp	r3, #0
 1598 0a24 1DD0     		beq	.L66
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1599              		.loc 1 1155 0
 1600 0a26 7B68     		ldr	r3, [r7, #4]
 1601 0a28 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1602 0a2a 4FEA0342 		lsl	r2, r3, #16
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1603              		.loc 1 1156 0
 1604 0a2e 7B68     		ldr	r3, [r7, #4]
 1605 0a30 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1606 0a32 4FEA0323 		lsl	r3, r3, #8
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1607              		.loc 1 1155 0
 1608 0a36 1A43     		orrs	r2, r2, r3
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1609              		.loc 1 1157 0
 1610 0a38 7B68     		ldr	r3, [r7, #4]
 1611 0a3a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1612              		.loc 1 1156 0
 1613 0a3c 1A43     		orrs	r2, r2, r3
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1614              		.loc 1 1158 0
 1615 0a3e 7B68     		ldr	r3, [r7, #4]
 1616 0a40 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1617 0a42 4FEA0343 		lsl	r3, r3, #16
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1618              		.loc 1 1157 0
 1619 0a46 1A43     		orrs	r2, r2, r3
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1620              		.loc 1 1159 0
 1621 0a48 7B68     		ldr	r3, [r7, #4]
 1622 0a4a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1623 0a4c 4FEA0363 		lsl	r3, r3, #24
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1624              		.loc 1 1158 0
 1625 0a50 1A43     		orrs	r2, r2, r3
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1626              		.loc 1 1160 0
 1627 0a52 7B68     		ldr	r3, [r7, #4]
 1628 0a54 9B68     		ldr	r3, [r3, #8]
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1629              		.loc 1 1159 0
 1630 0a56 1A43     		orrs	r2, r2, r3
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1631              		.loc 1 1161 0
 1632 0a58 7B68     		ldr	r3, [r7, #4]
 1633 0a5a 5B68     		ldr	r3, [r3, #4]
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1634              		.loc 1 1155 0
 1635 0a5c 1343     		orrs	r3, r3, r2
 1636 0a5e 7B61     		str	r3, [r7, #20]
 1637 0a60 2FE0     		b	.L67
 1638              	.L66:
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1639              		.loc 1 1165 0
 1640 0a62 7B68     		ldr	r3, [r7, #4]
 1641 0a64 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1642 0a66 1846     		mov	r0, r3
 1643 0a68 01F098F8 		bl	RTC_ByteToBcd2
 1644 0a6c 0346     		mov	r3, r0
 1645 0a6e 4FEA0344 		lsl	r4, r3, #16
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1646              		.loc 1 1166 0
 1647 0a72 7B68     		ldr	r3, [r7, #4]
 1648 0a74 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1649 0a76 1846     		mov	r0, r3
 1650 0a78 01F090F8 		bl	RTC_ByteToBcd2
 1651 0a7c 0346     		mov	r3, r0
 1652 0a7e 4FEA0323 		lsl	r3, r3, #8
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1653              		.loc 1 1165 0
 1654 0a82 1C43     		orrs	r4, r4, r3
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1655              		.loc 1 1167 0
 1656 0a84 7B68     		ldr	r3, [r7, #4]
 1657 0a86 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1658 0a88 1846     		mov	r0, r3
 1659 0a8a 01F087F8 		bl	RTC_ByteToBcd2
 1660 0a8e 0346     		mov	r3, r0
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1661              		.loc 1 1166 0
 1662 0a90 44EA0302 		orr	r2, r4, r3
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1663              		.loc 1 1168 0
 1664 0a94 7B68     		ldr	r3, [r7, #4]
 1665 0a96 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1666 0a98 4FEA0343 		lsl	r3, r3, #16
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1667              		.loc 1 1167 0
 1668 0a9c 42EA0304 		orr	r4, r2, r3
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1669              		.loc 1 1169 0
 1670 0aa0 7B68     		ldr	r3, [r7, #4]
 1671 0aa2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1672 0aa4 1846     		mov	r0, r3
 1673 0aa6 01F079F8 		bl	RTC_ByteToBcd2
 1674 0aaa 0346     		mov	r3, r0
 1675 0aac 4FEA0363 		lsl	r3, r3, #24
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1676              		.loc 1 1168 0
 1677 0ab0 44EA0302 		orr	r2, r4, r3
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1678              		.loc 1 1170 0
 1679 0ab4 7B68     		ldr	r3, [r7, #4]
 1680 0ab6 9B68     		ldr	r3, [r3, #8]
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1681              		.loc 1 1169 0
 1682 0ab8 1A43     		orrs	r2, r2, r3
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1683              		.loc 1 1171 0
 1684 0aba 7B68     		ldr	r3, [r7, #4]
 1685 0abc 5B68     		ldr	r3, [r3, #4]
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1686              		.loc 1 1165 0
 1687 0abe 1343     		orrs	r3, r3, r2
 1688 0ac0 7B61     		str	r3, [r7, #20]
 1689              	.L67:
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1690              		.loc 1 1175 0
 1691 0ac2 4FF42053 		mov	r3, #10240
 1692 0ac6 C4F20003 		movt	r3, 16384
 1693 0aca 4FF0CA02 		mov	r2, #202
 1694 0ace 5A62     		str	r2, [r3, #36]
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1695              		.loc 1 1176 0
 1696 0ad0 4FF42053 		mov	r3, #10240
 1697 0ad4 C4F20003 		movt	r3, 16384
 1698 0ad8 4FF05302 		mov	r2, #83
 1699 0adc 5A62     		str	r2, [r3, #36]
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1700              		.loc 1 1179 0
 1701 0ade BB68     		ldr	r3, [r7, #8]
 1702 0ae0 B3F5807F 		cmp	r3, #256
 1703 0ae4 06D1     		bne	.L68
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1704              		.loc 1 1181 0
 1705 0ae6 4FF42053 		mov	r3, #10240
 1706 0aea C4F20003 		movt	r3, 16384
 1707 0aee 7A69     		ldr	r2, [r7, #20]
 1708 0af0 DA61     		str	r2, [r3, #28]
 1709 0af2 05E0     		b	.L69
 1710              	.L68:
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1711              		.loc 1 1185 0
 1712 0af4 4FF42053 		mov	r3, #10240
 1713 0af8 C4F20003 		movt	r3, 16384
 1714 0afc 7A69     		ldr	r2, [r7, #20]
 1715 0afe 1A62     		str	r2, [r3, #32]
 1716              	.L69:
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1717              		.loc 1 1189 0
 1718 0b00 4FF42053 		mov	r3, #10240
 1719 0b04 C4F20003 		movt	r3, 16384
 1720 0b08 4FF0FF02 		mov	r2, #255
 1721 0b0c 5A62     		str	r2, [r3, #36]
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1722              		.loc 1 1190 0
 1723 0b0e 07F11C07 		add	r7, r7, #28
 1724 0b12 BD46     		mov	sp, r7
 1725 0b14 90BD     		pop	{r4, r7, pc}
 1726              		.cfi_endproc
 1727              	.LFE126:
 1729 0b16 00BF     		.align	2
 1730              		.global	RTC_AlarmStructInit
 1731              		.thumb
 1732              		.thumb_func
 1734              	RTC_AlarmStructInit:
 1735              	.LFB127:
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1736              		.loc 1 1201 0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 8
 1739              		@ frame_needed = 1, uses_anonymous_args = 0
 1740              		@ link register save eliminated.
 1741 0b18 80B4     		push	{r7}
 1742              	.LCFI50:
 1743              		.cfi_def_cfa_offset 4
 1744              		.cfi_offset 7, -4
 1745 0b1a 83B0     		sub	sp, sp, #12
 1746              	.LCFI51:
 1747              		.cfi_def_cfa_offset 16
 1748 0b1c 00AF     		add	r7, sp, #0
 1749              	.LCFI52:
 1750              		.cfi_def_cfa_register 7
 1751 0b1e 7860     		str	r0, [r7, #4]
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1752              		.loc 1 1203 0
 1753 0b20 7B68     		ldr	r3, [r7, #4]
 1754 0b22 4FF00002 		mov	r2, #0
 1755 0b26 DA70     		strb	r2, [r3, #3]
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1756              		.loc 1 1204 0
 1757 0b28 7B68     		ldr	r3, [r7, #4]
 1758 0b2a 4FF00002 		mov	r2, #0
 1759 0b2e 1A70     		strb	r2, [r3, #0]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1760              		.loc 1 1205 0
 1761 0b30 7B68     		ldr	r3, [r7, #4]
 1762 0b32 4FF00002 		mov	r2, #0
 1763 0b36 5A70     		strb	r2, [r3, #1]
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1764              		.loc 1 1206 0
 1765 0b38 7B68     		ldr	r3, [r7, #4]
 1766 0b3a 4FF00002 		mov	r2, #0
 1767 0b3e 9A70     		strb	r2, [r3, #2]
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1768              		.loc 1 1209 0
 1769 0b40 7B68     		ldr	r3, [r7, #4]
 1770 0b42 4FF00002 		mov	r2, #0
 1771 0b46 9A60     		str	r2, [r3, #8]
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1772              		.loc 1 1210 0
 1773 0b48 7B68     		ldr	r3, [r7, #4]
 1774 0b4a 4FF00102 		mov	r2, #1
 1775 0b4e 1A73     		strb	r2, [r3, #12]
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1776              		.loc 1 1213 0
 1777 0b50 7B68     		ldr	r3, [r7, #4]
 1778 0b52 4FF00002 		mov	r2, #0
 1779 0b56 5A60     		str	r2, [r3, #4]
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1780              		.loc 1 1214 0
 1781 0b58 07F10C07 		add	r7, r7, #12
 1782 0b5c BD46     		mov	sp, r7
 1783 0b5e 80BC     		pop	{r7}
 1784 0b60 7047     		bx	lr
 1785              		.cfi_endproc
 1786              	.LFE127:
 1788 0b62 00BF     		.align	2
 1789              		.global	RTC_GetAlarm
 1790              		.thumb
 1791              		.thumb_func
 1793              	RTC_GetAlarm:
 1794              	.LFB128:
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1795              		.loc 1 1231 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 24
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799 0b64 80B5     		push	{r7, lr}
 1800              	.LCFI53:
 1801              		.cfi_def_cfa_offset 8
 1802              		.cfi_offset 14, -4
 1803              		.cfi_offset 7, -8
 1804 0b66 86B0     		sub	sp, sp, #24
 1805              	.LCFI54:
 1806              		.cfi_def_cfa_offset 32
 1807 0b68 00AF     		add	r7, sp, #0
 1808              	.LCFI55:
 1809              		.cfi_def_cfa_register 7
 1810 0b6a F860     		str	r0, [r7, #12]
 1811 0b6c B960     		str	r1, [r7, #8]
 1812 0b6e 7A60     		str	r2, [r7, #4]
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1813              		.loc 1 1232 0
 1814 0b70 4FF00003 		mov	r3, #0
 1815 0b74 7B61     		str	r3, [r7, #20]
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1816              		.loc 1 1239 0
 1817 0b76 BB68     		ldr	r3, [r7, #8]
 1818 0b78 B3F5807F 		cmp	r3, #256
 1819 0b7c 06D1     		bne	.L72
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1820              		.loc 1 1241 0
 1821 0b7e 4FF42053 		mov	r3, #10240
 1822 0b82 C4F20003 		movt	r3, 16384
 1823 0b86 DB69     		ldr	r3, [r3, #28]
 1824 0b88 7B61     		str	r3, [r7, #20]
 1825 0b8a 05E0     		b	.L73
 1826              	.L72:
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1827              		.loc 1 1245 0
 1828 0b8c 4FF42053 		mov	r3, #10240
 1829 0b90 C4F20003 		movt	r3, 16384
 1830 0b94 1B6A     		ldr	r3, [r3, #32]
 1831 0b96 7B61     		str	r3, [r7, #20]
 1832              	.L73:
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1833              		.loc 1 1249 0
 1834 0b98 7B69     		ldr	r3, [r7, #20]
 1835 0b9a 03F47C13 		and	r3, r3, #4128768
 1836 0b9e 4FEA1343 		lsr	r3, r3, #16
 1837 0ba2 DAB2     		uxtb	r2, r3
 1838 0ba4 7B68     		ldr	r3, [r7, #4]
 1839 0ba6 1A70     		strb	r2, [r3, #0]
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1840              		.loc 1 1251 0
 1841 0ba8 7B69     		ldr	r3, [r7, #20]
 1842 0baa 03F4FE43 		and	r3, r3, #32512
 1843 0bae 4FEA1323 		lsr	r3, r3, #8
 1844 0bb2 DAB2     		uxtb	r2, r3
 1845 0bb4 7B68     		ldr	r3, [r7, #4]
 1846 0bb6 5A70     		strb	r2, [r3, #1]
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1847              		.loc 1 1253 0
 1848 0bb8 7B69     		ldr	r3, [r7, #20]
 1849 0bba DBB2     		uxtb	r3, r3
 1850 0bbc 03F07F03 		and	r3, r3, #127
 1851 0bc0 DAB2     		uxtb	r2, r3
 1852 0bc2 7B68     		ldr	r3, [r7, #4]
 1853 0bc4 9A70     		strb	r2, [r3, #2]
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1854              		.loc 1 1255 0
 1855 0bc6 7B69     		ldr	r3, [r7, #20]
 1856 0bc8 03F48003 		and	r3, r3, #4194304
 1857 0bcc 4FEA1343 		lsr	r3, r3, #16
 1858 0bd0 DAB2     		uxtb	r2, r3
 1859 0bd2 7B68     		ldr	r3, [r7, #4]
 1860 0bd4 DA70     		strb	r2, [r3, #3]
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1861              		.loc 1 1256 0
 1862 0bd6 7B69     		ldr	r3, [r7, #20]
 1863 0bd8 03F07C53 		and	r3, r3, #1056964608
 1864 0bdc 4FEA1363 		lsr	r3, r3, #24
 1865 0be0 DAB2     		uxtb	r2, r3
 1866 0be2 7B68     		ldr	r3, [r7, #4]
 1867 0be4 1A73     		strb	r2, [r3, #12]
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1868              		.loc 1 1257 0
 1869 0be6 7B69     		ldr	r3, [r7, #20]
 1870 0be8 03F08042 		and	r2, r3, #1073741824
 1871 0bec 7B68     		ldr	r3, [r7, #4]
 1872 0bee 9A60     		str	r2, [r3, #8]
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1873              		.loc 1 1258 0
 1874 0bf0 7B69     		ldr	r3, [r7, #20]
 1875 0bf2 03F08032 		and	r2, r3, #-2139062144
 1876 0bf6 7B68     		ldr	r3, [r7, #4]
 1877 0bf8 5A60     		str	r2, [r3, #4]
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1878              		.loc 1 1260 0
 1879 0bfa FB68     		ldr	r3, [r7, #12]
 1880 0bfc 002B     		cmp	r3, #0
 1881 0bfe 23D1     		bne	.L71
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1882              		.loc 1 1262 0
 1883 0c00 7B68     		ldr	r3, [r7, #4]
 1884 0c02 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1885 0c04 1846     		mov	r0, r3
 1886 0c06 00F0EBFF 		bl	RTC_Bcd2ToByte
 1887 0c0a 0346     		mov	r3, r0
 1888 0c0c 1A46     		mov	r2, r3
 1889 0c0e 7B68     		ldr	r3, [r7, #4]
 1890 0c10 1A70     		strb	r2, [r3, #0]
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1891              		.loc 1 1264 0
 1892 0c12 7B68     		ldr	r3, [r7, #4]
 1893 0c14 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1894 0c16 1846     		mov	r0, r3
 1895 0c18 00F0E2FF 		bl	RTC_Bcd2ToByte
 1896 0c1c 0346     		mov	r3, r0
 1897 0c1e 1A46     		mov	r2, r3
 1898 0c20 7B68     		ldr	r3, [r7, #4]
 1899 0c22 5A70     		strb	r2, [r3, #1]
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1900              		.loc 1 1266 0
 1901 0c24 7B68     		ldr	r3, [r7, #4]
 1902 0c26 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1903 0c28 1846     		mov	r0, r3
 1904 0c2a 00F0D9FF 		bl	RTC_Bcd2ToByte
 1905 0c2e 0346     		mov	r3, r0
 1906 0c30 1A46     		mov	r2, r3
 1907 0c32 7B68     		ldr	r3, [r7, #4]
 1908 0c34 9A70     		strb	r2, [r3, #2]
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1909              		.loc 1 1268 0
 1910 0c36 7B68     		ldr	r3, [r7, #4]
 1911 0c38 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1912 0c3a 1846     		mov	r0, r3
 1913 0c3c 00F0D0FF 		bl	RTC_Bcd2ToByte
 1914 0c40 0346     		mov	r3, r0
 1915 0c42 1A46     		mov	r2, r3
 1916 0c44 7B68     		ldr	r3, [r7, #4]
 1917 0c46 1A73     		strb	r2, [r3, #12]
 1918              	.L71:
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1919              		.loc 1 1270 0
 1920 0c48 07F11807 		add	r7, r7, #24
 1921 0c4c BD46     		mov	sp, r7
 1922 0c4e 80BD     		pop	{r7, pc}
 1923              		.cfi_endproc
 1924              	.LFE128:
 1926              		.align	2
 1927              		.global	RTC_AlarmCmd
 1928              		.thumb
 1929              		.thumb_func
 1931              	RTC_AlarmCmd:
 1932              	.LFB129:
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1933              		.loc 1 1285 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 24
 1936              		@ frame_needed = 1, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938 0c50 80B4     		push	{r7}
 1939              	.LCFI56:
 1940              		.cfi_def_cfa_offset 4
 1941              		.cfi_offset 7, -4
 1942 0c52 87B0     		sub	sp, sp, #28
 1943              	.LCFI57:
 1944              		.cfi_def_cfa_offset 32
 1945 0c54 00AF     		add	r7, sp, #0
 1946              	.LCFI58:
 1947              		.cfi_def_cfa_register 7
 1948 0c56 7860     		str	r0, [r7, #4]
 1949 0c58 0B46     		mov	r3, r1
 1950 0c5a FB70     		strb	r3, [r7, #3]
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1951              		.loc 1 1286 0
 1952 0c5c 4FF00003 		mov	r3, #0
 1953 0c60 FB60     		str	r3, [r7, #12]
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1954              		.loc 1 1287 0
 1955 0c62 4FF00003 		mov	r3, #0
 1956 0c66 3B61     		str	r3, [r7, #16]
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1957              		.loc 1 1288 0
 1958 0c68 4FF00003 		mov	r3, #0
 1959 0c6c FB75     		strb	r3, [r7, #23]
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1960              		.loc 1 1295 0
 1961 0c6e 4FF42053 		mov	r3, #10240
 1962 0c72 C4F20003 		movt	r3, 16384
 1963 0c76 4FF0CA02 		mov	r2, #202
 1964 0c7a 5A62     		str	r2, [r3, #36]
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1965              		.loc 1 1296 0
 1966 0c7c 4FF42053 		mov	r3, #10240
 1967 0c80 C4F20003 		movt	r3, 16384
 1968 0c84 4FF05302 		mov	r2, #83
 1969 0c88 5A62     		str	r2, [r3, #36]
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1970              		.loc 1 1299 0
 1971 0c8a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1972 0c8c 002B     		cmp	r3, #0
 1973 0c8e 10D0     		beq	.L76
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1974              		.loc 1 1301 0
 1975 0c90 4FF42053 		mov	r3, #10240
 1976 0c94 C4F20003 		movt	r3, 16384
 1977 0c98 4FF42052 		mov	r2, #10240
 1978 0c9c C4F20002 		movt	r2, 16384
 1979 0ca0 9268     		ldr	r2, [r2, #8]
 1980 0ca2 1146     		mov	r1, r2
 1981 0ca4 7A68     		ldr	r2, [r7, #4]
 1982 0ca6 0A43     		orrs	r2, r2, r1
 1983 0ca8 9A60     		str	r2, [r3, #8]
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1984              		.loc 1 1303 0
 1985 0caa 4FF00103 		mov	r3, #1
 1986 0cae FB75     		strb	r3, [r7, #23]
 1987 0cb0 37E0     		b	.L77
 1988              	.L76:
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1989              		.loc 1 1308 0
 1990 0cb2 4FF42053 		mov	r3, #10240
 1991 0cb6 C4F20003 		movt	r3, 16384
 1992 0cba 4FF42052 		mov	r2, #10240
 1993 0cbe C4F20002 		movt	r2, 16384
 1994 0cc2 9268     		ldr	r2, [r2, #8]
 1995 0cc4 1146     		mov	r1, r2
 1996 0cc6 7A68     		ldr	r2, [r7, #4]
 1997 0cc8 6FEA0202 		mvn	r2, r2
 1998 0ccc 0A40     		ands	r2, r2, r1
 1999 0cce 9A60     		str	r2, [r3, #8]
 2000              	.L79:
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2001              		.loc 1 1313 0 discriminator 1
 2002 0cd0 4FF42053 		mov	r3, #10240
 2003 0cd4 C4F20003 		movt	r3, 16384
 2004 0cd8 DB68     		ldr	r3, [r3, #12]
 2005 0cda 1A46     		mov	r2, r3
 2006 0cdc 7B68     		ldr	r3, [r7, #4]
 2007 0cde 4FEA1323 		lsr	r3, r3, #8
 2008 0ce2 1340     		ands	r3, r3, r2
 2009 0ce4 3B61     		str	r3, [r7, #16]
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2010              		.loc 1 1314 0 discriminator 1
 2011 0ce6 FB68     		ldr	r3, [r7, #12]
 2012 0ce8 03F10103 		add	r3, r3, #1
 2013 0cec FB60     		str	r3, [r7, #12]
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2014              		.loc 1 1315 0 discriminator 1
 2015 0cee FB68     		ldr	r3, [r7, #12]
 2016 0cf0 B3F5803F 		cmp	r3, #65536
 2017 0cf4 02D0     		beq	.L78
 2018 0cf6 3B69     		ldr	r3, [r7, #16]
 2019 0cf8 002B     		cmp	r3, #0
 2020 0cfa E9D0     		beq	.L79
 2021              	.L78:
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2022              		.loc 1 1317 0
 2023 0cfc 4FF42053 		mov	r3, #10240
 2024 0d00 C4F20003 		movt	r3, 16384
 2025 0d04 DB68     		ldr	r3, [r3, #12]
 2026 0d06 1A46     		mov	r2, r3
 2027 0d08 7B68     		ldr	r3, [r7, #4]
 2028 0d0a 4FEA1323 		lsr	r3, r3, #8
 2029 0d0e 1340     		ands	r3, r3, r2
 2030 0d10 002B     		cmp	r3, #0
 2031 0d12 03D1     		bne	.L80
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2032              		.loc 1 1319 0
 2033 0d14 4FF00003 		mov	r3, #0
 2034 0d18 FB75     		strb	r3, [r7, #23]
 2035 0d1a 02E0     		b	.L77
 2036              	.L80:
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2037              		.loc 1 1323 0
 2038 0d1c 4FF00103 		mov	r3, #1
 2039 0d20 FB75     		strb	r3, [r7, #23]
 2040              	.L77:
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2041              		.loc 1 1328 0
 2042 0d22 4FF42053 		mov	r3, #10240
 2043 0d26 C4F20003 		movt	r3, 16384
 2044 0d2a 4FF0FF02 		mov	r2, #255
 2045 0d2e 5A62     		str	r2, [r3, #36]
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2046              		.loc 1 1330 0
 2047 0d30 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2048              		.loc 1 1331 0
 2049 0d32 1846     		mov	r0, r3
 2050 0d34 07F11C07 		add	r7, r7, #28
 2051 0d38 BD46     		mov	sp, r7
 2052 0d3a 80BC     		pop	{r7}
 2053 0d3c 7047     		bx	lr
 2054              		.cfi_endproc
 2055              	.LFE129:
 2057 0d3e 00BF     		.align	2
 2058              		.global	RTC_AlarmSubSecondConfig
 2059              		.thumb
 2060              		.thumb_func
 2062              	RTC_AlarmSubSecondConfig:
 2063              	.LFB130:
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2064              		.loc 1 1379 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 24
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0d40 80B4     		push	{r7}
 2070              	.LCFI59:
 2071              		.cfi_def_cfa_offset 4
 2072              		.cfi_offset 7, -4
 2073 0d42 87B0     		sub	sp, sp, #28
 2074              	.LCFI60:
 2075              		.cfi_def_cfa_offset 32
 2076 0d44 00AF     		add	r7, sp, #0
 2077              	.LCFI61:
 2078              		.cfi_def_cfa_register 7
 2079 0d46 F860     		str	r0, [r7, #12]
 2080 0d48 B960     		str	r1, [r7, #8]
 2081 0d4a 7A60     		str	r2, [r7, #4]
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2082              		.loc 1 1380 0
 2083 0d4c 4FF00003 		mov	r3, #0
 2084 0d50 7B61     		str	r3, [r7, #20]
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2085              		.loc 1 1388 0
 2086 0d52 4FF42053 		mov	r3, #10240
 2087 0d56 C4F20003 		movt	r3, 16384
 2088 0d5a 4FF0CA02 		mov	r2, #202
 2089 0d5e 5A62     		str	r2, [r3, #36]
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2090              		.loc 1 1389 0
 2091 0d60 4FF42053 		mov	r3, #10240
 2092 0d64 C4F20003 		movt	r3, 16384
 2093 0d68 4FF05302 		mov	r2, #83
 2094 0d6c 5A62     		str	r2, [r3, #36]
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2095              		.loc 1 1392 0
 2096 0d6e BA68     		ldr	r2, [r7, #8]
 2097 0d70 7B68     		ldr	r3, [r7, #4]
 2098 0d72 1343     		orrs	r3, r3, r2
 2099 0d74 7B61     		str	r3, [r7, #20]
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2100              		.loc 1 1394 0
 2101 0d76 FB68     		ldr	r3, [r7, #12]
 2102 0d78 B3F5807F 		cmp	r3, #256
 2103 0d7c 06D1     		bne	.L82
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2104              		.loc 1 1397 0
 2105 0d7e 4FF42053 		mov	r3, #10240
 2106 0d82 C4F20003 		movt	r3, 16384
 2107 0d86 7A69     		ldr	r2, [r7, #20]
 2108 0d88 5A64     		str	r2, [r3, #68]
 2109 0d8a 05E0     		b	.L83
 2110              	.L82:
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2111              		.loc 1 1402 0
 2112 0d8c 4FF42053 		mov	r3, #10240
 2113 0d90 C4F20003 		movt	r3, 16384
 2114 0d94 7A69     		ldr	r2, [r7, #20]
 2115 0d96 9A64     		str	r2, [r3, #72]
 2116              	.L83:
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2117              		.loc 1 1406 0
 2118 0d98 4FF42053 		mov	r3, #10240
 2119 0d9c C4F20003 		movt	r3, 16384
 2120 0da0 4FF0FF02 		mov	r2, #255
 2121 0da4 5A62     		str	r2, [r3, #36]
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2122              		.loc 1 1408 0
 2123 0da6 07F11C07 		add	r7, r7, #28
 2124 0daa BD46     		mov	sp, r7
 2125 0dac 80BC     		pop	{r7}
 2126 0dae 7047     		bx	lr
 2127              		.cfi_endproc
 2128              	.LFE130:
 2130              		.align	2
 2131              		.global	RTC_GetAlarmSubSecond
 2132              		.thumb
 2133              		.thumb_func
 2135              	RTC_GetAlarmSubSecond:
 2136              	.LFB131:
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2137              		.loc 1 1420 0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 16
 2140              		@ frame_needed = 1, uses_anonymous_args = 0
 2141              		@ link register save eliminated.
 2142 0db0 80B4     		push	{r7}
 2143              	.LCFI62:
 2144              		.cfi_def_cfa_offset 4
 2145              		.cfi_offset 7, -4
 2146 0db2 85B0     		sub	sp, sp, #20
 2147              	.LCFI63:
 2148              		.cfi_def_cfa_offset 24
 2149 0db4 00AF     		add	r7, sp, #0
 2150              	.LCFI64:
 2151              		.cfi_def_cfa_register 7
 2152 0db6 7860     		str	r0, [r7, #4]
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2153              		.loc 1 1421 0
 2154 0db8 4FF00003 		mov	r3, #0
 2155 0dbc FB60     		str	r3, [r7, #12]
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2156              		.loc 1 1424 0
 2157 0dbe 7B68     		ldr	r3, [r7, #4]
 2158 0dc0 B3F5807F 		cmp	r3, #256
 2159 0dc4 0AD1     		bne	.L85
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2160              		.loc 1 1426 0
 2161 0dc6 4FF42053 		mov	r3, #10240
 2162 0dca C4F20003 		movt	r3, 16384
 2163 0dce 5B6C     		ldr	r3, [r3, #68]
 2164 0dd0 4FEA4343 		lsl	r3, r3, #17
 2165 0dd4 4FEA5343 		lsr	r3, r3, #17
 2166 0dd8 FB60     		str	r3, [r7, #12]
 2167 0dda 09E0     		b	.L86
 2168              	.L85:
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2169              		.loc 1 1430 0
 2170 0ddc 4FF42053 		mov	r3, #10240
 2171 0de0 C4F20003 		movt	r3, 16384
 2172 0de4 9B6C     		ldr	r3, [r3, #72]
 2173 0de6 4FEA4343 		lsl	r3, r3, #17
 2174 0dea 4FEA5343 		lsr	r3, r3, #17
 2175 0dee FB60     		str	r3, [r7, #12]
 2176              	.L86:
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2177              		.loc 1 1433 0
 2178 0df0 FB68     		ldr	r3, [r7, #12]
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2179              		.loc 1 1434 0
 2180 0df2 1846     		mov	r0, r3
 2181 0df4 07F11407 		add	r7, r7, #20
 2182 0df8 BD46     		mov	sp, r7
 2183 0dfa 80BC     		pop	{r7}
 2184 0dfc 7047     		bx	lr
 2185              		.cfi_endproc
 2186              	.LFE131:
 2188 0dfe 00BF     		.align	2
 2189              		.global	RTC_WakeUpClockConfig
 2190              		.thumb
 2191              		.thumb_func
 2193              	RTC_WakeUpClockConfig:
 2194              	.LFB132:
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2195              		.loc 1 1469 0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 8
 2198              		@ frame_needed = 1, uses_anonymous_args = 0
 2199              		@ link register save eliminated.
 2200 0e00 80B4     		push	{r7}
 2201              	.LCFI65:
 2202              		.cfi_def_cfa_offset 4
 2203              		.cfi_offset 7, -4
 2204 0e02 83B0     		sub	sp, sp, #12
 2205              	.LCFI66:
 2206              		.cfi_def_cfa_offset 16
 2207 0e04 00AF     		add	r7, sp, #0
 2208              	.LCFI67:
 2209              		.cfi_def_cfa_register 7
 2210 0e06 7860     		str	r0, [r7, #4]
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2211              		.loc 1 1474 0
 2212 0e08 4FF42053 		mov	r3, #10240
 2213 0e0c C4F20003 		movt	r3, 16384
 2214 0e10 4FF0CA02 		mov	r2, #202
 2215 0e14 5A62     		str	r2, [r3, #36]
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2216              		.loc 1 1475 0
 2217 0e16 4FF42053 		mov	r3, #10240
 2218 0e1a C4F20003 		movt	r3, 16384
 2219 0e1e 4FF05302 		mov	r2, #83
 2220 0e22 5A62     		str	r2, [r3, #36]
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2221              		.loc 1 1478 0
 2222 0e24 4FF42053 		mov	r3, #10240
 2223 0e28 C4F20003 		movt	r3, 16384
 2224 0e2c 4FF42052 		mov	r2, #10240
 2225 0e30 C4F20002 		movt	r2, 16384
 2226 0e34 9268     		ldr	r2, [r2, #8]
 2227 0e36 22F00702 		bic	r2, r2, #7
 2228 0e3a 9A60     		str	r2, [r3, #8]
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2229              		.loc 1 1481 0
 2230 0e3c 4FF42053 		mov	r3, #10240
 2231 0e40 C4F20003 		movt	r3, 16384
 2232 0e44 4FF42052 		mov	r2, #10240
 2233 0e48 C4F20002 		movt	r2, 16384
 2234 0e4c 9268     		ldr	r2, [r2, #8]
 2235 0e4e 1146     		mov	r1, r2
 2236 0e50 7A68     		ldr	r2, [r7, #4]
 2237 0e52 0A43     		orrs	r2, r2, r1
 2238 0e54 9A60     		str	r2, [r3, #8]
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2239              		.loc 1 1484 0
 2240 0e56 4FF42053 		mov	r3, #10240
 2241 0e5a C4F20003 		movt	r3, 16384
 2242 0e5e 4FF0FF02 		mov	r2, #255
 2243 0e62 5A62     		str	r2, [r3, #36]
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2244              		.loc 1 1485 0
 2245 0e64 07F10C07 		add	r7, r7, #12
 2246 0e68 BD46     		mov	sp, r7
 2247 0e6a 80BC     		pop	{r7}
 2248 0e6c 7047     		bx	lr
 2249              		.cfi_endproc
 2250              	.LFE132:
 2252 0e6e 00BF     		.align	2
 2253              		.global	RTC_SetWakeUpCounter
 2254              		.thumb
 2255              		.thumb_func
 2257              	RTC_SetWakeUpCounter:
 2258              	.LFB133:
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2259              		.loc 1 1496 0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 8
 2262              		@ frame_needed = 1, uses_anonymous_args = 0
 2263              		@ link register save eliminated.
 2264 0e70 80B4     		push	{r7}
 2265              	.LCFI68:
 2266              		.cfi_def_cfa_offset 4
 2267              		.cfi_offset 7, -4
 2268 0e72 83B0     		sub	sp, sp, #12
 2269              	.LCFI69:
 2270              		.cfi_def_cfa_offset 16
 2271 0e74 00AF     		add	r7, sp, #0
 2272              	.LCFI70:
 2273              		.cfi_def_cfa_register 7
 2274 0e76 7860     		str	r0, [r7, #4]
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2275              		.loc 1 1501 0
 2276 0e78 4FF42053 		mov	r3, #10240
 2277 0e7c C4F20003 		movt	r3, 16384
 2278 0e80 4FF0CA02 		mov	r2, #202
 2279 0e84 5A62     		str	r2, [r3, #36]
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2280              		.loc 1 1502 0
 2281 0e86 4FF42053 		mov	r3, #10240
 2282 0e8a C4F20003 		movt	r3, 16384
 2283 0e8e 4FF05302 		mov	r2, #83
 2284 0e92 5A62     		str	r2, [r3, #36]
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2285              		.loc 1 1505 0
 2286 0e94 4FF42053 		mov	r3, #10240
 2287 0e98 C4F20003 		movt	r3, 16384
 2288 0e9c 7A68     		ldr	r2, [r7, #4]
 2289 0e9e 5A61     		str	r2, [r3, #20]
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2290              		.loc 1 1508 0
 2291 0ea0 4FF42053 		mov	r3, #10240
 2292 0ea4 C4F20003 		movt	r3, 16384
 2293 0ea8 4FF0FF02 		mov	r2, #255
 2294 0eac 5A62     		str	r2, [r3, #36]
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2295              		.loc 1 1509 0
 2296 0eae 07F10C07 		add	r7, r7, #12
 2297 0eb2 BD46     		mov	sp, r7
 2298 0eb4 80BC     		pop	{r7}
 2299 0eb6 7047     		bx	lr
 2300              		.cfi_endproc
 2301              	.LFE133:
 2303              		.align	2
 2304              		.global	RTC_GetWakeUpCounter
 2305              		.thumb
 2306              		.thumb_func
 2308              	RTC_GetWakeUpCounter:
 2309              	.LFB134:
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2310              		.loc 1 1517 0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 1, uses_anonymous_args = 0
 2314              		@ link register save eliminated.
 2315 0eb8 80B4     		push	{r7}
 2316              	.LCFI71:
 2317              		.cfi_def_cfa_offset 4
 2318              		.cfi_offset 7, -4
 2319 0eba 00AF     		add	r7, sp, #0
 2320              	.LCFI72:
 2321              		.cfi_def_cfa_register 7
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2322              		.loc 1 1519 0
 2323 0ebc 4FF42053 		mov	r3, #10240
 2324 0ec0 C4F20003 		movt	r3, 16384
 2325 0ec4 5B69     		ldr	r3, [r3, #20]
 2326 0ec6 4FEA0343 		lsl	r3, r3, #16
 2327 0eca 4FEA1343 		lsr	r3, r3, #16
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2328              		.loc 1 1520 0
 2329 0ece 1846     		mov	r0, r3
 2330 0ed0 BD46     		mov	sp, r7
 2331 0ed2 80BC     		pop	{r7}
 2332 0ed4 7047     		bx	lr
 2333              		.cfi_endproc
 2334              	.LFE134:
 2336 0ed6 00BF     		.align	2
 2337              		.global	RTC_WakeUpCmd
 2338              		.thumb
 2339              		.thumb_func
 2341              	RTC_WakeUpCmd:
 2342              	.LFB135:
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2343              		.loc 1 1529 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 24
 2346              		@ frame_needed = 1, uses_anonymous_args = 0
 2347              		@ link register save eliminated.
 2348 0ed8 80B4     		push	{r7}
 2349              	.LCFI73:
 2350              		.cfi_def_cfa_offset 4
 2351              		.cfi_offset 7, -4
 2352 0eda 87B0     		sub	sp, sp, #28
 2353              	.LCFI74:
 2354              		.cfi_def_cfa_offset 32
 2355 0edc 00AF     		add	r7, sp, #0
 2356              	.LCFI75:
 2357              		.cfi_def_cfa_register 7
 2358 0ede 0346     		mov	r3, r0
 2359 0ee0 FB71     		strb	r3, [r7, #7]
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2360              		.loc 1 1530 0
 2361 0ee2 4FF00003 		mov	r3, #0
 2362 0ee6 FB60     		str	r3, [r7, #12]
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2363              		.loc 1 1531 0
 2364 0ee8 4FF00003 		mov	r3, #0
 2365 0eec 3B61     		str	r3, [r7, #16]
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2366              		.loc 1 1532 0
 2367 0eee 4FF00003 		mov	r3, #0
 2368 0ef2 FB75     		strb	r3, [r7, #23]
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2369              		.loc 1 1538 0
 2370 0ef4 4FF42053 		mov	r3, #10240
 2371 0ef8 C4F20003 		movt	r3, 16384
 2372 0efc 4FF0CA02 		mov	r2, #202
 2373 0f00 5A62     		str	r2, [r3, #36]
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2374              		.loc 1 1539 0
 2375 0f02 4FF42053 		mov	r3, #10240
 2376 0f06 C4F20003 		movt	r3, 16384
 2377 0f0a 4FF05302 		mov	r2, #83
 2378 0f0e 5A62     		str	r2, [r3, #36]
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2379              		.loc 1 1541 0
 2380 0f10 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2381 0f12 002B     		cmp	r3, #0
 2382 0f14 0FD0     		beq	.L91
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2383              		.loc 1 1544 0
 2384 0f16 4FF42053 		mov	r3, #10240
 2385 0f1a C4F20003 		movt	r3, 16384
 2386 0f1e 4FF42052 		mov	r2, #10240
 2387 0f22 C4F20002 		movt	r2, 16384
 2388 0f26 9268     		ldr	r2, [r2, #8]
 2389 0f28 42F48062 		orr	r2, r2, #1024
 2390 0f2c 9A60     		str	r2, [r3, #8]
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2391              		.loc 1 1545 0
 2392 0f2e 4FF00103 		mov	r3, #1
 2393 0f32 FB75     		strb	r3, [r7, #23]
 2394 0f34 2EE0     		b	.L92
 2395              	.L91:
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2396              		.loc 1 1550 0
 2397 0f36 4FF42053 		mov	r3, #10240
 2398 0f3a C4F20003 		movt	r3, 16384
 2399 0f3e 4FF42052 		mov	r2, #10240
 2400 0f42 C4F20002 		movt	r2, 16384
 2401 0f46 9268     		ldr	r2, [r2, #8]
 2402 0f48 22F48062 		bic	r2, r2, #1024
 2403 0f4c 9A60     		str	r2, [r3, #8]
 2404              	.L94:
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2405              		.loc 1 1554 0 discriminator 1
 2406 0f4e 4FF42053 		mov	r3, #10240
 2407 0f52 C4F20003 		movt	r3, 16384
 2408 0f56 DB68     		ldr	r3, [r3, #12]
 2409 0f58 03F00403 		and	r3, r3, #4
 2410 0f5c 3B61     		str	r3, [r7, #16]
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2411              		.loc 1 1555 0 discriminator 1
 2412 0f5e FB68     		ldr	r3, [r7, #12]
 2413 0f60 03F10103 		add	r3, r3, #1
 2414 0f64 FB60     		str	r3, [r7, #12]
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2415              		.loc 1 1556 0 discriminator 1
 2416 0f66 FB68     		ldr	r3, [r7, #12]
 2417 0f68 B3F5803F 		cmp	r3, #65536
 2418 0f6c 02D0     		beq	.L93
 2419 0f6e 3B69     		ldr	r3, [r7, #16]
 2420 0f70 002B     		cmp	r3, #0
 2421 0f72 ECD0     		beq	.L94
 2422              	.L93:
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2423              		.loc 1 1558 0
 2424 0f74 4FF42053 		mov	r3, #10240
 2425 0f78 C4F20003 		movt	r3, 16384
 2426 0f7c DB68     		ldr	r3, [r3, #12]
 2427 0f7e 03F00403 		and	r3, r3, #4
 2428 0f82 002B     		cmp	r3, #0
 2429 0f84 03D1     		bne	.L95
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2430              		.loc 1 1560 0
 2431 0f86 4FF00003 		mov	r3, #0
 2432 0f8a FB75     		strb	r3, [r7, #23]
 2433 0f8c 02E0     		b	.L92
 2434              	.L95:
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2435              		.loc 1 1564 0
 2436 0f8e 4FF00103 		mov	r3, #1
 2437 0f92 FB75     		strb	r3, [r7, #23]
 2438              	.L92:
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2439              		.loc 1 1569 0
 2440 0f94 4FF42053 		mov	r3, #10240
 2441 0f98 C4F20003 		movt	r3, 16384
 2442 0f9c 4FF0FF02 		mov	r2, #255
 2443 0fa0 5A62     		str	r2, [r3, #36]
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2444              		.loc 1 1571 0
 2445 0fa2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2446              		.loc 1 1572 0
 2447 0fa4 1846     		mov	r0, r3
 2448 0fa6 07F11C07 		add	r7, r7, #28
 2449 0faa BD46     		mov	sp, r7
 2450 0fac 80BC     		pop	{r7}
 2451 0fae 7047     		bx	lr
 2452              		.cfi_endproc
 2453              	.LFE135:
 2455              		.align	2
 2456              		.global	RTC_DayLightSavingConfig
 2457              		.thumb
 2458              		.thumb_func
 2460              	RTC_DayLightSavingConfig:
 2461              	.LFB136:
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2462              		.loc 1 1606 0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 8
 2465              		@ frame_needed = 1, uses_anonymous_args = 0
 2466              		@ link register save eliminated.
 2467 0fb0 80B4     		push	{r7}
 2468              	.LCFI76:
 2469              		.cfi_def_cfa_offset 4
 2470              		.cfi_offset 7, -4
 2471 0fb2 83B0     		sub	sp, sp, #12
 2472              	.LCFI77:
 2473              		.cfi_def_cfa_offset 16
 2474 0fb4 00AF     		add	r7, sp, #0
 2475              	.LCFI78:
 2476              		.cfi_def_cfa_register 7
 2477 0fb6 7860     		str	r0, [r7, #4]
 2478 0fb8 3960     		str	r1, [r7, #0]
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2479              		.loc 1 1612 0
 2480 0fba 4FF42053 		mov	r3, #10240
 2481 0fbe C4F20003 		movt	r3, 16384
 2482 0fc2 4FF0CA02 		mov	r2, #202
 2483 0fc6 5A62     		str	r2, [r3, #36]
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2484              		.loc 1 1613 0
 2485 0fc8 4FF42053 		mov	r3, #10240
 2486 0fcc C4F20003 		movt	r3, 16384
 2487 0fd0 4FF05302 		mov	r2, #83
 2488 0fd4 5A62     		str	r2, [r3, #36]
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2489              		.loc 1 1616 0
 2490 0fd6 4FF42053 		mov	r3, #10240
 2491 0fda C4F20003 		movt	r3, 16384
 2492 0fde 4FF42052 		mov	r2, #10240
 2493 0fe2 C4F20002 		movt	r2, 16384
 2494 0fe6 9268     		ldr	r2, [r2, #8]
 2495 0fe8 22F48022 		bic	r2, r2, #262144
 2496 0fec 9A60     		str	r2, [r3, #8]
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2497              		.loc 1 1619 0
 2498 0fee 4FF42053 		mov	r3, #10240
 2499 0ff2 C4F20003 		movt	r3, 16384
 2500 0ff6 4FF42052 		mov	r2, #10240
 2501 0ffa C4F20002 		movt	r2, 16384
 2502 0ffe 9268     		ldr	r2, [r2, #8]
 2503 1000 1146     		mov	r1, r2
 2504 1002 7868     		ldr	r0, [r7, #4]
 2505 1004 3A68     		ldr	r2, [r7, #0]
 2506 1006 0243     		orrs	r2, r2, r0
 2507 1008 0A43     		orrs	r2, r2, r1
 2508 100a 9A60     		str	r2, [r3, #8]
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2509              		.loc 1 1622 0
 2510 100c 4FF42053 		mov	r3, #10240
 2511 1010 C4F20003 		movt	r3, 16384
 2512 1014 4FF0FF02 		mov	r2, #255
 2513 1018 5A62     		str	r2, [r3, #36]
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2514              		.loc 1 1623 0
 2515 101a 07F10C07 		add	r7, r7, #12
 2516 101e BD46     		mov	sp, r7
 2517 1020 80BC     		pop	{r7}
 2518 1022 7047     		bx	lr
 2519              		.cfi_endproc
 2520              	.LFE136:
 2522              		.align	2
 2523              		.global	RTC_GetStoreOperation
 2524              		.thumb
 2525              		.thumb_func
 2527              	RTC_GetStoreOperation:
 2528              	.LFB137:
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2529              		.loc 1 1633 0
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 0
 2532              		@ frame_needed = 1, uses_anonymous_args = 0
 2533              		@ link register save eliminated.
 2534 1024 80B4     		push	{r7}
 2535              	.LCFI79:
 2536              		.cfi_def_cfa_offset 4
 2537              		.cfi_offset 7, -4
 2538 1026 00AF     		add	r7, sp, #0
 2539              	.LCFI80:
 2540              		.cfi_def_cfa_register 7
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2541              		.loc 1 1634 0
 2542 1028 4FF42053 		mov	r3, #10240
 2543 102c C4F20003 		movt	r3, 16384
 2544 1030 9B68     		ldr	r3, [r3, #8]
 2545 1032 03F48023 		and	r3, r3, #262144
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2546              		.loc 1 1635 0
 2547 1036 1846     		mov	r0, r3
 2548 1038 BD46     		mov	sp, r7
 2549 103a 80BC     		pop	{r7}
 2550 103c 7047     		bx	lr
 2551              		.cfi_endproc
 2552              	.LFE137:
 2554 103e 00BF     		.align	2
 2555              		.global	RTC_OutputConfig
 2556              		.thumb
 2557              		.thumb_func
 2559              	RTC_OutputConfig:
 2560              	.LFB138:
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2561              		.loc 1 1672 0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 8
 2564              		@ frame_needed = 1, uses_anonymous_args = 0
 2565              		@ link register save eliminated.
 2566 1040 80B4     		push	{r7}
 2567              	.LCFI81:
 2568              		.cfi_def_cfa_offset 4
 2569              		.cfi_offset 7, -4
 2570 1042 83B0     		sub	sp, sp, #12
 2571              	.LCFI82:
 2572              		.cfi_def_cfa_offset 16
 2573 1044 00AF     		add	r7, sp, #0
 2574              	.LCFI83:
 2575              		.cfi_def_cfa_register 7
 2576 1046 7860     		str	r0, [r7, #4]
 2577 1048 3960     		str	r1, [r7, #0]
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2578              		.loc 1 1678 0
 2579 104a 4FF42053 		mov	r3, #10240
 2580 104e C4F20003 		movt	r3, 16384
 2581 1052 4FF0CA02 		mov	r2, #202
 2582 1056 5A62     		str	r2, [r3, #36]
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2583              		.loc 1 1679 0
 2584 1058 4FF42053 		mov	r3, #10240
 2585 105c C4F20003 		movt	r3, 16384
 2586 1060 4FF05302 		mov	r2, #83
 2587 1064 5A62     		str	r2, [r3, #36]
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2588              		.loc 1 1682 0
 2589 1066 4FF42053 		mov	r3, #10240
 2590 106a C4F20003 		movt	r3, 16384
 2591 106e 4FF42052 		mov	r2, #10240
 2592 1072 C4F20002 		movt	r2, 16384
 2593 1076 9268     		ldr	r2, [r2, #8]
 2594 1078 22F4E002 		bic	r2, r2, #7340032
 2595 107c 9A60     		str	r2, [r3, #8]
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2596              		.loc 1 1685 0
 2597 107e 4FF42053 		mov	r3, #10240
 2598 1082 C4F20003 		movt	r3, 16384
 2599 1086 4FF42052 		mov	r2, #10240
 2600 108a C4F20002 		movt	r2, 16384
 2601 108e 9268     		ldr	r2, [r2, #8]
 2602 1090 1146     		mov	r1, r2
 2603 1092 7868     		ldr	r0, [r7, #4]
 2604 1094 3A68     		ldr	r2, [r7, #0]
 2605 1096 0243     		orrs	r2, r2, r0
 2606 1098 0A43     		orrs	r2, r2, r1
 2607 109a 9A60     		str	r2, [r3, #8]
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2608              		.loc 1 1688 0
 2609 109c 4FF42053 		mov	r3, #10240
 2610 10a0 C4F20003 		movt	r3, 16384
 2611 10a4 4FF0FF02 		mov	r2, #255
 2612 10a8 5A62     		str	r2, [r3, #36]
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2613              		.loc 1 1689 0
 2614 10aa 07F10C07 		add	r7, r7, #12
 2615 10ae BD46     		mov	sp, r7
 2616 10b0 80BC     		pop	{r7}
 2617 10b2 7047     		bx	lr
 2618              		.cfi_endproc
 2619              	.LFE138:
 2621              		.align	2
 2622              		.global	RTC_CoarseCalibConfig
 2623              		.thumb
 2624              		.thumb_func
 2626              	RTC_CoarseCalibConfig:
 2627              	.LFB139:
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2628              		.loc 1 1726 0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 16
 2631              		@ frame_needed = 1, uses_anonymous_args = 0
 2632 10b4 80B5     		push	{r7, lr}
 2633              	.LCFI84:
 2634              		.cfi_def_cfa_offset 8
 2635              		.cfi_offset 14, -4
 2636              		.cfi_offset 7, -8
 2637 10b6 84B0     		sub	sp, sp, #16
 2638              	.LCFI85:
 2639              		.cfi_def_cfa_offset 24
 2640 10b8 00AF     		add	r7, sp, #0
 2641              	.LCFI86:
 2642              		.cfi_def_cfa_register 7
 2643 10ba 7860     		str	r0, [r7, #4]
 2644 10bc 3960     		str	r1, [r7, #0]
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2645              		.loc 1 1727 0
 2646 10be 4FF00003 		mov	r3, #0
 2647 10c2 FB73     		strb	r3, [r7, #15]
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2648              		.loc 1 1734 0
 2649 10c4 4FF42053 		mov	r3, #10240
 2650 10c8 C4F20003 		movt	r3, 16384
 2651 10cc 4FF0CA02 		mov	r2, #202
 2652 10d0 5A62     		str	r2, [r3, #36]
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2653              		.loc 1 1735 0
 2654 10d2 4FF42053 		mov	r3, #10240
 2655 10d6 C4F20003 		movt	r3, 16384
 2656 10da 4FF05302 		mov	r2, #83
 2657 10de 5A62     		str	r2, [r3, #36]
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2658              		.loc 1 1738 0
 2659 10e0 FFF7FEFF 		bl	RTC_EnterInitMode
 2660 10e4 0346     		mov	r3, r0
 2661 10e6 002B     		cmp	r3, #0
 2662 10e8 03D1     		bne	.L100
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2663              		.loc 1 1740 0
 2664 10ea 4FF00003 		mov	r3, #0
 2665 10ee FB73     		strb	r3, [r7, #15]
 2666 10f0 0CE0     		b	.L101
 2667              	.L100:
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2668              		.loc 1 1745 0
 2669 10f2 4FF42053 		mov	r3, #10240
 2670 10f6 C4F20003 		movt	r3, 16384
 2671 10fa 7968     		ldr	r1, [r7, #4]
 2672 10fc 3A68     		ldr	r2, [r7, #0]
 2673 10fe 0A43     		orrs	r2, r2, r1
 2674 1100 9A61     		str	r2, [r3, #24]
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2675              		.loc 1 1747 0
 2676 1102 FFF7FEFF 		bl	RTC_ExitInitMode
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2677              		.loc 1 1749 0
 2678 1106 4FF00103 		mov	r3, #1
 2679 110a FB73     		strb	r3, [r7, #15]
 2680              	.L101:
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2681              		.loc 1 1753 0
 2682 110c 4FF42053 		mov	r3, #10240
 2683 1110 C4F20003 		movt	r3, 16384
 2684 1114 4FF0FF02 		mov	r2, #255
 2685 1118 5A62     		str	r2, [r3, #36]
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2686              		.loc 1 1755 0
 2687 111a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2688              		.loc 1 1756 0
 2689 111c 1846     		mov	r0, r3
 2690 111e 07F11007 		add	r7, r7, #16
 2691 1122 BD46     		mov	sp, r7
 2692 1124 80BD     		pop	{r7, pc}
 2693              		.cfi_endproc
 2694              	.LFE139:
 2696 1126 00BF     		.align	2
 2697              		.global	RTC_CoarseCalibCmd
 2698              		.thumb
 2699              		.thumb_func
 2701              	RTC_CoarseCalibCmd:
 2702              	.LFB140:
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2703              		.loc 1 1767 0
 2704              		.cfi_startproc
 2705              		@ args = 0, pretend = 0, frame = 16
 2706              		@ frame_needed = 1, uses_anonymous_args = 0
 2707 1128 80B5     		push	{r7, lr}
 2708              	.LCFI87:
 2709              		.cfi_def_cfa_offset 8
 2710              		.cfi_offset 14, -4
 2711              		.cfi_offset 7, -8
 2712 112a 84B0     		sub	sp, sp, #16
 2713              	.LCFI88:
 2714              		.cfi_def_cfa_offset 24
 2715 112c 00AF     		add	r7, sp, #0
 2716              	.LCFI89:
 2717              		.cfi_def_cfa_register 7
 2718 112e 0346     		mov	r3, r0
 2719 1130 FB71     		strb	r3, [r7, #7]
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2720              		.loc 1 1768 0
 2721 1132 4FF00003 		mov	r3, #0
 2722 1136 FB73     		strb	r3, [r7, #15]
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2723              		.loc 1 1774 0
 2724 1138 4FF42053 		mov	r3, #10240
 2725 113c C4F20003 		movt	r3, 16384
 2726 1140 4FF0CA02 		mov	r2, #202
 2727 1144 5A62     		str	r2, [r3, #36]
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2728              		.loc 1 1775 0
 2729 1146 4FF42053 		mov	r3, #10240
 2730 114a C4F20003 		movt	r3, 16384
 2731 114e 4FF05302 		mov	r2, #83
 2732 1152 5A62     		str	r2, [r3, #36]
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2733              		.loc 1 1778 0
 2734 1154 FFF7FEFF 		bl	RTC_EnterInitMode
 2735 1158 0346     		mov	r3, r0
 2736 115a 002B     		cmp	r3, #0
 2737 115c 03D1     		bne	.L103
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2738              		.loc 1 1780 0
 2739 115e 4FF00003 		mov	r3, #0
 2740 1162 FB73     		strb	r3, [r7, #15]
 2741 1164 20E0     		b	.L104
 2742              	.L103:
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2743              		.loc 1 1784 0
 2744 1166 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2745 1168 002B     		cmp	r3, #0
 2746 116a 0CD0     		beq	.L105
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2747              		.loc 1 1787 0
 2748 116c 4FF42053 		mov	r3, #10240
 2749 1170 C4F20003 		movt	r3, 16384
 2750 1174 4FF42052 		mov	r2, #10240
 2751 1178 C4F20002 		movt	r2, 16384
 2752 117c 9268     		ldr	r2, [r2, #8]
 2753 117e 42F08002 		orr	r2, r2, #128
 2754 1182 9A60     		str	r2, [r3, #8]
 2755 1184 0BE0     		b	.L106
 2756              	.L105:
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2757              		.loc 1 1792 0
 2758 1186 4FF42053 		mov	r3, #10240
 2759 118a C4F20003 		movt	r3, 16384
 2760 118e 4FF42052 		mov	r2, #10240
 2761 1192 C4F20002 		movt	r2, 16384
 2762 1196 9268     		ldr	r2, [r2, #8]
 2763 1198 22F08002 		bic	r2, r2, #128
 2764 119c 9A60     		str	r2, [r3, #8]
 2765              	.L106:
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2766              		.loc 1 1795 0
 2767 119e FFF7FEFF 		bl	RTC_ExitInitMode
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2768              		.loc 1 1797 0
 2769 11a2 4FF00103 		mov	r3, #1
 2770 11a6 FB73     		strb	r3, [r7, #15]
 2771              	.L104:
1798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2772              		.loc 1 1801 0
 2773 11a8 4FF42053 		mov	r3, #10240
 2774 11ac C4F20003 		movt	r3, 16384
 2775 11b0 4FF0FF02 		mov	r2, #255
 2776 11b4 5A62     		str	r2, [r3, #36]
1802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2777              		.loc 1 1803 0
 2778 11b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2779              		.loc 1 1804 0
 2780 11b8 1846     		mov	r0, r3
 2781 11ba 07F11007 		add	r7, r7, #16
 2782 11be BD46     		mov	sp, r7
 2783 11c0 80BD     		pop	{r7, pc}
 2784              		.cfi_endproc
 2785              	.LFE140:
 2787 11c2 00BF     		.align	2
 2788              		.global	RTC_CalibOutputCmd
 2789              		.thumb
 2790              		.thumb_func
 2792              	RTC_CalibOutputCmd:
 2793              	.LFB141:
1805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2794              		.loc 1 1813 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 8
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798              		@ link register save eliminated.
 2799 11c4 80B4     		push	{r7}
 2800              	.LCFI90:
 2801              		.cfi_def_cfa_offset 4
 2802              		.cfi_offset 7, -4
 2803 11c6 83B0     		sub	sp, sp, #12
 2804              	.LCFI91:
 2805              		.cfi_def_cfa_offset 16
 2806 11c8 00AF     		add	r7, sp, #0
 2807              	.LCFI92:
 2808              		.cfi_def_cfa_register 7
 2809 11ca 0346     		mov	r3, r0
 2810 11cc FB71     		strb	r3, [r7, #7]
1814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2811              		.loc 1 1818 0
 2812 11ce 4FF42053 		mov	r3, #10240
 2813 11d2 C4F20003 		movt	r3, 16384
 2814 11d6 4FF0CA02 		mov	r2, #202
 2815 11da 5A62     		str	r2, [r3, #36]
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2816              		.loc 1 1819 0
 2817 11dc 4FF42053 		mov	r3, #10240
 2818 11e0 C4F20003 		movt	r3, 16384
 2819 11e4 4FF05302 		mov	r2, #83
 2820 11e8 5A62     		str	r2, [r3, #36]
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2821              		.loc 1 1821 0
 2822 11ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2823 11ec 002B     		cmp	r3, #0
 2824 11ee 0CD0     		beq	.L108
1822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2825              		.loc 1 1824 0
 2826 11f0 4FF42053 		mov	r3, #10240
 2827 11f4 C4F20003 		movt	r3, 16384
 2828 11f8 4FF42052 		mov	r2, #10240
 2829 11fc C4F20002 		movt	r2, 16384
 2830 1200 9268     		ldr	r2, [r2, #8]
 2831 1202 42F40002 		orr	r2, r2, #8388608
 2832 1206 9A60     		str	r2, [r3, #8]
 2833 1208 0BE0     		b	.L109
 2834              	.L108:
1825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2835              		.loc 1 1829 0
 2836 120a 4FF42053 		mov	r3, #10240
 2837 120e C4F20003 		movt	r3, 16384
 2838 1212 4FF42052 		mov	r2, #10240
 2839 1216 C4F20002 		movt	r2, 16384
 2840 121a 9268     		ldr	r2, [r2, #8]
 2841 121c 22F40002 		bic	r2, r2, #8388608
 2842 1220 9A60     		str	r2, [r3, #8]
 2843              	.L109:
1830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2844              		.loc 1 1833 0
 2845 1222 4FF42053 		mov	r3, #10240
 2846 1226 C4F20003 		movt	r3, 16384
 2847 122a 4FF0FF02 		mov	r2, #255
 2848 122e 5A62     		str	r2, [r3, #36]
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2849              		.loc 1 1834 0
 2850 1230 07F10C07 		add	r7, r7, #12
 2851 1234 BD46     		mov	sp, r7
 2852 1236 80BC     		pop	{r7}
 2853 1238 7047     		bx	lr
 2854              		.cfi_endproc
 2855              	.LFE141:
 2857 123a 00BF     		.align	2
 2858              		.global	RTC_CalibOutputConfig
 2859              		.thumb
 2860              		.thumb_func
 2862              	RTC_CalibOutputConfig:
 2863              	.LFB142:
1835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2864              		.loc 1 1845 0
 2865              		.cfi_startproc
 2866              		@ args = 0, pretend = 0, frame = 8
 2867              		@ frame_needed = 1, uses_anonymous_args = 0
 2868              		@ link register save eliminated.
 2869 123c 80B4     		push	{r7}
 2870              	.LCFI93:
 2871              		.cfi_def_cfa_offset 4
 2872              		.cfi_offset 7, -4
 2873 123e 83B0     		sub	sp, sp, #12
 2874              	.LCFI94:
 2875              		.cfi_def_cfa_offset 16
 2876 1240 00AF     		add	r7, sp, #0
 2877              	.LCFI95:
 2878              		.cfi_def_cfa_register 7
 2879 1242 7860     		str	r0, [r7, #4]
1846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2880              		.loc 1 1850 0
 2881 1244 4FF42053 		mov	r3, #10240
 2882 1248 C4F20003 		movt	r3, 16384
 2883 124c 4FF0CA02 		mov	r2, #202
 2884 1250 5A62     		str	r2, [r3, #36]
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2885              		.loc 1 1851 0
 2886 1252 4FF42053 		mov	r3, #10240
 2887 1256 C4F20003 		movt	r3, 16384
 2888 125a 4FF05302 		mov	r2, #83
 2889 125e 5A62     		str	r2, [r3, #36]
1852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2890              		.loc 1 1854 0
 2891 1260 4FF42053 		mov	r3, #10240
 2892 1264 C4F20003 		movt	r3, 16384
 2893 1268 4FF42052 		mov	r2, #10240
 2894 126c C4F20002 		movt	r2, 16384
 2895 1270 9268     		ldr	r2, [r2, #8]
 2896 1272 22F40022 		bic	r2, r2, #524288
 2897 1276 9A60     		str	r2, [r3, #8]
1855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2898              		.loc 1 1857 0
 2899 1278 4FF42053 		mov	r3, #10240
 2900 127c C4F20003 		movt	r3, 16384
 2901 1280 4FF42052 		mov	r2, #10240
 2902 1284 C4F20002 		movt	r2, 16384
 2903 1288 9268     		ldr	r2, [r2, #8]
 2904 128a 1146     		mov	r1, r2
 2905 128c 7A68     		ldr	r2, [r7, #4]
 2906 128e 0A43     		orrs	r2, r2, r1
 2907 1290 9A60     		str	r2, [r3, #8]
1858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2908              		.loc 1 1860 0
 2909 1292 4FF42053 		mov	r3, #10240
 2910 1296 C4F20003 		movt	r3, 16384
 2911 129a 4FF0FF02 		mov	r2, #255
 2912 129e 5A62     		str	r2, [r3, #36]
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2913              		.loc 1 1861 0
 2914 12a0 07F10C07 		add	r7, r7, #12
 2915 12a4 BD46     		mov	sp, r7
 2916 12a6 80BC     		pop	{r7}
 2917 12a8 7047     		bx	lr
 2918              		.cfi_endproc
 2919              	.LFE142:
 2921 12aa 00BF     		.align	2
 2922              		.global	RTC_SmoothCalibConfig
 2923              		.thumb
 2924              		.thumb_func
 2926              	RTC_SmoothCalibConfig:
 2927              	.LFB143:
1862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2928              		.loc 1 1883 0
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 24
 2931              		@ frame_needed = 1, uses_anonymous_args = 0
 2932              		@ link register save eliminated.
 2933 12ac 80B4     		push	{r7}
 2934              	.LCFI96:
 2935              		.cfi_def_cfa_offset 4
 2936              		.cfi_offset 7, -4
 2937 12ae 87B0     		sub	sp, sp, #28
 2938              	.LCFI97:
 2939              		.cfi_def_cfa_offset 32
 2940 12b0 00AF     		add	r7, sp, #0
 2941              	.LCFI98:
 2942              		.cfi_def_cfa_register 7
 2943 12b2 F860     		str	r0, [r7, #12]
 2944 12b4 B960     		str	r1, [r7, #8]
 2945 12b6 7A60     		str	r2, [r7, #4]
1884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2946              		.loc 1 1884 0
 2947 12b8 4FF00003 		mov	r3, #0
 2948 12bc FB75     		strb	r3, [r7, #23]
1885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2949              		.loc 1 1885 0
 2950 12be 4FF00003 		mov	r3, #0
 2951 12c2 3B61     		str	r3, [r7, #16]
1886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2952              		.loc 1 1893 0
 2953 12c4 4FF42053 		mov	r3, #10240
 2954 12c8 C4F20003 		movt	r3, 16384
 2955 12cc 4FF0CA02 		mov	r2, #202
 2956 12d0 5A62     		str	r2, [r3, #36]
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2957              		.loc 1 1894 0
 2958 12d2 4FF42053 		mov	r3, #10240
 2959 12d6 C4F20003 		movt	r3, 16384
 2960 12da 4FF05302 		mov	r2, #83
 2961 12de 5A62     		str	r2, [r3, #36]
1895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2962              		.loc 1 1897 0
 2963 12e0 4FF42053 		mov	r3, #10240
 2964 12e4 C4F20003 		movt	r3, 16384
 2965 12e8 DB68     		ldr	r3, [r3, #12]
 2966 12ea 03F48033 		and	r3, r3, #65536
 2967 12ee 002B     		cmp	r3, #0
 2968 12f0 11D0     		beq	.L112
1898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2969              		.loc 1 1900 0
 2970 12f2 03E0     		b	.L113
 2971              	.L114:
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2972              		.loc 1 1902 0
 2973 12f4 3B69     		ldr	r3, [r7, #16]
 2974 12f6 03F10103 		add	r3, r3, #1
 2975 12fa 3B61     		str	r3, [r7, #16]
 2976              	.L113:
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2977              		.loc 1 1900 0 discriminator 1
 2978 12fc 4FF42053 		mov	r3, #10240
 2979 1300 C4F20003 		movt	r3, 16384
 2980 1304 DB68     		ldr	r3, [r3, #12]
 2981 1306 03F48033 		and	r3, r3, #65536
 2982 130a 002B     		cmp	r3, #0
 2983 130c 03D0     		beq	.L112
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2984              		.loc 1 1900 0 is_stmt 0 discriminator 2
 2985 130e 3B69     		ldr	r3, [r7, #16]
 2986 1310 B3F5003F 		cmp	r3, #131072
 2987 1314 EED1     		bne	.L114
 2988              	.L112:
1903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2989              		.loc 1 1907 0 is_stmt 1
 2990 1316 4FF42053 		mov	r3, #10240
 2991 131a C4F20003 		movt	r3, 16384
 2992 131e DB68     		ldr	r3, [r3, #12]
 2993 1320 03F48033 		and	r3, r3, #65536
 2994 1324 002B     		cmp	r3, #0
 2995 1326 0DD1     		bne	.L115
1908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2996              		.loc 1 1910 0
 2997 1328 4FF42053 		mov	r3, #10240
 2998 132c C4F20003 		movt	r3, 16384
 2999 1330 F968     		ldr	r1, [r7, #12]
 3000 1332 BA68     		ldr	r2, [r7, #8]
 3001 1334 1143     		orrs	r1, r1, r2
 3002 1336 7A68     		ldr	r2, [r7, #4]
 3003 1338 0A43     		orrs	r2, r2, r1
 3004 133a DA63     		str	r2, [r3, #60]
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3005              		.loc 1 1912 0
 3006 133c 4FF00103 		mov	r3, #1
 3007 1340 FB75     		strb	r3, [r7, #23]
 3008 1342 02E0     		b	.L116
 3009              	.L115:
1913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3010              		.loc 1 1916 0
 3011 1344 4FF00003 		mov	r3, #0
 3012 1348 FB75     		strb	r3, [r7, #23]
 3013              	.L116:
1917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3014              		.loc 1 1920 0
 3015 134a 4FF42053 		mov	r3, #10240
 3016 134e C4F20003 		movt	r3, 16384
 3017 1352 4FF0FF02 		mov	r2, #255
 3018 1356 5A62     		str	r2, [r3, #36]
1921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3019              		.loc 1 1922 0
 3020 1358 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3021              		.loc 1 1923 0
 3022 135a 1846     		mov	r0, r3
 3023 135c 07F11C07 		add	r7, r7, #28
 3024 1360 BD46     		mov	sp, r7
 3025 1362 80BC     		pop	{r7}
 3026 1364 7047     		bx	lr
 3027              		.cfi_endproc
 3028              	.LFE143:
 3030 1366 00BF     		.align	2
 3031              		.global	RTC_TimeStampCmd
 3032              		.thumb
 3033              		.thumb_func
 3035              	RTC_TimeStampCmd:
 3036              	.LFB144:
1924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3037              		.loc 1 1957 0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 16
 3040              		@ frame_needed = 1, uses_anonymous_args = 0
 3041              		@ link register save eliminated.
 3042 1368 80B4     		push	{r7}
 3043              	.LCFI99:
 3044              		.cfi_def_cfa_offset 4
 3045              		.cfi_offset 7, -4
 3046 136a 85B0     		sub	sp, sp, #20
 3047              	.LCFI100:
 3048              		.cfi_def_cfa_offset 24
 3049 136c 00AF     		add	r7, sp, #0
 3050              	.LCFI101:
 3051              		.cfi_def_cfa_register 7
 3052 136e 7860     		str	r0, [r7, #4]
 3053 1370 0B46     		mov	r3, r1
 3054 1372 FB70     		strb	r3, [r7, #3]
1958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3055              		.loc 1 1958 0
 3056 1374 4FF00003 		mov	r3, #0
 3057 1378 FB60     		str	r3, [r7, #12]
1959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3058              		.loc 1 1965 0
 3059 137a 4FF42053 		mov	r3, #10240
 3060 137e C4F20003 		movt	r3, 16384
 3061 1382 9B68     		ldr	r3, [r3, #8]
 3062 1384 23F40063 		bic	r3, r3, #2048
 3063 1388 23F00803 		bic	r3, r3, #8
 3064 138c FB60     		str	r3, [r7, #12]
1966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3065              		.loc 1 1968 0
 3066 138e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3067 1390 002B     		cmp	r3, #0
 3068 1392 06D0     		beq	.L118
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3069              		.loc 1 1970 0
 3070 1394 7A68     		ldr	r2, [r7, #4]
 3071 1396 FB68     		ldr	r3, [r7, #12]
 3072 1398 1343     		orrs	r3, r3, r2
 3073 139a 43F40063 		orr	r3, r3, #2048
 3074 139e FB60     		str	r3, [r7, #12]
 3075 13a0 03E0     		b	.L119
 3076              	.L118:
1971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3077              		.loc 1 1974 0
 3078 13a2 FA68     		ldr	r2, [r7, #12]
 3079 13a4 7B68     		ldr	r3, [r7, #4]
 3080 13a6 1343     		orrs	r3, r3, r2
 3081 13a8 FB60     		str	r3, [r7, #12]
 3082              	.L119:
1975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3083              		.loc 1 1978 0
 3084 13aa 4FF42053 		mov	r3, #10240
 3085 13ae C4F20003 		movt	r3, 16384
 3086 13b2 4FF0CA02 		mov	r2, #202
 3087 13b6 5A62     		str	r2, [r3, #36]
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3088              		.loc 1 1979 0
 3089 13b8 4FF42053 		mov	r3, #10240
 3090 13bc C4F20003 		movt	r3, 16384
 3091 13c0 4FF05302 		mov	r2, #83
 3092 13c4 5A62     		str	r2, [r3, #36]
1980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3093              		.loc 1 1982 0
 3094 13c6 4FF42053 		mov	r3, #10240
 3095 13ca C4F20003 		movt	r3, 16384
 3096 13ce FA68     		ldr	r2, [r7, #12]
 3097 13d0 9A60     		str	r2, [r3, #8]
1983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3098              		.loc 1 1985 0
 3099 13d2 4FF42053 		mov	r3, #10240
 3100 13d6 C4F20003 		movt	r3, 16384
 3101 13da 4FF0FF02 		mov	r2, #255
 3102 13de 5A62     		str	r2, [r3, #36]
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3103              		.loc 1 1986 0
 3104 13e0 07F11407 		add	r7, r7, #20
 3105 13e4 BD46     		mov	sp, r7
 3106 13e6 80BC     		pop	{r7}
 3107 13e8 7047     		bx	lr
 3108              		.cfi_endproc
 3109              	.LFE144:
 3111 13ea 00BF     		.align	2
 3112              		.global	RTC_GetTimeStamp
 3113              		.thumb
 3114              		.thumb_func
 3116              	RTC_GetTimeStamp:
 3117              	.LFB145:
1987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3118              		.loc 1 2002 0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 24
 3121              		@ frame_needed = 1, uses_anonymous_args = 0
 3122 13ec 80B5     		push	{r7, lr}
 3123              	.LCFI102:
 3124              		.cfi_def_cfa_offset 8
 3125              		.cfi_offset 14, -4
 3126              		.cfi_offset 7, -8
 3127 13ee 86B0     		sub	sp, sp, #24
 3128              	.LCFI103:
 3129              		.cfi_def_cfa_offset 32
 3130 13f0 00AF     		add	r7, sp, #0
 3131              	.LCFI104:
 3132              		.cfi_def_cfa_register 7
 3133 13f2 F860     		str	r0, [r7, #12]
 3134 13f4 B960     		str	r1, [r7, #8]
 3135 13f6 7A60     		str	r2, [r7, #4]
2003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3136              		.loc 1 2003 0
 3137 13f8 4FF00003 		mov	r3, #0
 3138 13fc 7B61     		str	r3, [r7, #20]
 3139 13fe 4FF00003 		mov	r3, #0
 3140 1402 3B61     		str	r3, [r7, #16]
2004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3141              		.loc 1 2009 0
 3142 1404 4FF42053 		mov	r3, #10240
 3143 1408 C4F20003 		movt	r3, 16384
 3144 140c 1B6B     		ldr	r3, [r3, #48]
 3145 140e 1A46     		mov	r2, r3
 3146 1410 47F67F73 		movw	r3, #32639
 3147 1414 C0F27F03 		movt	r3, 127
 3148 1418 1340     		ands	r3, r3, r2
 3149 141a 7B61     		str	r3, [r7, #20]
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3150              		.loc 1 2010 0
 3151 141c 4FF42053 		mov	r3, #10240
 3152 1420 C4F20003 		movt	r3, 16384
 3153 1424 5B6B     		ldr	r3, [r3, #52]
 3154 1426 23F07F43 		bic	r3, r3, #-16777216
 3155 142a 23F0C003 		bic	r3, r3, #192
 3156 142e 3B61     		str	r3, [r7, #16]
2011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3157              		.loc 1 2013 0
 3158 1430 7B69     		ldr	r3, [r7, #20]
 3159 1432 03F47C13 		and	r3, r3, #4128768
 3160 1436 4FEA1343 		lsr	r3, r3, #16
 3161 143a DAB2     		uxtb	r2, r3
 3162 143c BB68     		ldr	r3, [r7, #8]
 3163 143e 1A70     		strb	r2, [r3, #0]
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3164              		.loc 1 2014 0
 3165 1440 7B69     		ldr	r3, [r7, #20]
 3166 1442 03F4FE43 		and	r3, r3, #32512
 3167 1446 4FEA1323 		lsr	r3, r3, #8
 3168 144a DAB2     		uxtb	r2, r3
 3169 144c BB68     		ldr	r3, [r7, #8]
 3170 144e 5A70     		strb	r2, [r3, #1]
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3171              		.loc 1 2015 0
 3172 1450 7B69     		ldr	r3, [r7, #20]
 3173 1452 DBB2     		uxtb	r3, r3
 3174 1454 03F07F03 		and	r3, r3, #127
 3175 1458 DAB2     		uxtb	r2, r3
 3176 145a BB68     		ldr	r3, [r7, #8]
 3177 145c 9A70     		strb	r2, [r3, #2]
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3178              		.loc 1 2016 0
 3179 145e 7B69     		ldr	r3, [r7, #20]
 3180 1460 03F48003 		and	r3, r3, #4194304
 3181 1464 4FEA1343 		lsr	r3, r3, #16
 3182 1468 DAB2     		uxtb	r2, r3
 3183 146a BB68     		ldr	r3, [r7, #8]
 3184 146c DA70     		strb	r2, [r3, #3]
2017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3185              		.loc 1 2019 0
 3186 146e 7B68     		ldr	r3, [r7, #4]
 3187 1470 4FF00002 		mov	r2, #0
 3188 1474 DA70     		strb	r2, [r3, #3]
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3189              		.loc 1 2020 0
 3190 1476 3B69     		ldr	r3, [r7, #16]
 3191 1478 03F4F853 		and	r3, r3, #7936
 3192 147c 4FEA1323 		lsr	r3, r3, #8
 3193 1480 DAB2     		uxtb	r2, r3
 3194 1482 7B68     		ldr	r3, [r7, #4]
 3195 1484 5A70     		strb	r2, [r3, #1]
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3196              		.loc 1 2021 0
 3197 1486 3B69     		ldr	r3, [r7, #16]
 3198 1488 DBB2     		uxtb	r3, r3
 3199 148a 03F03F03 		and	r3, r3, #63
 3200 148e DAB2     		uxtb	r2, r3
 3201 1490 7B68     		ldr	r3, [r7, #4]
 3202 1492 9A70     		strb	r2, [r3, #2]
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3203              		.loc 1 2022 0
 3204 1494 3B69     		ldr	r3, [r7, #16]
 3205 1496 03F46043 		and	r3, r3, #57344
 3206 149a 4FEA5333 		lsr	r3, r3, #13
 3207 149e DAB2     		uxtb	r2, r3
 3208 14a0 7B68     		ldr	r3, [r7, #4]
 3209 14a2 1A70     		strb	r2, [r3, #0]
2023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3210              		.loc 1 2025 0
 3211 14a4 FB68     		ldr	r3, [r7, #12]
 3212 14a6 002B     		cmp	r3, #0
 3213 14a8 35D1     		bne	.L120
2026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3214              		.loc 1 2028 0
 3215 14aa BB68     		ldr	r3, [r7, #8]
 3216 14ac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3217 14ae 1846     		mov	r0, r3
 3218 14b0 00F096FB 		bl	RTC_Bcd2ToByte
 3219 14b4 0346     		mov	r3, r0
 3220 14b6 1A46     		mov	r2, r3
 3221 14b8 BB68     		ldr	r3, [r7, #8]
 3222 14ba 1A70     		strb	r2, [r3, #0]
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3223              		.loc 1 2029 0
 3224 14bc BB68     		ldr	r3, [r7, #8]
 3225 14be 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3226 14c0 1846     		mov	r0, r3
 3227 14c2 00F08DFB 		bl	RTC_Bcd2ToByte
 3228 14c6 0346     		mov	r3, r0
 3229 14c8 1A46     		mov	r2, r3
 3230 14ca BB68     		ldr	r3, [r7, #8]
 3231 14cc 5A70     		strb	r2, [r3, #1]
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3232              		.loc 1 2030 0
 3233 14ce BB68     		ldr	r3, [r7, #8]
 3234 14d0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3235 14d2 1846     		mov	r0, r3
 3236 14d4 00F084FB 		bl	RTC_Bcd2ToByte
 3237 14d8 0346     		mov	r3, r0
 3238 14da 1A46     		mov	r2, r3
 3239 14dc BB68     		ldr	r3, [r7, #8]
 3240 14de 9A70     		strb	r2, [r3, #2]
2031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3241              		.loc 1 2033 0
 3242 14e0 7B68     		ldr	r3, [r7, #4]
 3243 14e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3244 14e4 1846     		mov	r0, r3
 3245 14e6 00F07BFB 		bl	RTC_Bcd2ToByte
 3246 14ea 0346     		mov	r3, r0
 3247 14ec 1A46     		mov	r2, r3
 3248 14ee 7B68     		ldr	r3, [r7, #4]
 3249 14f0 5A70     		strb	r2, [r3, #1]
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3250              		.loc 1 2034 0
 3251 14f2 7B68     		ldr	r3, [r7, #4]
 3252 14f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3253 14f6 1846     		mov	r0, r3
 3254 14f8 00F072FB 		bl	RTC_Bcd2ToByte
 3255 14fc 0346     		mov	r3, r0
 3256 14fe 1A46     		mov	r2, r3
 3257 1500 7B68     		ldr	r3, [r7, #4]
 3258 1502 9A70     		strb	r2, [r3, #2]
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3259              		.loc 1 2035 0
 3260 1504 7B68     		ldr	r3, [r7, #4]
 3261 1506 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3262 1508 1846     		mov	r0, r3
 3263 150a 00F069FB 		bl	RTC_Bcd2ToByte
 3264 150e 0346     		mov	r3, r0
 3265 1510 1A46     		mov	r2, r3
 3266 1512 7B68     		ldr	r3, [r7, #4]
 3267 1514 1A70     		strb	r2, [r3, #0]
 3268              	.L120:
2036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3269              		.loc 1 2037 0
 3270 1516 07F11807 		add	r7, r7, #24
 3271 151a BD46     		mov	sp, r7
 3272 151c 80BD     		pop	{r7, pc}
 3273              		.cfi_endproc
 3274              	.LFE145:
 3276 151e 00BF     		.align	2
 3277              		.global	RTC_GetTimeStampSubSecond
 3278              		.thumb
 3279              		.thumb_func
 3281              	RTC_GetTimeStampSubSecond:
 3282              	.LFB146:
2038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3283              		.loc 1 2045 0
 3284              		.cfi_startproc
 3285              		@ args = 0, pretend = 0, frame = 0
 3286              		@ frame_needed = 1, uses_anonymous_args = 0
 3287              		@ link register save eliminated.
 3288 1520 80B4     		push	{r7}
 3289              	.LCFI105:
 3290              		.cfi_def_cfa_offset 4
 3291              		.cfi_offset 7, -4
 3292 1522 00AF     		add	r7, sp, #0
 3293              	.LCFI106:
 3294              		.cfi_def_cfa_register 7
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3295              		.loc 1 2047 0
 3296 1524 4FF42053 		mov	r3, #10240
 3297 1528 C4F20003 		movt	r3, 16384
 3298 152c 9B6B     		ldr	r3, [r3, #56]
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3299              		.loc 1 2048 0
 3300 152e 1846     		mov	r0, r3
 3301 1530 BD46     		mov	sp, r7
 3302 1532 80BC     		pop	{r7}
 3303 1534 7047     		bx	lr
 3304              		.cfi_endproc
 3305              	.LFE146:
 3307 1536 00BF     		.align	2
 3308              		.global	RTC_TamperTriggerConfig
 3309              		.thumb
 3310              		.thumb_func
 3312              	RTC_TamperTriggerConfig:
 3313              	.LFB147:
2049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3314              		.loc 1 2080 0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 8
 3317              		@ frame_needed = 1, uses_anonymous_args = 0
 3318              		@ link register save eliminated.
 3319 1538 80B4     		push	{r7}
 3320              	.LCFI107:
 3321              		.cfi_def_cfa_offset 4
 3322              		.cfi_offset 7, -4
 3323 153a 83B0     		sub	sp, sp, #12
 3324              	.LCFI108:
 3325              		.cfi_def_cfa_offset 16
 3326 153c 00AF     		add	r7, sp, #0
 3327              	.LCFI109:
 3328              		.cfi_def_cfa_register 7
 3329 153e 7860     		str	r0, [r7, #4]
 3330 1540 3960     		str	r1, [r7, #0]
2081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3331              		.loc 1 2085 0
 3332 1542 3B68     		ldr	r3, [r7, #0]
 3333 1544 002B     		cmp	r3, #0
 3334 1546 11D1     		bne	.L124
2086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3335              		.loc 1 2088 0
 3336 1548 4FF42053 		mov	r3, #10240
 3337 154c C4F20003 		movt	r3, 16384
 3338 1550 4FF42052 		mov	r2, #10240
 3339 1554 C4F20002 		movt	r2, 16384
 3340 1558 126C     		ldr	r2, [r2, #64]
 3341 155a 1146     		mov	r1, r2
 3342 155c 7A68     		ldr	r2, [r7, #4]
 3343 155e 4FEA4202 		lsl	r2, r2, #1
 3344 1562 6FEA0202 		mvn	r2, r2
 3345 1566 0A40     		ands	r2, r2, r1
 3346 1568 1A64     		str	r2, [r3, #64]
 3347 156a 0EE0     		b	.L123
 3348              	.L124:
2089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3349              		.loc 1 2093 0
 3350 156c 4FF42053 		mov	r3, #10240
 3351 1570 C4F20003 		movt	r3, 16384
 3352 1574 4FF42052 		mov	r2, #10240
 3353 1578 C4F20002 		movt	r2, 16384
 3354 157c 126C     		ldr	r2, [r2, #64]
 3355 157e 1146     		mov	r1, r2
 3356 1580 7A68     		ldr	r2, [r7, #4]
 3357 1582 4FEA4202 		lsl	r2, r2, #1
 3358 1586 0A43     		orrs	r2, r2, r1
 3359 1588 1A64     		str	r2, [r3, #64]
 3360              	.L123:
2094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3361              		.loc 1 2095 0
 3362 158a 07F10C07 		add	r7, r7, #12
 3363 158e BD46     		mov	sp, r7
 3364 1590 80BC     		pop	{r7}
 3365 1592 7047     		bx	lr
 3366              		.cfi_endproc
 3367              	.LFE147:
 3369              		.align	2
 3370              		.global	RTC_TamperCmd
 3371              		.thumb
 3372              		.thumb_func
 3374              	RTC_TamperCmd:
 3375              	.LFB148:
2096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3376              		.loc 1 2106 0
 3377              		.cfi_startproc
 3378              		@ args = 0, pretend = 0, frame = 8
 3379              		@ frame_needed = 1, uses_anonymous_args = 0
 3380              		@ link register save eliminated.
 3381 1594 80B4     		push	{r7}
 3382              	.LCFI110:
 3383              		.cfi_def_cfa_offset 4
 3384              		.cfi_offset 7, -4
 3385 1596 83B0     		sub	sp, sp, #12
 3386              	.LCFI111:
 3387              		.cfi_def_cfa_offset 16
 3388 1598 00AF     		add	r7, sp, #0
 3389              	.LCFI112:
 3390              		.cfi_def_cfa_register 7
 3391 159a 7860     		str	r0, [r7, #4]
 3392 159c 0B46     		mov	r3, r1
 3393 159e FB70     		strb	r3, [r7, #3]
2107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3394              		.loc 1 2111 0
 3395 15a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3396 15a2 002B     		cmp	r3, #0
 3397 15a4 0DD0     		beq	.L127
2112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3398              		.loc 1 2114 0
 3399 15a6 4FF42053 		mov	r3, #10240
 3400 15aa C4F20003 		movt	r3, 16384
 3401 15ae 4FF42052 		mov	r2, #10240
 3402 15b2 C4F20002 		movt	r2, 16384
 3403 15b6 126C     		ldr	r2, [r2, #64]
 3404 15b8 1146     		mov	r1, r2
 3405 15ba 7A68     		ldr	r2, [r7, #4]
 3406 15bc 0A43     		orrs	r2, r2, r1
 3407 15be 1A64     		str	r2, [r3, #64]
 3408 15c0 0EE0     		b	.L126
 3409              	.L127:
2115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3410              		.loc 1 2119 0
 3411 15c2 4FF42053 		mov	r3, #10240
 3412 15c6 C4F20003 		movt	r3, 16384
 3413 15ca 4FF42052 		mov	r2, #10240
 3414 15ce C4F20002 		movt	r2, 16384
 3415 15d2 126C     		ldr	r2, [r2, #64]
 3416 15d4 1146     		mov	r1, r2
 3417 15d6 7A68     		ldr	r2, [r7, #4]
 3418 15d8 6FEA0202 		mvn	r2, r2
 3419 15dc 0A40     		ands	r2, r2, r1
 3420 15de 1A64     		str	r2, [r3, #64]
 3421              	.L126:
2120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3422              		.loc 1 2121 0
 3423 15e0 07F10C07 		add	r7, r7, #12
 3424 15e4 BD46     		mov	sp, r7
 3425 15e6 80BC     		pop	{r7}
 3426 15e8 7047     		bx	lr
 3427              		.cfi_endproc
 3428              	.LFE148:
 3430 15ea 00BF     		.align	2
 3431              		.global	RTC_TamperFilterConfig
 3432              		.thumb
 3433              		.thumb_func
 3435              	RTC_TamperFilterConfig:
 3436              	.LFB149:
2122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3437              		.loc 1 2137 0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 8
 3440              		@ frame_needed = 1, uses_anonymous_args = 0
 3441              		@ link register save eliminated.
 3442 15ec 80B4     		push	{r7}
 3443              	.LCFI113:
 3444              		.cfi_def_cfa_offset 4
 3445              		.cfi_offset 7, -4
 3446 15ee 83B0     		sub	sp, sp, #12
 3447              	.LCFI114:
 3448              		.cfi_def_cfa_offset 16
 3449 15f0 00AF     		add	r7, sp, #0
 3450              	.LCFI115:
 3451              		.cfi_def_cfa_register 7
 3452 15f2 7860     		str	r0, [r7, #4]
2138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3453              		.loc 1 2142 0
 3454 15f4 4FF42053 		mov	r3, #10240
 3455 15f8 C4F20003 		movt	r3, 16384
 3456 15fc 4FF42052 		mov	r2, #10240
 3457 1600 C4F20002 		movt	r2, 16384
 3458 1604 126C     		ldr	r2, [r2, #64]
 3459 1606 22F4C052 		bic	r2, r2, #6144
 3460 160a 1A64     		str	r2, [r3, #64]
2143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3461              		.loc 1 2145 0
 3462 160c 4FF42053 		mov	r3, #10240
 3463 1610 C4F20003 		movt	r3, 16384
 3464 1614 4FF42052 		mov	r2, #10240
 3465 1618 C4F20002 		movt	r2, 16384
 3466 161c 126C     		ldr	r2, [r2, #64]
 3467 161e 1146     		mov	r1, r2
 3468 1620 7A68     		ldr	r2, [r7, #4]
 3469 1622 0A43     		orrs	r2, r2, r1
 3470 1624 1A64     		str	r2, [r3, #64]
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3471              		.loc 1 2146 0
 3472 1626 07F10C07 		add	r7, r7, #12
 3473 162a BD46     		mov	sp, r7
 3474 162c 80BC     		pop	{r7}
 3475 162e 7047     		bx	lr
 3476              		.cfi_endproc
 3477              	.LFE149:
 3479              		.align	2
 3480              		.global	RTC_TamperSamplingFreqConfig
 3481              		.thumb
 3482              		.thumb_func
 3484              	RTC_TamperSamplingFreqConfig:
 3485              	.LFB150:
2147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3486              		.loc 1 2171 0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 8
 3489              		@ frame_needed = 1, uses_anonymous_args = 0
 3490              		@ link register save eliminated.
 3491 1630 80B4     		push	{r7}
 3492              	.LCFI116:
 3493              		.cfi_def_cfa_offset 4
 3494              		.cfi_offset 7, -4
 3495 1632 83B0     		sub	sp, sp, #12
 3496              	.LCFI117:
 3497              		.cfi_def_cfa_offset 16
 3498 1634 00AF     		add	r7, sp, #0
 3499              	.LCFI118:
 3500              		.cfi_def_cfa_register 7
 3501 1636 7860     		str	r0, [r7, #4]
2172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3502              		.loc 1 2176 0
 3503 1638 4FF42053 		mov	r3, #10240
 3504 163c C4F20003 		movt	r3, 16384
 3505 1640 4FF42052 		mov	r2, #10240
 3506 1644 C4F20002 		movt	r2, 16384
 3507 1648 126C     		ldr	r2, [r2, #64]
 3508 164a 22F4E062 		bic	r2, r2, #1792
 3509 164e 1A64     		str	r2, [r3, #64]
2177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3510              		.loc 1 2179 0
 3511 1650 4FF42053 		mov	r3, #10240
 3512 1654 C4F20003 		movt	r3, 16384
 3513 1658 4FF42052 		mov	r2, #10240
 3514 165c C4F20002 		movt	r2, 16384
 3515 1660 126C     		ldr	r2, [r2, #64]
 3516 1662 1146     		mov	r1, r2
 3517 1664 7A68     		ldr	r2, [r7, #4]
 3518 1666 0A43     		orrs	r2, r2, r1
 3519 1668 1A64     		str	r2, [r3, #64]
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3520              		.loc 1 2180 0
 3521 166a 07F10C07 		add	r7, r7, #12
 3522 166e BD46     		mov	sp, r7
 3523 1670 80BC     		pop	{r7}
 3524 1672 7047     		bx	lr
 3525              		.cfi_endproc
 3526              	.LFE150:
 3528              		.align	2
 3529              		.global	RTC_TamperPinsPrechargeDuration
 3530              		.thumb
 3531              		.thumb_func
 3533              	RTC_TamperPinsPrechargeDuration:
 3534              	.LFB151:
2181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3535              		.loc 1 2194 0
 3536              		.cfi_startproc
 3537              		@ args = 0, pretend = 0, frame = 8
 3538              		@ frame_needed = 1, uses_anonymous_args = 0
 3539              		@ link register save eliminated.
 3540 1674 80B4     		push	{r7}
 3541              	.LCFI119:
 3542              		.cfi_def_cfa_offset 4
 3543              		.cfi_offset 7, -4
 3544 1676 83B0     		sub	sp, sp, #12
 3545              	.LCFI120:
 3546              		.cfi_def_cfa_offset 16
 3547 1678 00AF     		add	r7, sp, #0
 3548              	.LCFI121:
 3549              		.cfi_def_cfa_register 7
 3550 167a 7860     		str	r0, [r7, #4]
2195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3551              		.loc 1 2199 0
 3552 167c 4FF42053 		mov	r3, #10240
 3553 1680 C4F20003 		movt	r3, 16384
 3554 1684 4FF42052 		mov	r2, #10240
 3555 1688 C4F20002 		movt	r2, 16384
 3556 168c 126C     		ldr	r2, [r2, #64]
 3557 168e 22F4C042 		bic	r2, r2, #24576
 3558 1692 1A64     		str	r2, [r3, #64]
2200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3559              		.loc 1 2202 0
 3560 1694 4FF42053 		mov	r3, #10240
 3561 1698 C4F20003 		movt	r3, 16384
 3562 169c 4FF42052 		mov	r2, #10240
 3563 16a0 C4F20002 		movt	r2, 16384
 3564 16a4 126C     		ldr	r2, [r2, #64]
 3565 16a6 1146     		mov	r1, r2
 3566 16a8 7A68     		ldr	r2, [r7, #4]
 3567 16aa 0A43     		orrs	r2, r2, r1
 3568 16ac 1A64     		str	r2, [r3, #64]
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3569              		.loc 1 2203 0
 3570 16ae 07F10C07 		add	r7, r7, #12
 3571 16b2 BD46     		mov	sp, r7
 3572 16b4 80BC     		pop	{r7}
 3573 16b6 7047     		bx	lr
 3574              		.cfi_endproc
 3575              	.LFE151:
 3577              		.align	2
 3578              		.global	RTC_TimeStampOnTamperDetectionCmd
 3579              		.thumb
 3580              		.thumb_func
 3582              	RTC_TimeStampOnTamperDetectionCmd:
 3583              	.LFB152:
2204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3584              		.loc 1 2214 0
 3585              		.cfi_startproc
 3586              		@ args = 0, pretend = 0, frame = 8
 3587              		@ frame_needed = 1, uses_anonymous_args = 0
 3588              		@ link register save eliminated.
 3589 16b8 80B4     		push	{r7}
 3590              	.LCFI122:
 3591              		.cfi_def_cfa_offset 4
 3592              		.cfi_offset 7, -4
 3593 16ba 83B0     		sub	sp, sp, #12
 3594              	.LCFI123:
 3595              		.cfi_def_cfa_offset 16
 3596 16bc 00AF     		add	r7, sp, #0
 3597              	.LCFI124:
 3598              		.cfi_def_cfa_register 7
 3599 16be 0346     		mov	r3, r0
 3600 16c0 FB71     		strb	r3, [r7, #7]
2215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3601              		.loc 1 2218 0
 3602 16c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3603 16c4 002B     		cmp	r3, #0
 3604 16c6 0CD0     		beq	.L133
2219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3605              		.loc 1 2221 0
 3606 16c8 4FF42053 		mov	r3, #10240
 3607 16cc C4F20003 		movt	r3, 16384
 3608 16d0 4FF42052 		mov	r2, #10240
 3609 16d4 C4F20002 		movt	r2, 16384
 3610 16d8 126C     		ldr	r2, [r2, #64]
 3611 16da 42F08002 		orr	r2, r2, #128
 3612 16de 1A64     		str	r2, [r3, #64]
 3613 16e0 0BE0     		b	.L132
 3614              	.L133:
2222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3615              		.loc 1 2226 0
 3616 16e2 4FF42053 		mov	r3, #10240
 3617 16e6 C4F20003 		movt	r3, 16384
 3618 16ea 4FF42052 		mov	r2, #10240
 3619 16ee C4F20002 		movt	r2, 16384
 3620 16f2 126C     		ldr	r2, [r2, #64]
 3621 16f4 22F08002 		bic	r2, r2, #128
 3622 16f8 1A64     		str	r2, [r3, #64]
 3623              	.L132:
2227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3624              		.loc 1 2228 0
 3625 16fa 07F10C07 		add	r7, r7, #12
 3626 16fe BD46     		mov	sp, r7
 3627 1700 80BC     		pop	{r7}
 3628 1702 7047     		bx	lr
 3629              		.cfi_endproc
 3630              	.LFE152:
 3632              		.align	2
 3633              		.global	RTC_TamperPullUpCmd
 3634              		.thumb
 3635              		.thumb_func
 3637              	RTC_TamperPullUpCmd:
 3638              	.LFB153:
2229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3639              		.loc 1 2237 0
 3640              		.cfi_startproc
 3641              		@ args = 0, pretend = 0, frame = 8
 3642              		@ frame_needed = 1, uses_anonymous_args = 0
 3643              		@ link register save eliminated.
 3644 1704 80B4     		push	{r7}
 3645              	.LCFI125:
 3646              		.cfi_def_cfa_offset 4
 3647              		.cfi_offset 7, -4
 3648 1706 83B0     		sub	sp, sp, #12
 3649              	.LCFI126:
 3650              		.cfi_def_cfa_offset 16
 3651 1708 00AF     		add	r7, sp, #0
 3652              	.LCFI127:
 3653              		.cfi_def_cfa_register 7
 3654 170a 0346     		mov	r3, r0
 3655 170c FB71     		strb	r3, [r7, #7]
2238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3656              		.loc 1 2241 0
 3657 170e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3658 1710 002B     		cmp	r3, #0
 3659 1712 0CD0     		beq	.L136
2242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3660              		.loc 1 2244 0
 3661 1714 4FF42053 		mov	r3, #10240
 3662 1718 C4F20003 		movt	r3, 16384
 3663 171c 4FF42052 		mov	r2, #10240
 3664 1720 C4F20002 		movt	r2, 16384
 3665 1724 126C     		ldr	r2, [r2, #64]
 3666 1726 22F40042 		bic	r2, r2, #32768
 3667 172a 1A64     		str	r2, [r3, #64]
 3668 172c 0BE0     		b	.L135
 3669              	.L136:
2245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3670              		.loc 1 2249 0
 3671 172e 4FF42053 		mov	r3, #10240
 3672 1732 C4F20003 		movt	r3, 16384
 3673 1736 4FF42052 		mov	r2, #10240
 3674 173a C4F20002 		movt	r2, 16384
 3675 173e 126C     		ldr	r2, [r2, #64]
 3676 1740 42F40042 		orr	r2, r2, #32768
 3677 1744 1A64     		str	r2, [r3, #64]
 3678              	.L135:
2250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3679              		.loc 1 2251 0
 3680 1746 07F10C07 		add	r7, r7, #12
 3681 174a BD46     		mov	sp, r7
 3682 174c 80BC     		pop	{r7}
 3683 174e 7047     		bx	lr
 3684              		.cfi_endproc
 3685              	.LFE153:
 3687              		.align	2
 3688              		.global	RTC_WriteBackupRegister
 3689              		.thumb
 3690              		.thumb_func
 3692              	RTC_WriteBackupRegister:
 3693              	.LFB154:
2252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3694              		.loc 1 2278 0
 3695              		.cfi_startproc
 3696              		@ args = 0, pretend = 0, frame = 16
 3697              		@ frame_needed = 1, uses_anonymous_args = 0
 3698              		@ link register save eliminated.
 3699 1750 80B4     		push	{r7}
 3700              	.LCFI128:
 3701              		.cfi_def_cfa_offset 4
 3702              		.cfi_offset 7, -4
 3703 1752 85B0     		sub	sp, sp, #20
 3704              	.LCFI129:
 3705              		.cfi_def_cfa_offset 24
 3706 1754 00AF     		add	r7, sp, #0
 3707              	.LCFI130:
 3708              		.cfi_def_cfa_register 7
 3709 1756 7860     		str	r0, [r7, #4]
 3710 1758 3960     		str	r1, [r7, #0]
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3711              		.loc 1 2279 0
 3712 175a 4FF00003 		mov	r3, #0
 3713 175e FB60     		str	r3, [r7, #12]
2280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3714              		.loc 1 2284 0
 3715 1760 42F65003 		movw	r3, #10320
 3716 1764 C4F20003 		movt	r3, 16384
 3717 1768 FB60     		str	r3, [r7, #12]
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3718              		.loc 1 2285 0
 3719 176a 7B68     		ldr	r3, [r7, #4]
 3720 176c 4FEA8302 		lsl	r2, r3, #2
 3721 1770 FB68     		ldr	r3, [r7, #12]
 3722 1772 D318     		adds	r3, r2, r3
 3723 1774 FB60     		str	r3, [r7, #12]
2286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3724              		.loc 1 2288 0
 3725 1776 FB68     		ldr	r3, [r7, #12]
 3726 1778 3A68     		ldr	r2, [r7, #0]
 3727 177a 1A60     		str	r2, [r3, #0]
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3728              		.loc 1 2289 0
 3729 177c 07F11407 		add	r7, r7, #20
 3730 1780 BD46     		mov	sp, r7
 3731 1782 80BC     		pop	{r7}
 3732 1784 7047     		bx	lr
 3733              		.cfi_endproc
 3734              	.LFE154:
 3736 1786 00BF     		.align	2
 3737              		.global	RTC_ReadBackupRegister
 3738              		.thumb
 3739              		.thumb_func
 3741              	RTC_ReadBackupRegister:
 3742              	.LFB155:
2290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3743              		.loc 1 2299 0
 3744              		.cfi_startproc
 3745              		@ args = 0, pretend = 0, frame = 16
 3746              		@ frame_needed = 1, uses_anonymous_args = 0
 3747              		@ link register save eliminated.
 3748 1788 80B4     		push	{r7}
 3749              	.LCFI131:
 3750              		.cfi_def_cfa_offset 4
 3751              		.cfi_offset 7, -4
 3752 178a 85B0     		sub	sp, sp, #20
 3753              	.LCFI132:
 3754              		.cfi_def_cfa_offset 24
 3755 178c 00AF     		add	r7, sp, #0
 3756              	.LCFI133:
 3757              		.cfi_def_cfa_register 7
 3758 178e 7860     		str	r0, [r7, #4]
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3759              		.loc 1 2300 0
 3760 1790 4FF00003 		mov	r3, #0
 3761 1794 FB60     		str	r3, [r7, #12]
2301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3762              		.loc 1 2305 0
 3763 1796 42F65003 		movw	r3, #10320
 3764 179a C4F20003 		movt	r3, 16384
 3765 179e FB60     		str	r3, [r7, #12]
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3766              		.loc 1 2306 0
 3767 17a0 7B68     		ldr	r3, [r7, #4]
 3768 17a2 4FEA8302 		lsl	r2, r3, #2
 3769 17a6 FB68     		ldr	r3, [r7, #12]
 3770 17a8 D318     		adds	r3, r2, r3
 3771 17aa FB60     		str	r3, [r7, #12]
2307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3772              		.loc 1 2309 0
 3773 17ac FB68     		ldr	r3, [r7, #12]
 3774 17ae 1B68     		ldr	r3, [r3, #0]
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3775              		.loc 1 2310 0
 3776 17b0 1846     		mov	r0, r3
 3777 17b2 07F11407 		add	r7, r7, #20
 3778 17b6 BD46     		mov	sp, r7
 3779 17b8 80BC     		pop	{r7}
 3780 17ba 7047     		bx	lr
 3781              		.cfi_endproc
 3782              	.LFE155:
 3784              		.align	2
 3785              		.global	RTC_TamperPinSelection
 3786              		.thumb
 3787              		.thumb_func
 3789              	RTC_TamperPinSelection:
 3790              	.LFB156:
2311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3791              		.loc 1 2339 0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 8
 3794              		@ frame_needed = 1, uses_anonymous_args = 0
 3795              		@ link register save eliminated.
 3796 17bc 80B4     		push	{r7}
 3797              	.LCFI134:
 3798              		.cfi_def_cfa_offset 4
 3799              		.cfi_offset 7, -4
 3800 17be 83B0     		sub	sp, sp, #12
 3801              	.LCFI135:
 3802              		.cfi_def_cfa_offset 16
 3803 17c0 00AF     		add	r7, sp, #0
 3804              	.LCFI136:
 3805              		.cfi_def_cfa_register 7
 3806 17c2 7860     		str	r0, [r7, #4]
2340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3807              		.loc 1 2343 0
 3808 17c4 4FF42053 		mov	r3, #10240
 3809 17c8 C4F20003 		movt	r3, 16384
 3810 17cc 4FF42052 		mov	r2, #10240
 3811 17d0 C4F20002 		movt	r2, 16384
 3812 17d4 126C     		ldr	r2, [r2, #64]
 3813 17d6 22F48032 		bic	r2, r2, #65536
 3814 17da 1A64     		str	r2, [r3, #64]
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3815              		.loc 1 2344 0
 3816 17dc 4FF42053 		mov	r3, #10240
 3817 17e0 C4F20003 		movt	r3, 16384
 3818 17e4 4FF42052 		mov	r2, #10240
 3819 17e8 C4F20002 		movt	r2, 16384
 3820 17ec 126C     		ldr	r2, [r2, #64]
 3821 17ee 1146     		mov	r1, r2
 3822 17f0 7A68     		ldr	r2, [r7, #4]
 3823 17f2 0A43     		orrs	r2, r2, r1
 3824 17f4 1A64     		str	r2, [r3, #64]
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3825              		.loc 1 2345 0
 3826 17f6 07F10C07 		add	r7, r7, #12
 3827 17fa BD46     		mov	sp, r7
 3828 17fc 80BC     		pop	{r7}
 3829 17fe 7047     		bx	lr
 3830              		.cfi_endproc
 3831              	.LFE156:
 3833              		.align	2
 3834              		.global	RTC_TimeStampPinSelection
 3835              		.thumb
 3836              		.thumb_func
 3838              	RTC_TimeStampPinSelection:
 3839              	.LFB157:
2346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3840              		.loc 1 2356 0
 3841              		.cfi_startproc
 3842              		@ args = 0, pretend = 0, frame = 8
 3843              		@ frame_needed = 1, uses_anonymous_args = 0
 3844              		@ link register save eliminated.
 3845 1800 80B4     		push	{r7}
 3846              	.LCFI137:
 3847              		.cfi_def_cfa_offset 4
 3848              		.cfi_offset 7, -4
 3849 1802 83B0     		sub	sp, sp, #12
 3850              	.LCFI138:
 3851              		.cfi_def_cfa_offset 16
 3852 1804 00AF     		add	r7, sp, #0
 3853              	.LCFI139:
 3854              		.cfi_def_cfa_register 7
 3855 1806 7860     		str	r0, [r7, #4]
2357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3856              		.loc 1 2360 0
 3857 1808 4FF42053 		mov	r3, #10240
 3858 180c C4F20003 		movt	r3, 16384
 3859 1810 4FF42052 		mov	r2, #10240
 3860 1814 C4F20002 		movt	r2, 16384
 3861 1818 126C     		ldr	r2, [r2, #64]
 3862 181a 22F40032 		bic	r2, r2, #131072
 3863 181e 1A64     		str	r2, [r3, #64]
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3864              		.loc 1 2361 0
 3865 1820 4FF42053 		mov	r3, #10240
 3866 1824 C4F20003 		movt	r3, 16384
 3867 1828 4FF42052 		mov	r2, #10240
 3868 182c C4F20002 		movt	r2, 16384
 3869 1830 126C     		ldr	r2, [r2, #64]
 3870 1832 1146     		mov	r1, r2
 3871 1834 7A68     		ldr	r2, [r7, #4]
 3872 1836 0A43     		orrs	r2, r2, r1
 3873 1838 1A64     		str	r2, [r3, #64]
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3874              		.loc 1 2362 0
 3875 183a 07F10C07 		add	r7, r7, #12
 3876 183e BD46     		mov	sp, r7
 3877 1840 80BC     		pop	{r7}
 3878 1842 7047     		bx	lr
 3879              		.cfi_endproc
 3880              	.LFE157:
 3882              		.align	2
 3883              		.global	RTC_OutputTypeConfig
 3884              		.thumb
 3885              		.thumb_func
 3887              	RTC_OutputTypeConfig:
 3888              	.LFB158:
2363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3889              		.loc 1 2375 0
 3890              		.cfi_startproc
 3891              		@ args = 0, pretend = 0, frame = 8
 3892              		@ frame_needed = 1, uses_anonymous_args = 0
 3893              		@ link register save eliminated.
 3894 1844 80B4     		push	{r7}
 3895              	.LCFI140:
 3896              		.cfi_def_cfa_offset 4
 3897              		.cfi_offset 7, -4
 3898 1846 83B0     		sub	sp, sp, #12
 3899              	.LCFI141:
 3900              		.cfi_def_cfa_offset 16
 3901 1848 00AF     		add	r7, sp, #0
 3902              	.LCFI142:
 3903              		.cfi_def_cfa_register 7
 3904 184a 7860     		str	r0, [r7, #4]
2376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3905              		.loc 1 2379 0
 3906 184c 4FF42053 		mov	r3, #10240
 3907 1850 C4F20003 		movt	r3, 16384
 3908 1854 4FF42052 		mov	r2, #10240
 3909 1858 C4F20002 		movt	r2, 16384
 3910 185c 126C     		ldr	r2, [r2, #64]
 3911 185e 22F48022 		bic	r2, r2, #262144
 3912 1862 1A64     		str	r2, [r3, #64]
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3913              		.loc 1 2380 0
 3914 1864 4FF42053 		mov	r3, #10240
 3915 1868 C4F20003 		movt	r3, 16384
 3916 186c 4FF42052 		mov	r2, #10240
 3917 1870 C4F20002 		movt	r2, 16384
 3918 1874 126C     		ldr	r2, [r2, #64]
 3919 1876 1146     		mov	r1, r2
 3920 1878 7A68     		ldr	r2, [r7, #4]
 3921 187a 0A43     		orrs	r2, r2, r1
 3922 187c 1A64     		str	r2, [r3, #64]
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3923              		.loc 1 2381 0
 3924 187e 07F10C07 		add	r7, r7, #12
 3925 1882 BD46     		mov	sp, r7
 3926 1884 80BC     		pop	{r7}
 3927 1886 7047     		bx	lr
 3928              		.cfi_endproc
 3929              	.LFE158:
 3931              		.align	2
 3932              		.global	RTC_SynchroShiftConfig
 3933              		.thumb
 3934              		.thumb_func
 3936              	RTC_SynchroShiftConfig:
 3937              	.LFB159:
2382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3938              		.loc 1 2413 0
 3939              		.cfi_startproc
 3940              		@ args = 0, pretend = 0, frame = 16
 3941              		@ frame_needed = 1, uses_anonymous_args = 0
 3942 1888 80B5     		push	{r7, lr}
 3943              	.LCFI143:
 3944              		.cfi_def_cfa_offset 8
 3945              		.cfi_offset 14, -4
 3946              		.cfi_offset 7, -8
 3947 188a 84B0     		sub	sp, sp, #16
 3948              	.LCFI144:
 3949              		.cfi_def_cfa_offset 24
 3950 188c 00AF     		add	r7, sp, #0
 3951              	.LCFI145:
 3952              		.cfi_def_cfa_register 7
 3953 188e 7860     		str	r0, [r7, #4]
 3954 1890 3960     		str	r1, [r7, #0]
2414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3955              		.loc 1 2414 0
 3956 1892 4FF00003 		mov	r3, #0
 3957 1896 FB73     		strb	r3, [r7, #15]
2415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3958              		.loc 1 2415 0
 3959 1898 4FF00003 		mov	r3, #0
 3960 189c BB60     		str	r3, [r7, #8]
2416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3961              		.loc 1 2422 0
 3962 189e 4FF42053 		mov	r3, #10240
 3963 18a2 C4F20003 		movt	r3, 16384
 3964 18a6 4FF0CA02 		mov	r2, #202
 3965 18aa 5A62     		str	r2, [r3, #36]
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3966              		.loc 1 2423 0
 3967 18ac 4FF42053 		mov	r3, #10240
 3968 18b0 C4F20003 		movt	r3, 16384
 3969 18b4 4FF05302 		mov	r2, #83
 3970 18b8 5A62     		str	r2, [r3, #36]
2424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3971              		.loc 1 2426 0
 3972 18ba 4FF42053 		mov	r3, #10240
 3973 18be C4F20003 		movt	r3, 16384
 3974 18c2 DB68     		ldr	r3, [r3, #12]
 3975 18c4 03F00803 		and	r3, r3, #8
 3976 18c8 002B     		cmp	r3, #0
 3977 18ca 11D0     		beq	.L144
2427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3978              		.loc 1 2429 0
 3979 18cc 03E0     		b	.L145
 3980              	.L146:
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 3981              		.loc 1 2431 0
 3982 18ce BB68     		ldr	r3, [r7, #8]
 3983 18d0 03F10103 		add	r3, r3, #1
 3984 18d4 BB60     		str	r3, [r7, #8]
 3985              	.L145:
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3986              		.loc 1 2429 0 discriminator 1
 3987 18d6 4FF42053 		mov	r3, #10240
 3988 18da C4F20003 		movt	r3, 16384
 3989 18de DB68     		ldr	r3, [r3, #12]
 3990 18e0 03F00803 		and	r3, r3, #8
 3991 18e4 002B     		cmp	r3, #0
 3992 18e6 03D0     		beq	.L144
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3993              		.loc 1 2429 0 is_stmt 0 discriminator 2
 3994 18e8 BB68     		ldr	r3, [r7, #8]
 3995 18ea B3F5805F 		cmp	r3, #4096
 3996 18ee EED1     		bne	.L146
 3997              	.L144:
2432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3998              		.loc 1 2436 0 is_stmt 1
 3999 18f0 4FF42053 		mov	r3, #10240
 4000 18f4 C4F20003 		movt	r3, 16384
 4001 18f8 DB68     		ldr	r3, [r3, #12]
 4002 18fa 03F00803 		and	r3, r3, #8
 4003 18fe 002B     		cmp	r3, #0
 4004 1900 21D1     		bne	.L147
2437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4005              		.loc 1 2439 0
 4006 1902 4FF42053 		mov	r3, #10240
 4007 1906 C4F20003 		movt	r3, 16384
 4008 190a 9B68     		ldr	r3, [r3, #8]
 4009 190c 03F01003 		and	r3, r3, #16
 4010 1910 002B     		cmp	r3, #0
 4011 1912 14D1     		bne	.L148
2440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4012              		.loc 1 2442 0
 4013 1914 4FF42053 		mov	r3, #10240
 4014 1918 C4F20003 		movt	r3, 16384
 4015 191c 3968     		ldr	r1, [r7, #0]
 4016 191e 7A68     		ldr	r2, [r7, #4]
 4017 1920 0A43     		orrs	r2, r2, r1
 4018 1922 DA62     		str	r2, [r3, #44]
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4019              		.loc 1 2444 0
 4020 1924 FFF7FEFF 		bl	RTC_WaitForSynchro
 4021 1928 0346     		mov	r3, r0
 4022 192a 002B     		cmp	r3, #0
 4023 192c 03D1     		bne	.L149
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4024              		.loc 1 2446 0
 4025 192e 4FF00003 		mov	r3, #0
 4026 1932 FB73     		strb	r3, [r7, #15]
 4027 1934 0AE0     		b	.L150
 4028              	.L149:
2447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4029              		.loc 1 2450 0
 4030 1936 4FF00103 		mov	r3, #1
 4031 193a FB73     		strb	r3, [r7, #15]
 4032 193c 06E0     		b	.L150
 4033              	.L148:
2451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4034              		.loc 1 2455 0
 4035 193e 4FF00003 		mov	r3, #0
 4036 1942 FB73     		strb	r3, [r7, #15]
 4037 1944 02E0     		b	.L150
 4038              	.L147:
2456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4039              		.loc 1 2460 0
 4040 1946 4FF00003 		mov	r3, #0
 4041 194a FB73     		strb	r3, [r7, #15]
 4042              	.L150:
2461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4043              		.loc 1 2464 0
 4044 194c 4FF42053 		mov	r3, #10240
 4045 1950 C4F20003 		movt	r3, 16384
 4046 1954 4FF0FF02 		mov	r2, #255
 4047 1958 5A62     		str	r2, [r3, #36]
2465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4048              		.loc 1 2466 0
 4049 195a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4050              		.loc 1 2467 0
 4051 195c 1846     		mov	r0, r3
 4052 195e 07F11007 		add	r7, r7, #16
 4053 1962 BD46     		mov	sp, r7
 4054 1964 80BD     		pop	{r7, pc}
 4055              		.cfi_endproc
 4056              	.LFE159:
 4058 1966 00BF     		.align	2
 4059              		.global	RTC_ITConfig
 4060              		.thumb
 4061              		.thumb_func
 4063              	RTC_ITConfig:
 4064              	.LFB160:
2468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4065              		.loc 1 2532 0
 4066              		.cfi_startproc
 4067              		@ args = 0, pretend = 0, frame = 8
 4068              		@ frame_needed = 1, uses_anonymous_args = 0
 4069              		@ link register save eliminated.
 4070 1968 80B4     		push	{r7}
 4071              	.LCFI146:
 4072              		.cfi_def_cfa_offset 4
 4073              		.cfi_offset 7, -4
 4074 196a 83B0     		sub	sp, sp, #12
 4075              	.LCFI147:
 4076              		.cfi_def_cfa_offset 16
 4077 196c 00AF     		add	r7, sp, #0
 4078              	.LCFI148:
 4079              		.cfi_def_cfa_register 7
 4080 196e 7860     		str	r0, [r7, #4]
 4081 1970 0B46     		mov	r3, r1
 4082 1972 FB70     		strb	r3, [r7, #3]
2533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4083              		.loc 1 2538 0
 4084 1974 4FF42053 		mov	r3, #10240
 4085 1978 C4F20003 		movt	r3, 16384
 4086 197c 4FF0CA02 		mov	r2, #202
 4087 1980 5A62     		str	r2, [r3, #36]
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4088              		.loc 1 2539 0
 4089 1982 4FF42053 		mov	r3, #10240
 4090 1986 C4F20003 		movt	r3, 16384
 4091 198a 4FF05302 		mov	r2, #83
 4092 198e 5A62     		str	r2, [r3, #36]
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4093              		.loc 1 2541 0
 4094 1990 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4095 1992 002B     		cmp	r3, #0
 4096 1994 1ED0     		beq	.L152
2542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4097              		.loc 1 2544 0
 4098 1996 4FF42053 		mov	r3, #10240
 4099 199a C4F20003 		movt	r3, 16384
 4100 199e 4FF42052 		mov	r2, #10240
 4101 19a2 C4F20002 		movt	r2, 16384
 4102 19a6 9268     		ldr	r2, [r2, #8]
 4103 19a8 1146     		mov	r1, r2
 4104 19aa 7A68     		ldr	r2, [r7, #4]
 4105 19ac 22F00402 		bic	r2, r2, #4
 4106 19b0 0A43     		orrs	r2, r2, r1
 4107 19b2 9A60     		str	r2, [r3, #8]
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4108              		.loc 1 2546 0
 4109 19b4 4FF42053 		mov	r3, #10240
 4110 19b8 C4F20003 		movt	r3, 16384
 4111 19bc 4FF42052 		mov	r2, #10240
 4112 19c0 C4F20002 		movt	r2, 16384
 4113 19c4 126C     		ldr	r2, [r2, #64]
 4114 19c6 1146     		mov	r1, r2
 4115 19c8 7A68     		ldr	r2, [r7, #4]
 4116 19ca 02F00402 		and	r2, r2, #4
 4117 19ce 0A43     		orrs	r2, r2, r1
 4118 19d0 1A64     		str	r2, [r3, #64]
 4119 19d2 21E0     		b	.L153
 4120              	.L152:
2547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4121              		.loc 1 2551 0
 4122 19d4 4FF42053 		mov	r3, #10240
 4123 19d8 C4F20003 		movt	r3, 16384
 4124 19dc 4FF42052 		mov	r2, #10240
 4125 19e0 C4F20002 		movt	r2, 16384
 4126 19e4 9268     		ldr	r2, [r2, #8]
 4127 19e6 1146     		mov	r1, r2
 4128 19e8 7A68     		ldr	r2, [r7, #4]
 4129 19ea 22F00402 		bic	r2, r2, #4
 4130 19ee 6FEA0202 		mvn	r2, r2
 4131 19f2 0A40     		ands	r2, r2, r1
 4132 19f4 9A60     		str	r2, [r3, #8]
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4133              		.loc 1 2553 0
 4134 19f6 4FF42053 		mov	r3, #10240
 4135 19fa C4F20003 		movt	r3, 16384
 4136 19fe 4FF42052 		mov	r2, #10240
 4137 1a02 C4F20002 		movt	r2, 16384
 4138 1a06 126C     		ldr	r2, [r2, #64]
 4139 1a08 1146     		mov	r1, r2
 4140 1a0a 7A68     		ldr	r2, [r7, #4]
 4141 1a0c 02F00402 		and	r2, r2, #4
 4142 1a10 6FEA0202 		mvn	r2, r2
 4143 1a14 0A40     		ands	r2, r2, r1
 4144 1a16 1A64     		str	r2, [r3, #64]
 4145              	.L153:
2554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4146              		.loc 1 2556 0
 4147 1a18 4FF42053 		mov	r3, #10240
 4148 1a1c C4F20003 		movt	r3, 16384
 4149 1a20 4FF0FF02 		mov	r2, #255
 4150 1a24 5A62     		str	r2, [r3, #36]
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4151              		.loc 1 2557 0
 4152 1a26 07F10C07 		add	r7, r7, #12
 4153 1a2a BD46     		mov	sp, r7
 4154 1a2c 80BC     		pop	{r7}
 4155 1a2e 7047     		bx	lr
 4156              		.cfi_endproc
 4157              	.LFE160:
 4159              		.align	2
 4160              		.global	RTC_GetFlagStatus
 4161              		.thumb
 4162              		.thumb_func
 4164              	RTC_GetFlagStatus:
 4165              	.LFB161:
2558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4166              		.loc 1 2578 0
 4167              		.cfi_startproc
 4168              		@ args = 0, pretend = 0, frame = 16
 4169              		@ frame_needed = 1, uses_anonymous_args = 0
 4170              		@ link register save eliminated.
 4171 1a30 80B4     		push	{r7}
 4172              	.LCFI149:
 4173              		.cfi_def_cfa_offset 4
 4174              		.cfi_offset 7, -4
 4175 1a32 85B0     		sub	sp, sp, #20
 4176              	.LCFI150:
 4177              		.cfi_def_cfa_offset 24
 4178 1a34 00AF     		add	r7, sp, #0
 4179              	.LCFI151:
 4180              		.cfi_def_cfa_register 7
 4181 1a36 7860     		str	r0, [r7, #4]
2579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4182              		.loc 1 2579 0
 4183 1a38 4FF00003 		mov	r3, #0
 4184 1a3c FB73     		strb	r3, [r7, #15]
2580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4185              		.loc 1 2580 0
 4186 1a3e 4FF00003 		mov	r3, #0
 4187 1a42 BB60     		str	r3, [r7, #8]
2581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4188              		.loc 1 2586 0
 4189 1a44 4FF42053 		mov	r3, #10240
 4190 1a48 C4F20003 		movt	r3, 16384
 4191 1a4c DB68     		ldr	r3, [r3, #12]
 4192 1a4e 1A46     		mov	r2, r3
 4193 1a50 43F67773 		movw	r3, #16247
 4194 1a54 1340     		ands	r3, r3, r2
 4195 1a56 BB60     		str	r3, [r7, #8]
2587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4196              		.loc 1 2589 0
 4197 1a58 BA68     		ldr	r2, [r7, #8]
 4198 1a5a 7B68     		ldr	r3, [r7, #4]
 4199 1a5c 1340     		ands	r3, r3, r2
 4200 1a5e 002B     		cmp	r3, #0
 4201 1a60 03D0     		beq	.L155
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4202              		.loc 1 2591 0
 4203 1a62 4FF00103 		mov	r3, #1
 4204 1a66 FB73     		strb	r3, [r7, #15]
 4205 1a68 02E0     		b	.L156
 4206              	.L155:
2592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4207              		.loc 1 2595 0
 4208 1a6a 4FF00003 		mov	r3, #0
 4209 1a6e FB73     		strb	r3, [r7, #15]
 4210              	.L156:
2596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4211              		.loc 1 2597 0
 4212 1a70 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4213              		.loc 1 2598 0
 4214 1a72 1846     		mov	r0, r3
 4215 1a74 07F11407 		add	r7, r7, #20
 4216 1a78 BD46     		mov	sp, r7
 4217 1a7a 80BC     		pop	{r7}
 4218 1a7c 7047     		bx	lr
 4219              		.cfi_endproc
 4220              	.LFE161:
 4222 1a7e 00BF     		.align	2
 4223              		.global	RTC_ClearFlag
 4224              		.thumb
 4225              		.thumb_func
 4227              	RTC_ClearFlag:
 4228              	.LFB162:
2599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4229              		.loc 1 2614 0
 4230              		.cfi_startproc
 4231              		@ args = 0, pretend = 0, frame = 8
 4232              		@ frame_needed = 1, uses_anonymous_args = 0
 4233              		@ link register save eliminated.
 4234 1a80 80B4     		push	{r7}
 4235              	.LCFI152:
 4236              		.cfi_def_cfa_offset 4
 4237              		.cfi_offset 7, -4
 4238 1a82 83B0     		sub	sp, sp, #12
 4239              	.LCFI153:
 4240              		.cfi_def_cfa_offset 16
 4241 1a84 00AF     		add	r7, sp, #0
 4242              	.LCFI154:
 4243              		.cfi_def_cfa_register 7
 4244 1a86 7860     		str	r0, [r7, #4]
2615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4245              		.loc 1 2619 0
 4246 1a88 4FF42053 		mov	r3, #10240
 4247 1a8c C4F20003 		movt	r3, 16384
 4248 1a90 7A68     		ldr	r2, [r7, #4]
 4249 1a92 4FEA0242 		lsl	r2, r2, #16
 4250 1a96 4FEA1242 		lsr	r2, r2, #16
 4251 1a9a 42F08002 		orr	r2, r2, #128
 4252 1a9e 6FEA0201 		mvn	r1, r2
 4253 1aa2 4FF42052 		mov	r2, #10240
 4254 1aa6 C4F20002 		movt	r2, 16384
 4255 1aaa D268     		ldr	r2, [r2, #12]
 4256 1aac 02F08002 		and	r2, r2, #128
 4257 1ab0 0A43     		orrs	r2, r2, r1
 4258 1ab2 DA60     		str	r2, [r3, #12]
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4259              		.loc 1 2620 0
 4260 1ab4 07F10C07 		add	r7, r7, #12
 4261 1ab8 BD46     		mov	sp, r7
 4262 1aba 80BC     		pop	{r7}
 4263 1abc 7047     		bx	lr
 4264              		.cfi_endproc
 4265              	.LFE162:
 4267 1abe 00BF     		.align	2
 4268              		.global	RTC_GetITStatus
 4269              		.thumb
 4270              		.thumb_func
 4272              	RTC_GetITStatus:
 4273              	.LFB163:
2621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4274              		.loc 1 2634 0
 4275              		.cfi_startproc
 4276              		@ args = 0, pretend = 0, frame = 24
 4277              		@ frame_needed = 1, uses_anonymous_args = 0
 4278              		@ link register save eliminated.
 4279 1ac0 80B4     		push	{r7}
 4280              	.LCFI155:
 4281              		.cfi_def_cfa_offset 4
 4282              		.cfi_offset 7, -4
 4283 1ac2 87B0     		sub	sp, sp, #28
 4284              	.LCFI156:
 4285              		.cfi_def_cfa_offset 32
 4286 1ac4 00AF     		add	r7, sp, #0
 4287              	.LCFI157:
 4288              		.cfi_def_cfa_register 7
 4289 1ac6 7860     		str	r0, [r7, #4]
2635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4290              		.loc 1 2635 0
 4291 1ac8 4FF00003 		mov	r3, #0
 4292 1acc FB75     		strb	r3, [r7, #23]
2636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4293              		.loc 1 2636 0
 4294 1ace 4FF00003 		mov	r3, #0
 4295 1ad2 3B61     		str	r3, [r7, #16]
 4296 1ad4 4FF00003 		mov	r3, #0
 4297 1ad8 FB60     		str	r3, [r7, #12]
2637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4298              		.loc 1 2642 0
 4299 1ada 4FF42053 		mov	r3, #10240
 4300 1ade C4F20003 		movt	r3, 16384
 4301 1ae2 1B6C     		ldr	r3, [r3, #64]
 4302 1ae4 03F00403 		and	r3, r3, #4
 4303 1ae8 3B61     		str	r3, [r7, #16]
2643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4304              		.loc 1 2645 0
 4305 1aea 4FF42053 		mov	r3, #10240
 4306 1aee C4F20003 		movt	r3, 16384
 4307 1af2 9B68     		ldr	r3, [r3, #8]
 4308 1af4 1A46     		mov	r2, r3
 4309 1af6 7B68     		ldr	r3, [r7, #4]
 4310 1af8 1A40     		ands	r2, r2, r3
 4311 1afa 7B68     		ldr	r3, [r7, #4]
 4312 1afc 4FEAD331 		lsr	r1, r3, #15
 4313 1b00 3B69     		ldr	r3, [r7, #16]
 4314 1b02 0B40     		ands	r3, r3, r1
 4315 1b04 1343     		orrs	r3, r3, r2
 4316 1b06 FB60     		str	r3, [r7, #12]
2646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4317              		.loc 1 2648 0
 4318 1b08 4FF42053 		mov	r3, #10240
 4319 1b0c C4F20003 		movt	r3, 16384
 4320 1b10 DB68     		ldr	r3, [r3, #12]
 4321 1b12 1A46     		mov	r2, r3
 4322 1b14 7B68     		ldr	r3, [r7, #4]
 4323 1b16 4FEA1313 		lsr	r3, r3, #4
 4324 1b1a 1340     		ands	r3, r3, r2
 4325 1b1c 3B61     		str	r3, [r7, #16]
2649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4326              		.loc 1 2651 0
 4327 1b1e FB68     		ldr	r3, [r7, #12]
 4328 1b20 002B     		cmp	r3, #0
 4329 1b22 0AD0     		beq	.L159
 4330              		.loc 1 2651 0 is_stmt 0 discriminator 1
 4331 1b24 3B69     		ldr	r3, [r7, #16]
 4332 1b26 4FEA0343 		lsl	r3, r3, #16
 4333 1b2a 4FEA1343 		lsr	r3, r3, #16
 4334 1b2e 002B     		cmp	r3, #0
 4335 1b30 03D0     		beq	.L159
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4336              		.loc 1 2653 0 is_stmt 1
 4337 1b32 4FF00103 		mov	r3, #1
 4338 1b36 FB75     		strb	r3, [r7, #23]
 4339 1b38 02E0     		b	.L160
 4340              	.L159:
2654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4341              		.loc 1 2657 0
 4342 1b3a 4FF00003 		mov	r3, #0
 4343 1b3e FB75     		strb	r3, [r7, #23]
 4344              	.L160:
2658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4345              		.loc 1 2659 0
 4346 1b40 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4347              		.loc 1 2660 0
 4348 1b42 1846     		mov	r0, r3
 4349 1b44 07F11C07 		add	r7, r7, #28
 4350 1b48 BD46     		mov	sp, r7
 4351 1b4a 80BC     		pop	{r7}
 4352 1b4c 7047     		bx	lr
 4353              		.cfi_endproc
 4354              	.LFE163:
 4356 1b4e 00BF     		.align	2
 4357              		.global	RTC_ClearITPendingBit
 4358              		.thumb
 4359              		.thumb_func
 4361              	RTC_ClearITPendingBit:
 4362              	.LFB164:
2661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4363              		.loc 1 2674 0
 4364              		.cfi_startproc
 4365              		@ args = 0, pretend = 0, frame = 16
 4366              		@ frame_needed = 1, uses_anonymous_args = 0
 4367              		@ link register save eliminated.
 4368 1b50 80B4     		push	{r7}
 4369              	.LCFI158:
 4370              		.cfi_def_cfa_offset 4
 4371              		.cfi_offset 7, -4
 4372 1b52 85B0     		sub	sp, sp, #20
 4373              	.LCFI159:
 4374              		.cfi_def_cfa_offset 24
 4375 1b54 00AF     		add	r7, sp, #0
 4376              	.LCFI160:
 4377              		.cfi_def_cfa_register 7
 4378 1b56 7860     		str	r0, [r7, #4]
2675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4379              		.loc 1 2675 0
 4380 1b58 4FF00003 		mov	r3, #0
 4381 1b5c FB60     		str	r3, [r7, #12]
2676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4382              		.loc 1 2681 0
 4383 1b5e 7B68     		ldr	r3, [r7, #4]
 4384 1b60 4FEA1313 		lsr	r3, r3, #4
 4385 1b64 FB60     		str	r3, [r7, #12]
2682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4386              		.loc 1 2684 0
 4387 1b66 4FF42053 		mov	r3, #10240
 4388 1b6a C4F20003 		movt	r3, 16384
 4389 1b6e FA68     		ldr	r2, [r7, #12]
 4390 1b70 4FEA0242 		lsl	r2, r2, #16
 4391 1b74 4FEA1242 		lsr	r2, r2, #16
 4392 1b78 42F08002 		orr	r2, r2, #128
 4393 1b7c 6FEA0201 		mvn	r1, r2
 4394 1b80 4FF42052 		mov	r2, #10240
 4395 1b84 C4F20002 		movt	r2, 16384
 4396 1b88 D268     		ldr	r2, [r2, #12]
 4397 1b8a 02F08002 		and	r2, r2, #128
 4398 1b8e 0A43     		orrs	r2, r2, r1
 4399 1b90 DA60     		str	r2, [r3, #12]
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4400              		.loc 1 2685 0
 4401 1b92 07F11407 		add	r7, r7, #20
 4402 1b96 BD46     		mov	sp, r7
 4403 1b98 80BC     		pop	{r7}
 4404 1b9a 7047     		bx	lr
 4405              		.cfi_endproc
 4406              	.LFE164:
 4408              		.align	2
 4409              		.thumb
 4410              		.thumb_func
 4412              	RTC_ByteToBcd2:
 4413              	.LFB165:
2686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4414              		.loc 1 2697 0
 4415              		.cfi_startproc
 4416              		@ args = 0, pretend = 0, frame = 16
 4417              		@ frame_needed = 1, uses_anonymous_args = 0
 4418              		@ link register save eliminated.
 4419 1b9c 80B4     		push	{r7}
 4420              	.LCFI161:
 4421              		.cfi_def_cfa_offset 4
 4422              		.cfi_offset 7, -4
 4423 1b9e 85B0     		sub	sp, sp, #20
 4424              	.LCFI162:
 4425              		.cfi_def_cfa_offset 24
 4426 1ba0 00AF     		add	r7, sp, #0
 4427              	.LCFI163:
 4428              		.cfi_def_cfa_register 7
 4429 1ba2 0346     		mov	r3, r0
 4430 1ba4 FB71     		strb	r3, [r7, #7]
2698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4431              		.loc 1 2698 0
 4432 1ba6 4FF00003 		mov	r3, #0
 4433 1baa FB73     		strb	r3, [r7, #15]
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4434              		.loc 1 2700 0
 4435 1bac 07E0     		b	.L163
 4436              	.L164:
2701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4437              		.loc 1 2702 0
 4438 1bae FB7B     		ldrb	r3, [r7, #15]
 4439 1bb0 03F10103 		add	r3, r3, #1
 4440 1bb4 FB73     		strb	r3, [r7, #15]
2703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4441              		.loc 1 2703 0
 4442 1bb6 FB79     		ldrb	r3, [r7, #7]
 4443 1bb8 A3F10A03 		sub	r3, r3, #10
 4444 1bbc FB71     		strb	r3, [r7, #7]
 4445              	.L163:
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4446              		.loc 1 2700 0 discriminator 1
 4447 1bbe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4448 1bc0 092B     		cmp	r3, #9
 4449 1bc2 F4D8     		bhi	.L164
2704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4450              		.loc 1 2706 0
 4451 1bc4 FB7B     		ldrb	r3, [r7, #15]
 4452 1bc6 4FEA0313 		lsl	r3, r3, #4
 4453 1bca DAB2     		uxtb	r2, r3
 4454 1bcc FB79     		ldrb	r3, [r7, #7]
 4455 1bce 1343     		orrs	r3, r3, r2
 4456 1bd0 DBB2     		uxtb	r3, r3
2707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4457              		.loc 1 2707 0
 4458 1bd2 1846     		mov	r0, r3
 4459 1bd4 07F11407 		add	r7, r7, #20
 4460 1bd8 BD46     		mov	sp, r7
 4461 1bda 80BC     		pop	{r7}
 4462 1bdc 7047     		bx	lr
 4463              		.cfi_endproc
 4464              	.LFE165:
 4466 1bde 00BF     		.align	2
 4467              		.thumb
 4468              		.thumb_func
 4470              	RTC_Bcd2ToByte:
 4471              	.LFB166:
2708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4472              		.loc 1 2715 0
 4473              		.cfi_startproc
 4474              		@ args = 0, pretend = 0, frame = 16
 4475              		@ frame_needed = 1, uses_anonymous_args = 0
 4476              		@ link register save eliminated.
 4477 1be0 80B4     		push	{r7}
 4478              	.LCFI164:
 4479              		.cfi_def_cfa_offset 4
 4480              		.cfi_offset 7, -4
 4481 1be2 85B0     		sub	sp, sp, #20
 4482              	.LCFI165:
 4483              		.cfi_def_cfa_offset 24
 4484 1be4 00AF     		add	r7, sp, #0
 4485              	.LCFI166:
 4486              		.cfi_def_cfa_register 7
 4487 1be6 0346     		mov	r3, r0
 4488 1be8 FB71     		strb	r3, [r7, #7]
2716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4489              		.loc 1 2716 0
 4490 1bea 4FF00003 		mov	r3, #0
 4491 1bee FB73     		strb	r3, [r7, #15]
2717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4492              		.loc 1 2717 0
 4493 1bf0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4494 1bf2 4FEA1313 		lsr	r3, r3, #4
 4495 1bf6 DBB2     		uxtb	r3, r3
 4496 1bf8 1A46     		mov	r2, r3
 4497 1bfa 4FEA8202 		lsl	r2, r2, #2
 4498 1bfe D318     		adds	r3, r2, r3
 4499 1c00 4FEA4303 		lsl	r3, r3, #1
 4500 1c04 FB73     		strb	r3, [r7, #15]
2718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4501              		.loc 1 2718 0
 4502 1c06 FB79     		ldrb	r3, [r7, #7]
 4503 1c08 03F00F03 		and	r3, r3, #15
 4504 1c0c DAB2     		uxtb	r2, r3
 4505 1c0e FB7B     		ldrb	r3, [r7, #15]
 4506 1c10 D318     		adds	r3, r2, r3
 4507 1c12 DBB2     		uxtb	r3, r3
2719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4508              		.loc 1 2719 0
 4509 1c14 1846     		mov	r0, r3
 4510 1c16 07F11407 		add	r7, r7, #20
 4511 1c1a BD46     		mov	sp, r7
 4512 1c1c 80BC     		pop	{r7}
 4513 1c1e 7047     		bx	lr
 4514              		.cfi_endproc
 4515              	.LFE166:
 4517              	.Letext0:
 4518              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 4519              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 4520              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 4521              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:18     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:23     .text:00000000 RTC_DeInit
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:398    .text:000002a4 RTC_EnterInitMode
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:526    .text:0000035c RTC_WaitForSynchro
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:197    .text:0000016c RTC_Init
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:492    .text:00000338 RTC_ExitInitMode
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:301    .text:00000230 RTC_StructInit
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:344    .text:0000025c RTC_WriteProtectionCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:626    .text:0000040c RTC_RefClockCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:717    .text:000004a8 RTC_BypassShadowCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:787    .text:00000520 RTC_SetTime
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4470   .text:00001be0 RTC_Bcd2ToByte
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4412   .text:00001b9c RTC_ByteToBcd2
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:975    .text:00000668 RTC_TimeStructInit
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1022   .text:0000069c RTC_GetTime
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1125   .text:00000748 RTC_GetSubSecond
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1170   .text:00000778 RTC_SetDate
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1358   .text:000008b8 RTC_DateStructInit
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1405   .text:000008ec RTC_GetDate
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1511   .text:0000099c RTC_SetAlarm
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1734   .text:00000b18 RTC_AlarmStructInit
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1793   .text:00000b64 RTC_GetAlarm
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:1931   .text:00000c50 RTC_AlarmCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2062   .text:00000d40 RTC_AlarmSubSecondConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2135   .text:00000db0 RTC_GetAlarmSubSecond
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2193   .text:00000e00 RTC_WakeUpClockConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2257   .text:00000e70 RTC_SetWakeUpCounter
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2308   .text:00000eb8 RTC_GetWakeUpCounter
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2341   .text:00000ed8 RTC_WakeUpCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2460   .text:00000fb0 RTC_DayLightSavingConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2527   .text:00001024 RTC_GetStoreOperation
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2559   .text:00001040 RTC_OutputConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2626   .text:000010b4 RTC_CoarseCalibConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2701   .text:00001128 RTC_CoarseCalibCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2792   .text:000011c4 RTC_CalibOutputCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2862   .text:0000123c RTC_CalibOutputConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:2926   .text:000012ac RTC_SmoothCalibConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3035   .text:00001368 RTC_TimeStampCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3116   .text:000013ec RTC_GetTimeStamp
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3281   .text:00001520 RTC_GetTimeStampSubSecond
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3312   .text:00001538 RTC_TamperTriggerConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3374   .text:00001594 RTC_TamperCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3435   .text:000015ec RTC_TamperFilterConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3484   .text:00001630 RTC_TamperSamplingFreqConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3533   .text:00001674 RTC_TamperPinsPrechargeDuration
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3582   .text:000016b8 RTC_TimeStampOnTamperDetectionCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3637   .text:00001704 RTC_TamperPullUpCmd
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3692   .text:00001750 RTC_WriteBackupRegister
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3741   .text:00001788 RTC_ReadBackupRegister
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3789   .text:000017bc RTC_TamperPinSelection
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3838   .text:00001800 RTC_TimeStampPinSelection
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3887   .text:00001844 RTC_OutputTypeConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:3936   .text:00001888 RTC_SynchroShiftConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4063   .text:00001968 RTC_ITConfig
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4164   .text:00001a30 RTC_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4227   .text:00001a80 RTC_ClearFlag
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4272   .text:00001ac0 RTC_GetITStatus
C:\Users\Alex\AppData\Local\Temp\ccKkEHnb.s:4361   .text:00001b50 RTC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
