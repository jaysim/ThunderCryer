   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.CRYP_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	CRYP_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	CRYP_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @file    stm32f4xx_cryp.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          functionalities of the  Cryptographic processor (CRYP) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Initialization and Configuration functions
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Data treatment functions 
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Context swapping functions     
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - DMA interface function       
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Interrupts and flags management       
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                               
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          ===================================================================      
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                                 How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          =================================================================== 
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          1. Enable the CRYP controller clock using 
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *              RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          2. Initialise the CRYP using CRYP_Init(), CRYP_KeyInit() and if 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             needed CRYP_IVInit(). 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          3. Flush the IN and OUT FIFOs by using CRYP_FIFOFlush() function.
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          4. Enable the CRYP controller using the CRYP_Cmd() function. 
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          5. If using DMA for Data input and output transfer, 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             Activate the needed DMA Requests using CRYP_DMACmd() function 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          6. If DMA is not used for data transfer, use CRYP_DataIn() and 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             CRYP_DataOut() functions to enter data to IN FIFO and get result
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             from OUT FIFO.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          7. To control CRYP events you can use one of the following 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *              two methods:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *               - Check on CRYP flags using the CRYP_GetFlagStatus() function.  
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *               - Use CRYP interrupts through the function CRYP_ITConfig() at 
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                 initialization phase and CRYP_GetITStatus() function into 
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                 interrupt routines in processing phase.
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          8. Save and restore Cryptographic processor context using  
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             CRYP_SaveContext() and CRYP_RestoreContext() functions.     
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          ===================================================================  
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                Procedure to perform an encryption or a decryption
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          ===================================================================  
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *      Initialization
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *      ===============  
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *     1. Initialize the peripheral using CRYP_Init(), CRYP_KeyInit() and 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        CRYP_IVInit functions:
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - Configure the key size (128-, 192- or 256-bit, in the AES only) 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - Enter the symmetric key 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - Configure the data type
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - In case of decryption in AES-ECB or AES-CBC, you must prepare 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          the key: configure the key preparation mode. Then Enable the CRYP 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          peripheral using CRYP_Cmd() function: the BUSY flag is set. 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          Wait until BUSY flag is reset : the key is prepared for decryption
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       - Configure the algorithm and chaining (the DES/TDES in ECB/CBC, the 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          AES in ECB/CBC/CTR) 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       - Configure the direction (encryption/decryption).
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       - Write the initialization vectors (in CBC or CTR modes only)
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Flush the IN and OUT FIFOs using the CRYP_FIFOFlush() function
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    Basic Processing mode (polling mode) 
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    ====================================  
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    1. Enable the cryptographic processor using CRYP_Cmd() function.
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Write the first blocks in the input FIFO (2 to 8 words) using 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       CRYP_DataIn() function.
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    3. Repeat the following sequence until the complete message has been 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       processed:
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       a) Wait for flag CRYP_FLAG_OFNE occurs (using CRYP_GetFlagStatus() 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          function), then read the OUT-FIFO using CRYP_DataOut() function
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          (1 block or until the FIFO is empty)
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       b) Wait for flag CRYP_FLAG_IFNF occurs, (using CRYP_GetFlagStatus() 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          function then write the IN FIFO using CRYP_DataIn() function 
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          (1 block or until the FIFO is full)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    4. At the end of the processing, CRYP_FLAG_BUSY flag will be reset and 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        both FIFOs are empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        reset). You can disable the peripheral using CRYP_Cmd() function.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    Interrupts Processing mode 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    ===========================
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    In this mode, Processing is done when the data are transferred by the 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    CPU during interrupts.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    1. Enable the interrupts CRYP_IT_INI and CRYP_IT_OUTI using 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       CRYP_ITConfig() function.
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Enable the cryptographic processor using CRYP_Cmd() function.
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    3. In the CRYP_IT_INI interrupt handler : load the input message into the 
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       IN FIFO using CRYP_DataIn() function . You can load 2 or 4 words at a 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       time, or load data until the IN FIFO is full. When the last word of
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       the message has been entered into the IN FIFO, disable the CRYP_IT_INI 
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       interrupt (using CRYP_ITConfig() function).
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    4. In the CRYP_IT_OUTI interrupt handler : read the output message from 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       the OUT FIFO using CRYP_DataOut() function. You can read 1 block (2 or 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       4 words) at a time or read data until the FIFO is empty.
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       When the last word has been read, INIM=0, BUSY=0 and both FIFOs are 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is reset). 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       You can disable the CRYP_IT_OUTI interrupt (using CRYP_ITConfig() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       function) and you can disable the peripheral using CRYP_Cmd() function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    DMA Processing mode 
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    ====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    In this mode, Processing is done when the DMA is used to transfer the 
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    data from/to the memory.
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    1. Configure the DMA controller to transfer the input data from the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       memory using DMA_Init() function. 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       The transfer length is the length of the message. 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       As message padding is not managed by the peripheral, the message 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       length must be an entire number of blocks. The data are transferred 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       in burst mode. The burst length is 4 words in the AES and 2 or 4 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       words in the DES/TDES. The DMA should be configured to set an 
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       interrupt on transfer completion of the output data to indicate that 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       the processing is finished. 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       Refer to DMA peripheral driver for more details.  
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Enable the cryptographic processor using CRYP_Cmd() function. 
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       Enable the DMA requests CRYP_DMAReq_DataIN and CRYP_DMAReq_DataOUT 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       using CRYP_DMACmd() function.
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    3. All the transfers and processing are managed by the DMA and the 
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       cryptographic processor. The DMA transfer complete interrupt indicates 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       that the processing is complete. Both FIFOs are normally empty and 
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       CRYP_FLAG_BUSY flag is reset.
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *  @endverbatim
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ******************************************************************************
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @attention
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ******************************************************************************  
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Includes ------------------------------------------------------------------*/
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #include "stm32f4xx_cryp.h"
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #include "stm32f4xx_rcc.h"
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP 
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief CRYP driver modules
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */ 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private typedef -----------------------------------------------------------*/
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private define ------------------------------------------------------------*/
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #define FLAG_MASK     ((uint8_t)0x20)
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #define MAX_TIMEOUT   ((uint16_t)0xFFFF)
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private macro -------------------------------------------------------------*/
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private variables ---------------------------------------------------------*/
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private function prototypes -----------------------------------------------*/
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private functions ---------------------------------------------------------*/
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Private_Functions
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */ 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group1 Initialization and Configuration functions
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief    Initialization and Configuration functions 
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim    
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       Initialization and Configuration functions
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Initialize the cryptographic Processor using CRYP_Init() function 
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       -  Encrypt or Decrypt 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       -  mode : TDES-ECB, TDES-CBC, 
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 DES-ECB, DES-CBC, 
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 AES-ECB, AES-CBC, AES-CTR, AES-Key 
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - DataType :  32-bit data, 16-bit data, bit data or bit-string
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - Key Size (only in AES modes)
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Configure the Encrypt or Decrypt Key using CRYP_KeyInit() function 
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Configure the Initialization Vectors(IV) for CBC and CTR modes using 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      CRYP_IVInit() function.  
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Flushes the IN and OUT FIFOs : using CRYP_FIFOFlush() function.                         
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Enable or disable the CRYP Processor using CRYP_Cmd() function 
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Deinitializes the CRYP peripheral registers to their default reset values
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  None
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_DeInit(void)
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
  27              		.loc 1 216 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Enable CRYP reset state */
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
  39              		.loc 1 218 0
  40 0004 4FF01000 		mov	r0, #16
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Release CRYP from reset state */
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
  43              		.loc 1 221 0
  44 0010 4FF01000 		mov	r0, #16
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
  47              		.loc 1 222 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE110:
  52 001e 00BF     		.section	.text.CRYP_Init,"ax",%progbits
  53              		.align	2
  54              		.global	CRYP_Init
  55              		.thumb
  56              		.thumb_func
  58              	CRYP_Init:
  59              	.LFB111:
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP peripheral according to the specified parameters
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         in the CRYP_InitStruct.
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP peripheral.
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
  60              		.loc 1 232 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 8
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65 0000 80B4     		push	{r7}
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 7, -4
  69 0002 83B0     		sub	sp, sp, #12
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
  75 0006 7860     		str	r0, [r7, #4]
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Select Algorithm mode*/  
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGOMODE;
  76              		.loc 1 239 0
  77 0008 4FF00003 		mov	r3, #0
  78 000c C5F20603 		movt	r3, 20486
  79 0010 4FF00002 		mov	r2, #0
  80 0014 C5F20602 		movt	r2, 20486
  81 0018 1268     		ldr	r2, [r2, #0]
  82 001a 22F03802 		bic	r2, r2, #56
  83 001e 1A60     		str	r2, [r3, #0]
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
  84              		.loc 1 240 0
  85 0020 4FF00003 		mov	r3, #0
  86 0024 C5F20603 		movt	r3, 20486
  87 0028 4FF00002 		mov	r2, #0
  88 002c C5F20602 		movt	r2, 20486
  89 0030 1268     		ldr	r2, [r2, #0]
  90 0032 1146     		mov	r1, r2
  91 0034 7A68     		ldr	r2, [r7, #4]
  92 0036 5288     		ldrh	r2, [r2, #2]
  93 0038 0A43     		orrs	r2, r2, r1
  94 003a 1A60     		str	r2, [r3, #0]
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Select dataType */ 
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_DATATYPE;
  95              		.loc 1 243 0
  96 003c 4FF00003 		mov	r3, #0
  97 0040 C5F20603 		movt	r3, 20486
  98 0044 4FF00002 		mov	r2, #0
  99 0048 C5F20602 		movt	r2, 20486
 100 004c 1268     		ldr	r2, [r2, #0]
 101 004e 22F0C002 		bic	r2, r2, #192
 102 0052 1A60     		str	r2, [r3, #0]
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 103              		.loc 1 244 0
 104 0054 4FF00003 		mov	r3, #0
 105 0058 C5F20603 		movt	r3, 20486
 106 005c 4FF00002 		mov	r2, #0
 107 0060 C5F20602 		movt	r2, 20486
 108 0064 1268     		ldr	r2, [r2, #0]
 109 0066 1146     		mov	r1, r2
 110 0068 7A68     		ldr	r2, [r7, #4]
 111 006a 9288     		ldrh	r2, [r2, #4]
 112 006c 0A43     		orrs	r2, r2, r1
 113 006e 1A60     		str	r2, [r3, #0]
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* select Key size (used only with AES algorithm) */
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 114              		.loc 1 247 0
 115 0070 7B68     		ldr	r3, [r7, #4]
 116 0072 5B88     		ldrh	r3, [r3, #2]
 117 0074 202B     		cmp	r3, #32
 118 0076 0BD0     		beq	.L3
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 119              		.loc 1 248 0 discriminator 1
 120 0078 7B68     		ldr	r3, [r7, #4]
 121 007a 5B88     		ldrh	r3, [r3, #2]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 122              		.loc 1 247 0 discriminator 1
 123 007c 282B     		cmp	r3, #40
 124 007e 07D0     		beq	.L3
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 125              		.loc 1 249 0
 126 0080 7B68     		ldr	r3, [r7, #4]
 127 0082 5B88     		ldrh	r3, [r3, #2]
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 128              		.loc 1 248 0
 129 0084 302B     		cmp	r3, #48
 130 0086 03D0     		beq	.L3
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 131              		.loc 1 250 0
 132 0088 7B68     		ldr	r3, [r7, #4]
 133 008a 5B88     		ldrh	r3, [r3, #2]
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 134              		.loc 1 249 0
 135 008c 382B     		cmp	r3, #56
 136 008e 19D1     		bne	.L4
 137              	.L3:
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_KEYSIZE;
 138              		.loc 1 253 0
 139 0090 4FF00003 		mov	r3, #0
 140 0094 C5F20603 		movt	r3, 20486
 141 0098 4FF00002 		mov	r2, #0
 142 009c C5F20602 		movt	r2, 20486
 143 00a0 1268     		ldr	r2, [r2, #0]
 144 00a2 22F44072 		bic	r2, r2, #768
 145 00a6 1A60     		str	r2, [r3, #0]
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 146              		.loc 1 254 0
 147 00a8 4FF00003 		mov	r3, #0
 148 00ac C5F20603 		movt	r3, 20486
 149 00b0 4FF00002 		mov	r2, #0
 150 00b4 C5F20602 		movt	r2, 20486
 151 00b8 1268     		ldr	r2, [r2, #0]
 152 00ba 1146     		mov	r1, r2
 153 00bc 7A68     		ldr	r2, [r7, #4]
 154 00be D288     		ldrh	r2, [r2, #6]
 155 00c0 0A43     		orrs	r2, r2, r1
 156 00c2 1A60     		str	r2, [r3, #0]
 157              	.L4:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                   configured once the key has 
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                   been prepared */
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Select data Direction */ 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGODIR;
 158              		.loc 1 260 0
 159 00c4 4FF00003 		mov	r3, #0
 160 00c8 C5F20603 		movt	r3, 20486
 161 00cc 4FF00002 		mov	r2, #0
 162 00d0 C5F20602 		movt	r2, 20486
 163 00d4 1268     		ldr	r2, [r2, #0]
 164 00d6 22F00402 		bic	r2, r2, #4
 165 00da 1A60     		str	r2, [r3, #0]
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 166              		.loc 1 261 0
 167 00dc 4FF00003 		mov	r3, #0
 168 00e0 C5F20603 		movt	r3, 20486
 169 00e4 4FF00002 		mov	r2, #0
 170 00e8 C5F20602 		movt	r2, 20486
 171 00ec 1268     		ldr	r2, [r2, #0]
 172 00ee 1146     		mov	r1, r2
 173 00f0 7A68     		ldr	r2, [r7, #4]
 174 00f2 1288     		ldrh	r2, [r2, #0]
 175 00f4 0A43     		orrs	r2, r2, r1
 176 00f6 1A60     		str	r2, [r3, #0]
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 177              		.loc 1 262 0
 178 00f8 07F10C07 		add	r7, r7, #12
 179 00fc BD46     		mov	sp, r7
 180 00fe 80BC     		pop	{r7}
 181 0100 7047     		bx	lr
 182              		.cfi_endproc
 183              	.LFE111:
 185 0102 00BF     		.section	.text.CRYP_StructInit,"ax",%progbits
 186              		.align	2
 187              		.global	CRYP_StructInit
 188              		.thumb
 189              		.thumb_func
 191              	CRYP_StructInit:
 192              	.LFB112:
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_InitStruct member with its default value.
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         be initialized.
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 193              		.loc 1 271 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197              		@ link register save eliminated.
 198 0000 80B4     		push	{r7}
 199              	.LCFI5:
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 7, -4
 202 0002 83B0     		sub	sp, sp, #12
 203              	.LCFI6:
 204              		.cfi_def_cfa_offset 16
 205 0004 00AF     		add	r7, sp, #0
 206              	.LCFI7:
 207              		.cfi_def_cfa_register 7
 208 0006 7860     		str	r0, [r7, #4]
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_AlgoDir member */
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 209              		.loc 1 273 0
 210 0008 7B68     		ldr	r3, [r7, #4]
 211 000a 4FF00002 		mov	r2, #0
 212 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* initialize the CRYP_AlgoMode member */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 213              		.loc 1 276 0
 214 0010 7B68     		ldr	r3, [r7, #4]
 215 0012 4FF00002 		mov	r2, #0
 216 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* initialize the CRYP_DataType member */
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 217              		.loc 1 279 0
 218 0018 7B68     		ldr	r3, [r7, #4]
 219 001a 4FF00002 		mov	r2, #0
 220 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_KeySize member */
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 221              		.loc 1 282 0
 222 0020 7B68     		ldr	r3, [r7, #4]
 223 0022 4FF00002 		mov	r2, #0
 224 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 225              		.loc 1 283 0
 226 0028 07F10C07 		add	r7, r7, #12
 227 002c BD46     		mov	sp, r7
 228 002e 80BC     		pop	{r7}
 229 0030 7047     		bx	lr
 230              		.cfi_endproc
 231              	.LFE112:
 233 0032 00BF     		.section	.text.CRYP_KeyInit,"ax",%progbits
 234              		.align	2
 235              		.global	CRYP_KeyInit
 236              		.thumb
 237              		.thumb_func
 239              	CRYP_KeyInit:
 240              	.LFB113:
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Keys according to the specified parameters in
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the CRYP_KeyInitStruct.
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 241              		.loc 1 293 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 8
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246 0000 80B4     		push	{r7}
 247              	.LCFI8:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 7, -4
 250 0002 83B0     		sub	sp, sp, #12
 251              	.LCFI9:
 252              		.cfi_def_cfa_offset 16
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI10:
 255              		.cfi_def_cfa_register 7
 256 0006 7860     		str	r0, [r7, #4]
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Key Initialisation */
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 257              		.loc 1 295 0
 258 0008 4FF00003 		mov	r3, #0
 259 000c C5F20603 		movt	r3, 20486
 260 0010 7A68     		ldr	r2, [r7, #4]
 261 0012 1268     		ldr	r2, [r2, #0]
 262 0014 1A62     		str	r2, [r3, #32]
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 263              		.loc 1 296 0
 264 0016 4FF00003 		mov	r3, #0
 265 001a C5F20603 		movt	r3, 20486
 266 001e 7A68     		ldr	r2, [r7, #4]
 267 0020 5268     		ldr	r2, [r2, #4]
 268 0022 5A62     		str	r2, [r3, #36]
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 269              		.loc 1 297 0
 270 0024 4FF00003 		mov	r3, #0
 271 0028 C5F20603 		movt	r3, 20486
 272 002c 7A68     		ldr	r2, [r7, #4]
 273 002e 9268     		ldr	r2, [r2, #8]
 274 0030 9A62     		str	r2, [r3, #40]
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 275              		.loc 1 298 0
 276 0032 4FF00003 		mov	r3, #0
 277 0036 C5F20603 		movt	r3, 20486
 278 003a 7A68     		ldr	r2, [r7, #4]
 279 003c D268     		ldr	r2, [r2, #12]
 280 003e DA62     		str	r2, [r3, #44]
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 281              		.loc 1 299 0
 282 0040 4FF00003 		mov	r3, #0
 283 0044 C5F20603 		movt	r3, 20486
 284 0048 7A68     		ldr	r2, [r7, #4]
 285 004a 1269     		ldr	r2, [r2, #16]
 286 004c 1A63     		str	r2, [r3, #48]
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 287              		.loc 1 300 0
 288 004e 4FF00003 		mov	r3, #0
 289 0052 C5F20603 		movt	r3, 20486
 290 0056 7A68     		ldr	r2, [r7, #4]
 291 0058 5269     		ldr	r2, [r2, #20]
 292 005a 5A63     		str	r2, [r3, #52]
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 293              		.loc 1 301 0
 294 005c 4FF00003 		mov	r3, #0
 295 0060 C5F20603 		movt	r3, 20486
 296 0064 7A68     		ldr	r2, [r7, #4]
 297 0066 9269     		ldr	r2, [r2, #24]
 298 0068 9A63     		str	r2, [r3, #56]
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 299              		.loc 1 302 0
 300 006a 4FF00003 		mov	r3, #0
 301 006e C5F20603 		movt	r3, 20486
 302 0072 7A68     		ldr	r2, [r7, #4]
 303 0074 D269     		ldr	r2, [r2, #28]
 304 0076 DA63     		str	r2, [r3, #60]
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 305              		.loc 1 303 0
 306 0078 07F10C07 		add	r7, r7, #12
 307 007c BD46     		mov	sp, r7
 308 007e 80BC     		pop	{r7}
 309 0080 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE113:
 313 0082 00BF     		.section	.text.CRYP_KeyStructInit,"ax",%progbits
 314              		.align	2
 315              		.global	CRYP_KeyStructInit
 316              		.thumb
 317              		.thumb_func
 319              	CRYP_KeyStructInit:
 320              	.LFB114:
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_KeyInitStruct member with its default value.
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         which will be initialized.
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 321              		.loc 1 312 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 8
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326 0000 80B4     		push	{r7}
 327              	.LCFI11:
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 7, -4
 330 0002 83B0     		sub	sp, sp, #12
 331              	.LCFI12:
 332              		.cfi_def_cfa_offset 16
 333 0004 00AF     		add	r7, sp, #0
 334              	.LCFI13:
 335              		.cfi_def_cfa_register 7
 336 0006 7860     		str	r0, [r7, #4]
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 337              		.loc 1 313 0
 338 0008 7B68     		ldr	r3, [r7, #4]
 339 000a 4FF00002 		mov	r2, #0
 340 000e 1A60     		str	r2, [r3, #0]
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 341              		.loc 1 314 0
 342 0010 7B68     		ldr	r3, [r7, #4]
 343 0012 4FF00002 		mov	r2, #0
 344 0016 5A60     		str	r2, [r3, #4]
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 345              		.loc 1 315 0
 346 0018 7B68     		ldr	r3, [r7, #4]
 347 001a 4FF00002 		mov	r2, #0
 348 001e 9A60     		str	r2, [r3, #8]
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 349              		.loc 1 316 0
 350 0020 7B68     		ldr	r3, [r7, #4]
 351 0022 4FF00002 		mov	r2, #0
 352 0026 DA60     		str	r2, [r3, #12]
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 353              		.loc 1 317 0
 354 0028 7B68     		ldr	r3, [r7, #4]
 355 002a 4FF00002 		mov	r2, #0
 356 002e 1A61     		str	r2, [r3, #16]
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 357              		.loc 1 318 0
 358 0030 7B68     		ldr	r3, [r7, #4]
 359 0032 4FF00002 		mov	r2, #0
 360 0036 5A61     		str	r2, [r3, #20]
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 361              		.loc 1 319 0
 362 0038 7B68     		ldr	r3, [r7, #4]
 363 003a 4FF00002 		mov	r2, #0
 364 003e 9A61     		str	r2, [r3, #24]
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 365              		.loc 1 320 0
 366 0040 7B68     		ldr	r3, [r7, #4]
 367 0042 4FF00002 		mov	r2, #0
 368 0046 DA61     		str	r2, [r3, #28]
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 369              		.loc 1 321 0
 370 0048 07F10C07 		add	r7, r7, #12
 371 004c BD46     		mov	sp, r7
 372 004e 80BC     		pop	{r7}
 373 0050 7047     		bx	lr
 374              		.cfi_endproc
 375              	.LFE114:
 377 0052 00BF     		.section	.text.CRYP_IVInit,"ax",%progbits
 378              		.align	2
 379              		.global	CRYP_IVInit
 380              		.thumb
 381              		.thumb_func
 383              	CRYP_IVInit:
 384              	.LFB115:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Initialization Vectors(IV) according to the
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         specified parameters in the CRYP_IVInitStruct.
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP Initialization Vectors(IV).
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 385              		.loc 1 330 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390 0000 80B4     		push	{r7}
 391              	.LCFI14:
 392              		.cfi_def_cfa_offset 4
 393              		.cfi_offset 7, -4
 394 0002 83B0     		sub	sp, sp, #12
 395              	.LCFI15:
 396              		.cfi_def_cfa_offset 16
 397 0004 00AF     		add	r7, sp, #0
 398              	.LCFI16:
 399              		.cfi_def_cfa_register 7
 400 0006 7860     		str	r0, [r7, #4]
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 401              		.loc 1 331 0
 402 0008 4FF00003 		mov	r3, #0
 403 000c C5F20603 		movt	r3, 20486
 404 0010 7A68     		ldr	r2, [r7, #4]
 405 0012 1268     		ldr	r2, [r2, #0]
 406 0014 1A64     		str	r2, [r3, #64]
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 407              		.loc 1 332 0
 408 0016 4FF00003 		mov	r3, #0
 409 001a C5F20603 		movt	r3, 20486
 410 001e 7A68     		ldr	r2, [r7, #4]
 411 0020 5268     		ldr	r2, [r2, #4]
 412 0022 5A64     		str	r2, [r3, #68]
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 413              		.loc 1 333 0
 414 0024 4FF00003 		mov	r3, #0
 415 0028 C5F20603 		movt	r3, 20486
 416 002c 7A68     		ldr	r2, [r7, #4]
 417 002e 9268     		ldr	r2, [r2, #8]
 418 0030 9A64     		str	r2, [r3, #72]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 419              		.loc 1 334 0
 420 0032 4FF00003 		mov	r3, #0
 421 0036 C5F20603 		movt	r3, 20486
 422 003a 7A68     		ldr	r2, [r7, #4]
 423 003c D268     		ldr	r2, [r2, #12]
 424 003e DA64     		str	r2, [r3, #76]
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 425              		.loc 1 335 0
 426 0040 07F10C07 		add	r7, r7, #12
 427 0044 BD46     		mov	sp, r7
 428 0046 80BC     		pop	{r7}
 429 0048 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE115:
 433 004a 00BF     		.section	.text.CRYP_IVStructInit,"ax",%progbits
 434              		.align	2
 435              		.global	CRYP_IVStructInit
 436              		.thumb
 437              		.thumb_func
 439              	CRYP_IVStructInit:
 440              	.LFB116:
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_IVInitStruct member with its default value.
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         Vectors(IV) structure which will be initialized.
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 441              		.loc 1 344 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              	.LCFI17:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0002 83B0     		sub	sp, sp, #12
 451              	.LCFI18:
 452              		.cfi_def_cfa_offset 16
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI19:
 455              		.cfi_def_cfa_register 7
 456 0006 7860     		str	r0, [r7, #4]
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 457              		.loc 1 345 0
 458 0008 7B68     		ldr	r3, [r7, #4]
 459 000a 4FF00002 		mov	r2, #0
 460 000e 1A60     		str	r2, [r3, #0]
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Right = 0;
 461              		.loc 1 346 0
 462 0010 7B68     		ldr	r3, [r7, #4]
 463 0012 4FF00002 		mov	r2, #0
 464 0016 5A60     		str	r2, [r3, #4]
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 465              		.loc 1 347 0
 466 0018 7B68     		ldr	r3, [r7, #4]
 467 001a 4FF00002 		mov	r2, #0
 468 001e 9A60     		str	r2, [r3, #8]
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Right = 0;
 469              		.loc 1 348 0
 470 0020 7B68     		ldr	r3, [r7, #4]
 471 0022 4FF00002 		mov	r2, #0
 472 0026 DA60     		str	r2, [r3, #12]
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 473              		.loc 1 349 0
 474 0028 07F10C07 		add	r7, r7, #12
 475 002c BD46     		mov	sp, r7
 476 002e 80BC     		pop	{r7}
 477 0030 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE116:
 481 0032 00BF     		.section	.text.CRYP_FIFOFlush,"ax",%progbits
 482              		.align	2
 483              		.global	CRYP_FIFOFlush
 484              		.thumb
 485              		.thumb_func
 487              	CRYP_FIFOFlush:
 488              	.LFB117:
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Flushes the IN and OUT FIFOs (that is read and write pointers of the 
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         FIFOs are reset)
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   The FIFOs must be flushed only when BUSY flag is reset.  
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  None
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_FIFOFlush(void)
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 489              		.loc 1 359 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 0000 80B4     		push	{r7}
 495              	.LCFI20:
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 0002 00AF     		add	r7, sp, #0
 499              	.LCFI21:
 500              		.cfi_def_cfa_register 7
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Reset the read and write pointers of the FIFOs */
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_FFLUSH;
 501              		.loc 1 361 0
 502 0004 4FF00003 		mov	r3, #0
 503 0008 C5F20603 		movt	r3, 20486
 504 000c 4FF00002 		mov	r2, #0
 505 0010 C5F20602 		movt	r2, 20486
 506 0014 1268     		ldr	r2, [r2, #0]
 507 0016 42F48042 		orr	r2, r2, #16384
 508 001a 1A60     		str	r2, [r3, #0]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 509              		.loc 1 362 0
 510 001c BD46     		mov	sp, r7
 511 001e 80BC     		pop	{r7}
 512 0020 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE117:
 516 0022 00BF     		.section	.text.CRYP_Cmd,"ax",%progbits
 517              		.align	2
 518              		.global	CRYP_Cmd
 519              		.thumb
 520              		.thumb_func
 522              	CRYP_Cmd:
 523              	.LFB118:
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP peripheral.
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the CRYP peripheral.
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_Cmd(FunctionalState NewState)
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 524              		.loc 1 371 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 8
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529 0000 80B4     		push	{r7}
 530              	.LCFI22:
 531              		.cfi_def_cfa_offset 4
 532              		.cfi_offset 7, -4
 533 0002 83B0     		sub	sp, sp, #12
 534              	.LCFI23:
 535              		.cfi_def_cfa_offset 16
 536 0004 00AF     		add	r7, sp, #0
 537              	.LCFI24:
 538              		.cfi_def_cfa_register 7
 539 0006 0346     		mov	r3, r0
 540 0008 FB71     		strb	r3, [r7, #7]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 541              		.loc 1 375 0
 542 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 543 000c 002B     		cmp	r3, #0
 544 000e 0CD0     		beq	.L12
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Enable the Cryptographic processor */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_CR_CRYPEN;
 545              		.loc 1 378 0
 546 0010 4FF00003 		mov	r3, #0
 547 0014 C5F20603 		movt	r3, 20486
 548 0018 4FF00002 		mov	r2, #0
 549 001c C5F20602 		movt	r2, 20486
 550 0020 1268     		ldr	r2, [r2, #0]
 551 0022 42F40042 		orr	r2, r2, #32768
 552 0026 1A60     		str	r2, [r3, #0]
 553 0028 0BE0     		b	.L11
 554              	.L12:
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Disable the Cryptographic processor */
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_CRYPEN;
 555              		.loc 1 383 0
 556 002a 4FF00003 		mov	r3, #0
 557 002e C5F20603 		movt	r3, 20486
 558 0032 4FF00002 		mov	r2, #0
 559 0036 C5F20602 		movt	r2, 20486
 560 003a 1268     		ldr	r2, [r2, #0]
 561 003c 22F40042 		bic	r2, r2, #32768
 562 0040 1A60     		str	r2, [r3, #0]
 563              	.L11:
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 564              		.loc 1 385 0
 565 0042 07F10C07 		add	r7, r7, #12
 566 0046 BD46     		mov	sp, r7
 567 0048 80BC     		pop	{r7}
 568 004a 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE118:
 572              		.section	.text.CRYP_DataIn,"ax",%progbits
 573              		.align	2
 574              		.global	CRYP_DataIn
 575              		.thumb
 576              		.thumb_func
 578              	CRYP_DataIn:
 579              	.LFB119:
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group2 CRYP Data processing functions
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief    CRYP Data processing functions
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim    
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       CRYP Data processing functions
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing the encryption and decryption 
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   operations: 
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - Enter data to be treated in the IN FIFO : using CRYP_DataIn() function.
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - Get the data result from the OUT FIFO : using CRYP_DataOut() function.
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Writes data in the Data Input register (DIN).
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   After the DIN register has been read once or several times, 
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  Data: data to write in Data Input register
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_DataIn(uint32_t Data)
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 580              		.loc 1 414 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 8
 583              		@ frame_needed = 1, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585 0000 80B4     		push	{r7}
 586              	.LCFI25:
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 0002 83B0     		sub	sp, sp, #12
 590              	.LCFI26:
 591              		.cfi_def_cfa_offset 16
 592 0004 00AF     		add	r7, sp, #0
 593              	.LCFI27:
 594              		.cfi_def_cfa_register 7
 595 0006 7860     		str	r0, [r7, #4]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->DR = Data;
 596              		.loc 1 415 0
 597 0008 4FF00003 		mov	r3, #0
 598 000c C5F20603 		movt	r3, 20486
 599 0010 7A68     		ldr	r2, [r7, #4]
 600 0012 9A60     		str	r2, [r3, #8]
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 601              		.loc 1 416 0
 602 0014 07F10C07 		add	r7, r7, #12
 603 0018 BD46     		mov	sp, r7
 604 001a 80BC     		pop	{r7}
 605 001c 7047     		bx	lr
 606              		.cfi_endproc
 607              	.LFE119:
 609 001e 00BF     		.section	.text.CRYP_DataOut,"ax",%progbits
 610              		.align	2
 611              		.global	CRYP_DataOut
 612              		.thumb
 613              		.thumb_func
 615              	CRYP_DataOut:
 616              	.LFB120:
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Returns the last data entered into the output FIFO.
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  None
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval Last data entered into the output FIFO.
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** uint32_t CRYP_DataOut(void)
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 617              		.loc 1 424 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622 0000 80B4     		push	{r7}
 623              	.LCFI28:
 624              		.cfi_def_cfa_offset 4
 625              		.cfi_offset 7, -4
 626 0002 00AF     		add	r7, sp, #0
 627              	.LCFI29:
 628              		.cfi_def_cfa_register 7
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   return CRYP->DOUT;
 629              		.loc 1 425 0
 630 0004 4FF00003 		mov	r3, #0
 631 0008 C5F20603 		movt	r3, 20486
 632 000c DB68     		ldr	r3, [r3, #12]
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 633              		.loc 1 426 0
 634 000e 1846     		mov	r0, r3
 635 0010 BD46     		mov	sp, r7
 636 0012 80BC     		pop	{r7}
 637 0014 7047     		bx	lr
 638              		.cfi_endproc
 639              	.LFE120:
 641 0016 00BF     		.section	.text.CRYP_SaveContext,"ax",%progbits
 642              		.align	2
 643              		.global	CRYP_SaveContext
 644              		.thumb
 645              		.thumb_func
 647              	CRYP_SaveContext:
 648              	.LFB121:
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group3 Context swapping functions
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief   Context swapping functions
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim   
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                              Context swapping functions
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to save and store CRYP Context
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   It is possible to interrupt an encryption/ decryption/ key generation process 
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   to perform another processing with a higher priority, and to complete the 
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   interrupted process later on, when the higher-priority task is complete. To do 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   so, the context of the interrupted task must be saved from the CRYP registers 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   to memory, and then be restored from memory to the CRYP registers.
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   1. To save the current context, use CRYP_SaveContext() function
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   2. To restore the saved context, use CRYP_RestoreContext() function 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Saves the CRYP peripheral Context. 
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   This function stops DMA transfer before to save the context. After 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         restoring the context, you have to enable the DMA again (if the DMA
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         was previously used).
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextSave: pointer to a CRYP_Context structure that contains
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the repository for current context.
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.  
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                              CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 649              		.loc 1 468 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 24
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654 0000 80B4     		push	{r7}
 655              	.LCFI30:
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 7, -4
 658 0002 87B0     		sub	sp, sp, #28
 659              	.LCFI31:
 660              		.cfi_def_cfa_offset 32
 661 0004 00AF     		add	r7, sp, #0
 662              	.LCFI32:
 663              		.cfi_def_cfa_register 7
 664 0006 7860     		str	r0, [r7, #4]
 665 0008 3960     		str	r1, [r7, #0]
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   __IO uint32_t timeout = 0;
 666              		.loc 1 469 0
 667 000a 4FF00003 		mov	r3, #0
 668 000e BB60     		str	r3, [r7, #8]
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   uint32_t ckeckmask = 0, bitstatus;    
 669              		.loc 1 470 0
 670 0010 4FF00003 		mov	r3, #0
 671 0014 7B61     		str	r3, [r7, #20]
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ErrorStatus status = ERROR;
 672              		.loc 1 471 0
 673 0016 4FF00003 		mov	r3, #0
 674 001a FB74     		strb	r3, [r7, #19]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 675              		.loc 1 474 0
 676 001c 4FF00003 		mov	r3, #0
 677 0020 C5F20603 		movt	r3, 20486
 678 0024 4FF00002 		mov	r2, #0
 679 0028 C5F20602 		movt	r2, 20486
 680 002c 1269     		ldr	r2, [r2, #16]
 681 002e 22F00102 		bic	r2, r2, #1
 682 0032 1A61     		str	r2, [r3, #16]
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Wait until both the IN and OUT FIFOs are empty  
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      BUSY bit is cleared. */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0
 683              		.loc 1 480 0
 684 0034 4FF00003 		mov	r3, #0
 685 0038 C5F20603 		movt	r3, 20486
 686 003c 1B68     		ldr	r3, [r3, #0]
 687 003e 03F00803 		and	r3, r3, #8
 688 0042 002B     		cmp	r3, #0
 689 0044 03D0     		beq	.L17
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   { 
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 690              		.loc 1 482 0
 691 0046 4FF01103 		mov	r3, #17
 692 004a 7B61     		str	r3, [r7, #20]
 693 004c 02E0     		b	.L18
 694              	.L17:
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else /* AES or DES */
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 695              		.loc 1 486 0
 696 004e 4FF01503 		mov	r3, #21
 697 0052 7B61     		str	r3, [r7, #20]
 698              	.L18:
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }           
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   do 
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = CRYP->SR & ckeckmask;
 699              		.loc 1 491 0 discriminator 1
 700 0054 4FF00003 		mov	r3, #0
 701 0058 C5F20603 		movt	r3, 20486
 702 005c 5B68     		ldr	r3, [r3, #4]
 703 005e 1A46     		mov	r2, r3
 704 0060 7B69     		ldr	r3, [r7, #20]
 705 0062 1340     		ands	r3, r3, r2
 706 0064 FB60     		str	r3, [r7, #12]
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     timeout++;
 707              		.loc 1 492 0 discriminator 1
 708 0066 BB68     		ldr	r3, [r7, #8]
 709 0068 03F10103 		add	r3, r3, #1
 710 006c BB60     		str	r3, [r7, #8]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 711              		.loc 1 494 0 discriminator 1
 712 006e BA68     		ldr	r2, [r7, #8]
 713 0070 4FF6FF73 		movw	r3, #65535
 714 0074 9A42     		cmp	r2, r3
 715 0076 02D0     		beq	.L19
 716 0078 FB68     		ldr	r3, [r7, #12]
 717 007a 012B     		cmp	r3, #1
 718 007c EAD1     		bne	.L18
 719              	.L19:
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 720              		.loc 1 496 0
 721 007e 4FF00003 		mov	r3, #0
 722 0082 C5F20603 		movt	r3, 20486
 723 0086 5B68     		ldr	r3, [r3, #4]
 724 0088 1A46     		mov	r2, r3
 725 008a 7B69     		ldr	r3, [r7, #20]
 726 008c 1340     		ands	r3, r3, r2
 727 008e 012B     		cmp	r3, #1
 728 0090 03D0     		beq	.L20
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     status = ERROR;
 729              		.loc 1 498 0
 730 0092 4FF00003 		mov	r3, #0
 731 0096 FB74     		strb	r3, [r7, #19]
 732 0098 63E0     		b	.L21
 733              	.L20:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {      
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Stop DMA transfers on the OUT FIFO by 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****        - writing the DOEN bit to 0 in the CRYP_DMACR register 
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****        - and clear the CRYPEN bit. */
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 734              		.loc 1 506 0
 735 009a 4FF00003 		mov	r3, #0
 736 009e C5F20603 		movt	r3, 20486
 737 00a2 4FF00002 		mov	r2, #0
 738 00a6 C5F20602 		movt	r2, 20486
 739 00aa 1269     		ldr	r2, [r2, #16]
 740 00ac 22F00202 		bic	r2, r2, #2
 741 00b0 1A61     		str	r2, [r3, #16]
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 742              		.loc 1 507 0
 743 00b2 4FF00003 		mov	r3, #0
 744 00b6 C5F20603 		movt	r3, 20486
 745 00ba 4FF00002 		mov	r2, #0
 746 00be C5F20602 		movt	r2, 20486
 747 00c2 1268     		ldr	r2, [r2, #0]
 748 00c4 22F40042 		bic	r2, r2, #32768
 749 00c8 1A60     		str	r2, [r3, #0]
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 750              		.loc 1 510 0
 751 00ca 4FF00003 		mov	r3, #0
 752 00ce C5F20603 		movt	r3, 20486
 753 00d2 1B68     		ldr	r3, [r3, #0]
 754 00d4 03F47F72 		and	r2, r3, #1020
 755 00d8 7B68     		ldr	r3, [r7, #4]
 756 00da 1A60     		str	r2, [r3, #0]
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                  CRYP_CR_DATATYPE | 
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                  CRYP_CR_ALGOMODE |
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                  CRYP_CR_ALGODIR); 
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* and, if not in ECB mode, the initialization vectors. */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 757              		.loc 1 516 0
 758 00dc 4FF00003 		mov	r3, #0
 759 00e0 C5F20603 		movt	r3, 20486
 760 00e4 1B6C     		ldr	r3, [r3, #64]
 761 00e6 1A46     		mov	r2, r3
 762 00e8 7B68     		ldr	r3, [r7, #4]
 763 00ea 5A60     		str	r2, [r3, #4]
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 764              		.loc 1 517 0
 765 00ec 4FF00003 		mov	r3, #0
 766 00f0 C5F20603 		movt	r3, 20486
 767 00f4 5B6C     		ldr	r3, [r3, #68]
 768 00f6 1A46     		mov	r2, r3
 769 00f8 7B68     		ldr	r3, [r7, #4]
 770 00fa 9A60     		str	r2, [r3, #8]
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 771              		.loc 1 518 0
 772 00fc 4FF00003 		mov	r3, #0
 773 0100 C5F20603 		movt	r3, 20486
 774 0104 9B6C     		ldr	r3, [r3, #72]
 775 0106 1A46     		mov	r2, r3
 776 0108 7B68     		ldr	r3, [r7, #4]
 777 010a DA60     		str	r2, [r3, #12]
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 778              		.loc 1 519 0
 779 010c 4FF00003 		mov	r3, #0
 780 0110 C5F20603 		movt	r3, 20486
 781 0114 DB6C     		ldr	r3, [r3, #76]
 782 0116 1A46     		mov	r2, r3
 783 0118 7B68     		ldr	r3, [r7, #4]
 784 011a 1A61     		str	r2, [r3, #16]
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* save The key value */
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 785              		.loc 1 522 0
 786 011c 3B68     		ldr	r3, [r7, #0]
 787 011e 1A68     		ldr	r2, [r3, #0]
 788 0120 7B68     		ldr	r3, [r7, #4]
 789 0122 5A61     		str	r2, [r3, #20]
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 790              		.loc 1 523 0
 791 0124 3B68     		ldr	r3, [r7, #0]
 792 0126 5A68     		ldr	r2, [r3, #4]
 793 0128 7B68     		ldr	r3, [r7, #4]
 794 012a 9A61     		str	r2, [r3, #24]
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 795              		.loc 1 524 0
 796 012c 3B68     		ldr	r3, [r7, #0]
 797 012e 9A68     		ldr	r2, [r3, #8]
 798 0130 7B68     		ldr	r3, [r7, #4]
 799 0132 DA61     		str	r2, [r3, #28]
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800              		.loc 1 525 0
 801 0134 3B68     		ldr	r3, [r7, #0]
 802 0136 DA68     		ldr	r2, [r3, #12]
 803 0138 7B68     		ldr	r3, [r7, #4]
 804 013a 1A62     		str	r2, [r3, #32]
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 805              		.loc 1 526 0
 806 013c 3B68     		ldr	r3, [r7, #0]
 807 013e 1A69     		ldr	r2, [r3, #16]
 808 0140 7B68     		ldr	r3, [r7, #4]
 809 0142 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 810              		.loc 1 527 0
 811 0144 3B68     		ldr	r3, [r7, #0]
 812 0146 5A69     		ldr	r2, [r3, #20]
 813 0148 7B68     		ldr	r3, [r7, #4]
 814 014a 9A62     		str	r2, [r3, #40]
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 815              		.loc 1 528 0
 816 014c 3B68     		ldr	r3, [r7, #0]
 817 014e 9A69     		ldr	r2, [r3, #24]
 818 0150 7B68     		ldr	r3, [r7, #4]
 819 0152 DA62     		str	r2, [r3, #44]
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 820              		.loc 1 529 0
 821 0154 3B68     		ldr	r3, [r7, #0]
 822 0156 DA69     		ldr	r2, [r3, #28]
 823 0158 7B68     		ldr	r3, [r7, #4]
 824 015a 1A63     		str	r2, [r3, #48]
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    /* When needed, save the DMA status (pointers for IN and OUT messages, 
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       number of remaining bytes, etc.) */
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     status = SUCCESS;
 825              		.loc 1 534 0
 826 015c 4FF00103 		mov	r3, #1
 827 0160 FB74     		strb	r3, [r7, #19]
 828              	.L21:
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    return status;
 829              		.loc 1 537 0
 830 0162 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 831              		.loc 1 538 0
 832 0164 1846     		mov	r0, r3
 833 0166 07F11C07 		add	r7, r7, #28
 834 016a BD46     		mov	sp, r7
 835 016c 80BC     		pop	{r7}
 836 016e 7047     		bx	lr
 837              		.cfi_endproc
 838              	.LFE121:
 840              		.section	.text.CRYP_RestoreContext,"ax",%progbits
 841              		.align	2
 842              		.global	CRYP_RestoreContext
 843              		.thumb
 844              		.thumb_func
 846              	CRYP_RestoreContext:
 847              	.LFB122:
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Restores the CRYP peripheral Context.
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   Since teh DMA transfer is stopped in CRYP_SaveContext() function,
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         after restoring the context, you have to enable the DMA again (if the
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         DMA was previously used).  
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextRestore: pointer to a CRYP_Context structure that contains
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the repository for saved context.
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   The data that were saved during context saving must be rewrited into
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the IN FIFO.
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 848              		.loc 1 552 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 8
 851              		@ frame_needed = 1, uses_anonymous_args = 0
 852              		@ link register save eliminated.
 853 0000 80B4     		push	{r7}
 854              	.LCFI33:
 855              		.cfi_def_cfa_offset 4
 856              		.cfi_offset 7, -4
 857 0002 83B0     		sub	sp, sp, #12
 858              	.LCFI34:
 859              		.cfi_def_cfa_offset 16
 860 0004 00AF     		add	r7, sp, #0
 861              	.LCFI35:
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Configure the processor with the saved configuration */
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 864              		.loc 1 555 0
 865 0008 4FF00003 		mov	r3, #0
 866 000c C5F20603 		movt	r3, 20486
 867 0010 7A68     		ldr	r2, [r7, #4]
 868 0012 1268     		ldr	r2, [r2, #0]
 869 0014 1A60     		str	r2, [r3, #0]
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* restore The key value */
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 870              		.loc 1 558 0
 871 0016 4FF00003 		mov	r3, #0
 872 001a C5F20603 		movt	r3, 20486
 873 001e 7A68     		ldr	r2, [r7, #4]
 874 0020 5269     		ldr	r2, [r2, #20]
 875 0022 1A62     		str	r2, [r3, #32]
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 876              		.loc 1 559 0
 877 0024 4FF00003 		mov	r3, #0
 878 0028 C5F20603 		movt	r3, 20486
 879 002c 7A68     		ldr	r2, [r7, #4]
 880 002e 9269     		ldr	r2, [r2, #24]
 881 0030 5A62     		str	r2, [r3, #36]
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 882              		.loc 1 560 0
 883 0032 4FF00003 		mov	r3, #0
 884 0036 C5F20603 		movt	r3, 20486
 885 003a 7A68     		ldr	r2, [r7, #4]
 886 003c D269     		ldr	r2, [r2, #28]
 887 003e 9A62     		str	r2, [r3, #40]
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 888              		.loc 1 561 0
 889 0040 4FF00003 		mov	r3, #0
 890 0044 C5F20603 		movt	r3, 20486
 891 0048 7A68     		ldr	r2, [r7, #4]
 892 004a 126A     		ldr	r2, [r2, #32]
 893 004c DA62     		str	r2, [r3, #44]
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 894              		.loc 1 562 0
 895 004e 4FF00003 		mov	r3, #0
 896 0052 C5F20603 		movt	r3, 20486
 897 0056 7A68     		ldr	r2, [r7, #4]
 898 0058 526A     		ldr	r2, [r2, #36]
 899 005a 1A63     		str	r2, [r3, #48]
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 900              		.loc 1 563 0
 901 005c 4FF00003 		mov	r3, #0
 902 0060 C5F20603 		movt	r3, 20486
 903 0064 7A68     		ldr	r2, [r7, #4]
 904 0066 926A     		ldr	r2, [r2, #40]
 905 0068 5A63     		str	r2, [r3, #52]
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 906              		.loc 1 564 0
 907 006a 4FF00003 		mov	r3, #0
 908 006e C5F20603 		movt	r3, 20486
 909 0072 7A68     		ldr	r2, [r7, #4]
 910 0074 D26A     		ldr	r2, [r2, #44]
 911 0076 9A63     		str	r2, [r3, #56]
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 912              		.loc 1 565 0
 913 0078 4FF00003 		mov	r3, #0
 914 007c C5F20603 		movt	r3, 20486
 915 0080 7A68     		ldr	r2, [r7, #4]
 916 0082 126B     		ldr	r2, [r2, #48]
 917 0084 DA63     		str	r2, [r3, #60]
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* and the initialization vectors. */
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 918              		.loc 1 568 0
 919 0086 4FF00003 		mov	r3, #0
 920 008a C5F20603 		movt	r3, 20486
 921 008e 7A68     		ldr	r2, [r7, #4]
 922 0090 5268     		ldr	r2, [r2, #4]
 923 0092 1A64     		str	r2, [r3, #64]
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 924              		.loc 1 569 0
 925 0094 4FF00003 		mov	r3, #0
 926 0098 C5F20603 		movt	r3, 20486
 927 009c 7A68     		ldr	r2, [r7, #4]
 928 009e 9268     		ldr	r2, [r2, #8]
 929 00a0 5A64     		str	r2, [r3, #68]
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 930              		.loc 1 570 0
 931 00a2 4FF00003 		mov	r3, #0
 932 00a6 C5F20603 		movt	r3, 20486
 933 00aa 7A68     		ldr	r2, [r7, #4]
 934 00ac D268     		ldr	r2, [r2, #12]
 935 00ae 9A64     		str	r2, [r3, #72]
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 936              		.loc 1 571 0
 937 00b0 4FF00003 		mov	r3, #0
 938 00b4 C5F20603 		movt	r3, 20486
 939 00b8 7A68     		ldr	r2, [r7, #4]
 940 00ba 1269     		ldr	r2, [r2, #16]
 941 00bc DA64     		str	r2, [r3, #76]
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Enable the cryptographic processor */
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_CRYPEN;
 942              		.loc 1 574 0
 943 00be 4FF00003 		mov	r3, #0
 944 00c2 C5F20603 		movt	r3, 20486
 945 00c6 4FF00002 		mov	r2, #0
 946 00ca C5F20602 		movt	r2, 20486
 947 00ce 1268     		ldr	r2, [r2, #0]
 948 00d0 42F40042 		orr	r2, r2, #32768
 949 00d4 1A60     		str	r2, [r3, #0]
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 950              		.loc 1 575 0
 951 00d6 07F10C07 		add	r7, r7, #12
 952 00da BD46     		mov	sp, r7
 953 00dc 80BC     		pop	{r7}
 954 00de 7047     		bx	lr
 955              		.cfi_endproc
 956              	.LFE122:
 958              		.section	.text.CRYP_DMACmd,"ax",%progbits
 959              		.align	2
 960              		.global	CRYP_DMACmd
 961              		.thumb
 962              		.thumb_func
 964              	CRYP_DMACmd:
 965              	.LFB123:
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group4 CRYP's DMA interface Configuration function
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief   CRYP's DMA interface Configuration function 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim   
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                    CRYP's DMA interface Configuration function
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to configure the DMA interface for 
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP data input and output transfer.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   When the DMA mode is enabled (using the CRYP_DMACmd() function), data can be 
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   transferred:
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - From memory to the CRYP IN FIFO using the DMA peripheral by enabling 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     the CRYP_DMAReq_DataIN request.
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - From the CRYP OUT FIFO to the memory using the DMA peripheral by enabling 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     the CRYP_DMAReq_DataOUT request.
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP DMA interface.
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_DMAReq: specifies the CRYP DMA transfer request to be enabled or disabled.
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           This parameter can be any combination of the following values:
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataOUT: DMA for outgoing(Tx) data transfer
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataIN: DMA for incoming(Rx) data transfer
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the selected CRYP DMA transfer request.
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 966              		.loc 1 613 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 8
 969              		@ frame_needed = 1, uses_anonymous_args = 0
 970              		@ link register save eliminated.
 971 0000 80B4     		push	{r7}
 972              	.LCFI36:
 973              		.cfi_def_cfa_offset 4
 974              		.cfi_offset 7, -4
 975 0002 83B0     		sub	sp, sp, #12
 976              	.LCFI37:
 977              		.cfi_def_cfa_offset 16
 978 0004 00AF     		add	r7, sp, #0
 979              	.LCFI38:
 980              		.cfi_def_cfa_register 7
 981 0006 0246     		mov	r2, r0
 982 0008 0B46     		mov	r3, r1
 983 000a FA71     		strb	r2, [r7, #7]
 984 000c BB71     		strb	r3, [r7, #6]
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 985              		.loc 1 618 0
 986 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 987 0010 002B     		cmp	r3, #0
 988 0012 0DD0     		beq	.L24
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP DMA request */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->DMACR |= CRYP_DMAReq;
 989              		.loc 1 621 0
 990 0014 4FF00003 		mov	r3, #0
 991 0018 C5F20603 		movt	r3, 20486
 992 001c 4FF00002 		mov	r2, #0
 993 0020 C5F20602 		movt	r2, 20486
 994 0024 1269     		ldr	r2, [r2, #16]
 995 0026 1146     		mov	r1, r2
 996 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 997 002a 0A43     		orrs	r2, r2, r1
 998 002c 1A61     		str	r2, [r3, #16]
 999 002e 0FE0     		b	.L23
 1000              	.L24:
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP DMA request */
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 1001              		.loc 1 626 0
 1002 0030 4FF00003 		mov	r3, #0
 1003 0034 C5F20603 		movt	r3, 20486
 1004 0038 4FF00002 		mov	r2, #0
 1005 003c C5F20602 		movt	r2, 20486
 1006 0040 1269     		ldr	r2, [r2, #16]
 1007 0042 1146     		mov	r1, r2
 1008 0044 FA79     		ldrb	r2, [r7, #7]
 1009 0046 6FEA0202 		mvn	r2, r2
 1010 004a D2B2     		uxtb	r2, r2
 1011 004c 0A40     		ands	r2, r2, r1
 1012 004e 1A61     		str	r2, [r3, #16]
 1013              	.L23:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1014              		.loc 1 628 0
 1015 0050 07F10C07 		add	r7, r7, #12
 1016 0054 BD46     		mov	sp, r7
 1017 0056 80BC     		pop	{r7}
 1018 0058 7047     		bx	lr
 1019              		.cfi_endproc
 1020              	.LFE123:
 1022 005a 00BF     		.section	.text.CRYP_ITConfig,"ax",%progbits
 1023              		.align	2
 1024              		.global	CRYP_ITConfig
 1025              		.thumb
 1026              		.thumb_func
 1028              	CRYP_ITConfig:
 1029              	.LFB124:
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group5 Interrupts and flags management functions
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief   Interrupts and flags management functions
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim   
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                    Interrupts and flags management functions
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to configure the CRYP Interrupts and 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   to get the status and Interrupts pending bits.
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   The CRYP provides 2 Interrupts sources and 7 Flags:
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   Flags :
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ------- 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                           
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      1. CRYP_FLAG_IFEM :  Set when Input FIFO is empty.
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                           This Flag is cleared only by hardware.
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      2. CRYP_FLAG_IFNF :  Set when Input FIFO is not full.
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                           This Flag is cleared only by hardware.
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      3. CRYP_FLAG_INRIS  : Set when Input FIFO Raw interrupt is pending 
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            it gives the raw interrupt state prior to masking 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            of the input FIFO service interrupt.
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      4. CRYP_FLAG_OFNE   : Set when Output FIFO not empty.
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****         
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      5. CRYP_FLAG_OFFU   : Set when Output FIFO is full.
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      6. CRYP_FLAG_OUTRIS : Set when Output FIFO Raw interrupt is pending 
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            it gives the raw interrupt state prior to masking 
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            of the output FIFO service interrupt.
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      7. CRYP_FLAG_BUSY   : Set when the CRYP core is currently processing a 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            block of data or a key preparation (for AES 
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            decryption).
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            To clear it, the CRYP core must be disabled and the 
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            last processing has completed. 
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   Interrupts :
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ------------
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    1. CRYP_IT_INI   : The input FIFO service interrupt is asserted when there 
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       are less than 4 words in the input FIFO.
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       This interrupt is associated to CRYP_FLAG_INRIS flag.
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 @note This interrupt is cleared by performing write operations 
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       to the input FIFO until it holds 4 or more words. The 
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       input FIFO service interrupt INMIS is enabled with the 
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       CRYP enable bit. Consequently, when CRYP is disabled, the 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       INMIS signal is low even if the input FIFO is empty.
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    2. CRYP_IT_OUTI  : The output FIFO service interrupt is asserted when there 
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       is one or more (32-bit word) data items in the output FIFO.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       This interrupt is associated to CRYP_FLAG_OUTRIS flag.
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 @note This interrupt is cleared by reading data from the output 
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       FIFO until there is no valid (32-bit) word left (that is, 
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       the interrupt follows the state of the OFNE (output FIFO 
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       not empty) flag).
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   Managing the CRYP controller events :
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ------------------------------------ 
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   The user should identify which mode will be used in his application to manage 
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   the CRYP controller events: Polling mode or Interrupt mode.
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   1.  In the Polling Mode it is advised to use the following functions:
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - CRYP_GetFlagStatus() : to check if flags events occur. 
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   @note  The CRYPT flags do not need to be cleared since they are cleared as 
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****          soon as the associated event are reset.   
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - CRYP_ITConfig()       : to enable or disable the interrupt source.
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - CRYP_GetITStatus()    : to check if Interrupt occurs.
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   @note  The CRYPT interrupts have no pending bits, the interrupt is cleared as 
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****          soon as the associated event is reset. 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */ 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the specified CRYP interrupts.
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP interrupt source to be enabled or disabled.
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be any combination of the following values:
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the specified CRYP interrupt.
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           This parameter can be: ENABLE or DISABLE.
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 1030              		.loc 1 738 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 8
 1033              		@ frame_needed = 1, uses_anonymous_args = 0
 1034              		@ link register save eliminated.
 1035 0000 80B4     		push	{r7}
 1036              	.LCFI39:
 1037              		.cfi_def_cfa_offset 4
 1038              		.cfi_offset 7, -4
 1039 0002 83B0     		sub	sp, sp, #12
 1040              	.LCFI40:
 1041              		.cfi_def_cfa_offset 16
 1042 0004 00AF     		add	r7, sp, #0
 1043              	.LCFI41:
 1044              		.cfi_def_cfa_register 7
 1045 0006 0246     		mov	r2, r0
 1046 0008 0B46     		mov	r3, r1
 1047 000a FA71     		strb	r2, [r7, #7]
 1048 000c BB71     		strb	r3, [r7, #6]
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 1049              		.loc 1 743 0
 1050 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1051 0010 002B     		cmp	r3, #0
 1052 0012 0DD0     		beq	.L27
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP interrupt */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->IMSCR |= CRYP_IT;
 1053              		.loc 1 746 0
 1054 0014 4FF00003 		mov	r3, #0
 1055 0018 C5F20603 		movt	r3, 20486
 1056 001c 4FF00002 		mov	r2, #0
 1057 0020 C5F20602 		movt	r2, 20486
 1058 0024 5269     		ldr	r2, [r2, #20]
 1059 0026 1146     		mov	r1, r2
 1060 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1061 002a 0A43     		orrs	r2, r2, r1
 1062 002c 5A61     		str	r2, [r3, #20]
 1063 002e 0FE0     		b	.L26
 1064              	.L27:
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP interrupt */
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 1065              		.loc 1 751 0
 1066 0030 4FF00003 		mov	r3, #0
 1067 0034 C5F20603 		movt	r3, 20486
 1068 0038 4FF00002 		mov	r2, #0
 1069 003c C5F20602 		movt	r2, 20486
 1070 0040 5269     		ldr	r2, [r2, #20]
 1071 0042 1146     		mov	r1, r2
 1072 0044 FA79     		ldrb	r2, [r7, #7]
 1073 0046 6FEA0202 		mvn	r2, r2
 1074 004a D2B2     		uxtb	r2, r2
 1075 004c 0A40     		ands	r2, r2, r1
 1076 004e 5A61     		str	r2, [r3, #20]
 1077              	.L26:
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1078              		.loc 1 753 0
 1079 0050 07F10C07 		add	r7, r7, #12
 1080 0054 BD46     		mov	sp, r7
 1081 0056 80BC     		pop	{r7}
 1082 0058 7047     		bx	lr
 1083              		.cfi_endproc
 1084              	.LFE124:
 1086 005a 00BF     		.section	.text.CRYP_GetITStatus,"ax",%progbits
 1087              		.align	2
 1088              		.global	CRYP_GetITStatus
 1089              		.thumb
 1090              		.thumb_func
 1092              	CRYP_GetITStatus:
 1093              	.LFB125:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP interrupt has occurred or not.
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   This function checks the status of the masked interrupt (i.e the 
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         interrupt should be previously enabled).     
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP (masked) interrupt source to check.
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           This parameter can be one of the following values:
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_IT (SET or RESET).
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 1094              		.loc 1 766 0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 16
 1097              		@ frame_needed = 1, uses_anonymous_args = 0
 1098              		@ link register save eliminated.
 1099 0000 80B4     		push	{r7}
 1100              	.LCFI42:
 1101              		.cfi_def_cfa_offset 4
 1102              		.cfi_offset 7, -4
 1103 0002 85B0     		sub	sp, sp, #20
 1104              	.LCFI43:
 1105              		.cfi_def_cfa_offset 24
 1106 0004 00AF     		add	r7, sp, #0
 1107              	.LCFI44:
 1108              		.cfi_def_cfa_register 7
 1109 0006 0346     		mov	r3, r0
 1110 0008 FB71     		strb	r3, [r7, #7]
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ITStatus bitstatus = RESET;
 1111              		.loc 1 767 0
 1112 000a 4FF00003 		mov	r3, #0
 1113 000e FB73     		strb	r3, [r7, #15]
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_IT(CRYP_IT));
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP interrupt */
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 1114              		.loc 1 772 0
 1115 0010 4FF00003 		mov	r3, #0
 1116 0014 C5F20603 		movt	r3, 20486
 1117 0018 DB69     		ldr	r3, [r3, #28]
 1118 001a 1A46     		mov	r2, r3
 1119 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1120 001e 1340     		ands	r3, r3, r2
 1121 0020 002B     		cmp	r3, #0
 1122 0022 03D0     		beq	.L30
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_IT is set */
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = SET;
 1123              		.loc 1 775 0
 1124 0024 4FF00103 		mov	r3, #1
 1125 0028 FB73     		strb	r3, [r7, #15]
 1126 002a 02E0     		b	.L31
 1127              	.L30:
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_IT is reset */
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 1128              		.loc 1 780 0
 1129 002c 4FF00003 		mov	r3, #0
 1130 0030 FB73     		strb	r3, [r7, #15]
 1131              	.L31:
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Return the CRYP_IT status */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   return bitstatus;
 1132              		.loc 1 783 0
 1133 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1134              		.loc 1 784 0
 1135 0034 1846     		mov	r0, r3
 1136 0036 07F11407 		add	r7, r7, #20
 1137 003a BD46     		mov	sp, r7
 1138 003c 80BC     		pop	{r7}
 1139 003e 7047     		bx	lr
 1140              		.cfi_endproc
 1141              	.LFE125:
 1143              		.section	.text.CRYP_GetFlagStatus,"ax",%progbits
 1144              		.align	2
 1145              		.global	CRYP_GetFlagStatus
 1146              		.thumb
 1147              		.thumb_func
 1149              	CRYP_GetFlagStatus:
 1150              	.LFB126:
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP flag is set or not.
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_FLAG: specifies the CRYP flag to check.
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be one of the following values:
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFEM: Input FIFO Empty flag.
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFNF: Input FIFO Not Full flag.
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFNE: Output FIFO Not Empty flag.
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFFU: Output FIFO Full flag.
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_BUSY: Busy flag.
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_FLAG (SET or RESET).
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 1151              		.loc 1 800 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 16
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156 0000 80B4     		push	{r7}
 1157              	.LCFI45:
 1158              		.cfi_def_cfa_offset 4
 1159              		.cfi_offset 7, -4
 1160 0002 85B0     		sub	sp, sp, #20
 1161              	.LCFI46:
 1162              		.cfi_def_cfa_offset 24
 1163 0004 00AF     		add	r7, sp, #0
 1164              	.LCFI47:
 1165              		.cfi_def_cfa_register 7
 1166 0006 0346     		mov	r3, r0
 1167 0008 FB71     		strb	r3, [r7, #7]
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   FlagStatus bitstatus = RESET;
 1168              		.loc 1 801 0
 1169 000a 4FF00003 		mov	r3, #0
 1170 000e FB73     		strb	r3, [r7, #15]
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   uint32_t tempreg = 0;
 1171              		.loc 1 802 0
 1172 0010 4FF00003 		mov	r3, #0
 1173 0014 BB60     		str	r3, [r7, #8]
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* check if the FLAG is in RISR register */
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 1174              		.loc 1 808 0
 1175 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1176 0018 03F02003 		and	r3, r3, #32
 1177 001c 002B     		cmp	r3, #0
 1178 001e 06D0     		beq	.L33
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     tempreg = CRYP->RISR;
 1179              		.loc 1 810 0
 1180 0020 4FF00003 		mov	r3, #0
 1181 0024 C5F20603 		movt	r3, 20486
 1182 0028 9B69     		ldr	r3, [r3, #24]
 1183 002a BB60     		str	r3, [r7, #8]
 1184 002c 05E0     		b	.L34
 1185              	.L33:
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else  /* The FLAG is in SR register */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     tempreg = CRYP->SR;
 1186              		.loc 1 814 0
 1187 002e 4FF00003 		mov	r3, #0
 1188 0032 C5F20603 		movt	r3, 20486
 1189 0036 5B68     		ldr	r3, [r3, #4]
 1190 0038 BB60     		str	r3, [r7, #8]
 1191              	.L34:
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP flag */
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 1192              		.loc 1 819 0
 1193 003a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1194 003c BB68     		ldr	r3, [r7, #8]
 1195 003e 1340     		ands	r3, r3, r2
 1196 0040 002B     		cmp	r3, #0
 1197 0042 03D0     		beq	.L35
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is set */
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = SET;
 1198              		.loc 1 822 0
 1199 0044 4FF00103 		mov	r3, #1
 1200 0048 FB73     		strb	r3, [r7, #15]
 1201 004a 02E0     		b	.L36
 1202              	.L35:
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is reset */
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 1203              		.loc 1 827 0
 1204 004c 4FF00003 		mov	r3, #0
 1205 0050 FB73     		strb	r3, [r7, #15]
 1206              	.L36:
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Return the CRYP_FLAG status */
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   return  bitstatus;
 1207              		.loc 1 831 0
 1208 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1209              		.loc 1 832 0
 1210 0054 1846     		mov	r0, r3
 1211 0056 07F11407 		add	r7, r7, #20
 1212 005a BD46     		mov	sp, r7
 1213 005c 80BC     		pop	{r7}
 1214 005e 7047     		bx	lr
 1215              		.cfi_endproc
 1216              	.LFE126:
 1218              		.text
 1219              	.Letext0:
 1220              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1221              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
 1222              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_S
 1223              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp.c
  C:\Temp\ccZE7Ksg.s:19     .text.CRYP_DeInit:00000000 $t
  C:\Temp\ccZE7Ksg.s:24     .text.CRYP_DeInit:00000000 CRYP_DeInit
  C:\Temp\ccZE7Ksg.s:53     .text.CRYP_Init:00000000 $t
  C:\Temp\ccZE7Ksg.s:58     .text.CRYP_Init:00000000 CRYP_Init
  C:\Temp\ccZE7Ksg.s:186    .text.CRYP_StructInit:00000000 $t
  C:\Temp\ccZE7Ksg.s:191    .text.CRYP_StructInit:00000000 CRYP_StructInit
  C:\Temp\ccZE7Ksg.s:234    .text.CRYP_KeyInit:00000000 $t
  C:\Temp\ccZE7Ksg.s:239    .text.CRYP_KeyInit:00000000 CRYP_KeyInit
  C:\Temp\ccZE7Ksg.s:314    .text.CRYP_KeyStructInit:00000000 $t
  C:\Temp\ccZE7Ksg.s:319    .text.CRYP_KeyStructInit:00000000 CRYP_KeyStructInit
  C:\Temp\ccZE7Ksg.s:378    .text.CRYP_IVInit:00000000 $t
  C:\Temp\ccZE7Ksg.s:383    .text.CRYP_IVInit:00000000 CRYP_IVInit
  C:\Temp\ccZE7Ksg.s:434    .text.CRYP_IVStructInit:00000000 $t
  C:\Temp\ccZE7Ksg.s:439    .text.CRYP_IVStructInit:00000000 CRYP_IVStructInit
  C:\Temp\ccZE7Ksg.s:482    .text.CRYP_FIFOFlush:00000000 $t
  C:\Temp\ccZE7Ksg.s:487    .text.CRYP_FIFOFlush:00000000 CRYP_FIFOFlush
  C:\Temp\ccZE7Ksg.s:517    .text.CRYP_Cmd:00000000 $t
  C:\Temp\ccZE7Ksg.s:522    .text.CRYP_Cmd:00000000 CRYP_Cmd
  C:\Temp\ccZE7Ksg.s:573    .text.CRYP_DataIn:00000000 $t
  C:\Temp\ccZE7Ksg.s:578    .text.CRYP_DataIn:00000000 CRYP_DataIn
  C:\Temp\ccZE7Ksg.s:610    .text.CRYP_DataOut:00000000 $t
  C:\Temp\ccZE7Ksg.s:615    .text.CRYP_DataOut:00000000 CRYP_DataOut
  C:\Temp\ccZE7Ksg.s:642    .text.CRYP_SaveContext:00000000 $t
  C:\Temp\ccZE7Ksg.s:647    .text.CRYP_SaveContext:00000000 CRYP_SaveContext
  C:\Temp\ccZE7Ksg.s:841    .text.CRYP_RestoreContext:00000000 $t
  C:\Temp\ccZE7Ksg.s:846    .text.CRYP_RestoreContext:00000000 CRYP_RestoreContext
  C:\Temp\ccZE7Ksg.s:959    .text.CRYP_DMACmd:00000000 $t
  C:\Temp\ccZE7Ksg.s:964    .text.CRYP_DMACmd:00000000 CRYP_DMACmd
  C:\Temp\ccZE7Ksg.s:1023   .text.CRYP_ITConfig:00000000 $t
  C:\Temp\ccZE7Ksg.s:1028   .text.CRYP_ITConfig:00000000 CRYP_ITConfig
  C:\Temp\ccZE7Ksg.s:1087   .text.CRYP_GetITStatus:00000000 $t
  C:\Temp\ccZE7Ksg.s:1092   .text.CRYP_GetITStatus:00000000 CRYP_GetITStatus
  C:\Temp\ccZE7Ksg.s:1144   .text.CRYP_GetFlagStatus:00000000 $t
  C:\Temp\ccZE7Ksg.s:1149   .text.CRYP_GetFlagStatus:00000000 CRYP_GetFlagStatus
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
