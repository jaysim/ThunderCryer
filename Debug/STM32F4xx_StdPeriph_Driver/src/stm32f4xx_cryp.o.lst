   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CRYP_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	CRYP_DeInit:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @file    stm32f4xx_cryp.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          functionalities of the  Cryptographic processor (CRYP) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Initialization and Configuration functions
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Data treatment functions 
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Context swapping functions     
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - DMA interface function       
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           - Interrupts and flags management       
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                               
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          ===================================================================      
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                                 How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          =================================================================== 
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          1. Enable the CRYP controller clock using 
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *              RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          2. Initialise the CRYP using CRYP_Init(), CRYP_KeyInit() and if 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             needed CRYP_IVInit(). 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          3. Flush the IN and OUT FIFOs by using CRYP_FIFOFlush() function.
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          4. Enable the CRYP controller using the CRYP_Cmd() function. 
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          5. If using DMA for Data input and output transfer, 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             Activate the needed DMA Requests using CRYP_DMACmd() function 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          6. If DMA is not used for data transfer, use CRYP_DataIn() and 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             CRYP_DataOut() functions to enter data to IN FIFO and get result
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             from OUT FIFO.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          7. To control CRYP events you can use one of the following 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *              two methods:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *               - Check on CRYP flags using the CRYP_GetFlagStatus() function.  
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *               - Use CRYP interrupts through the function CRYP_ITConfig() at 
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                 initialization phase and CRYP_GetITStatus() function into 
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                 interrupt routines in processing phase.
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          8. Save and restore Cryptographic processor context using  
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *             CRYP_SaveContext() and CRYP_RestoreContext() functions.     
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          ===================================================================  
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *                Procedure to perform an encryption or a decryption
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          ===================================================================  
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *      Initialization
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *      ===============  
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *     1. Initialize the peripheral using CRYP_Init(), CRYP_KeyInit() and 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        CRYP_IVInit functions:
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - Configure the key size (128-, 192- or 256-bit, in the AES only) 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - Enter the symmetric key 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - Configure the data type
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        - In case of decryption in AES-ECB or AES-CBC, you must prepare 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          the key: configure the key preparation mode. Then Enable the CRYP 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          peripheral using CRYP_Cmd() function: the BUSY flag is set. 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          Wait until BUSY flag is reset : the key is prepared for decryption
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       - Configure the algorithm and chaining (the DES/TDES in ECB/CBC, the 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          AES in ECB/CBC/CTR) 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       - Configure the direction (encryption/decryption).
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       - Write the initialization vectors (in CBC or CTR modes only)
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Flush the IN and OUT FIFOs using the CRYP_FIFOFlush() function
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    Basic Processing mode (polling mode) 
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    ====================================  
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    1. Enable the cryptographic processor using CRYP_Cmd() function.
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Write the first blocks in the input FIFO (2 to 8 words) using 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       CRYP_DataIn() function.
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    3. Repeat the following sequence until the complete message has been 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       processed:
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       a) Wait for flag CRYP_FLAG_OFNE occurs (using CRYP_GetFlagStatus() 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          function), then read the OUT-FIFO using CRYP_DataOut() function
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          (1 block or until the FIFO is empty)
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       b) Wait for flag CRYP_FLAG_IFNF occurs, (using CRYP_GetFlagStatus() 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          function then write the IN FIFO using CRYP_DataIn() function 
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          (1 block or until the FIFO is full)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    4. At the end of the processing, CRYP_FLAG_BUSY flag will be reset and 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        both FIFOs are empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *        reset). You can disable the peripheral using CRYP_Cmd() function.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    Interrupts Processing mode 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    ===========================
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    In this mode, Processing is done when the data are transferred by the 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    CPU during interrupts.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    1. Enable the interrupts CRYP_IT_INI and CRYP_IT_OUTI using 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       CRYP_ITConfig() function.
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Enable the cryptographic processor using CRYP_Cmd() function.
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    3. In the CRYP_IT_INI interrupt handler : load the input message into the 
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       IN FIFO using CRYP_DataIn() function . You can load 2 or 4 words at a 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       time, or load data until the IN FIFO is full. When the last word of
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       the message has been entered into the IN FIFO, disable the CRYP_IT_INI 
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       interrupt (using CRYP_ITConfig() function).
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    4. In the CRYP_IT_OUTI interrupt handler : read the output message from 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       the OUT FIFO using CRYP_DataOut() function. You can read 1 block (2 or 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       4 words) at a time or read data until the FIFO is empty.
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       When the last word has been read, INIM=0, BUSY=0 and both FIFOs are 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is reset). 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       You can disable the CRYP_IT_OUTI interrupt (using CRYP_ITConfig() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       function) and you can disable the peripheral using CRYP_Cmd() function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    DMA Processing mode 
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    ====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    In this mode, Processing is done when the DMA is used to transfer the 
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    data from/to the memory.
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    1. Configure the DMA controller to transfer the input data from the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       memory using DMA_Init() function. 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       The transfer length is the length of the message. 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       As message padding is not managed by the peripheral, the message 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       length must be an entire number of blocks. The data are transferred 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       in burst mode. The burst length is 4 words in the AES and 2 or 4 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       words in the DES/TDES. The DMA should be configured to set an 
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       interrupt on transfer completion of the output data to indicate that 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       the processing is finished. 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       Refer to DMA peripheral driver for more details.  
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    2. Enable the cryptographic processor using CRYP_Cmd() function. 
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       Enable the DMA requests CRYP_DMAReq_DataIN and CRYP_DMAReq_DataOUT 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       using CRYP_DMACmd() function.
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *    3. All the transfers and processing are managed by the DMA and the 
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       cryptographic processor. The DMA transfer complete interrupt indicates 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       that the processing is complete. Both FIFOs are normally empty and 
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *       CRYP_FLAG_BUSY flag is reset.
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *  @endverbatim
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ******************************************************************************
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @attention
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ******************************************************************************  
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Includes ------------------------------------------------------------------*/
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #include "stm32f4xx_cryp.h"
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #include "stm32f4xx_rcc.h"
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP 
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief CRYP driver modules
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */ 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private typedef -----------------------------------------------------------*/
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private define ------------------------------------------------------------*/
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #define FLAG_MASK     ((uint8_t)0x20)
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** #define MAX_TIMEOUT   ((uint16_t)0xFFFF)
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private macro -------------------------------------------------------------*/
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private variables ---------------------------------------------------------*/
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private function prototypes -----------------------------------------------*/
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /* Private functions ---------------------------------------------------------*/
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Private_Functions
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */ 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group1 Initialization and Configuration functions
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief    Initialization and Configuration functions 
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim    
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       Initialization and Configuration functions
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Initialize the cryptographic Processor using CRYP_Init() function 
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       -  Encrypt or Decrypt 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       -  mode : TDES-ECB, TDES-CBC, 
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 DES-ECB, DES-CBC, 
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 AES-ECB, AES-CBC, AES-CTR, AES-Key 
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - DataType :  32-bit data, 16-bit data, bit data or bit-string
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - Key Size (only in AES modes)
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Configure the Encrypt or Decrypt Key using CRYP_KeyInit() function 
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Configure the Initialization Vectors(IV) for CBC and CTR modes using 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      CRYP_IVInit() function.  
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Flushes the IN and OUT FIFOs : using CRYP_FIFOFlush() function.                         
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    - Enable or disable the CRYP Processor using CRYP_Cmd() function 
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Deinitializes the CRYP peripheral registers to their default reset values
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  None
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_DeInit(void)
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
  26              		.loc 1 216 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Enable CRYP reset state */
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
  38              		.loc 1 218 0
  39 0004 4FF01000 		mov	r0, #16
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Release CRYP from reset state */
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
  42              		.loc 1 221 0
  43 0010 4FF01000 		mov	r0, #16
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
  46              		.loc 1 222 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE110:
  51 001e 00BF     		.align	2
  52              		.global	CRYP_Init
  53              		.thumb
  54              		.thumb_func
  56              	CRYP_Init:
  57              	.LFB111:
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP peripheral according to the specified parameters
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         in the CRYP_InitStruct.
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP peripheral.
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
  58              		.loc 1 232 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 83B0     		sub	sp, sp, #12
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 16
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 7860     		str	r0, [r7, #4]
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Select Algorithm mode*/  
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGOMODE;
  74              		.loc 1 239 0
  75 0028 4FF00003 		mov	r3, #0
  76 002c C5F20603 		movt	r3, 20486
  77 0030 4FF00002 		mov	r2, #0
  78 0034 C5F20602 		movt	r2, 20486
  79 0038 1268     		ldr	r2, [r2, #0]
  80 003a 22F03802 		bic	r2, r2, #56
  81 003e 1A60     		str	r2, [r3, #0]
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
  82              		.loc 1 240 0
  83 0040 4FF00003 		mov	r3, #0
  84 0044 C5F20603 		movt	r3, 20486
  85 0048 4FF00002 		mov	r2, #0
  86 004c C5F20602 		movt	r2, 20486
  87 0050 1268     		ldr	r2, [r2, #0]
  88 0052 1146     		mov	r1, r2
  89 0054 7A68     		ldr	r2, [r7, #4]
  90 0056 5288     		ldrh	r2, [r2, #2]
  91 0058 0A43     		orrs	r2, r2, r1
  92 005a 1A60     		str	r2, [r3, #0]
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Select dataType */ 
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_DATATYPE;
  93              		.loc 1 243 0
  94 005c 4FF00003 		mov	r3, #0
  95 0060 C5F20603 		movt	r3, 20486
  96 0064 4FF00002 		mov	r2, #0
  97 0068 C5F20602 		movt	r2, 20486
  98 006c 1268     		ldr	r2, [r2, #0]
  99 006e 22F0C002 		bic	r2, r2, #192
 100 0072 1A60     		str	r2, [r3, #0]
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 101              		.loc 1 244 0
 102 0074 4FF00003 		mov	r3, #0
 103 0078 C5F20603 		movt	r3, 20486
 104 007c 4FF00002 		mov	r2, #0
 105 0080 C5F20602 		movt	r2, 20486
 106 0084 1268     		ldr	r2, [r2, #0]
 107 0086 1146     		mov	r1, r2
 108 0088 7A68     		ldr	r2, [r7, #4]
 109 008a 9288     		ldrh	r2, [r2, #4]
 110 008c 0A43     		orrs	r2, r2, r1
 111 008e 1A60     		str	r2, [r3, #0]
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* select Key size (used only with AES algorithm) */
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 112              		.loc 1 247 0
 113 0090 7B68     		ldr	r3, [r7, #4]
 114 0092 5B88     		ldrh	r3, [r3, #2]
 115 0094 202B     		cmp	r3, #32
 116 0096 0BD0     		beq	.L3
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 117              		.loc 1 248 0 discriminator 1
 118 0098 7B68     		ldr	r3, [r7, #4]
 119 009a 5B88     		ldrh	r3, [r3, #2]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 120              		.loc 1 247 0 discriminator 1
 121 009c 282B     		cmp	r3, #40
 122 009e 07D0     		beq	.L3
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 123              		.loc 1 249 0
 124 00a0 7B68     		ldr	r3, [r7, #4]
 125 00a2 5B88     		ldrh	r3, [r3, #2]
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 126              		.loc 1 248 0
 127 00a4 302B     		cmp	r3, #48
 128 00a6 03D0     		beq	.L3
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 129              		.loc 1 250 0
 130 00a8 7B68     		ldr	r3, [r7, #4]
 131 00aa 5B88     		ldrh	r3, [r3, #2]
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 132              		.loc 1 249 0
 133 00ac 382B     		cmp	r3, #56
 134 00ae 19D1     		bne	.L4
 135              	.L3:
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_KEYSIZE;
 136              		.loc 1 253 0
 137 00b0 4FF00003 		mov	r3, #0
 138 00b4 C5F20603 		movt	r3, 20486
 139 00b8 4FF00002 		mov	r2, #0
 140 00bc C5F20602 		movt	r2, 20486
 141 00c0 1268     		ldr	r2, [r2, #0]
 142 00c2 22F44072 		bic	r2, r2, #768
 143 00c6 1A60     		str	r2, [r3, #0]
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 144              		.loc 1 254 0
 145 00c8 4FF00003 		mov	r3, #0
 146 00cc C5F20603 		movt	r3, 20486
 147 00d0 4FF00002 		mov	r2, #0
 148 00d4 C5F20602 		movt	r2, 20486
 149 00d8 1268     		ldr	r2, [r2, #0]
 150 00da 1146     		mov	r1, r2
 151 00dc 7A68     		ldr	r2, [r7, #4]
 152 00de D288     		ldrh	r2, [r2, #6]
 153 00e0 0A43     		orrs	r2, r2, r1
 154 00e2 1A60     		str	r2, [r3, #0]
 155              	.L4:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                   configured once the key has 
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                   been prepared */
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Select data Direction */ 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGODIR;
 156              		.loc 1 260 0
 157 00e4 4FF00003 		mov	r3, #0
 158 00e8 C5F20603 		movt	r3, 20486
 159 00ec 4FF00002 		mov	r2, #0
 160 00f0 C5F20602 		movt	r2, 20486
 161 00f4 1268     		ldr	r2, [r2, #0]
 162 00f6 22F00402 		bic	r2, r2, #4
 163 00fa 1A60     		str	r2, [r3, #0]
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 164              		.loc 1 261 0
 165 00fc 4FF00003 		mov	r3, #0
 166 0100 C5F20603 		movt	r3, 20486
 167 0104 4FF00002 		mov	r2, #0
 168 0108 C5F20602 		movt	r2, 20486
 169 010c 1268     		ldr	r2, [r2, #0]
 170 010e 1146     		mov	r1, r2
 171 0110 7A68     		ldr	r2, [r7, #4]
 172 0112 1288     		ldrh	r2, [r2, #0]
 173 0114 0A43     		orrs	r2, r2, r1
 174 0116 1A60     		str	r2, [r3, #0]
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 175              		.loc 1 262 0
 176 0118 07F10C07 		add	r7, r7, #12
 177 011c BD46     		mov	sp, r7
 178 011e 80BC     		pop	{r7}
 179 0120 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE111:
 183 0122 00BF     		.align	2
 184              		.global	CRYP_StructInit
 185              		.thumb
 186              		.thumb_func
 188              	CRYP_StructInit:
 189              	.LFB112:
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_InitStruct member with its default value.
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         be initialized.
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 190              		.loc 1 271 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195 0124 80B4     		push	{r7}
 196              	.LCFI5:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 0126 83B0     		sub	sp, sp, #12
 200              	.LCFI6:
 201              		.cfi_def_cfa_offset 16
 202 0128 00AF     		add	r7, sp, #0
 203              	.LCFI7:
 204              		.cfi_def_cfa_register 7
 205 012a 7860     		str	r0, [r7, #4]
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_AlgoDir member */
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 206              		.loc 1 273 0
 207 012c 7B68     		ldr	r3, [r7, #4]
 208 012e 4FF00002 		mov	r2, #0
 209 0132 1A80     		strh	r2, [r3, #0]	@ movhi
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* initialize the CRYP_AlgoMode member */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 210              		.loc 1 276 0
 211 0134 7B68     		ldr	r3, [r7, #4]
 212 0136 4FF00002 		mov	r2, #0
 213 013a 5A80     		strh	r2, [r3, #2]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* initialize the CRYP_DataType member */
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 214              		.loc 1 279 0
 215 013c 7B68     		ldr	r3, [r7, #4]
 216 013e 4FF00002 		mov	r2, #0
 217 0142 9A80     		strh	r2, [r3, #4]	@ movhi
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_KeySize member */
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 218              		.loc 1 282 0
 219 0144 7B68     		ldr	r3, [r7, #4]
 220 0146 4FF00002 		mov	r2, #0
 221 014a DA80     		strh	r2, [r3, #6]	@ movhi
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 222              		.loc 1 283 0
 223 014c 07F10C07 		add	r7, r7, #12
 224 0150 BD46     		mov	sp, r7
 225 0152 80BC     		pop	{r7}
 226 0154 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE112:
 230 0156 00BF     		.align	2
 231              		.global	CRYP_KeyInit
 232              		.thumb
 233              		.thumb_func
 235              	CRYP_KeyInit:
 236              	.LFB113:
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Keys according to the specified parameters in
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the CRYP_KeyInitStruct.
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 237              		.loc 1 293 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 8
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0158 80B4     		push	{r7}
 243              	.LCFI8:
 244              		.cfi_def_cfa_offset 4
 245              		.cfi_offset 7, -4
 246 015a 83B0     		sub	sp, sp, #12
 247              	.LCFI9:
 248              		.cfi_def_cfa_offset 16
 249 015c 00AF     		add	r7, sp, #0
 250              	.LCFI10:
 251              		.cfi_def_cfa_register 7
 252 015e 7860     		str	r0, [r7, #4]
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Key Initialisation */
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 253              		.loc 1 295 0
 254 0160 4FF00003 		mov	r3, #0
 255 0164 C5F20603 		movt	r3, 20486
 256 0168 7A68     		ldr	r2, [r7, #4]
 257 016a 1268     		ldr	r2, [r2, #0]
 258 016c 1A62     		str	r2, [r3, #32]
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 259              		.loc 1 296 0
 260 016e 4FF00003 		mov	r3, #0
 261 0172 C5F20603 		movt	r3, 20486
 262 0176 7A68     		ldr	r2, [r7, #4]
 263 0178 5268     		ldr	r2, [r2, #4]
 264 017a 5A62     		str	r2, [r3, #36]
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 265              		.loc 1 297 0
 266 017c 4FF00003 		mov	r3, #0
 267 0180 C5F20603 		movt	r3, 20486
 268 0184 7A68     		ldr	r2, [r7, #4]
 269 0186 9268     		ldr	r2, [r2, #8]
 270 0188 9A62     		str	r2, [r3, #40]
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 271              		.loc 1 298 0
 272 018a 4FF00003 		mov	r3, #0
 273 018e C5F20603 		movt	r3, 20486
 274 0192 7A68     		ldr	r2, [r7, #4]
 275 0194 D268     		ldr	r2, [r2, #12]
 276 0196 DA62     		str	r2, [r3, #44]
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 277              		.loc 1 299 0
 278 0198 4FF00003 		mov	r3, #0
 279 019c C5F20603 		movt	r3, 20486
 280 01a0 7A68     		ldr	r2, [r7, #4]
 281 01a2 1269     		ldr	r2, [r2, #16]
 282 01a4 1A63     		str	r2, [r3, #48]
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 283              		.loc 1 300 0
 284 01a6 4FF00003 		mov	r3, #0
 285 01aa C5F20603 		movt	r3, 20486
 286 01ae 7A68     		ldr	r2, [r7, #4]
 287 01b0 5269     		ldr	r2, [r2, #20]
 288 01b2 5A63     		str	r2, [r3, #52]
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 289              		.loc 1 301 0
 290 01b4 4FF00003 		mov	r3, #0
 291 01b8 C5F20603 		movt	r3, 20486
 292 01bc 7A68     		ldr	r2, [r7, #4]
 293 01be 9269     		ldr	r2, [r2, #24]
 294 01c0 9A63     		str	r2, [r3, #56]
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 295              		.loc 1 302 0
 296 01c2 4FF00003 		mov	r3, #0
 297 01c6 C5F20603 		movt	r3, 20486
 298 01ca 7A68     		ldr	r2, [r7, #4]
 299 01cc D269     		ldr	r2, [r2, #28]
 300 01ce DA63     		str	r2, [r3, #60]
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 301              		.loc 1 303 0
 302 01d0 07F10C07 		add	r7, r7, #12
 303 01d4 BD46     		mov	sp, r7
 304 01d6 80BC     		pop	{r7}
 305 01d8 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE113:
 309 01da 00BF     		.align	2
 310              		.global	CRYP_KeyStructInit
 311              		.thumb
 312              		.thumb_func
 314              	CRYP_KeyStructInit:
 315              	.LFB114:
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_KeyInitStruct member with its default value.
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         which will be initialized.
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 316              		.loc 1 312 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 8
 319              		@ frame_needed = 1, uses_anonymous_args = 0
 320              		@ link register save eliminated.
 321 01dc 80B4     		push	{r7}
 322              	.LCFI11:
 323              		.cfi_def_cfa_offset 4
 324              		.cfi_offset 7, -4
 325 01de 83B0     		sub	sp, sp, #12
 326              	.LCFI12:
 327              		.cfi_def_cfa_offset 16
 328 01e0 00AF     		add	r7, sp, #0
 329              	.LCFI13:
 330              		.cfi_def_cfa_register 7
 331 01e2 7860     		str	r0, [r7, #4]
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 332              		.loc 1 313 0
 333 01e4 7B68     		ldr	r3, [r7, #4]
 334 01e6 4FF00002 		mov	r2, #0
 335 01ea 1A60     		str	r2, [r3, #0]
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 336              		.loc 1 314 0
 337 01ec 7B68     		ldr	r3, [r7, #4]
 338 01ee 4FF00002 		mov	r2, #0
 339 01f2 5A60     		str	r2, [r3, #4]
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 340              		.loc 1 315 0
 341 01f4 7B68     		ldr	r3, [r7, #4]
 342 01f6 4FF00002 		mov	r2, #0
 343 01fa 9A60     		str	r2, [r3, #8]
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 344              		.loc 1 316 0
 345 01fc 7B68     		ldr	r3, [r7, #4]
 346 01fe 4FF00002 		mov	r2, #0
 347 0202 DA60     		str	r2, [r3, #12]
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 348              		.loc 1 317 0
 349 0204 7B68     		ldr	r3, [r7, #4]
 350 0206 4FF00002 		mov	r2, #0
 351 020a 1A61     		str	r2, [r3, #16]
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 352              		.loc 1 318 0
 353 020c 7B68     		ldr	r3, [r7, #4]
 354 020e 4FF00002 		mov	r2, #0
 355 0212 5A61     		str	r2, [r3, #20]
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 356              		.loc 1 319 0
 357 0214 7B68     		ldr	r3, [r7, #4]
 358 0216 4FF00002 		mov	r2, #0
 359 021a 9A61     		str	r2, [r3, #24]
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 360              		.loc 1 320 0
 361 021c 7B68     		ldr	r3, [r7, #4]
 362 021e 4FF00002 		mov	r2, #0
 363 0222 DA61     		str	r2, [r3, #28]
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 364              		.loc 1 321 0
 365 0224 07F10C07 		add	r7, r7, #12
 366 0228 BD46     		mov	sp, r7
 367 022a 80BC     		pop	{r7}
 368 022c 7047     		bx	lr
 369              		.cfi_endproc
 370              	.LFE114:
 372 022e 00BF     		.align	2
 373              		.global	CRYP_IVInit
 374              		.thumb
 375              		.thumb_func
 377              	CRYP_IVInit:
 378              	.LFB115:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Initialization Vectors(IV) according to the
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         specified parameters in the CRYP_IVInitStruct.
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP Initialization Vectors(IV).
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 379              		.loc 1 330 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 8
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384 0230 80B4     		push	{r7}
 385              	.LCFI14:
 386              		.cfi_def_cfa_offset 4
 387              		.cfi_offset 7, -4
 388 0232 83B0     		sub	sp, sp, #12
 389              	.LCFI15:
 390              		.cfi_def_cfa_offset 16
 391 0234 00AF     		add	r7, sp, #0
 392              	.LCFI16:
 393              		.cfi_def_cfa_register 7
 394 0236 7860     		str	r0, [r7, #4]
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 395              		.loc 1 331 0
 396 0238 4FF00003 		mov	r3, #0
 397 023c C5F20603 		movt	r3, 20486
 398 0240 7A68     		ldr	r2, [r7, #4]
 399 0242 1268     		ldr	r2, [r2, #0]
 400 0244 1A64     		str	r2, [r3, #64]
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 401              		.loc 1 332 0
 402 0246 4FF00003 		mov	r3, #0
 403 024a C5F20603 		movt	r3, 20486
 404 024e 7A68     		ldr	r2, [r7, #4]
 405 0250 5268     		ldr	r2, [r2, #4]
 406 0252 5A64     		str	r2, [r3, #68]
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 407              		.loc 1 333 0
 408 0254 4FF00003 		mov	r3, #0
 409 0258 C5F20603 		movt	r3, 20486
 410 025c 7A68     		ldr	r2, [r7, #4]
 411 025e 9268     		ldr	r2, [r2, #8]
 412 0260 9A64     		str	r2, [r3, #72]
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 413              		.loc 1 334 0
 414 0262 4FF00003 		mov	r3, #0
 415 0266 C5F20603 		movt	r3, 20486
 416 026a 7A68     		ldr	r2, [r7, #4]
 417 026c D268     		ldr	r2, [r2, #12]
 418 026e DA64     		str	r2, [r3, #76]
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 419              		.loc 1 335 0
 420 0270 07F10C07 		add	r7, r7, #12
 421 0274 BD46     		mov	sp, r7
 422 0276 80BC     		pop	{r7}
 423 0278 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE115:
 427 027a 00BF     		.align	2
 428              		.global	CRYP_IVStructInit
 429              		.thumb
 430              		.thumb_func
 432              	CRYP_IVStructInit:
 433              	.LFB116:
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_IVInitStruct member with its default value.
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         Vectors(IV) structure which will be initialized.
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 434              		.loc 1 344 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 8
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 027c 80B4     		push	{r7}
 440              	.LCFI17:
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 027e 83B0     		sub	sp, sp, #12
 444              	.LCFI18:
 445              		.cfi_def_cfa_offset 16
 446 0280 00AF     		add	r7, sp, #0
 447              	.LCFI19:
 448              		.cfi_def_cfa_register 7
 449 0282 7860     		str	r0, [r7, #4]
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 450              		.loc 1 345 0
 451 0284 7B68     		ldr	r3, [r7, #4]
 452 0286 4FF00002 		mov	r2, #0
 453 028a 1A60     		str	r2, [r3, #0]
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Right = 0;
 454              		.loc 1 346 0
 455 028c 7B68     		ldr	r3, [r7, #4]
 456 028e 4FF00002 		mov	r2, #0
 457 0292 5A60     		str	r2, [r3, #4]
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 458              		.loc 1 347 0
 459 0294 7B68     		ldr	r3, [r7, #4]
 460 0296 4FF00002 		mov	r2, #0
 461 029a 9A60     		str	r2, [r3, #8]
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Right = 0;
 462              		.loc 1 348 0
 463 029c 7B68     		ldr	r3, [r7, #4]
 464 029e 4FF00002 		mov	r2, #0
 465 02a2 DA60     		str	r2, [r3, #12]
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 466              		.loc 1 349 0
 467 02a4 07F10C07 		add	r7, r7, #12
 468 02a8 BD46     		mov	sp, r7
 469 02aa 80BC     		pop	{r7}
 470 02ac 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE116:
 474 02ae 00BF     		.align	2
 475              		.global	CRYP_FIFOFlush
 476              		.thumb
 477              		.thumb_func
 479              	CRYP_FIFOFlush:
 480              	.LFB117:
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Flushes the IN and OUT FIFOs (that is read and write pointers of the 
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         FIFOs are reset)
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   The FIFOs must be flushed only when BUSY flag is reset.  
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  None
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_FIFOFlush(void)
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 481              		.loc 1 359 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 486 02b0 80B4     		push	{r7}
 487              	.LCFI20:
 488              		.cfi_def_cfa_offset 4
 489              		.cfi_offset 7, -4
 490 02b2 00AF     		add	r7, sp, #0
 491              	.LCFI21:
 492              		.cfi_def_cfa_register 7
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Reset the read and write pointers of the FIFOs */
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_FFLUSH;
 493              		.loc 1 361 0
 494 02b4 4FF00003 		mov	r3, #0
 495 02b8 C5F20603 		movt	r3, 20486
 496 02bc 4FF00002 		mov	r2, #0
 497 02c0 C5F20602 		movt	r2, 20486
 498 02c4 1268     		ldr	r2, [r2, #0]
 499 02c6 42F48042 		orr	r2, r2, #16384
 500 02ca 1A60     		str	r2, [r3, #0]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 501              		.loc 1 362 0
 502 02cc BD46     		mov	sp, r7
 503 02ce 80BC     		pop	{r7}
 504 02d0 7047     		bx	lr
 505              		.cfi_endproc
 506              	.LFE117:
 508 02d2 00BF     		.align	2
 509              		.global	CRYP_Cmd
 510              		.thumb
 511              		.thumb_func
 513              	CRYP_Cmd:
 514              	.LFB118:
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP peripheral.
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the CRYP peripheral.
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_Cmd(FunctionalState NewState)
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 515              		.loc 1 371 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 8
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520 02d4 80B4     		push	{r7}
 521              	.LCFI22:
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 02d6 83B0     		sub	sp, sp, #12
 525              	.LCFI23:
 526              		.cfi_def_cfa_offset 16
 527 02d8 00AF     		add	r7, sp, #0
 528              	.LCFI24:
 529              		.cfi_def_cfa_register 7
 530 02da 0346     		mov	r3, r0
 531 02dc FB71     		strb	r3, [r7, #7]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 532              		.loc 1 375 0
 533 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 534 02e0 002B     		cmp	r3, #0
 535 02e2 0CD0     		beq	.L12
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Enable the Cryptographic processor */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_CR_CRYPEN;
 536              		.loc 1 378 0
 537 02e4 4FF00003 		mov	r3, #0
 538 02e8 C5F20603 		movt	r3, 20486
 539 02ec 4FF00002 		mov	r2, #0
 540 02f0 C5F20602 		movt	r2, 20486
 541 02f4 1268     		ldr	r2, [r2, #0]
 542 02f6 42F40042 		orr	r2, r2, #32768
 543 02fa 1A60     		str	r2, [r3, #0]
 544 02fc 0BE0     		b	.L11
 545              	.L12:
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Disable the Cryptographic processor */
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_CRYPEN;
 546              		.loc 1 383 0
 547 02fe 4FF00003 		mov	r3, #0
 548 0302 C5F20603 		movt	r3, 20486
 549 0306 4FF00002 		mov	r2, #0
 550 030a C5F20602 		movt	r2, 20486
 551 030e 1268     		ldr	r2, [r2, #0]
 552 0310 22F40042 		bic	r2, r2, #32768
 553 0314 1A60     		str	r2, [r3, #0]
 554              	.L11:
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 555              		.loc 1 385 0
 556 0316 07F10C07 		add	r7, r7, #12
 557 031a BD46     		mov	sp, r7
 558 031c 80BC     		pop	{r7}
 559 031e 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE118:
 563              		.align	2
 564              		.global	CRYP_DataIn
 565              		.thumb
 566              		.thumb_func
 568              	CRYP_DataIn:
 569              	.LFB119:
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group2 CRYP Data processing functions
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief    CRYP Data processing functions
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim    
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       CRYP Data processing functions
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing the encryption and decryption 
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   operations: 
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - Enter data to be treated in the IN FIFO : using CRYP_DataIn() function.
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - Get the data result from the OUT FIFO : using CRYP_DataOut() function.
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Writes data in the Data Input register (DIN).
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   After the DIN register has been read once or several times, 
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  Data: data to write in Data Input register
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_DataIn(uint32_t Data)
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 570              		.loc 1 414 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 8
 573              		@ frame_needed = 1, uses_anonymous_args = 0
 574              		@ link register save eliminated.
 575 0320 80B4     		push	{r7}
 576              	.LCFI25:
 577              		.cfi_def_cfa_offset 4
 578              		.cfi_offset 7, -4
 579 0322 83B0     		sub	sp, sp, #12
 580              	.LCFI26:
 581              		.cfi_def_cfa_offset 16
 582 0324 00AF     		add	r7, sp, #0
 583              	.LCFI27:
 584              		.cfi_def_cfa_register 7
 585 0326 7860     		str	r0, [r7, #4]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->DR = Data;
 586              		.loc 1 415 0
 587 0328 4FF00003 		mov	r3, #0
 588 032c C5F20603 		movt	r3, 20486
 589 0330 7A68     		ldr	r2, [r7, #4]
 590 0332 9A60     		str	r2, [r3, #8]
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 591              		.loc 1 416 0
 592 0334 07F10C07 		add	r7, r7, #12
 593 0338 BD46     		mov	sp, r7
 594 033a 80BC     		pop	{r7}
 595 033c 7047     		bx	lr
 596              		.cfi_endproc
 597              	.LFE119:
 599 033e 00BF     		.align	2
 600              		.global	CRYP_DataOut
 601              		.thumb
 602              		.thumb_func
 604              	CRYP_DataOut:
 605              	.LFB120:
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Returns the last data entered into the output FIFO.
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  None
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval Last data entered into the output FIFO.
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** uint32_t CRYP_DataOut(void)
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 606              		.loc 1 424 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610              		@ link register save eliminated.
 611 0340 80B4     		push	{r7}
 612              	.LCFI28:
 613              		.cfi_def_cfa_offset 4
 614              		.cfi_offset 7, -4
 615 0342 00AF     		add	r7, sp, #0
 616              	.LCFI29:
 617              		.cfi_def_cfa_register 7
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   return CRYP->DOUT;
 618              		.loc 1 425 0
 619 0344 4FF00003 		mov	r3, #0
 620 0348 C5F20603 		movt	r3, 20486
 621 034c DB68     		ldr	r3, [r3, #12]
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 622              		.loc 1 426 0
 623 034e 1846     		mov	r0, r3
 624 0350 BD46     		mov	sp, r7
 625 0352 80BC     		pop	{r7}
 626 0354 7047     		bx	lr
 627              		.cfi_endproc
 628              	.LFE120:
 630 0356 00BF     		.align	2
 631              		.global	CRYP_SaveContext
 632              		.thumb
 633              		.thumb_func
 635              	CRYP_SaveContext:
 636              	.LFB121:
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group3 Context swapping functions
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief   Context swapping functions
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim   
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                              Context swapping functions
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to save and store CRYP Context
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   It is possible to interrupt an encryption/ decryption/ key generation process 
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   to perform another processing with a higher priority, and to complete the 
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   interrupted process later on, when the higher-priority task is complete. To do 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   so, the context of the interrupted task must be saved from the CRYP registers 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   to memory, and then be restored from memory to the CRYP registers.
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   1. To save the current context, use CRYP_SaveContext() function
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   2. To restore the saved context, use CRYP_RestoreContext() function 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Saves the CRYP peripheral Context. 
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   This function stops DMA transfer before to save the context. After 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         restoring the context, you have to enable the DMA again (if the DMA
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         was previously used).
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextSave: pointer to a CRYP_Context structure that contains
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the repository for current context.
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.  
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                              CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 637              		.loc 1 468 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 24
 640              		@ frame_needed = 1, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642 0358 80B4     		push	{r7}
 643              	.LCFI30:
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 035a 87B0     		sub	sp, sp, #28
 647              	.LCFI31:
 648              		.cfi_def_cfa_offset 32
 649 035c 00AF     		add	r7, sp, #0
 650              	.LCFI32:
 651              		.cfi_def_cfa_register 7
 652 035e 7860     		str	r0, [r7, #4]
 653 0360 3960     		str	r1, [r7, #0]
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   __IO uint32_t timeout = 0;
 654              		.loc 1 469 0
 655 0362 4FF00003 		mov	r3, #0
 656 0366 BB60     		str	r3, [r7, #8]
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   uint32_t ckeckmask = 0, bitstatus;    
 657              		.loc 1 470 0
 658 0368 4FF00003 		mov	r3, #0
 659 036c 7B61     		str	r3, [r7, #20]
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ErrorStatus status = ERROR;
 660              		.loc 1 471 0
 661 036e 4FF00003 		mov	r3, #0
 662 0372 FB74     		strb	r3, [r7, #19]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 663              		.loc 1 474 0
 664 0374 4FF00003 		mov	r3, #0
 665 0378 C5F20603 		movt	r3, 20486
 666 037c 4FF00002 		mov	r2, #0
 667 0380 C5F20602 		movt	r2, 20486
 668 0384 1269     		ldr	r2, [r2, #16]
 669 0386 22F00102 		bic	r2, r2, #1
 670 038a 1A61     		str	r2, [r3, #16]
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Wait until both the IN and OUT FIFOs are empty  
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      BUSY bit is cleared. */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0
 671              		.loc 1 480 0
 672 038c 4FF00003 		mov	r3, #0
 673 0390 C5F20603 		movt	r3, 20486
 674 0394 1B68     		ldr	r3, [r3, #0]
 675 0396 03F00803 		and	r3, r3, #8
 676 039a 002B     		cmp	r3, #0
 677 039c 03D0     		beq	.L17
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   { 
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 678              		.loc 1 482 0
 679 039e 4FF01103 		mov	r3, #17
 680 03a2 7B61     		str	r3, [r7, #20]
 681 03a4 02E0     		b	.L18
 682              	.L17:
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else /* AES or DES */
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 683              		.loc 1 486 0
 684 03a6 4FF01503 		mov	r3, #21
 685 03aa 7B61     		str	r3, [r7, #20]
 686              	.L18:
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }           
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   do 
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = CRYP->SR & ckeckmask;
 687              		.loc 1 491 0 discriminator 1
 688 03ac 4FF00003 		mov	r3, #0
 689 03b0 C5F20603 		movt	r3, 20486
 690 03b4 5B68     		ldr	r3, [r3, #4]
 691 03b6 1A46     		mov	r2, r3
 692 03b8 7B69     		ldr	r3, [r7, #20]
 693 03ba 1340     		ands	r3, r3, r2
 694 03bc FB60     		str	r3, [r7, #12]
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     timeout++;
 695              		.loc 1 492 0 discriminator 1
 696 03be BB68     		ldr	r3, [r7, #8]
 697 03c0 03F10103 		add	r3, r3, #1
 698 03c4 BB60     		str	r3, [r7, #8]
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 699              		.loc 1 494 0 discriminator 1
 700 03c6 BA68     		ldr	r2, [r7, #8]
 701 03c8 4FF6FF73 		movw	r3, #65535
 702 03cc 9A42     		cmp	r2, r3
 703 03ce 02D0     		beq	.L19
 704 03d0 FB68     		ldr	r3, [r7, #12]
 705 03d2 012B     		cmp	r3, #1
 706 03d4 EAD1     		bne	.L18
 707              	.L19:
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 708              		.loc 1 496 0
 709 03d6 4FF00003 		mov	r3, #0
 710 03da C5F20603 		movt	r3, 20486
 711 03de 5B68     		ldr	r3, [r3, #4]
 712 03e0 1A46     		mov	r2, r3
 713 03e2 7B69     		ldr	r3, [r7, #20]
 714 03e4 1340     		ands	r3, r3, r2
 715 03e6 012B     		cmp	r3, #1
 716 03e8 03D0     		beq	.L20
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     status = ERROR;
 717              		.loc 1 498 0
 718 03ea 4FF00003 		mov	r3, #0
 719 03ee FB74     		strb	r3, [r7, #19]
 720 03f0 63E0     		b	.L21
 721              	.L20:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {      
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Stop DMA transfers on the OUT FIFO by 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****        - writing the DOEN bit to 0 in the CRYP_DMACR register 
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****        - and clear the CRYPEN bit. */
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 722              		.loc 1 506 0
 723 03f2 4FF00003 		mov	r3, #0
 724 03f6 C5F20603 		movt	r3, 20486
 725 03fa 4FF00002 		mov	r2, #0
 726 03fe C5F20602 		movt	r2, 20486
 727 0402 1269     		ldr	r2, [r2, #16]
 728 0404 22F00202 		bic	r2, r2, #2
 729 0408 1A61     		str	r2, [r3, #16]
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 730              		.loc 1 507 0
 731 040a 4FF00003 		mov	r3, #0
 732 040e C5F20603 		movt	r3, 20486
 733 0412 4FF00002 		mov	r2, #0
 734 0416 C5F20602 		movt	r2, 20486
 735 041a 1268     		ldr	r2, [r2, #0]
 736 041c 22F40042 		bic	r2, r2, #32768
 737 0420 1A60     		str	r2, [r3, #0]
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 738              		.loc 1 510 0
 739 0422 4FF00003 		mov	r3, #0
 740 0426 C5F20603 		movt	r3, 20486
 741 042a 1B68     		ldr	r3, [r3, #0]
 742 042c 03F47F72 		and	r2, r3, #1020
 743 0430 7B68     		ldr	r3, [r7, #4]
 744 0432 1A60     		str	r2, [r3, #0]
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                  CRYP_CR_DATATYPE | 
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                  CRYP_CR_ALGOMODE |
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                                  CRYP_CR_ALGODIR); 
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* and, if not in ECB mode, the initialization vectors. */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 745              		.loc 1 516 0
 746 0434 4FF00003 		mov	r3, #0
 747 0438 C5F20603 		movt	r3, 20486
 748 043c 1B6C     		ldr	r3, [r3, #64]
 749 043e 1A46     		mov	r2, r3
 750 0440 7B68     		ldr	r3, [r7, #4]
 751 0442 5A60     		str	r2, [r3, #4]
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 752              		.loc 1 517 0
 753 0444 4FF00003 		mov	r3, #0
 754 0448 C5F20603 		movt	r3, 20486
 755 044c 5B6C     		ldr	r3, [r3, #68]
 756 044e 1A46     		mov	r2, r3
 757 0450 7B68     		ldr	r3, [r7, #4]
 758 0452 9A60     		str	r2, [r3, #8]
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 759              		.loc 1 518 0
 760 0454 4FF00003 		mov	r3, #0
 761 0458 C5F20603 		movt	r3, 20486
 762 045c 9B6C     		ldr	r3, [r3, #72]
 763 045e 1A46     		mov	r2, r3
 764 0460 7B68     		ldr	r3, [r7, #4]
 765 0462 DA60     		str	r2, [r3, #12]
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 766              		.loc 1 519 0
 767 0464 4FF00003 		mov	r3, #0
 768 0468 C5F20603 		movt	r3, 20486
 769 046c DB6C     		ldr	r3, [r3, #76]
 770 046e 1A46     		mov	r2, r3
 771 0470 7B68     		ldr	r3, [r7, #4]
 772 0472 1A61     		str	r2, [r3, #16]
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* save The key value */
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 773              		.loc 1 522 0
 774 0474 3B68     		ldr	r3, [r7, #0]
 775 0476 1A68     		ldr	r2, [r3, #0]
 776 0478 7B68     		ldr	r3, [r7, #4]
 777 047a 5A61     		str	r2, [r3, #20]
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 778              		.loc 1 523 0
 779 047c 3B68     		ldr	r3, [r7, #0]
 780 047e 5A68     		ldr	r2, [r3, #4]
 781 0480 7B68     		ldr	r3, [r7, #4]
 782 0482 9A61     		str	r2, [r3, #24]
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 783              		.loc 1 524 0
 784 0484 3B68     		ldr	r3, [r7, #0]
 785 0486 9A68     		ldr	r2, [r3, #8]
 786 0488 7B68     		ldr	r3, [r7, #4]
 787 048a DA61     		str	r2, [r3, #28]
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 788              		.loc 1 525 0
 789 048c 3B68     		ldr	r3, [r7, #0]
 790 048e DA68     		ldr	r2, [r3, #12]
 791 0490 7B68     		ldr	r3, [r7, #4]
 792 0492 1A62     		str	r2, [r3, #32]
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 793              		.loc 1 526 0
 794 0494 3B68     		ldr	r3, [r7, #0]
 795 0496 1A69     		ldr	r2, [r3, #16]
 796 0498 7B68     		ldr	r3, [r7, #4]
 797 049a 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 798              		.loc 1 527 0
 799 049c 3B68     		ldr	r3, [r7, #0]
 800 049e 5A69     		ldr	r2, [r3, #20]
 801 04a0 7B68     		ldr	r3, [r7, #4]
 802 04a2 9A62     		str	r2, [r3, #40]
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 803              		.loc 1 528 0
 804 04a4 3B68     		ldr	r3, [r7, #0]
 805 04a6 9A69     		ldr	r2, [r3, #24]
 806 04a8 7B68     		ldr	r3, [r7, #4]
 807 04aa DA62     		str	r2, [r3, #44]
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 808              		.loc 1 529 0
 809 04ac 3B68     		ldr	r3, [r7, #0]
 810 04ae DA69     		ldr	r2, [r3, #28]
 811 04b0 7B68     		ldr	r3, [r7, #4]
 812 04b2 1A63     		str	r2, [r3, #48]
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    /* When needed, save the DMA status (pointers for IN and OUT messages, 
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       number of remaining bytes, etc.) */
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     status = SUCCESS;
 813              		.loc 1 534 0
 814 04b4 4FF00103 		mov	r3, #1
 815 04b8 FB74     		strb	r3, [r7, #19]
 816              	.L21:
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    return status;
 817              		.loc 1 537 0
 818 04ba FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 819              		.loc 1 538 0
 820 04bc 1846     		mov	r0, r3
 821 04be 07F11C07 		add	r7, r7, #28
 822 04c2 BD46     		mov	sp, r7
 823 04c4 80BC     		pop	{r7}
 824 04c6 7047     		bx	lr
 825              		.cfi_endproc
 826              	.LFE121:
 828              		.align	2
 829              		.global	CRYP_RestoreContext
 830              		.thumb
 831              		.thumb_func
 833              	CRYP_RestoreContext:
 834              	.LFB122:
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Restores the CRYP peripheral Context.
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   Since teh DMA transfer is stopped in CRYP_SaveContext() function,
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         after restoring the context, you have to enable the DMA again (if the
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         DMA was previously used).  
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextRestore: pointer to a CRYP_Context structure that contains
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the repository for saved context.
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   The data that were saved during context saving must be rewrited into
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         the IN FIFO.
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 835              		.loc 1 552 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 8
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840 04c8 80B4     		push	{r7}
 841              	.LCFI33:
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 7, -4
 844 04ca 83B0     		sub	sp, sp, #12
 845              	.LCFI34:
 846              		.cfi_def_cfa_offset 16
 847 04cc 00AF     		add	r7, sp, #0
 848              	.LCFI35:
 849              		.cfi_def_cfa_register 7
 850 04ce 7860     		str	r0, [r7, #4]
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Configure the processor with the saved configuration */
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 851              		.loc 1 555 0
 852 04d0 4FF00003 		mov	r3, #0
 853 04d4 C5F20603 		movt	r3, 20486
 854 04d8 7A68     		ldr	r2, [r7, #4]
 855 04da 1268     		ldr	r2, [r2, #0]
 856 04dc 1A60     		str	r2, [r3, #0]
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* restore The key value */
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 857              		.loc 1 558 0
 858 04de 4FF00003 		mov	r3, #0
 859 04e2 C5F20603 		movt	r3, 20486
 860 04e6 7A68     		ldr	r2, [r7, #4]
 861 04e8 5269     		ldr	r2, [r2, #20]
 862 04ea 1A62     		str	r2, [r3, #32]
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 863              		.loc 1 559 0
 864 04ec 4FF00003 		mov	r3, #0
 865 04f0 C5F20603 		movt	r3, 20486
 866 04f4 7A68     		ldr	r2, [r7, #4]
 867 04f6 9269     		ldr	r2, [r2, #24]
 868 04f8 5A62     		str	r2, [r3, #36]
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 869              		.loc 1 560 0
 870 04fa 4FF00003 		mov	r3, #0
 871 04fe C5F20603 		movt	r3, 20486
 872 0502 7A68     		ldr	r2, [r7, #4]
 873 0504 D269     		ldr	r2, [r2, #28]
 874 0506 9A62     		str	r2, [r3, #40]
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 875              		.loc 1 561 0
 876 0508 4FF00003 		mov	r3, #0
 877 050c C5F20603 		movt	r3, 20486
 878 0510 7A68     		ldr	r2, [r7, #4]
 879 0512 126A     		ldr	r2, [r2, #32]
 880 0514 DA62     		str	r2, [r3, #44]
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 881              		.loc 1 562 0
 882 0516 4FF00003 		mov	r3, #0
 883 051a C5F20603 		movt	r3, 20486
 884 051e 7A68     		ldr	r2, [r7, #4]
 885 0520 526A     		ldr	r2, [r2, #36]
 886 0522 1A63     		str	r2, [r3, #48]
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 887              		.loc 1 563 0
 888 0524 4FF00003 		mov	r3, #0
 889 0528 C5F20603 		movt	r3, 20486
 890 052c 7A68     		ldr	r2, [r7, #4]
 891 052e 926A     		ldr	r2, [r2, #40]
 892 0530 5A63     		str	r2, [r3, #52]
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 893              		.loc 1 564 0
 894 0532 4FF00003 		mov	r3, #0
 895 0536 C5F20603 		movt	r3, 20486
 896 053a 7A68     		ldr	r2, [r7, #4]
 897 053c D26A     		ldr	r2, [r2, #44]
 898 053e 9A63     		str	r2, [r3, #56]
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 899              		.loc 1 565 0
 900 0540 4FF00003 		mov	r3, #0
 901 0544 C5F20603 		movt	r3, 20486
 902 0548 7A68     		ldr	r2, [r7, #4]
 903 054a 126B     		ldr	r2, [r2, #48]
 904 054c DA63     		str	r2, [r3, #60]
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* and the initialization vectors. */
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 905              		.loc 1 568 0
 906 054e 4FF00003 		mov	r3, #0
 907 0552 C5F20603 		movt	r3, 20486
 908 0556 7A68     		ldr	r2, [r7, #4]
 909 0558 5268     		ldr	r2, [r2, #4]
 910 055a 1A64     		str	r2, [r3, #64]
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 911              		.loc 1 569 0
 912 055c 4FF00003 		mov	r3, #0
 913 0560 C5F20603 		movt	r3, 20486
 914 0564 7A68     		ldr	r2, [r7, #4]
 915 0566 9268     		ldr	r2, [r2, #8]
 916 0568 5A64     		str	r2, [r3, #68]
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 917              		.loc 1 570 0
 918 056a 4FF00003 		mov	r3, #0
 919 056e C5F20603 		movt	r3, 20486
 920 0572 7A68     		ldr	r2, [r7, #4]
 921 0574 D268     		ldr	r2, [r2, #12]
 922 0576 9A64     		str	r2, [r3, #72]
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 923              		.loc 1 571 0
 924 0578 4FF00003 		mov	r3, #0
 925 057c C5F20603 		movt	r3, 20486
 926 0580 7A68     		ldr	r2, [r7, #4]
 927 0582 1269     		ldr	r2, [r2, #16]
 928 0584 DA64     		str	r2, [r3, #76]
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Enable the cryptographic processor */
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_CRYPEN;
 929              		.loc 1 574 0
 930 0586 4FF00003 		mov	r3, #0
 931 058a C5F20603 		movt	r3, 20486
 932 058e 4FF00002 		mov	r2, #0
 933 0592 C5F20602 		movt	r2, 20486
 934 0596 1268     		ldr	r2, [r2, #0]
 935 0598 42F40042 		orr	r2, r2, #32768
 936 059c 1A60     		str	r2, [r3, #0]
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 937              		.loc 1 575 0
 938 059e 07F10C07 		add	r7, r7, #12
 939 05a2 BD46     		mov	sp, r7
 940 05a4 80BC     		pop	{r7}
 941 05a6 7047     		bx	lr
 942              		.cfi_endproc
 943              	.LFE122:
 945              		.align	2
 946              		.global	CRYP_DMACmd
 947              		.thumb
 948              		.thumb_func
 950              	CRYP_DMACmd:
 951              	.LFB123:
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group4 CRYP's DMA interface Configuration function
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief   CRYP's DMA interface Configuration function 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim   
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                    CRYP's DMA interface Configuration function
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to configure the DMA interface for 
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   CRYP data input and output transfer.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   When the DMA mode is enabled (using the CRYP_DMACmd() function), data can be 
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   transferred:
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - From memory to the CRYP IN FIFO using the DMA peripheral by enabling 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     the CRYP_DMAReq_DataIN request.
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   - From the CRYP OUT FIFO to the memory using the DMA peripheral by enabling 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     the CRYP_DMAReq_DataOUT request.
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP DMA interface.
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_DMAReq: specifies the CRYP DMA transfer request to be enabled or disabled.
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           This parameter can be any combination of the following values:
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataOUT: DMA for outgoing(Tx) data transfer
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataIN: DMA for incoming(Rx) data transfer
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the selected CRYP DMA transfer request.
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 952              		.loc 1 613 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 8
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957 05a8 80B4     		push	{r7}
 958              	.LCFI36:
 959              		.cfi_def_cfa_offset 4
 960              		.cfi_offset 7, -4
 961 05aa 83B0     		sub	sp, sp, #12
 962              	.LCFI37:
 963              		.cfi_def_cfa_offset 16
 964 05ac 00AF     		add	r7, sp, #0
 965              	.LCFI38:
 966              		.cfi_def_cfa_register 7
 967 05ae 0246     		mov	r2, r0
 968 05b0 0B46     		mov	r3, r1
 969 05b2 FA71     		strb	r2, [r7, #7]
 970 05b4 BB71     		strb	r3, [r7, #6]
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 971              		.loc 1 618 0
 972 05b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 973 05b8 002B     		cmp	r3, #0
 974 05ba 0DD0     		beq	.L24
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP DMA request */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->DMACR |= CRYP_DMAReq;
 975              		.loc 1 621 0
 976 05bc 4FF00003 		mov	r3, #0
 977 05c0 C5F20603 		movt	r3, 20486
 978 05c4 4FF00002 		mov	r2, #0
 979 05c8 C5F20602 		movt	r2, 20486
 980 05cc 1269     		ldr	r2, [r2, #16]
 981 05ce 1146     		mov	r1, r2
 982 05d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 983 05d2 0A43     		orrs	r2, r2, r1
 984 05d4 1A61     		str	r2, [r3, #16]
 985 05d6 0FE0     		b	.L23
 986              	.L24:
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP DMA request */
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 987              		.loc 1 626 0
 988 05d8 4FF00003 		mov	r3, #0
 989 05dc C5F20603 		movt	r3, 20486
 990 05e0 4FF00002 		mov	r2, #0
 991 05e4 C5F20602 		movt	r2, 20486
 992 05e8 1269     		ldr	r2, [r2, #16]
 993 05ea 1146     		mov	r1, r2
 994 05ec FA79     		ldrb	r2, [r7, #7]
 995 05ee 6FEA0202 		mvn	r2, r2
 996 05f2 D2B2     		uxtb	r2, r2
 997 05f4 0A40     		ands	r2, r2, r1
 998 05f6 1A61     		str	r2, [r3, #16]
 999              	.L23:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1000              		.loc 1 628 0
 1001 05f8 07F10C07 		add	r7, r7, #12
 1002 05fc BD46     		mov	sp, r7
 1003 05fe 80BC     		pop	{r7}
 1004 0600 7047     		bx	lr
 1005              		.cfi_endproc
 1006              	.LFE123:
 1008 0602 00BF     		.align	2
 1009              		.global	CRYP_ITConfig
 1010              		.thumb
 1011              		.thumb_func
 1013              	CRYP_ITConfig:
 1014              	.LFB124:
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @}
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group5 Interrupts and flags management functions
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *  @brief   Interrupts and flags management functions
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  *
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @verbatim   
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                    Interrupts and flags management functions
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****  ===============================================================================  
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   This section provides functions allowing to configure the CRYP Interrupts and 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   to get the status and Interrupts pending bits.
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   The CRYP provides 2 Interrupts sources and 7 Flags:
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   Flags :
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ------- 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                           
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      1. CRYP_FLAG_IFEM :  Set when Input FIFO is empty.
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                           This Flag is cleared only by hardware.
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      2. CRYP_FLAG_IFNF :  Set when Input FIFO is not full.
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                           This Flag is cleared only by hardware.
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      3. CRYP_FLAG_INRIS  : Set when Input FIFO Raw interrupt is pending 
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            it gives the raw interrupt state prior to masking 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            of the input FIFO service interrupt.
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      4. CRYP_FLAG_OFNE   : Set when Output FIFO not empty.
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****         
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      5. CRYP_FLAG_OFFU   : Set when Output FIFO is full.
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      6. CRYP_FLAG_OUTRIS : Set when Output FIFO Raw interrupt is pending 
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            it gives the raw interrupt state prior to masking 
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            of the output FIFO service interrupt.
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                                
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****      7. CRYP_FLAG_BUSY   : Set when the CRYP core is currently processing a 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            block of data or a key preparation (for AES 
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            decryption).
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            This Flag is cleared only by hardware.
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            To clear it, the CRYP core must be disabled and the 
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                            last processing has completed. 
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   Interrupts :
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ------------
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    1. CRYP_IT_INI   : The input FIFO service interrupt is asserted when there 
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       are less than 4 words in the input FIFO.
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       This interrupt is associated to CRYP_FLAG_INRIS flag.
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 @note This interrupt is cleared by performing write operations 
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       to the input FIFO until it holds 4 or more words. The 
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       input FIFO service interrupt INMIS is enabled with the 
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       CRYP enable bit. Consequently, when CRYP is disabled, the 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       INMIS signal is low even if the input FIFO is empty.
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****    2. CRYP_IT_OUTI  : The output FIFO service interrupt is asserted when there 
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       is one or more (32-bit word) data items in the output FIFO.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       This interrupt is associated to CRYP_FLAG_OUTRIS flag.
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                 @note This interrupt is cleared by reading data from the output 
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       FIFO until there is no valid (32-bit) word left (that is, 
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       the interrupt follows the state of the OFNE (output FIFO 
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****                       not empty) flag).
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   Managing the CRYP controller events :
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ------------------------------------ 
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   The user should identify which mode will be used in his application to manage 
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   the CRYP controller events: Polling mode or Interrupt mode.
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   1.  In the Polling Mode it is advised to use the following functions:
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - CRYP_GetFlagStatus() : to check if flags events occur. 
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   @note  The CRYPT flags do not need to be cleared since they are cleared as 
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****          soon as the associated event are reset.   
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - CRYP_ITConfig()       : to enable or disable the interrupt source.
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****       - CRYP_GetITStatus()    : to check if Interrupt occurs.
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   @note  The CRYPT interrupts have no pending bits, the interrupt is cleared as 
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****          soon as the associated event is reset. 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** @endverbatim
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @{
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */ 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the specified CRYP interrupts.
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP interrupt source to be enabled or disabled.
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be any combination of the following values:
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the specified CRYP interrupt.
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           This parameter can be: ENABLE or DISABLE.
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval None
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 1015              		.loc 1 738 0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 8
 1018              		@ frame_needed = 1, uses_anonymous_args = 0
 1019              		@ link register save eliminated.
 1020 0604 80B4     		push	{r7}
 1021              	.LCFI39:
 1022              		.cfi_def_cfa_offset 4
 1023              		.cfi_offset 7, -4
 1024 0606 83B0     		sub	sp, sp, #12
 1025              	.LCFI40:
 1026              		.cfi_def_cfa_offset 16
 1027 0608 00AF     		add	r7, sp, #0
 1028              	.LCFI41:
 1029              		.cfi_def_cfa_register 7
 1030 060a 0246     		mov	r2, r0
 1031 060c 0B46     		mov	r3, r1
 1032 060e FA71     		strb	r2, [r7, #7]
 1033 0610 BB71     		strb	r3, [r7, #6]
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 1034              		.loc 1 743 0
 1035 0612 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1036 0614 002B     		cmp	r3, #0
 1037 0616 0DD0     		beq	.L27
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP interrupt */
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->IMSCR |= CRYP_IT;
 1038              		.loc 1 746 0
 1039 0618 4FF00003 		mov	r3, #0
 1040 061c C5F20603 		movt	r3, 20486
 1041 0620 4FF00002 		mov	r2, #0
 1042 0624 C5F20602 		movt	r2, 20486
 1043 0628 5269     		ldr	r2, [r2, #20]
 1044 062a 1146     		mov	r1, r2
 1045 062c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1046 062e 0A43     		orrs	r2, r2, r1
 1047 0630 5A61     		str	r2, [r3, #20]
 1048 0632 0FE0     		b	.L26
 1049              	.L27:
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP interrupt */
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 1050              		.loc 1 751 0
 1051 0634 4FF00003 		mov	r3, #0
 1052 0638 C5F20603 		movt	r3, 20486
 1053 063c 4FF00002 		mov	r2, #0
 1054 0640 C5F20602 		movt	r2, 20486
 1055 0644 5269     		ldr	r2, [r2, #20]
 1056 0646 1146     		mov	r1, r2
 1057 0648 FA79     		ldrb	r2, [r7, #7]
 1058 064a 6FEA0202 		mvn	r2, r2
 1059 064e D2B2     		uxtb	r2, r2
 1060 0650 0A40     		ands	r2, r2, r1
 1061 0652 5A61     		str	r2, [r3, #20]
 1062              	.L26:
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1063              		.loc 1 753 0
 1064 0654 07F10C07 		add	r7, r7, #12
 1065 0658 BD46     		mov	sp, r7
 1066 065a 80BC     		pop	{r7}
 1067 065c 7047     		bx	lr
 1068              		.cfi_endproc
 1069              	.LFE124:
 1071 065e 00BF     		.align	2
 1072              		.global	CRYP_GetITStatus
 1073              		.thumb
 1074              		.thumb_func
 1076              	CRYP_GetITStatus:
 1077              	.LFB125:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP interrupt has occurred or not.
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @note   This function checks the status of the masked interrupt (i.e the 
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *         interrupt should be previously enabled).     
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP (masked) interrupt source to check.
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *           This parameter can be one of the following values:
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_IT (SET or RESET).
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 1078              		.loc 1 766 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 16
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 1083 0660 80B4     		push	{r7}
 1084              	.LCFI42:
 1085              		.cfi_def_cfa_offset 4
 1086              		.cfi_offset 7, -4
 1087 0662 85B0     		sub	sp, sp, #20
 1088              	.LCFI43:
 1089              		.cfi_def_cfa_offset 24
 1090 0664 00AF     		add	r7, sp, #0
 1091              	.LCFI44:
 1092              		.cfi_def_cfa_register 7
 1093 0666 0346     		mov	r3, r0
 1094 0668 FB71     		strb	r3, [r7, #7]
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   ITStatus bitstatus = RESET;
 1095              		.loc 1 767 0
 1096 066a 4FF00003 		mov	r3, #0
 1097 066e FB73     		strb	r3, [r7, #15]
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_IT(CRYP_IT));
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP interrupt */
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 1098              		.loc 1 772 0
 1099 0670 4FF00003 		mov	r3, #0
 1100 0674 C5F20603 		movt	r3, 20486
 1101 0678 DB69     		ldr	r3, [r3, #28]
 1102 067a 1A46     		mov	r2, r3
 1103 067c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1104 067e 1340     		ands	r3, r3, r2
 1105 0680 002B     		cmp	r3, #0
 1106 0682 03D0     		beq	.L30
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_IT is set */
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = SET;
 1107              		.loc 1 775 0
 1108 0684 4FF00103 		mov	r3, #1
 1109 0688 FB73     		strb	r3, [r7, #15]
 1110 068a 02E0     		b	.L31
 1111              	.L30:
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_IT is reset */
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 1112              		.loc 1 780 0
 1113 068c 4FF00003 		mov	r3, #0
 1114 0690 FB73     		strb	r3, [r7, #15]
 1115              	.L31:
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Return the CRYP_IT status */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   return bitstatus;
 1116              		.loc 1 783 0
 1117 0692 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1118              		.loc 1 784 0
 1119 0694 1846     		mov	r0, r3
 1120 0696 07F11407 		add	r7, r7, #20
 1121 069a BD46     		mov	sp, r7
 1122 069c 80BC     		pop	{r7}
 1123 069e 7047     		bx	lr
 1124              		.cfi_endproc
 1125              	.LFE125:
 1127              		.align	2
 1128              		.global	CRYP_GetFlagStatus
 1129              		.thumb
 1130              		.thumb_func
 1132              	CRYP_GetFlagStatus:
 1133              	.LFB126:
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** /**
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP flag is set or not.
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @param  CRYP_FLAG: specifies the CRYP flag to check.
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *          This parameter can be one of the following values:
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFEM: Input FIFO Empty flag.
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFNF: Input FIFO Not Full flag.
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFNE: Output FIFO Not Empty flag.
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFFU: Output FIFO Full flag.
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_BUSY: Busy flag.
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_FLAG (SET or RESET).
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   */
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** {
 1134              		.loc 1 800 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 16
 1137              		@ frame_needed = 1, uses_anonymous_args = 0
 1138              		@ link register save eliminated.
 1139 06a0 80B4     		push	{r7}
 1140              	.LCFI45:
 1141              		.cfi_def_cfa_offset 4
 1142              		.cfi_offset 7, -4
 1143 06a2 85B0     		sub	sp, sp, #20
 1144              	.LCFI46:
 1145              		.cfi_def_cfa_offset 24
 1146 06a4 00AF     		add	r7, sp, #0
 1147              	.LCFI47:
 1148              		.cfi_def_cfa_register 7
 1149 06a6 0346     		mov	r3, r0
 1150 06a8 FB71     		strb	r3, [r7, #7]
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   FlagStatus bitstatus = RESET;
 1151              		.loc 1 801 0
 1152 06aa 4FF00003 		mov	r3, #0
 1153 06ae FB73     		strb	r3, [r7, #15]
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   uint32_t tempreg = 0;
 1154              		.loc 1 802 0
 1155 06b0 4FF00003 		mov	r3, #0
 1156 06b4 BB60     		str	r3, [r7, #8]
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* check if the FLAG is in RISR register */
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 1157              		.loc 1 808 0
 1158 06b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1159 06b8 03F02003 		and	r3, r3, #32
 1160 06bc 002B     		cmp	r3, #0
 1161 06be 06D0     		beq	.L33
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     tempreg = CRYP->RISR;
 1162              		.loc 1 810 0
 1163 06c0 4FF00003 		mov	r3, #0
 1164 06c4 C5F20603 		movt	r3, 20486
 1165 06c8 9B69     		ldr	r3, [r3, #24]
 1166 06ca BB60     		str	r3, [r7, #8]
 1167 06cc 05E0     		b	.L34
 1168              	.L33:
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else  /* The FLAG is in SR register */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     tempreg = CRYP->SR;
 1169              		.loc 1 814 0
 1170 06ce 4FF00003 		mov	r3, #0
 1171 06d2 C5F20603 		movt	r3, 20486
 1172 06d6 5B68     		ldr	r3, [r3, #4]
 1173 06d8 BB60     		str	r3, [r7, #8]
 1174              	.L34:
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP flag */
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 1175              		.loc 1 819 0
 1176 06da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1177 06dc BB68     		ldr	r3, [r7, #8]
 1178 06de 1340     		ands	r3, r3, r2
 1179 06e0 002B     		cmp	r3, #0
 1180 06e2 03D0     		beq	.L35
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is set */
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = SET;
 1181              		.loc 1 822 0
 1182 06e4 4FF00103 		mov	r3, #1
 1183 06e8 FB73     		strb	r3, [r7, #15]
 1184 06ea 02E0     		b	.L36
 1185              	.L35:
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   else
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   {
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is reset */
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 1186              		.loc 1 827 0
 1187 06ec 4FF00003 		mov	r3, #0
 1188 06f0 FB73     		strb	r3, [r7, #15]
 1189              	.L36:
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   }
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** 
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   /* Return the CRYP_FLAG status */
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c ****   return  bitstatus;
 1190              		.loc 1 831 0
 1191 06f2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c **** }
 1192              		.loc 1 832 0
 1193 06f4 1846     		mov	r0, r3
 1194 06f6 07F11407 		add	r7, r7, #20
 1195 06fa BD46     		mov	sp, r7
 1196 06fc 80BC     		pop	{r7}
 1197 06fe 7047     		bx	lr
 1198              		.cfi_endproc
 1199              	.LFE126:
 1201              	.Letext0:
 1202              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1203              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 1204              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 1205              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp.c
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:18     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:23     .text:00000000 CRYP_DeInit
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:56     .text:00000020 CRYP_Init
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:188    .text:00000124 CRYP_StructInit
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:235    .text:00000158 CRYP_KeyInit
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:314    .text:000001dc CRYP_KeyStructInit
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:377    .text:00000230 CRYP_IVInit
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:432    .text:0000027c CRYP_IVStructInit
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:479    .text:000002b0 CRYP_FIFOFlush
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:513    .text:000002d4 CRYP_Cmd
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:568    .text:00000320 CRYP_DataIn
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:604    .text:00000340 CRYP_DataOut
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:635    .text:00000358 CRYP_SaveContext
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:833    .text:000004c8 CRYP_RestoreContext
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:950    .text:000005a8 CRYP_DMACmd
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:1013   .text:00000604 CRYP_ITConfig
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:1076   .text:00000660 CRYP_GetITStatus
C:\Users\Alex\AppData\Local\Temp\ccvQ5QlS.s:1132   .text:000006a0 CRYP_GetFlagStatus
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
