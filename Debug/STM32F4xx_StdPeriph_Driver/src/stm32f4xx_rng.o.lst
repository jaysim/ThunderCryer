   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rng.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RNG_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	RNG_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	RNG_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************  
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  27              		.loc 1 95 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  39              		.loc 1 97 0
  40 0004 4FF04000 		mov	r0, #64
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  43              		.loc 1 100 0
  44 0010 4FF04000 		mov	r0, #64
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  47              		.loc 1 101 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE110:
  52 001e 00BF     		.section	.text.RNG_Cmd,"ax",%progbits
  53              		.align	2
  54              		.global	RNG_Cmd
  55              		.thumb
  56              		.thumb_func
  58              	RNG_Cmd:
  59              	.LFB111:
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  60              		.loc 1 110 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 8
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65 0000 80B4     		push	{r7}
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 7, -4
  69 0002 83B0     		sub	sp, sp, #12
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
  75 0006 0346     		mov	r3, r0
  76 0008 FB71     		strb	r3, [r7, #7]
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  77              		.loc 1 114 0
  78 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  79 000c 002B     		cmp	r3, #0
  80 000e 0CD0     		beq	.L3
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  81              		.loc 1 117 0
  82 0010 4FF40063 		mov	r3, #2048
  83 0014 C5F20603 		movt	r3, 20486
  84 0018 4FF40062 		mov	r2, #2048
  85 001c C5F20602 		movt	r2, 20486
  86 0020 1268     		ldr	r2, [r2, #0]
  87 0022 42F00402 		orr	r2, r2, #4
  88 0026 1A60     		str	r2, [r3, #0]
  89 0028 0BE0     		b	.L2
  90              	.L3:
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  91              		.loc 1 122 0
  92 002a 4FF40063 		mov	r3, #2048
  93 002e C5F20603 		movt	r3, 20486
  94 0032 4FF40062 		mov	r2, #2048
  95 0036 C5F20602 		movt	r2, 20486
  96 003a 1268     		ldr	r2, [r2, #0]
  97 003c 22F00402 		bic	r2, r2, #4
  98 0040 1A60     		str	r2, [r3, #0]
  99              	.L2:
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 100              		.loc 1 124 0
 101 0042 07F10C07 		add	r7, r7, #12
 102 0046 BD46     		mov	sp, r7
 103 0048 80BC     		pop	{r7}
 104 004a 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE111:
 108              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
 109              		.align	2
 110              		.global	RNG_GetRandomNumber
 111              		.thumb
 112              		.thumb_func
 114              	RNG_GetRandomNumber:
 115              	.LFB112:
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 116              		.loc 1 172 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0000 80B4     		push	{r7}
 122              	.LCFI5:
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 7, -4
 125 0002 00AF     		add	r7, sp, #0
 126              	.LCFI6:
 127              		.cfi_def_cfa_register 7
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 128              		.loc 1 174 0
 129 0004 4FF40063 		mov	r3, #2048
 130 0008 C5F20603 		movt	r3, 20486
 131 000c 9B68     		ldr	r3, [r3, #8]
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 132              		.loc 1 175 0
 133 000e 1846     		mov	r0, r3
 134 0010 BD46     		mov	sp, r7
 135 0012 80BC     		pop	{r7}
 136 0014 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE112:
 140 0016 00BF     		.section	.text.RNG_ITConfig,"ax",%progbits
 141              		.align	2
 142              		.global	RNG_ITConfig
 143              		.thumb
 144              		.thumb_func
 146              	RNG_ITConfig:
 147              	.LFB113:
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 148              		.loc 1 269 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 80B4     		push	{r7}
 154              	.LCFI7:
 155              		.cfi_def_cfa_offset 4
 156              		.cfi_offset 7, -4
 157 0002 83B0     		sub	sp, sp, #12
 158              	.LCFI8:
 159              		.cfi_def_cfa_offset 16
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI9:
 162              		.cfi_def_cfa_register 7
 163 0006 0346     		mov	r3, r0
 164 0008 FB71     		strb	r3, [r7, #7]
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 165              		.loc 1 273 0
 166 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 167 000c 002B     		cmp	r3, #0
 168 000e 0CD0     		beq	.L7
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 169              		.loc 1 276 0
 170 0010 4FF40063 		mov	r3, #2048
 171 0014 C5F20603 		movt	r3, 20486
 172 0018 4FF40062 		mov	r2, #2048
 173 001c C5F20602 		movt	r2, 20486
 174 0020 1268     		ldr	r2, [r2, #0]
 175 0022 42F00802 		orr	r2, r2, #8
 176 0026 1A60     		str	r2, [r3, #0]
 177 0028 0BE0     		b	.L6
 178              	.L7:
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 179              		.loc 1 281 0
 180 002a 4FF40063 		mov	r3, #2048
 181 002e C5F20603 		movt	r3, 20486
 182 0032 4FF40062 		mov	r2, #2048
 183 0036 C5F20602 		movt	r2, 20486
 184 003a 1268     		ldr	r2, [r2, #0]
 185 003c 22F00802 		bic	r2, r2, #8
 186 0040 1A60     		str	r2, [r3, #0]
 187              	.L6:
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 188              		.loc 1 283 0
 189 0042 07F10C07 		add	r7, r7, #12
 190 0046 BD46     		mov	sp, r7
 191 0048 80BC     		pop	{r7}
 192 004a 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE113:
 196              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 197              		.align	2
 198              		.global	RNG_GetFlagStatus
 199              		.thumb
 200              		.thumb_func
 202              	RNG_GetFlagStatus:
 203              	.LFB114:
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 204              		.loc 1 295 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 16
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209 0000 80B4     		push	{r7}
 210              	.LCFI10:
 211              		.cfi_def_cfa_offset 4
 212              		.cfi_offset 7, -4
 213 0002 85B0     		sub	sp, sp, #20
 214              	.LCFI11:
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              	.LCFI12:
 218              		.cfi_def_cfa_register 7
 219 0006 0346     		mov	r3, r0
 220 0008 FB71     		strb	r3, [r7, #7]
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 221              		.loc 1 296 0
 222 000a 4FF00003 		mov	r3, #0
 223 000e FB73     		strb	r3, [r7, #15]
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 224              		.loc 1 301 0
 225 0010 4FF40063 		mov	r3, #2048
 226 0014 C5F20603 		movt	r3, 20486
 227 0018 5B68     		ldr	r3, [r3, #4]
 228 001a 1A46     		mov	r2, r3
 229 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 230 001e 1340     		ands	r3, r3, r2
 231 0020 002B     		cmp	r3, #0
 232 0022 03D0     		beq	.L10
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 233              		.loc 1 304 0
 234 0024 4FF00103 		mov	r3, #1
 235 0028 FB73     		strb	r3, [r7, #15]
 236 002a 02E0     		b	.L11
 237              	.L10:
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 238              		.loc 1 309 0
 239 002c 4FF00003 		mov	r3, #0
 240 0030 FB73     		strb	r3, [r7, #15]
 241              	.L11:
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 242              		.loc 1 312 0
 243 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 244              		.loc 1 313 0
 245 0034 1846     		mov	r0, r3
 246 0036 07F11407 		add	r7, r7, #20
 247 003a BD46     		mov	sp, r7
 248 003c 80BC     		pop	{r7}
 249 003e 7047     		bx	lr
 250              		.cfi_endproc
 251              	.LFE114:
 253              		.section	.text.RNG_ClearFlag,"ax",%progbits
 254              		.align	2
 255              		.global	RNG_ClearFlag
 256              		.thumb
 257              		.thumb_func
 259              	RNG_ClearFlag:
 260              	.LFB115:
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 261              		.loc 1 328 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 8
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 266 0000 80B4     		push	{r7}
 267              	.LCFI13:
 268              		.cfi_def_cfa_offset 4
 269              		.cfi_offset 7, -4
 270 0002 83B0     		sub	sp, sp, #12
 271              	.LCFI14:
 272              		.cfi_def_cfa_offset 16
 273 0004 00AF     		add	r7, sp, #0
 274              	.LCFI15:
 275              		.cfi_def_cfa_register 7
 276 0006 0346     		mov	r3, r0
 277 0008 FB71     		strb	r3, [r7, #7]
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 278              		.loc 1 332 0
 279 000a 4FF40063 		mov	r3, #2048
 280 000e C5F20603 		movt	r3, 20486
 281 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 282 0014 4FEA0212 		lsl	r2, r2, #4
 283 0018 6FEA0202 		mvn	r2, r2
 284 001c 5A60     		str	r2, [r3, #4]
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 285              		.loc 1 333 0
 286 001e 07F10C07 		add	r7, r7, #12
 287 0022 BD46     		mov	sp, r7
 288 0024 80BC     		pop	{r7}
 289 0026 7047     		bx	lr
 290              		.cfi_endproc
 291              	.LFE115:
 293              		.section	.text.RNG_GetITStatus,"ax",%progbits
 294              		.align	2
 295              		.global	RNG_GetITStatus
 296              		.thumb
 297              		.thumb_func
 299              	RNG_GetITStatus:
 300              	.LFB116:
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 301              		.loc 1 344 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 16
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 0000 80B4     		push	{r7}
 307              	.LCFI16:
 308              		.cfi_def_cfa_offset 4
 309              		.cfi_offset 7, -4
 310 0002 85B0     		sub	sp, sp, #20
 311              	.LCFI17:
 312              		.cfi_def_cfa_offset 24
 313 0004 00AF     		add	r7, sp, #0
 314              	.LCFI18:
 315              		.cfi_def_cfa_register 7
 316 0006 0346     		mov	r3, r0
 317 0008 FB71     		strb	r3, [r7, #7]
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 318              		.loc 1 345 0
 319 000a 4FF00003 		mov	r3, #0
 320 000e FB73     		strb	r3, [r7, #15]
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 321              		.loc 1 350 0
 322 0010 4FF40063 		mov	r3, #2048
 323 0014 C5F20603 		movt	r3, 20486
 324 0018 5B68     		ldr	r3, [r3, #4]
 325 001a 1A46     		mov	r2, r3
 326 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 327 001e 1340     		ands	r3, r3, r2
 328 0020 002B     		cmp	r3, #0
 329 0022 03D0     		beq	.L14
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 330              		.loc 1 353 0
 331 0024 4FF00103 		mov	r3, #1
 332 0028 FB73     		strb	r3, [r7, #15]
 333 002a 02E0     		b	.L15
 334              	.L14:
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 335              		.loc 1 358 0
 336 002c 4FF00003 		mov	r3, #0
 337 0030 FB73     		strb	r3, [r7, #15]
 338              	.L15:
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 339              		.loc 1 361 0
 340 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 341              		.loc 1 362 0
 342 0034 1846     		mov	r0, r3
 343 0036 07F11407 		add	r7, r7, #20
 344 003a BD46     		mov	sp, r7
 345 003c 80BC     		pop	{r7}
 346 003e 7047     		bx	lr
 347              		.cfi_endproc
 348              	.LFE116:
 350              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 351              		.align	2
 352              		.global	RNG_ClearITPendingBit
 353              		.thumb
 354              		.thumb_func
 356              	RNG_ClearITPendingBit:
 357              	.LFB117:
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 358              		.loc 1 374 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 8
 361              		@ frame_needed = 1, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 363 0000 80B4     		push	{r7}
 364              	.LCFI19:
 365              		.cfi_def_cfa_offset 4
 366              		.cfi_offset 7, -4
 367 0002 83B0     		sub	sp, sp, #12
 368              	.LCFI20:
 369              		.cfi_def_cfa_offset 16
 370 0004 00AF     		add	r7, sp, #0
 371              	.LCFI21:
 372              		.cfi_def_cfa_register 7
 373 0006 0346     		mov	r3, r0
 374 0008 FB71     		strb	r3, [r7, #7]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 375              		.loc 1 379 0
 376 000a 4FF40063 		mov	r3, #2048
 377 000e C5F20603 		movt	r3, 20486
 378 0012 FA79     		ldrb	r2, [r7, #7]
 379 0014 6FEA0202 		mvn	r2, r2
 380 0018 D2B2     		uxtb	r2, r2
 381 001a 5A60     		str	r2, [r3, #4]
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 382              		.loc 1 380 0
 383 001c 07F10C07 		add	r7, r7, #12
 384 0020 BD46     		mov	sp, r7
 385 0022 80BC     		pop	{r7}
 386 0024 7047     		bx	lr
 387              		.cfi_endproc
 388              	.LFE117:
 390 0026 00BF     		.text
 391              	.Letext0:
 392              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 393              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
 394              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
  C:\Temp\ccMvI7aU.s:19     .text.RNG_DeInit:00000000 $t
  C:\Temp\ccMvI7aU.s:24     .text.RNG_DeInit:00000000 RNG_DeInit
  C:\Temp\ccMvI7aU.s:53     .text.RNG_Cmd:00000000 $t
  C:\Temp\ccMvI7aU.s:58     .text.RNG_Cmd:00000000 RNG_Cmd
  C:\Temp\ccMvI7aU.s:109    .text.RNG_GetRandomNumber:00000000 $t
  C:\Temp\ccMvI7aU.s:114    .text.RNG_GetRandomNumber:00000000 RNG_GetRandomNumber
  C:\Temp\ccMvI7aU.s:141    .text.RNG_ITConfig:00000000 $t
  C:\Temp\ccMvI7aU.s:146    .text.RNG_ITConfig:00000000 RNG_ITConfig
  C:\Temp\ccMvI7aU.s:197    .text.RNG_GetFlagStatus:00000000 $t
  C:\Temp\ccMvI7aU.s:202    .text.RNG_GetFlagStatus:00000000 RNG_GetFlagStatus
  C:\Temp\ccMvI7aU.s:254    .text.RNG_ClearFlag:00000000 $t
  C:\Temp\ccMvI7aU.s:259    .text.RNG_ClearFlag:00000000 RNG_ClearFlag
  C:\Temp\ccMvI7aU.s:294    .text.RNG_GetITStatus:00000000 $t
  C:\Temp\ccMvI7aU.s:299    .text.RNG_GetITStatus:00000000 RNG_GetITStatus
  C:\Temp\ccMvI7aU.s:351    .text.RNG_ClearITPendingBit:00000000 $t
  C:\Temp\ccMvI7aU.s:356    .text.RNG_ClearITPendingBit:00000000 RNG_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
