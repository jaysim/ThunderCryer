   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ADC_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	ADC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	ADC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  27              		.loc 1 207 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 3, -8
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  36              		.loc 1 209 0
  37 0002 0121     		movs	r1, #1
  38 0004 4FF48070 		mov	r0, #256
  39 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  40              		.loc 1 212 0
  41 000c 4FF48070 		mov	r0, #256
  42 0010 0021     		movs	r1, #0
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  43              		.loc 1 213 0
  44 0012 BDE80840 		pop	{r3, lr}
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  45              		.loc 1 212 0
  46 0016 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  47              		.cfi_endproc
  48              	.LFE110:
  50              		.section	.text.ADC_Init,"ax",%progbits
  51              		.align	1
  52              		.global	ADC_Init
  53              		.thumb
  54              		.thumb_func
  56              	ADC_Init:
  57              	.LFB111:
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  58              		.loc 1 229 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              	.LVL0:
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  63              		.loc 1 244 0
  64 0000 4368     		ldr	r3, [r0, #4]
  65              	.LVL1:
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  66              		.loc 1 252 0
  67 0002 0A68     		ldr	r2, [r1, #0]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  68              		.loc 1 247 0
  69 0004 23F04073 		bic	r3, r3, #50331648
  70              	.LVL2:
  71 0008 23F48073 		bic	r3, r3, #256
  72              		.loc 1 252 0
  73 000c 1343     		orrs	r3, r3, r2
  74 000e 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
  75 0010 43EA0223 		orr	r3, r3, r2, lsl #8
  76              	.LVL3:
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
  77              		.loc 1 255 0
  78 0014 4360     		str	r3, [r0, #4]
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
  79              		.loc 1 269 0
  80 0016 CA68     		ldr	r2, [r1, #12]
  81 0018 0B69     		ldr	r3, [r1, #16]
  82              	.LVL4:
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  83              		.loc 1 229 0
  84 001a 30B5     		push	{r4, r5, lr}
  85              	.LCFI1:
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 14, -4
  88              		.cfi_offset 5, -8
  89              		.cfi_offset 4, -12
  90              		.loc 1 269 0
  91 001c 1A43     		orrs	r2, r2, r3
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
  92              		.loc 1 258 0
  93 001e 8468     		ldr	r4, [r0, #8]
  94              	.LVL5:
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
  95              		.loc 1 270 0
  96 0020 8D68     		ldr	r5, [r1, #8]
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
  97              		.loc 1 261 0
  98 0022 094B     		ldr	r3, .L3
  99              		.loc 1 270 0
 100 0024 2A43     		orrs	r2, r2, r5
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 101              		.loc 1 261 0
 102 0026 2340     		ands	r3, r3, r4
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 103              		.loc 1 269 0
 104 0028 1343     		orrs	r3, r3, r2
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 105              		.loc 1 272 0
 106 002a 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 107              		.loc 1 269 0
 108 002c 43EA4203 		orr	r3, r3, r2, lsl #1
 109              	.LVL6:
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 110              		.loc 1 275 0
 111 0030 8360     		str	r3, [r0, #8]
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 112              		.loc 1 285 0
 113 0032 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 114              	.LVL7:
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 115              		.loc 1 278 0
 116 0034 C26A     		ldr	r2, [r0, #44]
 117              	.LVL8:
 118              		.loc 1 285 0
 119 0036 013B     		subs	r3, r3, #1
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 120              		.loc 1 281 0
 121 0038 22F47002 		bic	r2, r2, #15728640
 122              	.LVL9:
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 123              		.loc 1 286 0
 124 003c DBB2     		uxtb	r3, r3
 125 003e 42EA0353 		orr	r3, r2, r3, lsl #20
 126              	.LVL10:
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 127              		.loc 1 289 0
 128 0042 C362     		str	r3, [r0, #44]
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 129              		.loc 1 290 0
 130 0044 30BD     		pop	{r4, r5, pc}
 131              	.L4:
 132 0046 00BF     		.align	2
 133              	.L3:
 134 0048 FDF7FFC0 		.word	-1056966659
 135              		.cfi_endproc
 136              	.LFE111:
 138              		.section	.text.ADC_StructInit,"ax",%progbits
 139              		.align	1
 140              		.global	ADC_StructInit
 141              		.thumb
 142              		.thumb_func
 144              	ADC_StructInit:
 145              	.LFB112:
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 146              		.loc 1 304 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL11:
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 152              		.loc 1 306 0
 153 0000 0023     		movs	r3, #0
 154 0002 0360     		str	r3, [r0, #0]
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 155              		.loc 1 309 0
 156 0004 0371     		strb	r3, [r0, #4]
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 157              		.loc 1 312 0
 158 0006 4371     		strb	r3, [r0, #5]
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 159              		.loc 1 315 0
 160 0008 8360     		str	r3, [r0, #8]
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 161              		.loc 1 318 0
 162 000a C360     		str	r3, [r0, #12]
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 163              		.loc 1 321 0
 164 000c 0361     		str	r3, [r0, #16]
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 165              		.loc 1 324 0
 166 000e 0123     		movs	r3, #1
 167 0010 0375     		strb	r3, [r0, #20]
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 168              		.loc 1 325 0
 169 0012 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE112:
 173              		.section	.text.ADC_CommonInit,"ax",%progbits
 174              		.align	1
 175              		.global	ADC_CommonInit
 176              		.thumb
 177              		.thumb_func
 179              	ADC_CommonInit:
 180              	.LFB113:
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 181              		.loc 1 335 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              	.LVL12:
 186 0000 10B5     		push	{r4, lr}
 187              	.LCFI2:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 14, -4
 190              		.cfi_offset 4, -8
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 191              		.loc 1 344 0
 192 0002 074A     		ldr	r2, .L7
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 193              		.loc 1 347 0
 194 0004 074B     		ldr	r3, .L7+4
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 195              		.loc 1 344 0
 196 0006 5168     		ldr	r1, [r2, #4]
 197              	.LVL13:
 198              		.loc 1 347 0
 199 0008 0B40     		ands	r3, r3, r1
 200              	.LVL14:
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 201              		.loc 1 355 0
 202 000a 90E81200 		ldmia	r0, {r1, r4}
 203 000e 2143     		orrs	r1, r1, r4
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 204              		.loc 1 356 0
 205 0010 8468     		ldr	r4, [r0, #8]
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 206              		.loc 1 355 0
 207 0012 C068     		ldr	r0, [r0, #12]
 208              	.LVL15:
 209              		.loc 1 356 0
 210 0014 2143     		orrs	r1, r1, r4
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 211              		.loc 1 355 0
 212 0016 0143     		orrs	r1, r1, r0
 213 0018 0B43     		orrs	r3, r3, r1
 214              	.LVL16:
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 215              		.loc 1 361 0
 216 001a 5360     		str	r3, [r2, #4]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 217              		.loc 1 362 0
 218 001c 10BD     		pop	{r4, pc}
 219              	.L8:
 220 001e 00BF     		.align	2
 221              	.L7:
 222 0020 00230140 		.word	1073816320
 223 0024 E030FCFF 		.word	-249632
 224              		.cfi_endproc
 225              	.LFE113:
 227              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 228              		.align	1
 229              		.global	ADC_CommonStructInit
 230              		.thumb
 231              		.thumb_func
 233              	ADC_CommonStructInit:
 234              	.LFB114:
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 235              		.loc 1 371 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240              	.LVL17:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 241              		.loc 1 373 0
 242 0000 0023     		movs	r3, #0
 243 0002 0360     		str	r3, [r0, #0]
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 244              		.loc 1 376 0
 245 0004 4360     		str	r3, [r0, #4]
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 246              		.loc 1 379 0
 247 0006 8360     		str	r3, [r0, #8]
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 248              		.loc 1 382 0
 249 0008 C360     		str	r3, [r0, #12]
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 250              		.loc 1 383 0
 251 000a 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE114:
 255              		.section	.text.ADC_Cmd,"ax",%progbits
 256              		.align	1
 257              		.global	ADC_Cmd
 258              		.thumb
 259              		.thumb_func
 261              	ADC_Cmd:
 262              	.LFB115:
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 263              		.loc 1 393 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              	.LVL18:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 269              		.loc 1 400 0
 270 0000 8368     		ldr	r3, [r0, #8]
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 271              		.loc 1 397 0
 272 0002 11B1     		cbz	r1, .L11
 273              		.loc 1 400 0
 274 0004 43F00103 		orr	r3, r3, #1
 275 0008 01E0     		b	.L13
 276              	.L11:
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 277              		.loc 1 405 0
 278 000a 23F00103 		bic	r3, r3, #1
 279              	.L13:
 280 000e 8360     		str	r3, [r0, #8]
 281 0010 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE115:
 285              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 286              		.align	1
 287              		.global	ADC_AnalogWatchdogCmd
 288              		.thumb
 289              		.thumb_func
 291              	ADC_AnalogWatchdogCmd:
 292              	.LFB116:
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 293              		.loc 1 451 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298              	.LVL19:
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 299              		.loc 1 458 0
 300 0000 4368     		ldr	r3, [r0, #4]
 301              	.LVL20:
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 302              		.loc 1 461 0
 303 0002 23F44003 		bic	r3, r3, #12582912
 304              	.LVL21:
 305 0006 23F40073 		bic	r3, r3, #512
 306              	.LVL22:
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 307              		.loc 1 464 0
 308 000a 1943     		orrs	r1, r1, r3
 309              	.LVL23:
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 310              		.loc 1 467 0
 311 000c 4160     		str	r1, [r0, #4]
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 312              		.loc 1 468 0
 313 000e 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE116:
 317              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 318              		.align	1
 319              		.global	ADC_AnalogWatchdogThresholdsConfig
 320              		.thumb
 321              		.thumb_func
 323              	ADC_AnalogWatchdogThresholdsConfig:
 324              	.LFB117:
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 325              		.loc 1 481 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL24:
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 331              		.loc 1 488 0
 332 0000 4162     		str	r1, [r0, #36]
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 333              		.loc 1 491 0
 334 0002 8262     		str	r2, [r0, #40]
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 335              		.loc 1 492 0
 336 0004 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE117:
 340              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 341              		.align	1
 342              		.global	ADC_AnalogWatchdogSingleChannelConfig
 343              		.thumb
 344              		.thumb_func
 346              	ADC_AnalogWatchdogSingleChannelConfig:
 347              	.LFB118:
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 348              		.loc 1 521 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL25:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 354              		.loc 1 528 0
 355 0000 4368     		ldr	r3, [r0, #4]
 356              	.LVL26:
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 357              		.loc 1 531 0
 358 0002 23F01F03 		bic	r3, r3, #31
 359              	.LVL27:
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 360              		.loc 1 534 0
 361 0006 1943     		orrs	r1, r1, r3
 362              	.LVL28:
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 363              		.loc 1 537 0
 364 0008 4160     		str	r1, [r0, #4]
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 365              		.loc 1 538 0
 366 000a 7047     		bx	lr
 367              		.cfi_endproc
 368              	.LFE118:
 370              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 371              		.align	1
 372              		.global	ADC_TempSensorVrefintCmd
 373              		.thumb
 374              		.thumb_func
 376              	ADC_TempSensorVrefintCmd:
 377              	.LFB119:
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 378              		.loc 1 586 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              		@ link register save eliminated.
 383              	.LVL29:
 384 0000 044B     		ldr	r3, .L21
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 385              		.loc 1 592 0
 386 0002 5A68     		ldr	r2, [r3, #4]
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 387              		.loc 1 589 0
 388 0004 10B1     		cbz	r0, .L18
 389              		.loc 1 592 0
 390 0006 42F40002 		orr	r2, r2, #8388608
 391 000a 01E0     		b	.L20
 392              	.L18:
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 393              		.loc 1 597 0
 394 000c 22F40002 		bic	r2, r2, #8388608
 395              	.L20:
 396 0010 5A60     		str	r2, [r3, #4]
 397 0012 7047     		bx	lr
 398              	.L22:
 399              		.align	2
 400              	.L21:
 401 0014 00230140 		.word	1073816320
 402              		.cfi_endproc
 403              	.LFE119:
 405              		.section	.text.ADC_VBATCmd,"ax",%progbits
 406              		.align	1
 407              		.global	ADC_VBATCmd
 408              		.thumb
 409              		.thumb_func
 411              	ADC_VBATCmd:
 412              	.LFB120:
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 413              		.loc 1 608 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 418              	.LVL30:
 419 0000 044B     		ldr	r3, .L27
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 420              		.loc 1 614 0
 421 0002 5A68     		ldr	r2, [r3, #4]
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 422              		.loc 1 611 0
 423 0004 10B1     		cbz	r0, .L24
 424              		.loc 1 614 0
 425 0006 42F48002 		orr	r2, r2, #4194304
 426 000a 01E0     		b	.L26
 427              	.L24:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 428              		.loc 1 619 0
 429 000c 22F48002 		bic	r2, r2, #4194304
 430              	.L26:
 431 0010 5A60     		str	r2, [r3, #4]
 432 0012 7047     		bx	lr
 433              	.L28:
 434              		.align	2
 435              	.L27:
 436 0014 00230140 		.word	1073816320
 437              		.cfi_endproc
 438              	.LFE120:
 440              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 441              		.align	1
 442              		.global	ADC_RegularChannelConfig
 443              		.thumb
 444              		.thumb_func
 446              	ADC_RegularChannelConfig:
 447              	.LFB121:
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 448              		.loc 1 709 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              	.LVL31:
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 453              		.loc 1 718 0
 454 0000 0929     		cmp	r1, #9
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 455              		.loc 1 709 0
 456 0002 70B5     		push	{r4, r5, r6, lr}
 457              	.LCFI3:
 458              		.cfi_def_cfa_offset 16
 459              		.cfi_offset 14, -4
 460              		.cfi_offset 6, -8
 461              		.cfi_offset 5, -12
 462              		.cfi_offset 4, -16
 463 0004 4FF00304 		mov	r4, #3
 464              		.loc 1 718 0
 465 0008 0BD9     		bls	.L30
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 466              		.loc 1 724 0
 467 000a 4C43     		muls	r4, r1, r4
 468 000c 1E3C     		subs	r4, r4, #30
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 469              		.loc 1 721 0
 470 000e C668     		ldr	r6, [r0, #12]
 471              	.LVL32:
 472              		.loc 1 724 0
 473 0010 0725     		movs	r5, #7
 474 0012 A540     		lsls	r5, r5, r4
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 475              		.loc 1 727 0
 476 0014 26EA0505 		bic	r5, r6, r5
 477              	.LVL33:
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 478              		.loc 1 730 0
 479 0018 A340     		lsls	r3, r3, r4
 480              	.LVL34:
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 481              		.loc 1 733 0
 482 001a 45EA0304 		orr	r4, r5, r3
 483              	.LVL35:
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 484              		.loc 1 736 0
 485 001e C460     		str	r4, [r0, #12]
 486 0020 0AE0     		b	.L31
 487              	.LVL36:
 488              	.L30:
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 489              		.loc 1 741 0
 490 0022 0669     		ldr	r6, [r0, #16]
 491              	.LVL37:
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 492              		.loc 1 744 0
 493 0024 4C43     		muls	r4, r1, r4
 494              	.LVL38:
 495 0026 0725     		movs	r5, #7
 496 0028 A540     		lsls	r5, r5, r4
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 497              		.loc 1 747 0
 498 002a 26EA0505 		bic	r5, r6, r5
 499              	.LVL39:
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 500              		.loc 1 750 0
 501 002e 13FA04F4 		lsls	r4, r3, r4
 502              	.LVL40:
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 503              		.loc 1 753 0
 504 0032 45EA0403 		orr	r3, r5, r4
 505              	.LVL41:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 506              		.loc 1 756 0
 507 0036 0361     		str	r3, [r0, #16]
 508              	.LVL42:
 509              	.L31:
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 510              		.loc 1 759 0
 511 0038 062A     		cmp	r2, #6
 512 003a 4FF00503 		mov	r3, #5
 513 003e 0BD8     		bhi	.L32
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 514              		.loc 1 765 0
 515 0040 013A     		subs	r2, r2, #1
 516              	.LVL43:
 517 0042 5343     		muls	r3, r2, r3
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 518              		.loc 1 762 0
 519 0044 446B     		ldr	r4, [r0, #52]
 520              	.LVL44:
 521              		.loc 1 765 0
 522 0046 1F22     		movs	r2, #31
 523 0048 9A40     		lsls	r2, r2, r3
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 524              		.loc 1 768 0
 525 004a 24EA0202 		bic	r2, r4, r2
 526              	.LVL45:
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 527              		.loc 1 771 0
 528 004e 11FA03F3 		lsls	r3, r1, r3
 529              	.LVL46:
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 530              		.loc 1 774 0
 531 0052 1343     		orrs	r3, r3, r2
 532              	.LVL47:
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 533              		.loc 1 777 0
 534 0054 4363     		str	r3, [r0, #52]
 535 0056 70BD     		pop	{r4, r5, r6, pc}
 536              	.LVL48:
 537              	.L32:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 538              		.loc 1 780 0
 539 0058 0C2A     		cmp	r2, #12
 540 005a 0BD8     		bhi	.L34
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 541              		.loc 1 786 0
 542 005c 5343     		muls	r3, r2, r3
 543 005e 233B     		subs	r3, r3, #35
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 544              		.loc 1 783 0
 545 0060 046B     		ldr	r4, [r0, #48]
 546              	.LVL49:
 547              		.loc 1 786 0
 548 0062 1F22     		movs	r2, #31
 549              	.LVL50:
 550 0064 9A40     		lsls	r2, r2, r3
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 551              		.loc 1 789 0
 552 0066 24EA0202 		bic	r2, r4, r2
 553              	.LVL51:
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 554              		.loc 1 792 0
 555 006a 9940     		lsls	r1, r1, r3
 556              	.LVL52:
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 557              		.loc 1 795 0
 558 006c 42EA0103 		orr	r3, r2, r1
 559              	.LVL53:
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 560              		.loc 1 798 0
 561 0070 0363     		str	r3, [r0, #48]
 562 0072 70BD     		pop	{r4, r5, r6, pc}
 563              	.LVL54:
 564              	.L34:
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 565              		.loc 1 807 0
 566 0074 5343     		muls	r3, r2, r3
 567 0076 413B     		subs	r3, r3, #65
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 568              		.loc 1 804 0
 569 0078 C46A     		ldr	r4, [r0, #44]
 570              	.LVL55:
 571              		.loc 1 807 0
 572 007a 1F22     		movs	r2, #31
 573              	.LVL56:
 574 007c 9A40     		lsls	r2, r2, r3
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 575              		.loc 1 810 0
 576 007e 24EA0202 		bic	r2, r4, r2
 577              	.LVL57:
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 578              		.loc 1 813 0
 579 0082 9940     		lsls	r1, r1, r3
 580              	.LVL58:
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 581              		.loc 1 816 0
 582 0084 42EA0103 		orr	r3, r2, r1
 583              	.LVL59:
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 584              		.loc 1 819 0
 585 0088 C362     		str	r3, [r0, #44]
 586 008a 70BD     		pop	{r4, r5, r6, pc}
 587              		.cfi_endproc
 588              	.LFE121:
 590              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 591              		.align	1
 592              		.global	ADC_SoftwareStartConv
 593              		.thumb
 594              		.thumb_func
 596              	ADC_SoftwareStartConv:
 597              	.LFB122:
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 598              		.loc 1 829 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603              	.LVL60:
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 604              		.loc 1 834 0
 605 0000 8368     		ldr	r3, [r0, #8]
 606 0002 43F08043 		orr	r3, r3, #1073741824
 607 0006 8360     		str	r3, [r0, #8]
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 608              		.loc 1 835 0
 609 0008 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE122:
 613              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 614              		.align	1
 615              		.global	ADC_GetSoftwareStartConvStatus
 616              		.thumb
 617              		.thumb_func
 619              	ADC_GetSoftwareStartConvStatus:
 620              	.LFB123:
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 621              		.loc 1 843 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626              	.LVL61:
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 627              		.loc 1 849 0
 628 0000 8068     		ldr	r0, [r0, #8]
 629              	.LVL62:
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 630              		.loc 1 861 0
 631 0002 C0F38050 		ubfx	r0, r0, #22, #1
 632              	.LVL63:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 633              		.loc 1 862 0
 634 0006 7047     		bx	lr
 635              		.cfi_endproc
 636              	.LFE123:
 638              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 639              		.align	1
 640              		.global	ADC_EOCOnEachRegularChannelCmd
 641              		.thumb
 642              		.thumb_func
 644              	ADC_EOCOnEachRegularChannelCmd:
 645              	.LFB124:
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 646              		.loc 1 873 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 651              	.LVL64:
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 652              		.loc 1 881 0
 653 0000 8368     		ldr	r3, [r0, #8]
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 654              		.loc 1 878 0
 655 0002 11B1     		cbz	r1, .L38
 656              		.loc 1 881 0
 657 0004 43F48063 		orr	r3, r3, #1024
 658 0008 01E0     		b	.L40
 659              	.L38:
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 660              		.loc 1 886 0
 661 000a 23F48063 		bic	r3, r3, #1024
 662              	.L40:
 663 000e 8360     		str	r3, [r0, #8]
 664 0010 7047     		bx	lr
 665              		.cfi_endproc
 666              	.LFE124:
 668              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 669              		.align	1
 670              		.global	ADC_ContinuousModeCmd
 671              		.thumb
 672              		.thumb_func
 674              	ADC_ContinuousModeCmd:
 675              	.LFB125:
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 676              		.loc 1 898 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681              	.LVL65:
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 682              		.loc 1 906 0
 683 0000 8368     		ldr	r3, [r0, #8]
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 684              		.loc 1 903 0
 685 0002 11B1     		cbz	r1, .L42
 686              		.loc 1 906 0
 687 0004 43F00203 		orr	r3, r3, #2
 688 0008 01E0     		b	.L44
 689              	.L42:
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 690              		.loc 1 911 0
 691 000a 23F00203 		bic	r3, r3, #2
 692              	.L44:
 693 000e 8360     		str	r3, [r0, #8]
 694 0010 7047     		bx	lr
 695              		.cfi_endproc
 696              	.LFE125:
 698              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 699              		.align	1
 700              		.global	ADC_DiscModeChannelCountConfig
 701              		.thumb
 702              		.thumb_func
 704              	ADC_DiscModeChannelCountConfig:
 705              	.LFB126:
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 706              		.loc 1 924 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 711              	.LVL66:
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 712              		.loc 1 933 0
 713 0000 4368     		ldr	r3, [r0, #4]
 714              	.LVL67:
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 715              		.loc 1 939 0
 716 0002 0139     		subs	r1, r1, #1
 717              	.LVL68:
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 718              		.loc 1 936 0
 719 0004 23F46043 		bic	r3, r3, #57344
 720              	.LVL69:
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 721              		.loc 1 940 0
 722 0008 43EA4131 		orr	r1, r3, r1, lsl #13
 723              	.LVL70:
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 724              		.loc 1 943 0
 725 000c 4160     		str	r1, [r0, #4]
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 726              		.loc 1 944 0
 727 000e 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE126:
 731              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 732              		.align	1
 733              		.global	ADC_DiscModeCmd
 734              		.thumb
 735              		.thumb_func
 737              	ADC_DiscModeCmd:
 738              	.LFB127:
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 739              		.loc 1 956 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744              	.LVL71:
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 745              		.loc 1 964 0
 746 0000 4368     		ldr	r3, [r0, #4]
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 747              		.loc 1 961 0
 748 0002 11B1     		cbz	r1, .L47
 749              		.loc 1 964 0
 750 0004 43F40063 		orr	r3, r3, #2048
 751 0008 01E0     		b	.L49
 752              	.L47:
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 753              		.loc 1 969 0
 754 000a 23F40063 		bic	r3, r3, #2048
 755              	.L49:
 756 000e 4360     		str	r3, [r0, #4]
 757 0010 7047     		bx	lr
 758              		.cfi_endproc
 759              	.LFE127:
 761              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 762              		.align	1
 763              		.global	ADC_GetConversionValue
 764              		.thumb
 765              		.thumb_func
 767              	ADC_GetConversionValue:
 768              	.LFB128:
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 769              		.loc 1 979 0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 0
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		@ link register save eliminated.
 774              	.LVL72:
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 775              		.loc 1 984 0
 776 0000 C06C     		ldr	r0, [r0, #76]
 777              	.LVL73:
 778 0002 80B2     		uxth	r0, r0
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 779              		.loc 1 985 0
 780 0004 7047     		bx	lr
 781              		.cfi_endproc
 782              	.LFE128:
 784              		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 785              		.align	1
 786              		.global	ADC_GetMultiModeConversionValue
 787              		.thumb
 788              		.thumb_func
 790              	ADC_GetMultiModeConversionValue:
 791              	.LFB129:
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 792              		.loc 1 1000 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 797              		.loc 1 1002 0
 798 0000 014B     		ldr	r3, .L52
 799 0002 1868     		ldr	r0, [r3, #0]
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 800              		.loc 1 1003 0
 801 0004 7047     		bx	lr
 802              	.L53:
 803 0006 00BF     		.align	2
 804              	.L52:
 805 0008 08230140 		.word	1073816328
 806              		.cfi_endproc
 807              	.LFE129:
 809              		.section	.text.ADC_DMACmd,"ax",%progbits
 810              		.align	1
 811              		.global	ADC_DMACmd
 812              		.thumb
 813              		.thumb_func
 815              	ADC_DMACmd:
 816              	.LFB130:
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 817              		.loc 1 1049 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821              		@ link register save eliminated.
 822              	.LVL74:
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 823              		.loc 1 1056 0
 824 0000 8368     		ldr	r3, [r0, #8]
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 825              		.loc 1 1053 0
 826 0002 11B1     		cbz	r1, .L55
 827              		.loc 1 1056 0
 828 0004 43F48073 		orr	r3, r3, #256
 829 0008 01E0     		b	.L57
 830              	.L55:
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 831              		.loc 1 1061 0
 832 000a 23F48073 		bic	r3, r3, #256
 833              	.L57:
 834 000e 8360     		str	r3, [r0, #8]
 835 0010 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE130:
 839              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 840              		.align	1
 841              		.global	ADC_DMARequestAfterLastTransferCmd
 842              		.thumb
 843              		.thumb_func
 845              	ADC_DMARequestAfterLastTransferCmd:
 846              	.LFB131:
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 847              		.loc 1 1073 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 852              	.LVL75:
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 853              		.loc 1 1080 0
 854 0000 8368     		ldr	r3, [r0, #8]
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 855              		.loc 1 1077 0
 856 0002 11B1     		cbz	r1, .L59
 857              		.loc 1 1080 0
 858 0004 43F40073 		orr	r3, r3, #512
 859 0008 01E0     		b	.L61
 860              	.L59:
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 861              		.loc 1 1085 0
 862 000a 23F40073 		bic	r3, r3, #512
 863              	.L61:
 864 000e 8360     		str	r3, [r0, #8]
 865 0010 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE131:
 869              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 870              		.align	1
 871              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 872              		.thumb
 873              		.thumb_func
 875              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 876              	.LFB132:
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 877              		.loc 1 1100 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882              	.LVL76:
 883 0000 044B     		ldr	r3, .L66
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 884              		.loc 1 1106 0
 885 0002 5A68     		ldr	r2, [r3, #4]
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 886              		.loc 1 1103 0
 887 0004 10B1     		cbz	r0, .L63
 888              		.loc 1 1106 0
 889 0006 42F40052 		orr	r2, r2, #8192
 890 000a 01E0     		b	.L65
 891              	.L63:
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 892              		.loc 1 1111 0
 893 000c 22F40052 		bic	r2, r2, #8192
 894              	.L65:
 895 0010 5A60     		str	r2, [r3, #4]
 896 0012 7047     		bx	lr
 897              	.L67:
 898              		.align	2
 899              	.L66:
 900 0014 00230140 		.word	1073816320
 901              		.cfi_endproc
 902              	.LFE132:
 904              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 905              		.align	1
 906              		.global	ADC_InjectedChannelConfig
 907              		.thumb
 908              		.thumb_func
 910              	ADC_InjectedChannelConfig:
 911              	.LFB133:
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 912              		.loc 1 1187 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916              	.LVL77:
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 917              		.loc 1 1195 0
 918 0000 0929     		cmp	r1, #9
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 919              		.loc 1 1187 0
 920 0002 70B5     		push	{r4, r5, r6, lr}
 921              	.LCFI4:
 922              		.cfi_def_cfa_offset 16
 923              		.cfi_offset 14, -4
 924              		.cfi_offset 6, -8
 925              		.cfi_offset 5, -12
 926              		.cfi_offset 4, -16
 927 0004 4FF00304 		mov	r4, #3
 928              		.loc 1 1195 0
 929 0008 0BD9     		bls	.L69
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 930              		.loc 1 1200 0
 931 000a 4C43     		muls	r4, r1, r4
 932 000c 1E3C     		subs	r4, r4, #30
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 933              		.loc 1 1198 0
 934 000e C668     		ldr	r6, [r0, #12]
 935              	.LVL78:
 936              		.loc 1 1200 0
 937 0010 0725     		movs	r5, #7
 938 0012 A540     		lsls	r5, r5, r4
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 939              		.loc 1 1202 0
 940 0014 26EA0505 		bic	r5, r6, r5
 941              	.LVL79:
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 942              		.loc 1 1204 0
 943 0018 A340     		lsls	r3, r3, r4
 944              	.LVL80:
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 945              		.loc 1 1206 0
 946 001a 45EA0304 		orr	r4, r5, r3
 947              	.LVL81:
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 948              		.loc 1 1208 0
 949 001e C460     		str	r4, [r0, #12]
 950 0020 0AE0     		b	.L70
 951              	.LVL82:
 952              	.L69:
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 953              		.loc 1 1213 0
 954 0022 0669     		ldr	r6, [r0, #16]
 955              	.LVL83:
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 956              		.loc 1 1215 0
 957 0024 4C43     		muls	r4, r1, r4
 958              	.LVL84:
 959 0026 0725     		movs	r5, #7
 960 0028 A540     		lsls	r5, r5, r4
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 961              		.loc 1 1217 0
 962 002a 26EA0505 		bic	r5, r6, r5
 963              	.LVL85:
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 964              		.loc 1 1219 0
 965 002e 13FA04F4 		lsls	r4, r3, r4
 966              	.LVL86:
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 967              		.loc 1 1221 0
 968 0032 45EA0403 		orr	r3, r5, r4
 969              	.LVL87:
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 970              		.loc 1 1223 0
 971 0036 0361     		str	r3, [r0, #16]
 972              	.LVL88:
 973              	.L70:
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 974              		.loc 1 1227 0
 975 0038 836B     		ldr	r3, [r0, #56]
 976              	.LVL89:
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 977              		.loc 1 1229 0
 978 003a C3F30154 		ubfx	r4, r3, #20, #2
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 979              		.loc 1 1231 0
 980 003e 121B     		subs	r2, r2, r4
 981              	.LVL90:
 982 0040 0232     		adds	r2, r2, #2
 983 0042 0524     		movs	r4, #5
 984 0044 D2B2     		uxtb	r2, r2
 985 0046 6243     		muls	r2, r4, r2
 986              	.LVL91:
 987 0048 1F24     		movs	r4, #31
 988 004a 9440     		lsls	r4, r4, r2
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 989              		.loc 1 1233 0
 990 004c 23EA0403 		bic	r3, r3, r4
 991              	.LVL92:
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 992              		.loc 1 1235 0
 993 0050 9140     		lsls	r1, r1, r2
 994              	.LVL93:
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 995              		.loc 1 1237 0
 996 0052 0B43     		orrs	r3, r3, r1
 997              	.LVL94:
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 998              		.loc 1 1239 0
 999 0054 8363     		str	r3, [r0, #56]
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1000              		.loc 1 1240 0
 1001 0056 70BD     		pop	{r4, r5, r6, pc}
 1002              		.cfi_endproc
 1003              	.LFE133:
 1005              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1006              		.align	1
 1007              		.global	ADC_InjectedSequencerLengthConfig
 1008              		.thumb
 1009              		.thumb_func
 1011              	ADC_InjectedSequencerLengthConfig:
 1012              	.LFB134:
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1013              		.loc 1 1250 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017              		@ link register save eliminated.
 1018              	.LVL95:
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1019              		.loc 1 1258 0
 1020 0000 836B     		ldr	r3, [r0, #56]
 1021              	.LVL96:
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1022              		.loc 1 1264 0
 1023 0002 0139     		subs	r1, r1, #1
 1024              	.LVL97:
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1025              		.loc 1 1261 0
 1026 0004 23F44013 		bic	r3, r3, #3145728
 1027              	.LVL98:
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1028              		.loc 1 1265 0
 1029 0008 43EA0151 		orr	r1, r3, r1, lsl #20
 1030              	.LVL99:
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1031              		.loc 1 1268 0
 1032 000c 8163     		str	r1, [r0, #56]
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1033              		.loc 1 1269 0
 1034 000e 7047     		bx	lr
 1035              		.cfi_endproc
 1036              	.LFE134:
 1038              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1039              		.align	1
 1040              		.global	ADC_SetInjectedOffset
 1041              		.thumb
 1042              		.thumb_func
 1044              	ADC_SetInjectedOffset:
 1045              	.LFB135:
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1046              		.loc 1 1285 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 8
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              		@ link register save eliminated.
 1051              	.LVL100:
 1052 0000 82B0     		sub	sp, sp, #8
 1053              	.LCFI5:
 1054              		.cfi_def_cfa_offset 8
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1055              		.loc 1 1286 0
 1056 0002 0023     		movs	r3, #0
 1057 0004 0193     		str	r3, [sp, #4]
 1058              	.LVL101:
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1059              		.loc 1 1292 0
 1060 0006 0190     		str	r0, [sp, #4]
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1061              		.loc 1 1293 0
 1062 0008 019B     		ldr	r3, [sp, #4]
 1063 000a C918     		adds	r1, r1, r3
 1064              	.LVL102:
 1065 000c 0191     		str	r1, [sp, #4]
 1066              	.LVL103:
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1067              		.loc 1 1296 0
 1068 000e 019B     		ldr	r3, [sp, #4]
 1069 0010 1A60     		str	r2, [r3, #0]
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1070              		.loc 1 1297 0
 1071 0012 02B0     		add	sp, sp, #8
 1072 0014 7047     		bx	lr
 1073              		.cfi_endproc
 1074              	.LFE135:
 1076              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1077              		.align	1
 1078              		.global	ADC_ExternalTrigInjectedConvConfig
 1079              		.thumb
 1080              		.thumb_func
 1082              	ADC_ExternalTrigInjectedConvConfig:
 1083              	.LFB136:
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1084              		.loc 1 1323 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              		@ link register save eliminated.
 1089              	.LVL104:
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1090              		.loc 1 1330 0
 1091 0000 8368     		ldr	r3, [r0, #8]
 1092              	.LVL105:
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1093              		.loc 1 1333 0
 1094 0002 23F47023 		bic	r3, r3, #983040
 1095              	.LVL106:
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1096              		.loc 1 1336 0
 1097 0006 1943     		orrs	r1, r1, r3
 1098              	.LVL107:
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1099              		.loc 1 1339 0
 1100 0008 8160     		str	r1, [r0, #8]
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1101              		.loc 1 1340 0
 1102 000a 7047     		bx	lr
 1103              		.cfi_endproc
 1104              	.LFE136:
 1106              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1107              		.align	1
 1108              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1109              		.thumb
 1110              		.thumb_func
 1112              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1113              	.LFB137:
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1114              		.loc 1 1357 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              		@ link register save eliminated.
 1119              	.LVL108:
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1120              		.loc 1 1363 0
 1121 0000 8368     		ldr	r3, [r0, #8]
 1122              	.LVL109:
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1123              		.loc 1 1365 0
 1124 0002 23F44013 		bic	r3, r3, #3145728
 1125              	.LVL110:
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1126              		.loc 1 1367 0
 1127 0006 1943     		orrs	r1, r1, r3
 1128              	.LVL111:
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1129              		.loc 1 1369 0
 1130 0008 8160     		str	r1, [r0, #8]
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1131              		.loc 1 1370 0
 1132 000a 7047     		bx	lr
 1133              		.cfi_endproc
 1134              	.LFE137:
 1136              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1137              		.align	1
 1138              		.global	ADC_SoftwareStartInjectedConv
 1139              		.thumb
 1140              		.thumb_func
 1142              	ADC_SoftwareStartInjectedConv:
 1143              	.LFB138:
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1144              		.loc 1 1378 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 1149              	.LVL112:
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1150              		.loc 1 1382 0
 1151 0000 8368     		ldr	r3, [r0, #8]
 1152 0002 43F48003 		orr	r3, r3, #4194304
 1153 0006 8360     		str	r3, [r0, #8]
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1154              		.loc 1 1383 0
 1155 0008 7047     		bx	lr
 1156              		.cfi_endproc
 1157              	.LFE138:
 1159              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1160              		.align	1
 1161              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1162              		.thumb
 1163              		.thumb_func
 1165              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1166              	.LFB139:
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1167              		.loc 1 1391 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 1172              	.LVL113:
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1173              		.loc 1 1397 0
 1174 0000 8068     		ldr	r0, [r0, #8]
 1175              	.LVL114:
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1176              		.loc 1 1408 0
 1177 0002 C0F38050 		ubfx	r0, r0, #22, #1
 1178              	.LVL115:
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1179              		.loc 1 1409 0
 1180 0006 7047     		bx	lr
 1181              		.cfi_endproc
 1182              	.LFE139:
 1184              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1185              		.align	1
 1186              		.global	ADC_AutoInjectedConvCmd
 1187              		.thumb
 1188              		.thumb_func
 1190              	ADC_AutoInjectedConvCmd:
 1191              	.LFB140:
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1192              		.loc 1 1420 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197              	.LVL116:
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1198              		.loc 1 1427 0
 1199 0000 4368     		ldr	r3, [r0, #4]
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1200              		.loc 1 1424 0
 1201 0002 11B1     		cbz	r1, .L78
 1202              		.loc 1 1427 0
 1203 0004 43F48063 		orr	r3, r3, #1024
 1204 0008 01E0     		b	.L80
 1205              	.L78:
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1206              		.loc 1 1432 0
 1207 000a 23F48063 		bic	r3, r3, #1024
 1208              	.L80:
 1209 000e 4360     		str	r3, [r0, #4]
 1210 0010 7047     		bx	lr
 1211              		.cfi_endproc
 1212              	.LFE140:
 1214              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1215              		.align	1
 1216              		.global	ADC_InjectedDiscModeCmd
 1217              		.thumb
 1218              		.thumb_func
 1220              	ADC_InjectedDiscModeCmd:
 1221              	.LFB141:
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1222              		.loc 1 1446 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226              		@ link register save eliminated.
 1227              	.LVL117:
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1228              		.loc 1 1453 0
 1229 0000 4368     		ldr	r3, [r0, #4]
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1230              		.loc 1 1450 0
 1231 0002 11B1     		cbz	r1, .L82
 1232              		.loc 1 1453 0
 1233 0004 43F48053 		orr	r3, r3, #4096
 1234 0008 01E0     		b	.L84
 1235              	.L82:
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 1236              		.loc 1 1458 0
 1237 000a 23F48053 		bic	r3, r3, #4096
 1238              	.L84:
 1239 000e 4360     		str	r3, [r0, #4]
 1240 0010 7047     		bx	lr
 1241              		.cfi_endproc
 1242              	.LFE141:
 1244              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1245              		.align	1
 1246              		.global	ADC_GetInjectedConversionValue
 1247              		.thumb
 1248              		.thumb_func
 1250              	ADC_GetInjectedConversionValue:
 1251              	.LFB142:
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1252              		.loc 1 1474 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 8
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 1257              	.LVL118:
 1258 0000 82B0     		sub	sp, sp, #8
 1259              	.LCFI6:
 1260              		.cfi_def_cfa_offset 8
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 1261              		.loc 1 1475 0
 1262 0002 0023     		movs	r3, #0
 1263 0004 0193     		str	r3, [sp, #4]
 1264              	.LVL119:
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1265              		.loc 1 1481 0
 1266 0006 0190     		str	r0, [sp, #4]
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1267              		.loc 1 1482 0
 1268 0008 019B     		ldr	r3, [sp, #4]
 1269 000a 2833     		adds	r3, r3, #40
 1270 000c 5918     		adds	r1, r3, r1
 1271              	.LVL120:
 1272 000e 0191     		str	r1, [sp, #4]
 1273              	.LVL121:
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1274              		.loc 1 1485 0
 1275 0010 019B     		ldr	r3, [sp, #4]
 1276 0012 1868     		ldr	r0, [r3, #0]
 1277              	.LVL122:
 1278 0014 80B2     		uxth	r0, r0
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1279              		.loc 1 1486 0
 1280 0016 02B0     		add	sp, sp, #8
 1281 0018 7047     		bx	lr
 1282              		.cfi_endproc
 1283              	.LFE142:
 1285              		.section	.text.ADC_ITConfig,"ax",%progbits
 1286              		.align	1
 1287              		.global	ADC_ITConfig
 1288              		.thumb
 1289              		.thumb_func
 1291              	ADC_ITConfig:
 1292              	.LFB143:
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1293              		.loc 1 1582 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298              	.LVL123:
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1299              		.loc 1 1591 0
 1300 0000 0123     		movs	r3, #1
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 1301              		.loc 1 1590 0
 1302 0002 C9B2     		uxtb	r1, r1
 1303              	.LVL124:
 1304              		.loc 1 1591 0
 1305 0004 13FA01F1 		lsls	r1, r3, r1
 1306              	.LVL125:
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 1307              		.loc 1 1596 0
 1308 0008 4368     		ldr	r3, [r0, #4]
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1309              		.loc 1 1593 0
 1310 000a 0AB1     		cbz	r2, .L87
 1311              		.loc 1 1596 0
 1312 000c 1943     		orrs	r1, r1, r3
 1313              	.LVL126:
 1314 000e 01E0     		b	.L89
 1315              	.LVL127:
 1316              	.L87:
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1317              		.loc 1 1601 0
 1318 0010 23EA0101 		bic	r1, r3, r1
 1319              	.LVL128:
 1320              	.L89:
 1321 0014 4160     		str	r1, [r0, #4]
 1322 0016 7047     		bx	lr
 1323              		.cfi_endproc
 1324              	.LFE143:
 1326              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1327              		.align	1
 1328              		.global	ADC_GetFlagStatus
 1329              		.thumb
 1330              		.thumb_func
 1332              	ADC_GetFlagStatus:
 1333              	.LFB144:
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1334              		.loc 1 1619 0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 1338              		@ link register save eliminated.
 1339              	.LVL129:
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1340              		.loc 1 1626 0
 1341 0000 0368     		ldr	r3, [r0, #0]
 1342              	.LVL130:
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1343              		.loc 1 1629 0
 1344 0002 1942     		tst	r1, r3
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1345              		.loc 1 1637 0
 1346 0004 0CBF     		ite	eq
 1347 0006 0020     		moveq	r0, #0
 1348 0008 0120     		movne	r0, #1
 1349              	.LVL131:
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1350              		.loc 1 1638 0
 1351 000a 7047     		bx	lr
 1352              		.cfi_endproc
 1353              	.LFE144:
 1355              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1356              		.align	1
 1357              		.global	ADC_ClearFlag
 1358              		.thumb
 1359              		.thumb_func
 1361              	ADC_ClearFlag:
 1362              	.LFB145:
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1363              		.loc 1 1654 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 1368              	.LVL132:
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1369              		.loc 1 1660 0
 1370 0000 C943     		mvns	r1, r1
 1371              	.LVL133:
 1372 0002 0160     		str	r1, [r0, #0]
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1373              		.loc 1 1661 0
 1374 0004 7047     		bx	lr
 1375              		.cfi_endproc
 1376              	.LFE145:
 1378              		.section	.text.ADC_GetITStatus,"ax",%progbits
 1379              		.align	1
 1380              		.global	ADC_GetITStatus
 1381              		.thumb
 1382              		.thumb_func
 1384              	ADC_GetITStatus:
 1385              	.LFB146:
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1386              		.loc 1 1675 0
 1387              		.cfi_startproc
 1388              		@ args = 0, pretend = 0, frame = 0
 1389              		@ frame_needed = 0, uses_anonymous_args = 0
 1390              		@ link register save eliminated.
 1391              	.LVL134:
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1392              		.loc 1 1687 0
 1393 0000 4368     		ldr	r3, [r0, #4]
 1394              	.LVL135:
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1395              		.loc 1 1690 0
 1396 0002 0068     		ldr	r0, [r0, #0]
 1397              	.LVL136:
 1398 0004 10EA1120 		ands	r0, r0, r1, lsr #8
 1399 0008 07D0     		beq	.L93
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1400              		.loc 1 1687 0 discriminator 1
 1401 000a 0122     		movs	r2, #1
 1402 000c C9B2     		uxtb	r1, r1
 1403              	.LVL137:
 1404 000e 12FA01F1 		lsls	r1, r2, r1
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
 1405              		.loc 1 1674 0 discriminator 1
 1406 0012 1942     		tst	r1, r3
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1407              		.loc 1 1693 0 discriminator 1
 1408 0014 0CBF     		ite	eq
 1409 0016 0020     		moveq	r0, #0
 1410 0018 0120     		movne	r0, #1
 1411              	.L93:
 1412              	.LVL138:
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1413              		.loc 1 1702 0
 1414 001a 7047     		bx	lr
 1415              		.cfi_endproc
 1416              	.LFE146:
 1418              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1419              		.align	1
 1420              		.global	ADC_ClearITPendingBit
 1421              		.thumb
 1422              		.thumb_func
 1424              	ADC_ClearITPendingBit:
 1425              	.LFB147:
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1426              		.loc 1 1716 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 0
 1429              		@ frame_needed = 0, uses_anonymous_args = 0
 1430              		@ link register save eliminated.
 1431              	.LVL139:
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1432              		.loc 1 1724 0
 1433 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1434              	.LVL140:
 1435 0004 0160     		str	r1, [r0, #0]
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 1436              		.loc 1 1725 0
 1437 0006 7047     		bx	lr
 1438              		.cfi_endproc
 1439              	.LFE147:
 1441              		.text
 1442              	.Letext0:
 1443              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1444              		.file 3 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 1445              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 1446              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
  C:\Temp\ccEQVRfl.s:19     .text.ADC_DeInit:00000000 $t
  C:\Temp\ccEQVRfl.s:24     .text.ADC_DeInit:00000000 ADC_DeInit
  C:\Temp\ccEQVRfl.s:51     .text.ADC_Init:00000000 $t
  C:\Temp\ccEQVRfl.s:56     .text.ADC_Init:00000000 ADC_Init
  C:\Temp\ccEQVRfl.s:134    .text.ADC_Init:00000048 $d
  C:\Temp\ccEQVRfl.s:139    .text.ADC_StructInit:00000000 $t
  C:\Temp\ccEQVRfl.s:144    .text.ADC_StructInit:00000000 ADC_StructInit
  C:\Temp\ccEQVRfl.s:174    .text.ADC_CommonInit:00000000 $t
  C:\Temp\ccEQVRfl.s:179    .text.ADC_CommonInit:00000000 ADC_CommonInit
  C:\Temp\ccEQVRfl.s:222    .text.ADC_CommonInit:00000020 $d
  C:\Temp\ccEQVRfl.s:228    .text.ADC_CommonStructInit:00000000 $t
  C:\Temp\ccEQVRfl.s:233    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
  C:\Temp\ccEQVRfl.s:256    .text.ADC_Cmd:00000000 $t
  C:\Temp\ccEQVRfl.s:261    .text.ADC_Cmd:00000000 ADC_Cmd
  C:\Temp\ccEQVRfl.s:286    .text.ADC_AnalogWatchdogCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:291    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
  C:\Temp\ccEQVRfl.s:318    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:323    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
  C:\Temp\ccEQVRfl.s:341    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:346    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
  C:\Temp\ccEQVRfl.s:371    .text.ADC_TempSensorVrefintCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:376    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
  C:\Temp\ccEQVRfl.s:401    .text.ADC_TempSensorVrefintCmd:00000014 $d
  C:\Temp\ccEQVRfl.s:406    .text.ADC_VBATCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:411    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
  C:\Temp\ccEQVRfl.s:436    .text.ADC_VBATCmd:00000014 $d
  C:\Temp\ccEQVRfl.s:441    .text.ADC_RegularChannelConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:446    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
  C:\Temp\ccEQVRfl.s:591    .text.ADC_SoftwareStartConv:00000000 $t
  C:\Temp\ccEQVRfl.s:596    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
  C:\Temp\ccEQVRfl.s:614    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
  C:\Temp\ccEQVRfl.s:619    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
  C:\Temp\ccEQVRfl.s:639    .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:644    .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
  C:\Temp\ccEQVRfl.s:669    .text.ADC_ContinuousModeCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:674    .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
  C:\Temp\ccEQVRfl.s:699    .text.ADC_DiscModeChannelCountConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:704    .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
  C:\Temp\ccEQVRfl.s:732    .text.ADC_DiscModeCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:737    .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
  C:\Temp\ccEQVRfl.s:762    .text.ADC_GetConversionValue:00000000 $t
  C:\Temp\ccEQVRfl.s:767    .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
  C:\Temp\ccEQVRfl.s:785    .text.ADC_GetMultiModeConversionValue:00000000 $t
  C:\Temp\ccEQVRfl.s:790    .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
  C:\Temp\ccEQVRfl.s:805    .text.ADC_GetMultiModeConversionValue:00000008 $d
  C:\Temp\ccEQVRfl.s:810    .text.ADC_DMACmd:00000000 $t
  C:\Temp\ccEQVRfl.s:815    .text.ADC_DMACmd:00000000 ADC_DMACmd
  C:\Temp\ccEQVRfl.s:840    .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:845    .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
  C:\Temp\ccEQVRfl.s:870    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:875    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
  C:\Temp\ccEQVRfl.s:900    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000014 $d
  C:\Temp\ccEQVRfl.s:905    .text.ADC_InjectedChannelConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:910    .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
  C:\Temp\ccEQVRfl.s:1006   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:1011   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
  C:\Temp\ccEQVRfl.s:1039   .text.ADC_SetInjectedOffset:00000000 $t
  C:\Temp\ccEQVRfl.s:1044   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
  C:\Temp\ccEQVRfl.s:1077   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:1082   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
  C:\Temp\ccEQVRfl.s:1107   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:1112   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
  C:\Temp\ccEQVRfl.s:1137   .text.ADC_SoftwareStartInjectedConv:00000000 $t
  C:\Temp\ccEQVRfl.s:1142   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
  C:\Temp\ccEQVRfl.s:1160   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
  C:\Temp\ccEQVRfl.s:1165   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
  C:\Temp\ccEQVRfl.s:1185   .text.ADC_AutoInjectedConvCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:1190   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
  C:\Temp\ccEQVRfl.s:1215   .text.ADC_InjectedDiscModeCmd:00000000 $t
  C:\Temp\ccEQVRfl.s:1220   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
  C:\Temp\ccEQVRfl.s:1245   .text.ADC_GetInjectedConversionValue:00000000 $t
  C:\Temp\ccEQVRfl.s:1250   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
  C:\Temp\ccEQVRfl.s:1286   .text.ADC_ITConfig:00000000 $t
  C:\Temp\ccEQVRfl.s:1291   .text.ADC_ITConfig:00000000 ADC_ITConfig
  C:\Temp\ccEQVRfl.s:1327   .text.ADC_GetFlagStatus:00000000 $t
  C:\Temp\ccEQVRfl.s:1332   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
  C:\Temp\ccEQVRfl.s:1356   .text.ADC_ClearFlag:00000000 $t
  C:\Temp\ccEQVRfl.s:1361   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
  C:\Temp\ccEQVRfl.s:1379   .text.ADC_GetITStatus:00000000 $t
  C:\Temp\ccEQVRfl.s:1384   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
  C:\Temp\ccEQVRfl.s:1419   .text.ADC_ClearITPendingBit:00000000 $t
  C:\Temp\ccEQVRfl.s:1424   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
